unint64_t LayerCycleAndFootprintEstimator::GetMaxCycleWithoutStall(LayerCycleAndFootprintEstimator *this, int a2, unsigned int a3)
{
  L2CycleEstimator **v6;
  L2CycleEstimator **v7;
  unint64_t v8;
  L2CycleEstimator *v9;
  unint64_t MaxCycle;
  unint64_t v11;
  unint64_t v12;
  unint64_t result;

  v6 = *(L2CycleEstimator ***)this;
  v7 = (L2CycleEstimator **)*((_QWORD *)this + 1);
  if (*(L2CycleEstimator ***)this == v7)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = *v6++;
      MaxCycle = L2CycleEstimator::GetMaxCycle(v9, a2);
      if (v8 <= MaxCycle)
        v8 = MaxCycle;
    }
    while (v6 != v7);
  }
  v11 = ComputeCycleEstimator::GetMaxCycle(*((ComputeCycleEstimator **)this + 3), a2 & a3);
  if (v8 <= v11)
    v12 = v11;
  else
    v12 = v8;
  result = L2CycleEstimator::GetMaxCycle(*((L2CycleEstimator **)this + 4), a3);
  if (v12 > result)
    return v12;
  return result;
}

unint64_t LayerCycleAndFootprintEstimator::GetMaxCycle(LayerCycleAndFootprintEstimator *this, int a2, unsigned int a3)
{
  char v3;
  unint64_t MaxCycleWithoutStall;

  v3 = a2;
  MaxCycleWithoutStall = LayerCycleAndFootprintEstimator::GetMaxCycleWithoutStall(this, a2, a3);
  if ((v3 & 1) == 0)
    MaxCycleWithoutStall += LayerCycleAndFootprintEstimator::GetOverheadCycles((uint64_t **)this);
  return MaxCycleWithoutStall;
}

uint64_t LayerCycleAndFootprintEstimator::GetOverheadCycles(uint64_t **this)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v6;
  char *v7;

  LayerCycleAndFootprintEstimator::GetReadBehaviors(this, &v6);
  if (v6 == v7)
  {
    v2 = 0;
    if (!v6)
      return this[4][16] + v2;
    goto LABEL_5;
  }
  v2 = 0;
  v3 = v6;
  do
  {
    v4 = *(_QWORD *)v3;
    v3 += 8;
    v2 += *(_QWORD *)(v4 + 120) + 1;
  }
  while (v3 != v7);
  if (v6)
  {
LABEL_5:
    v7 = v6;
    operator delete(v6);
  }
  return this[4][16] + v2;
}

void LayerCycleAndFootprintEstimator::GetReadBehaviors(uint64_t **this@<X0>, char **a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *this;
  v3 = this[1];
  if (*this != v3)
  {
    v5 = 0;
    v6 = a2 + 2;
    do
    {
      v7 = *v2;
      if ((unint64_t)v5 >= *v6)
      {
        v8 = (v5 - *a2) >> 3;
        if ((unint64_t)(v8 + 1) >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v9 = *v6 - (_QWORD)*a2;
        v10 = v9 >> 2;
        if (v9 >> 2 <= (unint64_t)(v8 + 1))
          v10 = v8 + 1;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
          v11 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v11 = v10;
        if (v11)
          v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)v6, v11);
        else
          v12 = 0;
        v13 = &v12[8 * v8];
        *(_QWORD *)v13 = v7;
        v5 = v13 + 8;
        v15 = *a2;
        v14 = a2[1];
        if (v14 != *a2)
        {
          do
          {
            v16 = *((_QWORD *)v14 - 1);
            v14 -= 8;
            *((_QWORD *)v13 - 1) = v16;
            v13 -= 8;
          }
          while (v14 != v15);
          v14 = *a2;
        }
        *a2 = v13;
        a2[1] = v5;
        a2[2] = &v12[8 * v11];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *(_QWORD *)v5 = v7;
        v5 += 8;
      }
      a2[1] = v5;
      ++v2;
    }
    while (v2 != v3);
  }
}

void sub_22D9ABA64(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24F97F070, MEMORY[0x24BEDAAF0]);
}

void sub_22D9ABAD4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

uint64_t ORToolsCpL2AccessVariable::ORToolsCpL2AccessVariable(uint64_t a1, operations_research::sat::CpModelBuilder *a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v8;
  size_t v9;
  std::string *p_p;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  std::string *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  std::string *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  std::string *v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  std::string *v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  size_t v34;
  std::string *v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  size_t v39;
  std::string *v40;
  const void *v41;
  uint64_t v42;
  uint64_t v43;
  size_t v44;
  std::string *v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  size_t v49;
  std::string *v50;
  const void *v51;
  uint64_t v52;
  uint64_t v53;
  size_t v54;
  std::string *v55;
  const void *v56;
  uint64_t v57;
  uint64_t v58;
  size_t v59;
  std::string *v60;
  const void *v61;
  uint64_t v62;
  uint64_t v63;
  size_t v64;
  std::string *v65;
  const void *v66;
  uint64_t v67;
  uint64_t v68;
  size_t v69;
  std::string *v70;
  const void *v71;
  uint64_t v72;
  uint64_t v73;
  size_t v74;
  std::string *v75;
  const void *v76;
  uint64_t v77;
  std::string __p;
  operations_research::sat::CpModelBuilder *v80;
  uint64_t v81;

  v80 = operations_research::sat::CpModelBuilder::NewConstant(a2, *(_QWORD *)a3);
  v81 = v8;
  if (*(char *)(a3 + 159) >= 0)
    v9 = *(unsigned __int8 *)(a3 + 159);
  else
    v9 = *(_QWORD *)(a3 + 144);
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v9 + 20);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v9)
  {
    if (*(char *)(a3 + 159) >= 0)
      v11 = (const void *)(a3 + 136);
    else
      v11 = *(const void **)(a3 + 136);
    memmove(p_p, v11, v9);
  }
  strcpy((char *)p_p + v9, "_resident_time_const");
  *(_QWORD *)a1 = operations_research::sat::BoolVar::WithName((int *)&v80, &__p);
  *(_QWORD *)(a1 + 8) = v12;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v80 = operations_research::sat::CpModelBuilder::NewConstant(a2, *(_QWORD *)(a3 + 16));
  v81 = v13;
  if (*(char *)(a3 + 159) >= 0)
    v14 = *(unsigned __int8 *)(a3 + 159);
  else
    v14 = *(_QWORD *)(a3 + 144);
  v15 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v14 + 23);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v14)
  {
    if (*(char *)(a3 + 159) >= 0)
      v16 = (const void *)(a3 + 136);
    else
      v16 = *(const void **)(a3 + 136);
    memmove(v15, v16, v14);
  }
  strcpy((char *)v15 + v14, "_nonresident_time_const");
  *(_QWORD *)(a1 + 16) = operations_research::sat::BoolVar::WithName((int *)&v80, &__p);
  *(_QWORD *)(a1 + 24) = v17;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v80 = operations_research::sat::CpModelBuilder::NewConstant(a2, *(_QWORD *)(a3 + 32));
  v81 = v18;
  if (*(char *)(a3 + 159) >= 0)
    v19 = *(unsigned __int8 *)(a3 + 159);
  else
    v19 = *(_QWORD *)(a3 + 144);
  v20 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v19 + 41);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v19)
  {
    if (*(char *)(a3 + 159) >= 0)
      v21 = (const void *)(a3 + 136);
    else
      v21 = *(const void **)(a3 + 136);
    memmove(v20, v21, v19);
  }
  strcpy((char *)v20 + v19, "_nonresident_time_if_chain_producer_const");
  *(_QWORD *)(a1 + 32) = operations_research::sat::BoolVar::WithName((int *)&v80, &__p);
  *(_QWORD *)(a1 + 40) = v22;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v80 = operations_research::sat::CpModelBuilder::NewConstant(a2, *(_QWORD *)(a3 + 48));
  v81 = v23;
  if (*(char *)(a3 + 159) >= 0)
    v24 = *(unsigned __int8 *)(a3 + 159);
  else
    v24 = *(_QWORD *)(a3 + 144);
  v25 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v24 + 41);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v24)
  {
    if (*(char *)(a3 + 159) >= 0)
      v26 = (const void *)(a3 + 136);
    else
      v26 = *(const void **)(a3 + 136);
    memmove(v25, v26, v24);
  }
  strcpy((char *)v25 + v24, "_nonresident_time_if_chain_consumer_const");
  *(_QWORD *)(a1 + 48) = operations_research::sat::BoolVar::WithName((int *)&v80, &__p);
  *(_QWORD *)(a1 + 56) = v27;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v80 = operations_research::sat::CpModelBuilder::NewConstant(a2, *(_QWORD *)(a3 + 64));
  v81 = v28;
  if (*(char *)(a3 + 159) >= 0)
    v29 = *(unsigned __int8 *)(a3 + 159);
  else
    v29 = *(_QWORD *)(a3 + 144);
  v30 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v29 + 42);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v29)
  {
    if (*(char *)(a3 + 159) >= 0)
      v31 = (const void *)(a3 + 136);
    else
      v31 = *(const void **)(a3 + 136);
    memmove(v30, v31, v29);
  }
  strcpy((char *)v30 + v29, "_nonresident_time_if_l2_dep_producer_const");
  *(_QWORD *)(a1 + 64) = operations_research::sat::BoolVar::WithName((int *)&v80, &__p);
  *(_QWORD *)(a1 + 72) = v32;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v80 = operations_research::sat::CpModelBuilder::NewConstant(a2, *(_QWORD *)(a3 + 80));
  v81 = v33;
  if (*(char *)(a3 + 159) >= 0)
    v34 = *(unsigned __int8 *)(a3 + 159);
  else
    v34 = *(_QWORD *)(a3 + 144);
  v35 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v34 + 42);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v34)
  {
    if (*(char *)(a3 + 159) >= 0)
      v36 = (const void *)(a3 + 136);
    else
      v36 = *(const void **)(a3 + 136);
    memmove(v35, v36, v34);
  }
  strcpy((char *)v35 + v34, "_nonresident_time_if_l2_dep_consumer_const");
  *(_QWORD *)(a1 + 80) = operations_research::sat::BoolVar::WithName((int *)&v80, &__p);
  *(_QWORD *)(a1 + 88) = v37;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v80 = operations_research::sat::CpModelBuilder::NewConstant(a2, *(_QWORD *)(a3 + 96));
  v81 = v38;
  if (*(char *)(a3 + 159) >= 0)
    v39 = *(unsigned __int8 *)(a3 + 159);
  else
    v39 = *(_QWORD *)(a3 + 144);
  v40 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v39 + 17);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v40 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v39)
  {
    if (*(char *)(a3 + 159) >= 0)
      v41 = (const void *)(a3 + 136);
    else
      v41 = *(const void **)(a3 + 136);
    memmove(v40, v41, v39);
  }
  strcpy((char *)v40 + v39, "_chain_time_const");
  *(_QWORD *)(a1 + 96) = operations_research::sat::BoolVar::WithName((int *)&v80, &__p);
  *(_QWORD *)(a1 + 104) = v42;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v80 = operations_research::sat::CpModelBuilder::NewConstant(a2, *(_QWORD *)(a3 + 8));
  v81 = v43;
  if (*(char *)(a3 + 159) >= 0)
    v44 = *(unsigned __int8 *)(a3 + 159);
  else
    v44 = *(_QWORD *)(a3 + 144);
  v45 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v44 + 20);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v45 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v44)
  {
    if (*(char *)(a3 + 159) >= 0)
      v46 = (const void *)(a3 + 136);
    else
      v46 = *(const void **)(a3 + 136);
    memmove(v45, v46, v44);
  }
  strcpy((char *)v45 + v44, "_resident_cost_const");
  *(_QWORD *)(a1 + 112) = operations_research::sat::BoolVar::WithName((int *)&v80, &__p);
  *(_QWORD *)(a1 + 120) = v47;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v80 = operations_research::sat::CpModelBuilder::NewConstant(a2, *(_QWORD *)(a3 + 24));
  v81 = v48;
  if (*(char *)(a3 + 159) >= 0)
    v49 = *(unsigned __int8 *)(a3 + 159);
  else
    v49 = *(_QWORD *)(a3 + 144);
  v50 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v49 + 23);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v50 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v49)
  {
    if (*(char *)(a3 + 159) >= 0)
      v51 = (const void *)(a3 + 136);
    else
      v51 = *(const void **)(a3 + 136);
    memmove(v50, v51, v49);
  }
  strcpy((char *)v50 + v49, "_nonresident_cost_const");
  *(_QWORD *)(a1 + 128) = operations_research::sat::BoolVar::WithName((int *)&v80, &__p);
  *(_QWORD *)(a1 + 136) = v52;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v80 = operations_research::sat::CpModelBuilder::NewConstant(a2, *(_QWORD *)(a3 + 40));
  v81 = v53;
  if (*(char *)(a3 + 159) >= 0)
    v54 = *(unsigned __int8 *)(a3 + 159);
  else
    v54 = *(_QWORD *)(a3 + 144);
  v55 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v54 + 41);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v55 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v54)
  {
    if (*(char *)(a3 + 159) >= 0)
      v56 = (const void *)(a3 + 136);
    else
      v56 = *(const void **)(a3 + 136);
    memmove(v55, v56, v54);
  }
  strcpy((char *)v55 + v54, "_nonresident_cost_if_chain_producer_const");
  *(_QWORD *)(a1 + 144) = operations_research::sat::BoolVar::WithName((int *)&v80, &__p);
  *(_QWORD *)(a1 + 152) = v57;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v80 = operations_research::sat::CpModelBuilder::NewConstant(a2, *(_QWORD *)(a3 + 56));
  v81 = v58;
  if (*(char *)(a3 + 159) >= 0)
    v59 = *(unsigned __int8 *)(a3 + 159);
  else
    v59 = *(_QWORD *)(a3 + 144);
  v60 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v59 + 41);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v60 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v59)
  {
    if (*(char *)(a3 + 159) >= 0)
      v61 = (const void *)(a3 + 136);
    else
      v61 = *(const void **)(a3 + 136);
    memmove(v60, v61, v59);
  }
  strcpy((char *)v60 + v59, "_nonresident_cost_if_chain_consumer_const");
  *(_QWORD *)(a1 + 160) = operations_research::sat::BoolVar::WithName((int *)&v80, &__p);
  *(_QWORD *)(a1 + 168) = v62;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v80 = operations_research::sat::CpModelBuilder::NewConstant(a2, *(_QWORD *)(a3 + 72));
  v81 = v63;
  if (*(char *)(a3 + 159) >= 0)
    v64 = *(unsigned __int8 *)(a3 + 159);
  else
    v64 = *(_QWORD *)(a3 + 144);
  v65 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v64 + 42);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v65 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v64)
  {
    if (*(char *)(a3 + 159) >= 0)
      v66 = (const void *)(a3 + 136);
    else
      v66 = *(const void **)(a3 + 136);
    memmove(v65, v66, v64);
  }
  strcpy((char *)v65 + v64, "_nonresident_cost_if_l2_dep_producer_const");
  *(_QWORD *)(a1 + 176) = operations_research::sat::BoolVar::WithName((int *)&v80, &__p);
  *(_QWORD *)(a1 + 184) = v67;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v80 = operations_research::sat::CpModelBuilder::NewConstant(a2, *(_QWORD *)(a3 + 88));
  v81 = v68;
  if (*(char *)(a3 + 159) >= 0)
    v69 = *(unsigned __int8 *)(a3 + 159);
  else
    v69 = *(_QWORD *)(a3 + 144);
  v70 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v69 + 42);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v70 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v69)
  {
    if (*(char *)(a3 + 159) >= 0)
      v71 = (const void *)(a3 + 136);
    else
      v71 = *(const void **)(a3 + 136);
    memmove(v70, v71, v69);
  }
  strcpy((char *)v70 + v69, "_nonresident_cost_if_l2_dep_consumer_const");
  *(_QWORD *)(a1 + 192) = operations_research::sat::BoolVar::WithName((int *)&v80, &__p);
  *(_QWORD *)(a1 + 200) = v72;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v80 = operations_research::sat::CpModelBuilder::NewConstant(a2, *(_QWORD *)(a3 + 104));
  v81 = v73;
  if (*(char *)(a3 + 159) >= 0)
    v74 = *(unsigned __int8 *)(a3 + 159);
  else
    v74 = *(_QWORD *)(a3 + 144);
  v75 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v74 + 17);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v75 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v74)
  {
    if (*(char *)(a3 + 159) >= 0)
      v76 = (const void *)(a3 + 136);
    else
      v76 = *(const void **)(a3 + 136);
    memmove(v75, v76, v74);
  }
  strcpy((char *)v75 + v74, "_chain_cost_const");
  *(_QWORD *)(a1 + 208) = operations_research::sat::BoolVar::WithName((int *)&v80, &__p);
  *(_QWORD *)(a1 + 216) = v77;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_OWORD *)(a1 + 224) = *a4;
  *(_OWORD *)(a1 + 240) = a4[1];
  *(_OWORD *)(a1 + 256) = a4[2];
  return a1;
}

void sub_22D9AC500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

uint64_t ORToolsL2DepScheduleVariable::ORToolsL2DepScheduleVariable(uint64_t a1, operations_research::sat::CpModelBuilder *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, char a7, uint64_t a8, uint64_t **a9, uint64_t *a10, uint64_t a11, char a12, operations_research::Domain *a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v23;
  size_t v24;
  std::string *p_p;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  std::string *v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  size_t v34;
  std::string *v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  size_t v39;
  std::string *v40;
  const void *v41;
  uint64_t v42;
  uint64_t v43;
  size_t v44;
  std::string *v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  size_t v49;
  std::string *v50;
  const void *v51;
  uint64_t v52;
  uint64_t v53;
  size_t v54;
  std::string *v55;
  const void *v56;
  uint64_t v57;
  uint64_t v58;
  size_t v59;
  std::string *v60;
  const void *v61;
  uint64_t v62;
  const ComputeCycleEstimator *v63;
  ORToolsCpComputeConstant *v64;
  uint64_t v65;
  uint64_t v66;
  const ComputeCycleEstimator *v67;
  ORToolsCpComputeConstant *v68;
  uint64_t *v69;
  uint64_t v70;
  __int128 *v71;
  __int128 v72;
  __int128 v73;
  char v75;
  _OWORD *v77;
  std::string v78;
  std::string v79;
  std::string __p;
  operations_research::sat::CpModelBuilder *v81;
  uint64_t v82;

  v81 = operations_research::sat::CpModelBuilder::NewConstant(a2, 0);
  v82 = v23;
  if (*(char *)(a3 + 271) >= 0)
    v24 = *(unsigned __int8 *)(a3 + 271);
  else
    v24 = *(_QWORD *)(a3 + 256);
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v24 + 13);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v24)
  {
    if (*(char *)(a3 + 271) >= 0)
      v26 = (const void *)(a3 + 248);
    else
      v26 = *(const void **)(a3 + 248);
    memmove(p_p, v26, v24);
  }
  strcpy((char *)p_p + v24, ":l2_dep_begin");
  v77 = (_OWORD *)(a3 + 248);
  *(_QWORD *)a1 = operations_research::sat::BoolVar::WithName((int *)&v81, &__p);
  *(_QWORD *)(a1 + 8) = v27;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v81 = operations_research::sat::CpModelBuilder::NewIntVar(a2, a13);
  v82 = v28;
  if (*(char *)(a3 + 271) >= 0)
    v29 = *(unsigned __int8 *)(a3 + 271);
  else
    v29 = *(_QWORD *)(a3 + 256);
  v30 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v29 + 12);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v29)
  {
    if (*(char *)(a3 + 271) >= 0)
      v31 = (const void *)(a3 + 248);
    else
      v31 = *(const void **)(a3 + 248);
    memmove(v30, v31, v29);
  }
  strcpy((char *)v30 + v29, ":l2_dep_time");
  *(_QWORD *)(a1 + 16) = operations_research::sat::BoolVar::WithName((int *)&v81, &__p);
  *(_QWORD *)(a1 + 24) = v32;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v81 = operations_research::sat::CpModelBuilder::NewIntVar(a2, a13);
  v82 = v33;
  if (*(char *)(a3 + 271) >= 0)
    v34 = *(unsigned __int8 *)(a3 + 271);
  else
    v34 = *(_QWORD *)(a3 + 256);
  v35 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v34 + 11);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v34)
  {
    if (*(char *)(a3 + 271) >= 0)
      v36 = (const void *)(a3 + 248);
    else
      v36 = *(const void **)(a3 + 248);
    memmove(v35, v36, v34);
  }
  strcpy((char *)v35 + v34, ":l2_dep_end");
  *(_QWORD *)(a1 + 32) = operations_research::sat::BoolVar::WithName((int *)&v81, &__p);
  *(_QWORD *)(a1 + 40) = v37;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*(char *)(a3 + 271) < 0)
  {
    std::string::__init_copy_ctor_external(&v79, *(const std::string::value_type **)(a3 + 248), *(_QWORD *)(a3 + 256));
  }
  else
  {
    *(_OWORD *)&v79.__r_.__value_.__l.__data_ = *v77;
    v79.__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 264);
  }
  v75 = a7;
  LayerCycleAndFootprintEstimator::GetReadBehaviors((uint64_t **)a4, &__p.__r_.__value_.__l.__data_);
  ORToolsL2DepScheduleVariable::CreateReadEndVariables(a2, (const void **)&v79.__r_.__value_.__l.__data_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3, a13, (uint64_t **)(a1 + 48));
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  v81 = operations_research::sat::CpModelBuilder::NewIntVar(a2, a13);
  v82 = v38;
  if (*(char *)(a3 + 271) >= 0)
    v39 = *(unsigned __int8 *)(a3 + 271);
  else
    v39 = *(_QWORD *)(a3 + 256);
  v40 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v39 + 21);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v40 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v39)
  {
    if (*(char *)(a3 + 271) >= 0)
      v41 = (const void *)(a3 + 248);
    else
      v41 = *(const void **)(a3 + 248);
    memmove(v40, v41, v39);
  }
  strcpy((char *)v40 + v39, ":producer_compute_end");
  *(_QWORD *)(a1 + 72) = operations_research::sat::BoolVar::WithName((int *)&v81, &__p);
  *(_QWORD *)(a1 + 80) = v42;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v81 = operations_research::sat::CpModelBuilder::NewIntVar(a2, a13);
  v82 = v43;
  if (*(char *)(a3 + 271) >= 0)
    v44 = *(unsigned __int8 *)(a3 + 271);
  else
    v44 = *(_QWORD *)(a3 + 256);
  v45 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v44 + 19);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v45 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v44)
  {
    if (*(char *)(a3 + 271) >= 0)
      v46 = (const void *)(a3 + 248);
    else
      v46 = *(const void **)(a3 + 248);
    memmove(v45, v46, v44);
  }
  strcpy((char *)v45 + v44, ":prodcuer_write_end");
  *(_QWORD *)(a1 + 88) = operations_research::sat::BoolVar::WithName((int *)&v81, &__p);
  *(_QWORD *)(a1 + 96) = v47;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*(char *)(a8 + 271) < 0)
    std::string::__init_copy_ctor_external(&v78, *(const std::string::value_type **)(a8 + 248), *(_QWORD *)(a8 + 256));
  else
    v78 = *(std::string *)(a8 + 248);
  LayerCycleAndFootprintEstimator::GetReadBehaviors(a9, &__p.__r_.__value_.__l.__data_);
  ORToolsL2DepScheduleVariable::CreateReadEndVariables(a2, (const void **)&v78.__r_.__value_.__l.__data_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3, a13, (uint64_t **)(a1 + 104));
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
  v81 = operations_research::sat::CpModelBuilder::NewIntVar(a2, a13);
  v82 = v48;
  if (*(char *)(a8 + 271) >= 0)
    v49 = *(unsigned __int8 *)(a8 + 271);
  else
    v49 = *(_QWORD *)(a8 + 256);
  v50 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v49 + 21);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v50 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v49)
  {
    if (*(char *)(a8 + 271) >= 0)
      v51 = (const void *)(a8 + 248);
    else
      v51 = *(const void **)(a8 + 248);
    memmove(v50, v51, v49);
  }
  strcpy((char *)v50 + v49, ":consumer_compute_end");
  *(_QWORD *)(a1 + 128) = operations_research::sat::BoolVar::WithName((int *)&v81, &__p);
  *(_QWORD *)(a1 + 136) = v52;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v81 = operations_research::sat::CpModelBuilder::NewIntVar(a2, a13);
  v82 = v53;
  if (*(char *)(a8 + 271) >= 0)
    v54 = *(unsigned __int8 *)(a8 + 271);
  else
    v54 = *(_QWORD *)(a8 + 256);
  v55 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v54 + 19);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v55 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v54)
  {
    if (*(char *)(a8 + 271) >= 0)
      v56 = (const void *)(a8 + 248);
    else
      v56 = *(const void **)(a8 + 248);
    memmove(v55, v56, v54);
  }
  strcpy((char *)v55 + v54, ":consumer_write_end");
  *(_QWORD *)(a1 + 144) = operations_research::sat::BoolVar::WithName((int *)&v81, &__p);
  *(_QWORD *)(a1 + 152) = v57;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a3 + 160);
  v81 = operations_research::sat::CpModelBuilder::NewIntVar(a2, a13);
  v82 = v58;
  if (*(char *)(a3 + 271) >= 0)
    v59 = *(unsigned __int8 *)(a3 + 271);
  else
    v59 = *(_QWORD *)(a3 + 256);
  v60 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v59 + 28);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v60 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v59)
  {
    if (*(char *)(a3 + 271) >= 0)
      v61 = (const void *)(a3 + 248);
    else
      v61 = *(const void **)(a3 + 248);
    memmove(v60, v61, v59);
  }
  strcpy((char *)v60 + v59, "pipeline_stall_overhead_time");
  *(_QWORD *)(a1 + 176) = operations_research::sat::BoolVar::WithName((int *)&v81, &__p);
  *(_QWORD *)(a1 + 184) = v62;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LayerCycleAndFootprintEstimator::GetReadBehaviors((uint64_t **)a4, &__p.__r_.__value_.__l.__data_);
  ORToolsL2DepScheduleVariable::CreateInputL2AccessVariables((uint64_t)a2, (uint64_t *)&__p, a5, (uint64_t **)(a1 + 192));
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v63 = *(const ComputeCycleEstimator **)(a4 + 24);
  v64 = (ORToolsCpComputeConstant *)operator new();
  ORToolsCpComputeConstant::ORToolsCpComputeConstant(v64, a2, v63);
  *(_QWORD *)(a1 + 216) = v64;
  v65 = *(_QWORD *)(a4 + 32);
  v66 = operator new();
  ORToolsCpL2AccessVariable::ORToolsCpL2AccessVariable(v66, a2, v65, a6);
  *(_QWORD *)(a1 + 224) = v66;
  LayerCycleAndFootprintEstimator::GetReadBehaviors(a9, &__p.__r_.__value_.__l.__data_);
  ORToolsL2DepScheduleVariable::CreateInputL2AccessVariables((uint64_t)a2, (uint64_t *)&__p, a10, (uint64_t **)(a1 + 232));
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v67 = (const ComputeCycleEstimator *)a9[3];
  v68 = (ORToolsCpComputeConstant *)operator new();
  ORToolsCpComputeConstant::ORToolsCpComputeConstant(v68, a2, v67);
  *(_QWORD *)(a1 + 256) = v68;
  v69 = a9[4];
  v70 = operator new();
  ORToolsCpL2AccessVariable::ORToolsCpL2AccessVariable(v70, a2, v69, a11);
  *(_QWORD *)(a1 + 264) = v70;
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a3 + 232);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a8 + 232);
  if (*(char *)(a3 + 271) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 288), *(const std::string::value_type **)(a3 + 248), *(_QWORD *)(a3 + 256));
    v71 = (__int128 *)(a8 + 248);
  }
  else
  {
    v71 = (__int128 *)(a8 + 248);
    v72 = *v77;
    *(_QWORD *)(a1 + 304) = *(_QWORD *)(a3 + 264);
    *(_OWORD *)(a1 + 288) = v72;
  }
  if (*(char *)(a8 + 271) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 312), *(const std::string::value_type **)(a8 + 248), *(_QWORD *)(a8 + 256));
  }
  else
  {
    v73 = *v71;
    *(_QWORD *)(a1 + 328) = *((_QWORD *)v71 + 2);
    *(_OWORD *)(a1 + 312) = v73;
  }
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a3 + 240);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a8 + 240);
  *(_QWORD *)(a1 + 352) = a14;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  std::vector<operations_research::sat::BoolVar>::__init_with_size[abi:ne180100]<operations_research::sat::BoolVar*,operations_research::sat::BoolVar*>((_QWORD *)(a1 + 360), *(const void **)a15, *(_QWORD *)(a15 + 8), (uint64_t)(*(_QWORD *)(a15 + 8) - *(_QWORD *)a15) >> 4);
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  std::vector<operations_research::sat::BoolVar>::__init_with_size[abi:ne180100]<operations_research::sat::BoolVar*,operations_research::sat::BoolVar*>((_QWORD *)(a1 + 384), *(const void **)a16, *(_QWORD *)(a16 + 8), (uint64_t)(*(_QWORD *)(a16 + 8) - *(_QWORD *)a16) >> 4);
  *(_BYTE *)(a1 + 408) = v75;
  *(_BYTE *)(a1 + 409) = a12;
  return a1;
}

{
  return ORToolsL2DepScheduleVariable::ORToolsL2DepScheduleVariable(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
}

void sub_22D9ACEE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;
  void **v31;
  void *v33;
  void *v34;

  if (*(char *)(v30 + 311) < 0)
    operator delete(*v31);
  std::unique_ptr<ORToolsCpL2AccessVariable>::reset[abi:ne180100]((ORToolsCpL2AccessVariable **)(v30 + 264), 0);
  std::unique_ptr<ORToolsCpComputeConstant>::reset[abi:ne180100]((ORToolsCpComputeConstant **)(v30 + 256), 0);
  std::vector<std::unique_ptr<ORToolsCpL2AccessVariable>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::unique_ptr<ORToolsCpL2AccessVariable>::reset[abi:ne180100]((ORToolsCpL2AccessVariable **)(v30 + 224), 0);
  std::unique_ptr<ORToolsCpComputeConstant>::reset[abi:ne180100]((ORToolsCpComputeConstant **)(v30 + 216), 0);
  std::vector<std::unique_ptr<ORToolsCpL2AccessVariable>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v33 = *a9;
  if (*a9)
  {
    *(_QWORD *)(v30 + 112) = v33;
    operator delete(v33);
  }
  v34 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v30 + 56) = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

void sub_22D9AD118(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26)
{
  if (__p)
    operator delete(__p);
  if (a24 < 0)
    JUMPOUT(0x22D9AD10CLL);
  JUMPOUT(0x22D9AD110);
}

void sub_22D9AD144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    JUMPOUT(0x22D9AD10CLL);
  JUMPOUT(0x22D9AD110);
}

void ORToolsL2DepScheduleVariable::CreateReadEndVariables(operations_research::sat::CpModelBuilder *a1@<X1>, const void **a2@<X2>, uint64_t a3@<X3>, const operations_research::Domain *a4@<X4>, uint64_t **a5@<X8>)
{
  uint64_t v10;
  size_t v11;
  std::string *p_p;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t *v26;
  char *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  size_t v33;
  std::string *v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t *v48;
  char *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  int v53;
  std::string __p;
  operations_research::sat::CpModelBuilder *v55;
  uint64_t v56;

  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v55 = operations_research::sat::CpModelBuilder::NewIntVar(a1, a4);
  v56 = v10;
  if (*((char *)a2 + 23) >= 0)
    v11 = *((unsigned __int8 *)a2 + 23);
  else
    v11 = (size_t)a2[1];
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v11 + 11);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v11)
  {
    if (*((char *)a2 + 23) >= 0)
      v13 = a2;
    else
      v13 = *a2;
    memmove(p_p, v13, v11);
  }
  strcpy((char *)p_p + v11, ":read_end_0");
  v14 = operations_research::sat::BoolVar::WithName((int *)&v55, &__p);
  v16 = v14;
  v17 = v15;
  v18 = (unint64_t)a5[2];
  v19 = a5[1];
  if ((unint64_t)v19 >= v18)
  {
    v21 = ((char *)v19 - (char *)*a5) >> 4;
    v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 60)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v23 = v18 - (_QWORD)*a5;
    if (v23 >> 3 > v22)
      v22 = v23 >> 3;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
      v24 = 0xFFFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
      v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)(a5 + 2), v24);
    else
      v25 = 0;
    v26 = (uint64_t *)&v25[16 * v21];
    v27 = &v25[16 * v24];
    *v26 = v16;
    v26[1] = v17;
    v20 = v26 + 2;
    v29 = *a5;
    v28 = a5[1];
    if (v28 != *a5)
    {
      do
      {
        v30 = *(v28 - 2);
        v28 -= 2;
        v31 = *((_DWORD *)v28 + 2);
        *(v26 - 2) = v30;
        v26 -= 2;
        *((_DWORD *)v26 + 2) = v31;
      }
      while (v28 != v29);
      v28 = *a5;
    }
    *a5 = v26;
    a5[1] = v20;
    a5[2] = (uint64_t *)v27;
    if (v28)
      operator delete(v28);
  }
  else
  {
    *v19 = v14;
    v19[1] = v15;
    v20 = v19 + 2;
  }
  a5[1] = v20;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (a3 == 2)
  {
    v55 = operations_research::sat::CpModelBuilder::NewIntVar(a1, a4);
    v56 = v32;
    if (*((char *)a2 + 23) >= 0)
      v33 = *((unsigned __int8 *)a2 + 23);
    else
      v33 = (size_t)a2[1];
    v34 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v33 + 11);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v33)
    {
      if (*((char *)a2 + 23) >= 0)
        v35 = a2;
      else
        v35 = *a2;
      memmove(v34, v35, v33);
    }
    strcpy((char *)v34 + v33, ":read_end_1");
    v36 = operations_research::sat::BoolVar::WithName((int *)&v55, &__p);
    v38 = v36;
    v39 = v37;
    v41 = a5[1];
    v40 = (unint64_t)a5[2];
    if ((unint64_t)v41 >= v40)
    {
      v43 = ((char *)v41 - (char *)*a5) >> 4;
      v44 = v43 + 1;
      if ((unint64_t)(v43 + 1) >> 60)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v45 = v40 - (_QWORD)*a5;
      if (v45 >> 3 > v44)
        v44 = v45 >> 3;
      if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0)
        v46 = 0xFFFFFFFFFFFFFFFLL;
      else
        v46 = v44;
      if (v46)
        v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)(a5 + 2), v46);
      else
        v47 = 0;
      v48 = (uint64_t *)&v47[16 * v43];
      v49 = &v47[16 * v46];
      *v48 = v38;
      v48[1] = v39;
      v42 = v48 + 2;
      v51 = *a5;
      v50 = a5[1];
      if (v50 != *a5)
      {
        do
        {
          v52 = *(v50 - 2);
          v50 -= 2;
          v53 = *((_DWORD *)v50 + 2);
          *(v48 - 2) = v52;
          v48 -= 2;
          *((_DWORD *)v48 + 2) = v53;
        }
        while (v50 != v51);
        v50 = *a5;
      }
      *a5 = v48;
      a5[1] = v42;
      a5[2] = (uint64_t *)v49;
      if (v50)
        operator delete(v50);
    }
    else
    {
      *v41 = v36;
      v41[1] = v37;
      v42 = v41 + 2;
    }
    a5[1] = v42;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_22D9AD4A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void *v16;

  v16 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void ORToolsL2DepScheduleVariable::CreateInputL2AccessVariables(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, uint64_t **a4@<X8>)
{
  uint64_t v5;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  int64x2_t v25;
  ORToolsCpL2AccessVariable *v26;
  uint64_t *v27;
  uint64_t v28;
  int64x2_t v29;
  char *v30;
  _QWORD *v31;
  ORToolsCpL2AccessVariable *v32;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v5 = *a2;
  if (a2[1] != *a2)
  {
    v9 = 0;
    do
    {
      v10 = *a3;
      v11 = operator new();
      ORToolsCpL2AccessVariable::ORToolsCpL2AccessVariable(v11, a1, *(_QWORD *)(v5 + 8 * v9), *(_QWORD *)(v10 + 8 * v9));
      v32 = (ORToolsCpL2AccessVariable *)v11;
      v12 = a4[1];
      v13 = (unint64_t)a4[2];
      if ((unint64_t)v12 >= v13)
      {
        v14 = v12 - *a4;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v16 = v13 - (_QWORD)*a4;
        if (v16 >> 2 > v15)
          v15 = v16 >> 2;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        v31 = a4 + 2;
        if (v17)
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)(a4 + 2), v17);
        else
          v18 = 0;
        v19 = (uint64_t *)&v18[8 * v14];
        v20 = &v18[8 * v17];
        v30 = v20;
        v32 = 0;
        *v19 = v11;
        v21 = v19 + 1;
        v29.i64[1] = (uint64_t)(v19 + 1);
        v23 = *a4;
        v22 = a4[1];
        if (v22 == *a4)
        {
          v26 = 0;
          v25 = vdupq_n_s64((unint64_t)v22);
        }
        else
        {
          do
          {
            v24 = *--v22;
            *v22 = 0;
            *--v19 = v24;
          }
          while (v22 != v23);
          v25 = *(int64x2_t *)a4;
          v21 = (uint64_t *)v29.i64[1];
          v20 = v30;
          v26 = v32;
        }
        *a4 = v19;
        a4[1] = v21;
        v29 = v25;
        v27 = a4[2];
        a4[2] = (uint64_t *)v20;
        v30 = (char *)v27;
        v28 = v25.i64[0];
        std::__split_buffer<std::unique_ptr<ORToolsCpL2AccessVariable>>::~__split_buffer((uint64_t)&v28);
        a4[1] = v21;
        if (v26)
        {
          ORToolsCpL2AccessVariable::~ORToolsCpL2AccessVariable(v26);
          MEMORY[0x22E31DF78]();
        }
      }
      else
      {
        v32 = 0;
        *v12 = v11;
        a4[1] = v12 + 1;
      }
      ++v9;
      v5 = *a2;
    }
    while (v9 < (a2[1] - *a2) >> 3);
  }
}

void sub_22D9AD6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::unique_ptr<ORToolsCpL2AccessVariable>::reset[abi:ne180100]((ORToolsCpL2AccessVariable **)va, 0);
  std::vector<std::unique_ptr<ORToolsCpL2AccessVariable>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void ORToolsL2DepScheduleVariable::~ORToolsL2DepScheduleVariable(ORToolsL2DepScheduleVariable *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v6;

  v2 = (void *)*((_QWORD *)this + 48);
  if (v2)
  {
    *((_QWORD *)this + 49) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 45);
  if (v3)
  {
    *((_QWORD *)this + 46) = v3;
    operator delete(v3);
  }
  if (*((char *)this + 335) < 0)
    operator delete(*((void **)this + 39));
  if (*((char *)this + 311) < 0)
    operator delete(*((void **)this + 36));
  std::unique_ptr<ORToolsCpL2AccessVariable>::reset[abi:ne180100]((ORToolsCpL2AccessVariable **)this + 33, 0);
  std::unique_ptr<ORToolsCpComputeConstant>::reset[abi:ne180100]((ORToolsCpComputeConstant **)this + 32, 0);
  v6 = (void **)((char *)this + 232);
  std::vector<std::unique_ptr<ORToolsCpL2AccessVariable>>::__destroy_vector::operator()[abi:ne180100](&v6);
  std::unique_ptr<ORToolsCpL2AccessVariable>::reset[abi:ne180100]((ORToolsCpL2AccessVariable **)this + 28, 0);
  std::unique_ptr<ORToolsCpComputeConstant>::reset[abi:ne180100]((ORToolsCpComputeConstant **)this + 27, 0);
  v6 = (void **)((char *)this + 192);
  std::vector<std::unique_ptr<ORToolsCpL2AccessVariable>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v4 = (void *)*((_QWORD *)this + 13);
  if (v4)
  {
    *((_QWORD *)this + 14) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 6);
  if (v5)
  {
    *((_QWORD *)this + 7) = v5;
    operator delete(v5);
  }
}

void ORToolsL2DepScheduleVariable::CreateLayerConstraint(uint64_t a1, operations_research::sat::CpModelBuilder *a2, uint64_t a3, uint64_t **a4, const operations_research::Domain *a5)
{
  __int128 v6;
  size_t v7;
  std::string *p_p;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  operations_research::sat::CpModelBuilder *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  operations_research::sat::CpModelBuilder *v28;
  operations_research::sat::CpModelBuilder *BooleanAnd;
  int v30;
  uint64_t v31;
  std::string::size_type v32;
  size_t v33;
  std::string *p_str;
  const void *v35;
  std::string *v36;
  std::string::size_type size;
  std::string *v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  operations_research::sat::CpModelBuilder *v49;
  operations_research::sat::CpModelBuilder *v50;
  int v51;
  uint64_t v52;
  std::string::size_type v53;
  size_t v54;
  std::string *v55;
  const void *v56;
  std::string *v57;
  std::string::size_type v58;
  std::string *v59;
  __int128 v60;
  std::string::size_type v61;
  size_t v62;
  std::string *v63;
  const void *v64;
  uint64_t v65;
  std::string::size_type v66;
  size_t v67;
  std::string *v68;
  const void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  std::string::size_type v74;
  size_t v75;
  std::string *v76;
  const void *v77;
  std::string *v78;
  std::string::size_type v79;
  std::string *v80;
  __int128 v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  operations_research::sat::CpModelBuilder *v92;
  operations_research::sat::CpModelBuilder *v93;
  int v94;
  uint64_t v95;
  std::string::size_type v96;
  size_t v97;
  std::string *v98;
  const void *v99;
  std::string *v100;
  std::string::size_type v101;
  std::string *v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  operations_research::sat::CpModelBuilder *v113;
  operations_research::sat::CpModelBuilder *v114;
  int v115;
  uint64_t v116;
  std::string::size_type v117;
  size_t v118;
  std::string *v119;
  const void *v120;
  char *v121;
  std::string *v122;
  std::string::size_type v123;
  std::string *v124;
  __int128 v125;
  std::string::size_type v126;
  size_t v127;
  std::string *v128;
  const void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  operations_research::sat::CpModelBuilder *v138;
  operations_research::sat::CpModelBuilder *v139;
  int v140;
  uint64_t v141;
  std::string::size_type v142;
  size_t v143;
  std::string *v144;
  const void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  operations_research::sat::CpModelBuilder *v154;
  operations_research::sat::CpModelBuilder *v155;
  int v156;
  uint64_t v157;
  std::string::size_type v158;
  size_t v159;
  std::string *v160;
  const void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  size_t v167;
  std::string *v168;
  const void *v169;
  std::string *v170;
  std::string::size_type v171;
  std::string *v172;
  __int128 v173;
  std::string *v174;
  __int128 v175;
  size_t v176;
  std::string *v177;
  const void *v178;
  size_t v179;
  std::string *v180;
  const void *v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  size_t v185;
  std::string *v186;
  const void *v187;
  std::string *v188;
  std::string::size_type v189;
  std::string *v190;
  __int128 v191;
  std::string *v192;
  __int128 v193;
  size_t v194;
  std::string *v195;
  const void *v196;
  size_t v197;
  std::string *v198;
  const void *v199;
  _QWORD *v200;
  unint64_t v201;
  uint64_t v202;
  char *v203;
  operations_research::sat::CpModelBuilder *v204;
  operations_research::sat::CpModelBuilder *v205;
  operations_research::sat::CpModelBuilder *v206;
  operations_research::sat::CpModelBuilder *v207;
  std::string::size_type v208;
  std::string::size_type v209;
  uint64_t v210;
  unint64_t v211;
  int64_t v212;
  unint64_t v213;
  char *v214;
  operations_research::sat::CpModelBuilder **v215;
  _DWORD *v216;
  std::string::size_type v217;
  std::string::size_type v218;
  uint64_t v219;
  int v220;
  uint64_t v221;
  std::string::size_type v222;
  std::string::size_type v223;
  void *v224;
  uint64_t v225;
  unint64_t v226;
  int64_t v227;
  unint64_t v228;
  char *v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  operations_research::sat::CpModelBuilder *v236;
  operations_research::sat::CpModelBuilder *v237;
  operations_research::sat::CpModelBuilder *v238;
  operations_research::sat::CpModelBuilder *v239;
  std::string::size_type v240;
  std::string::size_type v241;
  uint64_t v242;
  unint64_t v243;
  int64_t v244;
  unint64_t v245;
  char *v246;
  operations_research::sat::CpModelBuilder **v247;
  std::string::size_type v248;
  _DWORD *v249;
  std::string::size_type v250;
  operations_research::sat::CpModelBuilder *v251;
  int v252;
  std::string::size_type v253;
  std::string::size_type v254;
  void *v255;
  uint64_t v256;
  unint64_t v257;
  int64_t v258;
  unint64_t v259;
  char *v260;
  char *v261;
  std::string::size_type v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  _QWORD *v269;
  operations_research::sat::CpModelBuilder *v270;
  int v271;
  int v272;
  size_t v273;
  std::string *v274;
  const void *v275;
  int v276;
  int v277;
  int v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  _QWORD *v282;
  operations_research::sat::CpModelBuilder *v283;
  int v284;
  int v285;
  size_t v286;
  std::string *v287;
  const void *v288;
  int v289;
  int v290;
  int v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  _QWORD *v299;
  operations_research::sat::CpModelBuilder *v300;
  int v301;
  int v302;
  size_t v303;
  std::string *v304;
  const void *v305;
  int v306;
  int v307;
  int v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  _QWORD *v313;
  operations_research::sat::CpModelBuilder *v314;
  int v315;
  int v316;
  size_t v317;
  std::string *v318;
  const void *v319;
  int v320;
  int v321;
  int v322;
  uint64_t v323;
  uint64_t v324;
  _QWORD *v325;
  operations_research::sat::CpModelBuilder *v326;
  int v327;
  int v328;
  size_t v329;
  std::string *v330;
  const void *v331;
  int v332;
  int v333;
  int v334;
  _OWORD v337[2];
  int v338[2];
  __int128 v339;
  const void *v340;
  uint64_t v341;
  uint64_t v342;
  operations_research::sat::CpModelBuilder *v343;
  std::string v344;
  std::string v345;
  std::string v346;
  std::string v347;
  std::string v348;
  operations_research::sat::CpModelBuilder *v349;
  std::string __p;
  std::string v351;
  void *v352;
  void *v353;
  std::string v354;
  std::string v355;
  std::string __str;
  int v357;
  std::string v358;
  void *v359;
  void *v360;
  uint64_t v361;

  *(_QWORD *)v338 = a3;
  v343 = a2;
  v361 = *MEMORY[0x24BDAC8D0];
  v341 = *(_QWORD *)(a1 + 168);
  v342 = *(_QWORD *)(a1 + 160);
  operations_research::sat::BoolVar::BoolVar((uint64_t)&v351, ~(_DWORD)v341, v342);
  v6 = *(_OWORD *)&v351.__r_.__value_.__l.__data_;
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v351, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  __str.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 32);
  LODWORD(__str.__r_.__value_.__r.__words[1]) = *(_DWORD *)(a1 + 40);
  __str.__r_.__value_.__r.__words[2] = *(_QWORD *)a1;
  v357 = *(_DWORD *)(a1 + 8);
  *(_OWORD *)&v355.__r_.__value_.__l.__data_ = xmmword_22DCE5B10;
  operations_research::sat::LinearExpr::ScalProd((uint64_t)&__str, 2uLL, (uint64_t *)&v355, 2, (uint64_t)&v358);
  v354.__r_.__value_.__r.__words[0] = (std::string::size_type)operations_research::sat::CpModelBuilder::AddEquality(v343, (const operations_research::sat::LinearExpr *)&v351, (const operations_research::sat::LinearExpr *)&v358);
  if (*(char *)(a1 + 311) >= 0)
    v7 = *(unsigned __int8 *)(a1 + 311);
  else
    v7 = *(_QWORD *)(a1 + 296);
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v7 + 16);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v7)
  {
    if (*(char *)(a1 + 311) >= 0)
      v9 = (const void *)(a1 + 288);
    else
      v9 = *(const void **)(a1 + 288);
    memmove(p_p, v9, v7);
  }
  v340 = (const void *)(a1 + 288);
  strcpy((char *)p_p + v7, ":l2_dep_interval");
  operations_research::sat::Constraint::WithName((uint64_t *)&v354, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v359)
  {
    v360 = v359;
    operator delete(v359);
  }
  if (v358.__r_.__value_.__r.__words[0])
  {
    v358.__r_.__value_.__l.__size_ = v358.__r_.__value_.__r.__words[0];
    operator delete(v358.__r_.__value_.__l.__data_);
  }
  if (v352)
  {
    v353 = v352;
    operator delete(v352);
  }
  if (v351.__r_.__value_.__r.__words[0])
  {
    v351.__r_.__value_.__l.__size_ = v351.__r_.__value_.__r.__words[0];
    operator delete(v351.__r_.__value_.__l.__data_);
  }
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = operations_research::sat::CpModelBuilder::NewConstant(v343, 0);
  operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)v343, v10, v11, (uint64_t)v12, v13, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), v14, v6, SDWORD2(v6));
  v16 = *(_QWORD *)(a1 + 192);
  if (*(_QWORD *)(a1 + 200) != v16)
  {
    v17 = 0;
    v18 = 0;
    do
    {
      v19 = *(_QWORD *)a1;
      v20 = *(_QWORD *)(a1 + 8);
      v21 = *(_QWORD *)(v16 + 8 * v18);
      v22 = *(_QWORD *)v21;
      v23 = *(_QWORD *)(v21 + 8);
      v24 = (uint64_t *)(*(_QWORD *)(a1 + 48) + v17);
      v25 = *v24;
      v26 = v24[1];
      v354.__r_.__value_.__r.__words[0] = *(_QWORD *)(v21 + 224);
      LODWORD(v354.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v21 + 232);
      v27 = operator new(0x20uLL);
      v351.__r_.__value_.__l.__size_ = (std::string::size_type)(v27 + 4);
      v351.__r_.__value_.__r.__words[2] = (std::string::size_type)(v27 + 4);
      *(_OWORD *)v27 = *(_OWORD *)&v354.__r_.__value_.__l.__data_;
      v28 = v343;
      v27[2] = v342;
      *((_DWORD *)v27 + 6) = v341;
      v351.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
      BooleanAnd = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v343, (uint64_t *)&v351);
      v355.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)v28, v19, v20, v22, v23, v25, v26, v31, (uint64_t)BooleanAnd, v30);
      v355.__r_.__value_.__l.__size_ = v32;
      if (*(char *)(a1 + 311) >= 0)
        v33 = *(unsigned __int8 *)(a1 + 311);
      else
        v33 = *(_QWORD *)(a1 + 296);
      std::string::basic_string[abi:ne180100]((uint64_t)&__str, v33 + 44);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_str = &__str;
      else
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (v33)
      {
        if (*(char *)(a1 + 311) >= 0)
          v35 = v340;
        else
          v35 = *(const void **)(a1 + 288);
        memmove(p_str, v35, v33);
      }
      strcpy((char *)p_str + v33, ":l2_dep_producer_resident_read_time_interval");
      std::to_string(&__p, v18);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = &__p;
      else
        v36 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      v38 = std::string::append(&__str, (const std::string::value_type *)v36, size);
      v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v358.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v358.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      operations_research::sat::IntervalVar::WithName((int *)&v355, &v358);
      if (SHIBYTE(v358.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v358.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (v351.__r_.__value_.__r.__words[0])
      {
        v351.__r_.__value_.__l.__size_ = v351.__r_.__value_.__r.__words[0];
        operator delete(v351.__r_.__value_.__l.__data_);
      }
      v40 = *(_QWORD *)a1;
      v41 = *(_QWORD *)(a1 + 8);
      v42 = *(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * v18);
      v43 = *(_QWORD *)(v42 + 64);
      v44 = *(_QWORD *)(v42 + 72);
      v45 = (uint64_t *)(*(_QWORD *)(a1 + 48) + v17);
      v47 = *v45;
      v46 = v45[1];
      v354.__r_.__value_.__r.__words[0] = *(_QWORD *)(v42 + 240);
      LODWORD(v354.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v42 + 248);
      v48 = operator new(0x20uLL);
      v351.__r_.__value_.__l.__size_ = (std::string::size_type)(v48 + 4);
      v351.__r_.__value_.__r.__words[2] = (std::string::size_type)(v48 + 4);
      *(_OWORD *)v48 = *(_OWORD *)&v354.__r_.__value_.__l.__data_;
      v49 = v343;
      v48[2] = v342;
      *((_DWORD *)v48 + 6) = v341;
      v351.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
      v50 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v343, (uint64_t *)&v351);
      v355.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)v49, v40, v41, v43, v44, v47, v46, v52, (uint64_t)v50, v51);
      v355.__r_.__value_.__l.__size_ = v53;
      if (*(char *)(a1 + 311) >= 0)
        v54 = *(unsigned __int8 *)(a1 + 311);
      else
        v54 = *(_QWORD *)(a1 + 296);
      std::string::basic_string[abi:ne180100]((uint64_t)&__str, v54 + 47);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v55 = &__str;
      else
        v55 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (v54)
      {
        if (*(char *)(a1 + 311) >= 0)
          v56 = v340;
        else
          v56 = *(const void **)(a1 + 288);
        memmove(v55, v56, v54);
      }
      strcpy((char *)v55 + v54, ":l2_dep_producer_nonresident_read_time_interval");
      std::to_string(&__p, v18);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v57 = &__p;
      else
        v57 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v58 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v58 = __p.__r_.__value_.__l.__size_;
      v59 = std::string::append(&__str, (const std::string::value_type *)v57, v58);
      v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
      v358.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v358.__r_.__value_.__l.__data_ = v60;
      v59->__r_.__value_.__l.__size_ = 0;
      v59->__r_.__value_.__r.__words[2] = 0;
      v59->__r_.__value_.__r.__words[0] = 0;
      operations_research::sat::IntervalVar::WithName((int *)&v355, &v358);
      if (SHIBYTE(v358.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v358.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (v351.__r_.__value_.__r.__words[0])
      {
        v351.__r_.__value_.__l.__size_ = v351.__r_.__value_.__r.__words[0];
        operator delete(v351.__r_.__value_.__l.__data_);
      }
      ++v18;
      v16 = *(_QWORD *)(a1 + 192);
      v17 += 16;
    }
    while (v18 < (*(_QWORD *)(a1 + 200) - v16) >> 3);
  }
  v358.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)v343, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), **(_QWORD **)(a1 + 216), *(_QWORD *)(*(_QWORD *)(a1 + 216) + 8), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), v15, v342, v341);
  v358.__r_.__value_.__l.__size_ = v61;
  if (*(char *)(a1 + 311) >= 0)
    v62 = *(unsigned __int8 *)(a1 + 311);
  else
    v62 = *(_QWORD *)(a1 + 296);
  std::string::basic_string[abi:ne180100]((uint64_t)&v351, v62 + 38);
  if ((v351.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v63 = &v351;
  else
    v63 = (std::string *)v351.__r_.__value_.__r.__words[0];
  if (v62)
  {
    if (*(char *)(a1 + 311) >= 0)
      v64 = v340;
    else
      v64 = *(const void **)(a1 + 288);
    memmove(v63, v64, v62);
  }
  strcpy((char *)v63 + v62, ":l2_dep_producer_compute_time_interval");
  operations_research::sat::IntervalVar::WithName((int *)&v358, &v351);
  if (SHIBYTE(v351.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v351.__r_.__value_.__l.__data_);
  v358.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)v343, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), **(_QWORD **)(a1 + 224), *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), v65, v342, v341);
  v358.__r_.__value_.__l.__size_ = v66;
  if (*(char *)(a1 + 311) >= 0)
    v67 = *(unsigned __int8 *)(a1 + 311);
  else
    v67 = *(_QWORD *)(a1 + 296);
  std::string::basic_string[abi:ne180100]((uint64_t)&v351, v67 + 36);
  if ((v351.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v68 = &v351;
  else
    v68 = (std::string *)v351.__r_.__value_.__r.__words[0];
  if (v67)
  {
    if (*(char *)(a1 + 311) >= 0)
      v69 = v340;
    else
      v69 = *(const void **)(a1 + 288);
    memmove(v68, v69, v67);
  }
  strcpy((char *)v68 + v67, ":l2_dep_producer_write_time_interval");
  operations_research::sat::IntervalVar::WithName((int *)&v358, &v351);
  if (SHIBYTE(v351.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v351.__r_.__value_.__l.__data_);
  v71 = *(_QWORD *)(a1 + 232);
  if (*(_QWORD *)(a1 + 240) != v71)
  {
    v72 = 0;
    v73 = 0;
    do
    {
      if (v73 == *(_QWORD *)(a1 + 352))
      {
        __p.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)v343, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), **(_QWORD **)(v71 + 8 * v73), *(_QWORD *)(*(_QWORD *)(v71 + 8 * v73) + 8), *(_QWORD *)(*(_QWORD *)(a1 + 104) + v72), *(_QWORD *)(*(_QWORD *)(a1 + 104) + v72 + 8), v70, v342, v341);
        __p.__r_.__value_.__l.__size_ = v74;
        if (*(char *)(a1 + 335) >= 0)
          v75 = *(unsigned __int8 *)(a1 + 335);
        else
          v75 = *(_QWORD *)(a1 + 320);
        std::string::basic_string[abi:ne180100]((uint64_t)&v358, v75 + 40);
        if ((v358.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v76 = &v358;
        else
          v76 = (std::string *)v358.__r_.__value_.__r.__words[0];
        if (v75)
        {
          if (*(char *)(a1 + 335) >= 0)
            v77 = (const void *)(a1 + 312);
          else
            v77 = *(const void **)(a1 + 312);
          memmove(v76, v77, v75);
        }
        strcpy((char *)v76 + v75, ":l2_dep_consumer_resident_read_interval_");
        std::to_string(&__str, v73);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v78 = &__str;
        else
          v78 = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v79 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          v79 = __str.__r_.__value_.__l.__size_;
        v80 = std::string::append(&v358, (const std::string::value_type *)v78, v79);
        v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
        v351.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v351.__r_.__value_.__l.__data_ = v81;
        v80->__r_.__value_.__l.__size_ = 0;
        v80->__r_.__value_.__r.__words[2] = 0;
        v80->__r_.__value_.__r.__words[0] = 0;
        operations_research::sat::IntervalVar::WithName((int *)&__p, &v351);
        if (SHIBYTE(v351.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v351.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v358.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_177;
        v82 = (void *)v358.__r_.__value_.__r.__words[0];
      }
      else
      {
        v83 = *(_QWORD *)a1;
        v84 = *(_QWORD *)(a1 + 8);
        v85 = *(_QWORD *)(v71 + 8 * v73);
        v86 = *(_QWORD *)v85;
        v87 = *(_QWORD *)(v85 + 8);
        v88 = (uint64_t *)(*(_QWORD *)(a1 + 104) + v72);
        v89 = *v88;
        v90 = v88[1];
        v354.__r_.__value_.__r.__words[0] = *(_QWORD *)(v85 + 224);
        LODWORD(v354.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v85 + 232);
        v91 = operator new(0x20uLL);
        v351.__r_.__value_.__l.__size_ = (std::string::size_type)(v91 + 4);
        v351.__r_.__value_.__r.__words[2] = (std::string::size_type)(v91 + 4);
        *(_OWORD *)v91 = *(_OWORD *)&v354.__r_.__value_.__l.__data_;
        v92 = v343;
        v91[2] = v342;
        *((_DWORD *)v91 + 6) = v341;
        v351.__r_.__value_.__r.__words[0] = (std::string::size_type)v91;
        v93 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v343, (uint64_t *)&v351);
        v355.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)v92, v83, v84, v86, v87, v89, v90, v95, (uint64_t)v93, v94);
        v355.__r_.__value_.__l.__size_ = v96;
        if (*(char *)(a1 + 335) >= 0)
          v97 = *(unsigned __int8 *)(a1 + 335);
        else
          v97 = *(_QWORD *)(a1 + 320);
        std::string::basic_string[abi:ne180100]((uint64_t)&__str, v97 + 43);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v98 = &__str;
        else
          v98 = (std::string *)__str.__r_.__value_.__r.__words[0];
        if (v97)
        {
          if (*(char *)(a1 + 335) >= 0)
            v99 = (const void *)(a1 + 312);
          else
            v99 = *(const void **)(a1 + 312);
          memmove(v98, v99, v97);
        }
        v339 = *(_OWORD *)":l2_dep_consumer_nonresident_read_interval_";
        strcpy((char *)v98 + v97, ":l2_dep_consumer_nonresident_read_interval_");
        qmemcpy(v337, "t_read_interval__nonresident_rea", sizeof(v337));
        std::to_string(&__p, v73);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v100 = &__p;
        else
          v100 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v101 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v101 = __p.__r_.__value_.__l.__size_;
        v102 = std::string::append(&__str, (const std::string::value_type *)v100, v101);
        v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
        v358.__r_.__value_.__r.__words[2] = v102->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v358.__r_.__value_.__l.__data_ = v103;
        v102->__r_.__value_.__l.__size_ = 0;
        v102->__r_.__value_.__r.__words[2] = 0;
        v102->__r_.__value_.__r.__words[0] = 0;
        operations_research::sat::IntervalVar::WithName((int *)&v355, &v358);
        if (SHIBYTE(v358.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v358.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (v351.__r_.__value_.__r.__words[0])
        {
          v351.__r_.__value_.__l.__size_ = v351.__r_.__value_.__r.__words[0];
          operator delete(v351.__r_.__value_.__l.__data_);
        }
        v104 = *(_QWORD *)a1;
        v105 = *(_QWORD *)(a1 + 8);
        v106 = *(_QWORD *)(*(_QWORD *)(a1 + 232) + 8 * v73);
        v107 = *(_QWORD *)(v106 + 80);
        v108 = *(_QWORD *)(v106 + 88);
        v109 = (uint64_t *)(*(_QWORD *)(a1 + 104) + v72);
        v110 = *v109;
        v111 = v109[1];
        v354.__r_.__value_.__r.__words[0] = *(_QWORD *)(v106 + 240);
        LODWORD(v354.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v106 + 248);
        v112 = operator new(0x20uLL);
        v351.__r_.__value_.__l.__size_ = (std::string::size_type)(v112 + 4);
        v351.__r_.__value_.__r.__words[2] = (std::string::size_type)(v112 + 4);
        *(_OWORD *)v112 = *(_OWORD *)&v354.__r_.__value_.__l.__data_;
        v113 = v343;
        v112[2] = v342;
        *((_DWORD *)v112 + 6) = v341;
        v351.__r_.__value_.__r.__words[0] = (std::string::size_type)v112;
        v114 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v343, (uint64_t *)&v351);
        v355.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)v113, v104, v105, v107, v108, v110, v111, v116, (uint64_t)v114, v115);
        v355.__r_.__value_.__l.__size_ = v117;
        if (*(char *)(a1 + 335) >= 0)
          v118 = *(unsigned __int8 *)(a1 + 335);
        else
          v118 = *(_QWORD *)(a1 + 320);
        std::string::basic_string[abi:ne180100]((uint64_t)&__str, v118 + 43);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v119 = &__str;
        else
          v119 = (std::string *)__str.__r_.__value_.__r.__words[0];
        if (v118)
        {
          if (*(char *)(a1 + 335) >= 0)
            v120 = (const void *)(a1 + 312);
          else
            v120 = *(const void **)(a1 + 312);
          memmove(v119, v120, v118);
        }
        v121 = (char *)v119 + v118;
        *(_OWORD *)v121 = v339;
        *((_OWORD *)v121 + 1) = v337[1];
        *(_OWORD *)(v121 + 27) = v337[0];
        v121[43] = 0;
        std::to_string(&__p, v73);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v122 = &__p;
        else
          v122 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v123 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v123 = __p.__r_.__value_.__l.__size_;
        v124 = std::string::append(&__str, (const std::string::value_type *)v122, v123);
        v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
        v358.__r_.__value_.__r.__words[2] = v124->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v358.__r_.__value_.__l.__data_ = v125;
        v124->__r_.__value_.__l.__size_ = 0;
        v124->__r_.__value_.__r.__words[2] = 0;
        v124->__r_.__value_.__r.__words[0] = 0;
        operations_research::sat::IntervalVar::WithName((int *)&v355, &v358);
        if (SHIBYTE(v358.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v358.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        v82 = (void *)v351.__r_.__value_.__r.__words[0];
        if (!v351.__r_.__value_.__r.__words[0])
          goto LABEL_177;
        v351.__r_.__value_.__l.__size_ = v351.__r_.__value_.__r.__words[0];
      }
      operator delete(v82);
LABEL_177:
      ++v73;
      v71 = *(_QWORD *)(a1 + 232);
      v72 += 16;
    }
    while (v73 < (*(_QWORD *)(a1 + 240) - v71) >> 3);
  }
  v358.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)v343, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), **(_QWORD **)(a1 + 256), *(_QWORD *)(*(_QWORD *)(a1 + 256) + 8), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), v70, v342, v341);
  v358.__r_.__value_.__l.__size_ = v126;
  if (*(char *)(a1 + 335) >= 0)
    v127 = *(unsigned __int8 *)(a1 + 335);
  else
    v127 = *(_QWORD *)(a1 + 320);
  std::string::basic_string[abi:ne180100]((uint64_t)&v351, v127 + 42);
  if ((v351.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v128 = &v351;
  else
    v128 = (std::string *)v351.__r_.__value_.__r.__words[0];
  if (v127)
  {
    if (*(char *)(a1 + 335) >= 0)
      v129 = (const void *)(a1 + 312);
    else
      v129 = *(const void **)(a1 + 312);
    memmove(v128, v129, v127);
  }
  *(_QWORD *)&v337[1] = a1 + 312;
  strcpy((char *)v128 + v127, ":l2_dep_consumer_compute_resident_interval");
  operations_research::sat::IntervalVar::WithName((int *)&v358, &v351);
  if (SHIBYTE(v351.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v351.__r_.__value_.__l.__data_);
  v130 = *(_QWORD *)a1;
  v131 = *(_QWORD *)(a1 + 8);
  v132 = *(_QWORD *)(a1 + 264);
  v133 = *(_QWORD *)v132;
  v134 = *(_QWORD *)(v132 + 8);
  v135 = *(_QWORD *)(a1 + 144);
  v136 = *(_QWORD *)(a1 + 152);
  __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(v132 + 224);
  LODWORD(__p.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v132 + 232);
  v137 = operator new(0x20uLL);
  v351.__r_.__value_.__r.__words[0] = (std::string::size_type)v137;
  v351.__r_.__value_.__r.__words[2] = (std::string::size_type)(v137 + 4);
  *(_OWORD *)v137 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  v138 = v343;
  v137[2] = v342;
  *((_DWORD *)v137 + 6) = v341;
  v351.__r_.__value_.__l.__size_ = (std::string::size_type)(v137 + 4);
  v139 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v343, (uint64_t *)&v351);
  __str.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)v138, v130, v131, v133, v134, v135, v136, v141, (uint64_t)v139, v140);
  __str.__r_.__value_.__l.__size_ = v142;
  if (*(char *)(a1 + 335) >= 0)
    v143 = *(unsigned __int8 *)(a1 + 335);
  else
    v143 = *(_QWORD *)(a1 + 320);
  std::string::basic_string[abi:ne180100]((uint64_t)&v358, v143 + 45);
  if ((v358.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v144 = &v358;
  else
    v144 = (std::string *)v358.__r_.__value_.__r.__words[0];
  if (v143)
  {
    if (*(char *)(a1 + 335) >= 0)
      v145 = *(const void **)&v337[1];
    else
      v145 = *(const void **)(a1 + 312);
    memmove(v144, v145, v143);
  }
  strcpy((char *)v144 + v143, ":l2_dep_consumer_resident_write_time_interval");
  operations_research::sat::IntervalVar::WithName((int *)&__str, &v358);
  if (SHIBYTE(v358.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v358.__r_.__value_.__l.__data_);
  if (v351.__r_.__value_.__r.__words[0])
  {
    v351.__r_.__value_.__l.__size_ = v351.__r_.__value_.__r.__words[0];
    operator delete(v351.__r_.__value_.__l.__data_);
  }
  v146 = *(_QWORD *)a1;
  v147 = *(_QWORD *)(a1 + 8);
  v148 = *(_QWORD *)(a1 + 264);
  v149 = *(_QWORD *)(v148 + 80);
  v150 = *(_QWORD *)(v148 + 88);
  v151 = *(_QWORD *)(a1 + 144);
  v152 = *(_QWORD *)(a1 + 152);
  __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(v148 + 240);
  LODWORD(__p.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v148 + 248);
  v153 = operator new(0x20uLL);
  v351.__r_.__value_.__r.__words[0] = (std::string::size_type)v153;
  v351.__r_.__value_.__r.__words[2] = (std::string::size_type)(v153 + 4);
  *(_OWORD *)v153 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  v154 = v343;
  v153[2] = v342;
  *((_DWORD *)v153 + 6) = v341;
  v351.__r_.__value_.__l.__size_ = (std::string::size_type)(v153 + 4);
  v155 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v343, (uint64_t *)&v351);
  __str.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)v154, v146, v147, v149, v150, v151, v152, v157, (uint64_t)v155, v156);
  __str.__r_.__value_.__l.__size_ = v158;
  if (*(char *)(a1 + 335) >= 0)
    v159 = *(unsigned __int8 *)(a1 + 335);
  else
    v159 = *(_QWORD *)(a1 + 320);
  std::string::basic_string[abi:ne180100]((uint64_t)&v358, v159 + 48);
  if ((v358.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v160 = &v358;
  else
    v160 = (std::string *)v358.__r_.__value_.__r.__words[0];
  if (v159)
  {
    if (*(char *)(a1 + 335) >= 0)
      v161 = *(const void **)&v337[1];
    else
      v161 = *(const void **)(a1 + 312);
    memmove(v160, v161, v159);
  }
  strcpy((char *)v160 + v159, ":l2_dep_consumer_nonresident_write_time_interval");
  operations_research::sat::IntervalVar::WithName((int *)&__str, &v358);
  if (SHIBYTE(v358.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v358.__r_.__value_.__l.__data_);
  if (v351.__r_.__value_.__r.__words[0])
  {
    v351.__r_.__value_.__l.__size_ = v351.__r_.__value_.__r.__words[0];
    operator delete(v351.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&v339 = operations_research::sat::CpModelBuilder::NewIntVar(v343, a5);
  v163 = v162;
  v164 = *(_QWORD *)(a1 + 48);
  if (*(_QWORD *)(a1 + 56) != v164)
  {
    v165 = 0;
    v166 = 0;
    do
    {
      operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v351, *(_QWORD *)(v164 + v165), *(_QWORD *)(v164 + v165 + 8));
      operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v358, v339, v163);
      v349 = operations_research::sat::CpModelBuilder::AddLessOrEqual(v343, (const operations_research::sat::LinearExpr *)&v351, (const operations_research::sat::LinearExpr *)&v358);
      if (*(char *)(a1 + 311) >= 0)
        v167 = *(unsigned __int8 *)(a1 + 311);
      else
        v167 = *(_QWORD *)(a1 + 296);
      std::string::basic_string[abi:ne180100]((uint64_t)&v355, v167 + 22);
      if ((v355.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v168 = &v355;
      else
        v168 = (std::string *)v355.__r_.__value_.__r.__words[0];
      if (v167)
      {
        if (*(char *)(a1 + 311) >= 0)
          v169 = v340;
        else
          v169 = *(const void **)(a1 + 288);
        memmove(v168, v169, v167);
      }
      strcpy((char *)v168 + v167, ":l2_dep_producer_read_");
      std::to_string(&v354, v166);
      if ((v354.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v170 = &v354;
      else
        v170 = (std::string *)v354.__r_.__value_.__r.__words[0];
      if ((v354.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v171 = HIBYTE(v354.__r_.__value_.__r.__words[2]);
      else
        v171 = v354.__r_.__value_.__l.__size_;
      v172 = std::string::append(&v355, (const std::string::value_type *)v170, v171);
      v173 = *(_OWORD *)&v172->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v172->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v173;
      v172->__r_.__value_.__l.__size_ = 0;
      v172->__r_.__value_.__r.__words[2] = 0;
      v172->__r_.__value_.__r.__words[0] = 0;
      v174 = std::string::append(&__p, "_end_constraint", 0xFuLL);
      v175 = *(_OWORD *)&v174->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v174->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v175;
      v174->__r_.__value_.__l.__size_ = 0;
      v174->__r_.__value_.__r.__words[2] = 0;
      v174->__r_.__value_.__r.__words[0] = 0;
      operations_research::sat::Constraint::WithName((uint64_t *)&v349, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v354.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v354.__r_.__value_.__l.__data_);
      if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v355.__r_.__value_.__l.__data_);
      if (v359)
      {
        v360 = v359;
        operator delete(v359);
      }
      if (v358.__r_.__value_.__r.__words[0])
      {
        v358.__r_.__value_.__l.__size_ = v358.__r_.__value_.__r.__words[0];
        operator delete(v358.__r_.__value_.__l.__data_);
      }
      if (v352)
      {
        v353 = v352;
        operator delete(v352);
      }
      if (v351.__r_.__value_.__r.__words[0])
      {
        v351.__r_.__value_.__l.__size_ = v351.__r_.__value_.__r.__words[0];
        operator delete(v351.__r_.__value_.__l.__data_);
      }
      ++v166;
      v164 = *(_QWORD *)(a1 + 48);
      v165 += 16;
    }
    while (v166 < (*(_QWORD *)(a1 + 56) - v164) >> 4);
  }
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v351, *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80));
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v358, v339, v163);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operations_research::sat::CpModelBuilder::AddLessOrEqual(v343, (const operations_research::sat::LinearExpr *)&v351, (const operations_research::sat::LinearExpr *)&v358);
  if (*(char *)(a1 + 311) >= 0)
    v176 = *(unsigned __int8 *)(a1 + 311);
  else
    v176 = *(_QWORD *)(a1 + 296);
  std::string::basic_string[abi:ne180100]((uint64_t)&__str, v176 + 39);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v177 = &__str;
  else
    v177 = (std::string *)__str.__r_.__value_.__r.__words[0];
  if (v176)
  {
    if (*(char *)(a1 + 311) >= 0)
      v178 = v340;
    else
      v178 = *(const void **)(a1 + 288);
    memmove(v177, v178, v176);
  }
  strcpy((char *)v177 + v176, ":l2_dep_producer_compute_end_constraint");
  operations_research::sat::Constraint::WithName((uint64_t *)&__p, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v359)
  {
    v360 = v359;
    operator delete(v359);
  }
  if (v358.__r_.__value_.__r.__words[0])
  {
    v358.__r_.__value_.__l.__size_ = v358.__r_.__value_.__r.__words[0];
    operator delete(v358.__r_.__value_.__l.__data_);
  }
  if (v352)
  {
    v353 = v352;
    operator delete(v352);
  }
  if (v351.__r_.__value_.__r.__words[0])
  {
    v351.__r_.__value_.__l.__size_ = v351.__r_.__value_.__r.__words[0];
    operator delete(v351.__r_.__value_.__l.__data_);
  }
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v351, *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96));
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v358, v339, v163);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operations_research::sat::CpModelBuilder::AddLessOrEqual(v343, (const operations_research::sat::LinearExpr *)&v351, (const operations_research::sat::LinearExpr *)&v358);
  if (*(char *)(a1 + 311) >= 0)
    v179 = *(unsigned __int8 *)(a1 + 311);
  else
    v179 = *(_QWORD *)(a1 + 296);
  std::string::basic_string[abi:ne180100]((uint64_t)&__str, v179 + 37);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v180 = &__str;
  else
    v180 = (std::string *)__str.__r_.__value_.__r.__words[0];
  if (v179)
  {
    if (*(char *)(a1 + 311) >= 0)
      v181 = v340;
    else
      v181 = *(const void **)(a1 + 288);
    memmove(v180, v181, v179);
  }
  strcpy((char *)v180 + v179, ":l2_dep_producer_write_end_constraint");
  operations_research::sat::Constraint::WithName((uint64_t *)&__p, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v359)
  {
    v360 = v359;
    operator delete(v359);
  }
  if (v358.__r_.__value_.__r.__words[0])
  {
    v358.__r_.__value_.__l.__size_ = v358.__r_.__value_.__r.__words[0];
    operator delete(v358.__r_.__value_.__l.__data_);
  }
  if (v352)
  {
    v353 = v352;
    operator delete(v352);
  }
  if (v351.__r_.__value_.__r.__words[0])
  {
    v351.__r_.__value_.__l.__size_ = v351.__r_.__value_.__r.__words[0];
    operator delete(v351.__r_.__value_.__l.__data_);
  }
  v182 = *(_QWORD *)(a1 + 104);
  if (*(_QWORD *)(a1 + 112) != v182)
  {
    v183 = 0;
    v184 = 0;
    do
    {
      operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v351, *(_QWORD *)(v182 + v183), *(_QWORD *)(v182 + v183 + 8));
      operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v358, v339, v163);
      v349 = operations_research::sat::CpModelBuilder::AddLessOrEqual(v343, (const operations_research::sat::LinearExpr *)&v351, (const operations_research::sat::LinearExpr *)&v358);
      if (*(char *)(a1 + 335) >= 0)
        v185 = *(unsigned __int8 *)(a1 + 335);
      else
        v185 = *(_QWORD *)(a1 + 320);
      std::string::basic_string[abi:ne180100]((uint64_t)&v355, v185 + 22);
      if ((v355.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v186 = &v355;
      else
        v186 = (std::string *)v355.__r_.__value_.__r.__words[0];
      if (v185)
      {
        if (*(char *)(a1 + 335) >= 0)
          v187 = *(const void **)&v337[1];
        else
          v187 = *(const void **)(a1 + 312);
        memmove(v186, v187, v185);
      }
      strcpy((char *)v186 + v185, ":l2_dep_consumer_read_");
      std::to_string(&v354, v184);
      if ((v354.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v188 = &v354;
      else
        v188 = (std::string *)v354.__r_.__value_.__r.__words[0];
      if ((v354.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v189 = HIBYTE(v354.__r_.__value_.__r.__words[2]);
      else
        v189 = v354.__r_.__value_.__l.__size_;
      v190 = std::string::append(&v355, (const std::string::value_type *)v188, v189);
      v191 = *(_OWORD *)&v190->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v190->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v191;
      v190->__r_.__value_.__l.__size_ = 0;
      v190->__r_.__value_.__r.__words[2] = 0;
      v190->__r_.__value_.__r.__words[0] = 0;
      v192 = std::string::append(&__p, "_end_constraint", 0xFuLL);
      v193 = *(_OWORD *)&v192->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v192->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v193;
      v192->__r_.__value_.__l.__size_ = 0;
      v192->__r_.__value_.__r.__words[2] = 0;
      v192->__r_.__value_.__r.__words[0] = 0;
      operations_research::sat::Constraint::WithName((uint64_t *)&v349, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v354.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v354.__r_.__value_.__l.__data_);
      if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v355.__r_.__value_.__l.__data_);
      if (v359)
      {
        v360 = v359;
        operator delete(v359);
      }
      if (v358.__r_.__value_.__r.__words[0])
      {
        v358.__r_.__value_.__l.__size_ = v358.__r_.__value_.__r.__words[0];
        operator delete(v358.__r_.__value_.__l.__data_);
      }
      if (v352)
      {
        v353 = v352;
        operator delete(v352);
      }
      if (v351.__r_.__value_.__r.__words[0])
      {
        v351.__r_.__value_.__l.__size_ = v351.__r_.__value_.__r.__words[0];
        operator delete(v351.__r_.__value_.__l.__data_);
      }
      ++v184;
      v182 = *(_QWORD *)(a1 + 104);
      v183 += 16;
    }
    while (v184 < (*(_QWORD *)(a1 + 112) - v182) >> 4);
  }
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v351, *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136));
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v358, v339, v163);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operations_research::sat::CpModelBuilder::AddLessOrEqual(v343, (const operations_research::sat::LinearExpr *)&v351, (const operations_research::sat::LinearExpr *)&v358);
  if (*(char *)(a1 + 335) >= 0)
    v194 = *(unsigned __int8 *)(a1 + 335);
  else
    v194 = *(_QWORD *)(a1 + 320);
  std::string::basic_string[abi:ne180100]((uint64_t)&__str, v194 + 39);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v195 = &__str;
  else
    v195 = (std::string *)__str.__r_.__value_.__r.__words[0];
  if (v194)
  {
    if (*(char *)(a1 + 335) >= 0)
      v196 = *(const void **)&v337[1];
    else
      v196 = *(const void **)(a1 + 312);
    memmove(v195, v196, v194);
  }
  strcpy((char *)v195 + v194, ":l2_dep_consumer_compute_end_constraint");
  operations_research::sat::Constraint::WithName((uint64_t *)&__p, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v359)
  {
    v360 = v359;
    operator delete(v359);
  }
  if (v358.__r_.__value_.__r.__words[0])
  {
    v358.__r_.__value_.__l.__size_ = v358.__r_.__value_.__r.__words[0];
    operator delete(v358.__r_.__value_.__l.__data_);
  }
  if (v352)
  {
    v353 = v352;
    operator delete(v352);
  }
  if (v351.__r_.__value_.__r.__words[0])
  {
    v351.__r_.__value_.__l.__size_ = v351.__r_.__value_.__r.__words[0];
    operator delete(v351.__r_.__value_.__l.__data_);
  }
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v351, *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152));
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v358, v339, v163);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operations_research::sat::CpModelBuilder::AddLessOrEqual(v343, (const operations_research::sat::LinearExpr *)&v351, (const operations_research::sat::LinearExpr *)&v358);
  if (*(char *)(a1 + 335) >= 0)
    v197 = *(unsigned __int8 *)(a1 + 335);
  else
    v197 = *(_QWORD *)(a1 + 320);
  std::string::basic_string[abi:ne180100]((uint64_t)&__str, v197 + 37);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v198 = &__str;
  else
    v198 = (std::string *)__str.__r_.__value_.__r.__words[0];
  if (v197)
  {
    if (*(char *)(a1 + 335) >= 0)
      v199 = *(const void **)&v337[1];
    else
      v199 = *(const void **)(a1 + 312);
    memmove(v198, v199, v197);
  }
  strcpy((char *)v198 + v197, ":l2_dep_consumer_write_end_constraint");
  operations_research::sat::Constraint::WithName((uint64_t *)&__p, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v359)
  {
    v360 = v359;
    operator delete(v359);
  }
  if (v358.__r_.__value_.__r.__words[0])
  {
    v358.__r_.__value_.__l.__size_ = v358.__r_.__value_.__r.__words[0];
    operator delete(v358.__r_.__value_.__l.__data_);
  }
  if (v352)
  {
    v353 = v352;
    operator delete(v352);
  }
  if (v351.__r_.__value_.__r.__words[0])
  {
    v351.__r_.__value_.__l.__size_ = v351.__r_.__value_.__r.__words[0];
    operator delete(v351.__r_.__value_.__l.__data_);
  }
  LayerCycleAndFootprintEstimator::GetReadBehaviors(a4, &__str.__r_.__value_.__l.__data_);
  memset(&__p, 0, sizeof(__p));
  memset(&v355, 0, sizeof(v355));
  v200 = *(_QWORD **)(a1 + 192);
  if (*(_QWORD **)(a1 + 200) != v200)
  {
    v201 = 0;
    *(_QWORD *)&v337[0] = (char *)&v355.__r_.__value_.__l + 16;
    do
    {
      v202 = v200[v201];
      *(std::string::size_type *)((char *)v358.__r_.__value_.__r.__words + 4) = *(_QWORD *)(v202 + 240);
      HIDWORD(v358.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v202 + 248);
      v203 = (char *)operator new(0x20uLL);
      v351.__r_.__value_.__l.__size_ = (std::string::size_type)(v203 + 32);
      v351.__r_.__value_.__r.__words[2] = (std::string::size_type)(v203 + 32);
      *(_QWORD *)v203 = v342;
      *((_DWORD *)v203 + 2) = v341;
      *(_OWORD *)(v203 + 12) = *(_OWORD *)&v358.__r_.__value_.__l.__data_;
      v351.__r_.__value_.__r.__words[0] = (std::string::size_type)v203;
      v204 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v343, (uint64_t *)&v351);
      v206 = v204;
      v207 = v205;
      v208 = __p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
      {
        v210 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 4;
        v211 = v210 + 1;
        if ((unint64_t)(v210 + 1) >> 60)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v212 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
        if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 3 > v211)
          v211 = v212 >> 3;
        if ((unint64_t)v212 >= 0x7FFFFFFFFFFFFFF0)
          v213 = 0xFFFFFFFFFFFFFFFLL;
        else
          v213 = v211;
        if (v213)
          v214 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v213);
        else
          v214 = 0;
        v215 = (operations_research::sat::CpModelBuilder **)&v214[16 * v210];
        *v215 = v206;
        v215[1] = v207;
        v216 = (_DWORD *)__p.__r_.__value_.__l.__size_;
        v217 = __p.__r_.__value_.__r.__words[0];
        v218 = (std::string::size_type)v215;
        if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
        {
          do
          {
            v219 = *((_QWORD *)v216 - 2);
            v216 -= 4;
            v220 = v216[2];
            *(_QWORD *)(v218 - 16) = v219;
            v218 -= 16;
            *(_DWORD *)(v218 + 8) = v220;
          }
          while (v216 != (_DWORD *)v217);
          v216 = (_DWORD *)__p.__r_.__value_.__r.__words[0];
        }
        v209 = (std::string::size_type)(v215 + 2);
        __p.__r_.__value_.__r.__words[0] = v218;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v215 + 2);
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v214[16 * v213];
        if (v216)
          operator delete(v216);
      }
      else
      {
        *(_QWORD *)__p.__r_.__value_.__l.__size_ = v204;
        *(_QWORD *)(v208 + 8) = v205;
        v209 = v208 + 16;
      }
      __p.__r_.__value_.__l.__size_ = v209;
      if (v351.__r_.__value_.__r.__words[0])
      {
        v351.__r_.__value_.__l.__size_ = v351.__r_.__value_.__r.__words[0];
        operator delete(v351.__r_.__value_.__l.__data_);
      }
      v221 = *(_QWORD *)(*(_QWORD *)(__str.__r_.__value_.__r.__words[0] + 8 * v201) + 120);
      v222 = v355.__r_.__value_.__l.__size_;
      if (v355.__r_.__value_.__l.__size_ >= v355.__r_.__value_.__r.__words[2])
      {
        v224 = (void *)v355.__r_.__value_.__r.__words[0];
        v225 = (uint64_t)(v355.__r_.__value_.__l.__size_ - v355.__r_.__value_.__r.__words[0]) >> 3;
        v226 = v225 + 1;
        if ((unint64_t)(v225 + 1) >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v227 = v355.__r_.__value_.__r.__words[2] - v355.__r_.__value_.__r.__words[0];
        if ((uint64_t)(v355.__r_.__value_.__r.__words[2] - v355.__r_.__value_.__r.__words[0]) >> 2 > v226)
          v226 = v227 >> 2;
        if ((unint64_t)v227 >= 0x7FFFFFFFFFFFFFF8)
          v228 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v228 = v226;
        if (v228)
        {
          v229 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>(*(uint64_t *)&v337[0], v228);
          v222 = v355.__r_.__value_.__l.__size_;
          v224 = (void *)v355.__r_.__value_.__r.__words[0];
        }
        else
        {
          v229 = 0;
        }
        v230 = &v229[8 * v225];
        *(_QWORD *)v230 = v221;
        v223 = (std::string::size_type)(v230 + 8);
        while ((void *)v222 != v224)
        {
          v231 = *(_QWORD *)(v222 - 8);
          v222 -= 8;
          *((_QWORD *)v230 - 1) = v231;
          v230 -= 8;
        }
        v355.__r_.__value_.__r.__words[0] = (std::string::size_type)v230;
        v355.__r_.__value_.__l.__size_ = v223;
        v355.__r_.__value_.__r.__words[2] = (std::string::size_type)&v229[8 * v228];
        if (v224)
          operator delete(v224);
      }
      else
      {
        *(_QWORD *)v355.__r_.__value_.__l.__size_ = v221;
        v223 = v222 + 8;
      }
      v355.__r_.__value_.__l.__size_ = v223;
      ++v201;
      v200 = *(_QWORD **)(a1 + 192);
      v232 = *(_QWORD *)(a1 + 200) - (_QWORD)v200;
    }
    while (v201 < v232 >> 3);
    if ((unint64_t)v232 > 8)
    {
      v233 = *v200;
      *(std::string::size_type *)((char *)v358.__r_.__value_.__r.__words + 4) = *(_QWORD *)(*v200 + 240);
      HIDWORD(v358.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v233 + 248);
      v234 = v200[1];
      *(std::string::size_type *)((char *)v354.__r_.__value_.__r.__words + 4) = *(_QWORD *)(v234 + 240);
      HIDWORD(v354.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v234 + 248);
      v235 = (char *)operator new(0x30uLL);
      v351.__r_.__value_.__l.__size_ = (std::string::size_type)(v235 + 48);
      v351.__r_.__value_.__r.__words[2] = (std::string::size_type)(v235 + 48);
      *(_QWORD *)v235 = v342;
      *((_DWORD *)v235 + 2) = v341;
      *(_OWORD *)(v235 + 12) = *(_OWORD *)&v358.__r_.__value_.__l.__data_;
      *(_OWORD *)(v235 + 28) = *(_OWORD *)&v354.__r_.__value_.__l.__data_;
      v351.__r_.__value_.__r.__words[0] = (std::string::size_type)v235;
      v236 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v343, (uint64_t *)&v351);
      v238 = v236;
      v239 = v237;
      v240 = __p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
      {
        v242 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 4;
        v243 = v242 + 1;
        if ((unint64_t)(v242 + 1) >> 60)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v244 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
        if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 3 > v243)
          v243 = v244 >> 3;
        if ((unint64_t)v244 >= 0x7FFFFFFFFFFFFFF0)
          v245 = 0xFFFFFFFFFFFFFFFLL;
        else
          v245 = v243;
        if (v245)
          v246 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v245);
        else
          v246 = 0;
        v247 = (operations_research::sat::CpModelBuilder **)&v246[16 * v242];
        v248 = (std::string::size_type)&v246[16 * v245];
        *v247 = v238;
        v247[1] = v239;
        v241 = (std::string::size_type)(v247 + 2);
        v249 = (_DWORD *)__p.__r_.__value_.__l.__size_;
        v250 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
        {
          do
          {
            v251 = (operations_research::sat::CpModelBuilder *)*((_QWORD *)v249 - 2);
            v249 -= 4;
            v252 = v249[2];
            *(v247 - 2) = v251;
            v247 -= 2;
            *((_DWORD *)v247 + 2) = v252;
          }
          while (v249 != (_DWORD *)v250);
          v249 = (_DWORD *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v247;
        __p.__r_.__value_.__l.__size_ = v241;
        __p.__r_.__value_.__r.__words[2] = v248;
        if (v249)
          operator delete(v249);
      }
      else
      {
        *(_QWORD *)__p.__r_.__value_.__l.__size_ = v236;
        *(_QWORD *)(v240 + 8) = v237;
        v241 = v240 + 16;
      }
      __p.__r_.__value_.__l.__size_ = v241;
      if (v351.__r_.__value_.__r.__words[0])
      {
        v351.__r_.__value_.__l.__size_ = v351.__r_.__value_.__r.__words[0];
        operator delete(v351.__r_.__value_.__l.__data_);
      }
      v253 = v355.__r_.__value_.__l.__size_;
      if (v355.__r_.__value_.__l.__size_ >= v355.__r_.__value_.__r.__words[2])
      {
        v255 = (void *)v355.__r_.__value_.__r.__words[0];
        v256 = (uint64_t)(v355.__r_.__value_.__l.__size_ - v355.__r_.__value_.__r.__words[0]) >> 3;
        v257 = v256 + 1;
        if ((unint64_t)(v256 + 1) >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v258 = v355.__r_.__value_.__r.__words[2] - v355.__r_.__value_.__r.__words[0];
        if ((uint64_t)(v355.__r_.__value_.__r.__words[2] - v355.__r_.__value_.__r.__words[0]) >> 2 > v257)
          v257 = v258 >> 2;
        if ((unint64_t)v258 >= 0x7FFFFFFFFFFFFFF8)
          v259 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v259 = v257;
        if (v259)
        {
          v260 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>(*(uint64_t *)&v337[0], v259);
          v253 = v355.__r_.__value_.__l.__size_;
          v255 = (void *)v355.__r_.__value_.__r.__words[0];
        }
        else
        {
          v260 = 0;
        }
        v261 = &v260[8 * v256];
        v262 = (std::string::size_type)&v260[8 * v259];
        *(_QWORD *)v261 = 1;
        v254 = (std::string::size_type)(v261 + 8);
        while ((void *)v253 != v255)
        {
          v263 = *(_QWORD *)(v253 - 8);
          v253 -= 8;
          *((_QWORD *)v261 - 1) = v263;
          v261 -= 8;
        }
        v355.__r_.__value_.__r.__words[0] = (std::string::size_type)v261;
        v355.__r_.__value_.__l.__size_ = v254;
        v355.__r_.__value_.__r.__words[2] = v262;
        if (v255)
          operator delete(v255);
      }
      else
      {
        *(_QWORD *)v355.__r_.__value_.__l.__size_ = 1;
        v254 = v253 + 8;
      }
      v355.__r_.__value_.__l.__size_ = v254;
    }
  }
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v351, *(_QWORD *)(a1 + 176), *(_QWORD *)(a1 + 184));
  operations_research::sat::LinearExpr::BooleanScalProd((uint64_t)__p.__r_.__value_.__l.__data_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 4, (uint64_t *)v355.__r_.__value_.__l.__data_, (uint64_t)(v355.__r_.__value_.__l.__size_ - v355.__r_.__value_.__r.__words[0]) >> 3, (uint64_t)&v358);
  operations_research::sat::CpModelBuilder::AddEquality(v343, (const operations_research::sat::LinearExpr *)&v351, (const operations_research::sat::LinearExpr *)&v358);
  if (v359)
  {
    v360 = v359;
    operator delete(v359);
  }
  if (v358.__r_.__value_.__r.__words[0])
  {
    v358.__r_.__value_.__l.__size_ = v358.__r_.__value_.__r.__words[0];
    operator delete(v358.__r_.__value_.__l.__data_);
  }
  if (v352)
  {
    v353 = v352;
    operator delete(v352);
  }
  if (v351.__r_.__value_.__r.__words[0])
  {
    v351.__r_.__value_.__l.__size_ = v351.__r_.__value_.__r.__words[0];
    operator delete(v351.__r_.__value_.__l.__data_);
  }
  operations_research::sat::CpModelBuilder::NewIntervalVar(v343, v339, v163, *(_QWORD *)(a1 + 176), *(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  v264 = *(_QWORD *)(a1 + 192);
  if (*(_QWORD *)(a1 + 200) != v264)
  {
    v265 = 0;
    do
    {
      v266 = *(_QWORD *)(a1 + 336);
      v267 = *(_QWORD *)(a1 + 344);
      v268 = *(_QWORD *)(v264 + 8 * v265);
      v358.__r_.__value_.__r.__words[0] = *(_QWORD *)(v268 + 240);
      LODWORD(v358.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v268 + 248);
      v269 = operator new(0x20uLL);
      v351.__r_.__value_.__l.__size_ = (std::string::size_type)(v269 + 4);
      v351.__r_.__value_.__r.__words[2] = (std::string::size_type)(v269 + 4);
      *(_OWORD *)v269 = *(_OWORD *)&v358.__r_.__value_.__l.__data_;
      v269[2] = v342;
      *((_DWORD *)v269 + 6) = v341;
      v351.__r_.__value_.__r.__words[0] = (std::string::size_type)v269;
      v270 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v343, (uint64_t *)&v351);
      v272 = v271;
      if (*(char *)(a1 + 311) >= 0)
        v273 = *(unsigned __int8 *)(a1 + 311);
      else
        v273 = *(_QWORD *)(a1 + 296);
      std::string::basic_string[abi:ne180100]((uint64_t)&v348, v273 + 51);
      if ((v348.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v274 = &v348;
      else
        v274 = (std::string *)v348.__r_.__value_.__r.__words[0];
      if (v273)
      {
        if (*(char *)(a1 + 311) >= 0)
          v275 = v340;
        else
          v275 = *(const void **)(a1 + 288);
        memmove(v274, v275, v273);
      }
      strcpy((char *)v274 + v273, ":l2_dep_producer_nonresident_read_pressure_interval");
      v276 = ORToolsCpBasedAllocatorUtil::CreateOptionalClosedInterval(v343, v266, v267, (uint64_t)v270, v272, &v348);
      v278 = v277;
      if (SHIBYTE(v348.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v348.__r_.__value_.__l.__data_);
      if (v351.__r_.__value_.__r.__words[0])
      {
        v351.__r_.__value_.__l.__size_ = v351.__r_.__value_.__r.__words[0];
        operator delete(v351.__r_.__value_.__l.__data_);
      }
      v279 = *(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * v265);
      operations_research::sat::CumulativeConstraint::AddDemand(*(uint64_t **)v338, v276, v278, *(_QWORD *)(v279 + 176), *(_QWORD *)(v279 + 184));
      if (*(_BYTE *)(a1 + 408))
      {
        v280 = *(_QWORD *)(a1 + 344);
        v281 = *(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * v265);
        v358.__r_.__value_.__r.__words[0] = *(_QWORD *)(v281 + 224);
        LODWORD(v358.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v281 + 232);
        v282 = operator new(0x20uLL);
        v351.__r_.__value_.__l.__size_ = (std::string::size_type)(v282 + 4);
        v351.__r_.__value_.__r.__words[2] = (std::string::size_type)(v282 + 4);
        *(_OWORD *)v282 = *(_OWORD *)&v358.__r_.__value_.__l.__data_;
        v282[2] = v342;
        *((_DWORD *)v282 + 6) = v341;
        v351.__r_.__value_.__r.__words[0] = (std::string::size_type)v282;
        v283 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v343, (uint64_t *)&v351);
        v285 = v284;
        if (*(char *)(a1 + 311) >= 0)
          v286 = *(unsigned __int8 *)(a1 + 311);
        else
          v286 = *(_QWORD *)(a1 + 296);
        std::string::basic_string[abi:ne180100]((uint64_t)&v347, v286 + 48);
        if ((v347.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v287 = &v347;
        else
          v287 = (std::string *)v347.__r_.__value_.__r.__words[0];
        if (v286)
        {
          if (*(char *)(a1 + 311) >= 0)
            v288 = v340;
          else
            v288 = *(const void **)(a1 + 288);
          memmove(v287, v288, v286);
        }
        strcpy((char *)v287 + v286, ":l2_dep_producer_resident_read_pressure_interval");
        v289 = ORToolsCpBasedAllocatorUtil::CreateOptionalClosedInterval(v343, v280, v280, (uint64_t)v283, v285, &v347);
        v291 = v290;
        if (SHIBYTE(v347.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v347.__r_.__value_.__l.__data_);
        if (v351.__r_.__value_.__r.__words[0])
        {
          v351.__r_.__value_.__l.__size_ = v351.__r_.__value_.__r.__words[0];
          operator delete(v351.__r_.__value_.__l.__data_);
        }
        v292 = *(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * v265);
        operations_research::sat::CumulativeConstraint::AddDemand(*(uint64_t **)v338, v289, v291, *(_QWORD *)(v292 + 112), *(_QWORD *)(v292 + 120));
      }
      ++v265;
      v264 = *(_QWORD *)(a1 + 192);
    }
    while (v265 < (*(_QWORD *)(a1 + 200) - v264) >> 3);
  }
  v293 = *(_QWORD *)(a1 + 232);
  v294 = *(_QWORD *)(a1 + 240);
  if (v294 != v293)
  {
    v295 = 0;
    do
    {
      if (v295 != *(_QWORD *)(a1 + 352))
      {
        v296 = *(_QWORD *)(a1 + 336);
        v297 = *(_QWORD *)(a1 + 344);
        v298 = *(_QWORD *)(v293 + 8 * v295);
        v358.__r_.__value_.__r.__words[0] = *(_QWORD *)(v298 + 240);
        LODWORD(v358.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v298 + 248);
        v299 = operator new(0x20uLL);
        v351.__r_.__value_.__l.__size_ = (std::string::size_type)(v299 + 4);
        v351.__r_.__value_.__r.__words[2] = (std::string::size_type)(v299 + 4);
        *(_OWORD *)v299 = *(_OWORD *)&v358.__r_.__value_.__l.__data_;
        v299[2] = v342;
        *((_DWORD *)v299 + 6) = v341;
        v351.__r_.__value_.__r.__words[0] = (std::string::size_type)v299;
        v300 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v343, (uint64_t *)&v351);
        v302 = v301;
        if (*(char *)(a1 + 335) >= 0)
          v303 = *(unsigned __int8 *)(a1 + 335);
        else
          v303 = *(_QWORD *)(a1 + 320);
        std::string::basic_string[abi:ne180100]((uint64_t)&v346, v303 + 51);
        if ((v346.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v304 = &v346;
        else
          v304 = (std::string *)v346.__r_.__value_.__r.__words[0];
        if (v303)
        {
          if (*(char *)(a1 + 335) >= 0)
            v305 = *(const void **)&v337[1];
          else
            v305 = *(const void **)(a1 + 312);
          memmove(v304, v305, v303);
        }
        strcpy((char *)v304 + v303, ":l2_dep_consumer_nonresident_read_pressure_interval");
        v306 = ORToolsCpBasedAllocatorUtil::CreateOptionalClosedInterval(v343, v296, v297, (uint64_t)v300, v302, &v346);
        v308 = v307;
        if (SHIBYTE(v346.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v346.__r_.__value_.__l.__data_);
        if (v351.__r_.__value_.__r.__words[0])
        {
          v351.__r_.__value_.__l.__size_ = v351.__r_.__value_.__r.__words[0];
          operator delete(v351.__r_.__value_.__l.__data_);
        }
        v309 = *(_QWORD *)(*(_QWORD *)(a1 + 232) + 8 * v295);
        operations_research::sat::CumulativeConstraint::AddDemand(*(uint64_t **)v338, v306, v308, *(_QWORD *)(v309 + 192), *(_QWORD *)(v309 + 200));
        v293 = *(_QWORD *)(a1 + 232);
        v294 = *(_QWORD *)(a1 + 240);
      }
      ++v295;
    }
    while (v295 < (v294 - v293) >> 3);
  }
  v310 = *(_QWORD *)(a1 + 336);
  v311 = *(_QWORD *)(a1 + 344);
  v312 = *(_QWORD *)(a1 + 264);
  v358.__r_.__value_.__r.__words[0] = *(_QWORD *)(v312 + 240);
  LODWORD(v358.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v312 + 248);
  v313 = operator new(0x20uLL);
  v351.__r_.__value_.__l.__size_ = (std::string::size_type)(v313 + 4);
  v351.__r_.__value_.__r.__words[2] = (std::string::size_type)(v313 + 4);
  *(_OWORD *)v313 = *(_OWORD *)&v358.__r_.__value_.__l.__data_;
  v313[2] = v342;
  *((_DWORD *)v313 + 6) = v341;
  v351.__r_.__value_.__r.__words[0] = (std::string::size_type)v313;
  v314 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v343, (uint64_t *)&v351);
  v316 = v315;
  if (*(char *)(a1 + 335) >= 0)
    v317 = *(unsigned __int8 *)(a1 + 335);
  else
    v317 = *(_QWORD *)(a1 + 320);
  std::string::basic_string[abi:ne180100]((uint64_t)&v345, v317 + 52);
  if ((v345.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v318 = &v345;
  else
    v318 = (std::string *)v345.__r_.__value_.__r.__words[0];
  if (v317)
  {
    if (*(char *)(a1 + 335) >= 0)
      v319 = *(const void **)&v337[1];
    else
      v319 = *(const void **)(a1 + 312);
    memmove(v318, v319, v317);
  }
  strcpy((char *)v318 + v317, ":l2_dep_consumer_nonresident_write_pressure_interval");
  v320 = ORToolsCpBasedAllocatorUtil::CreateOptionalClosedInterval(v343, v310, v311, (uint64_t)v314, v316, &v345);
  v322 = v321;
  if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v345.__r_.__value_.__l.__data_);
  if (v351.__r_.__value_.__r.__words[0])
  {
    v351.__r_.__value_.__l.__size_ = v351.__r_.__value_.__r.__words[0];
    operator delete(v351.__r_.__value_.__l.__data_);
  }
  operations_research::sat::CumulativeConstraint::AddDemand(*(uint64_t **)v338, v320, v322, *(_QWORD *)(*(_QWORD *)(a1 + 264) + 192), *(_QWORD *)(*(_QWORD *)(a1 + 264) + 200));
  if (*(_BYTE *)(a1 + 409))
  {
    v323 = *(_QWORD *)(a1 + 336);
    v324 = *(_QWORD *)(a1 + 264);
    v358.__r_.__value_.__r.__words[0] = *(_QWORD *)(v324 + 224);
    LODWORD(v358.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v324 + 232);
    v325 = operator new(0x20uLL);
    v351.__r_.__value_.__l.__size_ = (std::string::size_type)(v325 + 4);
    v351.__r_.__value_.__r.__words[2] = (std::string::size_type)(v325 + 4);
    *(_OWORD *)v325 = *(_OWORD *)&v358.__r_.__value_.__l.__data_;
    v325[2] = v342;
    *((_DWORD *)v325 + 6) = v341;
    v351.__r_.__value_.__r.__words[0] = (std::string::size_type)v325;
    v326 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v343, (uint64_t *)&v351);
    v328 = v327;
    if (*(char *)(a1 + 335) >= 0)
      v329 = *(unsigned __int8 *)(a1 + 335);
    else
      v329 = *(_QWORD *)(a1 + 320);
    std::string::basic_string[abi:ne180100]((uint64_t)&v344, v329 + 49);
    if ((v344.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v330 = &v344;
    else
      v330 = (std::string *)v344.__r_.__value_.__r.__words[0];
    if (v329)
    {
      if (*(char *)(a1 + 335) >= 0)
        v331 = *(const void **)&v337[1];
      else
        v331 = *(const void **)(a1 + 312);
      memmove(v330, v331, v329);
    }
    strcpy((char *)v330 + v329, ":l2_dep_consumer_resident_write_pressure_interval");
    v332 = ORToolsCpBasedAllocatorUtil::CreateOptionalClosedInterval(v343, v323, v323, (uint64_t)v326, v328, &v344);
    v334 = v333;
    if (SHIBYTE(v344.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v344.__r_.__value_.__l.__data_);
    if (v351.__r_.__value_.__r.__words[0])
    {
      v351.__r_.__value_.__l.__size_ = v351.__r_.__value_.__r.__words[0];
      operator delete(v351.__r_.__value_.__l.__data_);
    }
    operations_research::sat::CumulativeConstraint::AddDemand(*(uint64_t **)v338, v332, v334, *(_QWORD *)(*(_QWORD *)(a1 + 264) + 112), *(_QWORD *)(*(_QWORD *)(a1 + 264) + 120));
  }
  if (v355.__r_.__value_.__r.__words[0])
  {
    v355.__r_.__value_.__l.__size_ = v355.__r_.__value_.__r.__words[0];
    operator delete(v355.__r_.__value_.__l.__data_);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (__str.__r_.__value_.__r.__words[0])
  {
    __str.__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_22D9AFA30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p)
{
  uint64_t v43;
  void *v45;
  void *v46;

  v45 = *(void **)(v43 - 224);
  if (v45)
  {
    *(_QWORD *)(v43 - 216) = v45;
    operator delete(v45);
  }
  if (__p)
    operator delete(__p);
  v46 = *(void **)(v43 - 192);
  if (v46)
  {
    *(_QWORD *)(v43 - 184) = v46;
    operator delete(v46);
  }
  _Unwind_Resume(a1);
}

void operations_research::sat::LinearExpr::~LinearExpr(operations_research::sat::LinearExpr *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  v3 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v3;
    operator delete(v3);
  }
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

_QWORD *std::vector<operations_research::sat::BoolVar>::__init_with_size[abi:ne180100]<operations_research::sat::BoolVar*,operations_research::sat::BoolVar*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<operations_research::sat::BoolVar>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8 - 4);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_22D9AFECC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<operations_research::sat::BoolVar>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

void std::vector<std::unique_ptr<ORToolsCpL2AccessVariable>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  ORToolsCpL2AccessVariable **v2;
  ORToolsCpL2AccessVariable **v4;
  void *v5;

  v1 = *a1;
  v2 = (ORToolsCpL2AccessVariable **)**a1;
  if (v2)
  {
    v4 = (ORToolsCpL2AccessVariable **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<ORToolsCpL2AccessVariable>::reset[abi:ne180100](--v4, 0);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<std::unique_ptr<ORToolsCpL2AccessVariable>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    std::unique_ptr<ORToolsCpL2AccessVariable>::reset[abi:ne180100]((ORToolsCpL2AccessVariable **)(i - 8), 0);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

ORToolsCpL2AccessVariable *std::unique_ptr<ORToolsCpL2AccessVariable>::reset[abi:ne180100](ORToolsCpL2AccessVariable **a1, ORToolsCpL2AccessVariable *a2)
{
  ORToolsCpL2AccessVariable *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    ORToolsCpL2AccessVariable::~ORToolsCpL2AccessVariable(result);
    JUMPOUT(0x22E31DF78);
  }
  return result;
}

ORToolsCpComputeConstant *std::unique_ptr<ORToolsCpComputeConstant>::reset[abi:ne180100](ORToolsCpComputeConstant **a1, ORToolsCpComputeConstant *a2)
{
  ORToolsCpComputeConstant *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    ORToolsCpComputeConstant::~ORToolsCpComputeConstant(result);
    JUMPOUT(0x22E31DF78);
  }
  return result;
}

uint64_t **ORToolsCpTransposer::ORToolsCpTransposer(uint64_t **a1, uint64_t *a2, _QWORD *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t **v8;
  uint64_t v9;
  operations_research::sat::SatParameters *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  std::ios_base *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  std::string::size_type *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t **v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  uint64_t v29;
  int v30;
  uint64_t v32;
  uint64_t **v33;
  std::string v34;

  *a1 = a2;
  a1[1] = a5;
  a1[3] = 0;
  a1[2] = (uint64_t *)(a1 + 3);
  *(_OWORD *)(a1 + 5) = 0u;
  a1[4] = 0;
  *(_OWORD *)(a1 + 7) = 0u;
  a1[11] = 0;
  *((_DWORD *)a1 + 18) = 1065353216;
  a1[10] = (uint64_t *)(a1 + 11);
  v8 = a1 + 10;
  a1[12] = 0;
  a1[14] = 0;
  a1[13] = (uint64_t *)(a1 + 14);
  v33 = a1 + 13;
  a1[15] = 0;
  a1[17] = 0;
  a1[16] = (uint64_t *)(a1 + 17);
  a1[18] = 0;
  *(_OWORD *)(a1 + 19) = 0u;
  *(_OWORD *)(a1 + 21) = 0u;
  *((_DWORD *)a1 + 46) = 1065353216;
  v9 = operator new();
  *(_OWORD *)(v9 + 208) = 0u;
  *(_OWORD *)(v9 + 224) = 0u;
  *(_OWORD *)(v9 + 176) = 0u;
  *(_OWORD *)(v9 + 192) = 0u;
  *(_OWORD *)(v9 + 144) = 0u;
  *(_OWORD *)(v9 + 160) = 0u;
  *(_OWORD *)(v9 + 112) = 0u;
  *(_OWORD *)(v9 + 128) = 0u;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 96) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)v9 = 0u;
  operations_research::sat::CpModelProto::CpModelProto((operations_research::sat::CpModelProto *)v9, 0);
  *(_QWORD *)(v9 + 144) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_OWORD *)(v9 + 152) = 0u;
  *(_OWORD *)(v9 + 168) = 0u;
  *(_QWORD *)(v9 + 184) = 0;
  *(_QWORD *)(v9 + 192) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_OWORD *)(v9 + 200) = 0u;
  *(_OWORD *)(v9 + 216) = 0u;
  *(_QWORD *)(v9 + 232) = 0;
  a1[24] = (uint64_t *)v9;
  v10 = (operations_research::sat::SatParameters *)operator new();
  v32 = a4;
  operations_research::sat::SatParameters::SatParameters(v10, 0);
  v11 = *(uint64_t **)(MEMORY[0x24BEDB7E8] + 8);
  v12 = *(uint64_t **)(MEMORY[0x24BEDB7E8] + 16);
  a1[26] = v11;
  a1[25] = (uint64_t *)v10;
  v13 = MEMORY[0x24BEDB840];
  v14 = MEMORY[0x24BEDB840] + 64;
  a1[78] = (uint64_t *)(MEMORY[0x24BEDB840] + 64);
  *(uint64_t **)((char *)a1 + *(v11 - 3) + 208) = v12;
  v15 = (std::ios_base *)((char *)a1 + *(a1[26] - 3) + 208);
  std::ios_base::init(v15, a1 + 27);
  v15[1].__vftable = 0;
  v15[1].__fmtflags_ = -1;
  a1[26] = (uint64_t *)(v13 + 24);
  a1[78] = (uint64_t *)v14;
  MEMORY[0x22E31DCFC](a1 + 27);
  v16 = (_QWORD *)**a1;
  v19 = (_QWORD *)*v16;
  v17 = v16 + 1;
  v18 = v19;
  if (v19 != v17)
  {
    do
    {
      v20 = v18 + 4;
      if (std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(a3, v18 + 4))
      {
        v21 = **a1;
        v34.__r_.__value_.__r.__words[0] = *v20;
        v22 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>((_QWORD *)(v21 + 192), (unint64_t *)&v34);
        v23 = v8;
        if (v22
          || (v24 = **a1,
              v34.__r_.__value_.__r.__words[0] = *v20,
              v25 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>((_QWORD *)(v24 + 152), (unint64_t *)&v34), v23 = v33, v25))
        {
          std::__tree<unsigned long long>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(v23, v18 + 4, v18 + 4);
        }
      }
      v26 = (_QWORD *)v18[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v18[2];
          v28 = *v27 == (_QWORD)v18;
          v18 = v27;
        }
        while (!v28);
      }
      v18 = v27;
    }
    while (v27 != v17);
  }
  v29 = *(unsigned __int8 *)(v32 + 23);
  v30 = (char)v29;
  if ((v29 & 0x80u) != 0)
    v29 = *(_QWORD *)(v32 + 8);
  if (v29)
  {
    if (v30 < 0)
      std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)v32, *(_QWORD *)(v32 + 8));
    else
      v34 = *(std::string *)v32;
    std::ofstream::open();
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_22D9B03BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _QWORD **a11, _QWORD **a12, _QWORD **a13, uint64_t a14, uint64_t a15, _QWORD **a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  operations_research::sat::CpModelProto *v28;

  std::ofstream::~ofstream(v26);
  std::unique_ptr<operations_research::sat::SatParameters>::reset[abi:ne180100]((operations_research::sat::SatParameters **)(v25 + 200), 0);
  v28 = *(operations_research::sat::CpModelProto **)(v25 + 192);
  *(_QWORD *)(v25 + 192) = 0;
  if (v28)
    std::default_delete<operations_research::sat::CpModelBuilder>::operator()[abi:ne180100](v25 + 192, v28);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a9);
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(a10, *a11);
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(a18, *a12);
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v24, *a13);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>>>::~__hash_table(a14);
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(a15, *a16);
  _Unwind_Resume(a1);
}

_QWORD *std::ofstream::~ofstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7E8];
  v3 = *MEMORY[0x24BEDB7E8];
  *a1 = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x22E31DD08](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x22E31DEF4](a1 + 52);
  return a1;
}

void ORToolsCpTransposer::~ORToolsCpTransposer(ORToolsCpTransposer *this)
{
  uint64_t v2;
  uint64_t v3;
  operations_research::sat::CpModelProto *v4;

  v2 = MEMORY[0x24BEDB7E8];
  v3 = *MEMORY[0x24BEDB7E8];
  *((_QWORD *)this + 26) = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24) + 208) = *(_QWORD *)(v2 + 24);
  MEMORY[0x22E31DD08]((char *)this + 216);
  std::ostream::~ostream();
  MEMORY[0x22E31DEF4]((char *)this + 624);
  std::unique_ptr<operations_research::sat::SatParameters>::reset[abi:ne180100]((operations_research::sat::SatParameters **)this + 25, 0);
  v4 = (operations_research::sat::CpModelProto *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v4)
    std::default_delete<operations_research::sat::CpModelBuilder>::operator()[abi:ne180100]((uint64_t)this + 192, v4);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)this + 152);
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)this + 128, *((_QWORD **)this + 17));
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)this + 104, *((_QWORD **)this + 14));
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)this + 80, *((_QWORD **)this + 11));
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>>>::~__hash_table((uint64_t)this + 40);
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)this + 16, *((_QWORD **)this + 3));
}

void ORToolsCpTransposer::CreateTensorDecisionVariable(ORToolsCpTransposer *this, unint64_t a2)
{
  _QWORD *v4;
  uint64_t **v5;
  uint64_t **v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  int v10;
  std::string::size_type size;
  std::string *p_p;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t **v17;
  _QWORD v18[2];
  unint64_t v19[3];
  std::string __p;
  uint64_t v21;
  std::string v22;
  unint64_t v23;

  v23 = a2;
  v5 = (uint64_t **)((char *)this + 136);
  v4 = (_QWORD *)*((_QWORD *)this + 17);
  if (!v4)
    goto LABEL_12;
  v6 = (uint64_t **)((char *)this + 136);
  do
  {
    v7 = v4[4];
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = v4;
    else
      v9 = v4 + 1;
    if (v8)
      v6 = (uint64_t **)v4;
    v4 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 == v5 || (unint64_t)v6[4] > a2)
  {
LABEL_12:
    v10 = *(unsigned __int8 *)CpTransposeGraph::GetRootTensorConstraint(**(CpTransposeGraph ***)this, a2);
    CpTransposeGraph::GetTensorDimensions(**(CpTransposeGraph ***)this, a2, (uint64_t)&v22);
    if (v22.__r_.__value_.__l.__size_ == 1
      && (CpTransposeGraph::GetTensorDimensions(**(CpTransposeGraph ***)this, a2, (uint64_t)&__p), v21 == 1)
      && !v10)
    {
      std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)this + 152, &v23, &v23);
      v17 = (uint64_t **)*((_QWORD *)this + 1);
      v22.__r_.__value_.__r.__words[0] = (std::string::size_type)&v23;
      *((_DWORD *)std::__tree<std::__value_type<unsigned long long,CpTransposeUtils::TransposeType>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CpTransposeUtils::TransposeType>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CpTransposeUtils::TransposeType>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v17, &v23, (uint64_t)&std::piecewise_construct, &v22)+ 10) = 0;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v22, "");
      CpGraph::GetTensorName(**(_QWORD **)this, a2, &v22);
      if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
      else
        size = v22.__r_.__value_.__l.__size_;
      p_p = &__p;
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, size + 22);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (size)
      {
        if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v13 = &v22;
        else
          v13 = (std::string *)v22.__r_.__value_.__r.__words[0];
        memmove(p_p, v13, size);
      }
      strcpy((char *)p_p + size, ":cw_transpose_decision");
      v18[0] = operations_research::sat::CpModelBuilder::NewBoolVar(*((operations_research::sat::CpModelBuilder **)this
                                                                    + 24));
      v18[1] = v14;
      v15 = operations_research::sat::BoolVar::WithName((int *)v18, &__p);
      v19[0] = a2;
      v19[1] = v15;
      v19[2] = v16;
      std::__tree<std::__value_type<unsigned long long,operations_research::sat::BoolVar>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,operations_research::sat::BoolVar>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,operations_research::sat::BoolVar>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,operations_research::sat::BoolVar>>(v5 - 1, v19, (uint64_t)v19);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v22.__r_.__value_.__l.__data_);
    }
  }
}

void sub_22D9B07E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ORToolsCpTransposer::CreateTensorConstraint(CpTransposeGraph ***this, unint64_t a2)
{
  _QWORD *RootTensorConstraint;
  int v4;
  operations_research::sat::CpModelBuilder *v5;
  uint64_t *v6;
  void *v7[3];
  void *__p;
  void *v9;
  void *v10[3];
  void *v11;
  void *v12;
  operations_research::sat::CpModelBuilder *v13;
  std::string __str;
  unint64_t v15;

  v15 = a2;
  RootTensorConstraint = CpTransposeGraph::GetRootTensorConstraint(**this, a2);
  v4 = *(unsigned __int8 *)RootTensorConstraint;
  if (*((char *)RootTensorConstraint + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)RootTensorConstraint[1], RootTensorConstraint[2]);
    if (!v4)
      goto LABEL_13;
  }
  else
  {
    __str = *(std::string *)(RootTensorConstraint + 1);
    if (!v4)
      goto LABEL_13;
  }
  v5 = (operations_research::sat::CpModelBuilder *)this[24];
  v7[0] = &v15;
  v6 = std::__tree<std::__value_type<unsigned long long,operations_research::sat::BoolVar>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,operations_research::sat::BoolVar>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,operations_research::sat::BoolVar>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(this + 16), &v15, (uint64_t)&std::piecewise_construct, (_QWORD **)v7);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)v10, v6[5], v6[6]);
  operations_research::sat::LinearExpr::LinearExpr((operations_research::sat::LinearExpr *)v7, 0);
  v13 = operations_research::sat::CpModelBuilder::AddEquality(v5, (const operations_research::sat::LinearExpr *)v10, (const operations_research::sat::LinearExpr *)v7);
  operations_research::sat::Constraint::WithName((uint64_t *)&v13, &__str);
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
  if (v7[0])
  {
    v7[1] = v7[0];
    operator delete(v7[0]);
  }
  if (v11)
  {
    v12 = v11;
    operator delete(v11);
  }
  if (v10[0])
  {
    v10[1] = v10[0];
    operator delete(v10[0]);
  }
LABEL_13:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_22D9B093C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)va);
  if (*(char *)(v9 - 41) < 0)
    operator delete(*(void **)(v9 - 64));
  _Unwind_Resume(a1);
}

void ORToolsCpTransposer::CreateLayerConstraints(ORToolsCpTransposer *this, unint64_t a2)
{
  _QWORD *LayerTruthTable;
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  _QWORD *RootTensorConstraint;
  _OWORD *v15;
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  _DWORD *v28;
  _DWORD *v29;
  char *v30;
  uint64_t v31;
  int v32;
  _DWORD *v33;
  uint64_t v34;
  int v35;
  char *v36;
  unint64_t v37;
  std::string::size_type v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  CpTransposeGraph ***v58;
  uint64_t v59;
  const std::string::value_type **v60;
  __int128 v61;
  operations_research::sat::CpModelBuilder *v62;
  operations_research::sat::CpModelBuilder *v63;
  uint64_t v64;
  std::string::size_type v65;
  std::string *v66;
  std::string *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t i;
  void *v71;
  uint64_t *v72;
  int v73;
  operations_research::sat::CpModelBuilder *v74;
  std::string::size_type size;
  std::string *v76;
  std::string *v77;
  std::string *v78;
  std::string::size_type v79;
  std::string *v80;
  __int128 v81;
  uint64_t **v82;
  unint64_t __val;
  uint64_t *v84;
  std::string v86;
  std::string v87;
  std::string v88;
  void *__p;
  char *v90;
  char *v91;
  void *v92;
  void *v93;
  std::string __str;
  void *v95;
  void *v96;
  operations_research::sat::CpModelBuilder *v97;
  std::string v98;
  _OWORD v99[2];
  int v100;
  __int128 v101;
  __int128 v102;
  int v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t *v106;
  std::string v107;
  unint64_t v108[2];

  v108[0] = a2;
  LayerTruthTable = CpTransposeGraph::GetLayerTruthTable(**(CpTransposeGraph ***)this, a2);
  v3 = (uint64_t **)LayerTruthTable;
  if (*((char *)LayerTruthTable + 47) < 0)
    std::string::__init_copy_ctor_external(&v107, (const std::string::value_type *)LayerTruthTable[3], LayerTruthTable[4]);
  else
    v107 = *(std::string *)((_BYTE *)LayerTruthTable + 1);
  v104 = 0;
  v105 = 0;
  v106 = 0;
  v101 = 0u;
  v102 = 0u;
  v103 = 1065353216;
  memset(v99, 0, sizeof(v99));
  v100 = 1065353216;
  v5 = *v3;
  v4 = v3[1];
  if (*v3 != v4)
  {
    v82 = v3;
    __val = 0;
    v6 = 0;
    v84 = v3[1];
    while (1)
    {
      v7 = (*((unsigned __int8 *)v5 + 24) | *((unsigned __int8 *)v5 + 25)) != 0;
      if (*((char *)v5 + 71) < 0)
        std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)v5[6], v5[7]);
      else
        __str = *(std::string *)((_BYTE *)v5 + 2);
      if (!v7)
        goto LABEL_75;
      __p = 0;
      v90 = 0;
      v91 = 0;
      v8 = *v5;
      v9 = v5[1];
      if (*v5 == v9)
      {
        v88.__r_.__value_.__r.__words[0] = 0;
        goto LABEL_73;
      }
      v10 = 0;
      do
      {
        v11 = *(_QWORD *)v8;
        v98.__r_.__value_.__r.__words[0] = *(_QWORD *)v8;
        if (std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>((_QWORD *)this + 19, (unint64_t *)&v98))
        {
          goto LABEL_46;
        }
        v88.__r_.__value_.__r.__words[0] = v11;
        v98.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
        v12 = std::__tree<std::__value_type<unsigned long long,operations_research::sat::BoolVar>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,operations_research::sat::BoolVar>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,operations_research::sat::BoolVar>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this + 128, (unint64_t *)&v88, (uint64_t)&std::piecewise_construct, &v98);
        v13 = v12;
        if (*(_DWORD *)(v8 + 8) == 1)
        {
          RootTensorConstraint = CpTransposeGraph::GetRootTensorConstraint(**(CpTransposeGraph ***)this, v11);
          v15 = v13 + 5;
          v10 |= *(_BYTE *)RootTensorConstraint != 0;
          v16 = v90;
          if (v90 >= v91)
          {
            v19 = (v90 - (_BYTE *)__p) >> 4;
            v20 = v19 + 1;
            if ((unint64_t)(v19 + 1) >> 60)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v21 = v91 - (_BYTE *)__p;
            if ((v91 - (_BYTE *)__p) >> 3 > v20)
              v20 = v21 >> 3;
            if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
              v22 = 0xFFFFFFFFFFFFFFFLL;
            else
              v22 = v20;
            if (v22)
              v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)&v91, v22);
            else
              v23 = 0;
            v27 = &v23[16 * v19];
            *(_OWORD *)v27 = *v15;
            v29 = __p;
            v28 = v90;
            v30 = v27;
            if (v90 != __p)
            {
              do
              {
                v31 = *((_QWORD *)v28 - 2);
                v28 -= 4;
                v32 = v28[2];
                *((_QWORD *)v30 - 2) = v31;
                v30 -= 16;
                *((_DWORD *)v30 + 2) = v32;
              }
              while (v28 != v29);
              goto LABEL_42;
            }
            goto LABEL_43;
          }
          *(_OWORD *)v90 = *v15;
        }
        else
        {
          operations_research::sat::BoolVar::BoolVar((uint64_t)&v98, ~*((_DWORD *)v12 + 12), v12[5]);
          v17 = *(_OWORD *)&v98.__r_.__value_.__l.__data_;
          v16 = v90;
          if (v90 >= v91)
          {
            v24 = (v90 - (_BYTE *)__p) >> 4;
            v25 = v24 + 1;
            if ((unint64_t)(v24 + 1) >> 60)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v26 = v91 - (_BYTE *)__p;
            if ((v91 - (_BYTE *)__p) >> 3 > v25)
              v25 = v26 >> 3;
            if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
              v22 = 0xFFFFFFFFFFFFFFFLL;
            else
              v22 = v25;
            if (v22)
              v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)&v91, v22);
            else
              v23 = 0;
            v27 = &v23[16 * v24];
            *(_OWORD *)v27 = v17;
            v33 = __p;
            v28 = v90;
            v30 = v27;
            if (v90 != __p)
            {
              do
              {
                v34 = *((_QWORD *)v28 - 2);
                v28 -= 4;
                v35 = v28[2];
                *((_QWORD *)v30 - 2) = v34;
                v30 -= 16;
                *((_DWORD *)v30 + 2) = v35;
              }
              while (v28 != v33);
LABEL_42:
              v28 = __p;
            }
LABEL_43:
            v18 = v27 + 16;
            __p = v30;
            v90 = v27 + 16;
            v91 = &v23[16 * v22];
            if (v28)
              operator delete(v28);
            goto LABEL_45;
          }
          *(_QWORD *)v90 = v98.__r_.__value_.__r.__words[0];
          *((_QWORD *)v16 + 1) = *((_QWORD *)&v17 + 1);
        }
        v18 = v16 + 16;
LABEL_45:
        v90 = v18;
LABEL_46:
        v8 += 16;
      }
      while (v8 != v9);
      v36 = (char *)__p;
      if (__p == v90)
      {
        v4 = v84;
      }
      else
      {
        v37 = (v90 - (_BYTE *)__p) >> 4;
        v4 = v84;
        do
        {
          v37 ^= (v37 >> 2) + (v37 << 6) + (*((_DWORD *)v36 + 2) - 1640531527);
          v36 += 16;
        }
        while (v36 != v90);
        v88.__r_.__value_.__r.__words[0] = v37;
        if ((v10 & 1) == 0
          && !std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v99, (unint64_t *)&v88))
        {
          std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)v99, (unint64_t *)&v88, &v88);
          v98.__r_.__value_.__r.__words[0] = (std::string::size_type)operations_research::sat::CpModelBuilder::NewBoolVar(*((operations_research::sat::CpModelBuilder **)this + 24));
          v98.__r_.__value_.__l.__size_ = v38;
          v39 = operations_research::sat::BoolVar::WithName((int *)&v98, &__str);
          v41 = v40;
          v98.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::AddBoolAnd(*((_QWORD *)this + 24), (uint64_t)__p, (v90 - (_BYTE *)__p) >> 4);
          operations_research::sat::Constraint::OnlyEnforceIf((uint64_t *)&v98, v39, v41);
          LODWORD(v87.__r_.__value_.__l.__data_) = v41;
          v98.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
          std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)&v101, (int *)&v87, (uint64_t)&std::piecewise_construct, &v98)[3] = v6;
          v42 = v105;
          if (v105 >= v106)
          {
            v44 = ((char *)v105 - (char *)v104) >> 4;
            v45 = v44 + 1;
            if ((unint64_t)(v44 + 1) >> 60)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v46 = (char *)v106 - (char *)v104;
            if (v106 - v104 > v45)
              v45 = v46 >> 3;
            if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0)
              v47 = 0xFFFFFFFFFFFFFFFLL;
            else
              v47 = v45;
            if (v47)
              v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)&v106, v47);
            else
              v48 = 0;
            v49 = (uint64_t *)&v48[16 * v44];
            *v49 = v39;
            v49[1] = v41;
            v51 = v104;
            v50 = v105;
            v52 = v49;
            if (v105 == v104)
            {
              v4 = v84;
            }
            else
            {
              v4 = v84;
              do
              {
                v53 = *(v50 - 2);
                v50 -= 2;
                v54 = *((_DWORD *)v50 + 2);
                *(v52 - 2) = v53;
                v52 -= 2;
                *((_DWORD *)v52 + 2) = v54;
              }
              while (v50 != v51);
              v50 = v104;
            }
            v43 = v49 + 2;
            v104 = v52;
            v105 = v49 + 2;
            v106 = (uint64_t *)&v48[16 * v47];
            if (v50)
              operator delete(v50);
          }
          else
          {
            *v105 = v39;
            v42[1] = v41;
            v43 = v42 + 2;
            v4 = v84;
          }
          v105 = v43;
          __val = v6;
        }
      }
LABEL_73:
      if (__p)
      {
        v90 = (char *)__p;
        operator delete(__p);
      }
LABEL_75:
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      ++v6;
      v5 += 9;
      if (v5 == v4)
      {
        v55 = (uint64_t)v104;
        v56 = v105;
        v3 = v82;
        goto LABEL_80;
      }
    }
  }
  v55 = 0;
  v56 = 0;
  __val = 0;
LABEL_80:
  v57 = ((uint64_t)v56 - v55) >> 4;
  v58 = (CpTransposeGraph ***)this;
  if (v57)
  {
    if (v57 == 1)
    {
      v59 = (uint64_t)&(*v3)[9 * __val];
      v60 = (const std::string::value_type **)(v59 + 48);
      if (*(char *)(v59 + 71) < 0)
      {
        std::string::__init_copy_ctor_external(&v98, *v60, *(_QWORD *)(v59 + 56));
      }
      else
      {
        v61 = *(_OWORD *)v60;
        v98.__r_.__value_.__r.__words[2] = *(_QWORD *)(v59 + 64);
        *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v61;
      }
      v69 = *(_QWORD *)v59;
      for (i = *(_QWORD *)(v59 + 8); v69 != i; v69 += 16)
      {
        v71 = *(void **)v69;
        __str.__r_.__value_.__r.__words[0] = *(_QWORD *)v69;
        if (!std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>((_QWORD *)this + 19, (unint64_t *)&__str)&& !*(_BYTE *)CpTransposeGraph::GetRootTensorConstraint(**v58, (unint64_t)v71))
        {
          __p = v71;
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          v72 = std::__tree<std::__value_type<unsigned long long,operations_research::sat::BoolVar>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,operations_research::sat::BoolVar>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,operations_research::sat::BoolVar>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this + 128, (unint64_t *)&__p, (uint64_t)&std::piecewise_construct, &__str);
          v73 = *(_DWORD *)(v69 + 8);
          v74 = (operations_research::sat::CpModelBuilder *)*((_QWORD *)this + 24);
          operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__str, v72[5], v72[6]);
          operations_research::sat::LinearExpr::LinearExpr((operations_research::sat::LinearExpr *)&__p, v73 == 1);
          v97 = operations_research::sat::CpModelBuilder::AddEquality(v74, (const operations_research::sat::LinearExpr *)&__str, (const operations_research::sat::LinearExpr *)&__p);
          if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v107.__r_.__value_.__r.__words[2]);
          else
            size = v107.__r_.__value_.__l.__size_;
          std::string::basic_string[abi:ne180100]((uint64_t)&v87, size + 18);
          if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v76 = &v87;
          else
            v76 = (std::string *)v87.__r_.__value_.__r.__words[0];
          if (size)
          {
            if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v77 = &v107;
            else
              v77 = (std::string *)v107.__r_.__value_.__r.__words[0];
            memmove(v76, v77, size);
          }
          strcpy((char *)v76 + size, ":presolved_to_row_");
          std::to_string(&v86, __val);
          if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v78 = &v86;
          else
            v78 = (std::string *)v86.__r_.__value_.__r.__words[0];
          if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v79 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
          else
            v79 = v86.__r_.__value_.__l.__size_;
          v80 = std::string::append(&v87, (const std::string::value_type *)v78, v79);
          v58 = (CpTransposeGraph ***)this;
          v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
          v88.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v81;
          v80->__r_.__value_.__l.__size_ = 0;
          v80->__r_.__value_.__r.__words[2] = 0;
          v80->__r_.__value_.__r.__words[0] = 0;
          operations_research::sat::Constraint::WithName((uint64_t *)&v97, &v88);
          if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v88.__r_.__value_.__l.__data_);
          if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v86.__r_.__value_.__l.__data_);
          if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v87.__r_.__value_.__l.__data_);
          if (v92)
          {
            v93 = v92;
            operator delete(v92);
          }
          if (__p)
          {
            v90 = (char *)__p;
            operator delete(__p);
          }
          if (v95)
          {
            v96 = v95;
            operator delete(v95);
          }
          if (__str.__r_.__value_.__r.__words[0])
          {
            __str.__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
            operator delete(__str.__r_.__value_.__l.__data_);
          }
        }
      }
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v98.__r_.__value_.__l.__data_);
    }
    else
    {
      v62 = (operations_research::sat::CpModelBuilder *)*((_QWORD *)this + 24);
      operations_research::sat::LinearExpr::BooleanSum(v55, v57, (uint64_t)&__str);
      v63 = operations_research::sat::CpModelBuilder::NewConstant(*((operations_research::sat::CpModelBuilder **)this + 24), 1);
      operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, (uint64_t)v63, v64);
      v88.__r_.__value_.__r.__words[0] = (std::string::size_type)operations_research::sat::CpModelBuilder::AddEquality(v62, (const operations_research::sat::LinearExpr *)&__str, (const operations_research::sat::LinearExpr *)&__p);
      if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v65 = HIBYTE(v107.__r_.__value_.__r.__words[2]);
      else
        v65 = v107.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v98, v65 + 6);
      if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v66 = &v98;
      else
        v66 = (std::string *)v98.__r_.__value_.__r.__words[0];
      if (v65)
      {
        if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v67 = &v107;
        else
          v67 = (std::string *)v107.__r_.__value_.__r.__words[0];
        memmove(v66, v67, v65);
      }
      strcpy((char *)v66 + v65, ":mutex");
      operations_research::sat::Constraint::WithName((uint64_t *)&v88, &v98);
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v98.__r_.__value_.__l.__data_);
      if (v92)
      {
        v93 = v92;
        operator delete(v92);
      }
      if (__p)
      {
        v90 = (char *)__p;
        operator delete(__p);
      }
      if (v95)
      {
        v96 = v95;
        operator delete(v95);
      }
      if (__str.__r_.__value_.__r.__words[0])
      {
        __str.__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v108;
      v68 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this + 40, v108, (uint64_t)&std::piecewise_construct, &__str);
      if (v68 + 3 != (_QWORD *)&v101)
      {
        *((_DWORD *)v68 + 14) = v103;
        std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<int,unsigned long>,void *> *>>(v68 + 3, (uint64_t *)v102, 0);
      }
    }
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)v99);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&v101);
  if (v104)
  {
    v105 = v104;
    operator delete(v104);
  }
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v107.__r_.__value_.__l.__data_);
}

void sub_22D9B12C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  uint64_t v56;
  void *v58;

  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v56 - 240);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v56 - 192);
  v58 = *(void **)(v56 - 152);
  if (v58)
  {
    *(_QWORD *)(v56 - 144) = v58;
    operator delete(v58);
  }
  if (*(char *)(v56 - 105) < 0)
    operator delete(*(void **)(v56 - 128));
  _Unwind_Resume(a1);
}

void ORToolsCpTransposer::SetObjectiveFunction(ORToolsCpTransposer *this)
{
  char *v2;
  char *v3;
  unint64_t *v4;
  void *v5;
  uint64_t *v6;
  char *v7;
  char *v8;
  uint64_t *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  int v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  int v33;
  char *v34;
  char *v35;
  BOOL v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  operations_research::sat::CpModelBuilder *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  operations_research::sat::CpModelBuilder *v46;
  _DWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  std::string __str;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  std::string __p;
  void *v56;
  void *v57;
  operations_research::sat::CpModelBuilder *v58;
  _QWORD v59[3];
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;

  v49 = *((_QWORD *)this + 18);
  v63 = 0;
  v64 = 0;
  v65 = 0;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v2 = (char *)*((_QWORD *)this + 10);
  v3 = (char *)this + 88;
  if (v2 != (char *)this + 88)
  {
    do
    {
      v4 = (unint64_t *)(v2 + 32);
      if (!std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>((_QWORD *)this + 19, (unint64_t *)v2 + 4))
      {
        CpTransposeGraph::GetTensorDimensions(**(CpTransposeGraph ***)this, *v4, (uint64_t)&__p);
        v5 = v56;
        CpTransposeGraph::GetTensorDimensions(**(CpTransposeGraph ***)this, *v4, (uint64_t)&v51);
        if ((uint64_t)v5 >= (uint64_t)v52)
        {
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v2 + 32);
          v9 = std::__tree<std::__value_type<unsigned long long,operations_research::sat::BoolVar>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,operations_research::sat::BoolVar>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,operations_research::sat::BoolVar>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this + 128, (unint64_t *)v2 + 4, (uint64_t)&std::piecewise_construct, &__p)+ 5;
          v10 = v61;
          if (v61 >= v62)
          {
            v17 = (v61 - v60) >> 4;
            v18 = v17 + 1;
            if ((unint64_t)(v17 + 1) >> 60)
LABEL_79:
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v19 = v62 - v60;
            if ((v62 - v60) >> 3 > v18)
              v18 = v19 >> 3;
            if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
              v20 = 0xFFFFFFFFFFFFFFFLL;
            else
              v20 = v18;
            if (v20)
              v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)&v62, v20);
            else
              v21 = 0;
            v28 = &v21[16 * v17];
            *(_OWORD *)v28 = *(_OWORD *)v9;
            v30 = v60;
            v29 = v61;
            v31 = v28;
            if (v61 != v60)
            {
              do
              {
                v32 = *((_QWORD *)v29 - 2);
                v29 -= 16;
                v33 = *((_DWORD *)v29 + 2);
                *((_QWORD *)v31 - 2) = v32;
                v31 -= 16;
                *((_DWORD *)v31 + 2) = v33;
              }
              while (v29 != v30);
              v29 = v60;
            }
            v11 = v28 + 16;
            v60 = v31;
            v61 = v28 + 16;
            v62 = &v21[16 * v20];
            if (v29)
              operator delete(v29);
          }
          else
          {
            *(_OWORD *)v61 = *(_OWORD *)v9;
            v11 = v10 + 16;
          }
          v61 = v11;
        }
        else
        {
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v2 + 32);
          v6 = std::__tree<std::__value_type<unsigned long long,operations_research::sat::BoolVar>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,operations_research::sat::BoolVar>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,operations_research::sat::BoolVar>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this + 128, (unint64_t *)v2 + 4, (uint64_t)&std::piecewise_construct, &__p)+ 5;
          v7 = v64;
          if (v64 >= v65)
          {
            v12 = (v64 - v63) >> 4;
            v13 = v12 + 1;
            if ((unint64_t)(v12 + 1) >> 60)
              goto LABEL_79;
            v14 = v65 - v63;
            if ((v65 - v63) >> 3 > v13)
              v13 = v14 >> 3;
            if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
              v15 = 0xFFFFFFFFFFFFFFFLL;
            else
              v15 = v13;
            if (v15)
              v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)&v65, v15);
            else
              v16 = 0;
            v22 = &v16[16 * v12];
            *(_OWORD *)v22 = *(_OWORD *)v6;
            v24 = v63;
            v23 = v64;
            v25 = v22;
            if (v64 != v63)
            {
              do
              {
                v26 = *((_QWORD *)v23 - 2);
                v23 -= 16;
                v27 = *((_DWORD *)v23 + 2);
                *((_QWORD *)v25 - 2) = v26;
                v25 -= 16;
                *((_DWORD *)v25 + 2) = v27;
              }
              while (v23 != v24);
              v23 = v63;
            }
            v8 = v22 + 16;
            v63 = v25;
            v64 = v22 + 16;
            v65 = &v16[16 * v15];
            if (v23)
              operator delete(v23);
          }
          else
          {
            *(_OWORD *)v64 = *(_OWORD *)v6;
            v8 = v7 + 16;
          }
          v64 = v8;
        }
      }
      v34 = (char *)*((_QWORD *)v2 + 1);
      if (v34)
      {
        do
        {
          v35 = v34;
          v34 = *(char **)v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          v35 = (char *)*((_QWORD *)v2 + 2);
          v36 = *(_QWORD *)v35 == (_QWORD)v2;
          v2 = v35;
        }
        while (!v36);
      }
      v2 = v35;
    }
    while (v35 != v3);
  }
  operations_research::Domain::Domain(v59, 0, v49);
  v51 = operations_research::sat::CpModelBuilder::NewIntVar(*((operations_research::sat::CpModelBuilder **)this + 24), (const operations_research::Domain *)v59);
  v52 = v37;
  std::string::basic_string[abi:ne180100]<0>(&__p, "valid_transpose_count");
  v38 = operations_research::sat::BoolVar::WithName((int *)&v51, &__p);
  v40 = v39;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v41 = (operations_research::sat::CpModelBuilder *)*((_QWORD *)this + 24);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, v38, v40);
  operations_research::sat::LinearExpr::BooleanSum((uint64_t)v63, (v64 - v63) >> 4, (uint64_t)&v51);
  v58 = operations_research::sat::CpModelBuilder::AddEquality(v41, (const operations_research::sat::LinearExpr *)&__p, (const operations_research::sat::LinearExpr *)&v51);
  std::string::basic_string[abi:ne180100]<0>(&__str, "objective_function_valid");
  operations_research::sat::Constraint::WithName((uint64_t *)&v58, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v53)
  {
    v54 = v53;
    operator delete(v53);
  }
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
  if (v56)
  {
    v57 = v56;
    operator delete(v56);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v51 = operations_research::sat::CpModelBuilder::NewIntVar(*((operations_research::sat::CpModelBuilder **)this + 24), (const operations_research::Domain *)v59);
  v52 = v42;
  std::string::basic_string[abi:ne180100]<0>(&__p, "invalid_transpose_count");
  v43 = operations_research::sat::BoolVar::WithName((int *)&v51, &__p);
  v45 = v44;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v46 = (operations_research::sat::CpModelBuilder *)*((_QWORD *)this + 24);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, v43, v45);
  operations_research::sat::LinearExpr::BooleanSum((uint64_t)v60, (v61 - v60) >> 4, (uint64_t)&v51);
  v58 = operations_research::sat::CpModelBuilder::AddEquality(v46, (const operations_research::sat::LinearExpr *)&__p, (const operations_research::sat::LinearExpr *)&v51);
  std::string::basic_string[abi:ne180100]<0>(&__str, "objective_function_invalid");
  operations_research::sat::Constraint::WithName((uint64_t *)&v58, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v53)
  {
    v54 = v53;
    operator delete(v53);
  }
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
  if (v56)
  {
    v57 = v56;
    operator delete(v56);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v47 = operator new(0x20uLL);
  *(_QWORD *)v47 = v38;
  v47[2] = v40;
  *((_QWORD *)v47 + 2) = v43;
  v47[6] = v45;
  v48 = (uint64_t *)operator new(0x10uLL);
  *(_OWORD *)v48 = xmmword_22DCE5B10;
  operations_research::sat::LinearExpr::ScalProd((uint64_t)v47, 2uLL, v48, 2, (uint64_t)&__p);
  operations_research::sat::CpModelBuilder::Maximize(*((operations_research::sat::CpModelBuilder **)this + 24), (const operations_research::sat::LinearExpr *)&__p);
  if (v56)
  {
    v57 = v56;
    operator delete(v56);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  operator delete(v48);
  operator delete(v47);
  if ((v59[0] & 1) != 0)
    operator delete((void *)v59[1]);
  if (v60)
  {
    v61 = v60;
    operator delete(v60);
  }
  if (v63)
  {
    v64 = v63;
    operator delete(v63);
  }
}

void sub_22D9B19B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  void *v31;
  void *v32;
  uint64_t v33;
  void *v35;
  void *v36;

  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a26);
  operator delete(v31);
  operator delete(v32);
  if ((*(_BYTE *)(v33 - 160) & 1) != 0)
    operator delete(*(void **)(v33 - 152));
  v35 = *(void **)(v33 - 136);
  if (v35)
  {
    *(_QWORD *)(v33 - 128) = v35;
    operator delete(v35);
  }
  v36 = *(void **)(v33 - 112);
  if (v36)
  {
    *(_QWORD *)(v33 - 104) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x24BEDB858];
  v3 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_22D9B1BB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x22E31DEF4](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x22E31DEF4](a1 + 128);
  return a1;
}

void operations_research::sat::Model::~Model(operations_research::sat::Model *this)
{
  void **v2;

  v2 = (void **)((char *)this + 48);
  std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)this + 24, *((_QWORD **)this + 4));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void ORToolsCpTransposer::PrintConstraintProblem(ORToolsCpTransposer *this)
{
  _QWORD *v2;
  _QWORD *v3;
  const std::locale::facet *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::locale::id *v11;
  google::protobuf::Message *v12;
  _QWORD *v13;
  std::string *v14;
  std::string::size_type size;
  _QWORD *v16;
  const std::locale::facet *v17;
  std::string *v18;
  std::string::size_type v19;
  _QWORD *v20;
  const std::locale::facet *v21;
  _QWORD *v22;
  const std::locale::facet *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  std::locale::id *v30;
  google::protobuf::Message *v31;
  _QWORD *v32;
  std::string *v33;
  std::string::size_type v34;
  _QWORD *v35;
  const std::locale::facet *v36;
  std::string *v37;
  std::string::size_type v38;
  _QWORD *v39;
  const std::locale::facet *v40;
  _QWORD *v41;
  const std::locale::facet *v42;
  _QWORD *v43;
  const std::locale::facet *v44;
  __n128 v45;
  std::string *v46;
  std::string::size_type v47;
  _QWORD *v48;
  const std::locale::facet *v49;
  ORToolsCpTransposer *v50;
  std::string v51;
  std::locale v52;

  if (*((_QWORD *)this + 42))
  {
    v2 = (_QWORD *)((char *)this + 208);
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)this + 26, (uint64_t)"[Variables]", 11);
    std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)));
    v4 = std::locale::use_facet((const std::locale *)&v51, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
    std::locale::~locale((std::locale *)&v51);
    std::ostream::put();
    std::ostream::flush();
    v50 = this;
    v5 = *((_QWORD *)this + 24);
    v6 = *(_QWORD *)(v5 + 32);
    if (v6)
      v7 = v6 + 8;
    else
      v7 = 0;
    v8 = *(int *)(v5 + 24);
    if ((_DWORD)v8)
    {
      v9 = 0;
      v10 = 8 * v8;
      v11 = (std::locale::id *)MEMORY[0x24BEDB350];
      do
      {
        v12 = *(google::protobuf::Message **)(v7 + 8 * v9);
        v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"vars: ", 6);
        std::to_string(&v51, v9);
        if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v14 = &v51;
        else
          v14 = (std::string *)v51.__r_.__value_.__r.__words[0];
        if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v51.__r_.__value_.__r.__words[2]);
        else
          size = v51.__r_.__value_.__l.__size_;
        v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, size);
        std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
        v17 = std::locale::use_facet(&v52, v11);
        ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
        std::locale::~locale(&v52);
        std::ostream::put();
        std::ostream::flush();
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v51.__r_.__value_.__l.__data_);
        google::protobuf::Message::DebugString(v12, &v51);
        if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v18 = &v51;
        else
          v18 = (std::string *)v51.__r_.__value_.__r.__words[0];
        if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v19 = HIBYTE(v51.__r_.__value_.__r.__words[2]);
        else
          v19 = v51.__r_.__value_.__l.__size_;
        v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v18, v19);
        std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(_QWORD *)(*v20 - 24)));
        v21 = std::locale::use_facet(&v52, v11);
        ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
        std::locale::~locale(&v52);
        std::ostream::put();
        std::ostream::flush();
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v51.__r_.__value_.__l.__data_);
        ++v9;
        v10 -= 8;
      }
      while (v10);
    }
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"\n\n[Constraints]", 15);
    std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(_QWORD *)(*v22 - 24)));
    v23 = std::locale::use_facet((const std::locale *)&v51, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
    std::locale::~locale((std::locale *)&v51);
    std::ostream::put();
    std::ostream::flush();
    v24 = *((_QWORD *)v50 + 24);
    v25 = *(_QWORD *)(v24 + 56);
    if (v25)
      v26 = v25 + 8;
    else
      v26 = 0;
    v27 = *(int *)(v24 + 48);
    if ((_DWORD)v27)
    {
      v28 = 0;
      v29 = 8 * v27;
      v30 = (std::locale::id *)MEMORY[0x24BEDB350];
      do
      {
        v31 = *(google::protobuf::Message **)(v26 + 8 * v28);
        v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"constraint id: ", 15);
        std::to_string(&v51, v28);
        if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v33 = &v51;
        else
          v33 = (std::string *)v51.__r_.__value_.__r.__words[0];
        if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v34 = HIBYTE(v51.__r_.__value_.__r.__words[2]);
        else
          v34 = v51.__r_.__value_.__l.__size_;
        v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v33, v34);
        std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(_QWORD *)(*v35 - 24)));
        v36 = std::locale::use_facet(&v52, v30);
        ((void (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10);
        std::locale::~locale(&v52);
        std::ostream::put();
        std::ostream::flush();
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v51.__r_.__value_.__l.__data_);
        google::protobuf::Message::DebugString(v31, &v51);
        if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = &v51;
        else
          v37 = (std::string *)v51.__r_.__value_.__r.__words[0];
        if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v38 = HIBYTE(v51.__r_.__value_.__r.__words[2]);
        else
          v38 = v51.__r_.__value_.__l.__size_;
        v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v37, v38);
        std::ios_base::getloc((const std::ios_base *)((char *)v39 + *(_QWORD *)(*v39 - 24)));
        v40 = std::locale::use_facet(&v52, v30);
        ((void (*)(const std::locale::facet *, uint64_t))v40->__vftable[2].~facet_0)(v40, 10);
        std::locale::~locale(&v52);
        std::ostream::put();
        std::ostream::flush();
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v51.__r_.__value_.__l.__data_);
        ++v28;
        v29 -= 8;
      }
      while (v29);
    }
    v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"\n\n[Stats]", 9);
    std::ios_base::getloc((const std::ios_base *)((char *)v41 + *(_QWORD *)(*v41 - 24)));
    v42 = std::locale::use_facet((const std::locale *)&v51, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
    std::locale::~locale((std::locale *)&v51);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"NodeCount=", 10);
    v43 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(_QWORD *)(*v43 - 24)));
    v44 = std::locale::use_facet((const std::locale *)&v51, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10);
    std::locale::~locale((std::locale *)&v51);
    std::ostream::put();
    std::ostream::flush();
    operations_research::sat::CpModelStats(*((operations_research::sat **)v50 + 24), &v51, v45);
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v46 = &v51;
    else
      v46 = (std::string *)v51.__r_.__value_.__r.__words[0];
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v47 = HIBYTE(v51.__r_.__value_.__r.__words[2]);
    else
      v47 = v51.__r_.__value_.__l.__size_;
    v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v46, v47);
    std::ios_base::getloc((const std::ios_base *)((char *)v48 + *(_QWORD *)(*v48 - 24)));
    v49 = std::locale::use_facet(&v52, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v49->__vftable[2].~facet_0)(v49, 10);
    std::locale::~locale(&v52);
    std::ostream::put();
    std::ostream::flush();
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
  }
}

void sub_22D9B225C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, std::locale a17)
{
  std::locale::~locale(&a17);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL ORToolsCpTransposer::TranslateToDecisionMap(ORToolsCpTransposer *this, const operations_research::sat::CpSolverResponse *a2)
{
  int v4;
  _QWORD *v5;
  const std::locale::facet *v6;
  _QWORD *v7;
  const std::locale::facet *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  _QWORD *v11;
  const std::locale::facet *v12;
  uint64_t v13;
  const char *v14;
  size_t v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  BOOL v18;
  _QWORD *v19;
  const std::locale::facet *v20;
  _QWORD *v21;
  const std::locale::facet *v22;
  ORToolsCpTransposer *v23;
  std::locale::id *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _BOOL4 v33;
  std::string *v34;
  std::string::size_type size;
  _QWORD *v36;
  const std::locale::facet *v37;
  ORToolsCpTransposer *v38;
  ORToolsCpTransposer *v39;
  ORToolsCpTransposer *v40;
  uint64_t v41;
  _BOOL4 v42;
  uint64_t **v43;
  ORToolsCpTransposer *v44;
  ORToolsCpTransposer *v45;
  ORToolsCpTransposer *v46;
  uint64_t **i;
  uint64_t v48;
  uint64_t **v49;
  uint64_t **v50;
  ORToolsCpTransposer *v51;
  ORToolsCpTransposer *v52;
  int v55;
  _QWORD *v56;
  std::string v57;
  std::locale v58;

  v4 = *((_DWORD *)a2 + 38);
  v56 = (_QWORD *)((char *)this + 208);
  if (*((_QWORD *)this + 42))
  {
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"\n\n[Solver Status]", 17);
    std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(_QWORD *)(*v5 - 24)));
    v6 = std::locale::use_facet((const std::locale *)&v57, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
    std::locale::~locale((std::locale *)&v57);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"User Time = ", 12);
    v7 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(_QWORD *)(*v7 - 24)));
    v8 = std::locale::use_facet((const std::locale *)&v57, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
    std::locale::~locale((std::locale *)&v57);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"Wall Time = ", 12);
    v9 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
    v10 = std::locale::use_facet((const std::locale *)&v57, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale((std::locale *)&v57);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"Deterministic Time = ", 21);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(*v11 - 24)));
    v12 = std::locale::use_facet((const std::locale *)&v57, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale((std::locale *)&v57);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"Status = ", 9);
    v13 = *((int *)a2 + 38);
    if (v13 >= 4)
    {
      if ((_DWORD)v13 == 4)
        v14 = "OPTIMAL";
      else
        v14 = "ERROR";
    }
    else
    {
      v14 = off_24F97F4F0[v13];
    }
    v15 = strlen(v14);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)v14, v15);
    std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
    v17 = std::locale::use_facet((const std::locale *)&v57, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
    std::locale::~locale((std::locale *)&v57);
    std::ostream::put();
    std::ostream::flush();
  }
  v55 = v4;
  v18 = v4 == 4 || v4 == 2;
  if (v18)
  {
    if (*((_QWORD *)this + 42))
    {
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"\n\n[Solver Result]", 17);
      std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(*v19 - 24)));
      v20 = std::locale::use_facet((const std::locale *)&v57, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
      std::locale::~locale((std::locale *)&v57);
      std::ostream::put();
      std::ostream::flush();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"Objective = ", 12);
      v21 = (_QWORD *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(_QWORD *)(*v21 - 24)));
      v22 = std::locale::use_facet((const std::locale *)&v57, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
      std::locale::~locale((std::locale *)&v57);
      std::ostream::put();
      std::ostream::flush();
      v23 = (ORToolsCpTransposer *)*((_QWORD *)this + 16);
      if (v23 != (ORToolsCpTransposer *)((char *)this + 136))
      {
        v24 = (std::locale::id *)MEMORY[0x24BEDB350];
        do
        {
          v25 = *((_QWORD *)v23 + 5);
          v26 = *((_QWORD *)v23 + 6);
          v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 32) + 8 * (int)v26 + 8) + 40);
          v28 = *(char *)(v27 + 23);
          if (v28 >= 0)
            v29 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 32) + 8 * (int)v26 + 8) + 40);
          else
            v29 = *(_QWORD *)v27;
          if (v28 >= 0)
            v30 = *(unsigned __int8 *)(v27 + 23);
          else
            v30 = *(_QWORD *)(v27 + 8);
          v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, v29, v30);
          v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" = ", 3);
          v33 = operations_research::sat::SolutionBooleanValue((uint64_t)a2, v25, v26);
          std::to_string(&v57, v33);
          if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v34 = &v57;
          else
            v34 = (std::string *)v57.__r_.__value_.__r.__words[0];
          if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
          else
            size = v57.__r_.__value_.__l.__size_;
          v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v34, size);
          std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(_QWORD *)(*v36 - 24)));
          v37 = std::locale::use_facet(&v58, v24);
          ((void (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
          std::locale::~locale(&v58);
          std::ostream::put();
          std::ostream::flush();
          if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v57.__r_.__value_.__l.__data_);
          v38 = (ORToolsCpTransposer *)*((_QWORD *)v23 + 1);
          if (v38)
          {
            do
            {
              v39 = v38;
              v38 = *(ORToolsCpTransposer **)v38;
            }
            while (v38);
          }
          else
          {
            do
            {
              v39 = (ORToolsCpTransposer *)*((_QWORD *)v23 + 2);
              v18 = *(_QWORD *)v39 == (_QWORD)v23;
              v23 = v39;
            }
            while (!v18);
          }
          v23 = v39;
        }
        while (v39 != (ORToolsCpTransposer *)((char *)this + 136));
      }
    }
    v40 = (ORToolsCpTransposer *)*((_QWORD *)this + 16);
    if (v40 != (ORToolsCpTransposer *)((char *)this + 136))
    {
      do
      {
        v41 = *((_QWORD *)v40 + 5);
        v58.__locale_ = (std::locale::__imp *)*((_QWORD *)v40 + 4);
        v42 = operations_research::sat::SolutionBooleanValue((uint64_t)a2, v41, *((_QWORD *)v40 + 6));
        v43 = (uint64_t **)*((_QWORD *)this + 1);
        v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
        *((_DWORD *)std::__tree<std::__value_type<unsigned long long,CpTransposeUtils::TransposeType>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CpTransposeUtils::TransposeType>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CpTransposeUtils::TransposeType>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v43, (unint64_t *)&v58, (uint64_t)&std::piecewise_construct, &v57)+ 10) = v42;
        v44 = (ORToolsCpTransposer *)*((_QWORD *)v40 + 1);
        if (v44)
        {
          do
          {
            v45 = v44;
            v44 = *(ORToolsCpTransposer **)v44;
          }
          while (v44);
        }
        else
        {
          do
          {
            v45 = (ORToolsCpTransposer *)*((_QWORD *)v40 + 2);
            v18 = *(_QWORD *)v45 == (_QWORD)v40;
            v40 = v45;
          }
          while (!v18);
        }
        v40 = v45;
      }
      while (v45 != (ORToolsCpTransposer *)((char *)this + 136));
    }
    v46 = (ORToolsCpTransposer *)*((_QWORD *)this + 13);
    if (v46 != (ORToolsCpTransposer *)((char *)this + 112))
    {
      do
      {
        v57.__r_.__value_.__r.__words[0] = (std::string::size_type)v46 + 32;
        for (i = (uint64_t **)std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this + 40, (unint64_t *)v46 + 4, (uint64_t)&std::piecewise_construct, &v57)[5]; i; i = (uint64_t **)*i)
        {
          if (*(_QWORD *)(*((_QWORD *)a2 + 3) + 8 * *((int *)i + 4)))
          {
            v48 = (uint64_t)i[3];
            v49 = (uint64_t **)(*((_QWORD *)this + 1) + 48);
            v57.__r_.__value_.__r.__words[0] = (std::string::size_type)v46 + 32;
            std::__tree<std::__value_type<unsigned long long,unsigned long>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned long>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v49, (unint64_t *)v46 + 4, (uint64_t)&std::piecewise_construct, (uint64_t **)&v57)[5] = v48;
            LODWORD(v48) = *(unsigned __int8 *)(*CpTransposeGraph::GetLayerTruthTable(**(CpTransposeGraph ***)this, *((_QWORD *)v46 + 4))+ 72 * (_QWORD)i[3]+ 25);
            v50 = (uint64_t **)(*((_QWORD *)this + 1) + 24);
            v57.__r_.__value_.__r.__words[0] = (std::string::size_type)v46 + 32;
            *((_DWORD *)std::__tree<std::__value_type<unsigned long long,CpTransposeUtils::TransposeType>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CpTransposeUtils::TransposeType>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CpTransposeUtils::TransposeType>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v50, (unint64_t *)v46 + 4, (uint64_t)&std::piecewise_construct, &v57)+ 10) = v48;
          }
        }
        v51 = (ORToolsCpTransposer *)*((_QWORD *)v46 + 1);
        if (v51)
        {
          do
          {
            v52 = v51;
            v51 = *(ORToolsCpTransposer **)v51;
          }
          while (v51);
        }
        else
        {
          do
          {
            v52 = (ORToolsCpTransposer *)*((_QWORD *)v46 + 2);
            v18 = *(_QWORD *)v52 == (_QWORD)v46;
            v46 = v52;
          }
          while (!v18);
        }
        v46 = v52;
      }
      while (v52 != (ORToolsCpTransposer *)((char *)this + 112));
    }
  }
  return v55 == 2 || v55 == 4;
}

void sub_22D9B2978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, std::locale a19)
{
  std::locale::~locale(&a12);
  _Unwind_Resume(a1);
}

BOOL ORToolsCpTransposer::Execute(ORToolsCpTransposer *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  BOOL v6;
  char *v7;
  char *v8;
  ORToolsCpTransposer *v9;
  ORToolsCpTransposer *v10;
  ORToolsCpTransposer *v11;
  operations_research::sat *v12;
  uint64_t v13;
  _BOOL8 v14;
  _BYTE v16[248];

  v2 = (char *)*((_QWORD *)this + 10);
  v3 = (char *)this + 88;
  if (v2 != (char *)this + 88)
  {
    do
    {
      ORToolsCpTransposer::CreateTensorDecisionVariable(this, *((_QWORD *)v2 + 4));
      v4 = (char *)*((_QWORD *)v2 + 1);
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (char *)*((_QWORD *)v2 + 2);
          v6 = *(_QWORD *)v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
    }
    while (v5 != v3);
    v2 = (char *)*((_QWORD *)this + 10);
  }
  if (v2 != v3)
  {
    do
    {
      if (!std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>((_QWORD *)this + 19, (unint64_t *)v2 + 4))ORToolsCpTransposer::CreateTensorConstraint((CpTransposeGraph ***)this, *((_QWORD *)v2 + 4));
      v7 = (char *)*((_QWORD *)v2 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (char *)*((_QWORD *)v2 + 2);
          v6 = *(_QWORD *)v8 == (_QWORD)v2;
          v2 = v8;
        }
        while (!v6);
      }
      v2 = v8;
    }
    while (v8 != v3);
  }
  v9 = (ORToolsCpTransposer *)*((_QWORD *)this + 13);
  if (v9 != (ORToolsCpTransposer *)((char *)this + 112))
  {
    do
    {
      ORToolsCpTransposer::CreateLayerConstraints(this, *((_QWORD *)v9 + 4));
      v10 = (ORToolsCpTransposer *)*((_QWORD *)v9 + 1);
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = *(ORToolsCpTransposer **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (ORToolsCpTransposer *)*((_QWORD *)v9 + 2);
          v6 = *(_QWORD *)v11 == (_QWORD)v9;
          v9 = v11;
        }
        while (!v6);
      }
      v9 = v11;
    }
    while (v11 != (ORToolsCpTransposer *)((char *)this + 112));
  }
  ORToolsCpTransposer::SetObjectiveFunction(this);
  v12 = (operations_research::sat *)*((_QWORD *)this + 24);
  ORToolsCpTransposer::PrintConstraintProblem(this);
  v13 = *((_QWORD *)this + 25);
  *(_DWORD *)(v13 + 20) |= 0x20000000u;
  *(_QWORD *)(v13 + 280) = 0x403E000000000000;
  operations_research::sat::SolveWithParameters(v12, (const operations_research::sat::CpModelProto *)v13, (std::string::size_type)v16);
  v14 = ORToolsCpTransposer::TranslateToDecisionMap(this, (const operations_research::sat::CpSolverResponse *)v16);
  operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)v16);
  return v14;
}

void sub_22D9B2B64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)va);
  _Unwind_Resume(a1);
}

BOOL ORToolsCpBasedTransposerUtil_CallCpTransposer(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  _BOOL8 v4;
  uint64_t *v6[98];

  v6[97] = *(uint64_t **)MEMORY[0x24BDAC8D0];
  ORToolsCpTransposer::ORToolsCpTransposer(v6, a1, a2, a3, a4);
  v4 = ORToolsCpTransposer::Execute((ORToolsCpTransposer *)v6);
  ORToolsCpTransposer::~ORToolsCpTransposer((ORToolsCpTransposer *)v6);
  return v4;
}

void sub_22D9B2BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ORToolsCpTransposer::~ORToolsCpTransposer((ORToolsCpTransposer *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x22E31DD2C](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x22E31DD38](v13);
  return a1;
}

void sub_22D9B2F38(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x22E31DD38](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x22D9B2F18);
}

void sub_22D9B2F80(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_22D9B30B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::~raw_hash_set(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  absl::lts_2020_02_25::container_internal::HashtablezInfoHandle::~HashtablezInfoHandle((absl::lts_2020_02_25::container_internal::HashtablezInfoHandle *)(a1 + 32));
  return a1;
}

void absl::lts_2020_02_25::container_internal::HashtablezInfoHandle::~HashtablezInfoHandle(absl::lts_2020_02_25::container_internal::HashtablezInfoHandle *this)
{
  _QWORD *v1;

  v1 = *(_QWORD **)this;
  if (v1)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v1);
}

{
  _QWORD *v1;

  v1 = *(_QWORD **)this;
  if (v1)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v1);
}

void std::default_delete<operations_research::sat::CpModelBuilder>::operator()[abi:ne180100](uint64_t a1, operations_research::sat::CpModelProto *a2)
{
  if (a2)
  {
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::~raw_hash_set((uint64_t)a2 + 192);
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::~raw_hash_set((uint64_t)a2 + 144);
    operations_research::sat::CpModelProto::~CpModelProto(a2);
    JUMPOUT(0x22E31DF78);
  }
}

operations_research::sat::SatParameters *std::unique_ptr<operations_research::sat::SatParameters>::reset[abi:ne180100](operations_research::sat::SatParameters **a1, operations_research::sat::SatParameters *a2)
{
  operations_research::sat::SatParameters *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    operations_research::sat::SatParameters::~SatParameters(result);
    JUMPOUT(0x22E31DF78);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t *std::__tree<unsigned long long>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t *std::__tree<unsigned long long>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

_QWORD *std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v6;
  i[2] = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_22D9B37E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

uint64_t **std::__tree<std::__value_type<unsigned long long,CpTransposeUtils::TransposeType>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CpTransposeUtils::TransposeType>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CpTransposeUtils::TransposeType>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  _QWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[4] = **a4;
    *((_DWORD *)v11 + 10) = 0;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t **std::__tree<std::__value_type<unsigned long long,operations_research::sat::BoolVar>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,operations_research::sat::BoolVar>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,operations_research::sat::BoolVar>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,operations_research::sat::BoolVar>>(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  _OWORD *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = operator new(0x38uLL);
    v10[2] = *(_OWORD *)a3;
    *((_QWORD *)v10 + 6) = *(_QWORD *)(a3 + 16);
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t *std::__tree<std::__value_type<unsigned long long,operations_research::sat::BoolVar>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,operations_research::sat::BoolVar>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,operations_research::sat::BoolVar>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v11;

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = (uint64_t **)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<unsigned long long,operations_research::sat::BoolVar>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,operations_research::sat::BoolVar>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,operations_research::sat::BoolVar>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a1, a4, (uint64_t)&v11);
    std::__tree<unsigned long long>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v6, v11);
    return v11;
  }
  return (uint64_t *)v8;
}

uint64_t std::__tree<std::__value_type<unsigned long long,operations_research::sat::BoolVar>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,operations_research::sat::BoolVar>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,operations_research::sat::BoolVar>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, _QWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v6[4] = **a2;
  result = operations_research::sat::BoolVar::BoolVar((uint64_t)(v6 + 5));
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_22D9B3CC0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_22D9B3EE4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = a1 + 16;
  v14 = (char *)operator new(0x40uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v7;
  *((_QWORD *)v14 + 2) = **a4;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  v11 = (_QWORD *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return v11;
}

void sub_22D9B414C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<int,unsigned long>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)v2 + 24);
    operator delete(v2);
  }
}

void std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<int,unsigned long>,void *> *>>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *inserted;
  uint64_t *v12;

  v6 = a1[1];
  if (!v6)
    goto LABEL_9;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      v9 = *((int *)a2 + 4);
      *((_DWORD *)v8 + 4) = v9;
      v8[3] = a2[3];
      v10 = (uint64_t *)*v8;
      v8[1] = v9;
      inserted = (_QWORD *)std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__node_insert_multi_prepare((uint64_t)a1, v9, (_DWORD *)v8 + 4);
      std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__node_insert_multi_perform(a1, v8, inserted);
      a2 = (uint64_t *)*a2;
      v8 = v10;
      if (!v10)
        goto LABEL_9;
    }
    do
    {
      v12 = (uint64_t *)*v8;
      operator delete(v8);
      v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__emplace_multi<std::pair<int const,unsigned long> const&>(a1, (_OWORD *)a2 + 1);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_22D9B4284(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_22D9B42A4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  _BOOL8 v10;
  size_t v11;
  unint64_t v12;
  size_t v13;
  uint8x8_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t result;
  unint64_t v19;
  unint64_t v20;
  _BOOL4 v21;
  int v22;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 2 * v6;
    v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    v11 = v10 | v9;
    v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12)
      v13 = v12;
    else
      v13 = v11;
    std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__rehash<false>(a1, v13);
    v6 = *(_QWORD *)(a1 + 8);
  }
  v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v15 = a2;
    if (v6 <= a2)
      v15 = a2 % v6;
  }
  else
  {
    v15 = (v6 - 1) & a2;
  }
  v16 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v15);
  if (!v16)
    return 0;
  v17 = 0;
  do
  {
    result = v16;
    v16 = *(_QWORD *)v16;
    if (!v16)
      break;
    v19 = *(_QWORD *)(v16 + 8);
    if (v14.u32[0] > 1uLL)
    {
      v20 = *(_QWORD *)(v16 + 8);
      if (v19 >= v6)
        v20 = v19 % v6;
    }
    else
    {
      v20 = v19 & (v6 - 1);
    }
    if (v20 != v15)
      break;
    v21 = v19 == a2 && *(_DWORD *)(v16 + 16) == *a3;
    v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__node_insert_multi_perform(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(_QWORD *)(*result + 8 * v4) = result + 2;
    if (!*a2)
      goto LABEL_19;
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
LABEL_18:
    *(_QWORD *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
    if (v6 != v4)
      goto LABEL_18;
  }
LABEL_19:
  ++result[3];
  return result;
}

void std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__do_rehash<false>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t **v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  uint64_t *i;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(uint64_t ***)(a1 + 16);
    if (v7)
    {
      v8 = (unint64_t)v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      for (i = *v7; *v7; i = *v7)
      {
        v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2)
            v12 %= a2;
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          v7 = (uint64_t **)i;
        }
        else
        {
          v13 = i;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
          {
            do
            {
              v14 = v13;
              v13 = (uint64_t *)*v13;
            }
            while (v13 && *((_DWORD *)i + 4) == *((_DWORD *)v13 + 4));
            *v7 = v13;
            *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
            v7 = (uint64_t **)i;
            v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

int *std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__emplace_multi<std::pair<int const,unsigned long> const&>(_QWORD *a1, _OWORD *a2)
{
  int *v4;
  unint64_t v5;
  _QWORD *inserted;

  v4 = (int *)operator new(0x20uLL);
  *((_OWORD *)v4 + 1) = *a2;
  v5 = v4[4];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = v5;
  inserted = (_QWORD *)std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4 + 4);
  std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__node_insert_multi_perform(a1, v4, inserted);
  return v4;
}

void sub_22D9B47A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x22E31DF78);
}

uint64_t std::stringbuf::str[abi:ne180100]<std::allocator<char>>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  unint64_t v4;
  const void *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  result = std::stringbuf::view[abi:ne180100](a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = (const void *)result;
  v6 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((_BYTE *)a2 + 23) = v4;
    if (!v4)
      goto LABEL_9;
  }
  result = (uint64_t)memmove(a2, v5, v6);
LABEL_9:
  *((_BYTE *)a2 + v6) = 0;
  return result;
}

uint64_t std::stringbuf::view[abi:ne180100](uint64_t a1)
{
  int v1;
  unint64_t v3;

  v1 = *(_DWORD *)(a1 + 96);
  if ((v1 & 0x10) != 0)
  {
    v3 = *(_QWORD *)(a1 + 48);
    if (*(_QWORD *)(a1 + 88) < v3)
      *(_QWORD *)(a1 + 88) = v3;
    return *(_QWORD *)(a1 + 40);
  }
  else if ((v1 & 8) != 0)
  {
    return *(_QWORD *)(a1 + 16);
  }
  else
  {
    return 0;
  }
}

uint64_t *std::__tree<std::__value_type<unsigned long long,unsigned long>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned long>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    v11[5] = 0;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

BOOL CpGraph::GetTensorName(uint64_t a1, unint64_t a2, std::string *a3)
{
  const std::string *v4;
  const std::string *v5;
  unint64_t v7;

  v7 = a2;
  v4 = (const std::string *)std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>((_QWORD *)(a1 + 192), &v7);
  v5 = v4;
  if (v4)
    std::string::operator=(a3, v4 + 1);
  return v5 != 0;
}

BOOL CpGraph::GetLayerName(uint64_t a1, unint64_t a2, std::string *a3)
{
  const std::string *v4;
  const std::string *v5;
  unint64_t v7;

  v7 = a2;
  v4 = (const std::string *)std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>((_QWORD *)(a1 + 152), &v7);
  v5 = v4;
  if (v4)
    std::string::operator=(a3, v4 + 1);
  return v5 != 0;
}

void CpGraph::GetTensors(CpGraph **this@<X0>, unint64_t **a2@<X8>)
{
  CpGraph **v2;
  CpGraph *v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  CpGraph *v19;
  CpGraph **v20;
  BOOL v21;
  unint64_t v22;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = this + 1;
  v3 = *this;
  if (*this != (CpGraph *)(this + 1))
  {
    v5 = this + 24;
    v6 = (uint64_t)(a2 + 2);
    do
    {
      v7 = *((_QWORD *)v3 + 4);
      v22 = v7;
      if (std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v5, &v22))
      {
        v9 = a2[1];
        v8 = (unint64_t)a2[2];
        if ((unint64_t)v9 >= v8)
        {
          v11 = *a2;
          v12 = v9 - *a2;
          v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 61)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v14 = v8 - (_QWORD)v11;
          if (v14 >> 2 > v13)
            v13 = v14 >> 2;
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
            v15 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v15 = v13;
          if (v15)
          {
            v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>(v6, v15);
            v11 = *a2;
            v9 = a2[1];
          }
          else
          {
            v16 = 0;
          }
          v17 = (unint64_t *)&v16[8 * v12];
          *v17 = v7;
          v10 = v17 + 1;
          while (v9 != v11)
          {
            v18 = *--v9;
            *--v17 = v18;
          }
          *a2 = v17;
          a2[1] = v10;
          a2[2] = (unint64_t *)&v16[8 * v15];
          if (v11)
            operator delete(v11);
        }
        else
        {
          *v9 = v7;
          v10 = v9 + 1;
        }
        a2[1] = v10;
      }
      v19 = (CpGraph *)*((_QWORD *)v3 + 1);
      if (v19)
      {
        do
        {
          v20 = (CpGraph **)v19;
          v19 = *(CpGraph **)v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (CpGraph **)*((_QWORD *)v3 + 2);
          v21 = *v20 == v3;
          v3 = (CpGraph *)v20;
        }
        while (!v21);
      }
      v3 = (CpGraph *)v20;
    }
    while (v20 != v2);
  }
}

void sub_22D9B4BBC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *CpGraph::GetOutputTensor(CpGraph *this, unint64_t *a2)
{
  _QWORD *result;
  uint64_t **v4;
  char *v5;
  unint64_t *v6;
  unint64_t *v7;

  v6 = a2;
  v7 = a2;
  result = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>((_QWORD *)this + 19, (unint64_t *)&v7);
  if (result)
  {
    v7 = (unint64_t *)&v6;
    v4 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>((_QWORD *)this + 3, &v7);
    v5 = (char *)this + 104;
    if (v4)
      v5 = (char *)(v4 + 3);
    return ***(_QWORD ****)v5;
  }
  return result;
}

char *CpGraph::GetInputTensors@<X0>(CpGraph *this@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  char *result;
  uint64_t **v6;
  char *v7;
  _QWORD **v8;
  _QWORD **v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t *v12;

  v11 = a2;
  v12 = a2;
  result = (char *)std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>((_QWORD *)this + 19, (unint64_t *)&v12);
  if (result)
  {
    v12 = (unint64_t *)&v11;
    v6 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>((_QWORD *)this + 8, &v12);
    v7 = (char *)this + 104;
    if (v6)
      v7 = (char *)(v6 + 3);
    v8 = *(_QWORD ***)v7;
    v9 = (_QWORD **)*((_QWORD *)v7 + 1);
    v10 = ((uint64_t)v9 - *(_QWORD *)v7) >> 3;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    return std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::reference_wrapper<unsigned long long const> const*>,std::__wrap_iter<std::reference_wrapper<unsigned long long const> const*>>((char *)a3, v8, v9, v10);
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  return result;
}

char *std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::reference_wrapper<unsigned long long const> const*>,std::__wrap_iter<std::reference_wrapper<unsigned long long const> const*>>(char *result, _QWORD **a2, _QWORD **a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  _QWORD *v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = *v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_22D9B4D24(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long long>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t **std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(_QWORD *a1, unint64_t **a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t ***v6;
  uint64_t **result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = **a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = **a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t **)*result)
  {
    v8 = (unint64_t)result[1];
    if (v3 == v8)
    {
      if (*result[2] == v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

uint64_t ORToolsCpComputeConstant::ORToolsCpComputeConstant(uint64_t a1, operations_research::sat::CpModelBuilder *a2, uint64_t a3)
{
  uint64_t v6;
  size_t v7;
  std::string *p_p;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  std::string *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  std::string *v18;
  const void *v19;
  uint64_t v20;
  std::string __p;
  operations_research::sat::CpModelBuilder *v23;
  uint64_t v24;

  v23 = operations_research::sat::CpModelBuilder::NewConstant(a2, *(_QWORD *)a3);
  v24 = v6;
  if (*(char *)(a3 + 71) >= 0)
    v7 = *(unsigned __int8 *)(a3 + 71);
  else
    v7 = *(_QWORD *)(a3 + 56);
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v7 + 28);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v7)
  {
    if (*(char *)(a3 + 71) >= 0)
      v9 = (const void *)(a3 + 48);
    else
      v9 = *(const void **)(a3 + 48);
    memmove(p_p, v9, v7);
  }
  strcpy((char *)p_p + v7, "_compute_time_resident_const");
  *(_QWORD *)a1 = operations_research::sat::BoolVar::WithName((int *)&v23, &__p);
  *(_QWORD *)(a1 + 8) = v10;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v23 = operations_research::sat::CpModelBuilder::NewConstant(a2, *(_QWORD *)(a3 + 8));
  v24 = v11;
  if (*(char *)(a3 + 71) >= 0)
    v12 = *(unsigned __int8 *)(a3 + 71);
  else
    v12 = *(_QWORD *)(a3 + 56);
  v13 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v12 + 31);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v13 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v12)
  {
    if (*(char *)(a3 + 71) >= 0)
      v14 = (const void *)(a3 + 48);
    else
      v14 = *(const void **)(a3 + 48);
    memmove(v13, v14, v12);
  }
  strcpy((char *)v13 + v12, "_compute_time_nonresident_const");
  *(_QWORD *)(a1 + 16) = operations_research::sat::BoolVar::WithName((int *)&v23, &__p);
  *(_QWORD *)(a1 + 24) = v15;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  ORToolsCpComputeConstant::CreateCompileTimeWithChainVariables(a2, a3, (uint64_t **)(a1 + 32));
  v23 = operations_research::sat::CpModelBuilder::NewConstant(a2, *(_QWORD *)(a3 + 40));
  v24 = v16;
  if (*(char *)(a3 + 71) >= 0)
    v17 = *(unsigned __int8 *)(a3 + 71);
  else
    v17 = *(_QWORD *)(a3 + 56);
  v18 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v17 + 34);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v17)
  {
    if (*(char *)(a3 + 71) >= 0)
      v19 = (const void *)(a3 + 48);
    else
      v19 = *(const void **)(a3 + 48);
    memmove(v18, v19, v17);
  }
  strcpy((char *)v18 + v17, "_compute_time_with_out_chain_const");
  *(_QWORD *)(a1 + 56) = operations_research::sat::BoolVar::WithName((int *)&v23, &__p);
  *(_QWORD *)(a1 + 64) = v20;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

void sub_22D9B508C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void **v15;
  void *v17;

  if (a14 < 0)
    operator delete(__p);
  v17 = *v15;
  if (*v15)
  {
    *(_QWORD *)(v14 + 40) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

void ORToolsCpComputeConstant::CreateCompileTimeWithChainVariables(operations_research::sat::CpModelBuilder *a1@<X1>, uint64_t a2@<X2>, uint64_t **a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  const void *v8;
  uint64_t v9;
  size_t v10;
  std::string *p_p;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  std::string __p;
  _QWORD v33[2];

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = *(uint64_t **)(a2 + 16);
  v4 = *(uint64_t **)(a2 + 24);
  if (v3 != v4)
  {
    v8 = (const void *)(a2 + 48);
    v31 = (uint64_t)(a3 + 2);
    do
    {
      v33[0] = operations_research::sat::CpModelBuilder::NewConstant(a1, *v3);
      v33[1] = v9;
      if (*(char *)(a2 + 71) >= 0)
        v10 = *(unsigned __int8 *)(a2 + 71);
      else
        v10 = *(_QWORD *)(a2 + 56);
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v10 + 33);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v10)
      {
        if (*(char *)(a2 + 71) >= 0)
          v12 = v8;
        else
          v12 = *(const void **)(a2 + 48);
        memmove(p_p, v12, v10);
      }
      strcpy((char *)p_p + v10, "_compute_time_with_in_chain_const");
      v13 = operations_research::sat::BoolVar::WithName((int *)v33, &__p);
      v15 = v13;
      v16 = v14;
      v18 = a3[1];
      v17 = (unint64_t)a3[2];
      if ((unint64_t)v18 >= v17)
      {
        v20 = ((char *)v18 - (char *)*a3) >> 4;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 60)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v22 = v17 - (_QWORD)*a3;
        if (v22 >> 3 > v21)
          v21 = v22 >> 3;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
          v23 = 0xFFFFFFFFFFFFFFFLL;
        else
          v23 = v21;
        if (v23)
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>(v31, v23);
        else
          v24 = 0;
        v25 = (uint64_t *)&v24[16 * v20];
        *v25 = v15;
        v25[1] = v16;
        v27 = *a3;
        v26 = a3[1];
        v28 = v25;
        if (v26 != *a3)
        {
          do
          {
            v29 = *(v26 - 2);
            v26 -= 2;
            v30 = *((_DWORD *)v26 + 2);
            *(v28 - 2) = v29;
            v28 -= 2;
            *((_DWORD *)v28 + 2) = v30;
          }
          while (v26 != v27);
          v26 = *a3;
        }
        v19 = v25 + 2;
        *a3 = v28;
        a3[1] = v25 + 2;
        a3[2] = (uint64_t *)&v24[16 * v23];
        if (v26)
          operator delete(v26);
      }
      else
      {
        *v18 = v13;
        v18[1] = v14;
        v19 = v18 + 2;
      }
      a3[1] = v19;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ++v3;
    }
    while (v3 != v4);
  }
}

void sub_22D9B52C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  void *v18;

  if (a16 < 0)
    operator delete(__p);
  v18 = *(void **)v16;
  if (*(_QWORD *)v16)
  {
    *(_QWORD *)(v16 + 8) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

void ORToolsCpComputeConstant::~ORToolsCpComputeConstant(ORToolsCpComputeConstant *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
}

uint64_t ComputeCycleEstimator::GetMaxCycle(ComputeCycleEstimator *this, int a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  BOOL v26;
  uint64_t *v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  void *__p;
  char *v36;
  char *v37;

  v4 = *(_QWORD *)this;
  v5 = (char *)operator new(8uLL);
  *(_QWORD *)v5 = v4;
  v6 = v5 + 8;
  v37 = v5 + 8;
  __p = v5;
  v36 = v5 + 8;
  if (a2)
  {
    v7 = (_QWORD *)((char *)this + 40);
    v8 = v5 + 8;
  }
  else
  {
    v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)&v37, 2uLL);
    v11 = (char *)__p;
    v12 = v36;
    v10[1] = *((_QWORD *)this + 1);
    v13 = (char *)(v10 + 1);
    v8 = (char *)&v10[v9];
    v6 = (char *)(v10 + 2);
    while (v12 != v11)
    {
      v14 = *((_QWORD *)v12 - 1);
      v12 -= 8;
      *((_QWORD *)v13 - 1) = v14;
      v13 -= 8;
    }
    __p = v13;
    v36 = (char *)(v10 + 2);
    v37 = (char *)&v10[v9];
    if (v11)
    {
      operator delete(v11);
      v8 = v37;
    }
    v36 = (char *)(v10 + 2);
    v7 = (_QWORD *)((char *)this + 40);
    if (v6 < v8)
    {
      v10[2] = *v7;
      v15 = (uint64_t)(v10 + 3);
      goto LABEL_24;
    }
  }
  v16 = (char *)__p;
  v17 = (v6 - (_BYTE *)__p) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v19 = v8 - (_BYTE *)__p;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)&v37, v20);
    v16 = (char *)__p;
    v6 = v36;
  }
  else
  {
    v21 = 0;
  }
  v22 = &v21[8 * v17];
  v23 = &v21[8 * v20];
  *(_QWORD *)v22 = *v7;
  v15 = (uint64_t)(v22 + 8);
  while (v6 != v16)
  {
    v24 = *((_QWORD *)v6 - 1);
    v6 -= 8;
    *((_QWORD *)v22 - 1) = v24;
    v22 -= 8;
  }
  __p = v22;
  v36 = (char *)v15;
  v37 = v23;
  if (v16)
    operator delete(v16);
LABEL_24:
  v36 = (char *)v15;
  std::vector<unsigned long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>((uint64_t)&__p, v15, *((char **)this + 2), *((char **)this + 3), (uint64_t)(*((_QWORD *)this + 3) - *((_QWORD *)this + 2)) >> 3);
  v25 = (char *)__p + 8;
  v26 = __p == v36 || v25 == v36;
  v27 = (uint64_t *)__p;
  if (!v26)
  {
    v28 = *(_QWORD *)__p;
    v27 = (uint64_t *)__p;
    v29 = (char *)__p + 8;
    do
    {
      v31 = *(_QWORD *)v29;
      v29 += 8;
      v30 = v31;
      v32 = v28 >= v31;
      if (v28 <= v31)
        v28 = v30;
      if (!v32)
        v27 = (uint64_t *)v25;
      v25 = v29;
    }
    while (v29 != v36);
  }
  v33 = *v27;
  if (__p)
  {
    v36 = (char *)__p;
    operator delete(__p);
  }
  return v33;
}

void sub_22D9B5514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
    if (v14 >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)v13) >> 3;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 2 > v14)
      v14 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>(v9, v17);
    else
      v18 = 0;
    v28 = &v18[8 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[8 * v17];
    v29 = 8 * a5;
    v30 = &v28[8 * a5];
    do
    {
      v31 = *(_QWORD *)v7;
      v7 += 8;
      *(_QWORD *)v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    v35 = v30;
    v5 = std::vector<unsigned long>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    v21 = &__src[8 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[8 * a5];
    v25 = &v23[-8 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_QWORD *)v25;
        v25 += 8;
        *(_QWORD *)v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[8 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_22D9B5708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

__n128 CpTransposeGraph::GetTensorDimensions@<Q0>(CpTransposeGraph *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  __n128 result;
  __int128 v6;
  unint64_t v7;

  v7 = a2;
  v4 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>((_QWORD *)this + 32, &v7);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  result = *(__n128 *)(v4 + 3);
  v6 = *(_OWORD *)(v4 + 5);
  *(__n128 *)a3 = result;
  *(_OWORD *)(a3 + 16) = v6;
  *(_QWORD *)(a3 + 32) = v4[7];
  return result;
}

_QWORD *CpTransposeGraph::GetRootTensorConstraint(CpTransposeGraph *this, unint64_t a2)
{
  _QWORD *v2;
  unint64_t v4;

  v4 = a2;
  v2 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>((_QWORD *)this + 42, &v4);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return v2 + 3;
}

_QWORD *CpTransposeGraph::GetLayerTruthTable(CpTransposeGraph *this, unint64_t a2)
{
  _QWORD *v2;
  unint64_t v4;

  v4 = a2;
  v2 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>((_QWORD *)this + 37, &v4);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return v2 + 3;
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24F97F078, (void (*)(void *))MEMORY[0x24BEDAB00]);
}

void sub_22D9B5910(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

operations_research::sat::CpModelBuilder *ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(operations_research::sat::CpModelBuilder *a1, uint64_t *a2)
{
  operations_research::sat::CpModelBuilder *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int v22;
  unsigned int v24;
  std::string __p;
  void *v26[3];
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  operations_research::sat::CpModelBuilder *v33;
  char *v34;
  char *v35;
  char *v36;

  v4 = operations_research::sat::CpModelBuilder::NewBoolVar(a1);
  v24 = v5;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      operations_research::sat::BoolVar::BoolVar((uint64_t)&v29, ~*(_DWORD *)(v6 + 8), *(_QWORD *)v6);
      v9 = v29;
      v8 = v30;
      v10 = v35;
      if (v35 >= v36)
      {
        v12 = (v35 - v34) >> 4;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 60)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v14 = v36 - v34;
        if ((v36 - v34) >> 3 > v13)
          v13 = v14 >> 3;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
          v15 = 0xFFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)&v36, v15);
        else
          v16 = 0;
        v17 = &v16[16 * v12];
        *(_QWORD *)v17 = v9;
        *((_QWORD *)v17 + 1) = v8;
        v19 = v34;
        v18 = v35;
        v20 = v17;
        if (v35 != v34)
        {
          do
          {
            v21 = *((_QWORD *)v18 - 2);
            v18 -= 16;
            v22 = *((_DWORD *)v18 + 2);
            *((_QWORD *)v20 - 2) = v21;
            v20 -= 16;
            *((_DWORD *)v20 + 2) = v22;
          }
          while (v18 != v19);
          v18 = v34;
        }
        v11 = v17 + 16;
        v34 = v20;
        v35 = v17 + 16;
        v36 = &v16[16 * v15];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *(_QWORD *)v35 = v29;
        *((_QWORD *)v10 + 1) = v8;
        v11 = v10 + 16;
      }
      v35 = v11;
      v6 += 16;
    }
    while (v6 != v7);
  }
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v29, (uint64_t)v4, v24);
  operations_research::sat::LinearExpr::BooleanSum((uint64_t)v34, (v35 - v34) >> 4, (uint64_t)v26);
  v33 = operations_research::sat::CpModelBuilder::AddNotEqual(a1, (const operations_research::sat::LinearExpr *)&v29, (const operations_research::sat::LinearExpr *)v26);
  std::string::basic_string[abi:ne180100]<0>(&__p, "BOOLean_AND");
  operations_research::sat::Constraint::WithName((uint64_t *)&v33, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  if (v26[0])
  {
    v26[1] = v26[0];
    operator delete(v26[0]);
  }
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  return v4;
}

void sub_22D9B5B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;
  void *v26;

  if (a16 < 0)
    operator delete(__p);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a17);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a24);
  v26 = *(void **)(v24 - 112);
  if (v26)
  {
    *(_QWORD *)(v24 - 104) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(a1);
}

operations_research::sat::CpModelBuilder *ORToolsCpBasedAllocatorUtil::CreateBooleanOr(operations_research::sat::CpModelBuilder *a1, uint64_t *a2)
{
  operations_research::sat::CpModelBuilder *v4;
  unsigned int v5;
  std::string __p;
  void *v8[3];
  void *v9;
  void *v10;
  void *v11[3];
  void *v12;
  void *v13;
  operations_research::sat::CpModelBuilder *v14;

  v4 = operations_research::sat::CpModelBuilder::NewBoolVar(a1);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)v11, (uint64_t)v4, v5);
  operations_research::sat::LinearExpr::BooleanSum(*a2, (a2[1] - *a2) >> 4, (uint64_t)v8);
  v14 = operations_research::sat::CpModelBuilder::AddEquality(a1, (const operations_research::sat::LinearExpr *)v11, (const operations_research::sat::LinearExpr *)v8);
  std::string::basic_string[abi:ne180100]<0>(&__p, "BOOLean_OR");
  operations_research::sat::Constraint::WithName((uint64_t *)&v14, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
  if (v8[0])
  {
    v8[1] = v8[0];
    operator delete(v8[0]);
  }
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
  if (v11[0])
  {
    v11[1] = v11[0];
    operator delete(v11[0]);
  }
  return v4;
}

void sub_22D9B5CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a14 < 0)
    operator delete(__p);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a15);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a22);
  _Unwind_Resume(a1);
}

uint64_t ORToolsCpBasedAllocatorUtil::CreateOptionalClosedInterval(operations_research::sat::CpModelBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, std::string *a6)
{
  uint64_t v10;
  uint64_t v11;
  operations_research::sat::CpModelBuilder *v12;
  uint64_t v13;
  uint64_t v14;
  operations_research::sat::CpModelBuilder *v15;
  uint64_t v16;
  uint64_t v17;
  operations_research::sat::CpModelBuilder *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[2];

  v10 = a3 + 1;
  v11 = a3 + 1 - a2;
  v12 = operations_research::sat::CpModelBuilder::NewConstant(a1, a2);
  v14 = v13;
  v15 = operations_research::sat::CpModelBuilder::NewConstant(a1, v11);
  v17 = v16;
  v18 = operations_research::sat::CpModelBuilder::NewConstant(a1, v10);
  v23[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)a1, (uint64_t)v12, v14, (uint64_t)v15, v17, (uint64_t)v18, v19, v20, a4, a5);
  v23[1] = v21;
  return operations_research::sat::IntervalVar::WithName((int *)v23, a6);
}

_QWORD *ORToolsCpBasedAllocatorUtil::GetResponseString@<X0>(ORToolsCpBasedAllocatorUtil *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  char *v6;

  v5 = *((int *)this + 38);
  if (v5 > 4)
    v6 = "";
  else
    v6 = off_24F97F510[v5];
  return std::string::basic_string[abi:ne180100]<0>(a2, v6);
}

void ORToolsCpBasedAllocatorUtil::PrintConstraintProblem(_QWORD *a1, uint64_t a2, operations_research::sat *a3, CpAllocGraph *a4)
{
  _QWORD *v6;
  const std::locale::facet *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  std::locale::id *v13;
  _QWORD *v14;
  std::string *v15;
  std::string::size_type size;
  _QWORD *v17;
  const std::locale::facet *v18;
  std::string *v19;
  std::string::size_type v20;
  _QWORD *v21;
  const std::locale::facet *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  std::locale::id *v28;
  _QWORD *v29;
  std::string *v30;
  std::string::size_type v31;
  _QWORD *v32;
  const std::locale::facet *v33;
  std::string *v34;
  std::string::size_type v35;
  _QWORD *v36;
  const std::locale::facet *v37;
  _QWORD *v38;
  const std::locale::facet *v39;
  _QWORD *v40;
  const std::locale::facet *v41;
  _QWORD *v42;
  const std::locale::facet *v43;
  __n128 v44;
  std::string *v45;
  std::string::size_type v46;
  std::string v49[2];
  std::string v50;
  std::locale v51;

  if (a1[16])
  {
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"[Variables] \n", 13);
    std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(*v6 - 24)));
    v7 = std::locale::use_facet((const std::locale *)v49, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
    std::locale::~locale((std::locale *)v49);
    std::ostream::put();
    std::ostream::flush();
    v8 = *(_QWORD *)(a2 + 32);
    if (v8)
      v9 = v8 + 8;
    else
      v9 = 0;
    v10 = *(int *)(a2 + 24);
    if ((_DWORD)v10)
    {
      v11 = 0;
      v12 = 8 * v10;
      v13 = (std::locale::id *)MEMORY[0x24BEDB350];
      do
      {
        operations_research::sat::IntegerVariableProto::IntegerVariableProto((operations_research::sat::IntegerVariableProto *)v49, *(const operations_research::sat::IntegerVariableProto **)(v9 + 8 * v11));
        v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\nvars: ", 7);
        std::to_string(&v50, v11);
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v15 = &v50;
        else
          v15 = (std::string *)v50.__r_.__value_.__r.__words[0];
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        else
          size = v50.__r_.__value_.__l.__size_;
        v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, size);
        std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
        v18 = std::locale::use_facet(&v51, v13);
        ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
        std::locale::~locale(&v51);
        std::ostream::put();
        std::ostream::flush();
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v50.__r_.__value_.__l.__data_);
        google::protobuf::Message::DebugString((google::protobuf::Message *)v49, &v50);
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v19 = &v50;
        else
          v19 = (std::string *)v50.__r_.__value_.__r.__words[0];
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v20 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        else
          v20 = v50.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v19, v20);
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v50.__r_.__value_.__l.__data_);
        operations_research::sat::IntegerVariableProto::~IntegerVariableProto((operations_research::sat::IntegerVariableProto *)v49);
        ++v11;
        v12 -= 8;
      }
      while (v12);
    }
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\n\n[Constraints] \n", 17);
    std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(_QWORD *)(*v21 - 24)));
    v22 = std::locale::use_facet((const std::locale *)v49, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
    std::locale::~locale((std::locale *)v49);
    std::ostream::put();
    std::ostream::flush();
    v23 = *(_QWORD *)(a2 + 56);
    if (v23)
      v24 = v23 + 8;
    else
      v24 = 0;
    v25 = *(int *)(a2 + 48);
    if ((_DWORD)v25)
    {
      v26 = 0;
      v27 = 8 * v25;
      v28 = (std::locale::id *)MEMORY[0x24BEDB350];
      do
      {
        operations_research::sat::ConstraintProto::ConstraintProto((operations_research::sat::ConstraintProto *)v49, *(const operations_research::sat::ConstraintProto **)(v24 + 8 * v26));
        v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\nconstraint id: ", 16);
        std::to_string(&v50, v26);
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v30 = &v50;
        else
          v30 = (std::string *)v50.__r_.__value_.__r.__words[0];
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v31 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        else
          v31 = v50.__r_.__value_.__l.__size_;
        v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
        std::ios_base::getloc((const std::ios_base *)((char *)v32 + *(_QWORD *)(*v32 - 24)));
        v33 = std::locale::use_facet(&v51, v28);
        ((void (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
        std::locale::~locale(&v51);
        std::ostream::put();
        std::ostream::flush();
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v50.__r_.__value_.__l.__data_);
        google::protobuf::Message::DebugString((google::protobuf::Message *)v49, &v50);
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v34 = &v50;
        else
          v34 = (std::string *)v50.__r_.__value_.__r.__words[0];
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v35 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        else
          v35 = v50.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v34, v35);
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v50.__r_.__value_.__l.__data_);
        operations_research::sat::ConstraintProto::~ConstraintProto((operations_research::sat::ConstraintProto *)v49);
        ++v26;
        v27 -= 8;
      }
      while (v27);
    }
    v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\n[Stats]", 8);
    std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(_QWORD *)(*v36 - 24)));
    v37 = std::locale::use_facet((const std::locale *)v49, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
    std::locale::~locale((std::locale *)v49);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"NodeCount=", 10);
    CpAllocGraph::GetLayers(a4, 1, (uint64_t *)v49);
    v38 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(_QWORD *)(*v38 - 24)));
    v39 = std::locale::use_facet((const std::locale *)&v50, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
    std::locale::~locale((std::locale *)&v50);
    std::ostream::put();
    std::ostream::flush();
    if (v49[0].__r_.__value_.__r.__words[0])
    {
      v49[0].__r_.__value_.__l.__size_ = v49[0].__r_.__value_.__r.__words[0];
      operator delete(v49[0].__r_.__value_.__l.__data_);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"ChainableTensorCount=", 21);
    std::set<unsigned long long>::set[abi:ne180100]((uint64_t *)v49, (uint64_t)a4 + 296);
    v40 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v40 + *(_QWORD *)(*v40 - 24)));
    v41 = std::locale::use_facet((const std::locale *)&v50, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10);
    std::locale::~locale((std::locale *)&v50);
    std::ostream::put();
    std::ostream::flush();
    std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)v49, (_QWORD *)v49[0].__r_.__value_.__l.__size_);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"RegionMaxCycle=", 15);
    v42 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v42 + *(_QWORD *)(*v42 - 24)));
    v43 = std::locale::use_facet((const std::locale *)v49, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10);
    std::locale::~locale((std::locale *)v49);
    std::ostream::put();
    std::ostream::flush();
    operations_research::sat::CpModelStats(a3, v49, v44);
    if ((v49[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v45 = v49;
    else
      v45 = (std::string *)v49[0].__r_.__value_.__r.__words[0];
    if ((v49[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v46 = HIBYTE(v49[0].__r_.__value_.__r.__words[2]);
    else
      v46 = v49[0].__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v45, v46);
    if (SHIBYTE(v49[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49[0].__r_.__value_.__l.__data_);
  }
}

void sub_22D9B63C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::locale a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ORToolsCpBasedAllocatorUtil::PrintRegion(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  std::string *v7;
  std::string::size_type size;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  unint64_t **v12;
  std::string::size_type v13;
  std::locale::id *v14;
  unint64_t *v15;
  _QWORD *v16;
  std::string *p_p;
  std::string::size_type v18;
  _QWORD *i;
  unint64_t v20;
  _QWORD *v21;
  std::string *v22;
  std::string::size_type v23;
  _QWORD *v24;
  const std::locale::facet *v25;
  int *v26;
  _QWORD *v27;
  std::string *v28;
  std::string::size_type v29;
  _QWORD *v30;
  std::string __p;
  _QWORD *OutputTensor;
  std::string v33;
  uint64_t __val;
  std::string v35;

  if (a1[16])
  {
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"[Region", 7);
    if (*(char *)(a2 + 255) < 0)
      std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)(a2 + 232), *(_QWORD *)(a2 + 240));
    else
      v35 = *(std::string *)(a2 + 232);
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &v35;
    else
      v7 = (std::string *)v35.__r_.__value_.__r.__words[0];
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
    else
      size = v35.__r_.__value_.__l.__size_;
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, size);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"]", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(*v10 - 24)));
    v11 = std::locale::use_facet((const std::locale *)&v33, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale((std::locale *)&v33);
    std::ostream::put();
    std::ostream::flush();
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    CpAllocGraph::GetLayers((CpAllocGraph *)a2, 1, (uint64_t *)&v35);
    v13 = v35.__r_.__value_.__l.__size_;
    v12 = (unint64_t **)v35.__r_.__value_.__r.__words[0];
    if (v35.__r_.__value_.__r.__words[0] != v35.__r_.__value_.__l.__size_)
    {
      v14 = (std::locale::id *)MEMORY[0x24BEDB350];
      do
      {
        v15 = *v12;
        __val = 0;
        CpAllocGraph::GetLayerSchedule((CpAllocGraph *)a2, (unint64_t)v15, &__val);
        memset(&v33, 0, sizeof(v33));
        CpGraph::GetLayerName(a2, (unint64_t)v15, &v33);
        OutputTensor = 0;
        OutputTensor = CpGraph::GetOutputTensor((CpGraph *)a2, v15);
        v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"sched=", 6);
        std::to_string(&__p, __val);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v18 = __p.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)p_p, v18);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        for (i = *(_QWORD **)(a2 + 304); i; i = (_QWORD *)*i)
        {
          v20 = i[4];
          if (v20 <= (unint64_t)OutputTensor)
          {
            if (v20 >= (unint64_t)OutputTensor)
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" / ChainableProducer ", 21);
              break;
            }
            ++i;
          }
        }
        v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\n\tname=", 7);
        if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v22 = &v33;
        else
          v22 = (std::string *)v33.__r_.__value_.__r.__words[0];
        if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v23 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
        else
          v23 = v33.__r_.__value_.__l.__size_;
        v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
        std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(_QWORD *)(*v24 - 24)));
        v25 = std::locale::use_facet((const std::locale *)&__p, v14);
        ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
        std::locale::~locale((std::locale *)&__p);
        std::ostream::put();
        std::ostream::flush();
        v26 = (int *)std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(a3, (unint64_t *)&OutputTensor);
        if (v26)
        {
          v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\t\tearly_decision = ", 19);
          ORToolsCpBasedAllocatorUtil::GetDecisionString(v26 + 6, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v28 = &__p;
          else
            v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v29 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v29 = __p.__r_.__value_.__l.__size_;
          v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"\n", 1);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        else
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\t\tearly_decision = unset\n", 25);
        }
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v33.__r_.__value_.__l.__data_);
        ++v12;
      }
      while (v12 != (unint64_t **)v13);
      v12 = (unint64_t **)v35.__r_.__value_.__r.__words[0];
    }
    if (v12)
    {
      v35.__r_.__value_.__l.__size_ = (std::string::size_type)v12;
      operator delete(v12);
    }
  }
}

void sub_22D9B6844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::locale a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::locale::~locale(&a16);
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *ORToolsCpBasedAllocatorUtil::GetDecisionString@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;

  v4 = *a1;
  if (v4 > 5)
    v5 = "";
  else
    v5 = off_24F97F538[v4];
  return std::string::basic_string[abi:ne180100]<0>(a2, v5);
}

_QWORD *ORToolsCpBasedAllocatorUtil::PrintSolverResult(_QWORD *result, CpAllocGraph *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, ORToolsCpBasedAllocatorUtil *a7)
{
  _QWORD *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  _QWORD *v17;
  const std::locale::facet *v18;
  _QWORD *v19;
  _QWORD *v20;
  const std::locale::facet *v21;
  _QWORD *v22;
  const std::locale::facet *v23;
  int v24;
  unint64_t *locale;
  unint64_t *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  void *v35;
  uint64_t v36;
  _QWORD *v37;
  void *v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;
  unint64_t v42;
  std::locale v43;
  std::locale::__imp *v44;
  void *__p[2];
  __int128 v46;
  int v47;
  uint64_t v48;

  if (!result[16])
    return result;
  v13 = result;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(result, (uint64_t)"\n\n<Schedule results>\n", 21);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"RESULT=", 7);
  ORToolsCpBasedAllocatorUtil::GetResponseString(a7, __p);
  if ((SBYTE7(v46) & 0x80u) == 0)
    v15 = __p;
  else
    v15 = (void **)__p[0];
  if ((SBYTE7(v46) & 0x80u) == 0)
    v16 = BYTE7(v46);
  else
    v16 = (uint64_t)__p[1];
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
  v18 = std::locale::use_facet(&v43, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
  std::locale::~locale(&v43);
  std::ostream::put();
  std::ostream::flush();
  if (SBYTE7(v46) < 0)
    operator delete(__p[0]);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"SolveTime=", 10);
  v19 = (_QWORD *)std::ostream::operator<<();
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" secs", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(_QWORD *)(*v20 - 24)));
  v21 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"e2e network latency=", 20);
  v22 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(_QWORD *)(*v22 - 24)));
  v23 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  result = (_QWORD *)std::ostream::flush();
  v24 = *((_DWORD *)a7 + 38);
  if (v24 != 2 && v24 != 4)
    return result;
  v37 = a6;
  v48 = 0;
  *(_OWORD *)__p = 0u;
  v46 = 0u;
  v47 = 1065353216;
  CpAllocGraph::GetLayers(a2, 1, (uint64_t *)&v43);
  locale = (unint64_t *)v43.__locale_;
  v26 = (unint64_t *)v44;
  if (v43.__locale_ == v44)
    goto LABEL_46;
  do
  {
    v42 = *locale;
    v27 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(a4, &v42);
    if (v27)
    {
      v41 = 0;
      CpAllocGraph::GetLayerSchedule(a2, v42, &v41);
      if (!std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(__p, (unint64_t *)&v41))
      {
        if (ORToolsCpBasedAllocatorUtil::HasOutputChain((uint64_t)a7, a3, a2, (unint64_t *)v42))
        {
          v28 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(a5, &v42);
          ORToolsCpBasedAllocatorUtil::GetChainPairResultString(a7, (const operations_research::sat::CpSolverResponse *)v28[3], (const ORToolsChainScheduleVariable *)&v48, &v38);
          if ((v40 & 0x80u) == 0)
            v29 = &v38;
          else
            v29 = v38;
          if ((v40 & 0x80u) == 0)
            v30 = v40;
          else
            v30 = v39;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v29, v30);
          if ((char)v40 < 0)
            operator delete(v38);
LABEL_24:
          std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)__p, (unint64_t *)&v41, &v41);
          v38 = (void *)(v41 + 1);
          std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)__p, (unint64_t *)&v38, &v38);
          goto LABEL_44;
        }
        if (operations_research::sat::SolutionBooleanValue((uint64_t)a7, *(_QWORD *)(v27[3] + 160), *(_QWORD *)(v27[3] + 168)))
        {
          v31 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v37, &v42);
          ORToolsCpBasedAllocatorUtil::GetL2DepPairResultString(a7, (const operations_research::sat::CpSolverResponse *)v31[3], (const ORToolsL2DepScheduleVariable *)&v48, &v38);
          if ((v40 & 0x80u) == 0)
            v32 = &v38;
          else
            v32 = v38;
          if ((v40 & 0x80u) == 0)
            v33 = v40;
          else
            v33 = v39;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v32, v33);
          if ((char)v40 < 0)
            operator delete(v38);
          goto LABEL_24;
        }
        v34 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(a4, &v42);
        ORToolsCpBasedAllocatorUtil::GetEngineLayerResultString(a7, (const operations_research::sat::CpSolverResponse *)v34[3], (const ORToolsLayerScheduleVariable *)&v48, &v38);
        if ((v40 & 0x80u) == 0)
          v35 = &v38;
        else
          v35 = v38;
        if ((v40 & 0x80u) == 0)
          v36 = v40;
        else
          v36 = v39;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v35, v36);
        if ((char)v40 < 0)
          operator delete(v38);
        std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)__p, (unint64_t *)&v41, &v41);
      }
    }
LABEL_44:
    ++locale;
  }
  while (locale != v26);
  locale = (unint64_t *)v43.__locale_;
LABEL_46:
  if (locale)
  {
    v44 = (std::locale::__imp *)locale;
    operator delete(locale);
  }
  return (_QWORD *)std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)__p);
}

void sub_22D9B6D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, std::locale a19, uint64_t a20,uint64_t a21,std::locale a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&a22);
  _Unwind_Resume(a1);
}

BOOL ORToolsCpBasedAllocatorUtil::HasOutputChain(uint64_t a1, _QWORD *a2, CpGraph *this, unint64_t *a4)
{
  _QWORD *v6;
  _QWORD *OutputTensor;

  OutputTensor = CpGraph::GetOutputTensor(this, a4);
  v6 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(a2, (unint64_t *)&OutputTensor);
  return operations_research::sat::SolutionBooleanValue(a1, *(_QWORD *)(v6[3] + 32), *(_QWORD *)(v6[3] + 40));
}

uint64_t ORToolsCpBasedAllocatorUtil::GetChainPairResultString@<X0>(ORToolsCpBasedAllocatorUtil *this@<X0>, const operations_research::sat::CpSolverResponse *a2@<X1>, const ORToolsChainScheduleVariable *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v6;
  int v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v13;
  _QWORD *v14;
  std::string *v15;
  std::string::size_type v16;
  _QWORD *v17;
  const std::locale::facet *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  std::string *v22;
  std::string::size_type v23;
  _QWORD *v24;
  const std::locale::facet *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  std::string *v29;
  std::string::size_type v30;
  _QWORD *v31;
  const std::locale::facet *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  std::string *v36;
  std::string::size_type v37;
  _QWORD *v38;
  const std::locale::facet *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  std::string *v43;
  std::string::size_type v44;
  _QWORD *v45;
  const std::locale::facet *v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  std::string *v51;
  std::string::size_type v52;
  _QWORD *v53;
  const std::locale::facet *v54;
  unint64_t v55;
  std::locale::id *v56;
  _QWORD *v57;
  std::string *v58;
  std::string::size_type v59;
  _QWORD *v60;
  _QWORD *v61;
  std::string *v62;
  std::string::size_type v63;
  _QWORD *v64;
  const std::locale::facet *v65;
  _QWORD *v66;
  std::string *v67;
  std::string::size_type v68;
  _QWORD *v69;
  const std::locale::facet *v70;
  _QWORD *v71;
  int v72;
  char *v73;
  uint64_t v74;
  _QWORD *v75;
  std::string *v76;
  std::string::size_type v77;
  _QWORD *v78;
  _QWORD *v79;
  std::string *v80;
  std::string::size_type v81;
  _QWORD *v82;
  const std::locale::facet *v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  std::string *v87;
  std::string::size_type v88;
  _QWORD *v89;
  const std::locale::facet *v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  std::string *v94;
  std::string::size_type v95;
  _QWORD *v96;
  const std::locale::facet *v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  std::string *v101;
  std::string::size_type v102;
  _QWORD *v103;
  const std::locale::facet *v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  std::string *v108;
  std::string::size_type v109;
  _QWORD *v110;
  const std::locale::facet *v111;
  _QWORD *v112;
  _QWORD *v113;
  unint64_t v114;
  uint64_t v115;
  std::string *v116;
  std::string::size_type v117;
  _QWORD *v118;
  const std::locale::facet *v119;
  unint64_t v120;
  std::locale::id *v121;
  _QWORD *v122;
  std::string *v123;
  std::string::size_type v124;
  _QWORD *v125;
  _QWORD *v126;
  std::string *v127;
  std::string::size_type v128;
  _QWORD *v129;
  const std::locale::facet *v130;
  _QWORD *v131;
  std::string *v132;
  std::string::size_type v133;
  _QWORD *v134;
  const std::locale::facet *v135;
  uint64_t v136;
  std::string __p;
  void *v142;
  void *v143;
  std::string v144;
  _QWORD v145[2];
  uint64_t v146;
  _QWORD v147[10];
  char v148;
  uint64_t v149;
  std::locale v150;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v145);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"sched=", 6);
  std::ostream::operator<<();
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)", ", 2);
  v7 = *((char *)a2 + 343);
  if (v7 >= 0)
    v8 = (char *)a2 + 320;
  else
    v8 = (char *)*((_QWORD *)a2 + 40);
  if (v7 >= 0)
    v9 = *((unsigned __int8 *)a2 + 343);
  else
    v9 = *((_QWORD *)a2 + 41);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n\tChain producer\n", 17);
  ORToolsCpBasedAllocatorUtil::GetInPlaceString((uint64_t *)a2 + 32, (uint64_t)this, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\tlayer_begin(vars: ", 19);
  v13 = (_QWORD *)std::ostream::operator<<();
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)")=", 2);
  std::to_string(&__p, *(_QWORD *)a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &__p;
  else
    v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v16 = __p.__r_.__value_.__l.__size_;
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
  v18 = std::locale::use_facet((const std::locale *)&v144, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
  std::locale::~locale((std::locale *)&v144);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\t\tread_end_0(vars: ", 19);
  v19 = (_QWORD *)std::ostream::operator<<();
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)")=", 2);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, **((_QWORD **)a2 + 6), *(_QWORD *)(*((_QWORD *)a2 + 6) + 8));
  v21 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  std::to_string(&v144, v21);
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &v144;
  else
    v22 = (std::string *)v144.__r_.__value_.__r.__words[0];
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
  else
    v23 = v144.__r_.__value_.__l.__size_;
  v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v22, v23);
  std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(_QWORD *)(*v24 - 24)));
  v25 = std::locale::use_facet(&v150, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
  std::locale::~locale(&v150);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v144.__r_.__value_.__l.__data_);
  if (v142)
  {
    v143 = v142;
    operator delete(v142);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((_QWORD *)a2 + 23) - *((_QWORD *)a2 + 22) >= 9uLL)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\t\tread_end_1(vars: ", 19);
    v26 = (_QWORD *)std::ostream::operator<<();
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)")=", 2);
    operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *(_QWORD *)(*((_QWORD *)a2 + 6) + 16), *(_QWORD *)(*((_QWORD *)a2 + 6) + 24));
    v28 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
    std::to_string(&v144, v28);
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29 = &v144;
    else
      v29 = (std::string *)v144.__r_.__value_.__r.__words[0];
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
    else
      v30 = v144.__r_.__value_.__l.__size_;
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v29, v30);
    std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(_QWORD *)(*v31 - 24)));
    v32 = std::locale::use_facet(&v150, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
    std::locale::~locale(&v150);
    std::ostream::put();
    std::ostream::flush();
    if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v144.__r_.__value_.__l.__data_);
    if (v142)
    {
      v143 = v142;
      operator delete(v142);
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\t\tcomp_end(vars: ", 17);
  v33 = (_QWORD *)std::ostream::operator<<();
  v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)")=", 2);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *((_QWORD *)a2 + 9), *((_QWORD *)a2 + 10));
  v35 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  std::to_string(&v144, v35);
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v36 = &v144;
  else
    v36 = (std::string *)v144.__r_.__value_.__r.__words[0];
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v37 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
  else
    v37 = v144.__r_.__value_.__l.__size_;
  v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v36, v37);
  std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(_QWORD *)(*v38 - 24)));
  v39 = std::locale::use_facet(&v150, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
  std::locale::~locale(&v150);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v144.__r_.__value_.__l.__data_);
  if (v142)
  {
    v143 = v142;
    operator delete(v142);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\t\twrite_end(vars: ", 18);
  v40 = (_QWORD *)std::ostream::operator<<();
  v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)")=", 2);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *((_QWORD *)a2 + 11), *((_QWORD *)a2 + 12));
  v42 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  std::to_string(&v144, v42);
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v43 = &v144;
  else
    v43 = (std::string *)v144.__r_.__value_.__r.__words[0];
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v44 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
  else
    v44 = v144.__r_.__value_.__l.__size_;
  v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v43, v44);
  std::ios_base::getloc((const std::ios_base *)((char *)v45 + *(_QWORD *)(*v45 - 24)));
  v46 = std::locale::use_facet(&v150, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v46->__vftable[2].~facet_0)(v46, 10);
  std::locale::~locale(&v150);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v144.__r_.__value_.__l.__data_);
  if (v142)
  {
    v143 = v142;
    operator delete(v142);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\tlayer_end(vars: ", 17);
  v47 = (_QWORD *)std::ostream::operator<<();
  v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)")=", 2);
  v49 = *(_QWORD *)a3;
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5));
  v50 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  std::to_string(&v144, v50 + v49);
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v51 = &v144;
  else
    v51 = (std::string *)v144.__r_.__value_.__r.__words[0];
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v52 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
  else
    v52 = v144.__r_.__value_.__l.__size_;
  v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)v51, v52);
  std::ios_base::getloc((const std::ios_base *)((char *)v53 + *(_QWORD *)(*v53 - 24)));
  v54 = std::locale::use_facet(&v150, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v54->__vftable[2].~facet_0)(v54, 10);
  std::locale::~locale(&v150);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v144.__r_.__value_.__l.__data_);
  if (v142)
  {
    v143 = v142;
    operator delete(v142);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((_QWORD *)a2 + 23) != *((_QWORD *)a2 + 22))
  {
    v55 = 0;
    v56 = (std::locale::id *)MEMORY[0x24BEDB350];
    do
    {
      v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\tin", 3);
      std::to_string(&__p, v55);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v58 = &__p;
      else
        v58 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v59 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v59 = __p.__r_.__value_.__l.__size_;
      v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)v58, v59);
      v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)": ", 2);
      ORToolsCpBasedAllocatorUtil::GetAllocationCostString(this, *(const operations_research::sat::CpSolverResponse **)(*((_QWORD *)a2 + 22) + 8 * v55), &v144);
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v62 = &v144;
      else
        v62 = (std::string *)v144.__r_.__value_.__r.__words[0];
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v63 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
      else
        v63 = v144.__r_.__value_.__l.__size_;
      v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)v62, v63);
      std::ios_base::getloc((const std::ios_base *)((char *)v64 + *(_QWORD *)(*v64 - 24)));
      v65 = std::locale::use_facet(&v150, v56);
      ((void (*)(const std::locale::facet *, uint64_t))v65->__vftable[2].~facet_0)(v65, 10);
      std::locale::~locale(&v150);
      std::ostream::put();
      std::ostream::flush();
      if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v144.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ++v55;
    }
    while (v55 < (uint64_t)(*((_QWORD *)a2 + 23) - *((_QWORD *)a2 + 22)) >> 3);
  }
  v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\tout: ", 6);
  ORToolsCpBasedAllocatorUtil::GetAllocationCostString(this, *((const operations_research::sat::CpSolverResponse **)a2 + 26), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v67 = &__p;
  else
    v67 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v68 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v68 = __p.__r_.__value_.__l.__size_;
  v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)v67, v68);
  std::ios_base::getloc((const std::ios_base *)((char *)v69 + *(_QWORD *)(*v69 - 24)));
  v70 = std::locale::use_facet((const std::locale *)&v144, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v70->__vftable[2].~facet_0)(v70, 10);
  std::locale::~locale((std::locale *)&v144);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"sched=", 6);
  std::ostream::operator<<();
  v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)", ", 2);
  v72 = *((char *)a2 + 367);
  if (v72 >= 0)
    v73 = (char *)a2 + 344;
  else
    v73 = (char *)*((_QWORD *)a2 + 43);
  if (v72 >= 0)
    v74 = *((unsigned __int8 *)a2 + 367);
  else
    v74 = *((_QWORD *)a2 + 44);
  v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)v73, v74);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"\n", 1);
  ORToolsCpBasedAllocatorUtil::GetInPlaceString((uint64_t *)a2 + 35, (uint64_t)this, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v76 = &__p;
  else
    v76 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v77 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v77 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)v76, v77);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\tlayer_begin(vars: ", 19);
  v78 = (_QWORD *)std::ostream::operator<<();
  v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)")=", 2);
  std::to_string(&__p, *(_QWORD *)a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v80 = &__p;
  else
    v80 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v81 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v81 = __p.__r_.__value_.__l.__size_;
  v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)v80, v81);
  std::ios_base::getloc((const std::ios_base *)((char *)v82 + *(_QWORD *)(*v82 - 24)));
  v83 = std::locale::use_facet((const std::locale *)&v144, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v83->__vftable[2].~facet_0)(v83, 10);
  std::locale::~locale((std::locale *)&v144);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\t\tread_end_0(vars: ", 19);
  v84 = (_QWORD *)std::ostream::operator<<();
  v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)")=", 2);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, **((_QWORD **)a2 + 13), *(_QWORD *)(*((_QWORD *)a2 + 13) + 8));
  v86 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  std::to_string(&v144, v86);
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v87 = &v144;
  else
    v87 = (std::string *)v144.__r_.__value_.__r.__words[0];
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v88 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
  else
    v88 = v144.__r_.__value_.__l.__size_;
  v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)v87, v88);
  std::ios_base::getloc((const std::ios_base *)((char *)v89 + *(_QWORD *)(*v89 - 24)));
  v90 = std::locale::use_facet(&v150, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v90->__vftable[2].~facet_0)(v90, 10);
  std::locale::~locale(&v150);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v144.__r_.__value_.__l.__data_);
  if (v142)
  {
    v143 = v142;
    operator delete(v142);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((_QWORD *)a2 + 28) - *((_QWORD *)a2 + 27) >= 9uLL)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\t\tread_end_1(vars: ", 19);
    v91 = (_QWORD *)std::ostream::operator<<();
    v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)")=", 2);
    operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *(_QWORD *)(*((_QWORD *)a2 + 13) + 16), *(_QWORD *)(*((_QWORD *)a2 + 13) + 24));
    v93 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
    std::to_string(&v144, v93);
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v94 = &v144;
    else
      v94 = (std::string *)v144.__r_.__value_.__r.__words[0];
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v95 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
    else
      v95 = v144.__r_.__value_.__l.__size_;
    v96 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)v94, v95);
    std::ios_base::getloc((const std::ios_base *)((char *)v96 + *(_QWORD *)(*v96 - 24)));
    v97 = std::locale::use_facet(&v150, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v97->__vftable[2].~facet_0)(v97, 10);
    std::locale::~locale(&v150);
    std::ostream::put();
    std::ostream::flush();
    if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v144.__r_.__value_.__l.__data_);
    if (v142)
    {
      v143 = v142;
      operator delete(v142);
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\t\tcomp_end(vars: ", 17);
  v98 = (_QWORD *)std::ostream::operator<<();
  v99 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)")=", 2);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *((_QWORD *)a2 + 16), *((_QWORD *)a2 + 17));
  v100 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  std::to_string(&v144, v100);
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v101 = &v144;
  else
    v101 = (std::string *)v144.__r_.__value_.__r.__words[0];
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v102 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
  else
    v102 = v144.__r_.__value_.__l.__size_;
  v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)v101, v102);
  std::ios_base::getloc((const std::ios_base *)((char *)v103 + *(_QWORD *)(*v103 - 24)));
  v104 = std::locale::use_facet(&v150, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v104->__vftable[2].~facet_0)(v104, 10);
  std::locale::~locale(&v150);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v144.__r_.__value_.__l.__data_);
  if (v142)
  {
    v143 = v142;
    operator delete(v142);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\t\twrite_end(vars: ", 18);
  v105 = (_QWORD *)std::ostream::operator<<();
  v106 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, (uint64_t)")=", 2);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *((_QWORD *)a2 + 18), *((_QWORD *)a2 + 19));
  v107 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  std::to_string(&v144, v107);
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v108 = &v144;
  else
    v108 = (std::string *)v144.__r_.__value_.__r.__words[0];
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v109 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
  else
    v109 = v144.__r_.__value_.__l.__size_;
  v110 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v106, (uint64_t)v108, v109);
  std::ios_base::getloc((const std::ios_base *)((char *)v110 + *(_QWORD *)(*v110 - 24)));
  v111 = std::locale::use_facet(&v150, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v111->__vftable[2].~facet_0)(v111, 10);
  std::locale::~locale(&v150);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v144.__r_.__value_.__l.__data_);
  if (v142)
  {
    v143 = v142;
    operator delete(v142);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\tlayer_end(vars: ", 17);
  v112 = (_QWORD *)std::ostream::operator<<();
  v113 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)")=", 2);
  v114 = *(_QWORD *)a3;
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5));
  v115 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  std::to_string(&v144, v115 + v114);
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v116 = &v144;
  else
    v116 = (std::string *)v144.__r_.__value_.__r.__words[0];
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v117 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
  else
    v117 = v144.__r_.__value_.__l.__size_;
  v118 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v113, (uint64_t)v116, v117);
  std::ios_base::getloc((const std::ios_base *)((char *)v118 + *(_QWORD *)(*v118 - 24)));
  v119 = std::locale::use_facet(&v150, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v119->__vftable[2].~facet_0)(v119, 10);
  std::locale::~locale(&v150);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v144.__r_.__value_.__l.__data_);
  if (v142)
  {
    v143 = v142;
    operator delete(v142);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((_QWORD *)a2 + 28) != *((_QWORD *)a2 + 27))
  {
    v120 = 0;
    v121 = (std::locale::id *)MEMORY[0x24BEDB350];
    do
    {
      v122 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\tin", 3);
      std::to_string(&__p, v120);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v123 = &__p;
      else
        v123 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v124 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v124 = __p.__r_.__value_.__l.__size_;
      v125 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)v123, v124);
      v126 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v125, (uint64_t)": ", 2);
      ORToolsCpBasedAllocatorUtil::GetAllocationCostString(this, *(const operations_research::sat::CpSolverResponse **)(*((_QWORD *)a2 + 27) + 8 * v120), &v144);
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v127 = &v144;
      else
        v127 = (std::string *)v144.__r_.__value_.__r.__words[0];
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v128 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
      else
        v128 = v144.__r_.__value_.__l.__size_;
      v129 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126, (uint64_t)v127, v128);
      std::ios_base::getloc((const std::ios_base *)((char *)v129 + *(_QWORD *)(*v129 - 24)));
      v130 = std::locale::use_facet(&v150, v121);
      ((void (*)(const std::locale::facet *, uint64_t))v130->__vftable[2].~facet_0)(v130, 10);
      std::locale::~locale(&v150);
      std::ostream::put();
      std::ostream::flush();
      if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v144.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ++v120;
    }
    while (v120 < (uint64_t)(*((_QWORD *)a2 + 28) - *((_QWORD *)a2 + 27)) >> 3);
  }
  v131 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\tout: ", 6);
  ORToolsCpBasedAllocatorUtil::GetAllocationCostString(this, *((const operations_research::sat::CpSolverResponse **)a2 + 31), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v132 = &__p;
  else
    v132 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v133 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v133 = __p.__r_.__value_.__l.__size_;
  v134 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)v132, v133);
  std::ios_base::getloc((const std::ios_base *)((char *)v134 + *(_QWORD *)(*v134 - 24)));
  v135 = std::locale::use_facet((const std::locale *)&v144, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v135->__vftable[2].~facet_0)(v135, 10);
  std::locale::~locale((std::locale *)&v144);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5));
  *(_QWORD *)a3 += operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  if (v142)
  {
    v143 = v142;
    operator delete(v142);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v147, a4);
  v145[0] = *MEMORY[0x24BEDB7F0];
  v136 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v145 + *(_QWORD *)(v145[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v146 = v136;
  v147[0] = MEMORY[0x24BEDB848] + 16;
  if (v148 < 0)
    operator delete((void *)v147[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22E31DEF4](&v149);
}

void sub_22D9B806C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::locale a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t ORToolsCpBasedAllocatorUtil::GetL2DepPairResultString@<X0>(ORToolsCpBasedAllocatorUtil *this@<X0>, const operations_research::sat::CpSolverResponse *a2@<X1>, const ORToolsL2DepScheduleVariable *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v6;
  int v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v13;
  _QWORD *v14;
  std::string *v15;
  std::string::size_type v16;
  _QWORD *v17;
  const std::locale::facet *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  std::string *v22;
  std::string::size_type v23;
  _QWORD *v24;
  const std::locale::facet *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  std::string *v29;
  std::string::size_type v30;
  _QWORD *v31;
  const std::locale::facet *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  std::string *v36;
  std::string::size_type v37;
  _QWORD *v38;
  const std::locale::facet *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  std::string *v43;
  std::string::size_type v44;
  _QWORD *v45;
  const std::locale::facet *v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  std::string *v51;
  std::string::size_type v52;
  _QWORD *v53;
  const std::locale::facet *v54;
  unint64_t v55;
  std::locale::id *v56;
  _QWORD *v57;
  std::string *v58;
  std::string::size_type v59;
  _QWORD *v60;
  _QWORD *v61;
  std::string *v62;
  std::string::size_type v63;
  _QWORD *v64;
  const std::locale::facet *v65;
  _QWORD *v66;
  std::string *v67;
  std::string::size_type v68;
  _QWORD *v69;
  const std::locale::facet *v70;
  _QWORD *v71;
  int v72;
  char *v73;
  uint64_t v74;
  _QWORD *v75;
  std::string *v76;
  std::string::size_type v77;
  _QWORD *v78;
  _QWORD *v79;
  std::string *v80;
  std::string::size_type v81;
  _QWORD *v82;
  const std::locale::facet *v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  std::string *v87;
  std::string::size_type v88;
  _QWORD *v89;
  const std::locale::facet *v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  std::string *v94;
  std::string::size_type v95;
  _QWORD *v96;
  const std::locale::facet *v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  std::string *v101;
  std::string::size_type v102;
  _QWORD *v103;
  const std::locale::facet *v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  std::string *v108;
  std::string::size_type v109;
  _QWORD *v110;
  const std::locale::facet *v111;
  _QWORD *v112;
  _QWORD *v113;
  unint64_t v114;
  uint64_t v115;
  std::string *v116;
  std::string::size_type v117;
  _QWORD *v118;
  const std::locale::facet *v119;
  unint64_t v120;
  std::locale::id *v121;
  _QWORD *v122;
  std::string *v123;
  std::string::size_type v124;
  _QWORD *v125;
  _QWORD *v126;
  std::string *v127;
  std::string::size_type v128;
  _QWORD *v129;
  const std::locale::facet *v130;
  _QWORD *v131;
  std::string *v132;
  std::string::size_type v133;
  _QWORD *v134;
  const std::locale::facet *v135;
  uint64_t v136;
  std::string __p;
  void *v142;
  void *v143;
  std::string v144;
  _QWORD v145[2];
  uint64_t v146;
  _QWORD v147[10];
  char v148;
  uint64_t v149;
  std::locale v150;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v145);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"sched=", 6);
  std::ostream::operator<<();
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)", ", 2);
  v7 = *((char *)a2 + 311);
  if (v7 >= 0)
    v8 = (char *)a2 + 288;
  else
    v8 = (char *)*((_QWORD *)a2 + 36);
  if (v7 >= 0)
    v9 = *((unsigned __int8 *)a2 + 311);
  else
    v9 = *((_QWORD *)a2 + 37);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n\tL2-Dep producer\n", 18);
  ORToolsCpBasedAllocatorUtil::GetInPlaceString((uint64_t *)a2 + 45, (uint64_t)this, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\tlayer_begin(vars: ", 19);
  v13 = (_QWORD *)std::ostream::operator<<();
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)")=", 2);
  std::to_string(&__p, *(_QWORD *)a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &__p;
  else
    v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v16 = __p.__r_.__value_.__l.__size_;
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
  v18 = std::locale::use_facet((const std::locale *)&v144, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
  std::locale::~locale((std::locale *)&v144);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\t\tread_end_0(vars: ", 19);
  v19 = (_QWORD *)std::ostream::operator<<();
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)")=", 2);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, **((_QWORD **)a2 + 6), *(_QWORD *)(*((_QWORD *)a2 + 6) + 8));
  v21 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  std::to_string(&v144, v21);
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &v144;
  else
    v22 = (std::string *)v144.__r_.__value_.__r.__words[0];
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
  else
    v23 = v144.__r_.__value_.__l.__size_;
  v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v22, v23);
  std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(_QWORD *)(*v24 - 24)));
  v25 = std::locale::use_facet(&v150, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
  std::locale::~locale(&v150);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v144.__r_.__value_.__l.__data_);
  if (v142)
  {
    v143 = v142;
    operator delete(v142);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((_QWORD *)a2 + 25) - *((_QWORD *)a2 + 24) >= 9uLL)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\t\tread_end_1(vars: ", 19);
    v26 = (_QWORD *)std::ostream::operator<<();
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)")=", 2);
    operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *(_QWORD *)(*((_QWORD *)a2 + 6) + 16), *(_QWORD *)(*((_QWORD *)a2 + 6) + 24));
    v28 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
    std::to_string(&v144, v28);
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29 = &v144;
    else
      v29 = (std::string *)v144.__r_.__value_.__r.__words[0];
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
    else
      v30 = v144.__r_.__value_.__l.__size_;
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v29, v30);
    std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(_QWORD *)(*v31 - 24)));
    v32 = std::locale::use_facet(&v150, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
    std::locale::~locale(&v150);
    std::ostream::put();
    std::ostream::flush();
    if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v144.__r_.__value_.__l.__data_);
    if (v142)
    {
      v143 = v142;
      operator delete(v142);
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\t\tcomp_end(vars: ", 17);
  v33 = (_QWORD *)std::ostream::operator<<();
  v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)")=", 2);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *((_QWORD *)a2 + 9), *((_QWORD *)a2 + 10));
  v35 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  std::to_string(&v144, v35);
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v36 = &v144;
  else
    v36 = (std::string *)v144.__r_.__value_.__r.__words[0];
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v37 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
  else
    v37 = v144.__r_.__value_.__l.__size_;
  v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v36, v37);
  std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(_QWORD *)(*v38 - 24)));
  v39 = std::locale::use_facet(&v150, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
  std::locale::~locale(&v150);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v144.__r_.__value_.__l.__data_);
  if (v142)
  {
    v143 = v142;
    operator delete(v142);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\t\twrite_end(vars: ", 18);
  v40 = (_QWORD *)std::ostream::operator<<();
  v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)")=", 2);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *((_QWORD *)a2 + 11), *((_QWORD *)a2 + 12));
  v42 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  std::to_string(&v144, v42);
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v43 = &v144;
  else
    v43 = (std::string *)v144.__r_.__value_.__r.__words[0];
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v44 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
  else
    v44 = v144.__r_.__value_.__l.__size_;
  v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v43, v44);
  std::ios_base::getloc((const std::ios_base *)((char *)v45 + *(_QWORD *)(*v45 - 24)));
  v46 = std::locale::use_facet(&v150, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v46->__vftable[2].~facet_0)(v46, 10);
  std::locale::~locale(&v150);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v144.__r_.__value_.__l.__data_);
  if (v142)
  {
    v143 = v142;
    operator delete(v142);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\tlayer_end(vars: ", 17);
  v47 = (_QWORD *)std::ostream::operator<<();
  v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)")=", 2);
  v49 = *(_QWORD *)a3;
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5));
  v50 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  std::to_string(&v144, v50 + v49);
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v51 = &v144;
  else
    v51 = (std::string *)v144.__r_.__value_.__r.__words[0];
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v52 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
  else
    v52 = v144.__r_.__value_.__l.__size_;
  v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)v51, v52);
  std::ios_base::getloc((const std::ios_base *)((char *)v53 + *(_QWORD *)(*v53 - 24)));
  v54 = std::locale::use_facet(&v150, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v54->__vftable[2].~facet_0)(v54, 10);
  std::locale::~locale(&v150);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v144.__r_.__value_.__l.__data_);
  if (v142)
  {
    v143 = v142;
    operator delete(v142);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((_QWORD *)a2 + 25) != *((_QWORD *)a2 + 24))
  {
    v55 = 0;
    v56 = (std::locale::id *)MEMORY[0x24BEDB350];
    do
    {
      v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\tin", 3);
      std::to_string(&__p, v55);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v58 = &__p;
      else
        v58 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v59 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v59 = __p.__r_.__value_.__l.__size_;
      v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)v58, v59);
      v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)": ", 2);
      ORToolsCpBasedAllocatorUtil::GetAllocationCostString(this, *(const operations_research::sat::CpSolverResponse **)(*((_QWORD *)a2 + 24) + 8 * v55), &v144);
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v62 = &v144;
      else
        v62 = (std::string *)v144.__r_.__value_.__r.__words[0];
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v63 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
      else
        v63 = v144.__r_.__value_.__l.__size_;
      v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)v62, v63);
      std::ios_base::getloc((const std::ios_base *)((char *)v64 + *(_QWORD *)(*v64 - 24)));
      v65 = std::locale::use_facet(&v150, v56);
      ((void (*)(const std::locale::facet *, uint64_t))v65->__vftable[2].~facet_0)(v65, 10);
      std::locale::~locale(&v150);
      std::ostream::put();
      std::ostream::flush();
      if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v144.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ++v55;
    }
    while (v55 < (uint64_t)(*((_QWORD *)a2 + 25) - *((_QWORD *)a2 + 24)) >> 3);
  }
  v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\tout: ", 6);
  ORToolsCpBasedAllocatorUtil::GetAllocationCostString(this, *((const operations_research::sat::CpSolverResponse **)a2 + 28), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v67 = &__p;
  else
    v67 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v68 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v68 = __p.__r_.__value_.__l.__size_;
  v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)v67, v68);
  std::ios_base::getloc((const std::ios_base *)((char *)v69 + *(_QWORD *)(*v69 - 24)));
  v70 = std::locale::use_facet((const std::locale *)&v144, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v70->__vftable[2].~facet_0)(v70, 10);
  std::locale::~locale((std::locale *)&v144);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"sched=", 6);
  std::ostream::operator<<();
  v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)", ", 2);
  v72 = *((char *)a2 + 335);
  if (v72 >= 0)
    v73 = (char *)a2 + 312;
  else
    v73 = (char *)*((_QWORD *)a2 + 39);
  if (v72 >= 0)
    v74 = *((unsigned __int8 *)a2 + 335);
  else
    v74 = *((_QWORD *)a2 + 40);
  v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)v73, v74);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"\n", 1);
  ORToolsCpBasedAllocatorUtil::GetInPlaceString((uint64_t *)a2 + 48, (uint64_t)this, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v76 = &__p;
  else
    v76 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v77 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v77 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)v76, v77);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\tlayer_begin(vars: ", 19);
  v78 = (_QWORD *)std::ostream::operator<<();
  v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)")=", 2);
  std::to_string(&__p, *(_QWORD *)a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v80 = &__p;
  else
    v80 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v81 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v81 = __p.__r_.__value_.__l.__size_;
  v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)v80, v81);
  std::ios_base::getloc((const std::ios_base *)((char *)v82 + *(_QWORD *)(*v82 - 24)));
  v83 = std::locale::use_facet((const std::locale *)&v144, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v83->__vftable[2].~facet_0)(v83, 10);
  std::locale::~locale((std::locale *)&v144);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\t\tread_end_0(vars: ", 19);
  v84 = (_QWORD *)std::ostream::operator<<();
  v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)")=", 2);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, **((_QWORD **)a2 + 13), *(_QWORD *)(*((_QWORD *)a2 + 13) + 8));
  v86 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  std::to_string(&v144, v86);
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v87 = &v144;
  else
    v87 = (std::string *)v144.__r_.__value_.__r.__words[0];
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v88 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
  else
    v88 = v144.__r_.__value_.__l.__size_;
  v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)v87, v88);
  std::ios_base::getloc((const std::ios_base *)((char *)v89 + *(_QWORD *)(*v89 - 24)));
  v90 = std::locale::use_facet(&v150, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v90->__vftable[2].~facet_0)(v90, 10);
  std::locale::~locale(&v150);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v144.__r_.__value_.__l.__data_);
  if (v142)
  {
    v143 = v142;
    operator delete(v142);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((_QWORD *)a2 + 30) - *((_QWORD *)a2 + 29) >= 9uLL)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\t\tread_end_1(vars: ", 19);
    v91 = (_QWORD *)std::ostream::operator<<();
    v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)")=", 2);
    operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *(_QWORD *)(*((_QWORD *)a2 + 13) + 16), *(_QWORD *)(*((_QWORD *)a2 + 13) + 24));
    v93 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
    std::to_string(&v144, v93);
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v94 = &v144;
    else
      v94 = (std::string *)v144.__r_.__value_.__r.__words[0];
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v95 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
    else
      v95 = v144.__r_.__value_.__l.__size_;
    v96 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)v94, v95);
    std::ios_base::getloc((const std::ios_base *)((char *)v96 + *(_QWORD *)(*v96 - 24)));
    v97 = std::locale::use_facet(&v150, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v97->__vftable[2].~facet_0)(v97, 10);
    std::locale::~locale(&v150);
    std::ostream::put();
    std::ostream::flush();
    if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v144.__r_.__value_.__l.__data_);
    if (v142)
    {
      v143 = v142;
      operator delete(v142);
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\t\tcomp_end(vars: ", 17);
  v98 = (_QWORD *)std::ostream::operator<<();
  v99 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)")=", 2);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *((_QWORD *)a2 + 16), *((_QWORD *)a2 + 17));
  v100 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  std::to_string(&v144, v100);
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v101 = &v144;
  else
    v101 = (std::string *)v144.__r_.__value_.__r.__words[0];
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v102 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
  else
    v102 = v144.__r_.__value_.__l.__size_;
  v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)v101, v102);
  std::ios_base::getloc((const std::ios_base *)((char *)v103 + *(_QWORD *)(*v103 - 24)));
  v104 = std::locale::use_facet(&v150, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v104->__vftable[2].~facet_0)(v104, 10);
  std::locale::~locale(&v150);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v144.__r_.__value_.__l.__data_);
  if (v142)
  {
    v143 = v142;
    operator delete(v142);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\t\twrite_end(vars: ", 18);
  v105 = (_QWORD *)std::ostream::operator<<();
  v106 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, (uint64_t)")=", 2);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *((_QWORD *)a2 + 18), *((_QWORD *)a2 + 19));
  v107 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  std::to_string(&v144, v107);
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v108 = &v144;
  else
    v108 = (std::string *)v144.__r_.__value_.__r.__words[0];
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v109 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
  else
    v109 = v144.__r_.__value_.__l.__size_;
  v110 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v106, (uint64_t)v108, v109);
  std::ios_base::getloc((const std::ios_base *)((char *)v110 + *(_QWORD *)(*v110 - 24)));
  v111 = std::locale::use_facet(&v150, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v111->__vftable[2].~facet_0)(v111, 10);
  std::locale::~locale(&v150);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v144.__r_.__value_.__l.__data_);
  if (v142)
  {
    v143 = v142;
    operator delete(v142);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\tlayer_end(vars: ", 17);
  v112 = (_QWORD *)std::ostream::operator<<();
  v113 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)")=", 2);
  v114 = *(_QWORD *)a3;
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5));
  v115 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  std::to_string(&v144, v115 + v114);
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v116 = &v144;
  else
    v116 = (std::string *)v144.__r_.__value_.__r.__words[0];
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v117 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
  else
    v117 = v144.__r_.__value_.__l.__size_;
  v118 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v113, (uint64_t)v116, v117);
  std::ios_base::getloc((const std::ios_base *)((char *)v118 + *(_QWORD *)(*v118 - 24)));
  v119 = std::locale::use_facet(&v150, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v119->__vftable[2].~facet_0)(v119, 10);
  std::locale::~locale(&v150);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v144.__r_.__value_.__l.__data_);
  if (v142)
  {
    v143 = v142;
    operator delete(v142);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((_QWORD *)a2 + 30) != *((_QWORD *)a2 + 29))
  {
    v120 = 0;
    v121 = (std::locale::id *)MEMORY[0x24BEDB350];
    do
    {
      v122 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\tin", 3);
      std::to_string(&__p, v120);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v123 = &__p;
      else
        v123 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v124 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v124 = __p.__r_.__value_.__l.__size_;
      v125 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)v123, v124);
      v126 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v125, (uint64_t)": ", 2);
      ORToolsCpBasedAllocatorUtil::GetAllocationCostString(this, *(const operations_research::sat::CpSolverResponse **)(*((_QWORD *)a2 + 29) + 8 * v120), &v144);
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v127 = &v144;
      else
        v127 = (std::string *)v144.__r_.__value_.__r.__words[0];
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v128 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
      else
        v128 = v144.__r_.__value_.__l.__size_;
      v129 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126, (uint64_t)v127, v128);
      std::ios_base::getloc((const std::ios_base *)((char *)v129 + *(_QWORD *)(*v129 - 24)));
      v130 = std::locale::use_facet(&v150, v121);
      ((void (*)(const std::locale::facet *, uint64_t))v130->__vftable[2].~facet_0)(v130, 10);
      std::locale::~locale(&v150);
      std::ostream::put();
      std::ostream::flush();
      if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v144.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ++v120;
    }
    while (v120 < (uint64_t)(*((_QWORD *)a2 + 30) - *((_QWORD *)a2 + 29)) >> 3);
  }
  v131 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"\tout: ", 6);
  ORToolsCpBasedAllocatorUtil::GetAllocationCostString(this, *((const operations_research::sat::CpSolverResponse **)a2 + 33), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v132 = &__p;
  else
    v132 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v133 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v133 = __p.__r_.__value_.__l.__size_;
  v134 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)v132, v133);
  std::ios_base::getloc((const std::ios_base *)((char *)v134 + *(_QWORD *)(*v134 - 24)));
  v135 = std::locale::use_facet((const std::locale *)&v144, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v135->__vftable[2].~facet_0)(v135, 10);
  std::locale::~locale((std::locale *)&v144);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5));
  *(_QWORD *)a3 += operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  if (v142)
  {
    v143 = v142;
    operator delete(v142);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v147, a4);
  v145[0] = *MEMORY[0x24BEDB7F0];
  v136 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v145 + *(_QWORD *)(v145[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v146 = v136;
  v147[0] = MEMORY[0x24BEDB848] + 16;
  if (v148 < 0)
    operator delete((void *)v147[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22E31DEF4](&v149);
}

void sub_22D9B940C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::locale a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t ORToolsCpBasedAllocatorUtil::GetEngineLayerResultString@<X0>(ORToolsCpBasedAllocatorUtil *this@<X0>, const operations_research::sat::CpSolverResponse *a2@<X1>, const ORToolsLayerScheduleVariable *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v6;
  int v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v13;
  _QWORD *v14;
  std::string *v15;
  std::string::size_type v16;
  _QWORD *v17;
  const std::locale::facet *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  std::string *v22;
  std::string::size_type v23;
  _QWORD *v24;
  const std::locale::facet *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  std::string *v29;
  std::string::size_type v30;
  _QWORD *v31;
  const std::locale::facet *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  std::string *v36;
  std::string::size_type v37;
  _QWORD *v38;
  const std::locale::facet *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  std::string *v43;
  std::string::size_type v44;
  _QWORD *v45;
  const std::locale::facet *v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  std::string *v51;
  std::string::size_type v52;
  _QWORD *v53;
  const std::locale::facet *v54;
  unint64_t v55;
  std::locale::id *v56;
  _QWORD *v57;
  std::string *v58;
  std::string::size_type v59;
  _QWORD *v60;
  _QWORD *v61;
  std::string *v62;
  std::string::size_type v63;
  _QWORD *v64;
  const std::locale::facet *v65;
  _QWORD *v66;
  std::string *v67;
  std::string::size_type v68;
  _QWORD *v69;
  const std::locale::facet *v70;
  uint64_t v71;
  std::string __p;
  void *v77;
  void *v78;
  std::string v79;
  _QWORD v80[2];
  uint64_t v81;
  _QWORD v82[10];
  char v83;
  uint64_t v84;
  std::locale v85;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v80);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"sched=", 6);
  std::ostream::operator<<();
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)", ", 2);
  v7 = *((char *)a2 + 271);
  if (v7 >= 0)
    v8 = (char *)a2 + 248;
  else
    v8 = (char *)*((_QWORD *)a2 + 31);
  if (v7 >= 0)
    v9 = *((unsigned __int8 *)a2 + 271);
  else
    v9 = *((_QWORD *)a2 + 32);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n", 1);
  ORToolsCpBasedAllocatorUtil::GetInPlaceString((uint64_t *)a2 + 24, (uint64_t)this, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"\tlayer_begin(vars: ", 19);
  v13 = (_QWORD *)std::ostream::operator<<();
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)")=", 2);
  std::to_string(&__p, *(_QWORD *)a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &__p;
  else
    v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v16 = __p.__r_.__value_.__l.__size_;
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
  v18 = std::locale::use_facet((const std::locale *)&v79, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
  std::locale::~locale((std::locale *)&v79);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"\t\tread_end_0(vars: ", 19);
  v19 = (_QWORD *)std::ostream::operator<<();
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)")=", 2);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, **((_QWORD **)a2 + 6), *(_QWORD *)(*((_QWORD *)a2 + 6) + 8));
  v21 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  std::to_string(&v79, v21);
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &v79;
  else
    v22 = (std::string *)v79.__r_.__value_.__r.__words[0];
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
  else
    v23 = v79.__r_.__value_.__l.__size_;
  v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v22, v23);
  std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(_QWORD *)(*v24 - 24)));
  v25 = std::locale::use_facet(&v85, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
  std::locale::~locale(&v85);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (v77)
  {
    v78 = v77;
    operator delete(v77);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13) >= 9uLL)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"\t\tread_end_1(vars: ", 19);
    v26 = (_QWORD *)std::ostream::operator<<();
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)")=", 2);
    operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *(_QWORD *)(*((_QWORD *)a2 + 6) + 16), *(_QWORD *)(*((_QWORD *)a2 + 6) + 24));
    v28 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
    std::to_string(&v79, v28);
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29 = &v79;
    else
      v29 = (std::string *)v79.__r_.__value_.__r.__words[0];
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
    else
      v30 = v79.__r_.__value_.__l.__size_;
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v29, v30);
    std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(_QWORD *)(*v31 - 24)));
    v32 = std::locale::use_facet(&v85, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
    std::locale::~locale(&v85);
    std::ostream::put();
    std::ostream::flush();
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v79.__r_.__value_.__l.__data_);
    if (v77)
    {
      v78 = v77;
      operator delete(v77);
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"\t\tcomp_end(vars: ", 17);
  v33 = (_QWORD *)std::ostream::operator<<();
  v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)")=", 2);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *((_QWORD *)a2 + 9), *((_QWORD *)a2 + 10));
  v35 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  std::to_string(&v79, v35);
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v36 = &v79;
  else
    v36 = (std::string *)v79.__r_.__value_.__r.__words[0];
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v37 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
  else
    v37 = v79.__r_.__value_.__l.__size_;
  v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v36, v37);
  std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(_QWORD *)(*v38 - 24)));
  v39 = std::locale::use_facet(&v85, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
  std::locale::~locale(&v85);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (v77)
  {
    v78 = v77;
    operator delete(v77);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"\t\twrite_end(vars: ", 18);
  v40 = (_QWORD *)std::ostream::operator<<();
  v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)")=", 2);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *((_QWORD *)a2 + 11), *((_QWORD *)a2 + 12));
  v42 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  std::to_string(&v79, v42);
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v43 = &v79;
  else
    v43 = (std::string *)v79.__r_.__value_.__r.__words[0];
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v44 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
  else
    v44 = v79.__r_.__value_.__l.__size_;
  v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v43, v44);
  std::ios_base::getloc((const std::ios_base *)((char *)v45 + *(_QWORD *)(*v45 - 24)));
  v46 = std::locale::use_facet(&v85, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v46->__vftable[2].~facet_0)(v46, 10);
  std::locale::~locale(&v85);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (v77)
  {
    v78 = v77;
    operator delete(v77);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"\tlayer_end(vars: ", 17);
  v47 = (_QWORD *)std::ostream::operator<<();
  v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)")=", 2);
  v49 = *(_QWORD *)a3;
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5));
  v50 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  std::to_string(&v79, v50 + v49);
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v51 = &v79;
  else
    v51 = (std::string *)v79.__r_.__value_.__r.__words[0];
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v52 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
  else
    v52 = v79.__r_.__value_.__l.__size_;
  v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)v51, v52);
  std::ios_base::getloc((const std::ios_base *)((char *)v53 + *(_QWORD *)(*v53 - 24)));
  v54 = std::locale::use_facet(&v85, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v54->__vftable[2].~facet_0)(v54, 10);
  std::locale::~locale(&v85);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (v77)
  {
    v78 = v77;
    operator delete(v77);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((_QWORD *)a2 + 14) != *((_QWORD *)a2 + 13))
  {
    v55 = 0;
    v56 = (std::locale::id *)MEMORY[0x24BEDB350];
    do
    {
      v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"\tin", 3);
      std::to_string(&__p, v55);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v58 = &__p;
      else
        v58 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v59 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v59 = __p.__r_.__value_.__l.__size_;
      v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)v58, v59);
      v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)": ", 2);
      ORToolsCpBasedAllocatorUtil::GetAllocationCostString(this, *(const operations_research::sat::CpSolverResponse **)(*((_QWORD *)a2 + 13) + 8 * v55), &v79);
      if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v62 = &v79;
      else
        v62 = (std::string *)v79.__r_.__value_.__r.__words[0];
      if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v63 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
      else
        v63 = v79.__r_.__value_.__l.__size_;
      v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)v62, v63);
      std::ios_base::getloc((const std::ios_base *)((char *)v64 + *(_QWORD *)(*v64 - 24)));
      v65 = std::locale::use_facet(&v85, v56);
      ((void (*)(const std::locale::facet *, uint64_t))v65->__vftable[2].~facet_0)(v65, 10);
      std::locale::~locale(&v85);
      std::ostream::put();
      std::ostream::flush();
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v79.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ++v55;
    }
    while (v55 < (uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 3);
  }
  v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"\tout: ", 6);
  ORToolsCpBasedAllocatorUtil::GetAllocationCostString(this, *((const operations_research::sat::CpSolverResponse **)a2 + 17), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v67 = &__p;
  else
    v67 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v68 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v68 = __p.__r_.__value_.__l.__size_;
  v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)v67, v68);
  std::ios_base::getloc((const std::ios_base *)((char *)v69 + *(_QWORD *)(*v69 - 24)));
  v70 = std::locale::use_facet((const std::locale *)&v79, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v70->__vftable[2].~facet_0)(v70, 10);
  std::locale::~locale((std::locale *)&v79);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5));
  *(_QWORD *)a3 += operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
  if (v77)
  {
    v78 = v77;
    operator delete(v77);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v82, a4);
  v80[0] = *MEMORY[0x24BEDB7F0];
  v71 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v80 + *(_QWORD *)(v80[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v81 = v71;
  v82[0] = MEMORY[0x24BEDB848] + 16;
  if (v83 < 0)
    operator delete((void *)v82[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22E31DEF4](&v84);
}

void sub_22D9B9F38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::locale a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t ORToolsCpBasedAllocatorUtil::GetAllocationCostString@<X0>(ORToolsCpBasedAllocatorUtil *this@<X0>, const operations_research::sat::CpSolverResponse *a2@<X1>, _QWORD *a3@<X8>)
{
  _BOOL4 v7;
  _BOOL4 v8;
  _BOOL4 v9;
  _QWORD *v10;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v13;
  std::string *v14;
  std::string::size_type v15;
  _QWORD *v16;
  std::string *v17;
  std::string::size_type v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  std::string *v22;
  std::string::size_type v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  std::string __p;
  void *v31;
  void *v32;
  std::string v33;
  std::string v34;
  _QWORD v35[2];
  uint64_t v36;
  _QWORD v37[10];
  char v38;
  uint64_t v39;

  v7 = operations_research::sat::SolutionBooleanValue((uint64_t)this, *((_QWORD *)a2 + 28), *((_QWORD *)a2 + 29));
  v8 = operations_research::sat::SolutionBooleanValue((uint64_t)this, *((_QWORD *)a2 + 30), *((_QWORD *)a2 + 31));
  v9 = operations_research::sat::SolutionBooleanValue((uint64_t)this, *((_QWORD *)a2 + 32), *((_QWORD *)a2 + 33));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v35);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"(", 1);
  std::to_string(&__p, v7);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)p_p, size);
  std::to_string(&v34, v8);
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &v34;
  else
    v14 = (std::string *)v34.__r_.__value_.__r.__words[0];
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
  else
    v15 = v34.__r_.__value_.__l.__size_;
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
  std::to_string(&v33, v9);
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = &v33;
  else
    v17 = (std::string *)v33.__r_.__value_.__r.__words[0];
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  else
    v18 = v33.__r_.__value_.__l.__size_;
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)", ", 2);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v7)
      goto LABEL_25;
  }
  else if (v7)
  {
LABEL_25:
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"L2", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", ", 2);
    operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *((_QWORD *)a2 + 14), *((_QWORD *)a2 + 15));
    v21 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
    std::to_string(&v34, v21);
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &v34;
    else
      v22 = (std::string *)v34.__r_.__value_.__r.__words[0];
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
    else
      v23 = v34.__r_.__value_.__l.__size_;
    goto LABEL_46;
  }
  if (v8)
  {
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"DRAM", 4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)", ", 2);
    operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *((_QWORD *)a2 + 16), *((_QWORD *)a2 + 17));
    v25 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
    std::to_string(&v34, v25);
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &v34;
    else
      v22 = (std::string *)v34.__r_.__value_.__r.__words[0];
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
    else
      v23 = v34.__r_.__value_.__l.__size_;
  }
  else
  {
    if (!v9)
      goto LABEL_52;
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"Chain", 5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)", ", 2);
    operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *((_QWORD *)a2 + 26), *((_QWORD *)a2 + 27));
    v27 = operations_research::sat::SolutionIntegerValue((uint64_t)this, (uint64_t *)&__p);
    std::to_string(&v34, v27);
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &v34;
    else
      v22 = (std::string *)v34.__r_.__value_.__r.__words[0];
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
    else
      v23 = v34.__r_.__value_.__l.__size_;
  }
LABEL_46:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)v22, v23);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_52:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)")", 1);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v37, a3);
  v35[0] = *MEMORY[0x24BEDB7F0];
  v28 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v35 + *(_QWORD *)(v35[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v36 = v28;
  v37[0] = MEMORY[0x24BEDB848] + 16;
  if (v38 < 0)
    operator delete((void *)v37[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22E31DEF4](&v39);
}

void sub_22D9BA3CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  if (a30 < 0)
    operator delete(__p);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a31);
  _Unwind_Resume(a1);
}

uint64_t ORToolsCpBasedAllocatorUtil::GetInPlaceString@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  std::string *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  std::string v16;
  void *__p;
  void *v18;
  _QWORD v19[2];
  uint64_t v20;
  _QWORD v21[10];
  char v22;
  uint64_t v23;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v19);
  v6 = *a1;
  if (a1[1] != *a1)
  {
    v7 = 0;
    v8 = 0;
    while (1)
    {
      operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v16, *(_QWORD *)(v6 + v7), *(_QWORD *)(v6 + v7 + 8));
      v9 = operations_research::sat::SolutionIntegerValue(a2, (uint64_t *)&v16);
      if (__p)
      {
        v18 = __p;
        operator delete(__p);
      }
      if (v16.__r_.__value_.__r.__words[0])
      {
        v16.__r_.__value_.__l.__size_ = v16.__r_.__value_.__r.__words[0];
        operator delete(v16.__r_.__value_.__l.__data_);
      }
      if (v9 > 0)
        break;
      ++v8;
      v6 = *a1;
      v7 += 16;
      if (v8 >= (a1[1] - *a1) >> 4)
        goto LABEL_19;
    }
    if ((v8 & 0x8000000000000000) == 0)
    {
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"\tInplace is enabled at idx ", 27);
      std::to_string(&v16, v8);
      v11 = (v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v16
          : (std::string *)v16.__r_.__value_.__r.__words[0];
      v12 = (v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? HIBYTE(v16.__r_.__value_.__r.__words[2])
          : v16.__r_.__value_.__l.__size_;
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n", 1);
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16.__r_.__value_.__l.__data_);
    }
  }
LABEL_19:
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v21, a3);
  v19[0] = *MEMORY[0x24BEDB7F0];
  v14 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v19 + *(_QWORD *)(v19[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v20 = v14;
  v21[0] = MEMORY[0x24BEDB848] + 16;
  if (v22 < 0)
    operator delete((void *)v21[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22E31DEF4](&v23);
}

void sub_22D9BA620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

BOOL ORToolsCpBasedAllocatorUtil_CallCpAllocator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL8 v6;
  _BOOL8 v7;
  uint64_t v10;
  uint64_t *v11[4];
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  ORToolsCpAllocator::ORToolsCpAllocator(&v10, a1, a2, a3, a4);
  v6 = ORToolsCpAllocator::Execute((ORToolsCpAllocator *)&v10);
  v7 = v6;
  if (v11 != (uint64_t **)a5 && v6)
  {
    *(_DWORD *)(a5 + 32) = v12;
    std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,void *> *>>((_QWORD *)a5, v11[2], 0);
  }
  ORToolsCpAllocator::~ORToolsCpAllocator((ORToolsCpAllocator *)&v10);
  return v7;
}

void sub_22D9BA71C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t *std::set<unsigned long long>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<unsigned long long>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned long long,std::__tree_node<unsigned long long,void *> *,long>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_22D9BA774(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<unsigned long long>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned long long,std::__tree_node<unsigned long long,void *> *,long>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<unsigned long long>::__emplace_hint_unique_key_args<unsigned long long,unsigned long long const&>(v5, v6, v4 + 4, v4 + 4);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<unsigned long long>::__emplace_hint_unique_key_args<unsigned long long,unsigned long long const&>(uint64_t **a1, _QWORD *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<unsigned long long>::__find_equal<unsigned long long>(a1, a2, &v11, &v10, a3);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a4;
    std::__tree<unsigned long long>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

_QWORD *std::__tree<unsigned long long>::__find_equal<unsigned long long>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unint64_t *a5)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (_QWORD *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v16 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[4];
          if (v15 >= v18)
            break;
          v16 = (_QWORD *)*v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = (_QWORD *)v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (_QWORD *)a2[1];
    do
    {
      a4 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (_QWORD *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    v20 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = v20;
          v22 = v20[4];
          if (v6 >= v22)
            break;
          v20 = (_QWORD *)*v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = (_QWORD *)v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,void *> *>>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *inserted;
  uint64_t *v12;

  v6 = a1[1];
  if (!v6)
    goto LABEL_9;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      v9 = a2[2];
      v8[2] = v9;
      *((_DWORD *)v8 + 6) = *((_DWORD *)a2 + 6);
      v10 = (uint64_t *)*v8;
      v8[1] = v9;
      inserted = std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::__node_insert_multi_prepare((uint64_t)a1, v9, v8 + 2);
      std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__node_insert_multi_perform(a1, v8, inserted);
      a2 = (uint64_t *)*a2;
      v8 = v10;
      if (!v10)
        goto LABEL_9;
    }
    do
    {
      v12 = (uint64_t *)*v8;
      operator delete(v8);
      v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::__emplace_multi<std::pair<unsigned long long const,CpAllocUtils::AllocationType> const&>(a1, (_OWORD *)a2 + 1);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_22D9BAB18(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_22D9BAB38(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  _BOOL8 v10;
  size_t v11;
  unint64_t v12;
  size_t v13;
  uint8x8_t v14;
  unint64_t v15;
  _QWORD *v16;
  int v17;
  _QWORD *result;
  unint64_t v19;
  unint64_t v20;
  _BOOL4 v21;
  int v22;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 2 * v6;
    v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    v11 = v10 | v9;
    v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12)
      v13 = v12;
    else
      v13 = v11;
    std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::__rehash<false>(a1, v13);
    v6 = *(_QWORD *)(a1 + 8);
  }
  v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v15 = a2;
    if (v6 <= a2)
      v15 = a2 % v6;
  }
  else
  {
    v15 = (v6 - 1) & a2;
  }
  v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
  if (!v16)
    return 0;
  v17 = 0;
  do
  {
    result = v16;
    v16 = (_QWORD *)*v16;
    if (!v16)
      break;
    v19 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      v20 = v16[1];
      if (v19 >= v6)
        v20 = v19 % v6;
    }
    else
    {
      v20 = v19 & (v6 - 1);
    }
    if (v20 != v15)
      break;
    v21 = v19 == a2 && v16[2] == *a3;
    v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::__do_rehash<false>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      for (i = (_QWORD *)*v7; *v7; i = (_QWORD *)*v7)
      {
        v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2)
            v12 %= a2;
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          v7 = i;
        }
        else
        {
          v13 = i;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
          {
            do
            {
              v14 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13 && i[2] == v13[2]);
            *v7 = v13;
            *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
            v7 = i;
            v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::__emplace_multi<std::pair<unsigned long long const,CpAllocUtils::AllocationType> const&>(_QWORD *a1, _OWORD *a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *inserted;

  v4 = operator new(0x20uLL);
  *((_OWORD *)v4 + 1) = *a2;
  v5 = v4[2];
  *v4 = 0;
  v4[1] = v5;
  inserted = std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4 + 2);
  std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__node_insert_multi_perform(a1, v4, inserted);
  return v4;
}

void sub_22D9BAF50(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *ORToolsTensorAllocationVariable::ORToolsTensorAllocationVariable(uint64_t *a1, operations_research::sat::CpModelBuilder *a2)
{
  uint64_t v4;
  std::string *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  __int128 v14;
  uint64_t v15;
  operations_research::sat::CpModelBuilder *v16;
  uint64_t v17;
  std::string *v18;
  __int128 v19;
  std::string v21;
  std::string __str;
  std::string v23;
  void *v24;
  void *v25;
  std::string __p;
  void *v27;
  void *v28;
  operations_research::sat::CpModelBuilder *v29;
  operations_research::sat::CpModelBuilder *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v30 = operations_research::sat::CpModelBuilder::NewBoolVar(a2);
  v31 = v4;
  std::operator+<char>();
  v5 = std::string::append(&v23, ":resident_decision", 0x12uLL);
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  *a1 = operations_research::sat::BoolVar::WithName((int *)&v30, &__p);
  a1[1] = v7;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  v30 = operations_research::sat::CpModelBuilder::NewBoolVar(a2);
  v31 = v8;
  std::operator+<char>();
  v9 = std::string::append(&v23, ":nonresident_decision", 0x15uLL);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  a1[2] = operations_research::sat::BoolVar::WithName((int *)&v30, &__p);
  a1[3] = v11;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  v30 = operations_research::sat::CpModelBuilder::NewBoolVar(a2);
  v31 = v12;
  std::operator+<char>();
  v13 = std::string::append(&v23, ":chain_decision", 0xFuLL);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  a1[4] = operations_research::sat::BoolVar::WithName((int *)&v30, &__p);
  a1[5] = v15;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  v30 = (operations_research::sat::CpModelBuilder *)*a1;
  LODWORD(v31) = *((_DWORD *)a1 + 2);
  v32 = a1[2];
  v33 = *((_DWORD *)a1 + 6);
  v34 = a1[4];
  v35 = *((_DWORD *)a1 + 10);
  operations_research::sat::LinearExpr::BooleanSum((uint64_t)&v30, 3, (uint64_t)&__p);
  v16 = operations_research::sat::CpModelBuilder::NewConstant(a2, 1);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v23, (uint64_t)v16, v17);
  v29 = operations_research::sat::CpModelBuilder::AddEquality(a2, (const operations_research::sat::LinearExpr *)&__p, (const operations_research::sat::LinearExpr *)&v23);
  std::operator+<char>();
  v18 = std::string::append(&v21, ":mutex_allocation_decision", 0x1AuLL);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  operations_research::sat::Constraint::WithName((uint64_t *)&v29, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
  if (v23.__r_.__value_.__r.__words[0])
  {
    v23.__r_.__value_.__l.__size_ = v23.__r_.__value_.__r.__words[0];
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_22D9BB270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a22);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a32);
  _Unwind_Resume(a1);
}

uint64_t ORToolsCpAllocator::ORToolsCpAllocator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  operations_research::sat::SatParameters *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::ios_base *v14;
  uint64_t v15;
  int v16;
  std::string v18;

  *(_QWORD *)a1 = a2;
  std::unordered_map<unsigned long long,CpAllocUtils::AllocationType>::unordered_map(a1 + 8, a3);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = 1065353216;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = 1065353216;
  v8 = operator new();
  *(_OWORD *)(v8 + 208) = 0u;
  *(_OWORD *)(v8 + 224) = 0u;
  *(_OWORD *)(v8 + 176) = 0u;
  *(_OWORD *)(v8 + 192) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 160) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)v8 = 0u;
  operations_research::sat::CpModelProto::CpModelProto((operations_research::sat::CpModelProto *)v8, 0);
  *(_QWORD *)(v8 + 144) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_QWORD *)(v8 + 184) = 0;
  *(_QWORD *)(v8 + 192) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *(_QWORD *)(v8 + 232) = 0;
  *(_QWORD *)(a1 + 208) = v8;
  v9 = (operations_research::sat::SatParameters *)operator new();
  operations_research::sat::SatParameters::SatParameters(v9, 0);
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
  v11 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
  *(_QWORD *)(a1 + 224) = v10;
  *(_QWORD *)(a1 + 216) = v9;
  v12 = MEMORY[0x24BEDB840];
  v13 = MEMORY[0x24BEDB840] + 64;
  *(_QWORD *)(a1 + 640) = MEMORY[0x24BEDB840] + 64;
  *(_QWORD *)(a1 + 224 + *(_QWORD *)(v10 - 24)) = v11;
  v14 = (std::ios_base *)(a1 + 224 + *(_QWORD *)(*(_QWORD *)(a1 + 224) - 24));
  std::ios_base::init(v14, (void *)(a1 + 232));
  v14[1].__vftable = 0;
  v14[1].__fmtflags_ = -1;
  *(_QWORD *)(a1 + 224) = v12 + 24;
  *(_QWORD *)(a1 + 640) = v13;
  MEMORY[0x22E31DCFC](a1 + 232);
  *(_QWORD *)(a1 + 792) = a4;
  v15 = *(unsigned __int8 *)(a5 + 23);
  v16 = (char)v15;
  if ((v15 & 0x80u) != 0)
    v15 = *(_QWORD *)(a5 + 8);
  if (v15)
  {
    if (v16 < 0)
      std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
    else
      v18 = *(std::string *)a5;
    std::ofstream::open();
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_22D9BB53C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  operations_research::sat::CpModelProto *v22;

  std::ofstream::~ofstream(v20);
  std::unique_ptr<operations_research::sat::SatParameters>::reset[abi:ne180100]((operations_research::sat::SatParameters **)(v19 + 216), 0);
  v22 = *(operations_research::sat::CpModelProto **)(v18 + 160);
  *(_QWORD *)(v18 + 160) = 0;
  if (v22)
    std::default_delete<operations_research::sat::CpModelBuilder>::operator()[abi:ne180100](v18 + 160, v22);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::~__hash_table(a9);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>>>::~__hash_table(a10);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>>>::~__hash_table(a11);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::~__hash_table(v18);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a12);
  _Unwind_Resume(a1);
}

void ORToolsCpAllocator::~ORToolsCpAllocator(ORToolsCpAllocator *this)
{
  uint64_t v2;
  uint64_t v3;
  operations_research::sat::CpModelProto *v4;

  v2 = MEMORY[0x24BEDB7E8];
  v3 = *MEMORY[0x24BEDB7E8];
  *((_QWORD *)this + 28) = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24) + 224) = *(_QWORD *)(v2 + 24);
  MEMORY[0x22E31DD08]((char *)this + 232);
  std::ostream::~ostream();
  MEMORY[0x22E31DEF4]((char *)this + 640);
  std::unique_ptr<operations_research::sat::SatParameters>::reset[abi:ne180100]((operations_research::sat::SatParameters **)this + 27, 0);
  v4 = (operations_research::sat::CpModelProto *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v4)
    std::default_delete<operations_research::sat::CpModelBuilder>::operator()[abi:ne180100]((uint64_t)this + 208, v4);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::~__hash_table((uint64_t)this + 168);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>>>::~__hash_table((uint64_t)this + 128);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>>>::~__hash_table((uint64_t)this + 88);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::~__hash_table((uint64_t)this + 48);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)this + 8);
}

void ORToolsCpAllocator::CreateTensorAllocationVariable(CpGraph **this, unint64_t *a2)
{
  unint64_t *v4;
  std::string::size_type size;
  CpGraph *v6;
  ORToolsCpL2AccessVariable *v7;
  ORToolsCpL2AccessVariable **v8;
  char *v9;
  CpGraph *v10;
  ORToolsCpL2AccessVariable *v11;
  ORToolsCpL2AccessVariable **v12;
  std::string __p;
  unint64_t v14;
  std::string v15;
  unint64_t *OutputTensor;

  CpGraph::GetInputTensors(*this, a2, (uint64_t)&v15);
  size = v15.__r_.__value_.__l.__size_;
  v4 = (unint64_t *)v15.__r_.__value_.__r.__words[0];
  if (v15.__r_.__value_.__r.__words[0] != v15.__r_.__value_.__l.__size_)
  {
    do
    {
      v14 = *v4;
      if (!std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(this + 21, &v14))
      {
        memset(&__p, 0, sizeof(__p));
        CpGraph::GetTensorName((uint64_t)*this, v14, &__p);
        v6 = this[26];
        v7 = (ORToolsCpL2AccessVariable *)operator new();
        ORToolsTensorAllocationVariable::ORToolsTensorAllocationVariable(v7, v6, &__p);
        OutputTensor = &v14;
        v8 = (ORToolsCpL2AccessVariable **)std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(this + 21), &v14, (uint64_t)&std::piecewise_construct, &OutputTensor);
        std::unique_ptr<ORToolsTensorAllocationVariable>::reset[abi:ne180100](v8 + 3, v7);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      ++v4;
    }
    while (v4 != (unint64_t *)size);
    v4 = (unint64_t *)v15.__r_.__value_.__r.__words[0];
  }
  if (v4)
  {
    v15.__r_.__value_.__l.__size_ = (std::string::size_type)v4;
    operator delete(v4);
  }
  v9 = (char *)(this + 21);
  OutputTensor = CpGraph::GetOutputTensor(*this, a2);
  if (!std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(this + 21, (unint64_t *)&OutputTensor))
  {
    memset(&v15, 0, sizeof(v15));
    CpGraph::GetTensorName((uint64_t)*this, (unint64_t)OutputTensor, &v15);
    v10 = this[26];
    v11 = (ORToolsCpL2AccessVariable *)operator new();
    ORToolsTensorAllocationVariable::ORToolsTensorAllocationVariable(v11, v10, &v15);
    v14 = (unint64_t)v11;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&OutputTensor;
    v12 = (ORToolsCpL2AccessVariable **)std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v9, (unint64_t *)&OutputTensor, (uint64_t)&std::piecewise_construct, &__p);
    std::unique_ptr<ORToolsTensorAllocationVariable>::reset[abi:ne180100](v12 + 3, v11);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_22D9BB8B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, ORToolsCpL2AccessVariable *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::unique_ptr<ORToolsTensorAllocationVariable>::reset[abi:ne180100](&a16, 0);
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void ORToolsCpAllocator::CreateLayerScheduleVariable(CpGraph **this, unint64_t *a2, const operations_research::Domain *a3)
{
  unint64_t *v4;
  unint64_t *v6;
  std::string::size_type size;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  operations_research::sat::CpModelBuilder *v20;
  uint64_t v21;
  const ComputeCycleEstimator *v22;
  uint64_t v23;
  void *v24;
  ORToolsLayerScheduleVariable **v25;
  unint64_t *v26;
  void *__p[4];
  uint64_t v28;
  LayerCycleAndFootprintEstimator *v29;
  _QWORD *OutputTensor;
  std::string v31;
  char *v32;
  char *v33;
  char *v34;
  unint64_t *v35;

  v4 = a2;
  v34 = 0;
  v35 = a2;
  v32 = 0;
  v33 = 0;
  CpGraph::GetInputTensors(*this, a2, (uint64_t)&v31);
  size = v31.__r_.__value_.__l.__size_;
  v6 = (unint64_t *)v31.__r_.__value_.__r.__words[0];
  if (v31.__r_.__value_.__r.__words[0] != v31.__r_.__value_.__l.__size_)
  {
    v26 = v4;
    do
    {
      OutputTensor = 0;
      OutputTensor = (_QWORD *)*v6;
      __p[0] = &OutputTensor;
      v8 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(this + 21), (unint64_t *)&OutputTensor, (uint64_t)&std::piecewise_construct, (_QWORD **)__p)[3];
      v9 = v33;
      if (v33 >= v34)
      {
        v11 = (v33 - v32) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v12 = (v34 - v32) >> 2;
        if (v12 <= v11 + 1)
          v12 = v11 + 1;
        if ((unint64_t)(v34 - v32) >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13)
          v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)&v34, v13);
        else
          v14 = 0;
        v15 = &v14[8 * v11];
        *(_QWORD *)v15 = v8;
        v10 = v15 + 8;
        v17 = v32;
        v16 = v33;
        if (v33 != v32)
        {
          do
          {
            v18 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            *((_QWORD *)v15 - 1) = v18;
            v15 -= 8;
          }
          while (v16 != v17);
          v16 = v32;
        }
        v32 = v15;
        v33 = v10;
        v34 = &v14[8 * v13];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *(_QWORD *)v33 = v8;
        v10 = v9 + 8;
      }
      v33 = v10;
      ++v6;
    }
    while (v6 != (unint64_t *)size);
    v6 = (unint64_t *)v31.__r_.__value_.__r.__words[0];
    v4 = v26;
  }
  if (v6)
  {
    v31.__r_.__value_.__l.__size_ = (std::string::size_type)v6;
    operator delete(v6);
  }
  OutputTensor = 0;
  OutputTensor = CpGraph::GetOutputTensor(*this, v4);
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&OutputTensor;
  v19 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(this + 21), (unint64_t *)&OutputTensor, (uint64_t)&std::piecewise_construct, &v31)[3];
  v29 = 0;
  if (CpAllocGraph::GetLayerBehavior((uint64_t)*this, (unint64_t)v4, &v29))
  {
    memset(&v31, 0, sizeof(v31));
    v28 = 0x7FFFFFFFFFFFFFFFLL;
    CpGraph::GetLayerName((uint64_t)*this, (unint64_t)v4, &v31);
    CpAllocGraph::GetLayerSchedule(*this, (unint64_t)v4, &v28);
    v20 = this[26];
    LayerCycleAndFootprintEstimator::GetReadBehaviors((uint64_t **)v29, (char **)__p);
    v22 = (const ComputeCycleEstimator *)*((_QWORD *)v29 + 3);
    v21 = *((_QWORD *)v29 + 4);
    v23 = *((_QWORD *)v29 + 5);
    v24 = (void *)operator new();
    ORToolsLayerScheduleVariable::ORToolsLayerScheduleVariable((uint64_t)v24, v20, (uint64_t)v35, (__int128 *)&v31, v28, (uint64_t *)__p, (uint64_t *)&v32, v22, v21, v19, a3, v23);
    __p[3] = v24;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    __p[0] = &v35;
    v25 = (ORToolsLayerScheduleVariable **)std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(this + 6), (unint64_t *)&v35, (uint64_t)&std::piecewise_construct, (_QWORD **)__p);
    std::unique_ptr<ORToolsLayerScheduleVariable>::reset[abi:ne180100](v25 + 3, (ORToolsLayerScheduleVariable *)v24);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (v32)
  {
    v33 = v32;
    operator delete(v32);
  }
}

void sub_22D9BBC48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, ORToolsLayerScheduleVariable *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;
  void *v31;

  std::unique_ptr<ORToolsLayerScheduleVariable>::reset[abi:ne180100](&a20, 0);
  if (a29 < 0)
    operator delete(__p);
  v31 = *(void **)(v29 - 128);
  if (v31)
  {
    *(_QWORD *)(v29 - 120) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(a1);
}

void ORToolsCpAllocator::CreateChainScheduleVariable(CpGraph **this, unint64_t *a2, unint64_t *a3, uint64_t a4, const operations_research::Domain *a5)
{
  CpGraph **v5;
  unint64_t ***v6;
  unint64_t ***v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  std::string::size_type *v20;
  std::string::size_type *v21;
  unint64_t **v22;
  unint64_t ***v23;
  unint64_t ***v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  unint64_t ***v30;
  unint64_t ***v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  operations_research::sat::CpModelBuilder *v36;
  const ComputeCycleEstimator *v37;
  uint64_t *v38;
  char v39;
  uint64_t *v40;
  const ComputeCycleEstimator *v41;
  char v42;
  uint64_t *v43;
  uint64_t *v44;
  void *v45;
  ORToolsChainScheduleVariable **v46;
  char v47;
  uint64_t v48;
  CpGraph **v51;
  char *v52[3];
  void *__p[4];
  uint64_t v54;
  std::string v55;
  uint64_t v56;
  std::string v57;
  uint64_t **v58;
  uint64_t **v59;
  unint64_t **v60;
  unint64_t **v61;
  uint64_t v62;
  std::string::size_type *OutputTensor;
  std::string::size_type *v64;
  uint64_t v65;
  unint64_t ***p_OutputTensor;
  unint64_t ***v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  unint64_t *v72;
  unint64_t *v73[2];

  v5 = this;
  v72 = a3;
  v73[0] = a2;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  CpGraph::GetInputTensors(*this, a2, (uint64_t)&p_OutputTensor);
  v6 = p_OutputTensor;
  v7 = v67;
  v51 = v5;
  if (p_OutputTensor != v67)
  {
    do
    {
      v60 = 0;
      v60 = *v6;
      OutputTensor = (std::string::size_type *)&v60;
      v8 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v5 + 21), (unint64_t *)&v60, (uint64_t)&std::piecewise_construct, &OutputTensor)[3];
      v9 = v70;
      if (v70 >= v71)
      {
        v11 = (v70 - v69) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v12 = (v71 - v69) >> 2;
        if (v12 <= v11 + 1)
          v12 = v11 + 1;
        if ((unint64_t)(v71 - v69) >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13)
          v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)&v71, v13);
        else
          v14 = 0;
        v15 = &v14[8 * v11];
        *(_QWORD *)v15 = v8;
        v10 = v15 + 8;
        v17 = v69;
        v16 = v70;
        if (v70 != v69)
        {
          do
          {
            v18 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            *((_QWORD *)v15 - 1) = v18;
            v15 -= 8;
          }
          while (v16 != v17);
          v16 = v69;
        }
        v69 = v15;
        v70 = v10;
        v71 = &v14[8 * v13];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *(_QWORD *)v70 = v8;
        v10 = v9 + 8;
      }
      v70 = v10;
      ++v6;
    }
    while (v6 != v7);
    v6 = p_OutputTensor;
  }
  if (v6)
  {
    v67 = v6;
    operator delete(v6);
  }
  v19 = (uint64_t)(v5 + 21);
  OutputTensor = CpGraph::GetOutputTensor(*v5, v73[0]);
  p_OutputTensor = (unint64_t ***)&OutputTensor;
  v48 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v5 + 21), (unint64_t *)&OutputTensor, (uint64_t)&std::piecewise_construct, &p_OutputTensor)[3];
  p_OutputTensor = 0;
  v67 = 0;
  v68 = 0;
  CpGraph::GetInputTensors(*v5, v72, (uint64_t)&OutputTensor);
  v20 = OutputTensor;
  v21 = v64;
  if (OutputTensor != v64)
  {
    do
    {
      v57.__r_.__value_.__r.__words[0] = 0;
      v57.__r_.__value_.__r.__words[0] = *v20;
      v60 = (unint64_t **)&v57;
      v22 = (unint64_t **)std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v19, (unint64_t *)&v57, (uint64_t)&std::piecewise_construct, &v60)[3];
      v23 = v67;
      if (v67 >= (unint64_t ***)v68)
      {
        v25 = v67 - p_OutputTensor;
        if ((unint64_t)(v25 + 1) >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v26 = (v68 - (char *)p_OutputTensor) >> 2;
        if (v26 <= v25 + 1)
          v26 = v25 + 1;
        if ((unint64_t)(v68 - (char *)p_OutputTensor) >= 0x7FFFFFFFFFFFFFF8)
          v27 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v27 = v26;
        if (v27)
          v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)&v68, v27);
        else
          v28 = 0;
        v29 = &v28[8 * v25];
        *(_QWORD *)v29 = v22;
        v24 = (unint64_t ***)(v29 + 8);
        v31 = p_OutputTensor;
        v30 = v67;
        if (v67 != p_OutputTensor)
        {
          do
          {
            v32 = (uint64_t)*--v30;
            *((_QWORD *)v29 - 1) = v32;
            v29 -= 8;
          }
          while (v30 != v31);
          v30 = p_OutputTensor;
        }
        p_OutputTensor = (unint64_t ***)v29;
        v67 = v24;
        v68 = &v28[8 * v27];
        if (v30)
          operator delete(v30);
      }
      else
      {
        *v67 = v22;
        v24 = v23 + 1;
      }
      v67 = v24;
      ++v20;
    }
    while (v20 != v21);
    v20 = OutputTensor;
    v5 = v51;
  }
  if (v20)
  {
    v64 = v20;
    operator delete(v20);
  }
  v60 = (unint64_t **)CpGraph::GetOutputTensor(*v5, v72);
  OutputTensor = (std::string::size_type *)&v60;
  v33 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v19, (unint64_t *)&v60, (uint64_t)&std::piecewise_construct, &OutputTensor)[3];
  v60 = v73;
  v34 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v5 + 6), (unint64_t *)v73, (uint64_t)&std::piecewise_construct, &v60)[3];
  v64 = 0;
  v65 = 0;
  OutputTensor = 0;
  std::vector<operations_research::sat::BoolVar>::__init_with_size[abi:ne180100]<operations_research::sat::BoolVar*,operations_research::sat::BoolVar*>(&OutputTensor, *(const void **)(v34 + 192), *(_QWORD *)(v34 + 200), (uint64_t)(*(_QWORD *)(v34 + 200) - *(_QWORD *)(v34 + 192)) >> 4);
  v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&v72;
  v35 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v5 + 6), (unint64_t *)&v72, (uint64_t)&std::piecewise_construct, &v57)[3];
  v61 = 0;
  v62 = 0;
  v60 = 0;
  std::vector<operations_research::sat::BoolVar>::__init_with_size[abi:ne180100]<operations_research::sat::BoolVar*,operations_research::sat::BoolVar*>(&v60, *(const void **)(v35 + 192), *(_QWORD *)(v35 + 200), (uint64_t)(*(_QWORD *)(v35 + 200) - *(_QWORD *)(v35 + 192)) >> 4);
  v58 = 0;
  v59 = 0;
  CpAllocGraph::GetLayerBehavior((uint64_t)*v5, (unint64_t)v73[0], &v59);
  CpAllocGraph::GetLayerBehavior((uint64_t)*v5, (unint64_t)v72, &v58);
  memset(&v57, 0, sizeof(v57));
  v56 = 0x7FFFFFFFFFFFFFFFLL;
  CpGraph::GetLayerName((uint64_t)*v5, (unint64_t)v73[0], &v57);
  CpAllocGraph::GetLayerSchedule(*v5, (unint64_t)v73[0], &v56);
  memset(&v55, 0, sizeof(v55));
  v54 = 0x7FFFFFFFFFFFFFFFLL;
  CpGraph::GetLayerName((uint64_t)*v5, (unint64_t)v72, &v55);
  CpAllocGraph::GetLayerSchedule(*v5, (unint64_t)v72, &v54);
  v36 = v5[26];
  LayerCycleAndFootprintEstimator::GetReadBehaviors(v59, (char **)__p);
  v37 = (const ComputeCycleEstimator *)v59[3];
  v38 = v59[4];
  v39 = ORToolsCpAllocator::NeedProducerInputResidentIntervalIncrease(v5, v73[0]);
  LayerCycleAndFootprintEstimator::GetReadBehaviors(v58, v52);
  v47 = v39;
  v41 = (const ComputeCycleEstimator *)v58[3];
  v40 = v58[4];
  v42 = ORToolsCpAllocator::NeedConsumerOutputResidentIntervalIncrease(v5, v72);
  v43 = v59[5];
  v44 = v58[5];
  v45 = (void *)operator new();
  ORToolsChainScheduleVariable::ORToolsChainScheduleVariable((uint64_t)v45, v36, (uint64_t)v73[0], (const std::string::value_type **)&v57.__r_.__value_.__l.__data_, v56, (uint64_t *)__p, (uint64_t *)&v69, v37, (uint64_t)v38, v48, v47, (uint64_t)v72, (__int128 *)&v55, v54, (uint64_t *)v52, (uint64_t *)&p_OutputTensor, v41, (uint64_t)v40, v33,
    v42,
    a5,
    a4,
    (uint64_t)&OutputTensor,
    (uint64_t)&v60,
    (uint64_t)v43,
    (uint64_t)v44);
  __p[3] = v45;
  if (v52[0])
  {
    v52[1] = v52[0];
    operator delete(v52[0]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  __p[0] = v73;
  v46 = (ORToolsChainScheduleVariable **)std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v51 + 11), (unint64_t *)v73, (uint64_t)&std::piecewise_construct, (_QWORD **)__p);
  std::unique_ptr<ORToolsChainScheduleVariable>::reset[abi:ne180100](v46 + 3, (ORToolsChainScheduleVariable *)v45);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if (v60)
  {
    v61 = v60;
    operator delete(v60);
  }
  if (OutputTensor)
  {
    v64 = OutputTensor;
    operator delete(OutputTensor);
  }
  if (p_OutputTensor)
  {
    v67 = p_OutputTensor;
    operator delete(p_OutputTensor);
  }
  if (v69)
  {
    v70 = v69;
    operator delete(v69);
  }
}

void sub_22D9BC2E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,ORToolsChainScheduleVariable *a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;
  void *v48;
  void *v49;
  void *v50;
  void *v51;

  std::unique_ptr<ORToolsChainScheduleVariable>::reset[abi:ne180100](&a39, 0);
  if (a46 < 0)
    operator delete(__p);
  if (*(char *)(v46 - 217) < 0)
    operator delete(*(void **)(v46 - 240));
  v48 = *(void **)(v46 - 200);
  if (v48)
  {
    *(_QWORD *)(v46 - 192) = v48;
    operator delete(v48);
  }
  v49 = *(void **)(v46 - 176);
  if (v49)
  {
    *(_QWORD *)(v46 - 168) = v49;
    operator delete(v49);
  }
  v50 = *(void **)(v46 - 152);
  if (v50)
  {
    *(_QWORD *)(v46 - 144) = v50;
    operator delete(v50);
  }
  v51 = *(void **)(v46 - 128);
  if (v51)
  {
    *(_QWORD *)(v46 - 120) = v51;
    operator delete(v51);
  }
  _Unwind_Resume(a1);
}

uint64_t ORToolsCpAllocator::NeedProducerInputResidentIntervalIncrease(CpAllocGraph **this, unint64_t *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  CpAllocGraph *v6;
  _QWORD *v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t **v10;
  unint64_t **v11;
  unint64_t v12;
  uint64_t v14;
  void *__p;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v17 = 0x7FFFFFFFFFFFFFFFLL;
  CpAllocGraph::GetLayerSchedule(*this, (unint64_t)a2, &v17);
  CpGraph::GetInputTensors(*this, a2, (uint64_t)&__p);
  v4 = __p;
  v5 = v16;
  if (__p != v16)
  {
    while (2)
    {
      v14 = *v4;
      v6 = *this;
      v7 = (_QWORD *)((char *)*this + 24);
      v18 = (uint64_t)&v14;
      v8 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v7, (unint64_t **)&v18);
      v9 = (uint64_t **)((char *)v6 + 104);
      if (v8)
        v9 = v8 + 3;
      v10 = (unint64_t **)*v9;
      v11 = (unint64_t **)v9[1];
      while (v10 != v11)
      {
        v12 = **v10;
        if ((unint64_t *)v12 != a2)
        {
          v18 = 0x7FFFFFFFFFFFFFFFLL;
          CpAllocGraph::GetLayerSchedule(*this, v12, &v18);
          if (v18 > v17)
          {
            if (__p)
            {
              v16 = __p;
              operator delete(__p);
            }
            return 0;
          }
        }
        ++v10;
      }
      if (++v4 != v5)
        continue;
      break;
    }
    v4 = __p;
  }
  if (v4)
  {
    v16 = v4;
    operator delete(v4);
  }
  return 1;
}

void sub_22D9BC520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ORToolsCpAllocator::NeedConsumerOutputResidentIntervalIncrease(CpAllocGraph **this, unint64_t *a2)
{
  CpAllocGraph *v4;
  _QWORD *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t **v8;
  unint64_t **v9;
  unint64_t v10;
  _QWORD *OutputTensor;
  uint64_t v13;
  uint64_t p_OutputTensor;

  v13 = 0x7FFFFFFFFFFFFFFFLL;
  CpAllocGraph::GetLayerSchedule(*this, (unint64_t)a2, &v13);
  OutputTensor = CpGraph::GetOutputTensor(*this, a2);
  v4 = *this;
  v5 = (_QWORD *)((char *)*this + 64);
  p_OutputTensor = (uint64_t)&OutputTensor;
  v6 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v5, (unint64_t **)&p_OutputTensor);
  v7 = (uint64_t **)((char *)v4 + 104);
  if (v6)
    v7 = v6 + 3;
  v8 = (unint64_t **)*v7;
  v9 = (unint64_t **)v7[1];
  while (1)
  {
    if (v8 == v9)
      return 1;
    v10 = **v8;
    if ((unint64_t *)v10 != a2)
    {
      p_OutputTensor = 0x7FFFFFFFFFFFFFFFLL;
      CpAllocGraph::GetLayerSchedule(*this, v10, &p_OutputTensor);
      if (p_OutputTensor < v13)
        break;
    }
    ++v8;
  }
  return 0;
}

void ORToolsCpAllocator::CreateL2DepScheduleVariable(CpGraph **this, unint64_t *a2, unint64_t *a3, uint64_t a4, const operations_research::Domain *a5)
{
  CpGraph **v7;
  void **v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD **v24;
  _QWORD **v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  operations_research::sat::CpModelBuilder *v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  ORToolsL2DepScheduleVariable *v47;
  ORToolsL2DepScheduleVariable **v48;
  uint64_t v49;
  operations_research::Domain *v50;
  CpGraph **v51;
  void *__p;
  void *v53;
  uint64_t v54;
  uint64_t **v55;
  uint64_t v56;
  void *p_p;
  _QWORD **v58;
  uint64_t v59;
  void *p_p_p;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  unint64_t *v66;
  unint64_t *v67;
  _QWORD *v68[2];

  v7 = this;
  v66 = a3;
  v67 = a2;
  v63 = 0;
  v64 = 0;
  v65 = 0;
  CpGraph::GetInputTensors(*this, a2, (uint64_t)&p_p_p);
  v49 = a4;
  v50 = a5;
  v9 = (void **)p_p_p;
  v8 = (void **)v61;
  v51 = v7;
  if (p_p_p != v61)
  {
    v10 = (uint64_t)(v7 + 21);
    do
    {
      __p = 0;
      __p = *v9;
      p_p = &__p;
      v11 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v10, (unint64_t *)&__p, (uint64_t)&std::piecewise_construct, (_QWORD **)&p_p)[3];
      v12 = v64;
      if (v64 >= v65)
      {
        v14 = (v64 - v63) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v15 = (v65 - v63) >> 2;
        if (v15 <= v14 + 1)
          v15 = v14 + 1;
        if ((unint64_t)(v65 - v63) >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)&v65, v16);
        else
          v17 = 0;
        v18 = &v17[8 * v14];
        *(_QWORD *)v18 = v11;
        v13 = v18 + 8;
        v20 = v63;
        v19 = v64;
        if (v64 != v63)
        {
          do
          {
            v21 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            *((_QWORD *)v18 - 1) = v21;
            v18 -= 8;
          }
          while (v19 != v20);
          v19 = v63;
        }
        v63 = v18;
        v64 = v13;
        v65 = &v17[8 * v16];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *(_QWORD *)v64 = v11;
        v13 = v12 + 8;
      }
      v64 = v13;
      ++v9;
    }
    while (v9 != v8);
    v9 = (void **)p_p_p;
    v7 = v51;
  }
  if (v9)
  {
    v61 = (char *)v9;
    operator delete(v9);
  }
  v22 = (uint64_t)(v7 + 21);
  p_p = CpGraph::GetOutputTensor(*v7, v67);
  p_p_p = &p_p;
  v23 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v7 + 21), (unint64_t *)&p_p, (uint64_t)&std::piecewise_construct, (_QWORD **)&p_p_p)[3];
  p_p_p = 0;
  v61 = 0;
  v62 = 0;
  CpGraph::GetInputTensors(*v7, v66, (uint64_t)&p_p);
  v25 = (_QWORD **)p_p;
  v24 = v58;
  if (p_p != v58)
  {
    do
    {
      v68[0] = 0;
      v68[0] = *v25;
      __p = v68;
      v26 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v22, (unint64_t *)v68, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p)[3];
      v27 = v61;
      if (v61 >= v62)
      {
        v29 = (v61 - (_BYTE *)p_p_p) >> 3;
        if ((unint64_t)(v29 + 1) >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v30 = (v62 - (_BYTE *)p_p_p) >> 2;
        if (v30 <= v29 + 1)
          v30 = v29 + 1;
        if ((unint64_t)(v62 - (_BYTE *)p_p_p) >= 0x7FFFFFFFFFFFFFF8)
          v31 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v31 = v30;
        if (v31)
          v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)&v62, v31);
        else
          v32 = 0;
        v33 = &v32[8 * v29];
        *(_QWORD *)v33 = v26;
        v28 = v33 + 8;
        v35 = (char *)p_p_p;
        v34 = v61;
        if (v61 != p_p_p)
        {
          do
          {
            v36 = *((_QWORD *)v34 - 1);
            v34 -= 8;
            *((_QWORD *)v33 - 1) = v36;
            v33 -= 8;
          }
          while (v34 != v35);
          v34 = (char *)p_p_p;
        }
        p_p_p = v33;
        v61 = v28;
        v62 = &v32[8 * v31];
        if (v34)
          operator delete(v34);
      }
      else
      {
        *(_QWORD *)v61 = v26;
        v28 = v27 + 8;
      }
      v61 = v28;
      ++v25;
    }
    while (v25 != v24);
    v25 = (_QWORD **)p_p;
    v7 = v51;
  }
  if (v25)
  {
    v58 = v25;
    operator delete(v25);
  }
  __p = CpGraph::GetOutputTensor(*v7, v66);
  p_p = &__p;
  v37 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v22, (unint64_t *)&__p, (uint64_t)&std::piecewise_construct, (_QWORD **)&p_p)[3];
  v55 = 0;
  v56 = 0;
  CpAllocGraph::GetLayerBehavior((uint64_t)*v7, (unint64_t)v67, &v56);
  CpAllocGraph::GetLayerBehavior((uint64_t)*v7, (unint64_t)v66, &v55);
  v38 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::find<unsigned long long>(v7 + 6, (unint64_t *)&v67);
  v39 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::find<unsigned long long>(v7 + 6, (unint64_t *)&v66);
  __p = &v67;
  v40 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v7 + 6), (unint64_t *)&v67, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p)[3];
  v58 = 0;
  v59 = 0;
  p_p = 0;
  std::vector<operations_research::sat::BoolVar>::__init_with_size[abi:ne180100]<operations_research::sat::BoolVar*,operations_research::sat::BoolVar*>(&p_p, *(const void **)(v40 + 192), *(_QWORD *)(v40 + 200), (uint64_t)(*(_QWORD *)(v40 + 200) - *(_QWORD *)(v40 + 192)) >> 4);
  v68[0] = &v66;
  v41 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v7 + 6), (unint64_t *)&v66, (uint64_t)&std::piecewise_construct, v68)[3];
  v53 = 0;
  v54 = 0;
  __p = 0;
  std::vector<operations_research::sat::BoolVar>::__init_with_size[abi:ne180100]<operations_research::sat::BoolVar*,operations_research::sat::BoolVar*>(&__p, *(const void **)(v41 + 192), *(_QWORD *)(v41 + 200), (uint64_t)(*(_QWORD *)(v41 + 200) - *(_QWORD *)(v41 + 192)) >> 4);
  v42 = v7[26];
  v43 = v38[3];
  v44 = ORToolsCpAllocator::NeedProducerInputResidentIntervalIncrease(v7, v67);
  v45 = v39[3];
  v46 = ORToolsCpAllocator::NeedConsumerOutputResidentIntervalIncrease(v7, v66);
  v47 = (ORToolsL2DepScheduleVariable *)operator new();
  ORToolsL2DepScheduleVariable::ORToolsL2DepScheduleVariable((uint64_t)v47, v42, v43, v56, (uint64_t *)&v63, v23, v44, v45, v55, (uint64_t *)&p_p_p, v37, v46, v50, v49, (uint64_t)&p_p, (uint64_t)&__p);
  v68[0] = &v67;
  v48 = (ORToolsL2DepScheduleVariable **)std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v51 + 16), (unint64_t *)&v67, (uint64_t)&std::piecewise_construct, v68);
  std::unique_ptr<ORToolsL2DepScheduleVariable>::reset[abi:ne180100](v48 + 3, v47);
  if (__p)
  {
    v53 = __p;
    operator delete(__p);
  }
  if (p_p)
  {
    v58 = (_QWORD **)p_p;
    operator delete(p_p);
  }
  if (p_p_p)
  {
    v61 = (char *)p_p_p;
    operator delete(p_p_p);
  }
  if (v63)
  {
    v64 = v63;
    operator delete(v63);
  }
}

void sub_22D9BCB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,ORToolsL2DepScheduleVariable *a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  uint64_t v31;
  void *v33;

  std::unique_ptr<ORToolsL2DepScheduleVariable>::reset[abi:ne180100](&a21, 0);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a27)
  {
    a28 = (uint64_t)a27;
    operator delete(a27);
  }
  if (a30)
  {
    a31 = (uint64_t)a30;
    operator delete(a30);
  }
  v33 = *(void **)(v31 - 144);
  if (v33)
  {
    *(_QWORD *)(v31 - 136) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(a1);
}

uint64_t *ORToolsCpAllocator::GetResidentBufferSize(ORToolsCpAllocator *this, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t **v8;
  unint64_t **v9;
  unint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t **v13;
  uint64_t **v14;
  unint64_t ***v15;
  unint64_t ***v16;
  unint64_t **v17;
  unint64_t *v18;
  unint64_t *v19;
  uint64_t v20;
  int v21;
  void *__p[3];
  LayerCycleAndFootprintEstimator *v24;
  unint64_t *v25;
  unint64_t *v26;
  uint64_t v27;

  v27 = a2;
  v3 = *(_QWORD *)this;
  v4 = (_QWORD *)(*(_QWORD *)this + 64);
  v5 = &v27;
  v25 = (unint64_t *)&v27;
  v6 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v4, &v25);
  v7 = (uint64_t **)(v3 + 104);
  if (v6)
    v7 = v6 + 3;
  v8 = (unint64_t **)*v7;
  v9 = (unint64_t **)v7[1];
  while (v8 != v9)
  {
    v10 = *v8;
    v25 = 0;
    if (CpAllocGraph::GetLayerBehavior(*(_QWORD *)this, *v10, &v25))
      return *(uint64_t **)(v25[4] + 8);
    ++v8;
  }
  v11 = *(_QWORD *)this;
  v12 = (_QWORD *)(*(_QWORD *)this + 24);
  v25 = (unint64_t *)&v27;
  v13 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v12, &v25);
  v14 = (uint64_t **)(v11 + 104);
  if (v13)
    v14 = v13 + 3;
  v15 = (unint64_t ***)*v14;
  v16 = (unint64_t ***)v14[1];
  if (*v14 == (uint64_t *)v16)
    return 0;
  while (1)
  {
    v17 = *v15;
    CpGraph::GetInputTensors(*(CpGraph **)this, **v15, (uint64_t)&v25);
    v19 = v25;
    v18 = v26;
    if (v26 != v25)
    {
      v20 = 0;
      while (1)
      {
        if (v27 == v19[v20])
        {
          v24 = 0;
          if (CpAllocGraph::GetLayerBehavior(*(_QWORD *)this, (unint64_t)*v17, &v24))
          {
            LayerCycleAndFootprintEstimator::GetReadBehaviors((uint64_t **)v24, (char **)__p);
            v5 = *(uint64_t **)(*((_QWORD *)__p[0] + v20) + 8);
            __p[1] = __p[0];
            operator delete(__p[0]);
            v21 = 1;
            v18 = v25;
            if (v25)
              goto LABEL_19;
            goto LABEL_20;
          }
          v19 = v25;
          v18 = v26;
        }
        if (++v20 >= (unint64_t)(v18 - v19))
        {
          v21 = 0;
          v18 = v19;
          if (v19)
            goto LABEL_19;
          goto LABEL_20;
        }
      }
    }
    v21 = 0;
    if (v26)
    {
LABEL_19:
      v26 = v18;
      operator delete(v18);
    }
LABEL_20:
    if (v21)
      return v5;
    if (++v15 == v16)
      return 0;
  }
}

void sub_22D9BCD94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ORToolsCpAllocator::AddResidentAllocationConstraint(uint64_t *a1, unint64_t a2, uint64_t *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  operations_research::sat::CpModelBuilder *v10;
  uint64_t *ResidentBufferSize;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t **v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t **v22;
  unint64_t ***v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  operations_research::sat::CpModelBuilder *v28;
  uint64_t v29;
  std::string *v30;
  __int128 v31;
  int v32;
  int v33;
  int v34;
  std::string v35;
  std::string __p;
  std::string v37;
  __int128 v38;
  unint64_t v39;

  v39 = a2;
  v38 = 0uLL;
  v5 = a1 + 1;
  CpAllocGraph::GetTensorLiverange(*a1, a2, &v38);
  v6 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::find<unsigned long long>(v5, &v39);
  if (!v6 || *((_DWORD *)v6 + 6) != 1)
  {
    v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
    v7 = (uint64_t *)std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(a1 + 21), &v39, (uint64_t)&std::piecewise_construct, &v37)[3];
    v8 = *v7;
    v9 = v7[1];
    v10 = (operations_research::sat::CpModelBuilder *)a1[26];
    ResidentBufferSize = ORToolsCpAllocator::GetResidentBufferSize((ORToolsCpAllocator *)a1, v39);
    v12 = operations_research::sat::CpModelBuilder::NewConstant(v10, (uint64_t)ResidentBufferSize);
    v14 = v13;
    memset(&v37, 0, sizeof(v37));
    CpGraph::GetTensorName(*a1, v39, &v37);
    v15 = v38;
    v16 = *a1;
    v17 = (_QWORD *)(*a1 + 64);
    v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
    v18 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v17, (unint64_t **)&v35);
    v19 = (_QWORD *)(v16 + 104);
    if (v18)
      v19 = v18 + 3;
    if (v19[1] != *v19)
    {
      v20 = *a1;
      v21 = (_QWORD *)(*a1 + 64);
      v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
      v22 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v21, (unint64_t **)&v35);
      v23 = (unint64_t ***)(v20 + 104);
      if (v22)
        v23 = (unint64_t ***)(v22 + 3);
      v24 = **v23;
      v35.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
      v25 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(a1 + 6), v24, (uint64_t)&std::piecewise_construct, &v35)[3];
      v27 = *(_QWORD *)(v25 + 192);
      v26 = *(_QWORD *)(v25 + 200);
      v35.__r_.__value_.__r.__words[0] = 0;
      CpAllocGraph::GetLayerSchedule((CpAllocGraph *)*a1, *v24, (uint64_t *)&v35);
      if (v26 != v27)
        v15 = v35.__r_.__value_.__r.__words[0] + 1;
    }
    v28 = (operations_research::sat::CpModelBuilder *)a1[26];
    v29 = *((_QWORD *)&v38 + 1);
    std::operator+<char>();
    v30 = std::string::append(&v35, ":resident_demand_pressure_interval", 0x22uLL);
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    v32 = ORToolsCpBasedAllocatorUtil::CreateOptionalClosedInterval(v28, v15, v29, v8, v9, &__p);
    v34 = v33;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    operations_research::sat::CumulativeConstraint::AddDemand(a3, v32, v34, v12, v14);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
  }
}

void sub_22D9BCFFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ORToolsCpAllocator::AddL2DepHWConstraint(ORToolsCpAllocator *this, unint64_t *a2, unint64_t *a3, uint64_t a4, unint64_t a5)
{
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  operations_research::sat::CpModelBuilder *v11;
  std::string *v12;
  __int128 v13;
  _QWORD *v14;
  operations_research::sat::CpModelBuilder *v15;
  _BYTE *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t **v19;
  _QWORD ***v20;
  _QWORD **v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t **v24;
  uint64_t **v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  _OWORD *v31;
  _DWORD *size;
  std::string::size_type v33;
  std::string::size_type v34;
  uint64_t v35;
  int v36;
  _OWORD *v37;
  std::string::size_type v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  std::string::size_type v44;
  std::string::size_type v45;
  _DWORD *v46;
  std::string::size_type v47;
  uint64_t v48;
  int v49;
  void *v50;
  operations_research::sat::CpModelBuilder *v51;
  std::string *v52;
  __int128 v53;
  std::string v54;
  operations_research::sat::CpModelBuilder *v55;
  uint64_t v56;
  std::string __str;
  std::string __p;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  _BYTE *v64;
  void *v65;
  void *v66;
  std::string v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t *v70;

  v69 = a3;
  v70 = a2;
  v68 = a5;
  v8 = (char *)this + 48;
  v63 = &v70;
  v9 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this + 48, (unint64_t *)&v70, (uint64_t)&std::piecewise_construct, (_QWORD **)&v63);
  v63 = &v69;
  v10 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v8, (unint64_t *)&v69, (uint64_t)&std::piecewise_construct, (_QWORD **)&v63);
  ORToolsCpAllocator::AddBackToBackChainL2DepConstraint(this, v70);
  ORToolsCpAllocator::AddBackToBackChainL2DepConstraint(this, v69);
  memset(&v67, 0, sizeof(v67));
  CpGraph::GetTensorName(*(_QWORD *)this, a5, &v67);
  v11 = (operations_research::sat::CpModelBuilder *)*((_QWORD *)this + 26);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v63, *(_QWORD *)(v9[3] + 160), *(_QWORD *)(v9[3] + 168));
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v59, *(_QWORD *)(v10[3] + 176), *(_QWORD *)(v10[3] + 184));
  v54.__r_.__value_.__r.__words[0] = (std::string::size_type)operations_research::sat::CpModelBuilder::AddEquality(v11, (const operations_research::sat::LinearExpr *)&v63, (const operations_research::sat::LinearExpr *)&v59);
  std::operator+<char>();
  v12 = std::string::append(&__str, ":l2_dep_equality", 0x10uLL);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  operations_research::sat::Constraint::WithName((uint64_t *)&v54, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v61)
  {
    v62 = v61;
    operator delete(v61);
  }
  if (v59)
  {
    v60 = v59;
    operator delete(v59);
  }
  if (v65)
  {
    v66 = v65;
    operator delete(v65);
  }
  if (v63)
  {
    v64 = v63;
    operator delete(v63);
  }
  v63 = &v68;
  v14 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this + 168, &v68, (uint64_t)&std::piecewise_construct, (_QWORD **)&v63);
  v15 = (operations_research::sat::CpModelBuilder *)*((_QWORD *)this + 26);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v63, *(_QWORD *)(v9[3] + 160), *(_QWORD *)(v9[3] + 168));
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v59, *(_QWORD *)v14[3], *(_QWORD *)(v14[3] + 8));
  operations_research::sat::CpModelBuilder::AddLessOrEqual(v15, (const operations_research::sat::LinearExpr *)&v63, (const operations_research::sat::LinearExpr *)&v59);
  if (v61)
  {
    v62 = v61;
    operator delete(v61);
  }
  if (v59)
  {
    v60 = v59;
    operator delete(v59);
  }
  if (v65)
  {
    v66 = v65;
    operator delete(v65);
  }
  if (v63)
  {
    v64 = v63;
    operator delete(v63);
  }
  v56 = 0;
  CpAllocGraph::GetLayerBehavior(*(_QWORD *)this, (unint64_t)v69, &v56);
  if (!**(_BYTE **)(v56 + 40))
  {
    CpGraph::GetInputTensors(*(CpGraph **)this, v69, (uint64_t)&v63);
    v16 = v63;
    if (v64 - (_BYTE *)v63 == 16)
    {
      v17 = *(_QWORD *)this;
      v18 = (_QWORD *)(*(_QWORD *)this + 64);
      v59 = &v69;
      v19 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v18, (unint64_t **)&v59);
      v20 = (_QWORD ***)(v17 + 104);
      if (v19)
        v20 = (_QWORD ***)(v19 + 3);
      v21 = *v20;
      v22 = *(_QWORD *)this;
      v23 = (_QWORD *)(*(_QWORD *)this + 64);
      v59 = &v69;
      v24 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v23, (unint64_t **)&v59);
      v25 = (uint64_t **)(v22 + 104);
      if (v24)
        v25 = v24 + 3;
      v26 = **v21 != *(_QWORD *)(*v25)[1];
      v16 = v63;
      if (!v63)
        goto LABEL_31;
    }
    else
    {
      v26 = 0;
      if (!v63)
        goto LABEL_31;
    }
    v64 = v16;
    operator delete(v16);
LABEL_31:
    if (v26)
    {
      memset(&__p, 0, sizeof(__p));
      v27 = *(_QWORD *)(*(_QWORD *)(v10[3] + 104) + 8 * (a4 == 0));
      v29 = std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)&__p.__r_.__value_.__r.__words[2], 1uLL);
      v30 = &v29[v28];
      *v29 = *(_OWORD *)(v27 + 224);
      v31 = v29 + 1;
      size = (_DWORD *)__p.__r_.__value_.__l.__size_;
      v33 = __p.__r_.__value_.__r.__words[0];
      v34 = (std::string::size_type)v29;
      if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
      {
        do
        {
          v35 = *((_QWORD *)size - 2);
          size -= 4;
          v36 = size[2];
          *(_QWORD *)(v34 - 16) = v35;
          v34 -= 16;
          *(_DWORD *)(v34 + 8) = v36;
        }
        while (size != (_DWORD *)v33);
        size = (_DWORD *)__p.__r_.__value_.__r.__words[0];
      }
      __p.__r_.__value_.__r.__words[0] = v34;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v29 + 1);
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v29[v28];
      if (size)
      {
        operator delete(size);
        v30 = (_OWORD *)__p.__r_.__value_.__r.__words[2];
      }
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v29 + 1);
      v37 = (_OWORD *)(**(_QWORD **)(v9[3] + 104) + 224);
      if (v31 >= v30)
      {
        v39 = (uint64_t)((uint64_t)v31 - __p.__r_.__value_.__r.__words[0]) >> 4;
        if ((unint64_t)(v39 + 1) >> 60)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v40 = (uint64_t)v30 - __p.__r_.__value_.__r.__words[0];
        v41 = v40 >> 3;
        if (v40 >> 3 <= (unint64_t)(v39 + 1))
          v41 = v39 + 1;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
          v42 = 0xFFFFFFFFFFFFFFFLL;
        else
          v42 = v41;
        if (v42)
          v43 = std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v42);
        else
          v43 = 0;
        v44 = (std::string::size_type)v43 + 16 * v39;
        v45 = (std::string::size_type)v43 + 16 * v42;
        *(_OWORD *)v44 = *v37;
        v38 = v44 + 16;
        v46 = (_DWORD *)__p.__r_.__value_.__l.__size_;
        v47 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
        {
          do
          {
            v48 = *((_QWORD *)v46 - 2);
            v46 -= 4;
            v49 = v46[2];
            *(_QWORD *)(v44 - 16) = v48;
            v44 -= 16;
            *(_DWORD *)(v44 + 8) = v49;
          }
          while (v46 != (_DWORD *)v47);
          v46 = (_DWORD *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__r.__words[0] = v44;
        __p.__r_.__value_.__l.__size_ = v38;
        __p.__r_.__value_.__r.__words[2] = v45;
        if (v46)
          operator delete(v46);
      }
      else
      {
        *v31 = *v37;
        v38 = (std::string::size_type)(v29 + 2);
      }
      __p.__r_.__value_.__l.__size_ = v38;
      v50 = (void *)__p.__r_.__value_.__r.__words[0];
      if (v38 - __p.__r_.__value_.__r.__words[0] >= 0x11)
      {
        v51 = (operations_research::sat::CpModelBuilder *)*((_QWORD *)this + 26);
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v63, *(_QWORD *)(v9[3] + 160), *(_QWORD *)(v9[3] + 168));
        operations_research::sat::LinearExpr::BooleanSum((uint64_t)__p.__r_.__value_.__l.__data_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 4, (uint64_t)&v59);
        v55 = operations_research::sat::CpModelBuilder::AddLessOrEqual(v51, (const operations_research::sat::LinearExpr *)&v63, (const operations_research::sat::LinearExpr *)&v59);
        std::operator+<char>();
        v52 = std::string::append(&v54, ":l2_dep_dual_input_conx", 0x17uLL);
        v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v53;
        v52->__r_.__value_.__l.__size_ = 0;
        v52->__r_.__value_.__r.__words[2] = 0;
        v52->__r_.__value_.__r.__words[0] = 0;
        operations_research::sat::Constraint::WithName((uint64_t *)&v55, &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v54.__r_.__value_.__l.__data_);
        if (v61)
        {
          v62 = v61;
          operator delete(v61);
        }
        if (v59)
        {
          v60 = v59;
          operator delete(v59);
        }
        if (v65)
        {
          v66 = v65;
          operator delete(v65);
        }
        if (v63)
        {
          v64 = v63;
          operator delete(v63);
        }
        v50 = (void *)__p.__r_.__value_.__r.__words[0];
      }
      if (v50)
      {
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v50;
        operator delete(v50);
      }
    }
  }
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
}

void sub_22D9BD5F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  uint64_t v40;

  if (a23 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a32);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a39);
  if (a25)
    operator delete(a25);
  if (*(char *)(v40 - 89) < 0)
    operator delete(*(void **)(v40 - 112));
  _Unwind_Resume(a1);
}

void ORToolsCpAllocator::AddBackToBackChainL2DepConstraint(ORToolsCpAllocator *this, unint64_t *a2)
{
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *i;
  unint64_t v8;
  _OWORD *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  unint64_t v24;
  _OWORD *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  int v38;
  _QWORD *v39;
  _QWORD **v40;
  BOOL v41;
  _QWORD *OutputTensor;
  uint64_t v43;
  _QWORD *j;
  unint64_t v45;
  _OWORD *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  int v59;
  _QWORD *v60;
  unint64_t v61;
  _OWORD *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  int v75;
  operations_research::sat::CpModelBuilder *v76;
  operations_research::sat::CpModelBuilder *v77;
  uint64_t v78;
  std::string *v79;
  __int128 v80;
  _QWORD *v81;
  std::string v82;
  std::string __p;
  void *v84[3];
  void *v85;
  void *v86;
  void *v87[3];
  void *v88;
  void *v89;
  operations_research::sat::CpModelBuilder *v90;
  std::string v91;
  _QWORD *v92;
  _QWORD **v93;
  _QWORD *v94[2];
  unint64_t *v95;
  unint64_t *v96;
  char *v97;
  char *v98;
  char *v99;
  unint64_t *v100;

  v100 = a2;
  v81 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::find<unsigned long long>((_QWORD *)this + 6, (unint64_t *)&v100);
  v97 = 0;
  v98 = 0;
  v99 = 0;
  CpGraph::GetInputTensors(*(CpGraph **)this, v100, (uint64_t)&v95);
  std::set<unsigned long>::set[abi:ne180100]<std::__wrap_iter<unsigned long long *>>((uint64_t)&v93, v95, v96);
  v3 = v93;
  if (v93 == v94)
    goto LABEL_56;
  do
  {
    v4 = (void *)v3[4];
    v84[0] = v4;
    v87[0] = v84;
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this + 168, (unint64_t *)v84, (uint64_t)&std::piecewise_construct, (_QWORD **)v87);
    v6 = *(_QWORD *)this;
    for (i = *(_QWORD **)(*(_QWORD *)this + 304); i; i = (_QWORD *)*i)
    {
      v8 = i[4];
      if (v8 <= (unint64_t)v4)
      {
        if (v8 >= (unint64_t)v4)
        {
          v9 = (_OWORD *)(v5[3] + 32);
          v10 = v98;
          if (v98 >= v99)
          {
            v12 = (v98 - v97) >> 4;
            v13 = v12 + 1;
            if ((unint64_t)(v12 + 1) >> 60)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v14 = v99 - v97;
            if ((v99 - v97) >> 3 > v13)
              v13 = v14 >> 3;
            if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
              v15 = 0xFFFFFFFFFFFFFFFLL;
            else
              v15 = v13;
            if (v15)
              v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)&v99, v15);
            else
              v16 = 0;
            v17 = &v16[16 * v12];
            *(_OWORD *)v17 = *v9;
            v19 = v97;
            v18 = v98;
            v20 = v17;
            if (v98 != v97)
            {
              do
              {
                v21 = *((_QWORD *)v18 - 2);
                v18 -= 16;
                v22 = *((_DWORD *)v18 + 2);
                *((_QWORD *)v20 - 2) = v21;
                v20 -= 16;
                *((_DWORD *)v20 + 2) = v22;
              }
              while (v18 != v19);
              v18 = v97;
            }
            v11 = v17 + 16;
            v97 = v20;
            v98 = v17 + 16;
            v99 = &v16[16 * v15];
            if (v18)
              operator delete(v18);
          }
          else
          {
            *(_OWORD *)v98 = *v9;
            v11 = v10 + 16;
          }
          v98 = v11;
          v6 = *(_QWORD *)this;
          break;
        }
        ++i;
      }
    }
    v23 = *(_QWORD **)(v6 + 328);
    if (!v23)
      goto LABEL_50;
    while (1)
    {
      v24 = v23[4];
      if (v24 <= (unint64_t)v4)
        break;
LABEL_29:
      v23 = (_QWORD *)*v23;
      if (!v23)
        goto LABEL_50;
    }
    if (v24 < (unint64_t)v4)
    {
      ++v23;
      goto LABEL_29;
    }
    v87[0] = (void *)-1;
    v84[0] = (void *)-1;
    if (ORToolsCpAllocator::FindL2DepPair((CpAllocGraph **)this, (uint64_t)v4, (unint64_t *)v87, (unint64_t *)v84)&& v100 == v84[0])
    {
      v25 = (_OWORD *)(v81[3] + 176);
      v26 = v98;
      if (v98 >= v99)
      {
        v28 = (v98 - v97) >> 4;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 60)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v30 = v99 - v97;
        if ((v99 - v97) >> 3 > v29)
          v29 = v30 >> 3;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
          v31 = 0xFFFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        if (v31)
          v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)&v99, v31);
        else
          v32 = 0;
        v33 = &v32[16 * v28];
        *(_OWORD *)v33 = *v25;
        v35 = v97;
        v34 = v98;
        v36 = v33;
        if (v98 != v97)
        {
          do
          {
            v37 = *((_QWORD *)v34 - 2);
            v34 -= 16;
            v38 = *((_DWORD *)v34 + 2);
            *((_QWORD *)v36 - 2) = v37;
            v36 -= 16;
            *((_DWORD *)v36 + 2) = v38;
          }
          while (v34 != v35);
          v34 = v97;
        }
        v27 = v33 + 16;
        v97 = v36;
        v98 = v33 + 16;
        v99 = &v32[16 * v31];
        if (v34)
          operator delete(v34);
      }
      else
      {
        *(_OWORD *)v98 = *v25;
        v27 = v26 + 16;
      }
      v98 = v27;
    }
LABEL_50:
    v39 = (_QWORD *)v3[1];
    if (v39)
    {
      do
      {
        v40 = (_QWORD **)v39;
        v39 = (_QWORD *)*v39;
      }
      while (v39);
    }
    else
    {
      do
      {
        v40 = (_QWORD **)v3[2];
        v41 = *v40 == v3;
        v3 = v40;
      }
      while (!v41);
    }
    v3 = v40;
  }
  while (v40 != v94);
LABEL_56:
  v92 = 0;
  OutputTensor = CpGraph::GetOutputTensor(*(CpGraph **)this, v100);
  v92 = OutputTensor;
  v43 = *(_QWORD *)this;
  for (j = *(_QWORD **)(*(_QWORD *)this + 304); j; j = (_QWORD *)*j)
  {
    v45 = j[4];
    if (v45 <= (unint64_t)OutputTensor)
    {
      if (v45 >= (unint64_t)OutputTensor)
      {
        v87[0] = &v92;
        v46 = (_OWORD *)(std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this + 168, (unint64_t *)&v92, (uint64_t)&std::piecewise_construct, (_QWORD **)v87)[3]+ 32);
        v47 = v98;
        if (v98 >= v99)
        {
          v49 = (v98 - v97) >> 4;
          v50 = v49 + 1;
          if ((unint64_t)(v49 + 1) >> 60)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v51 = v99 - v97;
          if ((v99 - v97) >> 3 > v50)
            v50 = v51 >> 3;
          if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF0)
            v52 = 0xFFFFFFFFFFFFFFFLL;
          else
            v52 = v50;
          if (v52)
            v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)&v99, v52);
          else
            v53 = 0;
          v54 = &v53[16 * v49];
          v55 = &v53[16 * v52];
          *(_OWORD *)v54 = *v46;
          v48 = v54 + 16;
          v57 = v97;
          v56 = v98;
          if (v98 != v97)
          {
            do
            {
              v58 = *((_QWORD *)v56 - 2);
              v56 -= 16;
              v59 = *((_DWORD *)v56 + 2);
              *((_QWORD *)v54 - 2) = v58;
              v54 -= 16;
              *((_DWORD *)v54 + 2) = v59;
            }
            while (v56 != v57);
            v56 = v97;
          }
          v97 = v54;
          v98 = v48;
          v99 = v55;
          if (v56)
            operator delete(v56);
        }
        else
        {
          *(_OWORD *)v98 = *v46;
          v48 = v47 + 16;
        }
        v98 = v48;
        v43 = *(_QWORD *)this;
        OutputTensor = v92;
        break;
      }
      ++j;
    }
  }
  v60 = *(_QWORD **)(v43 + 328);
  if (!v60)
    goto LABEL_102;
  while (2)
  {
    v61 = v60[4];
    if (v61 > (unint64_t)OutputTensor)
    {
LABEL_83:
      v60 = (_QWORD *)*v60;
      if (!v60)
        goto LABEL_102;
      continue;
    }
    break;
  }
  if (v61 < (unint64_t)OutputTensor)
  {
    ++v60;
    goto LABEL_83;
  }
  v62 = (_OWORD *)(v81[3] + 160);
  v63 = v98;
  if (v98 >= v99)
  {
    v65 = (v98 - v97) >> 4;
    v66 = v65 + 1;
    if ((unint64_t)(v65 + 1) >> 60)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v67 = v99 - v97;
    if ((v99 - v97) >> 3 > v66)
      v66 = v67 >> 3;
    if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF0)
      v68 = 0xFFFFFFFFFFFFFFFLL;
    else
      v68 = v66;
    if (v68)
      v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)&v99, v68);
    else
      v69 = 0;
    v70 = &v69[16 * v65];
    v71 = &v69[16 * v68];
    *(_OWORD *)v70 = *v62;
    v64 = v70 + 16;
    v73 = v97;
    v72 = v98;
    if (v98 != v97)
    {
      do
      {
        v74 = *((_QWORD *)v72 - 2);
        v72 -= 16;
        v75 = *((_DWORD *)v72 + 2);
        *((_QWORD *)v70 - 2) = v74;
        v70 -= 16;
        *((_DWORD *)v70 + 2) = v75;
      }
      while (v72 != v73);
      v72 = v97;
    }
    v97 = v70;
    v98 = v64;
    v99 = v71;
    if (v72)
      operator delete(v72);
  }
  else
  {
    *(_OWORD *)v98 = *v62;
    v64 = v63 + 16;
  }
  v98 = v64;
LABEL_102:
  if ((unint64_t)(v98 - v97) >= 0x11)
  {
    memset(&v91, 0, sizeof(v91));
    CpGraph::GetTensorName(*(_QWORD *)this, (unint64_t)v100, &v91);
    v76 = (operations_research::sat::CpModelBuilder *)*((_QWORD *)this + 26);
    operations_research::sat::LinearExpr::BooleanSum((uint64_t)v97, (v98 - v97) >> 4, (uint64_t)v87);
    v77 = operations_research::sat::CpModelBuilder::NewConstant(*((operations_research::sat::CpModelBuilder **)this + 26), 1);
    operations_research::sat::LinearExpr::LinearExpr((uint64_t)v84, (uint64_t)v77, v78);
    v90 = operations_research::sat::CpModelBuilder::AddLessOrEqual(v76, (const operations_research::sat::LinearExpr *)v87, (const operations_research::sat::LinearExpr *)v84);
    std::operator+<char>();
    v79 = std::string::append(&v82, ":mutex_chain", 0xCuLL);
    v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v80;
    v79->__r_.__value_.__l.__size_ = 0;
    v79->__r_.__value_.__r.__words[2] = 0;
    v79->__r_.__value_.__r.__words[0] = 0;
    operations_research::sat::Constraint::WithName((uint64_t *)&v90, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v82.__r_.__value_.__l.__data_);
    if (v85)
    {
      v86 = v85;
      operator delete(v85);
    }
    if (v84[0])
    {
      v84[1] = v84[0];
      operator delete(v84[0]);
    }
    if (v88)
    {
      v89 = v88;
      operator delete(v88);
    }
    if (v87[0])
    {
      v87[1] = v87[0];
      operator delete(v87[0]);
    }
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v91.__r_.__value_.__l.__data_);
  }
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v93, v94[0]);
  if (v95)
  {
    v96 = v95;
    operator delete(v95);
  }
  if (v97)
  {
    v98 = v97;
    operator delete(v97);
  }
}

void sub_22D9BDDDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;
  void *v47;
  void *v48;

  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v45 - 168, *(_QWORD **)(v45 - 160));
  v47 = *(void **)(v45 - 144);
  if (v47)
  {
    *(_QWORD *)(v45 - 136) = v47;
    operator delete(v47);
  }
  v48 = *(void **)(v45 - 120);
  if (v48)
  {
    *(_QWORD *)(v45 - 112) = v48;
    operator delete(v48);
  }
  _Unwind_Resume(a1);
}

void ORToolsCpAllocator::AddChainHWConstraint(operations_research::sat::CpModelBuilder **this, unint64_t *a2, unint64_t *a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v9;
  _QWORD *v10;
  int64_t v11;
  _BOOL8 v12;
  operations_research::sat::CpModelBuilder *v13;
  _QWORD *v14;
  uint64_t **v15;
  _QWORD ***v16;
  _QWORD **v17;
  operations_research::sat::CpModelBuilder *v18;
  _QWORD *v19;
  uint64_t **v20;
  uint64_t **v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  char *v25;
  char *v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _OWORD *v32;
  _OWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  _DWORD *v45;
  operations_research::sat::CpModelBuilder *v46;
  std::string *v47;
  __int128 v48;
  std::string v49;
  std::string __p;
  void *v51[3];
  void *v52;
  void *v53;
  void *v54;
  _BYTE *v55;
  void *v56;
  void *v57;
  operations_research::sat::CpModelBuilder *v58;
  std::string v59;
  _DWORD *v60;
  _DWORD *v61;
  char *v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t *v65;

  v64 = a3;
  v65 = a2;
  ORToolsCpAllocator::AddBackToBackChainL2DepConstraint((ORToolsCpAllocator *)this, a2);
  ORToolsCpAllocator::AddBackToBackChainL2DepConstraint((ORToolsCpAllocator *)this, a3);
  v54 = &v65;
  v9 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(this + 6), (unint64_t *)&v65, (uint64_t)&std::piecewise_construct, (_QWORD **)&v54);
  v54 = &v64;
  v10 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(this + 6), (unint64_t *)&v64, (uint64_t)&std::piecewise_construct, (_QWORD **)&v54);
  v63 = 0;
  CpAllocGraph::GetLayerBehavior((uint64_t)*this, (unint64_t)v64, &v63);
  if (!**(_BYTE **)(v63 + 40))
  {
    CpGraph::GetInputTensors(*this, v64, (uint64_t)&v54);
    v11 = v55 - (_BYTE *)v54;
    if (v54)
    {
      v55 = v54;
      operator delete(v54);
    }
    v12 = a4 == 0;
    if (v11 == 16)
    {
      v13 = *this;
      v14 = (_QWORD *)((char *)*this + 64);
      v54 = &v64;
      v15 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v14, (unint64_t **)&v54);
      v16 = (_QWORD ***)((char *)v13 + 104);
      if (v15)
        v16 = (_QWORD ***)(v15 + 3);
      v17 = *v16;
      v18 = *this;
      v19 = (_QWORD *)((char *)*this + 64);
      v54 = &v64;
      v20 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v19, (unint64_t **)&v54);
      v21 = (uint64_t **)((char *)v18 + 104);
      if (v20)
        v21 = v20 + 3;
      if (**v17 != *(_QWORD *)(*v21)[1])
      {
        v60 = 0;
        v61 = 0;
        v62 = 0;
        v22 = *(_QWORD *)(*(_QWORD *)(v10[3] + 104) + 8 * v12);
        v24 = std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)&v62, 1uLL);
        v25 = (char *)&v24[v23];
        *v24 = *(_OWORD *)(v22 + 224);
        v26 = (char *)(v24 + 1);
        v28 = (uint64_t)v60;
        v27 = v61;
        v29 = (uint64_t)v24;
        if (v61 != v60)
        {
          do
          {
            v30 = *((_QWORD *)v27 - 2);
            v27 -= 4;
            v31 = v27[2];
            *(_QWORD *)(v29 - 16) = v30;
            v29 -= 16;
            *(_DWORD *)(v29 + 8) = v31;
          }
          while (v27 != (_DWORD *)v28);
          v27 = v60;
        }
        v60 = (_DWORD *)v29;
        v61 = v24 + 1;
        v62 = (char *)&v24[v23];
        if (v27)
        {
          operator delete(v27);
          v25 = v62;
        }
        v61 = v24 + 1;
        v32 = (_OWORD *)(**(_QWORD **)(v9[3] + 104) + 224);
        if (v26 >= v25)
        {
          v34 = (v26 - (char *)v60) >> 4;
          if ((unint64_t)(v34 + 1) >> 60)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v35 = v25 - (char *)v60;
          v36 = v35 >> 3;
          if (v35 >> 3 <= (unint64_t)(v34 + 1))
            v36 = v34 + 1;
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
            v37 = 0xFFFFFFFFFFFFFFFLL;
          else
            v37 = v36;
          if (v37)
            v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)&v62, v37);
          else
            v38 = 0;
          v39 = (uint64_t)&v38[16 * v34];
          v40 = &v38[16 * v37];
          *(_OWORD *)v39 = *v32;
          v33 = (_OWORD *)(v39 + 16);
          v42 = (uint64_t)v60;
          v41 = v61;
          if (v61 != v60)
          {
            do
            {
              v43 = *((_QWORD *)v41 - 2);
              v41 -= 4;
              v44 = v41[2];
              *(_QWORD *)(v39 - 16) = v43;
              v39 -= 16;
              *(_DWORD *)(v39 + 8) = v44;
            }
            while (v41 != (_DWORD *)v42);
            v41 = v60;
          }
          v60 = (_DWORD *)v39;
          v61 = v33;
          v62 = v40;
          if (v41)
            operator delete(v41);
        }
        else
        {
          *(_OWORD *)v26 = *v32;
          v33 = v24 + 2;
        }
        v61 = v33;
        v45 = v60;
        if ((unint64_t)((char *)v33 - (char *)v60) >= 0x11)
        {
          memset(&v59, 0, sizeof(v59));
          CpGraph::GetTensorName((uint64_t)*this, a5, &v59);
          v46 = this[26];
          operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v54, *(_QWORD *)(*(_QWORD *)(v9[3] + 136) + 256), *(_QWORD *)(*(_QWORD *)(v9[3] + 136) + 264));
          operations_research::sat::LinearExpr::BooleanSum((uint64_t)v60, ((char *)v61 - (char *)v60) >> 4, (uint64_t)v51);
          v58 = operations_research::sat::CpModelBuilder::AddLessOrEqual(v46, (const operations_research::sat::LinearExpr *)&v54, (const operations_research::sat::LinearExpr *)v51);
          std::operator+<char>();
          v47 = std::string::append(&v49, ":chain_dual_input_conx", 0x16uLL);
          v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v48;
          v47->__r_.__value_.__l.__size_ = 0;
          v47->__r_.__value_.__r.__words[2] = 0;
          v47->__r_.__value_.__r.__words[0] = 0;
          operations_research::sat::Constraint::WithName((uint64_t *)&v58, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v49.__r_.__value_.__l.__data_);
          if (v52)
          {
            v53 = v52;
            operator delete(v52);
          }
          if (v51[0])
          {
            v51[1] = v51[0];
            operator delete(v51[0]);
          }
          if (v56)
          {
            v57 = v56;
            operator delete(v56);
          }
          if (v54)
          {
            v55 = v54;
            operator delete(v54);
          }
          if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v59.__r_.__value_.__l.__data_);
          v45 = v60;
        }
        if (v45)
        {
          v61 = v45;
          operator delete(v45);
        }
      }
    }
  }
}

void sub_22D9BE2AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  void *v32;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a23);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a30);
  if (*(char *)(v30 - 129) < 0)
    operator delete(*(void **)(v30 - 152));
  v32 = *(void **)(v30 - 128);
  if (v32)
  {
    *(_QWORD *)(v30 - 120) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(a1);
}

BOOL ORToolsCpAllocator::FindL2DepPair(CpAllocGraph **this, uint64_t a2, unint64_t *a3, unint64_t *a4)
{
  CpAllocGraph *v7;
  _QWORD *v8;
  uint64_t **v9;
  uint64_t **v10;
  unint64_t **v11;
  unint64_t **v12;
  uint64_t v13;
  unint64_t *v14;
  _BOOL4 LayerSchedule;
  uint64_t v16;
  CpAllocGraph *v18;
  _QWORD *v19;
  uint64_t **v20;
  uint64_t **v21;
  unint64_t **v22;
  unint64_t **v23;
  uint64_t v24;
  unint64_t *v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v31;
  uint64_t v32;

  *a3 = 0x7FFFFFFFLL;
  v7 = *this;
  v8 = (_QWORD *)((char *)*this + 64);
  v31 = a2;
  v32 = (uint64_t)&v31;
  v9 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v8, (unint64_t **)&v32);
  v10 = (uint64_t **)((char *)v7 + 104);
  if (v9)
    v10 = v9 + 3;
  v11 = (unint64_t **)*v10;
  v12 = (unint64_t **)v10[1];
  if (*v10 != (uint64_t *)v12)
  {
    v13 = -1;
    do
    {
      v14 = *v11;
      v32 = 0;
      LayerSchedule = CpAllocGraph::GetLayerSchedule(*this, *v14, &v32);
      v16 = v32;
      if (LayerSchedule && v32 > v13)
      {
        *a3 = *v14;
        v13 = v16;
      }
      ++v11;
    }
    while (v11 != v12);
  }
  *a4 = 0x7FFFFFFFLL;
  v18 = *this;
  v19 = (_QWORD *)((char *)*this + 24);
  v32 = (uint64_t)&v31;
  v20 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v19, (unint64_t **)&v32);
  v21 = (uint64_t **)((char *)v18 + 104);
  if (v20)
    v21 = v20 + 3;
  v22 = (unint64_t **)*v21;
  v23 = (unint64_t **)v21[1];
  if (*v21 != (uint64_t *)v23)
  {
    v24 = 0x7FFFFFFFLL;
    do
    {
      v25 = *v22;
      v32 = 0;
      v26 = CpAllocGraph::GetLayerSchedule(*this, *v25, &v32);
      v27 = v32;
      if (v26 && v32 < v24)
      {
        *a4 = *v25;
        v24 = v27;
      }
      ++v22;
    }
    while (v22 != v23);
  }
  return *a3 != 0x7FFFFFFF && *a4 != 0x7FFFFFFF;
}

void ORToolsCpAllocator::SetEarlyAllocationDecision(ORToolsCpAllocator *this)
{
  unint64_t *v2;
  unint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  operations_research::sat::CpModelBuilder *v8;
  operations_research::sat::CpModelBuilder *v9;
  uint64_t v10;
  std::string *v11;
  __int128 v12;
  _QWORD *i;
  unint64_t v14;
  operations_research::sat::CpModelBuilder *v15;
  operations_research::sat::CpModelBuilder *v16;
  uint64_t v17;
  std::string *v18;
  __int128 v19;
  _QWORD *v20;
  unint64_t v21;
  CpGraph **v22;
  _QWORD *v23;
  uint64_t **v24;
  _QWORD *v25;
  CpGraph **v26;
  _QWORD *v27;
  uint64_t **v28;
  _QWORD *v29;
  uint64_t v30;
  CpGraph **v31;
  CpGraph **v32;
  _QWORD *v33;
  uint64_t **v34;
  _QWORD *v35;
  std::string v36;
  std::string __p;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  operations_research::sat::CpModelBuilder *v46;
  std::string v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t *v50;

  CpGraph::GetTensors(*(CpGraph ***)this, &v49);
  v2 = v49;
  v3 = v50;
  if (v49 == v50)
    goto LABEL_60;
  do
  {
    v48 = *v2;
    memset(&v47, 0, sizeof(v47));
    CpGraph::GetTensorName(*(_QWORD *)this, v48, &v47);
    v4 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::find<unsigned long long>((_QWORD *)this + 1, &v48);
    v5 = v4;
    if (v4)
    {
      ORToolsCpAllocator::SetAllocationDecisionForTensor((uint64_t *)this, v48, *((_DWORD *)v4 + 6));
      if (CpAllocUtils::IsL2Dependent(*((_DWORD *)v5 + 6)) && *((_DWORD *)v5 + 6) != 7)
      {
        ORToolsCpAllocator::EnableL2Dependent(this, v48);
        goto LABEL_50;
      }
    }
    else
    {
      v6 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::find<unsigned long long>((_QWORD *)this + 21, &v48);
      if (v6)
      {
        v7 = (uint64_t *)v6[3];
        if ((unint64_t)ORToolsCpAllocator::GetResidentBufferSize(this, v48) >= *((_QWORD *)this + 99))
        {
          v8 = (operations_research::sat::CpModelBuilder *)*((_QWORD *)this + 26);
          operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v42, *v7, v7[1]);
          v9 = operations_research::sat::CpModelBuilder::NewConstant(*((operations_research::sat::CpModelBuilder **)this + 26), 0);
          operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v38, (uint64_t)v9, v10);
          v46 = operations_research::sat::CpModelBuilder::AddEquality(v8, (const operations_research::sat::LinearExpr *)&v42, (const operations_research::sat::LinearExpr *)&v38);
          std::operator+<char>();
          v11 = std::string::append(&v36, ":early_allocation_decision", 0x1AuLL);
          v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
          v11->__r_.__value_.__l.__size_ = 0;
          v11->__r_.__value_.__r.__words[2] = 0;
          v11->__r_.__value_.__r.__words[0] = 0;
          operations_research::sat::Constraint::WithName((uint64_t *)&v46, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v36.__r_.__value_.__l.__data_);
          if (v40)
          {
            v41 = v40;
            operator delete(v40);
          }
          if (v38)
          {
            v39 = v38;
            operator delete(v38);
          }
          if (v44)
          {
            v45 = v44;
            operator delete(v44);
          }
          if (v42)
          {
            v43 = v42;
            operator delete(v42);
          }
        }
        for (i = *(_QWORD **)(*(_QWORD *)this + 304); i; i = (_QWORD *)*i)
        {
          v14 = i[4];
          if (v14 <= v48)
          {
            if (v14 >= v48)
              goto LABEL_37;
            ++i;
          }
        }
        v15 = (operations_research::sat::CpModelBuilder *)*((_QWORD *)this + 26);
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v42, v7[4], v7[5]);
        v16 = operations_research::sat::CpModelBuilder::NewConstant(*((operations_research::sat::CpModelBuilder **)this + 26), 0);
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v38, (uint64_t)v16, v17);
        v46 = operations_research::sat::CpModelBuilder::AddEquality(v15, (const operations_research::sat::LinearExpr *)&v42, (const operations_research::sat::LinearExpr *)&v38);
        std::operator+<char>();
        v18 = std::string::append(&v36, ":early_allocation_decision", 0x1AuLL);
        v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v19;
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        operations_research::sat::Constraint::WithName((uint64_t *)&v46, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v36.__r_.__value_.__l.__data_);
        if (v40)
        {
          v41 = v40;
          operator delete(v40);
        }
        if (v38)
        {
          v39 = v38;
          operator delete(v38);
        }
        if (v44)
        {
          v45 = v44;
          operator delete(v44);
        }
        if (v42)
        {
          v43 = v42;
          operator delete(v42);
        }
      }
    }
LABEL_37:
    v20 = *(_QWORD **)(*(_QWORD *)this + 328);
    if (!v20)
    {
LABEL_42:
      ORToolsCpAllocator::DisableL2Dependent(this, v48);
      goto LABEL_43;
    }
    while (1)
    {
      v21 = v20[4];
      if (v21 <= v48)
        break;
LABEL_41:
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_42;
    }
    if (v21 < v48)
    {
      ++v20;
      goto LABEL_41;
    }
    v38 = (void *)-1;
    __p.__r_.__value_.__r.__words[0] = -1;
    if (!ORToolsCpAllocator::FindL2DepPair((CpAllocGraph **)this, v48, (unint64_t *)&v38, (unint64_t *)&__p))goto LABEL_43;
    v36.__r_.__value_.__r.__words[0] = 0;
    v30 = __p.__r_.__value_.__r.__words[0];
    v36.__r_.__value_.__r.__words[0] = (std::string::size_type)CpGraph::GetOutputTensor(*(CpGraph **)this, (unint64_t *)__p.__r_.__value_.__l.__data_);
    v31 = *(CpGraph ***)this;
    v42 = (void *)v36.__r_.__value_.__r.__words[0];
    if (std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v31 + 43, (unint64_t *)&v42))
    {
      v32 = *(CpGraph ***)this;
      v33 = (_QWORD *)(*(_QWORD *)this + 24);
      v42 = &v36;
      v34 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v33, (unint64_t **)&v42);
      v35 = v32 + 13;
      if (v34)
        v35 = v34 + 3;
      if (v35[1] - *v35 >= 9uLL)
        goto LABEL_42;
    }
    ORToolsCpAllocator::PrepareL2Dependent(this, v48, (uint64_t)v38, v30);
LABEL_43:
    v22 = *(CpGraph ***)this;
    v23 = (_QWORD *)(*(_QWORD *)this + 64);
    v42 = &v48;
    v24 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v23, (unint64_t **)&v42);
    v25 = v22 + 13;
    if (v24)
      v25 = v24 + 3;
    if (v25[1] == *v25)
      goto LABEL_49;
    v26 = *(CpGraph ***)this;
    v27 = (_QWORD *)(*(_QWORD *)this + 24);
    v42 = &v48;
    v28 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v27, (unint64_t **)&v42);
    v29 = v26 + 13;
    if (v28)
      v29 = v28 + 3;
    if (v29[1] == *v29)
LABEL_49:
      ORToolsCpAllocator::DisableL2Dependent(this, v48);
LABEL_50:
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    ++v2;
  }
  while (v2 != v3);
  v2 = v49;
LABEL_60:
  if (v2)
  {
    v50 = v2;
    operator delete(v2);
  }
}

void sub_22D9BE920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  void *v31;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a22);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a29);
  if (*(char *)(v29 - 121) < 0)
    operator delete(*(void **)(v29 - 144));
  v31 = *(void **)(v29 - 112);
  if (v31)
  {
    *(_QWORD *)(v29 - 104) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(a1);
}

void ORToolsCpAllocator::SetAllocationDecisionForTensor(uint64_t *a1, unint64_t a2, int a3)
{
  _QWORD *v5;
  uint64_t *v6;
  operations_research::sat::CpModelBuilder *v7;
  std::string *v8;
  __int128 v9;
  operations_research::sat::CpModelBuilder *v10;
  std::string *v11;
  __int128 v12;
  operations_research::sat::CpModelBuilder *v13;
  std::string *v14;
  __int128 v15;
  _QWORD *v16;
  unint64_t v17;
  operations_research::sat::CpModelBuilder *v18;
  std::string *v19;
  __int128 v20;
  operations_research::sat::CpModelBuilder *v21;
  std::string *v22;
  __int128 v23;
  operations_research::sat::CpModelBuilder *v24;
  std::string *v25;
  __int128 v26;
  operations_research::sat::CpModelBuilder *v27;
  std::string *v28;
  __int128 v29;
  operations_research::sat::CpModelBuilder *v30;
  std::string *v31;
  __int128 v32;
  operations_research::sat::CpModelBuilder *v33;
  std::string *v34;
  __int128 v35;
  operations_research::sat::CpModelBuilder *v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  std::string __p;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  operations_research::sat::CpModelBuilder *v49;
  std::string v50;
  unint64_t v51;

  v51 = a2;
  v5 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::find<unsigned long long>(a1 + 21, &v51);
  if (v5)
  {
    v6 = (uint64_t *)v5[3];
    memset(&v50, 0, sizeof(v50));
    CpGraph::GetTensorName(*a1, v51, &v50);
    switch(a3)
    {
      case 0:
        v13 = (operations_research::sat::CpModelBuilder *)a1[26];
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v45, v6[2], v6[3]);
        operations_research::sat::LinearExpr::LinearExpr((operations_research::sat::LinearExpr *)&v41, 0);
        v49 = operations_research::sat::CpModelBuilder::AddEquality(v13, (const operations_research::sat::LinearExpr *)&v45, (const operations_research::sat::LinearExpr *)&v41);
        std::operator+<char>();
        v14 = std::string::append(&v39, ":early_allocation_decision", 0x1AuLL);
        v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        operations_research::sat::Constraint::WithName((uint64_t *)&v49, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v39.__r_.__value_.__l.__data_);
        if (v43)
        {
          v44 = v43;
          operator delete(v43);
        }
        if (v41)
        {
          v42 = v41;
          operator delete(v41);
        }
        if (v47)
        {
          v48 = v47;
          operator delete(v47);
        }
        if (v45)
        {
          v46 = v45;
          operator delete(v45);
        }
        v16 = *(_QWORD **)(*a1 + 304);
        if (!v16)
          goto LABEL_45;
        break;
      case 1:
        v21 = (operations_research::sat::CpModelBuilder *)a1[26];
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v45, v6[2], v6[3]);
        operations_research::sat::LinearExpr::LinearExpr((operations_research::sat::LinearExpr *)&v41, 1);
        v49 = operations_research::sat::CpModelBuilder::AddEquality(v21, (const operations_research::sat::LinearExpr *)&v45, (const operations_research::sat::LinearExpr *)&v41);
        std::operator+<char>();
        v22 = std::string::append(&v39, ":early_allocation_decision", 0x1AuLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        operations_research::sat::Constraint::WithName((uint64_t *)&v49, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v39.__r_.__value_.__l.__data_);
        if (v43)
        {
          v44 = v43;
          operator delete(v43);
        }
        if (v41)
        {
          v42 = v41;
          operator delete(v41);
        }
        if (v47)
        {
          v48 = v47;
          operator delete(v47);
        }
        if (v45)
        {
          v46 = v45;
          operator delete(v45);
        }
        v24 = (operations_research::sat::CpModelBuilder *)a1[26];
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v45, *v6, v6[1]);
        operations_research::sat::LinearExpr::LinearExpr((operations_research::sat::LinearExpr *)&v41, 0);
        v49 = operations_research::sat::CpModelBuilder::AddEquality(v24, (const operations_research::sat::LinearExpr *)&v45, (const operations_research::sat::LinearExpr *)&v41);
        std::operator+<char>();
        v25 = std::string::append(&v39, ":early_allocation_decision", 0x1AuLL);
        v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        operations_research::sat::Constraint::WithName((uint64_t *)&v49, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v39.__r_.__value_.__l.__data_);
        if (v43)
        {
          v44 = v43;
          operator delete(v43);
        }
        if (v41)
        {
          v42 = v41;
          operator delete(v41);
        }
        if (v47)
        {
          v48 = v47;
          operator delete(v47);
        }
        if (v45)
        {
          v46 = v45;
          operator delete(v45);
        }
        goto LABEL_82;
      case 2:
        v30 = (operations_research::sat::CpModelBuilder *)a1[26];
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v45, v6[2], v6[3]);
        operations_research::sat::LinearExpr::LinearExpr((operations_research::sat::LinearExpr *)&v41, 0);
        v49 = operations_research::sat::CpModelBuilder::AddEquality(v30, (const operations_research::sat::LinearExpr *)&v45, (const operations_research::sat::LinearExpr *)&v41);
        std::operator+<char>();
        v31 = std::string::append(&v39, ":early_allocation_decision", 0x1AuLL);
        v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        operations_research::sat::Constraint::WithName((uint64_t *)&v49, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v39.__r_.__value_.__l.__data_);
        if (v43)
        {
          v44 = v43;
          operator delete(v43);
        }
        if (v41)
        {
          v42 = v41;
          operator delete(v41);
        }
        if (v47)
        {
          v48 = v47;
          operator delete(v47);
        }
        if (v45)
        {
          v46 = v45;
          operator delete(v45);
        }
        v33 = (operations_research::sat::CpModelBuilder *)a1[26];
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v45, *v6, v6[1]);
        operations_research::sat::LinearExpr::LinearExpr((operations_research::sat::LinearExpr *)&v41, 0);
        v49 = operations_research::sat::CpModelBuilder::AddEquality(v33, (const operations_research::sat::LinearExpr *)&v45, (const operations_research::sat::LinearExpr *)&v41);
        std::operator+<char>();
        v34 = std::string::append(&v39, ":early_allocation_decision", 0x1AuLL);
        v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v35;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        operations_research::sat::Constraint::WithName((uint64_t *)&v49, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v39.__r_.__value_.__l.__data_);
        if (v43)
        {
          v44 = v43;
          operator delete(v43);
        }
        if (v41)
        {
          v42 = v41;
          operator delete(v41);
        }
        if (v47)
        {
          v48 = v47;
          operator delete(v47);
        }
        if (v45)
        {
          v46 = v45;
          operator delete(v45);
        }
        v36 = (operations_research::sat::CpModelBuilder *)a1[26];
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v45, v6[4], v6[5]);
        operations_research::sat::LinearExpr::LinearExpr((operations_research::sat::LinearExpr *)&v41, 1);
        v49 = operations_research::sat::CpModelBuilder::AddEquality(v36, (const operations_research::sat::LinearExpr *)&v45, (const operations_research::sat::LinearExpr *)&v41);
        std::operator+<char>();
        v37 = std::string::append(&v39, ":early_allocation_decision", 0x1AuLL);
        v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        operations_research::sat::Constraint::WithName((uint64_t *)&v49, &__p);
        goto LABEL_108;
      case 3:
      case 6:
      case 7:
        v7 = (operations_research::sat::CpModelBuilder *)a1[26];
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v45, v6[2], v6[3]);
        operations_research::sat::LinearExpr::LinearExpr((operations_research::sat::LinearExpr *)&v41, 0);
        v49 = operations_research::sat::CpModelBuilder::AddEquality(v7, (const operations_research::sat::LinearExpr *)&v45, (const operations_research::sat::LinearExpr *)&v41);
        std::operator+<char>();
        v8 = std::string::append(&v39, ":early_allocation_decision", 0x1AuLL);
        v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
        v8->__r_.__value_.__l.__size_ = 0;
        v8->__r_.__value_.__r.__words[2] = 0;
        v8->__r_.__value_.__r.__words[0] = 0;
        operations_research::sat::Constraint::WithName((uint64_t *)&v49, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v39.__r_.__value_.__l.__data_);
        if (v43)
        {
          v44 = v43;
          operator delete(v43);
        }
        if (v41)
        {
          v42 = v41;
          operator delete(v41);
        }
        if (v47)
        {
          v48 = v47;
          operator delete(v47);
        }
        if (v45)
        {
          v46 = v45;
          operator delete(v45);
        }
        v10 = (operations_research::sat::CpModelBuilder *)a1[26];
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v45, *v6, v6[1]);
        operations_research::sat::LinearExpr::LinearExpr((operations_research::sat::LinearExpr *)&v41, 1);
        v49 = operations_research::sat::CpModelBuilder::AddEquality(v10, (const operations_research::sat::LinearExpr *)&v45, (const operations_research::sat::LinearExpr *)&v41);
        std::operator+<char>();
        v11 = std::string::append(&v39, ":early_allocation_decision", 0x1AuLL);
        v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
        v11->__r_.__value_.__l.__size_ = 0;
        v11->__r_.__value_.__r.__words[2] = 0;
        v11->__r_.__value_.__r.__words[0] = 0;
        operations_research::sat::Constraint::WithName((uint64_t *)&v49, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v39.__r_.__value_.__l.__data_);
        if (v43)
        {
          v44 = v43;
          operator delete(v43);
        }
        if (v41)
        {
          v42 = v41;
          operator delete(v41);
        }
        if (v47)
        {
          v48 = v47;
          operator delete(v47);
        }
        if (v45)
        {
          v46 = v45;
          operator delete(v45);
        }
LABEL_82:
        v27 = (operations_research::sat::CpModelBuilder *)a1[26];
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v45, v6[4], v6[5]);
        operations_research::sat::LinearExpr::LinearExpr((operations_research::sat::LinearExpr *)&v41, 0);
        v49 = operations_research::sat::CpModelBuilder::AddEquality(v27, (const operations_research::sat::LinearExpr *)&v45, (const operations_research::sat::LinearExpr *)&v41);
        std::operator+<char>();
        v28 = std::string::append(&v39, ":early_allocation_decision", 0x1AuLL);
        v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        operations_research::sat::Constraint::WithName((uint64_t *)&v49, &__p);
LABEL_108:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v39.__r_.__value_.__l.__data_);
        if (v43)
        {
          v44 = v43;
          operator delete(v43);
        }
        if (v41)
        {
          v42 = v41;
          operator delete(v41);
        }
        if (v47)
        {
          v48 = v47;
          operator delete(v47);
        }
        if (v45)
        {
          v46 = v45;
          operator delete(v45);
        }
        goto LABEL_120;
      default:
        goto LABEL_120;
    }
    while (1)
    {
      v17 = v16[4];
      if (v17 <= v51)
      {
        if (v17 >= v51)
        {
LABEL_120:
          if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v50.__r_.__value_.__l.__data_);
          return;
        }
        ++v16;
      }
      v16 = (_QWORD *)*v16;
      if (!v16)
      {
LABEL_45:
        v18 = (operations_research::sat::CpModelBuilder *)a1[26];
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v45, *v6, v6[1]);
        operations_research::sat::LinearExpr::LinearExpr((operations_research::sat::LinearExpr *)&v41, 1);
        v49 = operations_research::sat::CpModelBuilder::AddEquality(v18, (const operations_research::sat::LinearExpr *)&v45, (const operations_research::sat::LinearExpr *)&v41);
        std::operator+<char>();
        v19 = std::string::append(&v39, ":early_allocation_decision", 0x1AuLL);
        v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        operations_research::sat::Constraint::WithName((uint64_t *)&v49, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v39.__r_.__value_.__l.__data_);
        if (v43)
        {
          v44 = v43;
          operator delete(v43);
        }
        if (v41)
        {
          v42 = v41;
          operator delete(v41);
        }
        if (v47)
        {
          v48 = v47;
          operator delete(v47);
        }
        if (v45)
        {
          v46 = v45;
          operator delete(v45);
        }
        goto LABEL_82;
      }
    }
  }
}

void sub_22D9BF3D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a22);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a29);
  if (*(char *)(v29 - 41) < 0)
    operator delete(*(void **)(v29 - 64));
  _Unwind_Resume(a1);
}

void ORToolsCpAllocator::EnableL2Dependent(ORToolsCpAllocator *this, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t **v5;
  uint64_t **v6;
  unint64_t **v7;
  unint64_t **v8;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  char *v13;
  operations_research::sat::CpModelBuilder *v14;
  operations_research::sat::CpModelBuilder *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t **v19;
  uint64_t **v20;
  unint64_t **v21;
  unint64_t **v22;
  unint64_t v23;
  unint64_t *v24;
  _QWORD *v25;
  unint64_t v26;
  char *v27;
  operations_research::sat::CpModelBuilder *v28;
  operations_research::sat::CpModelBuilder *v29;
  uint64_t v30;
  std::string __p;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  operations_research::sat::CpModelBuilder *v40;
  void *v41[2];
  char v42;
  std::string v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD v46[2];

  v45 = -1;
  v46[0] = a2;
  v44 = -1;
  if (ORToolsCpAllocator::FindL2DepPair((CpAllocGraph **)this, a2, &v45, &v44))
  {
    v3 = *(_QWORD *)this;
    v4 = (_QWORD *)(*(_QWORD *)this + 64);
    v36 = v46;
    v5 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v4, (unint64_t **)&v36);
    v6 = (uint64_t **)(v3 + 104);
    if (v5)
      v6 = v5 + 3;
    v7 = (unint64_t **)*v6;
    v8 = (unint64_t **)v6[1];
    if (*v6 != (uint64_t *)v8)
    {
      v9 = v45;
      do
      {
        v10 = *v7;
        v11 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::find<unsigned long long>((_QWORD *)this + 6, *v7);
        memset(&v43, 0, sizeof(v43));
        CpGraph::GetLayerName(*(_QWORD *)this, *v10, &v43);
        v12 = *v10;
        if (v9 == *v10)
          v13 = ":enable_l2_dep_producer";
        else
          v13 = ":disable_l2_dep_producer";
        std::string::basic_string[abi:ne180100]<0>(v41, v13);
        v14 = (operations_research::sat::CpModelBuilder *)*((_QWORD *)this + 26);
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v36, *(_QWORD *)(v11[3] + 160), *(_QWORD *)(v11[3] + 168));
        v15 = operations_research::sat::CpModelBuilder::NewConstant(*((operations_research::sat::CpModelBuilder **)this + 26), v9 == v12);
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v32, (uint64_t)v15, v16);
        v40 = operations_research::sat::CpModelBuilder::AddEquality(v14, (const operations_research::sat::LinearExpr *)&v36, (const operations_research::sat::LinearExpr *)&v32);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v43.__r_.__value_.__l.__data_, (const void **)v41, (uint64_t)&__p);
        operations_research::sat::Constraint::WithName((uint64_t *)&v40, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (v34)
        {
          v35 = v34;
          operator delete(v34);
        }
        if (v32)
        {
          v33 = v32;
          operator delete(v32);
        }
        if (v38)
        {
          v39 = v38;
          operator delete(v38);
        }
        if (v36)
        {
          v37 = v36;
          operator delete(v36);
        }
        if (v42 < 0)
          operator delete(v41[0]);
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v43.__r_.__value_.__l.__data_);
        ++v7;
      }
      while (v7 != v8);
    }
    v17 = *(_QWORD *)this;
    v18 = (_QWORD *)(*(_QWORD *)this + 24);
    v36 = v46;
    v19 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v18, (unint64_t **)&v36);
    v20 = (uint64_t **)(v17 + 104);
    if (v19)
      v20 = v19 + 3;
    v21 = (unint64_t **)*v20;
    v22 = (unint64_t **)v20[1];
    if (*v20 != (uint64_t *)v22)
    {
      v23 = v44;
      do
      {
        v24 = *v21;
        v25 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::find<unsigned long long>((_QWORD *)this + 6, *v21);
        memset(&v43, 0, sizeof(v43));
        CpGraph::GetLayerName(*(_QWORD *)this, *v24, &v43);
        v26 = *v24;
        if (v23 == *v24)
          v27 = ":enable_l2_dep_consumer";
        else
          v27 = ":disable_l2_dep_consumer";
        std::string::basic_string[abi:ne180100]<0>(v41, v27);
        v28 = (operations_research::sat::CpModelBuilder *)*((_QWORD *)this + 26);
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v36, *(_QWORD *)(v25[3] + 176), *(_QWORD *)(v25[3] + 184));
        v29 = operations_research::sat::CpModelBuilder::NewConstant(*((operations_research::sat::CpModelBuilder **)this + 26), v23 == v26);
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v32, (uint64_t)v29, v30);
        v40 = operations_research::sat::CpModelBuilder::AddEquality(v28, (const operations_research::sat::LinearExpr *)&v36, (const operations_research::sat::LinearExpr *)&v32);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v43.__r_.__value_.__l.__data_, (const void **)v41, (uint64_t)&__p);
        operations_research::sat::Constraint::WithName((uint64_t *)&v40, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (v34)
        {
          v35 = v34;
          operator delete(v34);
        }
        if (v32)
        {
          v33 = v32;
          operator delete(v32);
        }
        if (v38)
        {
          v39 = v38;
          operator delete(v38);
        }
        if (v36)
        {
          v37 = v36;
          operator delete(v36);
        }
        if (v42 < 0)
          operator delete(v41[0]);
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v43.__r_.__value_.__l.__data_);
        ++v21;
      }
      while (v21 != v22);
    }
  }
}

void sub_22D9BF894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a14 < 0)
    operator delete(__p);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a15);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a22);
  if (a35 < 0)
    operator delete(a30);
  if (*(char *)(v35 - 113) < 0)
    operator delete(*(void **)(v35 - 136));
  _Unwind_Resume(a1);
}

void ORToolsCpAllocator::DisableL2Dependent(ORToolsCpAllocator *this, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t **v5;
  uint64_t **v6;
  unint64_t **v7;
  unint64_t **v8;
  unint64_t *v9;
  _QWORD *v10;
  operations_research::sat::CpModelBuilder *v11;
  operations_research::sat::CpModelBuilder *v12;
  uint64_t v13;
  std::string::size_type size;
  std::string *p_p;
  std::string *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t **v19;
  uint64_t **v20;
  unint64_t **v21;
  unint64_t **v22;
  unint64_t *v23;
  _QWORD *v24;
  operations_research::sat::CpModelBuilder *v25;
  operations_research::sat::CpModelBuilder *v26;
  uint64_t v27;
  std::string::size_type v28;
  std::string *v29;
  std::string *v30;
  std::string __p;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  operations_research::sat::CpModelBuilder *v40;
  std::string v41;
  uint64_t v42;

  v42 = a2;
  v3 = *(_QWORD *)this;
  v4 = (_QWORD *)(*(_QWORD *)this + 64);
  v36 = &v42;
  v5 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v4, (unint64_t **)&v36);
  v6 = (uint64_t **)(v3 + 104);
  if (v5)
    v6 = v5 + 3;
  v7 = (unint64_t **)*v6;
  v8 = (unint64_t **)v6[1];
  if (*v6 != (uint64_t *)v8)
  {
    do
    {
      v9 = *v7;
      v10 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::find<unsigned long long>((_QWORD *)this + 6, *v7);
      memset(&v41, 0, sizeof(v41));
      CpGraph::GetLayerName(*(_QWORD *)this, *v9, &v41);
      v11 = (operations_research::sat::CpModelBuilder *)*((_QWORD *)this + 26);
      operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v36, *(_QWORD *)(v10[3] + 160), *(_QWORD *)(v10[3] + 168));
      v12 = operations_research::sat::CpModelBuilder::NewConstant(*((operations_research::sat::CpModelBuilder **)this + 26), 0);
      operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v32, (uint64_t)v12, v13);
      v40 = operations_research::sat::CpModelBuilder::AddEquality(v11, (const operations_research::sat::LinearExpr *)&v36, (const operations_research::sat::LinearExpr *)&v32);
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v41.__r_.__value_.__r.__words[2]);
      else
        size = v41.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, size + 24);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (size)
      {
        if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v16 = &v41;
        else
          v16 = (std::string *)v41.__r_.__value_.__r.__words[0];
        memmove(p_p, v16, size);
      }
      strcpy((char *)p_p + size, ":disable_l2_dep_producer");
      operations_research::sat::Constraint::WithName((uint64_t *)&v40, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v34)
      {
        v35 = v34;
        operator delete(v34);
      }
      if (v32)
      {
        v33 = v32;
        operator delete(v32);
      }
      if (v38)
      {
        v39 = v38;
        operator delete(v38);
      }
      if (v36)
      {
        v37 = v36;
        operator delete(v36);
      }
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v41.__r_.__value_.__l.__data_);
      ++v7;
    }
    while (v7 != v8);
  }
  v17 = *(_QWORD *)this;
  v18 = (_QWORD *)(*(_QWORD *)this + 24);
  v36 = &v42;
  v19 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v18, (unint64_t **)&v36);
  v20 = (uint64_t **)(v17 + 104);
  if (v19)
    v20 = v19 + 3;
  v21 = (unint64_t **)*v20;
  v22 = (unint64_t **)v20[1];
  if (*v20 != (uint64_t *)v22)
  {
    do
    {
      v23 = *v21;
      v24 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::find<unsigned long long>((_QWORD *)this + 6, *v21);
      memset(&v41, 0, sizeof(v41));
      CpGraph::GetLayerName(*(_QWORD *)this, *v23, &v41);
      v25 = (operations_research::sat::CpModelBuilder *)*((_QWORD *)this + 26);
      operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v36, *(_QWORD *)(v24[3] + 176), *(_QWORD *)(v24[3] + 184));
      v26 = operations_research::sat::CpModelBuilder::NewConstant(*((operations_research::sat::CpModelBuilder **)this + 26), 0);
      operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v32, (uint64_t)v26, v27);
      v40 = operations_research::sat::CpModelBuilder::AddEquality(v25, (const operations_research::sat::LinearExpr *)&v36, (const operations_research::sat::LinearExpr *)&v32);
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
      else
        v28 = v41.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v28 + 24);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = &__p;
      else
        v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v28)
      {
        if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v30 = &v41;
        else
          v30 = (std::string *)v41.__r_.__value_.__r.__words[0];
        memmove(v29, v30, v28);
      }
      strcpy((char *)v29 + v28, ":disable_l2_dep_consumer");
      operations_research::sat::Constraint::WithName((uint64_t *)&v40, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v34)
      {
        v35 = v34;
        operator delete(v34);
      }
      if (v32)
      {
        v33 = v32;
        operator delete(v32);
      }
      if (v38)
      {
        v39 = v38;
        operator delete(v38);
      }
      if (v36)
      {
        v37 = v36;
        operator delete(v36);
      }
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v41.__r_.__value_.__l.__data_);
      ++v21;
    }
    while (v21 != v22);
  }
}

void sub_22D9BFCB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;

  if (a14 < 0)
    operator delete(__p);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a15);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a22);
  if (*(char *)(v22 - 105) < 0)
    operator delete(*(void **)(v22 - 128));
  _Unwind_Resume(a1);
}

void ORToolsCpAllocator::PrepareL2Dependent(ORToolsCpAllocator *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t **v9;
  uint64_t **v10;
  unint64_t **v11;
  unint64_t **v12;
  unint64_t *v13;
  _QWORD *v14;
  operations_research::sat::CpModelBuilder *v15;
  operations_research::sat::CpModelBuilder *v16;
  uint64_t v17;
  std::string::size_type size;
  std::string *p_p;
  std::string *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t **v23;
  uint64_t **v24;
  unint64_t **v25;
  unint64_t **v26;
  unint64_t *v27;
  _QWORD *v28;
  operations_research::sat::CpModelBuilder *v29;
  operations_research::sat::CpModelBuilder *v30;
  uint64_t v31;
  std::string::size_type v32;
  std::string *v33;
  std::string *v34;
  std::string __p;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  operations_research::sat::CpModelBuilder *v44;
  std::string v45;
  uint64_t v46;

  v46 = a2;
  v7 = *(_QWORD *)this;
  v8 = (_QWORD *)(*(_QWORD *)this + 64);
  v40 = &v46;
  v9 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v8, (unint64_t **)&v40);
  v10 = (uint64_t **)(v7 + 104);
  if (v9)
    v10 = v9 + 3;
  v11 = (unint64_t **)*v10;
  v12 = (unint64_t **)v10[1];
  if (*v10 != (uint64_t *)v12)
  {
    do
    {
      v13 = *v11;
      if (**v11 != a3)
      {
        v14 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::find<unsigned long long>((_QWORD *)this + 6, *v11);
        memset(&v45, 0, sizeof(v45));
        CpGraph::GetLayerName(*(_QWORD *)this, *v13, &v45);
        v15 = (operations_research::sat::CpModelBuilder *)*((_QWORD *)this + 26);
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v40, *(_QWORD *)(v14[3] + 160), *(_QWORD *)(v14[3] + 168));
        v16 = operations_research::sat::CpModelBuilder::NewConstant(*((operations_research::sat::CpModelBuilder **)this + 26), 0);
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v36, (uint64_t)v16, v17);
        v44 = operations_research::sat::CpModelBuilder::AddEquality(v15, (const operations_research::sat::LinearExpr *)&v40, (const operations_research::sat::LinearExpr *)&v36);
        if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v45.__r_.__value_.__r.__words[2]);
        else
          size = v45.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&__p, size + 24);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if (size)
        {
          if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v20 = &v45;
          else
            v20 = (std::string *)v45.__r_.__value_.__r.__words[0];
          memmove(p_p, v20, size);
        }
        strcpy((char *)p_p + size, ":disable_l2_dep_producer");
        operations_research::sat::Constraint::WithName((uint64_t *)&v44, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (v38)
        {
          v39 = v38;
          operator delete(v38);
        }
        if (v36)
        {
          v37 = v36;
          operator delete(v36);
        }
        if (v42)
        {
          v43 = v42;
          operator delete(v42);
        }
        if (v40)
        {
          v41 = v40;
          operator delete(v40);
        }
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v45.__r_.__value_.__l.__data_);
      }
      ++v11;
    }
    while (v11 != v12);
  }
  v21 = *(_QWORD *)this;
  v22 = (_QWORD *)(*(_QWORD *)this + 24);
  v40 = &v46;
  v23 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v22, (unint64_t **)&v40);
  v24 = (uint64_t **)(v21 + 104);
  if (v23)
    v24 = v23 + 3;
  v25 = (unint64_t **)*v24;
  v26 = (unint64_t **)v24[1];
  if (*v24 != (uint64_t *)v26)
  {
    do
    {
      v27 = *v25;
      if (**v25 != a4)
      {
        v28 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::find<unsigned long long>((_QWORD *)this + 6, *v25);
        memset(&v45, 0, sizeof(v45));
        CpGraph::GetLayerName(*(_QWORD *)this, *v27, &v45);
        v29 = (operations_research::sat::CpModelBuilder *)*((_QWORD *)this + 26);
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v40, *(_QWORD *)(v28[3] + 176), *(_QWORD *)(v28[3] + 184));
        v30 = operations_research::sat::CpModelBuilder::NewConstant(*((operations_research::sat::CpModelBuilder **)this + 26), 0);
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v36, (uint64_t)v30, v31);
        v44 = operations_research::sat::CpModelBuilder::AddEquality(v29, (const operations_research::sat::LinearExpr *)&v40, (const operations_research::sat::LinearExpr *)&v36);
        if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v32 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
        else
          v32 = v45.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&__p, v32 + 24);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v33 = &__p;
        else
          v33 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if (v32)
        {
          if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v34 = &v45;
          else
            v34 = (std::string *)v45.__r_.__value_.__r.__words[0];
          memmove(v33, v34, v32);
        }
        strcpy((char *)v33 + v32, ":disable_l2_dep_consumer");
        operations_research::sat::Constraint::WithName((uint64_t *)&v44, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (v38)
        {
          v39 = v38;
          operator delete(v38);
        }
        if (v36)
        {
          v37 = v36;
          operator delete(v36);
        }
        if (v42)
        {
          v43 = v42;
          operator delete(v42);
        }
        if (v40)
        {
          v41 = v40;
          operator delete(v40);
        }
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v45.__r_.__value_.__l.__data_);
      }
      ++v25;
    }
    while (v25 != v26);
  }
}

void sub_22D9C00D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;

  if (a14 < 0)
    operator delete(__p);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a15);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a22);
  if (*(char *)(v22 - 105) < 0)
    operator delete(*(void **)(v22 - 128));
  _Unwind_Resume(a1);
}

void ORToolsCpAllocator::SetObjectiveFunction(CpAllocGraph **this)
{
  CpAllocGraph **v1;
  std::string::size_type *v2;
  std::string::size_type *v3;
  uint64_t v4;
  _OWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  CpAllocGraph *i;
  _OWORD *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  int v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t *v52;
  uint64_t v53;
  _QWORD *j;
  _OWORD *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  int v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t RegionMaxCycle;
  operations_research::sat::CpModelBuilder *v80;
  operations_research::sat::CpModelBuilder *v81;
  uint64_t v82;
  uint64_t v83;
  operations_research::sat::CpModelBuilder *v84;
  operations_research::sat::CpModelBuilder *v85;
  ORToolsCpAllocator *v86;
  std::string __str;
  void *v88[3];
  void *v89;
  void *v90;
  void *v91;
  void *__p;
  void *v93;
  void *v94;
  operations_research::sat::CpModelBuilder *v95;
  uint64_t *v96;
  uint64_t *v97;
  char *v98;
  char *v99;
  char *v100;
  _QWORD v101[2];

  v1 = this;
  v99 = 0;
  v100 = 0;
  v101[0] = 0;
  v96 = 0;
  v97 = 0;
  v98 = 0;
  CpAllocGraph::GetLayers(*this, 1, (uint64_t *)&v91);
  v2 = (std::string::size_type *)v91;
  v3 = (std::string::size_type *)__p;
  v86 = (ORToolsCpAllocator *)v1;
  if (v91 != __p)
  {
    v4 = (uint64_t)(v1 + 6);
    do
    {
      __str.__r_.__value_.__r.__words[0] = 0;
      __str.__r_.__value_.__r.__words[0] = *v2;
      v88[0] = &__str;
      v5 = (_OWORD *)(std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v4, (unint64_t *)&__str, (uint64_t)&std::piecewise_construct, (_QWORD **)v88)[3]+ 16);
      v6 = v100;
      if ((unint64_t)v100 >= v101[0])
      {
        v8 = (v100 - v99) >> 4;
        v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 60)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v10 = v101[0] - (_QWORD)v99;
        if ((uint64_t)(v101[0] - (_QWORD)v99) >> 3 > v9)
          v9 = v10 >> 3;
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
          v11 = 0xFFFFFFFFFFFFFFFLL;
        else
          v11 = v9;
        if (v11)
          v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)v101, v11);
        else
          v12 = 0;
        v13 = &v12[16 * v8];
        *(_OWORD *)v13 = *v5;
        v15 = v99;
        v14 = v100;
        v16 = v13;
        if (v100 != v99)
        {
          do
          {
            v17 = *((_QWORD *)v14 - 2);
            v14 -= 16;
            v18 = *((_DWORD *)v14 + 2);
            *((_QWORD *)v16 - 2) = v17;
            v16 -= 16;
            *((_DWORD *)v16 + 2) = v18;
          }
          while (v14 != v15);
          v14 = v99;
        }
        v7 = v13 + 16;
        v99 = v16;
        v100 = v13 + 16;
        v101[0] = &v12[16 * v11];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *(_OWORD *)v100 = *v5;
        v7 = v6 + 16;
      }
      v100 = v7;
      v19 = v97;
      if (v97 >= (uint64_t *)v98)
      {
        v21 = v96;
        v22 = v97 - v96;
        v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v24 = v98 - (char *)v96;
        if ((v98 - (char *)v96) >> 2 > v23)
          v23 = v24 >> 2;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
          v25 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v25 = v23;
        if (v25)
        {
          v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)&v98, v25);
          v21 = v96;
          v19 = v97;
        }
        else
        {
          v26 = 0;
        }
        v27 = (uint64_t *)&v26[8 * v22];
        *v27 = 1;
        v20 = v27 + 1;
        while (v19 != v21)
        {
          v28 = *--v19;
          *--v27 = v28;
        }
        v96 = v27;
        v97 = v20;
        v98 = &v26[8 * v25];
        if (v21)
          operator delete(v21);
      }
      else
      {
        *v97 = 1;
        v20 = v19 + 1;
      }
      v97 = v20;
      ++v2;
    }
    while (v2 != v3);
    v2 = (std::string::size_type *)v91;
    v1 = (CpAllocGraph **)v86;
  }
  if (v2)
  {
    __p = v2;
    operator delete(v2);
  }
  for (i = v1[13]; i; i = *(CpAllocGraph **)i)
  {
    v30 = (_OWORD *)(*((_QWORD *)i + 3) + 16);
    v31 = v100;
    if ((unint64_t)v100 >= v101[0])
    {
      v33 = (v100 - v99) >> 4;
      v34 = v33 + 1;
      if ((unint64_t)(v33 + 1) >> 60)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v35 = v101[0] - (_QWORD)v99;
      if ((uint64_t)(v101[0] - (_QWORD)v99) >> 3 > v34)
        v34 = v35 >> 3;
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
        v36 = 0xFFFFFFFFFFFFFFFLL;
      else
        v36 = v34;
      if (v36)
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)v101, v36);
      else
        v37 = 0;
      v38 = &v37[16 * v33];
      *(_OWORD *)v38 = *v30;
      v40 = v99;
      v39 = v100;
      v41 = v38;
      if (v100 != v99)
      {
        do
        {
          v42 = *((_QWORD *)v39 - 2);
          v39 -= 16;
          v43 = *((_DWORD *)v39 + 2);
          *((_QWORD *)v41 - 2) = v42;
          v41 -= 16;
          *((_DWORD *)v41 + 2) = v43;
        }
        while (v39 != v40);
        v39 = v99;
      }
      v32 = v38 + 16;
      v99 = v41;
      v100 = v38 + 16;
      v101[0] = &v37[16 * v36];
      if (v39)
        operator delete(v39);
    }
    else
    {
      *(_OWORD *)v100 = *v30;
      v32 = v31 + 16;
    }
    v100 = v32;
    v44 = v97;
    if (v97 >= (uint64_t *)v98)
    {
      v46 = v96;
      v47 = v97 - v96;
      v48 = v47 + 1;
      if ((unint64_t)(v47 + 1) >> 61)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v49 = v98 - (char *)v96;
      if ((v98 - (char *)v96) >> 2 > v48)
        v48 = v49 >> 2;
      if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
        v50 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v50 = v48;
      if (v50)
      {
        v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)&v98, v50);
        v46 = v96;
        v44 = v97;
      }
      else
      {
        v51 = 0;
      }
      v52 = (uint64_t *)&v51[8 * v47];
      *v52 = 1;
      v45 = v52 + 1;
      while (v44 != v46)
      {
        v53 = *--v44;
        *--v52 = v53;
      }
      v96 = v52;
      v97 = v45;
      v98 = &v51[8 * v50];
      if (v46)
        operator delete(v46);
    }
    else
    {
      *v97 = 1;
      v45 = v44 + 1;
    }
    v97 = v45;
  }
  for (j = (_QWORD *)*((_QWORD *)v86 + 18); j; j = (_QWORD *)*j)
  {
    v55 = (_OWORD *)(j[3] + 16);
    v56 = v100;
    if ((unint64_t)v100 >= v101[0])
    {
      v58 = (v100 - v99) >> 4;
      v59 = v58 + 1;
      if ((unint64_t)(v58 + 1) >> 60)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v60 = v101[0] - (_QWORD)v99;
      if ((uint64_t)(v101[0] - (_QWORD)v99) >> 3 > v59)
        v59 = v60 >> 3;
      if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF0)
        v61 = 0xFFFFFFFFFFFFFFFLL;
      else
        v61 = v59;
      if (v61)
        v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)v101, v61);
      else
        v62 = 0;
      v63 = &v62[16 * v58];
      *(_OWORD *)v63 = *v55;
      v65 = v99;
      v64 = v100;
      v66 = v63;
      if (v100 != v99)
      {
        do
        {
          v67 = *((_QWORD *)v64 - 2);
          v64 -= 16;
          v68 = *((_DWORD *)v64 + 2);
          *((_QWORD *)v66 - 2) = v67;
          v66 -= 16;
          *((_DWORD *)v66 + 2) = v68;
        }
        while (v64 != v65);
        v64 = v99;
      }
      v57 = v63 + 16;
      v99 = v66;
      v100 = v63 + 16;
      v101[0] = &v62[16 * v61];
      if (v64)
        operator delete(v64);
    }
    else
    {
      *(_OWORD *)v100 = *v55;
      v57 = v56 + 16;
    }
    v100 = v57;
    v69 = v97;
    if (v97 >= (uint64_t *)v98)
    {
      v71 = v96;
      v72 = v97 - v96;
      v73 = v72 + 1;
      if ((unint64_t)(v72 + 1) >> 61)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v74 = v98 - (char *)v96;
      if ((v98 - (char *)v96) >> 2 > v73)
        v73 = v74 >> 2;
      if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8)
        v75 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v75 = v73;
      if (v75)
      {
        v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)&v98, v75);
        v71 = v96;
        v69 = v97;
      }
      else
      {
        v76 = 0;
      }
      v77 = (uint64_t *)&v76[8 * v72];
      *v77 = 1;
      v70 = v77 + 1;
      while (v69 != v71)
      {
        v78 = *--v69;
        *--v77 = v78;
      }
      v96 = v77;
      v97 = v70;
      v98 = &v76[8 * v75];
      if (v71)
        operator delete(v71);
    }
    else
    {
      *v97 = 1;
      v70 = v69 + 1;
    }
    v97 = v70;
  }
  RegionMaxCycle = ORToolsCpAllocator::GetRegionMaxCycle((CpAllocGraph **)v86);
  v80 = (operations_research::sat::CpModelBuilder *)*((_QWORD *)v86 + 26);
  operations_research::Domain::Domain(&v91, 0, RegionMaxCycle);
  v81 = operations_research::sat::CpModelBuilder::NewIntVar(v80, (const operations_research::Domain *)&v91);
  v83 = v82;
  if ((v91 & 1) != 0)
    operator delete(__p);
  v84 = (operations_research::sat::CpModelBuilder *)*((_QWORD *)v86 + 26);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v91, (uint64_t)v81, v83);
  operations_research::sat::LinearExpr::ScalProd((uint64_t)v99, (v100 - v99) >> 4, v96, v97 - v96, (uint64_t)v88);
  v95 = operations_research::sat::CpModelBuilder::AddEquality(v84, (const operations_research::sat::LinearExpr *)&v91, (const operations_research::sat::LinearExpr *)v88);
  std::string::basic_string[abi:ne180100]<0>(&__str, "objective_func");
  operations_research::sat::Constraint::WithName((uint64_t *)&v95, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v89)
  {
    v90 = v89;
    operator delete(v89);
  }
  if (v88[0])
  {
    v88[1] = v88[0];
    operator delete(v88[0]);
  }
  if (v93)
  {
    v94 = v93;
    operator delete(v93);
  }
  if (v91)
  {
    __p = v91;
    operator delete(v91);
  }
  v85 = (operations_research::sat::CpModelBuilder *)*((_QWORD *)v86 + 26);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v91, (uint64_t)v81, v83);
  operations_research::sat::CpModelBuilder::Minimize(v85, (const operations_research::sat::LinearExpr *)&v91);
  if (v93)
  {
    v94 = v93;
    operator delete(v93);
  }
  if (v91)
  {
    __p = v91;
    operator delete(v91);
  }
  if (v96)
  {
    v97 = v96;
    operator delete(v96);
  }
  if (v99)
  {
    v100 = v99;
    operator delete(v99);
  }
}

void sub_22D9C085C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  uint64_t v24;
  void *v26;
  void *v27;

  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a23);
  v26 = *(void **)(v24 - 136);
  if (v26)
  {
    *(_QWORD *)(v24 - 128) = v26;
    operator delete(v26);
  }
  v27 = *(void **)(v24 - 112);
  if (v27)
  {
    *(_QWORD *)(v24 - 104) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(a1);
}

uint64_t ORToolsCpAllocator::GetRegionMaxCycle(CpAllocGraph **this)
{
  unint64_t **v2;
  unint64_t **v3;
  uint64_t v4;
  unint64_t *v5;
  BOOL v7[2];
  LayerCycleAndFootprintEstimator *v8;
  void *__p;
  unint64_t **v10;

  CpAllocGraph::GetLayers(*this, 1, (uint64_t *)&__p);
  v2 = (unint64_t **)__p;
  v3 = v10;
  if (__p == v10)
  {
    v4 = 0;
    if (!__p)
      return v4;
    goto LABEL_7;
  }
  v4 = 0;
  do
  {
    v5 = *v2;
    v8 = 0;
    if (CpAllocGraph::GetLayerBehavior((uint64_t)*this, (unint64_t)v5, &v8))
    {
      *(_WORD *)v7 = 0;
      ORToolsCpAllocator::GetEarlyAllocationDecision(this, v5, &v7[1], v7);
      v4 += LayerCycleAndFootprintEstimator::GetMaxCycle(v8, v7[1], v7[0]);
    }
    ++v2;
  }
  while (v2 != v3);
  v2 = (unint64_t **)__p;
  if (__p)
  {
LABEL_7:
    v10 = v2;
    operator delete(v2);
  }
  return v4;
}

void sub_22D9C09FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  size_t v5;
  size_t v6;
  uint64_t result;
  char *v8;
  const void *v9;
  char *v10;
  const void *v11;

  if (*((char *)a1 + 23) >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  result = std::string::basic_string[abi:ne180100](a3, v6 + v5);
  if (*(char *)(result + 23) >= 0)
    v8 = (char *)result;
  else
    v8 = *(char **)result;
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0)
      v9 = a1;
    else
      v9 = *a1;
    result = (uint64_t)memmove(v8, v9, v5);
  }
  v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *a2;
    result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

BOOL ORToolsCpAllocator::Execute(ORToolsCpAllocator *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t **v7;
  std::string::size_type size;
  std::string **v9;
  std::string::size_type v10;
  unint64_t MaxCycle;
  uint64_t v12;
  operations_research::sat::CpModelBuilder *v13;
  unint64_t **v14;
  std::string **v15;
  unint64_t *v16;
  _QWORD *OutputTensor;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t **v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t **v25;
  unint64_t ****v26;
  unint64_t **v27;
  uint64_t v28;
  unint64_t v29;
  std::string::size_type LayerBehavior;
  unint64_t ChainExecutionVariableMaxCycle;
  uint64_t v32;
  operations_research::sat::CpModelBuilder *v33;
  operations_research::sat::CpModelBuilder *v34;
  unint64_t **v35;
  std::string::size_type v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t **v46;
  _QWORD *v47;
  _BOOL8 v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t **v51;
  unint64_t **v52;
  char *v53;
  _QWORD *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  operations_research::sat::CpModelBuilder *BooleanOr;
  char *v59;
  operations_research::sat::CpModelBuilder *v60;
  int v61;
  unint64_t **v62;
  void *v63;
  void *v64;
  uint64_t v65;
  _QWORD *v66;
  operations_research::sat::CpModelBuilder *BooleanAnd;
  int v68;
  int v69;
  _QWORD *v70;
  operations_research::sat::CpModelBuilder *v71;
  uint64_t *ResidentBufferSize;
  int v73;
  uint64_t v74;
  uint64_t v75;
  operations_research::sat::CpModelBuilder *v76;
  uint64_t v77;
  std::string *v78;
  __int128 v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  unint64_t v91;
  uint64_t **v92;
  unint64_t ****v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  operations_research::sat::CpModelBuilder *v98;
  char *v99;
  int v100;
  operations_research::sat::CpModelBuilder *v101;
  uint64_t v102;
  std::string *v103;
  __int128 v104;
  _QWORD *v105;
  unint64_t v106;
  uint64_t **v107;
  unint64_t ****v108;
  unint64_t **v109;
  _QWORD *v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  operations_research::sat::CpModelBuilder *v114;
  char *v115;
  int v116;
  operations_research::sat::CpModelBuilder *v117;
  uint64_t v118;
  std::string *v119;
  __int128 v120;
  unint64_t *v121;
  std::string::size_type v122;
  uint64_t v123;
  CpAllocGraph *v124;
  uint64_t v125;
  int v126;
  _BYTE *v127;
  _BOOL8 v128;
  _QWORD *v130;
  unint64_t **v131;
  std::string __p;
  void *v133;
  void *v134;
  int v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  std::string v140;
  std::string v141;
  operations_research::sat::CpModelBuilder *v142;
  void *v143;
  _QWORD *v144;
  unint64_t v145;
  std::string v146;
  void *v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  std::string __str;
  unint64_t *v152;
  std::string *p_str;
  std::string *v154;
  uint64_t v155[3];
  uint64_t v156;
  uint64_t v157;
  uint64_t v158[2];
  std::string **v159;
  std::string **v160;
  uint64_t v161;
  int v162;
  uint64_t v163;

  v163 = *MEMORY[0x24BDAC8D0];
  v130 = (_QWORD *)((char *)this + 224);
  ORToolsCpBasedAllocatorUtil::PrintRegion((_QWORD *)this + 28, *(_QWORD *)this, (_QWORD *)this + 1);
  v136 = operations_research::sat::CpModelBuilder::NewConstant(*((operations_research::sat::CpModelBuilder **)this + 26), *((_QWORD *)this + 99));
  v137 = v2;
  std::string::basic_string[abi:ne180100]<0>(&__p, "l2_space_const");
  v3 = operations_research::sat::BoolVar::WithName((int *)&v136, &__p);
  v5 = v4;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v158[0] = operations_research::sat::CpModelBuilder::AddCumulative(*((_QWORD *)this + 26), v3, v5);
  v158[1] = v6;
  v156 = 0x7FFFFFFFFFFFFFFFLL;
  v157 = 0x7FFFFFFFFFFFFFFFLL;
  ORToolsCpAllocator::FindMinMaxSchedule((CpAllocGraph **)this, &v157, &v156);
  operations_research::Domain::Domain(v155, v157, v156);
  CpAllocGraph::GetLayers(*(CpAllocGraph **)this, 1, (uint64_t *)&__p);
  size = __p.__r_.__value_.__l.__size_;
  v7 = (unint64_t **)__p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
  {
    do
      ORToolsCpAllocator::CreateTensorAllocationVariable((CpGraph **)this, *v7++);
    while (v7 != (unint64_t **)size);
    v7 = (unint64_t **)__p.__r_.__value_.__r.__words[0];
  }
  if (v7)
  {
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v7;
    operator delete(v7);
  }
  CpAllocGraph::GetLayers(*(CpAllocGraph **)this, 1, (uint64_t *)&__p);
  v10 = __p.__r_.__value_.__l.__size_;
  v9 = (std::string **)__p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
  {
    do
    {
      p_str = 0;
      p_str = *v9;
      __str.__r_.__value_.__r.__words[0] = 0;
      if (CpAllocGraph::GetLayerBehavior(*(_QWORD *)this, (unint64_t)p_str, &__str))
      {
        MaxCycle = LayerCycleAndFootprintEstimator::GetMaxCycle((LayerCycleAndFootprintEstimator *)__str.__r_.__value_.__l.__data_, 0, 0);
        operations_research::Domain::Domain(&v136, 0, MaxCycle);
        ORToolsCpAllocator::CreateLayerScheduleVariable((CpGraph **)this, (unint64_t *)p_str, (const operations_research::Domain *)&v136);
        v159 = &p_str;
        v12 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this + 48, (unint64_t *)&p_str, (uint64_t)&std::piecewise_construct, &v159)[3];
        v13 = (operations_research::sat::CpModelBuilder *)*((_QWORD *)this + 26);
        LayerCycleAndFootprintEstimator::GetReadBehaviors((uint64_t **)__str.__r_.__value_.__l.__data_, (char **)&v159);
        ORToolsLayerScheduleVariable::CreateLayerConstraint(v12, v13, v158, &v159, (const operations_research::Domain *)&v136);
        if (v159)
        {
          v160 = v159;
          operator delete(v159);
        }
        if ((v136 & 1) != 0)
          operator delete(v137);
      }
      ++v9;
    }
    while (v9 != (std::string **)v10);
    v9 = (std::string **)__p.__r_.__value_.__r.__words[0];
  }
  if (v9)
  {
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
    operator delete(v9);
  }
  CpAllocGraph::GetLayers(*(CpAllocGraph **)this, 1, (uint64_t *)&v159);
  v14 = (unint64_t **)v159;
  v15 = v160;
  if (v159 != v160)
  {
    while (1)
    {
      v16 = *v14;
      v147 = 0;
      OutputTensor = CpGraph::GetOutputTensor(*(CpGraph **)this, v16);
      v147 = OutputTensor;
      v18 = *(_QWORD *)this;
      v19 = *(_QWORD **)(*(_QWORD *)this + 304);
      if (!v19)
        goto LABEL_24;
      while (1)
      {
        v20 = v19[4];
        if (v20 <= (unint64_t)OutputTensor)
          break;
LABEL_23:
        v19 = (_QWORD *)*v19;
        if (!v19)
          goto LABEL_24;
      }
      if (v20 < (unint64_t)OutputTensor)
        break;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v147;
      v21 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>((_QWORD *)(v18 + 24), (unint64_t **)&__p);
      v22 = (_QWORD *)(v18 + 104);
      if (v21)
        v22 = v21 + 3;
      if (v22[1] != *v22)
      {
        v143 = v16;
        v23 = *(_QWORD *)this;
        v24 = (_QWORD *)(*(_QWORD *)this + 24);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v147;
        v25 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v24, (unint64_t **)&__p);
        v26 = (unint64_t ****)(v23 + 104);
        if (v25)
          v26 = (unint64_t ****)(v25 + 3);
        v27 = **v26;
        CpGraph::GetInputTensors(*(CpGraph **)this, *v27, (uint64_t)&p_str);
        if (v154 == p_str)
        {
LABEL_36:
          v28 = 0;
        }
        else
        {
          v28 = 0;
          v29 = ((char *)v154 - (char *)p_str) >> 3;
          if (v29 <= 1)
            v29 = 1;
          while (*((void **)&p_str->__r_.__value_.__l.__data_ + v28) != v147)
          {
            if (v29 == ++v28)
              goto LABEL_36;
          }
        }
        if (std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::find<unsigned long long>((_QWORD *)this + 6, (unint64_t *)&v143)&& std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::find<unsigned long long>((_QWORD *)this + 6, (unint64_t *)v27))
        {
          v141.__r_.__value_.__r.__words[0] = 0;
          v140.__r_.__value_.__r.__words[0] = 0;
          CpAllocGraph::GetLayerBehavior(*(_QWORD *)this, (unint64_t)v143, &v141);
          LayerBehavior = CpAllocGraph::GetLayerBehavior(*(_QWORD *)this, (unint64_t)*v27, &v140);
          if (!*(_QWORD *)(*(_QWORD *)(v141.__r_.__value_.__r.__words[0] + 32) + 104))
          {
            LayerBehavior = (std::string::size_type)std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::find<unsigned long long>((_QWORD *)this + 21, (unint64_t *)&v147);
            if (LayerBehavior)
            {
              v34 = (operations_research::sat::CpModelBuilder *)*((_QWORD *)this + 26);
              operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, *(_QWORD *)(*(_QWORD *)(LayerBehavior + 24) + 32), *(_QWORD *)(*(_QWORD *)(LayerBehavior + 24) + 40));
              operations_research::sat::LinearExpr::LinearExpr((operations_research::sat::LinearExpr *)&v136, 0);
              v152 = (unint64_t *)operations_research::sat::CpModelBuilder::AddEquality(v34, (const operations_research::sat::LinearExpr *)&__p, (const operations_research::sat::LinearExpr *)&v136);
              std::string::basic_string[abi:ne180100]<0>(&__str, "T: disable-chain");
              operations_research::sat::Constraint::WithName((uint64_t *)&v152, &__str);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              if (v138)
              {
                v139 = v138;
                operator delete(v138);
              }
              if (v136)
              {
                v137 = v136;
                operator delete(v136);
              }
              if (v133)
              {
                v134 = v133;
                operator delete(v133);
              }
              LayerBehavior = __p.__r_.__value_.__r.__words[0];
              if (__p.__r_.__value_.__r.__words[0])
              {
                __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                operator delete(__p.__r_.__value_.__l.__data_);
              }
            }
          }
          ChainExecutionVariableMaxCycle = ORToolsCpAllocator::GetChainExecutionVariableMaxCycle((ORToolsCpAllocator *)LayerBehavior, (const LayerCycleAndFootprintEstimator *)v141.__r_.__value_.__l.__data_, (const LayerCycleAndFootprintEstimator *)v140.__r_.__value_.__l.__data_);
          operations_research::Domain::Domain(&__p, 0, ChainExecutionVariableMaxCycle);
          ORToolsCpAllocator::CreateChainScheduleVariable((CpGraph **)this, (unint64_t *)v143, *v27, v28, (const operations_research::Domain *)&__p);
          v136 = &v143;
          v32 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this + 88, (unint64_t *)&v143, (uint64_t)&std::piecewise_construct, (_QWORD **)&v136)[3];
          v33 = (operations_research::sat::CpModelBuilder *)*((_QWORD *)this + 26);
          LayerCycleAndFootprintEstimator::GetReadBehaviors((uint64_t **)v141.__r_.__value_.__l.__data_, (char **)&v136);
          ORToolsChainScheduleVariable::CreateLayerConstraint(v32, v33, (uint64_t)v158, &v136, *(_QWORD *)(v141.__r_.__value_.__r.__words[0] + 32), (const operations_research::Domain *)&__p);
          if (v136)
          {
            v137 = v136;
            operator delete(v136);
          }
          ORToolsCpAllocator::AddChainHWConstraint((operations_research::sat::CpModelBuilder **)this, (unint64_t *)v143, *v27, v28, (unint64_t)v147);
          if ((__p.__r_.__value_.__s.__data_[0] & 1) != 0)
            operator delete((void *)__p.__r_.__value_.__l.__size_);
        }
        if (p_str)
        {
          v154 = p_str;
          operator delete(p_str);
        }
      }
LABEL_24:
      if (++v14 == (unint64_t **)v15)
      {
        v14 = (unint64_t **)v159;
        goto LABEL_57;
      }
    }
    ++v19;
    goto LABEL_23;
  }
LABEL_57:
  if (v14)
  {
    v160 = (std::string **)v14;
    operator delete(v14);
  }
  CpAllocGraph::GetLayers(*(CpAllocGraph **)this, 1, (uint64_t *)&__p);
  v36 = __p.__r_.__value_.__l.__size_;
  v35 = (unint64_t **)__p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
  {
LABEL_60:
    v37 = CpGraph::GetOutputTensor(*(CpGraph **)this, *v35);
    v38 = *(_QWORD **)(*(_QWORD *)this + 328);
    if (!v38)
      goto LABEL_84;
    v39 = (unint64_t)v37;
    while (1)
    {
      v40 = v38[4];
      if (v40 <= (unint64_t)v37)
      {
        if (v40 >= (unint64_t)v37)
        {
          __str.__r_.__value_.__r.__words[0] = -1;
          v147 = (void *)-1;
          if (ORToolsCpAllocator::FindL2DepPair((CpAllocGraph **)this, (uint64_t)v37, (unint64_t *)&__str, (unint64_t *)&v147))
          {
            CpGraph::GetInputTensors(*(CpGraph **)this, (unint64_t *)v147, (uint64_t)&v136);
            if (v137 == v136)
            {
LABEL_73:
              v41 = 0;
            }
            else
            {
              v41 = 0;
              v42 = ((_BYTE *)v137 - (_BYTE *)v136) >> 3;
              if (v42 <= 1)
                v42 = 1;
              while (*((_QWORD *)v136 + v41) != v39)
              {
                if (v42 == ++v41)
                  goto LABEL_73;
              }
            }
            if (std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::find<unsigned long long>((_QWORD *)this + 6, (unint64_t *)&__str)&& std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::find<unsigned long long>((_QWORD *)this + 6, (unint64_t *)&v147))
            {
              v143 = 0;
              v143 = CpGraph::GetOutputTensor(*(CpGraph **)this, (unint64_t *)v147);
              v43 = *(_QWORD *)this;
              v159 = (std::string **)v143;
              if (!std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>((_QWORD *)(v43 + 344), (unint64_t *)&v159))goto LABEL_80;
              v44 = *(_QWORD *)this;
              v45 = (_QWORD *)(*(_QWORD *)this + 24);
              v159 = (std::string **)&v143;
              v46 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v45, (unint64_t **)&v159);
              v47 = (_QWORD *)(v44 + 104);
              if (v46)
                v47 = v46 + 3;
              if (v47[1] - *v47 <= 8uLL)
              {
LABEL_80:
                v141.__r_.__value_.__r.__words[0] = 0;
                v140.__r_.__value_.__r.__words[0] = 0;
                CpAllocGraph::GetLayerBehavior(*(_QWORD *)this, __str.__r_.__value_.__r.__words[0], &v141);
                v48 = CpAllocGraph::GetLayerBehavior(*(_QWORD *)this, (unint64_t)v147, &v140);
                v49 = ORToolsCpAllocator::GetChainExecutionVariableMaxCycle((ORToolsCpAllocator *)v48, (const LayerCycleAndFootprintEstimator *)v141.__r_.__value_.__l.__data_, (const LayerCycleAndFootprintEstimator *)v140.__r_.__value_.__l.__data_);
                operations_research::Domain::Domain(&v159, 0, v49);
                ORToolsCpAllocator::CreateL2DepScheduleVariable((CpGraph **)this, (unint64_t *)__str.__r_.__value_.__l.__data_, (unint64_t *)v147, v41, (const operations_research::Domain *)&v159);
                p_str = &__str;
                v50 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this + 128, (unint64_t *)&__str, (uint64_t)&std::piecewise_construct, (_QWORD **)&p_str);
                ORToolsL2DepScheduleVariable::CreateLayerConstraint(v50[3], *((operations_research::sat::CpModelBuilder **)this + 26), (uint64_t)v158, (uint64_t **)v141.__r_.__value_.__l.__data_, (const operations_research::Domain *)&v159);
                ORToolsCpAllocator::AddL2DepHWConstraint(this, (unint64_t *)__str.__r_.__value_.__l.__data_, (unint64_t *)v147, v41, v39);
                if ((v159 & 1) != 0)
                  operator delete(v160);
              }
            }
            if (v136)
            {
              v137 = v136;
              operator delete(v136);
            }
          }
LABEL_84:
          if (++v35 == (unint64_t **)v36)
          {
            v35 = (unint64_t **)__p.__r_.__value_.__r.__words[0];
            break;
          }
          goto LABEL_60;
        }
        ++v38;
      }
      v38 = (_QWORD *)*v38;
      if (!v38)
        goto LABEL_84;
    }
  }
  if (v35)
  {
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v35;
    operator delete(v35);
  }
  CpAllocGraph::GetLayers(*(CpAllocGraph **)this, 1, (uint64_t *)&p_str);
  v51 = (unint64_t **)p_str;
  v52 = (unint64_t **)v154;
  if (p_str != v154)
  {
    v53 = (char *)this + 48;
    while (1)
    {
      v152 = 0;
      v152 = *v51;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v152;
      v54 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v53, (unint64_t *)&v152, (uint64_t)&std::piecewise_construct, &__p);
      memset(&__str, 0, sizeof(__str));
      CpGraph::GetLayerName(*(_QWORD *)this, (unint64_t)v152, &__str);
      v150 = -1;
      CpAllocGraph::GetLayerSchedule(*(CpAllocGraph **)this, (unint64_t)v152, &v150);
      v148 = 0;
      v147 = 0;
      v149 = 0;
      v55 = v54[3];
      v56 = *(char **)(v55 + 192);
      v57 = *(char **)(v55 + 200);
      if (v57 == v56)
        goto LABEL_160;
      std::vector<operations_research::sat::BoolVar>::__insert_with_size[abi:ne180100]<std::__wrap_iter<operations_research::sat::BoolVar const*>,std::__wrap_iter<operations_research::sat::BoolVar const*>>((uint64_t)&v147, 0, v56, v57, (v57 - v56) >> 4);
      if (v148 != v147)
      {
        v131 = v51;
        BooleanOr = ORToolsCpBasedAllocatorUtil::CreateBooleanOr(*((operations_research::sat::CpModelBuilder **)this + 26), (uint64_t *)&v147);
        v59 = v53;
        v60 = (operations_research::sat::CpModelBuilder *)*((_QWORD *)this + 26);
        operations_research::sat::BoolVar::BoolVar((uint64_t)&v136, ~v61, (uint64_t)BooleanOr);
        v62 = v52;
        v63 = v136;
        v64 = v137;
        v65 = *(_QWORD *)(v54[3] + 136);
        v159 = *(std::string ***)(v65 + 224);
        LODWORD(v160) = *(_DWORD *)(v65 + 232);
        v66 = operator new(0x20uLL);
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v66 + 4);
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v66 + 4);
        *v66 = v63;
        v66[1] = v64;
        v66[2] = v159;
        *((_DWORD *)v66 + 6) = (_DWORD)v160;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v66;
        BooleanAnd = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v60, (uint64_t *)&__p);
        v69 = v68;
        if (__p.__r_.__value_.__r.__words[0])
        {
          __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        v70 = CpGraph::GetOutputTensor(*(CpGraph **)this, v152);
        v71 = (operations_research::sat::CpModelBuilder *)*((_QWORD *)this + 26);
        ResidentBufferSize = ORToolsCpAllocator::GetResidentBufferSize(this, (uint64_t)v70);
        v73 = operations_research::sat::CpModelBuilder::NewConstant(v71, (uint64_t)ResidentBufferSize);
        v75 = v74;
        v76 = (operations_research::sat::CpModelBuilder *)*((_QWORD *)this + 26);
        v77 = v150;
        std::operator+<char>();
        v78 = std::string::append(&__p, ":in_place_l2_pressure_increase_interval", 0x27uLL);
        v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
        v146.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v79;
        v78->__r_.__value_.__l.__size_ = 0;
        v78->__r_.__value_.__r.__words[2] = 0;
        v78->__r_.__value_.__r.__words[0] = 0;
        v80 = ORToolsCpBasedAllocatorUtil::CreateOptionalClosedInterval(v76, v77, v77, (uint64_t)BooleanAnd, v69, &v146);
        v82 = v81;
        v52 = v62;
        if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v146.__r_.__value_.__l.__data_);
        v53 = v59;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        operations_research::sat::CumulativeConstraint::AddDemand(v158, v80, v82, v73, v75);
        v51 = v131;
      }
      v83 = *(_QWORD *)(v54[3] + 192);
      v84 = *(_QWORD *)(v54[3] + 200);
      if (v84 - v83 != 32 || v84 == v83)
        goto LABEL_160;
      v86 = 0;
      do
      {
        CpGraph::GetInputTensors(*(CpGraph **)this, v152, (uint64_t)&__p);
        v87 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8 * v86);
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
        v145 = 0;
        CpGraph::GetInputTensors(*(CpGraph **)this, v152, (uint64_t)&__p);
        v88 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8 * (v86 == 0));
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
        v145 = v88;
        v89 = *(_QWORD *)this;
        v90 = *(_QWORD **)(*(_QWORD *)this + 304);
        if (!v90)
          goto LABEL_132;
        while (1)
        {
          v91 = v90[4];
          if (v91 <= v88)
            break;
LABEL_108:
          v90 = (_QWORD *)*v90;
          if (!v90)
            goto LABEL_132;
        }
        if (v91 < v88)
        {
          ++v90;
          goto LABEL_108;
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v145;
        v92 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>((_QWORD *)(v89 + 64), (unint64_t **)&__p);
        v93 = (unint64_t ****)(v89 + 104);
        if (v92)
          v93 = (unint64_t ****)(v92 + 3);
        CpGraph::GetInputTensors(*(CpGraph **)this, ***v93, (uint64_t)&v143);
        v94 = v143;
        v95 = v144;
        if (v143 != v144)
        {
          do
          {
            if (*v94 == v87)
              goto LABEL_116;
            ++v94;
          }
          while (v94 != v144);
          v94 = v144;
        }
LABEL_116:
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v145;
        v96 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this + 168, &v145, (uint64_t)&std::piecewise_construct, &__p);
        if (v94 != v95)
        {
          v97 = v96[3];
          v98 = (operations_research::sat::CpModelBuilder *)*((_QWORD *)this + 26);
          v99 = (char *)v147 + 16 * v86;
          v100 = *((_DWORD *)v99 + 2);
          v159 = *(std::string ***)v99;
          LODWORD(v160) = v100;
          v161 = *(_QWORD *)(v97 + 32);
          v162 = *(_DWORD *)(v97 + 40);
          operations_research::sat::LinearExpr::BooleanSum((uint64_t)&v159, 2, (uint64_t)&__p);
          v101 = operations_research::sat::CpModelBuilder::NewConstant(*((operations_research::sat::CpModelBuilder **)this + 26), 1);
          operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v136, (uint64_t)v101, v102);
          v142 = operations_research::sat::CpModelBuilder::AddLessOrEqual(v98, (const operations_research::sat::LinearExpr *)&__p, (const operations_research::sat::LinearExpr *)&v136);
          std::operator+<char>();
          v103 = std::string::append(&v140, ":inplace_chain_mutex_constraint", 0x1FuLL);
          v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
          v141.__r_.__value_.__r.__words[2] = v103->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v104;
          v103->__r_.__value_.__l.__size_ = 0;
          v103->__r_.__value_.__r.__words[2] = 0;
          v103->__r_.__value_.__r.__words[0] = 0;
          operations_research::sat::Constraint::WithName((uint64_t *)&v142, &v141);
          if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v141.__r_.__value_.__l.__data_);
          if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v140.__r_.__value_.__l.__data_);
          if (v138)
          {
            v139 = v138;
            operator delete(v138);
          }
          if (v136)
          {
            v137 = v136;
            operator delete(v136);
          }
          if (v133)
          {
            v134 = v133;
            operator delete(v133);
          }
          if (__p.__r_.__value_.__r.__words[0])
          {
            __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        if (v143)
        {
          v144 = v143;
          operator delete(v143);
        }
        v89 = *(_QWORD *)this;
        v88 = v145;
LABEL_132:
        v105 = *(_QWORD **)(v89 + 328);
        if (!v105)
          goto LABEL_159;
        while (2)
        {
          v106 = v105[4];
          if (v106 > v88)
          {
LABEL_136:
            v105 = (_QWORD *)*v105;
            if (!v105)
              goto LABEL_159;
            continue;
          }
          break;
        }
        if (v106 < v88)
        {
          ++v105;
          goto LABEL_136;
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v145;
        v107 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>((_QWORD *)(v89 + 64), (unint64_t **)&__p);
        v108 = (unint64_t ****)(v89 + 104);
        if (v107)
          v108 = (unint64_t ****)(v107 + 3);
        v109 = **v108;
        CpGraph::GetInputTensors(*(CpGraph **)this, *v109, (uint64_t)&v143);
        v110 = v143;
        v111 = v144;
        if (v143 != v144)
        {
          while (*v110 != v87)
          {
            if (++v110 == v144)
            {
              v110 = v144;
              break;
            }
          }
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v109;
        v112 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v53, (unint64_t *)v109, (uint64_t)&std::piecewise_construct, &__p);
        if (v110 != v111)
        {
          v113 = v112[3];
          v114 = (operations_research::sat::CpModelBuilder *)*((_QWORD *)this + 26);
          v115 = (char *)v147 + 16 * v86;
          v116 = *((_DWORD *)v115 + 2);
          v159 = *(std::string ***)v115;
          LODWORD(v160) = v116;
          v161 = *(_QWORD *)(v113 + 160);
          v162 = *(_DWORD *)(v113 + 168);
          operations_research::sat::LinearExpr::BooleanSum((uint64_t)&v159, 2, (uint64_t)&__p);
          v117 = operations_research::sat::CpModelBuilder::NewConstant(*((operations_research::sat::CpModelBuilder **)this + 26), 1);
          operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v136, (uint64_t)v117, v118);
          v142 = operations_research::sat::CpModelBuilder::AddLessOrEqual(v114, (const operations_research::sat::LinearExpr *)&__p, (const operations_research::sat::LinearExpr *)&v136);
          std::operator+<char>();
          v119 = std::string::append(&v140, ":inplace_l2_dep_mutex_constraint", 0x20uLL);
          v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
          v141.__r_.__value_.__r.__words[2] = v119->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v120;
          v119->__r_.__value_.__l.__size_ = 0;
          v119->__r_.__value_.__r.__words[2] = 0;
          v119->__r_.__value_.__r.__words[0] = 0;
          operations_research::sat::Constraint::WithName((uint64_t *)&v142, &v141);
          if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v141.__r_.__value_.__l.__data_);
          if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v140.__r_.__value_.__l.__data_);
          if (v138)
          {
            v139 = v138;
            operator delete(v138);
          }
          if (v136)
          {
            v137 = v136;
            operator delete(v136);
          }
          if (v133)
          {
            v134 = v133;
            operator delete(v133);
          }
          if (__p.__r_.__value_.__r.__words[0])
          {
            __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        if (v143)
        {
          v144 = v143;
          operator delete(v143);
        }
LABEL_159:
        ++v86;
      }
      while (v86 < (uint64_t)(*(_QWORD *)(v54[3] + 200) - *(_QWORD *)(v54[3] + 192)) >> 4);
LABEL_160:
      if (v147)
      {
        v148 = v147;
        operator delete(v147);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (++v51 == v52)
      {
        v51 = (unint64_t **)p_str;
        break;
      }
    }
  }
  if (v51)
  {
    v154 = (std::string *)v51;
    operator delete(v51);
  }
  CpGraph::GetTensors(*(CpGraph ***)this, (unint64_t **)&__p);
  v122 = __p.__r_.__value_.__l.__size_;
  v121 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
  {
    do
      ORToolsCpAllocator::AddResidentAllocationConstraint((uint64_t *)this, *v121++, v158);
    while (v121 != (unint64_t *)v122);
    v121 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
  }
  if (v121)
  {
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v121;
    operator delete(v121);
  }
  ORToolsCpAllocator::SetEarlyAllocationDecision(this);
  ORToolsCpAllocator::SetObjectiveFunction((CpAllocGraph **)this);
  operations_research::sat::CpModelProto::CpModelProto((operations_research::sat::CpModelProto *)&v136, *((const operations_research::sat::CpModelProto **)this + 26));
  v123 = *((_QWORD *)this + 26);
  v124 = *(CpAllocGraph **)this;
  ORToolsCpAllocator::GetRegionMaxCycle((CpAllocGraph **)this);
  ORToolsCpBasedAllocatorUtil::PrintConstraintProblem(v130, v123, (operations_research::sat *)&v136, v124);
  v125 = *((_QWORD *)this + 27);
  *(_DWORD *)(v125 + 20) |= 0x20000000u;
  *(_QWORD *)(v125 + 280) = 0x4066800000000000;
  operations_research::sat::SolveWithParameters((operations_research::sat *)&v136, (const operations_research::sat::CpModelProto *)v125, (std::string::size_type)&__p);
  if ((ORToolsCpAllocator::UpdateAllocationDecisionMap(this, (const operations_research::sat::CpSolverResponse *)&__p) & 1) == 0)
    goto LABEL_180;
  v126 = v135;
  if (v135 == 2)
  {
    v127 = (char *)this + 800;
    *((_BYTE *)this + 800) = 1;
    goto LABEL_178;
  }
  *((_BYTE *)this + 800) = v135 == 4;
  if (v126 != 4)
  {
LABEL_180:
    v128 = 0;
    goto LABEL_182;
  }
  v127 = (char *)this + 800;
LABEL_178:
  if (ORToolsCpAllocator::VerifyParallelDecision(this, (const operations_research::sat::CpSolverResponse *)&__p))
  {
    v128 = *v127 != 0;
  }
  else
  {
    v128 = 0;
    *v127 = 0;
  }
LABEL_182:
  operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)&__p);
  operations_research::sat::CpModelProto::~CpModelProto((operations_research::sat::CpModelProto *)&v136);
  if ((v155[0] & 1) != 0)
    operator delete((void *)v155[1]);
  return v128;
}

void sub_22D9C1AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p)
{
  uint64_t v44;
  void *v46;
  void *v47;

  if (*(char *)(v44 - 217) < 0)
    operator delete(*(void **)(v44 - 240));
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&__p);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a13);
  v46 = *(void **)(v44 - 208);
  if (v46)
  {
    *(_QWORD *)(v44 - 200) = v46;
    operator delete(v46);
  }
  v47 = *(void **)(v44 - 128);
  if (v47)
  {
    *(_QWORD *)(v44 - 120) = v47;
    operator delete(v47);
  }
  if ((*(_BYTE *)(v44 - 184) & 1) != 0)
    operator delete(*(void **)(v44 - 176));
  _Unwind_Resume(a1);
}

void ORToolsCpAllocator::FindMinMaxSchedule(CpAllocGraph **this, uint64_t *a2, uint64_t *a3)
{
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t *v13;

  *a2 = 0x7FFFFFFFFFFFFFFFLL;
  *a3 = 0x7FFFFFFFFFFFFFFFLL;
  CpAllocGraph::GetLayers(*this, 1, (uint64_t *)&v12);
  v6 = v12;
  v7 = v13;
  if (v12 != v13)
  {
    do
    {
      v8 = *v6;
      v11 = -1;
      CpAllocGraph::GetLayerSchedule(*this, v8, &v11);
      v9 = v11;
      v10 = *a2;
      if (v11 < *a2)
        v10 = v11;
      *a2 = v10;
      *a3 = v9;
      ++v6;
    }
    while (v6 != v7);
    v6 = v12;
  }
  if (v6)
  {
    v13 = v6;
    operator delete(v6);
  }
}

void sub_22D9C1EB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t ORToolsCpAllocator::GetChainExecutionVariableMaxCycle(ORToolsCpAllocator *this, const LayerCycleAndFootprintEstimator *a2, const LayerCycleAndFootprintEstimator *a3)
{
  unint64_t MaxCycleWithoutStall;
  unint64_t v6;
  unint64_t v7;

  MaxCycleWithoutStall = LayerCycleAndFootprintEstimator::GetMaxCycleWithoutStall(a2, 0, 0);
  v6 = LayerCycleAndFootprintEstimator::GetMaxCycleWithoutStall(a3, 0, 0);
  if (MaxCycleWithoutStall <= v6)
    v7 = v6;
  else
    v7 = MaxCycleWithoutStall;
  return v7 + LayerCycleAndFootprintEstimator::GetOverheadCycles((uint64_t **)a2);
}

uint64_t ORToolsCpAllocator::UpdateAllocationDecisionMap(ORToolsCpAllocator *this, const operations_research::sat::CpSolverResponse *a2)
{
  int v3;
  _QWORD *v5;
  _QWORD *j;
  char *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  _QWORD *v11;
  _BOOL4 v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t **v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t **v22;
  uint64_t **v23;
  unint64_t **v24;
  unint64_t **v25;
  _BOOL4 v26;
  unint64_t *v27;
  unint64_t i;
  uint64_t v29;
  _QWORD *v30;
  uint64_t **v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t **v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD **v39;
  _QWORD *v40;
  _QWORD **v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  _QWORD *v45;
  unint64_t v46;
  _QWORD *v47;
  int v48;
  _QWORD *v49;
  unint64_t v50;
  char *v52;
  _BOOL4 v53;
  int v54;
  _BOOL4 v55;
  _QWORD *v56;
  _QWORD *v57;
  unint64_t *v59;
  _QWORD *v60[2];
  unint64_t v61;
  unint64_t v62;
  void *__p;
  _QWORD *v64;
  unint64_t v65;

  v3 = *((_DWORD *)a2 + 38);
  if (v3 != 4 && v3 != 2)
  {
LABEL_72:
    ORToolsCpBasedAllocatorUtil::PrintSolverResult((_QWORD *)this + 28, *(CpAllocGraph **)this, (_QWORD *)this + 21, (_QWORD *)this + 6, (_QWORD *)this + 11, (_QWORD *)this + 16, a2);
    return 1;
  }
  CpGraph::GetTensors(*(CpGraph ***)this, (unint64_t **)&__p);
  v5 = __p;
  v56 = v64;
  if (__p == v64)
  {
LABEL_70:
    if (v5)
    {
      v64 = v5;
      operator delete(v5);
    }
    goto LABEL_72;
  }
  j = (_QWORD *)((char *)this + 8);
  v7 = (char *)this + 168;
  v52 = (char *)this + 8;
  while (1)
  {
    v62 = *v5;
    v8 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::find<unsigned long long>(j, &v62);
    if (v8 && (CpAllocUtils::IsL2Dependent(*((_DWORD *)v8 + 6)) & 1) != 0)
      goto LABEL_60;
    v59 = &v62;
    v9 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v7, &v62, (uint64_t)&std::piecewise_construct, &v59);
    v10 = operations_research::sat::SolutionBooleanValue((uint64_t)a2, *(_QWORD *)v9[3], *(_QWORD *)(v9[3] + 8));
    v59 = &v62;
    v11 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v7, &v62, (uint64_t)&std::piecewise_construct, &v59);
    v12 = operations_research::sat::SolutionBooleanValue((uint64_t)a2, *(_QWORD *)(v11[3] + 16), *(_QWORD *)(v11[3] + 24));
    v59 = &v62;
    v13 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v7, &v62, (uint64_t)&std::piecewise_construct, &v59);
    v14 = operations_research::sat::SolutionBooleanValue((uint64_t)a2, *(_QWORD *)(v13[3] + 32), *(_QWORD *)(v13[3] + 40));
    if ((v10 ^ v12) == v14)
      break;
    v54 = v14;
    v15 = *(_QWORD *)this;
    v16 = (_QWORD *)(*(_QWORD *)this + 64);
    v59 = &v62;
    v17 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v16, &v59);
    v18 = (_QWORD *)(v15 + 104);
    if (v17)
      v18 = v17 + 3;
    if (v18[1] == *v18)
    {
      v53 = 0;
    }
    else
    {
      v65 = -1;
      v61 = -1;
      ORToolsCpAllocator::FindL2DepPair((CpAllocGraph **)this, v62, &v65, &v61);
      v59 = &v65;
      v19 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this + 48, &v65, (uint64_t)&std::piecewise_construct, &v59);
      v53 = operations_research::sat::SolutionBooleanValue((uint64_t)a2, *(_QWORD *)(v19[3] + 160), *(_QWORD *)(v19[3] + 168));
      LOBYTE(v10) = v10 & ~v53;
    }
    v20 = *(_QWORD *)this;
    v21 = (_QWORD *)(*(_QWORD *)this + 24);
    v59 = &v62;
    v22 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v21, &v59);
    v55 = v12;
    v57 = v5;
    v23 = (uint64_t **)(v20 + 104);
    if (v22)
      v23 = v22 + 3;
    v25 = (unint64_t **)*v23;
    v24 = (unint64_t **)v23[1];
    if (*v23 == (uint64_t *)v24)
    {
      v26 = 0;
      if ((v10 & 1) == 0)
        goto LABEL_50;
    }
    else
    {
      v26 = 0;
      do
      {
        v27 = *v25;
        v60[0] = 0;
        v60[1] = 0;
        v59 = (unint64_t *)v60;
        if (CpAllocGraph::GetInPlacePorts(*(_QWORD *)this, *v27, (uint64_t **)&v59))
        {
          for (i = 0; ; ++i)
          {
            v29 = *(_QWORD *)this;
            v30 = (_QWORD *)(*(_QWORD *)this + 64);
            v65 = (unint64_t)v27;
            v31 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v30, (unint64_t **)&v65);
            v32 = (_QWORD *)(v29 + 104);
            if (v31)
              v32 = v31 + 3;
            if (i >= (uint64_t)(v32[1] - *v32) >> 3)
              break;
            v33 = *(_QWORD *)this;
            v34 = (_QWORD *)(*(_QWORD *)this + 64);
            v65 = (unint64_t)v27;
            v35 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v34, (unint64_t **)&v65);
            v36 = (_QWORD *)(v33 + 104);
            if (v35)
              v36 = v35 + 3;
            v37 = v60[0];
            if (**(_QWORD **)(*v36 + 8 * i) == v62 && v60[0] != 0)
            {
              v39 = v60;
              do
              {
                v40 = v37;
                v41 = v39;
                v42 = v37[4];
                v43 = v37 + 1;
                if (v42 >= i)
                {
                  v43 = v40;
                  v39 = (_QWORD **)v40;
                }
                v37 = (_QWORD *)*v43;
              }
              while (v37);
              if (v39 != v60)
              {
                if (v42 < i)
                  v40 = v41;
                if (v40[4] <= i)
                {
                  v65 = (unint64_t)v27;
                  v44 = (uint64_t *)(*(_QWORD *)(std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this + 48, v27, (uint64_t)&std::piecewise_construct, (_QWORD **)&v65)[3]+ 192)+ 16 * i);
                  v26 = operations_research::sat::SolutionBooleanValue((uint64_t)a2, *v44, v44[1]);
                  LOBYTE(v10) = !v26 & v10;
                }
              }
            }
          }
        }
        std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v59, v60[0]);
        ++v25;
      }
      while (v25 != v24);
      if ((v10 & 1) == 0)
      {
LABEL_50:
        v5 = v57;
        v7 = (char *)this + 168;
        j = (_QWORD *)((char *)this + 8);
        if (v55)
        {
          v59 = &v62;
          v47 = std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v52, &v62, (uint64_t)&std::piecewise_construct, &v59);
          v48 = 1;
          goto LABEL_59;
        }
        if (v54)
        {
          v59 = &v62;
          v47 = std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v52, &v62, (uint64_t)&std::piecewise_construct, &v59);
          v48 = 2;
          goto LABEL_59;
        }
        if (v53 || v26)
        {
          if (!v26 && v53)
          {
            v49 = *(_QWORD **)(*(_QWORD *)this + 392);
            if (!v49)
            {
LABEL_67:
              v59 = &v62;
              v47 = std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v52, &v62, (uint64_t)&std::piecewise_construct, &v59);
              v48 = 3;
              goto LABEL_59;
            }
            while (1)
            {
              v50 = v49[4];
              if (v50 <= v62)
              {
                if (v50 >= v62)
                {
                  v59 = &v62;
                  v47 = std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v52, &v62, (uint64_t)&std::piecewise_construct, &v59);
                  v48 = 7;
                  goto LABEL_59;
                }
                ++v49;
              }
              v49 = (_QWORD *)*v49;
              if (!v49)
                goto LABEL_67;
            }
          }
          v59 = &v62;
          v47 = std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v52, &v62, (uint64_t)&std::piecewise_construct, &v59);
          if (v53 || !v26)
            v48 = 5;
          else
            v48 = 4;
LABEL_59:
          *((_DWORD *)v47 + 6) = v48;
        }
        goto LABEL_60;
      }
    }
    v45 = *(_QWORD **)(*(_QWORD *)this + 392);
    v5 = v57;
    v7 = (char *)this + 168;
    for (j = (_QWORD *)((char *)this + 8); v45; v45 = (_QWORD *)*v45)
    {
      v46 = v45[4];
      if (v46 <= v62)
      {
        if (v46 >= v62)
        {
          v59 = &v62;
          v47 = std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v52, &v62, (uint64_t)&std::piecewise_construct, &v59);
          v48 = 6;
          goto LABEL_59;
        }
        ++v45;
      }
    }
    v59 = &v62;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v52, &v62, (uint64_t)&std::piecewise_construct, &v59)+ 6) = 0;
LABEL_60:
    if (++v5 == v56)
    {
      v5 = __p;
      goto LABEL_70;
    }
  }
  if (__p)
  {
    v64 = __p;
    operator delete(__p);
  }
  return 0;
}

void sub_22D9C24F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ORToolsCpAllocator::VerifyParallelDecision(ORToolsCpAllocator *this, const operations_research::sat::CpSolverResponse *a2)
{
  uint64_t **v2;
  _QWORD *v5;
  _BOOL4 v6;
  _BOOL4 v7;
  _QWORD *v8;
  _BOOL4 v9;
  unint64_t *v10;
  unint64_t *v11;
  _QWORD *v12;
  int v13;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  _QWORD *OutputTensor;

  v2 = (uint64_t **)*((_QWORD *)this + 8);
  if (!v2)
    return 1;
  v5 = (_QWORD *)((char *)this + 168);
  while (1)
  {
    v6 = operations_research::sat::SolutionBooleanValue((uint64_t)a2, v2[3][20], v2[3][21]);
    v7 = operations_research::sat::SolutionBooleanValue((uint64_t)a2, v2[3][22], v2[3][23]);
    OutputTensor = 0;
    OutputTensor = CpGraph::GetOutputTensor(*(CpGraph **)this, (unint64_t *)v2[2]);
    v8 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v5, (unint64_t *)&OutputTensor);
    if (!v8)
      return 0;
    v9 = operations_research::sat::SolutionBooleanValue((uint64_t)a2, *(_QWORD *)(v8[3] + 32), *(_QWORD *)(v8[3] + 40));
    CpGraph::GetInputTensors(*(CpGraph **)this, (unint64_t *)v2[2], (uint64_t)&v16);
    v10 = v16;
    v11 = v17;
    if (v16 == v17)
    {
      v13 = 0;
      if (v16)
        goto LABEL_13;
    }
    else
    {
      while (1)
      {
        v15 = 0;
        v15 = *v10;
        v12 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v5, &v15);
        if (v12)
        {
          if (operations_research::sat::SolutionBooleanValue((uint64_t)a2, *(_QWORD *)(v12[3] + 32), *(_QWORD *)(v12[3] + 40)))
          {
            break;
          }
        }
        if (++v10 == v11)
        {
          v13 = 0;
          goto LABEL_12;
        }
      }
      v13 = 1;
LABEL_12:
      v10 = v16;
      if (v16)
      {
LABEL_13:
        v17 = v10;
        operator delete(v10);
      }
    }
    if (((v6 || v7) | v9 | v13) == operations_research::sat::SolutionBooleanValue((uint64_t)a2, v2[3][27], v2[3][28]))
      return 0;
    v2 = (uint64_t **)*v2;
    if (!v2)
      return 1;
  }
}

void sub_22D9C26B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *ORToolsCpAllocator::GetEarlyAllocationDecision(CpGraph **this, unint64_t *a2, BOOL *a3, BOOL *a4)
{
  unint64_t *v8;
  unint64_t *v9;
  _QWORD *v10;
  _QWORD *result;
  BOOL v12;
  unint64_t v13;
  unint64_t *OutputTensor;
  unint64_t *v15;

  *a3 = 1;
  CpGraph::GetInputTensors(*this, a2, (uint64_t)&OutputTensor);
  v8 = OutputTensor;
  v9 = v15;
  if (OutputTensor != v15)
  {
    while (1)
    {
      v13 = *v8;
      v10 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(this + 1, &v13);
      if (!v10 || *((_DWORD *)v10 + 6))
        break;
      if (++v8 == v9)
        goto LABEL_7;
    }
    *a3 = 0;
LABEL_7:
    v8 = OutputTensor;
  }
  if (v8)
  {
    v15 = v8;
    operator delete(v8);
  }
  OutputTensor = CpGraph::GetOutputTensor(*this, a2);
  result = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(this + 1, (unint64_t *)&OutputTensor);
  if (result)
    v12 = *((_DWORD *)result + 6) == 0;
  else
    v12 = 0;
  *a4 = v12;
  return result;
}

void sub_22D9C27BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<operations_research::sat::BoolVar>::__insert_with_size[abi:ne180100]<std::__wrap_iter<operations_research::sat::BoolVar const*>,std::__wrap_iter<operations_research::sat::BoolVar const*>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  char *v28;
  uint64_t v29;
  char *v30;
  __int128 v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 4)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 4);
    if (v14 >> 60)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)v13) >> 4;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 3 > v14)
      v14 = v16 >> 3;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
      v17 = 0xFFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>(v9, v17);
    else
      v18 = 0;
    v28 = &v18[16 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[16 * v17];
    v29 = 16 * a5;
    v30 = &v28[16 * a5];
    do
    {
      v31 = *(_OWORD *)v7;
      v7 += 16;
      *(_OWORD *)v28 = v31;
      v28 += 16;
      v29 -= 16;
    }
    while (v29);
    v35 = v30;
    v5 = (char *)std::vector<operations_research::sat::BoolVar>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 4;
  if (v20 >= a5)
  {
    v21 = &__src[16 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[16 * a5];
    v25 = &v23[-16 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_OWORD *)v25;
        v25 += 16;
        *(_OWORD *)v26 = v27;
        v26 += 16;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-16 * ((v23 - v24) >> 4)], v5, v23 - v24 - 4);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7 - 4);
    return v5;
  }
  v21 = &__src[16 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[16 * v20], v22 - 4);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_22D9C29B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_DWORD *std::vector<operations_research::sat::BoolVar>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  _DWORD *v5;
  char *v6;
  _DWORD *v7;
  char *v8;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  uint64_t v12;
  int64_t v13;
  char *v14;
  void *v15;
  void *v16;

  v5 = *(_DWORD **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(_DWORD **)(a2 + 8);
    do
    {
      v9 = *((_QWORD *)v8 - 2);
      v8 -= 16;
      v10 = *((_DWORD *)v8 + 2);
      *((_QWORD *)v7 - 2) = v9;
      v7 -= 4;
      v7[2] = v10;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v11 = a1[1];
  v12 = *(_QWORD *)(a2 + 16);
  v13 = v11 - __src;
  if (v11 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v13 - 4);
    v7 = *(_DWORD **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v12 + v13;
  v14 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v14;
  v15 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v15;
  v16 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v16;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

uint64_t std::unordered_map<unsigned long long,CpAllocUtils::AllocationType>::unordered_map(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,CpAllocUtils::AllocationType> const&>(a1, i + 2, (_OWORD *)i + 1);
  return a1;
}

void sub_22D9C2B18(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,CpAllocUtils::AllocationType> const&>(uint64_t a1, unint64_t *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v6;
  *((_OWORD *)i + 1) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_22D9C2D34(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::__deallocate_node(a1, *(ORToolsLayerScheduleVariable ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::__deallocate_node(uint64_t a1, ORToolsLayerScheduleVariable **a2)
{
  ORToolsLayerScheduleVariable **v2;
  ORToolsLayerScheduleVariable *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *v2;
      std::unique_ptr<ORToolsLayerScheduleVariable>::reset[abi:ne180100](v2 + 3, 0);
      operator delete(v2);
      v2 = (ORToolsLayerScheduleVariable **)v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>>>::__deallocate_node(a1, *(ORToolsChainScheduleVariable ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>>>::__deallocate_node(uint64_t a1, ORToolsChainScheduleVariable **a2)
{
  ORToolsChainScheduleVariable **v2;
  ORToolsChainScheduleVariable *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *v2;
      std::unique_ptr<ORToolsChainScheduleVariable>::reset[abi:ne180100](v2 + 3, 0);
      operator delete(v2);
      v2 = (ORToolsChainScheduleVariable **)v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>>>::__deallocate_node(a1, *(ORToolsL2DepScheduleVariable ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>>>::__deallocate_node(uint64_t a1, ORToolsL2DepScheduleVariable **a2)
{
  ORToolsL2DepScheduleVariable **v2;
  ORToolsL2DepScheduleVariable *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *v2;
      std::unique_ptr<ORToolsL2DepScheduleVariable>::reset[abi:ne180100](v2 + 3, 0);
      operator delete(v2);
      v2 = (ORToolsL2DepScheduleVariable **)v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::__deallocate_node(a1, *(ORToolsCpL2AccessVariable ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::__deallocate_node(uint64_t a1, ORToolsCpL2AccessVariable **a2)
{
  ORToolsCpL2AccessVariable **v2;
  ORToolsCpL2AccessVariable *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *v2;
      std::unique_ptr<ORToolsTensorAllocationVariable>::reset[abi:ne180100](v2 + 3, 0);
      operator delete(v2);
      v2 = (ORToolsCpL2AccessVariable **)v3;
    }
    while (v3);
  }
}

ORToolsCpL2AccessVariable *std::unique_ptr<ORToolsTensorAllocationVariable>::reset[abi:ne180100](ORToolsCpL2AccessVariable **a1, ORToolsCpL2AccessVariable *a2)
{
  ORToolsCpL2AccessVariable *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    ORToolsCpL2AccessVariable::~ORToolsCpL2AccessVariable(result);
    JUMPOUT(0x22E31DF78);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_22D9C3190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  ORToolsCpL2AccessVariable **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsTensorAllocationVariable>>,void *>>>::operator()[abi:ne180100](uint64_t a1, ORToolsCpL2AccessVariable **__p)
{
  if (*(_BYTE *)(a1 + 8))
    std::unique_ptr<ORToolsTensorAllocationVariable>::reset[abi:ne180100](__p + 3, 0);
  if (__p)
    operator delete(__p);
}

ORToolsLayerScheduleVariable *std::unique_ptr<ORToolsLayerScheduleVariable>::reset[abi:ne180100](ORToolsLayerScheduleVariable **a1, ORToolsLayerScheduleVariable *a2)
{
  ORToolsLayerScheduleVariable *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    ORToolsLayerScheduleVariable::~ORToolsLayerScheduleVariable(result);
    JUMPOUT(0x22E31DF78);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_22D9C3458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  ORToolsLayerScheduleVariable **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,void *>>>::operator()[abi:ne180100](uint64_t a1, ORToolsLayerScheduleVariable **__p)
{
  if (*(_BYTE *)(a1 + 8))
    std::unique_ptr<ORToolsLayerScheduleVariable>::reset[abi:ne180100](__p + 3, 0);
  if (__p)
    operator delete(__p);
}

ORToolsChainScheduleVariable *std::unique_ptr<ORToolsChainScheduleVariable>::reset[abi:ne180100](ORToolsChainScheduleVariable **a1, ORToolsChainScheduleVariable *a2)
{
  ORToolsChainScheduleVariable *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    ORToolsChainScheduleVariable::~ORToolsChainScheduleVariable(result);
    JUMPOUT(0x22E31DF78);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_22D9C3720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  ORToolsChainScheduleVariable **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsChainScheduleVariable>>,void *>>>::operator()[abi:ne180100](uint64_t a1, ORToolsChainScheduleVariable **__p)
{
  if (*(_BYTE *)(a1 + 8))
    std::unique_ptr<ORToolsChainScheduleVariable>::reset[abi:ne180100](__p + 3, 0);
  if (__p)
    operator delete(__p);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsLayerScheduleVariable>>>>::find<unsigned long long>(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

ORToolsL2DepScheduleVariable *std::unique_ptr<ORToolsL2DepScheduleVariable>::reset[abi:ne180100](ORToolsL2DepScheduleVariable **a1, ORToolsL2DepScheduleVariable *a2)
{
  ORToolsL2DepScheduleVariable *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    ORToolsL2DepScheduleVariable::~ORToolsL2DepScheduleVariable(result);
    JUMPOUT(0x22E31DF78);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_22D9C3A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  ORToolsL2DepScheduleVariable **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unique_ptr<ORToolsL2DepScheduleVariable>>,void *>>>::operator()[abi:ne180100](uint64_t a1, ORToolsL2DepScheduleVariable **__p)
{
  if (*(_BYTE *)(a1 + 8))
    std::unique_ptr<ORToolsL2DepScheduleVariable>::reset[abi:ne180100](__p + 3, 0);
  if (__p)
    operator delete(__p);
}

uint64_t std::set<unsigned long>::set[abi:ne180100]<std::__wrap_iter<unsigned long long *>>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  _QWORD *v4;
  unint64_t *v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
      std::__tree<unsigned long>::__emplace_hint_unique_impl<unsigned long long &>((uint64_t **)a1, v4, v6++);
    while (v6 != a3);
  }
  return a1;
}

void sub_22D9C3B60(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<unsigned long>::__emplace_hint_unique_impl<unsigned long long &>(uint64_t **a1, _QWORD *a2, unint64_t *a3)
{
  unint64_t *v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v10;
  uint64_t v11;

  v6 = (unint64_t *)operator new(0x28uLL);
  v6[4] = *a3;
  v7 = (uint64_t **)std::__tree<unsigned long long>::__find_equal<unsigned long long>(a1, a2, &v11, &v10, v6 + 4);
  v8 = *v7;
  if (*v7)
  {
    operator delete(v6);
    return v8;
  }
  else
  {
    std::__tree<unsigned long long>::__insert_node_at(a1, v11, v7, (uint64_t *)v6);
  }
  return (uint64_t *)v6;
}

void sub_22D9C3C08(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v7;
  v11[2] = **a4;
  *((_DWORD *)v11 + 6) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_22D9C3E28(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ORToolsLayerScheduleVariable::ORToolsLayerScheduleVariable(uint64_t a1, operations_research::sat::CpModelBuilder *a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t *a6, uint64_t *a7, const ComputeCycleEstimator *a8, uint64_t a9, uint64_t a10, operations_research::Domain *a11, uint64_t a12)
{
  uint64_t v19;
  size_t v20;
  std::string *p_p;
  const std::string::value_type *v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  std::string *v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  std::string *v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  size_t v35;
  std::string *v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  std::string *v41;
  const void *v42;
  uint64_t v43;
  ORToolsCpComputeConstant *v44;
  uint64_t v45;
  uint64_t v46;
  size_t v47;
  std::string *v48;
  const void *v49;
  uint64_t v50;
  uint64_t v51;
  size_t v52;
  std::string *v53;
  const void *v54;
  uint64_t v55;
  uint64_t v56;
  size_t v57;
  std::string *v58;
  const void *v59;
  uint64_t v60;
  uint64_t v61;
  size_t v62;
  std::string *v63;
  const void *v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  size_t v68;
  std::string *v69;
  const void *v70;
  uint64_t v71;
  uint64_t v72;
  size_t v73;
  std::string *v74;
  const void *v75;
  uint64_t v76;
  std::string v79;
  std::string v80;
  std::string __p;
  operations_research::sat::CpModelBuilder *v82;
  uint64_t v83;

  v82 = operations_research::sat::CpModelBuilder::NewConstant(a2, 0);
  v83 = v19;
  if (*((char *)a4 + 23) >= 0)
    v20 = *((unsigned __int8 *)a4 + 23);
  else
    v20 = *((_QWORD *)a4 + 1);
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v20 + 12);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v20)
  {
    if (*((char *)a4 + 23) >= 0)
      v22 = (const std::string::value_type *)a4;
    else
      v22 = *(const std::string::value_type **)a4;
    memmove(p_p, v22, v20);
  }
  strcpy((char *)p_p + v20, ":layer_begin");
  *(_QWORD *)a1 = operations_research::sat::BoolVar::WithName((int *)&v82, &__p);
  *(_QWORD *)(a1 + 8) = v23;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v82 = operations_research::sat::CpModelBuilder::NewIntVar(a2, a11);
  v83 = v24;
  if (*((char *)a4 + 23) >= 0)
    v25 = *((unsigned __int8 *)a4 + 23);
  else
    v25 = *((_QWORD *)a4 + 1);
  v26 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v25 + 11);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v25)
  {
    if (*((char *)a4 + 23) >= 0)
      v27 = a4;
    else
      v27 = *(const void **)a4;
    memmove(v26, v27, v25);
  }
  strcpy((char *)v26 + v25, ":layer_time");
  *(_QWORD *)(a1 + 16) = operations_research::sat::BoolVar::WithName((int *)&v82, &__p);
  *(_QWORD *)(a1 + 24) = v28;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v82 = operations_research::sat::CpModelBuilder::NewIntVar(a2, a11);
  v83 = v29;
  if (*((char *)a4 + 23) >= 0)
    v30 = *((unsigned __int8 *)a4 + 23);
  else
    v30 = *((_QWORD *)a4 + 1);
  v31 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v30 + 10);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v30)
  {
    if (*((char *)a4 + 23) >= 0)
      v32 = a4;
    else
      v32 = *(const void **)a4;
    memmove(v31, v32, v30);
  }
  strcpy((char *)v31 + v30, ":layer_end");
  *(_QWORD *)(a1 + 32) = operations_research::sat::BoolVar::WithName((int *)&v82, &__p);
  *(_QWORD *)(a1 + 40) = v33;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*((char *)a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v80, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  else
    v80 = *(std::string *)a4;
  ORToolsLayerScheduleVariable::CreateReadEndVariables(a2, (const void **)&v80.__r_.__value_.__l.__data_, (a6[1] - *a6) >> 3, a11, (uint64_t **)(a1 + 48));
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v80.__r_.__value_.__l.__data_);
  v82 = operations_research::sat::CpModelBuilder::NewIntVar(a2, a11);
  v83 = v34;
  if (*((char *)a4 + 23) >= 0)
    v35 = *((unsigned __int8 *)a4 + 23);
  else
    v35 = *((_QWORD *)a4 + 1);
  v36 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v35 + 12);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v36 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v35)
  {
    if (*((char *)a4 + 23) >= 0)
      v37 = a4;
    else
      v37 = *(const void **)a4;
    memmove(v36, v37, v35);
  }
  strcpy((char *)v36 + v35, ":compute_end");
  *(_QWORD *)(a1 + 72) = operations_research::sat::BoolVar::WithName((int *)&v82, &__p);
  *(_QWORD *)(a1 + 80) = v38;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v82 = operations_research::sat::CpModelBuilder::NewIntVar(a2, a11);
  v83 = v39;
  if (*((char *)a4 + 23) >= 0)
    v40 = *((unsigned __int8 *)a4 + 23);
  else
    v40 = *((_QWORD *)a4 + 1);
  v41 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v40 + 10);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v40)
  {
    if (*((char *)a4 + 23) >= 0)
      v42 = a4;
    else
      v42 = *(const void **)a4;
    memmove(v41, v42, v40);
  }
  strcpy((char *)v41 + v40, ":write_end");
  *(_QWORD *)(a1 + 88) = operations_research::sat::BoolVar::WithName((int *)&v82, &__p);
  *(_QWORD *)(a1 + 96) = v43;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  ORToolsLayerScheduleVariable::CreateInputL2AccessVariables((uint64_t)a2, a6, a7, (uint64_t **)(a1 + 104));
  v44 = (ORToolsCpComputeConstant *)operator new();
  ORToolsCpComputeConstant::ORToolsCpComputeConstant(v44, a2, a8);
  *(_QWORD *)(a1 + 128) = v44;
  v45 = operator new();
  ORToolsCpL2AccessVariable::ORToolsCpL2AccessVariable(v45, a2, a9, a10);
  *(_QWORD *)(a1 + 136) = v45;
  v82 = operations_research::sat::CpModelBuilder::NewIntVar(a2, a11);
  v83 = v46;
  if (*((char *)a4 + 23) >= 0)
    v47 = *((unsigned __int8 *)a4 + 23);
  else
    v47 = *((_QWORD *)a4 + 1);
  v48 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v47 + 29);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v48 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v47)
  {
    if (*((char *)a4 + 23) >= 0)
      v49 = a4;
    else
      v49 = *(const void **)a4;
    memmove(v48, v49, v47);
  }
  strcpy((char *)v48 + v47, ":pipeline_stall_overhead_time");
  *(_QWORD *)(a1 + 144) = operations_research::sat::BoolVar::WithName((int *)&v82, &__p);
  *(_QWORD *)(a1 + 152) = v50;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v82 = operations_research::sat::CpModelBuilder::NewBoolVar(a2);
  v83 = v51;
  if (*((char *)a4 + 23) >= 0)
    v52 = *((unsigned __int8 *)a4 + 23);
  else
    v52 = *((_QWORD *)a4 + 1);
  v53 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v52 + 16);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v53 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v52)
  {
    if (*((char *)a4 + 23) >= 0)
      v54 = a4;
    else
      v54 = *(const void **)a4;
    memmove(v53, v54, v52);
  }
  strcpy((char *)v53 + v52, ":l2_dep_producer");
  *(_QWORD *)(a1 + 160) = operations_research::sat::BoolVar::WithName((int *)&v82, &__p);
  *(_QWORD *)(a1 + 168) = v55;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v82 = operations_research::sat::CpModelBuilder::NewBoolVar(a2);
  v83 = v56;
  if (*((char *)a4 + 23) >= 0)
    v57 = *((unsigned __int8 *)a4 + 23);
  else
    v57 = *((_QWORD *)a4 + 1);
  v58 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v57 + 16);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v58 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v57)
  {
    if (*((char *)a4 + 23) >= 0)
      v59 = a4;
    else
      v59 = *(const void **)a4;
    memmove(v58, v59, v57);
  }
  strcpy((char *)v58 + v57, ":l2_dep_consumer");
  *(_QWORD *)(a1 + 176) = operations_research::sat::BoolVar::WithName((int *)&v82, &__p);
  *(_QWORD *)(a1 + 184) = v60;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*((char *)a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v79, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  else
    v79 = *(std::string *)a4;
  ORToolsLayerScheduleVariable::CreateInPlaceVariables(a2, (const void **)&v79.__r_.__value_.__l.__data_, a6, (uint64_t **)(a1 + 192));
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  v82 = operations_research::sat::CpModelBuilder::NewBoolVar(a2);
  v83 = v61;
  if (*((char *)a4 + 23) >= 0)
    v62 = *((unsigned __int8 *)a4 + 23);
  else
    v62 = *((_QWORD *)a4 + 1);
  v63 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v62 + 16);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v63 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v62)
  {
    if (*((char *)a4 + 23) >= 0)
      v64 = a4;
    else
      v64 = *(const void **)a4;
    memmove(v63, v64, v62);
  }
  strcpy((char *)v63 + v62, ":has_no_parallel");
  *(_QWORD *)(a1 + 216) = operations_research::sat::BoolVar::WithName((int *)&v82, &__p);
  *(_QWORD *)(a1 + 224) = v65;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 232) = a3;
  *(_QWORD *)(a1 + 240) = a5;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 248), *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v66 = *a4;
    *(_QWORD *)(a1 + 264) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 248) = v66;
  }
  *(_QWORD *)(a1 + 272) = a12;
  v82 = operations_research::sat::CpModelBuilder::NewIntVar(a2, a11);
  v83 = v67;
  if (*((char *)a4 + 23) >= 0)
    v68 = *((unsigned __int8 *)a4 + 23);
  else
    v68 = *((_QWORD *)a4 + 1);
  v69 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v68 + 39);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v69 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v68)
  {
    if (*((char *)a4 + 23) >= 0)
      v70 = a4;
    else
      v70 = *(const void **)a4;
    memmove(v69, v70, v68);
  }
  strcpy((char *)v69 + v68, ":dual_input_pe_nonresident_read_latency");
  *(_QWORD *)(a1 + 280) = operations_research::sat::BoolVar::WithName((int *)&v82, &__p);
  *(_QWORD *)(a1 + 288) = v71;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v82 = operations_research::sat::CpModelBuilder::NewIntVar(a2, a11);
  v83 = v72;
  if (*((char *)a4 + 23) >= 0)
    v73 = *((unsigned __int8 *)a4 + 23);
  else
    v73 = *((_QWORD *)a4 + 1);
  v74 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v73 + 35);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v74 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v73)
  {
    if (*((char *)a4 + 23) >= 0)
      v75 = a4;
    else
      v75 = *(const void **)a4;
    memmove(v74, v75, v73);
  }
  strcpy((char *)v74 + v73, ":dual_input_pe_nonresident_read_end");
  *(_QWORD *)(a1 + 296) = operations_research::sat::BoolVar::WithName((int *)&v82, &__p);
  *(_QWORD *)(a1 + 304) = v76;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

{
  return ORToolsLayerScheduleVariable::ORToolsLayerScheduleVariable(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

void sub_22D9C4724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  void **v28;
  void *v30;
  void *v31;

  v30 = *v28;
  if (*v28)
  {
    *(_QWORD *)(v27 + 200) = v30;
    operator delete(v30);
  }
  std::unique_ptr<ORToolsCpL2AccessVariable>::reset[abi:ne180100]((ORToolsCpL2AccessVariable **)(v27 + 136), 0);
  std::unique_ptr<ORToolsCpComputeConstant>::reset[abi:ne180100]((ORToolsCpComputeConstant **)(v27 + 128), 0);
  std::vector<std::unique_ptr<ORToolsCpL2AccessVariable>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v31 = *a9;
  if (*a9)
  {
    *(_QWORD *)(v27 + 56) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(a1);
}

void sub_22D9C4824()
{
  uint64_t v0;

  MEMORY[0x22E31DF78](v0, 0x1020C4036FA8A49);
  JUMPOUT(0x22D9C47F0);
}

void sub_22D9C4844()
{
  JUMPOUT(0x22D9C47F0);
}

void sub_22D9C484C()
{
  uint64_t v0;

  MEMORY[0x22E31DF78](v0, 0x1020C401AC86FC1);
  JUMPOUT(0x22D9C47FCLL);
}

void sub_22D9C486C()
{
  JUMPOUT(0x22D9C47FCLL);
}

void sub_22D9C4874(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  JUMPOUT(0x22D9C4808);
}

void sub_22D9C48A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    JUMPOUT(0x22D9C4818);
  JUMPOUT(0x22D9C481CLL);
}

void sub_22D9C48BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    JUMPOUT(0x22D9C4818);
  JUMPOUT(0x22D9C481CLL);
}

void ORToolsLayerScheduleVariable::CreateReadEndVariables(operations_research::sat::CpModelBuilder *a1@<X1>, const void **a2@<X2>, unint64_t a3@<X3>, const operations_research::Domain *a4@<X4>, uint64_t **a5@<X8>)
{
  uint64_t v10;
  size_t v11;
  std::string *p_p;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t *v26;
  char *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  size_t v33;
  std::string *v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t *v48;
  char *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  int v53;
  std::string __p;
  operations_research::sat::CpModelBuilder *v55;
  uint64_t v56;

  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v55 = operations_research::sat::CpModelBuilder::NewIntVar(a1, a4);
  v56 = v10;
  if (*((char *)a2 + 23) >= 0)
    v11 = *((unsigned __int8 *)a2 + 23);
  else
    v11 = (size_t)a2[1];
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v11 + 11);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v11)
  {
    if (*((char *)a2 + 23) >= 0)
      v13 = a2;
    else
      v13 = *a2;
    memmove(p_p, v13, v11);
  }
  strcpy((char *)p_p + v11, ":read_end_0");
  v14 = operations_research::sat::BoolVar::WithName((int *)&v55, &__p);
  v16 = v14;
  v17 = v15;
  v18 = (unint64_t)a5[2];
  v19 = a5[1];
  if ((unint64_t)v19 >= v18)
  {
    v21 = ((char *)v19 - (char *)*a5) >> 4;
    v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 60)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v23 = v18 - (_QWORD)*a5;
    if (v23 >> 3 > v22)
      v22 = v23 >> 3;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
      v24 = 0xFFFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
      v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)(a5 + 2), v24);
    else
      v25 = 0;
    v26 = (uint64_t *)&v25[16 * v21];
    v27 = &v25[16 * v24];
    *v26 = v16;
    v26[1] = v17;
    v20 = v26 + 2;
    v29 = *a5;
    v28 = a5[1];
    if (v28 != *a5)
    {
      do
      {
        v30 = *(v28 - 2);
        v28 -= 2;
        v31 = *((_DWORD *)v28 + 2);
        *(v26 - 2) = v30;
        v26 -= 2;
        *((_DWORD *)v26 + 2) = v31;
      }
      while (v28 != v29);
      v28 = *a5;
    }
    *a5 = v26;
    a5[1] = v20;
    a5[2] = (uint64_t *)v27;
    if (v28)
      operator delete(v28);
  }
  else
  {
    *v19 = v14;
    v19[1] = v15;
    v20 = v19 + 2;
  }
  a5[1] = v20;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (a3 >= 2)
  {
    v55 = operations_research::sat::CpModelBuilder::NewIntVar(a1, a4);
    v56 = v32;
    if (*((char *)a2 + 23) >= 0)
      v33 = *((unsigned __int8 *)a2 + 23);
    else
      v33 = (size_t)a2[1];
    v34 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v33 + 11);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v33)
    {
      if (*((char *)a2 + 23) >= 0)
        v35 = a2;
      else
        v35 = *a2;
      memmove(v34, v35, v33);
    }
    strcpy((char *)v34 + v33, ":read_end_1");
    v36 = operations_research::sat::BoolVar::WithName((int *)&v55, &__p);
    v38 = v36;
    v39 = v37;
    v41 = a5[1];
    v40 = (unint64_t)a5[2];
    if ((unint64_t)v41 >= v40)
    {
      v43 = ((char *)v41 - (char *)*a5) >> 4;
      v44 = v43 + 1;
      if ((unint64_t)(v43 + 1) >> 60)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v45 = v40 - (_QWORD)*a5;
      if (v45 >> 3 > v44)
        v44 = v45 >> 3;
      if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0)
        v46 = 0xFFFFFFFFFFFFFFFLL;
      else
        v46 = v44;
      if (v46)
        v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)(a5 + 2), v46);
      else
        v47 = 0;
      v48 = (uint64_t *)&v47[16 * v43];
      v49 = &v47[16 * v46];
      *v48 = v38;
      v48[1] = v39;
      v42 = v48 + 2;
      v51 = *a5;
      v50 = a5[1];
      if (v50 != *a5)
      {
        do
        {
          v52 = *(v50 - 2);
          v50 -= 2;
          v53 = *((_DWORD *)v50 + 2);
          *(v48 - 2) = v52;
          v48 -= 2;
          *((_DWORD *)v48 + 2) = v53;
        }
        while (v50 != v51);
        v50 = *a5;
      }
      *a5 = v48;
      a5[1] = v42;
      a5[2] = (uint64_t *)v49;
      if (v50)
        operator delete(v50);
    }
    else
    {
      *v41 = v36;
      v41[1] = v37;
      v42 = v41 + 2;
    }
    a5[1] = v42;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_22D9C4C1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void *v16;

  v16 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void ORToolsLayerScheduleVariable::CreateInputL2AccessVariables(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, uint64_t **a4@<X8>)
{
  uint64_t v5;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  int64x2_t v25;
  ORToolsCpL2AccessVariable *v26;
  uint64_t *v27;
  uint64_t v28;
  int64x2_t v29;
  char *v30;
  _QWORD *v31;
  ORToolsCpL2AccessVariable *v32;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v5 = *a2;
  if (a2[1] != *a2)
  {
    v9 = 0;
    do
    {
      v10 = *a3;
      v11 = operator new();
      ORToolsCpL2AccessVariable::ORToolsCpL2AccessVariable(v11, a1, *(_QWORD *)(v5 + 8 * v9), *(_QWORD *)(v10 + 8 * v9));
      v32 = (ORToolsCpL2AccessVariable *)v11;
      v12 = a4[1];
      v13 = (unint64_t)a4[2];
      if ((unint64_t)v12 >= v13)
      {
        v14 = v12 - *a4;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v16 = v13 - (_QWORD)*a4;
        if (v16 >> 2 > v15)
          v15 = v16 >> 2;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        v31 = a4 + 2;
        if (v17)
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)(a4 + 2), v17);
        else
          v18 = 0;
        v19 = (uint64_t *)&v18[8 * v14];
        v20 = &v18[8 * v17];
        v30 = v20;
        v32 = 0;
        *v19 = v11;
        v21 = v19 + 1;
        v29.i64[1] = (uint64_t)(v19 + 1);
        v23 = *a4;
        v22 = a4[1];
        if (v22 == *a4)
        {
          v26 = 0;
          v25 = vdupq_n_s64((unint64_t)v22);
        }
        else
        {
          do
          {
            v24 = *--v22;
            *v22 = 0;
            *--v19 = v24;
          }
          while (v22 != v23);
          v25 = *(int64x2_t *)a4;
          v21 = (uint64_t *)v29.i64[1];
          v20 = v30;
          v26 = v32;
        }
        *a4 = v19;
        a4[1] = v21;
        v29 = v25;
        v27 = a4[2];
        a4[2] = (uint64_t *)v20;
        v30 = (char *)v27;
        v28 = v25.i64[0];
        std::__split_buffer<std::unique_ptr<ORToolsCpL2AccessVariable>>::~__split_buffer((uint64_t)&v28);
        a4[1] = v21;
        if (v26)
        {
          ORToolsCpL2AccessVariable::~ORToolsCpL2AccessVariable(v26);
          MEMORY[0x22E31DF78]();
        }
      }
      else
      {
        v32 = 0;
        *v12 = v11;
        a4[1] = v12 + 1;
      }
      ++v9;
      v5 = *a2;
    }
    while (v9 < (a2[1] - *a2) >> 3);
  }
}

void sub_22D9C4E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::unique_ptr<ORToolsCpL2AccessVariable>::reset[abi:ne180100]((ORToolsCpL2AccessVariable **)va, 0);
  std::vector<std::unique_ptr<ORToolsCpL2AccessVariable>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void ORToolsLayerScheduleVariable::CreateInPlaceVariables(operations_research::sat::CpModelBuilder *a1@<X1>, const void **a2@<X2>, uint64_t *a3@<X3>, uint64_t **a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v10;
  unint64_t v11;
  std::string::size_type v12;
  size_t v13;
  std::string *v14;
  const void *v15;
  std::string *p_str;
  std::string::size_type size;
  std::string *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  operations_research::sat::CpModelBuilder *v39;
  uint64_t v40;
  std::string *v41;
  __int128 v42;
  std::string v43;
  std::string v44;
  void *v45;
  void *v46;
  std::string __p;
  void *v48;
  void *v49;
  operations_research::sat::CpModelBuilder *v50;
  std::string __str;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v5 = *a3;
  v6 = a3[1] - *a3;
  if (v6)
  {
    v10 = v6 >> 3;
    if (v10 <= 1)
      v10 = 1;
    while (!*(_QWORD *)(*(_QWORD *)v5 + 112))
    {
      v5 += 8;
      if (!--v10)
        return;
    }
    v11 = 0;
    do
    {
      v43.__r_.__value_.__r.__words[0] = (std::string::size_type)operations_research::sat::CpModelBuilder::NewBoolVar(a1);
      v43.__r_.__value_.__l.__size_ = v12;
      if (*((char *)a2 + 23) >= 0)
        v13 = *((unsigned __int8 *)a2 + 23);
      else
        v13 = (size_t)a2[1];
      std::string::basic_string[abi:ne180100]((uint64_t)&v44, v13 + 17);
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &v44;
      else
        v14 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if (v13)
      {
        if (*((char *)a2 + 23) >= 0)
          v15 = a2;
        else
          v15 = *a2;
        memmove(v14, v15, v13);
      }
      strcpy((char *)v14 + v13, ":in_place_update_");
      std::to_string(&__str, v11);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_str = &__str;
      else
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        size = __str.__r_.__value_.__l.__size_;
      v18 = std::string::append(&v44, (const std::string::value_type *)p_str, size);
      v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      v20 = operations_research::sat::BoolVar::WithName((int *)&v43, &__p);
      v22 = v20;
      v23 = v21;
      v25 = a4[1];
      v24 = (unint64_t)a4[2];
      if ((unint64_t)v25 >= v24)
      {
        v27 = ((char *)v25 - (char *)*a4) >> 4;
        v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 60)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v29 = v24 - (_QWORD)*a4;
        if (v29 >> 3 > v28)
          v28 = v29 >> 3;
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
          v30 = 0xFFFFFFFFFFFFFFFLL;
        else
          v30 = v28;
        if (v30)
          v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)(a4 + 2), v30);
        else
          v31 = 0;
        v32 = (uint64_t *)&v31[16 * v27];
        *v32 = v22;
        v32[1] = v23;
        v34 = *a4;
        v33 = a4[1];
        v35 = v32;
        if (v33 != *a4)
        {
          do
          {
            v36 = *(v33 - 2);
            v33 -= 2;
            v37 = *((_DWORD *)v33 + 2);
            *(v35 - 2) = v36;
            v35 -= 2;
            *((_DWORD *)v35 + 2) = v37;
          }
          while (v33 != v34);
          v33 = *a4;
        }
        v26 = v32 + 2;
        *a4 = v35;
        a4[1] = v32 + 2;
        a4[2] = (uint64_t *)&v31[16 * v30];
        if (v33)
          operator delete(v33);
      }
      else
      {
        *v25 = v20;
        v25[1] = v21;
        v26 = v25 + 2;
      }
      a4[1] = v26;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v44.__r_.__value_.__l.__data_);
      v38 = *a3;
      if (!*(_QWORD *)(*(_QWORD *)(*a3 + 8 * v11) + 112))
      {
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&__p, (*a4)[2 * v11], (*a4)[2 * v11 + 1]);
        v39 = operations_research::sat::CpModelBuilder::NewConstant(a1, 0);
        operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v44, (uint64_t)v39, v40);
        v50 = operations_research::sat::CpModelBuilder::AddEquality(a1, (const operations_research::sat::LinearExpr *)&__p, (const operations_research::sat::LinearExpr *)&v44);
        std::operator+<char>();
        v41 = std::string::append(&v43, "disable_inplace_allocation", 0x1AuLL);
        v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        operations_research::sat::Constraint::WithName((uint64_t *)&v50, &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v43.__r_.__value_.__l.__data_);
        if (v45)
        {
          v46 = v45;
          operator delete(v45);
        }
        if (v44.__r_.__value_.__r.__words[0])
        {
          v44.__r_.__value_.__l.__size_ = v44.__r_.__value_.__r.__words[0];
          operator delete(v44.__r_.__value_.__l.__data_);
        }
        if (v48)
        {
          v49 = v48;
          operator delete(v48);
        }
        if (__p.__r_.__value_.__r.__words[0])
        {
          __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        v38 = *a3;
      }
      ++v11;
    }
    while (v11 < (a3[1] - v38) >> 3);
  }
}

void sub_22D9C51FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;
  void *v34;

  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a17);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a27);
  v34 = *(void **)v32;
  if (*(_QWORD *)v32)
  {
    *(_QWORD *)(v32 + 8) = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

void ORToolsLayerScheduleVariable::~ORToolsLayerScheduleVariable(ORToolsLayerScheduleVariable *this)
{
  void *v2;
  void *v3;
  void **v4;

  if (*((char *)this + 271) < 0)
    operator delete(*((void **)this + 31));
  v2 = (void *)*((_QWORD *)this + 24);
  if (v2)
  {
    *((_QWORD *)this + 25) = v2;
    operator delete(v2);
  }
  std::unique_ptr<ORToolsCpL2AccessVariable>::reset[abi:ne180100]((ORToolsCpL2AccessVariable **)this + 17, 0);
  std::unique_ptr<ORToolsCpComputeConstant>::reset[abi:ne180100]((ORToolsCpComputeConstant **)this + 16, 0);
  v4 = (void **)((char *)this + 104);
  std::vector<std::unique_ptr<ORToolsCpL2AccessVariable>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v3 = (void *)*((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 7) = v3;
    operator delete(v3);
  }
}

void ORToolsLayerScheduleVariable::CreateLayerConstraint(uint64_t a1, operations_research::sat::CpModelBuilder *a2, uint64_t *a3, _QWORD *a4, const operations_research::Domain *a5)
{
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  operations_research::sat::CpModelBuilder *BooleanOr;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  int v19;
  _OWORD *v20;
  operations_research::sat::CpModelBuilder *v21;
  int v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  _QWORD *v27;
  std::string::size_type v28;
  size_t v29;
  _BYTE *v30;
  const void *v31;
  uint64_t v32;
  unsigned int v33;
  size_t v34;
  std::string *v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  operations_research::sat::CpModelBuilder *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  operations_research::sat::CpModelBuilder *BooleanAnd;
  int v55;
  uint64_t v56;
  std::string::size_type v57;
  size_t v58;
  std::string *p_p;
  const void *v60;
  std::string *v61;
  std::string::size_type size;
  std::string *v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  operations_research::sat::CpModelBuilder *v74;
  int v75;
  uint64_t v76;
  std::string::size_type v77;
  size_t v78;
  std::string *v79;
  const void *v80;
  std::string *v81;
  std::string::size_type v82;
  std::string *v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  operations_research::sat::CpModelBuilder *v94;
  int v95;
  uint64_t v96;
  std::string::size_type v97;
  size_t v98;
  _BYTE *v99;
  const void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  operations_research::sat::CpModelBuilder *v110;
  int v111;
  uint64_t v112;
  std::string::size_type v113;
  size_t v114;
  _BYTE *v115;
  const void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  operations_research::sat::CpModelBuilder *v125;
  int v126;
  uint64_t v127;
  std::string::size_type v128;
  size_t v129;
  _BYTE *v130;
  const void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  operations_research::sat::CpModelBuilder *v140;
  int v141;
  uint64_t v142;
  std::string::size_type v143;
  size_t v144;
  _BYTE *v145;
  const void *v146;
  operations_research::sat::CpModelBuilder *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  size_t v152;
  std::string *v153;
  const void *v154;
  std::string *v155;
  std::string::size_type v156;
  std::string *v157;
  __int128 v158;
  std::string *v159;
  __int128 v160;
  size_t v161;
  std::string *v162;
  const void *v163;
  size_t v164;
  std::string *v165;
  const void *v166;
  _QWORD *v167;
  unint64_t v168;
  uint64_t v169;
  char *v170;
  operations_research::sat::CpModelBuilder *v171;
  operations_research::sat::CpModelBuilder *v172;
  operations_research::sat::CpModelBuilder *v173;
  operations_research::sat::CpModelBuilder *v174;
  std::string::size_type v175;
  std::string::size_type v176;
  uint64_t v177;
  unint64_t v178;
  int64_t v179;
  unint64_t v180;
  char *v181;
  operations_research::sat::CpModelBuilder **v182;
  _DWORD *v183;
  std::string::size_type v184;
  std::string::size_type v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  std::string::size_type v189;
  std::string::size_type v190;
  void *v191;
  uint64_t v192;
  unint64_t v193;
  int64_t v194;
  unint64_t v195;
  char *v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  operations_research::sat::CpModelBuilder *v203;
  operations_research::sat::CpModelBuilder *v204;
  operations_research::sat::CpModelBuilder *v205;
  operations_research::sat::CpModelBuilder *v206;
  std::string::size_type v207;
  std::string::size_type v208;
  uint64_t v209;
  unint64_t v210;
  int64_t v211;
  unint64_t v212;
  char *v213;
  operations_research::sat::CpModelBuilder **v214;
  std::string::size_type v215;
  _DWORD *v216;
  std::string::size_type v217;
  operations_research::sat::CpModelBuilder *v218;
  int v219;
  std::string::size_type v220;
  std::string::size_type v221;
  void *v222;
  uint64_t v223;
  unint64_t v224;
  int64_t v225;
  unint64_t v226;
  char *v227;
  char *v228;
  std::string::size_type v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD *v235;
  operations_research::sat::CpModelBuilder *v236;
  int v237;
  int v238;
  size_t v239;
  std::string *v240;
  const void *v241;
  int v242;
  int v243;
  int v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  _QWORD *v248;
  operations_research::sat::CpModelBuilder *v249;
  int v250;
  int v251;
  size_t v252;
  std::string *v253;
  const void *v254;
  int v255;
  int v256;
  int v257;
  uint64_t v260;
  operations_research::Domain *v262;
  unsigned int v263;
  uint64_t v264;
  std::string v266;
  std::string v267;
  std::string v268;
  operations_research::sat::CpModelBuilder *v269;
  std::string v270;
  std::string v271;
  std::string __p;
  int v273;
  _BYTE __str[32];
  uint64_t v275;
  _BYTE v276[44];
  uint64_t v277;

  v277 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD **)(a1 + 104);
  if (*(_QWORD *)(a1 + 112) - (_QWORD)v6 < 9uLL)
  {
    v15 = *v6;
    *(_QWORD *)__str = *(_QWORD *)(v15 + 256);
    *(_DWORD *)&__str[8] = *(_DWORD *)(v15 + 264);
    v16 = *(_QWORD *)(a1 + 136);
    *(_QWORD *)&__str[16] = *(_QWORD *)(v16 + 256);
    *(_DWORD *)&__str[24] = *(_DWORD *)(v16 + 264);
    v17 = operator new(0x20uLL);
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v17 + 2);
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v17 + 2);
    *v17 = *(_OWORD *)__str;
    *(_OWORD *)((char *)v17 + 12) = *(_OWORD *)&__str[12];
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    BooleanOr = ORToolsCpBasedAllocatorUtil::CreateBooleanOr(a2, (uint64_t *)&__p);
  }
  else
  {
    v8 = *v6;
    *(_QWORD *)v276 = *(_QWORD *)(*v6 + 256);
    *(_DWORD *)&v276[8] = *(_DWORD *)(v8 + 264);
    v9 = v6[1];
    *(_QWORD *)&v276[16] = *(_QWORD *)(v9 + 256);
    *(_DWORD *)&v276[24] = *(_DWORD *)(v9 + 264);
    v10 = *(_QWORD *)(a1 + 136);
    *(_QWORD *)&v276[32] = *(_QWORD *)(v10 + 256);
    *(_DWORD *)&v276[40] = *(_DWORD *)(v10 + 264);
    v11 = operator new(0x30uLL);
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v11 + 3);
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v11 + 3);
    v12 = *(_OWORD *)&v276[16];
    *v11 = *(_OWORD *)v276;
    v11[1] = v12;
    *(_OWORD *)((char *)v11 + 28) = *(_OWORD *)&v276[28];
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    BooleanOr = ORToolsCpBasedAllocatorUtil::CreateBooleanOr(a2, (uint64_t *)&__p);
  }
  v18 = (uint64_t)BooleanOr;
  v19 = v14;
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)v276 = *(_QWORD *)(a1 + 160);
  *(_DWORD *)&v276[8] = *(_DWORD *)(a1 + 168);
  *(_QWORD *)&v276[16] = *(_QWORD *)(a1 + 176);
  *(_DWORD *)&v276[24] = *(_DWORD *)(a1 + 184);
  v20 = operator new(0x20uLL);
  *(_QWORD *)__str = v20;
  *(_QWORD *)&__str[16] = v20 + 2;
  *v20 = *(_OWORD *)v276;
  *(_OWORD *)((char *)v20 + 12) = *(_OWORD *)&v276[12];
  *(_QWORD *)&__str[8] = v20 + 2;
  v21 = ORToolsCpBasedAllocatorUtil::CreateBooleanOr(a2, (uint64_t *)__str);
  v23 = v22;
  if (*(_QWORD *)__str)
  {
    *(_QWORD *)&__str[8] = *(_QWORD *)__str;
    operator delete(*(void **)__str);
  }
  v24 = operations_research::sat::BoolVar::BoolVar((uint64_t)__str, ~v19, v18);
  v25 = *(_OWORD *)__str;
  operations_research::sat::BoolVar::BoolVar(v24, ~v23, (uint64_t)v21);
  v26 = *(_OWORD *)__str;
  v27 = operator new(0x20uLL);
  *(_QWORD *)v276 = v27;
  *(_QWORD *)&v276[16] = v27 + 4;
  *(_OWORD *)v27 = v25;
  v27[2] = v26;
  *((_DWORD *)v27 + 6) = DWORD2(v26);
  *(_QWORD *)&v276[8] = v27 + 4;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(a2, (uint64_t *)v276);
  __p.__r_.__value_.__l.__size_ = v28;
  if (*(char *)(a1 + 271) >= 0)
    v29 = *(unsigned __int8 *)(a1 + 271);
  else
    v29 = *(_QWORD *)(a1 + 256);
  std::string::basic_string[abi:ne180100]((uint64_t)__str, v29 + 12);
  if (__str[23] >= 0)
    v30 = __str;
  else
    v30 = *(_BYTE **)__str;
  if (v29)
  {
    if (*(char *)(a1 + 271) >= 0)
      v31 = (const void *)(a1 + 248);
    else
      v31 = *(const void **)(a1 + 248);
    memmove(v30, v31, v29);
  }
  strcpy(&v30[v29], ":no_parallel");
  v32 = operations_research::sat::BoolVar::WithName((int *)&__p, (std::string *)__str);
  v263 = v33;
  v264 = v32;
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  if (*(_QWORD *)v276)
  {
    *(_QWORD *)&v276[8] = *(_QWORD *)v276;
    operator delete(*(void **)v276);
  }
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)v276, v264, v263);
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)__str, *(_QWORD *)(a1 + 216), *(_QWORD *)(a1 + 224));
  operations_research::sat::CpModelBuilder::AddEquality(a2, (const operations_research::sat::LinearExpr *)v276, (const operations_research::sat::LinearExpr *)__str);
  if (*(_QWORD *)&__str[24])
  {
    v275 = *(_QWORD *)&__str[24];
    operator delete(*(void **)&__str[24]);
  }
  if (*(_QWORD *)__str)
  {
    *(_QWORD *)&__str[8] = *(_QWORD *)__str;
    operator delete(*(void **)__str);
  }
  if (*(_QWORD *)&v276[24])
  {
    *(_QWORD *)&v276[32] = *(_QWORD *)&v276[24];
    operator delete(*(void **)&v276[24]);
  }
  if (*(_QWORD *)v276)
  {
    *(_QWORD *)&v276[8] = *(_QWORD *)v276;
    operator delete(*(void **)v276);
  }
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)v276, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 32);
  LODWORD(__p.__r_.__value_.__r.__words[1]) = *(_DWORD *)(a1 + 40);
  __p.__r_.__value_.__r.__words[2] = *(_QWORD *)a1;
  v273 = *(_DWORD *)(a1 + 8);
  *(_OWORD *)&v271.__r_.__value_.__l.__data_ = xmmword_22DCE5B10;
  operations_research::sat::LinearExpr::ScalProd((uint64_t)&__p, 2uLL, (uint64_t *)&v271, 2, (uint64_t)__str);
  v268.__r_.__value_.__r.__words[0] = (std::string::size_type)operations_research::sat::CpModelBuilder::AddEquality(a2, (const operations_research::sat::LinearExpr *)v276, (const operations_research::sat::LinearExpr *)__str);
  if (*(char *)(a1 + 271) >= 0)
    v34 = *(unsigned __int8 *)(a1 + 271);
  else
    v34 = *(_QWORD *)(a1 + 256);
  std::string::basic_string[abi:ne180100]((uint64_t)&v270, v34 + 15);
  if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = &v270;
  else
    v35 = (std::string *)v270.__r_.__value_.__r.__words[0];
  if (v34)
  {
    if (*(char *)(a1 + 271) >= 0)
      v36 = (const void *)(a1 + 248);
    else
      v36 = *(const void **)(a1 + 248);
    memmove(v35, v36, v34);
  }
  strcpy((char *)v35 + v34, ":layer_interval");
  operations_research::sat::Constraint::WithName((uint64_t *)&v268, &v270);
  if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v270.__r_.__value_.__l.__data_);
  if (*(_QWORD *)&__str[24])
  {
    v275 = *(_QWORD *)&__str[24];
    operator delete(*(void **)&__str[24]);
  }
  if (*(_QWORD *)__str)
  {
    *(_QWORD *)&__str[8] = *(_QWORD *)__str;
    operator delete(*(void **)__str);
  }
  if (*(_QWORD *)&v276[24])
  {
    *(_QWORD *)&v276[32] = *(_QWORD *)&v276[24];
    operator delete(*(void **)&v276[24]);
  }
  if (*(_QWORD *)v276)
  {
    *(_QWORD *)&v276[8] = *(_QWORD *)v276;
    operator delete(*(void **)v276);
  }
  v37 = *(_QWORD *)a1;
  v38 = *(_QWORD *)(a1 + 8);
  v39 = operations_research::sat::CpModelBuilder::NewConstant(a2, 0);
  operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)a2, v37, v38, (uint64_t)v39, v40, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), v41, v18, v19);
  v42 = *(_QWORD *)(a1 + 48);
  if (*(_QWORD *)(a1 + 56) != v42)
  {
    v43 = 0;
    v44 = 0;
    do
    {
      v45 = *(_QWORD *)a1;
      v46 = *(_QWORD *)(a1 + 8);
      v47 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v44);
      v48 = *(_QWORD *)v47;
      v49 = *(_QWORD *)(v47 + 8);
      v50 = (uint64_t *)(v42 + v43);
      v51 = *v50;
      v52 = v50[1];
      v268.__r_.__value_.__r.__words[0] = *(_QWORD *)(v47 + 224);
      LODWORD(v268.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v47 + 232);
      v53 = operator new(0x20uLL);
      *(_QWORD *)&v276[8] = v53 + 4;
      *(_QWORD *)&v276[16] = v53 + 4;
      *(_OWORD *)v53 = *(_OWORD *)&v268.__r_.__value_.__l.__data_;
      v53[2] = v264;
      *((_DWORD *)v53 + 6) = v263;
      *(_QWORD *)v276 = v53;
      BooleanAnd = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(a2, (uint64_t *)v276);
      v271.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)a2, v45, v46, v48, v49, v51, v52, v56, (uint64_t)BooleanAnd, v55);
      v271.__r_.__value_.__l.__size_ = v57;
      if (*(char *)(a1 + 271) >= 0)
        v58 = *(unsigned __int8 *)(a1 + 271);
      else
        v58 = *(_QWORD *)(a1 + 256);
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v58 + 29);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v58)
      {
        if (*(char *)(a1 + 271) >= 0)
          v60 = (const void *)(a1 + 248);
        else
          v60 = *(const void **)(a1 + 248);
        memmove(p_p, v60, v58);
      }
      strcpy((char *)p_p + v58, ":resident_read_time_interval_");
      std::to_string(&v270, v44);
      if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v61 = &v270;
      else
        v61 = (std::string *)v270.__r_.__value_.__r.__words[0];
      if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v270.__r_.__value_.__r.__words[2]);
      else
        size = v270.__r_.__value_.__l.__size_;
      v63 = std::string::append(&__p, (const std::string::value_type *)v61, size);
      v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
      *(_QWORD *)&__str[16] = *((_QWORD *)&v63->__r_.__value_.__l + 2);
      *(_OWORD *)__str = v64;
      v63->__r_.__value_.__l.__size_ = 0;
      v63->__r_.__value_.__r.__words[2] = 0;
      v63->__r_.__value_.__r.__words[0] = 0;
      operations_research::sat::IntervalVar::WithName((int *)&v271, (std::string *)__str);
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
      if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v270.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (*(_QWORD *)v276)
      {
        *(_QWORD *)&v276[8] = *(_QWORD *)v276;
        operator delete(*(void **)v276);
      }
      v65 = *(_QWORD *)a1;
      v66 = *(_QWORD *)(a1 + 8);
      v67 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v44);
      v68 = *(_QWORD *)(v67 + 16);
      v69 = *(_QWORD *)(v67 + 24);
      v70 = (uint64_t *)(*(_QWORD *)(a1 + 48) + v43);
      v72 = *v70;
      v71 = v70[1];
      v268.__r_.__value_.__r.__words[0] = *(_QWORD *)(v67 + 240);
      LODWORD(v268.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v67 + 248);
      v73 = operator new(0x20uLL);
      *(_QWORD *)&v276[8] = v73 + 4;
      *(_QWORD *)&v276[16] = v73 + 4;
      *(_OWORD *)v73 = *(_OWORD *)&v268.__r_.__value_.__l.__data_;
      v73[2] = v264;
      *((_DWORD *)v73 + 6) = v263;
      *(_QWORD *)v276 = v73;
      v74 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(a2, (uint64_t *)v276);
      v271.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)a2, v65, v66, v68, v69, v72, v71, v76, (uint64_t)v74, v75);
      v271.__r_.__value_.__l.__size_ = v77;
      if (*(char *)(a1 + 271) >= 0)
        v78 = *(unsigned __int8 *)(a1 + 271);
      else
        v78 = *(_QWORD *)(a1 + 256);
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v78 + 32);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v79 = &__p;
      else
        v79 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v78)
      {
        if (*(char *)(a1 + 271) >= 0)
          v80 = (const void *)(a1 + 248);
        else
          v80 = *(const void **)(a1 + 248);
        memmove(v79, v80, v78);
      }
      strcpy((char *)v79 + v78, ":nonresident_read_time_interval_");
      std::to_string(&v270, v44);
      if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v81 = &v270;
      else
        v81 = (std::string *)v270.__r_.__value_.__r.__words[0];
      if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v82 = HIBYTE(v270.__r_.__value_.__r.__words[2]);
      else
        v82 = v270.__r_.__value_.__l.__size_;
      v83 = std::string::append(&__p, (const std::string::value_type *)v81, v82);
      v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
      *(_QWORD *)&__str[16] = *((_QWORD *)&v83->__r_.__value_.__l + 2);
      *(_OWORD *)__str = v84;
      v83->__r_.__value_.__l.__size_ = 0;
      v83->__r_.__value_.__r.__words[2] = 0;
      v83->__r_.__value_.__r.__words[0] = 0;
      operations_research::sat::IntervalVar::WithName((int *)&v271, (std::string *)__str);
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
      if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v270.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (*(_QWORD *)v276)
      {
        *(_QWORD *)&v276[8] = *(_QWORD *)v276;
        operator delete(*(void **)v276);
      }
      ++v44;
      v42 = *(_QWORD *)(a1 + 48);
      v43 += 16;
    }
    while (v44 < (*(_QWORD *)(a1 + 56) - v42) >> 4);
  }
  v85 = *(_QWORD *)a1;
  v86 = *(_QWORD *)(a1 + 8);
  v87 = *(uint64_t **)(a1 + 128);
  v88 = *v87;
  v89 = v87[1];
  v90 = *(_QWORD *)(a1 + 72);
  v91 = *(_QWORD *)(a1 + 80);
  v92 = **(_QWORD **)(a1 + 104);
  v270.__r_.__value_.__r.__words[0] = *(_QWORD *)(v92 + 224);
  LODWORD(v270.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v92 + 232);
  v93 = operator new(0x20uLL);
  *(_QWORD *)v276 = v93;
  *(_QWORD *)&v276[16] = v93 + 4;
  *(_OWORD *)v93 = *(_OWORD *)&v270.__r_.__value_.__l.__data_;
  v93[2] = v264;
  *((_DWORD *)v93 + 6) = v263;
  *(_QWORD *)&v276[8] = v93 + 4;
  v94 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(a2, (uint64_t *)v276);
  __p.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)a2, v85, v86, v88, v89, v90, v91, v96, (uint64_t)v94, v95);
  __p.__r_.__value_.__l.__size_ = v97;
  if (*(char *)(a1 + 271) >= 0)
    v98 = *(unsigned __int8 *)(a1 + 271);
  else
    v98 = *(_QWORD *)(a1 + 256);
  std::string::basic_string[abi:ne180100]((uint64_t)__str, v98 + 31);
  if (__str[23] >= 0)
    v99 = __str;
  else
    v99 = *(_BYTE **)__str;
  if (v98)
  {
    if (*(char *)(a1 + 271) >= 0)
      v100 = (const void *)(a1 + 248);
    else
      v100 = *(const void **)(a1 + 248);
    memmove(v99, v100, v98);
  }
  strcpy(&v99[v98], ":compute_resident_time_interval");
  operations_research::sat::IntervalVar::WithName((int *)&__p, (std::string *)__str);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  if (*(_QWORD *)v276)
  {
    *(_QWORD *)&v276[8] = *(_QWORD *)v276;
    operator delete(*(void **)v276);
  }
  v101 = *(_QWORD *)a1;
  v102 = *(_QWORD *)(a1 + 8);
  v103 = *(_QWORD *)(a1 + 128);
  v104 = *(_QWORD *)(v103 + 16);
  v105 = *(_QWORD *)(v103 + 24);
  v107 = *(_QWORD *)(a1 + 72);
  v106 = *(_QWORD *)(a1 + 80);
  v108 = **(_QWORD **)(a1 + 104);
  v270.__r_.__value_.__r.__words[0] = *(_QWORD *)(v108 + 240);
  LODWORD(v270.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v108 + 248);
  v109 = operator new(0x20uLL);
  *(_QWORD *)v276 = v109;
  *(_QWORD *)&v276[16] = v109 + 4;
  *(_OWORD *)v109 = *(_OWORD *)&v270.__r_.__value_.__l.__data_;
  v109[2] = v264;
  *((_DWORD *)v109 + 6) = v263;
  *(_QWORD *)&v276[8] = v109 + 4;
  v110 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(a2, (uint64_t *)v276);
  __p.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)a2, v101, v102, v104, v105, v107, v106, v112, (uint64_t)v110, v111);
  __p.__r_.__value_.__l.__size_ = v113;
  if (*(char *)(a1 + 271) >= 0)
    v114 = *(unsigned __int8 *)(a1 + 271);
  else
    v114 = *(_QWORD *)(a1 + 256);
  std::string::basic_string[abi:ne180100]((uint64_t)__str, v114 + 34);
  if (__str[23] >= 0)
    v115 = __str;
  else
    v115 = *(_BYTE **)__str;
  if (v114)
  {
    if (*(char *)(a1 + 271) >= 0)
      v116 = (const void *)(a1 + 248);
    else
      v116 = *(const void **)(a1 + 248);
    memmove(v115, v116, v114);
  }
  strcpy(&v115[v114], ":compute_nonresident_time_interval");
  operations_research::sat::IntervalVar::WithName((int *)&__p, (std::string *)__str);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  if (*(_QWORD *)v276)
  {
    *(_QWORD *)&v276[8] = *(_QWORD *)v276;
    operator delete(*(void **)v276);
  }
  v117 = *(_QWORD *)a1;
  v118 = *(_QWORD *)(a1 + 8);
  v119 = *(_QWORD *)(a1 + 136);
  v120 = *(_QWORD *)v119;
  v121 = *(_QWORD *)(v119 + 8);
  v122 = *(_QWORD *)(a1 + 88);
  v123 = *(_QWORD *)(a1 + 96);
  v270.__r_.__value_.__r.__words[0] = *(_QWORD *)(v119 + 224);
  LODWORD(v270.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v119 + 232);
  v124 = operator new(0x20uLL);
  *(_QWORD *)v276 = v124;
  *(_QWORD *)&v276[16] = v124 + 4;
  *(_OWORD *)v124 = *(_OWORD *)&v270.__r_.__value_.__l.__data_;
  v124[2] = v264;
  *((_DWORD *)v124 + 6) = v263;
  *(_QWORD *)&v276[8] = v124 + 4;
  v125 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(a2, (uint64_t *)v276);
  __p.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)a2, v117, v118, v120, v121, v122, v123, v127, (uint64_t)v125, v126);
  __p.__r_.__value_.__l.__size_ = v128;
  if (*(char *)(a1 + 271) >= 0)
    v129 = *(unsigned __int8 *)(a1 + 271);
  else
    v129 = *(_QWORD *)(a1 + 256);
  std::string::basic_string[abi:ne180100]((uint64_t)__str, v129 + 29);
  if (__str[23] >= 0)
    v130 = __str;
  else
    v130 = *(_BYTE **)__str;
  if (v129)
  {
    if (*(char *)(a1 + 271) >= 0)
      v131 = (const void *)(a1 + 248);
    else
      v131 = *(const void **)(a1 + 248);
    memmove(v130, v131, v129);
  }
  strcpy(&v130[v129], ":resident_write_time_interval");
  operations_research::sat::IntervalVar::WithName((int *)&__p, (std::string *)__str);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  if (*(_QWORD *)v276)
  {
    *(_QWORD *)&v276[8] = *(_QWORD *)v276;
    operator delete(*(void **)v276);
  }
  v132 = *(_QWORD *)a1;
  v133 = *(_QWORD *)(a1 + 8);
  v134 = *(_QWORD *)(a1 + 136);
  v135 = *(_QWORD *)(v134 + 16);
  v136 = *(_QWORD *)(v134 + 24);
  v137 = *(_QWORD *)(a1 + 88);
  v138 = *(_QWORD *)(a1 + 96);
  v270.__r_.__value_.__r.__words[0] = *(_QWORD *)(v134 + 240);
  LODWORD(v270.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v134 + 248);
  v139 = operator new(0x20uLL);
  *(_QWORD *)v276 = v139;
  *(_QWORD *)&v276[16] = v139 + 4;
  *(_OWORD *)v139 = *(_OWORD *)&v270.__r_.__value_.__l.__data_;
  v139[2] = v264;
  *((_DWORD *)v139 + 6) = v263;
  *(_QWORD *)&v276[8] = v139 + 4;
  v140 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(a2, (uint64_t *)v276);
  __p.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)a2, v132, v133, v135, v136, v137, v138, v142, (uint64_t)v140, v141);
  __p.__r_.__value_.__l.__size_ = v143;
  if (*(char *)(a1 + 271) >= 0)
    v144 = *(unsigned __int8 *)(a1 + 271);
  else
    v144 = *(_QWORD *)(a1 + 256);
  std::string::basic_string[abi:ne180100]((uint64_t)__str, v144 + 32);
  if (__str[23] >= 0)
    v145 = __str;
  else
    v145 = *(_BYTE **)__str;
  if (v144)
  {
    if (*(char *)(a1 + 271) >= 0)
      v146 = (const void *)(a1 + 248);
    else
      v146 = *(const void **)(a1 + 248);
    memmove(v145, v146, v144);
  }
  strcpy(&v145[v144], ":nonresident_write_time_interval");
  operations_research::sat::IntervalVar::WithName((int *)&__p, (std::string *)__str);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  if (*(_QWORD *)v276)
  {
    *(_QWORD *)&v276[8] = *(_QWORD *)v276;
    operator delete(*(void **)v276);
  }
  v147 = operations_research::sat::CpModelBuilder::NewIntVar(a2, a5);
  v260 = v148;
  v262 = v147;
  v149 = *(_QWORD *)(a1 + 48);
  if (*(_QWORD *)(a1 + 56) != v149)
  {
    v150 = 0;
    v151 = 0;
    do
    {
      operations_research::sat::LinearExpr::LinearExpr((uint64_t)v276, *(_QWORD *)(v149 + v150), *(_QWORD *)(v149 + v150 + 8));
      operations_research::sat::LinearExpr::LinearExpr((uint64_t)__str, (uint64_t)v262, v260);
      v269 = operations_research::sat::CpModelBuilder::AddLessOrEqual(a2, (const operations_research::sat::LinearExpr *)v276, (const operations_research::sat::LinearExpr *)__str);
      if (*(char *)(a1 + 271) >= 0)
        v152 = *(unsigned __int8 *)(a1 + 271);
      else
        v152 = *(_QWORD *)(a1 + 256);
      std::string::basic_string[abi:ne180100]((uint64_t)&v271, v152 + 6);
      if ((v271.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v153 = &v271;
      else
        v153 = (std::string *)v271.__r_.__value_.__r.__words[0];
      if (v152)
      {
        if (*(char *)(a1 + 271) >= 0)
          v154 = (const void *)(a1 + 248);
        else
          v154 = *(const void **)(a1 + 248);
        memmove(v153, v154, v152);
      }
      strcpy((char *)v153 + v152, ":read_");
      std::to_string(&v268, v151);
      if ((v268.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v155 = &v268;
      else
        v155 = (std::string *)v268.__r_.__value_.__r.__words[0];
      if ((v268.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v156 = HIBYTE(v268.__r_.__value_.__r.__words[2]);
      else
        v156 = v268.__r_.__value_.__l.__size_;
      v157 = std::string::append(&v271, (const std::string::value_type *)v155, v156);
      v158 = *(_OWORD *)&v157->__r_.__value_.__l.__data_;
      v270.__r_.__value_.__r.__words[2] = v157->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v270.__r_.__value_.__l.__data_ = v158;
      v157->__r_.__value_.__l.__size_ = 0;
      v157->__r_.__value_.__r.__words[2] = 0;
      v157->__r_.__value_.__r.__words[0] = 0;
      v159 = std::string::append(&v270, "_end_constraint", 0xFuLL);
      v160 = *(_OWORD *)&v159->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v159->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v160;
      v159->__r_.__value_.__l.__size_ = 0;
      v159->__r_.__value_.__r.__words[2] = 0;
      v159->__r_.__value_.__r.__words[0] = 0;
      operations_research::sat::Constraint::WithName((uint64_t *)&v269, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v270.__r_.__value_.__l.__data_);
      if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v268.__r_.__value_.__l.__data_);
      if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v271.__r_.__value_.__l.__data_);
      if (*(_QWORD *)&__str[24])
      {
        v275 = *(_QWORD *)&__str[24];
        operator delete(*(void **)&__str[24]);
      }
      if (*(_QWORD *)__str)
      {
        *(_QWORD *)&__str[8] = *(_QWORD *)__str;
        operator delete(*(void **)__str);
      }
      if (*(_QWORD *)&v276[24])
      {
        *(_QWORD *)&v276[32] = *(_QWORD *)&v276[24];
        operator delete(*(void **)&v276[24]);
      }
      if (*(_QWORD *)v276)
      {
        *(_QWORD *)&v276[8] = *(_QWORD *)v276;
        operator delete(*(void **)v276);
      }
      ++v151;
      v149 = *(_QWORD *)(a1 + 48);
      v150 += 16;
    }
    while (v151 < (*(_QWORD *)(a1 + 56) - v149) >> 4);
  }
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)v276, *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80));
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)__str, (uint64_t)v262, v260);
  v270.__r_.__value_.__r.__words[0] = (std::string::size_type)operations_research::sat::CpModelBuilder::AddLessOrEqual(a2, (const operations_research::sat::LinearExpr *)v276, (const operations_research::sat::LinearExpr *)__str);
  if (*(char *)(a1 + 271) >= 0)
    v161 = *(unsigned __int8 *)(a1 + 271);
  else
    v161 = *(_QWORD *)(a1 + 256);
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v161 + 23);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v162 = &__p;
  else
    v162 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v161)
  {
    if (*(char *)(a1 + 271) >= 0)
      v163 = (const void *)(a1 + 248);
    else
      v163 = *(const void **)(a1 + 248);
    memmove(v162, v163, v161);
  }
  strcpy((char *)v162 + v161, ":compute_end_constraint");
  operations_research::sat::Constraint::WithName((uint64_t *)&v270, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*(_QWORD *)&__str[24])
  {
    v275 = *(_QWORD *)&__str[24];
    operator delete(*(void **)&__str[24]);
  }
  if (*(_QWORD *)__str)
  {
    *(_QWORD *)&__str[8] = *(_QWORD *)__str;
    operator delete(*(void **)__str);
  }
  if (*(_QWORD *)&v276[24])
  {
    *(_QWORD *)&v276[32] = *(_QWORD *)&v276[24];
    operator delete(*(void **)&v276[24]);
  }
  if (*(_QWORD *)v276)
  {
    *(_QWORD *)&v276[8] = *(_QWORD *)v276;
    operator delete(*(void **)v276);
  }
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)v276, *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96));
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)__str, (uint64_t)v262, v260);
  v270.__r_.__value_.__r.__words[0] = (std::string::size_type)operations_research::sat::CpModelBuilder::AddLessOrEqual(a2, (const operations_research::sat::LinearExpr *)v276, (const operations_research::sat::LinearExpr *)__str);
  if (*(char *)(a1 + 271) >= 0)
    v164 = *(unsigned __int8 *)(a1 + 271);
  else
    v164 = *(_QWORD *)(a1 + 256);
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v164 + 21);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v165 = &__p;
  else
    v165 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v164)
  {
    if (*(char *)(a1 + 271) >= 0)
      v166 = (const void *)(a1 + 248);
    else
      v166 = *(const void **)(a1 + 248);
    memmove(v165, v166, v164);
  }
  strcpy((char *)v165 + v164, ":write_end_constraint");
  operations_research::sat::Constraint::WithName((uint64_t *)&v270, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*(_QWORD *)&__str[24])
  {
    v275 = *(_QWORD *)&__str[24];
    operator delete(*(void **)&__str[24]);
  }
  if (*(_QWORD *)__str)
  {
    *(_QWORD *)&__str[8] = *(_QWORD *)__str;
    operator delete(*(void **)__str);
  }
  if (*(_QWORD *)&v276[24])
  {
    *(_QWORD *)&v276[32] = *(_QWORD *)&v276[24];
    operator delete(*(void **)&v276[24]);
  }
  if (*(_QWORD *)v276)
  {
    *(_QWORD *)&v276[8] = *(_QWORD *)v276;
    operator delete(*(void **)v276);
  }
  memset(&__p, 0, sizeof(__p));
  memset(&v270, 0, sizeof(v270));
  v167 = *(_QWORD **)(a1 + 104);
  if (*(_QWORD **)(a1 + 112) != v167)
  {
    v168 = 0;
    do
    {
      v169 = v167[v168];
      *(_QWORD *)&__str[4] = *(_QWORD *)(v169 + 240);
      *(_DWORD *)&__str[12] = *(_DWORD *)(v169 + 248);
      v170 = (char *)operator new(0x20uLL);
      *(_QWORD *)&v276[8] = v170 + 32;
      *(_QWORD *)&v276[16] = v170 + 32;
      *(_QWORD *)v170 = v264;
      *((_DWORD *)v170 + 2) = v263;
      *(_OWORD *)(v170 + 12) = *(_OWORD *)__str;
      *(_QWORD *)v276 = v170;
      v171 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(a2, (uint64_t *)v276);
      v173 = v171;
      v174 = v172;
      v175 = __p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
      {
        v177 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 4;
        v178 = v177 + 1;
        if ((unint64_t)(v177 + 1) >> 60)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v179 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
        if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 3 > v178)
          v178 = v179 >> 3;
        if ((unint64_t)v179 >= 0x7FFFFFFFFFFFFFF0)
          v180 = 0xFFFFFFFFFFFFFFFLL;
        else
          v180 = v178;
        if (v180)
          v181 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v180);
        else
          v181 = 0;
        v182 = (operations_research::sat::CpModelBuilder **)&v181[16 * v177];
        *v182 = v173;
        v182[1] = v174;
        v183 = (_DWORD *)__p.__r_.__value_.__l.__size_;
        v184 = __p.__r_.__value_.__r.__words[0];
        v185 = (std::string::size_type)v182;
        if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
        {
          do
          {
            v186 = *((_QWORD *)v183 - 2);
            v183 -= 4;
            v187 = v183[2];
            *(_QWORD *)(v185 - 16) = v186;
            v185 -= 16;
            *(_DWORD *)(v185 + 8) = v187;
          }
          while (v183 != (_DWORD *)v184);
          v183 = (_DWORD *)__p.__r_.__value_.__r.__words[0];
        }
        v176 = (std::string::size_type)(v182 + 2);
        __p.__r_.__value_.__r.__words[0] = v185;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v182 + 2);
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v181[16 * v180];
        if (v183)
          operator delete(v183);
      }
      else
      {
        *(_QWORD *)__p.__r_.__value_.__l.__size_ = v171;
        *(_QWORD *)(v175 + 8) = v172;
        v176 = v175 + 16;
      }
      __p.__r_.__value_.__l.__size_ = v176;
      if (*(_QWORD *)v276)
      {
        *(_QWORD *)&v276[8] = *(_QWORD *)v276;
        operator delete(*(void **)v276);
      }
      v188 = *(_QWORD *)(*(_QWORD *)(*a4 + 8 * v168) + 120);
      v189 = v270.__r_.__value_.__l.__size_;
      if (v270.__r_.__value_.__l.__size_ >= v270.__r_.__value_.__r.__words[2])
      {
        v191 = (void *)v270.__r_.__value_.__r.__words[0];
        v192 = (uint64_t)(v270.__r_.__value_.__l.__size_ - v270.__r_.__value_.__r.__words[0]) >> 3;
        v193 = v192 + 1;
        if ((unint64_t)(v192 + 1) >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v194 = v270.__r_.__value_.__r.__words[2] - v270.__r_.__value_.__r.__words[0];
        if ((uint64_t)(v270.__r_.__value_.__r.__words[2] - v270.__r_.__value_.__r.__words[0]) >> 2 > v193)
          v193 = v194 >> 2;
        if ((unint64_t)v194 >= 0x7FFFFFFFFFFFFFF8)
          v195 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v195 = v193;
        if (v195)
        {
          v196 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)&v270.__r_.__value_.__r.__words[2], v195);
          v189 = v270.__r_.__value_.__l.__size_;
          v191 = (void *)v270.__r_.__value_.__r.__words[0];
        }
        else
        {
          v196 = 0;
        }
        v197 = &v196[8 * v192];
        *(_QWORD *)v197 = v188;
        v190 = (std::string::size_type)(v197 + 8);
        while ((void *)v189 != v191)
        {
          v198 = *(_QWORD *)(v189 - 8);
          v189 -= 8;
          *((_QWORD *)v197 - 1) = v198;
          v197 -= 8;
        }
        v270.__r_.__value_.__r.__words[0] = (std::string::size_type)v197;
        v270.__r_.__value_.__l.__size_ = v190;
        v270.__r_.__value_.__r.__words[2] = (std::string::size_type)&v196[8 * v195];
        if (v191)
          operator delete(v191);
      }
      else
      {
        *(_QWORD *)v270.__r_.__value_.__l.__size_ = v188;
        v190 = v189 + 8;
      }
      v270.__r_.__value_.__l.__size_ = v190;
      ++v168;
      v167 = *(_QWORD **)(a1 + 104);
      v199 = *(_QWORD *)(a1 + 112) - (_QWORD)v167;
    }
    while (v168 < v199 >> 3);
    if ((unint64_t)v199 > 8)
    {
      v200 = *v167;
      *(_QWORD *)&__str[4] = *(_QWORD *)(*v167 + 240);
      *(_DWORD *)&__str[12] = *(_DWORD *)(v200 + 248);
      v201 = v167[1];
      *(std::string::size_type *)((char *)v271.__r_.__value_.__r.__words + 4) = *(_QWORD *)(v201 + 240);
      HIDWORD(v271.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v201 + 248);
      v202 = (char *)operator new(0x30uLL);
      *(_QWORD *)&v276[8] = v202 + 48;
      *(_QWORD *)&v276[16] = v202 + 48;
      *(_QWORD *)v202 = v264;
      *((_DWORD *)v202 + 2) = v263;
      *(_OWORD *)(v202 + 12) = *(_OWORD *)__str;
      *(_OWORD *)(v202 + 28) = *(_OWORD *)&v271.__r_.__value_.__l.__data_;
      *(_QWORD *)v276 = v202;
      v203 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(a2, (uint64_t *)v276);
      v205 = v203;
      v206 = v204;
      v207 = __p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
      {
        v209 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 4;
        v210 = v209 + 1;
        if ((unint64_t)(v209 + 1) >> 60)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v211 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
        if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 3 > v210)
          v210 = v211 >> 3;
        if ((unint64_t)v211 >= 0x7FFFFFFFFFFFFFF0)
          v212 = 0xFFFFFFFFFFFFFFFLL;
        else
          v212 = v210;
        if (v212)
          v213 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v212);
        else
          v213 = 0;
        v214 = (operations_research::sat::CpModelBuilder **)&v213[16 * v209];
        v215 = (std::string::size_type)&v213[16 * v212];
        *v214 = v205;
        v214[1] = v206;
        v208 = (std::string::size_type)(v214 + 2);
        v216 = (_DWORD *)__p.__r_.__value_.__l.__size_;
        v217 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
        {
          do
          {
            v218 = (operations_research::sat::CpModelBuilder *)*((_QWORD *)v216 - 2);
            v216 -= 4;
            v219 = v216[2];
            *(v214 - 2) = v218;
            v214 -= 2;
            *((_DWORD *)v214 + 2) = v219;
          }
          while (v216 != (_DWORD *)v217);
          v216 = (_DWORD *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v214;
        __p.__r_.__value_.__l.__size_ = v208;
        __p.__r_.__value_.__r.__words[2] = v215;
        if (v216)
          operator delete(v216);
      }
      else
      {
        *(_QWORD *)__p.__r_.__value_.__l.__size_ = v203;
        *(_QWORD *)(v207 + 8) = v204;
        v208 = v207 + 16;
      }
      __p.__r_.__value_.__l.__size_ = v208;
      if (*(_QWORD *)v276)
      {
        *(_QWORD *)&v276[8] = *(_QWORD *)v276;
        operator delete(*(void **)v276);
      }
      v220 = v270.__r_.__value_.__l.__size_;
      if (v270.__r_.__value_.__l.__size_ >= v270.__r_.__value_.__r.__words[2])
      {
        v222 = (void *)v270.__r_.__value_.__r.__words[0];
        v223 = (uint64_t)(v270.__r_.__value_.__l.__size_ - v270.__r_.__value_.__r.__words[0]) >> 3;
        v224 = v223 + 1;
        if ((unint64_t)(v223 + 1) >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v225 = v270.__r_.__value_.__r.__words[2] - v270.__r_.__value_.__r.__words[0];
        if ((uint64_t)(v270.__r_.__value_.__r.__words[2] - v270.__r_.__value_.__r.__words[0]) >> 2 > v224)
          v224 = v225 >> 2;
        if ((unint64_t)v225 >= 0x7FFFFFFFFFFFFFF8)
          v226 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v226 = v224;
        if (v226)
        {
          v227 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)&v270.__r_.__value_.__r.__words[2], v226);
          v220 = v270.__r_.__value_.__l.__size_;
          v222 = (void *)v270.__r_.__value_.__r.__words[0];
        }
        else
        {
          v227 = 0;
        }
        v228 = &v227[8 * v223];
        v229 = (std::string::size_type)&v227[8 * v226];
        *(_QWORD *)v228 = 1;
        v221 = (std::string::size_type)(v228 + 8);
        while ((void *)v220 != v222)
        {
          v230 = *(_QWORD *)(v220 - 8);
          v220 -= 8;
          *((_QWORD *)v228 - 1) = v230;
          v228 -= 8;
        }
        v270.__r_.__value_.__r.__words[0] = (std::string::size_type)v228;
        v270.__r_.__value_.__l.__size_ = v221;
        v270.__r_.__value_.__r.__words[2] = v229;
        if (v222)
          operator delete(v222);
      }
      else
      {
        *(_QWORD *)v270.__r_.__value_.__l.__size_ = 1;
        v221 = v220 + 8;
      }
      v270.__r_.__value_.__l.__size_ = v221;
    }
  }
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)v276, *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152));
  operations_research::sat::LinearExpr::BooleanScalProd((uint64_t)__p.__r_.__value_.__l.__data_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 4, (uint64_t *)v270.__r_.__value_.__l.__data_, (uint64_t)(v270.__r_.__value_.__l.__size_ - v270.__r_.__value_.__r.__words[0]) >> 3, (uint64_t)__str);
  operations_research::sat::CpModelBuilder::AddEquality(a2, (const operations_research::sat::LinearExpr *)v276, (const operations_research::sat::LinearExpr *)__str);
  if (*(_QWORD *)&__str[24])
  {
    v275 = *(_QWORD *)&__str[24];
    operator delete(*(void **)&__str[24]);
  }
  if (*(_QWORD *)__str)
  {
    *(_QWORD *)&__str[8] = *(_QWORD *)__str;
    operator delete(*(void **)__str);
  }
  if (*(_QWORD *)&v276[24])
  {
    *(_QWORD *)&v276[32] = *(_QWORD *)&v276[24];
    operator delete(*(void **)&v276[24]);
  }
  if (*(_QWORD *)v276)
  {
    *(_QWORD *)&v276[8] = *(_QWORD *)v276;
    operator delete(*(void **)v276);
  }
  operations_research::sat::CpModelBuilder::NewIntervalVar(a2, (uint64_t)v262, v260, *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  v231 = *(_QWORD *)(a1 + 104);
  if (*(_QWORD *)(a1 + 112) != v231)
  {
    v232 = 0;
    do
    {
      v233 = *(_QWORD *)(a1 + 240);
      v234 = *(_QWORD *)(v231 + 8 * v232);
      *(_QWORD *)__str = *(_QWORD *)(v234 + 240);
      *(_DWORD *)&__str[8] = *(_DWORD *)(v234 + 248);
      v235 = operator new(0x20uLL);
      *(_QWORD *)&v276[8] = v235 + 4;
      *(_QWORD *)&v276[16] = v235 + 4;
      *(_OWORD *)v235 = *(_OWORD *)__str;
      v235[2] = v264;
      *((_DWORD *)v235 + 6) = v263;
      *(_QWORD *)v276 = v235;
      v236 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(a2, (uint64_t *)v276);
      v238 = v237;
      if (*(char *)(a1 + 271) >= 0)
        v239 = *(unsigned __int8 *)(a1 + 271);
      else
        v239 = *(_QWORD *)(a1 + 256);
      std::string::basic_string[abi:ne180100]((uint64_t)&v267, v239 + 35);
      if ((v267.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v240 = &v267;
      else
        v240 = (std::string *)v267.__r_.__value_.__r.__words[0];
      if (v239)
      {
        if (*(char *)(a1 + 271) >= 0)
          v241 = (const void *)(a1 + 248);
        else
          v241 = *(const void **)(a1 + 248);
        memmove(v240, v241, v239);
      }
      strcpy((char *)v240 + v239, ":nonresident_read_pressure_interval");
      v242 = ORToolsCpBasedAllocatorUtil::CreateOptionalClosedInterval(a2, v233, v233, (uint64_t)v236, v238, &v267);
      v244 = v243;
      if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v267.__r_.__value_.__l.__data_);
      if (*(_QWORD *)v276)
      {
        *(_QWORD *)&v276[8] = *(_QWORD *)v276;
        operator delete(*(void **)v276);
      }
      v245 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v232);
      operations_research::sat::CumulativeConstraint::AddDemand(a3, v242, v244, *(_QWORD *)(v245 + 128), *(_QWORD *)(v245 + 136));
      ++v232;
      v231 = *(_QWORD *)(a1 + 104);
    }
    while (v232 < (*(_QWORD *)(a1 + 112) - v231) >> 3);
  }
  v246 = *(_QWORD *)(a1 + 240);
  v247 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)__str = *(_QWORD *)(v247 + 240);
  *(_DWORD *)&__str[8] = *(_DWORD *)(v247 + 248);
  v248 = operator new(0x20uLL);
  *(_QWORD *)&v276[8] = v248 + 4;
  *(_QWORD *)&v276[16] = v248 + 4;
  *(_OWORD *)v248 = *(_OWORD *)__str;
  v248[2] = v264;
  *((_DWORD *)v248 + 6) = v263;
  *(_QWORD *)v276 = v248;
  v249 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(a2, (uint64_t *)v276);
  v251 = v250;
  if (*(char *)(a1 + 271) >= 0)
    v252 = *(unsigned __int8 *)(a1 + 271);
  else
    v252 = *(_QWORD *)(a1 + 256);
  std::string::basic_string[abi:ne180100]((uint64_t)&v266, v252 + 36);
  if ((v266.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v253 = &v266;
  else
    v253 = (std::string *)v266.__r_.__value_.__r.__words[0];
  if (v252)
  {
    if (*(char *)(a1 + 271) >= 0)
      v254 = (const void *)(a1 + 248);
    else
      v254 = *(const void **)(a1 + 248);
    memmove(v253, v254, v252);
  }
  strcpy((char *)v253 + v252, ":nonresident_write_pressure_interval");
  v255 = ORToolsCpBasedAllocatorUtil::CreateOptionalClosedInterval(a2, v246, v246, (uint64_t)v249, v251, &v266);
  v257 = v256;
  if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v266.__r_.__value_.__l.__data_);
  if (*(_QWORD *)v276)
  {
    *(_QWORD *)&v276[8] = *(_QWORD *)v276;
    operator delete(*(void **)v276);
  }
  operations_research::sat::CumulativeConstraint::AddDemand(a3, v255, v257, *(_QWORD *)(*(_QWORD *)(a1 + 136) + 128), *(_QWORD *)(*(_QWORD *)(a1 + 136) + 136));
  ORToolsLayerScheduleVariable::CreateInplaceAllocationConstraints(a1, a2);
  if (v270.__r_.__value_.__r.__words[0])
  {
    v270.__r_.__value_.__l.__size_ = v270.__r_.__value_.__r.__words[0];
    operator delete(v270.__r_.__value_.__l.__data_);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_22D9C6BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (__p)
    operator delete(__p);
  if (a52)
    operator delete(a52);
  _Unwind_Resume(exception_object);
}

void ORToolsLayerScheduleVariable::CreateInplaceAllocationConstraints(uint64_t a1, operations_research::sat::CpModelBuilder *a2)
{
  uint64_t *v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  std::string *p_p;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  operations_research::sat::CpModelBuilder *v15;
  uint64_t v16;
  size_t v17;
  std::string *v18;
  const void *v19;
  const void *v20;
  std::string __p;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  operations_research::sat::CpModelBuilder *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36[4];

  v36[2] = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 192);
  if (*(uint64_t **)(a1 + 200) != v2)
  {
    v5 = 0;
    v6 = 0;
    v20 = (const void *)(a1 + 248);
    do
    {
      v7 = operations_research::sat::IntVar::IntVar((uint64_t)v36, (const operations_research::sat::BoolVar *)&v2[v5]);
      v35 = 2;
      operations_research::sat::LinearExpr::ScalProd(v7, 1uLL, &v35, 1, (uint64_t)&v26);
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v6);
      v31 = *(_QWORD *)(v8 + 224);
      v32 = *(_DWORD *)(v8 + 232);
      v9 = *(_QWORD *)(a1 + 136);
      v33 = *(_QWORD *)(v9 + 224);
      v34 = *(_DWORD *)(v9 + 232);
      operations_research::sat::LinearExpr::BooleanSum((uint64_t)&v31, 2, (uint64_t)&v22);
      v30 = operations_research::sat::CpModelBuilder::AddLessOrEqual(a2, (const operations_research::sat::LinearExpr *)&v26, (const operations_research::sat::LinearExpr *)&v22);
      if (*(char *)(a1 + 271) >= 0)
        v10 = *(unsigned __int8 *)(a1 + 271);
      else
        v10 = *(_QWORD *)(a1 + 256);
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v10 + 24);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v10)
      {
        if (*(char *)(a1 + 271) >= 0)
          v12 = v20;
        else
          v12 = *(const void **)(a1 + 248);
        memmove(p_p, v12, v10);
      }
      strcpy((char *)p_p + v10, ":in_place_var_constraint");
      operations_research::sat::Constraint::WithName((uint64_t *)&v30, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v24)
      {
        v25 = v24;
        operator delete(v24);
      }
      if (v22)
      {
        v23 = v22;
        operator delete(v22);
      }
      if (v28)
      {
        v29 = v28;
        operator delete(v28);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      ++v6;
      v2 = *(uint64_t **)(a1 + 192);
      v13 = *(_QWORD *)(a1 + 200) - (_QWORD)v2;
      v5 += 2;
    }
    while (v6 < v13 >> 4);
    if ((unint64_t)v13 > 0x10)
    {
      v14 = *v2;
      v32 = *((_DWORD *)v2 + 2);
      v31 = v14;
      LODWORD(v14) = *((_DWORD *)v2 + 6);
      v33 = v2[2];
      v34 = v14;
      operations_research::sat::LinearExpr::BooleanSum((uint64_t)&v31, 2, (uint64_t)&v26);
      v15 = operations_research::sat::CpModelBuilder::NewConstant(a2, 1);
      operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v22, (uint64_t)v15, v16);
      v36[0] = (uint64_t)operations_research::sat::CpModelBuilder::AddLessOrEqual(a2, (const operations_research::sat::LinearExpr *)&v26, (const operations_research::sat::LinearExpr *)&v22);
      if (*(char *)(a1 + 271) >= 0)
        v17 = *(unsigned __int8 *)(a1 + 271);
      else
        v17 = *(_QWORD *)(a1 + 256);
      v18 = &__p;
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v17 + 14);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v17)
      {
        if (*(char *)(a1 + 271) >= 0)
          v19 = v20;
        else
          v19 = *(const void **)(a1 + 248);
        memmove(v18, v19, v17);
      }
      strcpy((char *)v18 + v17, ":mutex_inplace");
      operations_research::sat::Constraint::WithName(v36, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v24)
      {
        v25 = v24;
        operator delete(v24);
      }
      if (v22)
      {
        v23 = v22;
        operator delete(v22);
      }
      if (v28)
      {
        v29 = v28;
        operator delete(v28);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
    }
  }
}

void sub_22D9C7198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a16 < 0)
    operator delete(__p);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a17);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a24);
  _Unwind_Resume(a1);
}

BOOL CpAllocGraph::GetTensorLiverange(uint64_t a1, unint64_t a2, _OWORD *a3)
{
  _QWORD *v4;
  unint64_t v6;

  v6 = a2;
  v4 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>((_QWORD *)(a1 + 408), &v6);
  if (v4)
    *a3 = *(_OWORD *)(v4 + 3);
  return v4 != 0;
}

BOOL CpAllocGraph::GetInPlacePorts(uint64_t a1, unint64_t a2, uint64_t **a3)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v7;

  v7 = a2;
  v4 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>((_QWORD *)(a1 + 488), &v7);
  v5 = v4;
  if (v4 && v4 + 3 != a3)
    std::__tree<unsigned long>::__assign_multi<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>(a3, (_QWORD *)v4[3], v4 + 4);
  return v5 != 0;
}

BOOL CpAllocGraph::GetLayerBehavior(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v4;
  unint64_t v6;

  v6 = a2;
  v4 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>((_QWORD *)(a1 + 448), &v6);
  if (v4)
    *a3 = v4[3];
  return v4 != 0;
}

BOOL CpAllocGraph::GetLayerSchedule(CpAllocGraph *this, unint64_t a2, uint64_t *a3)
{
  _QWORD *v4;
  unint64_t v6;

  v6 = a2;
  v4 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>((_QWORD *)this + 32, &v6);
  if (v4)
    *a3 = v4[3];
  return v4 != 0;
}

void CpAllocGraph::GetLayers(CpAllocGraph *this@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  _QWORD *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  char *v20;
  BOOL v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  CpAllocGraph *v27;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = (char *)this + 8;
  v6 = *(char **)this;
  if (*(CpAllocGraph **)this != (CpAllocGraph *)((char *)this + 8))
  {
    do
    {
      v7 = *((_QWORD *)v6 + 4);
      v27 = (CpAllocGraph *)v7;
      if (std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>((_QWORD *)this + 19, (unint64_t *)&v27))
      {
        v9 = (unint64_t *)a3[1];
        v8 = a3[2];
        if ((unint64_t)v9 >= v8)
        {
          v11 = (unint64_t *)*a3;
          v12 = ((uint64_t)v9 - *a3) >> 3;
          v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 61)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v14 = v8 - (_QWORD)v11;
          if (v14 >> 2 > v13)
            v13 = v14 >> 2;
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
            v15 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v15 = v13;
          if (v15)
          {
            v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)(a3 + 2), v15);
            v11 = (unint64_t *)*a3;
            v9 = (unint64_t *)a3[1];
          }
          else
          {
            v16 = 0;
          }
          v17 = (unint64_t *)&v16[8 * v12];
          *v17 = v7;
          v10 = v17 + 1;
          while (v9 != v11)
          {
            v18 = *--v9;
            *--v17 = v18;
          }
          *a3 = (uint64_t)v17;
          a3[1] = (uint64_t)v10;
          a3[2] = (uint64_t)&v16[8 * v15];
          if (v11)
            operator delete(v11);
        }
        else
        {
          *v9 = v7;
          v10 = v9 + 1;
        }
        a3[1] = (uint64_t)v10;
      }
      v19 = (char *)*((_QWORD *)v6 + 1);
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = *(char **)v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (char *)*((_QWORD *)v6 + 2);
          v21 = *(_QWORD *)v20 == (_QWORD)v6;
          v6 = v20;
        }
        while (!v21);
      }
      v6 = v20;
    }
    while (v20 != v5);
  }
  if ((a2 & 1) != 0)
  {
    v22 = *a3;
    v23 = (unint64_t *)a3[1];
    v24 = 126 - 2 * __clz(((uint64_t)v23 - *a3) >> 3);
    v21 = v23 == (unint64_t *)*a3;
    v27 = this;
    if (v21)
      v25 = 0;
    else
      v25 = v24;
    std::__introsort<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *,false>(v22, v23, &v27, v25, 1);
  }
}

void sub_22D9C74CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *,false>(uint64_t result, unint64_t *a2, _QWORD *a3, uint64_t a4, char a5)
{
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t *v40;
  BOOL v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  unint64_t *v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  unint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  unint64_t v66;
  unint64_t *v67;
  BOOL v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  unint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  unint64_t *v80;
  int64_t v81;
  int64_t v82;
  int64_t v83;
  uint64_t v84;
  unint64_t *v85;
  uint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  BOOL v90;
  unint64_t *v91;
  unint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  unint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t *v110;
  unint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  unint64_t *v117;
  unint64_t *v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  unint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  unint64_t v130;
  unint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  unint64_t v134;
  unint64_t *v135;
  unint64_t *v136;
  unint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t *v142;
  int64_t v143;
  unint64_t v144;
  unint64_t v146;
  unint64_t *v147;
  unint64_t *v148;
  unint64_t v149;
  unint64_t v150;

  v8 = (unint64_t *)result;
LABEL_2:
  v142 = a2 - 1;
  while (2)
  {
    v9 = v8;
    v10 = (char *)a2 - (char *)v8;
    v11 = a2 - v8;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v63 = *(a2 - 1);
        v149 = *v8;
        v150 = v63;
        v64 = (_QWORD *)(*a3 + 256);
        v65 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v64, &v150);
        result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v64, &v149);
        if (v65[3] < *(_QWORD *)(result + 24))
        {
          v66 = *v8;
          *v8 = *(a2 - 1);
          *(a2 - 1) = v66;
        }
        return result;
      case 3uLL:
        return (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *>(v8, v8 + 1, v142, a3);
      case 4uLL:
        return (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *>(v8, v8 + 1, v8 + 2, v142, a3);
      case 5uLL:
        return (uint64_t)std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *,0>(v8, v8 + 1, v8 + 2, v8 + 3, v142, a3);
      default:
        if (v10 <= 191)
        {
          v67 = v8 + 1;
          v69 = v8 == a2 || v67 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v69)
            {
              v70 = 0;
              v71 = v8;
              do
              {
                v73 = *v71;
                v72 = v71[1];
                v71 = v67;
                v149 = v73;
                v150 = v72;
                v74 = (_QWORD *)(*a3 + 256);
                v75 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v74, &v150);
                result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v74, &v149);
                if (v75[3] < *(_QWORD *)(result + 24))
                {
                  v76 = *v71;
                  v77 = v70;
                  while (1)
                  {
                    *(unint64_t *)((char *)v8 + v77 + 8) = *(unint64_t *)((char *)v8 + v77);
                    if (!v77)
                      break;
                    v149 = *(unint64_t *)((char *)v8 + v77 - 8);
                    v150 = v76;
                    v78 = (_QWORD *)(*a3 + 256);
                    v79 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v78, &v150);
                    result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v78, &v149);
                    v77 -= 8;
                    if (v79[3] >= *(_QWORD *)(result + 24))
                    {
                      v80 = (unint64_t *)((char *)v8 + v77 + 8);
                      goto LABEL_73;
                    }
                  }
                  v80 = v8;
LABEL_73:
                  *v80 = v76;
                }
                v67 = v71 + 1;
                v70 += 8;
              }
              while (v71 + 1 != a2);
            }
          }
          else if (!v69)
          {
            do
            {
              v131 = *v9;
              v130 = v9[1];
              v9 = v67;
              v149 = v131;
              v150 = v130;
              v132 = (_QWORD *)(*a3 + 256);
              v133 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v132, &v150);
              result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v132, &v149);
              if (v133[3] < *(_QWORD *)(result + 24))
              {
                v134 = *v9;
                v135 = v9;
                do
                {
                  v136 = v135;
                  v137 = *--v135;
                  *v136 = v137;
                  v149 = *(v136 - 2);
                  v150 = v134;
                  v138 = (_QWORD *)(*a3 + 256);
                  v139 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v138, &v150);
                  result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v138, &v149);
                }
                while (v139[3] < *(_QWORD *)(result + 24));
                *v135 = v134;
              }
              v67 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
          return result;
        }
        v148 = v8;
        if (!a4)
        {
          if (v8 == a2)
            return result;
          v140 = (char *)a2 - (char *)v8;
          v141 = a2 - v8;
          v81 = (v11 - 2) >> 1;
          v82 = v81;
          do
          {
            v83 = v82;
            if (v81 >= v82)
            {
              v84 = (2 * v82) | 1;
              v85 = &v9[v84];
              v86 = 2 * v82 + 2;
              v143 = v82;
              if (v86 < (uint64_t)v11)
              {
                v87 = *v85;
                v149 = v85[1];
                v150 = v87;
                v88 = (_QWORD *)(*a3 + 256);
                v89 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v88, &v150);
                v90 = v89[3] < std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v88, &v149)[3];
                v83 = v143;
                if (v90)
                  ++v85;
                v9 = v148;
                if (v90)
                  v84 = v86;
              }
              v91 = &v9[v83];
              v92 = *v85;
              v149 = *v91;
              v150 = v92;
              v93 = (_QWORD *)(*a3 + 256);
              v94 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v93, &v150);
              result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v93, &v149);
              v83 = v143;
              if (v94[3] >= *(_QWORD *)(result + 24))
              {
                v146 = *v91;
                do
                {
                  v95 = v85;
                  *v91 = *v85;
                  if (v81 < v84)
                    break;
                  v96 = (2 * v84) | 1;
                  v85 = &v148[v96];
                  v97 = 2 * v84 + 2;
                  if (v97 < (uint64_t)v11)
                  {
                    v98 = *v85;
                    v149 = v85[1];
                    v150 = v98;
                    v99 = (_QWORD *)(*a3 + 256);
                    v100 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v99, &v150);
                    v101 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v99, &v149);
                    v102 = v100[3];
                    v103 = v101[3];
                    if (v102 < v103)
                      ++v85;
                    v11 = v141;
                    if (v102 < v103)
                      v96 = v97;
                  }
                  v104 = *v85;
                  v149 = v146;
                  v150 = v104;
                  v105 = (_QWORD *)(*a3 + 256);
                  v106 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v105, &v150);
                  result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v105, &v149);
                  v107 = v106[3];
                  v91 = v95;
                  v84 = v96;
                }
                while (v107 >= *(_QWORD *)(result + 24));
                v9 = v148;
                *v95 = v146;
                v83 = v143;
              }
            }
            v82 = v83 - 1;
          }
          while (v83);
          v108 = v140 >> 3;
          while (2)
          {
            v109 = 0;
            v144 = *v9;
            v147 = a2;
            v110 = v9;
            do
            {
              v111 = &v110[v109 + 1];
              v112 = (2 * v109) | 1;
              v113 = 2 * v109 + 2;
              if (v113 < v108)
              {
                v114 = *v111;
                v149 = v111[1];
                v150 = v114;
                v115 = (_QWORD *)(*a3 + 256);
                v116 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v115, &v150);
                result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v115, &v149);
                if (v116[3] < *(_QWORD *)(result + 24))
                {
                  ++v111;
                  v112 = v113;
                }
              }
              *v110 = *v111;
              v110 = v111;
              v109 = v112;
            }
            while (v112 <= (uint64_t)((unint64_t)(v108 - 2) >> 1));
            v117 = v147 - 1;
            if (v111 != v147 - 1)
            {
              *v111 = *v117;
              v118 = v147 - 1;
              *v117 = v144;
              v9 = v148;
              v119 = (char *)v111 - (char *)v148 + 8;
              if (v119 >= 9)
              {
                v120 = (((unint64_t)v119 >> 3) - 2) >> 1;
                v121 = &v148[v120];
                v122 = *v121;
                v149 = *v111;
                v150 = v122;
                v123 = (_QWORD *)(*a3 + 256);
                v124 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v123, &v150);
                result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v123, &v149);
                if (v124[3] < *(_QWORD *)(result + 24))
                {
                  v125 = *v111;
                  do
                  {
                    v126 = v121;
                    *v111 = *v121;
                    if (!v120)
                      break;
                    v120 = (v120 - 1) >> 1;
                    v121 = &v148[v120];
                    v127 = *v121;
                    v149 = v125;
                    v150 = v127;
                    v128 = (_QWORD *)(*a3 + 256);
                    v129 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v128, &v150);
                    result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v128, &v149);
                    v111 = v126;
                  }
                  while (v129[3] < *(_QWORD *)(result + 24));
                  *v126 = v125;
LABEL_109:
                  v9 = v148;
                }
              }
              v90 = v108-- <= 2;
              a2 = v118;
              if (v90)
                return result;
              continue;
            }
            break;
          }
          v118 = v147 - 1;
          *v111 = v144;
          goto LABEL_109;
        }
        v12 = &v8[v11 >> 1];
        if ((unint64_t)v10 < 0x401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *>(&v9[v11 >> 1], v9, v142, a3);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *>(v9, &v9[v11 >> 1], v142, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *>(v9 + 1, v12 - 1, a2 - 2, a3);
          v13 = &v9[(v11 >> 1) + 1];
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *>(v148 + 2, v13, a2 - 3, a3);
          v9 = v148;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *>(v12 - 1, v12, v13, a3);
          v14 = *v148;
          *v148 = *v12;
          *v12 = v14;
        }
        --a4;
        if ((a5 & 1) == 0)
        {
          v15 = *(v9 - 1);
          v149 = *v9;
          v150 = v15;
          v16 = (_QWORD *)(*a3 + 256);
          v17 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v16, &v150);
          if (v17[3] >= std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v16, &v149)[3])
          {
            v8 = v9;
            v42 = *v9;
            v149 = *v142;
            v150 = v42;
            v43 = (_QWORD *)(*a3 + 256);
            v44 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v43, &v150);
            result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v43, &v149);
            if (v44[3] >= *(_QWORD *)(result + 24))
            {
              v48 = v8 + 1;
              do
              {
                v8 = v48;
                if (v48 >= a2)
                  break;
                ++v48;
                v149 = *v8;
                v150 = v42;
                v49 = (_QWORD *)(*a3 + 256);
                v50 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v49, &v150);
                result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v49, &v149);
              }
              while (v50[3] >= *(_QWORD *)(result + 24));
            }
            else
            {
              do
              {
                v45 = v8[1];
                ++v8;
                v149 = v45;
                v150 = v42;
                v46 = (_QWORD *)(*a3 + 256);
                v47 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v46, &v150);
                result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v46, &v149);
              }
              while (v47[3] >= *(_QWORD *)(result + 24));
            }
            v51 = a2;
            if (v8 < a2)
            {
              v51 = a2;
              do
              {
                v52 = *--v51;
                v149 = v52;
                v150 = v42;
                v53 = (_QWORD *)(*a3 + 256);
                v54 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v53, &v150);
                result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v53, &v149);
              }
              while (v54[3] < *(_QWORD *)(result + 24));
            }
            while (v8 < v51)
            {
              v55 = *v8;
              *v8 = *v51;
              *v51 = v55;
              do
              {
                v56 = v8[1];
                ++v8;
                v149 = v56;
                v150 = v42;
                v57 = (_QWORD *)(*a3 + 256);
                v58 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v57, &v150);
              }
              while (v58[3] >= std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v57, &v149)[3]);
              do
              {
                v59 = *--v51;
                v149 = v59;
                v150 = v42;
                v60 = (_QWORD *)(*a3 + 256);
                v61 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v60, &v150);
                result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v60, &v149);
              }
              while (v61[3] < *(_QWORD *)(result + 24));
            }
            v62 = v8 - 1;
            if (v8 - 1 != v148)
              *v148 = *v62;
            a5 = 0;
            *v62 = v42;
            continue;
          }
        }
        v18 = 0;
        v19 = *v9;
        do
        {
          v20 = v9[v18 + 1];
          v149 = v19;
          v150 = v20;
          v21 = (_QWORD *)(*a3 + 256);
          v22 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v21, &v150);
          ++v18;
        }
        while (v22[3] < std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v21, &v149)[3]);
        v23 = &v9[v18];
        v24 = a2;
        if (v18 == 1)
        {
          v24 = a2;
          do
          {
            if (v23 >= v24)
              break;
            v28 = *--v24;
            v149 = v19;
            v150 = v28;
            v29 = (_QWORD *)(*a3 + 256);
            v30 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v29, &v150);
          }
          while (v30[3] >= std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v29, &v149)[3]);
        }
        else
        {
          do
          {
            v25 = *--v24;
            v149 = v19;
            v150 = v25;
            v26 = (_QWORD *)(*a3 + 256);
            v27 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v26, &v150);
          }
          while (v27[3] >= std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v26, &v149)[3]);
        }
        if (v23 >= v24)
        {
          v40 = v23 - 1;
        }
        else
        {
          v31 = &v9[v18];
          v32 = v24;
          do
          {
            v33 = *v31;
            *v31 = *v32;
            *v32 = v33;
            do
            {
              v34 = v31[1];
              ++v31;
              v149 = v19;
              v150 = v34;
              v35 = (_QWORD *)(*a3 + 256);
              v36 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v35, &v150);
            }
            while (v36[3] < std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v35, &v149)[3]);
            do
            {
              v37 = *--v32;
              v149 = v19;
              v150 = v37;
              v38 = (_QWORD *)(*a3 + 256);
              v39 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v38, &v150);
            }
            while (v39[3] >= std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v38, &v149)[3]);
          }
          while (v31 < v32);
          v40 = v31 - 1;
        }
        if (v40 != v148)
          *v148 = *v40;
        *v40 = v19;
        if (v23 < v24)
        {
LABEL_32:
          result = std::__introsort<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *,false>(v148, v40, a3, a4, a5 & 1);
          a5 = 0;
          v8 = v40 + 1;
          continue;
        }
        v41 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *>(v148, v40, a3);
        v8 = v40 + 1;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *>(v40 + 1, a2, a3);
        if (!(_DWORD)result)
        {
          if (v41)
            continue;
          goto LABEL_32;
        }
        a2 = v40;
        v8 = v148;
        if (!v41)
          goto LABEL_2;
        return result;
    }
  }
}

_QWORD *std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *,0>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, _QWORD *a6)
{
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *result;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *>(a1, a2, a3, a4, a6);
  v12 = *a5;
  v29 = *a4;
  v30 = v12;
  v13 = (_QWORD *)(*a6 + 256);
  v14 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v13, &v30);
  result = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v13, &v29);
  if (v14[3] < result[3])
  {
    v16 = *a4;
    *a4 = *a5;
    *a5 = v16;
    v17 = *a4;
    v29 = *a3;
    v30 = v17;
    v18 = (_QWORD *)(*a6 + 256);
    v19 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v18, &v30);
    result = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v18, &v29);
    if (v19[3] < result[3])
    {
      v20 = *a3;
      *a3 = *a4;
      *a4 = v20;
      v21 = *a3;
      v29 = *a2;
      v30 = v21;
      v22 = (_QWORD *)(*a6 + 256);
      v23 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v22, &v30);
      result = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v22, &v29);
      if (v23[3] < result[3])
      {
        v24 = *a2;
        *a2 = *a3;
        *a3 = v24;
        v25 = *a2;
        v29 = *a1;
        v30 = v25;
        v26 = (_QWORD *)(*a6 + 256);
        v27 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v26, &v30);
        result = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v26, &v29);
        if (v27[3] < result[3])
        {
          v28 = *a1;
          *a1 = *a2;
          *a2 = v28;
        }
      }
    }
  }
  return result;
}

_QWORD *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, _QWORD *a4)
{
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *result;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;

  v8 = *a2;
  v27 = *a1;
  v28 = v8;
  v9 = (_QWORD *)(*a4 + 256);
  v10 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v9, &v28);
  v11 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v9, &v27);
  v12 = *a3;
  if (v10[3] >= v11[3])
  {
    v27 = *a2;
    v28 = v12;
    v17 = (_QWORD *)(*a4 + 256);
    v18 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v17, &v28);
    result = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v17, &v27);
    if (v18[3] < result[3])
    {
      v19 = *a2;
      *a2 = *a3;
      *a3 = v19;
      v20 = *a2;
      v27 = *a1;
      v28 = v20;
      v21 = (_QWORD *)(*a4 + 256);
      v22 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v21, &v28);
      result = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v21, &v27);
      if (v22[3] < result[3])
      {
        v23 = *a1;
        *a1 = *a2;
        *a2 = v23;
      }
    }
  }
  else
  {
    v27 = *a2;
    v28 = v12;
    v13 = (_QWORD *)(*a4 + 256);
    v14 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v13, &v28);
    result = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v13, &v27);
    v16 = *a1;
    if (v14[3] >= result[3])
    {
      *a1 = *a2;
      *a2 = v16;
      v24 = *a3;
      v27 = v16;
      v28 = v24;
      v25 = (_QWORD *)(*a4 + 256);
      v26 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v25, &v28);
      result = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v25, &v27);
      if (v26[3] >= result[3])
        return result;
      v16 = *a2;
      *a2 = *a3;
    }
    else
    {
      *a1 = *a3;
    }
    *a3 = v16;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *>(unint64_t *a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  _BOOL8 result;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v24 = *a1;
      v25 = v8;
      v9 = (_QWORD *)(*a3 + 256);
      v10 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v9, &v25);
      if (v10[3] < std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v9, &v24)[3])
      {
        v11 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v11;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v12 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *>(a1, a1 + 1, a1 + 2, a3);
      v13 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    v16 = *v13;
    v24 = *v12;
    v25 = v16;
    v17 = (_QWORD *)(*a3 + 256);
    v18 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v17, &v25);
    if (v18[3] < std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v17, &v24)[3])
    {
      v19 = *v13;
      v20 = v14;
      while (1)
      {
        *(unint64_t *)((char *)a1 + v20 + 24) = *(unint64_t *)((char *)a1 + v20 + 16);
        if (v20 == -16)
          break;
        v24 = *(unint64_t *)((char *)a1 + v20 + 8);
        v25 = v19;
        v21 = (_QWORD *)(*a3 + 256);
        v22 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v21, &v25);
        v20 -= 8;
        if (v22[3] >= std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v21, &v24)[3])
        {
          v23 = (unint64_t *)((char *)a1 + v20 + 24);
          goto LABEL_12;
        }
      }
      v23 = a1;
LABEL_12:
      *v23 = v19;
      if (++v15 == 8)
        return v13 + 1 == a2;
    }
    v12 = v13;
    v14 += 8;
    if (++v13 == a2)
      return 1;
  }
}

_QWORD *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, _QWORD *a5)
{
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *result;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CpAllocGraph::GetLayers(BOOL)::$_0 &,unsigned long long *>(a1, a2, a3, a5);
  v10 = *a4;
  v23 = *a3;
  v24 = v10;
  v11 = (_QWORD *)(*a5 + 256);
  v12 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v11, &v24);
  result = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v11, &v23);
  if (v12[3] < result[3])
  {
    v14 = *a3;
    *a3 = *a4;
    *a4 = v14;
    v15 = *a3;
    v23 = *a2;
    v24 = v15;
    v16 = (_QWORD *)(*a5 + 256);
    v17 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v16, &v24);
    result = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v16, &v23);
    if (v17[3] < result[3])
    {
      v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      v19 = *a2;
      v23 = *a1;
      v24 = v19;
      v20 = (_QWORD *)(*a5 + 256);
      v21 = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v20, &v24);
      result = std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::find<unsigned long long>(v20, &v23);
      if (v21[3] < result[3])
      {
        v22 = *a1;
        *a1 = *a2;
        *a2 = v22;
      }
    }
  }
  return result;
}

uint64_t **std::__tree<unsigned long>::__assign_multi<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = std::__tree<unsigned long>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          v8[4] = v9[4];
          std::__tree<unsigned long>::__node_insert_multi(v5, v8);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = std::__tree<unsigned long>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          v10 = (_QWORD *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = (_QWORD *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v11 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)std::__tree<unsigned long>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<unsigned long>::__emplace_multi<unsigned long const&>(v5, a2 + 4);
      v12 = (_QWORD *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)a2[2];
          v11 = *v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_22D9C8848(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<unsigned long>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<unsigned long>::__node_insert_multi(uint64_t **a1, uint64_t *a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;

  v3 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (a2[4] >= (unint64_t)v4[4])
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v3, v5, a2);
  return a2;
}

_QWORD *std::__tree<unsigned long>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<unsigned long>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<unsigned long>::__emplace_multi<unsigned long const&>(uint64_t **a1, unint64_t *a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;

  v4 = (uint64_t *)operator new(0x28uLL);
  v5 = *a2;
  v4[4] = *a2;
  v6 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v7;
        if (v5 >= v7[4])
          break;
        v7 = (uint64_t *)*v7;
        v8 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v7 = (uint64_t *)v7[1];
    }
    while (v7);
    v8 = v6 + 1;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_8:
  std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v6, v8, v4);
  return v4;
}

uint64_t ORToolsChainScheduleVariable::ORToolsChainScheduleVariable(uint64_t a1, operations_research::sat::CpModelBuilder *a2, uint64_t a3, const std::string::value_type **a4, uint64_t a5, uint64_t *a6, uint64_t *a7, const ComputeCycleEstimator *a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, __int128 *a13, uint64_t a14, uint64_t *a15, uint64_t *a16, const ComputeCycleEstimator *a17, uint64_t a18, uint64_t a19, char a20,operations_research::Domain *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v34;
  size_t v35;
  std::string *p_p;
  const std::string::value_type *v37;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  std::string *v41;
  const void *v42;
  uint64_t v43;
  uint64_t v44;
  size_t v45;
  std::string *v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  size_t v50;
  std::string *v51;
  const void *v52;
  uint64_t v53;
  uint64_t v54;
  size_t v55;
  std::string *v56;
  const void *v57;
  uint64_t v58;
  uint64_t v59;
  size_t v60;
  std::string *v61;
  const void *v62;
  uint64_t v63;
  uint64_t v64;
  size_t v65;
  std::string *v66;
  const void *v67;
  uint64_t v68;
  uint64_t v69;
  size_t v70;
  std::string *v71;
  const void *v72;
  uint64_t v73;
  ORToolsCpComputeConstant *v74;
  uint64_t v75;
  ORToolsCpComputeConstant *v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  size_t v81;
  std::string *v82;
  const void *v83;
  uint64_t v84;
  uint64_t v85;
  size_t v86;
  std::string *v87;
  const void *v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t *v92;
  std::string __p;
  operations_research::sat::CpModelBuilder *v94;
  uint64_t v95;

  v94 = operations_research::sat::CpModelBuilder::NewConstant(a2, 0);
  v95 = v34;
  if (*((char *)a4 + 23) >= 0)
    v35 = *((unsigned __int8 *)a4 + 23);
  else
    v35 = (size_t)a4[1];
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v35 + 12);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v35)
  {
    if (*((char *)a4 + 23) >= 0)
      v37 = (const std::string::value_type *)a4;
    else
      v37 = *a4;
    memmove(p_p, v37, v35);
  }
  strcpy((char *)p_p + v35, ":chain_begin");
  v92 = a7;
  *(_QWORD *)a1 = operations_research::sat::BoolVar::WithName((int *)&v94, &__p);
  *(_QWORD *)(a1 + 8) = v38;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v94 = operations_research::sat::CpModelBuilder::NewIntVar(a2, a21);
  v95 = v39;
  if (*((char *)a4 + 23) >= 0)
    v40 = *((unsigned __int8 *)a4 + 23);
  else
    v40 = (size_t)a4[1];
  v41 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v40 + 11);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v40)
  {
    if (*((char *)a4 + 23) >= 0)
      v42 = a4;
    else
      v42 = *a4;
    memmove(v41, v42, v40);
  }
  strcpy((char *)v41 + v40, ":chain_time");
  *(_QWORD *)(a1 + 16) = operations_research::sat::BoolVar::WithName((int *)&v94, &__p);
  *(_QWORD *)(a1 + 24) = v43;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v94 = operations_research::sat::CpModelBuilder::NewIntVar(a2, a21);
  v95 = v44;
  if (*((char *)a4 + 23) >= 0)
    v45 = *((unsigned __int8 *)a4 + 23);
  else
    v45 = (size_t)a4[1];
  v46 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v45 + 10);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v46 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v45)
  {
    if (*((char *)a4 + 23) >= 0)
      v47 = a4;
    else
      v47 = *a4;
    memmove(v46, v47, v45);
  }
  strcpy((char *)v46 + v45, ":chain_end");
  v91 = a3;
  *(_QWORD *)(a1 + 32) = operations_research::sat::BoolVar::WithName((int *)&v94, &__p);
  *(_QWORD *)(a1 + 40) = v48;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  ORToolsChainScheduleVariable::CreateReadEndVariables(a2, (const void **)a4, (a6[1] - *a6) >> 3, a21, (uint64_t **)(a1 + 48));
  v94 = operations_research::sat::CpModelBuilder::NewIntVar(a2, a21);
  v95 = v49;
  if (*((char *)a4 + 23) >= 0)
    v50 = *((unsigned __int8 *)a4 + 23);
  else
    v50 = (size_t)a4[1];
  v51 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v50 + 21);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v51 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v50)
  {
    if (*((char *)a4 + 23) >= 0)
      v52 = a4;
    else
      v52 = *a4;
    memmove(v51, v52, v50);
  }
  strcpy((char *)v51 + v50, ":producer_compute_end");
  *(_QWORD *)(a1 + 72) = operations_research::sat::BoolVar::WithName((int *)&v94, &__p);
  *(_QWORD *)(a1 + 80) = v53;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v94 = operations_research::sat::CpModelBuilder::NewIntVar(a2, a21);
  v95 = v54;
  if (*((char *)a4 + 23) >= 0)
    v55 = *((unsigned __int8 *)a4 + 23);
  else
    v55 = (size_t)a4[1];
  v56 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v55 + 19);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v56 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v55)
  {
    if (*((char *)a4 + 23) >= 0)
      v57 = a4;
    else
      v57 = *a4;
    memmove(v56, v57, v55);
  }
  strcpy((char *)v56 + v55, ":prodcuer_write_end");
  *(_QWORD *)(a1 + 88) = operations_research::sat::BoolVar::WithName((int *)&v94, &__p);
  *(_QWORD *)(a1 + 96) = v58;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  ORToolsChainScheduleVariable::CreateReadEndVariables(a2, (const void **)a13, (a15[1] - *a15) >> 3, a21, (uint64_t **)(a1 + 104));
  v94 = operations_research::sat::CpModelBuilder::NewIntVar(a2, a21);
  v95 = v59;
  if (*((char *)a13 + 23) >= 0)
    v60 = *((unsigned __int8 *)a13 + 23);
  else
    v60 = *((_QWORD *)a13 + 1);
  v61 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v60 + 21);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v61 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v60)
  {
    if (*((char *)a13 + 23) >= 0)
      v62 = a13;
    else
      v62 = *(const void **)a13;
    memmove(v61, v62, v60);
  }
  strcpy((char *)v61 + v60, ":consumer_compute_end");
  *(_QWORD *)(a1 + 128) = operations_research::sat::BoolVar::WithName((int *)&v94, &__p);
  *(_QWORD *)(a1 + 136) = v63;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v94 = operations_research::sat::CpModelBuilder::NewIntVar(a2, a21);
  v95 = v64;
  if (*((char *)a13 + 23) >= 0)
    v65 = *((unsigned __int8 *)a13 + 23);
  else
    v65 = *((_QWORD *)a13 + 1);
  v66 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v65 + 19);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v66 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v65)
  {
    if (*((char *)a13 + 23) >= 0)
      v67 = a13;
    else
      v67 = *(const void **)a13;
    memmove(v66, v67, v65);
  }
  strcpy((char *)v66 + v65, ":consumer_write_end");
  *(_QWORD *)(a1 + 144) = operations_research::sat::BoolVar::WithName((int *)&v94, &__p);
  *(_QWORD *)(a1 + 152) = v68;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v94 = operations_research::sat::CpModelBuilder::NewIntVar(a2, a21);
  v95 = v69;
  if (*((char *)a4 + 23) >= 0)
    v70 = *((unsigned __int8 *)a4 + 23);
  else
    v70 = (size_t)a4[1];
  v71 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v70 + 29);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v71 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v70)
  {
    if (*((char *)a4 + 23) >= 0)
      v72 = a4;
    else
      v72 = *a4;
    memmove(v71, v72, v70);
  }
  strcpy((char *)v71 + v70, ":pipeline_stall_overhead_time");
  *(_QWORD *)(a1 + 160) = operations_research::sat::BoolVar::WithName((int *)&v94, &__p);
  *(_QWORD *)(a1 + 168) = v73;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  ORToolsChainScheduleVariable::CreateInputL2AccessVariables((uint64_t)a2, a6, v92, (uint64_t **)(a1 + 176));
  v74 = (ORToolsCpComputeConstant *)operator new();
  ORToolsCpComputeConstant::ORToolsCpComputeConstant(v74, a2, a8);
  *(_QWORD *)(a1 + 200) = v74;
  v75 = operator new();
  ORToolsCpL2AccessVariable::ORToolsCpL2AccessVariable(v75, a2, a9, a10);
  *(_QWORD *)(a1 + 208) = v75;
  ORToolsChainScheduleVariable::CreateInputL2AccessVariables((uint64_t)a2, a15, a16, (uint64_t **)(a1 + 216));
  v76 = (ORToolsCpComputeConstant *)operator new();
  ORToolsCpComputeConstant::ORToolsCpComputeConstant(v76, a2, a17);
  *(_QWORD *)(a1 + 240) = v76;
  v77 = operator new();
  ORToolsCpL2AccessVariable::ORToolsCpL2AccessVariable(v77, a2, a18, a19);
  *(_QWORD *)(a1 + 248) = v77;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  std::vector<operations_research::sat::BoolVar>::__init_with_size[abi:ne180100]<operations_research::sat::BoolVar*,operations_research::sat::BoolVar*>((_QWORD *)(a1 + 256), *(const void **)a23, *(_QWORD *)(a23 + 8), (uint64_t)(*(_QWORD *)(a23 + 8) - *(_QWORD *)a23) >> 4);
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  std::vector<operations_research::sat::BoolVar>::__init_with_size[abi:ne180100]<operations_research::sat::BoolVar*,operations_research::sat::BoolVar*>((_QWORD *)(a1 + 280), *(const void **)a24, *(_QWORD *)(a24 + 8), (uint64_t)(*(_QWORD *)(a24 + 8) - *(_QWORD *)a24) >> 4);
  *(_QWORD *)(a1 + 304) = v91;
  *(_QWORD *)(a1 + 312) = a12;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 320), *a4, (std::string::size_type)a4[1]);
  }
  else
  {
    v78 = *(_OWORD *)a4;
    *(_QWORD *)(a1 + 336) = a4[2];
    *(_OWORD *)(a1 + 320) = v78;
  }
  if (*((char *)a13 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 344), *(const std::string::value_type **)a13, *((_QWORD *)a13 + 1));
  }
  else
  {
    v79 = *a13;
    *(_QWORD *)(a1 + 360) = *((_QWORD *)a13 + 2);
    *(_OWORD *)(a1 + 344) = v79;
  }
  *(_QWORD *)(a1 + 368) = a5;
  *(_QWORD *)(a1 + 376) = a14;
  *(_QWORD *)(a1 + 384) = a22;
  *(_BYTE *)(a1 + 392) = a11;
  *(_BYTE *)(a1 + 393) = a20;
  *(_QWORD *)(a1 + 400) = a25;
  *(_QWORD *)(a1 + 408) = a26;
  v94 = operations_research::sat::CpModelBuilder::NewIntVar(a2, a21);
  v95 = v80;
  if (*((char *)a4 + 23) >= 0)
    v81 = *((unsigned __int8 *)a4 + 23);
  else
    v81 = (size_t)a4[1];
  v82 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v81 + 48);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v82 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v81)
  {
    if (*((char *)a4 + 23) >= 0)
      v83 = a4;
    else
      v83 = *a4;
    memmove(v82, v83, v81);
  }
  strcpy((char *)v82 + v81, ":dual_input_pe_producer_nonresident_read_latency");
  *(_QWORD *)(a1 + 416) = operations_research::sat::BoolVar::WithName((int *)&v94, &__p);
  *(_QWORD *)(a1 + 424) = v84;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v94 = operations_research::sat::CpModelBuilder::NewIntVar(a2, a21);
  v95 = v85;
  if (*((char *)a4 + 23) >= 0)
    v86 = *((unsigned __int8 *)a4 + 23);
  else
    v86 = (size_t)a4[1];
  v87 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v86 + 44);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v87 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v86)
  {
    if (*((char *)a4 + 23) >= 0)
      v88 = a4;
    else
      v88 = *a4;
    memmove(v87, v88, v86);
  }
  strcpy((char *)v87 + v86, ":dual_input_pe_producer_nonresident_read_end");
  *(_QWORD *)(a1 + 432) = operations_research::sat::BoolVar::WithName((int *)&v94, &__p);
  *(_QWORD *)(a1 + 440) = v89;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

{
  return ORToolsChainScheduleVariable::ORToolsChainScheduleVariable(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26);
}

void sub_22D9C9324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void **a11, void **a12, uint64_t a13, uint64_t a14, void *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  void **v22;
  void **v23;
  void **v24;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  if (*(char *)(v21 + 343) < 0)
    operator delete(*v24);
  v26 = *v22;
  if (*v22)
  {
    *(_QWORD *)(v21 + 288) = v26;
    operator delete(v26);
  }
  v27 = *v23;
  if (*v23)
  {
    *(_QWORD *)(v21 + 264) = v27;
    operator delete(v27);
  }
  std::unique_ptr<ORToolsCpL2AccessVariable>::reset[abi:ne180100]((ORToolsCpL2AccessVariable **)(v21 + 248), 0);
  std::unique_ptr<ORToolsCpComputeConstant>::reset[abi:ne180100]((ORToolsCpComputeConstant **)(v21 + 240), 0);
  __p = a15;
  std::vector<std::unique_ptr<ORToolsCpL2AccessVariable>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::unique_ptr<ORToolsCpL2AccessVariable>::reset[abi:ne180100]((ORToolsCpL2AccessVariable **)(v21 + 208), 0);
  std::unique_ptr<ORToolsCpComputeConstant>::reset[abi:ne180100]((ORToolsCpComputeConstant **)(v21 + 200), 0);
  __p = a10;
  std::vector<std::unique_ptr<ORToolsCpL2AccessVariable>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v28 = *a11;
  if (*a11)
  {
    *(_QWORD *)(v21 + 112) = v28;
    operator delete(v28);
  }
  v29 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v21 + 56) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

void sub_22D9C9548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    JUMPOUT(0x22D9C953CLL);
  JUMPOUT(0x22D9C9540);
}

void ORToolsChainScheduleVariable::CreateReadEndVariables(operations_research::sat::CpModelBuilder *a1@<X1>, const void **a2@<X2>, uint64_t a3@<X3>, const operations_research::Domain *a4@<X4>, uint64_t **a5@<X8>)
{
  uint64_t v10;
  size_t v11;
  std::string *p_p;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t *v26;
  char *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  size_t v33;
  std::string *v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t *v48;
  char *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  int v53;
  std::string __p;
  operations_research::sat::CpModelBuilder *v55;
  uint64_t v56;

  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v55 = operations_research::sat::CpModelBuilder::NewIntVar(a1, a4);
  v56 = v10;
  if (*((char *)a2 + 23) >= 0)
    v11 = *((unsigned __int8 *)a2 + 23);
  else
    v11 = (size_t)a2[1];
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v11 + 11);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v11)
  {
    if (*((char *)a2 + 23) >= 0)
      v13 = a2;
    else
      v13 = *a2;
    memmove(p_p, v13, v11);
  }
  strcpy((char *)p_p + v11, ":read_end_0");
  v14 = operations_research::sat::BoolVar::WithName((int *)&v55, &__p);
  v16 = v14;
  v17 = v15;
  v18 = (unint64_t)a5[2];
  v19 = a5[1];
  if ((unint64_t)v19 >= v18)
  {
    v21 = ((char *)v19 - (char *)*a5) >> 4;
    v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 60)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v23 = v18 - (_QWORD)*a5;
    if (v23 >> 3 > v22)
      v22 = v23 >> 3;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
      v24 = 0xFFFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
      v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)(a5 + 2), v24);
    else
      v25 = 0;
    v26 = (uint64_t *)&v25[16 * v21];
    v27 = &v25[16 * v24];
    *v26 = v16;
    v26[1] = v17;
    v20 = v26 + 2;
    v29 = *a5;
    v28 = a5[1];
    if (v28 != *a5)
    {
      do
      {
        v30 = *(v28 - 2);
        v28 -= 2;
        v31 = *((_DWORD *)v28 + 2);
        *(v26 - 2) = v30;
        v26 -= 2;
        *((_DWORD *)v26 + 2) = v31;
      }
      while (v28 != v29);
      v28 = *a5;
    }
    *a5 = v26;
    a5[1] = v20;
    a5[2] = (uint64_t *)v27;
    if (v28)
      operator delete(v28);
  }
  else
  {
    *v19 = v14;
    v19[1] = v15;
    v20 = v19 + 2;
  }
  a5[1] = v20;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (a3 == 2)
  {
    v55 = operations_research::sat::CpModelBuilder::NewIntVar(a1, a4);
    v56 = v32;
    if (*((char *)a2 + 23) >= 0)
      v33 = *((unsigned __int8 *)a2 + 23);
    else
      v33 = (size_t)a2[1];
    v34 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v33 + 11);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v33)
    {
      if (*((char *)a2 + 23) >= 0)
        v35 = a2;
      else
        v35 = *a2;
      memmove(v34, v35, v33);
    }
    strcpy((char *)v34 + v33, ":read_end_1");
    v36 = operations_research::sat::BoolVar::WithName((int *)&v55, &__p);
    v38 = v36;
    v39 = v37;
    v41 = a5[1];
    v40 = (unint64_t)a5[2];
    if ((unint64_t)v41 >= v40)
    {
      v43 = ((char *)v41 - (char *)*a5) >> 4;
      v44 = v43 + 1;
      if ((unint64_t)(v43 + 1) >> 60)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v45 = v40 - (_QWORD)*a5;
      if (v45 >> 3 > v44)
        v44 = v45 >> 3;
      if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0)
        v46 = 0xFFFFFFFFFFFFFFFLL;
      else
        v46 = v44;
      if (v46)
        v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)(a5 + 2), v46);
      else
        v47 = 0;
      v48 = (uint64_t *)&v47[16 * v43];
      v49 = &v47[16 * v46];
      *v48 = v38;
      v48[1] = v39;
      v42 = v48 + 2;
      v51 = *a5;
      v50 = a5[1];
      if (v50 != *a5)
      {
        do
        {
          v52 = *(v50 - 2);
          v50 -= 2;
          v53 = *((_DWORD *)v50 + 2);
          *(v48 - 2) = v52;
          v48 -= 2;
          *((_DWORD *)v48 + 2) = v53;
        }
        while (v50 != v51);
        v50 = *a5;
      }
      *a5 = v48;
      a5[1] = v42;
      a5[2] = (uint64_t *)v49;
      if (v50)
        operator delete(v50);
    }
    else
    {
      *v41 = v36;
      v41[1] = v37;
      v42 = v41 + 2;
    }
    a5[1] = v42;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_22D9C98A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void *v16;

  v16 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void ORToolsChainScheduleVariable::CreateInputL2AccessVariables(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, uint64_t **a4@<X8>)
{
  uint64_t v5;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  int64x2_t v25;
  ORToolsCpL2AccessVariable *v26;
  uint64_t *v27;
  uint64_t v28;
  int64x2_t v29;
  char *v30;
  _QWORD *v31;
  ORToolsCpL2AccessVariable *v32;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v5 = *a2;
  if (a2[1] != *a2)
  {
    v9 = 0;
    do
    {
      v10 = *a3;
      v11 = operator new();
      ORToolsCpL2AccessVariable::ORToolsCpL2AccessVariable(v11, a1, *(_QWORD *)(v5 + 8 * v9), *(_QWORD *)(v10 + 8 * v9));
      v32 = (ORToolsCpL2AccessVariable *)v11;
      v12 = a4[1];
      v13 = (unint64_t)a4[2];
      if ((unint64_t)v12 >= v13)
      {
        v14 = v12 - *a4;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v16 = v13 - (_QWORD)*a4;
        if (v16 >> 2 > v15)
          v15 = v16 >> 2;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        v31 = a4 + 2;
        if (v17)
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)(a4 + 2), v17);
        else
          v18 = 0;
        v19 = (uint64_t *)&v18[8 * v14];
        v20 = &v18[8 * v17];
        v30 = v20;
        v32 = 0;
        *v19 = v11;
        v21 = v19 + 1;
        v29.i64[1] = (uint64_t)(v19 + 1);
        v23 = *a4;
        v22 = a4[1];
        if (v22 == *a4)
        {
          v26 = 0;
          v25 = vdupq_n_s64((unint64_t)v22);
        }
        else
        {
          do
          {
            v24 = *--v22;
            *v22 = 0;
            *--v19 = v24;
          }
          while (v22 != v23);
          v25 = *(int64x2_t *)a4;
          v21 = (uint64_t *)v29.i64[1];
          v20 = v30;
          v26 = v32;
        }
        *a4 = v19;
        a4[1] = v21;
        v29 = v25;
        v27 = a4[2];
        a4[2] = (uint64_t *)v20;
        v30 = (char *)v27;
        v28 = v25.i64[0];
        std::__split_buffer<std::unique_ptr<ORToolsCpL2AccessVariable>>::~__split_buffer((uint64_t)&v28);
        a4[1] = v21;
        if (v26)
        {
          ORToolsCpL2AccessVariable::~ORToolsCpL2AccessVariable(v26);
          MEMORY[0x22E31DF78]();
        }
      }
      else
      {
        v32 = 0;
        *v12 = v11;
        a4[1] = v12 + 1;
      }
      ++v9;
      v5 = *a2;
    }
    while (v9 < (a2[1] - *a2) >> 3);
  }
}

void sub_22D9C9AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::unique_ptr<ORToolsCpL2AccessVariable>::reset[abi:ne180100]((ORToolsCpL2AccessVariable **)va, 0);
  std::vector<std::unique_ptr<ORToolsCpL2AccessVariable>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void ORToolsChainScheduleVariable::~ORToolsChainScheduleVariable(ORToolsChainScheduleVariable *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v6;

  if (*((char *)this + 367) < 0)
    operator delete(*((void **)this + 43));
  if (*((char *)this + 343) < 0)
    operator delete(*((void **)this + 40));
  v2 = (void *)*((_QWORD *)this + 35);
  if (v2)
  {
    *((_QWORD *)this + 36) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 32);
  if (v3)
  {
    *((_QWORD *)this + 33) = v3;
    operator delete(v3);
  }
  std::unique_ptr<ORToolsCpL2AccessVariable>::reset[abi:ne180100]((ORToolsCpL2AccessVariable **)this + 31, 0);
  std::unique_ptr<ORToolsCpComputeConstant>::reset[abi:ne180100]((ORToolsCpComputeConstant **)this + 30, 0);
  v6 = (void **)((char *)this + 216);
  std::vector<std::unique_ptr<ORToolsCpL2AccessVariable>>::__destroy_vector::operator()[abi:ne180100](&v6);
  std::unique_ptr<ORToolsCpL2AccessVariable>::reset[abi:ne180100]((ORToolsCpL2AccessVariable **)this + 26, 0);
  std::unique_ptr<ORToolsCpComputeConstant>::reset[abi:ne180100]((ORToolsCpComputeConstant **)this + 25, 0);
  v6 = (void **)((char *)this + 176);
  std::vector<std::unique_ptr<ORToolsCpL2AccessVariable>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v4 = (void *)*((_QWORD *)this + 13);
  if (v4)
  {
    *((_QWORD *)this + 14) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 6);
  if (v5)
  {
    *((_QWORD *)this + 7) = v5;
    operator delete(v5);
  }
}

void ORToolsChainScheduleVariable::CreateLayerConstraint(uint64_t a1, operations_research::sat::CpModelBuilder *a2, uint64_t a3, _QWORD *a4, uint64_t a5, const operations_research::Domain *a6)
{
  uint64_t v7;
  __int128 v8;
  size_t v9;
  std::string *p_p;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  operations_research::sat::CpModelBuilder *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  operations_research::sat::CpModelBuilder *v30;
  operations_research::sat::CpModelBuilder *BooleanAnd;
  int v32;
  uint64_t v33;
  std::string::size_type v34;
  size_t v35;
  std::string *p_str;
  const void *v37;
  std::string *v38;
  std::string::size_type size;
  std::string *v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  operations_research::sat::CpModelBuilder *v51;
  operations_research::sat::CpModelBuilder *v52;
  int v53;
  uint64_t v54;
  std::string::size_type v55;
  size_t v56;
  std::string *v57;
  const void *v58;
  std::string *v59;
  std::string::size_type v60;
  std::string *v61;
  __int128 v62;
  std::string::size_type v63;
  size_t v64;
  std::string *v65;
  const void *v66;
  uint64_t v67;
  std::string::size_type v68;
  size_t v69;
  std::string *v70;
  const void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  std::string::size_type v76;
  size_t v77;
  std::string *v78;
  const void *v79;
  std::string *v80;
  std::string::size_type v81;
  std::string *v82;
  __int128 v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  operations_research::sat::CpModelBuilder *v94;
  operations_research::sat::CpModelBuilder *v95;
  int v96;
  uint64_t v97;
  std::string::size_type v98;
  size_t v99;
  std::string *v100;
  const void *v101;
  std::string *v102;
  std::string::size_type v103;
  std::string *v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  operations_research::sat::CpModelBuilder *v115;
  operations_research::sat::CpModelBuilder *v116;
  int v117;
  uint64_t v118;
  std::string::size_type v119;
  size_t v120;
  std::string *v121;
  const void *v122;
  _OWORD *v123;
  std::string *v124;
  std::string::size_type v125;
  std::string *v126;
  __int128 v127;
  uint64_t *v128;
  std::string::size_type v129;
  size_t v130;
  std::string *v131;
  const void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  operations_research::sat::CpModelBuilder *v141;
  operations_research::sat::CpModelBuilder *v142;
  int v143;
  uint64_t v144;
  std::string::size_type v145;
  size_t v146;
  std::string *v147;
  const void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  operations_research::sat::CpModelBuilder *v157;
  operations_research::sat::CpModelBuilder *v158;
  int v159;
  uint64_t v160;
  std::string::size_type v161;
  size_t v162;
  std::string *v163;
  const void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  size_t v170;
  std::string *v171;
  const void *v172;
  std::string *v173;
  std::string::size_type v174;
  std::string *v175;
  __int128 v176;
  std::string *v177;
  __int128 v178;
  size_t v179;
  std::string *v180;
  const void *v181;
  size_t v182;
  std::string *v183;
  const void *v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  size_t v188;
  std::string *v189;
  const void *v190;
  std::string *v191;
  std::string::size_type v192;
  std::string *v193;
  __int128 v194;
  std::string *v195;
  __int128 v196;
  size_t v197;
  std::string *v198;
  const void *v199;
  size_t v200;
  std::string *v201;
  const void *v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  char *v206;
  operations_research::sat::CpModelBuilder *v207;
  operations_research::sat::CpModelBuilder *v208;
  operations_research::sat::CpModelBuilder *v209;
  operations_research::sat::CpModelBuilder *v210;
  std::string::size_type v211;
  std::string::size_type v212;
  uint64_t v213;
  unint64_t v214;
  int64_t v215;
  unint64_t v216;
  char *v217;
  operations_research::sat::CpModelBuilder **v218;
  _DWORD *v219;
  std::string::size_type v220;
  std::string::size_type v221;
  uint64_t v222;
  int v223;
  uint64_t v224;
  std::string::size_type v225;
  std::string::size_type v226;
  void *v227;
  uint64_t v228;
  unint64_t v229;
  int64_t v230;
  unint64_t v231;
  char *v232;
  char *v233;
  uint64_t v234;
  std::string::size_type v235;
  std::string::size_type v236;
  std::string::size_type v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  unint64_t v241;
  char *v242;
  char *v243;
  std::string::size_type v244;
  _DWORD *v245;
  std::string::size_type v246;
  uint64_t v247;
  int v248;
  uint64_t v249;
  std::string::size_type v250;
  std::string::size_type v251;
  void *v252;
  uint64_t v253;
  unint64_t v254;
  int64_t v255;
  unint64_t v256;
  char *v257;
  char *v258;
  std::string::size_type v259;
  uint64_t v260;
  _QWORD *v261;
  uint64_t v262;
  uint64_t v263;
  char *v264;
  operations_research::sat::CpModelBuilder *v265;
  operations_research::sat::CpModelBuilder *v266;
  operations_research::sat::CpModelBuilder *v267;
  operations_research::sat::CpModelBuilder *v268;
  std::string::size_type v269;
  std::string::size_type v270;
  uint64_t v271;
  unint64_t v272;
  int64_t v273;
  unint64_t v274;
  char *v275;
  operations_research::sat::CpModelBuilder **v276;
  std::string::size_type v277;
  _DWORD *v278;
  std::string::size_type v279;
  operations_research::sat::CpModelBuilder *v280;
  int v281;
  std::string::size_type v282;
  std::string::size_type v283;
  void *v284;
  uint64_t v285;
  unint64_t v286;
  int64_t v287;
  unint64_t v288;
  char *v289;
  char *v290;
  std::string::size_type v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  _QWORD *v298;
  operations_research::sat::CpModelBuilder *v299;
  int v300;
  int v301;
  size_t v302;
  std::string *v303;
  const void *v304;
  int v305;
  int v306;
  int v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  _QWORD *v311;
  operations_research::sat::CpModelBuilder *v312;
  int v313;
  int v314;
  size_t v315;
  std::string *v316;
  const void *v317;
  int v318;
  int v319;
  int v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  size_t v324;
  std::string *v325;
  const void *v326;
  int v327;
  int v328;
  int v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  _QWORD *v336;
  operations_research::sat::CpModelBuilder *v337;
  int v338;
  int v339;
  size_t v340;
  std::string *v341;
  const void *v342;
  int v343;
  int v344;
  int v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  _QWORD *v350;
  operations_research::sat::CpModelBuilder *v351;
  int v352;
  int v353;
  size_t v354;
  std::string *v355;
  const void *v356;
  int v357;
  int v358;
  int v359;
  unint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  __int128 v364;
  _QWORD *v365;
  operations_research::sat::CpModelBuilder *v366;
  int v367;
  int v368;
  size_t v369;
  std::string *v370;
  const void *v371;
  int v372;
  int v373;
  int v374;
  uint64_t v375;
  uint64_t v376;
  _QWORD *v377;
  operations_research::sat::CpModelBuilder *v378;
  int v379;
  int v380;
  size_t v381;
  std::string *v382;
  const void *v383;
  int v384;
  int v385;
  int v386;
  _OWORD v390[2];
  int v391[2];
  const void *v392;
  uint64_t v393;
  uint64_t v394;
  operations_research::sat::CpModelBuilder *v395;
  std::string v396;
  std::string v397;
  std::string v398;
  std::string v399;
  std::string v400;
  std::string v401;
  std::string v402;
  std::string v403;
  operations_research::sat::CpModelBuilder *v404;
  std::string __p;
  std::string v406;
  void *v407;
  void *v408;
  std::string v409;
  std::string __str;
  int v411;
  std::string v412;
  void *v413;
  void *v414;
  uint64_t v415;

  *(_QWORD *)v391 = a3;
  v395 = a2;
  v415 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a1 + 208);
  v393 = *(_QWORD *)(v7 + 256);
  v394 = *(_QWORD *)(v7 + 264);
  operations_research::sat::BoolVar::BoolVar((uint64_t)&v406, ~(_DWORD)v394, v393);
  v8 = *(_OWORD *)&v406.__r_.__value_.__l.__data_;
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v406, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  __str.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 32);
  LODWORD(__str.__r_.__value_.__r.__words[1]) = *(_DWORD *)(a1 + 40);
  __str.__r_.__value_.__r.__words[2] = *(_QWORD *)a1;
  v411 = *(_DWORD *)(a1 + 8);
  *(_OWORD *)&v409.__r_.__value_.__l.__data_ = xmmword_22DCE5B10;
  operations_research::sat::LinearExpr::ScalProd((uint64_t)&__str, 2uLL, (uint64_t *)&v409, 2, (uint64_t)&v412);
  v403.__r_.__value_.__r.__words[0] = (std::string::size_type)operations_research::sat::CpModelBuilder::AddEquality(v395, (const operations_research::sat::LinearExpr *)&v406, (const operations_research::sat::LinearExpr *)&v412);
  if (*(char *)(a1 + 343) >= 0)
    v9 = *(unsigned __int8 *)(a1 + 343);
  else
    v9 = *(_QWORD *)(a1 + 328);
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v9 + 15);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v9)
  {
    if (*(char *)(a1 + 343) >= 0)
      v11 = (const void *)(a1 + 320);
    else
      v11 = *(const void **)(a1 + 320);
    memmove(p_p, v11, v9);
  }
  v392 = (const void *)(a1 + 320);
  strcpy((char *)p_p + v9, ":chain_interval");
  operations_research::sat::Constraint::WithName((uint64_t *)&v403, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v413)
  {
    v414 = v413;
    operator delete(v413);
  }
  if (v412.__r_.__value_.__r.__words[0])
  {
    v412.__r_.__value_.__l.__size_ = v412.__r_.__value_.__r.__words[0];
    operator delete(v412.__r_.__value_.__l.__data_);
  }
  if (v407)
  {
    v408 = v407;
    operator delete(v407);
  }
  if (v406.__r_.__value_.__r.__words[0])
  {
    v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
    operator delete(v406.__r_.__value_.__l.__data_);
  }
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = operations_research::sat::CpModelBuilder::NewConstant(v395, 0);
  operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)v395, v12, v13, (uint64_t)v14, v15, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), v16, v8, SDWORD2(v8));
  v18 = *(_QWORD *)(a1 + 176);
  if (*(_QWORD *)(a1 + 184) != v18)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = *(_QWORD *)a1;
      v22 = *(_QWORD *)(a1 + 8);
      v23 = *(_QWORD *)(v18 + 8 * v20);
      v24 = *(_QWORD *)v23;
      v25 = *(_QWORD *)(v23 + 8);
      v26 = (uint64_t *)(*(_QWORD *)(a1 + 48) + v19);
      v27 = *v26;
      v28 = v26[1];
      v403.__r_.__value_.__r.__words[0] = *(_QWORD *)(v23 + 224);
      LODWORD(v403.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v23 + 232);
      v29 = operator new(0x20uLL);
      v406.__r_.__value_.__l.__size_ = (std::string::size_type)(v29 + 4);
      v406.__r_.__value_.__r.__words[2] = (std::string::size_type)(v29 + 4);
      *(_OWORD *)v29 = *(_OWORD *)&v403.__r_.__value_.__l.__data_;
      v29[2] = v393;
      v30 = v395;
      *((_DWORD *)v29 + 6) = v394;
      v406.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
      BooleanAnd = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v395, (uint64_t *)&v406);
      v409.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)v30, v21, v22, v24, v25, v27, v28, v33, (uint64_t)BooleanAnd, v32);
      v409.__r_.__value_.__l.__size_ = v34;
      if (*(char *)(a1 + 343) >= 0)
        v35 = *(unsigned __int8 *)(a1 + 343);
      else
        v35 = *(_QWORD *)(a1 + 328);
      std::string::basic_string[abi:ne180100]((uint64_t)&__str, v35 + 43);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_str = &__str;
      else
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (v35)
      {
        if (*(char *)(a1 + 343) >= 0)
          v37 = v392;
        else
          v37 = *(const void **)(a1 + 320);
        memmove(p_str, v37, v35);
      }
      strcpy((char *)p_str + v35, ":chain_producer_resident_read_time_interval");
      std::to_string(&__p, v20);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v38 = &__p;
      else
        v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      v40 = std::string::append(&__str, (const std::string::value_type *)v38, size);
      v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
      v412.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v412.__r_.__value_.__l.__data_ = v41;
      v40->__r_.__value_.__l.__size_ = 0;
      v40->__r_.__value_.__r.__words[2] = 0;
      v40->__r_.__value_.__r.__words[0] = 0;
      operations_research::sat::IntervalVar::WithName((int *)&v409, &v412);
      if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v412.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (v406.__r_.__value_.__r.__words[0])
      {
        v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
        operator delete(v406.__r_.__value_.__l.__data_);
      }
      v42 = *(_QWORD *)a1;
      v43 = *(_QWORD *)(a1 + 8);
      v44 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 8 * v20);
      v45 = *(_QWORD *)(v44 + 32);
      v46 = *(_QWORD *)(v44 + 40);
      v47 = (uint64_t *)(*(_QWORD *)(a1 + 48) + v19);
      v49 = *v47;
      v48 = v47[1];
      v403.__r_.__value_.__r.__words[0] = *(_QWORD *)(v44 + 240);
      LODWORD(v403.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v44 + 248);
      v50 = operator new(0x20uLL);
      v406.__r_.__value_.__l.__size_ = (std::string::size_type)(v50 + 4);
      v406.__r_.__value_.__r.__words[2] = (std::string::size_type)(v50 + 4);
      *(_OWORD *)v50 = *(_OWORD *)&v403.__r_.__value_.__l.__data_;
      v50[2] = v393;
      v51 = v395;
      *((_DWORD *)v50 + 6) = v394;
      v406.__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
      v52 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v395, (uint64_t *)&v406);
      v409.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)v51, v42, v43, v45, v46, v49, v48, v54, (uint64_t)v52, v53);
      v409.__r_.__value_.__l.__size_ = v55;
      if (*(char *)(a1 + 343) >= 0)
        v56 = *(unsigned __int8 *)(a1 + 343);
      else
        v56 = *(_QWORD *)(a1 + 328);
      std::string::basic_string[abi:ne180100]((uint64_t)&__str, v56 + 46);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v57 = &__str;
      else
        v57 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (v56)
      {
        if (*(char *)(a1 + 343) >= 0)
          v58 = v392;
        else
          v58 = *(const void **)(a1 + 320);
        memmove(v57, v58, v56);
      }
      strcpy((char *)v57 + v56, ":chain_producer_nonresident_read_time_interval");
      std::to_string(&__p, v20);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v59 = &__p;
      else
        v59 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v60 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v60 = __p.__r_.__value_.__l.__size_;
      v61 = std::string::append(&__str, (const std::string::value_type *)v59, v60);
      v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
      v412.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v412.__r_.__value_.__l.__data_ = v62;
      v61->__r_.__value_.__l.__size_ = 0;
      v61->__r_.__value_.__r.__words[2] = 0;
      v61->__r_.__value_.__r.__words[0] = 0;
      operations_research::sat::IntervalVar::WithName((int *)&v409, &v412);
      if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v412.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (v406.__r_.__value_.__r.__words[0])
      {
        v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
        operator delete(v406.__r_.__value_.__l.__data_);
      }
      ++v20;
      v18 = *(_QWORD *)(a1 + 176);
      v19 += 16;
    }
    while (v20 < (*(_QWORD *)(a1 + 184) - v18) >> 3);
  }
  v412.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)v395, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 200) + 56), *(_QWORD *)(*(_QWORD *)(a1 + 200) + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), v17, v393, v394);
  v412.__r_.__value_.__l.__size_ = v63;
  if (*(char *)(a1 + 343) >= 0)
    v64 = *(unsigned __int8 *)(a1 + 343);
  else
    v64 = *(_QWORD *)(a1 + 328);
  std::string::basic_string[abi:ne180100]((uint64_t)&v406, v64 + 37);
  if ((v406.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v65 = &v406;
  else
    v65 = (std::string *)v406.__r_.__value_.__r.__words[0];
  if (v64)
  {
    if (*(char *)(a1 + 343) >= 0)
      v66 = v392;
    else
      v66 = *(const void **)(a1 + 320);
    memmove(v65, v66, v64);
  }
  strcpy((char *)v65 + v64, ":chain_producer_compute_time_interval");
  operations_research::sat::IntervalVar::WithName((int *)&v412, &v406);
  if (SHIBYTE(v406.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v406.__r_.__value_.__l.__data_);
  v412.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)v395, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 208) + 96), *(_QWORD *)(*(_QWORD *)(a1 + 208) + 104), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), v67, v393, v394);
  v412.__r_.__value_.__l.__size_ = v68;
  if (*(char *)(a1 + 343) >= 0)
    v69 = *(unsigned __int8 *)(a1 + 343);
  else
    v69 = *(_QWORD *)(a1 + 328);
  std::string::basic_string[abi:ne180100]((uint64_t)&v406, v69 + 30);
  if ((v406.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v70 = &v406;
  else
    v70 = (std::string *)v406.__r_.__value_.__r.__words[0];
  if (v69)
  {
    if (*(char *)(a1 + 343) >= 0)
      v71 = v392;
    else
      v71 = *(const void **)(a1 + 320);
    memmove(v70, v71, v69);
  }
  strcpy((char *)v70 + v69, ":chain_producer_write_interval");
  operations_research::sat::IntervalVar::WithName((int *)&v412, &v406);
  if (SHIBYTE(v406.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v406.__r_.__value_.__l.__data_);
  v73 = *(_QWORD *)(a1 + 216);
  if (*(_QWORD *)(a1 + 224) != v73)
  {
    v74 = 0;
    v75 = 0;
    do
    {
      if (v75 == *(_QWORD *)(a1 + 384))
      {
        __p.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)v395, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(*(_QWORD *)(v73 + 8 * v75) + 96), *(_QWORD *)(*(_QWORD *)(v73 + 8 * v75) + 104), *(_QWORD *)(*(_QWORD *)(a1 + 104) + v74), *(_QWORD *)(*(_QWORD *)(a1 + 104) + v74 + 8), v72, v393, v394);
        __p.__r_.__value_.__l.__size_ = v76;
        if (*(char *)(a1 + 367) >= 0)
          v77 = *(unsigned __int8 *)(a1 + 367);
        else
          v77 = *(_QWORD *)(a1 + 352);
        std::string::basic_string[abi:ne180100]((uint64_t)&v412, v77 + 39);
        if ((v412.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v78 = &v412;
        else
          v78 = (std::string *)v412.__r_.__value_.__r.__words[0];
        if (v77)
        {
          if (*(char *)(a1 + 367) >= 0)
            v79 = (const void *)(a1 + 344);
          else
            v79 = *(const void **)(a1 + 344);
          memmove(v78, v79, v77);
        }
        strcpy((char *)v78 + v77, ":chain_consumer_resident_read_interval_");
        std::to_string(&__str, v75);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v80 = &__str;
        else
          v80 = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v81 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          v81 = __str.__r_.__value_.__l.__size_;
        v82 = std::string::append(&v412, (const std::string::value_type *)v80, v81);
        v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
        v406.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v406.__r_.__value_.__l.__data_ = v83;
        v82->__r_.__value_.__l.__size_ = 0;
        v82->__r_.__value_.__r.__words[2] = 0;
        v82->__r_.__value_.__r.__words[0] = 0;
        operations_research::sat::IntervalVar::WithName((int *)&__p, &v406);
        if (SHIBYTE(v406.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v406.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v412.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_177;
        v84 = (void *)v412.__r_.__value_.__r.__words[0];
      }
      else
      {
        v85 = *(_QWORD *)a1;
        v86 = *(_QWORD *)(a1 + 8);
        v87 = *(_QWORD *)(v73 + 8 * v75);
        v88 = *(_QWORD *)v87;
        v89 = *(_QWORD *)(v87 + 8);
        v90 = (uint64_t *)(*(_QWORD *)(a1 + 104) + v74);
        v91 = *v90;
        v92 = v90[1];
        v403.__r_.__value_.__r.__words[0] = *(_QWORD *)(v87 + 224);
        LODWORD(v403.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v87 + 232);
        v93 = operator new(0x20uLL);
        v406.__r_.__value_.__l.__size_ = (std::string::size_type)(v93 + 4);
        v406.__r_.__value_.__r.__words[2] = (std::string::size_type)(v93 + 4);
        *(_OWORD *)v93 = *(_OWORD *)&v403.__r_.__value_.__l.__data_;
        v93[2] = v393;
        v94 = v395;
        *((_DWORD *)v93 + 6) = v394;
        v406.__r_.__value_.__r.__words[0] = (std::string::size_type)v93;
        v95 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v395, (uint64_t *)&v406);
        v409.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)v94, v85, v86, v88, v89, v91, v92, v97, (uint64_t)v95, v96);
        v409.__r_.__value_.__l.__size_ = v98;
        if (*(char *)(a1 + 367) >= 0)
          v99 = *(unsigned __int8 *)(a1 + 367);
        else
          v99 = *(_QWORD *)(a1 + 352);
        std::string::basic_string[abi:ne180100]((uint64_t)&__str, v99 + 42);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v100 = &__str;
        else
          v100 = (std::string *)__str.__r_.__value_.__r.__words[0];
        if (v99)
        {
          if (*(char *)(a1 + 367) >= 0)
            v101 = (const void *)(a1 + 344);
          else
            v101 = *(const void **)(a1 + 344);
          memmove(v100, v101, v99);
        }
        qmemcpy(v390, "nonresident_read:chain_consumer_", sizeof(v390));
        strcpy((char *)v100 + v99, ":chain_consumer_nonresident_read_interval_");
        std::to_string(&__p, v75);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v102 = &__p;
        else
          v102 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v103 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v103 = __p.__r_.__value_.__l.__size_;
        v104 = std::string::append(&__str, (const std::string::value_type *)v102, v103);
        v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
        v412.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v412.__r_.__value_.__l.__data_ = v105;
        v104->__r_.__value_.__l.__size_ = 0;
        v104->__r_.__value_.__r.__words[2] = 0;
        v104->__r_.__value_.__r.__words[0] = 0;
        operations_research::sat::IntervalVar::WithName((int *)&v409, &v412);
        if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v412.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (v406.__r_.__value_.__r.__words[0])
        {
          v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
          operator delete(v406.__r_.__value_.__l.__data_);
        }
        v106 = *(_QWORD *)a1;
        v107 = *(_QWORD *)(a1 + 8);
        v108 = *(_QWORD *)(*(_QWORD *)(a1 + 216) + 8 * v75);
        v109 = *(_QWORD *)(v108 + 48);
        v110 = *(_QWORD *)(v108 + 56);
        v111 = (uint64_t *)(*(_QWORD *)(a1 + 104) + v74);
        v112 = *v111;
        v113 = v111[1];
        v403.__r_.__value_.__r.__words[0] = *(_QWORD *)(v108 + 240);
        LODWORD(v403.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v108 + 248);
        v114 = operator new(0x20uLL);
        v406.__r_.__value_.__l.__size_ = (std::string::size_type)(v114 + 4);
        v406.__r_.__value_.__r.__words[2] = (std::string::size_type)(v114 + 4);
        *(_OWORD *)v114 = *(_OWORD *)&v403.__r_.__value_.__l.__data_;
        v114[2] = v393;
        v115 = v395;
        *((_DWORD *)v114 + 6) = v394;
        v406.__r_.__value_.__r.__words[0] = (std::string::size_type)v114;
        v116 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v395, (uint64_t *)&v406);
        v409.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)v115, v106, v107, v109, v110, v112, v113, v118, (uint64_t)v116, v117);
        v409.__r_.__value_.__l.__size_ = v119;
        if (*(char *)(a1 + 367) >= 0)
          v120 = *(unsigned __int8 *)(a1 + 367);
        else
          v120 = *(_QWORD *)(a1 + 352);
        std::string::basic_string[abi:ne180100]((uint64_t)&__str, v120 + 42);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v121 = &__str;
        else
          v121 = (std::string *)__str.__r_.__value_.__r.__words[0];
        if (v120)
        {
          if (*(char *)(a1 + 367) >= 0)
            v122 = (const void *)(a1 + 344);
          else
            v122 = *(const void **)(a1 + 344);
          memmove(v121, v122, v120);
        }
        v123 = (_OWORD *)((char *)v121 + v120);
        *v123 = v390[1];
        v123[1] = v390[0];
        strcpy(&v121[1].__r_.__value_.__s.__data_[v120 + 2], "t_read_interval_");
        std::to_string(&__p, v75);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v124 = &__p;
        else
          v124 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v125 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v125 = __p.__r_.__value_.__l.__size_;
        v126 = std::string::append(&__str, (const std::string::value_type *)v124, v125);
        v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
        v412.__r_.__value_.__r.__words[2] = v126->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v412.__r_.__value_.__l.__data_ = v127;
        v126->__r_.__value_.__l.__size_ = 0;
        v126->__r_.__value_.__r.__words[2] = 0;
        v126->__r_.__value_.__r.__words[0] = 0;
        operations_research::sat::IntervalVar::WithName((int *)&v409, &v412);
        if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v412.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        v84 = (void *)v406.__r_.__value_.__r.__words[0];
        if (!v406.__r_.__value_.__r.__words[0])
          goto LABEL_177;
        v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
      }
      operator delete(v84);
LABEL_177:
      ++v75;
      v73 = *(_QWORD *)(a1 + 216);
      v74 += 16;
    }
    while (v75 < (*(_QWORD *)(a1 + 224) - v73) >> 3);
  }
  v128 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 240) + 32) + 16 * *(_QWORD *)(a1 + 384));
  v412.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)v395, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), *v128, v128[1], *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), v72, v393, v394);
  v412.__r_.__value_.__l.__size_ = v129;
  if (*(char *)(a1 + 367) >= 0)
    v130 = *(unsigned __int8 *)(a1 + 367);
  else
    v130 = *(_QWORD *)(a1 + 352);
  std::string::basic_string[abi:ne180100]((uint64_t)&v406, v130 + 41);
  if ((v406.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v131 = &v406;
  else
    v131 = (std::string *)v406.__r_.__value_.__r.__words[0];
  if (v130)
  {
    if (*(char *)(a1 + 367) >= 0)
      v132 = (const void *)(a1 + 344);
    else
      v132 = *(const void **)(a1 + 344);
    memmove(v131, v132, v130);
  }
  *(_QWORD *)&v390[0] = a1 + 344;
  strcpy((char *)v131 + v130, ":chain_consumer_compute_resident_interval");
  operations_research::sat::IntervalVar::WithName((int *)&v412, &v406);
  if (SHIBYTE(v406.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v406.__r_.__value_.__l.__data_);
  v133 = *(_QWORD *)a1;
  v134 = *(_QWORD *)(a1 + 8);
  v135 = *(_QWORD *)(a1 + 248);
  v136 = *(_QWORD *)v135;
  v137 = *(_QWORD *)(v135 + 8);
  v139 = *(_QWORD *)(a1 + 144);
  v138 = *(_QWORD *)(a1 + 152);
  __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(v135 + 224);
  LODWORD(__p.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v135 + 232);
  v140 = operator new(0x20uLL);
  v406.__r_.__value_.__r.__words[0] = (std::string::size_type)v140;
  v406.__r_.__value_.__r.__words[2] = (std::string::size_type)(v140 + 4);
  *(_OWORD *)v140 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  v140[2] = v393;
  v141 = v395;
  *((_DWORD *)v140 + 6) = v394;
  v406.__r_.__value_.__l.__size_ = (std::string::size_type)(v140 + 4);
  v142 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v395, (uint64_t *)&v406);
  __str.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)v141, v133, v134, v136, v137, v139, v138, v144, (uint64_t)v142, v143);
  __str.__r_.__value_.__l.__size_ = v145;
  if (*(char *)(a1 + 367) >= 0)
    v146 = *(unsigned __int8 *)(a1 + 367);
  else
    v146 = *(_QWORD *)(a1 + 352);
  std::string::basic_string[abi:ne180100]((uint64_t)&v412, v146 + 44);
  if ((v412.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v147 = &v412;
  else
    v147 = (std::string *)v412.__r_.__value_.__r.__words[0];
  if (v146)
  {
    if (*(char *)(a1 + 367) >= 0)
      v148 = *(const void **)&v390[0];
    else
      v148 = *(const void **)(a1 + 344);
    memmove(v147, v148, v146);
  }
  strcpy((char *)v147 + v146, ":chain_consumer_resident_write_time_interval");
  operations_research::sat::IntervalVar::WithName((int *)&__str, &v412);
  if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v412.__r_.__value_.__l.__data_);
  if (v406.__r_.__value_.__r.__words[0])
  {
    v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
    operator delete(v406.__r_.__value_.__l.__data_);
  }
  v149 = *(_QWORD *)a1;
  v150 = *(_QWORD *)(a1 + 8);
  v151 = *(_QWORD *)(a1 + 248);
  v152 = *(_QWORD *)(v151 + 48);
  v153 = *(_QWORD *)(v151 + 56);
  v154 = *(_QWORD *)(a1 + 144);
  v155 = *(_QWORD *)(a1 + 152);
  __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(v151 + 240);
  LODWORD(__p.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v151 + 248);
  v156 = operator new(0x20uLL);
  v406.__r_.__value_.__r.__words[0] = (std::string::size_type)v156;
  v406.__r_.__value_.__r.__words[2] = (std::string::size_type)(v156 + 4);
  *(_OWORD *)v156 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  v156[2] = v393;
  v157 = v395;
  *((_DWORD *)v156 + 6) = v394;
  v406.__r_.__value_.__l.__size_ = (std::string::size_type)(v156 + 4);
  v158 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v395, (uint64_t *)&v406);
  __str.__r_.__value_.__r.__words[0] = operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)v157, v149, v150, v152, v153, v154, v155, v160, (uint64_t)v158, v159);
  __str.__r_.__value_.__l.__size_ = v161;
  if (*(char *)(a1 + 367) >= 0)
    v162 = *(unsigned __int8 *)(a1 + 367);
  else
    v162 = *(_QWORD *)(a1 + 352);
  std::string::basic_string[abi:ne180100]((uint64_t)&v412, v162 + 47);
  if ((v412.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v163 = &v412;
  else
    v163 = (std::string *)v412.__r_.__value_.__r.__words[0];
  if (v162)
  {
    if (*(char *)(a1 + 367) >= 0)
      v164 = *(const void **)&v390[0];
    else
      v164 = *(const void **)(a1 + 344);
    memmove(v163, v164, v162);
  }
  strcpy((char *)v163 + v162, ":chain_consumer_nonresident_write_time_interval");
  operations_research::sat::IntervalVar::WithName((int *)&__str, &v412);
  if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v412.__r_.__value_.__l.__data_);
  if (v406.__r_.__value_.__r.__words[0])
  {
    v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
    operator delete(v406.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&v390[1] = operations_research::sat::CpModelBuilder::NewIntVar(v395, a6);
  v166 = v165;
  v167 = *(_QWORD *)(a1 + 48);
  if (*(_QWORD *)(a1 + 56) != v167)
  {
    v168 = 0;
    v169 = 0;
    do
    {
      operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v406, *(_QWORD *)(v167 + v168), *(_QWORD *)(v167 + v168 + 8));
      operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v412, *(uint64_t *)&v390[1], v166);
      v404 = operations_research::sat::CpModelBuilder::AddLessOrEqual(v395, (const operations_research::sat::LinearExpr *)&v406, (const operations_research::sat::LinearExpr *)&v412);
      if (*(char *)(a1 + 343) >= 0)
        v170 = *(unsigned __int8 *)(a1 + 343);
      else
        v170 = *(_QWORD *)(a1 + 328);
      std::string::basic_string[abi:ne180100]((uint64_t)&v409, v170 + 21);
      if ((v409.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v171 = &v409;
      else
        v171 = (std::string *)v409.__r_.__value_.__r.__words[0];
      if (v170)
      {
        if (*(char *)(a1 + 343) >= 0)
          v172 = v392;
        else
          v172 = *(const void **)(a1 + 320);
        memmove(v171, v172, v170);
      }
      strcpy((char *)v171 + v170, ":chain_producer_read_");
      std::to_string(&v403, v169);
      if ((v403.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v173 = &v403;
      else
        v173 = (std::string *)v403.__r_.__value_.__r.__words[0];
      if ((v403.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v174 = HIBYTE(v403.__r_.__value_.__r.__words[2]);
      else
        v174 = v403.__r_.__value_.__l.__size_;
      v175 = std::string::append(&v409, (const std::string::value_type *)v173, v174);
      v176 = *(_OWORD *)&v175->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v175->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v176;
      v175->__r_.__value_.__l.__size_ = 0;
      v175->__r_.__value_.__r.__words[2] = 0;
      v175->__r_.__value_.__r.__words[0] = 0;
      v177 = std::string::append(&__p, "_end_constraint", 0xFuLL);
      v178 = *(_OWORD *)&v177->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v177->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v178;
      v177->__r_.__value_.__l.__size_ = 0;
      v177->__r_.__value_.__r.__words[2] = 0;
      v177->__r_.__value_.__r.__words[0] = 0;
      operations_research::sat::Constraint::WithName((uint64_t *)&v404, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v403.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v403.__r_.__value_.__l.__data_);
      if (SHIBYTE(v409.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v409.__r_.__value_.__l.__data_);
      if (v413)
      {
        v414 = v413;
        operator delete(v413);
      }
      if (v412.__r_.__value_.__r.__words[0])
      {
        v412.__r_.__value_.__l.__size_ = v412.__r_.__value_.__r.__words[0];
        operator delete(v412.__r_.__value_.__l.__data_);
      }
      if (v407)
      {
        v408 = v407;
        operator delete(v407);
      }
      if (v406.__r_.__value_.__r.__words[0])
      {
        v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
        operator delete(v406.__r_.__value_.__l.__data_);
      }
      ++v169;
      v167 = *(_QWORD *)(a1 + 48);
      v168 += 16;
    }
    while (v169 < (*(_QWORD *)(a1 + 56) - v167) >> 4);
  }
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v406, *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80));
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v412, *(uint64_t *)&v390[1], v166);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operations_research::sat::CpModelBuilder::AddLessOrEqual(v395, (const operations_research::sat::LinearExpr *)&v406, (const operations_research::sat::LinearExpr *)&v412);
  if (*(char *)(a1 + 343) >= 0)
    v179 = *(unsigned __int8 *)(a1 + 343);
  else
    v179 = *(_QWORD *)(a1 + 328);
  std::string::basic_string[abi:ne180100]((uint64_t)&__str, v179 + 38);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v180 = &__str;
  else
    v180 = (std::string *)__str.__r_.__value_.__r.__words[0];
  if (v179)
  {
    if (*(char *)(a1 + 343) >= 0)
      v181 = v392;
    else
      v181 = *(const void **)(a1 + 320);
    memmove(v180, v181, v179);
  }
  strcpy((char *)v180 + v179, ":chain_producer_compute_end_constraint");
  operations_research::sat::Constraint::WithName((uint64_t *)&__p, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v413)
  {
    v414 = v413;
    operator delete(v413);
  }
  if (v412.__r_.__value_.__r.__words[0])
  {
    v412.__r_.__value_.__l.__size_ = v412.__r_.__value_.__r.__words[0];
    operator delete(v412.__r_.__value_.__l.__data_);
  }
  if (v407)
  {
    v408 = v407;
    operator delete(v407);
  }
  if (v406.__r_.__value_.__r.__words[0])
  {
    v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
    operator delete(v406.__r_.__value_.__l.__data_);
  }
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v406, *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96));
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v412, *(uint64_t *)&v390[1], v166);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operations_research::sat::CpModelBuilder::AddLessOrEqual(v395, (const operations_research::sat::LinearExpr *)&v406, (const operations_research::sat::LinearExpr *)&v412);
  if (*(char *)(a1 + 343) >= 0)
    v182 = *(unsigned __int8 *)(a1 + 343);
  else
    v182 = *(_QWORD *)(a1 + 328);
  std::string::basic_string[abi:ne180100]((uint64_t)&__str, v182 + 36);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v183 = &__str;
  else
    v183 = (std::string *)__str.__r_.__value_.__r.__words[0];
  if (v182)
  {
    if (*(char *)(a1 + 343) >= 0)
      v184 = v392;
    else
      v184 = *(const void **)(a1 + 320);
    memmove(v183, v184, v182);
  }
  strcpy((char *)v183 + v182, ":chain_producer_write_end_constraint");
  operations_research::sat::Constraint::WithName((uint64_t *)&__p, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v413)
  {
    v414 = v413;
    operator delete(v413);
  }
  if (v412.__r_.__value_.__r.__words[0])
  {
    v412.__r_.__value_.__l.__size_ = v412.__r_.__value_.__r.__words[0];
    operator delete(v412.__r_.__value_.__l.__data_);
  }
  if (v407)
  {
    v408 = v407;
    operator delete(v407);
  }
  if (v406.__r_.__value_.__r.__words[0])
  {
    v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
    operator delete(v406.__r_.__value_.__l.__data_);
  }
  v185 = *(_QWORD *)(a1 + 104);
  if (*(_QWORD *)(a1 + 112) != v185)
  {
    v186 = 0;
    v187 = 0;
    do
    {
      operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v406, *(_QWORD *)(v185 + v186), *(_QWORD *)(v185 + v186 + 8));
      operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v412, *(uint64_t *)&v390[1], v166);
      v404 = operations_research::sat::CpModelBuilder::AddLessOrEqual(v395, (const operations_research::sat::LinearExpr *)&v406, (const operations_research::sat::LinearExpr *)&v412);
      if (*(char *)(a1 + 367) >= 0)
        v188 = *(unsigned __int8 *)(a1 + 367);
      else
        v188 = *(_QWORD *)(a1 + 352);
      std::string::basic_string[abi:ne180100]((uint64_t)&v409, v188 + 21);
      if ((v409.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v189 = &v409;
      else
        v189 = (std::string *)v409.__r_.__value_.__r.__words[0];
      if (v188)
      {
        if (*(char *)(a1 + 367) >= 0)
          v190 = *(const void **)&v390[0];
        else
          v190 = *(const void **)(a1 + 344);
        memmove(v189, v190, v188);
      }
      strcpy((char *)v189 + v188, ":chain_consumer_read_");
      std::to_string(&v403, v187);
      if ((v403.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v191 = &v403;
      else
        v191 = (std::string *)v403.__r_.__value_.__r.__words[0];
      if ((v403.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v192 = HIBYTE(v403.__r_.__value_.__r.__words[2]);
      else
        v192 = v403.__r_.__value_.__l.__size_;
      v193 = std::string::append(&v409, (const std::string::value_type *)v191, v192);
      v194 = *(_OWORD *)&v193->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v193->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v194;
      v193->__r_.__value_.__l.__size_ = 0;
      v193->__r_.__value_.__r.__words[2] = 0;
      v193->__r_.__value_.__r.__words[0] = 0;
      v195 = std::string::append(&__p, "_end_constraint", 0xFuLL);
      v196 = *(_OWORD *)&v195->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v195->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v196;
      v195->__r_.__value_.__l.__size_ = 0;
      v195->__r_.__value_.__r.__words[2] = 0;
      v195->__r_.__value_.__r.__words[0] = 0;
      operations_research::sat::Constraint::WithName((uint64_t *)&v404, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v403.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v403.__r_.__value_.__l.__data_);
      if (SHIBYTE(v409.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v409.__r_.__value_.__l.__data_);
      if (v413)
      {
        v414 = v413;
        operator delete(v413);
      }
      if (v412.__r_.__value_.__r.__words[0])
      {
        v412.__r_.__value_.__l.__size_ = v412.__r_.__value_.__r.__words[0];
        operator delete(v412.__r_.__value_.__l.__data_);
      }
      if (v407)
      {
        v408 = v407;
        operator delete(v407);
      }
      if (v406.__r_.__value_.__r.__words[0])
      {
        v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
        operator delete(v406.__r_.__value_.__l.__data_);
      }
      ++v187;
      v185 = *(_QWORD *)(a1 + 104);
      v186 += 16;
    }
    while (v187 < (*(_QWORD *)(a1 + 112) - v185) >> 4);
  }
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v406, *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136));
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v412, *(uint64_t *)&v390[1], v166);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operations_research::sat::CpModelBuilder::AddLessOrEqual(v395, (const operations_research::sat::LinearExpr *)&v406, (const operations_research::sat::LinearExpr *)&v412);
  if (*(char *)(a1 + 367) >= 0)
    v197 = *(unsigned __int8 *)(a1 + 367);
  else
    v197 = *(_QWORD *)(a1 + 352);
  std::string::basic_string[abi:ne180100]((uint64_t)&__str, v197 + 38);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v198 = &__str;
  else
    v198 = (std::string *)__str.__r_.__value_.__r.__words[0];
  if (v197)
  {
    if (*(char *)(a1 + 367) >= 0)
      v199 = *(const void **)&v390[0];
    else
      v199 = *(const void **)(a1 + 344);
    memmove(v198, v199, v197);
  }
  strcpy((char *)v198 + v197, ":chain_consumer_compute_end_constraint");
  operations_research::sat::Constraint::WithName((uint64_t *)&__p, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v413)
  {
    v414 = v413;
    operator delete(v413);
  }
  if (v412.__r_.__value_.__r.__words[0])
  {
    v412.__r_.__value_.__l.__size_ = v412.__r_.__value_.__r.__words[0];
    operator delete(v412.__r_.__value_.__l.__data_);
  }
  if (v407)
  {
    v408 = v407;
    operator delete(v407);
  }
  if (v406.__r_.__value_.__r.__words[0])
  {
    v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
    operator delete(v406.__r_.__value_.__l.__data_);
  }
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v406, *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152));
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v412, *(uint64_t *)&v390[1], v166);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operations_research::sat::CpModelBuilder::AddLessOrEqual(v395, (const operations_research::sat::LinearExpr *)&v406, (const operations_research::sat::LinearExpr *)&v412);
  if (*(char *)(a1 + 367) >= 0)
    v200 = *(unsigned __int8 *)(a1 + 367);
  else
    v200 = *(_QWORD *)(a1 + 352);
  std::string::basic_string[abi:ne180100]((uint64_t)&__str, v200 + 36);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v201 = &__str;
  else
    v201 = (std::string *)__str.__r_.__value_.__r.__words[0];
  if (v200)
  {
    if (*(char *)(a1 + 367) >= 0)
      v202 = *(const void **)&v390[0];
    else
      v202 = *(const void **)(a1 + 344);
    memmove(v201, v202, v200);
  }
  strcpy((char *)v201 + v200, ":chain_consumer_write_end_constraint");
  operations_research::sat::Constraint::WithName((uint64_t *)&__p, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v413)
  {
    v414 = v413;
    operator delete(v413);
  }
  if (v412.__r_.__value_.__r.__words[0])
  {
    v412.__r_.__value_.__l.__size_ = v412.__r_.__value_.__r.__words[0];
    operator delete(v412.__r_.__value_.__l.__data_);
  }
  if (v407)
  {
    v408 = v407;
    operator delete(v407);
  }
  if (v406.__r_.__value_.__r.__words[0])
  {
    v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
    operator delete(v406.__r_.__value_.__l.__data_);
  }
  memset(&__str, 0, sizeof(__str));
  memset(&__p, 0, sizeof(__p));
  v203 = *(_QWORD *)(a1 + 176);
  if (*(_QWORD *)(a1 + 184) == v203)
  {
    v236 = 0;
    v235 = 0;
  }
  else
  {
    v204 = 0;
    do
    {
      v205 = *(_QWORD *)(v203 + 8 * v204);
      *(std::string::size_type *)((char *)v412.__r_.__value_.__r.__words + 4) = *(_QWORD *)(v205 + 240);
      HIDWORD(v412.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v205 + 248);
      v206 = (char *)operator new(0x20uLL);
      v406.__r_.__value_.__l.__size_ = (std::string::size_type)(v206 + 32);
      v406.__r_.__value_.__r.__words[2] = (std::string::size_type)(v206 + 32);
      *(_QWORD *)v206 = v393;
      *((_DWORD *)v206 + 2) = v394;
      *(_OWORD *)(v206 + 12) = *(_OWORD *)&v412.__r_.__value_.__l.__data_;
      v406.__r_.__value_.__r.__words[0] = (std::string::size_type)v206;
      v207 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v395, (uint64_t *)&v406);
      v209 = v207;
      v210 = v208;
      v211 = __str.__r_.__value_.__l.__size_;
      if (__str.__r_.__value_.__l.__size_ >= __str.__r_.__value_.__r.__words[2])
      {
        v213 = (uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 4;
        v214 = v213 + 1;
        if ((unint64_t)(v213 + 1) >> 60)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v215 = __str.__r_.__value_.__r.__words[2] - __str.__r_.__value_.__r.__words[0];
        if ((uint64_t)(__str.__r_.__value_.__r.__words[2] - __str.__r_.__value_.__r.__words[0]) >> 3 > v214)
          v214 = v215 >> 3;
        if ((unint64_t)v215 >= 0x7FFFFFFFFFFFFFF0)
          v216 = 0xFFFFFFFFFFFFFFFLL;
        else
          v216 = v214;
        if (v216)
          v217 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)&__str.__r_.__value_.__r.__words[2], v216);
        else
          v217 = 0;
        v218 = (operations_research::sat::CpModelBuilder **)&v217[16 * v213];
        *v218 = v209;
        v218[1] = v210;
        v219 = (_DWORD *)__str.__r_.__value_.__l.__size_;
        v220 = __str.__r_.__value_.__r.__words[0];
        v221 = (std::string::size_type)v218;
        if (__str.__r_.__value_.__l.__size_ != __str.__r_.__value_.__r.__words[0])
        {
          do
          {
            v222 = *((_QWORD *)v219 - 2);
            v219 -= 4;
            v223 = v219[2];
            *(_QWORD *)(v221 - 16) = v222;
            v221 -= 16;
            *(_DWORD *)(v221 + 8) = v223;
          }
          while (v219 != (_DWORD *)v220);
          v219 = (_DWORD *)__str.__r_.__value_.__r.__words[0];
        }
        v212 = (std::string::size_type)(v218 + 2);
        __str.__r_.__value_.__r.__words[0] = v221;
        __str.__r_.__value_.__l.__size_ = (std::string::size_type)(v218 + 2);
        __str.__r_.__value_.__r.__words[2] = (std::string::size_type)&v217[16 * v216];
        if (v219)
          operator delete(v219);
      }
      else
      {
        *(_QWORD *)__str.__r_.__value_.__l.__size_ = v207;
        *(_QWORD *)(v211 + 8) = v208;
        v212 = v211 + 16;
      }
      __str.__r_.__value_.__l.__size_ = v212;
      if (v406.__r_.__value_.__r.__words[0])
      {
        v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
        operator delete(v406.__r_.__value_.__l.__data_);
      }
      v224 = *(_QWORD *)(*(_QWORD *)(*a4 + 8 * v204) + 120);
      v225 = __p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
      {
        v227 = (void *)__p.__r_.__value_.__r.__words[0];
        v228 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
        v229 = v228 + 1;
        if ((unint64_t)(v228 + 1) >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v230 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
        if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 2 > v229)
          v229 = v230 >> 2;
        if ((unint64_t)v230 >= 0x7FFFFFFFFFFFFFF8)
          v231 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v231 = v229;
        if (v231)
        {
          v232 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v231);
          v225 = __p.__r_.__value_.__l.__size_;
          v227 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        else
        {
          v232 = 0;
        }
        v233 = &v232[8 * v228];
        *(_QWORD *)v233 = v224;
        v226 = (std::string::size_type)(v233 + 8);
        while ((void *)v225 != v227)
        {
          v234 = *(_QWORD *)(v225 - 8);
          v225 -= 8;
          *((_QWORD *)v233 - 1) = v234;
          v233 -= 8;
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v233;
        __p.__r_.__value_.__l.__size_ = v226;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v232[8 * v231];
        if (v227)
          operator delete(v227);
      }
      else
      {
        *(_QWORD *)__p.__r_.__value_.__l.__size_ = v224;
        v226 = v225 + 8;
      }
      __p.__r_.__value_.__l.__size_ = v226;
      ++v204;
      v203 = *(_QWORD *)(a1 + 176);
    }
    while (v204 < (*(_QWORD *)(a1 + 184) - v203) >> 3);
    v235 = __str.__r_.__value_.__r.__words[2];
    v236 = __str.__r_.__value_.__l.__size_;
    if (__str.__r_.__value_.__l.__size_ < __str.__r_.__value_.__r.__words[2])
    {
      *(_QWORD *)__str.__r_.__value_.__l.__size_ = v393;
      *(_QWORD *)(v236 + 8) = v394;
      v237 = v236 + 16;
      goto LABEL_431;
    }
  }
  v238 = (uint64_t)(v236 - __str.__r_.__value_.__r.__words[0]) >> 4;
  v239 = v238 + 1;
  if ((unint64_t)(v238 + 1) >> 60)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v240 = v235 - __str.__r_.__value_.__r.__words[0];
  if (v240 >> 3 > v239)
    v239 = v240 >> 3;
  if ((unint64_t)v240 >= 0x7FFFFFFFFFFFFFF0)
    v241 = 0xFFFFFFFFFFFFFFFLL;
  else
    v241 = v239;
  if (v241)
    v242 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)&__str.__r_.__value_.__r.__words[2], v241);
  else
    v242 = 0;
  v243 = &v242[16 * v238];
  v244 = (std::string::size_type)&v242[16 * v241];
  *(_QWORD *)v243 = v393;
  *((_QWORD *)v243 + 1) = v394;
  v237 = (std::string::size_type)(v243 + 16);
  v245 = (_DWORD *)__str.__r_.__value_.__l.__size_;
  v246 = __str.__r_.__value_.__r.__words[0];
  if (__str.__r_.__value_.__l.__size_ != __str.__r_.__value_.__r.__words[0])
  {
    do
    {
      v247 = *((_QWORD *)v245 - 2);
      v245 -= 4;
      v248 = v245[2];
      *((_QWORD *)v243 - 2) = v247;
      v243 -= 16;
      *((_DWORD *)v243 + 2) = v248;
    }
    while (v245 != (_DWORD *)v246);
    v245 = (_DWORD *)__str.__r_.__value_.__r.__words[0];
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v243;
  __str.__r_.__value_.__l.__size_ = v237;
  __str.__r_.__value_.__r.__words[2] = v244;
  if (v245)
    operator delete(v245);
LABEL_431:
  __str.__r_.__value_.__l.__size_ = v237;
  v249 = *(_QWORD *)(a5 + 128);
  v250 = __p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
  {
    v252 = (void *)__p.__r_.__value_.__r.__words[0];
    v253 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
    v254 = v253 + 1;
    if ((unint64_t)(v253 + 1) >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v255 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
    if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 2 > v254)
      v254 = v255 >> 2;
    if ((unint64_t)v255 >= 0x7FFFFFFFFFFFFFF8)
      v256 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v256 = v254;
    if (v256)
    {
      v257 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v256);
      v250 = __p.__r_.__value_.__l.__size_;
      v252 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    else
    {
      v257 = 0;
    }
    v258 = &v257[8 * v253];
    v259 = (std::string::size_type)&v257[8 * v256];
    *(_QWORD *)v258 = v249;
    v251 = (std::string::size_type)(v258 + 8);
    while ((void *)v250 != v252)
    {
      v260 = *(_QWORD *)(v250 - 8);
      v250 -= 8;
      *((_QWORD *)v258 - 1) = v260;
      v258 -= 8;
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v258;
    __p.__r_.__value_.__l.__size_ = v251;
    __p.__r_.__value_.__r.__words[2] = v259;
    if (v252)
      operator delete(v252);
  }
  else
  {
    *(_QWORD *)__p.__r_.__value_.__l.__size_ = v249;
    v251 = v250 + 8;
  }
  __p.__r_.__value_.__l.__size_ = v251;
  v261 = *(_QWORD **)(a1 + 176);
  if (*(_QWORD *)(a1 + 184) - (_QWORD)v261 >= 9uLL)
  {
    v262 = *v261;
    *(std::string::size_type *)((char *)v412.__r_.__value_.__r.__words + 4) = *(_QWORD *)(*v261 + 240);
    HIDWORD(v412.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v262 + 248);
    v263 = v261[1];
    *(std::string::size_type *)((char *)v409.__r_.__value_.__r.__words + 4) = *(_QWORD *)(v263 + 240);
    HIDWORD(v409.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v263 + 248);
    v264 = (char *)operator new(0x30uLL);
    v406.__r_.__value_.__l.__size_ = (std::string::size_type)(v264 + 48);
    v406.__r_.__value_.__r.__words[2] = (std::string::size_type)(v264 + 48);
    *(_QWORD *)v264 = v393;
    *((_DWORD *)v264 + 2) = v394;
    *(_OWORD *)(v264 + 12) = *(_OWORD *)&v412.__r_.__value_.__l.__data_;
    *(_OWORD *)(v264 + 28) = *(_OWORD *)&v409.__r_.__value_.__l.__data_;
    v406.__r_.__value_.__r.__words[0] = (std::string::size_type)v264;
    v265 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v395, (uint64_t *)&v406);
    v267 = v265;
    v268 = v266;
    v269 = __str.__r_.__value_.__l.__size_;
    if (__str.__r_.__value_.__l.__size_ >= __str.__r_.__value_.__r.__words[2])
    {
      v271 = (uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 4;
      v272 = v271 + 1;
      if ((unint64_t)(v271 + 1) >> 60)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v273 = __str.__r_.__value_.__r.__words[2] - __str.__r_.__value_.__r.__words[0];
      if ((uint64_t)(__str.__r_.__value_.__r.__words[2] - __str.__r_.__value_.__r.__words[0]) >> 3 > v272)
        v272 = v273 >> 3;
      if ((unint64_t)v273 >= 0x7FFFFFFFFFFFFFF0)
        v274 = 0xFFFFFFFFFFFFFFFLL;
      else
        v274 = v272;
      if (v274)
        v275 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<operations_research::sat::BoolVar>>((uint64_t)&__str.__r_.__value_.__r.__words[2], v274);
      else
        v275 = 0;
      v276 = (operations_research::sat::CpModelBuilder **)&v275[16 * v271];
      v277 = (std::string::size_type)&v275[16 * v274];
      *v276 = v267;
      v276[1] = v268;
      v270 = (std::string::size_type)(v276 + 2);
      v278 = (_DWORD *)__str.__r_.__value_.__l.__size_;
      v279 = __str.__r_.__value_.__r.__words[0];
      if (__str.__r_.__value_.__l.__size_ != __str.__r_.__value_.__r.__words[0])
      {
        do
        {
          v280 = (operations_research::sat::CpModelBuilder *)*((_QWORD *)v278 - 2);
          v278 -= 4;
          v281 = v278[2];
          *(v276 - 2) = v280;
          v276 -= 2;
          *((_DWORD *)v276 + 2) = v281;
        }
        while (v278 != (_DWORD *)v279);
        v278 = (_DWORD *)__str.__r_.__value_.__r.__words[0];
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v276;
      __str.__r_.__value_.__l.__size_ = v270;
      __str.__r_.__value_.__r.__words[2] = v277;
      if (v278)
        operator delete(v278);
    }
    else
    {
      *(_QWORD *)__str.__r_.__value_.__l.__size_ = v265;
      *(_QWORD *)(v269 + 8) = v266;
      v270 = v269 + 16;
    }
    __str.__r_.__value_.__l.__size_ = v270;
    if (v406.__r_.__value_.__r.__words[0])
    {
      v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
      operator delete(v406.__r_.__value_.__l.__data_);
    }
    v282 = __p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
    {
      v284 = (void *)__p.__r_.__value_.__r.__words[0];
      v285 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
      v286 = v285 + 1;
      if ((unint64_t)(v285 + 1) >> 61)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v287 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
      if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 2 > v286)
        v286 = v287 >> 2;
      if ((unint64_t)v287 >= 0x7FFFFFFFFFFFFFF8)
        v288 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v288 = v286;
      if (v288)
      {
        v289 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v288);
        v282 = __p.__r_.__value_.__l.__size_;
        v284 = (void *)__p.__r_.__value_.__r.__words[0];
      }
      else
      {
        v289 = 0;
      }
      v290 = &v289[8 * v285];
      v291 = (std::string::size_type)&v289[8 * v288];
      *(_QWORD *)v290 = 1;
      v283 = (std::string::size_type)(v290 + 8);
      while ((void *)v282 != v284)
      {
        v292 = *(_QWORD *)(v282 - 8);
        v282 -= 8;
        *((_QWORD *)v290 - 1) = v292;
        v290 -= 8;
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v290;
      __p.__r_.__value_.__l.__size_ = v283;
      __p.__r_.__value_.__r.__words[2] = v291;
      if (v284)
        operator delete(v284);
    }
    else
    {
      *(_QWORD *)__p.__r_.__value_.__l.__size_ = 1;
      v283 = v282 + 8;
    }
    __p.__r_.__value_.__l.__size_ = v283;
  }
  operations_research::sat::LinearExpr::LinearExpr((uint64_t)&v406, *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168));
  operations_research::sat::LinearExpr::BooleanScalProd((uint64_t)__str.__r_.__value_.__l.__data_, (uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 4, (uint64_t *)__p.__r_.__value_.__l.__data_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3, (uint64_t)&v412);
  operations_research::sat::CpModelBuilder::AddEquality(v395, (const operations_research::sat::LinearExpr *)&v406, (const operations_research::sat::LinearExpr *)&v412);
  if (v413)
  {
    v414 = v413;
    operator delete(v413);
  }
  if (v412.__r_.__value_.__r.__words[0])
  {
    v412.__r_.__value_.__l.__size_ = v412.__r_.__value_.__r.__words[0];
    operator delete(v412.__r_.__value_.__l.__data_);
  }
  if (v407)
  {
    v408 = v407;
    operator delete(v407);
  }
  if (v406.__r_.__value_.__r.__words[0])
  {
    v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
    operator delete(v406.__r_.__value_.__l.__data_);
  }
  operations_research::sat::CpModelBuilder::NewIntervalVar(v395, *(uint64_t *)&v390[1], v166, *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  v293 = *(_QWORD *)(a1 + 176);
  if (*(_QWORD *)(a1 + 184) != v293)
  {
    v294 = 0;
    do
    {
      v295 = *(_QWORD *)(a1 + 368);
      v296 = *(_QWORD *)(a1 + 376);
      v297 = *(_QWORD *)(v293 + 8 * v294);
      v412.__r_.__value_.__r.__words[0] = *(_QWORD *)(v297 + 240);
      LODWORD(v412.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v297 + 248);
      v298 = operator new(0x20uLL);
      v406.__r_.__value_.__l.__size_ = (std::string::size_type)(v298 + 4);
      v406.__r_.__value_.__r.__words[2] = (std::string::size_type)(v298 + 4);
      *(_OWORD *)v298 = *(_OWORD *)&v412.__r_.__value_.__l.__data_;
      v298[2] = v393;
      *((_DWORD *)v298 + 6) = v394;
      v406.__r_.__value_.__r.__words[0] = (std::string::size_type)v298;
      v299 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v395, (uint64_t *)&v406);
      v301 = v300;
      if (*(char *)(a1 + 343) >= 0)
        v302 = *(unsigned __int8 *)(a1 + 343);
      else
        v302 = *(_QWORD *)(a1 + 328);
      std::string::basic_string[abi:ne180100]((uint64_t)&v402, v302 + 50);
      if ((v402.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v303 = &v402;
      else
        v303 = (std::string *)v402.__r_.__value_.__r.__words[0];
      if (v302)
      {
        if (*(char *)(a1 + 343) >= 0)
          v304 = v392;
        else
          v304 = *(const void **)(a1 + 320);
        memmove(v303, v304, v302);
      }
      strcpy((char *)v303 + v302, ":chain_producer_nonresident_read_pressure_interval");
      v305 = ORToolsCpBasedAllocatorUtil::CreateOptionalClosedInterval(v395, v295, v296, (uint64_t)v299, v301, &v402);
      v307 = v306;
      if (SHIBYTE(v402.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v402.__r_.__value_.__l.__data_);
      if (v406.__r_.__value_.__r.__words[0])
      {
        v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
        operator delete(v406.__r_.__value_.__l.__data_);
      }
      v308 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 8 * v294);
      operations_research::sat::CumulativeConstraint::AddDemand(*(uint64_t **)v391, v305, v307, *(_QWORD *)(v308 + 144), *(_QWORD *)(v308 + 152));
      if (*(_BYTE *)(a1 + 392))
      {
        v309 = *(_QWORD *)(a1 + 376);
        v310 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 8 * v294);
        v412.__r_.__value_.__r.__words[0] = *(_QWORD *)(v310 + 224);
        LODWORD(v412.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v310 + 232);
        v311 = operator new(0x20uLL);
        v406.__r_.__value_.__l.__size_ = (std::string::size_type)(v311 + 4);
        v406.__r_.__value_.__r.__words[2] = (std::string::size_type)(v311 + 4);
        *(_OWORD *)v311 = *(_OWORD *)&v412.__r_.__value_.__l.__data_;
        v311[2] = v393;
        *((_DWORD *)v311 + 6) = v394;
        v406.__r_.__value_.__r.__words[0] = (std::string::size_type)v311;
        v312 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v395, (uint64_t *)&v406);
        v314 = v313;
        if (*(char *)(a1 + 343) >= 0)
          v315 = *(unsigned __int8 *)(a1 + 343);
        else
          v315 = *(_QWORD *)(a1 + 328);
        std::string::basic_string[abi:ne180100]((uint64_t)&v401, v315 + 47);
        if ((v401.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v316 = &v401;
        else
          v316 = (std::string *)v401.__r_.__value_.__r.__words[0];
        if (v315)
        {
          if (*(char *)(a1 + 343) >= 0)
            v317 = v392;
          else
            v317 = *(const void **)(a1 + 320);
          memmove(v316, v317, v315);
        }
        strcpy((char *)v316 + v315, ":chain_producer_resident_read_pressure_interval");
        v318 = ORToolsCpBasedAllocatorUtil::CreateOptionalClosedInterval(v395, v309, v309, (uint64_t)v312, v314, &v401);
        v320 = v319;
        if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v401.__r_.__value_.__l.__data_);
        if (v406.__r_.__value_.__r.__words[0])
        {
          v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
          operator delete(v406.__r_.__value_.__l.__data_);
        }
        v321 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 8 * v294);
        operations_research::sat::CumulativeConstraint::AddDemand(*(uint64_t **)v391, v318, v320, *(_QWORD *)(v321 + 112), *(_QWORD *)(v321 + 120));
      }
      ++v294;
      v293 = *(_QWORD *)(a1 + 176);
    }
    while (v294 < (*(_QWORD *)(a1 + 184) - v293) >> 3);
  }
  v322 = *(_QWORD *)(a1 + 368);
  v323 = *(_QWORD *)(a1 + 376);
  if (*(char *)(a1 + 343) >= 0)
    v324 = *(unsigned __int8 *)(a1 + 343);
  else
    v324 = *(_QWORD *)(a1 + 328);
  std::string::basic_string[abi:ne180100]((uint64_t)&v400, v324 + 45);
  if ((v400.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v325 = &v400;
  else
    v325 = (std::string *)v400.__r_.__value_.__r.__words[0];
  if (v324)
  {
    if (*(char *)(a1 + 343) >= 0)
      v326 = v392;
    else
      v326 = *(const void **)(a1 + 320);
    memmove(v325, v326, v324);
  }
  strcpy((char *)v325 + v324, ":chain_producer_chain_write_pressure_interval");
  v327 = ORToolsCpBasedAllocatorUtil::CreateOptionalClosedInterval(v395, v322, v323, v393, v394, &v400);
  v329 = v328;
  if (SHIBYTE(v400.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v400.__r_.__value_.__l.__data_);
  operations_research::sat::CumulativeConstraint::AddDemand(*(uint64_t **)v391, v327, v329, *(_QWORD *)(*(_QWORD *)(a1 + 208) + 208), *(_QWORD *)(*(_QWORD *)(a1 + 208) + 216));
  v330 = *(_QWORD *)(a1 + 216);
  v331 = *(_QWORD *)(a1 + 224);
  if (v331 != v330)
  {
    v332 = 0;
    do
    {
      if (v332 != *(_QWORD *)(a1 + 384))
      {
        v333 = *(_QWORD *)(a1 + 368);
        v334 = *(_QWORD *)(a1 + 376);
        v335 = *(_QWORD *)(v330 + 8 * v332);
        v412.__r_.__value_.__r.__words[0] = *(_QWORD *)(v335 + 240);
        LODWORD(v412.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v335 + 248);
        v336 = operator new(0x20uLL);
        v406.__r_.__value_.__l.__size_ = (std::string::size_type)(v336 + 4);
        v406.__r_.__value_.__r.__words[2] = (std::string::size_type)(v336 + 4);
        *(_OWORD *)v336 = *(_OWORD *)&v412.__r_.__value_.__l.__data_;
        v336[2] = v393;
        *((_DWORD *)v336 + 6) = v394;
        v406.__r_.__value_.__r.__words[0] = (std::string::size_type)v336;
        v337 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v395, (uint64_t *)&v406);
        v339 = v338;
        if (*(char *)(a1 + 367) >= 0)
          v340 = *(unsigned __int8 *)(a1 + 367);
        else
          v340 = *(_QWORD *)(a1 + 352);
        std::string::basic_string[abi:ne180100]((uint64_t)&v399, v340 + 50);
        if ((v399.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v341 = &v399;
        else
          v341 = (std::string *)v399.__r_.__value_.__r.__words[0];
        if (v340)
        {
          if (*(char *)(a1 + 367) >= 0)
            v342 = *(const void **)&v390[0];
          else
            v342 = *(const void **)(a1 + 344);
          memmove(v341, v342, v340);
        }
        strcpy((char *)v341 + v340, ":chain_consumer_nonresident_read_pressure_interval");
        v343 = ORToolsCpBasedAllocatorUtil::CreateOptionalClosedInterval(v395, v333, v334, (uint64_t)v337, v339, &v399);
        v345 = v344;
        if (SHIBYTE(v399.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v399.__r_.__value_.__l.__data_);
        if (v406.__r_.__value_.__r.__words[0])
        {
          v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
          operator delete(v406.__r_.__value_.__l.__data_);
        }
        v346 = *(_QWORD *)(*(_QWORD *)(a1 + 216) + 8 * v332);
        operations_research::sat::CumulativeConstraint::AddDemand(*(uint64_t **)v391, v343, v345, *(_QWORD *)(v346 + 160), *(_QWORD *)(v346 + 168));
        v330 = *(_QWORD *)(a1 + 216);
        v331 = *(_QWORD *)(a1 + 224);
      }
      ++v332;
    }
    while (v332 < (v331 - v330) >> 3);
  }
  v347 = *(_QWORD *)(a1 + 368);
  v348 = *(_QWORD *)(a1 + 376);
  v349 = *(_QWORD *)(a1 + 248);
  v412.__r_.__value_.__r.__words[0] = *(_QWORD *)(v349 + 240);
  LODWORD(v412.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v349 + 248);
  v350 = operator new(0x20uLL);
  v406.__r_.__value_.__l.__size_ = (std::string::size_type)(v350 + 4);
  v406.__r_.__value_.__r.__words[2] = (std::string::size_type)(v350 + 4);
  *(_OWORD *)v350 = *(_OWORD *)&v412.__r_.__value_.__l.__data_;
  v350[2] = v393;
  *((_DWORD *)v350 + 6) = v394;
  v406.__r_.__value_.__r.__words[0] = (std::string::size_type)v350;
  v351 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v395, (uint64_t *)&v406);
  v353 = v352;
  if (*(char *)(a1 + 367) >= 0)
    v354 = *(unsigned __int8 *)(a1 + 367);
  else
    v354 = *(_QWORD *)(a1 + 352);
  std::string::basic_string[abi:ne180100]((uint64_t)&v398, v354 + 51);
  if ((v398.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v355 = &v398;
  else
    v355 = (std::string *)v398.__r_.__value_.__r.__words[0];
  if (v354)
  {
    if (*(char *)(a1 + 367) >= 0)
      v356 = *(const void **)&v390[0];
    else
      v356 = *(const void **)(a1 + 344);
    memmove(v355, v356, v354);
  }
  strcpy((char *)v355 + v354, ":chain_consumer_nonresident_write_pressure_interval");
  v357 = ORToolsCpBasedAllocatorUtil::CreateOptionalClosedInterval(v395, v347, v348, (uint64_t)v351, v353, &v398);
  v359 = v358;
  if (SHIBYTE(v398.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v398.__r_.__value_.__l.__data_);
  if (v406.__r_.__value_.__r.__words[0])
  {
    v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
    operator delete(v406.__r_.__value_.__l.__data_);
  }
  operations_research::sat::CumulativeConstraint::AddDemand(*(uint64_t **)v391, v357, v359, *(_QWORD *)(*(_QWORD *)(a1 + 248) + 160), *(_QWORD *)(*(_QWORD *)(a1 + 248) + 168));
  if (*(_BYTE *)(a1 + 393))
  {
    v360 = *(_QWORD *)(a1 + 384) == 0;
    v361 = *(_QWORD *)(a1 + 280);
    if (v360 >= (*(_QWORD *)(a1 + 288) - v361) >> 4 || *(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216) < 9uLL)
    {
      v375 = *(_QWORD *)(a1 + 368);
      v376 = *(_QWORD *)(a1 + 248);
      v412.__r_.__value_.__r.__words[0] = *(_QWORD *)(v376 + 224);
      LODWORD(v412.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v376 + 232);
      v377 = operator new(0x20uLL);
      v406.__r_.__value_.__l.__size_ = (std::string::size_type)(v377 + 4);
      v406.__r_.__value_.__r.__words[2] = (std::string::size_type)(v377 + 4);
      *(_OWORD *)v377 = *(_OWORD *)&v412.__r_.__value_.__l.__data_;
      v377[2] = v393;
      *((_DWORD *)v377 + 6) = v394;
      v406.__r_.__value_.__r.__words[0] = (std::string::size_type)v377;
      v378 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v395, (uint64_t *)&v406);
      v380 = v379;
      if (*(char *)(a1 + 367) >= 0)
        v381 = *(unsigned __int8 *)(a1 + 367);
      else
        v381 = *(_QWORD *)(a1 + 352);
      std::string::basic_string[abi:ne180100]((uint64_t)&v396, v381 + 48);
      if ((v396.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v382 = &v396;
      else
        v382 = (std::string *)v396.__r_.__value_.__r.__words[0];
      if (v381)
      {
        if (*(char *)(a1 + 367) >= 0)
          v383 = *(const void **)&v390[0];
        else
          v383 = *(const void **)(a1 + 344);
        memmove(v382, v383, v381);
      }
      strcpy((char *)v382 + v381, ":chain_consumer_resident_write_pressure_interval");
      v384 = ORToolsCpBasedAllocatorUtil::CreateOptionalClosedInterval(v395, v375, v375, (uint64_t)v378, v380, &v396);
      v386 = v385;
      if (SHIBYTE(v396.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v396.__r_.__value_.__l.__data_);
      if (v406.__r_.__value_.__r.__words[0])
      {
        v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
        operator delete(v406.__r_.__value_.__l.__data_);
      }
      operations_research::sat::CumulativeConstraint::AddDemand(*(uint64_t **)v391, v384, v386, *(_QWORD *)(*(_QWORD *)(a1 + 248) + 112), *(_QWORD *)(*(_QWORD *)(a1 + 248) + 120));
    }
    else
    {
      v362 = *(_QWORD *)(a1 + 368);
      v363 = *(_QWORD *)(a1 + 248);
      v409.__r_.__value_.__r.__words[0] = *(_QWORD *)(v363 + 224);
      LODWORD(v409.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v363 + 232);
      operations_research::sat::BoolVar::BoolVar((uint64_t)&v412, ~*(_DWORD *)(v361 + 16 * v360 + 8), *(_QWORD *)(v361 + 16 * v360));
      v364 = *(_OWORD *)&v412.__r_.__value_.__l.__data_;
      v365 = operator new(0x30uLL);
      v406.__r_.__value_.__l.__size_ = (std::string::size_type)(v365 + 6);
      v406.__r_.__value_.__r.__words[2] = (std::string::size_type)(v365 + 6);
      *(_OWORD *)v365 = *(_OWORD *)&v409.__r_.__value_.__l.__data_;
      v365[2] = v393;
      *((_DWORD *)v365 + 6) = v394;
      v365[4] = v364;
      *((_DWORD *)v365 + 10) = DWORD2(v364);
      v406.__r_.__value_.__r.__words[0] = (std::string::size_type)v365;
      v366 = ORToolsCpBasedAllocatorUtil::CreateBooleanAnd(v395, (uint64_t *)&v406);
      v368 = v367;
      if (*(char *)(a1 + 367) >= 0)
        v369 = *(unsigned __int8 *)(a1 + 367);
      else
        v369 = *(_QWORD *)(a1 + 352);
      std::string::basic_string[abi:ne180100]((uint64_t)&v397, v369 + 59);
      if ((v397.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v370 = &v397;
      else
        v370 = (std::string *)v397.__r_.__value_.__r.__words[0];
      if (v369)
      {
        if (*(char *)(a1 + 367) >= 0)
          v371 = *(const void **)&v390[0];
        else
          v371 = *(const void **)(a1 + 344);
        memmove(v370, v371, v369);
      }
      strcpy((char *)v370 + v369, ":chain_consumer_inplacable_resident_write_pressure_interval");
      v372 = ORToolsCpBasedAllocatorUtil::CreateOptionalClosedInterval(v395, v362, v362, (uint64_t)v366, v368, &v397);
      v374 = v373;
      if (SHIBYTE(v397.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v397.__r_.__value_.__l.__data_);
      if (v406.__r_.__value_.__r.__words[0])
      {
        v406.__r_.__value_.__l.__size_ = v406.__r_.__value_.__r.__words[0];
        operator delete(v406.__r_.__value_.__l.__data_);
      }
      operations_research::sat::CumulativeConstraint::AddDemand(*(uint64_t **)v391, v372, v374, *(_QWORD *)(*(_QWORD *)(a1 + 248) + 112), *(_QWORD *)(*(_QWORD *)(a1 + 248) + 120));
    }
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (__str.__r_.__value_.__r.__words[0])
  {
    __str.__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_22D9CC294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p)
{
  uint64_t v53;
  void *v55;

  if (__p)
    operator delete(__p);
  v55 = *(void **)(v53 - 192);
  if (v55)
  {
    *(_QWORD *)(v53 - 184) = v55;
    operator delete(v55);
  }
  _Unwind_Resume(a1);
}

uint64_t CpAllocUtils::IsL2Dependent(unsigned int a1)
{
  return (a1 < 8) & (0xA8u >> a1);
}

uint64_t L2CycleEstimator::GetMaxCycle(L2CycleEstimator *this, char a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t *v52;
  BOOL v53;
  uint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  BOOL v59;
  uint64_t v60;
  char *__p;
  char *__pa;
  char *v64;
  char *v65;
  char *v66;

  v4 = *(_QWORD *)this;
  v5 = *((_QWORD *)this + 12);
  v6 = (unint64_t *)operator new(0x10uLL);
  v7 = v6 + 2;
  v64 = (char *)(v6 + 2);
  v66 = (char *)(v6 + 2);
  *v6 = v4;
  v6[1] = v5;
  __p = (char *)v6;
  if ((a2 & 1) != 0)
    goto LABEL_72;
  v9 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)&v66, 4uLL);
  v10 = __p;
  v11 = v64;
  *((_QWORD *)v9 + 2) = *((_QWORD *)this + 2);
  v12 = v9 + 16;
  v13 = &v9[8 * v8];
  v14 = v9 + 24;
  while (v11 != __p)
  {
    v15 = *((_QWORD *)v11 - 1);
    v11 -= 8;
    *((_QWORD *)v12 - 1) = v15;
    v12 -= 8;
  }
  __pa = v12;
  v66 = &v9[8 * v8];
  if (v10)
  {
    operator delete(v10);
    v13 = v66;
  }
  v65 = v9 + 24;
  if (v14 >= v13)
  {
    v17 = __pa;
    v18 = (v14 - __pa) >> 3;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 61)
      goto LABEL_85;
    v20 = v13 - __pa;
    if (v20 >> 2 > v19)
      v19 = v20 >> 2;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
    {
      v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)&v66, v21);
      v17 = __pa;
      v14 = v65;
    }
    else
    {
      v22 = 0;
    }
    v23 = &v22[8 * v18];
    v13 = &v22[8 * v21];
    *(_QWORD *)v23 = *((_QWORD *)this + 4);
    v16 = v23 + 8;
    while (v14 != v17)
    {
      v24 = *((_QWORD *)v14 - 1);
      v14 -= 8;
      *((_QWORD *)v23 - 1) = v24;
      v23 -= 8;
    }
    __pa = v23;
    v66 = v13;
    if (v17)
    {
      operator delete(v17);
      v13 = v66;
    }
  }
  else
  {
    *((_QWORD *)v9 + 3) = *((_QWORD *)this + 4);
    v16 = v9 + 32;
  }
  if (v16 >= v13)
  {
    v26 = __pa;
    v27 = (v16 - __pa) >> 3;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 61)
      goto LABEL_85;
    v29 = v13 - __pa;
    if (v29 >> 2 > v28)
      v28 = v29 >> 2;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
      v30 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    if (v30)
    {
      v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)&v66, v30);
      v26 = __pa;
    }
    else
    {
      v31 = 0;
    }
    v32 = &v31[8 * v27];
    v13 = &v31[8 * v30];
    *(_QWORD *)v32 = *((_QWORD *)this + 6);
    v25 = v32 + 8;
    while (v16 != v26)
    {
      v33 = *((_QWORD *)v16 - 1);
      v16 -= 8;
      *((_QWORD *)v32 - 1) = v33;
      v32 -= 8;
    }
    __pa = v32;
    v66 = v13;
    if (v26)
    {
      operator delete(v26);
      v13 = v66;
    }
  }
  else
  {
    *(_QWORD *)v16 = *((_QWORD *)this + 6);
    v25 = v16 + 8;
  }
  if (v25 >= v13)
  {
    v35 = __pa;
    v36 = (v25 - __pa) >> 3;
    v37 = v36 + 1;
    if ((unint64_t)(v36 + 1) >> 61)
      goto LABEL_85;
    v38 = v13 - __pa;
    if (v38 >> 2 > v37)
      v37 = v38 >> 2;
    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
      v39 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v39 = v37;
    if (v39)
    {
      v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)&v66, v39);
      v35 = __pa;
    }
    else
    {
      v40 = 0;
    }
    v41 = &v40[8 * v36];
    v13 = &v40[8 * v39];
    *(_QWORD *)v41 = *((_QWORD *)this + 8);
    v34 = v41 + 8;
    while (v25 != v35)
    {
      v42 = *((_QWORD *)v25 - 1);
      v25 -= 8;
      *((_QWORD *)v41 - 1) = v42;
      v41 -= 8;
    }
    __pa = v41;
    v66 = v13;
    if (v35)
    {
      operator delete(v35);
      v13 = v66;
    }
  }
  else
  {
    *(_QWORD *)v25 = *((_QWORD *)this + 8);
    v34 = v25 + 8;
  }
  if (v34 >= v13)
  {
    v43 = __pa;
    v44 = (v34 - __pa) >> 3;
    v45 = v44 + 1;
    if (!((unint64_t)(v44 + 1) >> 61))
    {
      v46 = v13 - __pa;
      if (v46 >> 2 > v45)
        v45 = v46 >> 2;
      if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
        v47 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v47 = v45;
      if (v47)
      {
        v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<L2CycleEstimator *>>((uint64_t)&v66, v47);
        v43 = __pa;
      }
      else
      {
        v48 = 0;
      }
      v49 = &v48[8 * v44];
      v50 = &v48[8 * v47];
      *(_QWORD *)v49 = *((_QWORD *)this + 10);
      v7 = (unint64_t *)(v49 + 8);
      while (v34 != v43)
      {
        v51 = *((_QWORD *)v34 - 1);
        v34 -= 8;
        *((_QWORD *)v49 - 1) = v51;
        v49 -= 8;
      }
      __pa = v49;
      v66 = v50;
      if (v43)
        operator delete(v43);
      goto LABEL_71;
    }
LABEL_85:
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  *(_QWORD *)v34 = *((_QWORD *)this + 10);
  v7 = (unint64_t *)(v34 + 8);
LABEL_71:
  v6 = (unint64_t *)__pa;
LABEL_72:
  v52 = (uint64_t *)(v6 + 1);
  v53 = v6 == v7 || v52 == (uint64_t *)v7;
  v54 = (uint64_t *)v6;
  if (!v53)
  {
    v55 = *v6;
    v54 = (uint64_t *)v6;
    v56 = v6 + 1;
    do
    {
      v58 = *v56++;
      v57 = v58;
      v59 = v55 >= v58;
      if (v55 <= v58)
        v55 = v57;
      if (!v59)
        v54 = v52;
      v52 = (uint64_t *)v56;
    }
    while (v56 != v7);
  }
  v60 = *v54;
  if (v6)
    operator delete(v6);
  return v60;
}

void sub_22D9CCA10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double absl::lts_2020_02_25::base_internal::CycleClock::Frequency(absl::lts_2020_02_25::base_internal::CycleClock *this)
{
  return 1000000000.0;
}

_DWORD *absl::lts_2020_02_25::base_internal::SpinLock::SpinLock(_DWORD *result, int a2)
{
  *result = 2 * (a2 == 1);
  return result;
}

uint64_t absl::lts_2020_02_25::base_internal::SpinLock::SpinLoop(absl::lts_2020_02_25::base_internal::SpinLock *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  int v10;
  uint64_t result;
  BOOL v12;

  v9 = atomic_load(&_MergedGlobals_20);
  if (v9 != 221)
    absl::lts_2020_02_25::base_internal::CallOnceImpl<absl::lts_2020_02_25::base_internal::SpinLock::SpinLoop(void)::$_0>((absl::lts_2020_02_25::base_internal *)&_MergedGlobals_20, a2, a3, a4, a5, a6, a7, a8);
  v10 = dword_25407A284;
  do
  {
    result = *(unsigned int *)this;
    v12 = __OFSUB__(v10--, 1);
  }
  while ((result & 1) != 0 && !((v10 < 0) ^ v12 | (v10 == 0)));
  return result;
}

void absl::lts_2020_02_25::base_internal::CallOnceImpl<absl::lts_2020_02_25::base_internal::SpinLock::SpinLoop(void)::$_0>(absl::lts_2020_02_25::base_internal *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;
  int v9;
  int v12;
  unsigned int v13;

  v8 = (unsigned int *)a1;
  v9 = *(_DWORD *)a1;
  if (*(int *)a1 <= 94570705)
  {
    if (!v9 || v9 == 221)
      goto LABEL_10;
LABEL_4:
    a1 = (absl::lts_2020_02_25::base_internal *)absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"call_once.h", 158, "Unexpected value for control word: 0x%lx", a5, a6, a7, a8, *(_DWORD *)a1);
    goto LABEL_10;
  }
  if (v9 != 94570706 && v9 != 1707250555)
    goto LABEL_4;
LABEL_10:
  while (!__ldxr(v8))
  {
    if (!__stxr(0x65C2937Bu, v8))
      goto LABEL_14;
  }
  __clrex();
  a1 = (absl::lts_2020_02_25::base_internal *)absl::lts_2020_02_25::base_internal::SpinLockWait(v8, 3u, (uint64_t)&absl::lts_2020_02_25::base_internal::CallOnceImpl<absl::lts_2020_02_25::base_internal::SpinLock::SpinLoop(void)::$_0>(std::atomic<unsigned int> *,absl::lts_2020_02_25::base_internal::SchedulingMode,absl::lts_2020_02_25::base_internal::SpinLock::SpinLoop(void)::$_0 &&)::trans);
  if ((_DWORD)a1)
    return;
LABEL_14:
  if ((int)absl::lts_2020_02_25::base_internal::NumCPUs(a1, a2, a3, a4, a5, a6, a7, a8) <= 1)
    v12 = 1;
  else
    v12 = 1000;
  dword_25407A284 = v12;
  v13 = *v8;
  atomic_store(0xDDu, v8);
  if (v13 == 94570706)
    ORToolsCpL2AccessVariable::~ORToolsCpL2AccessVariable((ORToolsCpL2AccessVariable *)v8);
}

uint64_t absl::lts_2020_02_25::base_internal::NumCPUs(absl::lts_2020_02_25::base_internal *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;

  v8 = atomic_load(dword_25407A290);
  if (v8 != 221)
    absl::lts_2020_02_25::base_internal::CallOnceImpl<absl::lts_2020_02_25::base_internal::NumCPUs(void)::$_0>(dword_25407A290, a2, a3, a4, a5, a6, a7, a8);
  return _MergedGlobals_21;
}

void absl::lts_2020_02_25::base_internal::CallOnceImpl<absl::lts_2020_02_25::base_internal::NumCPUs(void)::$_0>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unsigned int v12;

  v9 = *a1;
  if ((int)*a1 <= 94570705)
  {
    if (!v9 || v9 == 221)
      goto LABEL_10;
LABEL_4:
    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"call_once.h", 158, "Unexpected value for control word: 0x%lx", a5, a6, a7, a8, *a1);
    goto LABEL_10;
  }
  if (v9 != 94570706 && v9 != 1707250555)
    goto LABEL_4;
LABEL_10:
  while (!__ldxr(a1))
  {
    if (!__stxr(0x65C2937Bu, a1))
      goto LABEL_14;
  }
  __clrex();
  if (absl::lts_2020_02_25::base_internal::SpinLockWait(a1, 3u, (uint64_t)&absl::lts_2020_02_25::base_internal::CallOnceImpl<absl::lts_2020_02_25::base_internal::NumCPUs(void)::$_0>(std::atomic<unsigned int> *,absl::lts_2020_02_25::base_internal::SchedulingMode,absl::lts_2020_02_25::base_internal::NumCPUs(void)::$_0 &&)::trans))return;
LABEL_14:
  _MergedGlobals_21 = std::thread::hardware_concurrency();
  v12 = *a1;
  atomic_store(0xDDu, a1);
  if (v12 == 94570706)
    ORToolsCpL2AccessVariable::~ORToolsCpL2AccessVariable((ORToolsCpL2AccessVariable *)a1);
}

void absl::lts_2020_02_25::base_internal::CallOnceImpl<void (&)(void)>(unsigned int *a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  unsigned int v13;

  v10 = *a1;
  if ((int)*a1 <= 94570705)
  {
    if (!v10 || v10 == 221)
      goto LABEL_10;
LABEL_4:
    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"call_once.h", 158, "Unexpected value for control word: 0x%lx", a5, a6, a7, a8, *a1);
    goto LABEL_10;
  }
  if (v10 != 94570706 && v10 != 1707250555)
    goto LABEL_4;
LABEL_10:
  while (!__ldxr(a1))
  {
    if (!__stxr(0x65C2937Bu, a1))
      goto LABEL_14;
  }
  __clrex();
  if (absl::lts_2020_02_25::base_internal::SpinLockWait(a1, 3u, (uint64_t)&absl::lts_2020_02_25::base_internal::CallOnceImpl<void (&)(void)>(std::atomic<unsigned int> *,absl::lts_2020_02_25::base_internal::SchedulingMode,void (&)(void) &&)::trans))return;
LABEL_14:
  a3();
  v13 = *a1;
  atomic_store(0xDDu, a1);
  if (v13 == 94570706)
    ORToolsCpL2AccessVariable::~ORToolsCpL2AccessVariable((ORToolsCpL2AccessVariable *)a1);
}

uint64_t absl::lts_2020_02_25::base_internal::SetCurrentThreadIdentity(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v9;
  unsigned int v10;
  sigset_t v12;
  sigset_t v13;
  uint64_t v14;

  v14 = a2;
  v9 = atomic_load(_MergedGlobals_22);
  if ((v9 & 1) != 0 && pthread_getspecific(qword_25407A2B0))
    absl::lts_2020_02_25::base_internal::SetCurrentThreadIdentity();
  v10 = atomic_load(&dword_25407A2AC);
  if (v10 != 221)
  v12 = 0;
  v13 = -1;
  pthread_sigmask(3, &v13, &v12);
  pthread_setspecific(qword_25407A2B0, a1);
  return pthread_sigmask(3, &v12, 0);
}

void *absl::lts_2020_02_25::base_internal::CurrentThreadIdentityIfPresent(absl::lts_2020_02_25::base_internal *this)
{
  unsigned __int8 v1;

  v1 = atomic_load(_MergedGlobals_22);
  if ((v1 & 1) != 0)
    return pthread_getspecific(qword_25407A2B0);
  else
    return 0;
}

uint64_t absl::lts_2020_02_25::base_internal::`anonymous namespace'::AllocateThreadIdentityKey(absl::lts_2020_02_25::base_internal::_anonymous_namespace_ *this, void (*a2)(void *))
{
  uint64_t result;

  result = pthread_key_create((pthread_key_t *)&qword_25407A2B0, (void (__cdecl *)(void *))this);
  atomic_store(1u, _MergedGlobals_22);
  return result;
}

void absl::lts_2020_02_25::base_internal::ClearCurrentThreadIdentity(absl::lts_2020_02_25::base_internal *this)
{
  unsigned __int8 v1;

  v1 = atomic_load(_MergedGlobals_22);
  if ((v1 & 1) != 0)
  {
    if (pthread_getspecific(qword_25407A2B0))
      absl::lts_2020_02_25::base_internal::ClearCurrentThreadIdentity();
  }
}

void absl::lts_2020_02_25::base_internal::CallOnceImpl<void (&)(void (*)(void *)),void (*&)(void *)>(unsigned int *a1, uint64_t a2, void (*a3)(_QWORD), _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  unsigned int v14;

  v11 = *a1;
  if ((int)*a1 <= 94570705)
  {
    if (!v11 || v11 == 221)
      goto LABEL_10;
LABEL_4:
    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"call_once.h", 158, "Unexpected value for control word: 0x%lx", a5, a6, a7, a8, *a1);
    goto LABEL_10;
  }
  if (v11 != 94570706 && v11 != 1707250555)
    goto LABEL_4;
LABEL_10:
  while (!__ldxr(a1))
  {
    if (!__stxr(0x65C2937Bu, a1))
      goto LABEL_14;
  }
  __clrex();
  if (absl::lts_2020_02_25::base_internal::SpinLockWait(a1, 3u, (uint64_t)&absl::lts_2020_02_25::base_internal::CallOnceImpl<void (&)(void (*)(void *)),void (*&)(void *)>(std::atomic<unsigned int> *,absl::lts_2020_02_25::base_internal::SchedulingMode,void (&)(void (*)(void *)) &&,void (*&)(void *) &&)::trans))return;
LABEL_14:
  a3(*a4);
  v14 = *a1;
  atomic_store(0xDDu, a1);
  if (v14 == 94570706)
    ORToolsCpL2AccessVariable::~ORToolsCpL2AccessVariable((ORToolsCpL2AccessVariable *)a1);
}

unint64_t absl::lts_2020_02_25::hash_internal::CityHash64(absl::lts_2020_02_25::hash_internal *this, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  const char *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;

  if (a2 > 0x20)
  {
    if (a2 <= 0x40)
    {
      v8 = 2 * a2 - 0x651E95C4D06FBFB1;
      v10 = *(_QWORD *)((char *)this + a2 - 32);
      v9 = *(_QWORD *)((char *)this + a2 - 24);
      v11 = 9 * *((_QWORD *)this + 3);
      v12 = *(_QWORD *)((char *)this + a2 - 8);
      v13 = *(_QWORD *)((char *)this + a2 - 16) * v8;
      v14 = v11 - 0x651E95C4D06FBFB1 * *((_QWORD *)this + 2);
      v15 = __ROR8__(v14, 42);
      v16 = v14
          + v9
          + *((_QWORD *)this + 1)
          + bswap64((v14+ v9+ v12+ v15+ v9+ bswap64((v11+ ((v12 - 0x651E95C4D06FBFB1 * *(_QWORD *)this) ^ v10)+ 1+ v13+ bswap64((__ROR8__(v12 - 0x651E95C4D06FBFB1 * *(_QWORD *)this, 43)+ 9 * (__ROR8__(*((_QWORD *)this + 1), 30) + v9)+ v11+ ((v12 - 0x651E95C4D06FBFB1 * *(_QWORD *)this) ^ v10)+ 1)* v8))* v8))* v8);
      return v15 + v9 + ((v13 + v10 + v16 * v8) ^ ((v13 + v10 + v16 * v8) >> 47)) * v8;
    }
    v2 = 0x9DDFEA08EB382D69;
    v19 = *(_QWORD *)((char *)this + a2 - 48);
    v20 = *(_QWORD *)((char *)this + a2 - 40);
    v21 = *(_QWORD *)((char *)this + a2 - 24);
    v23 = *(_QWORD *)((char *)this + a2 - 64);
    v22 = *(_QWORD *)((char *)this + a2 - 56);
    v24 = *(_QWORD *)((char *)this + a2 - 16);
    v25 = *(_QWORD *)((char *)this + a2 - 8);
    v26 = v22 + v24;
    v27 = 0x9DDFEA08EB382D69
        * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ (v19 + a2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ (v19 + a2))));
    v28 = 0x9DDFEA08EB382D69 * (v27 ^ (v27 >> 47));
    v29 = (const char *)(v23 + a2 + v22 + v19);
    v30 = (unint64_t)&v29[v20];
    v31 = __ROR8__(v29, 44) + v23 + a2 + __ROR8__(v20 + v23 + a2 - 0x622015F714C7D297 * (v27 ^ (v27 >> 47)), 21);
    v32 = v22 + v24 + *(_QWORD *)((char *)this + a2 - 32) - 0x4B6D499041670D8DLL;
    v33 = v32 + v21 + v24;
    v34 = __ROR8__(v33, 44);
    v35 = v33 + v25;
    v36 = v34 + v32 + __ROR8__(v32 + v20 + v25, 21);
    v38 = *(_QWORD *)this;
    v37 = (_QWORD *)((char *)this + 32);
    v39 = v38 - 0x4B6D499041670D8DLL * v20;
    v40 = -(uint64_t)((a2 - 1) & 0xFFFFFFFFFFFFFFC0);
    do
    {
      v41 = *(v37 - 3);
      v42 = (const char *)(v39 + v30 + v26 + v41);
      v43 = v37[2];
      v44 = v37[3];
      v45 = v37[1];
      v26 = v45 + v30 - 0x4B6D499041670D8DLL * __ROR8__(v26 + v31 + v43, 42);
      v46 = v28 + v35;
      v47 = *(v37 - 2);
      v48 = *(v37 - 1);
      v49 = *(v37 - 4) - 0x4B6D499041670D8DLL * v31;
      v50 = v49 + v35 + v48;
      v51 = v49 + v41 + v47;
      v30 = v51 + v48;
      v52 = __ROR8__(v51, 44) + v49;
      v53 = (0xB492B66FBE98F273 * __ROR8__(v42, 37)) ^ v36;
      v39 = 0xB492B66FBE98F273 * __ROR8__(v46, 33);
      v31 = v52 + __ROR8__(v50 + v53, 21);
      v54 = v39 + v36 + *v37;
      v35 = v54 + v45 + v43 + v44;
      v36 = __ROR8__(v54 + v45 + v43, 44) + v54 + __ROR8__(v26 + v47 + v54 + v44, 21);
      v37 += 8;
      v28 = v53;
      v40 += 64;
    }
    while (v40);
    v55 = v39
        - 0x622015F714C7D297
        * ((0x9DDFEA08EB382D69
          * (v36 ^ ((0x9DDFEA08EB382D69 * (v36 ^ v31)) >> 47) ^ (0x9DDFEA08EB382D69 * (v36 ^ v31)))) ^ ((0x9DDFEA08EB382D69 * (v36 ^ ((0x9DDFEA08EB382D69 * (v36 ^ v31)) >> 47) ^ (0x9DDFEA08EB382D69 * (v36 ^ v31)))) >> 47));
    v56 = v55 ^ (v53
               - 0x4B6D499041670D8DLL * (v26 ^ (v26 >> 47))
               - 0x622015F714C7D297
               * ((0x9DDFEA08EB382D69
                 * (v35 ^ ((0x9DDFEA08EB382D69 * (v35 ^ v30)) >> 47) ^ (0x9DDFEA08EB382D69 * (v35 ^ v30)))) ^ ((0x9DDFEA08EB382D69 * (v35 ^ ((0x9DDFEA08EB382D69 * (v35 ^ v30)) >> 47) ^ (0x9DDFEA08EB382D69 * (v35 ^ v30)))) >> 47)));
    goto LABEL_12;
  }
  v2 = 0x9AE16A3B2F90404FLL;
  if (a2 > 0x10)
  {
    v3 = 2 * a2 - 0x651E95C4D06FBFB1;
    v18 = *((_QWORD *)this + 1);
    v6 = __ROR8__(v18 - 0x651E95C4D06FBFB1, 18)
       - 0x4B6D499041670D8DLL * *(_QWORD *)this
       + *(_QWORD *)((char *)this + a2 - 8) * v3;
    v7 = (__ROR8__(*(_QWORD *)((char *)this + a2 - 8) * v3, 30)
        + __ROR8__(0xB492B66FBE98F273 * *(_QWORD *)this + v18, 43)
        - 0x651E95C4D06FBFB1 * *(_QWORD *)((char *)this + a2 - 16)) ^ v6;
    return (((v6 ^ ((unint64_t)(v7 * v3) >> 47) ^ (v7 * v3)) * v3) ^ (((v6 ^ ((unint64_t)(v7 * v3) >> 47) ^ (v7 * v3))
                                                                            * v3) >> 47))
         * v3;
  }
  if (a2 >= 8)
  {
    v3 = 2 * a2 - 0x651E95C4D06FBFB1;
    v4 = *(_QWORD *)this - 0x651E95C4D06FBFB1;
    v5 = v4 + __ROR8__(*(_QWORD *)((char *)this + a2 - 8), 37) * v3;
    v6 = (__ROR8__(v4, 25) + *(_QWORD *)((char *)this + a2 - 8)) * v3;
    v7 = v6 ^ v5;
    return (((v6 ^ ((unint64_t)(v7 * v3) >> 47) ^ (v7 * v3)) * v3) ^ (((v6 ^ ((unint64_t)(v7 * v3) >> 47) ^ (v7 * v3))
                                                                            * v3) >> 47))
         * v3;
  }
  if (a2 >= 4)
  {
    v2 = 2 * a2 - 0x651E95C4D06FBFB1;
    v55 = *(unsigned int *)((char *)this + a2 - 4);
    v56 = (a2 + 8 * *(unsigned int *)this) ^ v55;
LABEL_12:
    v57 = (v55 ^ ((v56 * v2) >> 47) ^ (v56 * v2)) * v2;
    goto LABEL_13;
  }
  if (!a2)
    return v2;
  v57 = (0xC3A5C85C97CB3127 * (a2 + 4 * *((unsigned __int8 *)this + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                   * (*(unsigned __int8 *)this | ((unint64_t)*((unsigned __int8 *)this + (a2 >> 1)) << 8)));
LABEL_13:
  v2 *= v57 ^ (v57 >> 47);
  return v2;
}

void **absl::lts_2020_02_25::VerifyTree(void **a1)
{
  unint64_t v2;
  const char *v3;
  const char *v4;
  uint64_t v5;
  void **v6;
  void **v7;
  unsigned int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  void (*v11)(uint64_t, const char *, uint64_t, std::string *);
  _QWORD *v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  void (*v15)(uint64_t, const char *, uint64_t, std::string *);
  unint64_t v16;
  unint64_t v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  void (*v20)(uint64_t, const char *, uint64_t, std::string *);
  const std::string::value_type *p_p;
  std::string::size_type v22;
  void (*v23)(uint64_t, const char *, uint64_t, std::string *);
  const std::string::value_type *v24;
  std::string::size_type v25;
  void (*v26)(uint64_t, const char *, uint64_t, std::string *);
  const std::string::value_type *v27;
  std::string::size_type v28;
  void (*v29)(uint64_t, const char *, uint64_t, std::string *);
  const std::string::value_type *v30;
  std::string::size_type v31;
  void (*v32)(uint64_t, const char *, uint64_t, std::string *);
  const std::string::value_type *v33;
  std::string::size_type v34;
  void (*v35)(uint64_t, const char *, uint64_t, std::string *);
  const std::string::value_type *v36;
  std::string::size_type v37;
  void (*v38)(uint64_t, const char *, uint64_t, std::string *);
  void **v39;
  int v41;
  void *__p;
  std::string::size_type v43;
  unsigned __int8 v44;
  std::string v45;
  unint64_t v46;
  void **v47;

  if (!a1)
    return a1;
  v2 = 2;
  v46 = 0;
  v47 = a1;
  v3 = "tag == CONCAT";
  v4 = "concat";
  do
  {
    v6 = v47;
    if ((v2 & 1) == 0)
      v6 = (void **)&v47;
    v7 = (void **)v6[(v2 >> 1) - 1];
    v46 = v2 - 2;
    if (!v7)
    {
      v45.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
      *(_OWORD *)&v45.__r_.__value_.__r.__words[1] = xmmword_22DCE5C00;
      strcpy(v45.__r_.__value_.__l.__data_, "Check node != nullptr failed: ");
      absl::lts_2020_02_25::ReportError((uint64_t)&__p, (uint64_t)a1);
      if ((v44 & 0x80u) == 0)
        p_p = (const std::string::value_type *)&__p;
      else
        p_p = (const std::string::value_type *)__p;
      if ((v44 & 0x80u) == 0)
        v22 = v44;
      else
        v22 = v43;
      std::string::append(&v45, p_p, v22);
      if ((char)v44 < 0)
        operator delete(__p);
      v23 = (void (*)(uint64_t, const char *, uint64_t, std::string *))atomic_load((unint64_t *)absl::lts_2020_02_25::raw_logging_internal::internal_log_function);
      v23(3, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/abseil-cpp-20200225.2/absl/strings/cord.cc", 1906, &v45);
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v45.__r_.__value_.__l.__data_);
    }
    if (v7 != a1 && !*v7)
    {
      v45.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
      *(_OWORD *)&v45.__r_.__value_.__r.__words[1] = xmmword_22DCE5C10;
      strcpy(v45.__r_.__value_.__l.__data_, "Check node->length != 0 failed: ");
      absl::lts_2020_02_25::ReportError((uint64_t)&__p, (uint64_t)a1);
      if ((v44 & 0x80u) == 0)
        v24 = (const std::string::value_type *)&__p;
      else
        v24 = (const std::string::value_type *)__p;
      if ((v44 & 0x80u) == 0)
        v25 = v44;
      else
        v25 = v43;
      std::string::append(&v45, v24, v25);
      if ((char)v44 < 0)
        operator delete(__p);
      v26 = (void (*)(uint64_t, const char *, uint64_t, std::string *))atomic_load((unint64_t *)absl::lts_2020_02_25::raw_logging_internal::internal_log_function);
      v26(3, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/abseil-cpp-20200225.2/absl/strings/cord.cc", 1908, &v45);
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v45.__r_.__value_.__l.__data_);
    }
    v8 = *((unsigned __int8 *)v7 + 12);
    if (*((_BYTE *)v7 + 12))
    {
      if (v8 >= 3)
      {
        if (v8 >= 0x81)
          v5 = 32 * v8 - 3072;
        else
          v5 = 8 * v8;
        if ((unint64_t)*v7 <= v5 - 13)
          goto LABEL_7;
        v45.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
        *(_OWORD *)&v45.__r_.__value_.__r.__words[1] = xmmword_22DCE5C50;
        strcpy(v45.__r_.__value_.__l.__data_, "Check node->length <= TagToLength(node->tag) failed: ");
        absl::lts_2020_02_25::ReportError((uint64_t)&__p, (uint64_t)a1);
        if ((v44 & 0x80u) == 0)
          v33 = (const std::string::value_type *)&__p;
        else
          v33 = (const std::string::value_type *)__p;
        if ((v44 & 0x80u) == 0)
          v34 = v44;
        else
          v34 = v43;
        std::string::append(&v45, v33, v34);
        if ((char)v44 < 0)
          operator delete(__p);
        v35 = (void (*)(uint64_t, const char *, uint64_t, std::string *))atomic_load((unint64_t *)absl::lts_2020_02_25::raw_logging_internal::internal_log_function);
        v35(3, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/abseil-cpp-20200225.2/absl/strings/cord.cc", 1925, &v45);
        goto LABEL_102;
      }
      if (v8 == 1)
      {
        if (v7[2])
          goto LABEL_7;
        v45.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
        *(_OWORD *)&v45.__r_.__value_.__r.__words[1] = xmmword_22DCE5C40;
        strcpy(v45.__r_.__value_.__l.__data_, "Check node->external()->base != nullptr failed: ");
        absl::lts_2020_02_25::ReportError((uint64_t)&__p, (uint64_t)a1);
        if ((v44 & 0x80u) == 0)
          v9 = (const std::string::value_type *)&__p;
        else
          v9 = (const std::string::value_type *)__p;
        if ((v44 & 0x80u) == 0)
          v10 = v44;
        else
          v10 = v43;
        std::string::append(&v45, v9, v10);
        if ((char)v44 < 0)
          operator delete(__p);
        v11 = (void (*)(uint64_t, const char *, uint64_t, std::string *))atomic_load((unint64_t *)absl::lts_2020_02_25::raw_logging_internal::internal_log_function);
        v11(3, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/abseil-cpp-20200225.2/absl/strings/cord.cc", 1928, &v45);
        goto LABEL_102;
      }
      v16 = (unint64_t)v7[2];
      v17 = *(_QWORD *)v7[3];
      if (v16 < v17)
      {
        if ((unint64_t)*v7 + v16 <= v17)
          goto LABEL_7;
LABEL_40:
        v45.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x60uLL);
        *(_OWORD *)&v45.__r_.__value_.__r.__words[1] = xmmword_22DCE5C30;
        strcpy(v45.__r_.__value_.__l.__data_, "Check node->substring()->start + node->length <= node->substring()->child->length failed: ");
        absl::lts_2020_02_25::ReportError((uint64_t)&__p, (uint64_t)a1);
        if ((v44 & 0x80u) == 0)
          v18 = (const std::string::value_type *)&__p;
        else
          v18 = (const std::string::value_type *)__p;
        if ((v44 & 0x80u) == 0)
          v19 = v44;
        else
          v19 = v43;
        std::string::append(&v45, v18, v19);
        if ((char)v44 < 0)
          operator delete(__p);
        v20 = (void (*)(uint64_t, const char *, uint64_t, std::string *))atomic_load((unint64_t *)absl::lts_2020_02_25::raw_logging_internal::internal_log_function);
        v20(3, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/abseil-cpp-20200225.2/absl/strings/cord.cc", 1935, &v45);
LABEL_102:
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v45.__r_.__value_.__l.__data_);
        goto LABEL_7;
      }
      v45.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x50uLL);
      *(_OWORD *)&v45.__r_.__value_.__r.__words[1] = xmmword_22DCE5C20;
      strcpy(v45.__r_.__value_.__l.__data_, "Check node->substring()->start < node->substring()->child->length failed: ");
      absl::lts_2020_02_25::ReportError((uint64_t)&__p, (uint64_t)a1);
      if ((v44 & 0x80u) == 0)
        v36 = (const std::string::value_type *)&__p;
      else
        v36 = (const std::string::value_type *)__p;
      if ((v44 & 0x80u) == 0)
        v37 = v44;
      else
        v37 = v43;
      std::string::append(&v45, v36, v37);
      if ((char)v44 < 0)
        operator delete(__p);
      v38 = (void (*)(uint64_t, const char *, uint64_t, std::string *))atomic_load((unint64_t *)absl::lts_2020_02_25::raw_logging_internal::internal_log_function);
      v38(3, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/abseil-cpp-20200225.2/absl/strings/cord.cc", 1932, &v45);
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v45.__r_.__value_.__l.__data_);
      if (*((_BYTE *)v7 + 12) != 2)
      {
        v41 = 116;
        v4 = "substring";
        v3 = "tag == SUBSTRING";
LABEL_123:
        __assert_rtn(v4, "cord.cc", v41, v3);
      }
      if ((char *)v7[2] + (unint64_t)*v7 > (char *)*(_QWORD *)v7[3])
        goto LABEL_40;
    }
    else
    {
      if (!v7[2])
      {
        v45.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
        *(_OWORD *)&v45.__r_.__value_.__r.__words[1] = xmmword_22DCE5C60;
        strcpy(v45.__r_.__value_.__l.__data_, "Check node->concat()->left != nullptr failed: ");
        absl::lts_2020_02_25::ReportError((uint64_t)&__p, (uint64_t)a1);
        if ((v44 & 0x80u) == 0)
          v27 = (const std::string::value_type *)&__p;
        else
          v27 = (const std::string::value_type *)__p;
        if ((v44 & 0x80u) == 0)
          v28 = v44;
        else
          v28 = v43;
        std::string::append(&v45, v27, v28);
        if ((char)v44 < 0)
          operator delete(__p);
        v29 = (void (*)(uint64_t, const char *, uint64_t, std::string *))atomic_load((unint64_t *)absl::lts_2020_02_25::raw_logging_internal::internal_log_function);
        v29(3, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/abseil-cpp-20200225.2/absl/strings/cord.cc", 1913, &v45);
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v45.__r_.__value_.__l.__data_);
        if (*((_BYTE *)v7 + 12))
        {
LABEL_122:
          v41 = 106;
          goto LABEL_123;
        }
      }
      v12 = v7[3];
      if (!v12)
      {
        v45.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
        *(_OWORD *)&v45.__r_.__value_.__r.__words[1] = xmmword_22DCE5C70;
        strcpy(v45.__r_.__value_.__l.__data_, "Check node->concat()->right != nullptr failed: ");
        absl::lts_2020_02_25::ReportError((uint64_t)&__p, (uint64_t)a1);
        if ((v44 & 0x80u) == 0)
          v30 = (const std::string::value_type *)&__p;
        else
          v30 = (const std::string::value_type *)__p;
        if ((v44 & 0x80u) == 0)
          v31 = v44;
        else
          v31 = v43;
        std::string::append(&v45, v30, v31);
        if ((char)v44 < 0)
          operator delete(__p);
        v32 = (void (*)(uint64_t, const char *, uint64_t, std::string *))atomic_load((unint64_t *)absl::lts_2020_02_25::raw_logging_internal::internal_log_function);
        v32(3, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/abseil-cpp-20200225.2/absl/strings/cord.cc", 1915, &v45);
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v45.__r_.__value_.__l.__data_);
        if (*((_BYTE *)v7 + 12))
          goto LABEL_122;
        v12 = v7[3];
      }
      if (*v7 != (void *)(*v12 + *(_QWORD *)v7[2]))
      {
        v45.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x60uLL);
        *(_OWORD *)&v45.__r_.__value_.__r.__words[1] = xmmword_22DCE5C80;
        strcpy(v45.__r_.__value_.__l.__data_, "Check (node->length == node->concat()->left->length + node->concat()->right->length) failed: ");
        absl::lts_2020_02_25::ReportError((uint64_t)&__p, (uint64_t)a1);
        if ((v44 & 0x80u) == 0)
          v13 = (const std::string::value_type *)&__p;
        else
          v13 = (const std::string::value_type *)__p;
        if ((v44 & 0x80u) == 0)
          v14 = v44;
        else
          v14 = v43;
        std::string::append(&v45, v13, v14);
        if ((char)v44 < 0)
          operator delete(__p);
        v15 = (void (*)(uint64_t, const char *, uint64_t, std::string *))atomic_load((unint64_t *)absl::lts_2020_02_25::raw_logging_internal::internal_log_function);
        v15(3, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/abseil-cpp-20200225.2/absl/strings/cord.cc", 1918, &v45);
        goto LABEL_102;
      }
    }
LABEL_7:
    v2 = v46;
  }
  while (v46 > 1);
  if (v46)
  {
    v39 = v47;
    if (v47)
      memset(v47, 171, (4 * v46) & 0x7FFFFFFFFFFFFFF8);
    operator delete(v39);
  }
  return a1;
}

void sub_22D9CDC04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;
  uint64_t v33;
  void *v35;

  if (*(char *)(v32 - 113) < 0)
  {
    operator delete(*(void **)(v32 - 136));
    v33 = *(_QWORD *)(v32 - 112);
    if ((v33 & 1) != 0)
    {
LABEL_6:
      v35 = *(void **)(v32 - 104);
      if (v35)
        memset(*(void **)(v32 - 104), 171, (4 * v33) & 0xFFFFFFFFFFFFFFF8);
      operator delete(v35);
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    v33 = *(_QWORD *)(v32 - 112);
    if ((v33 & 1) != 0)
      goto LABEL_6;
  }
  _Unwind_Resume(exception_object);
}

void absl::lts_2020_02_25::Cord::DestroyCordSlow(void ***this)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  int v5;

  if (*((char *)this + 15) <= 15)
  {
    absl::lts_2020_02_25::VerifyTree(0);
  }
  else
  {
    v1 = (unsigned int *)absl::lts_2020_02_25::VerifyTree(*this);
    if (v1)
    {
      v4 = v1 + 2;
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (v5 <= 0)
        absl::lts_2020_02_25::Cord::DestroyCordSlow((uint64_t)v1, v2, v3);
      if (v5 == 1)
        absl::lts_2020_02_25::UnrefInternal(v1);
    }
  }
}

uint64_t absl::lts_2020_02_25::ReportError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  _QWORD *v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  unsigned int v12;
  std::string::value_type v13;
  _QWORD *v14;
  int v15;
  size_t v16;
  const void *v17;
  void ***v18;
  _QWORD *v19;
  _QWORD *v20;
  size_t v21;
  const void *v22;
  unint64_t v23;
  void ***p_dst;
  uint64_t v25;
  uint64_t v26;
  std::string::value_type *v27;
  std::string::size_type v28;
  std::string *p_p;
  std::string::size_type size;
  uint64_t v31;
  uint64_t v32;
  std::string::value_type *v33;
  std::string::size_type v34;
  _QWORD *v35;
  _DWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  _OWORD *v42;
  void *v43;
  unint64_t v44;
  char *v45;
  _OWORD *v46;
  __int128 *v47;
  unint64_t v48;
  __int128 v49;
  unint64_t v50;
  _DWORD *v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  _OWORD *v57;
  void *v58;
  unint64_t v59;
  char *v60;
  _OWORD *v61;
  __int128 *v62;
  unint64_t v63;
  __int128 v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  int v68;
  int v69;
  const char *v70;
  const char *v71;
  const char *v72;
  unint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  void *v76;
  void *v77;
  const std::string::value_type *v79;
  std::string::size_type v80;
  void (*v81)(uint64_t, const char *, uint64_t, std::string *);
  void *__b;
  void *v83;
  uint64_t v84;
  _QWORD v85[8];
  void *v86[2];
  __int128 v87;
  int v88;
  uint64_t v89[19];
  void **__dst;
  std::string::size_type v91;
  int64_t v92;
  std::string __p;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;

  v100 = *MEMORY[0x24BDAC8D0];
  v3 = MEMORY[0x24BEDB870];
  v4 = MEMORY[0x24BEDB870] + 64;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v89[0] = MEMORY[0x24BEDB870] + 64;
  v84 = v5;
  *(_QWORD *)((char *)&v85[-1] + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)&v85[-1] + *(_QWORD *)(v84 - 24));
  std::ios_base::init(v7, v85);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  v84 = v3 + 24;
  v89[0] = v4;
  std::streambuf::basic_streambuf();
  v85[0] = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)v86 = 0u;
  v87 = 0u;
  v88 = 16;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v84, (uint64_t)"Error at node ", 14);
  v8 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" in:", 4);
  v9 = 0;
  v97 = 0;
  v94 = 0;
  __b = &v95;
  v83 = &v98;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        *(_QWORD *)((char *)&v85[2] + *(_QWORD *)(v84 - 24)) = 3;
        atomic_load((unsigned int *)(a2 + 8));
        std::ostream::operator<<();
        v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v84, (uint64_t)" ", 1);
        *(_QWORD *)((char *)v10 + *(_QWORD *)(*v10 - 24) + 24) = 7;
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v84, (uint64_t)" [", 2);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v84, (uint64_t)"]", 1);
        v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v84, (uint64_t)" ", 1);
        if (*(_BYTE *)(a2 + 12)
          || (v12 = *(unsigned __int8 *)(a2 + 13), v12 < 0x10)
          || v12 <= 0x2F
          && *(_QWORD *)a2 >= *(_QWORD *)((char *)&absl::lts_2020_02_25::min_length + ((4 * v12) & 0x3F8)))
        {
          v13 = 98;
        }
        else
        {
          v13 = 117;
        }
        __p.__r_.__value_.__s.__data_[0] = v13;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&__p, 1);
        v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v84, (uint64_t)" ", 1);
        *(_QWORD *)((char *)v14 + *(_QWORD *)(*v14 - 24) + 24) = v9;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"", 0);
        v15 = *(unsigned __int8 *)(a2 + 12);
        if (v15 != 2)
          break;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v84, (uint64_t)"SUBSTRING @ ", 12);
        if (*(_BYTE *)(a2 + 12) != 2
          || (v19 = (_QWORD *)std::ostream::operator<<(),
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n", 1),
              *(_BYTE *)(a2 + 12) != 2))
        {
          v69 = 116;
          v71 = "substring";
          v72 = "tag == SUBSTRING";
          v70 = "cord.cc";
          goto LABEL_136;
        }
        ++v9;
        a2 = *(_QWORD *)(a2 + 24);
      }
      if (v15 == 1)
        break;
      if (*(_BYTE *)(a2 + 12))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v84, (uint64_t)"FLAT cap=", 9);
        v20 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" [", 2);
        v23 = *(_QWORD *)a2;
        v22 = (const void *)(a2 + 13);
        v21 = v23;
        if (v23 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v21 >= 0x17)
        {
          v25 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v21 | 7) != 0x17)
            v25 = v21 | 7;
          v26 = v25 + 1;
          p_dst = (void ***)operator new(v25 + 1);
          v91 = v21;
          v92 = v26 | 0x8000000000000000;
          __dst = (void **)p_dst;
        }
        else
        {
          HIBYTE(v92) = v21;
          p_dst = &__dst;
          if (!v21)
            goto LABEL_30;
        }
        memmove(p_dst, v22, v21);
LABEL_30:
        *((_BYTE *)p_dst + v21) = 0;
        if (v92 >= 0)
          v27 = (std::string::value_type *)&__dst;
        else
          v27 = (std::string::value_type *)__dst;
        if (v92 >= 0)
          v28 = HIBYTE(v92);
        else
          v28 = v91;
        absl::lts_2020_02_25::CEscape(v27, v28, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        goto LABEL_58;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v84, (uint64_t)"CONCAT depth=", 13);
      v37 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"\n", 1);
      ++v9;
      v38 = v94;
      v39 = v94 & 1;
      if ((v94 & 1) != 0)
        v40 = (char *)v95;
      else
        v40 = (char *)&v95;
      if ((v94 & 1) != 0)
        v41 = v96;
      else
        v41 = 47;
      if (v94 >> 1 != v41)
      {
        *(_DWORD *)&v40[4 * (v94 >> 1)] = v9;
        goto LABEL_93;
      }
      if (((v41 >> 61) & 3) != 0)
        goto LABEL_151;
      v42 = operator new(8 * v41);
      v43 = v42;
      *((_DWORD *)v42 + v41) = v9;
      if (v38 >= 2)
      {
        v44 = 0;
        if (v41 < 8)
        {
          v45 = v40;
        }
        else
        {
          v45 = v40;
          if ((unint64_t)((char *)v42 - v40) >= 0x20)
          {
            v44 = v41 & 0xFFFFFFFFFFFFFFF8;
            v45 = &v40[4 * (v41 & 0xFFFFFFFFFFFFFFF8)];
            v46 = v42 + 1;
            v47 = (__int128 *)(v40 + 16);
            v48 = v41 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v49 = *v47;
              *(v46 - 1) = *(v47 - 1);
              *v46 = v49;
              v46 += 2;
              v47 += 2;
              v48 -= 8;
            }
            while (v48);
            if (v41 == v44)
              goto LABEL_88;
          }
        }
        v50 = v41 - v44;
        v51 = (_DWORD *)v42 + v44;
        do
        {
          v52 = *(_DWORD *)v45;
          v45 += 4;
          *v51++ = v52;
          --v50;
        }
        while (v50);
      }
LABEL_88:
      if (v40)
      {
        memset(v40, 171, 4 * v41);
        v38 = v94;
        v39 = v94 & 1;
      }
      if (v39)
      {
        operator delete(v95);
        v38 = v94;
      }
      v95 = v43;
      v96 = 2 * v41;
      v38 |= 1uLL;
LABEL_93:
      v94 = v38 + 2;
      if (*(_BYTE *)(a2 + 12))
        goto LABEL_117;
      v53 = v97;
      v54 = v97 & 1;
      if ((v97 & 1) != 0)
        v55 = (char *)v98;
      else
        v55 = (char *)&v98;
      if ((v97 & 1) != 0)
        v56 = v99;
      else
        v56 = 47;
      if (v97 >> 1 != v56)
      {
        *(_QWORD *)&v55[8 * (v97 >> 1)] = *(_QWORD *)(a2 + 24);
        v97 = v53 + 2;
        goto LABEL_3;
      }
      if (((v56 >> 60) & 7) != 0)
LABEL_151:
        std::__throw_bad_array_new_length[abi:ne180100]();
      v57 = operator new(16 * v56);
      v58 = v57;
      *((_QWORD *)v57 + v56) = *(_QWORD *)(a2 + 24);
      if (v53 >= 2)
      {
        v59 = 0;
        if (v56 < 4)
        {
          v60 = v55;
LABEL_110:
          v65 = v56 - v59;
          v66 = (_QWORD *)v57 + v59;
          do
          {
            v67 = *(_QWORD *)v60;
            v60 += 8;
            *v66++ = v67;
            --v65;
          }
          while (v65);
          goto LABEL_112;
        }
        v60 = v55;
        if ((unint64_t)((char *)v57 - v55) < 0x20)
          goto LABEL_110;
        v59 = v56 & 0xFFFFFFFFFFFFFFFCLL;
        v60 = &v55[8 * (v56 & 0xFFFFFFFFFFFFFFFCLL)];
        v61 = v57 + 1;
        v62 = (__int128 *)(v55 + 16);
        v63 = v56 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v64 = *v62;
          *(v61 - 1) = *(v62 - 1);
          *v61 = v64;
          v61 += 2;
          v62 += 2;
          v63 -= 4;
        }
        while (v63);
        if (v56 != v59)
          goto LABEL_110;
      }
LABEL_112:
      if (v55)
      {
        memset(v55, 171, 8 * v56);
        v53 = v97;
        v54 = v97 & 1;
      }
      if (v54)
      {
        operator delete(v98);
        v53 = v97;
      }
      v99 = 2 * v56;
      v98 = v58;
      v68 = *(unsigned __int8 *)(a2 + 12);
      v97 = (v53 | 1) + 2;
      if (v68)
      {
LABEL_117:
        v69 = 106;
        v70 = "cord.cc";
        v71 = "concat";
        v72 = "tag == CONCAT";
        goto LABEL_136;
      }
LABEL_3:
      a2 = *(_QWORD *)(a2 + 16);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v84, (uint64_t)"EXTERNAL [", 10);
    if (*(_BYTE *)(a2 + 12) != 1)
      __assert_rtn("external", "cord.cc", 126, "tag == EXTERNAL");
    v16 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 > 0x7FFFFFFFFFFFFFF7uLL)
      std::string::__throw_length_error[abi:ne180100]();
    v17 = *(const void **)(a2 + 16);
    if (v16 >= 0x17)
    {
      v31 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17)
        v31 = v16 | 7;
      v32 = v31 + 1;
      v18 = (void ***)operator new(v31 + 1);
      v91 = v16;
      v92 = v32 | 0x8000000000000000;
      __dst = (void **)v18;
    }
    else
    {
      HIBYTE(v92) = *(_QWORD *)a2;
      v18 = &__dst;
      if (!v16)
        goto LABEL_46;
    }
    memmove(v18, v17, v16);
LABEL_46:
    *((_BYTE *)v18 + v16) = 0;
    v33 = v92 >= 0 ? (std::string::value_type *)&__dst : (std::string::value_type *)__dst;
    v34 = v92 >= 0 ? HIBYTE(v92) : v91;
    absl::lts_2020_02_25::CEscape(v33, v34, &__p);
    p_p = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    size = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? HIBYTE(__p.__r_.__value_.__r.__words[2])
         : __p.__r_.__value_.__l.__size_;
LABEL_58:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v84, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v92) & 0x80000000) == 0)
        goto LABEL_60;
    }
    else if ((SHIBYTE(v92) & 0x80000000) == 0)
    {
      goto LABEL_60;
    }
    operator delete(__dst);
LABEL_60:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v84, (uint64_t)"]\n", 2);
    if (v97 < 2)
      break;
    v35 = v98;
    if ((v97 & 1) == 0)
      v35 = &v98;
    a2 = v35[(v97 >> 1) - 1];
    v97 -= 2;
    if (v94 < 2)
    {
      v69 = 373;
      v71 = "back";
      v70 = "inlined_vector.h";
      v72 = "!empty()";
LABEL_136:
      __assert_rtn(v71, v70, v69, v72);
    }
    v36 = v95;
    if ((v94 & 1) == 0)
      v36 = &v95;
    v9 = v36[(v94 >> 1) - 1];
    v94 -= 2;
  }
  v73 = v94;
  v74 = (uint64_t *)MEMORY[0x24BEDB800];
  v75 = MEMORY[0x24BEDB848];
  if (v94 >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Check indents.empty() failed: ");
    std::string::basic_string[abi:ne180100]<0>(&__dst, "");
    if (v92 >= 0)
      v79 = (const std::string::value_type *)&__dst;
    else
      v79 = (const std::string::value_type *)__dst;
    if (v92 >= 0)
      v80 = HIBYTE(v92);
    else
      v80 = v91;
    std::string::append(&__p, v79, v80);
    if (SHIBYTE(v92) < 0)
      operator delete(__dst);
    v81 = (void (*)(uint64_t, const char *, uint64_t, std::string *))atomic_load((unint64_t *)absl::lts_2020_02_25::raw_logging_internal::internal_log_function);
    v81(3, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/abseil-cpp-20200225.2/absl/strings/cord.cc", 1888, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v73 = v94;
    if ((v94 & 1) == 0)
      goto LABEL_121;
LABEL_120:
    __b = v95;
    if (v95)
      goto LABEL_121;
    v76 = 0;
LABEL_124:
    operator delete(v76);
  }
  else
  {
    if ((v94 & 1) != 0)
      goto LABEL_120;
LABEL_121:
    memset(__b, 171, (2 * v73) & 0xFFFFFFFFFFFFFFFCLL);
    if ((v94 & 1) != 0)
    {
      v76 = v95;
      goto LABEL_124;
    }
  }
  if ((v97 & 1) != 0 && (v83 = v98) == 0)
  {
    v77 = 0;
LABEL_130:
    operator delete(v77);
  }
  else
  {
    memset(v83, 171, (4 * v97) & 0xFFFFFFFFFFFFFFF8);
    if ((v97 & 1) != 0)
    {
      v77 = v98;
      goto LABEL_130;
    }
  }
  std::stringbuf::str();
  v84 = *v74;
  *(_QWORD *)((char *)&v85[-1] + *(_QWORD *)(v84 - 24)) = v74[3];
  v85[0] = v75 + 16;
  if (SBYTE7(v87) < 0)
    operator delete(v86[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x22E31DEF4](v89);
}

void sub_22D9CE78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__b, void *a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58)
{
  void *v59;

  if (a56 < 0)
    operator delete(__p);
  if ((a57 & 1) == 0 || (__b = a58) != 0)
  {
    memset(__b, 171, (2 * a57) & 0xFFFFFFFFFFFFFFFCLL);
    if ((a57 & 1) == 0)
    {
LABEL_9:
      if ((STACK[0x230] & 1) != 0)
      {
        a14 = (void *)STACK[0x238];
        if (!STACK[0x238])
        {
          operator delete(0);
          std::ostringstream::~ostringstream((uint64_t)&a15);
          _Unwind_Resume(a1);
        }
      }
      memset(a14, 171, (4 * STACK[0x230]) & 0xFFFFFFFFFFFFFFF8);
      if ((STACK[0x230] & 1) != 0)
        operator delete((void *)STACK[0x238]);
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
    v59 = a58;
  }
  else
  {
    v59 = 0;
  }
  operator delete(v59);
  goto LABEL_9;
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22E31DEF4](a1 + 112);
  return a1;
}

_QWORD *absl::lts_2020_02_25::InlinedVector<absl::lts_2020_02_25::cord_internal::CordRep *,47ul,std::allocator<absl::lts_2020_02_25::cord_internal::CordRep *>>::~InlinedVector(_QWORD *a1)
{
  uint64_t v2;
  void **v3;
  void *v4;

  v3 = (void **)(a1 + 1);
  v2 = *a1;
  v4 = a1 + 1;
  if ((v2 & 1) != 0)
  {
    v4 = *v3;
    if (!*v3)
      goto LABEL_5;
  }
  memset(v4, 171, (4 * v2) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = *v3;
LABEL_5:
    operator delete(v4);
  }
  return a1;
}

void absl::lts_2020_02_25::UnrefInternal(unsigned int *__p)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  void *p_pa;
  int v9;
  uint64_t v10;
  unsigned int *v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  _OWORD *v19;
  char *v20;
  unint64_t v21;
  char *v22;
  _OWORD *v23;
  __int128 *v24;
  unint64_t v25;
  __int128 v26;
  _QWORD *v27;
  unsigned int *v28;
  unsigned int *v29;
  int v30;
  unsigned int v31;
  BOOL v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  unsigned int *v36;
  int v37;
  unsigned int v38;
  void *v39;
  unint64_t v40;
  void *__pa;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v44 = v6;
  v45 = v5;
  v46 = v4;
  v47 = v3;
  v48 = v2;
  v49 = v1;
  v43 = *MEMORY[0x24BDAC8D0];
  if (!__p)
    absl::lts_2020_02_25::UnrefInternal();
  v7 = __p;
  v40 = 0;
  p_pa = &__pa;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v9 = *((unsigned __int8 *)v7 + 12);
        if (v9 == 2)
          break;
        if (v9 == 1)
        {
          (*((void (**)(unsigned __int8 *, _QWORD, _QWORD))v7 + 3))((unsigned __int8 *)v7 + 32, *((_QWORD *)v7 + 2), *(_QWORD *)v7);
LABEL_26:
          operator delete(v7);
          goto LABEL_27;
        }
        if (*((_BYTE *)v7 + 12))
          goto LABEL_26;
        v10 = *((_QWORD *)v7 + 3);
        v11 = (unsigned int *)(v10 + 8);
        v12 = atomic_load((unsigned int *)(v10 + 8));
        if (v12 <= 0)
          __assert_rtn("Decrement", "cord_internal.h", 49, "refcount > 0");
        if (v12 != 1)
        {
          do
          {
            v13 = __ldaxr(v11);
            v14 = v13 - 1;
          }
          while (__stlxr(v14, v11));
          if (v14)
            goto LABEL_45;
        }
        v15 = v40;
        v16 = v40 & 1;
        if ((v40 & 1) != 0)
          v17 = (char *)__pa;
        else
          v17 = (char *)&__pa;
        if ((v40 & 1) != 0)
          v18 = v42;
        else
          v18 = 47;
        if (v40 >> 1 == v18)
        {
          if (((v18 >> 60) & 7) != 0)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v19 = operator new(16 * v18);
          v20 = (char *)v19;
          *((_QWORD *)v19 + v18) = v10;
          if (v15 < 2)
            goto LABEL_39;
          v21 = 0;
          if (v18 < 4)
          {
            v22 = v17;
          }
          else
          {
            v22 = v17;
            if ((unint64_t)((char *)v19 - v17) >= 0x20)
            {
              v21 = v18 & 0xFFFFFFFFFFFFFFFCLL;
              v22 = &v17[8 * (v18 & 0xFFFFFFFFFFFFFFFCLL)];
              v23 = v19 + 1;
              v24 = (__int128 *)(v17 + 16);
              v25 = v18 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v26 = *v24;
                *(v23 - 1) = *(v24 - 1);
                *v23 = v26;
                v23 += 2;
                v24 += 2;
                v25 -= 4;
              }
              while (v25);
              if (v18 == v21)
                goto LABEL_39;
            }
          }
          v33 = v18 - v21;
          v34 = &v20[8 * v21];
          do
          {
            v35 = *(_QWORD *)v22;
            v22 += 8;
            *(_QWORD *)v34 = v35;
            v34 += 8;
            --v33;
          }
          while (v33);
LABEL_39:
          if (v17)
          {
            memset(v17, 171, 8 * v18);
            v15 = v40;
            v16 = v40 & 1;
          }
          if (v16)
          {
            operator delete(__pa);
            v15 = v40;
          }
          __pa = v20;
          v42 = 2 * v18;
          v15 |= 1uLL;
          goto LABEL_44;
        }
        *(_QWORD *)&v17[8 * (v40 >> 1)] = v10;
LABEL_44:
        v40 = v15 + 2;
LABEL_45:
        v28 = (unsigned int *)*((_QWORD *)v7 + 2);
        MEMORY[0x22E31DF78](v7, 0x1020C40F492414DLL);
        v36 = v28 + 2;
        v37 = atomic_load(v28 + 2);
        if (v37 <= 0)
          __assert_rtn("Decrement", "cord_internal.h", 49, "refcount > 0");
        v7 = v28;
        if (v37 != 1)
        {
          do
          {
            v38 = __ldaxr(v36);
            v32 = --v38 == 0;
          }
          while (__stlxr(v38, v36));
          goto LABEL_48;
        }
      }
      v28 = (unsigned int *)*((_QWORD *)v7 + 3);
      MEMORY[0x22E31DF78](v7, 0x1020C4086E87781);
      v29 = v28 + 2;
      v30 = atomic_load(v28 + 2);
      if (v30 <= 0)
        __assert_rtn("Decrement", "cord_internal.h", 49, "refcount > 0");
      v7 = v28;
      if (v30 != 1)
      {
        do
        {
          v31 = __ldaxr(v29);
          v32 = --v31 == 0;
        }
        while (__stlxr(v31, v29));
LABEL_48:
        v7 = v28;
        if (!v32)
          break;
      }
    }
LABEL_27:
    if (v40 < 2)
      break;
    v27 = __pa;
    if ((v40 & 1) == 0)
      v27 = &__pa;
    v7 = (unsigned int *)v27[(v40 >> 1) - 1];
    v40 -= 2;
  }
  if (v40 && (p_pa = __pa) == 0)
  {
    v39 = 0;
LABEL_55:
    operator delete(v39);
  }
  else
  {
    memset(p_pa, 171, (4 * v40) & 0x7FFFFFFFFFFFFFF8);
    if ((v40 & 1) != 0)
    {
      v39 = __pa;
      goto LABEL_55;
    }
  }
}

void sub_22D9CED6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  absl::lts_2020_02_25::InlinedVector<absl::lts_2020_02_25::cord_internal::CordRep *,47ul,std::allocator<absl::lts_2020_02_25::cord_internal::CordRep *>>::~InlinedVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22D9CED80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  absl::lts_2020_02_25::InlinedVector<absl::lts_2020_02_25::cord_internal::CordRep *,47ul,std::allocator<absl::lts_2020_02_25::cord_internal::CordRep *>>::~InlinedVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22D9CED98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  absl::lts_2020_02_25::InlinedVector<absl::lts_2020_02_25::cord_internal::CordRep *,47ul,std::allocator<absl::lts_2020_02_25::cord_internal::CordRep *>>::~InlinedVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22D9CEDAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  absl::lts_2020_02_25::InlinedVector<absl::lts_2020_02_25::cord_internal::CordRep *,47ul,std::allocator<absl::lts_2020_02_25::cord_internal::CordRep *>>::~InlinedVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22D9CEDC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  absl::lts_2020_02_25::InlinedVector<absl::lts_2020_02_25::cord_internal::CordRep *,47ul,std::allocator<absl::lts_2020_02_25::cord_internal::CordRep *>>::~InlinedVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_1(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 56, a4);
}

absl::lts_2020_02_25::synchronization_internal::GraphCycles *absl::lts_2020_02_25::synchronization_internal::GraphCycles::GraphCycles(absl::lts_2020_02_25::synchronization_internal::GraphCycles *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v14;

  v9 = _MergedGlobals_23;
  if ((_MergedGlobals_23 & 1) != 0)
  {
LABEL_14:
    absl::lts_2020_02_25::base_internal::SpinLock::SlowLock((absl::lts_2020_02_25::base_internal::SpinLock *)&_MergedGlobals_23, a2, a3, a4, a5, a6, a7, a8);
    if (qword_25407A2C0)
      goto LABEL_8;
  }
  else
  {
    v10 = _MergedGlobals_23 | 1;
    while (1)
    {
      v11 = __ldaxr((unsigned int *)&_MergedGlobals_23);
      if (v11 != v9)
        break;
      if (!__stxr(v10, (unsigned int *)&_MergedGlobals_23))
      {
        if ((v11 & 1) != 0)
          goto LABEL_14;
        goto LABEL_6;
      }
    }
    __clrex();
    if ((v11 & 1) != 0)
      goto LABEL_14;
LABEL_6:
    if (qword_25407A2C0)
      goto LABEL_8;
  }
  qword_25407A2C0 = absl::lts_2020_02_25::base_internal::LowLevelAlloc::NewArena(0, a2, a3, a4, a5, a6, a7, a8);
LABEL_8:
  v12 = _MergedGlobals_23 & 2;
  do
    v13 = __ldxr((unsigned int *)&_MergedGlobals_23);
  while (__stlxr(v12, (unsigned int *)&_MergedGlobals_23));
  if (v13 >= 8)
    absl::lts_2020_02_25::base_internal::SpinLock::SlowUnlock((absl::lts_2020_02_25::base_internal::SpinLock *)&_MergedGlobals_23, v13);
  v14 = (_QWORD *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(0x8128uLL, (absl::lts_2020_02_25::base_internal::SpinLock *)qword_25407A2C0, a3, a4, a5, a6, a7, a8);
  *v14 = v14 + 1;
  v14[9] = 0x800000000;
  v14[10] = v14 + 11;
  v14[15] = 0x800000000;
  v14[16] = v14;
  memset(v14 + 17, 255, 0x7FACuLL);
  v14[4103] = v14 + 4104;
  v14[4108] = 0x800000000;
  v14[4109] = v14 + 4110;
  v14[4114] = 0x800000000;
  v14[4115] = v14 + 4116;
  v14[4120] = 0x800000000;
  v14[4121] = v14 + 4122;
  v14[4126] = 0x800000000;
  v14[4127] = v14 + 4128;
  v14[4132] = 0x800000000;
  *(_QWORD *)this = v14;
  return this;
}

uint64_t absl::lts_2020_02_25::synchronization_internal::`anonymous namespace'::NodeSet::insert(absl::lts_2020_02_25::synchronization_internal::_anonymous_namespace_::NodeSet *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  absl::lts_2020_02_25::synchronization_internal::_anonymous_namespace_::NodeSet *v9;
  unsigned int v10;
  int v11;
  int v13;
  uint64_t v15;
  int v16;
  unsigned int v18;
  char *v19;
  unsigned int v20;
  unsigned int v21;
  absl::lts_2020_02_25::base_internal::LowLevelAlloc *v22;
  unsigned int v23;
  unsigned int i;
  absl::lts_2020_02_25::base_internal::LowLevelAlloc *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  absl::lts_2020_02_25::base_internal::LowLevelAlloc *v31;
  uint64_t v32;
  absl::lts_2020_02_25::base_internal::LowLevelAlloc *__src;
  _BYTE v34[32];
  unint64_t v35;

  v8 = *((_DWORD *)this + 10) - 1;
  v9 = *(absl::lts_2020_02_25::synchronization_internal::_anonymous_namespace_::NodeSet **)this;
  v10 = v8 & (41 * a2);
  v11 = *(_DWORD *)(*(_QWORD *)this + 4 * v10);
  if (v11 == (_DWORD)a2)
    return 0;
  v13 = -1;
  while (v11 != -1)
  {
    if (v13 < 0 && v11 == -2)
      v13 = v10;
    v10 = (v10 + 1) & v8;
    v11 = *((_DWORD *)v9 + v10);
    if (v11 == (_DWORD)a2)
      return 0;
  }
  v15 = v13 >= 0 ? v13 : v10;
  v16 = *((_DWORD *)v9 + v15);
  if (v16 == (_DWORD)a2)
    return 0;
  if (v16 != -1)
  {
    *((_DWORD *)v9 + v15) = a2;
    v18 = *((_DWORD *)this + 10);
    if (*((_DWORD *)this + 12) < v18 - (v18 >> 2))
      return 1;
LABEL_20:
    __src = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)v34;
    v35 = 0x800000000;
    v19 = (char *)this + 8;
    if (v9 == (absl::lts_2020_02_25::synchronization_internal::_anonymous_namespace_::NodeSet *)((char *)this + 8))
    {
      v22 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)v34;
      v23 = v18;
      if (v18 >= 9)
      {
        for (i = 8; i < v18; i *= 2)
          ;
        HIDWORD(v35) = i;
        v25 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(4 * i, (absl::lts_2020_02_25::base_internal::SpinLock *)qword_25407A2C0, a3, a4, a5, a6, a7, a8);
        v22 = v25;
        if ((_DWORD)v35)
          memmove(v25, v34, 4 * v35);
        __src = v22;
        v23 = *((_DWORD *)this + 10);
      }
      LODWORD(v35) = v18;
      if (v23)
      {
        memmove(v22, *(const void **)this, 4 * v23);
        v18 = v35;
      }
      *((_DWORD *)this + 10) = 0;
      v20 = *((_DWORD *)this + 11);
      *((_DWORD *)this + 12) = 0;
      v21 = 2 * v18;
      if (v20 >= v21)
      {
LABEL_38:
        *((_DWORD *)this + 10) = v21;
        if (!v21)
        {
LABEL_41:
          v31 = __src;
          if ((_DWORD)v35)
          {
            v32 = 4 * v35;
            do
            {
              a2 = *(unsigned int *)v31;
              if ((a2 & 0x80000000) == 0)
              v31 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)((char *)v31 + 4);
              v32 -= 4;
            }
            while (v32);
            v31 = __src;
          }
          if (v31 != (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)v34)
            absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(v31, a2, a3, a4, a5, a6, a7, a8);
          return 1;
        }
LABEL_39:
        v29 = 0;
        v30 = *(_QWORD *)this;
        do
          *(_DWORD *)(v30 + 4 * v29++) = -1;
        while (v29 < *((unsigned int *)this + 10));
        goto LABEL_41;
      }
    }
    else
    {
      __src = v9;
      v35 = __PAIR64__(*((_DWORD *)this + 11), v18);
      *(_QWORD *)this = v19;
      *((_QWORD *)this + 5) = 0x800000000;
      v20 = 8;
      *((_DWORD *)this + 12) = 0;
      v21 = 2 * v18;
      if (v21 <= 8)
        goto LABEL_38;
    }
    do
      v20 *= 2;
    while (v20 < v21);
    *((_DWORD *)this + 11) = v20;
    v26 = (void *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(4 * v20, (absl::lts_2020_02_25::base_internal::SpinLock *)qword_25407A2C0, a3, a4, a5, a6, a7, a8);
    v27 = v26;
    v28 = *((unsigned int *)this + 10);
    if ((_DWORD)v28)
      memmove(v26, *(const void **)this, 4 * v28);
    if (*(char **)this != v19)
      absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(*(absl::lts_2020_02_25::base_internal::LowLevelAlloc **)this, a2, a3, a4, a5, a6, a7, a8);
    *(_QWORD *)this = v27;
    *((_DWORD *)this + 10) = v21;
    goto LABEL_39;
  }
  ++*((_DWORD *)this + 12);
  *((_DWORD *)v9 + v15) = a2;
  v18 = *((_DWORD *)this + 10);
  if (*((_DWORD *)this + 12) >= v18 - (v18 >> 2))
    goto LABEL_20;
  return 1;
}

void sub_22D9CF204(_Unwind_Exception *exception_object, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, absl::lts_2020_02_25::base_internal::LowLevelAlloc *a9)
{
  absl::lts_2020_02_25::base_internal::LowLevelAlloc *v9;

  if (a9 != v9)
    absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(a9, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(exception_object);
}

void absl::lts_2020_02_25::synchronization_internal::`anonymous namespace'::NodeSet::~NodeSet(absl::lts_2020_02_25::base_internal::LowLevelAlloc **this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  absl::lts_2020_02_25::base_internal::LowLevelAlloc *v8;
  absl::lts_2020_02_25::base_internal::LowLevelAlloc *v9;

  v9 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)(this + 1);
  v8 = *this;
  if (v8 != v9)
    absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(v8, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t absl::lts_2020_02_25::synchronization_internal::GraphCycles::GetId(absl::lts_2020_02_25::synchronization_internal::GraphCycles *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;

  v9 = *(_QWORD *)this;
  v10 = a2 ^ 0xF03A5F7BF03A5F7BLL;
  v11 = *(_QWORD *)this + 136;
  v12 = a2 % 0x1FEB;
  v13 = *(unsigned int *)(v11 + 4 * (a2 % 0x1FEB));
  if ((_DWORD)v13 == -1)
  {
LABEL_4:
    v15 = *(_DWORD *)(v9 + 120);
    if (v15)
    {
      v16 = v15 - 1;
      v17 = *(unsigned int *)(*(_QWORD *)(v9 + 80) + 4 * v16);
      *(_DWORD *)(v9 + 120) = v16;
      v18 = *(_QWORD *)(*(_QWORD *)v9 + 8 * v17);
      *(_QWORD *)(v18 + 136) = 0;
      v19 = *(_QWORD *)(**(_QWORD **)(v9 + 128) + 8 * v17);
      v20 = *(_DWORD *)(v11 + 4 * v12);
      *(_QWORD *)(v18 + 16) = v10;
      *(_DWORD *)(v19 + 8) = v20;
      *(_DWORD *)(v11 + 4 * v12) = v17;
      return v17 | ((unint64_t)*(unsigned int *)(v18 + 4) << 32);
    }
    v22 = absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(0x1D0uLL, (absl::lts_2020_02_25::base_internal::SpinLock *)qword_25407A2C0, a3, a4, a5, a6, a7, a8);
    v29 = v22;
    v30 = 0;
    *(_QWORD *)(v22 + 24) = v22 + 32;
    *(_QWORD *)(v22 + 64) = 0x800000008;
    do
      *(_DWORD *)(v22 + 4 * v30++ + 32) = -1;
    while (v30 < *(unsigned int *)(v22 + 64));
    v31 = 0;
    *(_DWORD *)(v22 + 72) = 0;
    *(_QWORD *)(v22 + 80) = v22 + 88;
    *(_QWORD *)(v22 + 120) = 0x800000008;
    do
      *(_DWORD *)(v22 + 4 * v31++ + 88) = -1;
    while (v31 < *(unsigned int *)(v22 + 120));
    *(_DWORD *)(v22 + 128) = 0;
    *(_BYTE *)(v22 + 12) = 0;
    v32 = *(_QWORD *)this;
    v33 = *(_DWORD *)(*(_QWORD *)this + 72);
    *(_DWORD *)v22 = v33;
    *(_DWORD *)(v22 + 4) = 1;
    *(_QWORD *)(v22 + 16) = v10;
    *(_QWORD *)(v22 + 136) = 0;
    if (v33 != *(_DWORD *)(v32 + 76))
    {
      v42 = *(_QWORD **)v32;
      v44 = v33;
LABEL_22:
      v42[v44] = v29;
      *(_DWORD *)(v32 + 72) = v44 + 1;
      v45 = *(_QWORD *)this + 128 + 4 * v12;
      *(_DWORD *)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)this + 128) + 8 * v33) + 8) = *(_DWORD *)(v45 + 8);
      *(_DWORD *)(v45 + 8) = v33;
      return *(_QWORD *)v29;
    }
    v34 = v33 + 1;
    if (v33 == -1)
    {
      v42 = (_QWORD *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(0x7FFFFFFF8uLL, (absl::lts_2020_02_25::base_internal::SpinLock *)qword_25407A2C0, v23, v24, v25, v26, v27, v28);
      v43 = *(unsigned int *)(v32 + 72);
      if (!(_DWORD)v43)
        goto LABEL_17;
    }
    else
    {
      do
        v33 *= 2;
      while (v33 < v34);
      *(_DWORD *)(v32 + 76) = v33;
      v42 = (_QWORD *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(8 * v33, (absl::lts_2020_02_25::base_internal::SpinLock *)qword_25407A2C0, v23, v24, v25, v26, v27, v28);
      v43 = *(unsigned int *)(v32 + 72);
      if (!(_DWORD)v43)
        goto LABEL_17;
    }
    memmove(v42, *(const void **)v32, 8 * v43);
LABEL_17:
    if (*(_QWORD *)v32 != v32 + 8)
      absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(*(absl::lts_2020_02_25::base_internal::LowLevelAlloc **)v32, v35, v36, v37, v38, v39, v40, v41);
    *(_QWORD *)v32 = v42;
    v44 = *(_DWORD *)(v32 + 72);
    v33 = *(_DWORD *)v29;
    goto LABEL_22;
  }
  while (1)
  {
    v14 = *(_QWORD *)(**(_QWORD **)(v9 + 128) + 8 * v13);
    if (*(_QWORD *)(v14 + 16) == v10)
      return v13 | ((unint64_t)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)v9 + 8 * v13) + 4) << 32);
    v13 = *(unsigned int *)(v14 + 8);
    if ((_DWORD)v13 == -1)
      goto LABEL_4;
  }
}

void absl::lts_2020_02_25::synchronization_internal::GraphCycles::RemoveNode(uint64_t **this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  unint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v30;
  absl::lts_2020_02_25::base_internal::LowLevelAlloc *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v41;
  unint64_t v42;
  absl::lts_2020_02_25::base_internal::LowLevelAlloc *v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  uint64_t *v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  uint64_t v58;
  absl::lts_2020_02_25::base_internal::LowLevelAlloc *v59;

  v8 = *this;
  v9 = (unint64_t)*this + 4 * (a2 % 0x1FEBuLL);
  v12 = *(_DWORD *)(v9 + 136);
  v10 = (_DWORD *)(v9 + 136);
  v11 = v12;
  if (v12 == -1)
    return;
  v14 = *(_QWORD *)v8[16];
  v15 = *(_QWORD *)(v14 + 8 * v11);
  if (*(_QWORD *)(v15 + 16) == (a2 ^ 0xF03A5F7BF03A5F7BLL))
  {
LABEL_6:
    LODWORD(v17) = 0;
    *v10 = *(_DWORD *)(v15 + 8);
    *(_DWORD *)(v15 + 8) = -1;
    v18 = *v8;
    v19 = *(_QWORD *)(v18 + 8 * v11);
    v20 = 41 * v11;
LABEL_7:
    LODWORD(v21) = *(_DWORD *)(v19 + 120);
    if (v17 <= v21)
      v21 = v21;
    else
      v21 = v17;
    v17 = v17;
    while (v21 != v17)
    {
      v22 = *(unsigned int *)(*(_QWORD *)(v19 + 80) + 4 * v17++);
      if ((v22 & 0x80000000) == 0)
      {
        v23 = *(_QWORD *)(v18 + 8 * v22);
        v24 = *(_QWORD *)(v23 + 24);
        v25 = *(_DWORD *)(v23 + 64) - 1;
        v26 = v25 & v20;
        v27 = *(_DWORD *)(v24 + 4 * v26);
        if (v27 == (_DWORD)v11)
          goto LABEL_27;
        v28 = -1;
        while (v27 != -1)
        {
          if (v28 < 0 && v27 == -2)
            v28 = v26;
          v26 = ((_DWORD)v26 + 1) & v25;
          v27 = *(_DWORD *)(v24 + 4 * v26);
          if (v27 == (_DWORD)v11)
            goto LABEL_27;
        }
        v26 = v28 >= 0 ? v28 : v26;
        if (*(_DWORD *)(v24 + 4 * v26) == (_DWORD)v11)
LABEL_27:
          *(_DWORD *)(v24 + 4 * v26) = -2;
        goto LABEL_7;
      }
    }
    LODWORD(v30) = 0;
    v31 = *(absl::lts_2020_02_25::base_internal::LowLevelAlloc **)(v19 + 24);
LABEL_29:
    LODWORD(v32) = *(_DWORD *)(v19 + 64);
    if (v30 <= v32)
      v32 = v32;
    else
      v32 = v30;
    v30 = v30;
    while (v32 != v30)
    {
      v33 = *((unsigned int *)v31 + v30++);
      if ((v33 & 0x80000000) == 0)
      {
        v34 = *(_QWORD *)(v18 + 8 * v33);
        v35 = *(_QWORD *)(v34 + 80);
        v36 = *(_DWORD *)(v34 + 120) - 1;
        v37 = v36 & v20;
        v38 = *(_DWORD *)(v35 + 4 * v37);
        if (v38 == (_DWORD)v11)
          goto LABEL_49;
        v39 = -1;
        while (v38 != -1)
        {
          if (v39 < 0 && v38 == -2)
            v39 = v37;
          v37 = ((_DWORD)v37 + 1) & v36;
          v38 = *(_DWORD *)(v35 + 4 * v37);
          if (v38 == (_DWORD)v11)
            goto LABEL_49;
        }
        v37 = v39 >= 0 ? v39 : v37;
        if (*(_DWORD *)(v35 + 4 * v37) == (_DWORD)v11)
LABEL_49:
          *(_DWORD *)(v35 + 4 * v37) = -2;
        goto LABEL_29;
      }
    }
    v41 = v19 + 32;
    if (v31 != (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)(v19 + 32))
      absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(v31, a2, a3, a4, a5, a6, a7, a8);
    v42 = 0;
    *(_QWORD *)(v19 + 24) = v41;
    *(_QWORD *)(v19 + 64) = 0x800000008;
    do
      *(_DWORD *)(v41 + 4 * v42++) = -1;
    while (v42 < *(unsigned int *)(v19 + 64));
    *(_DWORD *)(v19 + 72) = 0;
    v43 = *(absl::lts_2020_02_25::base_internal::LowLevelAlloc **)(v19 + 80);
    v44 = v19 + 88;
    if (v43 != (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)(v19 + 88))
      absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(v43, a2, a3, a4, a5, a6, a7, a8);
    v45 = 0;
    *(_QWORD *)(v19 + 80) = v44;
    *(_QWORD *)(v19 + 120) = 0x800000008;
    do
      *(_DWORD *)(v44 + 4 * v45++) = -1;
    while (v45 < *(unsigned int *)(v19 + 120));
    *(_DWORD *)(v19 + 128) = 0;
    *(_QWORD *)(v19 + 16) = 0xF03A5F7BF03A5F7BLL;
    v46 = *(_DWORD *)(v19 + 4);
    if (v46 == -1)
      return;
    *(_DWORD *)(v19 + 4) = v46 + 1;
    v47 = *this;
    v48 = *((_DWORD *)*this + 30);
    if (v48 != *((_DWORD *)*this + 31))
    {
      v57 = (_DWORD *)v47[10];
LABEL_70:
      v57[v48] = v11;
      ++*((_DWORD *)v47 + 30);
      return;
    }
    v49 = v48 + 1;
    if (v48 == -1)
    {
      v57 = (_DWORD *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(0x3FFFFFFFCuLL, (absl::lts_2020_02_25::base_internal::SpinLock *)qword_25407A2C0, a3, a4, a5, a6, a7, a8);
      v58 = *((unsigned int *)v47 + 30);
      if (!(_DWORD)v58)
        goto LABEL_66;
    }
    else
    {
      do
        v48 *= 2;
      while (v48 < v49);
      *((_DWORD *)v47 + 31) = v48;
      v57 = (_DWORD *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(4 * v48, (absl::lts_2020_02_25::base_internal::SpinLock *)qword_25407A2C0, a3, a4, a5, a6, a7, a8);
      v58 = *((unsigned int *)v47 + 30);
      if (!(_DWORD)v58)
        goto LABEL_66;
    }
    memmove(v57, (const void *)v47[10], 4 * v58);
LABEL_66:
    v59 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)v47[10];
    if (v59 != (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)(v47 + 11))
      absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(v59, v50, v51, v52, v53, v54, v55, v56);
    v47[10] = (uint64_t)v57;
    v48 = *((_DWORD *)v47 + 30);
    goto LABEL_70;
  }
  while (1)
  {
    v11 = *(unsigned int *)(v15 + 8);
    if ((_DWORD)v11 == -1)
      break;
    v16 = v15;
    v15 = *(_QWORD *)(v14 + 8 * v11);
    if (*(_QWORD *)(v15 + 16) == (a2 ^ 0xF03A5F7BF03A5F7BLL))
    {
      v10 = (_DWORD *)(v16 + 8);
      goto LABEL_6;
    }
  }
}

unint64_t absl::lts_2020_02_25::synchronization_internal::GraphCycles::Ptr(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;

  v2 = *(_QWORD *)(**a1 + 8 * a2);
  if (v2)
    v3 = *(_DWORD *)(v2 + 4) == HIDWORD(a2);
  else
    v3 = 0;
  if (v3)
    return *(_QWORD *)(v2 + 16) ^ 0xF03A5F7BF03A5F7BLL;
  else
    return 0;
}

uint64_t absl::lts_2020_02_25::synchronization_internal::GraphCycles::InsertEdge(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t *v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const void **v29;
  absl::lts_2020_02_25::base_internal::LowLevelAlloc *v30;
  absl::lts_2020_02_25::base_internal::LowLevelAlloc **v31;
  absl::lts_2020_02_25::base_internal::LowLevelAlloc **v32;
  absl::lts_2020_02_25::base_internal::LowLevelAlloc *v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v48;
  unsigned int v49;
  void *v50;
  uint64_t v51;
  absl::lts_2020_02_25::base_internal::LowLevelAlloc *v52;
  int v53;
  absl::lts_2020_02_25::base_internal::LowLevelAlloc *v54;
  absl::lts_2020_02_25::base_internal::LowLevelAlloc *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  absl::lts_2020_02_25::base_internal::LowLevelAlloc *v62;
  uint64_t v63;
  absl::lts_2020_02_25::base_internal::LowLevelAlloc **v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  unint64_t v70;
  _DWORD *v71;
  uint64_t v72;
  _DWORD *v73;
  uint64_t v74;
  absl::lts_2020_02_25::base_internal::LowLevelAlloc *v75;
  absl::lts_2020_02_25::base_internal::LowLevelAlloc *v76;
  unint64_t v77;
  unsigned int *v78;
  unint64_t v79;
  uint64_t v80;
  const void *v81;
  unint64_t v82;
  unsigned int *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  absl::lts_2020_02_25::base_internal::LowLevelAlloc *v93;
  uint64_t v94;
  absl::lts_2020_02_25::base_internal::LowLevelAlloc *v95;
  uint64_t v96;
  _DWORD *v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _DWORD *v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  unsigned int v114;
  unsigned int v115;
  _DWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _DWORD *v124;
  uint64_t v125;
  unsigned int v126;
  int *v127;
  uint64_t v128;
  int *v129;
  uint64_t v130;
  int v131;
  _BOOL4 v132;
  size_t v133;
  void *v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  int v138;
  int v139;
  uint64_t v140;
  int *v141;
  absl::lts_2020_02_25::base_internal::LowLevelAlloc *v142;
  uint64_t v143;
  int v144;
  int v145;
  unsigned int v146;
  uint64_t result;
  int v148;
  uint64_t v150;
  int v151;
  uint64_t v152;
  int v153;
  int v154;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  unsigned int *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  unsigned int v166;
  const void **v167;
  int v168;
  absl::lts_2020_02_25::base_internal::LowLevelAlloc *v169;
  _QWORD *v170;
  int v171;
  int **v172;
  uint64_t *v173;

  v8 = a3;
  v10 = *a1;
  v11 = **a1;
  if (*(_DWORD *)(*(_QWORD *)(v11 + 8 * a2) + 4) == HIDWORD(a2))
    v12 = *(_DWORD **)(v11 + 8 * a2);
  else
    v12 = 0;
  v13 = *(_DWORD **)(v11 + 8 * a3);
  if (v13[1] == HIDWORD(a3))
    v14 = v13;
  else
    v14 = 0;
  if (v12)
    v15 = v14 == 0;
  else
    v15 = 1;
  if (v15)
    return 1;
  if (v12 == v14)
    return 0;
  if (*v12 <= *v14)
    return 1;
  v171 = *v12;
  v168 = a2;
  v29 = (const void **)(v10 + 4103);
  v30 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)v10[4103];
  v170 = v10 + 4104;
  if (v30 != (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)(v10 + 4104))
    absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(v30, v22, v23, v24, v25, v26, v27, v28);
  v167 = (const void **)(v10 + 4121);
  v31 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc **)(v10 + 4115);
  v32 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc **)(v10 + 4109);
  *v29 = v170;
  v10[4108] = 0x800000000;
  v33 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)v10[4127];
  v169 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)(v10 + 4128);
  if (v33 != (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)(v10 + 4128))
    absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(v33, v22, v23, v24, v25, v26, v27, v28);
  v10[4127] = (uint64_t)v169;
  *((_DWORD *)v10 + 8256) = v8;
  v10[4132] = 0x800000001;
  v34 = 1;
  v172 = (int **)(v10 + 4109);
  v35 = v171;
  do
  {
    v36 = *(unsigned int *)(v10[4127] + 4 * --v34);
    *((_DWORD *)v10 + 8264) = v34;
    v37 = *(_QWORD *)(*v10 + 8 * v36);
    if (*(_BYTE *)(v37 + 12))
      continue;
    *(_BYTE *)(v37 + 12) = 1;
    v38 = *((_DWORD *)v10 + 8216);
    if (v38 != *((_DWORD *)v10 + 8217))
    {
      v40 = (void *)*v29;
      goto LABEL_33;
    }
    v39 = v38 + 1;
    if (v38 == -1)
    {
      v40 = (void *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(0x3FFFFFFFCuLL, (absl::lts_2020_02_25::base_internal::SpinLock *)qword_25407A2C0, v23, v24, v25, v26, v27, v28);
      v41 = *((unsigned int *)v10 + 8216);
      if (!(_DWORD)v41)
        goto LABEL_29;
    }
    else
    {
      do
        v38 *= 2;
      while (v38 < v39);
      *((_DWORD *)v10 + 8217) = v38;
      v40 = (void *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(4 * v38, (absl::lts_2020_02_25::base_internal::SpinLock *)qword_25407A2C0, v23, v24, v25, v26, v27, v28);
      v41 = *((unsigned int *)v10 + 8216);
      if (!(_DWORD)v41)
        goto LABEL_29;
    }
    memmove(v40, *v29, 4 * v41);
LABEL_29:
    if (*v29 != v170)
      absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free((absl::lts_2020_02_25::base_internal::LowLevelAlloc *)*v29, v22, v23, v24, v25, v26, v27, v28);
    *v29 = v40;
    v38 = *((_DWORD *)v10 + 8216);
    v35 = v171;
LABEL_33:
    LODWORD(v42) = 0;
    *((_DWORD *)v40 + v38) = v36;
    ++*((_DWORD *)v10 + 8216);
LABEL_34:
    LODWORD(v43) = *(_DWORD *)(v37 + 120);
    if (v42 <= v43)
      v43 = v43;
    else
      v43 = v42;
    v42 = v42;
    while (v43 != v42)
    {
      v44 = *(unsigned int *)(*(_QWORD *)(v37 + 80) + 4 * v42++);
      if ((v44 & 0x80000000) == 0)
      {
        v45 = *v10;
        v46 = *(_QWORD *)(*v10 + 8 * v44);
        if (*(_DWORD *)v46 == v35)
        {
          v135 = *((_QWORD *)v12 + 10);
          v136 = v12[30] - 1;
          v137 = v136 & (41 * v8);
          v138 = *(_DWORD *)(v135 + 4 * v137);
          if (v138 == v8)
          {
            v139 = v168;
            goto LABEL_171;
          }
          v148 = -1;
          v139 = v168;
          while (v138 != -1)
          {
            if (v148 < 0 && v138 == -2)
              v148 = v137;
            v137 = ((_DWORD)v137 + 1) & v136;
            v138 = *(_DWORD *)(v135 + 4 * v137);
            if (v138 == v8)
              goto LABEL_171;
          }
          if (v148 >= 0)
            v137 = v148;
          else
            v137 = v137;
          if (*(_DWORD *)(v135 + 4 * v137) == v8)
LABEL_171:
            *(_DWORD *)(v135 + 4 * v137) = -2;
          v150 = *((_QWORD *)v14 + 3);
          v151 = v14[16] - 1;
          v152 = v151 & (41 * v139);
          v153 = *(_DWORD *)(v150 + 4 * v152);
          if (v153 == v139)
            goto LABEL_186;
          v154 = -1;
          while (v153 != -1)
          {
            if (v154 < 0 && v153 == -2)
              v154 = v152;
            v152 = ((_DWORD)v152 + 1) & v151;
            v153 = *(_DWORD *)(v150 + 4 * v152);
            if (v153 == v139)
              goto LABEL_186;
          }
          v152 = v154 >= 0 ? v154 : v152;
          if (*(_DWORD *)(v150 + 4 * v152) == v139)
LABEL_186:
            *(_DWORD *)(v150 + 4 * v152) = -2;
          v156 = *((unsigned int *)v10 + 8216);
          if ((_DWORD)v156)
          {
            v157 = (char *)*v29;
            v158 = (v156 - 1) & 0x3FFFFFFFFFFFFFFFLL;
            if (v158)
            {
              v159 = v158 + 1;
              v160 = (v158 + 1) & 0x7FFFFFFFFFFFFFFELL;
              v161 = &v157[4 * v160];
              v162 = (unsigned int *)(v157 + 4);
              v163 = v160;
              do
              {
                v164 = *(_QWORD *)(v45 + 8 * *v162);
                *(_BYTE *)(*(_QWORD *)(v45 + 8 * *(v162 - 1)) + 12) = 0;
                *(_BYTE *)(v164 + 12) = 0;
                v162 += 2;
                v163 -= 2;
              }
              while (v163);
              if (v159 == v160)
                return 0;
            }
            else
            {
              v161 = (char *)*v29;
            }
            v165 = &v157[4 * v156];
            do
            {
              result = 0;
              v166 = *(_DWORD *)v161;
              v161 += 4;
              *(_BYTE *)(*(_QWORD *)(v45 + 8 * v166) + 12) = 0;
            }
            while (v161 != v165);
            return result;
          }
          return 0;
        }
        if (*(_DWORD *)v46 >= v35 || *(_BYTE *)(v46 + 12) != 0)
          goto LABEL_34;
        v48 = *((_DWORD *)v10 + 8264);
        if (v48 == *((_DWORD *)v10 + 8265))
        {
          v49 = v48 + 1;
          if (v48 == -1)
          {
            v50 = (void *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(0x3FFFFFFFCuLL, (absl::lts_2020_02_25::base_internal::SpinLock *)qword_25407A2C0, v23, v24, v25, v26, v27, v28);
            v51 = *((unsigned int *)v10 + 8264);
            if (!(_DWORD)v51)
              goto LABEL_53;
LABEL_52:
            memmove(v50, (const void *)v10[4127], 4 * v51);
            goto LABEL_53;
          }
          do
            v48 *= 2;
          while (v48 < v49);
          *((_DWORD *)v10 + 8265) = v48;
          v50 = (void *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(4 * v48, (absl::lts_2020_02_25::base_internal::SpinLock *)qword_25407A2C0, v23, v24, v25, v26, v27, v28);
          v51 = *((unsigned int *)v10 + 8264);
          if ((_DWORD)v51)
            goto LABEL_52;
LABEL_53:
          v52 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)v10[4127];
          if (v52 != v169)
            absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(v52, v22, v23, v24, v25, v26, v27, v28);
          v10[4127] = (uint64_t)v50;
          v48 = *((_DWORD *)v10 + 8264);
          v35 = v171;
        }
        else
        {
          v50 = (void *)v10[4127];
        }
        *((_DWORD *)v50 + v48) = v44;
        ++*((_DWORD *)v10 + 8264);
        goto LABEL_34;
      }
    }
    v34 = *((_DWORD *)v10 + 8264);
    v32 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc **)(v10 + 4109);
  }
  while (v34);
  v53 = *v14;
  v54 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)(v10 + 4110);
  if (*v32 != (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)(v10 + 4110))
    absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(*v32, v22, v23, v24, v25, v26, v27, v28);
  *v32 = v54;
  v32[5] = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)0x800000000;
  v55 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)v10[4127];
  if (v55 != v169)
    absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(v55, v22, v23, v24, v25, v26, v27, v28);
  v10[4127] = (uint64_t)v169;
  *((_DWORD *)v10 + 8256) = v168;
  v56 = 1;
  v10[4132] = 0x800000001;
  while (2)
  {
    v57 = *(unsigned int *)(v10[4127] + 4 * --v56);
    *((_DWORD *)v10 + 8264) = v56;
    v58 = *(_QWORD *)(*v10 + 8 * v57);
    if (!*(_BYTE *)(v58 + 12))
    {
      *(_BYTE *)(v58 + 12) = 1;
      v59 = *((_DWORD *)v32 + 10);
      if (v59 == *((_DWORD *)v32 + 11))
      {
        v60 = v59 + 1;
        if (v59 == -1)
        {
          v62 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(0x3FFFFFFFCuLL, (absl::lts_2020_02_25::base_internal::SpinLock *)qword_25407A2C0, v23, v24, v25, v26, v27, v28);
          v63 = *((unsigned int *)v32 + 10);
          if (!(_DWORD)v63)
            goto LABEL_73;
LABEL_72:
          memmove(v62, *v32, 4 * v63);
          goto LABEL_73;
        }
        do
          v59 *= 2;
        while (v59 < v60);
        *((_DWORD *)v32 + 11) = v59;
        v62 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(4 * v59, (absl::lts_2020_02_25::base_internal::SpinLock *)qword_25407A2C0, v23, v24, v25, v26, v27, v28);
        v63 = *((unsigned int *)v32 + 10);
        if ((_DWORD)v63)
          goto LABEL_72;
LABEL_73:
        if (*v32 != v54)
          absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(*v32, v61, v23, v24, v25, v26, v27, v28);
        *v32 = v62;
        v59 = *((_DWORD *)v32 + 10);
      }
      else
      {
        v62 = *v32;
      }
      v64 = v32;
      LODWORD(v32) = 0;
      *((_DWORD *)v62 + v59) = v57;
      ++*((_DWORD *)v64 + 10);
LABEL_78:
      LODWORD(v65) = *(_DWORD *)(v58 + 64);
      if (v32 <= v65)
        v65 = v65;
      else
        v65 = v32;
      v32 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc **)v32;
      while ((absl::lts_2020_02_25::base_internal::LowLevelAlloc **)v65 != v32)
      {
        v66 = *(unsigned int *)(*(_QWORD *)(v58 + 24) + 4 * (_QWORD)v32);
        v32 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc **)((char *)v32 + 1);
        if ((v66 & 0x80000000) == 0)
        {
          v67 = *(_QWORD *)(*v10 + 8 * v66);
          if (!*(_BYTE *)(v67 + 12) && *(_DWORD *)v67 > v53)
          {
            v68 = *((_DWORD *)v10 + 8264);
            if (v68 == *((_DWORD *)v10 + 8265))
            {
              v69 = v68 + 1;
              if (v68 == -1)
              {
                v70 = 0x3FFFFFFFCLL;
              }
              else
              {
                do
                  v68 *= 2;
                while (v68 < v69);
                *((_DWORD *)v10 + 8265) = v68;
                v70 = 4 * v68;
              }
              v71 = (_DWORD *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(v70, (absl::lts_2020_02_25::base_internal::SpinLock *)qword_25407A2C0, v23, v24, v25, v26, v27, v28);
              v73 = v71;
              v74 = *((unsigned int *)v10 + 8264);
              if ((_DWORD)v74)
                memmove(v71, (const void *)v10[4127], 4 * v74);
              v75 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)v10[4127];
              if (v75 != v169)
                absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(v75, v72, v23, v24, v25, v26, v27, v28);
              v10[4127] = (uint64_t)v73;
              v68 = *((_DWORD *)v10 + 8264);
            }
            else
            {
              v73 = (_DWORD *)v10[4127];
            }
            v73[v68] = v66;
            ++*((_DWORD *)v10 + 8264);
          }
          goto LABEL_78;
        }
      }
      v56 = *((_DWORD *)v10 + 8264);
      v32 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc **)(v10 + 4109);
    }
    if (v56)
      continue;
    break;
  }
  v76 = *v32;
  v77 = *((unsigned int *)v32 + 10);
  v78 = (unsigned int *)((char *)*v32 + 4 * v77);
  v173 = v10;
  v79 = 126 - 2 * __clz(v77);
  if ((_DWORD)v77)
    v80 = v79;
  else
    v80 = 0;
  v81 = *v29;
  v82 = *((unsigned int *)v10 + 8216);
  v83 = (unsigned int *)((char *)*v29 + 4 * v82);
  v173 = v10;
  v84 = 126 - 2 * __clz(v82);
  if ((_DWORD)v82)
    v85 = v84;
  else
    v85 = 0;
  v93 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)(v10 + 4116);
  if (*v31 != (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)(v10 + 4116))
    absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(*v31, v86, v87, v88, v89, v90, v91, v92);
  *v31 = v93;
  v10[4120] = 0x800000000;
  v94 = *((unsigned int *)v32 + 10);
  if ((_DWORD)v94)
  {
    v95 = *v32;
    v96 = (uint64_t)*v32 + 4 * v94;
    v97 = v10 + 4116;
    while (1)
    {
      v99 = *(unsigned int *)v95;
      v100 = *(_QWORD *)(*v10 + 8 * v99);
      *(_DWORD *)v95 = *(_DWORD *)v100;
      *(_BYTE *)(v100 + 12) = 0;
      v98 = *((_DWORD *)v10 + 8240);
      if (v98 == *((_DWORD *)v10 + 8241))
        break;
LABEL_109:
      v97[v98] = v99;
      ++*((_DWORD *)v10 + 8240);
      v95 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)((char *)v95 + 4);
      if (v95 == (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)v96)
        goto LABEL_120;
    }
    v101 = v98 + 1;
    if (v98 == -1)
    {
      v97 = (_DWORD *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(0x3FFFFFFFCuLL, (absl::lts_2020_02_25::base_internal::SpinLock *)qword_25407A2C0, v87, v88, v89, v90, v91, v92);
      v103 = *((unsigned int *)v10 + 8240);
      if (!(_DWORD)v103)
        goto LABEL_117;
    }
    else
    {
      do
        v98 *= 2;
      while (v98 < v101);
      *((_DWORD *)v10 + 8241) = v98;
      v97 = (_DWORD *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(4 * v98, (absl::lts_2020_02_25::base_internal::SpinLock *)qword_25407A2C0, v87, v88, v89, v90, v91, v92);
      v103 = *((unsigned int *)v10 + 8240);
      if (!(_DWORD)v103)
        goto LABEL_117;
    }
    memmove(v97, *v31, 4 * v103);
LABEL_117:
    if (*v31 != v93)
      absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(*v31, v102, v87, v88, v89, v90, v91, v92);
    *v31 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)v97;
    v98 = *((_DWORD *)v10 + 8240);
    goto LABEL_109;
  }
  v97 = v10 + 4116;
LABEL_120:
  v104 = *((unsigned int *)v10 + 8216);
  if (!(_DWORD)v104)
    goto LABEL_134;
  v105 = *v29;
  v106 = (uint64_t)*v29 + 4 * v104;
  while (2)
  {
    v108 = *v105;
    v109 = *(_QWORD *)(*v10 + 8 * v108);
    *v105 = *(_DWORD *)v109;
    *(_BYTE *)(v109 + 12) = 0;
    v107 = *((_DWORD *)v10 + 8240);
    if (v107 == *((_DWORD *)v10 + 8241))
    {
      v110 = v107 + 1;
      if (v107 == -1)
      {
        v97 = (_DWORD *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(0x3FFFFFFFCuLL, (absl::lts_2020_02_25::base_internal::SpinLock *)qword_25407A2C0, v87, v88, v89, v90, v91, v92);
        v112 = *((unsigned int *)v10 + 8240);
        if (!(_DWORD)v112)
          goto LABEL_131;
LABEL_130:
        memmove(v97, *v31, 4 * v112);
        goto LABEL_131;
      }
      do
        v107 *= 2;
      while (v107 < v110);
      *((_DWORD *)v10 + 8241) = v107;
      v97 = (_DWORD *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(4 * v107, (absl::lts_2020_02_25::base_internal::SpinLock *)qword_25407A2C0, v87, v88, v89, v90, v91, v92);
      v112 = *((unsigned int *)v10 + 8240);
      if ((_DWORD)v112)
        goto LABEL_130;
LABEL_131:
      if (*v31 != v93)
        absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(*v31, v111, v87, v88, v89, v90, v91, v92);
      *v31 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)v97;
      v107 = *((_DWORD *)v10 + 8240);
    }
    v97[v107] = v108;
    ++*((_DWORD *)v10 + 8240);
    if (++v105 != (_DWORD *)v106)
      continue;
    break;
  }
  LODWORD(v104) = *((_DWORD *)v10 + 8216);
LABEL_134:
  v113 = *((_DWORD *)v10 + 8228);
  v114 = v113 + v104;
  v115 = *((_DWORD *)v10 + 8253);
  if (v115 >= v113 + (int)v104)
  {
    v124 = *v167;
    *((_DWORD *)v10 + 8252) = v114;
    v127 = (int *)*v29;
    v128 = (uint64_t)*v29 + 4 * v104;
    if (!v113)
      goto LABEL_148;
  }
  else
  {
    do
      v115 *= 2;
    while (v115 < v114);
    *((_DWORD *)v10 + 8253) = v115;
    v116 = (_DWORD *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(4 * v115, (absl::lts_2020_02_25::base_internal::SpinLock *)qword_25407A2C0, v87, v88, v89, v90, v91, v92);
    v124 = v116;
    v125 = *((unsigned int *)v10 + 8252);
    if ((_DWORD)v125)
      memmove(v116, *v167, 4 * v125);
    if (*v167 != v10 + 4122)
      absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free((absl::lts_2020_02_25::base_internal::LowLevelAlloc *)*v167, v117, v118, v119, v120, v121, v122, v123);
    *v167 = v124;
    v113 = *((_DWORD *)v10 + 8228);
    v126 = *((_DWORD *)v10 + 8216);
    *((_DWORD *)v10 + 8252) = v114;
    v127 = (int *)*v29;
    v128 = (uint64_t)*v29 + 4 * v126;
    if (!v113)
    {
LABEL_148:
      if (v127 != (int *)v128)
      {
        v133 = v128 - (_QWORD)v127;
        v134 = v124;
        goto LABEL_153;
      }
      goto LABEL_154;
    }
  }
  v129 = *v172;
  v130 = (uint64_t)&(*v172)[v113];
  while (v127 != (int *)v128)
  {
    v131 = *v127;
    v132 = *v127 >= *v129;
    if (*v127 >= *v129)
      v131 = *v129;
    v127 += *v127 < *v129;
    v129 += v132;
    *v124++ = v131;
    if (v129 == (int *)v130)
      goto LABEL_148;
  }
  v133 = v130 - (_QWORD)v129;
  v134 = v124;
  v127 = v129;
LABEL_153:
  memmove(v134, v127, v133);
LABEL_154:
  v140 = *((unsigned int *)v10 + 8240);
  if ((_DWORD)v140)
  {
    v141 = (int *)*v167;
    v142 = *v31;
    v143 = *v10;
    do
    {
      v145 = *v141++;
      v144 = v145;
      v146 = *(_DWORD *)v142;
      v142 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)((char *)v142 + 4);
      **(_DWORD **)(v143 + 8 * v146) = v144;
      --v140;
    }
    while (v140);
  }
  return 1;
}

uint64_t absl::lts_2020_02_25::synchronization_internal::GraphCycles::FindPath(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  uint64_t v16;
  int v18;
  unint64_t v19;
  absl::lts_2020_02_25::base_internal::LowLevelAlloc **v20;
  absl::lts_2020_02_25::base_internal::LowLevelAlloc *v21;
  unsigned int v22;
  absl::lts_2020_02_25::base_internal::LowLevelAlloc *v23;
  uint64_t v24;
  uint64_t v25;
  absl::lts_2020_02_25::base_internal::LowLevelAlloc *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unint64_t v34;
  absl::lts_2020_02_25::base_internal::LowLevelAlloc *v35;
  absl::lts_2020_02_25::base_internal::LowLevelAlloc *v36;
  uint64_t v37;
  absl::lts_2020_02_25::base_internal::LowLevelAlloc *v40;
  _BYTE v41[32];
  uint64_t v42;
  int v43;

  v8 = a2;
  v9 = *a1;
  v10 = **a1;
  v11 = *(_QWORD *)(v10 + 8 * a2);
  if (v11)
    v12 = *(_DWORD *)(v11 + 4) == HIDWORD(a2);
  else
    v12 = 0;
  if (!v12)
    return 0;
  v13 = a3;
  v14 = *(_QWORD *)(v10 + 8 * a3);
  if (!v14 || *(_DWORD *)(v14 + 4) != HIDWORD(a3))
    return 0;
  v18 = a4;
  v19 = 0;
  v20 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc **)(v9 + 4127);
  v40 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)v41;
  v42 = 0x800000008;
  do
    *(_DWORD *)&v41[4 * v19++] = -1;
  while (v19 < v42);
  v43 = 0;
  v21 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)(v9 + 4128);
  if ((uint64_t *)v9[4127] != v9 + 4128)
    absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(*v20, a2, a3, a4, a5, a6, a7, a8);
  LODWORD(v16) = 0;
  *v20 = v21;
  *((_DWORD *)v9 + 8256) = v8;
  v9[4132] = 0x800000001;
  v22 = 1;
  do
  {
    while (1)
    {
      v23 = *v20;
      v24 = v22 - 1;
      v25 = *((unsigned int *)*v20 + v24);
      *((_DWORD *)v9 + 8264) = v24;
      if ((v25 & 0x80000000) == 0)
        break;
      LODWORD(v16) = v16 - 1;
      --v22;
      if (!(_DWORD)v24)
        goto LABEL_50;
    }
    if ((int)v16 < v18)
      *(_QWORD *)(a5 + 8 * (int)v16) = v25 | ((unint64_t)*(unsigned int *)(*(_QWORD *)(**a1 + 8 * v25) + 4) << 32);
    if ((_DWORD)v24 == *((_DWORD *)v9 + 8265))
    {
      do
        LODWORD(v24) = 2 * v24;
      while (v24 < v22);
      *((_DWORD *)v9 + 8265) = v24;
      v26 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(4 * v24, (absl::lts_2020_02_25::base_internal::SpinLock *)qword_25407A2C0, a3, a4, a5, a6, a7, a8);
      v23 = v26;
      v27 = *((unsigned int *)v9 + 8264);
      if ((_DWORD)v27)
        memmove(v26, *v20, 4 * v27);
      if (*v20 != v21)
        absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(*v20, a2, a3, a4, a5, a6, a7, a8);
      *v20 = v23;
      v24 = *((unsigned int *)v9 + 8264);
    }
    v16 = (v16 + 1);
    *((_DWORD *)v23 + v24) = -1;
    ++*((_DWORD *)v9 + 8264);
    if ((_DWORD)v25 == v13)
      goto LABEL_51;
    LODWORD(v28) = 0;
LABEL_30:
    v29 = *(_QWORD *)(*v9 + 8 * v25);
    LODWORD(v30) = *(_DWORD *)(v29 + 120);
    if (v28 <= v30)
      v30 = v30;
    else
      v30 = v28;
    v28 = v28;
    while (v30 != v28)
    {
      v31 = *(unsigned int *)(*(_QWORD *)(v29 + 80) + 4 * v28++);
      if ((v31 & 0x80000000) == 0)
      {
        {
          v32 = *((_DWORD *)v9 + 8264);
          if (v32 == *((_DWORD *)v9 + 8265))
          {
            v33 = v32 + 1;
            if (v32 == -1)
            {
              v34 = 0x3FFFFFFFCLL;
            }
            else
            {
              do
                v32 *= 2;
              while (v32 < v33);
              *((_DWORD *)v9 + 8265) = v32;
              v34 = 4 * v32;
            }
            v35 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(v34, (absl::lts_2020_02_25::base_internal::SpinLock *)qword_25407A2C0, a3, a4, a5, a6, a7, a8);
            v36 = v35;
            v37 = *((unsigned int *)v9 + 8264);
            if ((_DWORD)v37)
              memmove(v35, *v20, 4 * v37);
            if (*v20 != v21)
              absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(*v20, a2, a3, a4, a5, a6, a7, a8);
            *v20 = v36;
            v32 = *((_DWORD *)v9 + 8264);
          }
          else
          {
            v36 = *v20;
          }
          *((_DWORD *)v36 + v32) = v31;
          ++*((_DWORD *)v9 + 8264);
        }
        goto LABEL_30;
      }
    }
    v22 = *((_DWORD *)v9 + 8264);
  }
  while (v22);
LABEL_50:
  v16 = 0;
LABEL_51:
  if (v40 != (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)v41)
    absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(v40, a2, a3, a4, a5, a6, a7, a8);
  return v16;
}

void sub_22D9D054C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Unwind_Resume(a1);
}

void sub_22D9D0560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Unwind_Resume(a1);
}

void sub_22D9D0574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Unwind_Resume(a1);
}

_QWORD **absl::lts_2020_02_25::synchronization_internal::GraphCycles::UpdateStackTrace(_QWORD **result, uint64_t a2, int a3, uint64_t (*a4)(_DWORD *, uint64_t))
{
  _DWORD *v4;
  BOOL v5;

  v4 = *(_DWORD **)(**result + 8 * a2);
  if (v4)
    v5 = v4[1] == HIDWORD(a2);
  else
    v5 = 0;
  if (v5 && v4[34] < a3)
  {
    result = (_QWORD **)a4(v4 + 36, 40);
    v4[34] = a3;
    v4[35] = (_DWORD)result;
  }
  return result;
}

uint64_t absl::lts_2020_02_25::synchronization_internal::GraphCycles::GetStackTrace(_QWORD **a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  BOOL v4;
  uint64_t result;

  v3 = *(_QWORD *)(**a1 + 8 * a2);
  if (v3)
    v4 = *(_DWORD *)(v3 + 4) == HIDWORD(a2);
  else
    v4 = 0;
  if (v4)
  {
    result = *(unsigned int *)(v3 + 140);
    *a3 = v3 + 144;
  }
  else
  {
    result = 0;
    *a3 = 0;
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,absl::lts_2020_02_25::synchronization_internal::Sort(absl::lts_2020_02_25::synchronization_internal::`anonymous namespace'::Vec<absl::lts_2020_02_25::synchronization_internal::`anonymous namespace'::Node *> const&,absl::lts_2020_02_25::synchronization_internal::`anonymous namespace'::Vec<int> *)::ByRank &,int *,false>(uint64_t result, unsigned int *a2, uint64_t **a3, uint64_t a4, char a5)
{
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  _DWORD *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  _DWORD *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int *v60;
  uint64_t v61;
  int *v62;
  unsigned int v63;
  unsigned int v64;
  int *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int *v69;
  int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int *v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int *v83;
  BOOL v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int *v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  _DWORD *v101;
  uint64_t v102;
  int v103;
  _DWORD *v104;
  _DWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _DWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  unsigned int *v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int *v118;
  unsigned int *v119;
  uint64_t v120;
  uint64_t v121;
  _DWORD *v122;
  uint64_t v123;
  int64_t v124;
  uint64_t *v125;
  int64_t v126;
  BOOL v127;
  uint64_t v128;
  unsigned int *v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int *v132;
  uint64_t v133;
  unsigned int *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  uint64_t *v140;
  int64_t v141;
  unsigned int *v142;
  uint64_t v143;
  unsigned int *v144;
  unsigned int *v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unsigned int *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _DWORD *v154;
  unsigned int *v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _DWORD *v162;
  uint64_t v163;

  v9 = (unsigned int *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v96 = *(a2 - 1);
        v97 = *v10;
        if (**(_DWORD **)(**a3 + 8 * v96) < **(_DWORD **)(**a3 + 8 * v97))
        {
          *v10 = v96;
          goto LABEL_170;
        }
        return result;
      case 3:
        v98 = **a3;
        v97 = *v10;
        v99 = v10[1];
        v100 = **(_DWORD **)(v98 + 8 * v99);
        v101 = *(_DWORD **)(v98 + 8 * v97);
        v102 = *(a2 - 1);
        v103 = **(_DWORD **)(v98 + 8 * v102);
        if (v100 >= *v101)
        {
          if (v103 < v100)
          {
            v10[1] = v102;
            *(a2 - 1) = v99;
            v157 = *v10;
            v156 = v10[1];
            if (**(_DWORD **)(v98 + 8 * v156) < **(_DWORD **)(v98 + 8 * v157))
            {
              *v10 = v156;
              v10[1] = v157;
            }
          }
        }
        else
        {
          if (v103 >= v100)
          {
            *v10 = v99;
            v10[1] = v97;
            v163 = *(a2 - 1);
            if (**(_DWORD **)(v98 + 8 * v163) >= *v101)
              return result;
            v10[1] = v163;
          }
          else
          {
            *v10 = v102;
          }
LABEL_170:
          *(a2 - 1) = v97;
        }
        return result;
      case 4:
      case 5:
        v104 = v10 + 2;
        v105 = v10 + 3;
        v106 = *(a2 - 1);
        v107 = **a3;
        v108 = v9[3];
        if (**(_DWORD **)(v107 + 8 * v106) < **(_DWORD **)(v107 + 8 * v108))
        {
          *v105 = v106;
          *(a2 - 1) = v108;
          v109 = *v105;
          v110 = *(_DWORD **)(v107 + 8 * v109);
          v111 = *v104;
          if (*v110 < **(_DWORD **)(v107 + 8 * v111))
          {
            *v104 = v109;
            *v105 = v111;
            v112 = v9[1];
            if (*v110 < **(_DWORD **)(v107 + 8 * v112))
            {
              v9[1] = v109;
              v9[2] = v112;
              v113 = *v9;
              if (*v110 < **(_DWORD **)(v107 + 8 * v113))
              {
                *v9 = v109;
                v9[1] = v113;
              }
            }
          }
        }
        return result;
      default:
        if (v11 > 95)
        {
          if (!a4)
          {
            if (v10 != a2)
            {
              v124 = (unint64_t)(v12 - 2) >> 1;
              v125 = *a3;
              v126 = v124;
              do
              {
                if (v124 >= v126)
                {
                  v128 = (2 * v126) | 1;
                  v129 = &v10[v128];
                  v130 = *v129;
                  if (2 * v126 + 2 >= v12)
                  {
                    v131 = *v125;
                  }
                  else
                  {
                    v131 = *v125;
                    if (**(_DWORD **)(*v125 + 8 * v130) < **(_DWORD **)(*v125 + 8 * v129[1]))
                    {
                      v130 = v129[1];
                      ++v129;
                      v128 = 2 * v126 + 2;
                    }
                  }
                  v132 = &v10[v126];
                  v133 = *v132;
                  result = *(_QWORD *)(v131 + 8 * v133);
                  if (**(_DWORD **)(v131 + 8 * v130) >= *(_DWORD *)result)
                  {
                    do
                    {
                      v134 = v129;
                      *v132 = v130;
                      if (v124 < v128)
                        break;
                      v135 = (2 * v128) | 1;
                      v129 = &v10[v135];
                      v136 = 2 * v128 + 2;
                      v130 = *v129;
                      if (v136 < v12 && **(_DWORD **)(v131 + 8 * v130) < **(_DWORD **)(v131 + 8 * v129[1]))
                      {
                        v130 = v129[1];
                        ++v129;
                        v135 = v136;
                      }
                      v132 = v134;
                      v128 = v135;
                    }
                    while (**(_DWORD **)(v131 + 8 * v130) >= *(_DWORD *)result);
                    *v134 = v133;
                    v125 = *a3;
                  }
                }
                v127 = v126-- <= 0;
              }
              while (!v127);
              v137 = (unint64_t)v11 >> 2;
              do
              {
                v138 = 0;
                v139 = *v10;
                v140 = *a3;
                v141 = (unint64_t)(v137 - 2) >> 1;
                v142 = v10;
                do
                {
                  while (1)
                  {
                    v145 = &v142[v138];
                    v146 = v145[1];
                    v144 = v145 + 1;
                    v143 = v146;
                    v147 = (2 * v138) | 1;
                    v138 = 2 * v138 + 2;
                    if (v138 < v137)
                      break;
                    v138 = v147;
                    *v142 = v143;
                    v142 = v144;
                    if (v147 > v141)
                      goto LABEL_152;
                  }
                  result = v144[1];
                  if (**(_DWORD **)(*v140 + 8 * v143) >= **(_DWORD **)(*v140 + 8 * result))
                  {
                    v138 = v147;
                  }
                  else
                  {
                    LODWORD(v143) = v144[1];
                    ++v144;
                  }
                  *v142 = v143;
                  v142 = v144;
                }
                while (v138 <= v141);
LABEL_152:
                if (v144 == --a2)
                {
                  *v144 = v139;
                }
                else
                {
                  *v144 = *a2;
                  *a2 = v139;
                  v148 = (char *)v144 - (char *)v10 + 4;
                  if (v148 >= 5)
                  {
                    v149 = (((unint64_t)v148 >> 2) - 2) >> 1;
                    v150 = &v10[v149];
                    v151 = *v150;
                    v152 = **a3;
                    v153 = *v144;
                    v154 = *(_DWORD **)(v152 + 8 * v153);
                    if (**(_DWORD **)(v152 + 8 * v151) < *v154)
                    {
                      do
                      {
                        v155 = v150;
                        *v144 = v151;
                        if (!v149)
                          break;
                        v149 = (v149 - 1) >> 1;
                        v150 = &v10[v149];
                        v151 = *v150;
                        result = *v154;
                        v144 = v155;
                      }
                      while (**(_DWORD **)(v152 + 8 * v151) < (int)result);
                      *v155 = v153;
                    }
                  }
                }
                v127 = v137-- <= 2;
              }
              while (!v127);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[(unint64_t)v12 >> 1];
          v15 = **a3;
          v16 = *(a2 - 1);
          v17 = **(_DWORD **)(v15 + 8 * v16);
          if ((unint64_t)v11 < 0x201)
          {
            v22 = *v10;
            v23 = *v14;
            v24 = **(_DWORD **)(v15 + 8 * v22);
            v25 = *(_DWORD **)(v15 + 8 * v23);
            if (v24 >= *v25)
            {
              if (v17 < v24)
              {
                *v10 = v16;
                *(a2 - 1) = v22;
                v28 = *v10;
                v29 = *v14;
                if (**(_DWORD **)(v15 + 8 * v28) < **(_DWORD **)(v15 + 8 * v29))
                {
                  *v14 = v28;
                  *v10 = v29;
                  --a4;
                  v30 = v29;
                  if ((a5 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
              goto LABEL_32;
            }
            if (v17 >= v24)
            {
              *v14 = v22;
              *v10 = v23;
              v43 = *(a2 - 1);
              if (**(_DWORD **)(v15 + 8 * v43) >= *v25)
                goto LABEL_32;
              *v10 = v43;
            }
            else
            {
              *v14 = v16;
            }
            *(a2 - 1) = v23;
LABEL_32:
            --a4;
            v30 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v18 = *v14;
          v19 = *v10;
          v20 = **(_DWORD **)(v15 + 8 * v18);
          v21 = *(_DWORD **)(v15 + 8 * v19);
          if (v20 >= *v21)
          {
            if (v17 < v20)
            {
              *v14 = v16;
              *(a2 - 1) = v18;
              v26 = *v14;
              v27 = *v10;
              if (**(_DWORD **)(v15 + 8 * v26) < **(_DWORD **)(v15 + 8 * v27))
              {
                *v10 = v26;
                *v14 = v27;
              }
            }
          }
          else
          {
            if (v17 >= v20)
            {
              *v10 = v18;
              *v14 = v19;
              v31 = *(a2 - 1);
              if (**(_DWORD **)(v15 + 8 * v31) >= *v21)
                goto LABEL_23;
              *v14 = v31;
            }
            else
            {
              *v10 = v16;
            }
            *(a2 - 1) = v19;
          }
LABEL_23:
          v32 = &v10[v13];
          v35 = *(v32 - 1);
          v33 = v32 - 1;
          v34 = v35;
          v36 = v10[1];
          v37 = **(_DWORD **)(v15 + 8 * v35);
          v38 = *(_DWORD **)(v15 + 8 * v36);
          v39 = *(a2 - 2);
          v40 = **(_DWORD **)(v15 + 8 * v39);
          if (v37 >= *v38)
          {
            if (v40 < v37)
            {
              *v33 = v39;
              *(a2 - 2) = v34;
              v41 = *v33;
              v42 = v10[1];
              if (**(_DWORD **)(v15 + 8 * v41) < **(_DWORD **)(v15 + 8 * v42))
              {
                v10[1] = v41;
                *v33 = v42;
              }
            }
          }
          else
          {
            if (v40 >= v37)
            {
              v10[1] = v34;
              *v33 = v36;
              v44 = *(a2 - 2);
              if (**(_DWORD **)(v15 + 8 * v44) >= *v38)
                goto LABEL_37;
              *v33 = v44;
            }
            else
            {
              v10[1] = v39;
            }
            *(a2 - 2) = v36;
          }
LABEL_37:
          v45 = &v10[v13];
          v48 = v45[1];
          v46 = v45 + 1;
          v47 = v48;
          v49 = v10[2];
          v50 = **(_DWORD **)(v15 + 8 * v48);
          v51 = *(_DWORD **)(v15 + 8 * v49);
          v52 = *(a2 - 3);
          v53 = **(_DWORD **)(v15 + 8 * v52);
          if (v50 >= *v51)
          {
            if (v53 < v50)
            {
              *v46 = v52;
              *(a2 - 3) = v47;
              v54 = *v46;
              v55 = v10[2];
              if (**(_DWORD **)(v15 + 8 * v54) < **(_DWORD **)(v15 + 8 * v55))
              {
                v10[2] = v54;
                *v46 = v55;
              }
            }
          }
          else
          {
            if (v53 >= v50)
            {
              v10[2] = v47;
              *v46 = v49;
              v56 = *(a2 - 3);
              if (**(_DWORD **)(v15 + 8 * v56) >= *v51)
                goto LABEL_46;
              *v46 = v56;
            }
            else
            {
              v10[2] = v52;
            }
            *(a2 - 3) = v49;
          }
LABEL_46:
          v57 = *v14;
          v58 = *v33;
          v59 = **(_DWORD **)(v15 + 8 * v57);
          v60 = *(int **)(v15 + 8 * v58);
          v61 = *v46;
          v62 = *(int **)(v15 + 8 * v61);
          result = *v62;
          if (v59 < *v60)
          {
            if ((int)result >= v59)
            {
              *v33 = v57;
              *v14 = v58;
              v33 = v14;
              LODWORD(v57) = v61;
              if (*v62 >= *v60)
              {
                v63 = *v10;
                *v10 = v58;
                *v14 = v63;
                --a4;
                v30 = *v10;
                if ((a5 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if ((int)result >= v59)
            goto LABEL_54;
          *v14 = v61;
          *v46 = v57;
          v46 = v14;
          LODWORD(v57) = v58;
          if (*v62 < *v60)
          {
LABEL_53:
            *v33 = v61;
            *v46 = v58;
LABEL_54:
            v64 = *v10;
            *v10 = v57;
            *v14 = v64;
            --a4;
            v30 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            v65 = *(int **)(v15 + 8 * v30);
            v66 = *v65;
            if (**(_DWORD **)(v15 + 8 * *(v10 - 1)) < *v65)
              goto LABEL_56;
            if (v66 >= **(_DWORD **)(v15 + 8 * *(a2 - 1)))
            {
              v87 = v10 + 1;
              do
              {
                v10 = v87;
                if (v87 >= a2)
                  break;
                ++v87;
              }
              while (v66 >= **(_DWORD **)(v15 + 8 * *v10));
            }
            else
            {
              do
              {
                v86 = v10[1];
                ++v10;
              }
              while (v66 >= **(_DWORD **)(v15 + 8 * v86));
            }
            v88 = a2;
            if (v10 < a2)
            {
              v88 = a2;
              do
                v89 = *--v88;
              while (v66 < **(_DWORD **)(v15 + 8 * v89));
            }
            if (v10 < v88)
            {
              v90 = *v10;
              v91 = *v88;
              do
              {
                *v10 = v91;
                *v88 = v90;
                v92 = *v65;
                do
                {
                  v93 = v10[1];
                  ++v10;
                  v90 = v93;
                }
                while (v92 >= **(_DWORD **)(v15 + 8 * v93));
                do
                {
                  v94 = *--v88;
                  v91 = v94;
                }
                while (v92 < **(_DWORD **)(v15 + 8 * v94));
              }
              while (v10 < v88);
            }
            v95 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v95;
            a5 = 0;
            *v95 = v30;
            continue;
          }
          v85 = *v10;
          *v10 = v61;
          *v14 = v85;
          --a4;
          v30 = *v10;
          if ((a5 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v67 = 0;
          v68 = **a3;
          v69 = *(int **)(v68 + 8 * v30);
          v70 = *v69;
          do
            v71 = v10[++v67];
          while (**(_DWORD **)(v68 + 8 * v71) < v70);
          v72 = &v10[v67];
          v73 = a2;
          if (v67 == 1)
          {
            v73 = a2;
            do
            {
              if (v72 >= v73)
                break;
              v75 = *--v73;
            }
            while (**(_DWORD **)(v68 + 8 * v75) >= v70);
          }
          else
          {
            do
              v74 = *--v73;
            while (**(_DWORD **)(v68 + 8 * v74) >= v70);
          }
          if (v72 >= v73)
          {
            v83 = v72 - 1;
            if (v72 - 1 != v10)
              goto LABEL_73;
          }
          else
          {
            v76 = *v73;
            v77 = v71;
            v78 = v72;
            v79 = v73;
            do
            {
              *v78 = v76;
              *v79 = v77;
              v80 = *v69;
              do
              {
                v81 = v78[1];
                ++v78;
                v77 = v81;
              }
              while (**(_DWORD **)(v68 + 8 * v81) < v80);
              do
              {
                v82 = *--v79;
                v76 = v82;
              }
              while (**(_DWORD **)(v68 + 8 * v82) >= v80);
            }
            while (v78 < v79);
            v83 = v78 - 1;
            if (v78 - 1 == v10)
              goto LABEL_74;
LABEL_73:
            *v10 = *v83;
          }
LABEL_74:
          *v83 = v30;
          if (v72 < v73)
            goto LABEL_77;
          v10 = v83 + 1;
          if (!(_DWORD)result)
          {
            if (v84)
              continue;
LABEL_77:
            a5 = 0;
            v10 = v83 + 1;
            continue;
          }
          a2 = v83;
          if (v84)
            return result;
          goto LABEL_2;
        }
        v114 = *a3;
        if ((a5 & 1) != 0)
        {
          if (v10 != a2)
          {
            v115 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v116 = 0;
              v117 = *v114;
              v118 = v10;
              do
              {
                v121 = *v118;
                v120 = v118[1];
                v122 = *(_DWORD **)(v117 + 8 * v120);
                v118 = v115;
                if (*v122 < **(_DWORD **)(v117 + 8 * v121))
                {
                  v123 = v116;
                  do
                  {
                    *(unsigned int *)((char *)v10 + v123 + 4) = v121;
                    if (!v123)
                    {
                      v119 = v10;
                      goto LABEL_117;
                    }
                    v121 = *(unsigned int *)((char *)v10 + v123 - 4);
                    v123 -= 4;
                  }
                  while (*v122 < **(_DWORD **)(v117 + 8 * v121));
                  v119 = (unsigned int *)((char *)v10 + v123 + 4);
LABEL_117:
                  *v119 = v120;
                }
                v115 = v118 + 1;
                v116 += 4;
              }
              while (v118 + 1 != a2);
            }
          }
        }
        else if (v10 != a2)
        {
          v158 = v10 + 1;
          if (v10 + 1 != a2)
          {
            v159 = *v114;
            do
            {
              v161 = *v9;
              v160 = v9[1];
              v162 = *(_DWORD **)(v159 + 8 * v160);
              v9 = v158;
              if (*v162 < **(_DWORD **)(v159 + 8 * v161))
              {
                do
                {
                  *v158 = v161;
                  v161 = *(v158 - 2);
                  --v158;
                }
                while (*v162 < **(_DWORD **)(v159 + 8 * v161));
                *v158 = v160;
              }
              v158 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,absl::lts_2020_02_25::synchronization_internal::Sort(absl::lts_2020_02_25::synchronization_internal::`anonymous namespace'::Vec<absl::lts_2020_02_25::synchronization_internal::`anonymous namespace'::Node *> const&,absl::lts_2020_02_25::synchronization_internal::`anonymous namespace'::Vec<int> *)::ByRank &,int *>(unsigned int *a1, unsigned int *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _DWORD *v14;
  uint64_t v15;
  int v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  int *v24;
  int v25;
  _DWORD *v26;
  _DWORD *v27;
  int v28;
  int v29;
  _DWORD *v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (**(_DWORD **)(**a3 + 8 * v8) < **(_DWORD **)(**a3 + 8 * v9))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      v10 = **a3;
      v11 = *a1;
      v12 = a1[1];
      v13 = **(_DWORD **)(v10 + 8 * v12);
      v14 = *(_DWORD **)(v10 + 8 * v11);
      v15 = *(a2 - 1);
      v16 = **(_DWORD **)(v10 + 8 * v15);
      if (v13 >= *v14)
      {
        if (v16 < v13)
        {
          a1[1] = v15;
          *(a2 - 1) = v12;
          v41 = *a1;
          v40 = a1[1];
          if (**(_DWORD **)(v10 + 8 * v40) < **(_DWORD **)(v10 + 8 * v41))
          {
            *a1 = v40;
            a1[1] = v41;
          }
        }
      }
      else if (v16 >= v13)
      {
        *a1 = v12;
        a1[1] = v11;
        v50 = *(a2 - 1);
        if (**(_DWORD **)(v10 + 8 * v50) < *v14)
        {
          a1[1] = v50;
          *(a2 - 1) = v11;
        }
      }
      else
      {
        *a1 = v15;
        *(a2 - 1) = v11;
      }
      return result;
    case 4:
      return 1;
    case 5:
      v30 = a1 + 2;
      v31 = a1 + 3;
      v32 = *(a2 - 1);
      v33 = **a3;
      v34 = a1[3];
      if (**(_DWORD **)(v33 + 8 * v32) >= **(_DWORD **)(v33 + 8 * v34))
        return 1;
      *v31 = v32;
      *(a2 - 1) = v34;
      v35 = *v31;
      v36 = *(_DWORD **)(v33 + 8 * v35);
      v37 = *v30;
      if (*v36 >= **(_DWORD **)(v33 + 8 * v37))
        return 1;
      *v30 = v35;
      *v31 = v37;
      v38 = a1[1];
      if (*v36 >= **(_DWORD **)(v33 + 8 * v38))
        return 1;
      a1[1] = v35;
      a1[2] = v38;
      v39 = *a1;
      if (*v36 >= **(_DWORD **)(v33 + 8 * v39))
        return 1;
      *a1 = v35;
      a1[1] = v39;
      return 1;
    default:
      v17 = a1 + 2;
      v18 = a1[2];
      v19 = a1[1];
      v20 = **a3;
      v21 = *a1;
      v22 = *(int **)(v20 + 8 * v21);
      v23 = **(_DWORD **)(v20 + 8 * v19);
      v24 = *(int **)(v20 + 8 * v18);
      v25 = *v24;
      if (v23 >= *v22)
      {
        if (v25 >= v23)
          goto LABEL_25;
        a1[1] = v18;
        *v17 = v19;
        v28 = *v24;
        v29 = *v22;
        v26 = a1;
        v27 = a1 + 1;
      }
      else
      {
        v26 = a1;
        v27 = a1 + 2;
        if (v25 < v23)
          goto LABEL_24;
        *a1 = v19;
        a1[1] = v21;
        v28 = *v24;
        v29 = *v22;
        v26 = a1 + 1;
        v27 = a1 + 2;
      }
      if (v28 >= v29)
        goto LABEL_25;
LABEL_24:
      *v26 = v18;
      *v27 = v21;
LABEL_25:
      v42 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v43 = 0;
      v44 = 12;
      break;
  }
  while (1)
  {
    v45 = *v42;
    v46 = *(_DWORD **)(v20 + 8 * v45);
    v47 = *v17;
    if (*v46 < **(_DWORD **)(v20 + 8 * v47))
      break;
LABEL_34:
    v17 = v42;
    v44 += 4;
    if (++v42 == a2)
      return 1;
  }
  v48 = v44;
  do
  {
    *(unsigned int *)((char *)a1 + v48) = v47;
    v49 = v48 - 4;
    if (v48 == 4)
    {
      *a1 = v45;
      if (++v43 != 8)
        goto LABEL_34;
      return v42 + 1 == a2;
    }
    v47 = *(unsigned int *)((char *)a1 + v48 - 8);
    v48 -= 4;
  }
  while (*v46 < **(_DWORD **)(v20 + 8 * v47));
  *(unsigned int *)((char *)a1 + v49) = v45;
  if (++v43 != 8)
    goto LABEL_34;
  return v42 + 1 == a2;
}

_DWORD *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,absl::lts_2020_02_25::synchronization_internal::Sort(absl::lts_2020_02_25::synchronization_internal::`anonymous namespace'::Vec<absl::lts_2020_02_25::synchronization_internal::`anonymous namespace'::Node *> const&,absl::lts_2020_02_25::synchronization_internal::`anonymous namespace'::Vec<int> *)::ByRank &,int *>(_DWORD *result, _DWORD *a2, unsigned int *a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  _DWORD *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *a2;
  v6 = *result;
  v7 = **(_DWORD **)(a5 + 8 * v5);
  v8 = *(_DWORD **)(a5 + 8 * v6);
  v9 = *a3;
  v10 = **(_DWORD **)(a5 + 8 * *a3);
  if (v7 >= *v8)
  {
    if (v10 >= v7)
    {
      v6 = *a3;
      goto LABEL_14;
    }
    *a2 = v9;
    *a3 = v5;
    v11 = *a2;
    v12 = *result;
    if (**(_DWORD **)(a5 + 8 * v11) >= **(_DWORD **)(a5 + 8 * v12))
    {
      v6 = v5;
      v9 = v5;
      goto LABEL_14;
    }
    *result = v11;
    *a2 = v12;
    v6 = *a3;
  }
  else
  {
    if (v10 >= v7)
    {
      *result = v5;
      *a2 = v6;
      v9 = *a3;
      if (**(_DWORD **)(a5 + 8 * *a3) >= *v8)
      {
        v6 = *a3;
        goto LABEL_14;
      }
      *a2 = v9;
    }
    else
    {
      *result = v9;
    }
    *a3 = v6;
  }
  v9 = v6;
LABEL_14:
  v13 = *a4;
  if (**(_DWORD **)(a5 + 8 * v13) < **(_DWORD **)(a5 + 8 * v6))
  {
    *a3 = v13;
    *a4 = v9;
    v14 = *a3;
    v15 = *a2;
    if (**(_DWORD **)(a5 + 8 * v14) < **(_DWORD **)(a5 + 8 * v15))
    {
      *a2 = v14;
      *a3 = v15;
      v16 = *a2;
      v17 = *result;
      if (**(_DWORD **)(a5 + 8 * v16) < **(_DWORD **)(a5 + 8 * v17))
      {
        *result = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

absl::lts_2020_02_25::hash_internal::CityHashState *absl::lts_2020_02_25::hash_internal::CityHashState::CombineLargeContiguousImpl64(absl::lts_2020_02_25::hash_internal::CityHashState *this, absl::lts_2020_02_25::hash_internal *a2, char *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;

  v3 = (unint64_t)a3;
  if ((unint64_t)a3 >= 0x400)
  {
    do
    {
      v6 = absl::lts_2020_02_25::hash_internal::CityHash64(a2, 0x400uLL);
      this = (absl::lts_2020_02_25::hash_internal::CityHashState *)(((((unint64_t)this + v6)
                                                                    * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((_QWORD)this + v6)));
      v3 -= 1024;
      a2 = (absl::lts_2020_02_25::hash_internal *)((char *)a2 + 1024);
    }
    while (v3 > 0x3FF);
  }
  if (v3 >= 0x11)
  {
    v7 = absl::lts_2020_02_25::hash_internal::CityHash64(a2, v3);
    return (absl::lts_2020_02_25::hash_internal::CityHashState *)(((((unint64_t)this + v7)
                                                                  * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((_QWORD)this + v7)));
  }
  if (v3 >= 9)
  {
    v7 = *(_QWORD *)((char *)a2 + v3 - 8) >> (-8 * v3);
    this = (absl::lts_2020_02_25::hash_internal::CityHashState *)(((((unint64_t)this + *(_QWORD *)a2)
                                                                  * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((_QWORD)this + *(_QWORD *)a2)));
    return (absl::lts_2020_02_25::hash_internal::CityHashState *)(((((unint64_t)this + v7)
                                                                  * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((_QWORD)this + v7)));
  }
  if (v3 >= 4)
  {
    v7 = ((unint64_t)*(unsigned int *)((char *)a2 + v3 - 4) << (8 * v3 - 32)) | *(unsigned int *)a2;
    return (absl::lts_2020_02_25::hash_internal::CityHashState *)(((((unint64_t)this + v7)
                                                                  * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((_QWORD)this + v7)));
  }
  if (v3)
  {
    v7 = (*((unsigned __int8 *)a2 + (v3 >> 1)) << ((4 * v3) & 0xF8)) | *(unsigned __int8 *)a2 | (*((unsigned __int8 *)a2
                                                                                                 + v3
                                                                                                 - 1) << (8 * (v3 - 1)));
    return (absl::lts_2020_02_25::hash_internal::CityHashState *)(((((unint64_t)this + v7)
                                                                  * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((_QWORD)this + v7)));
  }
  return this;
}

absl::lts_2020_02_25::container_internal::HashtablezSampler *absl::lts_2020_02_25::container_internal::HashtablezSampler::HashtablezSampler(absl::lts_2020_02_25::container_internal::HashtablezSampler *this)
{
  absl::lts_2020_02_25::Mutex *v2;
  uint64_t v3;
  absl::lts_2020_02_25::Mutex *v4;
  absl::lts_2020_02_25::Mutex *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *((_QWORD *)this + 10) = 0;
  v2 = (absl::lts_2020_02_25::container_internal::HashtablezSampler *)((char *)this + 80);
  *((_QWORD *)this + 13) = 0;
  *((_DWORD *)this + 28) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = -1;
  *((_QWORD *)this + 13) = absl::lts_2020_02_25::Now(this);
  *((_QWORD *)this + 14) = v3;
  *((_DWORD *)this + 30) = absl::lts_2020_02_25::GetStackTrace((absl::lts_2020_02_25::container_internal::HashtablezSampler *)((char *)this + 128), (void **)0x40, 0);
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 80) = 0;
  absl::lts_2020_02_25::Mutex::Lock(v2, v4);
  *((_QWORD *)this + 12) = (char *)this + 24;
  absl::lts_2020_02_25::Mutex::Unlock(v2, v5, v6, v7, v8, v9, v10, v11);
  return this;
}

void sub_22D9D18D4(_Unwind_Exception *a1)
{
  absl::lts_2020_02_25::Mutex *v1;

  absl::lts_2020_02_25::Mutex::~Mutex(v1);
  _Unwind_Resume(a1);
}

void sub_22D9D18E8(_Unwind_Exception *a1)
{
  absl::lts_2020_02_25::Mutex *v1;

  absl::lts_2020_02_25::Mutex::~Mutex(v1);
  _Unwind_Resume(a1);
}

void absl::lts_2020_02_25::container_internal::HashtablezSampler::PushDead(_QWORD *a1, _QWORD *a2)
{
  void (*v4)(_QWORD *);
  absl::lts_2020_02_25::Mutex *v5;
  absl::lts_2020_02_25::Mutex *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  absl::lts_2020_02_25::Mutex *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = (void (*)(_QWORD *))a1[80];
  if (v4)
    v4(a2);
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(a1 + 10), (absl::lts_2020_02_25::Mutex *)a2);
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(a2 + 7), v5);
  a2[9] = a1[12];
  a1[12] = a2;
  absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25::Mutex *)(a2 + 7), v6, v7, v8, v9, v10, v11, v12);
  absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25::Mutex *)(a1 + 10), v13, v14, v15, v16, v17, v18, v19);
}

void sub_22D9D1970(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  absl::lts_2020_02_25::Mutex *v8;

  absl::lts_2020_02_25::Mutex::Unlock(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void absl::lts_2020_02_25::container_internal::UnsampleSlow(_QWORD *a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  absl::lts_2020_02_25::container_internal::HashtablezSampler *v6;

  v2 = atomic_load((unsigned __int8 *)&qword_25407A2D0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25407A2D0))
  {
    v6 = (absl::lts_2020_02_25::container_internal::HashtablezSampler *)operator new();
    absl::lts_2020_02_25::container_internal::HashtablezSampler::HashtablezSampler(v6);
    _MergedGlobals_24 = (uint64_t)v6;
    __cxa_guard_release(&qword_25407A2D0);
  }
  v3 = _MergedGlobals_24;
  absl::lts_2020_02_25::container_internal::HashtablezSampler::PushDead((_QWORD *)_MergedGlobals_24, a1);
  v4 = (unint64_t *)(v3 + 8);
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 - 1, v4));
}

void sub_22D9D1A20(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x10A0C40ED5098EFLL);
  __cxa_guard_abort(&qword_25407A2D0);
  _Unwind_Resume(a1);
}

void sub_22D9D1A50(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25407A2D0);
  _Unwind_Resume(a1);
}

unint64_t *absl::lts_2020_02_25::container_internal::RecordInsertSlow(unint64_t *result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v3 = a3 >> 3;
  v4 = result + 6;
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 & a2, v4));
  v6 = result + 5;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 | a2, v6));
  v8 = result[3];
  if (v8 <= v3)
    v8 = a3 >> 3;
  result[3] = v8;
  v9 = result + 4;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + v3, v9));
  v11 = result + 1;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  return result;
}

double absl::lts_2020_02_25::base_internal::`anonymous namespace'::CreateGlobalArenas(absl::lts_2020_02_25::base_internal::_anonymous_namespace_ *this)
{
  double result;

  absl::lts_2020_02_25::base_internal::SpinLock::SpinLock(dword_25407A2E0, 0);
  qword_25407A400 = 0x100000000;
  qword_25407A408 = sysconf(29);
  xmmword_25407A410 = xmmword_22DCE5E50;
  dword_25407A420 = 0;
  qword_25407A2E8 = 0;
  qword_25407A2F0 = (unint64_t)&qword_25407A2E8 ^ 0xFFFFFFFFB37CC16ALL;
  unk_25407A2F8 = dword_25407A2E0;
  dword_25407A308 = 0;
  xmmword_25407A310 = 0u;
  unk_25407A320 = 0u;
  xmmword_25407A330 = 0u;
  unk_25407A340 = 0u;
  xmmword_25407A350 = 0u;
  unk_25407A360 = 0u;
  xmmword_25407A370 = 0u;
  unk_25407A380 = 0u;
  xmmword_25407A390 = 0u;
  unk_25407A3A0 = 0u;
  xmmword_25407A3B0 = 0u;
  unk_25407A3C0 = 0u;
  xmmword_25407A3D0 = 0u;
  unk_25407A3E0 = 0u;
  xmmword_25407A3F0 = 0u;
  absl::lts_2020_02_25::base_internal::SpinLock::SpinLock(&algn_25407A424[4], 0);
  qword_25407A548 = 0;
  qword_25407A550 = sysconf(29);
  xmmword_25407A558 = xmmword_22DCE5E50;
  dword_25407A568 = 0;
  qword_25407A430 = 0;
  unk_25407A438 = (unint64_t)&qword_25407A430 ^ 0xFFFFFFFFB37CC16ALL;
  qword_25407A440 = (uint64_t)&algn_25407A424[4];
  dword_25407A450 = 0;
  xmmword_25407A458 = 0u;
  unk_25407A468 = 0u;
  xmmword_25407A478 = 0u;
  unk_25407A488 = 0u;
  xmmword_25407A498 = 0u;
  unk_25407A4A8 = 0u;
  xmmword_25407A4B8 = 0u;
  unk_25407A4C8 = 0u;
  xmmword_25407A4D8 = 0u;
  unk_25407A4E8 = 0u;
  xmmword_25407A4F8 = 0u;
  unk_25407A508 = 0u;
  xmmword_25407A518 = 0u;
  unk_25407A528 = 0u;
  xmmword_25407A538 = 0u;
  absl::lts_2020_02_25::base_internal::SpinLock::SpinLock(dword_25407A570, 0);
  qword_25407A690 = 0x200000000;
  qword_25407A698 = sysconf(29);
  xmmword_25407A6A0 = xmmword_22DCE5E50;
  dword_25407A6B0 = 0;
  qword_25407A578 = 0;
  qword_25407A580 = (unint64_t)&qword_25407A578 ^ 0xFFFFFFFFB37CC16ALL;
  qword_25407A588 = (uint64_t)dword_25407A570;
  dword_25407A598 = 0;
  result = 0.0;
  xmmword_25407A5A0 = 0u;
  unk_25407A5B0 = 0u;
  xmmword_25407A5C0 = 0u;
  unk_25407A5D0 = 0u;
  xmmword_25407A5E0 = 0u;
  unk_25407A5F0 = 0u;
  xmmword_25407A600 = 0u;
  unk_25407A610 = 0u;
  xmmword_25407A620 = 0u;
  unk_25407A630 = 0u;
  xmmword_25407A640 = 0u;
  unk_25407A650 = 0u;
  xmmword_25407A660 = 0u;
  unk_25407A670 = 0u;
  xmmword_25407A680 = 0u;
  return result;
}

unint64_t absl::lts_2020_02_25::base_internal::LowLevelAlloc::NewArena(absl::lts_2020_02_25::base_internal::LowLevelAlloc *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  absl::lts_2020_02_25::base_internal::SpinLock *v11;
  unsigned int v12;
  unint64_t v13;
  _DWORD *v14;

  v8 = (int)this;
  v9 = atomic_load((unsigned int *)&_MergedGlobals_25);
  if (v9 == 221)
  {
    if ((this & 2) == 0)
      goto LABEL_3;
  }
  else
  {
    if ((v8 & 2) == 0)
    {
LABEL_3:
      if ((v8 & 1) != 0)
      {
        v11 = (absl::lts_2020_02_25::base_internal::SpinLock *)dword_25407A2E0;
      }
      else
      {
        v10 = atomic_load((unsigned int *)&_MergedGlobals_25);
        v11 = (absl::lts_2020_02_25::base_internal::SpinLock *)&algn_25407A424[4];
        if (v10 != 221)
          goto LABEL_10;
      }
      goto LABEL_9;
    }
  }
  v12 = atomic_load((unsigned int *)&_MergedGlobals_25);
  v11 = (absl::lts_2020_02_25::base_internal::SpinLock *)dword_25407A570;
  if (v12 != 221)
LABEL_10:
LABEL_9:
  v13 = absl::lts_2020_02_25::base_internal::DoAllocWithArena(0x148uLL, v11, a3, a4, a5, a6, a7, a8);
  v14 = absl::lts_2020_02_25::base_internal::SpinLock::SpinLock((_DWORD *)v13, 0);
  v14[72] = 0;
  v14[73] = v8;
  *(_QWORD *)(v13 + 296) = sysconf(29);
  *(_OWORD *)(v13 + 304) = xmmword_22DCE5E50;
  *(_DWORD *)(v13 + 320) = 0;
  *(_QWORD *)(v13 + 8) = 0;
  *(_QWORD *)(v13 + 16) = (v13 + 8) ^ 0xFFFFFFFFB37CC16ALL;
  *(_QWORD *)(v13 + 24) = v13;
  *(_DWORD *)(v13 + 40) = 0;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)(v13 + 64) = 0u;
  *(_OWORD *)(v13 + 80) = 0u;
  *(_OWORD *)(v13 + 96) = 0u;
  *(_OWORD *)(v13 + 112) = 0u;
  *(_OWORD *)(v13 + 128) = 0u;
  *(_OWORD *)(v13 + 144) = 0u;
  *(_OWORD *)(v13 + 160) = 0u;
  *(_OWORD *)(v13 + 176) = 0u;
  *(_OWORD *)(v13 + 192) = 0u;
  *(_OWORD *)(v13 + 208) = 0u;
  *(_OWORD *)(v13 + 224) = 0u;
  *(_OWORD *)(v13 + 240) = 0u;
  *(_OWORD *)(v13 + 256) = 0u;
  *(_OWORD *)(v13 + 272) = 0u;
  return v13;
}

unint64_t absl::lts_2020_02_25::base_internal::LowLevelAlloc::AllocWithArena(unint64_t a1, absl::lts_2020_02_25::base_internal::SpinLock *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;

  v8 = a1;
  if (!this)
  {
    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 611, "Check %s failed: %s", a5, a6, a7, a8, (char)"arena != nullptr");
    a1 = v8;
    this = 0;
  }
  return absl::lts_2020_02_25::base_internal::DoAllocWithArena(a1, this, a3, a4, a5, a6, a7, a8);
}

void absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(absl::lts_2020_02_25::base_internal::LowLevelAlloc *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  sigset_t v27;
  absl::lts_2020_02_25::base_internal::SpinLock *v28;
  sigset_t v29;

  if (this)
  {
    v9 = *((_QWORD *)this - 2);
    v26 = 0;
    v28 = (absl::lts_2020_02_25::base_internal::SpinLock *)v9;
    v10 = (unsigned int *)v9;
    if ((*(_BYTE *)(v9 + 292) & 2) != 0)
    {
      v29 = -1;
      v26 = pthread_sigmask(1, &v29, &v27) == 0;
      v10 = (unsigned int *)v28;
    }
    v11 = *v10;
    if ((*v10 & 1) == 0)
    {
      while (1)
      {
        v12 = __ldaxr(v10);
        if (v12 != v11)
          break;
        if (!__stxr(v11 | 1, v10))
        {
          if ((v12 & 1) != 0)
            goto LABEL_19;
          goto LABEL_8;
        }
      }
      __clrex();
      if ((v12 & 1) == 0)
        goto LABEL_8;
    }
LABEL_19:
    absl::lts_2020_02_25::base_internal::SpinLock::SlowLock((absl::lts_2020_02_25::base_internal::SpinLock *)v10, a2, a3, a4, a5, a6, a7, a8);
LABEL_8:
    absl::lts_2020_02_25::base_internal::AddToFreelist((int *)this, v9, a3, a4, a5, a6, a7, a8);
    v17 = *(_DWORD *)(v9 + 288);
    if (v17 <= 0)
    {
      absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 516, "Check %s failed: %s", v13, v14, v15, v16, (char)"arena->allocation_count > 0");
      v17 = *(_DWORD *)(v9 + 288);
    }
    *(_DWORD *)(v9 + 288) = v17 - 1;
    v18 = (unsigned int *)v28;
    v19 = *(_DWORD *)v28 & 2;
    do
      v20 = __ldxr(v18);
    while (__stlxr(v19, v18));
    if (v20 >= 8)
      absl::lts_2020_02_25::base_internal::SpinLock::SlowUnlock((absl::lts_2020_02_25::base_internal::SpinLock *)v18, v20);
    if (v26)
    {
      v21 = pthread_sigmask(3, &v27, 0);
      if (v21)
        absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 301, "pthread_sigmask failed: %d", v22, v23, v24, v25, v21);
    }
  }
}

void sub_22D9D1F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Unwind_Resume(a1);
}

void sub_22D9D1F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Unwind_Resume(a1);
}

void absl::lts_2020_02_25::base_internal::`anonymous namespace'::ArenaLock::~ArenaLock(absl::lts_2020_02_25::base_internal::_anonymous_namespace_::ArenaLock *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(_BYTE *)this)
    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 294, "Check %s failed: %s", a5, a6, a7, a8, (char)"left_");
}

unint64_t *absl::lts_2020_02_25::base_internal::AddToFreelist(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  BOOL v25;
  int v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD v39[15];
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v10 = (unint64_t *)(a1 - 8);
  if (*((_QWORD *)a1 - 3) == ((unint64_t)(a1 - 8) ^ 0x4C833E95))
  {
    if (*((_QWORD *)a1 - 2) == a2)
      goto LABEL_3;
  }
  else
  {
    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 495, "Check %s failed: %s", a5, a6, a7, a8, (char)"f->header.magic == Magic(kMagicAllocated, &f->header)");
    if (*((_QWORD *)a1 - 2) == a2)
    {
LABEL_3:
      v11 = *v10;
      v12 = *(_QWORD *)(a2 + 312);
      v13 = *v10 - 40;
      if (*v10 > v12)
        goto LABEL_4;
LABEL_9:
      v14 = 0;
      goto LABEL_10;
    }
  }
  absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 497, "Check %s failed: %s", a5, a6, a7, a8, (char)"f->header.arena == arena");
  v11 = *v10;
  v12 = *(_QWORD *)(a2 + 312);
  v13 = *v10 - 40;
  if (*v10 <= v12)
    goto LABEL_9;
LABEL_4:
  v14 = 0;
  do
  {
    ++v14;
    v11 >>= 1;
  }
  while (v11 > v12);
LABEL_10:
  v15 = v13 >> 3;
  v16 = *(_DWORD *)(a2 + 320);
  do
  {
    v16 = 1103515245 * v16 + 12345;
    ++v14;
  }
  while ((v16 & 0x40000000) == 0);
  *(_DWORD *)(a2 + 320) = v16;
  if (v15 >= v14)
    v17 = v14;
  else
    v17 = v15;
  if (v17 <= 0)
    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 148, "Check %s failed: %s", a5, a6, a7, a8, (char)"level >= 1");
  if (v17 >= 29)
    v18 = 29;
  else
    v18 = v17;
  *a1 = v18;
  v19 = *(unsigned int *)(a2 + 40);
  v20 = (int)v19;
  memset(v39, 0, sizeof(v39));
  if ((int)v19 >= 1)
  {
    v21 = v19;
    v22 = a2 + 8;
    do
    {
      v23 = (v21 - 1);
      v24 = v22;
      do
      {
        v22 = v24;
        v24 = *(_QWORD *)(v24 + 8 * v23 + 40);
        if (v24)
          v25 = v24 >= (unint64_t)v10;
        else
          v25 = 1;
      }
      while (!v25);
      *((_QWORD *)v39 + v23) = v22;
    }
    while (v21-- > 1);
  }
  if ((int)v19 < v18)
  {
    v27 = v19 + 1;
    do
    {
      *((_QWORD *)v39 + v20++) = a2 + 8;
      *(_DWORD *)(a2 + 40) = v27++;
    }
    while (v20 < *a1);
    v18 = *a1;
  }
  if (v18)
  {
    v28 = 0;
    v29 = 8 * v18;
    do
    {
      v30 = *(_QWORD *)((char *)v39 + v28) + v28;
      *(_QWORD *)&a1[v28 / 4 + 2] = *(_QWORD *)(v30 + 40);
      *(_QWORD *)(v30 + 40) = v10;
      v28 += 8;
    }
    while (v29 != v28);
  }
  *((_QWORD *)a1 - 3) = (unint64_t)v10 ^ 0xFFFFFFFFB37CC16ALL;
  absl::lts_2020_02_25::base_internal::Coalesce(v10, a2, a3, a4, a5, a6, a7, a8);
  return absl::lts_2020_02_25::base_internal::Coalesce(*(unint64_t **)&v39[0], v31, v32, v33, v34, v35, v36, v37);
}

unint64_t absl::lts_2020_02_25::base_internal::LowLevelAlloc::Alloc(absl::lts_2020_02_25::base_internal::LowLevelAlloc *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  absl::lts_2020_02_25::base_internal::LowLevelAlloc *v8;
  unsigned int v9;

  v8 = this;
  v9 = atomic_load((unsigned int *)&_MergedGlobals_25);
  if (v9 != 221)
  {
    this = v8;
  }
  return absl::lts_2020_02_25::base_internal::DoAllocWithArena((unint64_t)this, (absl::lts_2020_02_25::base_internal::SpinLock *)dword_25407A2E0, a3, a4, a5, a6, a7, a8);
}

unint64_t absl::lts_2020_02_25::base_internal::DoAllocWithArena(unint64_t a1, absl::lts_2020_02_25::base_internal::SpinLock *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  absl::lts_2020_02_25::base_internal::SpinLock *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  char *v42;
  char *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  BOOL v48;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v68;
  sigset_t v69;
  absl::lts_2020_02_25::base_internal::SpinLock *v70;
  sigset_t v71[4];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;

  v8 = a1;
  v86 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v68 = 0;
    v70 = this;
    v10 = this;
    if ((*((_BYTE *)this + 292) & 2) != 0)
    {
      v71[0] = -1;
      v68 = pthread_sigmask(1, v71, &v69) == 0;
      v10 = v70;
    }
    v11 = *(_DWORD *)v10;
    if ((*(_DWORD *)v10 & 1) == 0)
    {
      while (1)
      {
        v12 = __ldaxr((unsigned int *)v10);
        if (v12 != v11)
          break;
        if (!__stxr(v11 | 1, (unsigned int *)v10))
        {
          if ((v12 & 1) != 0)
            goto LABEL_10;
          goto LABEL_11;
        }
      }
      __clrex();
      if ((v12 & 1) == 0)
        goto LABEL_11;
    }
LABEL_10:
    absl::lts_2020_02_25::base_internal::SpinLock::SlowLock(v10, (uint64_t)this, a3, a4, a5, a6, a7, a8);
LABEL_11:
    if (v8 >= 0xFFFFFFFFFFFFFFE0)
      absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 438, "Check %s failed: %s", a5, a6, a7, a8, (char)"sum >= a");
    v13 = v8 + 32;
    v14 = *((_QWORD *)this + 38);
    v15 = v8 + v14 + 31;
    if (v15 < v13)
      absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 438, "Check %s failed: %s", a5, a6, a7, a8, (char)"sum >= a");
    v16 = v15 & -v14;
    v17 = (char *)this + 8;
    v18 = v16 - 1;
    while (1)
    {
      v19 = *((_QWORD *)this + 39);
      if (v16 <= v19)
      {
        v20 = 0;
      }
      else
      {
        v20 = 0;
        v21 = v16;
        do
        {
          ++v20;
          v21 >>= 1;
        }
        while (v21 > v19);
      }
      if ((v16 - 40) >> 3 >= v20 + 1)
        v22 = v20 + 1;
      else
        v22 = (v16 - 40) >> 3;
      if (v22 <= 0)
        absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 148, "Check %s failed: %s", a5, a6, a7, a8, (char)"level >= 1");
      v23 = v22 >= 29 ? 29 : v22;
      if (v23 <= *((_DWORD *)this + 10))
        break;
LABEL_30:
      v24 = *(_DWORD *)this & 2;
      do
        v25 = __ldxr((unsigned int *)this);
      while (__stlxr(v24, (unsigned int *)this));
      if (v25 >= 8)
        absl::lts_2020_02_25::base_internal::SpinLock::SlowUnlock(this, v25);
      v26 = 16 * *((_QWORD *)this + 37);
      if (v18 + v26 < v16)
        absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 438, "Check %s failed: %s", a5, a6, a7, a8, (char)"sum >= a");
      v34 = (unint64_t)mmap(0, (v18 + v26) & -v26, 3, 4098, -1, 0);
      if (v34 == -1)
      {
        v35 = __error();
        absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 570, "mmap error: %d", v36, v37, v38, v39, *v35);
      }
      v40 = *(_DWORD *)this;
      if ((*(_DWORD *)this & 1) == 0)
      {
        while (1)
        {
          v41 = __ldaxr((unsigned int *)this);
          if (v41 != v40)
            break;
          if (!__stxr(v40 | 1, (unsigned int *)this))
          {
            if ((v41 & 1) != 0)
              goto LABEL_58;
            goto LABEL_59;
          }
        }
        __clrex();
        if ((v41 & 1) == 0)
          goto LABEL_59;
      }
LABEL_58:
      absl::lts_2020_02_25::base_internal::SpinLock::SlowLock(this, v27, v28, v29, v30, v31, v32, v33);
LABEL_59:
      *(_QWORD *)v34 = (v18 + v26) & -v26;
      *(_QWORD *)(v34 + 8) = v34 ^ 0x4C833E95;
      *(_QWORD *)(v34 + 16) = this;
      absl::lts_2020_02_25::base_internal::AddToFreelist((int *)(v34 + 32), (uint64_t)this, v28, v29, v30, v31, v32, v33);
    }
    v42 = (char *)this + 8;
    do
    {
      v43 = v42;
      if (*((_DWORD *)v42 + 8) < v23)
        absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 454, "Check %s failed: %s", a5, a6, a7, a8, (char)"i < prev->levels");
      v42 = *(char **)&v42[8 * v23 + 32];
      if (!v42)
        goto LABEL_30;
      if (*((_QWORD *)v42 + 1) != ((unint64_t)v42 ^ 0xFFFFFFFFB37CC16ALL))
        absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 459, "Check %s failed: %s", a5, a6, a7, a8, (char)"next->header.magic == Magic(kMagicUnallocated, &next->header)");
      if (*((absl::lts_2020_02_25::base_internal::SpinLock **)v42 + 2) != this)
        absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 460, "Check %s failed: %s", a5, a6, a7, a8, (char)"next->header.arena == arena");
      if (v17 != v43)
      {
        if (v42 <= v43)
          absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 462, "Check %s failed: %s", a5, a6, a7, a8, (char)"prev < next");
        if (&v43[*(_QWORD *)v43] >= v42)
          absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 465, "Check %s failed: %s", a5, a6, a7, a8, (char)"reinterpret_cast<char *>(prev) + prev->header.size < reinterpret_cast<char *>(next)");
      }
    }
    while (*(_QWORD *)v42 < v16);
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    v72 = 0u;
    v73 = 0u;
    *(_OWORD *)v71 = 0u;
    v44 = *((_DWORD *)this + 10);
    if (v44 >= 1)
    {
      v45 = *((unsigned int *)this + 10);
      do
      {
        v46 = (v45 - 1);
        v47 = v17;
        do
        {
          v17 = v47;
          v47 = *(char **)&v47[8 * v46 + 40];
          if (v47)
            v48 = v47 >= v42;
          else
            v48 = 1;
        }
        while (!v48);
        *(_QWORD *)&v71[2 * v46] = v17;
      }
      while (v45-- > 1);
    }
    if (!v44 || *(char **)(*(_QWORD *)v71 + 40) != v42)
      absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 188, "Check %s failed: %s", a5, a6, a7, a8, (char)"e == found");
    v8 = (unint64_t)(v42 + 32);
    v50 = *((unsigned int *)v42 + 8);
    if ((_DWORD)v50)
    {
      v51 = 0;
      v52 = 8 * v50;
      do
      {
        v53 = *(_QWORD *)&v71[v51 / 4] + v51;
        if (*(char **)(v53 + 40) != v42)
          break;
        *(_QWORD *)(v53 + 40) = *(_QWORD *)&v42[v51 + 40];
        v51 += 8;
      }
      while (v52 != v51);
    }
    v54 = *((unsigned int *)this + 10);
    if ((int)v54 >= 1)
    {
      do
      {
        v55 = v54 - 1;
        if (*((_QWORD *)this + (v54 - 1) + 6))
          break;
        *((_DWORD *)this + 10) = --v54;
      }
      while ((unint64_t)(v55 + 1) > 1);
    }
    v56 = *((_QWORD *)this + 39);
    v57 = v56 + v16;
    if (__CFADD__(v56, v16))
      absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 438, "Check %s failed: %s", a5, a6, a7, a8, (char)"sum >= a");
    if (v57 <= *(_QWORD *)v42)
    {
      v58 = &v42[v16];
      *(_QWORD *)v58 = *(_QWORD *)v42 - v16;
      *((_QWORD *)v58 + 1) = (unint64_t)&v42[v16] ^ 0x4C833E95;
      *((_QWORD *)v58 + 2) = this;
      *(_QWORD *)v42 = v16;
      absl::lts_2020_02_25::base_internal::AddToFreelist((int *)&v42[v16 + 32], (uint64_t)this, a3, a4, a5, a6, a7, a8);
    }
    *((_QWORD *)v42 + 1) = (unint64_t)v42 ^ 0x4C833E95;
    if (*((absl::lts_2020_02_25::base_internal::SpinLock **)v42 + 2) != this)
      absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 596, "Check %s failed: %s", a5, a6, a7, a8, (char)"s->header.arena == arena");
    ++*((_DWORD *)this + 72);
    v59 = (unsigned int *)v70;
    v60 = *(_DWORD *)v70 & 2;
    do
      v61 = __ldxr(v59);
    while (__stlxr(v60, v59));
    if (v61 >= 8)
      absl::lts_2020_02_25::base_internal::SpinLock::SlowUnlock((absl::lts_2020_02_25::base_internal::SpinLock *)v59, v61);
    if (v68)
    {
      v62 = pthread_sigmask(3, &v69, 0);
      if (v62)
        absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 301, "pthread_sigmask failed: %d", v63, v64, v65, v66, v62);
    }
  }
  return v8;
}

void sub_22D9D2A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Unwind_Resume(a1);
}

void sub_22D9D2A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Unwind_Resume(a1);
}

void sub_22D9D2A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Unwind_Resume(a1);
}

void sub_22D9D2A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Unwind_Resume(a1);
}

void sub_22D9D2A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Unwind_Resume(a1);
}

void sub_22D9D2A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Unwind_Resume(a1);
}

void sub_22D9D2A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Unwind_Resume(a1);
}

void sub_22D9D2AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Unwind_Resume(a1);
}

void sub_22D9D2AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Unwind_Resume(a1);
}

unint64_t *absl::lts_2020_02_25::base_internal::Coalesce(unint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  BOOL v26;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  BOOL v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  _OWORD v54[15];
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v8 = result[5];
  if (!v8)
    return result;
  v9 = result;
  if ((unint64_t *)((char *)result + *result) != (unint64_t *)v8)
    return result;
  v10 = result[2];
  *result += *(_QWORD *)v8;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  memset(v54, 0, sizeof(v54));
  v11 = *(_DWORD *)(v10 + 40);
  if (v11 >= 1)
  {
    v12 = *(unsigned int *)(v10 + 40);
    v13 = v10 + 8;
    do
    {
      v14 = (v12 - 1);
      v15 = v13;
      do
      {
        v13 = v15;
        v15 = *(_QWORD *)(v15 + 8 * v14 + 40);
        if (v15)
          v16 = v15 >= v8;
        else
          v16 = 1;
      }
      while (!v16);
      *((_QWORD *)v54 + v14) = v13;
      v17 = v12-- <= 1;
    }
    while (!v17);
  }
  if (v11 && *(_QWORD *)(*(_QWORD *)&v54[0] + 40) == v8)
  {
    v18 = *(unsigned int *)(v8 + 32);
    if (!(_DWORD)v18)
      goto LABEL_19;
  }
  else
  {
    v52 = v8;
    result = (unint64_t *)absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 188, "Check %s failed: %s", a5, a6, a7, a8, (char)"e == found");
    v8 = v52;
    v18 = *(unsigned int *)(v52 + 32);
    if (!(_DWORD)v18)
      goto LABEL_19;
  }
  v19 = 0;
  v20 = 8 * v18;
  do
  {
    v21 = *(_QWORD *)((char *)v54 + v19) + v19;
    if (*(_QWORD *)(v21 + 40) != v8)
      break;
    *(_QWORD *)(v21 + 40) = *(_QWORD *)(v8 + v19 + 40);
    v19 += 8;
  }
  while (v20 != v19);
LABEL_19:
  v22 = *(unsigned int *)(v10 + 40);
  if ((int)v22 >= 1)
  {
    if (*(_QWORD *)(v10 + 8 * (v22 - 1) + 48))
    {
LABEL_21:
      v22 = v22;
      v23 = v10 + 8;
      do
      {
        v24 = (v22 - 1);
        v25 = v23;
        do
        {
          v23 = v25;
          v25 = *(_QWORD *)(v25 + 8 * v24 + 40);
          if (v25)
            v26 = v25 >= (unint64_t)v9;
          else
            v26 = 1;
        }
        while (!v26);
        *((_QWORD *)v54 + v24) = v23;
        v17 = v22-- <= 1;
      }
      while (!v17);
LABEL_39:
      if (*(unint64_t **)(*(_QWORD *)&v54[0] + 40) == v9)
        goto LABEL_40;
      goto LABEL_80;
    }
    do
    {
      v28 = v22 - 1;
      if ((unint64_t)v22 <= 1)
      {
        *(_DWORD *)(v10 + 40) = v22 - 1;
        if (!v9)
          goto LABEL_40;
        goto LABEL_80;
      }
    }
    while (!*(_QWORD *)(v10 + 8 * (v22-- - 2) + 48));
    *(_DWORD *)(v10 + 40) = v28;
    LODWORD(v22) = v28;
    if (v28 >= 1)
      goto LABEL_21;
  }
  if ((_DWORD)v22)
    goto LABEL_39;
  if (!v9)
  {
LABEL_40:
    v29 = *((unsigned int *)v9 + 8);
    if ((_DWORD)v29)
      goto LABEL_41;
    goto LABEL_44;
  }
LABEL_80:
  result = (unint64_t *)absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 188, "Check %s failed: %s", a5, a6, a7, a8, (char)"e == found");
  v29 = *((unsigned int *)v9 + 8);
  if ((_DWORD)v29)
  {
LABEL_41:
    v30 = 0;
    v31 = 8 * v29;
    do
    {
      v32 = *(_QWORD *)((char *)v54 + v30) + v30;
      if (*(unint64_t **)(v32 + 40) != v9)
        break;
      *(_QWORD *)(v32 + 40) = v9[v30 / 8 + 5];
      v30 += 8;
    }
    while (v31 != v30);
  }
LABEL_44:
  v33 = *(unsigned int *)(v10 + 40);
  if ((int)v33 >= 1)
  {
    do
    {
      v34 = v33 - 1;
      if (*(_QWORD *)(v10 + 8 * (v33 - 1) + 48))
        break;
      *(_DWORD *)(v10 + 40) = --v33;
    }
    while ((unint64_t)(v34 + 1) > 1);
  }
  v35 = *v9;
  v36 = *(_QWORD *)(v10 + 312);
  if (*v9 <= v36)
  {
    v37 = 0;
  }
  else
  {
    v37 = 0;
    do
    {
      ++v37;
      v35 >>= 1;
    }
    while (v35 > v36);
  }
  v38 = (*v9 - 40) >> 3;
  v39 = *(_DWORD *)(v10 + 320);
  do
  {
    v39 = 1103515245 * v39 + 12345;
    ++v37;
  }
  while ((v39 & 0x40000000) == 0);
  *(_DWORD *)(v10 + 320) = v39;
  if (v38 < v37)
    v37 = v38;
  if (v37 <= 0)
  {
    v53 = v37;
    result = (unint64_t *)absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"low_level_alloc.cc", 148, "Check %s failed: %s", a5, a6, a7, a8, (char)"level >= 1");
    v37 = v53;
  }
  if (v37 >= 29)
    v40 = 29;
  else
    v40 = v37;
  *((_DWORD *)v9 + 8) = v40;
  v41 = *(_DWORD *)(v10 + 40);
  v42 = v41;
  if (v41 >= 1)
  {
    v43 = *(unsigned int *)(v10 + 40);
    v44 = v10 + 8;
    do
    {
      v45 = (v43 - 1);
      v46 = v44;
      do
      {
        v44 = v46;
        v46 = *(_QWORD *)(v46 + 8 * v45 + 40);
        if (v46)
          v47 = v46 >= (unint64_t)v9;
        else
          v47 = 1;
      }
      while (!v47);
      *((_QWORD *)v54 + v45) = v44;
      v17 = v43-- <= 1;
    }
    while (!v17);
  }
  if (v41 < v40)
  {
    v48 = v41 + 1;
    do
    {
      *((_QWORD *)v54 + v42++) = v10 + 8;
      *(_DWORD *)(v10 + 40) = v48++;
    }
    while (v42 < *((int *)v9 + 8));
    v40 = *((_DWORD *)v9 + 8);
  }
  if (v40)
  {
    v49 = 0;
    v50 = 8 * v40;
    do
    {
      v51 = *(_QWORD *)((char *)v54 + v49) + v49;
      v9[v49 / 8 + 5] = *(_QWORD *)(v51 + 40);
      *(_QWORD *)(v51 + 40) = v9;
      v49 += 8;
    }
    while (v50 != v49);
  }
  return result;
}

ssize_t absl::lts_2020_02_25::raw_logging_internal::RawLog(int a1, ORToolsCpL2AccessVariable *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  signed int v12;
  int v13;
  const char *v14;
  int v15;
  int v16;
  const char *v17;
  size_t v18;
  ssize_t result;
  const char *v20;
  _BYTE __size[12];
  char __s[3000];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&__size[4] = __s;
  *(_DWORD *)__size = 3000;
  v12 = *(_DWORD *)__size;
  v13 = vsnprintf(*(char **)&__size[4], *(int *)__size, a4, &a9);
  v15 = v12 - 26;
  if (v12 < 0x1A)
    v15 = 0;
  if (v13 >= 0 && v13 <= v12)
    v16 = v13;
  else
    v16 = v15;
  *(_DWORD *)__size = v12 - v16;
  *(_QWORD *)&__size[4] += v16;
  if (v13 >= 0 && v13 <= v12)
  {
    v17 = "\n";
  }
  else
  {
    v20 = " ... (message truncated)\n";
    v17 = "%s";
  }
  v18 = strlen(__s);
  result = write(2, __s, v18);
  if (a1 == 3)
  {
    ORToolsCpL2AccessVariable::~ORToolsCpL2AccessVariable(a2);
    abort();
  }
  return result;
}

ssize_t absl::lts_2020_02_25::raw_logging_internal::DefaultInternalLog(int a1, ORToolsCpL2AccessVariable *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  if (*((char *)a4 + 23) >= 0)
    LOBYTE(v8) = (_BYTE)a4;
  else
    v8 = *a4;
  return absl::lts_2020_02_25::raw_logging_internal::RawLog(a1, a2, a3, "%s", a5, a6, a7, a8, v8);
}

uint64_t `anonymous namespace'::DoRawLog(char **this, char **a2, const char *a3, const char *a4, ...)
{
  uint64_t result;
  va_list va;

  va_start(va, a4);
  result = vsnprintf(*this, *(int *)a2, a3, va);
  if ((result & 0x80000000) == 0 && *(_DWORD *)a2 >= (int)result)
  {
    *(_DWORD *)a2 -= result;
    *this += result;
  }
  return result;
}

int *AbslInternalSpinLockDelay(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4;
  int v5;
  unsigned int v6;
  int *result;
  timespec v8;

  v4 = *__error();
  if (a3)
  {
    if (a3 == 1)
    {
      sched_yield();
    }
    else
    {
      v5 = -554899859 * absl::lts_2020_02_25::base_internal::delay_rand + 11;
      absl::lts_2020_02_25::base_internal::delay_rand = 0x5DEECE66DLL * absl::lts_2020_02_25::base_internal::delay_rand
                                                      + 11;
      if (a3 >= 0x20)
        v6 = 32;
      else
        v6 = a3;
      v8.tv_sec = 0;
      v8.tv_nsec = ((0x20000 << (v6 >> 3)) - 1) & v5 | (0x20000 << (v6 >> 3));
      nanosleep(&v8, 0);
    }
  }
  result = __error();
  *result = v4;
  return result;
}

void sub_22D9D31F0(_Unwind_Exception *a1)
{
  int v1;

  *__error() = v1;
  _Unwind_Resume(a1);
}

uint64_t absl::lts_2020_02_25::base_internal::SpinLockWait(unsigned int *a1, unsigned int a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int i;
  uint64_t v14;

  if (!a2)
  {
    for (i = 1; ; ++i)
    {
      v14 = atomic_load(a1);
      AbslInternalSpinLockDelay((uint64_t)a1, v14, i);
    }
  }
  v4 = 0;
  v5 = a2;
  v6 = a3 + 4;
  do
  {
LABEL_4:
    while (1)
    {
      v7 = atomic_load(a1);
      v8 = v5;
      v9 = v6;
      while ((_DWORD)v7 != *(_DWORD *)(v9 - 4))
      {
        v9 += 12;
        if (!--v8)
        {
          AbslInternalSpinLockDelay((uint64_t)a1, v7, ++v4);
          goto LABEL_4;
        }
      }
      v10 = *(_DWORD *)v9;
      if (*(_DWORD *)v9 == (_DWORD)v7)
        break;
      while (1)
      {
        v11 = __ldaxr(a1);
        if (v11 != (_DWORD)v7)
          break;
        if (!__stxr(v10, a1))
          goto LABEL_3;
      }
      __clrex();
    }
LABEL_3:
    ;
  }
  while (!*(_BYTE *)(v9 + 4));
  return v7;
}

uint64_t absl::lts_2020_02_25::GetStackTrace(absl::lts_2020_02_25 *this, void **a2, int a3)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD *);

  if (!v3)
    v3 = UnwindImpl<false,false>;
  return v3((uint64_t)this, 0, (uint64_t)a2, (a3 + 1), 0, 0);
}

uint64_t UnwindImpl<false,false>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  if (a6)
    *a6 = 0;
  return 0;
}

uint64_t absl::lts_2020_02_25::Status::UnrefNonInlined(uint64_t this)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  char *v5;
  char *v6;

  if ((this & 1) == 0)
    absl::lts_2020_02_25::Status::UnrefNonInlined();
  v1 = this - 1;
  v2 = atomic_load((unsigned int *)(this - 1));
  if (v2 == 1)
    goto LABEL_5;
  do
  {
    v3 = __ldaxr((unsigned int *)v1);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, (unsigned int *)v1));
  if (!v4)
  {
LABEL_5:
    v5 = *(char **)(this + 31);
    *(_QWORD *)(v1 + 32) = 0;
    if (v5)
    {
      v6 = absl::lts_2020_02_25::inlined_vector_internal::Storage<absl::lts_2020_02_25::status_internal::Payload,1ul,std::allocator<absl::lts_2020_02_25::status_internal::Payload>>::~Storage(v5);
      MEMORY[0x22E31DF78](v6, 0x1022C407F822AEDLL);
    }
    if (*(char *)(v1 + 31) < 0)
      operator delete(*(void **)(v1 + 8));
    JUMPOUT(0x22E31DF78);
  }
  return this;
}

_QWORD *absl::lts_2020_02_25::Status::Status(_QWORD *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  char *v9;
  char *v10;

  *a1 = 4 * a2;
  if (a2 && a4)
  {
    v8 = operator new();
    *(_OWORD *)(v8 + 24) = 0u;
    *(_OWORD *)(v8 + 8) = 0u;
    *(_DWORD *)v8 = 1;
    *(_DWORD *)(v8 + 4) = a2;
    MEMORY[0x22E31DC90](v8 + 8, a3, a4);
    v9 = *(char **)(v8 + 32);
    *(_QWORD *)(v8 + 32) = 0;
    if (v9)
    {
      v10 = absl::lts_2020_02_25::inlined_vector_internal::Storage<absl::lts_2020_02_25::status_internal::Payload,1ul,std::allocator<absl::lts_2020_02_25::status_internal::Payload>>::~Storage(v9);
      MEMORY[0x22E31DF78](v10, 0x1022C407F822AEDLL);
    }
    *a1 = v8 + 1;
  }
  return a1;
}

char *absl::lts_2020_02_25::inlined_vector_internal::Storage<absl::lts_2020_02_25::status_internal::Payload,1ul,std::allocator<absl::lts_2020_02_25::status_internal::Payload>>::~Storage(char *__b)
{
  unint64_t v2;
  void **v3;
  char *v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;

  v3 = (void **)(__b + 8);
  v2 = *(_QWORD *)__b;
  v4 = __b + 8;
  if ((*(_QWORD *)__b & 1) != 0)
  {
    v4 = (char *)*v3;
    if (!*v3)
      goto LABEL_11;
  }
  v5 = v2 >> 1;
  if (v2 >= 2)
  {
    v6 = &v4[40 * v5 - 17];
    v7 = v2 >> 1;
    do
    {
      while (1)
      {
        if (v6[16] >= 16)
          absl::lts_2020_02_25::Cord::DestroyCordSlow((void ***)(v6 + 1));
        if (*v6 < 0)
          break;
        v6 -= 40;
        if (!--v7)
          goto LABEL_10;
      }
      operator delete(*(void **)(v6 - 23));
      v6 -= 40;
      --v7;
    }
    while (v7);
  }
LABEL_10:
  memset(v4, 171, 40 * v5);
  if ((*__b & 1) != 0)
LABEL_11:
    operator delete(*v3);
  return __b;
}

BOOL absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<BOOL>(char a1, uint64_t a2, unsigned int a3, char *a4)
{
  if (a2 != 20)
    return absl::lts_2020_02_25::str_format_internal::FormatConvertImpl(a1 & 1, a2, a3, a4);
  *(_DWORD *)a4 = a1 & 1;
  return 1;
}

BOOL absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<int>(int a1, uint64_t a2, unsigned int a3, char *a4)
{
  if (a2 != 20)
    return absl::lts_2020_02_25::str_format_internal::FormatConvertImpl(a1, a2, a3, a4);
  *(_DWORD *)a4 = a1;
  return 1;
}

BOOL absl::lts_2020_02_25::str_format_internal::FormatConvertImpl(int a1, uint64_t a2, unsigned int a3, char *a4)
{
  _BYTE *v6;
  unsigned int v7;
  BOOL v8;
  signed int v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  unsigned int v18;
  _BYTE v19[13];

  *(_QWORD *)&v19[5] = *MEMORY[0x24BDAC8D0];
  if (a2 - 10 <= 7)
  {
    v17 = a2;
    v18 = a3;
    return absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl((unsigned __int8 *)&v17, a4, (double)a1);
  }
  if (!(_BYTE)a2)
  {
    return 1;
  }
  if (a2 - 4 > 5)
    return 0;
  if ((a2 & 0xFE) == 4)
  {
    LOBYTE(v17) = a1 < 0;
    v6 = v19;
    if (a1)
    {
      if (a1 >= 0)
        v7 = a1;
      else
        v7 = -a1;
      v6 = v19;
      do
      {
        *--v6 = (v7 % 0xA) | 0x30;
        v8 = v7 > 9;
        v7 /= 0xAu;
      }
      while (v8);
    }
    v9 = v19 - (_DWORD)v6;
    HIDWORD(v17) = v9;
    if (a2 == 19 || (a2 & 0x100) == 0)
    {
    }
    else
    {
      if ((_BYTE)v17)
      {
        v10 = (char *)*((_QWORD *)a4 + 3);
        ++*((_QWORD *)a4 + 2);
        if (a4 + 1056 == v10)
        {
          v10 = a4 + 32;
          (*((void (**)(_QWORD, char *, uint64_t))a4 + 1))(*(_QWORD *)a4, a4 + 32, 1024);
          *((_QWORD *)a4 + 3) = v10;
        }
        *v10 = 45;
        ++*((_QWORD *)a4 + 3);
        v9 = HIDWORD(v17);
      }
      v11 = *((_QWORD *)a4 + 2);
      v12 = a4 + 1056;
      if (v9)
      {
        v13 = v9;
        v14 = &v19[-v9];
        *((_QWORD *)a4 + 2) = v11 + v9;
        v15 = (_BYTE *)*((_QWORD *)a4 + 3);
        if (v12 - v15 <= (unint64_t)v9)
        {
          (*((void (**)(_QWORD, char *, int64_t))a4 + 1))(*(_QWORD *)a4, a4 + 32, v15 - (a4 + 32));
          *((_QWORD *)a4 + 3) = a4 + 32;
          (*((void (**)(_QWORD, _BYTE *, uint64_t))a4 + 1))(*(_QWORD *)a4, v14, v13);
        }
        else
        {
          memcpy(v15, v14, v9);
          *((_QWORD *)a4 + 3) += v13;
        }
      }
      else
      {
        *((_QWORD *)a4 + 2) = v11 + 1;
        v16 = (_BYTE *)*((_QWORD *)a4 + 3);
        if (v12 == v16)
        {
          v16 = a4 + 32;
          (*((void (**)(_QWORD, char *, uint64_t))a4 + 1))(*(_QWORD *)a4, a4 + 32, 1024);
          *((_QWORD *)a4 + 3) = a4 + 32;
        }
        *v16 = 48;
        ++*((_QWORD *)a4 + 3);
      }
    }
    return 1;
  }
  return absl::lts_2020_02_25::str_format_internal::FormatConvertImpl(a1, a2, a3, a4);
}

BOOL absl::lts_2020_02_25::str_format_internal::FormatConvertImpl(unsigned int a1, uint64_t a2, unsigned int a3, char *a4)
{
  _BYTE *v6;
  BOOL v7;
  uint64_t v8;
  char *v9;
  BOOL v10;
  signed int v11;
  char *v12;
  uint64_t v13;
  _BYTE *v14;
  void *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unsigned int v19;
  _BYTE v20[13];

  *(_QWORD *)&v20[5] = *MEMORY[0x24BDAC8D0];
  if (a2 - 10 <= 7)
  {
    v18 = a2;
    v19 = a3;
    return absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl((unsigned __int8 *)&v18, a4, (double)a1);
  }
  if (!(_BYTE)a2)
  {
    return 1;
  }
  if (a2 - 4 > 5)
    return 0;
  LOBYTE(v18) = 0;
  switch(a2)
  {
    case 9u:
      v8 = 1;
      goto LABEL_16;
    case 8u:
      v8 = 0;
LABEL_16:
      v6 = v20;
      if (a1)
      {
        v6 = v20;
        do
        {
          *--v6 = v9[a1 & 0xF];
          v10 = a1 > 0xF;
          a1 >>= 4;
        }
        while (v10);
      }
      break;
    case 6u:
      if (!a1)
      {
        HIDWORD(v18) = 0;
        if ((a2 & 0x100) != 0)
        {
LABEL_35:
          v17 = (char *)*((_QWORD *)a4 + 3);
          ++*((_QWORD *)a4 + 2);
          if (a4 + 1056 == v17)
          {
            v17 = a4 + 32;
            (*((void (**)(_QWORD, char *, uint64_t))a4 + 1))(*(_QWORD *)a4, a4 + 32, 1024);
            *((_QWORD *)a4 + 3) = a4 + 32;
          }
          *v17 = 48;
          v16 = *((_QWORD *)a4 + 3) + 1;
          goto LABEL_38;
        }
LABEL_34:
        return 1;
      }
      v6 = v20;
      do
      {
        *--v6 = a1 & 7 | 0x30;
        v7 = a1 >= 8;
        a1 >>= 3;
      }
      while (v7);
      break;
    default:
      v6 = v20;
      if (a1)
      {
        v6 = v20;
        do
        {
          *--v6 = (a1 % 0xA) | 0x30;
          v7 = a1 >= 0xA;
          a1 /= 0xAu;
        }
        while (v7);
      }
      break;
  }
  v11 = v20 - (_DWORD)v6;
  HIDWORD(v18) = v11;
  if (a2 == 19 || (a2 & 0x100) == 0)
    goto LABEL_34;
  if ((_BYTE)v18)
  {
    v12 = (char *)*((_QWORD *)a4 + 3);
    ++*((_QWORD *)a4 + 2);
    if (a4 + 1056 == v12)
    {
      v12 = a4 + 32;
      (*((void (**)(_QWORD, char *, uint64_t))a4 + 1))(*(_QWORD *)a4, a4 + 32, 1024);
      *((_QWORD *)a4 + 3) = v12;
    }
    *v12 = 45;
    ++*((_QWORD *)a4 + 3);
    v11 = HIDWORD(v18);
  }
  if (!v11)
    goto LABEL_35;
  v13 = v11;
  v14 = &v20[-v11];
  v15 = (void *)*((_QWORD *)a4 + 3);
  *((_QWORD *)a4 + 2) += v11;
  if (a4 - (_BYTE *)v15 + 1056 > (unint64_t)v11)
  {
    memcpy(v15, v14, v11);
    v16 = *((_QWORD *)a4 + 3) + v13;
LABEL_38:
    *((_QWORD *)a4 + 3) = v16;
    return 1;
  }
  (*((void (**)(_QWORD, char *, int64_t))a4 + 1))(*(_QWORD *)a4, a4 + 32, (_BYTE *)v15 - (a4 + 32));
  *((_QWORD *)a4 + 3) = a4 + 32;
  (*((void (**)(_QWORD, _BYTE *, uint64_t))a4 + 1))(*(_QWORD *)a4, v14, v13);
  return 1;
}

BOOL absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<unsigned long>(unint64_t a1, uint64_t a2, unsigned int a3, char *a4)
{
  int v5;
  uint64_t v6;
  unsigned int v7;

  if (a2 == 20)
  {
    v5 = 0x7FFFFFFF;
    if (a1 < 0x7FFFFFFF)
      v5 = a1;
    *(_DWORD *)a4 = v5;
    return 1;
  }
  else if (a2 - 10 > 7)
  {
    if ((_BYTE)a2)
    {
      if (a2 - 4 > 5)
      {
        return 0;
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    v6 = a2;
    v7 = a3;
    return absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl((unsigned __int8 *)&v6, a4, (double)a1);
  }
}

BOOL absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>(uint64_t a1, uint64_t a2, unsigned int a3, char *a4)
{
  uint64_t v5;

  if (a2 != 20)
    return absl::lts_2020_02_25::str_format_internal::FormatConvertImpl(a1, a2, a3, a4);
  v5 = 0xFFFFFFFF80000000;
  if (a1 > (uint64_t)0xFFFFFFFF80000000)
    v5 = a1;
  if (v5 >= 0x7FFFFFFF)
    LODWORD(v5) = 0x7FFFFFFF;
  *(_DWORD *)a4 = v5;
  return 1;
}

BOOL absl::lts_2020_02_25::str_format_internal::FormatConvertImpl(uint64_t a1, uint64_t a2, unsigned int a3, char *a4)
{
  _BYTE *v6;
  unint64_t v7;
  BOOL v8;
  signed int v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  unsigned int v18;
  _BYTE v19[13];

  *(_QWORD *)&v19[5] = *MEMORY[0x24BDAC8D0];
  if (a2 - 10 <= 7)
  {
    v17 = a2;
    v18 = a3;
    return absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl((unsigned __int8 *)&v17, a4, (double)a1);
  }
  if (!(_BYTE)a2)
  {
    return 1;
  }
  if (a2 - 4 > 5)
    return 0;
  if ((a2 & 0xFE) == 4)
  {
    LOBYTE(v17) = a1 < 0;
    v6 = v19;
    if (a1)
    {
      if (a1 >= 0)
        v7 = a1;
      else
        v7 = -a1;
      v6 = v19;
      do
      {
        *--v6 = (v7 % 0xA) | 0x30;
        v8 = v7 > 9;
        v7 /= 0xAuLL;
      }
      while (v8);
    }
    v9 = v19 - (_DWORD)v6;
    HIDWORD(v17) = v9;
    if (a2 == 19 || (a2 & 0x100) == 0)
    {
    }
    else
    {
      if ((_BYTE)v17)
      {
        v10 = (char *)*((_QWORD *)a4 + 3);
        ++*((_QWORD *)a4 + 2);
        if (a4 + 1056 == v10)
        {
          v10 = a4 + 32;
          (*((void (**)(_QWORD, char *, uint64_t))a4 + 1))(*(_QWORD *)a4, a4 + 32, 1024);
          *((_QWORD *)a4 + 3) = v10;
        }
        *v10 = 45;
        ++*((_QWORD *)a4 + 3);
        v9 = HIDWORD(v17);
      }
      v11 = *((_QWORD *)a4 + 2);
      v12 = a4 + 1056;
      if (v9)
      {
        v13 = v9;
        v14 = &v19[-v9];
        *((_QWORD *)a4 + 2) = v11 + v9;
        v15 = (_BYTE *)*((_QWORD *)a4 + 3);
        if (v12 - v15 <= (unint64_t)v9)
        {
          (*((void (**)(_QWORD, char *, int64_t))a4 + 1))(*(_QWORD *)a4, a4 + 32, v15 - (a4 + 32));
          *((_QWORD *)a4 + 3) = a4 + 32;
          (*((void (**)(_QWORD, _BYTE *, uint64_t))a4 + 1))(*(_QWORD *)a4, v14, v13);
        }
        else
        {
          memcpy(v15, v14, v9);
          *((_QWORD *)a4 + 3) += v13;
        }
      }
      else
      {
        *((_QWORD *)a4 + 2) = v11 + 1;
        v16 = (_BYTE *)*((_QWORD *)a4 + 3);
        if (v12 == v16)
        {
          v16 = a4 + 32;
          (*((void (**)(_QWORD, char *, uint64_t))a4 + 1))(*(_QWORD *)a4, a4 + 32, 1024);
          *((_QWORD *)a4 + 3) = a4 + 32;
        }
        *v16 = 48;
        ++*((_QWORD *)a4 + 3);
      }
    }
    return 1;
  }
  return absl::lts_2020_02_25::str_format_internal::FormatConvertImpl(a1, a2, a3, a4);
}

BOOL absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<unsigned long long>(unint64_t a1, uint64_t a2, unsigned int a3, char *a4)
{
  int v5;

  if (a2 != 20)
    return absl::lts_2020_02_25::str_format_internal::FormatConvertImpl(a1, a2, a3, a4);
  v5 = 0x7FFFFFFF;
  if (a1 < 0x7FFFFFFF)
    v5 = a1;
  *(_DWORD *)a4 = v5;
  return 1;
}

BOOL absl::lts_2020_02_25::str_format_internal::FormatConvertImpl(unint64_t a1, uint64_t a2, unsigned int a3, char *a4)
{
  _BYTE *v6;
  BOOL v7;
  uint64_t v8;
  char *v9;
  BOOL v10;
  signed int v11;
  char *v12;
  uint64_t v13;
  _BYTE *v14;
  void *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unsigned int v19;
  _BYTE v20[13];

  *(_QWORD *)&v20[5] = *MEMORY[0x24BDAC8D0];
  if (a2 - 10 <= 7)
  {
    v18 = a2;
    v19 = a3;
    return absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl((unsigned __int8 *)&v18, a4, (double)a1);
  }
  if (!(_BYTE)a2)
  {
    return 1;
  }
  if (a2 - 4 > 5)
    return 0;
  LOBYTE(v18) = 0;
  switch(a2)
  {
    case 9u:
      v8 = 1;
      goto LABEL_16;
    case 8u:
      v8 = 0;
LABEL_16:
      v6 = v20;
      if (a1)
      {
        v6 = v20;
        do
        {
          *--v6 = v9[a1 & 0xF];
          v10 = a1 > 0xF;
          a1 >>= 4;
        }
        while (v10);
      }
      break;
    case 6u:
      if (!a1)
      {
        HIDWORD(v18) = 0;
        if ((a2 & 0x100) != 0)
        {
LABEL_35:
          v17 = (char *)*((_QWORD *)a4 + 3);
          ++*((_QWORD *)a4 + 2);
          if (a4 + 1056 == v17)
          {
            v17 = a4 + 32;
            (*((void (**)(_QWORD, char *, uint64_t))a4 + 1))(*(_QWORD *)a4, a4 + 32, 1024);
            *((_QWORD *)a4 + 3) = a4 + 32;
          }
          *v17 = 48;
          v16 = *((_QWORD *)a4 + 3) + 1;
          goto LABEL_38;
        }
LABEL_34:
        return 1;
      }
      v6 = v20;
      do
      {
        *--v6 = a1 & 7 | 0x30;
        v7 = a1 >= 8;
        a1 >>= 3;
      }
      while (v7);
      break;
    default:
      v6 = v20;
      if (a1)
      {
        v6 = v20;
        do
        {
          *--v6 = (a1 % 0xA) | 0x30;
          v7 = a1 >= 0xA;
          a1 /= 0xAuLL;
        }
        while (v7);
      }
      break;
  }
  v11 = v20 - (_DWORD)v6;
  HIDWORD(v18) = v11;
  if (a2 == 19 || (a2 & 0x100) == 0)
    goto LABEL_34;
  if ((_BYTE)v18)
  {
    v12 = (char *)*((_QWORD *)a4 + 3);
    ++*((_QWORD *)a4 + 2);
    if (a4 + 1056 == v12)
    {
      v12 = a4 + 32;
      (*((void (**)(_QWORD, char *, uint64_t))a4 + 1))(*(_QWORD *)a4, a4 + 32, 1024);
      *((_QWORD *)a4 + 3) = v12;
    }
    *v12 = 45;
    ++*((_QWORD *)a4 + 3);
    v11 = HIDWORD(v18);
  }
  if (!v11)
    goto LABEL_35;
  v13 = v11;
  v14 = &v20[-v11];
  v15 = (void *)*((_QWORD *)a4 + 3);
  *((_QWORD *)a4 + 2) += v11;
  if (a4 - (_BYTE *)v15 + 1056 > (unint64_t)v11)
  {
    memcpy(v15, v14, v11);
    v16 = *((_QWORD *)a4 + 3) + v13;
LABEL_38:
    *((_QWORD *)a4 + 3) = v16;
    return 1;
  }
  (*((void (**)(_QWORD, char *, int64_t))a4 + 1))(*(_QWORD *)a4, a4 + 32, (_BYTE *)v15 - (a4 + 32));
  *((_QWORD *)a4 + 3) = a4 + 32;
  (*((void (**)(_QWORD, _BYTE *, uint64_t))a4 + 1))(*(_QWORD *)a4, v14, v13);
  return 1;
}

BOOL absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>(uint64_t a1, uint64_t a2, int a3, char *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  if (a2 == 20)
    return 0;
  v9 = v4;
  v10 = v5;
  v7 = a2;
  v8 = a3;
  return a2 - 10 <= 7
      && absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl((unsigned __int8 *)&v7, a4, *(double *)&a1);
}

uint64_t absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>(uint64_t a1, uint64_t a2, int a3, char *a4)
{
  int v4;
  void *v5;
  unint64_t v6;
  void *v9;

  if (a2 == 20)
    return 0;
  v4 = *(char *)(a1 + 23);
  v5 = v4 >= 0 ? (void *)a1 : *(void **)a1;
  v6 = v4 >= 0 ? *(unsigned __int8 *)(a1 + 23) : *(_QWORD *)(a1 + 8);
  if (a2 != 2)
    return 0;
  if ((a2 & 0x100) == 0)
    return absl::lts_2020_02_25::str_format_internal::FormatSinkImpl::PutPaddedString(a4, v5, v6, SHIDWORD(a2), a3, (a2 & 0x200) != 0);
  if (!v6)
    return 1;
  v9 = (void *)*((_QWORD *)a4 + 3);
  *((_QWORD *)a4 + 2) += v6;
  if (v6 < a4 - (_BYTE *)v9 + 1056)
  {
    memcpy(v9, v5, v6);
    *((_QWORD *)a4 + 3) += v6;
    return 1;
  }
  (*((void (**)(_QWORD, char *, int64_t))a4 + 1))(*(_QWORD *)a4, a4 + 32, (_BYTE *)v9 - (a4 + 32));
  *((_QWORD *)a4 + 3) = a4 + 32;
  (*((void (**)(_QWORD, void *, unint64_t))a4 + 1))(*(_QWORD *)a4, v5, v6);
  return 1;
}

unint64_t absl::lts_2020_02_25::str_format_internal::`anonymous namespace'::ConvertIntImplInner<unsigned long>(unint64_t result, uint64_t a2, int a3, char *a4)
{
  uint64_t v5;
  _BYTE *v6;
  BOOL v7;
  char *v8;
  BOOL v9;
  signed int v10;
  char *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  char *v16;
  int v17;
  signed int v18;
  _BYTE v19[9];

  *(_QWORD *)&v19[1] = *MEMORY[0x24BDAC8D0];
  LOBYTE(v17) = 0;
  if (a2 > 0x13u)
  {
LABEL_23:
    v6 = v19;
    if (result)
    {
      v6 = v19;
      do
      {
        *--v6 = (result % 0xA) | 0x30;
        v7 = result >= 0xA;
        result /= 0xAuLL;
      }
      while (v7);
    }
    goto LABEL_13;
  }
  v5 = 1;
  if (((1 << a2) & 0x90100) != 0)
  {
    v5 = 0;
LABEL_10:
    v6 = v19;
    if (result)
    {
      v6 = v19;
      do
      {
        *--v6 = v8[result & 0xF];
        v9 = result > 0xF;
        result >>= 4;
      }
      while (v9);
    }
    goto LABEL_13;
  }
  if (((1 << a2) & 0x20200) != 0)
    goto LABEL_10;
  if (a2 != 6)
    goto LABEL_23;
  if (!result)
  {
    v18 = 0;
    if ((a2 & 0x100) != 0)
      goto LABEL_30;
  }
  v6 = v19;
  do
  {
    *--v6 = result & 7 | 0x30;
    v7 = result >= 8;
    result >>= 3;
  }
  while (v7);
LABEL_13:
  v10 = v19 - (_DWORD)v6;
  v18 = v10;
  if (a2 != 19 && (a2 & 0x100) != 0)
  {
    if ((_BYTE)v17)
    {
      v11 = (char *)*((_QWORD *)a4 + 3);
      ++*((_QWORD *)a4 + 2);
      if (a4 + 1056 == v11)
      {
        v11 = a4 + 32;
        result = (*((uint64_t (**)(_QWORD, char *, uint64_t))a4 + 1))(*(_QWORD *)a4, a4 + 32, 1024);
        *((_QWORD *)a4 + 3) = v11;
      }
      *v11 = 45;
      ++*((_QWORD *)a4 + 3);
      v10 = v18;
    }
    if (v10)
    {
      v12 = v10;
      v13 = &v19[-v10];
      v14 = (_BYTE *)*((_QWORD *)a4 + 3);
      *((_QWORD *)a4 + 2) += v10;
      if (a4 - v14 + 1056 <= (unint64_t)v10)
      {
        (*((void (**)(_QWORD, char *, int64_t))a4 + 1))(*(_QWORD *)a4, a4 + 32, v14 - (a4 + 32));
        *((_QWORD *)a4 + 3) = a4 + 32;
        return (*((uint64_t (**)(_QWORD, _BYTE *, uint64_t))a4 + 1))(*(_QWORD *)a4, v13, v12);
      }
      result = (unint64_t)memcpy(v14, v13, v10);
      v15 = *((_QWORD *)a4 + 3) + v12;
      goto LABEL_33;
    }
LABEL_30:
    v16 = (char *)*((_QWORD *)a4 + 3);
    ++*((_QWORD *)a4 + 2);
    if (a4 + 1056 == v16)
    {
      v16 = a4 + 32;
      result = (*((uint64_t (**)(_QWORD, char *, uint64_t))a4 + 1))(*(_QWORD *)a4, a4 + 32, 1024);
      *((_QWORD *)a4 + 3) = a4 + 32;
    }
    *v16 = 48;
    v15 = *((_QWORD *)a4 + 3) + 1;
LABEL_33:
    *((_QWORD *)a4 + 3) = v15;
    return result;
  }
}

int *absl::lts_2020_02_25::str_format_internal::`anonymous namespace'::ConvertIntImplInner(int *result, uint64_t a2, int a3, char *a4)
{
  size_t v5;
  size_t v6;
  BOOL v7;
  size_t v8;
  size_t v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  size_t v14;
  _BYTE *v15;
  size_t v16;
  char v17;
  const char *v18;
  BOOL v19;
  size_t v20;
  int v21;
  size_t v22;
  size_t v23;
  size_t v24;
  size_t v25;
  size_t v26;
  _BYTE *v27;
  _QWORD *v28;
  unint64_t v29;
  size_t v30;
  _BYTE *v31;
  char *v32;
  void *v33;
  _BYTE *v34;
  _BYTE *v35;
  _QWORD *v36;
  unint64_t v37;
  size_t v38;
  _BYTE *v39;
  char *v40;
  void *v41;
  _BYTE *v42;
  _QWORD *v43;
  unint64_t v44;
  size_t v45;
  _BYTE *v46;
  char *v47;
  uint64_t v48;
  const char *v49;
  size_t v50;
  const char *v51;

  v5 = HIDWORD(a2);
  if (a2 < 0)
    v5 = 0;
  v6 = result[1];
  v7 = v5 >= v6;
  v8 = v5 - v6;
  if (!v7)
    v8 = 0;
  v9 = (a2 & 0xFE) == 4;
  if ((a2 & 0xFE) == 4)
    v10 = "-";
  else
    v10 = 0;
  if ((a2 & 0xFE) == 4)
  {
    v11 = "+";
    v12 = 1;
    v13 = " ";
    if ((a2 & 0x800) == 0)
      v13 = 0;
    if ((a2 & 0x400) == 0)
    {
      v12 = (BYTE1(a2) & 8) >> 3;
      v11 = v13;
    }
    if (!*(_BYTE *)result)
    {
      v9 = v12;
      v10 = v11;
    }
  }
  v14 = 0;
  v15 = (char *)result - v6 + 51;
  v7 = v8 >= v9;
  v16 = v8 - v9;
  if (!v7)
    v16 = 0;
  v17 = 1;
  if (a2 > 0x13u)
  {
    v18 = 0;
  }
  else
  {
    v18 = 0;
    if (((1 << a2) & 0xB0300) != 0)
    {
      v14 = 0;
      v18 = 0;
      v19 = (a2 & 0x1000) != 0 || a2 == 19;
      if (v19 && (_DWORD)v6)
      {
        if (a2 <= 0x11u && ((1 << a2) & 0x2AA00) != 0)
        {
          v17 = 0;
          v18 = "0X";
        }
        else
        {
          v17 = 0;
          v18 = "0x";
        }
        v14 = 2;
      }
    }
  }
  v7 = v16 >= v14;
  v20 = v16 - v14;
  if (!v7)
    v20 = 0;
  if (a3 < 0)
    v21 = 1;
  else
    v21 = a3;
  if (a2 == 6 && (a2 & 0x1000) != 0 && (!(_DWORD)v6 || *v15 != 48) && v21 <= (int)v6 + 1)
    v21 = v6 + 1;
  v7 = v21 >= v6;
  v22 = v21 - v6;
  if (v7)
    v23 = v22;
  else
    v23 = 0;
  v7 = v20 >= v23;
  v24 = v20 - v23;
  if (!v7)
    v24 = 0;
  if ((a2 & 0x200) != 0)
    v25 = 0;
  else
    v25 = v24;
  if (a3 < 0 && (a2 & 0x2000) != 0)
  {
    v23 += v25;
    if ((a2 & 0x200) != 0)
      v26 = v24;
    else
      v26 = 0;
  }
  else
  {
    if ((a2 & 0x200) != 0)
      v26 = v24;
    else
      v26 = 0;
    if (v25)
    {
      v49 = v18;
      v50 = v26;
      v51 = v10;
      v48 = (uint64_t)result - v6 + 51;
      v27 = (_BYTE *)*((_QWORD *)a4 + 3);
      *((_QWORD *)a4 + 2) += v25;
      v28 = a4 + 1056;
      v29 = a4 + 1056 - v27;
      v30 = v25 - v29;
      if (v25 <= v29)
      {
        v30 = v24;
        v31 = v27;
        v15 = (_BYTE *)v48;
      }
      else
      {
        v31 = a4 + 32;
        if (v28 == (_QWORD *)v27)
        {
          v32 = a4 + 1056;
        }
        else
        {
          memset(v27, 32, a4 + 1056 - v27);
          v32 = (char *)(*((_QWORD *)a4 + 3) + v29);
          *((_QWORD *)a4 + 3) = v32;
        }
        v15 = (_BYTE *)v48;
        (*((void (**)(_QWORD, char *, int64_t))a4 + 1))(*(_QWORD *)a4, a4 + 32, v32 - v31);
        *((_QWORD *)a4 + 3) = v31;
        if (v30 >= 0x401)
        {
          do
          {
            v30 -= 1024;
            memset(a4 + 32, 32, 0x400uLL);
            *((_QWORD *)a4 + 3) = v28;
            (*((void (**)(_QWORD, char *, uint64_t))a4 + 1))(*(_QWORD *)a4, a4 + 32, 1024);
            *((_QWORD *)a4 + 3) = v31;
          }
          while (v30 > 0x400);
        }
      }
      v10 = v51;
      result = (int *)memset(v31, 32, v30);
      *((_QWORD *)a4 + 3) += v30;
      v18 = v49;
      v26 = v50;
    }
  }
  if (!v9)
  {
LABEL_70:
    if ((v17 & 1) != 0)
      goto LABEL_75;
    goto LABEL_73;
  }
  v33 = (void *)*((_QWORD *)a4 + 3);
  *((_QWORD *)a4 + 2) += v9;
  if (v9 < a4 - (_BYTE *)v33 + 1056)
  {
    result = (int *)memcpy(v33, v10, v9);
    *((_QWORD *)a4 + 3) += v9;
    goto LABEL_70;
  }
  (*((void (**)(_QWORD, char *, int64_t))a4 + 1))(*(_QWORD *)a4, a4 + 32, (_BYTE *)v33 - (a4 + 32));
  *((_QWORD *)a4 + 3) = a4 + 32;
  result = (int *)(*((uint64_t (**)(_QWORD, const char *, size_t))a4 + 1))(*(_QWORD *)a4, v10, v9);
  if ((v17 & 1) != 0)
    goto LABEL_75;
LABEL_73:
  v34 = (_BYTE *)*((_QWORD *)a4 + 3);
  *((_QWORD *)a4 + 2) += v14;
  if (v14 >= a4 - v34 + 1056)
  {
    (*((void (**)(_QWORD, char *, int64_t))a4 + 1))(*(_QWORD *)a4, a4 + 32, v34 - (a4 + 32));
    *((_QWORD *)a4 + 3) = a4 + 32;
    result = (int *)(*((uint64_t (**)(_QWORD, const char *, size_t))a4 + 1))(*(_QWORD *)a4, v18, v14);
    if (!v23)
      goto LABEL_86;
    goto LABEL_76;
  }
  result = (int *)memcpy(v34, v18, v14);
  *((_QWORD *)a4 + 3) += v14;
LABEL_75:
  if (!v23)
    goto LABEL_86;
LABEL_76:
  v35 = (_BYTE *)*((_QWORD *)a4 + 3);
  *((_QWORD *)a4 + 2) += v23;
  v36 = a4 + 1056;
  v37 = a4 + 1056 - v35;
  v38 = v23 - v37;
  if (v23 <= v37)
  {
    v38 = v23;
    v39 = v35;
  }
  else
  {
    v39 = a4 + 32;
    if (v36 == (_QWORD *)v35)
    {
      v40 = a4 + 1056;
    }
    else
    {
      memset(v35, 48, a4 + 1056 - v35);
      v40 = (char *)(*((_QWORD *)a4 + 3) + v37);
      *((_QWORD *)a4 + 3) = v40;
    }
    (*((void (**)(_QWORD, char *, int64_t))a4 + 1))(*(_QWORD *)a4, a4 + 32, v40 - v39);
    *((_QWORD *)a4 + 3) = v39;
    if (v38 >= 0x401)
    {
      do
      {
        v38 -= 1024;
        memset(a4 + 32, 48, 0x400uLL);
        *((_QWORD *)a4 + 3) = v36;
        (*((void (**)(_QWORD, char *, uint64_t))a4 + 1))(*(_QWORD *)a4, a4 + 32, 1024);
        *((_QWORD *)a4 + 3) = v39;
      }
      while (v38 > 0x400);
    }
  }
  result = (int *)memset(v39, 48, v38);
  *((_QWORD *)a4 + 3) += v38;
LABEL_86:
  if (!(_DWORD)v6)
    goto LABEL_89;
  v41 = (void *)*((_QWORD *)a4 + 3);
  *((_QWORD *)a4 + 2) += v6;
  if (a4 - (_BYTE *)v41 + 1056 > v6)
  {
    result = (int *)memcpy(v41, v15, v6);
    *((_QWORD *)a4 + 3) += v6;
LABEL_89:
    if (!v26)
      return result;
    goto LABEL_92;
  }
  (*((void (**)(_QWORD, char *, int64_t))a4 + 1))(*(_QWORD *)a4, a4 + 32, (_BYTE *)v41 - (a4 + 32));
  *((_QWORD *)a4 + 3) = a4 + 32;
  result = (int *)(*((uint64_t (**)(_QWORD, _BYTE *, size_t))a4 + 1))(*(_QWORD *)a4, v15, v6);
  if (!v26)
    return result;
LABEL_92:
  v42 = (_BYTE *)*((_QWORD *)a4 + 3);
  *((_QWORD *)a4 + 2) += v26;
  v43 = a4 + 1056;
  v44 = a4 + 1056 - v42;
  v45 = v26 - v44;
  if (v26 <= v44)
  {
    v45 = v26;
    v46 = v42;
  }
  else
  {
    v46 = a4 + 32;
    if (v43 == (_QWORD *)v42)
    {
      v47 = a4 + 1056;
    }
    else
    {
      memset(v42, 32, a4 + 1056 - v42);
      v47 = (char *)(*((_QWORD *)a4 + 3) + v44);
      *((_QWORD *)a4 + 3) = v47;
    }
    (*((void (**)(_QWORD, char *, int64_t))a4 + 1))(*(_QWORD *)a4, a4 + 32, v47 - v46);
    *((_QWORD *)a4 + 3) = v46;
    if (v45 >= 0x401)
    {
      do
      {
        v45 -= 1024;
        memset(a4 + 32, 32, 0x400uLL);
        *((_QWORD *)a4 + 3) = v43;
        (*((void (**)(_QWORD, char *, uint64_t))a4 + 1))(*(_QWORD *)a4, a4 + 32, 1024);
        *((_QWORD *)a4 + 3) = v46;
      }
      while (v45 > 0x400);
    }
  }
  result = (int *)memset(v46, 32, v45);
  *((_QWORD *)a4 + 3) += v45;
  return result;
}

char *absl::lts_2020_02_25::str_format_internal::`anonymous namespace'::ConvertCharImpl(char a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  __int16 v5;
  uint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  _QWORD *v10;
  unint64_t v11;
  size_t v12;
  _BYTE *v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  char *result;
  int64_t v18;
  size_t v19;
  char *v20;
  char *v21;

  v5 = a2;
  if (HIDWORD(a2))
    v7 = HIDWORD(a2) - 1;
  else
    v7 = 0;
  if (a2 >= 0)
    v8 = v7;
  else
    v8 = 0;
  if ((a2 & 0x200) != 0 || !v8)
  {
    v15 = (_BYTE *)a4[3];
    ++a4[2];
    v16 = (char *)(a4 + 132);
    if (a4 + 132 == (_QWORD *)v15)
    {
LABEL_19:
      v15 = a4 + 4;
      ((void (*)(_QWORD, _QWORD *, uint64_t))a4[1])(*a4, a4 + 4, 1024);
      a4[3] = a4 + 4;
    }
  }
  else
  {
    v9 = (_BYTE *)a4[3];
    a4[2] += v8;
    v10 = a4 + 132;
    v11 = (char *)(a4 + 132) - v9;
    v12 = v8 - v11;
    if (v8 <= v11)
    {
      v12 = v7;
      v13 = v9;
    }
    else
    {
      v13 = a4 + 4;
      if (v10 == (_QWORD *)v9)
      {
        v14 = (char *)(a4 + 132);
      }
      else
      {
        memset(v9, 32, (char *)(a4 + 132) - v9);
        v14 = (char *)(a4[3] + v11);
        a4[3] = v14;
      }
      ((void (*)(_QWORD, _QWORD *, int64_t))a4[1])(*a4, a4 + 4, v14 - v13);
      a4[3] = v13;
      if (v12 >= 0x401)
      {
        do
        {
          v12 -= 1024;
          memset(a4 + 4, 32, 0x400uLL);
          a4[3] = v10;
          ((void (*)(_QWORD, _QWORD *, uint64_t))a4[1])(*a4, a4 + 4, 1024);
          a4[3] = v13;
        }
        while (v12 > 0x400);
      }
    }
    memset(v13, 32, v12);
    v15 = (_BYTE *)(a4[3] + v12);
    ++a4[2];
    a4[3] = v15;
    v16 = (char *)(a4 + 132);
    if (a4 + 132 == (_QWORD *)v15)
      goto LABEL_19;
  }
  *v15 = a1;
  result = (char *)(a4[3] + 1);
  a4[3] = result;
  if ((v5 & 0x200) != 0 && v8)
  {
    a4[2] += v8;
    v18 = v16 - result;
    v19 = v8 - (v16 - result);
    if (v8 <= v16 - result)
    {
      v19 = v7;
      v20 = result;
    }
    else
    {
      v20 = (char *)(a4 + 4);
      if (v16 == result)
      {
        v21 = v16;
      }
      else
      {
        memset(result, 32, v16 - result);
        v21 = (char *)(a4[3] + v18);
        a4[3] = v21;
      }
      ((void (*)(_QWORD, _QWORD *, int64_t))a4[1])(*a4, a4 + 4, v21 - v20);
      a4[3] = v20;
      if (v19 >= 0x401)
      {
        do
        {
          v19 -= 1024;
          memset(a4 + 4, 32, 0x400uLL);
          a4[3] = v16;
          ((void (*)(_QWORD, _QWORD *, uint64_t))a4[1])(*a4, a4 + 4, 1024);
          a4[3] = v20;
        }
        while (v19 > 0x400);
      }
    }
    result = (char *)memset(v20, 32, v19);
    a4[3] += v19;
  }
  return result;
}

void absl::lts_2020_02_25::str_format_internal::FormatSinkImpl::~FormatSinkImpl(absl::lts_2020_02_25::str_format_internal::FormatSinkImpl *this)
{
  char *v2;

  v2 = (char *)this + 32;
  (*((void (**)(_QWORD, char *, _QWORD))this + 1))(*(_QWORD *)this, (char *)this + 32, *((_QWORD *)this + 3) - ((_QWORD)this + 32));
  *((_QWORD *)this + 3) = v2;
}

unint64_t absl::lts_2020_02_25::str_format_internal::FormatUntyped(uint64_t a1, void (*a2)(uint64_t, char *, int64_t), unsigned __int8 *__s, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  size_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  char *v19;
  char *v20;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  __int16 v27;
  char v28;
  int v29;
  uint64_t v30;
  void (*v31)(uint64_t, char *, int64_t);
  uint64_t v32;
  char *v33;
  _BYTE v34[1024];
  _QWORD v35[2];

  v6 = (unint64_t)__s;
  v35[0] = *MEMORY[0x24BDAC8D0];
  v30 = a1;
  v31 = a2;
  v32 = 0;
  v33 = v34;
  if (a4 == -1)
  {
    v22 = &v30;
    v23 = a5;
    v24 = a6;
    v16 = *((_QWORD *)__s + 2);
    v17 = *((_QWORD *)__s + 3);
    if (v16 != v17)
    {
      v18 = 0;
      v19 = (char *)*((_QWORD *)__s + 1);
      v20 = v19;
      do
      {
        v20 += v18;
        v18 = &v19[*(_QWORD *)(v16 + 8)] - v20;
        if (*(_BYTE *)v16)
        {
          {
LABEL_22:
            v6 = 0;
            goto LABEL_39;
          }
        }
        else if (v18)
        {
          v32 += v18;
          if (v18 < (char *)v35 - v33)
          {
            memcpy(v33, v20, v18);
            v33 += v18;
          }
          else
          {
            v31(v30, v34, v33 - v34);
            v33 = v34;
            v31(v30, v20, v18);
          }
        }
        v16 += 32;
      }
      while (v16 != v17);
    }
    v6 = *(_BYTE *)v6 == 0;
    goto LABEL_39;
  }
  v22 = &v30;
  v23 = a5;
  v24 = a6;
  v29 = 0;
  if (!a4)
    goto LABEL_38;
  v7 = &__s[a4];
  while (1)
  {
    v8 = (unint64_t)&v7[-v6];
    v9 = memchr((void *)v6, 37, (size_t)&v7[-v6]);
    if (!v9)
      break;
    v10 = v9;
    v11 = (size_t)&v9[-v6];
    if (v9 != (_BYTE *)v6)
    {
      v32 += v11;
      if (v11 >= (char *)v35 - v33)
      {
        v31(v30, v34, v33 - v34);
        v33 = v34;
        v31(v30, (char *)v6, v11);
      }
      else
      {
        memcpy(v33, (const void *)v6, v11);
        v33 += v11;
      }
    }
    v12 = v10 + 1;
    if (v10 + 1 >= v7)
      goto LABEL_22;
    v13 = *v12;
    v14 = absl::lts_2020_02_25::str_format_internal::kTags[v13];
    if ((v14 & 0x80000000) == 0)
    {
      v15 = v29;
      if (v29 < 0)
        goto LABEL_22;
      v26 = -1;
      v27 = 2305;
      v28 = v14;
      ++v29;
      v25 = v15 + 1;
      goto LABEL_5;
    }
    if ((_DWORD)v13 == 37)
    {
      ++v32;
      if ((unint64_t)((char *)v35 - v33) > 1)
      {
        *v33++ = 37;
      }
      else
      {
        v31(v30, v34, v33 - v34);
        v33 = v34;
        v31(v30, "%", 1);
      }
LABEL_5:
      v6 = (unint64_t)(v10 + 2);
      goto LABEL_6;
    }
    v26 = -1;
    v28 = 20;
    v27 = 2305;
    v6 = (unint64_t)absl::lts_2020_02_25::str_format_internal::ConsumeUnboundConversion((uint64_t)v12, v7, (uint64_t)&v25, &v29);
    if (!v6)
      goto LABEL_39;
LABEL_6:
    if ((unsigned __int8 *)v6 == v7)
      goto LABEL_38;
  }
  if (v7 != (unsigned __int8 *)v6)
  {
    v32 += v8;
    if (v8 >= (char *)v35 - v33)
    {
      v31(v30, v34, v33 - v34);
      v33 = v34;
      v31(v30, (char *)v6, (int64_t)&v7[-v6]);
    }
    else
    {
      memcpy(v33, (const void *)v6, (size_t)&v7[-v6]);
      v33 += v8;
    }
  }
LABEL_38:
  v6 = 1;
LABEL_39:
  v31(v30, v34, v33 - v34);
  return v6;
}

void sub_22D9D5150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  absl::lts_2020_02_25::str_format_internal::FormatSinkImpl::~FormatSinkImpl((absl::lts_2020_02_25::str_format_internal::FormatSinkImpl *)va);
  _Unwind_Resume(a1);
}

uint64_t absl::lts_2020_02_25::str_format_internal::AppendPack(uint64_t a1, unsigned __int8 *__s, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::string::size_type v6;

  if (*(char *)(a1 + 23) < 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    if ((absl::lts_2020_02_25::str_format_internal::FormatUntyped(a1, (void (*)(uint64_t, char *, int64_t))absl::lts_2020_02_25::str_format_internal::FormatRawSinkImpl::Flush<std::string>, __s, a3, a4, a5) & 1) != 0)return a1;
  }
  else
  {
    v6 = *(unsigned __int8 *)(a1 + 23);
    if ((absl::lts_2020_02_25::str_format_internal::FormatUntyped(a1, (void (*)(uint64_t, char *, int64_t))absl::lts_2020_02_25::str_format_internal::FormatRawSinkImpl::Flush<std::string>, __s, a3, a4, a5) & 1) != 0)return a1;
  }
  std::string::erase((std::string *)a1, v6, 0xFFFFFFFFFFFFFFFFLL);
  return a1;
}

unint64_t absl::lts_2020_02_25::str_format_internal::FormatPack@<X0>(unsigned __int8 *__s@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t result;

  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  result = absl::lts_2020_02_25::str_format_internal::FormatUntyped(a5, (void (*)(uint64_t, char *, int64_t))absl::lts_2020_02_25::str_format_internal::FormatRawSinkImpl::Flush<std::string>, __s, a2, a3, a4);
  if ((result & 1) == 0)
  {
    if (*(char *)(a5 + 23) < 0)
    {
      **(_BYTE **)a5 = 0;
      *(_QWORD *)(a5 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a5 = 0;
      *(_BYTE *)(a5 + 23) = 0;
    }
  }
  return result;
}

void sub_22D9D5280(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unint64_t absl::lts_2020_02_25::str_format_internal::FprintF(uint64_t a1, unsigned __int8 *__s, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  int *v6;
  int v7;
  unint64_t result;
  uint64_t v9;
  int v10;
  unint64_t v11;

  v9 = a1;
  v10 = 0;
  v11 = 0;
  if ((absl::lts_2020_02_25::str_format_internal::FormatUntyped((uint64_t)&v9, (void (*)(uint64_t, char *, int64_t))absl::lts_2020_02_25::str_format_internal::FormatRawSinkImpl::Flush<absl::lts_2020_02_25::str_format_internal::FILERawSink>, __s, a3, a4, a5) & 1) == 0)
  {
    v6 = __error();
    v7 = 22;
LABEL_5:
    *v6 = v7;
    return 0xFFFFFFFFLL;
  }
  v5 = v10;
  if (v10)
  {
    *__error() = v5;
    return 0xFFFFFFFFLL;
  }
  result = v11;
  if (v11 >> 31)
  {
    v6 = __error();
    v7 = 27;
    goto LABEL_5;
  }
  return result;
}

uint64_t absl::lts_2020_02_25::str_format_internal::`anonymous namespace'::ConverterConsumer<absl::lts_2020_02_25::str_format_internal::`anonymous namespace'::DefaultConverter>::ConvertOne(_QWORD *a1, int *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  unsigned __int8 v16;
  int v17;
  unsigned int v18;

  v2 = *a2 - 1;
  v3 = a1[2];
  if (v3 <= v2)
    return 0;
  v6 = a1[1];
  v7 = *((unsigned __int8 *)a2 + 12);
  if ((v7 & 1) == 0)
  {
    v8 = a2[1];
    v18 = v8;
    if ((int)v8 > -2)
    {
      v9 = 0;
      v10 = a2[2];
      v17 = v10;
      if ((int)v10 > -2)
      {
LABEL_19:
        v15 = v8 << 32;
        v16 = *((_BYTE *)a2 + 12);
        if (v9)
          v16 |= 2u;
        v11 = v15 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v16 << 8);
        return (*(uint64_t (**)(_QWORD, unint64_t, _QWORD, _QWORD))(v6 + 16 * v2 + 8))(*(_QWORD *)(v6 + 16 * v2), v11 | *((unsigned __int8 *)a2 + 14), v10, *a1);
      }
    }
    else
    {
      if (v3 < ~(_DWORD)v8
        || !(*(unsigned int (**)(_QWORD, uint64_t, _QWORD, unsigned int *))(v6 + 16 * (4294967294 - v8) + 8))(*(_QWORD *)(v6 + 16 * (4294967294 - v8)), 20, 0, &v18))
      {
        return 0;
      }
      v8 = v18;
      if ((v18 & 0x80000000) != 0)
      {
        if (v18 <= 0x80000001)
          v14 = -2147483647;
        else
          v14 = v18;
        v8 = -v14;
        v9 = 1;
        v10 = a2[2];
        v17 = v10;
        v18 = v8;
        if ((int)v10 > -2)
          goto LABEL_19;
      }
      else
      {
        v9 = 0;
        v10 = a2[2];
        v17 = v10;
        if ((int)v10 > -2)
          goto LABEL_19;
      }
    }
    if (a1[2] >= (unint64_t)~(_DWORD)v10)
    {
      v12 = a1[1] + 16 * (4294967294 - v10);
      if ((*(unsigned int (**)(_QWORD, uint64_t, _QWORD, int *))(v12 + 8))(*(_QWORD *)v12, 20, 0, &v17))
      {
        LODWORD(v10) = v17;
        v8 = v18;
        goto LABEL_19;
      }
    }
    return 0;
  }
  v11 = (v7 << 8) | 0xFFFFFFFF00000000;
  LODWORD(v10) = -1;
  return (*(uint64_t (**)(_QWORD, unint64_t, _QWORD, _QWORD))(v6 + 16 * v2 + 8))(*(_QWORD *)(v6 + 16 * v2), v11 | *((unsigned __int8 *)a2 + 14), v10, *a1);
}

std::string *absl::lts_2020_02_25::str_format_internal::Flags::ToString@<X0>(absl::lts_2020_02_25::str_format_internal::Flags *this@<X0>, std::string *a2@<X8>)
{
  const std::string::value_type *v4;
  const std::string::value_type *v5;
  const std::string::value_type *v6;
  const std::string::value_type *v7;
  const std::string::value_type *v8;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if ((*(_BYTE *)this & 2) != 0)
    v4 = "-";
  else
    v4 = "";
  std::string::append(a2, v4);
  if ((*(_BYTE *)this & 4) != 0)
    v5 = "+";
  else
    v5 = "";
  std::string::append(a2, v5);
  if ((*(_BYTE *)this & 8) != 0)
    v6 = " ";
  else
    v6 = "";
  std::string::append(a2, v6);
  if ((*(_BYTE *)this & 0x10) != 0)
    v7 = "#";
  else
    v7 = "";
  std::string::append(a2, v7);
  if ((*(_BYTE *)this & 0x20) != 0)
    v8 = "0";
  else
    v8 = "";
  return std::string::append(a2, v8);
}

void sub_22D9D5584(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t absl::lts_2020_02_25::str_format_internal::FormatSinkImpl::PutPaddedString(char *a1, void *__src, unint64_t a3, int a4, int a5, char a6)
{
  size_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  void *v12;
  _BYTE *v13;
  _QWORD *v14;
  unint64_t v15;
  size_t v16;
  _BYTE *v17;
  char *v18;
  _BYTE *v19;
  _QWORD *v20;
  unint64_t v21;
  _BYTE *v22;
  char *v23;
  void *v24;

  v8 = a4 & ~(a4 >> 31);
  v9 = a5;
  if (a3 < a5)
    v9 = a3;
  if (a5 >= 0)
    v10 = v9;
  else
    v10 = a3;
  if (v8 >= v10)
    v11 = v8 - v10;
  else
    v11 = 0;
  if ((a6 & 1) != 0)
  {
    if (!v10)
      goto LABEL_13;
    v12 = (void *)*((_QWORD *)a1 + 3);
    *((_QWORD *)a1 + 2) += v10;
    if (v10 < a1 - (_BYTE *)v12 + 1056)
    {
      memcpy(v12, __src, v10);
      *((_QWORD *)a1 + 3) += v10;
LABEL_13:
      if (v10 >= v8)
        return 1;
      goto LABEL_20;
    }
    (*((void (**)(_QWORD, char *, int64_t))a1 + 1))(*(_QWORD *)a1, a1 + 32, (_BYTE *)v12 - (a1 + 32));
    *((_QWORD *)a1 + 3) = a1 + 32;
    (*((void (**)(_QWORD, void *, size_t))a1 + 1))(*(_QWORD *)a1, __src, v10);
    if (v10 < v8)
    {
LABEL_20:
      v19 = (_BYTE *)*((_QWORD *)a1 + 3);
      *((_QWORD *)a1 + 2) += v11;
      v20 = a1 + 1056;
      v21 = a1 + 1056 - v19;
      v10 = v11 - v21;
      if (v11 <= v21)
      {
        v10 = v11;
        v22 = v19;
      }
      else
      {
        v22 = a1 + 32;
        if (v20 == (_QWORD *)v19)
        {
          v23 = a1 + 1056;
        }
        else
        {
          memset(v19, 32, a1 + 1056 - v19);
          v23 = (char *)(*((_QWORD *)a1 + 3) + v21);
          *((_QWORD *)a1 + 3) = v23;
        }
        (*((void (**)(_QWORD, char *, int64_t))a1 + 1))(*(_QWORD *)a1, a1 + 32, v23 - v22);
        *((_QWORD *)a1 + 3) = v22;
        if (v10 >= 0x401)
        {
          do
          {
            v10 -= 1024;
            memset(a1 + 32, 32, 0x400uLL);
            *((_QWORD *)a1 + 3) = v20;
            (*((void (**)(_QWORD, char *, uint64_t))a1 + 1))(*(_QWORD *)a1, a1 + 32, 1024);
            *((_QWORD *)a1 + 3) = v22;
          }
          while (v10 > 0x400);
        }
      }
      memset(v22, 32, v10);
      goto LABEL_37;
    }
  }
  else
  {
    if (v10 < v8)
    {
      v13 = (_BYTE *)*((_QWORD *)a1 + 3);
      *((_QWORD *)a1 + 2) += v11;
      v14 = a1 + 1056;
      v15 = a1 + 1056 - v13;
      v16 = v11 - v15;
      if (v11 <= v15)
      {
        v16 = v11;
        v17 = v13;
      }
      else
      {
        v17 = a1 + 32;
        if (v14 == (_QWORD *)v13)
        {
          v18 = a1 + 1056;
        }
        else
        {
          memset(v13, 32, a1 + 1056 - v13);
          v18 = (char *)(*((_QWORD *)a1 + 3) + v15);
          *((_QWORD *)a1 + 3) = v18;
        }
        (*((void (**)(_QWORD, char *, int64_t))a1 + 1))(*(_QWORD *)a1, a1 + 32, v18 - v17);
        *((_QWORD *)a1 + 3) = v17;
        if (v16 >= 0x401)
        {
          do
          {
            v16 -= 1024;
            memset(a1 + 32, 32, 0x400uLL);
            *((_QWORD *)a1 + 3) = v14;
            (*((void (**)(_QWORD, char *, uint64_t))a1 + 1))(*(_QWORD *)a1, a1 + 32, 1024);
            *((_QWORD *)a1 + 3) = v17;
          }
          while (v16 > 0x400);
        }
      }
      memset(v17, 32, v16);
      *((_QWORD *)a1 + 3) += v16;
    }
    if (v10)
    {
      v24 = (void *)*((_QWORD *)a1 + 3);
      *((_QWORD *)a1 + 2) += v10;
      if (v10 < a1 - (_BYTE *)v24 + 1056)
      {
        memcpy(v24, __src, v10);
LABEL_37:
        *((_QWORD *)a1 + 3) += v10;
        return 1;
      }
      (*((void (**)(_QWORD, char *, int64_t))a1 + 1))(*(_QWORD *)a1, a1 + 32, (_BYTE *)v24 - (a1 + 32));
      *((_QWORD *)a1 + 3) = a1 + 32;
      (*((void (**)(_QWORD, void *, size_t))a1 + 1))(*(_QWORD *)a1, __src, v10);
    }
  }
  return 1;
}

BOOL absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl(unsigned __int8 *a1, char *a2, double a3)
{
  uint64_t v6;
  int *v7;
  double v8;
  unsigned int v9;
  char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;
  long double v14;
  uint64_t v15;
  double v16;
  unsigned int v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _BYTE *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  _BYTE *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  _BYTE *v64;
  char v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  _BYTE *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  int v74;
  _BYTE *v75;
  BOOL v76;
  _BYTE *v77;
  unsigned __int8 *v78;
  int v79;
  unsigned int v80;
  int v81;
  _BYTE *v82;
  _BYTE *v83;
  int v84;
  unint64_t v85;
  int v86;
  _BYTE *v87;
  unsigned int v88;
  int __e[10];
  _BYTE v90[45];
  _BYTE v91[3];
  void *__dst;
  _BYTE *v93;
  uint64_t v94;

  v94 = *MEMORY[0x24BDAC8D0];
  if ((*(_QWORD *)&a3 & 0x8000000000000000) != 0)
  {
    v8 = -a3;
    v6 = 45;
  }
  else
  {
    if ((a1[1] & 4) != 0)
    {
      v6 = 43;
    }
    else
    {
      if ((a1[1] & 8) == 0)
      {
        v6 = 0;
        v7 = __e;
        v8 = a3;
        goto LABEL_10;
      }
      v6 = 32;
    }
    v8 = a3;
  }
  v7 = (int *)((char *)__e + 1);
  LOBYTE(__e[0]) = v6;
LABEL_10:
  if (fabs(v8) == INFINITY)
  {
    v9 = *a1 - 9;
    v10 = v9 > 8 ? "inf" : off_24F97F5B8[(char)v9];
    v11 = *(_WORD *)v10;
    *((_BYTE *)v7 + 2) = v10[2];
    *(_WORD *)v7 = v11;
    if ((absl::lts_2020_02_25::str_format_internal::FormatSinkImpl::PutPaddedString(a2, __e, (char *)v7 - (char *)__e + 3, *((_DWORD *)a1 + 1), -1, (a1[1] & 2) != 0) & 1) != 0)return 1;
  }
  v12 = *((_DWORD *)a1 + 2);
  if (v12 >= 0)
    v13 = v12;
  else
    v13 = 6;
  v88 = 0;
  __e[0] = 0;
  v14 = frexp(v8, __e);
  v16 = ldexp(v14, 53);
  v17 = __e[0] - 53;
  switch(*a1)
  {
    case 0xAu:
    case 0xBu:
      if (v13 > 0x27)
      v30 = (unint64_t)v16;
      __dst = v90;
      v93 = v90;
      if (__e[0] < 53)
      {
        if (v17 < 0xFFFFFFC4)
        {
          if (v17 < 0xFFFFFF84)
          *(_OWORD *)&v40 = (unsigned __int128)v16;
          v42 = (unsigned __int128)v16;
          v43 = (unsigned __int128)v16 >> 64;
          v44 = 53 - LOBYTE(__e[0]);
          if (((53 - LOBYTE(__e[0])) & 0x40) != 0)
            v45 = -1 << v44;
          else
            v45 = (-1 << v44) | (0x7FFFFFFFFFFFFFFFuLL >> ~v44);
          if (((53 - LOBYTE(__e[0])) & 0x40) != 0)
            v46 = 0;
          else
            v46 = -1 << v44;
          v47 = v41 >> v44;
          if (((53 - LOBYTE(__e[0])) & 0x40) != 0)
            v48 = 0;
          else
            v48 = v41 >> v44;
          if (((53 - LOBYTE(__e[0])) & 0x40) != 0)
            v49 = v47;
          else
            v49 = ((2 * v43) << ~(53 - LOBYTE(__e[0]))) | (v40 >> v44);
          v50 = ~v46;
          v51 = ~v45;
          v52 = ~v46 & v42;
          v53 = ~v45 & v43;
          if ((_DWORD)v13)
          {
            v54 = v13 + 1;
            do
            {
              v55 = v93;
              if (v93 >= v91)
                absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl(v35, v36, v37);
              v56 = (__PAIR128__(v53, v52) * 0xA) >> 64;
              v57 = 10 * v52;
              v58 = v56 >> v44;
              v35 = v57 >> v44;
              if ((v44 & 0x40) == 0)
                v58 = ((2 * v56) << ~v44) | (v57 >> v44);
              ++v93;
              *v55 = v58 + 48;
              v53 = v56 & v51;
              v52 = v57 & v50;
              --v54;
            }
            while (v54 > 1);
          }
          v59 = (__PAIR128__(v53, v52) * 0xA) >> 64;
          v60 = 10 * v52;
          v61 = v59 >> v44;
          if ((v44 & 0x40) == 0)
            v61 = ((2 * v59) << ~v44) | (v60 >> v44);
          if ((int)v61 < 6)
          {
            if ((_DWORD)v61 != 5)
              goto LABEL_134;
            v85 = v60 & v50;
            v62 = (unint64_t)v93;
            if (!(v85 | v59 & v51))
            {
              v86 = *(v93 - 1);
              if (v86 == 46)
                LOBYTE(v86) = *(v93 - 2);
              if (((char)v86 & 0x80000001) != 1)
                goto LABEL_134;
            }
          }
          else
          {
            v62 = (unint64_t)v93;
          }
          v87 = __dst;
          if ((unint64_t)__dst >= v62)
            absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl(v35, v36, v37);
          v83 = (_BYTE *)(v62 - 1);
          while (1)
          {
            v84 = *v83;
            if (v84 != 46)
            {
              if (v84 != 57)
                goto LABEL_132;
              *v83 = 48;
              v87 = __dst;
            }
            if (--v83 < v87)
              goto LABEL_133;
          }
        }
        v65 = 53 - LOBYTE(__e[0]);
        v66 = ~(-1 << v65);
        v67 = v66 & v30;
        if ((_DWORD)v13)
        {
          v68 = v13 + 1;
          do
          {
            v69 = v93;
            if (v93 >= v91)
              absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl(v35, v36, v37);
            v70 = 10 * v67;
            ++v93;
            *v69 = (v70 >> v65) + 48;
            v67 = v70 & v66;
            --v68;
          }
          while (v68 > 1);
        }
        v71 = 10 * v67;
        v72 = (10 * v67) >> v65;
        if ((int)v72 < 6)
        {
          if ((_DWORD)v72 != 5)
            goto LABEL_134;
          v73 = (unint64_t)v93;
          if ((v71 & v66) == 0)
          {
            v81 = *(v93 - 1);
            if (v81 == 46)
              LOBYTE(v81) = *(v93 - 2);
            if (((char)v81 & 0x80000001) != 1)
              goto LABEL_134;
          }
        }
        else
        {
          v73 = (unint64_t)v93;
        }
        v82 = __dst;
        if ((unint64_t)__dst >= v73)
          absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl(v35, v36, v37);
        v83 = (_BYTE *)(v73 - 1);
        do
        {
          v84 = *v83;
          if (v84 != 46)
          {
            if (v84 != 57)
            {
LABEL_132:
              *v83 = v84 + 1;
              goto LABEL_134;
            }
            *v83 = 48;
            v82 = __dst;
          }
          --v83;
        }
        while (v83 >= v82);
LABEL_133:
        *v83 = 49;
        __dst = v83;
      }
      else
      {
        if (v17 > 0xB)
        {
          if (v17 <= 0x4B)
          {
            *(_OWORD *)&v31 = (unsigned __int128)v16;
            if ((v17 & 0x40) != 0)
              v33 = v31 << v17;
            else
              v33 = (v32 << v17) | (v31 >> 1 >> ~(_BYTE)v17);
            if ((v17 & 0x40) != 0)
              v34 = 0;
            else
              v34 = v31 << v17;
            if ((_DWORD)v13)
            {
              v38 = v13 + 1;
              do
              {
                v39 = v93;
                if (v93 >= v91)
                  absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl(v35, v36, v37);
                ++v93;
                *v39 = 48;
                --v38;
              }
              while (v38 > 1);
            }
            goto LABEL_134;
          }
        }
        if ((_DWORD)v13)
        {
          v63 = v13 + 1;
          do
          {
            v64 = v93;
            if (v93 >= v91)
              absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl(v35, v36, v37);
            ++v93;
            *v64 = 48;
            --v63;
          }
          while (v63 > 1);
        }
      }
LABEL_134:
      if ((a1[1] & 0x10) == 0)
      {
        if (__dst >= v93)
          absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl(v35, v36, v37);
        if (*(v93 - 1) == 46)
          --v93;
      }
LABEL_138:
      return 1;
    case 0xCu:
    case 0xDu:
      if ((v25 & 1) == 0)
      if ((a1[1] & 0x10) == 0)
      {
        if (__dst >= v93)
          absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl(v25, v26, v27);
        if (*(v93 - 1) == 46)
          --v93;
      }
      v21 = v88;
      v28 = *a1 - 9;
      if (v28 > 8)
        v29 = 101;
      else
        v29 = aEeeeeeeee[(char)v28];
      goto LABEL_78;
    case 0xEu:
    case 0xFu:
      if ((int)v13 <= 1)
        LODWORD(v13) = 1;
      v21 = v88;
      if ((int)v13 > (int)v88 && (int)v88 >= -4)
      {
        if ((v88 & 0x80000000) != 0)
        {
          *((_BYTE *)__dst + 1) = *(_BYTE *)__dst;
          if ((_DWORD)v21 != -1)
          {
            v74 = v21 + 1;
            do
            {
              v75 = __dst;
              __dst = (char *)__dst - 1;
              *v75 = 48;
              v76 = __CFADD__(v74++, 1);
            }
            while (!v76);
          }
          v21 = 0;
          v77 = __dst;
          __dst = (char *)__dst - 1;
          *v77 = 46;
          *(_BYTE *)__dst = 48;
        }
        else if (v88)
        {
          v22 = (char *)__dst + 1;
          v23 = *((_BYTE *)__dst + 1);
          v24 = v88;
          memmove((char *)__dst + 1, (char *)__dst + 2, v88);
          v21 = 0;
          v22[v24] = v23;
        }
      }
      if ((a1[1] & 0x10) == 0)
      {
        if (__dst >= v93)
LABEL_101:
          absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl(v21, v19, v20);
        v78 = v93 - 1;
        while (1)
        {
          v79 = *v78;
          if (v79 != 48)
            break;
          v93 = v78;
          v76 = __dst >= v78--;
          if (v76)
            goto LABEL_101;
        }
        if (v79 == 46)
        {
          if (__dst >= v78 + 1)
            absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl(v21, v19, v20);
          v93 = v78;
        }
      }
      if ((_DWORD)v21)
      {
        v80 = *a1 - 9;
        if (v80 > 8)
          v29 = 101;
        else
          v29 = aEeeeeeeee[(char)v80];
LABEL_78:
      }
      goto LABEL_138;
    case 0x10u:
    case 0x11u:
    default:
      return 0;
  }
}

uint64_t absl::lts_2020_02_25::str_format_internal::`anonymous namespace'::PrintExponent(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE *v3;
  unint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v9;

  v3 = *(_BYTE **)(a3 + 96);
  v4 = a3 + 85;
  if ((unint64_t)v3 >= a3 + 85)
    absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl(result, a2, a3);
  *(_QWORD *)(a3 + 96) = v3 + 1;
  *v3 = a2;
  v5 = *(_BYTE **)(a3 + 96);
  if ((result & 0x80000000) != 0)
  {
    if ((unint64_t)v5 >= v4)
      absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl(result, a2, a3);
    *(_QWORD *)(a3 + 96) = v5 + 1;
    *v5 = 45;
    result = -(int)result;
    v6 = *(_BYTE **)(a3 + 96);
    if (result >= 0x64)
      goto LABEL_5;
  }
  else
  {
    if ((unint64_t)v5 >= v4)
      absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl(result, a2, a3);
    *(_QWORD *)(a3 + 96) = v5 + 1;
    *v5 = 43;
    v6 = *(_BYTE **)(a3 + 96);
    if (result >= 0x64)
    {
LABEL_5:
      if ((unint64_t)v6 >= v4)
        absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl(result, a2, a3);
      *(_QWORD *)(a3 + 96) = v6 + 1;
      *v6 = result / 0x64 + 48;
      v7 = *(_BYTE **)(a3 + 96);
      if ((unint64_t)v7 >= v4)
        absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl(result, a2, a3);
      *(_QWORD *)(a3 + 96) = v7 + 1;
      *v7 = (result / 0xA - 10 * ((429496730 * (unint64_t)(result / 0xA)) >> 32)) | 0x30;
      v8 = *(_BYTE **)(a3 + 96);
      if ((unint64_t)v8 >= v4)
        absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl(result, a2, a3);
      *(_QWORD *)(a3 + 96) = v8 + 1;
      *v8 = (result % 0xA) | 0x30;
      return result;
    }
  }
  if ((unint64_t)v6 >= v4)
    absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl(result, a2, a3);
  *(_QWORD *)(a3 + 96) = v6 + 1;
  *v6 = result / 0xAu + 48;
  v9 = *(_BYTE **)(a3 + 96);
  if ((unint64_t)v9 >= v4)
    absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl(result, a2, a3);
  *(_QWORD *)(a3 + 96) = v9 + 1;
  *v9 = (result % 0xAu) | 0x30;
  return result;
}

void *absl::lts_2020_02_25::str_format_internal::`anonymous namespace'::WriteBufferToSink(void *result, void *__src, size_t __n, char a4, int a5, char *a6)
{
  int v9;
  int v10;
  unsigned int v11;
  size_t v12;
  unsigned int v13;
  _BYTE *v14;
  _QWORD *v15;
  unint64_t v16;
  size_t v17;
  _BYTE *v18;
  char *v19;
  char *v20;
  _BYTE *v21;
  _QWORD *v22;
  unint64_t v23;
  size_t v24;
  _BYTE *v25;
  char *v26;
  void *v27;
  _BYTE *v28;
  _QWORD *v29;
  unint64_t v30;
  size_t v31;
  _BYTE *v32;
  char *v33;

  v9 = (int)result;
  if ((_DWORD)result)
    v10 = -1;
  else
    v10 = 0;
  v11 = (v10 - __n + a5) & ~((v10 - (int)__n + a5) >> 31);
  if (a5 >= 0)
    v12 = v11;
  else
    v12 = 0;
  if ((a4 & 2) != 0)
  {
    v13 = 0;
  }
  else
  {
    if ((a4 & 0x20) != 0)
      v13 = v12;
    else
      v13 = 0;
    if ((a4 & 0x20) != 0)
    {
      LODWORD(v12) = 0;
    }
    else if ((_DWORD)v12)
    {
      v14 = (_BYTE *)*((_QWORD *)a6 + 3);
      *((_QWORD *)a6 + 2) += v12;
      v15 = a6 + 1056;
      v16 = a6 + 1056 - v14;
      v17 = v12 - v16;
      if (v12 <= v16)
      {
        v17 = v12;
        v18 = v14;
      }
      else
      {
        v18 = a6 + 32;
        if (v15 == (_QWORD *)v14)
        {
          v19 = a6 + 1056;
        }
        else
        {
          memset(v14, 32, a6 + 1056 - v14);
          v19 = (char *)(*((_QWORD *)a6 + 3) + v16);
          *((_QWORD *)a6 + 3) = v19;
        }
        (*((void (**)(_QWORD, char *, int64_t))a6 + 1))(*(_QWORD *)a6, a6 + 32, v19 - v18);
        *((_QWORD *)a6 + 3) = v18;
        if (v17 >= 0x401)
        {
          do
          {
            v17 -= 1024;
            memset(a6 + 32, 32, 0x400uLL);
            *((_QWORD *)a6 + 3) = v15;
            (*((void (**)(_QWORD, char *, uint64_t))a6 + 1))(*(_QWORD *)a6, a6 + 32, 1024);
            *((_QWORD *)a6 + 3) = v18;
          }
          while (v17 > 0x400);
        }
      }
      result = memset(v18, 32, v17);
      LODWORD(v12) = 0;
      *((_QWORD *)a6 + 3) += v17;
    }
  }
  if (v9)
  {
    v20 = (char *)*((_QWORD *)a6 + 3);
    ++*((_QWORD *)a6 + 2);
    if (a6 + 1056 == v20)
    {
      v20 = a6 + 32;
      result = (void *)(*((uint64_t (**)(_QWORD, char *, uint64_t))a6 + 1))(*(_QWORD *)a6, a6 + 32, 1024);
      *((_QWORD *)a6 + 3) = a6 + 32;
    }
    *v20 = v9;
    ++*((_QWORD *)a6 + 3);
  }
  if (v13)
  {
    v21 = (_BYTE *)*((_QWORD *)a6 + 3);
    *((_QWORD *)a6 + 2) += v13;
    v22 = a6 + 1056;
    v23 = a6 + 1056 - v21;
    v24 = v13 - v23;
    if (v13 <= v23)
    {
      v24 = v13;
      v25 = v21;
    }
    else
    {
      v25 = a6 + 32;
      if (v22 == (_QWORD *)v21)
      {
        v26 = a6 + 1056;
      }
      else
      {
        memset(v21, 48, a6 + 1056 - v21);
        v26 = (char *)(*((_QWORD *)a6 + 3) + v23);
        *((_QWORD *)a6 + 3) = v26;
      }
      (*((void (**)(_QWORD, char *, int64_t))a6 + 1))(*(_QWORD *)a6, a6 + 32, v26 - v25);
      *((_QWORD *)a6 + 3) = v25;
      if (v24 >= 0x401)
      {
        do
        {
          v24 -= 1024;
          memset(a6 + 32, 48, 0x400uLL);
          *((_QWORD *)a6 + 3) = v22;
          (*((void (**)(_QWORD, char *, uint64_t))a6 + 1))(*(_QWORD *)a6, a6 + 32, 1024);
          *((_QWORD *)a6 + 3) = v25;
        }
        while (v24 > 0x400);
      }
    }
    result = memset(v25, 48, v24);
    *((_QWORD *)a6 + 3) += v24;
  }
  if (!__n)
  {
LABEL_39:
    if (!(_DWORD)v12)
      return result;
    goto LABEL_42;
  }
  v27 = (void *)*((_QWORD *)a6 + 3);
  *((_QWORD *)a6 + 2) += __n;
  if (__n < a6 - (_BYTE *)v27 + 1056)
  {
    result = memcpy(v27, __src, __n);
    *((_QWORD *)a6 + 3) += __n;
    goto LABEL_39;
  }
  (*((void (**)(_QWORD, char *, int64_t))a6 + 1))(*(_QWORD *)a6, a6 + 32, (_BYTE *)v27 - (a6 + 32));
  *((_QWORD *)a6 + 3) = a6 + 32;
  result = (void *)(*((uint64_t (**)(_QWORD, void *, size_t))a6 + 1))(*(_QWORD *)a6, __src, __n);
  if (!(_DWORD)v12)
    return result;
LABEL_42:
  v28 = (_BYTE *)*((_QWORD *)a6 + 3);
  *((_QWORD *)a6 + 2) += v12;
  v29 = a6 + 1056;
  v30 = a6 + 1056 - v28;
  v31 = v12 - v30;
  if (v12 <= v30)
  {
    v31 = v12;
    v32 = v28;
  }
  else
  {
    v32 = a6 + 32;
    if (v29 == (_QWORD *)v28)
    {
      v33 = a6 + 1056;
    }
    else
    {
      memset(v28, 32, a6 + 1056 - v28);
      v33 = (char *)(*((_QWORD *)a6 + 3) + v30);
      *((_QWORD *)a6 + 3) = v33;
    }
    (*((void (**)(_QWORD, char *, int64_t))a6 + 1))(*(_QWORD *)a6, a6 + 32, v33 - v32);
    *((_QWORD *)a6 + 3) = v32;
    if (v31 >= 0x401)
    {
      do
      {
        v31 -= 1024;
        memset(a6 + 32, 32, 0x400uLL);
        *((_QWORD *)a6 + 3) = v29;
        (*((void (**)(_QWORD, char *, uint64_t))a6 + 1))(*(_QWORD *)a6, a6 + 32, 1024);
        *((_QWORD *)a6 + 3) = v32;
      }
      while (v31 > 0x400);
    }
  }
  result = memset(v32, 32, v31);
  *((_QWORD *)a6 + 3) += v31;
  return result;
}

unint64_t absl::lts_2020_02_25::str_format_internal::`anonymous namespace'::PrintIntegralDigits<(absl::lts_2020_02_25::str_format_internal::`anonymous namespace'::FormatStyle)0,unsigned __int128>(unint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  __int128 v5;
  unint64_t v6;
  unsigned __int128 v7;
  BOOL v8;
  _QWORD *v9;
  _BYTE *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  if (result | a2)
  {
    do
    {
      v3 = *(_QWORD *)(a3 + 88);
      if (v3 <= a3)
      *((_QWORD *)&v5 + 1) = a2;
      *(_QWORD *)&v5 = result;
      v4 = v5 >> 1;
      v6 = v4 + (a2 >> 1);
      if (__CFADD__(v4, a2 >> 1))
        ++v6;
      v7 = __PAIR128__(a2 >> 1, v4) - v6 % 5;
      v8 = result <= 9;
      a2 = (v7 * __PAIR128__(0xCCCCCCCCCCCCCCCCLL, 0xCCCCCCCCCCCCCCCDLL)) >> 64;
      *(_QWORD *)(a3 + 88) = v3 - 1;
      *(_BYTE *)(v3 - 1) = (result - 2 * v7) | 0x30;
      result = 0xCCCCCCCCCCCCCCCDLL * v7;
    }
    while (!v8);
    v11 = *(_QWORD *)(a3 + 96);
    v9 = (_QWORD *)(a3 + 96);
    v10 = (_BYTE *)v11;
    if (v11 >= (unint64_t)v9 - 11)
      absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl(0xCCCCCCCCCCCCCCCDLL * v7, a2, (uint64_t)v9);
  }
  else
  {
    v12 = *(_QWORD *)(a3 + 88);
    if (v12 <= a3)
    *(_QWORD *)(a3 + 88) = v12 - 1;
    *(_BYTE *)(v12 - 1) = 48;
    v13 = *(_QWORD *)(a3 + 96);
    v9 = (_QWORD *)(a3 + 96);
    v10 = (_BYTE *)v13;
    if (v13 >= (unint64_t)v9 - 11)
      absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl(result, a2, (uint64_t)v9);
  }
  *v9 = v10 + 1;
  *v10 = 46;
  return result;
}

BOOL absl::lts_2020_02_25::str_format_internal::`anonymous namespace'::RemoveExtraPrecision(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4;
  char *v5;
  int v6;
  unint64_t v7;
  char *v8;
  int v9;
  uint64_t v11;
  int v12;
  unsigned __int8 v13;
  unint64_t v14;

  if ((int)a1 < 1)
    return (int)a1 > 0;
  v4 = *(_QWORD *)(a3 + 96);
  v5 = (char *)(v4 - a1);
  *(_QWORD *)(a3 + 96) = v5;
  v6 = *v5;
  if (v6 <= 53)
  {
    if (v6 != 53)
      return (int)a1 > 0;
    if ((a2 & 1) == 0)
    {
      if ((_DWORD)a1 != 1)
      {
        v11 = 1 - a1;
        while (*(_BYTE *)(v4 + v11) == 48)
        {
          if (!++v11)
            goto LABEL_17;
        }
        goto LABEL_3;
      }
LABEL_17:
      v12 = *(v5 - 1);
      if (v12 == 46)
        LOBYTE(v12) = *(v5 - 2);
      if (((char)v12 & 0x80000001) != 1)
        return (int)a1 > 0;
    }
  }
LABEL_3:
  v7 = *(_QWORD *)(a3 + 88);
  if (v7 >= (unint64_t)v5)
    absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl(a1, a2, a3);
  v8 = v5 - 1;
  do
  {
    v9 = *v8;
    if (v9 != 46)
    {
      if (v9 != 57)
      {
        *v8 = v9 + 1;
        return (int)a1 > 0;
      }
      *v8 = 48;
      v7 = *(_QWORD *)(a3 + 88);
    }
    --v8;
  }
  while ((unint64_t)v8 >= v7);
  *v8 = 49;
  *(_QWORD *)(a3 + 88) = v8;
  v13 = v8[1];
  v8[1] = v8[2];
  v8[2] = v13;
  ++*a4;
  v14 = *(_QWORD *)(a3 + 96);
  if (*(_QWORD *)(a3 + 88) >= v14)
    absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl(a1, a2, a3);
  *(_QWORD *)(a3 + 96) = v14 - 1;
  return (int)a1 > 0;
}

unint64_t absl::lts_2020_02_25::str_format_internal::`anonymous namespace'::PrintIntegralDigits<(absl::lts_2020_02_25::str_format_internal::`anonymous namespace'::FormatStyle)0,unsigned long long>(unint64_t result, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  BOOL v4;
  _QWORD *v5;
  _BYTE *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  if (result)
  {
    do
    {
      v3 = *(_QWORD *)(a2 + 88);
      if (v3 <= a2)
      *(_QWORD *)(a2 + 88) = v3 - 1;
      *(_BYTE *)(v3 - 1) = (result % 0xA) | 0x30;
      v4 = result > 9;
      result /= 0xAuLL;
    }
    while (v4);
    v7 = *(_QWORD *)(a2 + 96);
    v5 = (_QWORD *)(a2 + 96);
    v6 = (_BYTE *)v7;
    if (v7 >= (unint64_t)v5 - 11)
      absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl(result, (uint64_t)v5, a3);
  }
  else
  {
    v8 = *(_QWORD *)(a2 + 88);
    if (v8 <= a2)
    *(_QWORD *)(a2 + 88) = v8 - 1;
    *(_BYTE *)(v8 - 1) = 48;
    v9 = *(_QWORD *)(a2 + 96);
    v5 = (_QWORD *)(a2 + 96);
    v6 = (_BYTE *)v9;
    if (v9 >= (unint64_t)v5 - 11)
      absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl(0, (uint64_t)v5, a3);
  }
  *v5 = v6 + 1;
  *v6 = 46;
  return result;
}

BOOL absl::lts_2020_02_25::str_format_internal::`anonymous namespace'::FallbackToSnprintf<double>(_DWORD *a1, char *a2, double a3)
{
  int v6;
  int v7;
  uint64_t v8;
  int64_t size;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  char v15;
  std::string *v16;
  size_t v17;
  unsigned int v18;
  unsigned int v19;
  std::string *p_src;
  _BYTE *v21;
  std::string __src;
  char __format;
  _BYTE v25[39];

  *(_QWORD *)&v25[31] = *MEMORY[0x24BDAC8D0];
  v7 = a1[1];
  v6 = a1[2];
  if (v6 < 0)
    v8 = 0xFFFFFFFFLL;
  else
    v8 = v6;
  __format = 37;
  absl::lts_2020_02_25::str_format_internal::Flags::ToString((absl::lts_2020_02_25::str_format_internal::Flags *)((char *)a1 + 1), &__src);
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __src.__r_.__value_.__l.__size_;
    v13 = (void *)__src.__r_.__value_.__r.__words[0];
    memcpy(v25, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
    operator delete(v13);
  }
  else
  {
    size = HIBYTE(__src.__r_.__value_.__r.__words[2]);
    v10 = memcpy(v25, &__src, HIBYTE(__src.__r_.__value_.__r.__words[2]));
  }
  *(_WORD *)&v25[size] = 11818;
  v25[size + 2] = 42;
  v14 = *(char *)a1;
  if (v14 > 0x14)
    v15 = 0;
  else
    v15 = aCcssdiouxxffee[v14];
  v25[size + 3] = v15;
  v25[size + 4] = 0;
  if (size >= 27)
  __src.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x208uLL);
  *(_OWORD *)&__src.__r_.__value_.__r.__words[1] = xmmword_22DCE5ED0;
  bzero(__src.__r_.__value_.__l.__data_, 0x201uLL);
  while (1)
  {
    v16 = (__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__src
        : (std::string *)__src.__r_.__value_.__r.__words[0];
    v17 = (__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(__src.__r_.__value_.__r.__words[2])
        : __src.__r_.__value_.__l.__size_;
    v18 = snprintf((char *)v16, v17, &__format, v7 & ~(v7 >> 31), v8, *(_QWORD *)&a3);
    v19 = v18;
    if ((v18 & 0x80000000) != 0)
      break;
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__src.__r_.__value_.__l.__size_ > v18)
      {
        p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
        if (!v18)
          break;
        goto LABEL_26;
      }
    }
    else if (v18 < HIBYTE(__src.__r_.__value_.__r.__words[2]))
    {
      p_src = &__src;
      if (!v18)
        break;
LABEL_26:
      v21 = (_BYTE *)*((_QWORD *)a2 + 3);
      *((_QWORD *)a2 + 2) += v19;
      if (a2 - v21 + 1056 <= (unint64_t)v19)
      {
        (*((void (**)(_QWORD, char *, int64_t))a2 + 1))(*(_QWORD *)a2, a2 + 32, v21 - (a2 + 32));
        *((_QWORD *)a2 + 3) = a2 + 32;
        (*((void (**)(_QWORD, std::string *, _QWORD))a2 + 1))(*(_QWORD *)a2, p_src, v19);
      }
      else
      {
        memcpy(v21, p_src, v19);
        *((_QWORD *)a2 + 3) += v19;
      }
      break;
    }
    std::string::resize(&__src, v18 + 1, 0);
  }
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__src.__r_.__value_.__l.__data_);
  return (v19 & 0x80000000) == 0;
}

void sub_22D9D6A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t absl::lts_2020_02_25::str_format_internal::`anonymous namespace'::FloatToBuffer<(absl::lts_2020_02_25::str_format_internal::`anonymous namespace'::FormatStyle)1,double>(_BOOL8 a1, uint64_t a2, uint64_t a3, unint64_t a4, int *a5)
{
  uint64_t result;
  int v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  unsigned __int128 v19;
  BOOL v20;
  char *v21;
  char v22;
  int v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  char *v30;
  char v31;
  int v32;
  int v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char v39;
  int v40;
  unint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  int v47;
  _BYTE *v48;
  int v49;
  char v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  __int128 v59;
  unint64_t v60;
  unsigned __int128 v61;
  char *v62;
  char v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  int v68;
  int v69;
  unint64_t v70;
  _BYTE *v71;
  int v72;
  _BYTE *v73;
  char v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  unint64_t v78;
  unsigned __int8 *v79;
  int v80;
  unsigned __int8 v81;
  unint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  int v87;
  _BYTE *v88;
  int v89;
  unint64_t v90;
  uint64_t v91;
  _BYTE *v92;
  int v93;
  _BYTE *v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  int v101;
  unint64_t v102;
  unsigned __int8 v103;

  if ((int)a3 > 39)
    return 0;
  v8 = a3;
  v9 = a2;
  v10 = (unint64_t)*(double *)&a1;
  *(_QWORD *)(a4 + 88) = a4 + 41;
  *(_QWORD *)(a4 + 96) = a4 + 41;
  if ((a2 & 0x80000000) != 0)
  {
    if (a2 < 0xFFFFFFC4)
    {
      *(_OWORD *)&v25 = (unsigned __int128)*(double *)&a1;
      if (v9 < 0xFFFFFF84)
        return 0;
      v49 = -v9;
      v50 = v9 - 1;
      v51 = -1 << -(char)v9;
      v52 = v51 | (0x7FFFFFFFFFFFFFFFuLL >> (v9 - 1));
      if ((-v9 & 0x40) != 0)
      {
        v52 = -1 << -(char)v9;
        v51 = 0;
      }
      v53 = ~v51;
      v54 = ~v52;
      if ((v49 & 0x40) != 0)
        v55 = 0;
      else
        v55 = v26 >> v49;
      v56 = ((2 * v26) << v50) | (v25 >> v49);
      if ((v49 & 0x40) != 0)
        v56 = v26 >> v49;
      if (v56 | v55)
      {
        do
        {
          v57 = *(_QWORD *)(a4 + 88);
          if (v57 <= a4)
          *((_QWORD *)&v59 + 1) = v55;
          *(_QWORD *)&v59 = v56;
          v58 = v59 >> 1;
          v60 = v58 + (v55 >> 1);
          if (__CFADD__(v58, v55 >> 1))
            ++v60;
          a3 = 5 * (v60 / 5);
          v61 = __PAIR128__(v55 >> 1, v58) - v60 % 5;
          v20 = v56 <= 9;
          v55 = (v61 * __PAIR128__(0xCCCCCCCCCCCCCCCCLL, 0xCCCCCCCCCCCCCCCDLL)) >> 64;
          *(_QWORD *)(a4 + 88) = v57 - 1;
          *(_BYTE *)(v57 - 1) = (v56 - 2 * v61) | 0x30;
          v56 = 0xCCCCCCCCCCCCCCCDLL * v61;
        }
        while (!v20);
        v62 = *(char **)(a4 + 88);
        if ((unint64_t)v62 <= a4)
        v63 = *v62;
        v64 = *(_DWORD *)(a4 + 96);
        *(_QWORD *)(a4 + 88) = v62 - 1;
        *(v62 - 1) = v63;
        *(_BYTE *)(*(_QWORD *)(a4 + 88) + 1) = 46;
        v65 = v53 & v25;
        v66 = v54 & v26;
        v67 = v64 - (_DWORD)v62;
        if (v67)
        {
          v68 = v67 - 1;
          *a5 = v68;
          v8 -= v68;
          if ((v25 & 1) != 0)
            return 1;
          goto LABEL_103;
        }
      }
      else
      {
        v65 = v53 & v25;
        v66 = v54 & v26;
      }
      *a5 = 0;
      if (v65 | v66)
      {
        v89 = 0;
        do
        {
          v66 = (__PAIR128__(v66, v65) * 0xA) >> 64;
          v65 *= 10;
          --v89;
        }
        while (__PAIR128__(v54, v53) >= __PAIR128__(v66, v65));
        *a5 = v89;
      }
      else
      {
        v65 = 0;
        v66 = 0;
      }
      v90 = *(_QWORD *)(a4 + 88);
      if (v90 <= a4)
      v91 = ((2 * v66) << ~(_BYTE)v49) | (v65 >> v49);
      if ((v49 & 0x40) != 0)
        v91 = v66 >> v49;
      *(_QWORD *)(a4 + 88) = v90 - 1;
      *(_BYTE *)(v90 - 1) = v91 + 48;
      v92 = *(_BYTE **)(a4 + 96);
      if ((unint64_t)v92 >= a4 + 85)
        absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl(v25, v26, a3);
      *(_QWORD *)(a4 + 96) = v92 + 1;
      *v92 = 46;
      v65 &= v53;
      v66 &= v54;
LABEL_103:
      if (v8 >= 1)
      {
        v93 = v8 + 1;
        do
        {
          v94 = *(_BYTE **)(a4 + 96);
          if ((unint64_t)v94 >= a4 + 85)
            absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl(v25, v26, a3);
          v95 = (__PAIR128__(v66, v65) * 0xA) >> 64;
          v96 = v95 >> v49;
          if ((v49 & 0x40) == 0)
            v96 = ((2 * v95) << ~(_BYTE)v49) | ((10 * v65) >> v49);
          v66 = v95 & v54;
          v65 = (10 * v65) & v53;
          *(_QWORD *)(a4 + 96) = v94 + 1;
          *v94 = v96 + 48;
          --v93;
        }
        while (v93 > 1);
      }
      v97 = (__PAIR128__(v66, v65) * 0xA) >> 64;
      v98 = v97 >> v49;
      if ((v49 & 0x40) == 0)
        v98 = ((2 * v97) << ~(_BYTE)v49) | ((10 * v65) >> v49);
      if ((int)v98 < 6)
      {
        if ((_DWORD)v98 != 5)
          return 1;
        v100 = v97 & v54;
        v99 = *(_QWORD *)(a4 + 96);
        if (!((10 * v65) & v53 | v100))
        {
          v101 = *(unsigned __int8 *)(v99 - 1);
          if (v101 == 46)
            LOBYTE(v101) = *(_BYTE *)(v99 - 2);
          if (((char)v101 & 0x80000001) != 1)
            return 1;
        }
      }
      else
      {
        v99 = *(_QWORD *)(a4 + 96);
      }
      v102 = *(_QWORD *)(a4 + 88);
      if (v102 >= v99)
        absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl(v25, v26, a3);
      v79 = (unsigned __int8 *)(v99 - 1);
      do
      {
        v80 = *v79;
        if (v80 != 46)
        {
          if (v80 != 57)
            goto LABEL_124;
          *v79 = 48;
          v102 = *(_QWORD *)(a4 + 88);
        }
        --v79;
      }
      while ((unint64_t)v79 >= v102);
      *v79 = 49;
      *(_QWORD *)(a4 + 88) = v79;
      v103 = v79[1];
      v79[1] = v79[2];
      v79[2] = v103;
      ++*a5;
      v82 = *(_QWORD *)(a4 + 96);
      if (*(_QWORD *)(a4 + 88) >= v82)
        absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl(v25, v26, a3);
      goto LABEL_126;
    }
    v34 = -(int)a2;
    v35 = ~(-1 << -(char)a2);
    v36 = v10 >> -(char)a2;
    if (v36)
    {
      do
      {
        v37 = *(_QWORD *)(a4 + 88);
        if (v37 <= a4)
        *(_QWORD *)(a4 + 88) = v37 - 1;
        *(_BYTE *)(v37 - 1) = (v36 % 0xA) | 0x30;
        v29 = v36 > 9;
        v36 /= 0xAuLL;
      }
      while (v29);
      v38 = *(char **)(a4 + 88);
      if ((unint64_t)v38 <= a4)
      v39 = *v38;
      v40 = *(_DWORD *)(a4 + 96);
      *(_QWORD *)(a4 + 88) = v38 - 1;
      *(v38 - 1) = v39;
      *(_BYTE *)(*(_QWORD *)(a4 + 88) + 1) = 46;
      v41 = v35 & v10;
      if (v40 != (_DWORD)v38)
      {
        v42 = v40 - (_DWORD)v38 - 1;
        *a5 = v42;
        v8 = a3 - v42;
        if (a1)
          return 1;
        goto LABEL_65;
      }
    }
    else
    {
      v41 = v35 & v10;
    }
    *a5 = 0;
    if (v41)
    {
      v69 = 0;
      do
      {
        v41 *= 10;
        --v69;
      }
      while (v41 <= v35);
      *a5 = v69;
    }
    v70 = *(_QWORD *)(a4 + 88);
    if (v70 <= a4)
    *(_QWORD *)(a4 + 88) = v70 - 1;
    *(_BYTE *)(v70 - 1) = (v41 >> v34) + 48;
    v71 = *(_BYTE **)(a4 + 96);
    if ((unint64_t)v71 >= a4 + 85)
      absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl(a1, a2, a3);
    *(_QWORD *)(a4 + 96) = v71 + 1;
    *v71 = 46;
    v41 &= v35;
LABEL_65:
    if (v8 >= 1)
    {
      v72 = v8 + 1;
      do
      {
        v73 = *(_BYTE **)(a4 + 96);
        if ((unint64_t)v73 >= a4 + 85)
          absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl(a1, a2, a3);
        v74 = ((10 * v41) >> v34) + 48;
        v41 = (10 * v41) & v35;
        *(_QWORD *)(a4 + 96) = v73 + 1;
        *v73 = v74;
        --v72;
      }
      while (v72 > 1);
    }
    v75 = (10 * v41) >> v34;
    if ((int)v75 < 6)
    {
      if ((_DWORD)v75 != 5)
        return 1;
      v76 = *(_QWORD *)(a4 + 96);
      if (((10 * v41) & v35) == 0)
      {
        v77 = *(unsigned __int8 *)(v76 - 1);
        if (v77 == 46)
          LOBYTE(v77) = *(_BYTE *)(v76 - 2);
        if (((char)v77 & 0x80000001) != 1)
          return 1;
      }
    }
    else
    {
      v76 = *(_QWORD *)(a4 + 96);
    }
    v78 = *(_QWORD *)(a4 + 88);
    if (v78 >= v76)
      absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl(a1, a2, a3);
    v79 = (unsigned __int8 *)(v76 - 1);
    do
    {
      v80 = *v79;
      if (v80 != 46)
      {
        if (v80 != 57)
        {
LABEL_124:
          *v79 = v80 + 1;
          return 1;
        }
        *v79 = 48;
        v78 = *(_QWORD *)(a4 + 88);
      }
      --v79;
    }
    while ((unint64_t)v79 >= v78);
    *v79 = 49;
    *(_QWORD *)(a4 + 88) = v79;
    v81 = v79[1];
    v79[1] = v79[2];
    v79[2] = v81;
    ++*a5;
    v82 = *(_QWORD *)(a4 + 96);
    if (*(_QWORD *)(a4 + 88) >= v82)
      absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl(a1, a2, a3);
LABEL_126:
    *(_QWORD *)(a4 + 96) = v82 - 1;
    return 1;
  }
  if (a2 <= 0xB)
  {
    v27 = v10 << a2;
    if (v27)
    {
      do
      {
        v28 = *(_QWORD *)(a4 + 88);
        if (v28 <= a4)
        *(_QWORD *)(a4 + 88) = v28 - 1;
        *(_BYTE *)(v28 - 1) = (v27 % 0xA) | 0x30;
        v29 = v27 > 9;
        v27 /= 0xAuLL;
      }
      while (v29);
      v30 = *(char **)(a4 + 88);
      if ((unint64_t)v30 <= a4)
      v31 = *v30;
      v32 = *(_DWORD *)(a4 + 96);
      *(_QWORD *)(a4 + 88) = v30 - 1;
      *(v30 - 1) = v31;
      *(_BYTE *)(*(_QWORD *)(a4 + 88) + 1) = 46;
      v33 = ~(_DWORD)v30 + v32;
    }
    else
    {
      v33 = -1;
    }
    *a5 = v33;
    v43 = a3 - v33;
    result = 1;
    if (v43 >= 1 && !v46)
    {
      v47 = v43 + 1;
      do
      {
        v48 = *(_BYTE **)(a4 + 96);
        if ((unint64_t)v48 >= a4 + 85)
          absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl(1, v44, v45);
        *(_QWORD *)(a4 + 96) = v48 + 1;
        *v48 = 48;
        --v47;
      }
      while (v47 > 1);
      return 1;
    }
    return result;
  }
  if (a2 > 0x4B)
    return 0;
  *(_OWORD *)&v11 = (unsigned __int128)*(double *)&a1;
  v13 = (v12 << v9) | (v11 >> 1 >> ~(_BYTE)v9);
  if ((v9 & 0x40) != 0)
  {
    v13 = v11 << v9;
    v14 = 0;
  }
  else
  {
    v14 = v11 << v9;
  }
  if (v14 | v13)
  {
    do
    {
      v15 = *(_QWORD *)(a4 + 88);
      if (v15 <= a4)
      *((_QWORD *)&v17 + 1) = v13;
      *(_QWORD *)&v17 = v14;
      v16 = v17 >> 1;
      v18 = v16 + (v13 >> 1);
      if (__CFADD__(v16, v13 >> 1))
        ++v18;
      v11 = 5 * (v18 / 5);
      v19 = __PAIR128__(v13 >> 1, v16) - v18 % 5;
      v20 = v14 <= 9;
      v13 = (v19 * __PAIR128__(0xCCCCCCCCCCCCCCCCLL, 0xCCCCCCCCCCCCCCCDLL)) >> 64;
      *(_QWORD *)(a4 + 88) = v15 - 1;
      *(_BYTE *)(v15 - 1) = (v14 - 2 * v19) | 0x30;
      v14 = 0xCCCCCCCCCCCCCCCDLL * v19;
    }
    while (!v20);
    v21 = *(char **)(a4 + 88);
    if ((unint64_t)v21 <= a4)
    v22 = *v21;
    v23 = *(_DWORD *)(a4 + 96);
    *(_QWORD *)(a4 + 88) = v21 - 1;
    *(v21 - 1) = v22;
    *(_BYTE *)(*(_QWORD *)(a4 + 88) + 1) = 46;
    v24 = ~(_DWORD)v21 + v23;
  }
  else
  {
    v24 = -1;
  }
  *a5 = v24;
  v83 = a3 - v24;
  result = 1;
  if (v83 >= 1 && !v86)
  {
    v87 = v83 + 1;
    do
    {
      v88 = *(_BYTE **)(a4 + 96);
      if ((unint64_t)v88 >= a4 + 85)
        absl::lts_2020_02_25::str_format_internal::ConvertFloatImpl(1, v84, v85);
      *(_QWORD *)(a4 + 96) = v88 + 1;
      *v88 = 48;
      --v87;
    }
    while (v87 > 1);
    return 1;
  }
  return result;
}

void OUTLINED_FUNCTION_0(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 71, a4);
}

void OUTLINED_FUNCTION_1_0(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 67, a4);
}

void OUTLINED_FUNCTION_2(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 80, a4);
}

void OUTLINED_FUNCTION_3(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 75, a4);
}

void OUTLINED_FUNCTION_4(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 38, a4);
}

int *absl::lts_2020_02_25::str_format_internal::FILERawSink::Write(int *result, char *a2, size_t a3)
{
  size_t v3;
  int *v5;
  size_t v6;
  int v7;

  if (a3)
  {
    v3 = a3;
    v5 = result;
    do
    {
      if (v5[2])
        break;
      v7 = *__error();
      *__error() = 0;
      v6 = fwrite(a2, 1uLL, v3, *(FILE **)v5);
      if (v6)
      {
        *((_QWORD *)v5 + 2) += v6;
        a2 += v6;
        v3 -= v6;
      }
      else if (*__error() != 4)
      {
        if (*__error())
        {
          v5[2] = *__error();
        }
        else if (ferror(*(FILE **)v5))
        {
          v5[2] = 9;
        }
      }
      result = __error();
      if (!*result)
      {
        result = __error();
        *result = v7;
      }
    }
    while (v3);
  }
  return result;
}

void sub_22D9D74C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
  _Unwind_Resume(a1);
}

void absl::lts_2020_02_25::str_format_internal::`anonymous namespace'::ClearErrnoGuard::~ClearErrnoGuard(absl::lts_2020_02_25::str_format_internal::_anonymous_namespace_::ClearErrnoGuard *this)
{
  int v2;

  if (!*__error())
  {
    v2 = *(_DWORD *)this;
    *__error() = v2;
  }
}

unsigned __int8 *absl::lts_2020_02_25::str_format_internal::ConsumeUnboundConversion(uint64_t a1, unsigned __int8 *a2, uint64_t a3, int *a4)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v9;
  int v10;
  int v11;
  unsigned __int8 *v13;
  unsigned __int8 v14;
  int v15;
  unsigned __int8 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  _BOOL4 v26;
  int v27;
  int v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  int v32;
  char *v33[3];
  unsigned __int8 v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;

  v5 = (unsigned __int8 *)a1;
  if (*a4 < 0)
  v35 = a2;
  v33[0] = (char *)&v34;
  v33[1] = (char *)&v36;
  v33[2] = (char *)&v35;
  if ((unsigned __int8 *)a1 == a2)
    return 0;
  v7 = (unsigned __int8 *)(a1 + 1);
  LODWORD(v6) = *(char *)a1;
  v36 = (unsigned __int8 *)(a1 + 1);
  v34 = v6;
  if ((*(_BYTE *)(a3 + 12) & 1) == 0)
    absl::lts_2020_02_25::str_format_internal::ConsumeUnboundConversion();
  if ((int)v6 <= 64)
  {
    v9 = *(_BYTE *)(a3 + 12) & 0xFE;
    *(_BYTE *)(a3 + 12) = v9;
    if ((int)v6 <= 48)
    {
      do
      {
        v10 = 2;
        switch((char)v6)
        {
          case ' ':
            v10 = 8;
            break;
          case '#':
            v10 = 16;
            break;
          case '+':
            v10 = 4;
            break;
          case '-':
            break;
          case '0':
            v10 = 32;
            break;
          default:
            if ((char)v6 >= 48)
              goto LABEL_14;
            if (v6 != 42)
              goto LABEL_20;
            if (v7 == a2)
              return 0;
            v16 = *v7;
            LOBYTE(v6) = *v7;
            v36 = v7 + 1;
            v34 = v16;
            v17 = (*a4)++;
            if (v17 < 0)
              absl::lts_2020_02_25::str_format_internal::ConsumeUnboundConversion(a1, (uint64_t)a2, a3);
            *(_DWORD *)(a3 + 4) = -2 - v17;
            goto LABEL_20;
        }
        v9 |= v10;
        *(_BYTE *)(a3 + 12) = v9;
        if (v7 == a2)
          return 0;
        v11 = (char)*v7++;
        LODWORD(v6) = v11;
        v36 = v7;
        v34 = v11;
      }
      while (v11 < 49);
    }
    if (v6 < 0x3A)
    {
LABEL_14:
      LOBYTE(v6) = v34;
      if (v34 == 36)
      {
        if (!*a4)
        {
          *a4 = -1;
          *(_BYTE *)(a3 + 12) = 1;
        }
        return 0;
      }
      if ((a1 & 0x80000000) != 0)
        absl::lts_2020_02_25::str_format_internal::ConsumeUnboundConversion(a1, (uint64_t)a2, a3);
      *(_DWORD *)(a3 + 4) = a1;
LABEL_20:
      if (v6 == 46)
      {
        v6 = v36;
        if (v36 == v35)
          return 0;
        v13 = ++v36;
        v34 = *v6;
        v14 = v34;
        if ((char)v34 < 0)
          goto LABEL_33;
        if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v34 + 60) & 0x400) != 0)
        {
          if ((v18 & 0x80000000) != 0)
            absl::lts_2020_02_25::str_format_internal::ConsumeUnboundConversion(v18, v19, v20);
          *(_DWORD *)(a3 + 8) = v18;
          LOBYTE(v6) = v34;
          goto LABEL_36;
        }
        if (v34 != 42)
        {
LABEL_33:
          *(_DWORD *)(a3 + 8) = 0;
          LOBYTE(v6) = v14;
          goto LABEL_36;
        }
        if (v13 == v35)
          return 0;
        v36 = v6 + 2;
        LOBYTE(v6) = v6[1];
        v34 = v6;
        v15 = (*a4)++;
        if (v15 < 0)
          absl::lts_2020_02_25::str_format_internal::ConsumeUnboundConversion(a1, (uint64_t)a2, a3);
        *(_DWORD *)(a3 + 8) = -2 - v15;
      }
    }
  }
LABEL_36:
  v21 = absl::lts_2020_02_25::str_format_internal::kTags[v6];
  if (absl::lts_2020_02_25::str_format_internal::kTags[v6] < 0)
  {
    if (v21 == 128)
      return 0;
    v30 = v35;
    v29 = v36;
    if (v36 == v35)
      return 0;
    v31 = ++v36;
    v32 = *v29;
    v34 = *v29;
    if (v21 == 255 && v32 == 104)
    {
      *(_BYTE *)(a3 + 13) = 1;
      if (v31 == v30)
        return 0;
    }
    else
    {
      if (v21 != 253 || v32 != 108)
      {
        *(_BYTE *)(a3 + 13) = ~(_BYTE)v21;
LABEL_63:
        if ((absl::lts_2020_02_25::str_format_internal::kTags[v32] & 0x80000000) == 0)
        {
          LOBYTE(v21) = absl::lts_2020_02_25::str_format_internal::kTags[v32];
          goto LABEL_37;
        }
        return 0;
      }
      *(_BYTE *)(a3 + 13) = 3;
      if (v31 == v30)
        return 0;
    }
    v36 = v29 + 2;
    v32 = v29[1];
    v34 = v29[1];
    goto LABEL_63;
  }
LABEL_37:
  v22 = *(unsigned __int8 *)(a3 + 12);
  v23 = *(_DWORD *)(a3 + 8);
  v26 = (v22 & 0x3E) == 0 && *(_DWORD *)(a3 + 4) == -1 && v23 == -1;
  v27 = v22 & 1;
  if ((((v27 == 0) ^ v26) & 1) == 0)
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "basic=%d left=%d show_pos=%d sign_col=%d alt=%d zero=%d width=%d precision=%d\n", v27, (v22 >> 1) & 1, (v22 >> 2) & 1, (v22 >> 3) & 1, (v22 >> 4) & 1, (v22 >> 5) & 1, *(_DWORD *)(a3 + 4), v23);
    v27 = *(_BYTE *)(a3 + 12) & 1;
  }
  if (((v26 ^ (v27 == 0)) & 1) == 0)
    absl::lts_2020_02_25::str_format_internal::ConsumeUnboundConversion();
  *(_BYTE *)(a3 + 14) = v21;
  v28 = *a4 + 1;
  *a4 = v28;
  *(_DWORD *)a3 = v28;
  return v36;
}

unsigned __int8 *absl::lts_2020_02_25::str_format_internal::`anonymous namespace'::ConsumeConversion<true>(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  int v3;
  int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  unsigned int v23;
  int v24;
  _BOOL4 v27;
  int v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  unsigned int v39;
  char *v40[3];
  unsigned __int8 v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;

  v42 = a2;
  v40[0] = (char *)&v41;
  v40[1] = (char *)&v43;
  v40[2] = (char *)&v42;
  if (a1 == a2)
    return 0;
  v3 = *a1;
  v43 = a1 + 1;
  v41 = v3;
  if ((v3 - 58) < 0xFFFFFFF7)
    return 0;
  *(_DWORD *)a3 = v5;
  if (v5 <= 0)
  if (v41 != 36)
    return 0;
  v7 = v42;
  v6 = v43;
  if (v43 == v42)
    return 0;
  v8 = ++v43;
  LODWORD(v6) = (char)*v6;
  v41 = v6;
  if ((*(_BYTE *)(a3 + 12) & 1) == 0)
    absl::lts_2020_02_25::str_format_internal::ConsumeUnboundConversion();
  if ((int)v6 > 64)
    goto LABEL_32;
  v9 = *(_BYTE *)(a3 + 12) & 0xFE;
  *(_BYTE *)(a3 + 12) = v9;
  if ((int)v6 <= 48)
  {
    do
    {
      v10 = 2;
      switch((char)v6)
      {
        case ' ':
          v10 = 8;
          break;
        case '#':
          v10 = 16;
          break;
        case '+':
          v10 = 4;
          break;
        case '-':
          break;
        case '0':
          v10 = 32;
          break;
        default:
          if ((char)v6 >= 48)
            goto LABEL_17;
          if (v6 != 42)
            goto LABEL_19;
          if (v8 == v7)
            return 0;
          v43 = v8 + 1;
          v41 = *v8;
          if (v41 - 58 < 0xFFFFFFF7)
            return 0;
          if ((int)v30 <= 0)
            absl::lts_2020_02_25::str_format_internal::ConsumeUnboundConversion(v30, v31, v32);
          *(_DWORD *)(a3 + 4) = ~(_DWORD)v30;
          if (v41 != 36)
            return 0;
          v6 = v43;
          if (v43 == v42)
            return 0;
          ++v43;
          LOBYTE(v6) = *v6;
          v41 = v6;
          goto LABEL_19;
      }
      v9 |= v10;
      *(_BYTE *)(a3 + 12) = v9;
      if (v8 == v7)
        return 0;
      v43 = v8 + 1;
      v41 = *v8;
      LODWORD(v6) = (char)v41;
      ++v8;
    }
    while ((char)v41 < 49);
  }
  if (v6 >= 0x3A)
  {
LABEL_32:
    v22 = absl::lts_2020_02_25::str_format_internal::kTags[v6];
    if (absl::lts_2020_02_25::str_format_internal::kTags[v6] < 0)
      goto LABEL_56;
    goto LABEL_33;
  }
LABEL_17:
  if ((v11 & 0x80000000) != 0)
    absl::lts_2020_02_25::str_format_internal::ConsumeUnboundConversion(v11, v12, v13);
  *(_DWORD *)(a3 + 4) = v11;
  LOBYTE(v6) = v41;
LABEL_19:
  if (v6 != 46)
    goto LABEL_32;
  v14 = v43;
  if (v43 == v42)
    return 0;
  v15 = ++v43;
  v41 = *v14;
  v16 = v41;
  if ((char)v41 < 0)
    goto LABEL_31;
  if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v41 + 60) & 0x400) != 0)
  {
    if ((v33 & 0x80000000) != 0)
      absl::lts_2020_02_25::str_format_internal::ConsumeUnboundConversion(v33, v34, v35);
    *(_DWORD *)(a3 + 8) = v33;
    v22 = absl::lts_2020_02_25::str_format_internal::kTags[v41];
    if ((absl::lts_2020_02_25::str_format_internal::kTags[v41] & 0x80000000) == 0)
      goto LABEL_33;
LABEL_56:
    if (v22 == 128)
      return 0;
    v37 = v42;
    v36 = v43;
    if (v43 == v42)
      return 0;
    v38 = ++v43;
    v39 = *v36;
    v41 = *v36;
    if (v22 == 255 && v39 == 104)
    {
      *(_BYTE *)(a3 + 13) = 1;
      if (v38 == v37)
        return 0;
    }
    else
    {
      if (v22 != 253 || v39 != 108)
      {
        *(_BYTE *)(a3 + 13) = ~(_BYTE)v22;
LABEL_71:
        if ((absl::lts_2020_02_25::str_format_internal::kTags[v39] & 0x80000000) == 0)
        {
          LOBYTE(v22) = absl::lts_2020_02_25::str_format_internal::kTags[v39];
          goto LABEL_33;
        }
        return 0;
      }
      *(_BYTE *)(a3 + 13) = 3;
      if (v38 == v37)
        return 0;
    }
    v43 = v36 + 2;
    v39 = v36[1];
    v41 = v36[1];
    goto LABEL_71;
  }
  if (v41 != 42)
  {
LABEL_31:
    *(_DWORD *)(a3 + 8) = 0;
    LOBYTE(v6) = v16;
    goto LABEL_32;
  }
  if (v15 == v42)
    return 0;
  v43 = v14 + 2;
  v17 = v14[1];
  v41 = v17;
  if ((v17 - 58) < 0xFFFFFFF7)
    return 0;
  if ((int)v18 <= 0)
    absl::lts_2020_02_25::str_format_internal::ConsumeUnboundConversion(v18, v19, v20);
  *(_DWORD *)(a3 + 8) = ~(_DWORD)v18;
  if (v41 != 36)
    return 0;
  v21 = v43;
  if (v43 == v42)
    return 0;
  ++v43;
  v41 = *v21;
  v22 = absl::lts_2020_02_25::str_format_internal::kTags[v41];
  if (absl::lts_2020_02_25::str_format_internal::kTags[v41] < 0)
    goto LABEL_56;
LABEL_33:
  v23 = *(unsigned __int8 *)(a3 + 12);
  v24 = *(_DWORD *)(a3 + 8);
  v27 = (v23 & 0x3E) == 0 && *(_DWORD *)(a3 + 4) == -1 && v24 == -1;
  v28 = v23 & 1;
  if ((((v28 == 0) ^ v27) & 1) == 0)
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "basic=%d left=%d show_pos=%d sign_col=%d alt=%d zero=%d width=%d precision=%d\n", v28, (v23 >> 1) & 1, (v23 >> 2) & 1, (v23 >> 3) & 1, (v23 >> 4) & 1, (v23 >> 5) & 1, *(_DWORD *)(a3 + 4), v24);
    v28 = *(_BYTE *)(a3 + 12) & 1;
  }
  if (((v27 ^ (v28 == 0)) & 1) == 0)
    absl::lts_2020_02_25::str_format_internal::ConsumeUnboundConversion();
  *(_BYTE *)(a3 + 14) = v22;
  return v43;
}

uint64_t absl::lts_2020_02_25::str_format_internal::`anonymous namespace'::ConsumeConversion<true>(char const*,char const*,absl::lts_2020_02_25::str_format_internal::UnboundConversion *,int *)::{lambda(void)#1}::operator()(char **a1)
{
  char **v2;
  uint64_t result;
  char *v4;
  unsigned int v5;
  uint64_t v6;
  char **v7;
  char *v8;
  unsigned int v9;
  char **v10;
  char *v11;
  unsigned int v12;
  char **v13;
  char *v14;
  unsigned int v15;
  char **v16;
  char *v17;
  unsigned int v18;
  char **v19;
  char *v20;
  unsigned int v21;
  char **v22;
  char *v23;
  unsigned int v24;
  char **v25;
  char *v26;
  unsigned int v27;
  char **v28;
  char *v29;

  v2 = (char **)a1[1];
  result = (**a1 - 48);
  v4 = *v2;
  if (*v2 != *(char **)a1[2])
  {
    *v2 = v4 + 1;
    **a1 = *v4;
    v5 = **a1;
    if ((v5 & 0x80000000) == 0)
    {
      v6 = MEMORY[0x24BDAC740];
      if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v5 + 60) & 0x400) != 0)
      {
        result = v5 + 10 * (_DWORD)result - 48;
        v7 = (char **)a1[1];
        v8 = *v7;
        if (*v7 != *(char **)a1[2])
        {
          *v7 = v8 + 1;
          **a1 = *v8;
          v9 = **a1;
          if ((v9 & 0x80000000) == 0 && (*(_DWORD *)(v6 + 4 * v9 + 60) & 0x400) != 0)
          {
            result = v9 + 10 * (_DWORD)result - 48;
            v10 = (char **)a1[1];
            v11 = *v10;
            if (*v10 != *(char **)a1[2])
            {
              *v10 = v11 + 1;
              **a1 = *v11;
              v12 = **a1;
              if ((v12 & 0x80000000) == 0 && (*(_DWORD *)(v6 + 4 * v12 + 60) & 0x400) != 0)
              {
                result = v12 + 10 * (_DWORD)result - 48;
                v13 = (char **)a1[1];
                v14 = *v13;
                if (*v13 != *(char **)a1[2])
                {
                  *v13 = v14 + 1;
                  **a1 = *v14;
                  v15 = **a1;
                  if ((v15 & 0x80000000) == 0 && (*(_DWORD *)(v6 + 4 * v15 + 60) & 0x400) != 0)
                  {
                    result = v15 + 10 * (_DWORD)result - 48;
                    v16 = (char **)a1[1];
                    v17 = *v16;
                    if (*v16 != *(char **)a1[2])
                    {
                      *v16 = v17 + 1;
                      **a1 = *v17;
                      v18 = **a1;
                      if ((v18 & 0x80000000) == 0 && (*(_DWORD *)(v6 + 4 * v18 + 60) & 0x400) != 0)
                      {
                        result = v18 + 10 * (_DWORD)result - 48;
                        v19 = (char **)a1[1];
                        v20 = *v19;
                        if (*v19 != *(char **)a1[2])
                        {
                          *v19 = v20 + 1;
                          **a1 = *v20;
                          v21 = **a1;
                          if ((v21 & 0x80000000) == 0 && (*(_DWORD *)(v6 + 4 * v21 + 60) & 0x400) != 0)
                          {
                            result = v21 + 10 * (_DWORD)result - 48;
                            v22 = (char **)a1[1];
                            v23 = *v22;
                            if (*v22 != *(char **)a1[2])
                            {
                              *v22 = v23 + 1;
                              **a1 = *v23;
                              v24 = **a1;
                              if ((v24 & 0x80000000) == 0 && (*(_DWORD *)(v6 + 4 * v24 + 60) & 0x400) != 0)
                              {
                                result = v24 + 10 * (_DWORD)result - 48;
                                v25 = (char **)a1[1];
                                v26 = *v25;
                                if (*v25 != *(char **)a1[2])
                                {
                                  *v25 = v26 + 1;
                                  **a1 = *v26;
                                  v27 = **a1;
                                  if ((v27 & 0x80000000) == 0 && (*(_DWORD *)(v6 + 4 * v27 + 60) & 0x400) != 0)
                                  {
                                    result = v27 + 10 * (_DWORD)result - 48;
                                    v28 = (char **)a1[1];
                                    v29 = *v28;
                                    if (*v28 != *(char **)a1[2])
                                    {
                                      *v28 = v29 + 1;
                                      **a1 = *v29;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void OUTLINED_FUNCTION_0_0(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 49, a4);
}

unint64_t absl::lts_2020_02_25::CEscape@<X0>(std::string::value_type *__s@<X0>, std::string::size_type __n@<X1>, std::string *a3@<X8>)
{
  std::string::size_type v3;
  std::string::value_type *v4;
  unint64_t v6;
  std::string::value_type *v7;
  uint64_t v8;
  uint64_t v9;
  std::string::value_type *v10;
  std::string::size_type v11;
  uint64_t v12;
  int v13;
  int v14;
  unint64_t result;
  std::string *v16;
  std::string *v17;
  uint64_t v18;

  v3 = __n;
  v4 = __s;
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if (!__n)
    return (unint64_t)std::string::append(a3, __s, __n);
  if (__n == 1)
  {
    v6 = 0;
    v7 = __s;
    do
    {
LABEL_7:
      v14 = *v7++;
    }
    while (v7 != &__s[__n]);
    goto LABEL_8;
  }
  v8 = 0;
  v9 = 0;
  v7 = &__s[__n & 0xFFFFFFFFFFFFFFFELL];
  v10 = __s + 1;
  v11 = __n & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    v12 = *(v10 - 1);
    v13 = *v10;
    v10 += 2;
    v11 -= 2;
  }
  while (v11);
  v6 = v9 + v8;
  if (__n != (__n & 0xFFFFFFFFFFFFFFFELL))
    goto LABEL_7;
LABEL_8:
  if (v6 == __n)
    return (unint64_t)std::string::append(a3, __s, __n);
  if (v6)
  {
    if (v6 >= 0x17)
    {
      std::string::__grow_by(a3, 0x16uLL, v6 - 22, 0, 0, 0, 0);
      a3->__r_.__value_.__l.__size_ = 0;
      if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
      {
        v16 = (std::string *)a3->__r_.__value_.__r.__words[0];
        a3->__r_.__value_.__l.__size_ = v6;
        goto LABEL_17;
      }
    }
    *((_BYTE *)&a3->__r_.__value_.__s + 23) = v6 & 0x7F;
  }
  else
  {
    *((_BYTE *)&a3->__r_.__value_.__s + 23) = 0;
  }
  v16 = a3;
LABEL_17:
  v16->__r_.__value_.__s.__data_[v6] = 0;
  v17 = (std::string *)a3->__r_.__value_.__r.__words[0];
  if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = a3;
  do
  {
    v18 = *v4;
    if ((_DWORD)result == 2)
    {
      result = (v18 - 9);
      switch(*v4)
      {
        case 9:
          LOWORD(v17->__r_.__value_.__l.__data_) = 29788;
          v17 = (std::string *)((char *)v17 + 2);
          break;
        case 10:
          LOWORD(v17->__r_.__value_.__l.__data_) = 28252;
          v17 = (std::string *)((char *)v17 + 2);
          break;
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
        case 35:
        case 36:
        case 37:
        case 38:
          break;
        case 13:
          LOWORD(v17->__r_.__value_.__l.__data_) = 29276;
          v17 = (std::string *)((char *)v17 + 2);
          break;
        case 34:
          LOWORD(v17->__r_.__value_.__l.__data_) = 8796;
          v17 = (std::string *)((char *)v17 + 2);
          break;
        case 39:
          LOWORD(v17->__r_.__value_.__l.__data_) = 10076;
          v17 = (std::string *)((char *)v17 + 2);
          break;
        default:
          if ((_DWORD)v18 == 92)
          {
            LOWORD(v17->__r_.__value_.__l.__data_) = 23644;
            v17 = (std::string *)((char *)v17 + 2);
          }
          break;
      }
    }
    else if ((_DWORD)result == 1)
    {
      v17->__r_.__value_.__s.__data_[0] = v18;
      v17 = (std::string *)((char *)v17 + 1);
    }
    else
    {
      v17->__r_.__value_.__s.__data_[0] = 92;
      v17->__r_.__value_.__s.__data_[1] = (v18 >> 6) | 0x30;
      v17->__r_.__value_.__s.__data_[2] = (v18 >> 3) & 7 | 0x30;
      result = v18 & 7 | 0x30;
      v17->__r_.__value_.__s.__data_[3] = v18 & 7 | 0x30;
      v17 = (std::string *)((char *)v17 + 4);
    }
    ++v4;
    --v3;
  }
  while (v3);
  return result;
}

void sub_22D9D81E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_BYTE *absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(uint64_t this, _BYTE *a2, char *a3)
{
  unsigned int v3;
  unint64_t v4;
  unsigned int v5;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  if (this >= 0x3B9ACA00)
  {
    *(_WORD *)a2 = absl::lts_2020_02_25::numbers_internal::two_ASCII_digits[this / 0x5F5E100];
    a2 += 2;
    this = this % 0x5F5E100;
    if (this <= 0x5F5E0FF)
      goto LABEL_3;
LABEL_23:
    absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(this, (uint64_t)a2, (uint64_t)a3);
  }
  if (this > 0x63)
  {
    if (this >> 4 <= 0x270)
    {
      if (this <= 0x3E7)
      {
        v7 = (unsigned __int16)this / 0x64u;
        this = this - 100 * v7;
        *a2++ = v7 + 48;
        if (this < 0x64)
          goto LABEL_6;
        goto LABEL_13;
      }
      goto LABEL_5;
    }
    if (this < 0xF4240)
    {
      if (this >> 5 <= 0xC34)
      {
        v8 = this / 0x2710;
        this = this % 0x2710;
        *a2++ = v8 + 48;
        if (this >> 4 >= 0x271)
          goto LABEL_17;
LABEL_5:
        v5 = (unsigned __int16)this / 0x64u;
        this = this - 100 * v5;
        *(_WORD *)a2 = absl::lts_2020_02_25::numbers_internal::two_ASCII_digits[v5];
        a2 += 2;
        if (this < 0x64)
        {
LABEL_6:
          *(_WORD *)a2 = absl::lts_2020_02_25::numbers_internal::two_ASCII_digits[this];
          a2[2] = 0;
          return a2 + 2;
        }
LABEL_13:
        absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(this, (uint64_t)a2, (uint64_t)a3);
      }
LABEL_4:
      v4 = this / 0x2710uLL;
      this = this % 0x2710;
      *(_WORD *)a2 = absl::lts_2020_02_25::numbers_internal::two_ASCII_digits[v4];
      a2 += 2;
      if (this >> 4 < 0x271)
        goto LABEL_5;
LABEL_17:
      absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(this, (uint64_t)a2, (uint64_t)a3);
    }
    if (this >= 0x5F5E100)
    {
      *a2++ = this / 0x5F5E100 + 48;
      this = this % 0x5F5E100;
      if (this > 0x5F5E0FF)
        goto LABEL_23;
    }
    else if (this <= 0x98967F)
    {
      v9 = this / 0xF4240;
      this = this % 0xF4240;
      *a2++ = v9 + 48;
      if (this > 0xF423F)
        goto LABEL_21;
      goto LABEL_4;
    }
LABEL_3:
    v3 = this / 0xF4240;
    this = this % 0xF4240;
    *(_WORD *)a2 = absl::lts_2020_02_25::numbers_internal::two_ASCII_digits[v3];
    a2 += 2;
    if (this <= 0xF423F)
      goto LABEL_4;
LABEL_21:
    absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(this, (uint64_t)a2, (uint64_t)a3);
  }
  if (this > 9)
    goto LABEL_6;
  return a2 + 1;
}

{
  if ((this & 0x80000000) != 0)
  {
    *a2++ = 45;
    this = -(int)this;
  }
  return absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(this, a2, a3);
}

{
  if (this < 0)
  {
    *a2++ = 45;
    this = -this;
  }
  return absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(this, a2, a3);
}

_BYTE *absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(unint64_t this, _BYTE *a2, char *a3)
{
  int v3;
  unint64_t v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;

  v3 = this;
  if (!HIDWORD(this))
    return absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(this, a2, a3);
  v5 = this / 0x3B9ACA00;
  if (this > 0x3B9AC9FFFFFFFFFFLL)
  {
    v9 = v5 - 100 * (this / 0x174876E800);
    v10 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(this / 0x174876E800, a2, a3);
    if (v9 >= 0x64)
      absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((uint64_t)v10, v7, v8);
    *(_WORD *)v10 = absl::lts_2020_02_25::numbers_internal::two_ASCII_digits[v9];
    v6 = v10 + 2;
  }
  else
  {
    v6 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(this / 0x3B9ACA00, a2, a3);
  }
  v11 = v3 - 1000000000 * v5;
  if (v11 >= 0x3B9ACA00)
    absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((uint64_t)v6, v7, v8);
  v12 = v11 / 0x989680;
  v13 = v11 % 0x989680;
  *v6 = absl::lts_2020_02_25::numbers_internal::two_ASCII_digits[v12];
  if (v13 > 0x98967F)
    absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((uint64_t)v6, v7, v8);
  v14 = v13 / 0x186A0;
  v15 = v13 % 0x186A0;
  v6[1] = absl::lts_2020_02_25::numbers_internal::two_ASCII_digits[v14];
  if (v15 >> 5 >= 0xC35)
    absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((uint64_t)v6, v7, v8);
  v16 = v15 / 0x3E8uLL;
  v17 = v15 % 0x3E8;
  v6[2] = absl::lts_2020_02_25::numbers_internal::two_ASCII_digits[v16];
  if (v17 >= 0x3E8)
    absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((uint64_t)v6, v7, v8);
  v18 = (unsigned __int16)v17 / 0xAu;
  v6[3] = absl::lts_2020_02_25::numbers_internal::two_ASCII_digits[v18];
  return (char *)v6 + 9;
}

uint64_t absl::lts_2020_02_25::numbers_internal::SixDigitsToBuffer(absl::lts_2020_02_25::numbers_internal *this, double a2, char *a3, uint64_t a4)
{
  absl::lts_2020_02_25::numbers_internal *v4;
  absl::lts_2020_02_25::numbers_internal *v5;
  uint64_t result;
  absl::lts_2020_02_25::numbers_internal *v7;
  double v8;
  int v9;
  int v10;
  int v11;
  double v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  absl::lts_2020_02_25::numbers_internal *v16;
  int v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  BOOL v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  unsigned int v31;
  unint64_t v32;
  _BYTE *v33;
  int v34;
  unint64_t v35;
  _BYTE *v36;
  int v37;
  _BYTE *v38;
  char v39;
  unsigned int v40;
  unsigned int v41;
  _BYTE *v42;
  _BYTE *v43;
  int v44;
  _BYTE *v45;
  int v46;
  unsigned int v47;
  int __e;

  v4 = this;
  if (a2 == 0.0)
  {
    v5 = this;
    if ((*(_QWORD *)&a2 & 0x8000000000000000) != 0)
    {
      *(_BYTE *)this = 45;
      v5 = (absl::lts_2020_02_25::numbers_internal *)((char *)this + 1);
    }
    *(_WORD *)v5 = 48;
    return v5 - this + 1;
  }
  if (a2 < 0.0)
  {
    *(_BYTE *)this = 45;
    v7 = (absl::lts_2020_02_25::numbers_internal *)((char *)this + 1);
    a2 = -a2;
    if (fabs(a2) != INFINITY)
      goto LABEL_7;
LABEL_30:
    *(_DWORD *)v7 = 6712937;
    return v7 - this + 3;
  }
  v7 = this;
  if (fabs(a2) == INFINITY)
    goto LABEL_30;
LABEL_7:
  if (a2 >= 999999.5)
  {
    v8 = a2 * 1.0e-256;
    if (a2 >= 1.0e261)
    {
      v13 = 261;
    }
    else
    {
      v8 = a2;
      v13 = 5;
    }
    if (v8 >= 1.0e133)
    {
      v8 = v8 * 1.0e-128;
      v13 |= 0x80u;
    }
    if (v8 >= 1.0e69)
    {
      v8 = v8 * 1.0e-64;
      v13 |= 0x40u;
    }
    if (v8 >= 1.0e37)
    {
      v8 = v8 * 1.0e-32;
      v13 |= 0x20u;
    }
    if (v8 >= 1.0e21)
    {
      v8 = v8 * 1.0e-16;
      v13 += 16;
    }
    if (v8 >= 1.0e13)
    {
      v8 = v8 * 0.00000001;
      v13 += 8;
    }
    if (v8 >= 1000000000.0)
    {
      v8 = v8 * 0.0001;
      v13 += 4;
    }
    if (v8 < 10000000.0)
    {
      v11 = v13;
    }
    else
    {
      v8 = v8 * 0.01;
      v11 = v13 + 2;
    }
    if (v8 >= 1000000.0)
    {
      ++v11;
      v12 = 0.1;
      goto LABEL_51;
    }
  }
  else
  {
    v8 = a2 * 1.0e256;
    if (a2 < 1.0e-250)
    {
      v9 = -251;
    }
    else
    {
      v8 = a2;
      v9 = 5;
    }
    if (v8 < 1.0e-122)
    {
      v8 = v8 * 1.0e128;
      v9 -= 128;
    }
    if (v8 < 1.0e-58)
    {
      v8 = v8 * 1.0e64;
      v9 -= 64;
    }
    if (v8 < 1.0e-26)
    {
      v8 = v8 * 1.0e32;
      v9 -= 32;
    }
    if (v8 < 1.0e-10)
    {
      v8 = v8 * 1.0e16;
      v9 -= 16;
    }
    if (v8 >= 0.01)
    {
      v10 = v9;
    }
    else
    {
      v8 = v8 * 100000000.0;
      v10 = v9 - 8;
    }
    if (v8 < 100.0)
    {
      v8 = v8 * 10000.0;
      v10 -= 4;
    }
    if (v8 >= 10000.0)
    {
      v11 = v10;
    }
    else
    {
      v8 = v8 * 100.0;
      v11 = v10 - 2;
    }
    if (v8 < 100000.0)
    {
      --v11;
      v12 = 10.0;
LABEL_51:
      v8 = v8 * v12;
    }
  }
  v14 = vcvtd_n_u64_f64(v8, 0x10uLL);
  if ((unint64_t)(unsigned __int16)v14 - 0x7FFF <= 1)
  {
    v15 = v14 >> 16;
    v16 = (absl::lts_2020_02_25::numbers_internal *)(2 * vcvtd_n_u64_f64(frexp(a2, &__e), 0x3FuLL));
    v17 = (2 * v15) | 1;
    if (v11 < 6)
    {
      v18 = (uint64_t)v17 << __clz(v17);
      this = (absl::lts_2020_02_25::numbers_internal *)absl::lts_2020_02_25::PowFive((unint64_t)v16, 5 - v11);
      v16 = this;
      v20 = 0;
      if (v18 < (unint64_t)this)
      {
LABEL_69:
        LODWORD(v21) = v15 + 1;
        goto LABEL_70;
      }
    }
    else
    {
      this = (absl::lts_2020_02_25::numbers_internal *)absl::lts_2020_02_25::PowFive(v17, v11 - 5);
      v18 = (unint64_t)this;
      v20 = v19;
      a3 = 0;
      if (this < v16)
        goto LABEL_69;
    }
    if ((unint64_t)v16 < v18 || v20 >= a3)
    {
      v23 = v16 == (absl::lts_2020_02_25::numbers_internal *)v18 && a3 == v20;
      LODWORD(v21) = (v15 & 1) + v15;
      if (!v23)
        LODWORD(v21) = v15;
      goto LABEL_70;
    }
    goto LABEL_69;
  }
  v21 = (v14 + 0x8000) >> 16;
LABEL_70:
  if ((_DWORD)v21 == 1000000)
    v24 = 100000;
  else
    v24 = v21;
  v25 = v24 / 10000;
  if ((v24 / 10000) >= 0x64)
    absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((uint64_t)this, (uint64_t)a3, a4);
  v26 = v24 % 10000;
  if ((v26 / 100) >= 0x64)
    absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((uint64_t)this, (uint64_t)a3, a4);
  if ((v26 % 100) >= 0x64)
    absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((uint64_t)this, (uint64_t)a3, a4);
  v27 = (unsigned __int16)absl::lts_2020_02_25::numbers_internal::two_ASCII_digits[v25];
  v28 = (unsigned __int16)absl::lts_2020_02_25::numbers_internal::two_ASCII_digits[v26 / 100];
  v29 = v21 > 0xF4240;
  if ((_DWORD)v21 == 1000000)
    v30 = v11 + 1;
  else
    v30 = v11;
  v31 = (unsigned __int16)absl::lts_2020_02_25::numbers_internal::two_ASCII_digits[v26 % 100];
  v32 = (v27 << 32) | (v28 << 48);
  *(_WORD *)v7 = 11824;
  switch(v30)
  {
    case -4:
      *((_BYTE *)v7 + 2) = 48;
      v7 = (absl::lts_2020_02_25::numbers_internal *)((char *)v7 + 1);
      goto LABEL_81;
    case -3:
LABEL_81:
      *((_BYTE *)v7 + 2) = 48;
      v7 = (absl::lts_2020_02_25::numbers_internal *)((char *)v7 + 1);
      goto LABEL_82;
    case -2:
LABEL_82:
      *((_BYTE *)v7 + 2) = 48;
      v7 = (absl::lts_2020_02_25::numbers_internal *)((char *)v7 + 1);
      goto LABEL_83;
    case -1:
LABEL_83:
      *((_BYTE *)v7 + 2) = v27;
      *(_WORD *)((char *)v7 + 3) = HIDWORD(v32) >> 8;
      *((_BYTE *)v7 + 5) = HIBYTE(v32);
      *((_WORD *)v7 + 3) = v31;
      v33 = (char *)v7 + 9;
      result = (absl::lts_2020_02_25::numbers_internal *)((char *)v7 + 9) - v4;
      do
      {
        v34 = *(v33 - 2);
        --result;
        --v33;
      }
      while (v34 == 48);
      *v33 = 0;
      return result;
    case 0:
      *(_BYTE *)v7 = v27;
      *((_BYTE *)v7 + 1) = 46;
      *((_WORD *)v7 + 1) = HIDWORD(v32) >> 8;
      *((_BYTE *)v7 + 4) = HIBYTE(v32);
      *(_WORD *)((char *)v7 + 5) = v31;
      v43 = (char *)v7 + 8;
      do
      {
        v44 = *(v43 - 2);
        --v43;
      }
      while (v44 == 48);
      if (v44 == 46)
        --v43;
      break;
    case 1:
      *(_BYTE *)v7 = v27;
      *((_BYTE *)v7 + 1) = BYTE5(v32);
      *((_BYTE *)v7 + 2) = 46;
      *(_WORD *)((char *)v7 + 3) = v28;
      v45 = (char *)v7 + 8;
      *(_WORD *)((char *)v7 + 5) = v31;
      do
      {
        v46 = *(v45 - 2);
        --v45;
      }
      while (v46 == 48);
      goto LABEL_112;
    case 2:
      *(_BYTE *)v7 = v27;
      *(_WORD *)((char *)v7 + 1) = HIDWORD(v32) >> 8;
      *((_BYTE *)v7 + 3) = 46;
      *((_BYTE *)v7 + 4) = BYTE1(v28);
      v45 = (char *)v7 + 8;
      *(_WORD *)((char *)v7 + 5) = v31;
      do
      {
        v46 = *(v45 - 2);
        --v45;
      }
      while (v46 == 48);
LABEL_112:
      if (v46 == 46)
        v43 = v45 - 1;
      else
        v43 = v45;
      break;
    case 3:
      *(_BYTE *)v7 = v27;
      *(_WORD *)((char *)v7 + 1) = HIDWORD(v32) >> 8;
      *((_BYTE *)v7 + 3) = HIBYTE(v32);
      v47 = v31 >> 8;
      if (((v31 >> 8) | v31) == 0x30)
      {
        v43 = (char *)v7 + 4;
        break;
      }
      *((_BYTE *)v7 + 4) = 46;
      *((_BYTE *)v7 + 5) = v31;
      if (v47 != 48)
        goto LABEL_123;
      v43 = (char *)v7 + 6;
      break;
    case 4:
      *(_BYTE *)v7 = v27;
      *(_WORD *)((char *)v7 + 1) = HIDWORD(v32) >> 8;
      *((_BYTE *)v7 + 3) = HIBYTE(v32);
      *((_BYTE *)v7 + 4) = v31;
      v47 = v31 >> 8;
      if (v31 >> 8 == 48)
      {
        v43 = (char *)v7 + 5;
      }
      else
      {
        *((_BYTE *)v7 + 5) = 46;
LABEL_123:
        v43 = (char *)v7 + 7;
        *((_BYTE *)v7 + 6) = v47;
      }
      break;
    case 5:
      *(_BYTE *)v7 = v27;
      *(_WORD *)((char *)v7 + 1) = HIDWORD(v32) >> 8;
      *((_BYTE *)v7 + 3) = HIBYTE(v32);
      *((_WORD *)v7 + 2) = v31;
      *((_BYTE *)v7 + 6) = 0;
      return (absl::lts_2020_02_25::numbers_internal *)((char *)v7 + 6) - v4;
    default:
      if (!v29)
        absl::lts_2020_02_25::numbers_internal::SixDigitsToBuffer();
      v35 = v32 >> 40;
      *(_BYTE *)v7 = v27;
      *((_WORD *)v7 + 1) = v35;
      *((_BYTE *)v7 + 4) = BYTE2(v35);
      *(_WORD *)((char *)v7 + 5) = v31;
      v36 = (char *)v7 + 8;
      do
      {
        v37 = *(v36 - 2);
        --v36;
      }
      while (v37 == 48);
      if (v37 == 46)
        v38 = v36 - 1;
      else
        v38 = v36;
      *v38 = 101;
      if (v30 <= 0)
        v39 = 45;
      else
        v39 = 43;
      if (v30 >= 0)
        v40 = v30;
      else
        v40 = -v30;
      v38[1] = v39;
      if (v40 < 0x64)
      {
        v42 = v38 + 2;
      }
      else
      {
        v41 = v40 / 0x64;
        v40 %= 0x64u;
        v38[2] = v41 + 48;
        if (v40 >= 0x64)
          absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((uint64_t)this, (uint64_t)a3, a4);
        v42 = v38 + 3;
      }
      *(_WORD *)v42 = *(_WORD *)((unsigned __int16)v28 + 2 * v40);
      v42[2] = 0;
      return v42 + 2 - (_BYTE *)v4;
  }
  *v43 = 0;
  return v43 - (_BYTE *)v4;
}

unint64_t absl::lts_2020_02_25::PowFive(unint64_t this, int a2)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  absl::lts_2020_02_25 *v9;
  BOOL v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  if (a2 < 13)
  {
    v2 = 0;
  }
  else
  {
    v2 = 0;
    v3 = a2;
    do
    {
      v4 = 1220703125 * this;
      v5 = (__PAIR128__(0x48C2739500000000 * HIDWORD(this) + v4, 0x48C2739500000000 * HIDWORD(v2))
          + __PAIR128__((1220703125 * (unint64_t)HIDWORD(v2)) >> 32, 1220703125 * (unint64_t)v2)) >> 64;
      v2 = 0x48C2739500000000 * HIDWORD(v2) + 1220703125 * v2;
      v6 = (1220703125 * (unint64_t)HIDWORD(this)) >> 32;
      if (v5 < v4)
        ++v6;
      v7 = __clz(v6);
      v8 = (v2 >> -v7) + (v5 << v7);
      v9 = (absl::lts_2020_02_25 *)((v5 >> -v7) + (v6 << v7));
      if (v6)
        this = (unint64_t)v9;
      else
        this = v5;
      if (v6)
        v2 = v8;
      LOBYTE(a2) = v3 - 13;
      v10 = v3 <= 25;
      v3 -= 13;
    }
    while (!v10);
  }
  v11 = dword_22DCE62F8[a2 & 0xF];
  v12 = this * (unint64_t)v11;
  v13 = HIDWORD(this) * (unint64_t)v11;
  v16 = v2 * (unint64_t)v11 + ((HIDWORD(v2) * (unint64_t)v11) << 32);
  v14 = (__PAIR128__((v13 << 32) + v12, v2 * (unint64_t)v11)
       + __PAIR128__((HIDWORD(v2) * (unint64_t)v11) >> 32, (HIDWORD(v2) * (unint64_t)v11) << 32)) >> 64;
  v15 = v16;
  v17 = HIDWORD(v13);
  if (v14 < v12)
    ++v17;
  v18 = __clz(v17);
  v19 = (v16 >> -v18) + (v14 << v18);
  v20 = (v14 >> -v18) + (v17 << v18);
  if (v17)
  {
    v14 = v20;
    v15 = v19;
  }
  v21 = __clz(v14);
  if (v21)
    return (v15 >> -(char)v21) + (v14 << v21);
  else
    return v14;
}

void OUTLINED_FUNCTION_0_1(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 123, a4);
}

void absl::lts_2020_02_25::StrCat(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  unint64_t v6;
  std::string *v7;
  uint64_t v8;
  std::string *v9;
  char *v10;
  uint64_t v11;
  std::string::size_type size;

  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  v6 = *(_QWORD *)(a2 + 8) + *(_QWORD *)(a1 + 8);
  if (!v6)
  {
    *((_BYTE *)&a3->__r_.__value_.__s + 23) = 0;
    goto LABEL_6;
  }
  if (v6 < 0x17
    || (std::string::__grow_by(a3, 0x16uLL, v6 - 22, 0, 0, 0, 0),
        a3->__r_.__value_.__l.__size_ = 0,
        (SHIBYTE(a3->__r_.__value_.__r.__words[2]) & 0x80000000) == 0))
  {
    *((_BYTE *)&a3->__r_.__value_.__s + 23) = v6 & 0x7F;
LABEL_6:
    v7 = a3;
    goto LABEL_7;
  }
  v7 = (std::string *)a3->__r_.__value_.__r.__words[0];
  a3->__r_.__value_.__l.__size_ = v6;
LABEL_7:
  v7->__r_.__value_.__s.__data_[v6] = 0;
  v8 = *(_QWORD *)(a1 + 8);
  if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = a3;
  else
    v9 = (std::string *)a3->__r_.__value_.__r.__words[0];
  if (v8)
    memcpy(v9, *(const void **)a1, *(_QWORD *)(a1 + 8));
  v10 = (char *)v9 + v8;
  v11 = *(_QWORD *)(a2 + 8);
  if (v11)
    memcpy(v10, *(const void **)a2, *(_QWORD *)(a2 + 8));
  size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = a3->__r_.__value_.__l.__size_;
  if (&v10[v11] != (char *)v9 + size)
    __assert_rtn("StrCat", "str_cat.cc", 106, "out == begin + result.size()");
}

void sub_22D9D904C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void absl::lts_2020_02_25::StrCat(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  unint64_t v8;
  std::string *v9;
  uint64_t v10;
  std::string *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  std::string::size_type size;

  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  v8 = *(_QWORD *)(a2 + 8) + *(_QWORD *)(a1 + 8) + *(_QWORD *)(a3 + 8);
  if (!v8)
  {
    *((_BYTE *)&a4->__r_.__value_.__s + 23) = 0;
    goto LABEL_6;
  }
  if (v8 < 0x17
    || (std::string::__grow_by(a4, 0x16uLL, v8 - 22, 0, 0, 0, 0),
        a4->__r_.__value_.__l.__size_ = 0,
        (SHIBYTE(a4->__r_.__value_.__r.__words[2]) & 0x80000000) == 0))
  {
    *((_BYTE *)&a4->__r_.__value_.__s + 23) = v8 & 0x7F;
LABEL_6:
    v9 = a4;
    goto LABEL_7;
  }
  v9 = (std::string *)a4->__r_.__value_.__r.__words[0];
  a4->__r_.__value_.__l.__size_ = v8;
LABEL_7:
  v9->__r_.__value_.__s.__data_[v8] = 0;
  v10 = *(_QWORD *)(a1 + 8);
  if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = a4;
  else
    v11 = (std::string *)a4->__r_.__value_.__r.__words[0];
  if (v10)
    memcpy(v11, *(const void **)a1, *(_QWORD *)(a1 + 8));
  v12 = (char *)v11 + v10;
  v13 = *(_QWORD *)(a2 + 8);
  if (v13)
    memcpy(v12, *(const void **)a2, *(_QWORD *)(a2 + 8));
  v14 = &v12[v13];
  v15 = *(_QWORD *)(a3 + 8);
  if (v15)
    memcpy(v14, *(const void **)a3, *(_QWORD *)(a3 + 8));
  size = HIBYTE(a4->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = a4->__r_.__value_.__l.__size_;
  if (&v14[v15] != (char *)v11 + size)
    __assert_rtn("StrCat", "str_cat.cc", 119, "out == begin + result.size()");
}

void sub_22D9D91C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void absl::lts_2020_02_25::StrCat(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, std::string *a5@<X8>)
{
  unint64_t v10;
  std::string *v11;
  uint64_t v12;
  std::string *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  std::string::size_type size;

  a5->__r_.__value_.__r.__words[0] = 0;
  a5->__r_.__value_.__l.__size_ = 0;
  a5->__r_.__value_.__r.__words[2] = 0;
  v10 = *(_QWORD *)(a2 + 8) + *(_QWORD *)(a1 + 8) + *(_QWORD *)(a3 + 8) + *(_QWORD *)(a4 + 8);
  if (!v10)
  {
    *((_BYTE *)&a5->__r_.__value_.__s + 23) = 0;
    goto LABEL_6;
  }
  if (v10 < 0x17
    || (std::string::__grow_by(a5, 0x16uLL, v10 - 22, 0, 0, 0, 0),
        a5->__r_.__value_.__l.__size_ = 0,
        (SHIBYTE(a5->__r_.__value_.__r.__words[2]) & 0x80000000) == 0))
  {
    *((_BYTE *)&a5->__r_.__value_.__s + 23) = v10 & 0x7F;
LABEL_6:
    v11 = a5;
    goto LABEL_7;
  }
  v11 = (std::string *)a5->__r_.__value_.__r.__words[0];
  a5->__r_.__value_.__l.__size_ = v10;
LABEL_7:
  v11->__r_.__value_.__s.__data_[v10] = 0;
  v12 = *(_QWORD *)(a1 + 8);
  if ((a5->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = a5;
  else
    v13 = (std::string *)a5->__r_.__value_.__r.__words[0];
  if (v12)
    memcpy(v13, *(const void **)a1, *(_QWORD *)(a1 + 8));
  v14 = (char *)v13 + v12;
  v15 = *(_QWORD *)(a2 + 8);
  if (v15)
    memcpy(v14, *(const void **)a2, *(_QWORD *)(a2 + 8));
  v16 = &v14[v15];
  v17 = *(_QWORD *)(a3 + 8);
  if (v17)
    memcpy(v16, *(const void **)a3, *(_QWORD *)(a3 + 8));
  v18 = &v16[v17];
  v19 = *(_QWORD *)(a4 + 8);
  if (v19)
    memcpy(v18, *(const void **)a4, *(_QWORD *)(a4 + 8));
  size = HIBYTE(a5->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = a5->__r_.__value_.__l.__size_;
  if (&v18[v19] != (char *)v13 + size)
    __assert_rtn("StrCat", "str_cat.cc", 134, "out == begin + result.size()");
}

void sub_22D9D936C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void absl::lts_2020_02_25::strings_internal::CatPieces(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  const double *v13;
  int64x2_t v14;
  int64x2_t v15;
  const double *v16;
  unsigned __int128 v17;
  unsigned __int128 v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  size_t *v22;
  char *v23;
  size_t v24;

  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  if (!a2)
  {
    v9 = a3 + 23;
LABEL_15:
    v7 = 0;
    *v9 = 0;
LABEL_16:
    a3[v7] = 0;
    LODWORD(v19) = a3[23];
    if ((int)v19 >= 0)
      v20 = a3;
    else
      v20 = *(char **)a3;
    if (a2)
      goto LABEL_20;
LABEL_29:
    v23 = v20;
    goto LABEL_30;
  }
  v6 = (a2 - 1) & 0xFFFFFFFFFFFFFFFLL;
  if (v6 >= 4)
  {
    v10 = v6 + 1;
    v11 = v10 & 3;
    if ((v10 & 3) == 0)
      v11 = 4;
    v12 = v10 - v11;
    v8 = a1 + 16 * v12;
    v13 = (const double *)(a1 + 40);
    v14 = 0uLL;
    v15 = 0uLL;
    do
    {
      v16 = v13 - 4;
      v17 = (unsigned __int128)vld2q_f64(v16);
      v18 = (unsigned __int128)vld2q_f64(v13);
      v14 = vaddq_s64((int64x2_t)v17, v14);
      v15 = vaddq_s64((int64x2_t)v18, v15);
      v13 += 8;
      v12 -= 4;
    }
    while (v12);
    v7 = vaddvq_s64(vaddq_s64(v15, v14));
  }
  else
  {
    v7 = 0;
    v8 = a1;
  }
  do
  {
    v7 += *(_QWORD *)(v8 + 8);
    v8 += 16;
  }
  while (v8 != a1 + 16 * a2);
  v9 = a3 + 23;
  if (!v7)
    goto LABEL_15;
  if (v7 < 0x17
    || (std::string::__grow_by((std::string *)a3, 0x16uLL, v7 - 22, 0, 0, 0, 0),
        *((_QWORD *)a3 + 1) = 0,
        (a3[23] & 0x80000000) == 0))
  {
    *v9 = v7 & 0x7F;
    goto LABEL_16;
  }
  v19 = *(_QWORD *)a3;
  *((_QWORD *)a3 + 1) = v7;
  *(_BYTE *)(v19 + v7) = 0;
  LODWORD(v19) = a3[23];
  if ((int)v19 >= 0)
    v20 = a3;
  else
    v20 = *(char **)a3;
  if (!a2)
    goto LABEL_29;
LABEL_20:
  v21 = 16 * a2;
  v22 = (size_t *)(a1 + 8);
  v23 = v20;
  do
  {
    v24 = *v22;
    if (*v22)
    {
      memcpy(v23, (const void *)*(v22 - 1), *v22);
      v23 += v24;
    }
    v22 += 2;
    v21 -= 16;
  }
  while (v21);
  LOBYTE(v19) = *v9;
LABEL_30:
  v19 = v19;
  if ((v19 & 0x80u) != 0)
    v19 = *((_QWORD *)a3 + 1);
  if (v23 != &v20[v19])
    __assert_rtn("CatPieces", "str_cat.cc", 156, "out == begin + result.size()");
}

void sub_22D9D9578(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v2;

  if (*v2 < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void absl::lts_2020_02_25::strings_internal::AppendPieces(std::string *this, _QWORD *a2, uint64_t a3)
{
  const void **v3;
  unint64_t v5;
  std::string::size_type v6;
  const void **v7;
  std::string::size_type v8;
  const void **v9;
  const void *v10;
  BOOL v11;
  char v12;
  std::string::size_type size;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  std::string::size_type v20;
  int v21;
  unint64_t v22;
  std::string::size_type v23;
  std::string *v24;
  std::string *v25;
  std::string::size_type v26;
  char *v27;

  v3 = (const void **)a2;
  LODWORD(v5) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v6 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v5 & 0x80000000) != 0)
  {
    size = this->__r_.__value_.__l.__size_;
    v7 = (const void **)&a2[2 * a3];
    if (a3)
    {
      v14 = 16 * a3;
      v15 = a2 + 1;
      v8 = this->__r_.__value_.__l.__size_;
      v16 = a2 + 1;
      do
      {
        v18 = *v16;
        v16 += 2;
        v17 = v18;
        if (v18 && *(v15 - 1) - this->__r_.__value_.__r.__words[0] <= this->__r_.__value_.__l.__size_)
LABEL_17:
          absl::lts_2020_02_25::strings_internal::AppendPieces();
        v8 += v17;
        v15 = v16;
        v14 -= 16;
      }
      while (v14);
      v12 = 0;
      if ((v5 & 0x80000000) != 0)
      {
LABEL_29:
        v6 = this->__r_.__value_.__l.__size_;
        v19 = v8 - v6;
        if (v8 <= v6)
        {
          v23 = this->__r_.__value_.__r.__words[0];
          this->__r_.__value_.__l.__size_ = v8;
          *(_BYTE *)(v23 + v8) = 0;
          v21 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
          if (v21 < 0)
            goto LABEL_37;
          goto LABEL_33;
        }
        v22 = this->__r_.__value_.__r.__words[2];
        v20 = (v22 & 0x7FFFFFFFFFFFFFFFLL) - 1;
        v5 = HIBYTE(v22);
        if (v20 - v6 >= v19)
          goto LABEL_23;
LABEL_22:
        std::string::__grow_by(this, v20, v19 - v20 + v6, v6, v6, 0, 0);
        this->__r_.__value_.__l.__size_ = v6;
        LOBYTE(v5) = *((_BYTE *)&this->__r_.__value_.__s + 23);
LABEL_23:
        if ((v5 & 0x80) != 0)
        {
          v26 = this->__r_.__value_.__r.__words[0];
          this->__r_.__value_.__l.__size_ = v6 + v19;
          *(_BYTE *)(v26 + v6 + v19) = 0;
          v21 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
          if (v21 < 0)
            goto LABEL_37;
        }
        else
        {
          *((_BYTE *)&this->__r_.__value_.__s + 23) = (v6 + v19) & 0x7F;
          this->__r_.__value_.__s.__data_[v6 + v19] = 0;
          v21 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
          if (v21 < 0)
            goto LABEL_37;
        }
        goto LABEL_33;
      }
    }
    else
    {
      v12 = 1;
      v8 = this->__r_.__value_.__l.__size_;
      if ((v5 & 0x80000000) != 0)
        goto LABEL_29;
    }
  }
  else
  {
    v7 = (const void **)&a2[2 * a3];
    if (!a3)
    {
      v12 = 1;
      v8 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      size = v8;
      goto LABEL_26;
    }
    v8 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = (const void **)a2;
    do
    {
      v10 = v9[1];
      if (v10)
        v11 = (_BYTE *)*v9 - (_BYTE *)this > v6;
      else
        v11 = 1;
      if (!v11)
        goto LABEL_17;
      v8 += (std::string::size_type)v10;
      v9 += 2;
    }
    while (v9 != v7);
    v12 = 0;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((v5 & 0x80000000) != 0)
      goto LABEL_29;
  }
  v19 = v8 - v6;
  if (v8 > v6)
  {
    v20 = 22;
    if (22 - v6 >= v19)
      goto LABEL_23;
    goto LABEL_22;
  }
LABEL_26:
  *((_BYTE *)&this->__r_.__value_.__s + 23) = v8 & 0x7F;
  this->__r_.__value_.__s.__data_[v8] = 0;
  v21 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if (v21 < 0)
  {
LABEL_37:
    v25 = (std::string *)this->__r_.__value_.__r.__words[0];
    v24 = (std::string *)(this->__r_.__value_.__r.__words[0] + size);
    if ((v12 & 1) != 0)
    {
LABEL_45:
      if (v24 != (std::string *)((char *)v25 + this->__r_.__value_.__l.__size_))
        goto LABEL_46;
      return;
    }
    do
    {
LABEL_40:
      v27 = (char *)v3[1];
      if (v27)
      {
        memcpy(v24, *v3, (size_t)v3[1]);
        v24 = (std::string *)&v27[(_QWORD)v24];
      }
      v3 += 2;
    }
    while (v3 != v7);
    if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (v24 != (std::string *)((char *)v25 + HIBYTE(this->__r_.__value_.__r.__words[2])))
        goto LABEL_46;
      return;
    }
    goto LABEL_45;
  }
LABEL_33:
  v24 = (std::string *)((char *)this + size);
  v25 = this;
  if ((v12 & 1) == 0)
    goto LABEL_40;
  if (v24 != (std::string *)((char *)this + v21))
LABEL_46:
    absl::lts_2020_02_25::strings_internal::AppendPieces();
}

std::string *absl::lts_2020_02_25::StrAppend(uint64_t a1, uint64_t a2)
{
  const std::string::value_type *v2;
  std::string::size_type v3;

  v2 = *(const std::string::value_type **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    if (*(char *)(a1 + 23) < 0)
    {
      if ((unint64_t)&v2[-*(_QWORD *)a1] > *(_QWORD *)(a1 + 8))
        return std::string::append((std::string *)a1, v2, v3);
    }
    else if ((unint64_t)&v2[-a1] > *(unsigned __int8 *)(a1 + 23))
    {
      return std::string::append((std::string *)a1, v2, v3);
    }
    absl::lts_2020_02_25::StrAppend();
  }
  return std::string::append((std::string *)a1, v2, v3);
}

void absl::lts_2020_02_25::StrAppend(std::string *this, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  std::string::size_type size;
  unint64_t v12;
  unint64_t v13;
  std::string::size_type v14;
  std::string *v15;
  std::string::size_type v16;
  unint64_t v17;
  std::string::size_type v18;
  std::string::size_type v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  std::string *v24;

  v6 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    v7 = *(_BYTE **)a2;
    if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (v7 - (_BYTE *)this > (unint64_t)HIBYTE(this->__r_.__value_.__r.__words[2]))
        goto LABEL_4;
LABEL_22:
      absl::lts_2020_02_25::StrAppend();
    }
    if ((unint64_t)&v7[-this->__r_.__value_.__r.__words[0]] <= this->__r_.__value_.__l.__size_)
      goto LABEL_22;
  }
LABEL_4:
  v8 = *(_QWORD *)(a3 + 8);
  if (v8)
  {
    v9 = *(_BYTE **)a3;
    LODWORD(v10) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((v10 & 0x80000000) != 0)
    {
      if ((unint64_t)&v9[-this->__r_.__value_.__r.__words[0]] > this->__r_.__value_.__l.__size_)
      {
LABEL_7:
        if ((v10 & 0x80) == 0)
          goto LABEL_8;
        goto LABEL_17;
      }
    }
    else if (v9 - (_BYTE *)this > (unint64_t)HIBYTE(this->__r_.__value_.__r.__words[2]))
    {
      goto LABEL_7;
    }
    absl::lts_2020_02_25::StrAppend();
  }
  LOBYTE(v10) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  if ((v10 & 0x80) == 0)
  {
LABEL_8:
    size = v10;
    v12 = v8 + v6;
    v13 = v8 + v6 + v10;
    if (v13 <= v10)
    {
LABEL_14:
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v13 & 0x7F;
      this->__r_.__value_.__s.__data_[v13] = 0;
      v15 = this;
      if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_30;
      goto LABEL_29;
    }
    if (!v12)
    {
      v15 = this;
      goto LABEL_30;
    }
    v14 = 22;
    if (22 - (unint64_t)v10 >= v12)
    {
LABEL_12:
      if ((v10 & 0x80) != 0)
      {
        v19 = this->__r_.__value_.__r.__words[0];
        this->__r_.__value_.__l.__size_ = size + v12;
        *(_BYTE *)(v19 + size + v12) = 0;
        v15 = this;
        if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_30;
        goto LABEL_29;
      }
      v13 = size + v12;
      goto LABEL_14;
    }
LABEL_11:
    std::string::__grow_by(this, v14, v12 - v14 + size, size, size, 0, 0);
    this->__r_.__value_.__l.__size_ = size;
    LOBYTE(v10) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    goto LABEL_12;
  }
LABEL_17:
  size = this->__r_.__value_.__l.__size_;
  v12 = v8 + v6;
  v16 = v8 + v6 + size;
  if (size >= v16)
  {
    v18 = this->__r_.__value_.__r.__words[0];
    this->__r_.__value_.__l.__size_ = v16;
    *(_BYTE *)(v18 + v16) = 0;
    v15 = this;
    if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_30;
    goto LABEL_29;
  }
  if (v12)
  {
    v17 = this->__r_.__value_.__r.__words[2];
    v14 = (v17 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = HIBYTE(v17);
    if (v14 - size >= v12)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_29:
  v15 = (std::string *)this->__r_.__value_.__r.__words[0];
LABEL_30:
  v20 = (char *)v15 + size;
  v21 = *(_QWORD *)(a2 + 8);
  if (v21)
    memcpy(v20, *(const void **)a2, *(_QWORD *)(a2 + 8));
  v22 = &v20[v21];
  v23 = *(_QWORD *)(a3 + 8);
  if (v23)
    memcpy(v22, *(const void **)a3, *(_QWORD *)(a3 + 8));
  v24 = (std::string *)&v22[v23];
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v24 == (std::string *)((char *)v15 + HIBYTE(this->__r_.__value_.__r.__words[2])))
      return;
LABEL_38:
    absl::lts_2020_02_25::StrAppend();
  }
  if (v24 != (std::string *)((char *)v15 + this->__r_.__value_.__l.__size_))
    goto LABEL_38;
}

void absl::lts_2020_02_25::StrAppend(std::string *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  std::string::size_type size;
  unint64_t v16;
  unint64_t v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v20;
  unint64_t v21;
  std::string::size_type v22;
  std::string::size_type v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  std::string *v30;

  v8 = *(_QWORD *)(a2 + 8);
  if (v8)
  {
    v9 = *(_BYTE **)a2;
    if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (v9 - (_BYTE *)this > (unint64_t)HIBYTE(this->__r_.__value_.__r.__words[2]))
        goto LABEL_4;
LABEL_25:
      absl::lts_2020_02_25::StrAppend();
    }
    if ((unint64_t)&v9[-this->__r_.__value_.__r.__words[0]] <= this->__r_.__value_.__l.__size_)
      goto LABEL_25;
  }
LABEL_4:
  v10 = *(_QWORD *)(a3 + 8);
  if (!v10)
    goto LABEL_7;
  v11 = *(_BYTE **)a3;
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v11 - (_BYTE *)this > (unint64_t)HIBYTE(this->__r_.__value_.__r.__words[2]))
      goto LABEL_7;
LABEL_27:
    absl::lts_2020_02_25::StrAppend();
  }
  if ((unint64_t)&v11[-this->__r_.__value_.__r.__words[0]] <= this->__r_.__value_.__l.__size_)
    goto LABEL_27;
LABEL_7:
  v12 = *(_QWORD *)(a4 + 8);
  if (v12)
  {
    v13 = *(_BYTE **)a4;
    LODWORD(v14) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((v14 & 0x80000000) != 0)
    {
      if ((unint64_t)&v13[-this->__r_.__value_.__r.__words[0]] > this->__r_.__value_.__l.__size_)
      {
LABEL_10:
        if ((v14 & 0x80) == 0)
          goto LABEL_11;
        goto LABEL_20;
      }
    }
    else if (v13 - (_BYTE *)this > (unint64_t)HIBYTE(this->__r_.__value_.__r.__words[2]))
    {
      goto LABEL_10;
    }
    absl::lts_2020_02_25::StrAppend();
  }
  LOBYTE(v14) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  if ((v14 & 0x80) == 0)
  {
LABEL_11:
    size = v14;
    v16 = v10 + v8 + v12;
    v17 = v16 + v14;
    if (v17 <= v14)
    {
LABEL_17:
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
      this->__r_.__value_.__s.__data_[v17] = 0;
      v19 = this;
      if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_35;
      goto LABEL_34;
    }
    if (!v16)
    {
      v19 = this;
      goto LABEL_35;
    }
    v18 = 22;
    if (22 - (unint64_t)v14 >= v16)
    {
LABEL_15:
      if ((v14 & 0x80) != 0)
      {
        v23 = this->__r_.__value_.__r.__words[0];
        this->__r_.__value_.__l.__size_ = size + v16;
        *(_BYTE *)(v23 + size + v16) = 0;
        v19 = this;
        if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_35;
        goto LABEL_34;
      }
      v17 = size + v16;
      goto LABEL_17;
    }
LABEL_14:
    std::string::__grow_by(this, v18, v16 - v18 + size, size, size, 0, 0);
    this->__r_.__value_.__l.__size_ = size;
    LOBYTE(v14) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    goto LABEL_15;
  }
LABEL_20:
  size = this->__r_.__value_.__l.__size_;
  v16 = v10 + v8 + v12;
  v20 = v16 + size;
  if (size >= v16 + size)
  {
    v22 = this->__r_.__value_.__r.__words[0];
    this->__r_.__value_.__l.__size_ = v20;
    *(_BYTE *)(v22 + v20) = 0;
    v19 = this;
    if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_35;
    goto LABEL_34;
  }
  if (v16)
  {
    v21 = this->__r_.__value_.__r.__words[2];
    v18 = (v21 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v14 = HIBYTE(v21);
    if (v18 - size >= v16)
      goto LABEL_15;
    goto LABEL_14;
  }
LABEL_34:
  v19 = (std::string *)this->__r_.__value_.__r.__words[0];
LABEL_35:
  v24 = (char *)v19 + size;
  v25 = *(_QWORD *)(a2 + 8);
  if (v25)
    memcpy(v24, *(const void **)a2, *(_QWORD *)(a2 + 8));
  v26 = &v24[v25];
  v27 = *(_QWORD *)(a3 + 8);
  if (v27)
    memcpy(v26, *(const void **)a3, *(_QWORD *)(a3 + 8));
  v28 = &v26[v27];
  v29 = *(_QWORD *)(a4 + 8);
  if (v29)
    memcpy(v28, *(const void **)a4, *(_QWORD *)(a4 + 8));
  v30 = (std::string *)&v28[v29];
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v30 == (std::string *)((char *)v19 + HIBYTE(this->__r_.__value_.__r.__words[2])))
      return;
LABEL_45:
    absl::lts_2020_02_25::StrAppend();
  }
  if (v30 != (std::string *)((char *)v19 + this->__r_.__value_.__l.__size_))
    goto LABEL_45;
}

void absl::lts_2020_02_25::StrAppend(std::string *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  std::string::size_type size;
  unint64_t v20;
  unint64_t v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  unint64_t v25;
  std::string::size_type v26;
  std::string::size_type v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  std::string *v36;

  v10 = *(_QWORD *)(a2 + 8);
  if (v10)
  {
    v11 = *(_BYTE **)a2;
    if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (v11 - (_BYTE *)this > (unint64_t)HIBYTE(this->__r_.__value_.__r.__words[2]))
        goto LABEL_4;
LABEL_28:
      absl::lts_2020_02_25::StrAppend();
    }
    if ((unint64_t)&v11[-this->__r_.__value_.__r.__words[0]] <= this->__r_.__value_.__l.__size_)
      goto LABEL_28;
  }
LABEL_4:
  v12 = *(_QWORD *)(a3 + 8);
  if (!v12)
    goto LABEL_7;
  v13 = *(_BYTE **)a3;
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v13 - (_BYTE *)this > (unint64_t)HIBYTE(this->__r_.__value_.__r.__words[2]))
      goto LABEL_7;
LABEL_30:
    absl::lts_2020_02_25::StrAppend();
  }
  if ((unint64_t)&v13[-this->__r_.__value_.__r.__words[0]] <= this->__r_.__value_.__l.__size_)
    goto LABEL_30;
LABEL_7:
  v14 = *(_QWORD *)(a4 + 8);
  if (!v14)
    goto LABEL_10;
  v15 = *(_BYTE **)a4;
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v15 - (_BYTE *)this > (unint64_t)HIBYTE(this->__r_.__value_.__r.__words[2]))
      goto LABEL_10;
LABEL_32:
    absl::lts_2020_02_25::StrAppend();
  }
  if ((unint64_t)&v15[-this->__r_.__value_.__r.__words[0]] <= this->__r_.__value_.__l.__size_)
    goto LABEL_32;
LABEL_10:
  v16 = *(_QWORD *)(a5 + 8);
  if (v16)
  {
    v17 = *(_BYTE **)a5;
    LODWORD(v18) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((v18 & 0x80000000) != 0)
    {
      if ((unint64_t)&v17[-this->__r_.__value_.__r.__words[0]] > this->__r_.__value_.__l.__size_)
      {
LABEL_13:
        if ((v18 & 0x80) == 0)
          goto LABEL_14;
        goto LABEL_23;
      }
    }
    else if (v17 - (_BYTE *)this > (unint64_t)HIBYTE(this->__r_.__value_.__r.__words[2]))
    {
      goto LABEL_13;
    }
    absl::lts_2020_02_25::StrAppend();
  }
  LOBYTE(v18) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  if ((v18 & 0x80) == 0)
  {
LABEL_14:
    size = v18;
    v20 = v12 + v10 + v14 + v16;
    v21 = v20 + v18;
    if (v21 <= v18)
    {
LABEL_20:
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v21 & 0x7F;
      this->__r_.__value_.__s.__data_[v21] = 0;
      v23 = this;
      if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_40;
      goto LABEL_39;
    }
    if (!v20)
    {
      v23 = this;
      goto LABEL_40;
    }
    v22 = 22;
    if (22 - (unint64_t)v18 >= v20)
    {
LABEL_18:
      if ((v18 & 0x80) != 0)
      {
        v27 = this->__r_.__value_.__r.__words[0];
        this->__r_.__value_.__l.__size_ = size + v20;
        *(_BYTE *)(v27 + size + v20) = 0;
        v23 = this;
        if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_40;
        goto LABEL_39;
      }
      v21 = size + v20;
      goto LABEL_20;
    }
LABEL_17:
    std::string::__grow_by(this, v22, v20 - v22 + size, size, size, 0, 0);
    this->__r_.__value_.__l.__size_ = size;
    LOBYTE(v18) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    goto LABEL_18;
  }
LABEL_23:
  size = this->__r_.__value_.__l.__size_;
  v20 = v12 + v10 + v14 + v16;
  v24 = v20 + size;
  if (size >= v20 + size)
  {
    v26 = this->__r_.__value_.__r.__words[0];
    this->__r_.__value_.__l.__size_ = v24;
    *(_BYTE *)(v26 + v24) = 0;
    v23 = this;
    if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_40;
    goto LABEL_39;
  }
  if (v20)
  {
    v25 = this->__r_.__value_.__r.__words[2];
    v22 = (v25 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v18 = HIBYTE(v25);
    if (v22 - size >= v20)
      goto LABEL_18;
    goto LABEL_17;
  }
LABEL_39:
  v23 = (std::string *)this->__r_.__value_.__r.__words[0];
LABEL_40:
  v28 = (char *)v23 + size;
  v29 = *(_QWORD *)(a2 + 8);
  if (v29)
    memcpy(v28, *(const void **)a2, *(_QWORD *)(a2 + 8));
  v30 = &v28[v29];
  v31 = *(_QWORD *)(a3 + 8);
  if (v31)
    memcpy(v30, *(const void **)a3, *(_QWORD *)(a3 + 8));
  v32 = &v30[v31];
  v33 = *(_QWORD *)(a4 + 8);
  if (v33)
    memcpy(v32, *(const void **)a4, *(_QWORD *)(a4 + 8));
  v34 = &v32[v33];
  v35 = *(_QWORD *)(a5 + 8);
  if (v35)
    memcpy(v34, *(const void **)a5, *(_QWORD *)(a5 + 8));
  v36 = (std::string *)&v34[v35];
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v36 == (std::string *)((char *)v23 + HIBYTE(this->__r_.__value_.__r.__words[2])))
      return;
LABEL_52:
    absl::lts_2020_02_25::StrAppend();
  }
  if (v36 != (std::string *)((char *)v23 + this->__r_.__value_.__l.__size_))
    goto LABEL_52;
}

char *absl::lts_2020_02_25::ByChar::Find(char *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  BOOL v6;
  size_t v7;
  char *result;
  char *v9;

  v6 = a3 > a4;
  v7 = a3 - a4;
  if (!v6)
    return (char *)(a2 + a3);
  result = (char *)memchr((void *)(a2 + a4), *a1, v7);
  v9 = &result[-a2];
  if (!result || v9 + 1 == 0)
    return (char *)(a2 + a3);
  if (a3 < (unint64_t)v9)
    std::__throw_out_of_range[abi:ne180100]("string_view::substr");
  return result;
}

uint64_t absl::lts_2020_02_25::Symbolize(absl::lts_2020_02_25 *this, const void *a2, char *a3)
{
  return 0;
}

void absl::lts_2020_02_25::synchronization_internal::ReclaimThreadIdentity(absl::lts_2020_02_25::synchronization_internal *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  absl::lts_2020_02_25::base_internal::LowLevelAlloc *v9;
  absl::lts_2020_02_25::base_internal *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;

  v9 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)*((_QWORD *)this + 9);
  if (v9)
    absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(v9, a2, a3, a4, a5, a6, a7, a8);
  absl::lts_2020_02_25::synchronization_internal::PerThreadSem::Destroy((uint64_t)this);
  absl::lts_2020_02_25::base_internal::ClearCurrentThreadIdentity(v10);
  v18 = _MergedGlobals_26;
  if ((_MergedGlobals_26 & 1) == 0)
  {
    v19 = _MergedGlobals_26 | 1;
    while (1)
    {
      v20 = __ldaxr((unsigned int *)&_MergedGlobals_26);
      if (v20 != v18)
        break;
      if (!__stxr(v19, (unsigned int *)&_MergedGlobals_26))
      {
        if ((v20 & 1) != 0)
          goto LABEL_14;
        goto LABEL_8;
      }
    }
    __clrex();
    if ((v20 & 1) == 0)
      goto LABEL_8;
  }
LABEL_14:
  absl::lts_2020_02_25::base_internal::SpinLock::SlowLock((absl::lts_2020_02_25::base_internal::SpinLock *)&_MergedGlobals_26, v11, v12, v13, v14, v15, v16, v17);
LABEL_8:
  *((_QWORD *)this + 29) = qword_25407A6C0;
  qword_25407A6C0 = (uint64_t)this;
  v21 = _MergedGlobals_26 & 2;
  do
    v22 = __ldxr((unsigned int *)&_MergedGlobals_26);
  while (__stlxr(v21, (unsigned int *)&_MergedGlobals_26));
  if (v22 >= 8)
    absl::lts_2020_02_25::base_internal::SpinLock::SlowUnlock((absl::lts_2020_02_25::base_internal::SpinLock *)&_MergedGlobals_26, v22);
}

_QWORD *absl::lts_2020_02_25::synchronization_internal::CreateThreadIdentity(absl::lts_2020_02_25::synchronization_internal *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v8 = _MergedGlobals_26;
  if ((_MergedGlobals_26 & 1) != 0)
  {
LABEL_16:
    absl::lts_2020_02_25::base_internal::SpinLock::SlowLock((absl::lts_2020_02_25::base_internal::SpinLock *)&_MergedGlobals_26, a2, a3, a4, a5, a6, a7, a8);
    v11 = (_QWORD *)qword_25407A6C0;
    if (!qword_25407A6C0)
      goto LABEL_8;
  }
  else
  {
    v9 = _MergedGlobals_26 | 1;
    while (1)
    {
      v10 = __ldaxr((unsigned int *)&_MergedGlobals_26);
      if (v10 != v8)
        break;
      if (!__stxr(v9, (unsigned int *)&_MergedGlobals_26))
      {
        if ((v10 & 1) != 0)
          goto LABEL_16;
        goto LABEL_6;
      }
    }
    __clrex();
    if ((v10 & 1) != 0)
      goto LABEL_16;
LABEL_6:
    v11 = (_QWORD *)qword_25407A6C0;
    if (!qword_25407A6C0)
      goto LABEL_8;
  }
  qword_25407A6C0 = v11[29];
LABEL_8:
  v12 = _MergedGlobals_26 & 2;
  do
    v13 = __ldxr((unsigned int *)&_MergedGlobals_26);
  while (__stlxr(v12, (unsigned int *)&_MergedGlobals_26));
  if (v13 >= 8)
    absl::lts_2020_02_25::base_internal::SpinLock::SlowUnlock((absl::lts_2020_02_25::base_internal::SpinLock *)&_MergedGlobals_26, v13);
  if (!v11)
    v11 = (_QWORD *)((absl::lts_2020_02_25::base_internal::LowLevelAlloc::Alloc((absl::lts_2020_02_25::base_internal::LowLevelAlloc *)0x1EF, v13, a3, a4, a5, a6, a7, a8)+ 255) & 0xFFFFFFFFFFFFFF00);
  v11[3] = 0;
  *((_BYTE *)v11 + 32) = 0;
  v11[5] = 0;
  *((_DWORD *)v11 + 12) = 0;
  v11[7] = 0;
  *v11 = 0;
  v11[1] = 0;
  *((_BYTE *)v11 + 16) = 0;
  *((_DWORD *)v11 + 16) = 0;
  *((_WORD *)v11 + 34) = 0;
  *((_BYTE *)v11 + 70) = 0;
  v11[9] = 0;
  v11[26] = 0;
  *((_DWORD *)v11 + 54) = 0;
  *((_DWORD *)v11 + 55) = 0;
  *((_BYTE *)v11 + 224) = 0;
  v11[29] = 0;
  absl::lts_2020_02_25::synchronization_internal::PerThreadSem::Init((uint64_t)v11);
  absl::lts_2020_02_25::base_internal::SetCurrentThreadIdentity(v11, (uint64_t)absl::lts_2020_02_25::synchronization_internal::ReclaimThreadIdentity, v14, v15, v16, v17, v18, v19);
  return v11;
}

uint64_t AbslInternalMutexYield()
{
  return sched_yield();
}

void absl::lts_2020_02_25::Mutex::~Mutex(absl::lts_2020_02_25::Mutex *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  if ((*(_QWORD *)this & 0x10) != 0)
    absl::lts_2020_02_25::ForgetSynchEvent((uint64_t)this, 16, 64, a4, a5, a6, a7, a8);
  {
    v10 = dword_25407B6C4;
    if ((dword_25407B6C4 & 1) == 0)
    {
      v11 = dword_25407B6C4 | 1;
      while (1)
      {
        v12 = __ldaxr((unsigned int *)&dword_25407B6C4);
        if (v12 != v10)
          break;
        if (!__stxr(v11, (unsigned int *)&dword_25407B6C4))
        {
          if ((v12 & 1) != 0)
            goto LABEL_11;
          goto LABEL_12;
        }
      }
      __clrex();
      if ((v12 & 1) == 0)
        goto LABEL_12;
    }
LABEL_11:
    absl::lts_2020_02_25::base_internal::SpinLock::SlowLock((absl::lts_2020_02_25::base_internal::SpinLock *)&dword_25407B6C4, a2, a3, a4, a5, a6, a7, a8);
LABEL_12:
    if (qword_25407B6D0)
      absl::lts_2020_02_25::synchronization_internal::GraphCycles::RemoveNode((uint64_t **)qword_25407B6D0, (uint64_t)this, a3, a4, a5, a6, a7, a8);
    v13 = dword_25407B6C4 & 2;
    do
      v14 = __ldxr((unsigned int *)&dword_25407B6C4);
    while (__stlxr(v13, (unsigned int *)&dword_25407B6C4));
    if (v14 >= 8)
      absl::lts_2020_02_25::base_internal::SpinLock::SlowUnlock((absl::lts_2020_02_25::base_internal::SpinLock *)&dword_25407B6C4, v14);
  }
}

void absl::lts_2020_02_25::ForgetSynchEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  absl::lts_2020_02_25::base_internal::LowLevelAlloc **v15;
  absl::lts_2020_02_25::base_internal::LowLevelAlloc *v16;
  absl::lts_2020_02_25::base_internal::LowLevelAlloc *v17;
  int v18;
  unint64_t i;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t j;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;

  v11 = a1 % 1031;
  v12 = dword_25407B6C8;
  if ((dword_25407B6C8 & 1) != 0)
  {
LABEL_24:
    absl::lts_2020_02_25::base_internal::SpinLock::SlowLock((absl::lts_2020_02_25::base_internal::SpinLock *)&dword_25407B6C8, a2, a3, a4, a5, a6, a7, a8);
    v15 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc **)&absl::lts_2020_02_25::synch_event[v11];
    v16 = *v15;
    if (!*v15)
      goto LABEL_25;
  }
  else
  {
    v13 = dword_25407B6C8 | 1;
    while (1)
    {
      v14 = __ldaxr((unsigned int *)&dword_25407B6C8);
      if (v14 != v12)
        break;
      if (!__stxr(v13, (unsigned int *)&dword_25407B6C8))
      {
        if ((v14 & 1) != 0)
          goto LABEL_24;
        goto LABEL_6;
      }
    }
    __clrex();
    if ((v14 & 1) != 0)
      goto LABEL_24;
LABEL_6:
    v15 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc **)&absl::lts_2020_02_25::synch_event[v11];
    v16 = *v15;
    if (!*v15)
      goto LABEL_25;
  }
  if (*((_QWORD *)v16 + 2) == (a1 ^ 0xF03A5F7BF03A5F7BLL))
  {
LABEL_11:
    *v15 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)*((_QWORD *)v16 + 1);
    v18 = *(_DWORD *)v16 - 1;
    *(_DWORD *)v16 = v18;
    for (i = *(_QWORD *)a1; (*(_QWORD *)a1 & a2) != 0; i = *(_QWORD *)a1)
    {
      if ((i & a3) == 0)
      {
        v20 = __ldxr((unint64_t *)a1);
        if (v20 == i)
        {
          if (!__stlxr(i & ~a2, (unint64_t *)a1))
            break;
        }
        else
        {
          __clrex();
        }
      }
    }
    v21 = dword_25407B6C8 & 2;
    do
      v22 = __ldxr((unsigned int *)&dword_25407B6C8);
    while (__stlxr(v21, (unsigned int *)&dword_25407B6C8));
    if (v22 >= 8)
    {
      absl::lts_2020_02_25::base_internal::SpinLock::SlowUnlock((absl::lts_2020_02_25::base_internal::SpinLock *)&dword_25407B6C8, v22);
      if (v18)
        return;
    }
    else if (v18)
    {
      return;
    }
    absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(v16, v22, a3, a4, a5, a6, a7, a8);
    return;
  }
  while (1)
  {
    v17 = v16;
    v16 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc *)*((_QWORD *)v16 + 1);
    if (!v16)
      break;
    if (*((_QWORD *)v16 + 2) == (a1 ^ 0xF03A5F7BF03A5F7BLL))
    {
      v15 = (absl::lts_2020_02_25::base_internal::LowLevelAlloc **)((char *)v17 + 8);
      goto LABEL_11;
    }
  }
LABEL_25:
  for (j = *(_QWORD *)a1; (*(_QWORD *)a1 & a2) != 0; j = *(_QWORD *)a1)
  {
    if ((j & a3) == 0)
    {
      v24 = __ldxr((unint64_t *)a1);
      if (v24 == j)
      {
        if (!__stlxr(j & ~a2, (unint64_t *)a1))
          break;
      }
      else
      {
        __clrex();
      }
    }
  }
  v25 = dword_25407B6C8 & 2;
  do
    v26 = __ldxr((unsigned int *)&dword_25407B6C8);
  while (__stlxr(v25, (unsigned int *)&dword_25407B6C8));
  if (v26 >= 8)
    absl::lts_2020_02_25::base_internal::SpinLock::SlowUnlock((absl::lts_2020_02_25::base_internal::SpinLock *)&dword_25407B6C8, v26);
}

unint64_t absl::lts_2020_02_25::Mutex::TryRemove(unint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  BOOL v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v2 = *(_QWORD *)result;
  if ((*(_QWORD *)result & 0x4DLL) != 4)
    return result;
  v4 = (unint64_t *)result;
  do
  {
    v5 = __ldaxr((unint64_t *)result);
    if (v5 != v2)
    {
      __clrex();
      return result;
    }
  }
  while (__stxr(v2 | 0x48, (unint64_t *)result));
  result = v2 & 0xFFFFFFFFFFFFFF00;
  if ((v2 & 0xFFFFFFFFFFFFFF00) == 0)
    goto LABEL_53;
  v6 = *(_QWORD **)result;
  if (*(_QWORD *)result == a2)
  {
    v10 = v2 & 0xFFFFFFFFFFFFFF00;
LABEL_50:
    result = (unint64_t)absl::lts_2020_02_25::Dequeue((_QWORD *)result, (_QWORD **)v10);
    *(_QWORD *)a2 = 0;
    atomic_store(0, (unsigned int *)(a2 + 64));
    if (result)
      goto LABEL_45;
    goto LABEL_53;
  }
  v7 = *(uint64_t **)(a2 + 24);
  v8 = *v7;
  do
  {
    v9 = (_QWORD *)v6[3];
    if (v8 == *v9)
    {
      v14 = (_QWORD *)v7[1];
      v15 = (_QWORD *)v9[1];
      if (v14)
      {
        if (v15 && *v15)
        {
          if (*v14 == *v15 && v14[1] == v15[1] && v14[4] == v15[4])
          {
            v17 = v14[2];
            v16 = v14[3];
            v19 = v15[2];
            v18 = v15[3];
            v21 = v16 == v18;
            v20 = (v18 | v16) & 1 | v17;
            v21 = v21 || v20 == 0;
            v22 = v21;
            if (v17 == v19 && v22)
            {
LABEL_34:
              if (v6[1] == a2)
              {
                v23 = *(_QWORD **)(a2 + 8);
                if (!v23)
                {
                  v23 = (_QWORD *)*v6;
                  if (*v6 == a2)
                    v23 = 0;
                }
                v6[1] = v23;
              }
LABEL_39:
              v10 = (unint64_t)v6;
              v6 = (_QWORD *)*v6;
              if (v10 == result)
                break;
              continue;
            }
          }
        }
        else if (!*v14)
        {
          goto LABEL_34;
        }
      }
      else if (!v15 || !*v15)
      {
        goto LABEL_34;
      }
    }
    v10 = v6[1];
    if (!v10)
      goto LABEL_39;
    v11 = *(_QWORD *)(v10 + 8);
    if (v11)
    {
      v12 = v6;
      do
      {
        v13 = v10;
        v10 = v11;
        v12[1] = v11;
        v11 = *(_QWORD *)(v11 + 8);
        v12 = (_QWORD *)v13;
      }
      while (v11);
    }
    v6[1] = v10;
    v6 = *(_QWORD **)v10;
    if (v10 == result)
      break;
  }
  while (v6 != (_QWORD *)a2);
  if (v6 == (_QWORD *)a2)
    goto LABEL_50;
  if (result)
  {
    do
    {
LABEL_45:
      while (1)
      {
        v24 = *v4;
        *(_QWORD *)(result + 40) = 0;
        *(_BYTE *)(result + 68) = 0;
        v25 = __ldxr(v4);
        if (v25 == v24)
          break;
        __clrex();
      }
    }
    while (__stlxr(v24 & 0x12 | result | 4, v4));
    return result;
  }
  do
  {
LABEL_53:
    while (1)
    {
      v26 = *v4;
      v27 = __ldxr(v4);
      if (v27 == v26)
        break;
      __clrex();
    }
  }
  while (__stlxr(*v4 & 0x12, v4));
  return result;
}

_QWORD *absl::lts_2020_02_25::Dequeue(_QWORD *result, _QWORD **a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  _BOOL4 v14;
  _QWORD *v16;

  v2 = *a2;
  v3 = (_QWORD *)**a2;
  *a2 = v3;
  if (v2 == result)
  {
    if (result == a2)
      return 0;
    else
      return a2;
  }
  else
  {
    if (a2 == result)
      return result;
    v4 = a2[3];
    v5 = (_QWORD *)v3[3];
    if (*v4 != *v5)
      return result;
    v6 = (_QWORD *)v4[1];
    v7 = (_QWORD *)v5[1];
    if (!v6)
    {
      if (v7 && *v7)
        return result;
      goto LABEL_29;
    }
    if (!v7 || !*v7)
    {
      if (*v6)
        return result;
      goto LABEL_29;
    }
    if (*v6 == *v7 && v6[1] == v7[1] && v6[4] == v7[4])
    {
      v9 = v6[2];
      v8 = v6[3];
      v11 = v7[2];
      v10 = v7[3];
      v13 = v8 == v10;
      v12 = (v10 | v8) & 1 | v9;
      v13 = v13 || v12 == 0;
      v14 = v13;
      if (v9 == v11 && v14)
      {
LABEL_29:
        v16 = (_QWORD *)v3[1];
        if (v16)
          a2[1] = v16;
        else
          a2[1] = v3;
      }
    }
  }
  return result;
}

unint64_t absl::lts_2020_02_25::Mutex::Block(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  absl::lts_2020_02_25::base_internal *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  BOOL v42;
  BOOL v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;

  v9 = atomic_load((unsigned int *)(a2 + 64));
  if (v9 == 1)
  {
    v10 = (unint64_t *)result;
    do
    {
      v13 = *(absl::lts_2020_02_25::base_internal **)(*(_QWORD *)(a2 + 24) + 16);
      v14 = absl::lts_2020_02_25::base_internal::CurrentThreadIdentityIfPresent((absl::lts_2020_02_25::base_internal *)result);
      if (v14)
      {
        if (v14 != (void *)a2)
          goto LABEL_76;
      }
      else if (absl::lts_2020_02_25::synchronization_internal::CreateThreadIdentity(0, v15, v16, v17, v18, v19, v20, v21) != (_QWORD *)a2)
      {
LABEL_76:
        absl::lts_2020_02_25::Mutex::Block();
      }
      result = AbslInternalPerThreadSemWait(v13);
      if ((result & 1) == 0)
      {
        absl::lts_2020_02_25::Mutex::TryRemove((unint64_t)v10, a2);
        if (*(_QWORD *)a2)
        {
          v22 = 0;
          do
          {
            if (dword_25407B680 <= 1)
              v23 = 0;
            else
              v23 = 250;
            if (v23 <= v22)
            {
              if (v23 == v22)
              {
                AbslInternalMutexYield();
                ++v22;
                v24 = *v10;
                if ((*v10 & 0x4D) != 4)
                  continue;
              }
              else
              {
                AbslInternalSleepFor(0, 40000);
                v22 = 0;
                v24 = *v10;
                if ((*v10 & 0x4D) != 4)
                  continue;
              }
            }
            else
            {
              ++v22;
              v24 = *v10;
              if ((*v10 & 0x4D) != 4)
                continue;
            }
            do
            {
              v25 = __ldaxr(v10);
              if (v25 != v24)
              {
                __clrex();
                goto LABEL_11;
              }
            }
            while (__stxr(v24 | 0x48, v10));
            v26 = v24 & 0xFFFFFFFFFFFFFF00;
            if ((v24 & 0xFFFFFFFFFFFFFF00) == 0)
            {
              do
              {
LABEL_68:
                while (1)
                {
                  v45 = *v10;
                  v46 = __ldxr(v10);
                  if (v46 == v45)
                    break;
                  __clrex();
                }
              }
              while (__stlxr(*v10 & 0x12, v10));
              continue;
            }
            v27 = *(_QWORD **)v26;
            if (*(_QWORD *)v26 == a2)
            {
              v31 = v24 & 0xFFFFFFFFFFFFFF00;
LABEL_65:
              v26 = (unint64_t)absl::lts_2020_02_25::Dequeue((_QWORD *)v26, (_QWORD **)v31);
              *(_QWORD *)a2 = 0;
              atomic_store(0, (unsigned int *)(a2 + 64));
              if (!v26)
                goto LABEL_68;
              goto LABEL_72;
            }
            v28 = *(uint64_t **)(a2 + 24);
            v29 = *v28;
            do
            {
              v30 = (_QWORD *)v27[3];
              if (v29 == *v30)
              {
                v35 = (_QWORD *)v28[1];
                v36 = (_QWORD *)v30[1];
                if (v35)
                {
                  if (v36 && *v36)
                  {
                    if (*v35 == *v36 && v35[1] == v36[1] && v35[4] == v36[4])
                    {
                      v38 = v35[2];
                      v37 = v35[3];
                      v40 = v36[2];
                      v39 = v36[3];
                      v42 = v37 == v39;
                      v41 = (v39 | v37) & 1 | v38;
                      v42 = v42 || v41 == 0;
                      v43 = v42;
                      if (v38 == v40 && v43)
                      {
LABEL_54:
                        if (v27[1] == a2)
                        {
                          v44 = *(_QWORD **)(a2 + 8);
                          if (!v44)
                          {
                            v44 = (_QWORD *)*v27;
                            if (*v27 == a2)
                              v44 = 0;
                          }
                          v27[1] = v44;
                        }
LABEL_59:
                        v31 = (unint64_t)v27;
                        v27 = (_QWORD *)*v27;
                        if (v31 == v26)
                          break;
                        continue;
                      }
                    }
                  }
                  else if (!*v35)
                  {
                    goto LABEL_54;
                  }
                }
                else if (!v36 || !*v36)
                {
                  goto LABEL_54;
                }
              }
              v31 = v27[1];
              if (!v31)
                goto LABEL_59;
              v32 = *(_QWORD *)(v31 + 8);
              if (v32)
              {
                v33 = v27;
                do
                {
                  v34 = v31;
                  v31 = v32;
                  v33[1] = v32;
                  v32 = *(_QWORD *)(v32 + 8);
                  v33 = (_QWORD *)v34;
                }
                while (v32);
              }
              v27[1] = v31;
              v27 = *(_QWORD **)v31;
              if (v31 == v26)
                break;
            }
            while (v27 != (_QWORD *)a2);
            if (v27 == (_QWORD *)a2)
              goto LABEL_65;
            if (!v26)
              goto LABEL_68;
            do
            {
LABEL_72:
              while (1)
              {
                v47 = *v10;
                *(_QWORD *)(v26 + 40) = 0;
                *(_BYTE *)(v26 + 68) = 0;
                v48 = __ldxr(v10);
                if (v48 == v47)
                  break;
                __clrex();
              }
            }
            while (__stlxr(v47 & 0x12 | v26 | 4, v10));
LABEL_11:
            ;
          }
          while (*(_QWORD *)a2);
        }
        result = absl::lts_2020_02_25::Mutex::TryRemove((unint64_t)v10, a2);
        v11 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(v11 + 8) = 0;
        *(_QWORD *)(v11 + 16) = 0;
      }
      v12 = atomic_load((unsigned int *)(a2 + 64));
    }
    while (v12 == 1);
  }
  if (!*(_QWORD *)(a2 + 24) && !*(_BYTE *)(a2 + 32))
    result = absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"mutex.cc", 1135, "Check %s failed: %s", a5, a6, a7, a8, (char)"s->waitp != nullptr || s->suppress_fatal_errors");
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

uint64_t absl::lts_2020_02_25::Delay(int a1, int a2)
{
  int v3;
  int v4;

  if (a2)
    v3 = 250;
  else
    v3 = 5000;
  if (dword_25407B680 <= 1)
    v4 = 0;
  else
    v4 = v3;
  if (v4 > a1)
    return (a1 + 1);
  if (v4 == a1)
  {
    AbslInternalMutexYield();
    return (a1 + 1);
  }
  else
  {
    AbslInternalSleepFor(0, 40000);
    return 0;
  }
}

_BYTE *absl::lts_2020_02_25::Mutex::Lock(absl::lts_2020_02_25::Mutex *this, absl::lts_2020_02_25::Mutex *a2)
{
  _BYTE *result;
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *ThreadIdentity;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _BYTE *v25;

  result = (_BYTE *)absl::lts_2020_02_25::DebugOnlyDeadlockCheck(this, a2);
  v4 = result;
  v5 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 0x19) != 0)
  {
LABEL_6:
    v7 = dword_25407B6C0;
    do
    {
      v9 = *(_QWORD *)this;
      if ((*(_QWORD *)this & 0x11) != 0)
        break;
      if ((v9 & 8) == 0)
      {
        while (1)
        {
          v10 = __ldaxr((unint64_t *)this);
          if (v10 != v9)
            break;
          if (!__stxr(v9 | 8, (unint64_t *)this))
            goto LABEL_13;
        }
        __clrex();
      }
      v8 = __OFSUB__(v7--, 1);
    }
    while (!((v7 < 0) ^ v8 | (v7 == 0)));
    result = (_BYTE *)absl::lts_2020_02_25::Mutex::Lock((unint64_t *)this);
      goto LABEL_14;
  }
  else
  {
    do
    {
      v6 = __ldaxr((unint64_t *)this);
      if (v6 != v5)
      {
        __clrex();
        goto LABEL_6;
      }
    }
    while (__stxr(v5 | 8, (unint64_t *)this));
LABEL_13:
    {
LABEL_14:
      v12 = absl::lts_2020_02_25::base_internal::CurrentThreadIdentityIfPresent((absl::lts_2020_02_25::base_internal *)result);
      ThreadIdentity = v12;
      if (v12)
      {
        result = (_BYTE *)v12[9];
        if (result)
          goto LABEL_16;
      }
      else
      {
        ThreadIdentity = absl::lts_2020_02_25::synchronization_internal::CreateThreadIdentity(0, v13, v14, v15, v16, v17, v18, v19);
        result = (_BYTE *)ThreadIdentity[9];
        if (result)
        {
LABEL_16:
          v21 = *(unsigned int *)result;
          if ((_DWORD)v21)
          {
            v22 = 0;
            do
            {
              if (*(_BYTE **)&result[v22 + 24] == v4)
              {
                ++*(_DWORD *)&result[v22 + 16];
                return result;
              }
              v22 += 24;
            }
            while (24 * v21 != v22);
            if ((_DWORD)v21 == 40)
            {
              result[4] = 1;
              return result;
            }
            v23 = *(_DWORD *)result;
          }
          else
          {
            v23 = 0;
          }
          goto LABEL_30;
        }
      }
      result = (_BYTE *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::Alloc((absl::lts_2020_02_25::base_internal::LowLevelAlloc *)0x3C8, v13, v14, v15, v16, v17, v18, v19);
      LODWORD(v21) = 0;
      v23 = 0;
      *(_DWORD *)result = 0;
      result[4] = 0;
      ThreadIdentity[9] = result;
LABEL_30:
      v25 = &result[24 * v23];
      *((_QWORD *)v25 + 1) = this;
      *((_DWORD *)v25 + 4) = 1;
      *((_QWORD *)v25 + 3) = v4;
      *(_DWORD *)result = v21 + 1;
    }
  }
  return result;
}

unint64_t absl::lts_2020_02_25::DebugOnlyDeadlockCheck(absl::lts_2020_02_25 *this, absl::lts_2020_02_25::Mutex *a2)
{
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *ThreadIdentity;
  unint64_t v14;
  int v15;
  unint64_t Id;
  unsigned int v17;
  absl::lts_2020_02_25::synchronization_internal::GraphCycles *v18;
  absl::lts_2020_02_25::synchronization_internal::GraphCycles *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  void **StackTrace;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  const void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int Path;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const void *v67;
  void **v68;
  size_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  char v80;
  char v81;
  int v82;
  _OWORD v83[20];
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
    return 0;
    return 0;
  v5 = absl::lts_2020_02_25::base_internal::CurrentThreadIdentityIfPresent(this);
  ThreadIdentity = v5;
  if (v5)
  {
    v14 = v5[9];
    if (v14)
      goto LABEL_5;
  }
  else
  {
    ThreadIdentity = absl::lts_2020_02_25::synchronization_internal::CreateThreadIdentity(0, v6, v7, v8, v9, v10, v11, v12);
    v14 = ThreadIdentity[9];
    if (v14)
    {
LABEL_5:
      v15 = dword_25407B6C4;
      if ((dword_25407B6C4 & 1) == 0)
        goto LABEL_10;
      goto LABEL_27;
    }
  }
  v14 = absl::lts_2020_02_25::base_internal::LowLevelAlloc::Alloc((absl::lts_2020_02_25::base_internal::LowLevelAlloc *)0x3C8, v6, v7, v8, v9, v10, v11, v12);
  *(_DWORD *)v14 = 0;
  *(_BYTE *)(v14 + 4) = 0;
  ThreadIdentity[9] = v14;
  v15 = dword_25407B6C4;
  if ((dword_25407B6C4 & 1) == 0)
  {
LABEL_10:
    while (1)
    {
      v17 = __ldaxr((unsigned int *)&dword_25407B6C4);
      if (v17 != v15)
        break;
      if (!__stxr(v15 | 1, (unsigned int *)&dword_25407B6C4))
      {
        if ((v17 & 1) != 0)
          goto LABEL_27;
        goto LABEL_13;
      }
    }
    __clrex();
    if ((v17 & 1) != 0)
      goto LABEL_27;
LABEL_13:
    v18 = (absl::lts_2020_02_25::synchronization_internal::GraphCycles *)qword_25407B6D0;
    if (qword_25407B6D0)
      goto LABEL_15;
    goto LABEL_14;
  }
LABEL_27:
  absl::lts_2020_02_25::base_internal::SpinLock::SlowLock((absl::lts_2020_02_25::base_internal::SpinLock *)&dword_25407B6C4, v6, v7, v8, v9, v10, v11, v12);
  v18 = (absl::lts_2020_02_25::synchronization_internal::GraphCycles *)qword_25407B6D0;
  if (!qword_25407B6D0)
  {
LABEL_14:
    v19 = (absl::lts_2020_02_25::synchronization_internal::GraphCycles *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::Alloc((absl::lts_2020_02_25::base_internal::LowLevelAlloc *)8, v6, v7, v8, v9, v10, v11, v12);
    v18 = (absl::lts_2020_02_25::synchronization_internal::GraphCycles *)absl::lts_2020_02_25::synchronization_internal::GraphCycles::GraphCycles(v19);
    qword_25407B6D0 = (uint64_t)v18;
  }
LABEL_15:
  Id = absl::lts_2020_02_25::synchronization_internal::GraphCycles::GetId(v18, (unint64_t)this, v7, v8, v9, v10, v11, v12);
  if (*(_DWORD *)v14)
  {
    if (*(_DWORD *)v14)
    {
      v20 = 0;
      v21 = 24;
      while (1)
      {
        v22 = *(_QWORD *)(v14 + v21);
        if (absl::lts_2020_02_25::synchronization_internal::GraphCycles::Ptr((_QWORD **)qword_25407B6D0, v22))
        {
          if ((absl::lts_2020_02_25::synchronization_internal::GraphCycles::InsertEdge((uint64_t **)qword_25407B6D0, v22, Id, v23, v24, v25, v26, v27) & 1) == 0)break;
        }
        ++v20;
        v21 += 24;
        if (v20 == *(_DWORD *)v14)
          goto LABEL_41;
      }
      v35 = (char *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::Alloc((absl::lts_2020_02_25::base_internal::LowLevelAlloc *)0x1828, v28, v29, v30, v31, v32, v33, v34);
      v82 = dword_25407B6CC++;
      memset(v83, 0, sizeof(v83));
      StackTrace = (void **)absl::lts_2020_02_25::GetStackTrace((absl::lts_2020_02_25 *)v83, (void **)0x28, 2);
      absl::lts_2020_02_25::StackString((const void **)v83, StackTrace, v35, (char *)0x17D4, v82 < 2);
      absl::lts_2020_02_25::raw_logging_internal::RawLog(2, (ORToolsCpL2AccessVariable *)"mutex.cc", 1356, "Potential Mutex deadlock: %s", v37, v38, v39, v40, (char)v35);
      if (*(_DWORD *)v14)
      {
        v45 = 0;
        v46 = 0;
        v47 = 24;
        do
        {
          v48 = (const void *)absl::lts_2020_02_25::synchronization_internal::GraphCycles::Ptr((_QWORD **)qword_25407B6D0, *(_QWORD *)(v14 + v47));
          if (v48)
          {
            snprintf(&v35[v46], 6100 - v46, " %p", v48);
            v46 += strlen(&v35[v46]);
          }
          ++v45;
          v47 += 24;
        }
        while (v45 != *(_DWORD *)v14);
      }
      absl::lts_2020_02_25::raw_logging_internal::RawLog(2, (ORToolsCpL2AccessVariable *)"mutex.cc", 1366, "Acquiring %p    Mutexes held: %s", v41, v42, v43, v44, (char)this);
      absl::lts_2020_02_25::raw_logging_internal::RawLog(2, (ORToolsCpL2AccessVariable *)"mutex.cc", 1367, "Cycle: ", v49, v50, v51, v52, v80);
      Path = absl::lts_2020_02_25::synchronization_internal::GraphCycles::FindPath((uint64_t **)qword_25407B6D0, Id, v22, 10, (uint64_t)(v35 + 6104), v53, v54, v55);
      if (Path)
      {
        v64 = -(uint64_t)Path;
        v65 = 763;
        do
        {
          v66 = *(_QWORD *)&v35[8 * v65];
          v67 = (const void *)absl::lts_2020_02_25::synchronization_internal::GraphCycles::Ptr((_QWORD **)qword_25407B6D0, v66);
          if (v67)
          {
            *(_QWORD *)&v83[0] = 0;
            v68 = (void **)absl::lts_2020_02_25::synchronization_internal::GraphCycles::GetStackTrace((_QWORD **)qword_25407B6D0, v66, v83);
            snprintf(v35, 0x17D4uLL, "mutex@%p stack: ", v67);
            v69 = strlen(v35);
            absl::lts_2020_02_25::StackString(*(const void ***)&v83[0], v68, &v35[v69], (char *)(6100 - v69), v82 < 2);
            absl::lts_2020_02_25::raw_logging_internal::RawLog(2, (ORToolsCpL2AccessVariable *)"mutex.cc", 1381, "%s", v70, v71, v72, v73, (char)v35);
          }
          ++v65;
        }
        while (v64 + v65 != 763);
      }
      if (v74 == 2)
      {
        v75 = dword_25407B6C4 & 2;
        do
          v76 = __ldxr((unsigned int *)&dword_25407B6C4);
        while (__stlxr(v75, (unsigned int *)&dword_25407B6C4));
        if (v76 >= 8)
          absl::lts_2020_02_25::base_internal::SpinLock::SlowUnlock((absl::lts_2020_02_25::base_internal::SpinLock *)&dword_25407B6C4, v76);
        absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"mutex.cc", 1386, "dying due to potential deadlock", v60, v61, v62, v63, v81);
      }
      absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free((absl::lts_2020_02_25::base_internal::LowLevelAlloc *)v35, v57, v58, v59, v60, v61, v62, v63);
    }
  }
LABEL_41:
  v77 = dword_25407B6C4 & 2;
  do
    v78 = __ldxr((unsigned int *)&dword_25407B6C4);
  while (__stlxr(v77, (unsigned int *)&dword_25407B6C4));
  if (v78 >= 8)
    absl::lts_2020_02_25::base_internal::SpinLock::SlowUnlock((absl::lts_2020_02_25::base_internal::SpinLock *)&dword_25407B6C4, v78);
  return Id;
}

void sub_22D9DB274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  absl::lts_2020_02_25::base_internal::LowLevelAlloc *v8;
  unsigned int *v9;
  unsigned int v11;
  unsigned int v12;

  absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free(v8, a2, a3, a4, a5, a6, a7, a8);
  v11 = dword_25407B6C4 & 2;
  do
    v12 = __ldxr(v9);
  while (__stlxr(v11, v9));
  if (v12 >= 8)
    absl::lts_2020_02_25::base_internal::SpinLock::SlowUnlock((absl::lts_2020_02_25::base_internal::SpinLock *)&dword_25407B6C4, v12);
  _Unwind_Resume(a1);
}

_BYTE *absl::lts_2020_02_25::Mutex::ReaderLock(absl::lts_2020_02_25::Mutex *this, absl::lts_2020_02_25::Mutex *a2)
{
  _BYTE *result;
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *ThreadIdentity;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _BYTE *v21;

  result = (_BYTE *)absl::lts_2020_02_25::DebugOnlyDeadlockCheck(this, a2);
  v4 = result;
  v5 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 0x1CLL) == 0)
  {
    do
    {
      v6 = __ldaxr((unint64_t *)this);
      if (v6 != v5)
      {
        __clrex();
        goto LABEL_18;
      }
    }
    while (__stxr((v5 | 1) + 256, (unint64_t *)this));
      return result;
LABEL_5:
    v8 = absl::lts_2020_02_25::base_internal::CurrentThreadIdentityIfPresent((absl::lts_2020_02_25::base_internal *)result);
    ThreadIdentity = v8;
    if (v8)
    {
      result = (_BYTE *)v8[9];
      if (result)
        goto LABEL_7;
    }
    else
    {
      ThreadIdentity = absl::lts_2020_02_25::synchronization_internal::CreateThreadIdentity(0, v9, v10, v11, v12, v13, v14, v15);
      result = (_BYTE *)ThreadIdentity[9];
      if (result)
      {
LABEL_7:
        v17 = *(unsigned int *)result;
        if ((_DWORD)v17)
        {
          v18 = 0;
          do
          {
            if (*(_BYTE **)&result[v18 + 24] == v4)
            {
              ++*(_DWORD *)&result[v18 + 16];
              return result;
            }
            v18 += 24;
          }
          while (24 * v17 != v18);
          if ((_DWORD)v17 == 40)
          {
            result[4] = 1;
            return result;
          }
          v19 = *(_DWORD *)result;
        }
        else
        {
          v19 = 0;
        }
        goto LABEL_22;
      }
    }
    result = (_BYTE *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::Alloc((absl::lts_2020_02_25::base_internal::LowLevelAlloc *)0x3C8, v9, v10, v11, v12, v13, v14, v15);
    LODWORD(v17) = 0;
    v19 = 0;
    *(_DWORD *)result = 0;
    result[4] = 0;
    ThreadIdentity[9] = result;
LABEL_22:
    v21 = &result[24 * v19];
    *((_QWORD *)v21 + 1) = this;
    *((_DWORD *)v21 + 4) = 1;
    *((_QWORD *)v21 + 3) = v4;
    *(_DWORD *)result = v17 + 1;
    return result;
  }
LABEL_18:
  result = (_BYTE *)absl::lts_2020_02_25::Mutex::ReaderLock((unint64_t *)this);
    goto LABEL_5;
  return result;
}

uint64_t absl::lts_2020_02_25::Mutex::LockSlowWithDeadline(unint64_t *a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::chrono::steady_clock::time_point v22;
  std::chrono::steady_clock::time_point v23;
  std::chrono::steady_clock::time_point v24;
  std::chrono::steady_clock::time_point v25;
  std::chrono::steady_clock::time_point v26;
  std::chrono::steady_clock::time_point v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *ThreadIdentity;
  uint64_t v45;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;

  v5 = a5;
  v9 = a1;
  v10 = *a1;
  if ((*a2 & *a1) == 0)
  {
    v12 = (absl::lts_2020_02_25::zap_desig_waker[a5 & 1] & v10 | a2[1]) + a2[2];
    do
    {
      v13 = __ldaxr(a1);
      if (v13 != v10)
      {
        LODWORD(v11) = 0;
        __clrex();
        goto LABEL_11;
      }
    }
    while (__stxr(v12, a1));
    if (!a3 || !*a3)
      return 1;
    a1 = (unint64_t *)((uint64_t (*)(_QWORD *))*a3)(a3);
    v11 = 1;
    if ((a1 & 1) == 0)
      goto LABEL_11;
    return v11;
  }
  LODWORD(v11) = 0;
LABEL_11:
  v14 = absl::lts_2020_02_25::base_internal::CurrentThreadIdentityIfPresent((absl::lts_2020_02_25::base_internal *)a1);
  if (v14)
  {
    v40 = a2;
    v41 = a3;
    v42 = a4;
    v43 = 0;
    ThreadIdentity = v14;
    v45 = 0;
    rep = absl::lts_2020_02_25::base_internal::CycleClock::Now().__d_.__rep_;
    if (a3)
      goto LABEL_13;
  }
  else
  {
    v40 = a2;
    v41 = a3;
    v42 = a4;
    v43 = 0;
    ThreadIdentity = absl::lts_2020_02_25::synchronization_internal::CreateThreadIdentity(0, v15, v16, v17, v18, v19, v20, v21);
    v45 = 0;
    rep = absl::lts_2020_02_25::base_internal::CycleClock::Now().__d_.__rep_;
    if (a3)
    {
LABEL_13:
      if (*a3)
        v5 = v5 | 2;
    }
  }
  if ((_DWORD)v11)
  {
    absl::lts_2020_02_25::Mutex::UnlockSlow(v9, (uint64_t)&v40, v22.__d_.__rep_, v23.__d_.__rep_, v24.__d_.__rep_, v25.__d_.__rep_, v26.__d_.__rep_, v27.__d_.__rep_);
    absl::lts_2020_02_25::Mutex::Block((unint64_t)v9, (uint64_t)ThreadIdentity, v29, v30, v31, v32, v33, v34);
    absl::lts_2020_02_25::Mutex::LockSlowLoop((ssize_t *)v9, &v40, v5 | 1, v35, v36, v37, v38, v39);
    v11 = 1;
    if (!a3)
      return v11;
  }
  else
  {
    absl::lts_2020_02_25::Mutex::LockSlowLoop((ssize_t *)v9, &v40, v5, v23.__d_.__rep_, v24.__d_.__rep_, v25.__d_.__rep_, v26.__d_.__rep_, v27.__d_.__rep_);
    v11 = 1;
    if (!a3)
      return v11;
  }
  if (!v41 && *a3)
    return ((uint64_t (*)(_QWORD *))*a3)(a3);
  return v11;
}

ssize_t absl::lts_2020_02_25::Mutex::AssertReaderHeld(ssize_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  ssize_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;

  if ((*(_QWORD *)this & 9) == 0)
  {
    v8 = this;
    v9 = this % 1031;
    v10 = dword_25407B6C8;
    if ((dword_25407B6C8 & 1) != 0)
      goto LABEL_19;
    v11 = dword_25407B6C8 | 1;
    while (1)
    {
      v12 = __ldaxr((unsigned int *)&dword_25407B6C8);
      if (v12 != v10)
        break;
      if (!__stxr(v11, (unsigned int *)&dword_25407B6C8))
        goto LABEL_8;
    }
    __clrex();
LABEL_8:
    if ((v12 & 1) != 0)
    {
LABEL_19:
      absl::lts_2020_02_25::base_internal::SpinLock::SlowLock((absl::lts_2020_02_25::base_internal::SpinLock *)&dword_25407B6C8, a2, a3, a4, a5, a6, a7, a8);
      v13 = absl::lts_2020_02_25::synch_event[v9];
      if (v13)
      {
LABEL_10:
        while (*(_QWORD *)(v13 + 16) != (v8 ^ 0xF03A5F7BF03A5F7BLL))
        {
          v13 = *(_QWORD *)(v13 + 8);
          if (!v13)
            goto LABEL_14;
        }
        ++*(_DWORD *)v13;
      }
    }
    else
    {
      v13 = absl::lts_2020_02_25::synch_event[v9];
      if (v13)
        goto LABEL_10;
    }
LABEL_14:
    v14 = dword_25407B6C8 & 2;
    do
      v15 = __ldxr((unsigned int *)&dword_25407B6C8);
    while (__stlxr(v14, (unsigned int *)&dword_25407B6C8));
    if (v15 >= 8)
      absl::lts_2020_02_25::base_internal::SpinLock::SlowUnlock((absl::lts_2020_02_25::base_internal::SpinLock *)&dword_25407B6C8, v15);
    return absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"mutex.cc", 2403, "thread should hold at least a read lock on Mutex %p %s", a5, a6, a7, a8, v8);
  }
  return this;
}

void absl::lts_2020_02_25::Mutex::LockSlowLoop(ssize_t *this, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  ssize_t v14;
  int v15;
  int *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t (**v39)(void);
  uint64_t v40;
  int v41;
  BOOL v42;
  int v43;
  uint64_t v44;
  uint64_t v45;

  v8 = a3;
  v11 = &absl::lts_2020_02_25::kExclusiveS;
  if ((*this & 0x10) != 0)
  {
    if ((_UNKNOWN *)*a2 == &absl::lts_2020_02_25::kExclusiveS)
      v12 = 4;
    else
      v12 = 6;
    absl::lts_2020_02_25::PostSynchEvent((uint64_t)this, v12, a3, a4, a5, a6, a7, a8);
  }
  v13 = a2[4];
  if (*(_QWORD *)(v13 + 24) && !*(_BYTE *)(v13 + 32))
    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"mutex.cc", 1910, "Check %s failed: %s", a5, a6, a7, a8, (char)"waitp->thread->waitp == nullptr || waitp->thread->suppress_fatal_errors");
  v14 = *this;
  if ((*this & ((8 * *this) ^ 0x20) & 0x28) != 0)
LABEL_78:
    absl::lts_2020_02_25::Mutex::LockSlowLoop(v14, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v15 = 0;
  v16 = (_DWORD *)&unk_25407B000;
  while (1)
  {
    v17 = (_QWORD *)*a2;
    if ((*(_QWORD *)(*a2 + 24) & v14) != 0)
      break;
    v27 = (absl::lts_2020_02_25::zap_desig_waker[v8 & 1] & v14 | v17[1]) + v17[2];
    while (1)
    {
      v28 = __ldaxr((unint64_t *)this);
      if (v28 != v14)
        break;
      if (!__stxr(v27, (unint64_t *)this))
        goto LABEL_51;
    }
LABEL_57:
    __clrex();
    v40 = a2[4];
    if (!*(_QWORD *)(v40 + 24))
    {
LABEL_62:
      if (v16[416] <= 1)
        v41 = 0;
      else
        v41 = 250;
      v42 = v41 == v15;
      if (v41 > v15)
        goto LABEL_12;
      goto LABEL_66;
    }
LABEL_61:
    if (*(_BYTE *)(v40 + 32))
      goto LABEL_62;
    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"mutex.cc", 2002, "Check %s failed: %s", a5, a6, a7, a8, (char)"waitp->thread->waitp == nullptr || waitp->thread->suppress_fatal_errors");
    if (v16[416] <= 1)
      v43 = 0;
    else
      v43 = 250;
    v42 = v43 == v15;
    if (v43 > v15)
      goto LABEL_12;
LABEL_66:
    if (v42)
    {
      AbslInternalMutexYield();
LABEL_12:
      ++v15;
      v14 = *this;
      if ((*this & ((8 * *this) ^ 0x20) & 0x28) != 0)
        goto LABEL_78;
    }
    else
    {
      AbslInternalSleepFor(0, 40000);
      v15 = 0;
      v14 = *this;
      if ((*this & ((8 * *this) ^ 0x20) & 0x28) != 0)
        goto LABEL_78;
    }
  }
  if ((v14 & 0x44) == 0)
  {
    v29 = v11;
    v30 = absl::lts_2020_02_25::Enqueue(0, (uint64_t)a2, v14, v8, a5, a6, a7, a8);
    v31 = absl::lts_2020_02_25::zap_desig_waker[v8 & 1];
    if (!v30)
      absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"mutex.cc", 1937, "Check %s failed: %s", a5, a6, a7, a8, (char)"new_h != nullptr");
    v32 = v14 & v31 & 0xFBLL | 4;
    v33 = v14 & v31 & 0xDBLL | 0x24;
    if ((v14 & 1) == 0)
      v33 = v14 & v31 & 0xFBLL | 4;
    v11 = v29;
    if ((void *)*a2 != v29)
      v33 = v32;
    v34 = v33 | (unint64_t)v30;
    v16 = (int *)&unk_25407B000;
    while (1)
    {
      v35 = __ldxr((unint64_t *)this);
      if (v35 != v14)
        break;
      if (!__stlxr(v34, (unint64_t *)this))
        goto LABEL_55;
    }
    __clrex();
    *(_QWORD *)(a2[4] + 24) = 0;
LABEL_60:
    v40 = a2[4];
    if (!*(_QWORD *)(v40 + 24))
      goto LABEL_62;
    goto LABEL_61;
  }
  v18 = v17[4];
  v19 = v8 & 1;
  if ((v18 & absl::lts_2020_02_25::ignore_waiting_writers[v19] & v14) != 0)
  {
    if ((v14 & 0x40) == 0)
    {
      v20 = absl::lts_2020_02_25::zap_desig_waker[v19] & v14 | 0x44;
      do
      {
        v21 = __ldaxr((unint64_t *)this);
        if (v21 != v14)
          goto LABEL_57;
      }
      while (__stxr(v20, (unint64_t *)this));
      v22 = absl::lts_2020_02_25::Enqueue((uint64_t *)(v14 & 0xFFFFFFFFFFFFFF00), (uint64_t)a2, v14, v8, a5, a6, a7, a8);
      if (!v22)
        absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"mutex.cc", 1982, "Check %s failed: %s", a5, a6, a7, a8, (char)"new_h != nullptr");
      if ((void *)*a2 == v11)
        v23 = 32 * (v14 & 1);
      else
        v23 = 0;
      v24 = v23 | (unint64_t)v22;
      do
      {
        while (1)
        {
          v25 = *this;
          v26 = __ldxr((unint64_t *)this);
          if (v26 == v25)
            break;
          __clrex();
        }
      }
      while (__stlxr(v24 | *this & 0xBB | 4, (unint64_t *)this));
LABEL_55:
      absl::lts_2020_02_25::Mutex::Block((unint64_t)this, a2[4], a3, a4, a5, a6, a7, a8);
      v15 = 0;
      v8 |= 1u;
      v40 = a2[4];
      if (!*(_QWORD *)(v40 + 24))
        goto LABEL_62;
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  v36 = absl::lts_2020_02_25::zap_desig_waker[v19] & v14 | 0x41;
  do
  {
    v37 = __ldaxr((unint64_t *)this);
    if (v37 != v14)
      goto LABEL_57;
  }
  while (__stxr(v36, (unint64_t *)this));
  *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF00) + 0x28) += 256;
  do
  {
    while (1)
    {
      v14 = *this;
      v38 = __ldxr((unint64_t *)this);
      if (v38 == v14)
        break;
      __clrex();
    }
  }
  while (__stlxr(v14 & 0xFFFFFFFFFFFFFFBELL | 1, (unint64_t *)this));
LABEL_51:
  v39 = (uint64_t (**)(void))a2[1];
  if (v39 && *v39 && ((*v39)() & 1) == 0)
  {
    absl::lts_2020_02_25::Mutex::UnlockSlow((unint64_t *)this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_55;
  }
  v44 = a2[4];
  if (*(_QWORD *)(v44 + 24) && !*(_BYTE *)(v44 + 32))
  {
    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"mutex.cc", 2007, "Check %s failed: %s", a5, a6, a7, a8, (char)"waitp->thread->waitp == nullptr || waitp->thread->suppress_fatal_errors");
    if ((v14 & 0x10) != 0)
      goto LABEL_80;
  }
  else
  {
    if ((v14 & 0x10) == 0)
      return;
LABEL_80:
    if ((void *)*a2 == v11)
      v45 = 5;
    else
      v45 = 7;
    absl::lts_2020_02_25::PostSynchEvent((uint64_t)this, v45, a3, a4, a5, a6, a7, a8);
  }
}

void absl::lts_2020_02_25::PostSynchEvent(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int StackTrace;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  const void **v25;
  const void *v26;
  void (*v27)(_QWORD);
  int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  char v33[960];
  _OWORD v34[20];
  uint64_t v35;

  v8 = a2;
  v35 = *MEMORY[0x24BDAC8D0];
  v10 = this % 1031;
  v11 = &unk_25407B000;
  v12 = dword_25407B6C8;
  if ((dword_25407B6C8 & 1) != 0)
  {
LABEL_11:
    absl::lts_2020_02_25::base_internal::SpinLock::SlowLock((absl::lts_2020_02_25::base_internal::SpinLock *)&dword_25407B6C8, a2, a3, a4, a5, a6, a7, a8);
    v15 = absl::lts_2020_02_25::synch_event[v10];
    if (v15)
    {
LABEL_7:
      while (*(_QWORD *)(v15 + 16) != (this ^ 0xF03A5F7BF03A5F7BLL))
      {
        v15 = *(_QWORD *)(v15 + 8);
        if (!v15)
          goto LABEL_14;
      }
      ++*(_DWORD *)v15;
    }
  }
  else
  {
    v13 = dword_25407B6C8 | 1;
    while (1)
    {
      v14 = __ldaxr((unsigned int *)&dword_25407B6C8);
      if (v14 != v12)
        break;
      if (!__stxr(v13, (unsigned int *)&dword_25407B6C8))
      {
        if ((v14 & 1) != 0)
          goto LABEL_11;
        goto LABEL_6;
      }
    }
    __clrex();
    if ((v14 & 1) != 0)
      goto LABEL_11;
LABEL_6:
    v15 = absl::lts_2020_02_25::synch_event[v10];
    if (v15)
      goto LABEL_7;
  }
LABEL_14:
  v16 = dword_25407B6C8 & 2;
  do
    v17 = __ldxr((unsigned int *)&dword_25407B6C8);
  while (__stlxr(v16, (unsigned int *)&dword_25407B6C8));
  if (v17 >= 8)
  {
    absl::lts_2020_02_25::base_internal::SpinLock::SlowUnlock((absl::lts_2020_02_25::base_internal::SpinLock *)&dword_25407B6C8, v17);
    if (!v15)
    {
LABEL_19:
      memset(v34, 0, sizeof(v34));
      StackTrace = absl::lts_2020_02_25::GetStackTrace((absl::lts_2020_02_25 *)v34, (void **)0x28, 1);
      strcpy(v33, " @");
      if (StackTrace)
      {
        v23 = StackTrace;
        v24 = 2;
        v25 = (const void **)v34;
        do
        {
          v26 = *v25++;
          v24 += snprintf(&v33[v24], 960 - v24, " %p", v26);
          --v23;
        }
        while (v23);
      }
      absl::lts_2020_02_25::raw_logging_internal::RawLog(0, (ORToolsCpL2AccessVariable *)"mutex.cc", 423, "%s%p %s %s", v19, v20, v21, v22, *((_QWORD *)&absl::lts_2020_02_25::event_properties + 2 * v8 + 1));
      v11 = (_DWORD *)&unk_25407B000;
      if (!v15 || (*((_DWORD *)&absl::lts_2020_02_25::event_properties + 4 * v8) & 2) == 0)
      {
        if (!v15)
          return;
        goto LABEL_29;
      }
      goto LABEL_27;
    }
  }
  else if (!v15)
  {
    goto LABEL_19;
  }
  if (*(_BYTE *)(v15 + 40))
    goto LABEL_19;
  if ((*((_BYTE *)&absl::lts_2020_02_25::event_properties + 16 * v8) & 2) != 0)
  {
LABEL_27:
    v27 = *(void (**)(_QWORD))(v15 + 24);
    if (v27)
      v27(*(_QWORD *)(v15 + 32));
  }
LABEL_29:
  v28 = v11[434];
  if ((v28 & 1) == 0)
  {
    while (1)
    {
      v29 = __ldaxr((unsigned int *)&dword_25407B6C8);
      if (v29 != v28)
        break;
      if (!__stxr(v28 | 1, (unsigned int *)&dword_25407B6C8))
      {
        if ((v29 & 1) != 0)
          goto LABEL_35;
        goto LABEL_36;
      }
    }
    __clrex();
    if ((v29 & 1) == 0)
      goto LABEL_36;
  }
LABEL_35:
  absl::lts_2020_02_25::base_internal::SpinLock::SlowLock((absl::lts_2020_02_25::base_internal::SpinLock *)&dword_25407B6C8, v17, a3, a4, a5, a6, a7, a8);
LABEL_36:
  v30 = *(_DWORD *)v15 - 1;
  *(_DWORD *)v15 = v30;
  v31 = v11[434] & 2;
  do
    v32 = __ldxr((unsigned int *)&dword_25407B6C8);
  while (__stlxr(v31, (unsigned int *)&dword_25407B6C8));
  if (v32 >= 8)
    absl::lts_2020_02_25::base_internal::SpinLock::SlowUnlock((absl::lts_2020_02_25::base_internal::SpinLock *)&dword_25407B6C8, v32);
  if (!v30)
    absl::lts_2020_02_25::base_internal::LowLevelAlloc::Free((absl::lts_2020_02_25::base_internal::LowLevelAlloc *)v15, v32, a3, a4, a5, a6, a7, a8);
}

void absl::lts_2020_02_25::Mutex::Unlock(absl::lts_2020_02_25::Mutex *this, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BOOL4 v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;

  absl::lts_2020_02_25::DebugOnlyLockLeave(this, a2, a3, a4, a5, a6, a7, a8);
  v15 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 9) != 8)
    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"mutex.cc", 1671, "Mutex unlocked when destroyed or not locked: v=0x%x", v11, v12, v13, v14, *(_QWORD *)this);
  v17 = (v15 & 0x18) == 8 && (v15 & 6) != 4;
  v18 = (v15 ^ 0xC) & 0x18;
  v19 = (v15 ^ 0xC) & 6;
  if (v17 != v18 < v19)
    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"mutex.cc", 1692, "internal logic error %llx %llx %llx\n", v11, v12, v13, v14, v15);
  if (v18 < v19)
  {
    while (1)
    {
      v20 = __ldxr((unint64_t *)this);
      if (v20 != v15)
        break;
      if (!__stlxr(v15 & 0xFFFFFFFFFFFFFFD7, (unint64_t *)this))
        return;
    }
    __clrex();
  }
  absl::lts_2020_02_25::Mutex::UnlockSlow((unint64_t *)this, 0, v9, v10, v11, v12, v13, v14);
}

_QWORD *absl::lts_2020_02_25::DebugOnlyLockLeave(_QWORD *this, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  absl::lts_2020_02_25::synchronization_internal::GraphCycles *v13;
  absl::lts_2020_02_25::synchronization_internal::GraphCycles *v14;
  absl::lts_2020_02_25::base_internal *Id;
  absl::lts_2020_02_25::base_internal *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  int v31;
  unsigned int *v32;
  uint64_t v33;
  unsigned int *v34;
  __int128 v35;
  _QWORD *v36;
  absl::lts_2020_02_25::base_internal *v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;

    return this;
  v9 = (uint64_t)this;
  v10 = dword_25407B6C4;
  if ((dword_25407B6C4 & 1) != 0)
  {
LABEL_21:
    absl::lts_2020_02_25::base_internal::SpinLock::SlowLock((absl::lts_2020_02_25::base_internal::SpinLock *)&dword_25407B6C4, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v13 = (absl::lts_2020_02_25::synchronization_internal::GraphCycles *)qword_25407B6D0;
    if (qword_25407B6D0)
      goto LABEL_9;
  }
  else
  {
    v11 = dword_25407B6C4 | 1;
    while (1)
    {
      v12 = __ldaxr((unsigned int *)&dword_25407B6C4);
      if (v12 != v10)
        break;
      if (!__stxr(v11, (unsigned int *)&dword_25407B6C4))
      {
        if ((v12 & 1) != 0)
          goto LABEL_21;
        goto LABEL_7;
      }
    }
    __clrex();
    if ((v12 & 1) != 0)
      goto LABEL_21;
LABEL_7:
    v13 = (absl::lts_2020_02_25::synchronization_internal::GraphCycles *)qword_25407B6D0;
    if (qword_25407B6D0)
      goto LABEL_9;
  }
  v14 = (absl::lts_2020_02_25::synchronization_internal::GraphCycles *)absl::lts_2020_02_25::base_internal::LowLevelAlloc::Alloc((absl::lts_2020_02_25::base_internal::LowLevelAlloc *)8, (unint64_t)a2, a3, a4, a5, a6, a7, a8);
  v13 = (absl::lts_2020_02_25::synchronization_internal::GraphCycles *)absl::lts_2020_02_25::synchronization_internal::GraphCycles::GraphCycles(v14);
  qword_25407B6D0 = (uint64_t)v13;
LABEL_9:
  Id = (absl::lts_2020_02_25::base_internal *)absl::lts_2020_02_25::synchronization_internal::GraphCycles::GetId(v13, v9, a3, a4, a5, a6, a7, a8);
  v16 = Id;
  v17 = dword_25407B6C4 & 2;
  do
    v18 = __ldxr((unsigned int *)&dword_25407B6C4);
  while (__stlxr(v17, (unsigned int *)&dword_25407B6C4));
  if (v18 >= 8)
  {
    absl::lts_2020_02_25::base_internal::SpinLock::SlowUnlock((absl::lts_2020_02_25::base_internal::SpinLock *)&dword_25407B6C4, v18);
    this = absl::lts_2020_02_25::base_internal::CurrentThreadIdentityIfPresent(v37);
    v26 = this;
    if (this)
    {
LABEL_13:
      v27 = (unsigned int *)v26[9];
      if (v27)
        goto LABEL_14;
LABEL_35:
      v38 = absl::lts_2020_02_25::base_internal::LowLevelAlloc::Alloc((absl::lts_2020_02_25::base_internal::LowLevelAlloc *)0x3C8, v19, v20, v21, v22, v23, v24, v25);
      *(_DWORD *)v38 = 0;
      *(_BYTE *)(v38 + 4) = 0;
      v26[9] = v38;
LABEL_36:
      v39 = v9 % 1031;
      v40 = dword_25407B6C8;
      if ((dword_25407B6C8 & 1) != 0)
        goto LABEL_53;
      v41 = dword_25407B6C8 | 1;
      while (1)
      {
        v42 = __ldaxr((unsigned int *)&dword_25407B6C8);
        if (v42 != v40)
          break;
        if (!__stxr(v41, (unsigned int *)&dword_25407B6C8))
          goto LABEL_42;
      }
      __clrex();
LABEL_42:
      if ((v42 & 1) != 0)
      {
LABEL_53:
        absl::lts_2020_02_25::base_internal::SpinLock::SlowLock((absl::lts_2020_02_25::base_internal::SpinLock *)&dword_25407B6C8, v19, v20, v21, v22, v23, v24, v25);
        v43 = absl::lts_2020_02_25::synch_event[v39];
        if (v43)
        {
LABEL_44:
          while (*(_QWORD *)(v43 + 16) != (v9 ^ 0xF03A5F7BF03A5F7BLL))
          {
            v43 = *(_QWORD *)(v43 + 8);
            if (!v43)
              goto LABEL_48;
          }
          ++*(_DWORD *)v43;
        }
      }
      else
      {
        v43 = absl::lts_2020_02_25::synch_event[v39];
        if (v43)
          goto LABEL_44;
      }
LABEL_48:
      v44 = dword_25407B6C8 & 2;
      do
        v45 = __ldxr((unsigned int *)&dword_25407B6C8);
      while (__stlxr(v44, (unsigned int *)&dword_25407B6C8));
      if (v45 >= 8)
        absl::lts_2020_02_25::base_internal::SpinLock::SlowUnlock((absl::lts_2020_02_25::base_internal::SpinLock *)&dword_25407B6C8, v45);
      return (_QWORD *)absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"mutex.cc", 1213, "thread releasing lock it does not hold: %p %s; ",
                         v22,
                         v23,
                         v24,
                         v25,
                         v9);
    }
  }
  else
  {
    this = absl::lts_2020_02_25::base_internal::CurrentThreadIdentityIfPresent(Id);
    v26 = this;
    if (this)
      goto LABEL_13;
  }
  this = absl::lts_2020_02_25::synchronization_internal::CreateThreadIdentity((absl::lts_2020_02_25::synchronization_internal *)this, v19, v20, v21, v22, v23, v24, v25);
  v26 = this;
  v27 = (unsigned int *)this[9];
  if (!v27)
    goto LABEL_35;
LABEL_14:
  v28 = *v27;
  if (!(_DWORD)v28)
  {
    if (*((_BYTE *)v27 + 4))
      return this;
    goto LABEL_36;
  }
  v29 = 0;
  do
  {
    v30 = &v27[v29];
    if (*(absl::lts_2020_02_25::base_internal **)&v27[v29 + 6] == v16)
    {
      v31 = v30[4];
      if (v31 == 1)
      {
        v32 = &v27[v29];
        v33 = (int)v28 - 1;
        *v27 = v33;
        v34 = &v27[6 * v33];
        v35 = *(_OWORD *)(v34 + 2);
        *((_QWORD *)v32 + 3) = *((_QWORD *)v34 + 3);
        *(_OWORD *)(v32 + 2) = v35;
        *((_QWORD *)v34 + 3) = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      else
      {
        if (v31 <= 0)
          absl::lts_2020_02_25::DebugOnlyLockLeave();
        v30[4] = v31 - 1;
      }
      return this;
    }
    v29 += 6;
  }
  while (6 * v28 != v29);
  if (!*((_BYTE *)v27 + 4))
  {
    v36 = v27 + 2;
    while (*v36 != v9)
    {
      v36 += 3;
      if (!--v28)
        goto LABEL_36;
    }
  }
  return this;
}

void absl::lts_2020_02_25::Mutex::ReaderUnlock(absl::lts_2020_02_25::Mutex *this, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;

  absl::lts_2020_02_25::DebugOnlyLockLeave(this, a2, a3, a4, a5, a6, a7, a8);
  v15 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 9) != 1)
    absl::lts_2020_02_25::Mutex::ReaderUnlock();
  if ((*(_QWORD *)this & 0x15) == 1)
  {
    if (v15 <= 0xFF)
      absl::lts_2020_02_25::Mutex::ReaderUnlock();
    v16 = -257;
    if (v15 >= 0x200)
      v16 = -256;
    v17 = v16 + v15;
    while (1)
    {
      v18 = __ldxr((unint64_t *)this);
      if (v18 != v15)
        break;
      if (!__stlxr(v17, (unint64_t *)this))
        return;
    }
    __clrex();
  }
  absl::lts_2020_02_25::Mutex::UnlockSlow((unint64_t *)this, 0, v9, v10, v11, v12, v13, v14);
}

BOOL absl::lts_2020_02_25::ExactlyOneReader(absl::lts_2020_02_25 *this)
{
  if ((this & 9) != 1)
    absl::lts_2020_02_25::ExactlyOneReader();
  if ((unint64_t)this <= 0xFF)
    absl::lts_2020_02_25::Mutex::ReaderUnlock();
  return (unint64_t)this < 0x200;
}

ssize_t absl::lts_2020_02_25::CheckForMutexCorruption(ssize_t this, char a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((this & ((8 * this) ^ 0x20) & 0x28) != 0)
    absl::lts_2020_02_25::CheckForMutexCorruption(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  return this;
}

uint64_t *absl::lts_2020_02_25::Enqueue(uint64_t *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  std::chrono::steady_clock::time_point v23;
  std::chrono::steady_clock::time_point v24;
  std::chrono::steady_clock::time_point v25;
  std::chrono::steady_clock::time_point v26;
  std::chrono::steady_clock::time_point v27;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  _opaque_pthread_t *v29;
  absl::lts_2020_02_25::base_internal::CycleClock *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  BOOL v47;
  _BOOL4 v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  BOOL v80;
  _BOOL4 v81;
  uint64_t v83;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  BOOL v92;
  BOOL v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  BOOL v101;
  _BOOL4 v102;
  uint64_t v104;
  char v105;
  sched_param v106;
  int v107;

  v10 = *(unint64_t **)(a2 + 40);
  if (!v10)
  {
    v20 = *(uint64_t **)(a2 + 32);
    v21 = v20[3];
    if (v21)
      v22 = v21 == a2;
    else
      v22 = 1;
    if (!v22 && !*((_BYTE *)v20 + 32))
    {
      v104 = a3;
      v105 = a4;
      absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"mutex.cc", 887, "Check %s failed: %s", a5, a6, a7, a8, (char)"s->waitp == nullptr || s->waitp == waitp || s->suppress_fatal_errors");
      a4 = v105;
      a3 = v104;
    }
    v20[3] = a2;
    v20[1] = 0;
    *((_BYTE *)v20 + 16) = 1;
    *((_BYTE *)v20 + 69) = 0;
    *((_BYTE *)v20 + 70) = (a4 & 2) != 0;
    if (!a1)
    {
      *v20 = (uint64_t)v20;
      v20[5] = a3;
      v37 = v20;
      *((_BYTE *)v20 + 68) = 0;
LABEL_118:
      *((_DWORD *)v20 + 16) = 1;
      return v37;
    }
    v23.__d_.__rep_ = absl::lts_2020_02_25::base_internal::CycleClock::Now().__d_.__rep_;
    if (v20[7] < v23.__d_.__rep_)
    {
      rep = v23.__d_.__rep_;
      v107 = 0;
      v29 = pthread_self();
      v30 = (absl::lts_2020_02_25::base_internal::CycleClock *)pthread_getschedparam(v29, &v107, &v106);
      if (!(_DWORD)v30)
      {
        *((_DWORD *)v20 + 12) = v106.sched_priority;
        v20[7] = rep + (uint64_t)absl::lts_2020_02_25::base_internal::CycleClock::Frequency(v30);
        v35 = *((_DWORD *)v20 + 12);
        v36 = *((unsigned __int8 *)a1 + 68);
        if (v35 <= *((_DWORD *)a1 + 12))
          goto LABEL_39;
LABEL_34:
        if (v36)
        {
          if (*(_UNKNOWN **)a2 == &absl::lts_2020_02_25::kExclusiveS)
          {
            v65 = *(_QWORD **)(a2 + 8);
            v50 = a1;
            if (!v65 || (v50 = a1, !*v65))
            {
LABEL_87:
              v66 = v50[1];
              *v20 = *v50;
              *v50 = (uint64_t)v20;
              if (v66)
              {
                v67 = (_QWORD *)v50[3];
                v68 = (_QWORD *)v20[3];
                if (*v67 != *v68)
                  goto LABEL_89;
                v85 = (_QWORD *)v67[1];
                v86 = (_QWORD *)v68[1];
                if (v85)
                {
                  if (!v86 || !*v86)
                  {
                    if (!*v85)
                      goto LABEL_90;
                    goto LABEL_89;
                  }
                  if (*v85 != *v86 || v85[1] != v86[1] || v85[4] != v86[4])
                    goto LABEL_89;
                  v88 = v85[2];
                  v87 = v85[3];
                  v90 = v86[2];
                  v89 = v86[3];
                  v15 = v87 == v89;
                  v91 = (v89 | v87) & 1 | v88;
                  v92 = v15 || v91 == 0;
                  v93 = v92;
                  if (v88 != v90 || !v93)
LABEL_89:
                    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"mutex.cc", 964, "Check %s failed: %s", v24.__d_.__rep_, v25.__d_.__rep_, v26.__d_.__rep_, v27.__d_.__rep_, (char)"enqueue_after->skip == nullptr || MuSameCondition(enqueue_after, s)");
                }
                else if (v86 && *v86)
                {
                  goto LABEL_89;
                }
              }
LABEL_90:
              if (v50 == a1)
                goto LABEL_93;
              if (!*((_BYTE *)v50 + 16))
                goto LABEL_93;
              v69 = (_QWORD *)v50[3];
              v70 = *(_QWORD **)(*v50 + 24);
              if (*v69 != *v70)
                goto LABEL_93;
              v94 = (_QWORD *)v69[1];
              v95 = (_QWORD *)v70[1];
              if (v94)
              {
                if (v95 && *v95)
                {
                  if (*v94 != *v95 || v94[1] != v95[1] || v94[4] != v95[4])
                    goto LABEL_93;
                  v97 = v94[2];
                  v96 = v94[3];
                  v99 = v95[2];
                  v98 = v95[3];
                  v15 = v96 == v98;
                  v100 = (v98 | v96) & 1 | v97;
                  v101 = v15 || v100 == 0;
                  v102 = v101;
                  if (v97 != v99 || !v102)
                  {
LABEL_93:
                    v71 = (_QWORD *)v20[3];
                    v72 = *(_QWORD **)(*v20 + 24);
                    if (*v71 != *v72)
                    {
LABEL_94:
                      v37 = a1;
                      goto LABEL_118;
                    }
                    v73 = (_QWORD *)v71[1];
                    v74 = (_QWORD *)v72[1];
                    if (v73)
                    {
                      if (v74 && *v74)
                      {
                        if (*v73 != *v74 || v73[1] != v74[1] || v73[4] != v74[4])
                          goto LABEL_94;
                        v76 = v73[2];
                        v75 = v73[3];
                        v78 = v74[2];
                        v77 = v74[3];
                        v15 = v75 == v77;
                        v79 = (v77 | v75) & 1 | v76;
                        v80 = v15 || v79 == 0;
                        v81 = v80;
                        if (v76 != v78 || !v81)
                          goto LABEL_94;
                      }
                      else if (*v73)
                      {
                        goto LABEL_94;
                      }
                    }
                    else if (v74 && *v74)
                    {
                      goto LABEL_94;
                    }
                    v20[1] = *v20;
                    goto LABEL_94;
                  }
                }
                else if (*v94)
                {
                  goto LABEL_93;
                }
              }
              else if (v95 && *v95)
              {
                goto LABEL_93;
              }
              v50[1] = *v50;
              goto LABEL_93;
            }
          }
          LOBYTE(v36) = 1;
LABEL_39:
          *v20 = *a1;
          *a1 = (uint64_t)v20;
          v20[5] = a1[5];
          *((_BYTE *)v20 + 68) = v36;
          v37 = v20;
          if (!*((_BYTE *)a1 + 16))
            goto LABEL_118;
          v38 = (_QWORD *)a1[3];
          v39 = (_QWORD *)v20[3];
          v37 = v20;
          if (*v38 != *v39)
            goto LABEL_118;
          v40 = (uint64_t *)v38[1];
          v41 = (uint64_t *)v39[1];
          if (v40)
          {
            if (v41 && *v41)
            {
              v37 = v20;
              if (*v40 != *v41)
                goto LABEL_118;
              v37 = v20;
              if (v40[1] != v41[1])
                goto LABEL_118;
              v37 = v20;
              if (v40[4] != v41[4])
                goto LABEL_118;
              v43 = v40[2];
              v42 = v40[3];
              v45 = v41[2];
              v44 = v41[3];
              v15 = v42 == v44;
              v46 = (v44 | v42) & 1 | v43;
              v47 = v15 || v46 == 0;
              v48 = v47;
              v37 = v20;
              if (v43 != v45)
                goto LABEL_118;
              v37 = v20;
              if (!v48)
                goto LABEL_118;
              goto LABEL_117;
            }
            v83 = *v40;
          }
          else
          {
            if (!v41)
              goto LABEL_117;
            v83 = *v41;
          }
          v37 = v20;
          if (v83)
            goto LABEL_118;
LABEL_117:
          a1[1] = (uint64_t)v20;
          v37 = v20;
          goto LABEL_118;
        }
        v49 = a1;
        while (1)
        {
          v50 = v49;
          v51 = (uint64_t *)*v49;
          v49 = *(uint64_t **)(*v49 + 8);
          if (v49)
          {
            v52 = (uint64_t *)v49[1];
            if (v52)
            {
              v53 = v51;
              do
              {
                v54 = v49;
                v49 = v52;
                v53[1] = (uint64_t)v52;
                v52 = (uint64_t *)v52[1];
                v53 = v54;
              }
              while (v52);
            }
            v51[1] = (uint64_t)v49;
            if (v49 != v51)
            {
              if (v35 <= *((_DWORD *)v49 + 12))
                goto LABEL_58;
              v55 = (_QWORD *)v20[3];
              v56 = (_QWORD *)v51[3];
              if (*v55 != *v56)
                goto LABEL_58;
              v57 = (_QWORD *)v55[1];
              v58 = (_QWORD *)v56[1];
              if (v57)
              {
                if (v58 && *v58)
                {
                  if (*v57 != *v58 || v57[1] != v58[1] || v57[4] != v58[4])
                    goto LABEL_58;
                  v60 = v57[2];
                  v59 = v57[3];
                  v62 = v58[2];
                  v61 = v58[3];
                  v63 = !((v61 | v59) & 1 | v60) || v59 == v61;
                  if (!v63 || v60 != v62)
                    goto LABEL_58;
                }
                else if (*v57)
                {
                  goto LABEL_58;
                }
              }
              else if (v58 && *v58)
              {
                goto LABEL_58;
              }
            }
          }
          v49 = v51;
LABEL_58:
          if (v35 > *((_DWORD *)v49 + 12))
            goto LABEL_87;
        }
      }
      absl::lts_2020_02_25::raw_logging_internal::RawLog(2, (ORToolsCpL2AccessVariable *)"mutex.cc", 910, "pthread_getschedparam failed: %d", v31, v32, v33, v34, (char)v30);
    }
    v35 = *((_DWORD *)v20 + 12);
    v36 = *((unsigned __int8 *)a1 + 68);
    if (v35 <= *((_DWORD *)a1 + 12))
      goto LABEL_39;
    goto LABEL_34;
  }
  v11 = 0;
  *(_QWORD *)(a2 + 40) = 0;
  while (1)
  {
    while (1)
    {
      v12 = *v10;
      if ((*v10 & 1) != 0)
        goto LABEL_7;
      v13 = __ldaxr(v10);
      if (v13 == v12)
        break;
      __clrex();
      if (dword_25407B680 <= 1)
        v16 = 0;
      else
        v16 = 250;
      v15 = v16 == v11;
      if (v16 > v11)
        goto LABEL_3;
LABEL_16:
      if (v15)
      {
        AbslInternalMutexYield();
        ++v11;
      }
      else
      {
        AbslInternalSleepFor(0, 40000);
        v11 = 0;
      }
    }
    if (!__stxr(v12 | 1, v10))
      break;
LABEL_7:
    if (dword_25407B680 <= 1)
      v14 = 0;
    else
      v14 = 250;
    v15 = v14 == v11;
    if (v14 <= v11)
      goto LABEL_16;
LABEL_3:
    ++v11;
  }
  v17 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(v17 + 24))
  {
    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"mutex.cc", 2498, "Check %s failed: %s", a5, a6, a7, a8, (char)"waitp->thread->waitp == nullptr");
    v17 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(v17 + 24) = a2;
    v18 = (_QWORD *)v17;
    v19 = (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v12 & 0xFFFFFFFFFFFFFFFCLL) != 0)
    {
LABEL_21:
      *(_QWORD *)v17 = *v19;
      v18 = v19;
    }
  }
  else
  {
    *(_QWORD *)(v17 + 24) = a2;
    v18 = (_QWORD *)v17;
    v19 = (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v12 & 0xFFFFFFFFFFFFFFFCLL) != 0)
      goto LABEL_21;
  }
  *v18 = v17;
  *(_DWORD *)(v17 + 64) = 1;
  atomic_store(v12 & 2 | *(_QWORD *)(a2 + 32), v10);
  return a1;
}

ssize_t absl::lts_2020_02_25::Mutex::Fer(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  ssize_t v14;
  unint64_t v15;
  int v16;
  ssize_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  ssize_t v22;
  unint64_t v23;
  unint64_t v24;

  v10 = *(_QWORD **)(a2 + 24);
  if (!v10[1])
  {
    if (!v10[2])
      goto LABEL_3;
LABEL_35:
    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"mutex.cc", 2340, "Check %s failed: %s", a5, a6, a7, a8, (char)"!w->waitp->timeout.has_timeout()");
    v10 = *(_QWORD **)(a2 + 24);
    if (!v10[5])
      goto LABEL_4;
    goto LABEL_36;
  }
  absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"mutex.cc", 2338, "Check %s failed: %s", a5, a6, a7, a8, (char)"w->waitp->cond == nullptr");
  v10 = *(_QWORD **)(a2 + 24);
  if (v10[2])
    goto LABEL_35;
LABEL_3:
  if (!v10[5])
    goto LABEL_4;
LABEL_36:
  absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"mutex.cc", 2342, "Check %s failed: %s", a5, a6, a7, a8, (char)"w->waitp->cv_word == nullptr");
  v10 = *(_QWORD **)(a2 + 24);
LABEL_4:
  v11 = *a1;
  if ((((*v10 != (_QWORD)absl::lts_2020_02_25::kSharedS) | 8) & *a1) != 0)
  {
    v12 = 0;
    while ((v11 & 0x44) != 0)
    {
      if ((v11 & 0x40) == 0)
      {
        while (1)
        {
          v13 = __ldaxr(a1);
          if (v13 != v11)
            break;
          if (!__stlxr(v11 | 0x44, a1))
          {
            result = (ssize_t)absl::lts_2020_02_25::Enqueue((uint64_t *)(v11 & 0xFFFFFFFFFFFFFF00), *(_QWORD *)(a2 + 24), v11, 2, a5, a6, a7, a8);
            v22 = result;
            if (!result)
              result = absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"mutex.cc", 2374, "Check %s failed: %s", v18, v19, v20, v21, (char)"new_h != nullptr");
            do
            {
              while (1)
              {
                v23 = *a1;
                v24 = __ldxr(a1);
                if (v24 == v23)
                  break;
                __clrex();
              }
            }
            while (__stlxr(*a1 & 0xBB | v22 | 4, a1));
            return result;
          }
        }
LABEL_16:
        __clrex();
      }
      if (dword_25407B680 <= 1)
        v16 = 0;
      else
        v16 = 250;
      if (v16 <= v12)
      {
        if (v16 == v12)
        {
          AbslInternalMutexYield();
          ++v12;
        }
        else
        {
          AbslInternalSleepFor(0, 40000);
          v12 = 0;
        }
      }
      else
      {
        ++v12;
      }
      v11 = *a1;
      v10 = *(_QWORD **)(a2 + 24);
      if ((((*v10 != (_QWORD)absl::lts_2020_02_25::kSharedS) | 8) & *a1) == 0)
        goto LABEL_26;
    }
    result = (ssize_t)absl::lts_2020_02_25::Enqueue(0, (uint64_t)v10, v11, 2, a5, a6, a7, a8);
    v14 = result;
    if (!result)
      result = absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"mutex.cc", 2363, "Check %s failed: %s", a5, a6, a7, a8, (char)"new_h != nullptr");
    while (1)
    {
      v15 = __ldxr(a1);
      if (v15 != v11)
        break;
      if (!__stlxr(v11 | (unint64_t)v14 | 4, a1))
        return result;
    }
    goto LABEL_16;
  }
LABEL_26:
  *(_QWORD *)a2 = 0;
  atomic_store(0, (unsigned int *)(a2 + 64));
  return AbslInternalPerThreadSemPost(a2);
}

void absl::lts_2020_02_25::CondVar::~CondVar(absl::lts_2020_02_25::CondVar *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((*(_QWORD *)this & 2) != 0)
    absl::lts_2020_02_25::ForgetSynchEvent((uint64_t)this, 2, 1, a4, a5, a6, a7, a8);
}

void absl::lts_2020_02_25::CondVar::SignalAll(absl::lts_2020_02_25::CondVar *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  int v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  void (*v20)(const char *, absl::lts_2020_02_25::CondVar *);

  v8 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return;
  v10 = 0;
  while ((v8 & 1) != 0)
  {
LABEL_9:
    if (dword_25407B680 <= 1)
      v13 = 0;
    else
      v13 = 250;
    if (v13 > v10)
      goto LABEL_16;
    if (v13 == v10)
    {
      AbslInternalMutexYield();
LABEL_16:
      ++v10;
      v8 = *(_QWORD *)this;
      if (!*(_QWORD *)this)
        return;
    }
    else
    {
      AbslInternalSleepFor(0, 40000);
      v10 = 0;
      v8 = *(_QWORD *)this;
      if (!*(_QWORD *)this)
        return;
    }
  }
  v11 = v8 & 2;
  do
  {
    v12 = __ldaxr((unint64_t *)this);
    if (v12 != v8)
    {
      __clrex();
      goto LABEL_9;
    }
  }
  while (__stxr(v11, (unint64_t *)this));
  v14 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
  if ((v8 & 0xFFFFFFFFFFFFFFFCLL) != 0)
  {
    v15 = *v14;
    do
    {
      while (1)
      {
        v17 = *(_QWORD *)v15;
        v18 = *(_QWORD *)(v15 + 24);
        if (!*(_QWORD *)(v18 + 16))
        {
          v19 = *(unint64_t **)(v18 + 24);
          if (v19)
            break;
        }
        *(_QWORD *)v15 = 0;
        atomic_store(0, (unsigned int *)(v15 + 64));
        AbslInternalPerThreadSemPost(v15);
        v16 = v15 == (_QWORD)v14;
        v15 = v17;
        if (v16)
          goto LABEL_27;
      }
      absl::lts_2020_02_25::Mutex::Fer(v19, v15, a3, a4, a5, a6, a7, a8);
      v16 = v15 == (_QWORD)v14;
      v15 = v17;
    }
    while (!v16);
LABEL_27:
    v20("SignalAll wakeup", this);
  }
  if (v11)
    absl::lts_2020_02_25::PostSynchEvent((uint64_t)this, 13, a3, a4, a5, a6, a7, a8);
}

uint64_t absl::lts_2020_02_25::`anonymous namespace'::GetStack(absl::lts_2020_02_25::_anonymous_namespace_ *this, void **a2)
{
  return absl::lts_2020_02_25::GetStackTrace(this, a2, 3);
}

char *absl::lts_2020_02_25::StackString(const void **this, void **a2, char *a3, char *a4, char a5)
{
  int v6;
  int v7;
  const void **v8;
  uint64_t v9;
  uint64_t (*v10)(const void *, char *, uint64_t);
  int v11;
  const void **v12;
  uint64_t v13;
  const void *v14;
  uint64_t (*v15)(const void *, char *, uint64_t);
  int v16;
  const void *v17;
  char v19[200];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if ((_DWORD)a2)
  {
    v6 = (int)a4;
    v7 = (int)a2;
    v8 = this;
    v9 = a2;
    if ((a5 & 1) != 0)
    {
      if ((v10(*this, v19, 200) & 1) == 0)
        v19[0] = 0;
      snprintf(a3, v6, "%s\t@ %p %s\n", "\n", *v8, v19);
      if (v7 != 1)
      {
        v11 = strlen(a3);
        v12 = v8 + 1;
        v13 = v9 - 1;
        do
        {
          if ((v15(*v12, v19, 200) & 1) == 0)
            v19[0] = 0;
          v14 = *v12++;
          snprintf(&a3[v11], v6 - v11, "%s\t@ %p %s\n", "", v14, v19);
          v11 += strlen(&a3[v11]);
          --v13;
        }
        while (v13);
      }
    }
    else
    {
      v16 = 0;
      do
      {
        v17 = *v8++;
        snprintf(&a3[v16], v6 - v16, " %p", v17);
        v16 += strlen(&a3[v16]);
        --v9;
      }
      while (v9);
    }
  }
  return a3;
}

uint64_t *OUTLINED_FUNCTION_1_1(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  return absl::lts_2020_02_25::Enqueue(a1, v8, v9, 2, a5, a6, a7, a8);
}

ssize_t OUTLINED_FUNCTION_2_0(unint64_t *a1, _QWORD *a2)
{
  return absl::lts_2020_02_25::Mutex::LockSlow(a1, a2, 0, 0);
}

void OUTLINED_FUNCTION_8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  atomic_load((unsigned int *)(a16 + 64));
}

ssize_t OUTLINED_FUNCTION_9(uint64_t a1, ORToolsCpL2AccessVariable *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return absl::lts_2020_02_25::raw_logging_internal::RawLog(3, a2, 1897, a4, a5, a6, a7, a8, a9);
}

ssize_t OUTLINED_FUNCTION_10(uint64_t a1, ORToolsCpL2AccessVariable *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return absl::lts_2020_02_25::raw_logging_internal::RawLog(3, a2, 1894, a4, a5, a6, a7, a8, a9);
}

uint64_t _GLOBAL__sub_I_mutex_cc(absl::lts_2020_02_25::base_internal *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  int v9;

  result = absl::lts_2020_02_25::base_internal::NumCPUs(a1, a2, a3, a4, a5, a6, a7, a8);
  dword_25407B680 = result;
  if ((int)result <= 1)
    v9 = 0;
  else
    v9 = 1500;
  dword_25407B6C0 = v9;
  return result;
}

absl::lts_2020_02_25::synchronization_internal::Waiter *absl::lts_2020_02_25::synchronization_internal::PerThreadSem::Init(uint64_t a1)
{
  absl::lts_2020_02_25::synchronization_internal::Waiter *result;

  result = absl::lts_2020_02_25::synchronization_internal::Waiter::Waiter((absl::lts_2020_02_25::synchronization_internal::Waiter *)(a1 + 80));
  *(_DWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 220) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  return result;
}

void absl::lts_2020_02_25::synchronization_internal::PerThreadSem::Destroy(uint64_t a1)
{
  absl::lts_2020_02_25::synchronization_internal::Waiter::~Waiter((absl::lts_2020_02_25::synchronization_internal::Waiter *)(a1 + 80));
}

ssize_t AbslInternalPerThreadSemPost(uint64_t a1)
{
  return absl::lts_2020_02_25::synchronization_internal::Waiter::Post((absl::lts_2020_02_25::synchronization_internal::Waiter *)(a1 + 80));
}

uint64_t AbslInternalPerThreadSemWait(absl::lts_2020_02_25::base_internal *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *ThreadIdentity;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t result;
  unsigned int *v14;
  unsigned int v15;

  ThreadIdentity = (char *)absl::lts_2020_02_25::base_internal::CurrentThreadIdentityIfPresent(a1);
  if (!ThreadIdentity)
    ThreadIdentity = (char *)absl::lts_2020_02_25::synchronization_internal::CreateThreadIdentity(0, v2, v3, v4, v5, v6, v7, v8);
  v10 = *((_DWORD *)ThreadIdentity + 54);
  if (v10 <= 1)
    v10 = 1;
  *((_DWORD *)ThreadIdentity + 55) = v10;
  ThreadIdentity[224] = 0;
  v11 = (unsigned int *)*((_QWORD *)ThreadIdentity + 26);
  if (v11)
  {
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  result = absl::lts_2020_02_25::synchronization_internal::Waiter::Wait((pthread_mutex_t *)(ThreadIdentity + 80), (uint64_t)a1);
  v14 = (unsigned int *)*((_QWORD *)ThreadIdentity + 26);
  if (v14)
  {
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 - 1, v14));
  }
  ThreadIdentity[224] = 0;
  *((_DWORD *)ThreadIdentity + 55) = 0;
  return result;
}

absl::lts_2020_02_25::synchronization_internal::Waiter *absl::lts_2020_02_25::synchronization_internal::Waiter::Waiter(absl::lts_2020_02_25::synchronization_internal::Waiter *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = pthread_mutex_init((pthread_mutex_t *)this, 0);
  if (v2)
    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"waiter.cc", 208, "pthread_mutex_init failed: %d", v3, v4, v5, v6, v2);
  v7 = pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0);
  if (v7)
    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"waiter.cc", 213, "pthread_cond_init failed: %d", v8, v9, v10, v11, v7);
  *((_QWORD *)this + 14) = 0;
  return this;
}

void absl::lts_2020_02_25::synchronization_internal::Waiter::~Waiter(absl::lts_2020_02_25::synchronization_internal::Waiter *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = pthread_mutex_destroy((pthread_mutex_t *)this);
  if (v2)
    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"waiter.cc", 223, "pthread_mutex_destroy failed: %d", v3, v4, v5, v6, v2);
  v7 = pthread_cond_destroy((pthread_cond_t *)((char *)this + 64));
  if (v7)
    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"waiter.cc", 228, "pthread_cond_destroy failed: %d", v8, v9, v10, v11, v7);
}

uint64_t absl::lts_2020_02_25::synchronization_internal::Waiter::Wait(pthread_mutex_t *a1, uint64_t a2)
{
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  ssize_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  ssize_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  timespec v34;

  if (a2)
  {
    v4 = a2 & ~(a2 >> 63);
    v34.tv_sec = v4 / 0x3B9ACA00;
    v34.tv_nsec = v4 % 0x3B9ACA00;
  }
  v5 = pthread_mutex_lock(a1);
  if (v5)
    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"waiter.cc", 187, "pthread_mutex_lock failed: %d", v6, v7, v8, v9, v5);
  v10 = *(_DWORD *)&a1[1].__opaque[44];
  ++*(_DWORD *)&a1[1].__opaque[40];
  if (v10)
  {
LABEL_6:
    *(_DWORD *)&a1[1].__opaque[44] = v10 - 1;
    v11 = 1;
    goto LABEL_7;
  }
  if (!a2)
  {
    while (1)
    {
      v23 = pthread_cond_wait((pthread_cond_t *)&a1[1], a1);
      if ((_DWORD)v23)
        v23 = absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"waiter.cc", 250, "pthread_cond_wait failed: %d", v24, v25, v26, v27, v23);
      v10 = *(_DWORD *)&a1[1].__opaque[44];
      if (v10)
        goto LABEL_6;
      v28 = absl::lts_2020_02_25::base_internal::CurrentThreadIdentityIfPresent((absl::lts_2020_02_25::base_internal *)v23);
      if (!v28)
        goto LABEL_32;
      if ((v28[224] & 1) == 0 && *((_DWORD *)v28 + 54) - *((_DWORD *)v28 + 55) >= 61)
        v28[224] = 1;
    }
  }
  v18 = pthread_cond_timedwait((pthread_cond_t *)&a1[1], a1, &v34);
  if (!(_DWORD)v18)
  {
LABEL_22:
    v10 = *(_DWORD *)&a1[1].__opaque[44];
    if (!v10)
    {
      while (1)
      {
        v29 = absl::lts_2020_02_25::base_internal::CurrentThreadIdentityIfPresent((absl::lts_2020_02_25::base_internal *)v18);
        if (!v29)
          break;
        if ((v29[224] & 1) == 0 && *((_DWORD *)v29 + 54) - *((_DWORD *)v29 + 55) >= 61)
          v29[224] = 1;
        v18 = pthread_cond_timedwait((pthread_cond_t *)&a1[1], a1, &v34);
        if ((_DWORD)v18)
        {
          if ((_DWORD)v18 == 60)
            goto LABEL_13;
          v18 = absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"waiter.cc", 259, "pthread_cond_timedwait failed: %d", v30, v31, v32, v33, v18);
        }
        v10 = *(_DWORD *)&a1[1].__opaque[44];
        if (v10)
          goto LABEL_6;
      }
LABEL_32:
      __assert_rtn("MaybeBecomeIdle", "waiter.cc", 58, "identity != nullptr");
    }
    goto LABEL_6;
  }
  if ((_DWORD)v18 != 60)
  {
    v18 = absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"waiter.cc", 259, "pthread_cond_timedwait failed: %d", v19, v20, v21, v22, v18);
    goto LABEL_22;
  }
LABEL_13:
  v11 = 0;
LABEL_7:
  --*(_DWORD *)&a1[1].__opaque[40];
  v12 = pthread_mutex_unlock(a1);
  if (v12)
    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"waiter.cc", 197, "pthread_mutex_unlock failed: %d", v13, v14, v15, v16, v12);
  return v11;
}

void sub_22D9DD6A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  absl::lts_2020_02_25::synchronization_internal::PthreadMutexHolder::~PthreadMutexHolder((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

void sub_22D9DD6B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  absl::lts_2020_02_25::synchronization_internal::PthreadMutexHolder::~PthreadMutexHolder((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

void sub_22D9DD6CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  absl::lts_2020_02_25::synchronization_internal::PthreadMutexHolder::~PthreadMutexHolder((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

void sub_22D9DD6E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  absl::lts_2020_02_25::synchronization_internal::PthreadMutexHolder::~PthreadMutexHolder((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

void sub_22D9DD6F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  absl::lts_2020_02_25::synchronization_internal::PthreadMutexHolder::~PthreadMutexHolder((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

void sub_22D9DD70C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  absl::lts_2020_02_25::synchronization_internal::PthreadMutexHolder::~PthreadMutexHolder((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

void sub_22D9DD720(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  absl::lts_2020_02_25::synchronization_internal::PthreadMutexHolder::~PthreadMutexHolder((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

void sub_22D9DD734(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  absl::lts_2020_02_25::synchronization_internal::PthreadMutexHolder::~PthreadMutexHolder((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

void sub_22D9DD748(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  absl::lts_2020_02_25::synchronization_internal::PthreadMutexHolder::~PthreadMutexHolder((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

void absl::lts_2020_02_25::synchronization_internal::PthreadMutexHolder::~PthreadMutexHolder(pthread_mutex_t **this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = pthread_mutex_unlock(*this);
  if (v1)
    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"waiter.cc", 197, "pthread_mutex_unlock failed: %d", v2, v3, v4, v5, v1);
}

ssize_t absl::lts_2020_02_25::synchronization_internal::Waiter::Post(absl::lts_2020_02_25::synchronization_internal::Waiter *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  ssize_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = pthread_mutex_lock((pthread_mutex_t *)this);
  if (v2)
    absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"waiter.cc", 187, "pthread_mutex_lock failed: %d", v3, v4, v5, v6, v2);
  v7 = *((_DWORD *)this + 28);
  ++*((_DWORD *)this + 29);
  if (v7)
  {
    v8 = pthread_cond_signal((pthread_cond_t *)((char *)this + 64));
    if (v8)
      absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"waiter.cc", 285, "pthread_cond_signal failed: %d", v9, v10, v11, v12, v8);
  }
  result = pthread_mutex_unlock((pthread_mutex_t *)this);
  if ((_DWORD)result)
    return absl::lts_2020_02_25::raw_logging_internal::RawLog(3, (ORToolsCpL2AccessVariable *)"waiter.cc", 197, "pthread_mutex_unlock failed: %d", v14, v15, v16, v17, result);
  return result;
}

void sub_22D9DD870(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  absl::lts_2020_02_25::synchronization_internal::PthreadMutexHolder::~PthreadMutexHolder((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

void absl::lts_2020_02_25::base_internal::`anonymous namespace'::Throw<std::out_of_range>(const std::logic_error *a1)
{
  std::logic_error *exception;
  std::logic_error *v3;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  v3 = std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(v3, (struct type_info *)off_24F97F078, (void (*)(void *))MEMORY[0x24BEDAB00]);
}

void absl::lts_2020_02_25::base_internal::ThrowStdOutOfRange(absl::lts_2020_02_25::base_internal *this, const char *a2)
{
  std::logic_error v2;

  std::logic_error::logic_error(&v2, (const char *)this);
  v2.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const std::logic_error *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

unint64_t absl::lts_2020_02_25::Now(absl::lts_2020_02_25 *this)
{
  std::chrono::system_clock::time_point v1;
  std::chrono::system_clock::time_point v2;

  v1.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  v2.__d_.__rep_ = std::chrono::system_clock::from_time_t(0).__d_.__rep_;
  if (v1.__d_.__rep_ - v2.__d_.__rep_ < 0)
    return (-(uint64_t)(-1000 * (v1.__d_.__rep_ - v2.__d_.__rep_) % 0x3B9ACA00uLL) >> 61)
         - -1000 * (v1.__d_.__rep_ - v2.__d_.__rep_) / 0x3B9ACA00uLL;
  else
    return 1000 * (v1.__d_.__rep_ - v2.__d_.__rep_) / 0x3B9ACA00uLL;
}

std::chrono::duration<long long, std::ratio<1, 1000000>>::rep absl::lts_2020_02_25::GetCurrentTimeNanos(absl::lts_2020_02_25 *this)
{
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;

  rep = std::chrono::system_clock::now().__d_.__rep_;
  return 1000 * (rep - std::chrono::system_clock::from_time_t(0).__d_.__rep_);
}

unint64_t *AbslInternalSleepFor(unint64_t *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  timespec __rmtp;

  v2 = (uint64_t)this;
  v7 = this;
  v8 = a2;
  while (v2)
  {
    if (v2 < 1)
      return this;
    v3 = a2;
LABEL_7:
    if (v3)
      v4 = 0;
    else
      v4 = a2;
    if (v2 == 0x7FFFFFFFFFFFFFFFLL)
      v5 = v4;
    else
      v5 = a2;
    __rmtp.tv_sec = (__darwin_time_t)absl::lts_2020_02_25::ToTimespec(v2, v5);
    __rmtp.tv_nsec = v6;
    while (nanosleep(&__rmtp, &__rmtp) && *__error() == 4)
      ;
    this = absl::lts_2020_02_25::Duration::operator-=((unint64_t *)&v7, v2, v5);
    v2 = (uint64_t)v7;
    LODWORD(a2) = v8;
  }
  v3 = a2;
  if ((_DWORD)a2)
    goto LABEL_7;
  return this;
}

unint64_t *absl::lts_2020_02_25::Duration::operator-=(unint64_t *result, uint64_t a2, unsigned int a3)
{
  unint64_t v3;
  unint64_t v4;
  int64_t v5;
  uint64_t v6;

  v3 = result[1];
  if (v3 != 0xFFFFFFFFLL)
  {
    if (a3 == -1)
    {
      v4 = (a2 >> 63) ^ 0x8000000000000000;
    }
    else
    {
      v5 = *result;
      v6 = *result - a2;
      *result = v6;
      if (v3 < a3)
      {
        *result = --v6;
        LODWORD(v3) = v3 - 294967296;
      }
      *((_DWORD *)result + 2) = v3 - a3;
      if (a2 < 0)
      {
        if (v6 > v5)
          return result;
        v4 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        if (v6 <= v5)
          return result;
        v4 = 0x8000000000000000;
      }
    }
    *result = v4;
    *((_DWORD *)result + 2) = -1;
  }
  return result;
}

char *absl::lts_2020_02_25::ToTimespec(uint64_t this, int a2)
{
  uint64_t v2;
  char *v3;

  v2 = 0x7FFFFFFFFFFFFFFFLL;
  if (this)
    v2 = (this >> 63) ^ 0x7FFFFFFFFFFFFFFFLL;
  if ((a2 + 3) < 0xEE6B2800)
    v3 = (char *)this;
  else
    v3 = (char *)(this + 1);
  if (this >= 0)
    v3 = (char *)this;
  if (a2 == -1)
    return (char *)v2;
  else
    return v3;
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("basic_string");
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v23 = *(uint64_t *)((char *)a2 + a3 - 48);
      v24 = *(uint64_t *)((char *)a2 + a3 - 40);
      v25 = *(uint64_t *)((char *)a2 + a3 - 24);
      v27 = *(uint64_t *)((char *)a2 + a3 - 64);
      v26 = *(uint64_t *)((char *)a2 + a3 - 56);
      v28 = *(uint64_t *)((char *)a2 + a3 - 16);
      v29 = *(uint64_t *)((char *)a2 + a3 - 8);
      v30 = v26 + v28;
      v31 = 0x9DDFEA08EB382D69
          * (v25 ^ ((0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))));
      v32 = 0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47));
      v33 = v27 + a3 + v26 + v23;
      v34 = v33 + v24;
      v35 = __ROR8__(v33, 44) + v27 + a3 + __ROR8__(v24 + v27 + a3 - 0x622015F714C7D297 * (v31 ^ (v31 >> 47)), 21);
      v36 = v26 + v28 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v37 = v36 + v25 + v28;
      v38 = __ROR8__(v37, 44);
      v39 = v37 + v29;
      v40 = v38 + v36 + __ROR8__(v36 + v24 + v29, 21);
      v42 = *a2;
      v41 = a2 + 4;
      v43 = v42 - 0x4B6D499041670D8DLL * v24;
      v44 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v45 = *(v41 - 3);
        v46 = v43 + v34 + v30 + v45;
        v47 = v41[2];
        v48 = v41[3];
        v49 = v41[1];
        v30 = v49 + v34 - 0x4B6D499041670D8DLL * __ROR8__(v30 + v35 + v47, 42);
        v50 = v32 + v39;
        v51 = *(v41 - 2);
        v52 = *(v41 - 1);
        v53 = *(v41 - 4) - 0x4B6D499041670D8DLL * v35;
        v54 = v53 + v39 + v52;
        v55 = v53 + v45 + v51;
        v34 = v55 + v52;
        v56 = __ROR8__(v55, 44) + v53;
        v57 = (0xB492B66FBE98F273 * __ROR8__(v46, 37)) ^ v40;
        v43 = 0xB492B66FBE98F273 * __ROR8__(v50, 33);
        v35 = v56 + __ROR8__(v54 + v57, 21);
        v58 = v43 + v40 + *v41;
        v39 = v58 + v49 + v47 + v48;
        v40 = __ROR8__(v58 + v49 + v47, 44) + v58 + __ROR8__(v30 + v51 + v58 + v48, 21);
        v41 += 8;
        v32 = v57;
        v44 += 64;
      }
      while (v44);
      v59 = v43
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) ^ ((0x9DDFEA08EB382D69 * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) >> 47));
      v60 = 0x9DDFEA08EB382D69
          * (v59 ^ (v57
                  - 0x4B6D499041670D8DLL * (v30 ^ (v30 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) ^ ((0x9DDFEA08EB382D69 * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) ^ ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) >> 47));
    }
    else
    {
      v6 = *(uint64_t *)((char *)a2 + a3 - 16);
      v7 = *a2 - 0x3C5A37A36834CED9 * (v6 + a3);
      v9 = a2[2];
      v8 = a2[3];
      v10 = __ROR8__(v7 + v8, 52);
      v11 = v7 + a2[1];
      v12 = __ROR8__(v11, 7);
      v13 = v11 + v9;
      v14 = *(uint64_t *)((char *)a2 + a3 - 32) + v9;
      v15 = v12 + __ROR8__(*a2 - 0x3C5A37A36834CED9 * (v6 + a3), 37) + v10 + __ROR8__(v13, 31);
      v16 = *(uint64_t *)((char *)a2 + a3 - 24) + v14 + v6;
      v17 = 0xC3A5C85C97CB3127 * (v16 + *(uint64_t *)((char *)a2 + a3 - 8) + v8 + v15)
          - 0x651E95C4D06FBFB1
          * (v13
           + v8
           + __ROR8__(v14, 37)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 24) + v14, 7)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 8) + v8 + v14, 52)
           + __ROR8__(v16, 31));
      return 0x9AE16A3B2F90404FLL
           * ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) ^ ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) >> 47));
    }
  }
  else if (a3 > 0x10)
  {
    v18 = a2[1];
    v19 = 0xB492B66FBE98F273 * *a2;
    v20 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8), 30) + __ROR8__(v19 - v18, 43);
    v21 = v19 + a3 + __ROR8__(v18 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8);
    v22 = 0x9DDFEA08EB382D69 * ((v20 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a2 + a3 - 16)) ^ v21);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) ^ ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) >> 47));
  }
  else if (a3 < 9)
  {
    if (a3 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a3)
      {
        v63 = (0xC949D7C7509E6557 * (a3 + 4 * *((unsigned __int8 *)a2 + a3 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                       * (*(unsigned __int8 *)a2 | ((unint64_t)*((unsigned __int8 *)a2 + (a3 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v63 ^ (v63 >> 47));
      }
    }
    else
    {
      v61 = *(unsigned int *)((char *)a2 + a3 - 4);
      v62 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a2) + a3) ^ v61);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) ^ ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) >> 47));
    }
  }
  else
  {
    v3 = *(uint64_t *)((char *)a2 + a3 - 8);
    v4 = __ROR8__(v3 + a3, a3);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) >> 47))) ^ v3;
  }
  return result;
}

BOOL google::Demangle(google *this, const char *a2, char *a3)
{
  int v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v13;
  char *v15;
  char v16;
  unsigned __int8 *v17;
  const char *v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;

  v18 = a2;
  v19 = a2;
  v20 = &a2[(int)a3];
  v21 = 0;
  v22 = 0x1FFFFFFFFFFFFLL;
  if (__PAIR64__(*((unsigned __int8 *)this + 1), *(unsigned __int8 *)this) != 0x5A0000005FLL)
    return 0;
  v17 = (unsigned __int8 *)this + 2;
  google::ParseEncoding(&v17);
  if (!v3)
    return 0;
  v4 = v17;
  v5 = *v17;
  if (*v17)
  {
    if (v5 != 64)
    {
      if (v5 == 46)
      {
        v6 = 0;
        v7 = v17 + 2;
        while ((v17[v6 + 1] & 0xDFu) - 65 <= 0x19)
        {
          v8 = v6 + 1;
          do
          {
            v9 = v7[v6];
            v10 = v8;
            ++v6;
            ++v8;
          }
          while ((v9 & 0xFFFFFFDF) - 65 < 0x1A);
          if (v9 != 46 || v7[v6] - 48 > 9)
            break;
          do
            v11 = v17[v10++ + 3];
          while ((v11 - 48) < 0xA);
          v6 = v10 + 2;
          if (v11 != 46)
          {
            if (!v11)
              return HIBYTE(v22) == 0;
            return 0;
          }
        }
      }
      return 0;
    }
    if (BYTE6(v22))
    {
      v13 = 0;
      while (v17[++v13])
        ;
      if ((int)v13 >= 1)
      {
        v15 = (char *)v18;
        v13 = v13;
        do
        {
          if (v15 + 1 >= v20)
            return 0;
          v16 = *v4++;
          *v15 = v16;
          v15 = (char *)++v18;
          --v13;
        }
        while (v13);
        if (!HIBYTE(v22))
          *v15 = 0;
      }
    }
  }
  return HIBYTE(v22) == 0;
}

uint64_t google::MaybeAppend(uint64_t result, char *a2)
{
  int v2;
  uint64_t v3;
  char *v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;
  char v8;

  if (*(_BYTE *)(result + 46))
  {
    v2 = *a2;
    if (*a2)
    {
      v3 = 0;
      do
        v4 = &a2[v3++];
      while (v4[1]);
      if ((int)v3 >= 1)
      {
        if (v2 == 60)
        {
          v5 = *(_BYTE **)(result + 8);
          if (*(_QWORD *)(result + 16) < (unint64_t)v5 && *(v5 - 1) == 60)
          {
            if ((unint64_t)(v5 + 1) >= *(_QWORD *)(result + 24))
            {
              *(_BYTE *)(result + 47) = 1;
            }
            else
            {
              *v5 = 32;
              v6 = (_BYTE *)(*(_QWORD *)(result + 8) + 1);
              *(_QWORD *)(result + 8) = v6;
              if (!*(_BYTE *)(result + 47))
                *v6 = 0;
            }
          }
          v2 = *a2;
        }
        v7 = *(_BYTE **)(result + 8);
        if (v2 == 95 || (v2 & 0xFFFFFFDF) - 65 <= 0x19)
        {
          *(_QWORD *)(result + 32) = v7;
          *(_DWORD *)(result + 40) = v3;
        }
        v3 = v3;
        do
        {
          if ((unint64_t)(v7 + 1) >= *(_QWORD *)(result + 24))
          {
            *(_BYTE *)(result + 47) = 1;
            return result;
          }
          v8 = *a2++;
          *v7 = v8;
          v7 = (_BYTE *)(*(_QWORD *)(result + 8) + 1);
          *(_QWORD *)(result + 8) = v7;
          --v3;
        }
        while (v3);
        if (!*(_BYTE *)(result + 47))
          *v7 = 0;
      }
    }
  }
  return result;
}

__n128 google::ParseEncoding(unsigned __int8 **a1)
{
  char v2;
  __n128 result;
  char v4;
  char v5;
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[30];

  v21 = *(_OWORD *)a1;
  v22 = *((_OWORD *)a1 + 1);
  v23 = *((_OWORD *)a1 + 2);
  if (google::ParseName(a1)
    && (v2 = *((_BYTE *)a1 + 46), *((_BYTE *)a1 + 46) = 0, google::ParseType(a1)))
  {
    while ((google::ParseType(a1) & 1) != 0)
      ;
    *((_BYTE *)a1 + 46) = v2 & 1;
    google::MaybeAppend((uint64_t)a1, "()");
  }
  else
  {
    *(_OWORD *)a1 = v21;
    *((_OWORD *)a1 + 1) = v22;
    *((_OWORD *)a1 + 2) = v23;
    if ((google::ParseName(a1) & 1) == 0)
    {
      v24 = *(_OWORD *)a1;
      *(_OWORD *)v25 = *((_OWORD *)a1 + 1);
      *(_OWORD *)&v25[14] = *(_OWORD *)((char *)a1 + 30);
      v4 = *((_BYTE *)a1 + 46);
      v5 = *((_BYTE *)a1 + 47);
      v6 = *a1;
      if (**a1 != 84
        || (*a1 = v6 + 1, v7 = v6[1] - 73, v7 > 0xD)
        || ((1 << v7) & 0x2C01) == 0
        || (*a1 = v6 + 2, (google::ParseType(a1) & 1) == 0))
      {
        *(_OWORD *)a1 = v24;
        *((_OWORD *)a1 + 1) = *(_OWORD *)v25;
        *(_OWORD *)((char *)a1 + 30) = *(_OWORD *)&v25[14];
        *((_BYTE *)a1 + 46) = v4;
        *((_BYTE *)a1 + 47) = v5;
        v8 = *a1;
        if (**a1 != 84
          || v8[1] != 99
          || (*a1 = v8 + 2, !google::ParseCallOffset((uint64_t)a1))
          || !google::ParseCallOffset((uint64_t)a1)
          || (google::ParseEncoding(a1) & 1) == 0)
        {
          *(_OWORD *)a1 = v24;
          *((_OWORD *)a1 + 1) = *(_OWORD *)v25;
          *(_OWORD *)((char *)a1 + 30) = *(_OWORD *)&v25[14];
          *((_BYTE *)a1 + 46) = v4;
          *((_BYTE *)a1 + 47) = v5;
          v9 = *a1;
          if (**a1 != 71 || v9[1] != 86 || (*a1 = v9 + 2, (google::ParseName(a1) & 1) == 0))
          {
            *(_OWORD *)a1 = v24;
            *((_OWORD *)a1 + 1) = *(_OWORD *)v25;
            *(_OWORD *)((char *)a1 + 30) = *(_OWORD *)&v25[14];
            *((_BYTE *)a1 + 46) = v4;
            *((_BYTE *)a1 + 47) = v5;
            if (**a1 != 84
              || (++*a1, !google::ParseCallOffset((uint64_t)a1))
              || (google::ParseEncoding(a1) & 1) == 0)
            {
              *(_OWORD *)a1 = v24;
              *((_OWORD *)a1 + 1) = *(_OWORD *)v25;
              *(_OWORD *)((char *)a1 + 30) = *(_OWORD *)&v25[14];
              *((_BYTE *)a1 + 46) = v4;
              *((_BYTE *)a1 + 47) = v5;
              v10 = *a1;
              if (**a1 != 84)
                goto LABEL_34;
              if (v10[1] != 67)
                goto LABEL_34;
              *a1 = v10 + 2;
              if (!google::ParseType(a1))
                goto LABEL_34;
              v11 = *a1;
              v12 = **a1;
              if (v12 == 110)
              {
                *a1 = v11 + 1;
                v12 = *++v11;
              }
              if ((v12 - 48) > 9)
                goto LABEL_34;
              v13 = 0;
              do
                v14 = v11[++v13] - 48;
              while (v14 < 0xA);
              if (v13
                && (*a1 = &v11[v13], v11[v13] == 95)
                && (*a1 = &v11[v13 + 1], *((_BYTE *)a1 + 46) = 0, google::ParseType(a1)))
              {
                *((_BYTE *)a1 + 46) = v4 & 1;
              }
              else
              {
LABEL_34:
                *(_OWORD *)a1 = v24;
                *((_OWORD *)a1 + 1) = *(_OWORD *)v25;
                *(_OWORD *)((char *)a1 + 30) = *(_OWORD *)&v25[14];
                *((_BYTE *)a1 + 46) = v4;
                *((_BYTE *)a1 + 47) = v5;
                v15 = *a1;
                if (**a1 != 84
                  || (*a1 = v15 + 1, v16 = v15[1], v16 != 74) && v16 != 70
                  || (*a1 = v15 + 2, (google::ParseType(a1) & 1) == 0))
                {
                  *(_OWORD *)a1 = v24;
                  *((_OWORD *)a1 + 1) = *(_OWORD *)v25;
                  *(_OWORD *)((char *)a1 + 30) = *(_OWORD *)&v25[14];
                  *((_BYTE *)a1 + 46) = v4;
                  *((_BYTE *)a1 + 47) = v5;
                  v17 = *a1;
                  if (**a1 != 71 || v17[1] != 82 || (*a1 = v17 + 2, (google::ParseName(a1) & 1) == 0))
                  {
                    *(_OWORD *)a1 = v24;
                    *((_OWORD *)a1 + 1) = *(_OWORD *)v25;
                    *(_OWORD *)((char *)a1 + 30) = *(_OWORD *)&v25[14];
                    *((_BYTE *)a1 + 46) = v4;
                    *((_BYTE *)a1 + 47) = v5;
                    v18 = *a1;
                    if (**a1 != 71 || v18[1] != 65 || (*a1 = v18 + 2, (google::ParseEncoding(a1) & 1) == 0))
                    {
                      *(_OWORD *)a1 = v24;
                      *((_OWORD *)a1 + 1) = *(_OWORD *)v25;
                      *(_OWORD *)((char *)a1 + 30) = *(_OWORD *)&v25[14];
                      *((_BYTE *)a1 + 46) = v4;
                      *((_BYTE *)a1 + 47) = v5;
                      v19 = *a1;
                      if (**a1 != 84)
                        goto LABEL_49;
                      *a1 = v19 + 1;
                      v20 = v19[1];
                      if (v20 != 118 && v20 != 104)
                        goto LABEL_49;
                      *a1 = v19 + 2;
                      if (!google::ParseCallOffset((uint64_t)a1) || (google::ParseEncoding(a1) & 1) == 0)
                      {
LABEL_49:
                        *(_OWORD *)a1 = v24;
                        *((_OWORD *)a1 + 1) = *(_OWORD *)v25;
                        result = *(__n128 *)&v25[14];
                        *(_OWORD *)((char *)a1 + 30) = *(_OWORD *)&v25[14];
                        *((_BYTE *)a1 + 46) = v4;
                        *((_BYTE *)a1 + 47) = v5;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t google::ParseName(unsigned __int8 **a1)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  char i;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  char **v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  __int16 v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  int v44;
  int v45;
  char **v46;
  const char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char v51;
  unsigned __int8 *v52;
  char v53;
  char v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  unsigned __int8 *v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  unsigned __int8 *v69;
  unsigned __int8 *v70;
  char *v71;
  unsigned __int8 *v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  int v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  char *v79;
  int v80;
  unsigned __int8 *v81;
  char v82;
  unsigned __int8 *v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  int v86;
  uint64_t v87;
  unsigned int v88;
  unsigned __int8 *v89;
  char v90;
  char v91;
  int v92;
  char v93;
  uint64_t v94;
  unsigned __int8 v95;
  int v96;
  uint64_t v97;
  unsigned __int8 *v98;
  unsigned __int8 *v99;
  int v100;
  uint64_t v101;
  unsigned int v102;
  unsigned __int8 *v103;
  int v104;
  unsigned int v105;
  char v106;
  unsigned __int8 *v107;
  int v108;
  char v109;
  int v110;
  char v111;
  char v112;
  unsigned __int8 *v113;
  char v114;
  uint64_t result;
  __int16 v116;
  __int16 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  _BYTE v131[28];
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  _BYTE v144[28];
  _BYTE v145[30];
  __int128 v146;
  __int128 v147;
  _BYTE v148[30];
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;

  v130 = *(_OWORD *)a1;
  *(_OWORD *)v131 = *((_OWORD *)a1 + 1);
  *(_OWORD *)&v131[12] = *(_OWORD *)((char *)a1 + 28);
  v2 = *((_WORD *)a1 + 22);
  v3 = *((_WORD *)a1 + 23);
  v4 = (uint64_t)*a1;
  if (**a1 != 78)
    goto LABEL_199;
  v116 = *((_WORD *)a1 + 23);
  v5 = v4 + 1;
  *a1 = (unsigned __int8 *)(v4 + 1);
  *((_WORD *)a1 + 22) = 0;
  v6 = *(unsigned __int8 *)(v4 + 1);
  if (v6 == 114)
  {
    v5 = v4 + 2;
    *a1 = (unsigned __int8 *)(v4 + 2);
    v6 = *(unsigned __int8 *)(v4 + 2);
    if (v6 != 86)
      goto LABEL_4;
LABEL_193:
    *a1 = (unsigned __int8 *)(v5 + 1);
    v96 = *(unsigned __int8 *)++v5;
    v117 = v2;
    if (v96 != 75)
      goto LABEL_6;
    goto LABEL_5;
  }
  if (v6 == 86)
    goto LABEL_193;
LABEL_4:
  v117 = v2;
  if (v6 == 75)
LABEL_5:
    *a1 = (unsigned __int8 *)(v5 + 1);
LABEL_6:
  LOWORD(v7) = 0;
  for (i = 0; ; i = 0)
  {
    while (1)
    {
      if ((__int16)v7 < 1 || !*((_BYTE *)a1 + 46))
      {
LABEL_12:
        v12 = (uint64_t)*a1;
        if (**a1 != 84)
          goto LABEL_17;
        goto LABEL_13;
      }
      v9 = a1[1];
      if (v9 + 1 >= a1[3] || (*v9 = 58, v10 = a1[1], a1[1] = v10 + 1, v10 + 2 >= a1[3]))
      {
        *((_BYTE *)a1 + 47) = 1;
        v12 = (uint64_t)*a1;
        if (**a1 != 84)
          goto LABEL_17;
      }
      else
      {
        v10[1] = 58;
        v11 = a1[1] + 1;
        a1[1] = v11;
        if (*((_BYTE *)a1 + 47))
          goto LABEL_12;
        *v11 = 0;
        v12 = (uint64_t)*a1;
        if (**a1 != 84)
        {
LABEL_17:
          v132 = *(_OWORD *)a1;
          v142 = *((_OWORD *)a1 + 1);
          v152 = *((_OWORD *)a1 + 2);
          goto LABEL_18;
        }
      }
LABEL_13:
      v13 = (unsigned __int8 *)(v12 + 1);
      if (*(_BYTE *)(v12 + 1) == 95)
      {
        *a1 = (unsigned __int8 *)(v12 + 2);
        if (!*((_BYTE *)a1 + 46))
          goto LABEL_189;
        goto LABEL_63;
      }
      v132 = *(_OWORD *)a1;
      v142 = *((_OWORD *)a1 + 1);
      v152 = *((_OWORD *)a1 + 2);
      *a1 = v13;
      v32 = *v13;
      if (v32 == 110)
      {
        v13 = (unsigned __int8 *)(v12 + 2);
        *a1 = (unsigned __int8 *)(v12 + 2);
        v32 = *(unsigned __int8 *)(v12 + 2);
      }
      if ((v32 - 48) <= 9)
      {
        v33 = 0;
        do
          v34 = v13[++v33] - 48;
        while (v34 < 0xA);
        if (v33)
        {
          *a1 = &v13[v33];
          if (v13[v33] == 95)
          {
            *a1 = &v13[v33 + 1];
            if (!*((_BYTE *)a1 + 46))
              goto LABEL_189;
LABEL_63:
            v41 = a1[1];
            if (v41 + 1 >= a1[3])
            {
              *((_BYTE *)a1 + 47) = 1;
            }
            else
            {
              *v41 = 63;
              v42 = a1[1] + 1;
              a1[1] = v42;
              if (!*((_BYTE *)a1 + 47))
                *v42 = 0;
            }
            goto LABEL_189;
          }
        }
      }
LABEL_18:
      *(_OWORD *)a1 = v132;
      *((_OWORD *)a1 + 1) = v142;
      *((_OWORD *)a1 + 2) = v152;
      v14 = (uint64_t)*a1;
      if (**a1 == 83)
      {
        v15 = (unsigned __int8 *)(v14 + 1);
        if (*(_BYTE *)(v14 + 1) == 95)
        {
          *a1 = (unsigned __int8 *)(v14 + 2);
          if (!*((_BYTE *)a1 + 46))
            goto LABEL_189;
          goto LABEL_63;
        }
        v133 = *(_OWORD *)a1;
        v143 = *((_OWORD *)a1 + 1);
        v153 = *((_OWORD *)a1 + 2);
        *a1 = v15;
        v35 = *v15;
        if (*v15)
        {
          v36 = 0;
          while (1)
          {
            v37 = v35 - 48;
            v38 = v35 - 65;
            if (v37 >= 0xA && v38 > 0x19)
              break;
            v35 = *(unsigned __int8 *)(v14 + 2 + v36++);
            if (!v35)
              goto LABEL_61;
          }
          if (!v36)
            goto LABEL_23;
LABEL_61:
          v40 = (unsigned __int8 *)(v14 + v36 + 1);
          *a1 = v40;
          if (*v40 == 95)
          {
            *a1 = v40 + 1;
            if (!*((_BYTE *)a1 + 46))
              goto LABEL_189;
            goto LABEL_63;
          }
        }
      }
      else
      {
        v133 = *(_OWORD *)a1;
        v143 = *((_OWORD *)a1 + 1);
        v153 = *((_OWORD *)a1 + 2);
      }
LABEL_23:
      *(_OWORD *)a1 = v133;
      *((_OWORD *)a1 + 1) = v143;
      *((_OWORD *)a1 + 2) = v153;
      v16 = (uint64_t)*a1;
      if (**a1 == 83)
      {
        *a1 = (unsigned __int8 *)(v16 + 1);
        v18 = *(unsigned __int8 *)(v16 + 1) - 97;
        v17 = &google::kSubstitutionList;
        switch(v18)
        {
          case 0:
            v17 = off_24F97F6F0;
            if (*((_BYTE *)a1 + 46))
              goto LABEL_119;
            goto LABEL_125;
          case 1:
            v17 = off_24F97F700;
            if (!*((_BYTE *)a1 + 46))
              goto LABEL_125;
            goto LABEL_119;
          case 3:
            v17 = off_24F97F740;
            if (!*((_BYTE *)a1 + 46))
              goto LABEL_125;
            goto LABEL_119;
          case 8:
            v17 = off_24F97F720;
            if (!*((_BYTE *)a1 + 46))
              goto LABEL_125;
            goto LABEL_119;
          case 14:
            v17 = off_24F97F730;
            goto LABEL_118;
          case 18:
            v17 = off_24F97F710;
            if (!*((_BYTE *)a1 + 46))
              goto LABEL_125;
            goto LABEL_119;
          case 19:
LABEL_118:
            if (*((_BYTE *)a1 + 46))
            {
LABEL_119:
              v67 = a1[1];
              a1[4] = v67;
              *((_DWORD *)a1 + 10) = 3;
              if (v67 + 1 >= a1[3]
                || (*v67 = 115, v68 = a1[1], a1[1] = v68 + 1, v68 + 2 >= a1[3])
                || (v68[1] = 116, v69 = a1[1], a1[1] = v69 + 1, v69 + 2 >= a1[3]))
              {
                *((_BYTE *)a1 + 47) = 1;
              }
              else
              {
                v69[1] = 100;
                v70 = a1[1] + 1;
                a1[1] = v70;
                if (!*((_BYTE *)a1 + 47))
                  *v70 = 0;
              }
            }
LABEL_125:
            v71 = v17[1];
            if (!*v71 || !*((_BYTE *)a1 + 46))
              goto LABEL_187;
            v72 = a1[1];
            if (v72 + 1 >= a1[3] || (*v72 = 58, v73 = a1[1], a1[1] = v73 + 1, v73 + 2 >= a1[3]))
            {
              *((_BYTE *)a1 + 47) = 1;
            }
            else
            {
              v73[1] = 58;
              v74 = a1[1] + 1;
              a1[1] = v74;
              if (!*((_BYTE *)a1 + 47))
                *v74 = 0;
            }
            if (!*((_BYTE *)a1 + 46))
              goto LABEL_187;
            v75 = *v71;
            if (!*v71)
              goto LABEL_187;
            v76 = 0;
            v77 = 1;
            do
            {
              v78 = v77;
              v79 = &v71[v76++];
              v80 = v79[1];
              v77 = v78 + 1;
            }
            while (v80);
            if ((int)v76 < 1)
              goto LABEL_187;
            v81 = a1[1];
            if (v75 == 60)
            {
              if (a1[2] < v81 && *(v81 - 1) == 60)
              {
                if (v81 + 1 >= a1[3])
                {
                  *((_BYTE *)a1 + 47) = 1;
                }
                else
                {
                  *v81 = 32;
                  v81 = a1[1] + 1;
                  a1[1] = v81;
                  if (!*((_BYTE *)a1 + 47))
                  {
                    *v81 = 0;
                    v81 = a1[1];
                  }
                }
              }
              v75 = *v71;
            }
            if (v75 == 95 || (v75 & 0xFFFFFFDF) - 65 <= 0x19)
            {
              a1[4] = v81;
              *((_DWORD *)a1 + 10) = v76;
            }
            v94 = v78;
            break;
          default:
            goto LABEL_27;
        }
        do
        {
          if (v81 + 1 >= a1[3])
          {
            *((_BYTE *)a1 + 47) = 1;
            goto LABEL_187;
          }
          v95 = *v71++;
          *v81 = v95;
          v81 = a1[1] + 1;
          a1[1] = v81;
          --v94;
        }
        while (v94);
        if (!*((_BYTE *)a1 + 47))
          *v81 = 0;
LABEL_187:
        v50 = (uint64_t)(*a1 + 1);
LABEL_188:
        *a1 = (unsigned __int8 *)v50;
        goto LABEL_189;
      }
LABEL_27:
      *(_OWORD *)a1 = v133;
      *((_OWORD *)a1 + 1) = v143;
      *((_OWORD *)a1 + 2) = v153;
      v19 = (uint64_t)*a1;
      if (**a1 && *(_BYTE *)(v19 + 1))
      {
        v134 = *(_OWORD *)a1;
        *(_OWORD *)v144 = *((_OWORD *)a1 + 1);
        *(_OWORD *)&v144[12] = *(_OWORD *)((char *)a1 + 28);
        v20 = *((_WORD *)a1 + 22);
        v21 = *((_WORD *)a1 + 23);
        if (**a1 == 99 && *(_BYTE *)(v19 + 1) == 118)
        {
          *a1 = (unsigned __int8 *)(v19 + 2);
          if ((_BYTE)v21)
          {
            v22 = a1[1];
            a1[4] = v22;
            *((_DWORD *)a1 + 10) = 9;
            if (v22 + 1 >= a1[3])
              goto LABEL_69;
            *v22 = 111;
            v23 = a1[1];
            a1[1] = v23 + 1;
            if (v23 + 2 >= a1[3])
              goto LABEL_69;
            v23[1] = 112;
            v24 = a1[1];
            a1[1] = v24 + 1;
            if (v24 + 2 >= a1[3])
              goto LABEL_69;
            v24[1] = 101;
            v25 = a1[1];
            a1[1] = v25 + 1;
            if (v25 + 2 >= a1[3])
              goto LABEL_69;
            v25[1] = 114;
            v26 = a1[1];
            a1[1] = v26 + 1;
            if (v26 + 2 >= a1[3])
              goto LABEL_69;
            v26[1] = 97;
            v27 = a1[1];
            a1[1] = v27 + 1;
            if (v27 + 2 >= a1[3])
              goto LABEL_69;
            v27[1] = 116;
            v28 = a1[1];
            a1[1] = v28 + 1;
            if (v28 + 2 >= a1[3]
              || (v28[1] = 111, v29 = a1[1], a1[1] = v29 + 1, v29 + 2 >= a1[3])
              || (v29[1] = 114, v30 = a1[1], a1[1] = v30 + 1, v30 + 2 >= a1[3]))
            {
LABEL_69:
              *((_BYTE *)a1 + 47) = 1;
            }
            else
            {
              v30[1] = 32;
              v31 = a1[1] + 1;
              a1[1] = v31;
              if (!*((_BYTE *)a1 + 47))
                *v31 = 0;
            }
          }
          *((_WORD *)a1 + 22) = 0;
          if (google::ParseType(a1))
          {
            *((_WORD *)a1 + 22) = v20;
            goto LABEL_189;
          }
        }
        *(_OWORD *)a1 = v134;
        *((_OWORD *)a1 + 1) = *(_OWORD *)v144;
        *(_OWORD *)((char *)a1 + 28) = *(_OWORD *)&v144[12];
        *((_WORD *)a1 + 22) = v20;
        *((_WORD *)a1 + 23) = v21;
        v43 = *a1;
        if (**a1 == 118)
        {
          *a1 = v43 + 1;
          if (v43[1] - 48 <= 9)
          {
            *a1 = v43 + 2;
            if ((google::ParseSourceName(a1) & 1) != 0)
              goto LABEL_189;
          }
        }
        *(_OWORD *)a1 = v134;
        *((_OWORD *)a1 + 1) = *(_OWORD *)v144;
        *(_OWORD *)((char *)a1 + 28) = *(_OWORD *)&v144[12];
        *((_WORD *)a1 + 22) = v20;
        *((_WORD *)a1 + 23) = v21;
        v44 = **a1;
        if ((v44 - 97) <= 0x19)
        {
          v45 = (*a1)[1];
          if ((v45 & 0xFFFFFFDF) - 65 <= 0x19)
          {
            v46 = off_24F97F8D0;
            v47 = "nw";
            while (v44 != *(unsigned __int8 *)v47 || v45 != *((unsigned __int8 *)v47 + 1))
            {
              v48 = *v46;
              v46 += 2;
              v47 = v48;
              if (!v48)
                goto LABEL_84;
            }
            google::MaybeAppend((uint64_t)a1, "operator");
            v49 = *(v46 - 1);
            if (*v49 - 97 <= 0x19)
              google::MaybeAppend((uint64_t)a1, " ");
            google::MaybeAppend((uint64_t)a1, v49);
            v50 = (uint64_t)(*a1 + 2);
            goto LABEL_188;
          }
        }
      }
LABEL_84:
      if ((google::ParseCtorDtorName((uint64_t)a1) & 1) != 0)
        goto LABEL_189;
      v51 = google::ParseSourceName(a1);
      v52 = *a1;
      if ((v51 & 1) != 0)
        goto LABEL_86;
      v118 = *(_OWORD *)a1;
      v122 = *((_OWORD *)a1 + 1);
      v126 = *((_OWORD *)a1 + 2);
      if (*v52 == 76)
      {
        *a1 = v52 + 1;
        if (google::ParseSourceName(a1))
        {
          v136 = *(_OWORD *)a1;
          v146 = *((_OWORD *)a1 + 1);
          v154 = *((_OWORD *)a1 + 2);
          v55 = *a1;
          if (**a1 != 95)
            goto LABEL_145;
          v56 = v55 + 1;
          *a1 = v55 + 1;
          v57 = v55[1];
          if (v57 == 110)
          {
            v56 = v55 + 2;
            *a1 = v55 + 2;
            v57 = v55[2];
          }
          if ((v57 - 48) > 9)
            goto LABEL_145;
          v58 = 0;
          do
            v59 = v56[++v58] - 48;
          while (v59 < 0xA);
          if (v58)
          {
            v52 = &v56[v58];
            *a1 = v52;
          }
          else
          {
LABEL_145:
            *(_OWORD *)a1 = v136;
            *((_OWORD *)a1 + 1) = v146;
            *((_OWORD *)a1 + 2) = v154;
            v52 = *a1;
          }
LABEL_86:
          v135 = *(_OWORD *)a1;
          *(_OWORD *)v145 = *((_OWORD *)a1 + 1);
          *(_OWORD *)&v145[14] = *(_OWORD *)((char *)a1 + 30);
          v53 = *((_BYTE *)a1 + 46);
          v54 = *((_BYTE *)a1 + 47);
          *((_BYTE *)a1 + 46) = 0;
          if (*v52 != 66)
            goto LABEL_155;
          *a1 = v52 + 1;
          if (!google::ParseSourceName(a1))
            goto LABEL_155;
          do
          {
            if (**a1 != 66)
              break;
            ++*a1;
          }
          while ((google::ParseSourceName(a1) & 1) != 0);
          goto LABEL_90;
        }
      }
      *(_OWORD *)a1 = v118;
      *((_OWORD *)a1 + 1) = v122;
      *((_OWORD *)a1 + 2) = v126;
      v119 = *(_OWORD *)a1;
      v123 = *((_OWORD *)a1 + 1);
      v127 = *((_OWORD *)a1 + 2);
      v60 = *a1;
      if (**a1 != 83 || v60[1] != 116)
        break;
      *a1 = v60 + 2;
      if (*((_BYTE *)a1 + 46))
      {
        v61 = a1[1];
        a1[4] = v61;
        *((_DWORD *)a1 + 10) = 5;
        if (v61 + 1 >= a1[3])
          goto LABEL_146;
        *v61 = 115;
        v62 = a1[1];
        a1[1] = v62 + 1;
        if (v62 + 2 >= a1[3])
          goto LABEL_146;
        v62[1] = 116;
        v63 = a1[1];
        a1[1] = v63 + 1;
        if (v63 + 2 >= a1[3]
          || (v63[1] = 100, v64 = a1[1], a1[1] = v64 + 1, v64 + 2 >= a1[3])
          || (v64[1] = 58, v65 = a1[1], a1[1] = v65 + 1, v65 + 2 >= a1[3]))
        {
LABEL_146:
          *((_BYTE *)a1 + 47) = 1;
        }
        else
        {
          v65[1] = 58;
          v66 = a1[1] + 1;
          a1[1] = v66;
          if (!*((_BYTE *)a1 + 47))
            *v66 = 0;
        }
      }
      if ((google::ParseOperatorName(a1) & 1) == 0 && (google::ParseCtorDtorName((uint64_t)a1) & 1) == 0)
      {
        v82 = google::ParseSourceName(a1);
        v83 = *a1;
        if ((v82 & 1) != 0)
          goto LABEL_150;
        if (*v83 == 76)
        {
          *a1 = v83 + 1;
          if (google::ParseSourceName(a1))
          {
            v137 = *(_OWORD *)a1;
            v147 = *((_OWORD *)a1 + 1);
            v155 = *((_OWORD *)a1 + 2);
            v84 = *a1;
            if (**a1 != 95)
              goto LABEL_191;
            v85 = v84 + 1;
            *a1 = v84 + 1;
            v86 = v84[1];
            if (v86 == 110)
            {
              v85 = v84 + 2;
              *a1 = v84 + 2;
              v86 = v84[2];
            }
            if ((v86 - 48) > 9)
              goto LABEL_191;
            v87 = 0;
            do
              v88 = v85[++v87] - 48;
            while (v88 < 0xA);
            if (v87)
            {
              v83 = &v85[v87];
              *a1 = v83;
            }
            else
            {
LABEL_191:
              *(_OWORD *)a1 = v137;
              *((_OWORD *)a1 + 1) = v147;
              *((_OWORD *)a1 + 2) = v155;
              v83 = *a1;
            }
LABEL_150:
            v135 = *(_OWORD *)a1;
            *(_OWORD *)v145 = *((_OWORD *)a1 + 1);
            *(_OWORD *)&v145[14] = *(_OWORD *)((char *)a1 + 30);
            v53 = *((_BYTE *)a1 + 46);
            v54 = *((_BYTE *)a1 + 47);
            *((_BYTE *)a1 + 46) = 0;
            if (*v83 != 66 || (*a1 = v83 + 1, !google::ParseSourceName(a1)))
            {
LABEL_155:
              *(_OWORD *)a1 = v135;
              *((_OWORD *)a1 + 1) = *(_OWORD *)v145;
              *(_OWORD *)((char *)a1 + 30) = *(_OWORD *)&v145[14];
              *((_BYTE *)a1 + 46) = v53;
              *((_BYTE *)a1 + 47) = v54;
              goto LABEL_189;
            }
            do
            {
              if (**a1 != 66)
                break;
              ++*a1;
            }
            while ((google::ParseSourceName(a1) & 1) != 0);
LABEL_90:
            *((_BYTE *)a1 + 46) = v53 & 1;
            goto LABEL_189;
          }
        }
        break;
      }
LABEL_189:
      v7 = *((__int16 *)a1 + 22);
      i = 1;
      if ((v7 & 0x80000000) == 0)
      {
        LOWORD(v7) = v7 + 1;
        *((_WORD *)a1 + 22) = v7;
      }
    }
    *(_OWORD *)a1 = v119;
    *((_OWORD *)a1 + 1) = v123;
    *((_OWORD *)a1 + 2) = v127;
    if (*((__int16 *)a1 + 22) >= 1)
    {
      if (*((_BYTE *)a1 + 46))
      {
        v89 = a1[1] - 2;
        if (a1[2] <= v89)
        {
          a1[1] = v89;
          *v89 = 0;
        }
      }
    }
    if ((i & 1) == 0)
      goto LABEL_196;
    v138 = *(_OWORD *)a1;
    *(_OWORD *)v148 = *((_OWORD *)a1 + 1);
    *(_OWORD *)&v148[14] = *(_OWORD *)((char *)a1 + 30);
    v90 = *((_BYTE *)a1 + 46);
    v91 = *((_BYTE *)a1 + 47);
    *((_BYTE *)a1 + 46) = 0;
    if (**a1 != 73)
      break;
    ++*a1;
    google::ParseTemplateArg(a1);
    if (!v92)
      break;
    do
      google::ParseTemplateArg(a1);
    while ((v93 & 1) != 0);
    if (**a1 != 69)
      break;
    ++*a1;
    *((_BYTE *)a1 + 46) = v90 & 1;
    google::MaybeAppend((uint64_t)a1, "<>");
    LOWORD(v7) = *((_WORD *)a1 + 22);
  }
  *(_OWORD *)a1 = v138;
  *((_OWORD *)a1 + 1) = *(_OWORD *)v148;
  *(_OWORD *)((char *)a1 + 30) = *(_OWORD *)&v148[14];
  *((_BYTE *)a1 + 46) = v90;
  *((_BYTE *)a1 + 47) = v91;
LABEL_196:
  v2 = v117;
  *((_WORD *)a1 + 22) = v117;
  v3 = v116;
  if (**a1 == 69)
  {
    v97 = (uint64_t)(*a1 + 1);
    goto LABEL_198;
  }
LABEL_199:
  *(_OWORD *)a1 = v130;
  *((_OWORD *)a1 + 1) = *(_OWORD *)v131;
  *(_OWORD *)((char *)a1 + 28) = *(_OWORD *)&v131[12];
  *((_WORD *)a1 + 22) = v2;
  *((_WORD *)a1 + 23) = v3;
  v120 = *(_OWORD *)a1;
  v124 = *((_OWORD *)a1 + 1);
  v128 = *((_OWORD *)a1 + 2);
  if (**a1 == 90)
  {
    ++*a1;
    if (google::ParseEncoding(a1))
    {
      if (**a1 == 69)
      {
        ++*a1;
        google::MaybeAppend((uint64_t)a1, "::");
        if (google::ParseName(a1))
        {
          v139 = *(_OWORD *)a1;
          v149 = *((_OWORD *)a1 + 1);
          v156 = *((_OWORD *)a1 + 2);
          v98 = *a1;
          if (**a1 == 95)
          {
            v99 = v98 + 1;
            *a1 = v98 + 1;
            v100 = v98[1];
            if (v100 == 110)
            {
              v99 = v98 + 2;
              *a1 = v98 + 2;
              v100 = v98[2];
            }
            if ((v100 - 48) <= 9)
            {
              v101 = 0;
              do
                v102 = v99[++v101] - 48;
              while (v102 < 0xA);
              goto LABEL_220;
            }
          }
          goto LABEL_237;
        }
      }
    }
  }
  *(_OWORD *)a1 = v120;
  *((_OWORD *)a1 + 1) = v124;
  *((_OWORD *)a1 + 2) = v128;
  if (**a1 == 90)
  {
    ++*a1;
    if (google::ParseEncoding(a1))
    {
      v103 = *a1;
      if (**a1 == 69 && v103[1] == 115)
      {
        *a1 = v103 + 2;
        v139 = *(_OWORD *)a1;
        v149 = *((_OWORD *)a1 + 1);
        v156 = *((_OWORD *)a1 + 2);
        if (v103[2] != 95)
          goto LABEL_237;
        v99 = v103 + 3;
        *a1 = v103 + 3;
        v104 = v103[3];
        if (v104 == 110)
        {
          v99 = v103 + 4;
          *a1 = v103 + 4;
          v104 = v103[4];
        }
        if ((v104 - 48) > 9)
          goto LABEL_237;
        v101 = 0;
        do
          v105 = v99[++v101] - 48;
        while (v105 < 0xA);
LABEL_220:
        if (v101)
        {
          v97 = (uint64_t)&v99[v101];
LABEL_198:
          *a1 = (unsigned __int8 *)v97;
        }
        else
        {
LABEL_237:
          *(_OWORD *)a1 = v139;
          *((_OWORD *)a1 + 1) = v149;
          *((_OWORD *)a1 + 2) = v156;
        }
        return 1;
      }
    }
  }
  *(_OWORD *)a1 = v120;
  *((_OWORD *)a1 + 1) = v124;
  *((_OWORD *)a1 + 2) = v128;
  v121 = *(_OWORD *)a1;
  v125 = *((_OWORD *)a1 + 1);
  v129 = *((_OWORD *)a1 + 2);
  google::ParseUnqualifiedName((uint64_t)a1);
  if ((v106 & 1) != 0)
    goto LABEL_230;
  v140 = *(_OWORD *)a1;
  v150 = *((_OWORD *)a1 + 1);
  v157 = *((_OWORD *)a1 + 2);
  v107 = *a1;
  if (**a1 == 83 && v107[1] == 116)
  {
    *a1 = v107 + 2;
    google::MaybeAppend((uint64_t)a1, "std::");
    google::ParseUnqualifiedName((uint64_t)a1);
    if (v108)
      goto LABEL_230;
  }
  *(_OWORD *)a1 = v140;
  *((_OWORD *)a1 + 1) = v150;
  *((_OWORD *)a1 + 2) = v157;
  if (google::ParseSubstitution((uint64_t)a1))
  {
LABEL_230:
    v109 = *((_BYTE *)a1 + 46);
    *((_BYTE *)a1 + 46) = 0;
    if (**a1 == 73)
    {
      ++*a1;
      google::ParseTemplateArg(a1);
      if (v110)
      {
        do
          google::ParseTemplateArg(a1);
        while ((v111 & 1) != 0);
        if (**a1 == 69)
        {
          ++*a1;
          *((_BYTE *)a1 + 46) = v109 & 1;
          google::MaybeAppend((uint64_t)a1, "<>");
          return 1;
        }
      }
    }
  }
  *(_OWORD *)a1 = v121;
  *((_OWORD *)a1 + 1) = v125;
  *((_OWORD *)a1 + 2) = v129;
  google::ParseUnqualifiedName((uint64_t)a1);
  if ((v112 & 1) != 0)
    return 1;
  v141 = *(_OWORD *)a1;
  v151 = *((_OWORD *)a1 + 1);
  v158 = *((_OWORD *)a1 + 2);
  v113 = *a1;
  if (**a1 == 83 && v113[1] == 116)
  {
    *a1 = v113 + 2;
    google::MaybeAppend((uint64_t)a1, "std::");
    google::ParseUnqualifiedName((uint64_t)a1);
    if ((v114 & 1) != 0)
      return 1;
  }
  result = 0;
  *(_OWORD *)a1 = v141;
  *((_OWORD *)a1 + 1) = v151;
  *((_OWORD *)a1 + 2) = v158;
  return result;
}

__n128 google::ParseTemplateArgs(uint64_t a1)
{
  char v2;
  char v3;
  __n128 result;
  __int128 v5;
  _BYTE v6[30];

  v5 = *(_OWORD *)a1;
  *(_OWORD *)v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v6[14] = *(_OWORD *)(a1 + 30);
  v2 = *(_BYTE *)(a1 + 46);
  v3 = *(_BYTE *)(a1 + 47);
  *(_BYTE *)(a1 + 46) = 0;
  if (**(_BYTE **)a1 != 73)
    goto LABEL_6;
  ++*(_QWORD *)a1;
  if (!google::ParseTemplateArg(a1))
    goto LABEL_6;
  while ((google::ParseTemplateArg(a1) & 1) != 0)
    ;
  if (**(_BYTE **)a1 == 69)
  {
    ++*(_QWORD *)a1;
    *(_BYTE *)(a1 + 46) = v2 & 1;
    google::MaybeAppend(a1, "<>");
  }
  else
  {
LABEL_6:
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v6;
    result = *(__n128 *)&v6[14];
    *(_OWORD *)(a1 + 30) = *(_OWORD *)&v6[14];
    *(_BYTE *)(a1 + 46) = v2;
    *(_BYTE *)(a1 + 47) = v3;
  }
  return result;
}

uint64_t google::ParseTemplateParam(uint64_t a1)
{
  _BYTE *v1;
  unsigned __int8 *v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v1 = *(_BYTE **)a1;
  if (**(_BYTE **)a1 == 84)
  {
    v2 = v1 + 1;
    if (v1[1] == 95)
    {
      v3 = (uint64_t)(v1 + 2);
LABEL_4:
      *(_QWORD *)a1 = v3;
      google::MaybeAppend(a1, "?");
      return 1;
    }
    v8 = *(_OWORD *)a1;
    v9 = *(_OWORD *)(a1 + 16);
    v10 = *(_OWORD *)(a1 + 32);
    *(_QWORD *)a1 = v2;
    v5 = *v2;
    if (v5 == 110)
    {
      v2 = v1 + 2;
      *(_QWORD *)a1 = v1 + 2;
      v5 = v1[2];
    }
    if ((v5 - 48) <= 9)
    {
      v6 = 0;
      do
        v7 = v2[++v6] - 48;
      while (v7 < 0xA);
      if (v6)
      {
        *(_QWORD *)a1 = &v2[v6];
        if (v2[v6] == 95)
        {
          v3 = (uint64_t)&v2[v6 + 1];
          goto LABEL_4;
        }
      }
    }
  }
  else
  {
    v8 = *(_OWORD *)a1;
    v9 = *(_OWORD *)(a1 + 16);
    v10 = *(_OWORD *)(a1 + 32);
  }
  *(_OWORD *)a1 = v8;
  *(_OWORD *)(a1 + 16) = v9;
  *(_OWORD *)(a1 + 32) = v10;
  return 0;
}

uint64_t google::ParseSubstitution(uint64_t a1)
{
  _BYTE *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t result;
  _BYTE *v6;
  char **v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  _BYTE *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v2 = *(_BYTE **)a1;
  if (**(_BYTE **)a1 == 83)
  {
    v3 = v2 + 1;
    if (v2[1] == 95)
    {
      v4 = v2 + 2;
LABEL_4:
      *(_QWORD *)a1 = v4;
      google::MaybeAppend(a1, "?");
      return 1;
    }
    v15 = *(_OWORD *)a1;
    v16 = *(_OWORD *)(a1 + 16);
    v17 = *(_OWORD *)(a1 + 32);
    *(_QWORD *)a1 = v3;
    v8 = *v3;
    if (*v3)
    {
      v9 = 0;
      while (1)
      {
        v10 = v8 - 48;
        v11 = v8 - 65;
        if (v10 >= 0xA && v11 > 0x19)
          break;
        v8 = v2[v9++ + 2];
        if (!v8)
          goto LABEL_19;
      }
      if (!v9)
        goto LABEL_6;
LABEL_19:
      v13 = &v2[v9 + 1];
      *(_QWORD *)a1 = v13;
      if (*v13 == 95)
      {
        v4 = v13 + 1;
        goto LABEL_4;
      }
    }
  }
  else
  {
    v15 = *(_OWORD *)a1;
    v16 = *(_OWORD *)(a1 + 16);
    v17 = *(_OWORD *)(a1 + 32);
  }
LABEL_6:
  *(_OWORD *)a1 = v15;
  *(_OWORD *)(a1 + 16) = v16;
  *(_OWORD *)(a1 + 32) = v17;
  v6 = *(_BYTE **)a1;
  if (**(_BYTE **)a1 == 83)
  {
    *(_QWORD *)a1 = v6 + 1;
    v7 = &google::kSubstitutionList;
    switch(v6[1])
    {
      case 'a':
        v7 = off_24F97F6F0;
        break;
      case 'b':
        v7 = off_24F97F700;
        break;
      case 'd':
        v7 = off_24F97F740;
        break;
      case 'i':
        v7 = off_24F97F720;
        break;
      case 'o':
        v7 = off_24F97F730;
        break;
      case 's':
        v7 = off_24F97F710;
        break;
      case 't':
        break;
      default:
        goto LABEL_9;
    }
    google::MaybeAppend(a1, "std");
    v14 = v7[1];
    if (*v14)
    {
      google::MaybeAppend(a1, "::");
      google::MaybeAppend(a1, v14);
    }
    ++*(_QWORD *)a1;
    return 1;
  }
  else
  {
LABEL_9:
    result = 0;
    *(_OWORD *)a1 = v15;
    *(_OWORD *)(a1 + 16) = v16;
    *(_OWORD *)(a1 + 32) = v17;
  }
  return result;
}

__n128 google::ParseTemplateArg(unsigned __int8 **a1)
{
  __n128 result;
  uint64_t v3;
  char v4;
  int v5;
  __n128 v6;
  __int128 v7;
  __n128 v8;

  v6 = *(__n128 *)a1;
  v7 = *((_OWORD *)a1 + 1);
  v8 = *((__n128 *)a1 + 2);
  if (**a1 - 73 <= 1)
  {
    ++*a1;
    while ((google::ParseTemplateArg(a1) & 1) != 0)
      ;
    v3 = (uint64_t)*a1;
    if (**a1 == 69)
      goto LABEL_5;
  }
  *(__n128 *)a1 = v6;
  *((_OWORD *)a1 + 1) = v7;
  *((__n128 *)a1 + 2) = v8;
  if ((google::ParseType(a1) & 1) == 0)
  {
    result.n128_u64[0] = google::ParseExprPrimary((__n128 *)a1).n128_u64[0];
    if ((v4 & 1) == 0)
    {
      *(__n128 *)a1 = v6;
      *((_OWORD *)a1 + 1) = v7;
      *((__n128 *)a1 + 2) = v8;
      if (**a1 == 88)
      {
        ++*a1;
        result.n128_u64[0] = google::ParseExpression((uint64_t)a1).n128_u64[0];
        if (v5)
        {
          v3 = (uint64_t)*a1;
          if (**a1 == 69)
          {
LABEL_5:
            *a1 = (unsigned __int8 *)(v3 + 1);
            return result;
          }
        }
      }
      *(__n128 *)a1 = v6;
      *((_OWORD *)a1 + 1) = v7;
      result = v8;
      *((__n128 *)a1 + 2) = v8;
    }
  }
  return result;
}

uint64_t google::ParseType(unsigned __int8 **a1)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned __int8 *v15;
  int v16;
  char v17;
  unsigned __int8 *v18;
  char v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  char v25;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v27 = *(_OWORD *)a1;
  v28 = *((_OWORD *)a1 + 1);
  v29 = *((_OWORD *)a1 + 2);
  v2 = (uint64_t)*a1;
  v3 = **a1;
  if (v3 == 114)
  {
    *a1 = (unsigned __int8 *)(v2 + 1);
    v4 = *(unsigned __int8 *)++v2;
    if (v4 != 86)
      goto LABEL_3;
LABEL_6:
    *a1 = (unsigned __int8 *)(v2 + 1);
    v5 = *(unsigned __int8 *)++v2;
    if (v5 != 75)
      goto LABEL_8;
    goto LABEL_7;
  }
  v4 = **a1;
  if (v3 == 86)
    goto LABEL_6;
LABEL_3:
  v5 = v4;
  if (v4 == 75)
LABEL_7:
    *a1 = (unsigned __int8 *)(v2 + 1);
LABEL_8:
  v6 = v3 == 114;
  if (v4 == 86)
    ++v6;
  if (v5 == 75)
    v7 = -1;
  else
    v7 = 0;
  if (v6 != v7 && (google::ParseType(a1) & 1) != 0)
    return 1;
  *(_OWORD *)a1 = v27;
  *((_OWORD *)a1 + 1) = v28;
  *((_OWORD *)a1 + 2) = v29;
  v8 = **a1 - 67;
  v9 = v8 > 0xF;
  v10 = (1 << v8) & 0xB011;
  if (!v9 && v10 != 0)
  {
    ++*a1;
    if ((google::ParseType(a1) & 1) != 0)
      return 1;
  }
  *(_OWORD *)a1 = v27;
  *((_OWORD *)a1 + 1) = v28;
  *((_OWORD *)a1 + 2) = v29;
  v12 = (uint64_t)*a1;
  if (**a1 == 68 && *(_BYTE *)(v12 + 1) == 112)
  {
    *a1 = (unsigned __int8 *)(v12 + 2);
    if ((google::ParseType(a1) & 1) != 0)
      return 1;
  }
  *(_OWORD *)a1 = v27;
  *((_OWORD *)a1 + 1) = v28;
  *((_OWORD *)a1 + 2) = v29;
  v13 = (uint64_t)*a1;
  if (**a1 == 68)
  {
    *a1 = (unsigned __int8 *)(v13 + 1);
    if ((*(unsigned __int8 *)(v13 + 1) | 0x20) == 0x74)
    {
      *a1 = (unsigned __int8 *)(v13 + 2);
      google::ParseExpression((uint64_t)a1);
      if (v14)
      {
        v15 = *a1;
        if (**a1 == 69)
          goto LABEL_61;
      }
    }
  }
  *(_OWORD *)a1 = v27;
  *((_OWORD *)a1 + 1) = v28;
  *((_OWORD *)a1 + 2) = v29;
  if (**a1 == 85)
  {
    ++*a1;
    if (google::ParseSourceName(a1))
    {
      if ((google::ParseType(a1) & 1) != 0)
        return 1;
    }
  }
  *(_OWORD *)a1 = v27;
  *((_OWORD *)a1 + 1) = v28;
  *((_OWORD *)a1 + 2) = v29;
  v16 = **a1;
  v17 = v16 - 97;
  if ((v16 - 97) <= 0x19 && ((0x3EC7BFFu >> v17) & 1) != 0)
  {
    google::MaybeAppend((uint64_t)a1, *((char **)off_24F97FBE0[v17] + 1));
    v15 = *a1;
LABEL_61:
    *a1 = v15 + 1;
    return 1;
  }
  if (v16 == 117)
  {
    ++*a1;
    if ((google::ParseSourceName(a1) & 1) != 0)
      return 1;
  }
  *(_OWORD *)a1 = v27;
  *((_OWORD *)a1 + 1) = v28;
  *((_OWORD *)a1 + 2) = v29;
  v18 = *a1;
  if (**a1 == 70)
  {
    *a1 = v18 + 1;
    if (v18[1] == 89)
      *a1 = v18 + 2;
    v19 = *((_BYTE *)a1 + 46);
    *((_BYTE *)a1 + 46) = 0;
    if (google::ParseType(a1))
    {
      while ((google::ParseType(a1) & 1) != 0)
        ;
      *((_BYTE *)a1 + 46) = v19 & 1;
      google::MaybeAppend((uint64_t)a1, "()");
      v15 = *a1;
      if (**a1 == 69)
        goto LABEL_61;
    }
  }
  *(_OWORD *)a1 = v27;
  *((_OWORD *)a1 + 1) = v28;
  *((_OWORD *)a1 + 2) = v29;
  if ((google::ParseName(a1) & 1) == 0)
  {
    v30 = *(_OWORD *)a1;
    v32 = *((_OWORD *)a1 + 1);
    v34 = *((_OWORD *)a1 + 2);
    v20 = *a1;
    if (**a1 != 65)
      goto LABEL_50;
    v21 = v20 + 1;
    *a1 = v20 + 1;
    v22 = v20[1];
    if (v22 == 110)
    {
      v21 = v20 + 2;
      *a1 = v20 + 2;
      v22 = v20[2];
    }
    if ((v22 - 48) > 9)
      goto LABEL_50;
    v23 = 0;
    do
      v24 = v21[++v23] - 48;
    while (v24 < 0xA);
    if (!v23 || (*a1 = &v21[v23], v21[v23] != 95) || (*a1 = &v21[v23 + 1], (google::ParseType(a1) & 1) == 0))
    {
LABEL_50:
      *(_OWORD *)a1 = v30;
      *((_OWORD *)a1 + 1) = v32;
      *((_OWORD *)a1 + 2) = v34;
      if (**a1 != 65
        || (++*a1, google::ParseExpression((uint64_t)a1), **a1 != 95)
        || (++*a1, !google::ParseType(a1)))
      {
        *(_OWORD *)a1 = v30;
        *((_OWORD *)a1 + 1) = v32;
        *((_OWORD *)a1 + 2) = v34;
        v31 = *(_OWORD *)a1;
        v33 = *((_OWORD *)a1 + 1);
        v35 = *((_OWORD *)a1 + 2);
        if (**a1 != 77 || (++*a1, !google::ParseType(a1)) || !google::ParseType(a1))
        {
          *(_OWORD *)a1 = v31;
          *((_OWORD *)a1 + 1) = v33;
          *((_OWORD *)a1 + 2) = v35;
          if ((google::ParseSubstitution((uint64_t)a1) & 1) == 0)
          {
            if (!google::ParseTemplateTemplateParam((uint64_t)a1)
              || (google::ParseTemplateArgs((uint64_t)a1), (v25 & 1) == 0))
            {
              *(_OWORD *)a1 = v27;
              *((_OWORD *)a1 + 1) = v28;
              *((_OWORD *)a1 + 2) = v29;
              return google::ParseTemplateParam((uint64_t)a1);
            }
          }
        }
      }
    }
  }
  return 1;
}

__n128 google::ParseExprPrimary(__n128 *a1)
{
  __n128 result;
  unint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  _BYTE *v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v12;
  unint64_t v13;
  unint64_t v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;

  v15 = *a1;
  v16 = a1[1];
  v17 = a1[2];
  if (*(_BYTE *)a1->n128_u64[0] == 76)
  {
    ++a1->n128_u64[0];
    if (google::ParseType(a1))
    {
      v3 = a1->n128_u64[0];
      v4 = *(unsigned __int8 *)a1->n128_u64[0];
      if (v4 == 110)
      {
        a1->n128_u64[0] = v3 + 1;
        v4 = *(unsigned __int8 *)++v3;
      }
      if ((v4 - 48) <= 9)
      {
        v5 = 0;
        do
          v6 = *(unsigned __int8 *)(v3 + v5++ + 1) - 48;
        while (v6 < 0xA);
        if (v5)
        {
          a1->n128_u64[0] = v3 + v5;
          if (*(_BYTE *)(v3 + v5) == 69)
          {
            v7 = (_BYTE *)(v3 + v5);
LABEL_31:
            a1->n128_u64[0] = (unint64_t)(v7 + 1);
            return result;
          }
        }
      }
    }
  }
  *a1 = v15;
  a1[1] = v16;
  a1[2] = v17;
  if (*(_BYTE *)a1->n128_u64[0] == 76)
  {
    ++a1->n128_u64[0];
    if (google::ParseType(a1))
    {
      v8 = *(unsigned __int8 *)a1->n128_u64[0];
      if (*(_BYTE *)a1->n128_u64[0])
      {
        v7 = (_BYTE *)a1->n128_u64[0];
        do
        {
          v9 = v8 - 48;
          v10 = v8 - 97;
          if (v9 >= 0xA && v10 > 5)
            break;
          v12 = *++v7;
          v8 = v12;
        }
        while (v12);
        if (v7 != (_BYTE *)a1->n128_u64[0])
        {
          a1->n128_u64[0] = (unint64_t)v7;
          if (*v7 == 69)
            goto LABEL_31;
        }
      }
    }
  }
  *a1 = v15;
  a1[1] = v16;
  a1[2] = v17;
  v13 = a1->n128_u64[0];
  if (*(_BYTE *)a1->n128_u64[0] == 76)
  {
    a1->n128_u64[0] = v13 + 1;
    if (*(_BYTE *)(v13 + 1) == 95 && *(_BYTE *)(v13 + 2) == 90)
    {
      a1->n128_u64[0] = v13 + 3;
      if (google::ParseEncoding(a1))
      {
        v7 = (_BYTE *)a1->n128_u64[0];
        if (*(_BYTE *)a1->n128_u64[0] == 69)
          goto LABEL_31;
      }
    }
  }
  *a1 = v15;
  a1[1] = v16;
  a1[2] = v17;
  v14 = a1->n128_u64[0];
  if (*(_BYTE *)a1->n128_u64[0] == 76 && *(_BYTE *)(v14 + 1) == 90)
  {
    a1->n128_u64[0] = v14 + 2;
    if (google::ParseEncoding(a1))
    {
      v7 = (_BYTE *)a1->n128_u64[0];
      if (*(_BYTE *)a1->n128_u64[0] == 69)
        goto LABEL_31;
    }
  }
  *a1 = v15;
  a1[1] = v16;
  result = v17;
  a1[2] = v17;
  return result;
}

__n128 google::ParseExpression(uint64_t a1)
{
  _BYTE *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  char *v5;
  __n128 result;
  char v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  __int128 v15;
  __n128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __n128 v20;

  v2 = *(_BYTE **)a1;
  if (**(_BYTE **)a1 == 84)
  {
    v3 = v2 + 1;
    if (v2[1] == 95)
    {
      v4 = (uint64_t)(v2 + 2);
LABEL_4:
      *(_QWORD *)a1 = v4;
      v5 = "?";
LABEL_5:
      google::MaybeAppend(a1, v5);
      return result;
    }
    v15 = *(_OWORD *)a1;
    v17 = *(_OWORD *)(a1 + 16);
    v19 = *(_OWORD *)(a1 + 32);
    *(_QWORD *)a1 = v3;
    v8 = *v3;
    if (v8 == 110)
    {
      v3 = v2 + 2;
      *(_QWORD *)a1 = v2 + 2;
      v8 = v2[2];
    }
    if ((v8 - 48) <= 9)
    {
      v9 = 0;
      do
        v10 = v3[++v9] - 48;
      while (v10 < 0xA);
      if (v9)
      {
        *(_QWORD *)a1 = &v3[v9];
        if (v3[v9] == 95)
        {
          v4 = (uint64_t)&v3[v9 + 1];
          goto LABEL_4;
        }
      }
    }
  }
  else
  {
    v15 = *(_OWORD *)a1;
    v17 = *(_OWORD *)(a1 + 16);
    v19 = *(_OWORD *)(a1 + 32);
  }
  *(_OWORD *)a1 = v15;
  *(_OWORD *)(a1 + 16) = v17;
  *(_OWORD *)(a1 + 32) = v19;
  result.n128_u64[0] = google::ParseExprPrimary((__n128 *)a1).n128_u64[0];
  if ((v7 & 1) != 0)
    return result;
  v16 = *(__n128 *)a1;
  v18 = *(_OWORD *)(a1 + 16);
  v20 = *(__n128 *)(a1 + 32);
  if (google::ParseOperatorName((unsigned __int8 **)a1))
  {
    if (google::ParseExpression(a1)
      && google::ParseExpression(a1)
      && (google::ParseExpression(a1) & 1) != 0)
    {
      return result;
    }
  }
  *(__n128 *)a1 = v16;
  *(_OWORD *)(a1 + 16) = v18;
  *(__n128 *)(a1 + 32) = v20;
  if (google::ParseOperatorName((unsigned __int8 **)a1))
  {
    if (google::ParseExpression(a1) && (google::ParseExpression(a1) & 1) != 0)
      return result;
  }
  *(__n128 *)a1 = v16;
  *(_OWORD *)(a1 + 16) = v18;
  *(__n128 *)(a1 + 32) = v20;
  if (google::ParseOperatorName((unsigned __int8 **)a1))
  {
    if ((google::ParseExpression(a1) & 1) != 0)
      return result;
  }
  *(__n128 *)a1 = v16;
  *(_OWORD *)(a1 + 16) = v18;
  *(__n128 *)(a1 + 32) = v20;
  v11 = *(_QWORD *)a1;
  if (**(_BYTE **)a1 == 115 && *(_BYTE *)(v11 + 1) == 116)
  {
    *(_QWORD *)a1 = v11 + 2;
    if ((google::ParseType(a1) & 1) != 0)
      return result;
  }
  *(__n128 *)a1 = v16;
  *(_OWORD *)(a1 + 16) = v18;
  *(__n128 *)(a1 + 32) = v20;
  v12 = *(_QWORD *)a1;
  if (**(_BYTE **)a1 == 115 && *(_BYTE *)(v12 + 1) == 114)
  {
    *(_QWORD *)a1 = v12 + 2;
    if (google::ParseType(a1))
    {
      if ((google::ParseOperatorName((unsigned __int8 **)a1) & 1) != 0 || (google::ParseCtorDtorName(a1) & 1) != 0)
        goto LABEL_37;
      if ((google::ParseSourceName((unsigned __int8 **)a1) & 1) != 0
        || google::ParseLocalSourceName((unsigned __int8 **)a1))
      {
        google::ParseAbiTags((__int128 *)a1);
LABEL_37:
        v13 = *(_BYTE *)(a1 + 46);
        *(_BYTE *)(a1 + 46) = 0;
        if (**(_BYTE **)a1 == 73)
        {
          ++*(_QWORD *)a1;
          if (google::ParseTemplateArg(a1))
          {
            while ((google::ParseTemplateArg(a1) & 1) != 0)
              ;
            if (**(_BYTE **)a1 == 69)
            {
              ++*(_QWORD *)a1;
              *(_BYTE *)(a1 + 46) = v13 & 1;
              v5 = "<>";
              goto LABEL_5;
            }
          }
        }
      }
    }
  }
  *(__n128 *)a1 = v16;
  *(_OWORD *)(a1 + 16) = v18;
  *(__n128 *)(a1 + 32) = v20;
  v14 = *(_QWORD *)a1;
  if (**(_BYTE **)a1 != 115
    || *(_BYTE *)(v14 + 1) != 114
    || (*(_QWORD *)a1 = v14 + 2, !google::ParseType(a1)))
  {
LABEL_50:
    *(__n128 *)a1 = v16;
    *(_OWORD *)(a1 + 16) = v18;
    result = v20;
    *(__n128 *)(a1 + 32) = v20;
    return result;
  }
  if ((google::ParseOperatorName((unsigned __int8 **)a1) & 1) == 0 && (google::ParseCtorDtorName(a1) & 1) == 0)
  {
    if ((google::ParseSourceName((unsigned __int8 **)a1) & 1) != 0
      || google::ParseLocalSourceName((unsigned __int8 **)a1))
    {
      result.n128_u64[0] = google::ParseAbiTags((__int128 *)a1).n128_u64[0];
      return result;
    }
    goto LABEL_50;
  }
  return result;
}

uint64_t google::ParseSourceName(unsigned __int8 **a1)
{
  unsigned __int8 *v2;
  int v3;
  int v4;
  int v5;
  unsigned __int8 *v6;
  int v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t i;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v22 = *(_OWORD *)a1;
  v23 = *((_OWORD *)a1 + 1);
  v24 = *((_OWORD *)a1 + 2);
  v2 = *a1;
  v3 = **a1;
  if (v3 == 110)
  {
    *a1 = v2 + 1;
    v3 = v2[1];
    v4 = -1;
    ++v2;
    if ((v3 - 48) > 9)
      goto LABEL_15;
  }
  else
  {
    v4 = 1;
    if ((v3 - 48) > 9)
      goto LABEL_15;
  }
  v5 = 0;
  v6 = v2;
  do
  {
    v5 = v3 + 10 * v5 - 48;
    v7 = *++v6;
    v3 = v7;
  }
  while ((v7 - 48) < 0xA);
  if (v6 == v2)
    goto LABEL_15;
  *a1 = v6;
  v8 = (v5 * v4);
  if ((_DWORD)v8 == -1)
    goto LABEL_15;
  if ((int)v8 >= 1)
  {
    v9 = *v6;
    if (*v6)
    {
      v10 = 1;
      while (v8 != v10)
      {
        if (!v6[v10++])
        {
          if (v10 - 1 < v8)
            goto LABEL_15;
          break;
        }
      }
      if ((int)v8 < 12)
        goto LABEL_48;
      v13 = 0;
      v14 = *v6;
      while (1)
      {
        v15 = google::IdentifierIsAnonymousNamespace(google::State *,int)::anon_prefix[v13];
        if (!google::IdentifierIsAnonymousNamespace(google::State *,int)::anon_prefix[v13] || v14 != v15)
          break;
        v17 = v13 + 1;
        v14 = v6[++v13];
        if (!v14)
        {
          v15 = google::IdentifierIsAnonymousNamespace(google::State *,int)::anon_prefix[v17];
          break;
        }
      }
      if (v15)
      {
LABEL_48:
        if (*((_BYTE *)a1 + 46))
        {
          if (v9 == 60)
          {
            v18 = a1[1];
            if (a1[2] < v18 && *(v18 - 1) == 60)
            {
              if (v18 + 1 >= a1[3])
              {
                *((_BYTE *)a1 + 47) = 1;
              }
              else
              {
                *v18 = 32;
                v19 = a1[1] + 1;
                a1[1] = v19;
                if (!*((_BYTE *)a1 + 47))
                  *v19 = 0;
              }
            }
            v9 = *v6;
          }
          v20 = a1[1];
          if (v9 == 95 || (v9 & 0xFFFFFFDF) - 65 <= 0x19)
          {
            a1[4] = v20;
            *((_DWORD *)a1 + 10) = v8;
          }
          for (i = 0; i != v8; ++i)
          {
            if (v20 + 1 >= a1[3])
            {
              *((_BYTE *)a1 + 47) = 1;
              goto LABEL_45;
            }
            *v20 = v6[i];
            v20 = a1[1] + 1;
            a1[1] = v20;
          }
          if (!*((_BYTE *)a1 + 47))
            *v20 = 0;
        }
      }
      else
      {
        google::MaybeAppend((uint64_t)a1, "(anonymous namespace)");
      }
      goto LABEL_45;
    }
LABEL_15:
    result = 0;
    *(_OWORD *)a1 = v22;
    *((_OWORD *)a1 + 1) = v23;
    *((_OWORD *)a1 + 2) = v24;
    return result;
  }
LABEL_45:
  *a1 += (int)v8;
  return 1;
}

uint64_t google::ParseTemplateTemplateParam(uint64_t a1)
{
  _BYTE *v1;
  unsigned __int8 *v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v1 = *(_BYTE **)a1;
  if (**(_BYTE **)a1 == 84)
  {
    v2 = v1 + 1;
    if (v1[1] == 95)
    {
      v3 = (uint64_t)(v1 + 2);
LABEL_4:
      *(_QWORD *)a1 = v3;
      google::MaybeAppend(a1, "?");
      return 1;
    }
    v8 = *(_OWORD *)a1;
    v9 = *(_OWORD *)(a1 + 16);
    v10 = *(_OWORD *)(a1 + 32);
    *(_QWORD *)a1 = v2;
    v5 = *v2;
    if (v5 == 110)
    {
      v2 = v1 + 2;
      *(_QWORD *)a1 = v1 + 2;
      v5 = v1[2];
    }
    if ((v5 - 48) <= 9)
    {
      v6 = 0;
      do
        v7 = v2[++v6] - 48;
      while (v7 < 0xA);
      if (v6)
      {
        *(_QWORD *)a1 = &v2[v6];
        if (v2[v6] == 95)
        {
          v3 = (uint64_t)&v2[v6 + 1];
          goto LABEL_4;
        }
      }
    }
  }
  else
  {
    v8 = *(_OWORD *)a1;
    v9 = *(_OWORD *)(a1 + 16);
    v10 = *(_OWORD *)(a1 + 32);
  }
  *(_OWORD *)a1 = v8;
  *(_OWORD *)(a1 + 16) = v9;
  *(_OWORD *)(a1 + 32) = v10;
  return google::ParseSubstitution(a1);
}

uint64_t google::ParseOperatorName(unsigned __int8 **a1)
{
  unsigned __int8 *v1;
  __int16 v3;
  __int16 v4;
  unsigned __int8 *v6;
  int v7;
  int v8;
  const char *v9;
  char **v10;
  char *v11;
  char *v12;
  __int128 v13;
  _BYTE v14[28];

  v1 = *a1;
  if (!**a1 || !v1[1])
    return 0;
  v13 = *(_OWORD *)a1;
  *(_OWORD *)v14 = *((_OWORD *)a1 + 1);
  *(_OWORD *)&v14[12] = *(_OWORD *)((char *)a1 + 28);
  v3 = *((_WORD *)a1 + 22);
  v4 = *((_WORD *)a1 + 23);
  if (**a1 == 99 && v1[1] == 118)
  {
    *a1 = v1 + 2;
    google::MaybeAppend((uint64_t)a1, "operator ");
    *((_WORD *)a1 + 22) = 0;
    if (google::ParseType(a1))
    {
      *((_WORD *)a1 + 22) = v3;
      return 1;
    }
  }
  *(_OWORD *)a1 = v13;
  *((_OWORD *)a1 + 1) = *(_OWORD *)v14;
  *(_OWORD *)((char *)a1 + 28) = *(_OWORD *)&v14[12];
  *((_WORD *)a1 + 22) = v3;
  *((_WORD *)a1 + 23) = v4;
  v6 = *a1;
  if (**a1 == 118)
  {
    *a1 = v6 + 1;
    if (v6[1] - 48 <= 9)
    {
      *a1 = v6 + 2;
      if ((google::ParseSourceName(a1) & 1) != 0)
        return 1;
    }
  }
  *(_OWORD *)a1 = v13;
  *((_OWORD *)a1 + 1) = *(_OWORD *)v14;
  *(_OWORD *)((char *)a1 + 28) = *(_OWORD *)&v14[12];
  *((_WORD *)a1 + 22) = v3;
  *((_WORD *)a1 + 23) = v4;
  v7 = **a1;
  if ((v7 - 97) > 0x19)
    return 0;
  v8 = (*a1)[1];
  if ((v8 & 0xFFFFFFDF) - 65 > 0x19)
    return 0;
  v9 = "nw";
  v10 = off_24F97F8D0;
  while (v7 != *(unsigned __int8 *)v9 || v8 != *((unsigned __int8 *)v9 + 1))
  {
    v11 = *v10;
    v10 += 2;
    v9 = v11;
    if (!v11)
      return 0;
  }
  google::MaybeAppend((uint64_t)a1, "operator");
  v12 = *(v10 - 1);
  if (*v12 - 97 <= 0x19)
    google::MaybeAppend((uint64_t)a1, " ");
  google::MaybeAppend((uint64_t)a1, v12);
  *a1 += 2;
  return 1;
}

__n128 google::ParseUnqualifiedName(uint64_t a1)
{
  __n128 result;
  char v3;
  unsigned __int8 *v4;
  char v5;
  char v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __n128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[30];
  __int128 v18;
  __int128 v19;

  if ((google::ParseOperatorName((unsigned __int8 **)a1) & 1) == 0 && (google::ParseCtorDtorName(a1) & 1) == 0)
  {
    v3 = google::ParseSourceName((unsigned __int8 **)a1);
    v4 = *(unsigned __int8 **)a1;
    if ((v3 & 1) == 0)
    {
      v12 = *(_OWORD *)a1;
      v13 = *(_OWORD *)(a1 + 16);
      v14 = *(__n128 *)(a1 + 32);
      if (*v4 != 76 || (*(_QWORD *)a1 = v4 + 1, !google::ParseSourceName((unsigned __int8 **)a1)))
      {
        *(_OWORD *)a1 = v12;
        *(_OWORD *)(a1 + 16) = v13;
        result = v14;
        *(__n128 *)(a1 + 32) = v14;
        return result;
      }
      v16 = *(_OWORD *)a1;
      v18 = *(_OWORD *)(a1 + 16);
      v19 = *(_OWORD *)(a1 + 32);
      v7 = *(unsigned __int8 **)a1;
      if (**(_BYTE **)a1 != 95)
        goto LABEL_22;
      v8 = v7 + 1;
      *(_QWORD *)a1 = v7 + 1;
      v9 = v7[1];
      if (v9 == 110)
      {
        v8 = v7 + 2;
        *(_QWORD *)a1 = v7 + 2;
        v9 = v7[2];
      }
      if ((v9 - 48) > 9)
        goto LABEL_22;
      v10 = 0;
      do
        v11 = v8[++v10] - 48;
      while (v11 < 0xA);
      if (v10)
      {
        v4 = &v8[v10];
        *(_QWORD *)a1 = v4;
      }
      else
      {
LABEL_22:
        *(_OWORD *)a1 = v16;
        *(_OWORD *)(a1 + 16) = v18;
        *(_OWORD *)(a1 + 32) = v19;
        v4 = *(unsigned __int8 **)a1;
      }
    }
    v15 = *(_OWORD *)a1;
    *(_OWORD *)v17 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)&v17[14] = *(_OWORD *)(a1 + 30);
    v5 = *(_BYTE *)(a1 + 46);
    v6 = *(_BYTE *)(a1 + 47);
    *(_BYTE *)(a1 + 46) = 0;
    if (*v4 == 66 && (*(_QWORD *)a1 = v4 + 1, google::ParseSourceName((unsigned __int8 **)a1)))
    {
      do
      {
        if (**(_BYTE **)a1 != 66)
          break;
        ++*(_QWORD *)a1;
      }
      while ((google::ParseSourceName((unsigned __int8 **)a1) & 1) != 0);
      *(_BYTE *)(a1 + 46) = v5 & 1;
    }
    else
    {
      *(_OWORD *)a1 = v15;
      *(_OWORD *)(a1 + 16) = *(_OWORD *)v17;
      result = *(__n128 *)&v17[14];
      *(_OWORD *)(a1 + 30) = *(_OWORD *)&v17[14];
      *(_BYTE *)(a1 + 46) = v5;
      *(_BYTE *)(a1 + 47) = v6;
    }
  }
  return result;
}

uint64_t google::ParseCtorDtorName(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  char *v5;
  int v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  char v17;
  _BYTE *v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v20 = *(_OWORD *)a1;
  v21 = *(_OWORD *)(a1 + 16);
  v22 = *(_OWORD *)(a1 + 32);
  v2 = *(_QWORD *)a1;
  if (**(_BYTE **)a1 == 67 && (*(_QWORD *)a1 = v2 + 1, *(unsigned __int8 *)(v2 + 1) - 49 <= 2))
  {
    *(_QWORD *)a1 = v2 + 2;
    v3 = *(unsigned int *)(a1 + 40);
    result = 1;
    if ((int)v3 >= 1 && *(_BYTE *)(a1 + 46))
    {
      v5 = *(char **)(a1 + 32);
      v6 = *v5;
      if (v6 == 60)
      {
        v7 = *(_BYTE **)(a1 + 8);
        if (*(_QWORD *)(a1 + 16) < (unint64_t)v7 && *(v7 - 1) == 60)
        {
          if ((unint64_t)(v7 + 1) >= *(_QWORD *)(a1 + 24))
          {
            *(_BYTE *)(a1 + 47) = 1;
          }
          else
          {
            *v7 = 32;
            v8 = (_BYTE *)(*(_QWORD *)(a1 + 8) + 1);
            *(_QWORD *)(a1 + 8) = v8;
            if (!*(_BYTE *)(a1 + 47))
              *v8 = 0;
          }
        }
        v6 = *v5;
      }
      v15 = *(_BYTE **)(a1 + 8);
      if (v6 == 95 || (v6 & 0xFFFFFFDF) - 65 <= 0x19)
      {
        *(_QWORD *)(a1 + 32) = v15;
        *(_DWORD *)(a1 + 40) = v3;
      }
      while ((unint64_t)(v15 + 1) < *(_QWORD *)(a1 + 24))
      {
        v17 = *v5++;
        *v15 = v17;
        v15 = (_BYTE *)(*(_QWORD *)(a1 + 8) + 1);
        *(_QWORD *)(a1 + 8) = v15;
        if (!--v3)
        {
          if (!*(_BYTE *)(a1 + 47))
            *v15 = 0;
          return 1;
        }
      }
LABEL_45:
      result = 1;
      *(_BYTE *)(a1 + 47) = 1;
    }
  }
  else
  {
    *(_OWORD *)a1 = v20;
    *(_OWORD *)(a1 + 16) = v21;
    *(_OWORD *)(a1 + 32) = v22;
    v9 = *(_QWORD *)a1;
    if (**(_BYTE **)a1 == 68 && (*(_QWORD *)a1 = v9 + 1, *(unsigned __int8 *)(v9 + 1) - 48 <= 2))
    {
      *(_QWORD *)a1 = v9 + 2;
      v10 = *(char **)(a1 + 32);
      v11 = *(unsigned int *)(a1 + 40);
      google::MaybeAppend(a1, "~");
      result = 1;
      if ((int)v11 >= 1 && *(_BYTE *)(a1 + 46))
      {
        v12 = *v10;
        if (v12 == 60)
        {
          v13 = *(_BYTE **)(a1 + 8);
          if (*(_QWORD *)(a1 + 16) < (unint64_t)v13 && *(v13 - 1) == 60)
          {
            if ((unint64_t)(v13 + 1) >= *(_QWORD *)(a1 + 24))
            {
              *(_BYTE *)(a1 + 47) = 1;
            }
            else
            {
              *v13 = 32;
              v14 = (_BYTE *)(*(_QWORD *)(a1 + 8) + 1);
              *(_QWORD *)(a1 + 8) = v14;
              if (!*(_BYTE *)(a1 + 47))
                *v14 = 0;
            }
          }
          v12 = *v10;
        }
        v18 = *(_BYTE **)(a1 + 8);
        if (v12 == 95 || (v12 & 0xFFFFFFDF) - 65 <= 0x19)
        {
          *(_QWORD *)(a1 + 32) = v18;
          *(_DWORD *)(a1 + 40) = v11;
        }
        while ((unint64_t)(v18 + 1) < *(_QWORD *)(a1 + 24))
        {
          v19 = *v10++;
          *v18 = v19;
          v18 = (_BYTE *)(*(_QWORD *)(a1 + 8) + 1);
          *(_QWORD *)(a1 + 8) = v18;
          if (!--v11)
          {
            if (!*(_BYTE *)(a1 + 47))
              *v18 = 0;
            return 1;
          }
        }
        goto LABEL_45;
      }
    }
    else
    {
      result = 0;
      *(_OWORD *)a1 = v20;
      *(_OWORD *)(a1 + 16) = v21;
      *(_OWORD *)(a1 + 32) = v22;
    }
  }
  return result;
}

__n128 google::ParseAbiTags(__int128 *a1)
{
  char v2;
  char v3;
  __n128 result;
  __int128 v5;
  _BYTE v6[30];

  v5 = *a1;
  *(_OWORD *)v6 = a1[1];
  *(_OWORD *)&v6[14] = *(__int128 *)((char *)a1 + 30);
  v2 = *((_BYTE *)a1 + 46);
  v3 = *((_BYTE *)a1 + 47);
  *((_BYTE *)a1 + 46) = 0;
  if (**(_BYTE **)a1 == 66 && (++*(_QWORD *)a1, google::ParseSourceName((unsigned __int8 **)a1)))
  {
    do
    {
      if (**(_BYTE **)a1 != 66)
        break;
      ++*(_QWORD *)a1;
    }
    while ((google::ParseSourceName((unsigned __int8 **)a1) & 1) != 0);
    *((_BYTE *)a1 + 46) = v2 & 1;
  }
  else
  {
    *a1 = v5;
    a1[1] = *(_OWORD *)v6;
    result = *(__n128 *)&v6[14];
    *(__int128 *)((char *)a1 + 30) = *(_OWORD *)&v6[14];
    *((_BYTE *)a1 + 46) = v2;
    *((_BYTE *)a1 + 47) = v3;
  }
  return result;
}

uint64_t google::ParseLocalSourceName(unsigned __int8 **a1)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v8 = *(_OWORD *)a1;
  v9 = *((_OWORD *)a1 + 1);
  v10 = *((_OWORD *)a1 + 2);
  if (**a1 == 76 && (++*a1, google::ParseSourceName(a1)))
  {
    v11 = *(_OWORD *)a1;
    v12 = *((_OWORD *)a1 + 1);
    v13 = *((_OWORD *)a1 + 2);
    v2 = *a1;
    if (**a1 != 95)
      goto LABEL_12;
    v3 = v2 + 1;
    *a1 = v2 + 1;
    v4 = v2[1];
    if (v4 == 110)
    {
      v3 = v2 + 2;
      *a1 = v2 + 2;
      v4 = v2[2];
    }
    if ((v4 - 48) > 9)
      goto LABEL_12;
    v5 = 0;
    do
      v6 = v3[++v5] - 48;
    while (v6 < 0xA);
    if (v5)
    {
      *a1 = &v3[v5];
      return 1;
    }
    else
    {
LABEL_12:
      *(_OWORD *)a1 = v11;
      *((_OWORD *)a1 + 1) = v12;
      *((_OWORD *)a1 + 2) = v13;
      return 1;
    }
  }
  else
  {
    result = 0;
    *(_OWORD *)a1 = v8;
    *((_OWORD *)a1 + 1) = v9;
    *((_OWORD *)a1 + 2) = v10;
  }
  return result;
}

uint64_t google::ParseCallOffset(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  _BYTE *v7;
  _BYTE *v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  _BYTE *v12;
  int v13;
  unsigned int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v17 = *(_OWORD *)(a1 + 32);
  v1 = *(_BYTE **)a1;
  if (**(_BYTE **)a1 == 104)
  {
    v2 = v1 + 1;
    *(_QWORD *)a1 = v1 + 1;
    v3 = v1[1];
    if (v3 == 110)
    {
      v2 = v1 + 2;
      *(_QWORD *)a1 = v1 + 2;
      v3 = v1[2];
    }
    if ((v3 - 48) <= 9)
    {
      v4 = 0;
      do
        v5 = v2[++v4] - 48;
      while (v5 < 0xA);
      if (v4)
      {
        *(_QWORD *)a1 = &v2[v4];
        if (v2[v4] == 95)
          goto LABEL_9;
      }
    }
  }
  *(_OWORD *)a1 = v15;
  *(_OWORD *)(a1 + 16) = v16;
  *(_OWORD *)(a1 + 32) = v17;
  v7 = *(_BYTE **)a1;
  if (**(_BYTE **)a1 != 118)
    goto LABEL_25;
  v8 = v7 + 1;
  *(_QWORD *)a1 = v7 + 1;
  v9 = v7[1];
  if (v9 == 110)
  {
    v8 = v7 + 2;
    *(_QWORD *)a1 = v7 + 2;
    v9 = v7[2];
  }
  if ((v9 - 48) > 9)
    goto LABEL_25;
  v10 = 0;
  do
    v11 = v8[++v10] - 48;
  while (v11 < 0xA);
  if (!v10)
    goto LABEL_25;
  *(_QWORD *)a1 = &v8[v10];
  if (v8[v10] != 95)
    goto LABEL_25;
  v12 = &v8[v10];
  v2 = v12 + 1;
  *(_QWORD *)a1 = v12 + 1;
  v13 = v12[1];
  if (v13 == 110)
  {
    v2 = v12 + 2;
    *(_QWORD *)a1 = v12 + 2;
    v13 = v12[2];
  }
  if ((v13 - 48) > 9)
    goto LABEL_25;
  v4 = 0;
  do
    v14 = v2[++v4] - 48;
  while (v14 < 0xA);
  if (v4 && (*(_QWORD *)a1 = &v2[v4], v2[v4] == 95))
  {
LABEL_9:
    *(_QWORD *)a1 = &v2[v4 + 1];
    return 1;
  }
  else
  {
LABEL_25:
    *(_OWORD *)a1 = v15;
    *(_OWORD *)(a1 + 16) = v16;
    *(_OWORD *)(a1 + 32) = v17;
    return 0;
  }
}

void glog_internal_namespace_::Mutex::~Mutex(pthread_rwlock_t *this)
{
  if (LOBYTE(this[1].__sig))
  {
    if (pthread_rwlock_destroy(this))
      abort();
  }
}

google::LogDestination *google::LogDestination::LogDestination(google::LogDestination *this, unsigned int a2, const char *a3)
{
  const char *v6;
  size_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v19;
  int v20;

  *(_QWORD *)this = &off_24F97FD08;
  *((_BYTE *)this + 208) = 1;
  if (*((_BYTE *)this + 208) && pthread_rwlock_init((pthread_rwlock_t *)((char *)this + 8), 0))
    abort();
  *((_BYTE *)this + 216) = a3 != 0;
  if (a3)
    v6 = a3;
  else
    v6 = "";
  v7 = strlen(v6);
  if (v7 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v9 = (char *)operator new(v10 + 1);
    *((_QWORD *)this + 29) = v8;
    *((_QWORD *)this + 30) = v11 | 0x8000000000000000;
    *((_QWORD *)this + 28) = v9;
    goto LABEL_13;
  }
  *((_BYTE *)this + 247) = v7;
  v9 = (char *)this + 224;
  if (v7)
LABEL_13:
    v7 = (size_t)memmove(v9, v6, v8);
  v9[v8] = 0;
  v12 = google::glog_internal_namespace_::ProgramInvocationShortName((google::glog_internal_namespace_ *)v7);
  v13 = strlen(v12);
  if (v13 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v14 = v13;
  if (v13 >= 0x17)
  {
    v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v16 = v13 | 7;
    v17 = v16 + 1;
    v15 = (char *)operator new(v16 + 1);
    *((_QWORD *)this + 32) = v14;
    *((_QWORD *)this + 33) = v17 | 0x8000000000000000;
    *((_QWORD *)this + 31) = v15;
    goto LABEL_21;
  }
  *((_BYTE *)this + 271) = v13;
  v15 = (char *)this + 248;
  if (v13)
LABEL_21:
    memmove(v15, v12, v14);
  v15[v14] = 0;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_DWORD *)this + 76) = a2;
  *(_OWORD *)((char *)this + 308) = xmmword_22DCE63F0;
  *((_QWORD *)this + 41) = 0;
  if ((a2 & 0x80000000) != 0)
  {
    v19 = "severity >= 0";
    v20 = 845;
    goto LABEL_27;
  }
  if (a2 >= 4)
  {
    v19 = "severity < NUM_SEVERITIES";
    v20 = 846;
LABEL_27:
    __assert_rtn("LogFileObject", "logging.cc", v20, v19);
  }
  *((_QWORD *)this + 42) = this;
  return this;
}

void sub_22D9E1828(_Unwind_Exception *exception_object)
{
  pthread_rwlock_t *v1;
  uint64_t v2;

  if (*(_BYTE *)(v2 + 208))
  {
    if (pthread_rwlock_destroy(v1))
      abort();
  }
  _Unwind_Resume(exception_object);
}

void glog_internal_namespace_::MutexLock::~MutexLock(glog_internal_namespace_::MutexLock *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  if (*(_BYTE *)(v1 + 200))
  {
    if (pthread_rwlock_unlock((pthread_rwlock_t *)v1))
      abort();
  }
}

void google::LogMessage::LogMessageData::~LogMessageData(google::LogMessage::LogMessageData *this)
{
  char *v1;

  *((_QWORD *)this + 3751) = &unk_24F97FD60;
  v1 = (char *)this + 30096;
  *((_QWORD *)this + 3762) = &unk_24F97FD88;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22E31DEF4](v1);
}

void sub_22D9E1970(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DEF4](v1);
  _Unwind_Resume(a1);
}

google::LogMessage::LogStream *google::LogMessage::LogStream::LogStream(google::LogMessage::LogStream *this, char *a2, int a3, int a4)
{
  std::ios_base *v8;

  *((_QWORD *)this + 11) = &unk_24F97FDF8;
  *(_QWORD *)this = &unk_24F97FDD0;
  std::ios_base::init((std::ios_base *)((char *)this + 88), 0);
  *((_QWORD *)this + 28) = 0;
  *((_DWORD *)this + 58) = -1;
  *(_QWORD *)this = &unk_24F97FD60;
  *((_QWORD *)this + 11) = &unk_24F97FD88;
  std::streambuf::basic_streambuf();
  *((_QWORD *)this + 1) = &unk_24F97FE18;
  *((_QWORD *)this + 6) = a2;
  *((_QWORD *)this + 7) = a2;
  *((_QWORD *)this + 8) = &a2[a3 - 2];
  *((_DWORD *)this + 18) = a4;
  *((_QWORD *)this + 10) = this;
  v8 = (std::ios_base *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v8->__rdbuf_ = (char *)this + 8;
  std::ios_base::clear(v8, 0);
  return this;
}

void sub_22D9E1A7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22E31DEF4](v1);
  _Unwind_Resume(a1);
}

void google::LogMessage::Init(unint64_t *a1, google::glog_internal_namespace_ *a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12;
  _BYTE *v13;
  const std::ios_base *v14;
  const std::locale::facet *v15;
  std::ios_base::fmtflags v16;
  google::glog_internal_namespace_ *v17;
  unint64_t v18;
  double v19;
  unint64_t v20;
  const char *v21;
  google::glog_internal_namespace_ *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  google::glog_internal_namespace_ *v35;
  google::glog_internal_namespace_ *v36;
  uint64_t v37;
  char *v38;
  const std::locale::facet *v39;
  int v40;
  _QWORD *v41;
  _QWORD *v42;
  char *v43;
  const std::locale::facet *v44;
  int v45;
  _QWORD *v46;
  size_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  const char *v51;
  _QWORD *v52;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v55;
  std::string __p;
  std::locale v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  *a1 = 0;
  if (a4 == 3 && google::exit_on_dfatal)
  {
    if (!byte_255DB2E78 || !pthread_rwlock_wrlock(&stru_255DB2DB0))
    {
      if ((_MergedGlobals_153 & 1) != 0)
      {
        v12 = (unint64_t)&google::fatal_msg_data_shared;
        *((_BYTE *)&google::fatal_msg_data_shared + 30385) = 0;
        a1[1] = (unint64_t)&google::fatal_msg_data_shared;
        if (!byte_255DB2E78)
          goto LABEL_15;
      }
      else
      {
        _MergedGlobals_153 = 1;
        v12 = (unint64_t)&google::fatal_msg_data_exclusive;
        *((_BYTE *)&google::fatal_msg_data_exclusive + 30385) = 1;
        a1[1] = (unint64_t)&google::fatal_msg_data_exclusive;
        if (!byte_255DB2E78)
          goto LABEL_15;
      }
      if (!pthread_rwlock_unlock(&stru_255DB2DB0))
      {
        v12 = a1[1];
        goto LABEL_15;
      }
    }
    abort();
  }
  v13 = (_BYTE *)google::thread_data_available();
  if (*v13)
  {
    *v13 = 0;
    v12 = (google::thread_msg_data() + 7) & 0xFFFFFFFFFFFFFFF8;
    google::LogMessage::LogStream::LogStream((google::LogMessage::LogStream *)(v12 + 30008), (char *)(v12 | 4), 30000, 0);
  }
  else
  {
    v12 = operator new();
    google::LogMessage::LogStream::LogStream((google::LogMessage::LogStream *)(v12 + 30008), (char *)(v12 + 4), 30000, 0);
    *a1 = v12;
  }
  a1[1] = v12;
  *(_BYTE *)(v12 + 30385) = 0;
LABEL_15:
  v14 = (const std::ios_base *)(v12 + 30008 + *(_QWORD *)(*(_QWORD *)(v12 + 30008) - 24));
  if (v14[1].__fmtflags_ == -1)
  {
    std::ios_base::getloc(v14);
    v15 = std::locale::use_facet(&v57, MEMORY[0x24BEDB350]);
    v16 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 32);
    std::locale::~locale(&v57);
    v14[1].__fmtflags_ = v16;
  }
  v14[1].__fmtflags_ = 48;
  v17 = (google::glog_internal_namespace_ *)__error();
  v18 = a1[1];
  *(_DWORD *)v18 = *(_DWORD *)v17;
  *(_BYTE *)(v18 + 30248) = a4;
  *(_DWORD *)(v18 + 30252) = a3;
  *(_QWORD *)(v18 + 30256) = a5;
  *(_QWORD *)(v18 + 30264) = a6;
  *(_QWORD *)(v18 + 30272) = 0;
  *(_QWORD *)(a1[1] + 30272) = 0;
  v19 = google::glog_internal_namespace_::WallTime_Now(v17);
  v20 = a1[1];
  *(_QWORD *)(v20 + 30280) = (uint64_t)v19;
  localtime_r((const time_t *)(v20 + 30280), (tm *)(v20 + 30288));
  *(_OWORD *)(a1[1] + 30352) = 0u;
  v22 = google::glog_internal_namespace_::const_basename(a2, v21);
  v23 = a1[1];
  *(_QWORD *)(v23 + 30368) = v22;
  *(_QWORD *)(v23 + 30376) = a2;
  *(_BYTE *)(v23 + 30384) = 0;
  if (a3 != -1 && fLB::FLAGS_log_prefix)
  {
    LOBYTE(v57.__locale_) = *google::LogSeverityNames[a4];
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(v23 + 30008), (uint64_t)&v57, 1);
    *(_QWORD *)((char *)v24 + *(_QWORD *)(*v24 - 24) + 24) = 2;
    v25 = (_QWORD *)std::ostream::operator<<();
    *(_QWORD *)((char *)v25 + *(_QWORD *)(*v25 - 24) + 24) = 2;
    v26 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v57.__locale_) = 32;
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)&v57, 1);
    *(_QWORD *)((char *)v27 + *(_QWORD *)(*v27 - 24) + 24) = 2;
    v28 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v57.__locale_) = 58;
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)&v57, 1);
    *(_QWORD *)((char *)v29 + *(_QWORD *)(*v29 - 24) + 24) = 2;
    v30 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v57.__locale_) = 58;
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)&v57, 1);
    *(_QWORD *)((char *)v31 + *(_QWORD *)(*v31 - 24) + 24) = 2;
    v32 = (_QWORD *)std::ostream::operator<<();
    v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)".", 1);
    *(_QWORD *)((char *)v33 + *(_QWORD *)(*v33 - 24) + 24) = 6;
    v34 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v57.__locale_) = 32;
    v35 = (google::glog_internal_namespace_ *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)&v57, 1);
    v36 = v35;
    v37 = *(_QWORD *)v35;
    v38 = (char *)v35 + *(_QWORD *)(*(_QWORD *)v35 - 24);
    if (*((_DWORD *)v38 + 36) == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(_QWORD *)(*(_QWORD *)v35 - 24)));
      v39 = std::locale::use_facet(&v57, MEMORY[0x24BEDB350]);
      v40 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 32);
      std::locale::~locale(&v57);
      *((_DWORD *)v38 + 36) = v40;
      v37 = *(_QWORD *)v36;
    }
    *((_DWORD *)v38 + 36) = 32;
    *(_QWORD *)((char *)v36 + *(_QWORD *)(v37 - 24) + 24) = 5;
    google::glog_internal_namespace_::GetTID(v35);
    v41 = (_QWORD *)std::ostream::operator<<();
    v42 = v41;
    v43 = (char *)v41 + *(_QWORD *)(*v41 - 24);
    if (*((_DWORD *)v43 + 36) == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v41 + *(_QWORD *)(*v41 - 24)));
      v44 = std::locale::use_facet(&v57, MEMORY[0x24BEDB350]);
      v45 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 32);
      std::locale::~locale(&v57);
      *((_DWORD *)v43 + 36) = v45;
    }
    *((_DWORD *)v43 + 36) = 48;
    LOBYTE(v57.__locale_) = 32;
    v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)&v57, 1);
    v47 = strlen(*(const char **)(a1[1] + 30368));
    v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, *(_QWORD *)(a1[1] + 30368), v47);
    LOBYTE(v57.__locale_) = 58;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)&v57, 1);
    v49 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"] ", 2);
    v23 = a1[1];
  }
  *(_QWORD *)(v23 + 30344) = *(_QWORD *)(v23 + 30064) - *(_QWORD *)(v23 + 30056);
  v50 = byte_255DB3557;
  if (byte_255DB3557 < 0)
    v50 = qword_255DB3548;
  if (v50)
  {
    snprintf((char *)&v57, 0x80uLL, "%s:%d", *(const char **)(v23 + 30368), a3);
    v51 = byte_255DB3557 >= 0
        ? (const char *)&fLS::FLAGS_log_backtrace_at_buf
        : (const char *)fLS::FLAGS_log_backtrace_at_buf;
    if (!strcmp(v51, (const char *)&v57))
    {
      memset(&__p, 0, sizeof(__p));
      google::glog_internal_namespace_::DumpStackTraceToString(&__p);
      v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1[1] + 30008), (uint64_t)" (stacktrace:\n", 14);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)p_p, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)") ", 2);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_22D9E2134(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x10F0C4056CFB368);
  _Unwind_Resume(a1);
}

void sub_22D9E2158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, std::locale a17)
{
  std::locale::~locale(&a17);
  _Unwind_Resume(a1);
}

uint64_t google::LogMessage::SendToLog(size_t this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL IsGoogleLoggingInitialized;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  google::LogDestination *v18;
  uint64_t v20;
  google *v21;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  google *v28;
  char __ptr[66];
  uint64_t v30;

  v5 = this;
  v30 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(this + 8);
  v7 = *(_QWORD *)(v6 + 30352);
  if (!v7 || *(_BYTE *)(v7 + v6 + 3) != 10)
    this = google::RawLog__(3, (google::glog_internal_namespace_ *)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/glog-0.4.0/src/logging.cc", (const char *)0x583, "Check %s failed: %s", a5, "data_->num_chars_to_log_ > 0 && data_->message_text_[data_->num_chars_to_log_-1] == '\\n'", "");
  if ((byte_255DB2CD1 & 1) == 0)
  {
    this = google::glog_internal_namespace_::IsGoogleLoggingInitialized((google::glog_internal_namespace_ *)this);
    if ((this & 1) == 0)
    {
      strcpy(__ptr, "WARNING: Logging before InitGoogleLogging() is written to STDERR\n");
      this = fwrite(__ptr, 0x41uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
      byte_255DB2CD1 = 1;
    }
  }
  if (fLB::FLAGS_logtostderr)
  {
    v8 = *(_QWORD *)(v5 + 8);
LABEL_12:
    google::ColoredWriteToStderr((google *)*(char *)(v8 + 30248), (void *)(v8 + 4), *(_QWORD *)(v8 + 30352));
    v13 = *(_QWORD *)(v5 + 8);
    result = google::LogDestination::LogToSinks(*(char *)(v13 + 30248), *(_QWORD *)(v13 + 30376), *(const char **)(v13 + 30368), (const char *)*(unsigned int *)(v13 + 30252), v13 + 30288, (const tm *)(v13 + *(_QWORD *)(v13 + 30344) + 4), (const char *)(*(_QWORD *)(v13 + 30352) + ~*(_QWORD *)(v13 + 30344)));
    goto LABEL_13;
  }
  IsGoogleLoggingInitialized = google::glog_internal_namespace_::IsGoogleLoggingInitialized((google::glog_internal_namespace_ *)this);
  v8 = *(_QWORD *)(v5 + 8);
  if (!IsGoogleLoggingInitialized)
    goto LABEL_12;
  v10 = *(char *)(v8 + 30248);
  v11 = v8 + 4;
  v12 = *(_QWORD *)(v8 + 30352);
  if (fLB::FLAGS_logtostderr)
  {
    google::ColoredWriteToStderr((google *)*(char *)(v8 + 30248), (void *)(v8 + 4), *(_QWORD *)(v8 + 30352));
  }
  else if ((v10 & 0x80000000) == 0)
  {
    if (v10 > 3)
      google::LogMessage::SendToLog();
    v16 = *(_QWORD *)(v8 + 30280);
    do
    {
      v17 = fLI::FLAGS_logbuflevel;
      v18 = (google::LogDestination *)google::LogDestination::log_destinations_[v10];
      if (!v18)
      {
        v18 = (google::LogDestination *)operator new();
        google::LogDestination::LogDestination(v18, v10, 0);
        google::LogDestination::log_destinations_[v10] = (uint64_t)v18;
      }
      (*(void (**)(_QWORD *, BOOL, uint64_t, uint64_t, uint64_t))(**((_QWORD **)v18 + 42) + 16))(*((_QWORD **)v18 + 42), v10 > v17, v16, v11, v12);
    }
    while (v10-- > 0);
  }
  v20 = *(_QWORD *)(v5 + 8);
  v21 = (google *)*(char *)(v20 + 30248);
  if (fLI::FLAGS_stderrthreshold <= (int)v21 || fLB::FLAGS_alsologtostderr != 0)
  {
    google::ColoredWriteToStderr(v21, (void *)(v20 + 4), *(_QWORD *)(v20 + 30352));
    v20 = *(_QWORD *)(v5 + 8);
    v21 = (google *)*(char *)(v20 + 30248);
  }
  google::LogDestination::MaybeLogToEmail(v21, (const std::string::value_type *)(v20 + 4), *(const char **)(v20 + 30352));
  v23 = *(_QWORD *)(v5 + 8);
  result = google::LogDestination::LogToSinks(*(char *)(v23 + 30248), *(_QWORD *)(v23 + 30376), *(const char **)(v23 + 30368), (const char *)*(unsigned int *)(v23 + 30252), v23 + 30288, (const tm *)(v23 + *(_QWORD *)(v23 + 30344) + 4), (const char *)(*(_QWORD *)(v23 + 30352) + ~*(_QWORD *)(v23 + 30344)));
LABEL_13:
  if (*(_BYTE *)(*(_QWORD *)(v5 + 8) + 30248) == 3 && google::exit_on_dfatal != 0)
  {
    if (*(_BYTE *)(*(_QWORD *)(v5 + 8) + 30385))
    {
      v24 = *((_DWORD *)&google::fatal_msg_data_exclusive + 7563);
      qword_255DB2F80 = qword_25408A4A8;
      dword_255DB2F88 = v24;
      qword_255DB2F90 = (uint64_t)&google::fatal_msg_data_exclusive + qword_25408A488 + 4;
      dword_255DB3098 = google::GetStackTrace((google *)&unk_255DB2F98, (void **)0x20, 4);
      google::glog_internal_namespace_::SetCrashReason((unint64_t)&qword_255DB2F80);
      v25 = *(_QWORD *)(v5 + 8);
      v26 = *(_DWORD *)(v25 + 30352);
      if (v26 >= 255)
        v26 = 255;
      v27 = v26;
      memcpy(byte_255DB2E80, (const void *)(v25 + 4), v26);
      byte_255DB2E80[v27] = 0;
      qword_255DB2CD8 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 30280);
    }
    if (!fLB::FLAGS_logtostderr)
    {
      if (google::LogDestination::log_destinations_[0])
        (*(void (**)(_QWORD, uint64_t, _QWORD, const char *, _QWORD))(**(_QWORD **)(google::LogDestination::log_destinations_[0]
                                                                                            + 336)
                                                                              + 16))(*(_QWORD *)(google::LogDestination::log_destinations_[0] + 336), 1, 0, "", 0);
      if (qword_255DB35C0)
        (*(void (**)(_QWORD, uint64_t, _QWORD, const char *, _QWORD))(**(_QWORD **)(qword_255DB35C0 + 336)
                                                                              + 16))(*(_QWORD *)(qword_255DB35C0 + 336), 1, 0, "", 0);
      if (qword_255DB35C8)
        (*(void (**)(_QWORD, uint64_t, _QWORD, const char *, _QWORD))(**(_QWORD **)(qword_255DB35C8 + 336)
                                                                              + 16))(*(_QWORD *)(qword_255DB35C8 + 336), 1, 0, "", 0);
      if (qword_255DB35D0)
        (*(void (**)(_QWORD, uint64_t, _QWORD, const char *, _QWORD))(**(_QWORD **)(qword_255DB35D0 + 336)
                                                                              + 16))(*(_QWORD *)(qword_255DB35D0 + 336), 1, 0, "", 0);
    }
    glog_internal_namespace_::Mutex::Unlock((uint64_t)&stru_255DB2CE0);
    google::LogDestination::WaitForSinks(*(_QWORD *)(v5 + 8));
    v28 = (google *)write(2, "*** Check failure stack trace: ***\n", 0x23uLL);
    google::g_logging_fail_func(v28);
  }
  return result;
}

void sub_22D9E2660(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x10B2C4074DC3037);
  _Unwind_Resume(a1);
}

uint64_t google::LogMessage::stream(google::LogMessage *this)
{
  return *((_QWORD *)this + 1) + 30008;
}

google::LogMessage *google::LogMessage::LogMessage(google::LogMessage *this, google::glog_internal_namespace_ *a2, int a3)
{
  *(_QWORD *)this = 0;
  google::LogMessage::Init((unint64_t *)this, a2, a3, 0, (uint64_t)google::LogMessage::SendToLog, 0);
  return this;
}

google::LogMessage *google::LogMessage::LogMessage(google::LogMessage *this, google::glog_internal_namespace_ *a2, int a3, int a4)
{
  *(_QWORD *)this = 0;
  google::LogMessage::Init((unint64_t *)this, a2, a3, a4, (uint64_t)google::LogMessage::SendToLog, 0);
  return this;
}

uint64_t google::LogMessage::SendToSinkAndLog(google::LogMessage *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *((_QWORD *)this + 1);
  v7 = *(_QWORD *)(v6 + 30272);
  if (v7)
  {
    v8 = *(_QWORD *)(v6 + 30352);
    if (!v8 || *(_BYTE *)(v8 + v6 + 3) != 10)
    {
      google::RawLog__(3, (google::glog_internal_namespace_ *)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/glog-0.4.0/src/logging.cc", (const char *)0x607, "Check %s failed: %s", a5, "data_->num_chars_to_log_ > 0 && data_->message_text_[data_->num_chars_to_log_-1] == '\\n'", "");
      v6 = *((_QWORD *)this + 1);
      v7 = *(_QWORD *)(v6 + 30272);
      v8 = *(_QWORD *)(v6 + 30352);
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, *(char *)(v6 + 30248), *(_QWORD *)(v6 + 30376), *(_QWORD *)(v6 + 30368), *(unsigned int *)(v6 + 30252), v6 + 30288, v6 + *(_QWORD *)(v6 + 30344) + 4, v8 + ~*(_QWORD *)(v6 + 30344));
  }
  return google::LogMessage::SendToLog(this);
}

uint64_t google::LogMessage::SendToSink(google::LogMessage *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v6 = *((_QWORD *)this + 1);
  result = *(_QWORD *)(v6 + 30272);
  if (result)
  {
    v8 = *(_QWORD *)(v6 + 30352);
    if (!v8 || *(_BYTE *)(v8 + v6 + 3) != 10)
    {
      google::RawLog__(3, (google::glog_internal_namespace_ *)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/glog-0.4.0/src/logging.cc", (const char *)0x607, "Check %s failed: %s", a5, "data_->num_chars_to_log_ > 0 && data_->message_text_[data_->num_chars_to_log_-1] == '\\n'", "");
      v6 = *((_QWORD *)this + 1);
      result = *(_QWORD *)(v6 + 30272);
      v8 = *(_QWORD *)(v6 + 30352);
    }
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, *(char *)(v6 + 30248), *(_QWORD *)(v6 + 30376), *(_QWORD *)(v6 + 30368), *(unsigned int *)(v6 + 30252), v6 + 30288, v6 + *(_QWORD *)(v6 + 30344) + 4, v8 + ~*(_QWORD *)(v6 + 30344));
  }
  return result;
}

void google::LogMessage::~LogMessage(google::LogMessage *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  google::LogMessage::Flush((uint64_t)this);
  v2 = google::thread_msg_data();
  if (v3 == v2)
  {
    *(_QWORD *)(v3 + 30008) = &unk_24F97FD60;
    v5 = v3 + 30096;
    *(_QWORD *)(v3 + 30096) = &unk_24F97FD88;
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x22E31DEF4](v5);
    *(_BYTE *)google::thread_data_available() = 1;
  }
  else
  {
    v4 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      *(_QWORD *)(v4 + 30008) = &unk_24F97FD60;
      *(_QWORD *)(v4 + 30096) = &unk_24F97FD88;
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x22E31DEF4](v4 + 30096);
      MEMORY[0x22E31DF78](v4, 0x10F0C4056CFB368);
    }
  }
}

void sub_22D9E29D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DEF4](v1);
  _Unwind_Resume(a1);
}

void sub_22D9E2A08(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x10F0C4056CFB368);
  _Unwind_Resume(a1);
}

uint64_t google::LogMessage::Flush(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  void (*v7)(_QWORD *);
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int *v11;
  int v12;

  v1 = *(_QWORD *)(this + 8);
  if (*(_BYTE *)(v1 + 30384) || fLI::FLAGS_minloglevel > *(char *)(v1 + 30248))
    return this;
  v2 = this;
  v3 = *(_QWORD *)(v1 + 30064) - *(_QWORD *)(v1 + 30056);
  *(_QWORD *)(v1 + 30352) = v3;
  *(_QWORD *)(v1 + 30360) = v3 - *(_QWORD *)(v1 + 30344);
  v4 = *(unsigned __int8 *)(v3 + v1 + 3);
  if (v4 == 10)
  {
    v5 = 0;
    if (!byte_255DB2DA8)
      goto LABEL_9;
  }
  else
  {
    v5 = *(_BYTE *)(v1 + v3 + 4);
    *(_QWORD *)(v1 + 30352) = v3 + 1;
    *(_BYTE *)(v1 + v3 + 4) = 10;
    if (!byte_255DB2DA8)
      goto LABEL_9;
  }
  if (pthread_rwlock_wrlock(&stru_255DB2CE0))
    goto LABEL_19;
LABEL_9:
  v6 = *(_QWORD *)(v2 + 8);
  v7 = *(void (**)(_QWORD *))(v6 + 30256);
  v8 = *(_QWORD *)(v6 + 30264);
  v9 = (_QWORD *)(v2 + (v8 >> 1));
  if ((v8 & 1) != 0)
    v7 = *(void (**)(_QWORD *))(*v9 + v7);
  v7(v9);
  v10 = *(_QWORD *)(v2 + 8);
  ++google::LogMessage::num_messages_[*(char *)(v10 + 30248)];
  if (!byte_255DB2DA8)
    goto LABEL_14;
  if (pthread_rwlock_unlock(&stru_255DB2CE0))
LABEL_19:
    abort();
  v10 = *(_QWORD *)(v2 + 8);
LABEL_14:
  this = google::LogDestination::WaitForSinks(v10);
  if (v4 != 10)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 30352) + *(_QWORD *)(v2 + 8) + 3) = v5;
  v11 = *(int **)(v2 + 8);
  v12 = *v11;
  if (*v11)
  {
    this = (uint64_t)__error();
    *(_DWORD *)this = v12;
    v11 = *(int **)(v2 + 8);
  }
  *((_BYTE *)v11 + 30384) = 1;
  return this;
}

void sub_22D9E2BF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  glog_internal_namespace_::MutexLock::~MutexLock((glog_internal_namespace_::MutexLock *)va);
  _Unwind_Resume(a1);
}

uint64_t google::LogDestination::WaitForSinks(uint64_t result)
{
  _QWORD *v1;
  unsigned int i;
  uint64_t v3;
  uint64_t (*v4)(google::LogMessage *, uint64_t, uint64_t, uint64_t, const char *);
  BOOL v5;
  _BOOL4 v6;
  BOOL v7;

  v1 = (_QWORD *)result;
  if (byte_25408B368)
  {
    result = pthread_rwlock_rdlock(&google::LogDestination::sink_mutex_);
    if ((_DWORD)result)
      goto LABEL_25;
  }
  if (google::LogDestination::sinks_)
  {
    for (i = ((*(_QWORD *)(google::LogDestination::sinks_ + 8) - *(_QWORD *)google::LogDestination::sinks_) >> 3) - 1;
          (i & 0x80000000) == 0;
          --i)
    {
      v3 = *(_QWORD *)(*(_QWORD *)google::LogDestination::sinks_ + 8 * i);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  v4 = (uint64_t (*)(google::LogMessage *, uint64_t, uint64_t, uint64_t, const char *))v1[3782];
  v5 = !v1[3783] || (v1[3783] & 1 | (unint64_t)v4) == 0;
  v6 = v5;
  v7 = v4 == google::LogMessage::SendToSinkAndLog || v4 == google::LogMessage::SendToSink;
  if (v7 && v6)
  {
    result = v1[3784];
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  }
  if (byte_25408B368)
  {
    result = pthread_rwlock_unlock(&google::LogDestination::sink_mutex_);
    if ((_DWORD)result)
LABEL_25:
      abort();
  }
  return result;
}

void sub_22D9E2D10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  glog_internal_namespace_::MutexLock::~MutexLock((glog_internal_namespace_::MutexLock *)va);
  _Unwind_Resume(a1);
}

size_t google::ColoredWriteToStderr(google *this, void *__ptr, size_t __size)
{
  BOOL v5;
  const char *v6;
  FILE **v7;

  if (google::LogDestination::terminal_supports_color_)
    v5 = fLB::FLAGS_colorlogtostderr == 0;
  else
    v5 = 1;
  if (!v5)
  {
    if (this >= 4)
      google::ColoredWriteToStderr();
    if (((_DWORD)this - 2) < 2)
    {
      v6 = "1";
LABEL_14:
      v7 = (FILE **)MEMORY[0x24BDAC8D8];
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "\x1B[0;3%sm", v6);
      fwrite(__ptr, __size, 1uLL, *v7);
      return fwrite("\x1B[m", 3uLL, 1uLL, *v7);
    }
    if ((_DWORD)this)
    {
      if ((_DWORD)this != 1)
        google::ColoredWriteToStderr();
      v6 = "3";
      goto LABEL_14;
    }
  }
  return fwrite(__ptr, __size, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
}

uint64_t google::LogDestination::LogToSinks(uint64_t this, uint64_t a2, const char *a3, const char *a4, uint64_t a5, const tm *a6, const char *a7)
{
  uint64_t v13;
  unsigned int i;
  uint64_t v15;

  v13 = this;
  if (byte_25408B368)
  {
    this = pthread_rwlock_rdlock(&google::LogDestination::sink_mutex_);
    if ((_DWORD)this)
      goto LABEL_10;
  }
  if (google::LogDestination::sinks_)
  {
    for (i = ((*(_QWORD *)(google::LogDestination::sinks_ + 8) - *(_QWORD *)google::LogDestination::sinks_) >> 3) - 1;
          (i & 0x80000000) == 0;
          --i)
    {
      v15 = *(_QWORD *)(*(_QWORD *)google::LogDestination::sinks_ + 8 * i);
      this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, const char *, uint64_t, const tm *, const char *))(*(_QWORD *)v15 + 16))(v15, v13, a2, a3, a4, a5, a6, a7);
    }
  }
  if (byte_25408B368)
  {
    this = pthread_rwlock_unlock(&google::LogDestination::sink_mutex_);
    if ((_DWORD)this)
LABEL_10:
      abort();
  }
  return this;
}

void sub_22D9E2F20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  glog_internal_namespace_::MutexLock::~MutexLock((glog_internal_namespace_::MutexLock *)va);
  _Unwind_Resume(a1);
}

void google::LogDestination::MaybeLogToEmail(google::LogDestination *this, const std::string::value_type *a2, const char *a3)
{
  int v6;
  std::string::size_type v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  std::string::size_type size;
  const std::string::value_type *v12;
  std::string::size_type v13;
  const char *v14;
  google::glog_internal_namespace_ *v15;
  std::string::size_type v16;
  size_t v17;
  std::string::value_type *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  std::string::size_type v23;
  unint64_t v24;
  utsname *p_dst;
  uint64_t v26;
  uint64_t v27;
  std::string *p_p;
  const char *v29;
  const char *v30;
  int v31;
  size_t v32;
  size_t v33;
  unint64_t v34;
  size_t v35;
  char *v36;
  utsname *v37;
  char *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::string *v44;
  const char *v45;
  std::string *v46;
  std::string __p;
  void *v48;
  unint64_t v49;
  int64_t v50;
  std::string v51;
  utsname __dst;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  if (google::LogDestination::email_logging_severity_ <= (int)this || fLI::FLAGS_logemaillevel <= (int)this)
  {
    v6 = (int)this;
    if (fLS::FLAGS_alsologtoemail_buf[23] < 0)
      std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)fLS::FLAGS_alsologtoemail_buf, *(std::string::size_type *)&fLS::FLAGS_alsologtoemail_buf[8]);
    else
      v51 = *(std::string *)fLS::FLAGS_alsologtoemail_buf;
    v7 = byte_255DB358F;
    v8 = byte_255DB358F;
    v9 = qword_255DB3580;
    if (byte_255DB358F >= 0)
      v10 = byte_255DB358F;
    else
      v10 = qword_255DB3580;
    if (v10)
    {
      size = HIBYTE(v51.__r_.__value_.__r.__words[2]);
      if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v51.__r_.__value_.__l.__size_;
      if (size)
      {
        std::string::append(&v51, ",");
        v7 = byte_255DB358F;
        v9 = qword_255DB3580;
        v8 = byte_255DB358F;
      }
      if (v8 >= 0)
        v12 = (const std::string::value_type *)&google::LogDestination::addresses_;
      else
        v12 = (const std::string::value_type *)google::LogDestination::addresses_;
      if (v8 >= 0)
        v13 = v7;
      else
        v13 = v9;
      std::string::append(&v51, v12, v13);
    }
    v14 = google::LogSeverityNames[v6];
    v15 = (google::glog_internal_namespace_ *)strlen(v14);
    v16 = (std::string::size_type)v15 + 6;
    if ((unint64_t)v15 + 6 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v17 = (size_t)v15;
    if (v16 >= 0x17)
    {
      v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17)
        v19 = v16 | 7;
      v20 = v19 + 1;
      v21 = (char *)operator new(v19 + 1);
      __p.__r_.__value_.__l.__size_ = v16;
      __p.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
      *(_DWORD *)v21 = 1196379227;
      v18 = v21 + 6;
      *((_WORD *)v21 + 2) = 8285;
    }
    else
    {
      __p.__r_.__value_.__r.__words[2] = 0;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = (_BYTE)v15 + 6;
      v18 = &__p.__r_.__value_.__s.__data_[6];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0x205D474F4C5BuLL;
      if (!v15)
      {
LABEL_32:
        v18[v17] = 0;
        v22 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v23 = __p.__r_.__value_.__l.__size_;
        v24 = v23 + 2;
        if (v23 + 2 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v24 >= 0x17)
        {
          v26 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v24 | 7) != 0x17)
            v26 = v24 | 7;
          v27 = v26 + 1;
          p_dst = (utsname *)operator new(v26 + 1);
          *(_QWORD *)&__dst.sysname[8] = v23 + 2;
          *(_QWORD *)&__dst.sysname[16] = v27 | 0x8000000000000000;
          *(_QWORD *)__dst.sysname = p_dst;
        }
        else
        {
          memset(&__dst, 0, 24);
          p_dst = &__dst;
          __dst.sysname[23] = v23 + 2;
          if (!v23)
            goto LABEL_46;
        }
        if (v22 >= 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        v15 = (google::glog_internal_namespace_ *)memmove(p_dst, p_p, v23);
LABEL_46:
        strcpy(&p_dst->sysname[v23], ": ");
        v29 = google::glog_internal_namespace_::ProgramInvocationShortName(v15);
        v30 = v29;
        v31 = __dst.sysname[23];
        if (__dst.sysname[23] >= 0)
          v32 = __dst.sysname[23];
        else
          v32 = *(_QWORD *)&__dst.sysname[8];
        v33 = strlen(v29);
        v34 = v32 + v33;
        if (v32 + v33 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v35 = v33;
        if (v34 > 0x16)
        {
          v42 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v34 | 7) != 0x17)
            v42 = v34 | 7;
          v43 = v42 + 1;
          v36 = (char *)operator new(v42 + 1);
          v49 = v34;
          v50 = v43 | 0x8000000000000000;
          v48 = v36;
          if (!v32)
          {
LABEL_56:
            v38 = &v36[v32];
            if (v35)
              memmove(v38, v30, v35);
            v38[v35] = 0;
            if (v31 < 0)
            {
              operator delete(*(void **)__dst.sysname);
              if ((v22 & 0x80000000) == 0)
                goto LABEL_60;
            }
            else if ((v22 & 0x80000000) == 0)
            {
              goto LABEL_60;
            }
            operator delete(__p.__r_.__value_.__l.__data_);
LABEL_60:
            v39 = *(_QWORD *)&google::LogDestination::hostname_[8];
            v40 = google::LogDestination::hostname_[23];
            if (google::LogDestination::hostname_[23] >= 0)
              v39 = google::LogDestination::hostname_[23];
            if (v39)
              goto LABEL_68;
            if (uname(&__dst))
              __dst.nodename[0] = 0;
            MEMORY[0x22E31DC84](google::LogDestination::hostname_, __dst.nodename);
            v41 = google::LogDestination::hostname_[23];
            v40 = google::LogDestination::hostname_[23];
            if (google::LogDestination::hostname_[23] < 0)
              v41 = *(_QWORD *)&google::LogDestination::hostname_[8];
            if (v41)
            {
LABEL_68:
              if ((v40 & 0x80) == 0)
              {
LABEL_69:
                __p = *(std::string *)google::LogDestination::hostname_;
                goto LABEL_78;
              }
            }
            else
            {
              MEMORY[0x22E31DC84](google::LogDestination::hostname_, "(unknown)");
              if ((google::LogDestination::hostname_[23] & 0x80) == 0)
                goto LABEL_69;
            }
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)google::LogDestination::hostname_, *(std::string::size_type *)&google::LogDestination::hostname_[8]);
LABEL_78:
            std::string::append(&__p, "\n\n");
            std::string::append(&__p, a2, (std::string::size_type)a3);
            if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v44 = &v51;
            else
              v44 = (std::string *)v51.__r_.__value_.__r.__words[0];
            if (v50 >= 0)
              v45 = (const char *)&v48;
            else
              v45 = (const char *)v48;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v46 = &__p;
            else
              v46 = (std::string *)__p.__r_.__value_.__r.__words[0];
            google::SendEmailInternal((google *)v44, v45, (const char *)v46, 0);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__p.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v50) & 0x80000000) == 0)
              {
LABEL_89:
                if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  return;
                goto LABEL_93;
              }
            }
            else if ((SHIBYTE(v50) & 0x80000000) == 0)
            {
              goto LABEL_89;
            }
            operator delete(v48);
            if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              return;
LABEL_93:
            operator delete(v51.__r_.__value_.__l.__data_);
            return;
          }
        }
        else
        {
          v49 = 0;
          v50 = 0;
          v48 = 0;
          v36 = (char *)&v48;
          HIBYTE(v50) = v32 + v33;
          if (!v32)
            goto LABEL_56;
        }
        if (v31 >= 0)
          v37 = &__dst;
        else
          v37 = *(utsname **)__dst.sysname;
        memmove(v36, v37, v32);
        goto LABEL_56;
      }
    }
    v15 = (google::glog_internal_namespace_ *)memmove(v18, v14, v17);
    goto LABEL_32;
  }
}

void sub_22D9E3448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t glog_internal_namespace_::Mutex::Unlock(uint64_t this)
{
  if (*(_BYTE *)(this + 200))
  {
    this = pthread_rwlock_unlock((pthread_rwlock_t *)this);
    if ((_DWORD)this)
      abort();
  }
  return this;
}

void google::LogMessage::Fail(google::LogMessage *this)
{
  google::g_logging_fail_func(this);
}

void google::logging_fail(google *this)
{
  abort();
}

google::LogMessageFatal *google::LogMessageFatal::LogMessageFatal(google::LogMessageFatal *this, google::glog_internal_namespace_ *a2, int a3)
{
  *(_QWORD *)this = 0;
  google::LogMessage::Init((unint64_t *)this, a2, a3, 3, (uint64_t)google::LogMessage::SendToLog, 0);
  return this;
}

void google::LogMessageFatal::~LogMessageFatal(google::LogMessageFatal *this)
{
  google::LogMessageFatal::~LogMessageFatal(this);
}

{
  google *v1;

  v1 = (google *)google::LogMessage::Flush((uint64_t)this);
  google::g_logging_fail_func(v1);
}

unint64_t google::StrError@<X0>(google *this@<X0>, _QWORD *a2@<X8>)
{
  int v2;
  unint64_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char __str[100];
  uint64_t v10;

  v2 = (int)this;
  v10 = *MEMORY[0x24BDAC8D0];
  if ((google::posix_strerror_r(this, __str, (char *)0x64) & 0x80000000) != 0 || !__str[0])
    snprintf(__str, 0x64uLL, "Error number %d", v2);
  result = strlen(__str);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
      goto LABEL_12;
  }
  result = (unint64_t)memcpy(a2, __str, v5);
LABEL_12:
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t google::SendEmailInternal(google *this, const char *__s, const char *a3, const char *a4)
{
  uint64_t v4;
  _QWORD *v7;
  size_t v8;
  _QWORD *v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;
  _QWORD *v13;
  size_t v14;
  int v15;
  size_t v16;
  unint64_t v17;
  void **p_dst;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  size_t v22;
  std::string::size_type v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  size_t v28;
  int v29;
  std::string::size_type size;
  unint64_t v31;
  char *v32;
  void **v33;
  char *v34;
  std::string *v35;
  int v36;
  size_t v37;
  unint64_t v38;
  void **v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const void *v44;
  size_t v45;
  std::string::size_type v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  size_t v51;
  int v52;
  std::string::size_type v53;
  unint64_t v54;
  void **v55;
  void **v56;
  char *v57;
  std::string *p_p;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  void **v63;
  uint64_t v64;
  const char *v65;
  FILE *v66;
  size_t v67;
  _QWORD *v69;
  size_t v70;
  _QWORD *v71;
  size_t v72;
  _QWORD *v73;
  _QWORD *v74;
  int *v75;
  void **v76;
  uint64_t v77;
  FILE *v78;
  int *v79;
  const char *v80;
  int v81;
  std::string v82;
  std::string __p;
  std::string v84;
  std::string v85;
  void **__dst;
  size_t v87;
  int64_t v88;
  void *v89;
  size_t v90;
  int64_t v91;
  void **v92;
  size_t v93;
  int64_t v94;
  void **v95;
  uint64_t v96;
  int64_t v97;

  if (!this)
    goto LABEL_132;
  v4 = (uint64_t)this;
  if (!*(_BYTE *)this)
    goto LABEL_132;
  v81 = (int)a4;
  if ((_DWORD)a4)
  {
    if (*_MergedGlobals_0[0] >= 1
      && (_MergedGlobals_0[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)_MergedGlobals_0, (int **)&fLI::FLAGS_v, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/glog-0.4.0/src/logging.cc", (const char *)1)))
    {
      v95 = 0;
      google::LogMessage::Init((unint64_t *)&v95, (google::glog_internal_namespace_ *)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/glog-0.4.0/src/logging.cc", 1797, 0, (uint64_t)google::LogMessage::SendToLog, 0);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(v96 + 30008), (uint64_t)"Trying to send TITLE:", 21);
      v8 = strlen(__s);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)__s, v8);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" BODY:", 6);
      v11 = strlen(a3);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)a3, v11);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" to ", 4);
      v14 = strlen((const char *)v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v4, v14);
      google::LogMessage::~LogMessage((google::LogMessage *)&v95);
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Trying to send TITLE: %s BODY: %s to %s\n", __s, a3, (const char *)this);
  }
  v15 = byte_25408B29F;
  if (byte_25408B29F >= 0)
    v16 = byte_25408B29F;
  else
    v16 = qword_25408B290;
  v17 = v16 + 3;
  if (v16 + 3 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v17 >= 0x17)
  {
    v19 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v19 = v17 | 7;
    v20 = v19 + 1;
    p_dst = (void **)operator new(v19 + 1);
    v87 = v16 + 3;
    v88 = v20 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    v87 = 0;
    v88 = 0;
    __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v88) = v16 + 3;
    if (!v16)
      goto LABEL_23;
  }
  if (v15 >= 0)
    v21 = &fLS::FLAGS_logmailer_buf;
  else
    v21 = (uint64_t *)fLS::FLAGS_logmailer_buf;
  memmove(p_dst, v21, v16);
LABEL_23:
  *(_DWORD *)((char *)p_dst + v16) = 7548192;
  v22 = strlen(__s);
  if (v22 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v23 = v22;
  if (v22 >= 0x17)
  {
    v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17)
      v25 = v22 | 7;
    v26 = v25 + 1;
    v24 = operator new(v25 + 1);
    v84.__r_.__value_.__l.__size_ = v23;
    v84.__r_.__value_.__r.__words[2] = v26 | 0x8000000000000000;
    v84.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
    goto LABEL_30;
  }
  *((_BYTE *)&v84.__r_.__value_.__s + 23) = v22;
  v24 = &v84;
  if (v22)
LABEL_30:
    memcpy(v24, __s, v23);
  *((_BYTE *)v24 + v23) = 0;
  google::ShellEscape(&v85, &v84);
  v27 = SHIBYTE(v88);
  if (v88 >= 0)
    v28 = HIBYTE(v88);
  else
    v28 = v87;
  v29 = SHIBYTE(v85.__r_.__value_.__r.__words[2]);
  if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v85.__r_.__value_.__r.__words[2]);
  else
    size = v85.__r_.__value_.__l.__size_;
  v31 = size + v28;
  if (size + v28 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v31 <= 0x16)
  {
    v90 = 0;
    v91 = 0;
    v89 = 0;
    v32 = (char *)&v89;
    HIBYTE(v91) = size + v28;
    if (!v28)
      goto LABEL_44;
    goto LABEL_40;
  }
  v40 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v31 | 7) != 0x17)
    v40 = v31 | 7;
  v41 = v40 + 1;
  v32 = (char *)operator new(v40 + 1);
  v90 = size + v28;
  v91 = v41 | 0x8000000000000000;
  v89 = v32;
  if (v28)
  {
LABEL_40:
    if (v27 >= 0)
      v33 = (void **)&__dst;
    else
      v33 = __dst;
    memmove(v32, v33, v28);
  }
LABEL_44:
  v34 = &v32[v28];
  if (size)
  {
    if (v29 >= 0)
      v35 = &v85;
    else
      v35 = (std::string *)v85.__r_.__value_.__r.__words[0];
    memmove(v34, v35, size);
  }
  v34[size] = 0;
  v36 = SHIBYTE(v91);
  if (v91 >= 0)
    v37 = HIBYTE(v91);
  else
    v37 = v90;
  v38 = v37 + 1;
  if (v37 + 1 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v38 >= 0x17)
  {
    v42 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v38 | 7) != 0x17)
      v42 = v38 | 7;
    v43 = v42 + 1;
    v39 = (void **)operator new(v42 + 1);
    v93 = v37 + 1;
    v94 = v43 | 0x8000000000000000;
    v92 = v39;
  }
  else
  {
    v93 = 0;
    v94 = 0;
    v92 = 0;
    v39 = (void **)&v92;
    HIBYTE(v94) = v37 + 1;
    if (!v37)
      goto LABEL_67;
  }
  if (v36 >= 0)
    v44 = &v89;
  else
    v44 = v89;
  memmove(v39, v44, v37);
LABEL_67:
  *(_WORD *)((char *)v39 + v37) = 32;
  v45 = strlen((const char *)v4);
  if (v45 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v46 = v45;
  if (v45 >= 0x17)
  {
    v48 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v45 | 7) != 0x17)
      v48 = v45 | 7;
    v49 = v48 + 1;
    v47 = operator new(v48 + 1);
    v82.__r_.__value_.__l.__size_ = v46;
    v82.__r_.__value_.__r.__words[2] = v49 | 0x8000000000000000;
    v82.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
    goto LABEL_74;
  }
  *((_BYTE *)&v82.__r_.__value_.__s + 23) = v45;
  v47 = &v82;
  if (v45)
LABEL_74:
    memcpy(v47, (const void *)v4, v46);
  *((_BYTE *)v47 + v46) = 0;
  google::ShellEscape(&__p, &v82);
  v50 = SHIBYTE(v94);
  if (v94 >= 0)
    v51 = HIBYTE(v94);
  else
    v51 = v93;
  v52 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v53 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v53 = __p.__r_.__value_.__l.__size_;
  v54 = v53 + v51;
  if (v53 + v51 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v54 <= 0x16)
  {
    v96 = 0;
    v97 = 0;
    v95 = 0;
    v55 = (void **)&v95;
    HIBYTE(v97) = v53 + v51;
    if (!v51)
      goto LABEL_88;
    goto LABEL_84;
  }
  v60 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v54 | 7) != 0x17)
    v60 = v54 | 7;
  v61 = v60 + 1;
  v55 = (void **)operator new(v60 + 1);
  v96 = v53 + v51;
  v97 = v61 | 0x8000000000000000;
  v95 = v55;
  if (v51)
  {
LABEL_84:
    if (v50 >= 0)
      v56 = (void **)&v92;
    else
      v56 = v92;
    memmove(v55, v56, v51);
  }
LABEL_88:
  v57 = (char *)v55 + v51;
  if (v53)
  {
    if (v52 >= 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(v57, p_p, v53);
  }
  v57[v53] = 0;
  if (v52 < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_95:
      if ((v50 & 0x80000000) == 0)
        goto LABEL_96;
      goto LABEL_108;
    }
  }
  else if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_95;
  }
  operator delete(v82.__r_.__value_.__l.__data_);
  if ((v50 & 0x80000000) == 0)
  {
LABEL_96:
    if ((SHIBYTE(v91) & 0x80000000) == 0)
      goto LABEL_97;
    goto LABEL_109;
  }
LABEL_108:
  operator delete(v92);
  if ((SHIBYTE(v91) & 0x80000000) == 0)
  {
LABEL_97:
    if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_98;
    goto LABEL_110;
  }
LABEL_109:
  operator delete(v89);
  if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_98:
    if ((SHIBYTE(v84.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_99;
    goto LABEL_111;
  }
LABEL_110:
  operator delete(v85.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v84.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_99:
    if ((SHIBYTE(v88) & 0x80000000) == 0)
      goto LABEL_100;
    goto LABEL_112;
  }
LABEL_111:
  operator delete(v84.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v88) & 0x80000000) == 0)
  {
LABEL_100:
    v59 = off_2540790F8[0];
    if (*off_2540790F8[0] < 4)
      goto LABEL_122;
    goto LABEL_113;
  }
LABEL_112:
  operator delete(__dst);
  v59 = off_2540790F8[0];
  if (*off_2540790F8[0] < 4)
    goto LABEL_122;
LABEL_113:
  if (v59 != &google::kLogSiteUninitialized
    || google::InitVLOG3__((google *)off_2540790F8, (int **)&fLI::FLAGS_v, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/glog-0.4.0/src/logging.cc", (const char *)4))
  {
    v92 = 0;
    google::LogMessage::Init((unint64_t *)&v92, (google::glog_internal_namespace_ *)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/glog-0.4.0/src/logging.cc", 1807, 0, (uint64_t)google::LogMessage::SendToLog, 0);
    v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(v93 + 30008), (uint64_t)"Mailing command: ", 17);
    if (v97 >= 0)
      v63 = (void **)&v95;
    else
      v63 = v95;
    if (v97 >= 0)
      v64 = HIBYTE(v97);
    else
      v64 = v96;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)v63, v64);
    google::LogMessage::~LogMessage((google::LogMessage *)&v92);
  }
LABEL_122:
  if (v97 >= 0)
    v65 = (const char *)&v95;
  else
    v65 = (const char *)v95;
  v66 = popen(v65, "w");
  if (v66)
  {
    if (a3)
    {
      v67 = strlen(a3);
      fwrite(a3, 1uLL, v67, v66);
    }
    if (pclose(v66) != -1)
    {
      LOBYTE(v4) = 1;
      if ((SHIBYTE(v97) & 0x80000000) == 0)
        goto LABEL_131;
      goto LABEL_130;
    }
    if (v81)
    {
      v89 = 0;
      google::LogMessage::Init((unint64_t *)&v89, (google::glog_internal_namespace_ *)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/glog-0.4.0/src/logging.cc", 1817, 2, (uint64_t)google::LogMessage::SendToLog, 0);
      v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(v90 + 30008), (uint64_t)"Problems sending mail to ", 25);
      v72 = strlen((const char *)v4);
      v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, v4, v72);
      v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)": ", 2);
      v75 = __error();
      google::StrError((google *)*v75, &v92);
      if (v94 >= 0)
        v76 = (void **)&v92;
      else
        v76 = v92;
      if (v94 >= 0)
        v77 = HIBYTE(v94);
      else
        v77 = v93;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)v76, v77);
      if (SHIBYTE(v94) < 0)
        operator delete(v92);
      google::LogMessage::~LogMessage((google::LogMessage *)&v89);
    }
    else
    {
      v78 = (FILE *)*MEMORY[0x24BDAC8D8];
      v79 = __error();
      google::StrError((google *)*v79, &v92);
      if (v94 >= 0)
        v80 = (const char *)&v92;
      else
        v80 = (const char *)v92;
      fprintf(v78, "Problems sending mail to %s: %s\n", (const char *)v4, v80);
      if (SHIBYTE(v94) < 0)
        operator delete(v92);
    }
    LOBYTE(v4) = 0;
    if (SHIBYTE(v97) < 0)
LABEL_130:
      operator delete(v95);
  }
  else if (v81)
  {
    v92 = 0;
    google::LogMessage::Init((unint64_t *)&v92, (google::glog_internal_namespace_ *)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/glog-0.4.0/src/logging.cc", 1827, 2, (uint64_t)google::LogMessage::SendToLog, 0);
    v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(v93 + 30008), (uint64_t)"Unable to send mail to ", 23);
    v70 = strlen((const char *)v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, v4, v70);
    google::LogMessage::~LogMessage((google::LogMessage *)&v92);
    if (SHIBYTE(v97) < 0)
      goto LABEL_130;
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Unable to send mail to %s\n", (const char *)v4);
    if (SHIBYTE(v97) < 0)
      goto LABEL_130;
  }
LABEL_131:
  if (!v66)
LABEL_132:
    LOBYTE(v4) = 0;
  return v4 & 1;
}

void sub_22D9E3FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;

  if (*(char *)(v49 - 113) < 0)
    operator delete(*(void **)(v49 - 136));
  google::LogMessage::~LogMessage((google::LogMessage *)&a44);
  if (*(char *)(v49 - 89) < 0)
    operator delete(*(void **)(v49 - 112));
  _Unwind_Resume(a1);
}

void sub_22D9E4128()
{
  uint64_t v0;

  google::LogMessage::~LogMessage((google::LogMessage *)(v0 - 112));
  JUMPOUT(0x22D9E4120);
}

uint64_t google::GetLoggingDirectories(google *this)
{
  char **v2;
  char **v3;
  uint64_t *v4;
  size_t v5;
  size_t v6;
  __int128 *p_dst;
  std::string *v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  int v16;
  __int128 __dst;
  unint64_t v18;

  if (google::logging_directories_list)
    return google::logging_directories_list;
  v2 = (char **)operator new();
  v3 = v2;
  v2[1] = 0;
  v2[2] = 0;
  *v2 = 0;
  google::logging_directories_list = (uint64_t)v2;
  if ((byte_255DB351F & 0x80000000) == 0)
  {
    if (byte_255DB351F)
    {
      v4 = &fLS::FLAGS_log_dir_buf;
      v5 = strlen((const char *)&fLS::FLAGS_log_dir_buf);
      if (v5 < 0x7FFFFFFFFFFFFFF8)
        goto LABEL_6;
LABEL_13:
      std::string::__throw_length_error[abi:ne180100]();
    }
LABEL_14:
    google::GetTempDirectories((uint64_t)v2);
    v10 = google::logging_directories_list;
    HIBYTE(v18) = 2;
    strcpy((char *)&__dst, "./");
    v11 = *(_QWORD *)(google::logging_directories_list + 8);
    if (v11 < *(_QWORD *)(google::logging_directories_list + 16))
    {
      v12 = __dst;
      *(_QWORD *)(v11 + 16) = v18;
      *(_OWORD *)v11 = v12;
      *(_QWORD *)(v10 + 8) = v11 + 24;
      return google::logging_directories_list;
    }
    v15 = std::vector<std::string>::__push_back_slow_path<std::string>((char **)google::logging_directories_list, (uint64_t)&__dst);
    v16 = SHIBYTE(v18);
    *(_QWORD *)(v10 + 8) = v15;
    if ((v16 & 0x80000000) == 0)
      return google::logging_directories_list;
LABEL_26:
    operator delete((void *)__dst);
    return google::logging_directories_list;
  }
  if (!qword_255DB3510)
    goto LABEL_14;
  v4 = (uint64_t *)fLS::FLAGS_log_dir_buf;
  v5 = strlen((const char *)fLS::FLAGS_log_dir_buf);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_13;
LABEL_6:
  v6 = v5;
  if (v5 >= 0x17)
  {
    v13 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v13 = v5 | 7;
    v14 = v13 + 1;
    p_dst = (__int128 *)operator new(v13 + 1);
    *((_QWORD *)&__dst + 1) = v6;
    v18 = v14 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v18) = v5;
    p_dst = &__dst;
    if (!v5)
    {
      LOBYTE(__dst) = 0;
      v8 = (std::string *)v3[1];
      if (v8 < (std::string *)v3[2])
        goto LABEL_9;
      goto LABEL_20;
    }
  }
  memmove(p_dst, v4, v6);
  *((_BYTE *)p_dst + v6) = 0;
  v8 = (std::string *)v3[1];
  if (v8 >= (std::string *)v3[2])
  {
LABEL_20:
    v3[1] = (char *)std::vector<std::string>::__push_back_slow_path<std::string>(v3, (uint64_t)&__dst);
    if ((SHIBYTE(v18) & 0x80000000) == 0)
      return google::logging_directories_list;
    goto LABEL_26;
  }
LABEL_9:
  if (SHIBYTE(v18) < 0)
  {
    std::string::__init_copy_ctor_external(v8, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
  }
  else
  {
    v9 = __dst;
    v8->__r_.__value_.__r.__words[2] = v18;
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  v3[1] = (char *)&v8[1];
  v3[1] = (char *)&v8[1];
  if (SHIBYTE(v18) < 0)
    goto LABEL_26;
  return google::logging_directories_list;
}

void sub_22D9E433C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v15 + 8) = v16;
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void google::GetTempDirectories(uint64_t a1)
{
  char *v2;
  char *i;
  char *v4;
  uint64_t j;
  char v6;
  unint64_t v7;
  size_t v8;
  std::string::size_type v9;
  std::string *p_dst;
  uint64_t v11;
  uint64_t v12;
  std::string::size_type size;
  std::string *v14;
  unint64_t v15;
  __int128 v16;
  std::string *v17;
  char v18;
  stat v19;
  std::string __dst;
  _QWORD v21[6];

  v21[4] = *MEMORY[0x24BDAC8D0];
  v2 = *(char **)a1;
  for (i = *(char **)(a1 + 8); i != v2; i -= 24)
  {
    if (*(i - 1) < 0)
      operator delete(*((void **)i - 3));
  }
  *(_QWORD *)(a1 + 8) = v2;
  v4 = getenv("TEST_TMPDIR");
  v21[0] = v4;
  v21[1] = getenv("TMPDIR");
  v21[2] = getenv("TMP");
  v21[3] = "/tmp";
  for (j = 1; ; ++j)
  {
    v7 = j - 1;
    if (v4)
      break;
    if (v7 > 2)
      return;
LABEL_11:
    v4 = (char *)v21[j];
  }
  v8 = strlen(v4);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v9 = v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    p_dst = (std::string *)operator new(v11 + 1);
    __dst.__r_.__value_.__l.__size_ = v9;
    __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_22;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v8;
  p_dst = &__dst;
  if (v8)
LABEL_22:
    memmove(p_dst, v4, v9);
  p_dst->__r_.__value_.__s.__data_[v9] = 0;
  size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v14 = &__dst;
  }
  else
  {
    size = __dst.__r_.__value_.__l.__size_;
    v14 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if (v14->__r_.__value_.__s.__data_[size - 1] != 47)
    std::string::append(&__dst, "/");
  v15 = *(_QWORD *)(a1 + 8);
  if (v15 >= *(_QWORD *)(a1 + 16))
  {
    v17 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a1, (uint64_t)&__dst);
  }
  else
  {
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    }
    else
    {
      v16 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
      *(_QWORD *)(v15 + 16) = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
      *(_OWORD *)v15 = v16;
    }
    v17 = (std::string *)(v15 + 24);
    *(_QWORD *)(a1 + 8) = v15 + 24;
  }
  *(_QWORD *)(a1 + 8) = v17;
  if (stat(v4, &v19) || (v19.st_mode & 0xF000) != 0x4000)
  {
    v18 = 1;
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_7;
  }
  else
  {
    v18 = 0;
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_7;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_7:
  if (v7 < 3)
    v6 = v18;
  else
    v6 = 0;
  if ((v6 & 1) != 0)
    goto LABEL_11;
}

void sub_22D9E45C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  uint64_t v34;

  *(_QWORD *)(v33 + 8) = v34;
  if (a33 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t google::posix_strerror_r(google *this, char *a2, char *a3)
{
  int v5;
  int v6;
  int v7;
  uint64_t result;
  int *v9;

  if (a2 && a3)
  {
    v5 = (int)this;
    *a2 = 0;
    v6 = *__error();
    *__error() = 0;
    v7 = strerror_r(v5, a2, (size_t)a3);
    if (*__error())
    {
      *a2 = 0;
      return 0xFFFFFFFFLL;
    }
    else
    {
      v9 = __error();
      result = 0;
      *v9 = v6;
      a3[(_QWORD)a2 - 1] = 0;
      if (v7 && (char *)v7 != a2)
      {
        *a2 = 0;
        if (v7 >= *MEMORY[0x24BDB00D8])
        {
          strncat(a2, (const char *)v7, (size_t)(a3 - 1));
          return 0;
        }
        else
        {
          return 0xFFFFFFFFLL;
        }
      }
    }
  }
  else
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
  return result;
}

unint64_t *google::LogMessageFatal::LogMessageFatal(unint64_t *a1, google::glog_internal_namespace_ *a2, int a3, uint64_t **a4)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  *a1 = 0;
  google::LogMessage::Init(a1, a2, a3, 3, (uint64_t)google::LogMessage::SendToLog, 0);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1[1] + 30008), (uint64_t)"Check failed: ", 14);
  v7 = *((char *)*a4 + 23);
  if (v7 >= 0)
    v8 = (uint64_t)*a4;
  else
    v8 = **a4;
  if (v7 >= 0)
    v9 = *((unsigned __int8 *)*a4 + 23);
  else
    v9 = (*a4)[1];
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
  return a1;
}

void sub_22D9E47B0(_Unwind_Exception *a1)
{
  google::LogMessage *v1;

  google::LogMessage::~LogMessage(v1);
  _Unwind_Resume(a1);
}

google::base::CheckOpMessageBuilder *google::base::CheckOpMessageBuilder::CheckOpMessageBuilder(google::base::CheckOpMessageBuilder *this, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  size_t v10;
  _QWORD *v11;

  v4 = operator new();
  v5 = MEMORY[0x24BEDB870];
  v6 = MEMORY[0x24BEDB870] + 64;
  *(_QWORD *)(v4 + 112) = MEMORY[0x24BEDB870] + 64;
  v7 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v8 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  *(_QWORD *)v4 = v7;
  *(_QWORD *)(v4 + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)(v4 + *(_QWORD *)(*(_QWORD *)v4 - 24));
  std::ios_base::init(v9, (void *)(v4 + 8));
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  *(_QWORD *)v4 = v5 + 24;
  *(_QWORD *)(v4 + 112) = v6;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(v4 + 8) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_DWORD *)(v4 + 104) = 16;
  *(_QWORD *)this = v4;
  v10 = strlen(a2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)v4, (uint64_t)a2, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" (", 2);
  return this;
}

void sub_22D9E48E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::ostream::~ostream();
  MEMORY[0x22E31DEF4](v2);
  MEMORY[0x22E31DF78](v1, 0x10B3C4083609F1ALL);
  _Unwind_Resume(a1);
}

void google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder(google::base::CheckOpMessageBuilder *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t google::base::CheckOpMessageBuilder::ForVar2(google::base::CheckOpMessageBuilder *this)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" vs. ", 5);
  return *(_QWORD *)this;
}

uint64_t google::base::CheckOpMessageBuilder::NewString(google::base::CheckOpMessageBuilder *this)
{
  uint64_t v1;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
  v1 = operator new();
  std::stringbuf::str();
  return v1;
}

void sub_22D9E49F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

void google::`anonymous namespace'::LogFileObject::~LogFileObject(google::_anonymous_namespace_::LogFileObject *this)
{
  pthread_rwlock_t *v2;
  FILE *v3;

  *(_QWORD *)this = &off_24F97FD08;
  v2 = (pthread_rwlock_t *)((char *)this + 8);
  if (*((_BYTE *)this + 208) && pthread_rwlock_wrlock((pthread_rwlock_t *)((char *)this + 8)))
    goto LABEL_17;
  v3 = (FILE *)*((_QWORD *)this + 37);
  if (v3)
  {
    fclose(v3);
    *((_QWORD *)this + 37) = 0;
  }
  if (*((_BYTE *)this + 208) && pthread_rwlock_unlock(v2))
LABEL_17:
    abort();
  if (*((char *)this + 295) < 0)
  {
    operator delete(*((void **)this + 34));
    if ((*((char *)this + 271) & 0x80000000) == 0)
    {
LABEL_9:
      if ((*((char *)this + 247) & 0x80000000) == 0)
        goto LABEL_10;
LABEL_14:
      operator delete(*((void **)this + 28));
      if (!*((_BYTE *)this + 208))
        return;
      goto LABEL_15;
    }
  }
  else if ((*((char *)this + 271) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(*((void **)this + 31));
  if (*((char *)this + 247) < 0)
    goto LABEL_14;
LABEL_10:
  if (!*((_BYTE *)this + 208))
    return;
LABEL_15:
  if (pthread_rwlock_destroy(v2))
    abort();
}

{
  JUMPOUT(0x22E31DF78);
}

void sub_22D9E4AF0(_Unwind_Exception *a1)
{
  pthread_rwlock_t *v1;
  uint64_t v2;

  if (*(char *)(v2 + 295) < 0)
    operator delete(*(void **)(v2 + 272));
  {
    if (pthread_rwlock_destroy(v1))
      abort();
  }
  _Unwind_Resume(a1);
}

void sub_22D9E4B68(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x10B3C40E61D296FLL);
  _Unwind_Resume(a1);
}

pthread_rwlock_t *google::`anonymous namespace'::LogFileObject::Write(google::_anonymous_namespace_::LogFileObject *this, char a2, time_t a3, const char *a4, int a5)
{
  google::_anonymous_namespace_::LogFileObject *v7;
  pthread_rwlock_t *v8;
  unsigned int v9;
  uint64_t HasChanged;
  FILE *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  std::string::size_type v15;
  std::string::size_type v16;
  std::ios_base *v17;
  char *v18;
  const std::locale::facet *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  google::glog_internal_namespace_ *v27;
  google::glog_internal_namespace_ *v28;
  const char *v29;
  size_t v30;
  std::string::size_type v31;
  std::string *v32;
  uint64_t v33;
  uint64_t v34;
  google::glog_internal_namespace_ *v35;
  char *v36;
  __int128 v37;
  uint64_t v38;
  int v39;
  std::string::size_type size;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  std::string *v45;
  int v46;
  size_t v47;
  int v48;
  size_t v49;
  unint64_t v50;
  char *v51;
  const void *v52;
  char *v53;
  const void *v54;
  int v55;
  size_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const void *v63;
  int v64;
  size_t v65;
  int v66;
  size_t v67;
  unint64_t v68;
  char *v69;
  const void *v70;
  char *v71;
  utsname *v72;
  int v73;
  size_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const void *v81;
  char *v82;
  int v83;
  size_t v84;
  size_t v85;
  unint64_t v86;
  size_t v87;
  char *v88;
  const void *v89;
  char *v90;
  int v91;
  size_t v92;
  unint64_t v93;
  char *p_str;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  const void *p_p;
  std::string *v100;
  const void ***LoggingDirectories;
  const void **v102;
  int v103;
  size_t v104;
  unint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  const void *v109;
  int v110;
  size_t v111;
  int v112;
  std::string::size_type v113;
  unint64_t v114;
  char *v115;
  const void *v116;
  char *v117;
  std::string *v118;
  google::_anonymous_namespace_::LogFileObject *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  char v124;
  google::glog_internal_namespace_ *v125;
  unsigned int v126;
  FILE *v127;
  int v128;
  __darwin_time_t v129;
  uint64_t v130;
  pthread_rwlock_t *result;
  std::ios_base *v132;
  char *v133;
  const std::locale::facet *v134;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *v140;
  _QWORD *v141;
  _QWORD *v142;
  _QWORD *v143;
  _QWORD *v144;
  _QWORD *v145;
  _QWORD *v146;
  _QWORD *v147;
  uint64_t v148;
  char v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  _QWORD *v157;
  _QWORD *v158;
  int v159;
  utsname *v160;
  int v161;
  char v162;
  std::string::size_type v163;
  std::string::size_type v164;
  FILE **v165;
  const void ***v167;
  std::string *v168;
  std::string __dst[3];
  __int128 v170;
  __int128 v171;
  int v172;
  uint64_t v173;
  void *v174;
  size_t v175;
  int64_t v176;
  void *v177;
  size_t v178;
  int64_t v179;
  void *v180;
  size_t v181;
  int64_t v182;
  void *v183;
  size_t v184;
  int64_t v185;
  void *v186;
  size_t v187;
  int64_t v188;
  void *__p;
  size_t v190;
  int64_t v191;
  std::string __str;
  void *v193;
  size_t v194;
  uint64_t v195;
  void *v196[2];
  char v197;
  std::string::size_type v198;
  uint64_t v199[8];
  __int128 v200;
  __int128 v201;
  int v202;
  uint64_t v203;
  tm v204;
  pthread_rwlock_t *v205;
  time_t v206;
  utsname v207;
  uint64_t v208;

  v7 = this;
  v208 = *MEMORY[0x24BDAC8D0];
  v206 = a3;
  v8 = (pthread_rwlock_t *)((char *)this + 8);
  v205 = v8;
  if (*((_BYTE *)v7 + 208))
  {
    v8 = (pthread_rwlock_t *)pthread_rwlock_wrlock(v8);
    if ((_DWORD)v8)
      abort();
  }
  if (*((_BYTE *)v7 + 216))
  {
    if (*((char *)v7 + 247) < 0)
    {
      if (!*((_QWORD *)v7 + 29))
        goto LABEL_228;
    }
    else if (!*((_BYTE *)v7 + 247))
    {
      goto LABEL_228;
    }
  }
  v9 = fLI::FLAGS_max_log_size;
  if (fLI::FLAGS_max_log_size <= 1)
    v9 = 1;
  if (v9 <= *((_DWORD *)v7 + 79) >> 20
    || (HasChanged = google::glog_internal_namespace_::PidHasChanged((google::glog_internal_namespace_ *)v8),
        (_DWORD)HasChanged))
  {
    v165 = (FILE **)((char *)v7 + 296);
    v11 = (FILE *)*((_QWORD *)v7 + 37);
    if (v11)
      fclose(v11);
    *((_QWORD *)v7 + 37) = 0;
    *(_OWORD *)((char *)v7 + 308) = xmmword_22DCE63F0;
  }
  else
  {
    v165 = (FILE **)((char *)v7 + 296);
    if (*((_QWORD *)v7 + 37))
      goto LABEL_216;
  }
  v12 = *((_DWORD *)v7 + 80) + 1;
  *((_DWORD *)v7 + 80) = v12;
  if (v12 == 32)
  {
    *((_DWORD *)v7 + 80) = 0;
    localtime_r(&v206, &v204);
    v13 = MEMORY[0x24BEDB870];
    v14 = MEMORY[0x24BEDB870] + 64;
    v15 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
    v16 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
    v203 = MEMORY[0x24BEDB870] + 64;
    v198 = v15;
    v163 = v16;
    v164 = v15;
    *(uint64_t *)((char *)&v199[-1] + *(_QWORD *)(v15 - 24)) = v16;
    v17 = (std::ios_base *)((char *)&v199[-1] + *(_QWORD *)(v198 - 24));
    std::ios_base::init(v17, v199);
    v17[1].__vftable = 0;
    v17[1].__fmtflags_ = -1;
    v198 = v13 + 24;
    v203 = v14;
    std::streambuf::basic_streambuf();
    v199[0] = MEMORY[0x24BEDB848] + 16;
    v200 = 0u;
    v201 = 0u;
    v202 = 16;
    v18 = (char *)&v199[-1] + *(_QWORD *)(v198 - 24);
    if (*((_DWORD *)v18 + 36) == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)&v199[-1] + *(_QWORD *)(v198 - 24)));
      v19 = std::locale::use_facet((const std::locale *)&v207, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 32);
      std::locale::~locale((std::locale *)&v207);
    }
    *((_DWORD *)v18 + 36) = 48;
    v20 = (_QWORD *)std::ostream::operator<<();
    *(_QWORD *)((char *)v20 + *(_QWORD *)(*v20 - 24) + 24) = 2;
    v21 = (_QWORD *)std::ostream::operator<<();
    *(_QWORD *)((char *)v21 + *(_QWORD *)(*v21 - 24) + 24) = 2;
    v22 = (_QWORD *)std::ostream::operator<<();
    v207.sysname[0] = 45;
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)&v207, 1);
    *(_QWORD *)((char *)v23 + *(_QWORD *)(*v23 - 24) + 24) = 2;
    v24 = (_QWORD *)std::ostream::operator<<();
    *(_QWORD *)((char *)v24 + *(_QWORD *)(*v24 - 24) + 24) = 2;
    v25 = (_QWORD *)std::ostream::operator<<();
    *(_QWORD *)((char *)v25 + *(_QWORD *)(*v25 - 24) + 24) = 2;
    v26 = (_QWORD *)std::ostream::operator<<();
    v207.sysname[0] = 46;
    v27 = (google::glog_internal_namespace_ *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)&v207, 1);
    google::glog_internal_namespace_::GetMainThreadPid(v27);
    std::ostream::operator<<();
    v28 = (google::glog_internal_namespace_ *)std::stringbuf::str();
    if (*((_BYTE *)v7 + 216))
    {
        goto LABEL_240;
      goto LABEL_213;
    }
    v162 = a2;
    v29 = google::glog_internal_namespace_::ProgramInvocationShortName(v28);
    v30 = strlen(v29);
    if (v30 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v31 = v30;
    if (v30 >= 0x17)
    {
      v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v30 | 7) != 0x17)
        v33 = v30 | 7;
      v34 = v33 + 1;
      v32 = (std::string *)operator new(v33 + 1);
      __dst[0].__r_.__value_.__l.__size_ = v31;
      __dst[0].__r_.__value_.__r.__words[2] = v34 | 0x8000000000000000;
      __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
    }
    else
    {
      *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) = v30;
      v32 = __dst;
      if (!v30)
      {
LABEL_31:
        v32->__r_.__value_.__s.__data_[v31] = 0;
        v193 = 0;
        v194 = 0;
        v195 = 0;
        if (uname(&v207))
          v207.nodename[0] = 0;
        v35 = (google::glog_internal_namespace_ *)MEMORY[0x22E31DC84](&v193, v207.nodename);
        v36 = (char *)google::glog_internal_namespace_::MyUserName(v35);
        if (v36[23] < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v207, *(const std::string::value_type **)v36, *((_QWORD *)v36 + 1));
        }
        else
        {
          v37 = *(_OWORD *)v36;
          *(_QWORD *)&v207.sysname[16] = *((_QWORD *)v36 + 2);
          *(_OWORD *)v207.sysname = v37;
        }
        v38 = v207.sysname[23];
        if (v207.sysname[23] < 0)
          v38 = *(_QWORD *)&v207.sysname[8];
        if (!v38)
          MEMORY[0x22E31DC84](&v207, "invalid-user");
        v39 = SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]);
        if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__dst[0].__r_.__value_.__r.__words[2]);
        else
          size = __dst[0].__r_.__value_.__l.__size_;
        v41 = size + 1;
        if (size + 1 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v161 = a5;
        if (v41 >= 0x17)
        {
          v43 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v41 | 7) != 0x17)
            v43 = v41 | 7;
          v44 = v43 + 1;
          v42 = (char *)operator new(v43 + 1);
          v175 = size + 1;
          v176 = v44 | 0x8000000000000000;
          v174 = v42;
        }
        else
        {
          v175 = 0;
          v176 = 0;
          v174 = 0;
          v42 = (char *)&v174;
          HIBYTE(v176) = size + 1;
          if (!size)
            goto LABEL_54;
        }
        if (v39 >= 0)
          v45 = __dst;
        else
          v45 = (std::string *)__dst[0].__r_.__value_.__r.__words[0];
        memmove(v42, v45, size);
LABEL_54:
        *(_WORD *)&v42[size] = 46;
        v46 = SHIBYTE(v176);
        if (v176 >= 0)
          v47 = HIBYTE(v176);
        else
          v47 = v175;
        v48 = SHIBYTE(v195);
        if (v195 >= 0)
          v49 = HIBYTE(v195);
        else
          v49 = v194;
        v50 = v49 + v47;
        if (v49 + v47 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v50 > 0x16)
        {
          v59 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v50 | 7) != 0x17)
            v59 = v50 | 7;
          v60 = v59 + 1;
          v51 = (char *)operator new(v59 + 1);
          v178 = v49 + v47;
          v179 = v60 | 0x8000000000000000;
          v177 = v51;
          if (!v47)
          {
LABEL_67:
            v53 = &v51[v47];
            if (v49)
            {
              if (v48 >= 0)
                v54 = &v193;
              else
                v54 = v193;
              memmove(v53, v54, v49);
            }
            v53[v49] = 0;
            v55 = SHIBYTE(v179);
            if (v179 >= 0)
              v56 = HIBYTE(v179);
            else
              v56 = v178;
            v57 = v56 + 1;
            if (v56 + 1 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            if (v57 >= 0x17)
            {
              v61 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v57 | 7) != 0x17)
                v61 = v57 | 7;
              v62 = v61 + 1;
              v58 = (char *)operator new(v61 + 1);
              v181 = v56 + 1;
              v182 = v62 | 0x8000000000000000;
              v180 = v58;
            }
            else
            {
              v181 = 0;
              v182 = 0;
              v180 = 0;
              v58 = (char *)&v180;
              HIBYTE(v182) = v56 + 1;
              if (!v56)
                goto LABEL_90;
            }
            if (v55 >= 0)
              v63 = &v177;
            else
              v63 = v177;
            memmove(v58, v63, v56);
LABEL_90:
            *(_WORD *)&v58[v56] = 46;
            v64 = SHIBYTE(v182);
            if (v182 >= 0)
              v65 = HIBYTE(v182);
            else
              v65 = v181;
            v66 = v207.sysname[23];
            if (v207.sysname[23] >= 0)
              v67 = v207.sysname[23];
            else
              v67 = *(_QWORD *)&v207.sysname[8];
            v68 = v67 + v65;
            if (v67 + v65 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            if (v68 > 0x16)
            {
              v77 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v68 | 7) != 0x17)
                v77 = v68 | 7;
              v78 = v77 + 1;
              v69 = (char *)operator new(v77 + 1);
              v184 = v67 + v65;
              v185 = v78 | 0x8000000000000000;
              v183 = v69;
              if (!v65)
              {
LABEL_103:
                v71 = &v69[v65];
                if (v67)
                {
                  if (v66 >= 0)
                    v72 = &v207;
                  else
                    v72 = *(utsname **)v207.sysname;
                  memmove(v71, v72, v67);
                }
                v71[v67] = 0;
                v73 = SHIBYTE(v185);
                if (v185 >= 0)
                  v74 = HIBYTE(v185);
                else
                  v74 = v184;
                v75 = v74 + 5;
                if (v74 + 5 > 0x7FFFFFFFFFFFFFF7)
                  std::string::__throw_length_error[abi:ne180100]();
                if (v75 >= 0x17)
                {
                  v79 = (v75 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v75 | 7) != 0x17)
                    v79 = v75 | 7;
                  v80 = v79 + 1;
                  v76 = operator new(v79 + 1);
                  v187 = v74 + 5;
                  v188 = v80 | 0x8000000000000000;
                  v186 = v76;
                }
                else
                {
                  v187 = 0;
                  v188 = 0;
                  v186 = 0;
                  v76 = &v186;
                  HIBYTE(v188) = v74 + 5;
                  if (!v74)
                    goto LABEL_126;
                }
                if (v73 >= 0)
                  v81 = &v183;
                else
                  v81 = v183;
                memmove(v76, v81, v74);
LABEL_126:
                strcpy((char *)v76 + v74, ".log.");
                v82 = google::LogSeverityNames[*((int *)v7 + 76)];
                v83 = SHIBYTE(v188);
                if (v188 >= 0)
                  v84 = HIBYTE(v188);
                else
                  v84 = v187;
                v85 = strlen(google::LogSeverityNames[*((int *)v7 + 76)]);
                v86 = v84 + v85;
                if (v84 + v85 > 0x7FFFFFFFFFFFFFF7)
                  std::string::__throw_length_error[abi:ne180100]();
                v87 = v85;
                if (v86 > 0x16)
                {
                  v95 = (v86 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v86 | 7) != 0x17)
                    v95 = v86 | 7;
                  v96 = v95 + 1;
                  v88 = (char *)operator new(v95 + 1);
                  v190 = v86;
                  v191 = v96 | 0x8000000000000000;
                  __p = v88;
                  if (!v84)
                  {
LABEL_136:
                    v90 = &v88[v84];
                    if (v87)
                      memmove(v90, v82, v87);
                    v90[v87] = 0;
                    v91 = SHIBYTE(v191);
                    if (v191 >= 0)
                      v92 = HIBYTE(v191);
                    else
                      v92 = v190;
                    v93 = v92 + 1;
                    if (v92 + 1 > 0x7FFFFFFFFFFFFFF7)
                      std::string::__throw_length_error[abi:ne180100]();
                    if (v93 >= 0x17)
                    {
                      v97 = (v93 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v93 | 7) != 0x17)
                        v97 = v93 | 7;
                      v98 = v97 + 1;
                      p_str = (char *)operator new(v97 + 1);
                      __str.__r_.__value_.__l.__size_ = v92 + 1;
                      __str.__r_.__value_.__r.__words[2] = v98 | 0x8000000000000000;
                      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)p_str;
                    }
                    else
                    {
                      memset(&__str, 0, sizeof(__str));
                      p_str = (char *)&__str;
                      *((_BYTE *)&__str.__r_.__value_.__s + 23) = v92 + 1;
                      if (!v92)
                        goto LABEL_156;
                    }
                    if (v91 >= 0)
                      p_p = &__p;
                    else
                      p_p = __p;
                    memmove(p_str, p_p, v92);
LABEL_156:
                    *(_WORD *)&p_str[v92] = 46;
                    v100 = std::string::operator=(__dst, &__str);
                    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(__str.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(v191) & 0x80000000) == 0)
                      {
LABEL_158:
                        if ((SHIBYTE(v188) & 0x80000000) == 0)
                          goto LABEL_159;
                        goto LABEL_233;
                      }
                    }
                    else if ((SHIBYTE(v191) & 0x80000000) == 0)
                    {
                      goto LABEL_158;
                    }
                    operator delete(__p);
                    if ((SHIBYTE(v188) & 0x80000000) == 0)
                    {
LABEL_159:
                      if ((SHIBYTE(v185) & 0x80000000) == 0)
                        goto LABEL_160;
                      goto LABEL_234;
                    }
LABEL_233:
                    operator delete(v186);
                    if ((SHIBYTE(v185) & 0x80000000) == 0)
                    {
LABEL_160:
                      if ((SHIBYTE(v182) & 0x80000000) == 0)
                        goto LABEL_161;
                      goto LABEL_235;
                    }
LABEL_234:
                    operator delete(v183);
                    if ((SHIBYTE(v182) & 0x80000000) == 0)
                    {
LABEL_161:
                      if ((SHIBYTE(v179) & 0x80000000) == 0)
                        goto LABEL_162;
                      goto LABEL_236;
                    }
LABEL_235:
                    operator delete(v180);
                    if ((SHIBYTE(v179) & 0x80000000) == 0)
                    {
LABEL_162:
                      if ((SHIBYTE(v176) & 0x80000000) == 0)
                      {
LABEL_163:
                        LoggingDirectories = (const void ***)google::GetLoggingDirectories((google *)v100);
                        v102 = *LoggingDirectories;
                        if (*LoggingDirectories == LoggingDirectories[1])
                        {
LABEL_208:
                          a5 = v161;
                          a2 = v162;
                          v123 = 1;
                          if (v207.sysname[23] < 0)
                            goto LABEL_209;
                          goto LABEL_210;
                        }
                        v167 = LoggingDirectories;
                        v168 = (std::string *)((char *)v7 + 224);
                        while (1)
                        {
                          v103 = *((char *)v102 + 23);
                          if (v103 >= 0)
                            v104 = *((unsigned __int8 *)v102 + 23);
                          else
                            v104 = (size_t)v102[1];
                          v105 = v104 + 1;
                          if (v104 + 1 > 0x7FFFFFFFFFFFFFF7)
                            std::string::__throw_length_error[abi:ne180100]();
                          if (v105 >= 0x17)
                          {
                            v107 = (v105 & 0xFFFFFFFFFFFFFFF8) + 8;
                            if ((v105 | 7) != 0x17)
                              v107 = v105 | 7;
                            v108 = v107 + 1;
                            v106 = (char *)operator new(v107 + 1);
                            v190 = v104 + 1;
                            v191 = v108 | 0x8000000000000000;
                            __p = v106;
                          }
                          else
                          {
                            v190 = 0;
                            v191 = 0;
                            __p = 0;
                            v106 = (char *)&__p;
                            HIBYTE(v191) = v104 + 1;
                            if (!v104)
                              goto LABEL_179;
                          }
                          if (v103 >= 0)
                            v109 = v102;
                          else
                            v109 = *v102;
                          memmove(v106, v109, v104);
LABEL_179:
                          *(_WORD *)&v106[v104] = 47;
                          v110 = SHIBYTE(v191);
                          if (v191 >= 0)
                            v111 = HIBYTE(v191);
                          else
                            v111 = v190;
                          v112 = SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]);
                          if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            v113 = HIBYTE(__dst[0].__r_.__value_.__r.__words[2]);
                          else
                            v113 = __dst[0].__r_.__value_.__l.__size_;
                          v114 = v113 + v111;
                          if (v113 + v111 > 0x7FFFFFFFFFFFFFF7)
                            std::string::__throw_length_error[abi:ne180100]();
                          if (v114 <= 0x16)
                          {
                            memset(&__str, 0, sizeof(__str));
                            v115 = (char *)&__str;
                            *((_BYTE *)&__str.__r_.__value_.__s + 23) = v113 + v111;
                            if (!v111)
                              goto LABEL_192;
LABEL_188:
                            if (v110 >= 0)
                              v116 = &__p;
                            else
                              v116 = __p;
                            memmove(v115, v116, v111);
                            goto LABEL_192;
                          }
                          v119 = v7;
                          v120 = v13;
                          v121 = (v114 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v114 | 7) != 0x17)
                            v121 = v114 | 7;
                          v122 = v121 + 1;
                          v115 = (char *)operator new(v121 + 1);
                          __str.__r_.__value_.__l.__size_ = v113 + v111;
                          __str.__r_.__value_.__r.__words[2] = v122 | 0x8000000000000000;
                          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v115;
                          v13 = v120;
                          v7 = v119;
                          if (v111)
                            goto LABEL_188;
LABEL_192:
                          v117 = &v115[v111];
                          if (v113)
                          {
                            if (v112 >= 0)
                              v118 = __dst;
                            else
                              v118 = (std::string *)__dst[0].__r_.__value_.__r.__words[0];
                            memmove(v117, v118, v113);
                          }
                          v117[v113] = 0;
                          std::string::operator=(v168, &__str);
                          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                          {
                            operator delete(__str.__r_.__value_.__l.__data_);
                            if ((v110 & 0x80000000) == 0)
                              goto LABEL_199;
                          }
                          else if ((v110 & 0x80000000) == 0)
                          {
                            goto LABEL_199;
                          }
                          operator delete(__p);
LABEL_199:
                          {
                            v123 = 0;
                            a5 = v161;
                            a2 = v162;
                            if (v207.sysname[23] < 0)
LABEL_209:
                              operator delete(*(void **)v207.sysname);
LABEL_210:
                            if (SHIBYTE(v195) < 0)
                            {
                              operator delete(v193);
                              if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
                                goto LABEL_239;
LABEL_212:
                              if ((v123 & 1) != 0)
                                goto LABEL_213;
LABEL_240:
                              v173 = v13 + 64;
                              __dst[0].__r_.__value_.__r.__words[0] = v164;
                              *(std::string::size_type *)((char *)__dst[0].__r_.__value_.__r.__words
                                                        + *(_QWORD *)(v164 - 24)) = v163;
                              v132 = (std::ios_base *)((char *)__dst
                                                     + *(_QWORD *)(__dst[0].__r_.__value_.__r.__words[0] - 24));
                              std::ios_base::init(v132, &__dst[0].__r_.__value_.__r.__words[1]);
                              v132[1].__vftable = 0;
                              v132[1].__fmtflags_ = -1;
                              __dst[0].__r_.__value_.__r.__words[0] = v13 + 24;
                              v173 = v13 + 64;
                              std::streambuf::basic_streambuf();
                              __dst[0].__r_.__value_.__l.__size_ = MEMORY[0x24BEDB848] + 16;
                              v170 = 0u;
                              v171 = 0u;
                              v172 = 16;
                              v133 = (char *)__dst + *(_QWORD *)(__dst[0].__r_.__value_.__r.__words[0] - 24);
                              if (*((_DWORD *)v133 + 36) == -1)
                              {
                                std::ios_base::getloc((const std::ios_base *)((char *)__dst
                                                                            + *(_QWORD *)(__dst[0].__r_.__value_.__r.__words[0]
                                                                                        - 24)));
                                v134 = std::locale::use_facet((const std::locale *)&v207, MEMORY[0x24BEDB350]);
                                ((void (*)(const std::locale::facet *, uint64_t))v134->__vftable[2].~facet_0)(v134, 32);
                                std::locale::~locale((std::locale *)&v207);
                              }
                              *((_DWORD *)v133 + 36) = 48;
                              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__dst, (uint64_t)"Log file created at: ", 21);
                              v135 = (_QWORD *)std::ostream::operator<<();
                              v207.sysname[0] = 47;
                              v136 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)&v207, 1);
                              *(_QWORD *)((char *)v136 + *(_QWORD *)(*v136 - 24) + 24) = 2;
                              v137 = (_QWORD *)std::ostream::operator<<();
                              v207.sysname[0] = 47;
                              v138 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)&v207, 1);
                              *(_QWORD *)((char *)v138 + *(_QWORD *)(*v138 - 24) + 24) = 2;
                              v139 = (_QWORD *)std::ostream::operator<<();
                              v207.sysname[0] = 32;
                              v140 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v139, (uint64_t)&v207, 1);
                              *(_QWORD *)((char *)v140 + *(_QWORD *)(*v140 - 24) + 24) = 2;
                              v141 = (_QWORD *)std::ostream::operator<<();
                              v207.sysname[0] = 58;
                              v142 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v141, (uint64_t)&v207, 1);
                              *(_QWORD *)((char *)v142 + *(_QWORD *)(*v142 - 24) + 24) = 2;
                              v143 = (_QWORD *)std::ostream::operator<<();
                              v207.sysname[0] = 58;
                              v144 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v143, (uint64_t)&v207, 1);
                              *(_QWORD *)((char *)v144 + *(_QWORD *)(*v144 - 24) + 24) = 2;
                              v145 = (_QWORD *)std::ostream::operator<<();
                              v207.sysname[0] = 10;
                              v146 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v145, (uint64_t)&v207, 1);
                              v147 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v146, (uint64_t)"Running on machine: ", 20);
                              v148 = google::LogDestination::hostname_[23];
                              v149 = google::LogDestination::hostname_[23];
                              v150 = *(_QWORD *)&google::LogDestination::hostname_[8];
                              if (google::LogDestination::hostname_[23] >= 0)
                                v151 = google::LogDestination::hostname_[23];
                              else
                                v151 = *(_QWORD *)&google::LogDestination::hostname_[8];
                              if (!v151)
                              {
                                if (uname(&v207))
                                  v207.nodename[0] = 0;
                                MEMORY[0x22E31DC84](google::LogDestination::hostname_, v207.nodename);
                                v148 = google::LogDestination::hostname_[23];
                                v149 = google::LogDestination::hostname_[23];
                                v150 = *(_QWORD *)&google::LogDestination::hostname_[8];
                                if (google::LogDestination::hostname_[23] >= 0)
                                  v152 = google::LogDestination::hostname_[23];
                                else
                                  v152 = *(_QWORD *)&google::LogDestination::hostname_[8];
                                if (!v152)
                                {
                                  MEMORY[0x22E31DC84](google::LogDestination::hostname_, "(unknown)");
                                  v148 = google::LogDestination::hostname_[23];
                                  v150 = *(_QWORD *)&google::LogDestination::hostname_[8];
                                  v149 = google::LogDestination::hostname_[23];
                                }
                              }
                              if (v149 >= 0)
                                v153 = google::LogDestination::hostname_;
                              else
                                v153 = *(char **)google::LogDestination::hostname_;
                              if (v149 >= 0)
                                v154 = v148;
                              else
                                v154 = v150;
                              v155 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v147, (uint64_t)v153, v154);
                              v207.sysname[0] = 10;
                              v156 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v155, (uint64_t)&v207, 1);
                              v157 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)"Log line format: [IWEF]mmdd hh:mm:ss.uuuuuu ", 44);
                              v158 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v157, (uint64_t)"threadid file:line] msg", 23);
                              v207.sysname[0] = 10;
                              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158, (uint64_t)&v207, 1);
                              std::stringbuf::str();
                              if (v207.sysname[23] >= 0)
                                v159 = v207.sysname[23];
                              else
                                v159 = *(_DWORD *)&v207.sysname[8];
                              if (v207.sysname[23] >= 0)
                                v160 = &v207;
                              else
                                v160 = *(utsname **)v207.sysname;
                              fwrite(v160, 1uLL, v159, *v165);
                              *((_DWORD *)v7 + 79) += v159;
                              *((_DWORD *)v7 + 77) += v159;
                              if (v207.sysname[23] < 0)
                                operator delete(*(void **)v207.sysname);
                              std::ostringstream::~ostringstream((uint64_t)__dst);
                              v124 = 1;
                              if (v197 < 0)
                                goto LABEL_214;
                            }
                            else
                            {
                              if ((SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                goto LABEL_212;
LABEL_239:
                              operator delete(__dst[0].__r_.__value_.__l.__data_);
                              if ((v123 & 1) == 0)
                                goto LABEL_240;
LABEL_213:
                              v124 = 0;
                              if (v197 < 0)
LABEL_214:
                                operator delete(v196[0]);
                            }
                            HasChanged = std::ostringstream::~ostringstream((uint64_t)&v198);
                            if ((v124 & 1) != 0)
                            {
LABEL_216:
                              if ((google::stop_writing & 1) != 0)
                              {
                                if (google::glog_internal_namespace_::CycleClock_Now((google::glog_internal_namespace_ *)HasChanged) >= *((_QWORD *)v7 + 41))
                                  google::stop_writing = 0;
                              }
                              else
                              {
                                *__error() = 0;
                                v125 = (google::glog_internal_namespace_ *)fwrite(a4, 1uLL, a5, *v165);
                                if (fLB::FLAGS_stop_logging_if_full_disk
                                  && (v125 = (google::glog_internal_namespace_ *)__error(), *(_DWORD *)v125 == 28))
                                {
                                  google::stop_writing = 1;
                                }
                                else
                                {
                                  *((_DWORD *)v7 + 79) += a5;
                                  v126 = *((_DWORD *)v7 + 77) + a5;
                                  *((_DWORD *)v7 + 77) = v126;
                                  if ((a2 & 1) != 0
                                    || v126 > 0xF423F
                                    || google::glog_internal_namespace_::CycleClock_Now(v125) >= *((_QWORD *)v7 + 41))
                                  {
                                    v127 = *v165;
                                    if (*v165)
                                    {
                                      v127 = (FILE *)fflush(v127);
                                      *((_DWORD *)v7 + 77) = 0;
                                    }
                                    v128 = fLI::FLAGS_logbufsecs;
                                    v129 = google::glog_internal_namespace_::CycleClock_Now((google::glog_internal_namespace_ *)v127);
                                    ORToolsCpL2AccessVariable::~ORToolsCpL2AccessVariable((ORToolsCpL2AccessVariable *)(1000000 * v128));
                                    *((_QWORD *)v7 + 41) = v130 + v129;
                                  }
                                }
                              }
                            }
                            goto LABEL_228;
                          }
                          v102 += 3;
                          if (v102 == v167[1])
                            goto LABEL_208;
                        }
                      }
LABEL_237:
                      operator delete(v174);
                      goto LABEL_163;
                    }
LABEL_236:
                    operator delete(v177);
                    if ((SHIBYTE(v176) & 0x80000000) == 0)
                      goto LABEL_163;
                    goto LABEL_237;
                  }
                }
                else
                {
                  v190 = 0;
                  v191 = 0;
                  __p = 0;
                  v88 = (char *)&__p;
                  HIBYTE(v191) = v84 + v85;
                  if (!v84)
                    goto LABEL_136;
                }
                if (v83 >= 0)
                  v89 = &v186;
                else
                  v89 = v186;
                memmove(v88, v89, v84);
                goto LABEL_136;
              }
            }
            else
            {
              v184 = 0;
              v185 = 0;
              v183 = 0;
              v69 = (char *)&v183;
              HIBYTE(v185) = v67 + v65;
              if (!v65)
                goto LABEL_103;
            }
            if (v64 >= 0)
              v70 = &v180;
            else
              v70 = v180;
            memmove(v69, v70, v65);
            goto LABEL_103;
          }
        }
        else
        {
          v178 = 0;
          v179 = 0;
          v177 = 0;
          v51 = (char *)&v177;
          HIBYTE(v179) = v49 + v47;
          if (!v47)
            goto LABEL_67;
        }
        if (v46 >= 0)
          v52 = &v174;
        else
          v52 = v174;
        memmove(v51, v52, v47);
        goto LABEL_67;
      }
    }
    memmove(v32, v29, v31);
    goto LABEL_31;
  }
LABEL_228:
  result = v205;
  if (LOBYTE(v205[1].__sig))
  {
    result = (pthread_rwlock_t *)pthread_rwlock_unlock(v205);
    if ((_DWORD)result)
      abort();
  }
  return result;
}

void sub_22D9E5CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  void *a72;

  if (SLOBYTE(STACK[0x387]) < 0)
  {
    operator delete((void *)STACK[0x370]);
    if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0)
  {
LABEL_3:
    if ((a22 & 0x80000000) == 0)
    {
LABEL_8:
      if (SLOBYTE(STACK[0x21F]) < 0)
        operator delete((void *)STACK[0x208]);
      std::ostringstream::~ostringstream((uint64_t)&STACK[0x220]);
      glog_internal_namespace_::MutexLock::~MutexLock((glog_internal_namespace_::MutexLock *)&STACK[0x360]);
      _Unwind_Resume(a1);
    }
LABEL_7:
    operator delete(a17);
    goto LABEL_8;
  }
  operator delete(a72);
  if ((a22 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

void google::`anonymous namespace'::LogFileObject::Flush(google::_anonymous_namespace_::LogFileObject *this)
{
  pthread_rwlock_t *v2;
  FILE *v3;
  int v4;
  __darwin_time_t v5;
  uint64_t v6;

  v2 = (pthread_rwlock_t *)((char *)this + 8);
  if (*((_BYTE *)this + 208) && pthread_rwlock_wrlock((pthread_rwlock_t *)((char *)this + 8)))
    goto LABEL_8;
  v3 = (FILE *)*((_QWORD *)this + 37);
  if (v3)
  {
    v3 = (FILE *)fflush(v3);
    *((_DWORD *)this + 77) = 0;
  }
  v4 = fLI::FLAGS_logbufsecs;
  v5 = google::glog_internal_namespace_::CycleClock_Now((google::glog_internal_namespace_ *)v3);
  ORToolsCpL2AccessVariable::~ORToolsCpL2AccessVariable((ORToolsCpL2AccessVariable *)(1000000 * v4));
  *((_QWORD *)this + 41) = v6 + v5;
  if (*((_BYTE *)this + 208))
  {
    if (pthread_rwlock_unlock(v2))
LABEL_8:
      abort();
  }
}

void sub_22D9E608C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  glog_internal_namespace_::MutexLock::~MutexLock((glog_internal_namespace_::MutexLock *)va);
  _Unwind_Resume(a1);
}

uint64_t google::`anonymous namespace'::LogFileObject::LogSize(google::_anonymous_namespace_::LogFileObject *this)
{
  pthread_rwlock_t *v2;
  uint64_t v3;

  v2 = (pthread_rwlock_t *)((char *)this + 8);
  if (*((_BYTE *)this + 208) && pthread_rwlock_wrlock((pthread_rwlock_t *)((char *)this + 8))
    || (v3 = *((unsigned int *)this + 79), *((_BYTE *)this + 208)) && pthread_rwlock_unlock(v2))
  {
    abort();
  }
  return v3;
}

uint64_t google::`anonymous namespace'::LogFileObject::CreateLogfile(_QWORD *a1, const void **a2)
{
  int v2;
  size_t v3;
  int v4;
  size_t v5;
  unint64_t v6;
  void **p_dst;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  char *v13;
  const void *v14;
  int v15;
  size_t v16;
  int v17;
  size_t v18;
  unint64_t v19;
  char *v20;
  void **v21;
  char *v22;
  const void *v23;
  char *v24;
  int v25;
  int v26;
  FILE *v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  size_t v33;
  unint64_t v34;
  char *v35;
  std::string *p_p;
  uint64_t v37;
  uint64_t v38;
  const void *v39;
  const char *v40;
  int v41;
  std::string::size_type size;
  size_t v43;
  unint64_t v44;
  size_t v45;
  void **v46;
  std::string *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _BYTE *p_str;
  uint64_t v53;
  uint64_t v54;
  const std::string::value_type *v55;
  std::string::size_type v56;
  std::string *v57;
  const char *v58;
  std::string *v59;
  int v60;
  size_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  int v67;
  size_t v68;
  int v69;
  size_t v70;
  unint64_t v71;
  char *v72;
  const void *v73;
  char *v74;
  void **v75;
  std::string *v76;
  std::string *v77;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  size_t v82;
  int64_t v83;
  std::string __str;
  std::string __p;
  void **__dst;
  size_t v87;
  int64_t v88;
  void *v89;
  size_t v90;
  int64_t v91;

  v2 = *((char *)a1 + 247);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a1 + 247);
  else
    v3 = a1[29];
  v4 = *((char *)a1 + 295);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a1 + 295);
  else
    v5 = a1[35];
  v6 = v5 + v3;
  if (v5 + v3 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v6 <= 0x16)
  {
    v87 = 0;
    v88 = 0;
    __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v88) = v5 + v3;
    if (!v3)
      goto LABEL_18;
    goto LABEL_14;
  }
  v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v6 | 7) != 0x17)
    v10 = v6 | 7;
  v11 = v10 + 1;
  p_dst = (void **)operator new(v10 + 1);
  v87 = v5 + v3;
  v88 = v11 | 0x8000000000000000;
  __dst = p_dst;
  if (v3)
  {
LABEL_14:
    if (v2 >= 0)
      v12 = a1 + 28;
    else
      v12 = (const void *)a1[28];
    memmove(p_dst, v12, v3);
  }
LABEL_18:
  v13 = (char *)p_dst + v3;
  if (v5)
  {
    if (v4 >= 0)
      v14 = a1 + 34;
    else
      v14 = (const void *)a1[34];
    memmove(v13, v14, v5);
  }
  v13[v5] = 0;
  v15 = SHIBYTE(v88);
  if (v88 >= 0)
    v16 = HIBYTE(v88);
  else
    v16 = v87;
  v17 = *((char *)a2 + 23);
  if (v17 >= 0)
    v18 = *((unsigned __int8 *)a2 + 23);
  else
    v18 = (size_t)a2[1];
  v19 = v18 + v16;
  if (v18 + v16 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v19 <= 0x16)
  {
    v90 = 0;
    v91 = 0;
    v89 = 0;
    v20 = (char *)&v89;
    HIBYTE(v91) = v18 + v16;
    if (!v16)
      goto LABEL_36;
    goto LABEL_32;
  }
  v29 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v19 | 7) != 0x17)
    v29 = v19 | 7;
  v30 = v29 + 1;
  v20 = (char *)operator new(v29 + 1);
  v90 = v18 + v16;
  v91 = v30 | 0x8000000000000000;
  v89 = v20;
  if (v16)
  {
LABEL_32:
    if (v15 >= 0)
      v21 = (void **)&__dst;
    else
      v21 = __dst;
    memmove(v20, v21, v16);
  }
LABEL_36:
  v22 = &v20[v16];
  if (v18)
  {
    if (v17 >= 0)
      v23 = a2;
    else
      v23 = *a2;
    memmove(v22, v23, v18);
  }
  v22[v18] = 0;
  if (v15 < 0)
    operator delete(__dst);
  if (v91 >= 0)
    v24 = (char *)&v89;
  else
    v24 = (char *)v89;
  v25 = open(v24, 2561, fLI::FLAGS_logfile_mode);
  v26 = v25;
  if (v25 == -1)
  {
    v31 = 0;
    if (SHIBYTE(v91) < 0)
      goto LABEL_164;
    return v31;
  }
  fcntl(v25, 2, 1);
  v27 = fdopen(v26, "a");
  a1[37] = v27;
  if (!v27)
  {
    close(v26);
    unlink(v24);
    v31 = 0;
    if (SHIBYTE(v91) < 0)
      goto LABEL_164;
    return v31;
  }
  v28 = *((unsigned __int8 *)a1 + 271);
  if (*((char *)a1 + 271) < 0)
  {
    if (!a1[32])
      goto LABEL_163;
LABEL_60:
    v32 = strrchr(v24, 47);
    if ((v28 & 0x80u) == 0)
      v33 = v28;
    else
      v33 = a1[32];
    v34 = v33 + 1;
    if (v33 + 1 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v35 = v32;
    if (v34 >= 0x17)
    {
      v37 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v34 | 7) != 0x17)
        v37 = v34 | 7;
      v38 = v37 + 1;
      p_p = (std::string *)operator new(v37 + 1);
      __p.__r_.__value_.__l.__size_ = v33 + 1;
      __p.__r_.__value_.__r.__words[2] = v38 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    }
    else
    {
      memset(&__p, 0, sizeof(__p));
      p_p = &__p;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = v33 + 1;
      if (!v33)
        goto LABEL_74;
    }
    if ((v28 & 0x80u) == 0)
      v39 = a1 + 31;
    else
      v39 = (const void *)a1[31];
    memmove(p_p, v39, v33);
LABEL_74:
    *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v33) = 46;
    v40 = google::LogSeverityNames[*((int *)a1 + 76)];
    v41 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v43 = strlen(v40);
    v44 = size + v43;
    if (size + v43 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v45 = v43;
    if (v44 > 0x16)
    {
      v49 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v44 | 7) != 0x17)
        v49 = v44 | 7;
      v50 = v49 + 1;
      v46 = (void **)operator new(v49 + 1);
      v87 = v44;
      v88 = v50 | 0x8000000000000000;
      __dst = v46;
      if (!size)
      {
LABEL_84:
        v48 = (char *)v46 + size;
        if (v45)
          memmove(v48, v40, v45);
        v48[v45] = 0;
        if (v41 < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          memset(&__p, 0, sizeof(__p));
          if (!v35)
            goto LABEL_104;
        }
        else
        {
          memset(&__p, 0, sizeof(__p));
          if (!v35)
            goto LABEL_104;
        }
        v51 = v35 - v24 + 1;
        if (v51 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v51 >= 0x17)
        {
          v53 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v51 | 7) != 0x17)
            v53 = v51 | 7;
          v54 = v53 + 1;
          p_str = operator new(v53 + 1);
          __str.__r_.__value_.__l.__size_ = v35 - v24 + 1;
          __str.__r_.__value_.__r.__words[2] = v54 | 0x8000000000000000;
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)p_str;
        }
        else
        {
          *((_BYTE *)&__str.__r_.__value_.__s + 23) = (_BYTE)v35 - (_BYTE)v24 + 1;
          p_str = &__str;
          if (v35 - v24 == -1)
          {
LABEL_102:
            p_str[v51] = 0;
            std::string::operator=(&__p, &__str);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
LABEL_104:
            if (v88 >= 0)
              v55 = (const std::string::value_type *)&__dst;
            else
              v55 = (const std::string::value_type *)__dst;
            if (v88 >= 0)
              v56 = HIBYTE(v88);
            else
              v56 = v87;
            std::string::append(&__p, v55, v56);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v57 = &__p;
            else
              v57 = (std::string *)__p.__r_.__value_.__r.__words[0];
            unlink((const char *)v57);
            if (v35)
              v58 = v35 + 1;
            else
              v58 = v24;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v59 = &__p;
            else
              v59 = (std::string *)__p.__r_.__value_.__r.__words[0];
            symlink(v58, (const char *)v59);
            v60 = byte_255DB3537;
            if (byte_255DB3537 >= 0)
              v61 = byte_255DB3537;
            else
              v61 = qword_255DB3528;
            if (!v61)
              goto LABEL_161;
            v62 = v61 + 1;
            if (v61 + 1 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            if (v62 > 0x16)
            {
              v64 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v62 | 7) != 0x17)
                v64 = v62 | 7;
              v65 = v64 + 1;
              v63 = (char *)operator new(v64 + 1);
              v82 = v61 + 1;
              v83 = v65 | 0x8000000000000000;
              v81 = v63;
            }
            else
            {
              v82 = 0;
              v83 = 0;
              v81 = 0;
              v63 = (char *)&v81;
              HIBYTE(v83) = v61 + 1;
            }
            if (v60 >= 0)
              v66 = &fLS::FLAGS_log_link_buf;
            else
              v66 = (uint64_t *)fLS::FLAGS_log_link_buf;
            memmove(v63, v66, v61);
            *(_WORD *)&v63[v61] = 47;
            v67 = SHIBYTE(v83);
            if (v83 >= 0)
              v68 = HIBYTE(v83);
            else
              v68 = v82;
            v69 = SHIBYTE(v88);
            if (v88 >= 0)
              v70 = HIBYTE(v88);
            else
              v70 = v87;
            v71 = v70 + v68;
            if (v70 + v68 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            if (v71 > 0x16)
            {
              v79 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v71 | 7) != 0x17)
                v79 = v71 | 7;
              v80 = v79 + 1;
              v72 = (char *)operator new(v79 + 1);
              __str.__r_.__value_.__l.__size_ = v70 + v68;
              __str.__r_.__value_.__r.__words[2] = v80 | 0x8000000000000000;
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
              if (!v68)
                goto LABEL_145;
            }
            else
            {
              memset(&__str, 0, sizeof(__str));
              v72 = (char *)&__str;
              *((_BYTE *)&__str.__r_.__value_.__s + 23) = v70 + v68;
              if (!v68)
              {
LABEL_145:
                v74 = &v72[v68];
                if (v70)
                {
                  if (v69 >= 0)
                    v75 = (void **)&__dst;
                  else
                    v75 = __dst;
                  memmove(v74, v75, v70);
                }
                v74[v70] = 0;
                std::string::operator=(&__p, &__str);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__str.__r_.__value_.__l.__data_);
                if (v67 < 0)
                  operator delete(v81);
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v76 = &__p;
                else
                  v76 = (std::string *)__p.__r_.__value_.__r.__words[0];
                unlink((const char *)v76);
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v77 = &__p;
                else
                  v77 = (std::string *)__p.__r_.__value_.__r.__words[0];
                symlink(v24, (const char *)v77);
LABEL_161:
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(__p.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(v88) & 0x80000000) == 0)
                    goto LABEL_163;
                }
                else if ((SHIBYTE(v88) & 0x80000000) == 0)
                {
                  goto LABEL_163;
                }
                operator delete(__dst);
                v31 = 1;
                if ((SHIBYTE(v91) & 0x80000000) == 0)
                  return v31;
                goto LABEL_164;
              }
            }
            if (v67 >= 0)
              v73 = &v81;
            else
              v73 = v81;
            memmove(v72, v73, v68);
            goto LABEL_145;
          }
        }
        memmove(p_str, v24, v35 - v24 + 1);
        goto LABEL_102;
      }
    }
    else
    {
      v87 = 0;
      v88 = 0;
      __dst = 0;
      v46 = (void **)&__dst;
      HIBYTE(v88) = size + v43;
      if (!size)
        goto LABEL_84;
    }
    if (v41 >= 0)
      v47 = &__p;
    else
      v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(v46, v47, size);
    goto LABEL_84;
  }
  if (*((_BYTE *)a1 + 271))
    goto LABEL_60;
LABEL_163:
  v31 = 1;
  if (SHIBYTE(v91) < 0)
LABEL_164:
    operator delete(v89);
  return v31;
}

void sub_22D9E687C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  int v36;

  if (a18 < 0)
    operator delete(__p);
  if (v36 < 0)
    operator delete(a10);
  if (a24 < 0)
    operator delete(a19);
  if (a30 < 0)
    operator delete(a25);
  if (a36 < 0)
    operator delete(a31);
  _Unwind_Resume(exception_object);
}

void google::LogMessage::LogStream::~LogStream(google::LogMessage::LogStream *this)
{
  *(_QWORD *)this = &unk_24F97FD60;
  *((_QWORD *)this + 11) = &unk_24F97FD88;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22E31DEF4]((char *)this + 88);
}

{
  *(_QWORD *)this = &unk_24F97FD60;
  *((_QWORD *)this + 11) = &unk_24F97FD88;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22E31DEF4]((char *)this + 88);
  JUMPOUT(0x22E31DF78);
}

void sub_22D9E699C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DEF4](v1);
  _Unwind_Resume(a1);
}

void `virtual thunk to'google::LogMessage::LogStream::~LogStream(google::LogMessage::LogStream *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  *v1 = &unk_24F97FD60;
  v1[11] = &unk_24F97FD88;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  JUMPOUT(0x22E31DEF4);
}

{
  google::LogMessage::LogStream::~LogStream((google::LogMessage::LogStream *)((char *)this
                                                                            + *(_QWORD *)(*(_QWORD *)this - 24)));
}

void sub_22D9E6A3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DEF4](v1);
  _Unwind_Resume(a1);
}

void sub_22D9E6AE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x10B1C4059880648);
  _Unwind_Resume(a1);
}

void google::base_logging::LogStreamBuf::~LogStreamBuf(google::base_logging::LogStreamBuf *this)
{
  std::streambuf::~streambuf();
  JUMPOUT(0x22E31DF78);
}

void sub_22D9E6B88(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0xB1C400BA862E9);
  _Unwind_Resume(a1);
}

uint64_t google::base_logging::LogStreamBuf::overflow(google::base_logging::LogStreamBuf *this, uint64_t a2)
{
  return a2;
}

std::string *google::ShellEscape(std::string *a1, std::string *this)
{
  std::string::size_type v4;
  std::string *v5;
  uint64_t v6;
  BOOL v7;
  std::string::size_type v8;
  std::string::size_type v9;
  const std::string::value_type *v10;
  std::string *v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  std::string::size_type v16;
  int v18;
  std::string *v19;
  std::string::size_type size;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v4 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (*((_BYTE *)&this->__r_.__value_.__s + 23))
    {
      v5 = this;
      goto LABEL_6;
    }
LABEL_11:
    if (std::string::find(this, 39, 0) == -1)
    {
      MEMORY[0x22E31DC84](a1, "'");
      v18 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
      if (v18 >= 0)
        v19 = this;
      else
        v19 = (std::string *)this->__r_.__value_.__r.__words[0];
      if (v18 >= 0)
        size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      else
        size = this->__r_.__value_.__l.__size_;
      std::string::append(a1, (const std::string::value_type *)v19, size);
      v10 = "'";
    }
    else
    {
      MEMORY[0x22E31DC84](a1, "\"");
      v7 = (this->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
      v8 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if ((v8 & 0x80u) != 0)
        v8 = this->__r_.__value_.__l.__size_;
      if (v8)
      {
        v9 = 0;
        v10 = "\"";
        do
        {
          if (v7)
            v11 = (std::string *)this->__r_.__value_.__r.__words[0];
          else
            v11 = this;
          v12 = v11->__r_.__value_.__s.__data_[v9] - 34;
          v13 = v12 > 0x3E;
          v14 = (1 << v12) & 0x4400000000000005;
          if (!v13 && v14 != 0)
            std::string::append(a1, "\\");
          std::string::append(a1, this, v9++, 1uLL);
          v7 = (this->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
          v16 = HIBYTE(this->__r_.__value_.__r.__words[2]);
          if ((v16 & 0x80u) != 0)
            v16 = this->__r_.__value_.__l.__size_;
        }
        while (v9 < v16);
      }
      else
      {
        v10 = "\"";
      }
    }
    return std::string::append(a1, v10);
  }
  v4 = this->__r_.__value_.__l.__size_;
  if (!v4)
    goto LABEL_11;
  v5 = (std::string *)this->__r_.__value_.__r.__words[0];
LABEL_6:
  v6 = 0;
  while (memchr("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-_.=/:,@", v5->__r_.__value_.__s.__data_[v6], 0x47uLL))
  {
    if (v4 == ++v6)
      return std::string::operator=(a1, this);
  }
  if (v6 != -1)
    goto LABEL_11;
  return std::string::operator=(a1, this);
}

void sub_22D9E6D84(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::vector<std::string>::__push_back_slow_path<std::string const&>(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  std::string *v10;
  std::string *v11;
  unint64_t v12;
  __int128 v13;
  std::string *v14;
  const std::string::value_type **v15;
  char *v16;
  void **v17;
  std::string *v19;
  char *v20;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = (std::string *)&v9[24 * v5];
  v20 = &v9[24 * v8];
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v10->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    v11 = v10 + 1;
    v19 = v10 + 1;
    if (v4 != v3)
      goto LABEL_13;
LABEL_20:
    v16 = v3;
    goto LABEL_21;
  }
  std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  v3 = *a1;
  v4 = a1[1];
  v11 = v10 + 1;
  v19 = v10 + 1;
  if (v4 == *a1)
    goto LABEL_20;
LABEL_13:
  v12 = 0;
  do
  {
    v14 = &v10[v12 / 0x18 - 1];
    v15 = (const std::string::value_type **)&v4[v12 - 24];
    if (v4[v12 - 1] < 0)
    {
      std::string::__init_copy_ctor_external(v14, *v15, *(_QWORD *)&v4[v12 - 16]);
    }
    else
    {
      v13 = *(_OWORD *)v15;
      v10[v12 / 0x18 - 1].__r_.__value_.__r.__words[2] = *(_QWORD *)&v4[v12 - 8];
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v13;
    }
    v12 -= 24;
  }
  while (&v4[v12] != v3);
  v16 = *a1;
  v3 = a1[1];
  v10 = (std::string *)((char *)v10 + v12);
  v11 = v19;
LABEL_21:
  *a1 = (char *)v10;
  a1[1] = (char *)v11;
  a1[2] = v20;
  if (v3 != v16)
  {
    v17 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v17 + 23) < 0)
        operator delete(*v17);
      v17 -= 3;
    }
    while (v17 + 3 != (void **)v16);
    v3 = v16;
  }
  if (v3)
    operator delete(v3);
  return v11;
}

void sub_22D9E6F94(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::pointer end;
  std::__split_buffer<std::string>::pointer begin;
  std::__split_buffer<std::string>::pointer v4;

  begin = this->__begin_;
  end = this->__end_;
  if (end != begin)
  {
    do
    {
      v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        v4 = this->__end_;
      }
      end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_)
    operator delete(this->__first_);
}

std::string *std::vector<std::string>::__push_back_slow_path<std::string>(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  std::string *v10;
  std::string *v11;
  unint64_t v12;
  __int128 v13;
  std::string *v14;
  const std::string::value_type **v15;
  char *v16;
  void **v17;
  std::string *v19;
  char *v20;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = (std::string *)&v9[24 * v5];
  v20 = &v9[24 * v8];
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v10->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    v11 = v10 + 1;
    v19 = v10 + 1;
    if (v4 != v3)
      goto LABEL_13;
LABEL_20:
    v16 = v3;
    goto LABEL_21;
  }
  std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  v3 = *a1;
  v4 = a1[1];
  v11 = v10 + 1;
  v19 = v10 + 1;
  if (v4 == *a1)
    goto LABEL_20;
LABEL_13:
  v12 = 0;
  do
  {
    v14 = &v10[v12 / 0x18 - 1];
    v15 = (const std::string::value_type **)&v4[v12 - 24];
    if (v4[v12 - 1] < 0)
    {
      std::string::__init_copy_ctor_external(v14, *v15, *(_QWORD *)&v4[v12 - 16]);
    }
    else
    {
      v13 = *(_OWORD *)v15;
      v10[v12 / 0x18 - 1].__r_.__value_.__r.__words[2] = *(_QWORD *)&v4[v12 - 8];
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v13;
    }
    v12 -= 24;
  }
  while (&v4[v12] != v3);
  v16 = *a1;
  v3 = a1[1];
  v10 = (std::string *)((char *)v10 + v12);
  v11 = v19;
LABEL_21:
  *a1 = (char *)v10;
  a1[1] = (char *)v11;
  a1[2] = v20;
  if (v3 != v16)
  {
    v17 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v17 + 23) < 0)
        operator delete(*v17);
      v17 -= 3;
    }
    while (v17 + 3 != (void **)v16);
    v3 = v16;
  }
  if (v3)
    operator delete(v3);
  return v11;
}

void sub_22D9E722C(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_logging_cc()
{
  char *v0;
  char *v1;
  char *v2;
  BOOL v3;
  char *v4;
  const char *v5;
  size_t v6;
  size_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  int v17;
  char *v18;
  const char *v19;
  size_t v20;
  size_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  char *v27;
  size_t v28;
  size_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  const char *v35;
  size_t v36;
  size_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  BOOL v43;
  char *v44;
  char *v45;
  char *v46;
  const char *v47;
  size_t v48;
  size_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(void *);
  char *v54;
  const char *v55;
  char v56;
  uint64_t v57;

  v0 = getenv("GLOG_logtostderr");
  if (v0 || (v0 = getenv("GOOGLE_LOGTOSTDERR")) != 0)
  {
    fLB::FLAGS_logtostderr = memchr("tTyY1", *v0, 6uLL) != 0;
    v1 = getenv("GLOG_alsologtostderr");
    if (v1)
      goto LABEL_8;
  }
  else
  {
    fLB::FLAGS_logtostderr = 0;
    v1 = getenv("GLOG_alsologtostderr");
    if (v1)
    {
LABEL_8:
      fLB::FLAGS_alsologtostderr = memchr("tTyY1", *v1, 6uLL) != 0;
      v2 = getenv("GLOG_colorlogtostderr");
      if (!v2)
        goto LABEL_6;
      goto LABEL_9;
    }
  }
  v1 = getenv("GOOGLE_ALSOLOGTOSTDERR");
  if (v1)
    goto LABEL_8;
  fLB::FLAGS_alsologtostderr = 0;
  v2 = getenv("GLOG_colorlogtostderr");
  if (!v2)
  {
LABEL_6:
    v3 = 0;
    goto LABEL_10;
  }
LABEL_9:
  v3 = memchr("tTyY1", *v2, 6uLL) != 0;
LABEL_10:
  fLB::FLAGS_colorlogtostderr = v3;
  v4 = getenv("GLOG_alsologtoemail");
  if (v4)
    v5 = v4;
  else
    v5 = "";
  v6 = strlen(v5);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = v6;
  v8 = fLS::FLAGS_alsologtoemail_buf;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v11 = (char *)operator new(v9 + 1);
    *(_QWORD *)&fLS::FLAGS_alsologtoemail_buf[8] = v7;
    *(_QWORD *)&fLS::FLAGS_alsologtoemail_buf[16] = v10 | 0x8000000000000000;
    *(_QWORD *)fLS::FLAGS_alsologtoemail_buf = v11;
    v8 = v11;
    goto LABEL_20;
  }
  fLS::FLAGS_alsologtoemail_buf[23] = v6;
  if (v6)
LABEL_20:
    memmove(v8, v5, v7);
  v8[v7] = 0;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], fLS::FLAGS_alsologtoemail_buf, &dword_22D9AA000);
  v12 = getenv("GLOG_log_prefix");
  if (v12)
  {
    fLB::FLAGS_log_prefix = memchr("tTyY1", *v12, 6uLL) != 0;
    v13 = getenv("GLOG_minloglevel");
    if (!v13)
      goto LABEL_24;
    goto LABEL_23;
  }
  fLB::FLAGS_log_prefix = 1;
  v13 = getenv("GLOG_minloglevel");
  if (v13)
LABEL_23:
    LODWORD(v13) = strtol(v13, 0, 10);
LABEL_24:
  fLI::FLAGS_minloglevel = (int)v13;
  v14 = getenv("GLOG_logbuflevel");
  if (v14)
    LODWORD(v14) = strtol(v14, 0, 10);
  fLI::FLAGS_logbuflevel = (int)v14;
  v15 = getenv("GLOG_logbufsecs");
  if (v15)
  {
    fLI::FLAGS_logbufsecs = strtol(v15, 0, 10);
    v16 = getenv("GLOG_logemaillevel");
    if (v16)
    {
LABEL_28:
      v17 = strtol(v16, 0, 10);
      goto LABEL_33;
    }
  }
  else
  {
    fLI::FLAGS_logbufsecs = 30;
    v16 = getenv("GLOG_logemaillevel");
    if (v16)
      goto LABEL_28;
  }
  v17 = 999;
LABEL_33:
  fLI::FLAGS_logemaillevel = v17;
  v18 = getenv("GLOG_logmailer");
  if (v18)
    v19 = v18;
  else
    v19 = "/bin/mail";
  v20 = strlen(v19);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v21 = v20;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    v22 = (uint64_t *)operator new(v23 + 1);
    qword_25408B290 = v21;
    unk_25408B298 = v24 | 0x8000000000000000;
    fLS::FLAGS_logmailer_buf = (uint64_t)v22;
    goto LABEL_43;
  }
  v22 = &fLS::FLAGS_logmailer_buf;
  byte_25408B29F = v20;
  if (v20)
LABEL_43:
    memmove(v22, v19, v21);
  *((_BYTE *)v22 + v21) = 0;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &fLS::FLAGS_logmailer_buf, &dword_22D9AA000);
  v25 = getenv("GLOG_logfile_mode");
  if (v25)
    v26 = strtol(v25, 0, 10);
  else
    v26 = 436;
  fLI::FLAGS_logfile_mode = v26;
  v27 = getenv("GLOG_log_dir");
  if (!v27)
  {
    v44 = getenv("GOOGLE_LOG_DIR");
    if (!v44 || (v27 = v44, !*v44))
    {
      v45 = getenv("TEST_TMPDIR");
      if (!v45 || (v27 = v45, !*v45))
        v27 = "";
    }
  }
  v28 = strlen(v27);
  if (v28 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v29 = v28;
  v30 = &fLS::FLAGS_log_dir_buf;
  if (v28 >= 0x17)
  {
    v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v31 = v28 | 7;
    v32 = v31 + 1;
    v33 = (uint64_t *)operator new(v31 + 1);
    qword_255DB3510 = v29;
    unk_255DB3518 = v32 | 0x8000000000000000;
    fLS::FLAGS_log_dir_buf = (uint64_t)v33;
    v30 = v33;
    goto LABEL_55;
  }
  byte_255DB351F = v28;
  if (v28)
LABEL_55:
    memmove(v30, v27, v29);
  *((_BYTE *)v30 + v29) = 0;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &fLS::FLAGS_log_dir_buf, &dword_22D9AA000);
  v34 = getenv("GLOG_log_link");
  if (v34)
    v35 = v34;
  else
    v35 = "";
  v36 = strlen(v35);
  if (v36 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v37 = v36;
  if (v36 >= 0x17)
  {
    v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17)
      v39 = v36 | 7;
    v40 = v39 + 1;
    v38 = (uint64_t *)operator new(v39 + 1);
    qword_255DB3528 = v37;
    unk_255DB3530 = v40 | 0x8000000000000000;
    fLS::FLAGS_log_link_buf = (uint64_t)v38;
    goto LABEL_66;
  }
  v38 = &fLS::FLAGS_log_link_buf;
  byte_255DB3537 = v36;
  if (v36)
LABEL_66:
    memmove(v38, v35, v37);
  *((_BYTE *)v38 + v37) = 0;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &fLS::FLAGS_log_link_buf, &dword_22D9AA000);
  v41 = getenv("GLOG_max_log_size");
  if (v41)
  {
    fLI::FLAGS_max_log_size = strtol(v41, 0, 10);
    v42 = getenv("GLOG_stop_logging_if_full_disk");
    if (v42)
    {
LABEL_69:
      v43 = memchr("tTyY1", *v42, 6uLL) != 0;
      goto LABEL_77;
    }
  }
  else
  {
    fLI::FLAGS_max_log_size = 1800;
    v42 = getenv("GLOG_stop_logging_if_full_disk");
    if (v42)
      goto LABEL_69;
  }
  v43 = 0;
LABEL_77:
  fLB::FLAGS_stop_logging_if_full_disk = v43;
  v46 = getenv("GLOG_log_backtrace_at");
  if (v46)
    v47 = v46;
  else
    v47 = "";
  v48 = strlen(v47);
  if (v48 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v49 = v48;
  if (v48 >= 0x17)
  {
    v51 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v48 | 7) != 0x17)
      v51 = v48 | 7;
    v52 = v51 + 1;
    v50 = (uint64_t *)operator new(v51 + 1);
    qword_255DB3548 = v49;
    unk_255DB3550 = v52 | 0x8000000000000000;
    fLS::FLAGS_log_backtrace_at_buf = (uint64_t)v50;
    goto LABEL_87;
  }
  v50 = &fLS::FLAGS_log_backtrace_at_buf;
  byte_255DB3557 = v48;
  if (v48)
LABEL_87:
    memmove(v50, v47, v49);
  *((_BYTE *)v50 + v49) = 0;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &fLS::FLAGS_log_backtrace_at_buf, &dword_22D9AA000);
  byte_255DB2DA8 = 1;
  if (pthread_rwlock_init(&stru_255DB2CE0, 0))
    goto LABEL_106;
  __cxa_atexit((void (*)(void *))glog_internal_namespace_::Mutex::~Mutex, &stru_255DB2CE0, &dword_22D9AA000);
  qword_255DB3580 = 0;
  unk_255DB3588 = 0;
  google::LogDestination::addresses_ = 0;
  v53 = (void (*)(void *))MEMORY[0x24BEDACF0];
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &google::LogDestination::addresses_, &dword_22D9AA000);
  *(_QWORD *)&google::LogDestination::hostname_[8] = 0;
  *(_QWORD *)&google::LogDestination::hostname_[16] = 0;
  *(_QWORD *)google::LogDestination::hostname_ = 0;
  __cxa_atexit(v53, google::LogDestination::hostname_, &dword_22D9AA000);
  byte_25408B368 = 1;
  if (pthread_rwlock_init(&google::LogDestination::sink_mutex_, 0))
    goto LABEL_106;
  __cxa_atexit((void (*)(void *))glog_internal_namespace_::Mutex::~Mutex, &google::LogDestination::sink_mutex_, &dword_22D9AA000);
  v54 = getenv("TERM");
  if (v54)
  {
    v55 = v54;
    v56 = *v54;
    if (*v54)
      v56 = !strcmp(v54, "xterm")
         || !strcmp(v55, "xterm-color")
         || !strcmp(v55, "xterm-256color")
         || !strcmp(v55, "screen-256color")
         || !strcmp(v55, "konsole")
         || !strcmp(v55, "konsole-16color")
         || !strcmp(v55, "konsole-256color")
         || !strcmp(v55, "screen")
         || !strcmp(v55, "linux")
         || strcmp(v55, "cygwin") == 0;
  }
  else
  {
    v56 = 0;
  }
  google::LogDestination::terminal_supports_color_ = v56;
  byte_255DB2E78 = 1;
  if (pthread_rwlock_init(&stru_255DB2DB0, 0))
LABEL_106:
    abort();
  __cxa_atexit((void (*)(void *))glog_internal_namespace_::Mutex::~Mutex, &stru_255DB2DB0, &dword_22D9AA000);
  qword_255DB2F80 = 0;
  dword_255DB2F88 = 0;
  qword_255DB2F90 = 0;
  dword_255DB3098 = 0;
  v57 = 0x7538u;
  google::LogMessage::LogStream::LogStream((google::LogMessage::LogStream *)((char *)&google::fatal_msg_data_exclusive + v57), byte_254082E04, 30000, 0);
  __cxa_atexit((void (*)(void *))google::LogMessage::LogMessageData::~LogMessageData, &google::fatal_msg_data_exclusive, &dword_22D9AA000);
  google::LogMessage::LogStream::LogStream((google::LogMessage::LogStream *)((char *)&google::fatal_msg_data_shared + v57), byte_25407B6DC, 30000, 0);
  return __cxa_atexit((void (*)(void *))google::LogMessage::LogMessageData::~LogMessageData, &google::fatal_msg_data_shared, &dword_22D9AA000);
}

uint64_t google::RawLog__(uint64_t this, google::glog_internal_namespace_ *a2, const char *a3, const char *a4, const char *a5, ...)
{
  int v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  pthread_t TID;
  const char *v13;
  google::glog_internal_namespace_ *v14;
  const char *v15;
  char *v16;
  int v17;
  size_t v18;
  int v19;
  const char *v20;
  const char *v21;
  size_t v22;
  int v23;
  _BYTE v24[12];
  char __s[3000];
  uint64_t v26;
  va_list va;

  va_start(va, a5);
  v8 = this;
  v26 = *MEMORY[0x24BDAC8D0];
  if (fLB::FLAGS_logtostderr)
    v9 = 1;
  else
    v9 = fLI::FLAGS_stderrthreshold <= (int)this;
  v10 = !v9 && fLB::FLAGS_alsologtostderr == 0;
  if (!v10
    || (this = google::glog_internal_namespace_::IsGoogleLoggingInitialized((google::glog_internal_namespace_ *)this),
        (this & 1) == 0))
  {
    *(_QWORD *)&v24[4] = __s;
    *(_DWORD *)v24 = 3000;
    v11 = *google::LogSeverityNames[v8];
    TID = google::glog_internal_namespace_::GetTID((google::glog_internal_namespace_ *)this);
    v14 = google::glog_internal_namespace_::const_basename(a2, v13);
    v16 = *(char **)&v24[4];
    v17 = *(_DWORD *)v24;
    v18 = *(int *)v24;
    v19 = vsnprintf(*(char **)&v24[4], *(int *)v24, a4, va);
    v21 = "RAW_LOG ERROR: The Message was too long!\n";
    if ((v19 & 0x80000000) == 0 && v19 <= v17)
    {
      *(_DWORD *)v24 = v18 - v19;
      *(_QWORD *)&v24[4] = &v16[v19];
      v21 = "\n";
    }
    v22 = strlen(__s);
    this = syscall(4, 2, __s, v22);
    if (v8 == 3)
    {
      while (1)
      {
        v23 = __ldaxr(_MergedGlobals_27);
        if (v23)
          break;
        if (!__stlxr(1u, _MergedGlobals_27))
          goto LABEL_19;
      }
      __clrex();
LABEL_19:
      if ((v23 & 1) == 0)
      {
        qword_25407A6D0 = (uint64_t)a2;
        dword_25407A6D8 = (int)a3;
        memcpy(&unk_25407A7F0, v16, v18);
        qword_25407A6E0 = (uint64_t)&unk_25407A7F0;
        dword_25407A7E8 = google::GetStackTrace((google *)&unk_25407A6E8, (void **)0x20, 1);
        this = google::glog_internal_namespace_::SetCrashReason((unint64_t)&qword_25407A6D0);
      }
      google::LogMessage::Fail((google::LogMessage *)this);
    }
  }
  return this;
}

uint64_t google::Symbolize(google *this, char *a2, char *a3)
{
  if ((a3 & 0x80000000) != 0)
    abort();
  return google::SymbolizeAndDemangle(this, a2, a3);
}

uint64_t google::SymbolizeAndDemangle(google *this, char *a2, char *a3)
{
  uint64_t result;
  char *v6;
  Dl_info v7;

  result = dladdr(this, &v7);
  if ((_DWORD)result)
  {
    if ((int)strlen(v7.dli_sname) >= (int)a3)
    {
      return 0;
    }
    else
    {
      v6 = strcpy(a2, v7.dli_sname);
      google::DemangleInplace((google *)v6, a3);
      return 1;
    }
  }
  return result;
}

unint64_t google::DemangleInplace(google *this, char *a2)
{
  int v2;
  unint64_t result;
  char __s[256];
  uint64_t v6;

  v2 = (int)a2;
  v6 = *MEMORY[0x24BDAC8D0];
  result = google::Demangle(this, __s, (char *)0x100);
  if ((_DWORD)result)
  {
    result = strlen(__s);
    if (result + 1 <= v2)
    {
      if (result >= 0x100)
        abort();
      return (unint64_t)memcpy(this, __s, result + 1);
    }
  }
  return result;
}

const char *google::glog_internal_namespace_::ProgramInvocationShortName(google::glog_internal_namespace_ *this)
{
  if (qword_25407B3B8)
    return (const char *)qword_25407B3B8;
  else
    return "UNKNOWN";
}

BOOL google::glog_internal_namespace_::IsGoogleLoggingInitialized(google::glog_internal_namespace_ *this)
{
  return qword_25407B3B8 != 0;
}

__darwin_time_t google::glog_internal_namespace_::CycleClock_Now(google::glog_internal_namespace_ *this)
{
  timeval v2;

  gettimeofday(&v2, 0);
  return v2.tv_usec + 1000000 * v2.tv_sec;
}

double google::glog_internal_namespace_::WallTime_Now(google::glog_internal_namespace_ *this)
{
  timeval v2;

  gettimeofday(&v2, 0);
  return (double)(v2.tv_usec + 1000000 * v2.tv_sec) * 0.000001;
}

uint64_t google::glog_internal_namespace_::GetMainThreadPid(google::glog_internal_namespace_ *this)
{
  return _MergedGlobals_28;
}

BOOL google::glog_internal_namespace_::PidHasChanged(google::glog_internal_namespace_ *this)
{
  pid_t v1;
  int v2;

  v1 = getpid();
  v2 = _MergedGlobals_28;
  if (_MergedGlobals_28 != v1)
    _MergedGlobals_28 = v1;
  return v2 != v1;
}

pthread_t google::glog_internal_namespace_::GetTID(google::glog_internal_namespace_ *this)
{
  pthread_t result;

  if ((google::glog_internal_namespace_::GetTID(void)::lacks_gettid & 1) == 0)
  {
    result = (pthread_t)syscall(286);
    if ((_DWORD)result != -1)
      return result;
    google::glog_internal_namespace_::GetTID(void)::lacks_gettid = 1;
  }
  return pthread_self();
}

google::glog_internal_namespace_ *google::glog_internal_namespace_::const_basename(google::glog_internal_namespace_ *this, const char *a2)
{
  char *v3;

  v3 = strrchr((char *)this, 47);
  if (v3)
    return (google::glog_internal_namespace_ *)(v3 + 1);
  else
    return this;
}

void *google::glog_internal_namespace_::MyUserName(google::glog_internal_namespace_ *this)
{
  return &unk_25407B3C8;
}

std::string *google::glog_internal_namespace_::DumpStackTraceToString(std::string *a1)
{
  std::string *result;
  int v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  char *v7;
  char *v8;
  std::string::value_type *v9;
  char __dst[256];
  char __str[1024];
  std::string::value_type __s[16];
  _OWORD v13[63];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  memset(v13, 0, 496);
  *(_OWORD *)__s = 0u;
  result = (std::string *)backtrace((void **)__s, 64);
  if ((int)result <= 3)
    v3 = 3;
  else
    v3 = (int)result;
  if (v3 >= 35)
    v3 = 35;
  v4 = (v3 - 3);
  if (v3 != 3)
  {
    v5 = 8 * (v3 - 3);
    if (v4 <= 0x1F)
      v6 = 256 - v5;
    else
      v6 = 0;
    v7 = __dst;
    bzero(&__dst[v5], v6);
    memcpy(__dst, (char *)v13 + 8, 8 * v4);
    do
    {
      while (1)
      {
        v8 = *(char **)v7;
        if (fLB::FLAGS_symbolize_stacktrace)
          break;
        snprintf(__s, 0x64uLL, "%s@ %*p\n", "    ", 18, v8);
        result = std::string::append(a1, __s);
        v7 += 8;
        if (!--v4)
          return result;
      }
      if (google::Symbolize((google *)(v8 - 1), __s, (char *)0x400))
        v9 = __s;
      else
        v9 = "(unknown)";
      snprintf(__str, 0x400uLL, "%s@ %*p  %s\n", "    ", 18, v8, v9);
      result = std::string::append(a1, __str);
      v7 += 8;
      --v4;
    }
    while (v4);
  }
  return result;
}

unint64_t google::glog_internal_namespace_::SetCrashReason(unint64_t result)
{
  while (!__ldaxr(&google::glog_internal_namespace_::g_reason))
  {
    if (!__stlxr(result, &google::glog_internal_namespace_::g_reason))
      return result;
  }
  __clrex();
  return result;
}

uint64_t google::GetStackTrace(google *this, void **a2, int a3)
{
  int v4;
  int v6;
  int v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  __int128 *v11;
  _OWORD *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v20[32];
  uint64_t v21;

  v4 = (int)a2;
  v21 = *MEMORY[0x24BDAC8D0];
  memset(v20, 0, sizeof(v20));
  v6 = backtrace((void **)v20, 64);
  v7 = a3 + 1;
  v8 = (v6 - v7) & ~((v6 - v7) >> 31);
  if (v8 >= v4)
    result = v4;
  else
    result = v8;
  if ((int)result >= 1)
  {
    if (result < 4)
    {
      v10 = 0;
LABEL_10:
      v15 = (uint64_t *)v20 + v10 + v7;
      v16 = (_QWORD *)((char *)this + 8 * v10);
      v17 = v10 - result;
      do
      {
        v18 = *v15++;
        *v16++ = v18;
      }
      while (!__CFADD__(v17++, 1));
      return result;
    }
    v10 = result & 0x7FFFFFFC;
    v11 = (_OWORD *)((char *)&v20[1] + 8 * v7);
    v12 = (_OWORD *)((char *)this + 16);
    v13 = result & 0xFFFFFFFC;
    do
    {
      v14 = *v11;
      *(v12 - 1) = *(v11 - 1);
      *v12 = v14;
      v11 += 2;
      v12 += 2;
      v13 -= 4;
    }
    while (v13);
    if (v10 != result)
      goto LABEL_10;
  }
  return result;
}

uint64_t _GLOBAL__sub_I_utilities_cc()
{
  char *v0;
  BOOL v1;

  v0 = getenv("GLOG_symbolize_stacktrace");
  if (v0)
    v1 = memchr("tTyY1", *v0, 6uLL) != 0;
  else
    v1 = 1;
  fLB::FLAGS_symbolize_stacktrace = v1;
  _MergedGlobals_28 = getpid();
  byte_25407B3DF = 16;
  strcpy(byte_25407B3C8, "unavailable-name");
  return __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_25407B3C8, &dword_22D9AA000);
}

uint64_t google::glog_internal_namespace_::SafeFNMatch_(google::glog_internal_namespace_ *this, const char *a2, uint64_t a3, const char *a4, unint64_t a5)
{
  uint64_t result;
  const char *v7;
  int v8;
  unint64_t v10;
  const char *v11;
  google::glog_internal_namespace_ *v12;
  const char *v13;

  result = a4 == 0;
  if (!a2)
    return result;
  v7 = 0;
  while (1)
  {
    if ((result & 1) != 0)
    {
      if (a2 - 1 == v7)
        return v7[(_QWORD)this] == 42;
      return 0;
    }
    v8 = v7[(_QWORD)this];
    if (v8 != 63 && v8 != v7[a3])
      break;
    result = a4 - 1 == v7++;
    if (a2 == v7)
      return result;
  }
  if (v8 != 42)
    return 0;
  if (a2 - 1 == v7)
    return 1;
  v10 = (unint64_t)&v7[a3];
  v11 = (const char *)(a4 - v7);
  v12 = (google::glog_internal_namespace_ *)&v7[(_QWORD)this + 1];
  v13 = &a2[~(unint64_t)v7];
  do
  {
    result = google::glog_internal_namespace_::SafeFNMatch_(v12, v13, v10, v11, a5);
    if ((result & 1) != 0)
      break;
    ++v10;
    --v11;
  }
  while (v11);
  return result;
}

BOOL google::InitVLOG3__(google *this, int **a2, char *a3, const char *a4)
{
  int v4;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  std::string::size_type v16;
  std::string *p_dst;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char *v22;
  char *v23;
  unint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  google *v30;
  int **v31;
  int v32;
  int v33;
  std::string __dst;

  v4 = (int)a4;
  if (byte_25407B4B8 && pthread_rwlock_wrlock(&stru_25407B3F0))
    goto LABEL_49;
  v8 = (_QWORD *)&unk_25407B000;
  v32 = _MergedGlobals_29;
  if ((_MergedGlobals_29 & 1) != 0)
    goto LABEL_27;
  v30 = this;
  v31 = a2;
  v9 = 0;
  v10 = 0;
  _MergedGlobals_29 = 0;
  v11 = byte_25408BCAF >= 0 ? (char *)&fLS::FLAGS_vmodule_buf : (char *)fLS::FLAGS_vmodule_buf;
  while (1)
  {
    v14 = strchr(v11, 61);
    if (!v14)
      break;
    v15 = v14;
    v16 = v14 - v11;
    if ((unint64_t)(v14 - v11) >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    if (v16 >= 0x17)
    {
      v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17)
        v18 = v16 | 7;
      v19 = v18 + 1;
      p_dst = (std::string *)operator new(v18 + 1);
      __dst.__r_.__value_.__l.__size_ = v16;
      __dst.__r_.__value_.__r.__words[2] = v19 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = (_BYTE)v14 - (_BYTE)v11;
      p_dst = &__dst;
      if (v14 == v11)
        goto LABEL_20;
    }
    memmove(p_dst, v11, v16);
LABEL_20:
    p_dst->__r_.__value_.__s.__data_[v16] = 0;
    v33 = 0;
    if (sscanf(v15, "=%d", &v33) == 1)
    {
      v20 = operator new();
      *(_QWORD *)v20 = 0;
      *(_QWORD *)(v20 + 8) = 0;
      *(_QWORD *)(v20 + 16) = 0;
      std::string::operator=((std::string *)v20, &__dst);
      *(_DWORD *)(v20 + 24) = v33;
      if (v9)
        *(_QWORD *)(v10 + 32) = v20;
      else
        v9 = v20;
      v10 = v20;
    }
    v12 = strchr(v15, 44);
    v13 = v12;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      v11 = v13 + 1;
      if (!v13)
        break;
    }
    else
    {
      v11 = v12 + 1;
      if (!v12)
        break;
    }
  }
  if (v9)
  {
    *(_QWORD *)(v10 + 32) = qword_25407B3E8;
    qword_25407B3E8 = v9;
  }
  _MergedGlobals_29 = 1;
  this = v30;
  a2 = v31;
  v8 = &unk_25407B000;
LABEL_27:
  v21 = *__error();
  v22 = strrchr(a3, 47);
  if (v22)
    a3 = v22 + 1;
  v23 = strchr(a3, 46);
  if (v23)
  {
    v25 = (const char *)(v23 - a3);
    v26 = v23 - a3 - 4;
    if ((unint64_t)(v23 - a3) >= 4)
    {
LABEL_31:
      if (*(_DWORD *)&v25[(_QWORD)a3 - 4] == 1819175213)
        v25 = (const char *)v26;
    }
  }
  else
  {
    v25 = (const char *)strlen(a3);
    v26 = (uint64_t)(v25 - 4);
    if ((unint64_t)v25 >= 4)
      goto LABEL_31;
  }
  v27 = v8[125];
  if (!v27)
  {
LABEL_39:
    if (v32)
      goto LABEL_40;
    goto LABEL_41;
  }
  while (2)
  {
    if ((*(char *)(v27 + 23) & 0x80000000) == 0)
    {
      if (google::glog_internal_namespace_::SafeFNMatch_((google::glog_internal_namespace_ *)v27, (const char *)*(unsigned __int8 *)(v27 + 23), (uint64_t)a3, v25, v24))break;
      goto LABEL_38;
    }
    if (!google::glog_internal_namespace_::SafeFNMatch_(*(google::glog_internal_namespace_ **)v27, *(const char **)(v27 + 8), (uint64_t)a3, v25, v24))
    {
LABEL_38:
      v27 = *(_QWORD *)(v27 + 32);
      if (!v27)
        goto LABEL_39;
      continue;
    }
    break;
  }
  a2 = (int **)(v27 + 24);
  if (!v32)
    goto LABEL_41;
LABEL_40:
  *(_QWORD *)this = a2;
LABEL_41:
  *__error() = v21;
  v28 = *(_DWORD *)a2;
  if (byte_25407B4B8)
  {
    if (pthread_rwlock_unlock(&stru_25407B3F0))
LABEL_49:
      abort();
  }
  return v28 >= v4;
}

void sub_22D9E885C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  glog_internal_namespace_::MutexLock::~MutexLock((glog_internal_namespace_::MutexLock *)&a14);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_vlog_is_on_cc()
{
  char *v0;
  char *v1;
  const char *v2;
  size_t v3;
  size_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v0 = getenv("GLOG_v");
  if (v0)
    LODWORD(v0) = strtol(v0, 0, 10);
  fLI::FLAGS_v = (int)v0;
  v1 = getenv("GLOG_vmodule");
  if (v1)
    v2 = v1;
  else
    v2 = "";
  v3 = strlen(v2);
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v4 = v3;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    v5 = (uint64_t *)operator new(v6 + 1);
    qword_25408BCA0 = v4;
    unk_25408BCA8 = v7 | 0x8000000000000000;
    fLS::FLAGS_vmodule_buf = (uint64_t)v5;
    goto LABEL_13;
  }
  v5 = &fLS::FLAGS_vmodule_buf;
  byte_25408BCAF = v3;
  if (v3)
LABEL_13:
    memmove(v5, v2, v4);
  *((_BYTE *)v5 + v4) = 0;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &fLS::FLAGS_vmodule_buf, &dword_22D9AA000);
  byte_25407B4B8 = 1;
  if (pthread_rwlock_init(&stru_25407B3F0, 0))
    abort();
  return __cxa_atexit((void (*)(void *))glog_internal_namespace_::Mutex::~Mutex, &stru_25407B3F0, &dword_22D9AA000);
}

void std::vector<int>::assign(std::vector<int> *this, std::vector<int>::size_type __n, std::vector<int>::const_reference __u)
{
  uint64_t value;
  int *begin;
  int *v8;
  std::vector<int>::size_type v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  int *v13;
  int *v14;
  std::vector<int>::value_type v15;
  std::vector<int>::size_type v16;
  int *v17;
  std::vector<int>::size_type v18;
  int32x4_t v19;
  int32x4_t *v20;
  uint64_t v21;
  std::vector<int>::pointer end;
  int64_t v23;
  unint64_t v24;
  std::vector<int>::size_type v25;
  float32x4_t v26;
  float32x4_t *v27;
  unint64_t v28;
  BOOL v29;
  std::vector<int>::size_type v30;
  int *v31;
  std::vector<int>::size_type v32;
  uint64_t v33;
  int *v34;
  float32x4_t v35;
  float32x4_t *v36;
  uint64_t v37;

  value = (uint64_t)this->__end_cap_.__value_;
  begin = this->__begin_;
  v8 = begin;
  if (__n > (value - (uint64_t)begin) >> 2)
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n >> 62)
      goto LABEL_38;
    v9 = value >> 1;
    if (value >> 1 <= __n)
      v9 = __n;
    v10 = (unint64_t)value >= 0x7FFFFFFFFFFFFFFCLL;
    v11 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v10)
      v11 = v9;
    if (v11 >> 62)
LABEL_38:
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = v11;
    v13 = (int *)operator new(4 * v11);
    this->__begin_ = v13;
    this->__end_cap_.__value_ = &v13[v12];
    v14 = &v13[__n];
    v15 = *__u;
    v16 = (__n - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v17 = v13;
    if (v16 < 7)
      goto LABEL_41;
    v18 = v16 + 1;
    v17 = &v13[v18 & 0x7FFFFFFFFFFFFFF8];
    v19 = vdupq_n_s32(v15);
    v20 = (int32x4_t *)(v13 + 4);
    v21 = v18 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v20[-1] = v19;
      *v20 = v19;
      v20 += 2;
      v21 -= 8;
    }
    while (v21);
    if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_41:
      do
        *v17++ = v15;
      while (v17 != v14);
    }
    goto LABEL_37;
  }
  end = this->__end_;
  v23 = (char *)end - (char *)begin;
  v24 = end - begin;
  if (v24 >= __n)
    v25 = __n;
  else
    v25 = end - begin;
  if (v25)
  {
    if (v25 < 8 || begin < __u + 1 && &begin[v25] > __u)
      goto LABEL_42;
    v8 = &begin[v25 & 0xFFFFFFFFFFFFFFF8];
    v26 = vld1q_dup_f32((const float *)__u);
    v27 = (float32x4_t *)(begin + 4);
    v28 = v25 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v27[-1] = v26;
      *v27 = v26;
      v27 += 2;
      v28 -= 8;
    }
    while (v28);
    v29 = v25 == (v25 & 0xFFFFFFFFFFFFFFF8);
    v25 &= 7u;
    if (!v29)
    {
LABEL_42:
      do
      {
        *v8++ = *__u;
        --v25;
      }
      while (v25);
    }
  }
  v10 = __n >= v24;
  v30 = __n - v24;
  if (v30 == 0 || !v10)
  {
    v14 = &begin[__n];
LABEL_37:
    this->__end_ = v14;
    return;
  }
  v31 = &end[v30];
  v32 = 4 * __n - (v23 & 0xFFFFFFFFFFFFFFFCLL) - 4;
  if (v32 < 0x4C || end < __u + 1 && (std::vector<int>::pointer)((char *)end + v32 + 4) > __u)
    goto LABEL_43;
  v33 = (v32 >> 2) + 1;
  v34 = &end[v33 & 0x7FFFFFFFFFFFFFF8];
  v35 = vld1q_dup_f32((const float *)__u);
  v36 = (float32x4_t *)(end + 4);
  v37 = v33 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v36[-1] = v35;
    *v36 = v35;
    v36 += 2;
    v37 -= 8;
  }
  while (v37);
  end = v34;
  if (v33 != (v33 & 0x7FFFFFFFFFFFFFF8))
  {
LABEL_43:
    do
      *end++ = *__u;
    while (end != v31);
  }
  this->__end_ = v31;
}

void **std::vector<std::vector<int>>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  void *v6;
  void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (char *)a1[1];
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 3);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *((_QWORD *)v3 - 2) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void operations_research::MergingPartition::Reset(operations_research::MergingPartition *this, int a2)
{
  std::vector<int>::size_type v4;
  int32x4_t *v5;
  uint64_t v6;
  int32x4_t v7;
  int32x4_t *v8;
  int32x4_t v9;
  int32x4_t v10;
  uint64_t v11;
  char v12;
  std::vector<int>::value_type v13;
  std::vector<int>::value_type __u;

  v4 = a2;
  __u = 1;
  std::vector<int>::assign((std::vector<int> *)this + 1, a2, &__u);
  v13 = -1;
  std::vector<int>::assign((std::vector<int> *)this, v4, &v13);
  if (a2 >= 1)
  {
    v5 = *(int32x4_t **)this;
    if (a2 < 8)
    {
      v6 = 0;
      do
      {
LABEL_7:
        v5->i32[v6] = v6;
        ++v6;
      }
      while (a2 != v6);
      goto LABEL_8;
    }
    v6 = a2 & 0x7FFFFFF8;
    v7 = (int32x4_t)xmmword_22DCE64F0;
    v8 = v5 + 1;
    v9.i64[0] = 0x400000004;
    v9.i64[1] = 0x400000004;
    v10.i64[0] = 0x800000008;
    v10.i64[1] = 0x800000008;
    v11 = a2 & 0xFFFFFFF8;
    do
    {
      v8[-1] = v7;
      *v8 = vaddq_s32(v7, v9);
      v7 = vaddq_s32(v7, v10);
      v8 += 2;
      v11 -= 8;
    }
    while (v11);
    if (v6 != a2)
      goto LABEL_7;
  }
LABEL_8:
  v12 = 0;
  std::vector<BOOL>::assign((char **)this + 6, v4, &v12);
}

void std::vector<BOOL>::assign(char **a1, unint64_t a2, _BYTE *a3)
{
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  char *v14;
  int v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  __int128 v19;

  a1[1] = 0;
  if (!a2)
    return;
  v6 = a1[2];
  v7 = (_QWORD)v6 << 6;
  if ((_QWORD)v6 << 6 >= a2)
  {
    a1[1] = (char *)a2;
    v14 = *a1;
    v16 = a2 >> 6;
    if (*a3)
    {
LABEL_12:
      v17 = 8 * v16;
      if (a2 >= 0x40)
        memset(v14, 255, v17);
      if ((a2 & 0x3F) != 0)
        *(_QWORD *)&v14[v17] |= 0xFFFFFFFFFFFFFFFFLL >> -(a2 & 0x3F);
      return;
    }
  }
  else
  {
    v18 = 0;
    v19 = 0uLL;
    if ((a2 & 0x8000000000000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v8 = (_QWORD)v6 << 7;
    if (v8 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0))
      v8 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
    if (v7 <= 0x3FFFFFFFFFFFFFFELL)
      v9 = v8;
    else
      v9 = 0x7FFFFFFFFFFFFFFFLL;
    std::vector<BOOL>::reserve((uint64_t)&v18, v9);
    v11 = v18;
    v12 = (char *)*((_QWORD *)&v19 + 1);
    v18 = *a1;
    v10 = v18;
    v13 = *(_OWORD *)(a1 + 1);
    *a1 = v11;
    a1[1] = (char *)a2;
    a1[2] = v12;
    v19 = v13;
    if (v10)
      operator delete(v10);
    v14 = *a1;
    v15 = *a3;
    v16 = a2 >> 6;
    if (v15)
      goto LABEL_12;
  }
  if (a2 >= 0x40)
    bzero(v14, 8 * v16);
  if ((a2 & 0x3F) != 0)
    *(_QWORD *)&v14[8 * v16] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(a2 & 0x3F));
}

void sub_22D9E8EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::MergingPartition::MergePartsOf(operations_research::MergingPartition *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  int v19;

  v4 = *(_QWORD *)this;
  v5 = a2;
  do
  {
    result = v5;
    v5 = *(unsigned int *)(v4 + 4 * (int)v5);
  }
  while ((_DWORD)v5 != (_DWORD)result);
  v7 = a3;
  do
  {
    v8 = v7;
    v7 = *(unsigned int *)(v4 + 4 * (int)v7);
  }
  while ((_DWORD)v7 != (_DWORD)v8);
  if ((_DWORD)result == (_DWORD)v8)
    return 0xFFFFFFFFLL;
  v9 = (int)v8;
  v10 = *((_QWORD *)this + 3);
  v11 = *(_DWORD *)(v10 + 4 * (int)result);
  v12 = *(_DWORD *)(v10 + 4 * (int)v8);
  if (v11 < v12 || (int)result > (int)v8 && v11 == v12)
  {
    v13 = *(_DWORD *)(v10 + 4 * (int)v8);
    v14 = v8;
  }
  else
  {
    v13 = *(_DWORD *)(v10 + 4 * (int)result);
    v9 = (int)result;
    v11 = *(_DWORD *)(v10 + 4 * (int)v8);
    v14 = result;
    result = v8;
  }
  *(_DWORD *)(v10 + 4 * v9) = v13 + v11;
  do
  {
    v15 = 4 * (int)a2;
    v16 = *(_DWORD *)(v4 + v15);
    *(_DWORD *)(v4 + v15) = v14;
    v17 = v16 == (_DWORD)a2;
    LODWORD(a2) = v16;
  }
  while (!v17);
  do
  {
    v18 = 4 * (int)a3;
    v19 = *(_DWORD *)(v4 + v18);
    *(_DWORD *)(v4 + v18) = v14;
    v17 = v19 == (_DWORD)a3;
    LODWORD(a3) = v19;
  }
  while (!v17);
  return result;
}

uint64_t operations_research::MergingPartition::GetRootAndCompressPath(operations_research::MergingPartition *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  int v6;
  BOOL v7;

  v2 = *(_QWORD *)this;
  v3 = a2;
  do
  {
    result = v3;
    v3 = *(unsigned int *)(v2 + 4 * (int)v3);
  }
  while ((_DWORD)v3 != (_DWORD)result);
  do
  {
    v5 = 4 * (int)a2;
    v6 = *(_DWORD *)(v2 + v5);
    *(_DWORD *)(v2 + v5) = result;
    v7 = v6 == (_DWORD)a2;
    LODWORD(a2) = v6;
  }
  while (!v7);
  return result;
}

_QWORD *std::vector<std::vector<int>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_22D9E9080(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)v1)
    std::vector<std::vector<int>>::vector((void **)(v1 + 8), *(char **)v1, (void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 62)
      goto LABEL_22;
    v10 = v8 >> 1;
    if (v8 >> 1 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL;
    v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 62)
LABEL_22:
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v13 = 4 * v12;
    result = operator new(4 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 2;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[4 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n, std::vector<int>::const_reference __x)
{
  int *value;
  std::vector<int>::pointer end;
  int *v8;
  std::vector<int>::pointer begin;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  std::vector<int>::size_type v16;
  std::vector<int>::size_type v17;
  float32x4_t v18;
  float32x4_t *v19;
  uint64_t v20;
  int *v21;
  int *v22;
  std::vector<int>::size_type v23;
  int *v24;
  std::vector<int>::size_type v25;
  float32x4_t v26;
  float32x4_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  __int128 *v33;
  uint64_t v34;
  __int128 v35;
  int v36;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  v8 = end;
  if (__n <= value - end)
  {
    if (__n)
    {
      v16 = (__n - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || end < __x + 1 && &end[__n] > __x)
        goto LABEL_43;
      v17 = v16 + 1;
      v8 = &end[v17 & 0x7FFFFFFFFFFFFFF8];
      v18 = vld1q_dup_f32((const float *)__x);
      v19 = (float32x4_t *)(end + 4);
      v20 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v19[-1] = v18;
        *v19 = v18;
        v19 += 2;
        v20 -= 8;
      }
      while (v20);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_43:
        do
          *v8++ = *__x;
        while (v8 != &end[__n]);
      }
      v8 = &end[__n];
    }
    this->__end_ = v8;
  }
  else
  {
    begin = this->__begin_;
    v10 = (char *)end - (char *)this->__begin_;
    v11 = v10 >> 2;
    v12 = (v10 >> 2) + __n;
    if (v12 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v13 = (char *)value - (char *)begin;
    if (v13 >> 1 > v12)
      v12 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v15 = operator new(4 * v14);
    }
    else
    {
      v15 = 0;
    }
    v21 = (int *)&v15[4 * v11];
    v22 = &v21[__n];
    v23 = (__n - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v24 = v21;
    if (v23 < 0x13)
      goto LABEL_44;
    if (v21 < __x + 1)
    {
      v24 = (int *)&v15[4 * v11];
      if (&v15[4 * __n + v10] > (_BYTE *)__x)
        goto LABEL_44;
    }
    v25 = v23 + 1;
    v24 = &v21[v25 & 0x7FFFFFFFFFFFFFF8];
    v26 = vld1q_dup_f32((const float *)__x);
    v27 = (float32x4_t *)&v15[4 * v11 + 16];
    v28 = v25 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v27[-1] = v26;
      *v27 = v26;
      v27 += 2;
      v28 -= 8;
    }
    while (v28);
    if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_44:
      do
        *v24++ = *__x;
      while (v24 != v22);
    }
    if (end != begin)
    {
      v29 = (char *)end - (char *)begin - 4;
      if (v29 < 0x2C)
        goto LABEL_45;
      if ((unint64_t)((char *)end - &v15[v10]) < 0x20)
        goto LABEL_45;
      v30 = (v29 >> 2) + 1;
      v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
      v8 = &end[v31 / 0xFFFFFFFFFFFFFFFCLL];
      v21 = (int *)((char *)v21 - v31);
      v32 = &v15[4 * v11 - 16];
      v33 = (__int128 *)(end - 4);
      v34 = v30 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v35 = *v33;
        *(v32 - 1) = *(v33 - 1);
        *v32 = v35;
        v32 -= 2;
        v33 -= 2;
        v34 -= 8;
      }
      while (v34);
      if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_45:
        do
        {
          v36 = *--v8;
          *--v21 = v36;
        }
        while (v8 != begin);
      }
    }
    this->__begin_ = v21;
    this->__end_ = v22;
    this->__end_cap_.__value_ = (int *)&v15[4 * v14];
    if (begin)
      operator delete(begin);
  }
}

uint64_t std::__split_buffer<std::vector<int>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v5 = v2 - 24;
        v4 = *(void **)(v2 - 24);
        *(_QWORD *)(a1 + 16) = v2 - 24;
        if (!v4)
          break;
        *(_QWORD *)(v2 - 16) = v4;
        operator delete(v4);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 24;
    }
    while (v5 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<BOOL>::reserve(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  int v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  if (a2 > *(_QWORD *)(a1 + 16) << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v3 = ((a2 - 1) >> 6) + 1;
    v4 = (uint64_t *)operator new(8 * v3);
    v5 = *(_QWORD **)a1;
    v6 = *(_QWORD *)(a1 + 8);
    v7 = v6 & 0x3F;
    v8 = (v6 - 1) >> 6;
    if (v6 < 0x41)
      v8 = 0;
    v4[v8] = 0;
    if (v6 > 0x3F || (v6 & 0x3F) != 0)
    {
      v9 = 0;
      v10 = 0;
      v11 = &v5[v6 >> 6];
      v12 = v4;
      v13 = v5;
      do
      {
        v14 = 1 << v9;
        if (((*v13 >> v10) & 1) != 0)
          v15 = *v12 | v14;
        else
          v15 = *v12 & ~v14;
        *v12 = v15;
        v13 += v10 == 63;
        if (v10 == 63)
          v10 = 0;
        else
          ++v10;
        v12 += v9 == 63;
        if (v9 == 63)
          v9 = 0;
        else
          ++v9;
      }
      while (v10 != v7 || v13 != v11);
    }
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 16) = v3;
    if (v5)
      operator delete(v5);
  }
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n)
{
  int *value;
  std::vector<int>::pointer end;
  int *v6;
  std::vector<int>::pointer begin;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  int *v16;
  int *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  int v25;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  v6 = end;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(end, 4 * __n);
      v6 = &end[__n];
    }
    this->__end_ = v6;
  }
  else
  {
    begin = this->__begin_;
    v8 = (char *)end - (char *)this->__begin_;
    v9 = v8 >> 2;
    v10 = (v8 >> 2) + __n;
    if (v10 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v11 = (char *)value - (char *)begin;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = operator new(4 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = 4 * __n;
    v16 = (int *)&v13[4 * v12];
    bzero(v14, v15);
    v17 = (int *)&v14[v15];
    if (end != begin)
    {
      v18 = (char *)end - (char *)begin - 4;
      if (v18 < 0x2C)
        goto LABEL_29;
      if ((unint64_t)((char *)end - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 2) + 1;
      v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      v6 = &end[v20 / 0xFFFFFFFFFFFFFFFCLL];
      v14 -= v20;
      v21 = &v13[4 * v9 - 16];
      v22 = (__int128 *)(end - 4);
      v23 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v24 = *v22;
        *(v21 - 1) = *(v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 2;
        v23 -= 8;
      }
      while (v23);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_29:
        do
        {
          v25 = *--v6;
          *((_DWORD *)v14 - 1) = v25;
          v14 -= 4;
        }
        while (v6 != begin);
      }
    }
    this->__begin_ = (std::vector<int>::pointer)v14;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
      operator delete(begin);
  }
}

void std::vector<BOOL>::__construct_at_end[abi:ne180100](_QWORD *a1, unint64_t a2, int a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v3 = a2;
  v4 = a1[1];
  v5 = v4 + a2;
  a1[1] = v4 + a2;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41)
      v6 = (v5 - 1) >> 6;
    else
      v6 = 0;
    *(_QWORD *)(*a1 + 8 * v6) = 0;
  }
  if (a2)
  {
    v7 = (_QWORD *)(*a1 + 8 * (v4 >> 6));
    v8 = v4 & 0x3F;
    if (a3)
    {
      if ((v4 & 0x3F) != 0)
      {
        v9 = (64 - v8);
        if (v9 >= a2)
          v10 = a2;
        else
          v10 = v9;
        *v7++ |= (0xFFFFFFFFFFFFFFFFLL >> (v9 - v10)) & (-1 << v4);
        v3 = a2 - v10;
      }
      v11 = v3 >> 6;
      if (v3 >= 0x40)
        memset(v7, 255, 8 * (v3 >> 6));
      if ((v3 & 0x3F) != 0)
      {
        v12 = v7[v11] | (0xFFFFFFFFFFFFFFFFLL >> -(v3 & 0x3F));
LABEL_27:
        v7[v11] = v12;
      }
    }
    else
    {
      if ((v4 & 0x3F) != 0)
      {
        v13 = (64 - v8);
        if (v13 >= a2)
          v14 = a2;
        else
          v14 = v13;
        *v7++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (v13 - v14)) & (-1 << v4));
        v3 = a2 - v14;
      }
      v11 = v3 >> 6;
      if (v3 >= 0x40)
        bzero(v7, 8 * (v3 >> 6));
      if ((v3 & 0x3F) != 0)
      {
        v12 = v7[v11] & ~(0xFFFFFFFFFFFFFFFFLL >> -(v3 & 0x3F));
        goto LABEL_27;
      }
    }
  }
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t **v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_10;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (!v2)
  {
    v5 = 1;
    v6 = (uint64_t **)v3[2];
    v7 = *v6;
    if (*v6 == v3)
      goto LABEL_6;
LABEL_11:
    v6[1] = (uint64_t *)v2;
    v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2)
      goto LABEL_16;
    goto LABEL_12;
  }
LABEL_10:
  v5 = 0;
  *(_QWORD *)(v2 + 16) = v3[2];
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 != v3)
    goto LABEL_11;
LABEL_6:
  *v6 = (uint64_t *)v2;
  if (v3 != result)
  {
    v7 = v6[1];
    v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2)
      goto LABEL_16;
LABEL_12:
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
    goto LABEL_16;
  }
  v7 = 0;
  result = (uint64_t *)v2;
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
    goto LABEL_12;
LABEL_16:
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v14 = (uint64_t **)v7[2];
    if (*v14 == v7)
      break;
    if (*((_BYTE *)v7 + 24))
    {
      v15 = (_QWORD *)*v7;
      if (!*v7)
        goto LABEL_38;
    }
    else
    {
      *((_BYTE *)v7 + 24) = 1;
      *((_BYTE *)v14 + 24) = 0;
      v17 = v14[1];
      v18 = (uint64_t *)*v17;
      v14[1] = (uint64_t *)*v17;
      if (v18)
        v18[2] = (uint64_t)v14;
      v17[2] = (uint64_t)v14[2];
      v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v17;
      *v17 = (uint64_t)v14;
      v14[2] = v17;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
      v15 = (_QWORD *)*v7;
      if (!*v7)
        goto LABEL_38;
    }
    if (!*((_BYTE *)v15 + 24))
    {
      v19 = (uint64_t *)v7[1];
      if (!v19)
        goto LABEL_64;
LABEL_63:
      if (*((_BYTE *)v19 + 24))
      {
LABEL_64:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v23 = v15[1];
        *v7 = v23;
        if (v23)
          *(_QWORD *)(v23 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v19 = v7;
      }
      else
      {
        v15 = v7;
      }
      v27 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v27 + 24);
      *(_BYTE *)(v27 + 24) = 1;
      *((_BYTE *)v19 + 24) = 1;
      v28 = *(uint64_t **)(v27 + 8);
      v29 = *v28;
      *(_QWORD *)(v27 + 8) = *v28;
      if (v29)
        *(_QWORD *)(v29 + 16) = v27;
      v28[2] = *(_QWORD *)(v27 + 16);
      *(_QWORD *)(*(_QWORD *)(v27 + 16) + 8 * (**(_QWORD **)(v27 + 16) != v27)) = v28;
      *v28 = v27;
      *(_QWORD *)(v27 + 16) = v28;
      return result;
    }
LABEL_38:
    v19 = (uint64_t *)v7[1];
    if (v19 && !*((_BYTE *)v19 + 24))
      goto LABEL_63;
    *((_BYTE *)v7 + 24) = 0;
    v12 = (uint64_t *)v7[2];
    if (v12 == result)
    {
      v12 = result;
LABEL_61:
      *((_BYTE *)v12 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v12 + 24))
      goto LABEL_61;
LABEL_24:
    v7 = *(uint64_t **)(v12[2] + 8 * (*(_QWORD *)v12[2] == (_QWORD)v12));
  }
  if (*((_BYTE *)v7 + 24))
  {
    v16 = (_QWORD *)*v7;
    if (!*v7)
      goto LABEL_49;
LABEL_48:
    if (!*((_BYTE *)v16 + 24))
      goto LABEL_67;
  }
  else
  {
    *((_BYTE *)v7 + 24) = 1;
    *((_BYTE *)v14 + 24) = 0;
    v20 = (uint64_t *)v7[1];
    *v14 = v20;
    if (v20)
      v20[2] = (uint64_t)v14;
    v7[2] = (uint64_t)v14[2];
    v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v7;
    v7[1] = (uint64_t)v14;
    v14[2] = v7;
    if (result == (uint64_t *)v14)
      result = v7;
    v7 = *v14;
    v16 = (_QWORD *)**v14;
    if (v16)
      goto LABEL_48;
  }
LABEL_49:
  v21 = (uint64_t *)v7[1];
  if (!v21 || *((_BYTE *)v21 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v12 = (uint64_t *)v7[2];
    if (*((_BYTE *)v12 + 24))
      v13 = v12 == result;
    else
      v13 = 1;
    if (v13)
      goto LABEL_61;
    goto LABEL_24;
  }
  if (v16 && !*((_BYTE *)v16 + 24))
  {
LABEL_67:
    v21 = v7;
  }
  else
  {
    *((_BYTE *)v21 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v22 = *v21;
    v7[1] = *v21;
    if (v22)
      *(_QWORD *)(v22 + 16) = v7;
    v21[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v21;
    *v21 = (uint64_t)v7;
    v7[2] = (uint64_t)v21;
    v16 = v7;
  }
  v24 = (uint64_t *)v21[2];
  *((_BYTE *)v21 + 24) = *((_BYTE *)v24 + 24);
  *((_BYTE *)v24 + 24) = 1;
  *((_BYTE *)v16 + 24) = 1;
  v25 = *v24;
  v26 = *(_QWORD *)(*v24 + 8);
  *v24 = v26;
  if (v26)
    *(_QWORD *)(v26 + 16) = v24;
  *(_QWORD *)(v25 + 16) = v24[2];
  *(_QWORD *)(v24[2] + 8 * (*(_QWORD *)v24[2] != (_QWORD)v24)) = v25;
  *(_QWORD *)(v25 + 8) = v24;
  v24[2] = v25;
  return result;
}

std::chrono::duration<long long, std::ratio<1, 1000000>>::rep operations_research::TimeLimit::Infinite@<X0>(_QWORD *a1@<X8>)
{
  uint64_t CurrentTimeNanos;
  _QWORD *v4;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep result;

  CurrentTimeNanos = operator new();
  v4 = (_QWORD *)CurrentTimeNanos;
  *(_QWORD *)(CurrentTimeNanos + 24) = (uint64_t)(0.0001 * 1000000000.0);
  *(_OWORD *)(CurrentTimeNanos + 40) = 0u;
  *(_DWORD *)(CurrentTimeNanos + 32) = 100;
  *(_QWORD *)(CurrentTimeNanos + 88) = 0;
  *(_OWORD *)(CurrentTimeNanos + 56) = 0u;
  *(_BYTE *)(CurrentTimeNanos + 72) = 0;
  *(_QWORD *)(CurrentTimeNanos + 104) = 0x7FF0000000000000;
  *(_QWORD *)(CurrentTimeNanos + 112) = 0;
  *(_QWORD *)(CurrentTimeNanos + 120) = 0;
  *(_QWORD *)(CurrentTimeNanos + 128) = 0x7FF0000000000000;
  if (FLAGS_time_limit_use_usertime)
  {
    *(_BYTE *)(CurrentTimeNanos + 72) = 1;
    CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)CurrentTimeNanos);
    v4[10] = CurrentTimeNanos;
    v4[12] = 0x7FF0000000000000;
  }
  result = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)CurrentTimeNanos);
  *v4 = result;
  v4[1] = result;
  v4[2] = 0x7FFFFFFFFFFFFFFFLL;
  *a1 = v4;
  return result;
}

void sub_22D9E9D48(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  MEMORY[0x22E31DF78](v1, 0x1030C40021678CBLL);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<operations_research::TimeLimit>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 40);
    if (v3)
    {
      *(_QWORD *)(v2 + 48) = v3;
      operator delete(v3);
    }
    MEMORY[0x22E31DF78](v2, 0x1030C40021678CBLL);
  }
  return a1;
}

void operations_research::MergingPartition::~MergingPartition(operations_research::MergingPartition *this)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
    operator delete(v2);
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 4) = v3;
    operator delete(v3);
  }
  v4 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v4;
    operator delete(v4);
  }
}

uint64_t operations_research::Stat::Priority(operations_research::Stat *this)
{
  return 0;
}

double operations_research::Stat::Sum(operations_research::Stat *this)
{
  return 0.0;
}

void operations_research::RunningMax<long long>::Add(int *a1, uint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  _OWORD *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v4 = (char *)*((_QWORD *)a1 + 1);
  v5 = (char *)*((_QWORD *)a1 + 2);
  v6 = v5 - v4;
  v7 = (v5 - v4) >> 3;
  v8 = *a1;
  if (v7 < v8)
  {
    if (v4 == v5 || *(_QWORD *)&v4[8 * a1[9]] <= a2)
      a1[9] = v6 >> 3;
    v9 = *((_QWORD *)a1 + 3);
    if ((unint64_t)v5 < v9)
    {
      *(_QWORD *)v5 = a2;
      *((_QWORD *)a1 + 2) = v5 + 8;
      return;
    }
    v16 = v7 + 1;
    if ((v7 + 1) >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v17 = v9 - (_QWORD)v4;
    if (v17 >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v19 = operator new(8 * v18);
      v20 = &v19[8 * v7];
      v21 = &v19[8 * v18];
      *v20 = a2;
      v22 = (uint64_t)(v20 + 1);
      if (v4 == v5)
        goto LABEL_39;
    }
    else
    {
      v19 = 0;
      v20 = (_QWORD *)(8 * v7);
      v21 = 0;
      *(_QWORD *)(8 * v7) = a2;
      v22 = 8 * v7 + 8;
      if (v4 == v5)
      {
LABEL_39:
        *((_QWORD *)a1 + 1) = v20;
        *((_QWORD *)a1 + 2) = v22;
        *((_QWORD *)a1 + 3) = v21;
        if (v4)
          operator delete(v4);
        *((_QWORD *)a1 + 2) = v22;
        return;
      }
    }
    if (v6 - 8 < 0x58)
      goto LABEL_46;
    if ((unint64_t)(v4 - v19) < 0x20)
      goto LABEL_46;
    v24 = ((v6 - 8) >> 3) + 1;
    v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v26 = &v5[-v25];
    v20 = (_QWORD *)((char *)v20 - v25);
    v27 = &v19[8 * v7 - 16];
    v28 = v5 - 16;
    v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v30 = *(_OWORD *)v28;
      *(v27 - 1) = *((_OWORD *)v28 - 1);
      *v27 = v30;
      v27 -= 2;
      v28 -= 32;
      v29 -= 4;
    }
    while (v29);
    v5 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_46:
      do
      {
        v31 = *((_QWORD *)v5 - 1);
        v5 -= 8;
        *--v20 = v31;
      }
      while (v5 != v4);
    }
    goto LABEL_39;
  }
  v10 = a1[8];
  v11 = a1[9];
  if (*(_QWORD *)&v4[8 * v11] <= a2)
  {
    a1[9] = v10;
    *(_QWORD *)&v4[8 * v10] = a2;
  }
  else
  {
    *(_QWORD *)&v4[8 * v10] = a2;
    if (v10 == (_DWORD)v11)
    {
      a1[9] = 0;
      if (v6 >= 9)
      {
        v12 = *(_QWORD *)v4;
        v13 = 2;
        if (v7 > 2)
          v13 = (v5 - v4) >> 3;
        v14 = 1;
        do
        {
          v15 = *(_QWORD *)&v4[8 * v14];
          if (v15 > v12)
          {
            a1[9] = v14;
            v12 = v15;
          }
          ++v14;
        }
        while (v13 != v14);
      }
      v10 = v11;
    }
  }
  if (v10 + 1 == (_DWORD)v8)
    v23 = 0;
  else
    v23 = v10 + 1;
  a1[8] = v23;
}

void operations_research::KnapsackPropagatorForCuts::~KnapsackPropagatorForCuts(operations_research::KnapsackPropagatorForCuts *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = (_QWORD *)*((_QWORD *)this + 7);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 8);
    v4 = (void *)*((_QWORD *)this + 7);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          MEMORY[0x22E31DF78](v5, 0x1000C40D315E998);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 7);
    }
    *((_QWORD *)this + 8) = v2;
    operator delete(v4);
  }
  v7 = (_QWORD *)*((_QWORD *)this + 3);
  if (v7)
  {
    v8 = (_QWORD *)*((_QWORD *)this + 4);
    v9 = (void *)*((_QWORD *)this + 3);
    if (v8 != v7)
    {
      do
      {
        v11 = *--v8;
        v10 = v11;
        *v8 = 0;
        if (v11)
          MEMORY[0x22E31DF78](v10, 0x1000C40D315E998);
      }
      while (v8 != v7);
      v9 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v7;
    operator delete(v9);
  }
}

uint64_t operations_research::KnapsackPropagatorForCuts::Init(operations_research::KnapsackPropagatorForCuts *this, uint64_t *a2, uint64_t *a3, double a4)
{
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v25;

  v8 = a2[1] - *a2;
  v10 = (_QWORD *)*((_QWORD *)this + 7);
  v11 = (_QWORD *)*((_QWORD *)this + 8);
  v9 = (_QWORD *)((char *)this + 56);
  while (v11 != v10)
  {
    v13 = *--v11;
    v12 = v13;
    *v11 = 0;
    if (v13)
      MEMORY[0x22E31DF78](v12, 0x1000C40D315E998);
  }
  *((_QWORD *)this + 8) = v10;
  if ((int)(v8 >> 3) >= 1)
  {
    v14 = 0;
    v15 = (v8 >> 3);
    do
    {
      v16 = *a3;
      v17 = *a2;
      v18 = operator new();
      v19 = *(_QWORD *)(v16 + 8 * v14);
      v20 = *(_QWORD *)(v17 + 8 * v14);
      *(_DWORD *)v18 = v14;
      *(_QWORD *)(v18 + 8) = v19;
      *(_QWORD *)(v18 + 16) = v20;
      v25 = v18;
      v21 = (uint64_t *)*((_QWORD *)this + 8);
      if ((unint64_t)v21 >= *((_QWORD *)this + 9))
      {
        v22 = std::vector<std::unique_ptr<operations_research::KnapsackItemForCuts>>::__emplace_back_slow_path<std::unique_ptr<operations_research::KnapsackItemForCuts>>(v9, &v25);
      }
      else
      {
        v25 = 0;
        *v21 = v18;
        v22 = v21 + 1;
      }
      *((_QWORD *)this + 8) = v22;
      v23 = v25;
      v25 = 0;
      if (v23)
        MEMORY[0x22E31DF78](v23, 0x1000C40D315E998);
      ++v14;
    }
    while (v15 != v14);
  }
  *(double *)this = a4;
  *((_OWORD *)this + 5) = xmmword_22DCE65C0;
  *((_QWORD *)this + 12) = 0x7FF0000000000000;
  return operations_research::KnapsackPropagatorForCuts::InitPropagator(this);
}

void sub_22D9EA2B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    MEMORY[0x22E31DF78](a10, 0x1000C40D315E998);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::KnapsackPropagatorForCuts::InitPropagator(operations_research::KnapsackPropagatorForCuts *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  double v16;
  uint64_t *v17;
  uint64_t v18;
  double v19;
  double v20;
  unint64_t v21;
  uint64_t v22;
  double v24;

  v2 = (_QWORD *)((char *)this + 24);
  v3 = (_QWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = -1;
  v4 = (_QWORD *)*((_QWORD *)this + 4);
  while (v4 != v3)
  {
    v6 = *--v4;
    v5 = v6;
    *v4 = 0;
    if (v6)
      MEMORY[0x22E31DF78](v5, 0x1000C40D315E998);
  }
  *((_QWORD *)this + 4) = v3;
  std::vector<std::unique_ptr<operations_research::KnapsackItemForCuts>>::reserve((uint64_t)v2, (uint64_t)(*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 3);
  v7 = *((_QWORD *)this + 7);
  if (*((_QWORD *)this + 8) != v7)
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(v7 + 8 * v8);
      v10 = operator new();
      *(_DWORD *)v10 = v8;
      *(_OWORD *)(v10 + 8) = *(_OWORD *)(v9 + 8);
      v24 = *(double *)&v10;
      v11 = (uint64_t *)*((_QWORD *)this + 4);
      if ((unint64_t)v11 >= *((_QWORD *)this + 5))
      {
        v12 = std::vector<std::unique_ptr<operations_research::KnapsackItemForCuts>>::__emplace_back_slow_path<std::unique_ptr<operations_research::KnapsackItemForCuts>>(v2, (uint64_t *)&v24);
      }
      else
      {
        v24 = 0.0;
        *v11 = v10;
        v12 = v11 + 1;
      }
      *((_QWORD *)this + 4) = v12;
      v13 = *(_QWORD *)&v24;
      v24 = 0.0;
      if (v13)
        MEMORY[0x22E31DF78](v13, 0x1000C40D315E998);
      ++v8;
      v7 = *((_QWORD *)this + 7);
    }
    while (v8 < (*((_QWORD *)this + 8) - v7) >> 3);
  }
  *((_QWORD *)this + 6) = 0;
  v14 = *((_QWORD *)this + 3);
  v15 = (uint64_t *)*((_QWORD *)this + 4);
  if ((uint64_t *)v14 == v15)
  {
    v20 = 1.0;
  }
  else
  {
    v16 = 0.0;
    v17 = (uint64_t *)*((_QWORD *)this + 3);
    do
    {
      v18 = *v17++;
      v19 = *(double *)(v18 + 16);
      if (v16 < v19)
        v16 = v19;
      *((double *)this + 6) = v16;
    }
    while (v17 != v15);
    v20 = v16 + 1.0;
  }
  v21 = 126 - 2 * __clz(((uint64_t)v15 - v14) >> 3);
  *((double *)this + 6) = v20;
  v24 = v20;
  if (v15 == (uint64_t *)v14)
    v22 = 0;
  else
    v22 = v21;
}

void sub_22D9EA484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    MEMORY[0x22E31DF78](a10, 0x1000C40D315E998);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::KnapsackPropagatorForCuts::CopyCurrentStateToSolution(uint64_t result, _QWORD *a2)
{
  int **v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int **v12;
  int **v13;
  double v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  double v18;

  v2 = *(int ***)(result + 56);
  v3 = *(_QWORD *)(result + 64) - (_QWORD)v2;
  if (v3)
  {
    v4 = v3 >> 3;
    v5 = *(_QWORD **)(result + 104);
    if (v4 <= 1)
      v4 = 1;
    while (1)
    {
      v6 = **v2;
      if (v5[1] <= v6)
        break;
      v7 = v6 >> 6;
      v8 = 1 << v6;
      if ((*(_QWORD *)(*v5 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
      {
        if (v5[4] <= v6)
          std::vector<BOOL>::__throw_out_of_range[abi:ne180100]();
        v9 = 8 * v7;
        v10 = *(_QWORD *)(v5[3] + v9);
        v11 = (_QWORD *)(*a2 + v9);
        if ((v10 & v8) != 0)
        {
          *v11 |= v8;
          ++v2;
          if (!--v4)
            goto LABEL_13;
        }
        else
        {
          *v11 &= ~v8;
          ++v2;
          if (!--v4)
            goto LABEL_13;
        }
      }
      else
      {
        *(_QWORD *)(*a2 + 8 * v7) &= ~v8;
        ++v2;
        if (!--v4)
          goto LABEL_13;
      }
    }
LABEL_21:
    std::vector<BOOL>::__throw_out_of_range[abi:ne180100]();
  }
LABEL_13:
  v12 = *(int ***)(result + 24);
  v13 = *(int ***)(result + 32);
  if (v12 != v13)
  {
    v14 = *(double *)result - *(double *)(result + 8);
    result = *(_QWORD *)(result + 104);
    while (1)
    {
      v15 = **v12;
      if (*(_QWORD *)(result + 8) <= v15)
        break;
      v16 = v15 >> 6;
      v17 = 1 << v15;
      if ((*(_QWORD *)(*(_QWORD *)result + 8 * v16) & v17) == 0)
      {
        v18 = *((double *)*v12 + 1);
        if (v14 < v18)
          return result;
        v14 = v14 - v18;
        *(_QWORD *)(*a2 + 8 * v16) |= v17;
      }
      if (++v12 == v13)
        return result;
    }
    goto LABEL_21;
  }
  return result;
}

uint64_t operations_research::KnapsackPropagatorForCuts::ComputeProfitBounds(uint64_t this)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  double v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  double *v10;
  int v11;
  double v12;
  unint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;

  v1 = *(double *)(this + 80);
  *(double *)(this + 88) = v1;
  *(_DWORD *)(this + 16) = -1;
  v2 = *(_QWORD *)(this + 24);
  v3 = *(_QWORD *)(this + 32) - v2;
  if (!v3)
    goto LABEL_21;
  v4 = 0;
  v5 = v3 >> 3;
  v6 = *(double *)this - *(double *)(this + 8);
  v7 = *(_QWORD **)(this + 104);
  v8 = v7[1];
  if (v5 <= 1)
    v9 = 1;
  else
    v9 = v5;
  while (1)
  {
    v10 = *(double **)(v2 + 8 * v4);
    v11 = *(_DWORD *)v10;
    if (v8 <= *(int *)v10)
      std::vector<BOOL>::__throw_out_of_range[abi:ne180100]();
    if (((*(_QWORD *)(*v7 + (((unint64_t)v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
      goto LABEL_6;
    *(_DWORD *)(this + 16) = v11;
    v12 = v10[1];
    if (v6 < v12)
      break;
    v6 = v6 - v12;
    v1 = v1 + v10[2];
    *(double *)(this + 88) = v1;
LABEL_6:
    if (v9 == ++v4)
      goto LABEL_21;
  }
  v13 = (v4 + 1);
  v14 = 0.0;
  v15 = 0.0;
  if (v5 > v13)
  {
    v15 = v6 * *(double *)(*(_QWORD *)(v2 + 8 * v13) + 16) / *(double *)(*(_QWORD *)(v2 + 8 * v13) + 8);
    if (v15 < 0.0)
      v15 = 0.0;
  }
  v16 = v4;
  if ((_DWORD)v4)
  {
    v17 = *(_QWORD *)(v2 + 8 * (v4 - 1));
    v18 = *(double *)(v17 + 8);
    if (v18 != 0.0)
    {
      v19 = *(double *)(*(_QWORD *)(v2 + 8 * v16) + 16)
          - *(double *)(v17 + 16) * (*(double *)(*(_QWORD *)(v2 + 8 * v16) + 8) - v6) / v18;
      v14 = 0.0;
      if (v19 >= 0.0)
        v14 = v19;
    }
  }
  if (v15 >= v14)
    v20 = v15;
  else
    v20 = v14;
  v1 = v1 + v20;
LABEL_21:
  *(double *)(this + 96) = v1;
  return this;
}

void std::vector<std::unique_ptr<operations_research::KnapsackItemForCuts>>::reserve(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  v2 = *(char **)a1;
  if (a2 <= (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)
    return;
  if (a2 >> 61)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v4 = *(char **)(a1 + 8);
  v5 = 8 * a2;
  v6 = (char *)operator new(8 * a2);
  v7 = &v6[v5];
  v8 = v4 - v2;
  v9 = (unint64_t)&v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
  if (v4 != v2)
  {
    v10 = v8 - 8;
    if ((unint64_t)(v8 - 8) >= 0x78)
    {
      v12 = (unint64_t)&v4[-(v10 & 0xFFFFFFFFFFFFFFF8) - 8] >= v9
         || &v6[(v8 & 0xFFFFFFFFFFFFFFF8) - (v10 & 0xFFFFFFFFFFFFFFF8) - 8] >= v4;
      v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
      if (v12)
      {
        v13 = v8 >> 3;
        v14 = (v10 >> 3) + 1;
        v15 = 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL);
        v11 = (char *)(v9 - v15);
        v16 = &v4[-v15];
        v17 = v4 - 16;
        v18 = &v6[8 * v13 - 16];
        v19 = v14 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v21 = *((_OWORD *)v17 - 1);
          v20 = *(_OWORD *)v17;
          *((_OWORD *)v17 - 1) = 0uLL;
          *(_OWORD *)v17 = 0uLL;
          *((_OWORD *)v18 - 1) = v21;
          *(_OWORD *)v18 = v20;
          v17 -= 32;
          v18 -= 32;
          v19 -= 4;
        }
        while (v19);
        v4 = v16;
        if (v14 == (v14 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_17:
          v23 = *(char **)a1;
          v2 = *(char **)(a1 + 8);
          *(_QWORD *)a1 = v11;
          *(_QWORD *)(a1 + 8) = v9;
          *(_QWORD *)(a1 + 16) = v7;
          if (v2 == v23)
          {
            if (v2)
              goto LABEL_19;
          }
          else
          {
            do
            {
              v25 = *((_QWORD *)v2 - 1);
              v2 -= 8;
              v24 = v25;
              *(_QWORD *)v2 = 0;
              if (v25)
                MEMORY[0x22E31DF78](v24, 0x1000C40D315E998);
            }
            while (v2 != v23);
            v2 = v23;
            if (v23)
              goto LABEL_19;
          }
          return;
        }
      }
    }
    else
    {
      v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v22 = *((_QWORD *)v4 - 1);
      v4 -= 8;
      *(_QWORD *)v4 = 0;
      *((_QWORD *)v11 - 1) = v22;
      v11 -= 8;
    }
    while (v4 != v2);
    goto LABEL_17;
  }
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = v7;
  if (v2)
LABEL_19:
    operator delete(v2);
}

double operations_research::KnapsackSolverForCuts::KnapsackSolverForCuts(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  double result;

  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0x7FF0000000000000;
  *(_QWORD *)(a1 + 104) = a1 + 136;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 208) = 0;
  v2 = *a2;
  *(_QWORD *)(a1 + 232) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 216) = v2;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  result = INFINITY;
  *(_OWORD *)(a1 + 240) = xmmword_22DCE65D0;
  *(_QWORD *)(a1 + 256) = 0x7FFFFFFFFFFFFFFFLL;
  return result;
}

uint64_t operations_research::KnapsackSolverForCuts::Init(char **a1, uint64_t *a2, uint64_t *a3, double a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12[2];
  int v13;
  uint64_t *v14;

  v8 = a2[1] - *a2;
  v9 = (unint64_t)v8 >> 3;
  v10 = (int)(v8 >> 3);
  LOBYTE(v12[0]) = 0;
  std::vector<BOOL>::assign(a1 + 17, v10, v12);
  LOBYTE(v12[0]) = 0;
  std::vector<BOOL>::assign(a1 + 20, v10, v12);
  LOBYTE(v12[0]) = 0;
  std::vector<BOOL>::assign(a1 + 24, v10, v12);
  v13 = v9;
  v12[0] = (a3[1] - *a3) >> 3;
  if (v12[0] != v10)
  {
    v14 = (uint64_t *)google::MakeCheckOpString<int,unsigned long>((int)&v13, (int)v12, "number_of_items == weights.size()");
    if (v14)
    {
      google::LogMessageFatal::LogMessageFatal(v12, (google::glog_internal_namespace_ *)"./ortools/algorithms/knapsack_solver_for_cuts.cc", 292, &v14);
      google::LogMessage::stream((google::LogMessage *)v12);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v12);
    }
  }
  return operations_research::KnapsackPropagatorForCuts::Init((operations_research::KnapsackPropagatorForCuts *)a1, a2, a3, a4);
}

void sub_22D9EAA44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

double operations_research::KnapsackSolverForCuts::GetAggregatedProfitUpperBound(operations_research::KnapsackSolverForCuts *this)
{
  operations_research::KnapsackPropagatorForCuts::ComputeProfitBounds((uint64_t)this);
  return fmin(*((double *)this + 12), INFINITY);
}

double operations_research::KnapsackSolverForCuts::Solve(operations_research::KnapsackSolverForCuts *this, operations_research::TimeLimit *a2, BOOL *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  absl::lts_2020_02_25 *NewNode;
  void *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 v15;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v17;
  uint64_t v18;
  absl::lts_2020_02_25 *v19;
  double v20;
  double v21;
  _BYTE *v22;
  _BYTE *v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  int **v29;
  int **v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  double v34;
  double v35;
  BOOL v36;
  int **v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  int *v43;
  double v44;
  double v45;
  BOOL v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  double v50;
  int v51;
  int i;
  int *v53;
  int updated;
  double v55;
  uint64_t v56;
  unint64_t v58[2];
  char v59;
  uint64_t *v60;
  uint64_t v61[3];
  uint64_t v62;
  void *__p;
  _BYTE *v64;
  uint64_t v65;

  *((_QWORD *)this + 23) = 0;
  *a3 = 1;
  __p = 0;
  v64 = 0;
  v65 = 0;
  v6 = operator new();
  *(_DWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0x1FFFFFFFFLL;
  *(_QWORD *)(v6 + 32) = 0x7FF0000000000000;
  *(_DWORD *)(v6 + 40) = -1;
  v62 = v6;
  *(_QWORD *)(v6 + 24) = *((_QWORD *)this + 10);
  operations_research::KnapsackPropagatorForCuts::ComputeProfitBounds((uint64_t)this);
  *(double *)(v6 + 32) = fmin(*((double *)this + 12), INFINITY);
  v7 = v62;
  *(_DWORD *)(v62 + 40) = *((_DWORD *)this + 4);
  v8 = (uint64_t *)*((_QWORD *)this + 15);
  if ((unint64_t)v8 >= *((_QWORD *)this + 16))
  {
    v9 = std::vector<std::unique_ptr<operations_research::KnapsackSearchNodeForCuts>>::__push_back_slow_path<std::unique_ptr<operations_research::KnapsackSearchNodeForCuts>>((_QWORD *)this + 14, &v62);
  }
  else
  {
    v62 = 0;
    *v8 = v7;
    v9 = v8 + 1;
  }
  *((_QWORD *)this + 15) = v9;
  v10 = *(v9 - 1);
  if (operations_research::KnapsackSolverForCuts::MakeNewNode((uint64_t)this, (int *)v10, 0))
  NewNode = (absl::lts_2020_02_25 *)operations_research::KnapsackSolverForCuts::MakeNewNode((uint64_t)this, (int *)v10, 1);
  if ((_DWORD)NewNode)
  v12 = __p;
  if (__p != v64)
  {
    v13 = 0;
    do
    {
      if (*(double *)(*(_QWORD *)v12 + 32) <= *((double *)this + 23))
        break;
      v14 = (unsigned __int8 *)*((_QWORD *)a2 + 15);
      if (v14)
      {
        v15 = atomic_load(v14);
        if ((v15 & 1) != 0)
          goto LABEL_72;
      }
      if (fmax(*((double *)a2 + 13) - *((double *)a2 + 14), 0.0) <= 0.0)
        goto LABEL_72;
      CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos(NewNode);
      v17 = CurrentTimeNanos;
      if (*((_QWORD *)a2 + 3) <= CurrentTimeNanos - *((_QWORD *)a2 + 1))
        v18 = CurrentTimeNanos - *((_QWORD *)a2 + 1);
      else
        v18 = *((_QWORD *)a2 + 3);
      operations_research::RunningMax<long long>::Add((int *)a2 + 8, v18);
      *((_QWORD *)a2 + 1) = v17;
      if (*(_QWORD *)(*((_QWORD *)a2 + 5) + 8 * *((int *)a2 + 17)) + v17 >= *((_QWORD *)a2 + 2))
      {
        if (!FLAGS_time_limit_use_usertime)
          goto LABEL_71;
        v20 = *((double *)a2 + 12);
        if (*((_BYTE *)a2 + 72))
        {
          v21 = v20
              + (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v19) - *((_QWORD *)a2 + 10) + *((_QWORD *)a2 + 11))
              * -0.000000001;
          if (v21 <= 0.0001)
            goto LABEL_71;
        }
        else
        {
          v21 = v20 + (double)*((uint64_t *)a2 + 11) * -0.000000001;
          if (v21 <= 0.0001)
          {
LABEL_71:
            *((_QWORD *)a2 + 2) = 0;
LABEL_72:
            *a3 = 0;
            break;
          }
        }
        *((_QWORD *)a2 + 2) = *((_QWORD *)a2 + 1) + (uint64_t)(v21 * 1000000000.0);
      }
      if (*((double *)this + 31) > -INFINITY)
      {
        operations_research::KnapsackPropagatorForCuts::ComputeProfitBounds((uint64_t)this);
        if (fmin(*((double *)this + 12), INFINITY) < *((double *)this + 31))
          goto LABEL_72;
      }
      if (*((double *)this + 23) > *((double *)this + 30) || v13 >= *((_QWORD *)this + 32))
        goto LABEL_72;
      v22 = __p;
      v23 = v64;
      v24 = *(int **)__p;
      v25 = v64 - (_BYTE *)__p;
      if (v64 - (_BYTE *)__p >= 9)
      {
        v26 = 0;
        v27 = v25 >> 3;
        v28 = (unint64_t)((v25 >> 3) - 2) >> 1;
        v29 = (int **)__p;
        do
        {
          v30 = v29;
          v29 += v26 + 1;
          v31 = 2 * v26;
          v26 = (2 * v26) | 1;
          v32 = v31 + 2;
          if (v32 < v27)
          {
            v33 = v29[1];
            v34 = *((double *)*v29 + 4);
            v35 = *((double *)v33 + 4);
            v36 = v34 < v35;
            if (v34 == v35)
              v36 = *((double *)*v29 + 3) < *((double *)v33 + 3);
            if (v36)
            {
              ++v29;
              v26 = v32;
            }
          }
          *v30 = *v29;
        }
        while (v26 <= v28);
        v37 = (int **)(v23 - 8);
        if (v29 == v37)
        {
          *v29 = v24;
        }
        else
        {
          *v29 = *v37;
          *v37 = v24;
          v38 = (char *)v29 - v22 + 8;
          if (v38 >= 9)
          {
            v39 = ((unint64_t)v38 >> 3) - 2;
            v40 = v39 >> 1;
            v41 = &v22[8 * (v39 >> 1)];
            v42 = *(_QWORD *)v41;
            v43 = *v29;
            v44 = *(double *)(*(_QWORD *)v41 + 32);
            v45 = *((double *)*v29 + 4);
            v46 = v44 < v45;
            if (v44 == v45)
              v46 = *(double *)(v42 + 24) < *((double *)v43 + 3);
            if (v46)
            {
              *v29 = (int *)v42;
              if (v39 >= 2)
              {
                while (1)
                {
                  v47 = v40 - 1;
                  v40 = (v40 - 1) >> 1;
                  v48 = &v22[8 * v40];
                  v49 = *(_QWORD *)v48;
                  v50 = *(double *)(*(_QWORD *)v48 + 32);
                  if (v50 == v45)
                  {
                    if (*(double *)(v49 + 24) >= *((double *)v43 + 3))
                      break;
                  }
                  else if (v50 >= v45)
                  {
                    break;
                  }
                  *(_QWORD *)v41 = v49;
                  v41 = &v22[8 * v40];
                  if (v47 <= 1)
                    goto LABEL_51;
                }
              }
              v48 = v41;
LABEL_51:
              *(_QWORD *)v48 = v43;
              v64 -= 8;
              if (v24 == (int *)v10)
                goto LABEL_65;
LABEL_55:
              v61[0] = v10;
              v61[2] = (uint64_t)v24;
              v51 = *v24;
              for (i = *(_DWORD *)v10; *(_DWORD *)v10 > v51; v10 = *(_QWORD *)(v10 + 8))
                ;
              v53 = v24;
              if (v51 > i)
              {
                v53 = v24;
                do
                  v53 = (int *)*((_QWORD *)v53 + 1);
                while (*v53 > i);
              }
              while ((int *)v10 != v53)
              {
                v10 = *(_QWORD *)(v10 + 8);
                v53 = (int *)*((_QWORD *)v53 + 1);
              }
              v61[1] = v10;
              updated = operations_research::KnapsackSolverForCuts::UpdatePropagators((uint64_t)this, v61);
              LOBYTE(v58[0]) = updated;
              v59 = 1;
              if (!updated)
              {
                v60 = (uint64_t *)google::MakeCheckOpString<BOOL,BOOL>((int)v58, (int)&v59, "UpdatePropagators(path) == true");
                if (v60)
                {
                  google::LogMessageFatal::LogMessageFatal(v58, (google::glog_internal_namespace_ *)"./ortools/algorithms/knapsack_solver_for_cuts.cc", 371, &v60);
                  google::LogMessage::stream((google::LogMessage *)v58);
                  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v58);
                }
              }
              v10 = (uint64_t)v24;
              goto LABEL_65;
            }
          }
        }
      }
      v64 -= 8;
      if (v24 != (int *)v10)
        goto LABEL_55;
LABEL_65:
      if (operations_research::KnapsackSolverForCuts::MakeNewNode((uint64_t)this, v24, 0))
      NewNode = (absl::lts_2020_02_25 *)operations_research::KnapsackSolverForCuts::MakeNewNode((uint64_t)this, v24, 1);
      if ((_DWORD)NewNode)
      ++v13;
      v12 = __p;
    }
    while (__p != v64);
  }
  v55 = *((double *)this + 23);
  v56 = v62;
  v62 = 0;
  if (v56)
    MEMORY[0x22E31DF78](v56, 0x1060C40B86F7F5DLL);
  if (__p)
  {
    v64 = __p;
    operator delete(__p);
  }
  return v55;
}

void sub_22D9EB02C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void sub_22D9EB034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  void *v19;

  if (a16)
  {
    MEMORY[0x22E31DF78](a16, 0x1060C40B86F7F5DLL);
    v19 = __p;
    if (!__p)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v19 = __p;
    if (!__p)
      goto LABEL_3;
  }
  operator delete(v19);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::KnapsackSolverForCuts::MakeNewNode(uint64_t a1, int *a2, int a3)
{
  uint64_t v3;
  int *v4;
  int **v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int **v10;
  int *v11;
  int *v12;
  int v13;
  uint64_t v14;
  double v15;
  int *v16;
  int v17;
  int *v18;
  int v19;
  int *v20;
  uint64_t v21;
  uint64_t *v22;
  int *v24;
  int v25;
  int *v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  int *v32;
  int *v33;
  uint64_t v34[3];
  int v35;
  _QWORD v36[2];
  __int128 v37;
  int v38;

  v3 = a2[10];
  if ((_DWORD)v3 == -1)
    return 0;
  v4 = a2;
  v6 = (int **)v36;
  v7 = *a2;
  v35 = *a2 + 1;
  v8 = 0x100000000;
  if (!a3)
    v8 = 0;
  v9 = v8 | v3;
  v36[0] = a2;
  v36[1] = v8 | v3;
  v37 = xmmword_22DCE65B0;
  v38 = -1;
  v34[0] = (uint64_t)a2;
  v34[2] = (uint64_t)&v35;
  v10 = (int **)v36;
  do
  {
    v11 = *v10;
    v12 = *v10;
    v13 = *v12;
    v10 = (int **)(v12 + 2);
  }
  while (v13 > v7);
  v14 = (uint64_t)a2;
  if (v11 != a2)
  {
    v14 = (uint64_t)a2;
    do
    {
      v14 = *(_QWORD *)(v14 + 8);
      v11 = (int *)*((_QWORD *)v11 + 1);
    }
    while ((int *)v14 != v11);
  }
  v34[1] = v14;
  if (!operations_research::KnapsackSolverForCuts::UpdatePropagators(a1, v34))
  {
    v24 = &v35;
    v31 = &v35;
    v33 = v4;
    v25 = *v4;
    if (v35 > *v4)
    {
      do
      {
        v24 = *v6;
        v26 = *v6;
        v27 = *v26;
        v6 = (int **)(v26 + 2);
      }
      while (v27 > v25);
    }
    while (v25 > v35)
    {
      v4 = (int *)*((_QWORD *)v4 + 1);
      v25 = *v4;
    }
    while (v24 != v4)
    {
      v24 = (int *)*((_QWORD *)v24 + 1);
      v4 = (int *)*((_QWORD *)v4 + 1);
    }
    v32 = v24;
    operations_research::KnapsackSolverForCuts::UpdatePropagators(a1, (uint64_t *)&v31);
    return 0;
  }
  *(_QWORD *)&v37 = *(_QWORD *)(a1 + 80);
  operations_research::KnapsackPropagatorForCuts::ComputeProfitBounds(a1);
  v15 = *(double *)(a1 + 88);
  *((_QWORD *)&v37 + 1) = fmin(*(double *)(a1 + 96), INFINITY);
  v38 = *(_DWORD *)(a1 + 16);
  if (*(double *)(a1 + 184) < v15)
  {
    *(double *)(a1 + 184) = v15;
    operations_research::KnapsackPropagatorForCuts::CopyCurrentStateToSolution(a1, (_QWORD *)(a1 + 192));
  }
  v16 = &v35;
  v31 = &v35;
  v33 = v4;
  v17 = *v4;
  if (v35 > *v4)
  {
    do
    {
      v16 = *v6;
      v18 = *v6;
      v19 = *v18;
      v6 = (int **)(v18 + 2);
    }
    while (v19 > v17);
  }
  v20 = v4;
  if (v17 > v35)
  {
    v20 = v4;
    do
      v20 = (int *)*((_QWORD *)v20 + 1);
    while (*v20 > v35);
  }
  while (v16 != v20)
  {
    v16 = (int *)*((_QWORD *)v16 + 1);
    v20 = (int *)*((_QWORD *)v20 + 1);
  }
  v32 = v16;
  operations_research::KnapsackSolverForCuts::UpdatePropagators(a1, (uint64_t *)&v31);
  if (*((double *)&v37 + 1) < *(double *)(a1 + 184))
    return 0;
  v21 = operator new();
  *(_DWORD *)v21 = *v4 + 1;
  *(_QWORD *)(v21 + 8) = v4;
  *(_QWORD *)(v21 + 16) = v9;
  v30 = v21;
  *(_OWORD *)(v21 + 24) = v37;
  *(_DWORD *)(v21 + 40) = v38;
  v22 = *(uint64_t **)(a1 + 120);
  if ((unint64_t)v22 >= *(_QWORD *)(a1 + 128))
  {
    v28 = std::vector<std::unique_ptr<operations_research::KnapsackSearchNodeForCuts>>::__push_back_slow_path<std::unique_ptr<operations_research::KnapsackSearchNodeForCuts>>((_QWORD *)(a1 + 112), &v30);
    v29 = v30;
    *(_QWORD *)(a1 + 120) = v28;
    v30 = 0;
    if (v29)
      MEMORY[0x22E31DF78](v29, 0x1060C40B86F7F5DLL);
    return 1;
  }
  else
  {
    *v22 = v21;
    *(_QWORD *)(a1 + 120) = v22 + 1;
    return 1;
  }
}

void sub_22D9EB36C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    MEMORY[0x22E31DF78](a10, 0x1060C40B86F7F5DLL);
  _Unwind_Resume(exception_object);
}

void std::priority_queue<operations_research::KnapsackSearchNodeForCuts *,std::vector<operations_research::KnapsackSearchNodeForCuts *>,operations_research::`anonymous namespace'::CompareKnapsackSearchNodePtrInDecreasingUpperBoundOrder>::push(char **a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  BOOL v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  double v39;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = a2;
    v7 = (uint64_t)(v5 + 8);
    goto LABEL_23;
  }
  v8 = *a1;
  v9 = v5 - *a1;
  v10 = v9 >> 3;
  v11 = (v9 >> 3) + 1;
  if (v11 >> 61)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v12 = v4 - (_QWORD)v8;
  if (v12 >> 2 > v11)
    v11 = v12 >> 2;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
    v13 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v14 = operator new(8 * v13);
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *(_QWORD *)v15 = a2;
    v7 = (uint64_t)(v15 + 8);
    v17 = (char *)(v5 - v8);
    if (v5 == v8)
      goto LABEL_21;
    goto LABEL_14;
  }
  v14 = 0;
  v15 = (char *)(8 * v10);
  v16 = 0;
  *(_QWORD *)(8 * v10) = a2;
  v7 = 8 * v10 + 8;
  v17 = (char *)(v5 - v8);
  if (v5 != v8)
  {
LABEL_14:
    v18 = (unint64_t)(v17 - 8);
    if (v18 < 0x58)
      goto LABEL_41;
    if ((unint64_t)(v5 - v14 - v9) < 0x20)
      goto LABEL_41;
    v19 = (v18 >> 3) + 1;
    v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[-v20];
    v15 -= v20;
    v21 = &v14[8 * v10 - 16];
    v22 = v5 - 16;
    v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *(_OWORD *)v22;
      *(v21 - 1) = *((_OWORD *)v22 - 1);
      *v21 = v24;
      v21 -= 2;
      v22 -= 32;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_41:
      do
      {
        v25 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *((_QWORD *)v15 - 1) = v25;
        v15 -= 8;
      }
      while (v6 != v8);
    }
    v6 = *a1;
  }
LABEL_21:
  *a1 = v15;
  a1[1] = (char *)v7;
  a1[2] = v16;
  if (v6)
    operator delete(v6);
LABEL_23:
  a1[1] = (char *)v7;
  v26 = *a1;
  v27 = v7 - (_QWORD)*a1;
  if (v27 >= 9)
  {
    v28 = ((unint64_t)v27 >> 3) - 2;
    v29 = v28 >> 1;
    v30 = &v26[8 * (v28 >> 1)];
    v31 = *(_QWORD *)v30;
    v32 = *(_QWORD *)(v7 - 8);
    v33 = *(double *)(*(_QWORD *)v30 + 32);
    v34 = *(double *)(v32 + 32);
    v35 = v33 < v34;
    if (v33 == v34)
      v35 = *(double *)(v31 + 24) < *(double *)(v32 + 24);
    if (v35)
    {
      *(_QWORD *)(v7 - 8) = v31;
      if (v28 >= 2)
      {
        while (1)
        {
          v36 = v29 - 1;
          v29 = (v29 - 1) >> 1;
          v37 = &v26[8 * v29];
          v38 = *(_QWORD *)v37;
          v39 = *(double *)(*(_QWORD *)v37 + 32);
          if (v39 == v34)
          {
            if (*(double *)(v38 + 24) >= *(double *)(v32 + 24))
              break;
          }
          else if (v39 >= v34)
          {
            break;
          }
          *(_QWORD *)v30 = v38;
          v30 = &v26[8 * v29];
          if (v36 <= 1)
            goto LABEL_35;
        }
      }
      v37 = v30;
LABEL_35:
      *(_QWORD *)v37 = v32;
    }
  }
}

uint64_t operations_research::KnapsackSolverForCuts::UpdatePropagators(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = *(_QWORD *)(a1 + 136);
    do
    {
      v5 = *(int *)(v2 + 16);
      *(_QWORD *)(v4 + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v5);
      if (*(_BYTE *)(v2 + 20))
      {
        v6 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v5);
        v7 = *(double *)(v6 + 8);
        *(double *)(a1 + 80) = *(double *)(a1 + 80) - *(double *)(v6 + 16);
        *(double *)(a1 + 8) = *(double *)(a1 + 8) - v7;
      }
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (v2 != v3);
  }
  v8 = a2[2];
  if (v8 != v3)
  {
    v9 = *(_QWORD *)(a1 + 136);
    LOBYTE(v10) = 1;
    while (1)
    {
      while (1)
      {
        v12 = *(int *)(v8 + 16);
        v13 = v12 >> 6;
        v14 = 1 << v12;
        v15 = *(_QWORD *)(v9 + 8 * (v12 >> 6));
        if (((1 << v12) & v15) != 0)
          break;
        v17 = *(unsigned __int8 *)(v8 + 20);
        v16 = *(_QWORD *)(a1 + 160);
LABEL_15:
        *(_QWORD *)(v9 + 8 * v13) = v14 | v15;
        if (v17)
        {
          *(_QWORD *)(v16 + 8 * v13) |= v14;
          v11 = 1;
          goto LABEL_17;
        }
        *(_QWORD *)(v16 + 8 * v13) &= ~v14;
        v11 = 1;
LABEL_9:
        v10 = v11 & 1u & v10;
        v8 = *(_QWORD *)(v8 + 8);
        if (v8 == v3)
          return v10;
      }
      v16 = *(_QWORD *)(a1 + 160);
      v17 = *(unsigned __int8 *)(v8 + 20);
      if (v17 == ((*(_QWORD *)(v16 + 8 * v13) & v14) != 0))
        goto LABEL_15;
      v11 = 0;
      if (!*(_BYTE *)(v8 + 20))
        goto LABEL_9;
LABEL_17:
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v12);
      v19 = *(double *)(v18 + 8);
      *(double *)(a1 + 80) = *(double *)(a1 + 80) + *(double *)(v18 + 16);
      v20 = *(double *)a1;
      v21 = v19 + *(double *)(a1 + 8);
      *(double *)(a1 + 8) = v21;
      if (v21 <= v20)
        goto LABEL_9;
      v10 = 0;
      v8 = *(_QWORD *)(v8 + 8);
      if (v8 == v3)
        return v10;
    }
  }
  return 1;
}

void std::vector<BOOL>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

_QWORD *std::vector<std::unique_ptr<operations_research::KnapsackItemForCuts>>::__emplace_back_slow_path<std::unique_ptr<operations_research::KnapsackItemForCuts>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v3 = a1[1] - *a1;
  v4 = v3 >> 3;
  v5 = (v3 >> 3) + 1;
  if (v5 >> 61)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v7 = a1[2] - *a1;
  if (v7 >> 2 > v5)
    v5 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * v4];
  v11 = &v9[8 * v8];
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)v10 = v12;
  v13 = v10 + 8;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    if (!v15)
      return v13;
    goto LABEL_26;
  }
  v16 = (unint64_t)&v15[-*a1 - 8];
  if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v3 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15)
    goto LABEL_34;
  v17 = (v16 >> 3) + 1;
  v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
  v10 -= v18;
  v19 = &v15[-v18];
  v20 = v15 - 16;
  v21 = &v9[8 * v4 - 16];
  v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v24 = *((_OWORD *)v20 - 1);
    v23 = *(_OWORD *)v20;
    *((_OWORD *)v20 - 1) = 0uLL;
    *(_OWORD *)v20 = 0uLL;
    *((_OWORD *)v21 - 1) = v24;
    *(_OWORD *)v21 = v23;
    v20 -= 32;
    v21 -= 32;
    v22 -= 4;
  }
  while (v22);
  v15 = v19;
  if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_34:
    do
    {
      v25 = *((_QWORD *)v15 - 1);
      v15 -= 8;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v10 - 1) = v25;
      v10 -= 8;
    }
    while (v15 != v14);
  }
  v26 = (char *)*a1;
  v15 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v13;
  a1[2] = v11;
  if (v15 != v26)
  {
    do
    {
      v28 = *((_QWORD *)v15 - 1);
      v15 -= 8;
      v27 = v28;
      *(_QWORD *)v15 = 0;
      if (v28)
        MEMORY[0x22E31DF78](v27, 0x1000C40D315E998);
    }
    while (v15 != v26);
    v15 = v26;
  }
  if (v15)
LABEL_26:
    operator delete(v15);
  return v13;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,operations_research::`anonymous namespace'::CompareKnapsackItemsInDecreasingEfficiencyOrder &,std::unique_ptr<operations_research::KnapsackItemForCuts> *,false>(uint64_t result, uint64_t *a2, double *a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  double v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  uint64_t *v31;
  double v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  double v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  double v53;
  double v54;
  uint64_t *v55;
  double v56;
  uint64_t v57;
  double v58;
  double v59;
  uint64_t v60;
  double v61;
  double v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  double v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  double v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  double v77;
  uint64_t *v78;
  double v79;
  double v80;
  double v81;
  double v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  double v88;
  uint64_t v89;
  double v90;
  double v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  double v96;
  uint64_t v97;
  double v98;
  double v99;
  uint64_t v100;
  double v101;
  double v102;
  uint64_t *v103;
  double v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  double v110;
  double v111;
  double v112;
  uint64_t *v113;
  double v114;
  uint64_t v115;
  uint64_t v116;
  double v117;
  double v118;
  double v119;
  double v120;
  uint64_t *v121;
  BOOL v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t v127;
  double v128;
  double v129;
  uint64_t v130;
  double v131;
  uint64_t v132;
  uint64_t *v133;
  double v134;
  double v135;
  uint64_t v136;
  double v137;
  uint64_t v138;
  int64_t v139;
  int64_t v140;
  int64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  double v145;
  double v146;
  uint64_t *v147;
  uint64_t v148;
  double v149;
  double v150;
  double v151;
  uint64_t v152;
  uint64_t v153;
  double v154;
  double v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  double v160;
  double v161;
  double v162;
  uint64_t v163;
  uint64_t v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t *v176;
  uint64_t v177;
  double v178;
  double v179;
  double v180;
  uint64_t v181;
  double v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t *v189;
  double v190;
  double v191;
  uint64_t v192;
  double v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  double v197;
  double v198;
  double v199;
  double v200;
  uint64_t v201;
  uint64_t v202;
  double v203;
  double v204;
  double v205;
  double v206;
  uint64_t *v207;
  double v208;
  uint64_t v209;
  double v210;
  double v211;
  uint64_t v212;
  double v213;
  double v214;
  uint64_t *v215;
  uint64_t v216;
  double v217;
  double v218;
  double v219;
  double v220;
  uint64_t v221;
  double v222;
  uint64_t *v223;

  v9 = (uint64_t *)result;
LABEL_2:
  v223 = a2 - 1;
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v108 = *(a2 - 1);
        v109 = *v10;
        v110 = *(double *)(v108 + 8);
        v111 = *a3;
        if (v110 > 0.0)
        {
          v111 = *(double *)(v108 + 16) / v110;
          v112 = *(double *)(v109 + 8);
          if (v112 <= 0.0)
          {
LABEL_132:
            if (v111 <= *a3)
              return result;
            goto LABEL_252;
          }
        }
        else
        {
          v112 = *(double *)(v109 + 8);
          if (v112 <= 0.0)
            goto LABEL_132;
        }
        if (v111 <= *(double *)(v109 + 16) / v112)
          return result;
LABEL_252:
        *v10 = v108;
        *(a2 - 1) = v109;
        return result;
      case 3:
      case 4:
        v113 = v10 + 2;
        v114 = *a3;
        v115 = *(a2 - 1);
        v116 = v10[2];
        v117 = *(double *)(v115 + 8);
        v118 = *a3;
        if (v117 > 0.0)
        {
          v118 = *(double *)(v115 + 16) / v117;
          v119 = *(double *)(v116 + 8);
          v120 = *a3;
          if (v119 <= 0.0)
          {
LABEL_137:
            if (v118 <= v120)
              return result;
            goto LABEL_255;
          }
        }
        else
        {
          v119 = *(double *)(v116 + 8);
          v120 = *a3;
          if (v119 <= 0.0)
            goto LABEL_137;
        }
        if (v118 <= *(double *)(v116 + 16) / v119)
          return result;
LABEL_255:
        *v113 = v115;
        *(a2 - 1) = v116;
        v201 = *v113;
        v202 = v10[1];
        v203 = *(double *)(*v113 + 8);
        v204 = v114;
        if (v203 > 0.0)
        {
          v204 = *(double *)(v201 + 16) / v203;
          v205 = *(double *)(v202 + 8);
          v206 = v114;
          if (v205 <= 0.0)
          {
LABEL_257:
            if (v204 <= v206)
              return result;
            goto LABEL_281;
          }
        }
        else
        {
          v205 = *(double *)(v202 + 8);
          v206 = v114;
          if (v205 <= 0.0)
            goto LABEL_257;
        }
        if (v204 <= *(double *)(v202 + 16) / v205)
          return result;
LABEL_281:
        v10[1] = v201;
        v10[2] = v202;
        v220 = v114;
        v221 = *v10;
        if (v203 > 0.0)
        {
          v220 = *(double *)(v201 + 16) / v203;
          v222 = *(double *)(v221 + 8);
          if (v222 <= 0.0)
          {
LABEL_283:
            if (v220 <= v114)
              return result;
            goto LABEL_287;
          }
        }
        else
        {
          v222 = *(double *)(v221 + 8);
          if (v222 <= 0.0)
            goto LABEL_283;
        }
        if (v220 <= *(double *)(v221 + 16) / v222)
          return result;
LABEL_287:
        *v10 = v201;
        v10[1] = v221;
        return result;
      case 5:
      default:
        if (v11 <= 191)
        {
          v121 = v10 + 1;
          v123 = v10 == a2 || v121 == a2;
          if ((a5 & 1) != 0)
          {
            if (v123)
              return result;
            v124 = 0;
            v125 = v10;
LABEL_150:
            v126 = v125;
            v125 = v121;
            v127 = v126[1];
            v128 = *(double *)(v127 + 8);
            v129 = *a3;
            if (v128 > 0.0)
            {
              v129 = *(double *)(v127 + 16) / v128;
              v130 = *v126;
              v131 = *(double *)(*v126 + 8);
              if (v131 <= 0.0)
              {
LABEL_152:
                if (v129 <= *a3)
                  goto LABEL_149;
LABEL_156:
                *v125 = 0;
                v132 = v124 * 8;
                v133 = &v10[v124];
                *v133 = 0;
                v133[1] = v130;
                while (1)
                {
                  if (!v132)
                  {
                    result = *v10;
                    *v10 = v127;
                    if (!result)
                      goto LABEL_149;
                    goto LABEL_170;
                  }
                  v134 = *(double *)(v127 + 8);
                  v135 = *a3;
                  if (v134 > 0.0)
                  {
                    v135 = *(double *)(v127 + 16) / v134;
                    v136 = *(uint64_t *)((char *)v10 + v132 - 8);
                    v137 = *(double *)(v136 + 8);
                    if (v137 <= 0.0)
                    {
LABEL_161:
                      if (v135 <= *a3)
                        goto LABEL_169;
                      goto LABEL_165;
                    }
                  }
                  else
                  {
                    v136 = *(uint64_t *)((char *)v10 + v132 - 8);
                    v137 = *(double *)(v136 + 8);
                    if (v137 <= 0.0)
                      goto LABEL_161;
                  }
                  if (v135 <= *(double *)(v136 + 16) / v137)
                  {
LABEL_169:
                    result = *(uint64_t *)((char *)v10 + v132);
                    *(uint64_t *)((char *)v10 + v132) = v127;
                    if (!result)
                      goto LABEL_149;
LABEL_170:
                    result = MEMORY[0x22E31DF78](result, 0x1000C40D315E998);
LABEL_149:
                    v121 = v125 + 1;
                    ++v124;
                    if (v125 + 1 == a2)
                      return result;
                    goto LABEL_150;
                  }
LABEL_165:
                  v138 = *v133;
                  v132 -= 8;
                  v133 = (uint64_t *)((char *)v10 + v132);
                  *v133 = 0;
                  v133[1] = v136;
                  if (v138)
                    MEMORY[0x22E31DF78](v138, 0x1000C40D315E998);
                }
              }
            }
            else
            {
              v130 = *v126;
              v131 = *(double *)(*v126 + 8);
              if (v131 <= 0.0)
                goto LABEL_152;
            }
            if (v129 <= *(double *)(v130 + 16) / v131)
              goto LABEL_149;
            goto LABEL_156;
          }
          if (v123)
            return result;
LABEL_262:
          v207 = v9;
          v9 = v121;
          v208 = *a3;
          v209 = v207[1];
          v210 = *(double *)(v209 + 8);
          v211 = *a3;
          if (v210 > 0.0)
          {
            v211 = *(double *)(v209 + 16) / v210;
            v212 = *v207;
            v213 = *(double *)(*v207 + 8);
            v214 = *a3;
            if (v213 <= 0.0)
            {
LABEL_264:
              if (v211 <= v214)
                goto LABEL_261;
LABEL_268:
              result = 0;
              *v9 = 0;
              v215 = v9;
              while (1)
              {
                *(v215 - 1) = 0;
                *v215 = v212;
                if (result)
                {
                  MEMORY[0x22E31DF78](result, 0x1000C40D315E998);
                  v208 = *a3;
                  v210 = *(double *)(v209 + 8);
                }
                v212 = *(v215 - 2);
                v217 = v208;
                if (v210 > 0.0)
                {
                  v217 = *(double *)(v209 + 16) / v210;
                  v218 = *(double *)(v212 + 8);
                  v219 = v208;
                  if (v218 > 0.0)
LABEL_276:
                    v219 = *(double *)(v212 + 16) / v218;
                }
                else
                {
                  v218 = *(double *)(v212 + 8);
                  v219 = v208;
                  if (v218 > 0.0)
                    goto LABEL_276;
                }
                v216 = *--v215;
                result = v216;
                if (v217 <= v219)
                {
                  *v215 = v209;
                  if (result)
                    result = MEMORY[0x22E31DF78](result, 0x1000C40D315E998);
LABEL_261:
                  v121 = v9 + 1;
                  if (v9 + 1 == a2)
                    return result;
                  goto LABEL_262;
                }
              }
            }
          }
          else
          {
            v212 = *v207;
            v213 = *(double *)(*v207 + 8);
            v214 = *a3;
            if (v213 <= 0.0)
              goto LABEL_264;
          }
          if (v211 <= *(double *)(v212 + 16) / v213)
            goto LABEL_261;
          goto LABEL_268;
        }
        if (a4)
        {
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[v13];
          v15 = *a3;
          if ((unint64_t)v11 >= 0x401)
          {
            v16 = v13;
            v17 = &v9[v13];
            v18 = *v9;
            *v9 = *v17;
            *v17 = v18;
            --a4;
            v19 = *a3;
            v20 = *v9;
            if ((a5 & 1) != 0)
              goto LABEL_14;
LABEL_8:
            v21 = *(v9 - 1);
            v22 = *(double *)(v21 + 8);
            v23 = v19;
            if (v22 > 0.0)
              v23 = *(double *)(v21 + 16) / v22;
            v24 = *(double *)(v20 + 8);
            if (v24 <= 0.0)
            {
              if (v23 > v19)
                goto LABEL_16;
              v25 = v19;
            }
            else
            {
              v25 = *(double *)(v20 + 16) / v24;
              if (v23 > v25)
                goto LABEL_16;
            }
            *v9 = 0;
            v68 = *(double *)(*v223 + 8);
            v69 = v19;
            if (v68 > 0.0)
              v69 = *(double *)(*v223 + 16) / v68;
            if (v25 <= v69)
            {
              v78 = v9 + 1;
              if (v24 > 0.0)
              {
                do
                {
                  v10 = v78;
                  if (v78 >= a2)
                    break;
                  v79 = *(double *)(*v78 + 8);
                  v80 = v19;
                  if (v79 > 0.0)
                    v80 = *(double *)(*v78 + 16) / v79;
                  ++v78;
                }
                while (*(double *)(v20 + 16) / v24 <= v80);
              }
              else
              {
                do
                {
                  v10 = v78;
                  if (v78 >= a2)
                    break;
                  v81 = *(double *)(*v78 + 8);
                  v82 = v19;
                  if (v81 > 0.0)
                    v82 = *(double *)(*v78 + 16) / v81;
                  ++v78;
                }
                while (v82 >= v19);
              }
            }
            else
            {
              v10 = v9;
              if (v24 <= 0.0)
              {
                do
                {
                  v71 = v10[1];
                  ++v10;
                  v70 = v71;
                  v72 = *(double *)(v71 + 8);
                  v73 = v19;
                  if (v72 > 0.0)
                    v73 = *(double *)(v70 + 16) / v72;
                }
                while (v73 >= v19);
              }
              else
              {
                v10 = v9;
                do
                {
                  v75 = v10[1];
                  ++v10;
                  v74 = v75;
                  v76 = *(double *)(v75 + 8);
                  v77 = v19;
                  if (v76 > 0.0)
                    v77 = *(double *)(v74 + 16) / v76;
                }
                while (*(double *)(v20 + 16) / v24 <= v77);
              }
            }
            v83 = a2;
            if (v10 < a2)
            {
              v84 = a2 - 1;
              if (v24 <= 0.0)
              {
                do
                {
                  v83 = v84;
                  v89 = *v84;
                  v90 = *(double *)(v89 + 8);
                  if (v90 <= 0.0)
                    break;
                  v91 = *(double *)(v89 + 16) / v90;
                  v84 = v83 - 1;
                }
                while (v91 < v19);
              }
              else
              {
                v83 = a2;
                do
                {
                  v86 = *--v83;
                  v85 = v86;
                  v87 = *(double *)(v86 + 8);
                  v88 = v19;
                  if (v87 > 0.0)
                    v88 = *(double *)(v85 + 16) / v87;
                }
                while (*(double *)(v20 + 16) / v24 > v88);
              }
            }
            if (v10 < v83)
            {
              v92 = *v10;
              v93 = *v83;
              do
              {
                *v10 = v93;
                *v83 = v92;
                if (v24 <= 0.0)
                {
                  do
                  {
                    v94 = v10[1];
                    ++v10;
                    v92 = v94;
                    v95 = *(double *)(v94 + 8);
                    v96 = v19;
                    if (v95 > 0.0)
                      v96 = *(double *)(v92 + 16) / v95;
                  }
                  while (v96 >= v19);
                }
                else
                {
                  do
                  {
                    v97 = v10[1];
                    ++v10;
                    v92 = v97;
                    v98 = *(double *)(v97 + 8);
                    v99 = v19;
                    if (v98 > 0.0)
                      v99 = *(double *)(v92 + 16) / v98;
                  }
                  while (*(double *)(v20 + 16) / v24 <= v99);
                }
                if (v24 <= 0.0)
                {
                  v103 = v83 - 1;
                  do
                  {
                    v83 = v103;
                    v93 = *v103;
                    v104 = *(double *)(*v103 + 8);
                    if (v104 <= 0.0)
                      break;
                    --v103;
                  }
                  while (*(double *)(v93 + 16) / v104 < v19);
                }
                else
                {
                  do
                  {
                    v100 = *--v83;
                    v93 = v100;
                    v101 = *(double *)(v100 + 8);
                    v102 = v19;
                    if (v101 > 0.0)
                      v102 = *(double *)(v93 + 16) / v101;
                  }
                  while (*(double *)(v20 + 16) / v24 > v102);
                }
              }
              while (v10 < v83);
            }
            v105 = v10 - 1;
            if (v10 - 1 != v9)
            {
              v106 = *v105;
              *v105 = 0;
              v107 = *v9;
              *v9 = v106;
              if (v107)
                MEMORY[0x22E31DF78](v107, 0x1000C40D315E998);
            }
            a5 = 0;
            result = *v105;
            *v105 = v20;
            if (result)
            {
              result = MEMORY[0x22E31DF78](result, 0x1000C40D315E998);
              a5 = 0;
            }
            continue;
          }
          --a4;
          v19 = *a3;
          v20 = *v9;
          if ((a5 & 1) == 0)
            goto LABEL_8;
LABEL_14:
          v24 = *(double *)(v20 + 8);
LABEL_16:
          *v9 = 0;
          if (v24 <= 0.0)
          {
            v31 = v9 + 1;
            do
            {
              v26 = v31;
              v27 = *v31;
              v32 = *(double *)(*v31 + 8);
              if (v32 <= 0.0)
                break;
              ++v31;
            }
            while (*(double *)(v27 + 16) / v32 > v19);
          }
          else
          {
            v26 = v9;
            do
            {
              v28 = v26[1];
              ++v26;
              v27 = v28;
              v29 = *(double *)(v28 + 8);
              v30 = v19;
              if (v29 > 0.0)
                v30 = *(double *)(v27 + 16) / v29;
            }
            while (v30 > *(double *)(v20 + 16) / v24);
          }
          if (v26 - 1 == v9)
          {
            v33 = a2;
            if (v24 <= 0.0)
            {
              do
              {
                if (v26 >= v33)
                  break;
                v43 = *--v33;
                v42 = v43;
                v44 = *(double *)(v43 + 8);
                v45 = v19;
                if (v44 > 0.0)
                  v45 = *(double *)(v42 + 16) / v44;
              }
              while (v45 <= v19);
            }
            else
            {
              v33 = a2;
              do
              {
                if (v26 >= v33)
                  break;
                v47 = *--v33;
                v46 = v47;
                v48 = *(double *)(v47 + 8);
                v49 = v19;
                if (v48 > 0.0)
                  v49 = *(double *)(v46 + 16) / v48;
              }
              while (v49 <= *(double *)(v20 + 16) / v24);
            }
          }
          else
          {
            v33 = a2;
            if (v24 <= 0.0)
            {
              do
              {
                v35 = *--v33;
                v34 = v35;
                v36 = *(double *)(v35 + 8);
                v37 = v19;
                if (v36 > 0.0)
                  v37 = *(double *)(v34 + 16) / v36;
              }
              while (v37 <= v19);
            }
            else
            {
              v33 = a2;
              do
              {
                v39 = *--v33;
                v38 = v39;
                v40 = *(double *)(v39 + 8);
                v41 = v19;
                if (v40 > 0.0)
                  v41 = *(double *)(v38 + 16) / v40;
              }
              while (v41 <= *(double *)(v20 + 16) / v24);
            }
          }
          v10 = v26;
          if (v26 < v33)
          {
            v50 = *v33;
            v10 = v26;
            v51 = v33;
            do
            {
              *v10 = v50;
              *v51 = v27;
              if (v24 <= 0.0)
              {
                v55 = v10 + 1;
                do
                {
                  v10 = v55;
                  v27 = *v55;
                  v56 = *(double *)(*v55 + 8);
                  if (v56 <= 0.0)
                    break;
                  ++v55;
                }
                while (*(double *)(v27 + 16) / v56 > v19);
              }
              else
              {
                do
                {
                  v52 = v10[1];
                  ++v10;
                  v27 = v52;
                  v53 = *(double *)(v52 + 8);
                  v54 = v19;
                  if (v53 > 0.0)
                    v54 = *(double *)(v27 + 16) / v53;
                }
                while (v54 > *(double *)(v20 + 16) / v24);
              }
              if (v24 <= 0.0)
              {
                do
                {
                  v57 = *--v51;
                  v50 = v57;
                  v58 = *(double *)(v57 + 8);
                  v59 = v19;
                  if (v58 > 0.0)
                    v59 = *(double *)(v50 + 16) / v58;
                }
                while (v59 <= v19);
              }
              else
              {
                do
                {
                  v60 = *--v51;
                  v50 = v60;
                  v61 = *(double *)(v60 + 8);
                  v62 = v19;
                  if (v61 > 0.0)
                    v62 = *(double *)(v50 + 16) / v61;
                }
                while (v62 <= *(double *)(v20 + 16) / v24);
              }
            }
            while (v10 < v51);
          }
          v63 = v10 - 1;
          if (v10 - 1 != v9)
          {
            v64 = *v63;
            *v63 = 0;
            v65 = *v9;
            *v9 = v64;
            if (v65)
              MEMORY[0x22E31DF78](v65, 0x1000C40D315E998);
          }
          v66 = *v63;
          *v63 = v20;
          if (v66)
            MEMORY[0x22E31DF78](v66, 0x1000C40D315E998);
          if (v26 < v33)
            goto LABEL_70;
          if (!(_DWORD)result)
          {
            if (v67)
              continue;
LABEL_70:
            a5 = 0;
            continue;
          }
          a2 = v10 - 1;
          if (v67)
            return result;
          goto LABEL_2;
        }
        if (v10 != a2)
        {
          v139 = (unint64_t)(v12 - 2) >> 1;
          v140 = v139;
          while (1)
          {
            v141 = v140;
            if (v139 < v140)
              goto LABEL_173;
            v142 = (2 * v140) | 1;
            v143 = &v9[v142];
            if (2 * v141 + 2 < v12)
            {
              v150 = *(double *)(*v143 + 8);
              v151 = *a3;
              if (v150 > 0.0)
                v151 = *(double *)(*v143 + 16) / v150;
              v153 = v143[1];
              ++v143;
              v152 = v153;
              v154 = *(double *)(v153 + 8);
              v155 = *a3;
              if (v154 > 0.0)
                v155 = *(double *)(v152 + 16) / v154;
              if (v151 > v155)
                v142 = 2 * v141 + 2;
              else
                v143 = &v9[v142];
              v144 = *v143;
              v145 = *(double *)(*v143 + 8);
              v146 = *a3;
              if (v145 <= 0.0)
              {
LABEL_177:
                v147 = &v9[v141];
                v148 = *v147;
                v149 = *(double *)(*v147 + 8);
                if (v149 > 0.0)
                  goto LABEL_189;
                goto LABEL_178;
              }
            }
            else
            {
              v144 = *v143;
              v145 = *(double *)(*v143 + 8);
              v146 = *a3;
              if (v145 <= 0.0)
                goto LABEL_177;
            }
            v146 = *(double *)(v144 + 16) / v145;
            v147 = &v9[v141];
            v148 = *v147;
            v149 = *(double *)(*v147 + 8);
            if (v149 > 0.0)
            {
LABEL_189:
              if (v146 > *(double *)(v148 + 16) / v149)
                goto LABEL_173;
              goto LABEL_190;
            }
LABEL_178:
            if (v146 > *a3)
              goto LABEL_173;
LABEL_190:
            *v147 = 0;
            v156 = *v143;
            do
            {
              v157 = v143;
              *v143 = 0;
              v158 = *v147;
              *v147 = v156;
              if (v158)
                MEMORY[0x22E31DF78](v158, 0x1000C40D315E998);
              if (v139 < v142)
                break;
              v159 = (2 * v142) | 1;
              v143 = &v9[v159];
              v160 = *a3;
              if (2 * v142 + 2 < v12)
              {
                v161 = *(double *)(*v143 + 8);
                v162 = *a3;
                if (v161 > 0.0)
                  v162 = *(double *)(*v143 + 16) / v161;
                v164 = v143[1];
                ++v143;
                v163 = v164;
                v165 = *(double *)(v164 + 8);
                v166 = *a3;
                if (v165 > 0.0)
                  v166 = *(double *)(v163 + 16) / v165;
                if (v162 > v166)
                {
                  v142 = 2 * v142 + 2;
                }
                else
                {
                  v143 = &v9[v159];
                  v142 = (2 * v142) | 1;
                }
                v156 = *v143;
                v167 = *(double *)(*v143 + 8);
                v168 = *a3;
                if (v167 <= 0.0)
                  goto LABEL_207;
LABEL_206:
                v168 = *(double *)(v156 + 16) / v167;
                goto LABEL_207;
              }
              v142 = (2 * v142) | 1;
              v156 = *v143;
              v167 = *(double *)(*v143 + 8);
              v168 = *a3;
              if (v167 > 0.0)
                goto LABEL_206;
LABEL_207:
              v169 = *(double *)(v148 + 8);
              if (v169 > 0.0)
                v160 = *(double *)(v148 + 16) / v169;
              v147 = v157;
            }
            while (v168 <= v160);
            v170 = *v157;
            *v157 = v148;
            if (v170)
              MEMORY[0x22E31DF78](v170, 0x1000C40D315E998);
LABEL_173:
            v140 = v141 - 1;
            if (!v141)
            {
              v171 = (unint64_t)v11 >> 3;
              while (1)
              {
                v173 = 0;
                v174 = *v9;
                *v9 = 0;
                v175 = v9;
                do
                {
                  v176 = &v175[v173 + 1];
                  v177 = 2 * v173;
                  v173 = (2 * v173) | 1;
                  if (v177 + 2 < v171)
                  {
                    v178 = *a3;
                    v179 = *(double *)(*v176 + 8);
                    v180 = *a3;
                    if (v179 > 0.0)
                      v180 = *(double *)(*v176 + 16) / v179;
                    v181 = v176[1];
                    v182 = *(double *)(v181 + 8);
                    if (v182 > 0.0)
                      v178 = *(double *)(v181 + 16) / v182;
                    if (v180 > v178)
                    {
                      ++v176;
                      v173 = v177 + 2;
                    }
                  }
                  v183 = *v176;
                  *v176 = 0;
                  v184 = *v175;
                  *v175 = v183;
                  if (v184)
                    MEMORY[0x22E31DF78](v184, 0x1000C40D315E998);
                  v175 = v176;
                }
                while (v173 <= (uint64_t)((unint64_t)(v171 - 2) >> 1));
                if (v176 == --a2)
                {
                  result = *v176;
                  *v176 = v174;
                  if (!result)
                    goto LABEL_214;
                  goto LABEL_213;
                }
                v185 = *a2;
                *a2 = 0;
                v186 = *v176;
                *v176 = v185;
                if (v186)
                  MEMORY[0x22E31DF78](v186, 0x1000C40D315E998);
                result = *a2;
                *a2 = v174;
                if (result)
                  result = MEMORY[0x22E31DF78](result, 0x1000C40D315E998);
                v187 = (char *)(v176 + 1) - (char *)v9;
                if (v187 >= 9)
                  break;
LABEL_214:
                if (v171-- <= 2)
                  return result;
              }
              v188 = (((unint64_t)v187 >> 3) - 2) >> 1;
              v189 = &v9[v188];
              v190 = *(double *)(*v189 + 8);
              v191 = *a3;
              if (v190 > 0.0)
              {
                v191 = *(double *)(*v189 + 16) / v190;
                v192 = *v176;
                v193 = *(double *)(*v176 + 8);
                if (v193 <= 0.0)
                  goto LABEL_234;
              }
              else
              {
                v192 = *v176;
                v193 = *(double *)(*v176 + 8);
                if (v193 <= 0.0)
                {
LABEL_234:
                  if (v191 <= *a3)
                    goto LABEL_214;
                  goto LABEL_238;
                }
              }
              if (v191 <= *(double *)(v192 + 16) / v193)
                goto LABEL_214;
LABEL_238:
              *v176 = 0;
              v194 = *v189;
              while (2)
              {
                v195 = v189;
                *v189 = 0;
                v196 = *v176;
                *v176 = v194;
                if (v196)
                  MEMORY[0x22E31DF78](v196, 0x1000C40D315E998);
                if (!v188)
                {
LABEL_248:
                  result = *v195;
                  *v195 = v192;
                  if (!result)
                    goto LABEL_214;
LABEL_213:
                  result = MEMORY[0x22E31DF78](result, 0x1000C40D315E998);
                  goto LABEL_214;
                }
                v188 = (v188 - 1) >> 1;
                v189 = &v9[v188];
                v197 = *a3;
                v194 = *v189;
                v198 = *(double *)(*v189 + 8);
                v199 = *a3;
                if (v198 > 0.0)
                {
                  v199 = *(double *)(v194 + 16) / v198;
                  v200 = *(double *)(v192 + 8);
                  if (v200 > 0.0)
                    goto LABEL_247;
                }
                else
                {
                  v200 = *(double *)(v192 + 8);
                  if (v200 > 0.0)
LABEL_247:
                    v197 = *(double *)(v192 + 16) / v200;
                }
                v176 = v195;
                if (v199 <= v197)
                  goto LABEL_248;
                continue;
              }
            }
          }
        }
        return result;
    }
  }
}

uint64_t *std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::`anonymous namespace'::CompareKnapsackItemsInDecreasingEfficiencyOrder &,std::unique_ptr<operations_research::KnapsackItemForCuts> *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, double *a6)
{
  uint64_t *result;
  double v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  double v47;
  double v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  double v53;
  double v54;

  v13 = *a6;
  v14 = *a4;
  v15 = *a3;
  v16 = *(double *)(*a4 + 8);
  v17 = *a6;
  if (v16 <= 0.0)
  {
    v18 = *(double *)(v15 + 8);
    v19 = *a6;
    if (v18 <= 0.0)
      goto LABEL_3;
LABEL_6:
    if (v17 <= *(double *)(v15 + 16) / v18)
      goto LABEL_17;
    goto LABEL_7;
  }
  v17 = *(double *)(v14 + 16) / v16;
  v18 = *(double *)(v15 + 8);
  v19 = *a6;
  if (v18 > 0.0)
    goto LABEL_6;
LABEL_3:
  if (v17 <= v19)
    goto LABEL_17;
LABEL_7:
  *a3 = v14;
  *a4 = v15;
  v20 = *a3;
  v21 = *a2;
  v22 = *(double *)(*a3 + 8);
  v23 = v13;
  if (v22 <= 0.0)
  {
    v24 = *(double *)(v21 + 8);
    v25 = v13;
    if (v24 <= 0.0)
      goto LABEL_9;
LABEL_12:
    if (v23 <= *(double *)(v21 + 16) / v24)
      goto LABEL_17;
    goto LABEL_13;
  }
  v23 = *(double *)(v20 + 16) / v22;
  v24 = *(double *)(v21 + 8);
  v25 = v13;
  if (v24 > 0.0)
    goto LABEL_12;
LABEL_9:
  if (v23 <= v25)
    goto LABEL_17;
LABEL_13:
  *a2 = v20;
  *a3 = v21;
  v26 = *a2;
  v27 = *a1;
  v28 = *(double *)(*a2 + 8);
  v29 = v13;
  if (v28 > 0.0)
  {
    v29 = *(double *)(v26 + 16) / v28;
    v30 = *(double *)(v27 + 8);
    v31 = v13;
    if (v30 <= 0.0)
    {
LABEL_15:
      if (v29 <= v31)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  else
  {
    v30 = *(double *)(v27 + 8);
    v31 = v13;
    if (v30 <= 0.0)
      goto LABEL_15;
  }
  if (v29 > *(double *)(v27 + 16) / v30)
  {
LABEL_16:
    *a1 = v26;
    *a2 = v27;
  }
LABEL_17:
  v32 = *a5;
  v33 = *a4;
  v34 = *(double *)(*a5 + 8);
  v35 = v13;
  if (v34 > 0.0)
  {
    v35 = *(double *)(v32 + 16) / v34;
    v36 = *(double *)(v33 + 8);
    v37 = v13;
    if (v36 <= 0.0)
    {
LABEL_19:
      if (v35 <= v37)
        return result;
      goto LABEL_23;
    }
  }
  else
  {
    v36 = *(double *)(v33 + 8);
    v37 = v13;
    if (v36 <= 0.0)
      goto LABEL_19;
  }
  if (v35 <= *(double *)(v33 + 16) / v36)
    return result;
LABEL_23:
  *a4 = v32;
  *a5 = v33;
  v38 = *a4;
  v39 = *a3;
  v40 = *(double *)(*a4 + 8);
  v41 = v13;
  if (v40 > 0.0)
  {
    v41 = *(double *)(v38 + 16) / v40;
    v42 = *(double *)(v39 + 8);
    v43 = v13;
    if (v42 <= 0.0)
    {
LABEL_25:
      if (v41 <= v43)
        return result;
      goto LABEL_29;
    }
  }
  else
  {
    v42 = *(double *)(v39 + 8);
    v43 = v13;
    if (v42 <= 0.0)
      goto LABEL_25;
  }
  if (v41 <= *(double *)(v39 + 16) / v42)
    return result;
LABEL_29:
  *a3 = v38;
  *a4 = v39;
  v44 = *a3;
  v45 = *a2;
  v46 = *(double *)(*a3 + 8);
  v47 = v13;
  if (v46 > 0.0)
  {
    v47 = *(double *)(v44 + 16) / v46;
    v48 = *(double *)(v45 + 8);
    v49 = v13;
    if (v48 <= 0.0)
    {
LABEL_31:
      if (v47 <= v49)
        return result;
      goto LABEL_38;
    }
  }
  else
  {
    v48 = *(double *)(v45 + 8);
    v49 = v13;
    if (v48 <= 0.0)
      goto LABEL_31;
  }
  if (v47 <= *(double *)(v45 + 16) / v48)
    return result;
LABEL_38:
  *a2 = v44;
  *a3 = v45;
  v50 = *a2;
  v51 = *a1;
  v52 = *(double *)(*a2 + 8);
  v53 = v13;
  if (v52 > 0.0)
  {
    v53 = *(double *)(v50 + 16) / v52;
    v54 = *(double *)(v51 + 8);
    if (v54 <= 0.0)
    {
LABEL_40:
      if (v53 > v13)
        goto LABEL_44;
      return result;
    }
  }
  else
  {
    v54 = *(double *)(v51 + 8);
    if (v54 <= 0.0)
      goto LABEL_40;
  }
  if (v53 > *(double *)(v51 + 16) / v54)
  {
LABEL_44:
    *a1 = v50;
    *a2 = v51;
  }
  return result;
}

uint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::`anonymous namespace'::CompareKnapsackItemsInDecreasingEfficiencyOrder &,std::unique_ptr<operations_research::KnapsackItemForCuts> *>(uint64_t *result, uint64_t *a2, uint64_t *a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;

  v4 = *a2;
  v5 = *result;
  v6 = *(double *)(*a2 + 8);
  v7 = a4;
  if (v6 > 0.0)
  {
    v7 = *(double *)(v4 + 16) / v6;
    v8 = *(double *)(v5 + 8);
    v9 = a4;
    if (v8 <= 0.0)
    {
LABEL_3:
      v10 = *a3;
      v11 = *(double *)(*a3 + 8);
      if (v7 > v9)
        goto LABEL_4;
LABEL_10:
      v14 = a4;
      if (v11 > 0.0)
      {
        v14 = *(double *)(v10 + 16) / v11;
        v15 = a4;
        if (v6 <= 0.0)
        {
LABEL_12:
          if (v14 <= v15)
            return result;
          goto LABEL_22;
        }
      }
      else
      {
        v15 = a4;
        if (v6 <= 0.0)
          goto LABEL_12;
      }
      if (v14 <= *(double *)(v4 + 16) / v6)
        return result;
LABEL_22:
      *a2 = v10;
      *a3 = v4;
      v19 = *a2;
      v20 = *result;
      v21 = *(double *)(*a2 + 8);
      v22 = a4;
      if (v21 > 0.0)
      {
        v22 = *(double *)(v19 + 16) / v21;
        v23 = *(double *)(v20 + 8);
        if (v23 <= 0.0)
        {
LABEL_24:
          if (v22 <= a4)
            return result;
          goto LABEL_31;
        }
      }
      else
      {
        v23 = *(double *)(v20 + 8);
        if (v23 <= 0.0)
          goto LABEL_24;
      }
      if (v22 <= *(double *)(v20 + 16) / v23)
        return result;
LABEL_31:
      *result = v19;
      *a2 = v20;
      return result;
    }
  }
  else
  {
    v8 = *(double *)(v5 + 8);
    v9 = a4;
    if (v8 <= 0.0)
      goto LABEL_3;
  }
  v10 = *a3;
  v11 = *(double *)(*a3 + 8);
  if (v7 <= *(double *)(v5 + 16) / v8)
    goto LABEL_10;
LABEL_4:
  v12 = a4;
  if (v11 <= 0.0)
  {
    v13 = a4;
    if (v6 <= 0.0)
      goto LABEL_6;
LABEL_15:
    if (v12 > *(double *)(v4 + 16) / v6)
      goto LABEL_7;
    goto LABEL_16;
  }
  v12 = *(double *)(v10 + 16) / v11;
  v13 = a4;
  if (v6 > 0.0)
    goto LABEL_15;
LABEL_6:
  if (v12 > v13)
  {
LABEL_7:
    *result = v10;
    *a3 = v5;
    return result;
  }
LABEL_16:
  *result = v4;
  *a2 = v5;
  v16 = *a3;
  v17 = *(double *)(*a3 + 8);
  v18 = a4;
  if (v17 > 0.0)
  {
    v18 = *(double *)(v16 + 16) / v17;
    if (v8 <= 0.0)
    {
LABEL_18:
      if (v18 > a4)
        goto LABEL_28;
      return result;
    }
  }
  else if (v8 <= 0.0)
  {
    goto LABEL_18;
  }
  if (v18 > *(double *)(v5 + 16) / v8)
  {
LABEL_28:
    *a2 = v16;
    *a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::`anonymous namespace'::CompareKnapsackItemsInDecreasingEfficiencyOrder &,std::unique_ptr<operations_research::KnapsackItemForCuts> *>(uint64_t *a1, uint64_t *a2, double *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  uint64_t *v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t *v23;
  double v24;
  double v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  double v46;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      v10 = *(double *)(v8 + 8);
      v11 = *a3;
      if (v10 > 0.0)
      {
        v11 = *(double *)(v8 + 16) / v10;
        v12 = *(double *)(v9 + 8);
        if (v12 <= 0.0)
        {
LABEL_4:
          if (v11 <= *a3)
            return result;
          goto LABEL_39;
        }
      }
      else
      {
        v12 = *(double *)(v9 + 8);
        if (v12 <= 0.0)
          goto LABEL_4;
      }
      if (v11 <= *(double *)(v9 + 16) / v12)
        return result;
LABEL_39:
      *a1 = v8;
      *(a2 - 1) = v9;
      return result;
    case 3:
      return 1;
    case 4:
      v30 = a1 + 2;
      v31 = *a3;
      v32 = *(a2 - 1);
      v33 = a1[2];
      v34 = *(double *)(v32 + 8);
      v35 = *a3;
      if (v34 > 0.0)
      {
        v35 = *(double *)(v32 + 16) / v34;
        v36 = *(double *)(v33 + 8);
        v37 = *a3;
        if (v36 <= 0.0)
        {
LABEL_35:
          if (v35 <= v37)
            return 1;
          goto LABEL_42;
        }
      }
      else
      {
        v36 = *(double *)(v33 + 8);
        v37 = *a3;
        if (v36 <= 0.0)
          goto LABEL_35;
      }
      if (v35 <= *(double *)(v33 + 16) / v36)
        return 1;
LABEL_42:
      *v30 = v32;
      *(a2 - 1) = v33;
      v38 = *v30;
      v39 = a1[1];
      v40 = *(double *)(*v30 + 8);
      v41 = v31;
      if (v40 > 0.0)
      {
        v41 = *(double *)(v38 + 16) / v40;
        v42 = *(double *)(v39 + 8);
        v43 = v31;
        if (v42 <= 0.0)
        {
LABEL_44:
          if (v41 <= v43)
            return 1;
LABEL_48:
          a1[1] = v38;
          a1[2] = v39;
          v44 = v31;
          v45 = *a1;
          if (v40 > 0.0)
          {
            v44 = *(double *)(v38 + 16) / v40;
            v46 = *(double *)(v45 + 8);
            if (v46 <= 0.0)
            {
LABEL_50:
              if (v44 <= v31)
                return 1;
              goto LABEL_51;
            }
          }
          else
          {
            v46 = *(double *)(v45 + 8);
            if (v46 <= 0.0)
              goto LABEL_50;
          }
          if (v44 <= *(double *)(v45 + 16) / v46)
            return 1;
LABEL_51:
          *a1 = v38;
          a1[1] = v45;
          return 1;
        }
      }
      else
      {
        v42 = *(double *)(v39 + 8);
        v43 = v31;
        if (v42 <= 0.0)
          goto LABEL_44;
      }
      if (v41 <= *(double *)(v39 + 16) / v42)
        return 1;
      goto LABEL_48;
    case 5:
      return 1;
    default:
      v13 = a1 + 2;
      v14 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v15 = 0;
      v16 = 2;
LABEL_10:
      v17 = *v14;
      v18 = *(double *)(*v14 + 8);
      v19 = *a3;
      if (v18 > 0.0)
      {
        v19 = *(double *)(v17 + 16) / v18;
        v20 = *v13;
        v21 = *(double *)(*v13 + 8);
        if (v21 <= 0.0)
        {
LABEL_12:
          if (v19 <= *a3)
            goto LABEL_9;
          goto LABEL_16;
        }
      }
      else
      {
        v20 = *v13;
        v21 = *(double *)(*v13 + 8);
        if (v21 <= 0.0)
          goto LABEL_12;
      }
      if (v19 <= *(double *)(v20 + 16) / v21)
        goto LABEL_9;
LABEL_16:
      *v14 = 0;
      v22 = v16 * 8;
      v23 = &a1[v16];
      *v23 = 0;
      v23[1] = v20;
      break;
  }
  while (1)
  {
    if (!v22)
    {
      v29 = *a1;
      *a1 = v17;
      if (!v29)
        goto LABEL_8;
      goto LABEL_30;
    }
    v24 = *(double *)(v17 + 8);
    v25 = *a3;
    if (v24 > 0.0)
      break;
    v26 = *(uint64_t *)((char *)a1 + v22 - 8);
    v27 = *(double *)(v26 + 8);
    if (v27 > 0.0)
      goto LABEL_24;
LABEL_21:
    if (v25 <= *a3)
      goto LABEL_29;
LABEL_25:
    v28 = *v23;
    v22 -= 8;
    v23 = (uint64_t *)((char *)a1 + v22);
    *v23 = 0;
    v23[1] = v26;
    if (v28)
      MEMORY[0x22E31DF78](v28, 0x1000C40D315E998);
  }
  v25 = *(double *)(v17 + 16) / v24;
  v26 = *(uint64_t *)((char *)a1 + v22 - 8);
  v27 = *(double *)(v26 + 8);
  if (v27 <= 0.0)
    goto LABEL_21;
LABEL_24:
  if (v25 > *(double *)(v26 + 16) / v27)
    goto LABEL_25;
LABEL_29:
  v29 = *(uint64_t *)((char *)a1 + v22);
  *(uint64_t *)((char *)a1 + v22) = v17;
  if (!v29)
    goto LABEL_8;
LABEL_30:
  MEMORY[0x22E31DF78](v29, 0x1000C40D315E998);
LABEL_8:
  if (++v15 == 8)
    return v14 + 1 == a2;
LABEL_9:
  v13 = v14;
  ++v16;
  if (++v14 != a2)
    goto LABEL_10;
  return 1;
}

uint64_t google::MakeCheckOpString<int,unsigned long>(int a1, int a2, char *a3)
{
  uint64_t v3;
  uint64_t v5;

  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5, a3);
  std::ostream::operator<<();
  google::base::CheckOpMessageBuilder::ForVar2((google::base::CheckOpMessageBuilder *)&v5);
  std::ostream::operator<<();
  v3 = google::base::CheckOpMessageBuilder::NewString((google::base::CheckOpMessageBuilder *)&v5);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5);
  return v3;
}

void sub_22D9ED2FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::unique_ptr<operations_research::KnapsackSearchNodeForCuts>>::__push_back_slow_path<std::unique_ptr<operations_research::KnapsackSearchNodeForCuts>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v3 = a1[1] - *a1;
  v4 = v3 >> 3;
  v5 = (v3 >> 3) + 1;
  if (v5 >> 61)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v7 = a1[2] - *a1;
  if (v7 >> 2 > v5)
    v5 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * v4];
  v11 = &v9[8 * v8];
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)v10 = v12;
  v13 = v10 + 8;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    if (!v15)
      return v13;
    goto LABEL_26;
  }
  v16 = (unint64_t)&v15[-*a1 - 8];
  if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v3 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15)
    goto LABEL_34;
  v17 = (v16 >> 3) + 1;
  v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
  v10 -= v18;
  v19 = &v15[-v18];
  v20 = v15 - 16;
  v21 = &v9[8 * v4 - 16];
  v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v24 = *((_OWORD *)v20 - 1);
    v23 = *(_OWORD *)v20;
    *((_OWORD *)v20 - 1) = 0uLL;
    *(_OWORD *)v20 = 0uLL;
    *((_OWORD *)v21 - 1) = v24;
    *(_OWORD *)v21 = v23;
    v20 -= 32;
    v21 -= 32;
    v22 -= 4;
  }
  while (v22);
  v15 = v19;
  if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_34:
    do
    {
      v25 = *((_QWORD *)v15 - 1);
      v15 -= 8;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v10 - 1) = v25;
      v10 -= 8;
    }
    while (v15 != v14);
  }
  v26 = (char *)*a1;
  v15 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v13;
  a1[2] = v11;
  if (v15 != v26)
  {
    do
    {
      v28 = *((_QWORD *)v15 - 1);
      v15 -= 8;
      v27 = v28;
      *(_QWORD *)v15 = 0;
      if (v28)
        MEMORY[0x22E31DF78](v27, 0x1060C40B86F7F5DLL);
    }
    while (v15 != v26);
    v15 = v26;
  }
  if (v15)
LABEL_26:
    operator delete(v15);
  return v13;
}

uint64_t google::MakeCheckOpString<BOOL,BOOL>(int a1, int a2, char *a3)
{
  uint64_t v3;
  uint64_t v5;

  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5, a3);
  std::ostream::operator<<();
  google::base::CheckOpMessageBuilder::ForVar2((google::base::CheckOpMessageBuilder *)&v5);
  std::ostream::operator<<();
  v3 = google::base::CheckOpMessageBuilder::NewString((google::base::CheckOpMessageBuilder *)&v5);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5);
  return v3;
}

void sub_22D9ED534(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

void File::Close(File *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  _QWORD v8[6];
  _OWORD v9[3];
  _QWORD v10[7];

  v10[6] = *MEMORY[0x24BDAC8D0];
  if (a2 == 47802)
  {
    if (fclose(*(FILE **)this))
    {
      v10[0] = "Could not close file '";
      v10[1] = 22;
      v9[0] = *(_OWORD *)((char *)this + 8);
      v8[0] = "'";
      v8[1] = 1;
      absl::lts_2020_02_25::StrCat((uint64_t)v10, (uint64_t)v9, (uint64_t)v8, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      absl::lts_2020_02_25::Status::Status(a3, 3, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      *(_QWORD *)this = 0;
      *a3 = 0;
    }
  }
  else
  {
    absl::lts_2020_02_25::Status::Status(a3, 3, (uint64_t)"Wrong flags", 11);
  }
}

void sub_22D9ED670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::operator<<[abi:ne180100]<std::char_traits<char>>(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v4);
}

uint64_t File::ReadToString(FILE **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v6;
  uint64_t v7;
  void *v8;
  size_t v9;
  int64_t v10;
  int64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v15;
  _BYTE v16[16];

  if (!a2)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v16, (google::glog_internal_namespace_ *)"./ortools/base/file.cc", 103);
    v15 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: output != nullptr ", 32);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v16);
  }
  v3 = a3;
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
    if (a3)
      goto LABEL_4;
    return 0;
  }
  **(_BYTE **)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  if (!a3)
    return 0;
LABEL_4:
  v6 = 0x200000;
  if (a3 < 0x200000)
    v6 = a3;
  v7 = v6;
  v8 = (void *)operator new[]();
  if (v3 < 1)
    goto LABEL_17;
  while (1)
  {
    v9 = v7 >= v3 ? v3 : v7;
    v10 = fread(v8, 1uLL, v9, *a1);
    v11 = v10;
    if (v10 < 1)
      break;
    std::string::append((std::string *)a2, (const std::string::value_type *)v8, v10);
    v12 = v3 <= v11;
    v3 -= v11;
    if (v12)
      goto LABEL_17;
  }
  if (v10 < 0)
  {
    v13 = -1;
  }
  else
  {
LABEL_17:
    if (*(char *)(a2 + 23) < 0)
      v13 = *(_QWORD *)(a2 + 8);
    else
      v13 = *(unsigned __int8 *)(a2 + 23);
  }
  MEMORY[0x22E31DF60](v8, 0x1000C8077774924);
  return v13;
}

void sub_22D9ED81C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF60](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void sub_22D9ED840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void file::Open(const char **a1@<X0>, const char **a2@<X1>, _QWORD *a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  const char *v8;
  FILE *v9;
  FILE *v10;
  _QWORD *v11;
  size_t v12;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  _QWORD v16[6];
  _OWORD v17[3];
  _QWORD v18[7];

  v18[6] = *MEMORY[0x24BDAC8D0];
  if (a4 == 47802)
  {
    v8 = *a1;
    v9 = fopen(*a1, *a2);
    if (v9)
    {
      v10 = v9;
      v11 = (_QWORD *)operator new();
      v12 = strlen(v8);
      *v11 = v10;
      v11[1] = v8;
      v11[2] = v12;
      *a3 = v11;
      *a5 = 0;
      return;
    }
    *a3 = 0;
  }
  v18[0] = "Could not open '";
  v18[1] = 16;
  v17[0] = *(_OWORD *)a1;
  v16[0] = "'";
  v16[1] = 1;
  absl::lts_2020_02_25::StrCat((uint64_t)v18, (uint64_t)v17, (uint64_t)v16, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  absl::lts_2020_02_25::Status::Status(a5, 3, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_22D9ED984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void file::GetContents(const char **a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  const char *v7;
  FILE *v8;
  FILE *v9;
  uint64_t v10;
  size_t v11;
  off_t st_size;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  _QWORD v16[6];
  _OWORD v17[3];
  stat v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (a3 != 47802)
    goto LABEL_5;
  v7 = *a1;
  v8 = fopen(*a1, "r");
  if (!v8)
    goto LABEL_5;
  v9 = v8;
  v10 = operator new();
  v11 = strlen(v7);
  *(_QWORD *)v10 = v9;
  *(_QWORD *)(v10 + 8) = v7;
  *(_QWORD *)(v10 + 16) = v11;
  stat(v7, &v18);
  st_size = v18.st_size;
  if (File::ReadToString((FILE **)v10, a2, v18.st_size) == st_size)
  {
    *a4 = 0;
  }
  else
  {
LABEL_5:
    *(_QWORD *)&v18.st_dev = "Could not read '";
    v18.st_ino = 16;
    v17[0] = *(_OWORD *)a1;
    v16[0] = "'";
    v16[1] = 1;
    absl::lts_2020_02_25::StrCat((uint64_t)&v18, (uint64_t)v17, (uint64_t)v16, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    absl::lts_2020_02_25::Status::Status(a4, 3, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_22D9EDB14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void file::WriteString(FILE **a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  _BYTE *v7;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  _QWORD v11[6];
  _QWORD v12[2];
  _BYTE v13[32];
  _QWORD v14[7];

  v14[6] = *MEMORY[0x24BDAC8D0];
  if (a1
    && (_DWORD)a3 == 47802
    && fwrite(*(const void **)a2, 1uLL, *(_QWORD *)(a2 + 8), *a1) == *(_QWORD *)(a2 + 8)
    && !fclose(*a1))
  {
    *a1 = 0;
    *a4 = 0;
  }
  else
  {
    v14[0] = "Could not write ";
    v14[1] = 16;
    v7 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(*(_QWORD *)(a2 + 8), v13, a3);
    v12[0] = v13;
    v12[1] = v7 - v13;
    v11[0] = " bytes";
    v11[1] = 6;
    absl::lts_2020_02_25::StrCat((uint64_t)v14, (uint64_t)v12, (uint64_t)v11, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    absl::lts_2020_02_25::Status::Status(a4, 3, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_22D9EDC7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL file::WriteStringToFile(uint64_t *a1, const char **a2)
{
  uint64_t v2;
  uint64_t *v3;
  const char *v4;
  FILE *v5;
  FILE *v6;
  uint64_t v7;
  size_t v8;
  absl::lts_2020_02_25::Status *v9;
  _QWORD v11[2];
  absl::lts_2020_02_25::Status *v12;

  v2 = *((unsigned __int8 *)a1 + 23);
  if ((v2 & 0x80u) == 0)
    v3 = a1;
  else
    v3 = (uint64_t *)*a1;
  if ((v2 & 0x80u) != 0)
    v2 = a1[1];
  v11[0] = v3;
  v11[1] = v2;
  v4 = *a2;
  v5 = fopen(*a2, "w");
  if (v5)
  {
    v6 = v5;
    v7 = operator new();
    v8 = strlen(v4);
    *(_QWORD *)v7 = v6;
    *(_QWORD *)(v7 + 8) = v4;
    *(_QWORD *)(v7 + 16) = v8;
  }
  else
  {
    v7 = 0;
  }
  file::WriteString((FILE **)v7, (uint64_t)v11, (char *)0xBABA, &v12);
  v9 = v12;
  if ((v12 & 1) != 0)
    absl::lts_2020_02_25::Status::UnrefNonInlined((uint64_t)v12);
  return v9 == 0;
}

uint64_t file::ReadFileToProto(uint64_t a1, google::protobuf::Message *a2)
{
  const char *v4;
  uint64_t v5;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _BYTE v11[16];
  absl::lts_2020_02_25::Status *v12[5];
  void (**v13)(file::_anonymous_namespace_::NoOpErrorCollector *__hidden);
  void *v14[2];
  uint64_t v15;

  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  file::GetContents((const char **)a1, (uint64_t)v14, 47802, v12);
  if (((uint64_t)v12[0] & 1) != 0)
  {
    absl::lts_2020_02_25::Status::UnrefNonInlined((uint64_t)v12[0]);
LABEL_8:
    google::LogMessage::LogMessage((google::LogMessage *)v12, (google::glog_internal_namespace_ *)"./ortools/base/file.cc", 213);
    v7 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v12);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Could not read ", 15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(_QWORD *)a1, *(_QWORD *)(a1 + 8));
    google::LogMessage::~LogMessage((google::LogMessage *)v12);
    v5 = 0;
    if (SHIBYTE(v15) < 0)
      goto LABEL_6;
    return v5;
  }
  if (v12[0])
    goto LABEL_8;
  v13 = &off_24F97FF08;
  google::protobuf::TextFormat::Parser::Parser((google::protobuf::TextFormat::Parser *)v12);
  v12[0] = (absl::lts_2020_02_25::Status *)&v13;
  if ((google::protobuf::TextFormat::Parser::ParseFromString((char **)v12, (uint64_t)v14, (char *)a2) & 1) != 0
    || (google::protobuf::MessageLite::ParseFromString(a2, v14) & 1) != 0)
  {
    v5 = 1;
    ORToolsCpL2AccessVariable::~ORToolsCpL2AccessVariable((ORToolsCpL2AccessVariable *)v12);
    ORToolsCpL2AccessVariable::~ORToolsCpL2AccessVariable((ORToolsCpL2AccessVariable *)&v13);
    if (SHIBYTE(v15) < 0)
    {
LABEL_6:
      operator delete(v14[0]);
      return v5;
    }
  }
  else
  {
    google::protobuf::TextFormat::ParseFromString((uint64_t)v14, a2, v4);
    google::LogMessage::LogMessage((google::LogMessage *)v11, (google::glog_internal_namespace_ *)"./ortools/base/file.cc", 234);
    v9 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v11);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Could not parse contents of ", 28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, *(_QWORD *)a1, *(_QWORD *)(a1 + 8));
    google::LogMessage::~LogMessage((google::LogMessage *)v11);
    v5 = 0;
    ORToolsCpL2AccessVariable::~ORToolsCpL2AccessVariable((ORToolsCpL2AccessVariable *)v12);
    ORToolsCpL2AccessVariable::~ORToolsCpL2AccessVariable((ORToolsCpL2AccessVariable *)&v13);
    if (SHIBYTE(v15) < 0)
      goto LABEL_6;
  }
  return v5;
}

void sub_22D9EDEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  ORToolsCpL2AccessVariable::~ORToolsCpL2AccessVariable((ORToolsCpL2AccessVariable *)va);
  ORToolsCpL2AccessVariable::~ORToolsCpL2AccessVariable((ORToolsCpL2AccessVariable *)(v4 - 48));
  if (*(char *)(v4 - 17) < 0)
    operator delete(*(void **)(v4 - 40));
  _Unwind_Resume(a1);
}

void file::GetTextProto(_OWORD *a1@<X0>, google::protobuf::Message *a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  _QWORD v9[6];
  _OWORD v10[3];
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  if (a3 == 47802 && file::ReadFileToProto((uint64_t)a1, a2))
  {
    *a4 = 0;
  }
  else
  {
    v11[0] = "Could not read proto from '";
    v11[1] = 27;
    v10[0] = *a1;
    v9[0] = "'.";
    v9[1] = 2;
    absl::lts_2020_02_25::StrCat((uint64_t)v11, (uint64_t)v10, (uint64_t)v9, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    absl::lts_2020_02_25::Status::Status(a4, 3, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_22D9EE038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void file::SetTextProto(const char **a1@<X0>, const google::protobuf::Message *a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  _BOOL4 v6;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  _QWORD v10[6];
  _OWORD v11[3];
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (a3 == 47802)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    if (google::protobuf::TextFormat::PrintToString(a2, (uint64_t)&v12))
    {
      v6 = file::WriteStringToFile((uint64_t *)&v12, a1);
      if (SHIBYTE(v14) < 0)
        goto LABEL_4;
    }
    else
    {
      v6 = 0;
      if (SHIBYTE(v14) < 0)
      {
LABEL_4:
        operator delete(v12);
        if (!v6)
          goto LABEL_5;
LABEL_16:
        *a4 = 0;
        return;
      }
    }
    if (!v6)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_5:
  v12 = "Could not write proto to '";
  v13 = 26;
  v11[0] = *(_OWORD *)a1;
  v10[0] = "'.";
  v10[1] = 2;
  absl::lts_2020_02_25::StrCat((uint64_t)&v12, (uint64_t)v11, (uint64_t)v10, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  absl::lts_2020_02_25::Status::Status(a4, 3, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_22D9EE1A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t google::MakeCheckOpString<int,int>(int a1, int a2, char *a3)
{
  uint64_t v3;
  uint64_t v5;

  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5, a3);
  std::ostream::operator<<();
  google::base::CheckOpMessageBuilder::ForVar2((google::base::CheckOpMessageBuilder *)&v5);
  std::ostream::operator<<();
  v3 = google::base::CheckOpMessageBuilder::NewString((google::base::CheckOpMessageBuilder *)&v5);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5);
  return v3;
}

void sub_22D9EE24C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

void file::`anonymous namespace'::NoOpErrorCollector::~NoOpErrorCollector(file::_anonymous_namespace_::NoOpErrorCollector *this)
{
  ORToolsCpL2AccessVariable::~ORToolsCpL2AccessVariable(this);
  JUMPOUT(0x22E31DF78);
}

uint64_t google::MakeCheckOpString<unsigned long,unsigned long>(int a1, int a2, char *a3)
{
  uint64_t v3;
  uint64_t v5;

  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5, a3);
  std::ostream::operator<<();
  google::base::CheckOpMessageBuilder::ForVar2((google::base::CheckOpMessageBuilder *)&v5);
  std::ostream::operator<<();
  v3 = google::base::CheckOpMessageBuilder::NewString((google::base::CheckOpMessageBuilder *)&v5);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5);
  return v3;
}

void sub_22D9EE2F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

uint64_t operations_research::GetProcessMemoryUsage(operations_research *this)
{
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[3];
  uint64_t v4;

  task_info_outCnt = 10;
  if (task_info(*MEMORY[0x24BDAEC58], 0x12u, task_info_out, &task_info_outCnt))
    return -1;
  else
    return v4;
}

uint64_t operations_research::RunWorker(std::condition_variable *this, void *a2)
{
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD v9[3];
  _QWORD *v10;
  _BYTE v11[24];
  _QWORD v12[2];

  v12[1] = *MEMORY[0x24BDAC8D0];
  operations_research::ThreadPool::GetNextTask(this, (uint64_t)v11);
  for (result = v12[0]; v12[0]; result = v12[0])
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 48))(result);
    operations_research::ThreadPool::GetNextTask(this, (uint64_t)v9);
    v6 = (_BYTE *)v12[0];
    v12[0] = 0;
    if (v6 == v11)
    {
      v6 = v11;
      v7 = 4;
    }
    else
    {
      if (!v6)
        goto LABEL_11;
      v7 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_11:
    v8 = v12;
    if (!v10)
      goto LABEL_14;
    if (v10 != v9)
    {
      v12[0] = v10;
      v8 = &v10;
LABEL_14:
      *v8 = 0;
      goto LABEL_16;
    }
    v12[0] = v11;
    (*(void (**)(_QWORD *, _BYTE *))(v9[0] + 24))(v9, v11);
LABEL_16:
    v4 = v10;
    if (v10 == v9)
    {
      v4 = v9;
      v5 = 4;
    }
    else
    {
      if (!v10)
        continue;
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return result;
}

void sub_22D9EE49C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void operations_research::ThreadPool::GetNextTask(std::condition_variable *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  std::unique_lock<std::mutex> v10;

  v10.__m_ = (std::unique_lock<std::mutex>::mutex_type *)&this->__cv_.__opaque[24];
  v10.__owns_ = 1;
  std::mutex::lock((std::mutex *)&this->__cv_.__opaque[24]);
  if (*(_QWORD *)&this->__cv_.__opaque[16])
  {
LABEL_4:
    v4 = *(_QWORD *)&this->__cv_.__opaque[8];
    v5 = *(_QWORD *)(v4 + 40);
    if (v5)
    {
      if (v5 == v4 + 16)
      {
        *(_QWORD *)(a2 + 24) = a2;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 24))(v5, a2);
LABEL_10:
        v6 = *(uint64_t **)&this->__cv_.__opaque[8];
        v7 = *v6;
        *(_QWORD *)(v7 + 8) = v6[1];
        *(_QWORD *)v6[1] = v7;
        --*(_QWORD *)&this->__cv_.__opaque[16];
        v8 = (uint64_t *)v6[5];
        if (v8 == v6 + 2)
        {
          v9 = 4;
          v8 = v6 + 2;
        }
        else
        {
          if (!v8)
          {
LABEL_15:
            operator delete(v6);
            if (*(_QWORD *)&this->__cv_.__opaque[16] < (unint64_t)SHIDWORD(this[4].__cv_.__sig)
              && BYTE1(this[4].__cv_.__sig))
            {
              BYTE1(this[4].__cv_.__sig) = 0;
              std::condition_variable::notify_all(this + 3);
            }
            goto LABEL_18;
          }
          v9 = 5;
        }
        (*(void (**)(uint64_t *))(*v8 + 8 * v9))(v8);
        goto LABEL_15;
      }
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    }
    *(_QWORD *)(a2 + 24) = v5;
    goto LABEL_10;
  }
  while (!LOBYTE(this[4].__cv_.__sig))
  {
    std::condition_variable::wait(this + 2, &v10);
    if (*(_QWORD *)&this->__cv_.__opaque[16])
      goto LABEL_4;
  }
  *(_QWORD *)(a2 + 24) = 0;
LABEL_18:
  if (v10.__owns_)
    std::mutex::unlock(v10.__m_);
}

void sub_22D9EE644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10)
    std::mutex::unlock(a9);
  _Unwind_Resume(exception_object);
}

double operations_research::ThreadPool::ThreadPool(uint64_t a1, uint64_t a2, int a3)
{
  double result;

  *(_DWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = a1 + 8;
  *(_QWORD *)(a1 + 16) = a1 + 8;
  *(_OWORD *)(a1 + 24) = xmmword_22DCE6620;
  result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 1018212795;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 1018212795;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 179) = 0u;
  *(_DWORD *)(a1 + 196) = 2000000000;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  return result;
}

void operations_research::ThreadPool::~ThreadPool(operations_research::ThreadPool *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  operations_research::ThreadPool *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  operations_research::ThreadPool *v12;

  if (*((_BYTE *)this + 194))
  {
    std::mutex::lock((std::mutex *)((char *)this + 32));
    *((_BYTE *)this + 192) = 1;
    std::mutex::unlock((std::mutex *)((char *)this + 32));
    std::condition_variable::notify_all((std::condition_variable *)this + 2);
    if (*(int *)this >= 1)
    {
      v2 = 0;
      v3 = 0;
      do
      {
        std::thread::join((std::thread *)(*((_QWORD *)this + 25) + v2));
        ++v3;
        v2 += 8;
      }
      while (v3 < *(int *)this);
    }
  }
  v4 = *((_QWORD *)this + 25);
  if (v4)
  {
    v5 = *((_QWORD *)this + 26);
    v6 = (void *)*((_QWORD *)this + 25);
    if (v5 != v4)
    {
      do
        std::thread::~thread((std::thread *)(v5 - 8));
      while (v5 != v4);
      v6 = (void *)*((_QWORD *)this + 25);
    }
    *((_QWORD *)this + 26) = v4;
    operator delete(v6);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)this + 3);
  std::condition_variable::~condition_variable((std::condition_variable *)this + 2);
  std::mutex::~mutex((std::mutex *)((char *)this + 32));
  if (*((_QWORD *)this + 3))
  {
    v7 = *((_QWORD *)this + 1);
    v8 = (operations_research::ThreadPool *)*((_QWORD *)this + 2);
    v9 = *(_QWORD *)v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *((_QWORD *)this + 3) = 0;
    if (v8 != (operations_research::ThreadPool *)((char *)this + 8))
    {
      do
      {
        v12 = (operations_research::ThreadPool *)*((_QWORD *)v8 + 1);
        v10 = (_QWORD *)*((_QWORD *)v8 + 5);
        if (v10 == (_QWORD *)((char *)v8 + 16))
        {
          v10 = (_QWORD *)((char *)v8 + 16);
          v11 = 4;
        }
        else
        {
          if (!v10)
            goto LABEL_15;
          v11 = 5;
        }
        (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_15:
        operator delete(v8);
        v8 = v12;
      }
      while (v12 != (operations_research::ThreadPool *)((char *)this + 8));
    }
  }
}

void operations_research::ThreadPool::StartWorkers(operations_research::ThreadPool *this)
{
  int v2;
  std::thread **v3;
  std::thread *v4;
  unint64_t v5;
  std::thread *v6;
  std::thread *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  char *v14;
  std::thread *v15;
  char *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  std::thread *v22;
  char *v23;
  std::thread *v24;
  uint64_t v25;
  __int128 v26;
  _opaque_pthread_t *t;
  std::thread *v28;
  operations_research::ThreadPool *v29;
  uint64_t (*v30)(std::condition_variable *, void *);
  std::thread v31;

  *((_BYTE *)this + 194) = 1;
  if (*(int *)this >= 1)
  {
    v2 = 0;
    v3 = (std::thread **)((char *)this + 200);
    do
    {
      v29 = this;
      v30 = operations_research::RunWorker;
      std::thread::thread<void (*)(void *),operations_research::ThreadPool *,void>(&v31.__t_, (uint64_t *)&v30, &v29);
      v6 = (std::thread *)*((_QWORD *)this + 26);
      v5 = *((_QWORD *)this + 27);
      if ((unint64_t)v6 < v5)
      {
        v6->__t_ = v31.__t_;
        v31.__t_ = 0;
        v4 = v6 + 1;
      }
      else
      {
        v7 = *v3;
        v8 = (char *)v6 - (char *)*v3;
        v9 = v8 >> 3;
        v10 = (v8 >> 3) + 1;
        if (v10 >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v11 = v5 - (_QWORD)v7;
        if (v11 >> 2 > v10)
          v10 = v11 >> 2;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
          v12 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v12 = v10;
        v13 = 0uLL;
        if (v12)
        {
          if (v12 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v14 = (char *)operator new(8 * v12);
          v13 = 0uLL;
        }
        else
        {
          v14 = 0;
        }
        v15 = (std::thread *)&v14[8 * v9];
        v16 = &v14[8 * v12];
        v15->__t_ = v31.__t_;
        v4 = v15 + 1;
        v31.__t_ = 0;
        v17 = (char *)((char *)v6 - (char *)v7);
        if (v6 != v7)
        {
          v18 = v17 - 8;
          if ((unint64_t)(v17 - 8) < 0x78)
            goto LABEL_35;
          v19 = (unint64_t)v18 >> 3;
          if (&v14[v8 - ((unint64_t)v18 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v6 && &v6[-v19 - 1] < v15)
            goto LABEL_35;
          v20 = v19 + 1;
          v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          v22 = &v6[v21 / 0xFFFFFFFFFFFFFFF8];
          v15 = (std::thread *)((char *)v15 - v21);
          v23 = &v14[8 * v9 - 16];
          v24 = v6 - 2;
          v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v26 = *(_OWORD *)&v24->__t_;
            *((_OWORD *)v23 - 1) = *(_OWORD *)&v24[-2].__t_;
            *(_OWORD *)v23 = v26;
            *(_OWORD *)&v24[-2].__t_ = v13;
            *(_OWORD *)&v24->__t_ = v13;
            v23 -= 32;
            v24 -= 4;
            v25 -= 4;
          }
          while (v25);
          v6 = v22;
          if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_35:
            do
            {
              t = v6[-1].__t_;
              --v6;
              v15[-1].__t_ = t;
              --v15;
              v6->__t_ = 0;
            }
            while (v6 != v7);
          }
          v6 = (std::thread *)*((_QWORD *)this + 25);
          v28 = (std::thread *)*((_QWORD *)this + 26);
          *((_QWORD *)this + 25) = v15;
          *((_QWORD *)this + 26) = v4;
          *((_QWORD *)this + 27) = v16;
          while (v28 != v6)
            std::thread::~thread(v28 - 1);
          if (!v6)
            goto LABEL_4;
LABEL_29:
          operator delete(v6);
          goto LABEL_4;
        }
        *((_QWORD *)this + 25) = v15;
        *((_QWORD *)this + 26) = v4;
        *((_QWORD *)this + 27) = v16;
        if (v6)
          goto LABEL_29;
      }
LABEL_4:
      *((_QWORD *)this + 26) = v4;
      std::thread::~thread(&v31);
      ++v2;
    }
    while (v2 < *(_DWORD *)this);
  }
}

void sub_22D9EEA44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::thread a12)
{
  std::thread::~thread(&a12);
  _Unwind_Resume(a1);
}

void sub_22D9EEA58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::thread a12)
{
  std::thread::~thread(&a12);
  _Unwind_Resume(a1);
}

void operations_research::ThreadPool::Schedule(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 owns;
  std::unique_lock<std::mutex> v8;

  v8.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 32);
  v8.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 32));
  while (*(_QWORD *)(a1 + 24) >= (unint64_t)*(int *)(a1 + 196))
  {
    *(_BYTE *)(a1 + 193) = 1;
    std::condition_variable::wait((std::condition_variable *)(a1 + 144), &v8);
  }
  v4 = operator new(0x30uLL);
  *v4 = 0;
  v4[1] = 0;
  v5 = a2[3];
  if (!v5)
    goto LABEL_6;
  if ((_QWORD *)v5 != a2)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
LABEL_6:
    v4[5] = v5;
    goto LABEL_8;
  }
  v4[5] = v4 + 2;
  (*(void (**)(_QWORD *))(*a2 + 24))(a2);
LABEL_8:
  v6 = *(_QWORD *)(a1 + 8);
  *v4 = v6;
  v4[1] = a1 + 8;
  *(_QWORD *)(v6 + 8) = v4;
  *(_QWORD *)(a1 + 8) = v4;
  ++*(_QWORD *)(a1 + 24);
  owns = v8.__owns_;
  if (*(_BYTE *)(a1 + 194))
  {
    if (!v8.__owns_)
    {
      std::__throw_system_error(1, "unique_lock::unlock: not locked");
      __break(1u);
      return;
    }
    std::mutex::unlock(v8.__m_);
    v8.__owns_ = 0;
    std::condition_variable::notify_all((std::condition_variable *)(a1 + 96));
    owns = v8.__owns_;
  }
  if (owns)
    std::mutex::unlock(v8.__m_);
}

void sub_22D9EEB98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  void *v10;

  operator delete(v10);
  if (a10)
    std::mutex::unlock(a9);
  _Unwind_Resume(a1);
}

void std::thread::thread<void (*)(void *),operations_research::ThreadPool *,void>(pthread_t *a1, uint64_t *a2, _QWORD *a3)
{
  std::__thread_struct *v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;

  v6 = (std::__thread_struct *)operator new();
  std::__thread_struct::__thread_struct(v6);
  v9 = (_QWORD *)operator new();
  v7 = *a2;
  *v9 = v6;
  v9[1] = v7;
  v9[2] = *a3;
  v8 = pthread_create(a1, 0, (void *(__cdecl *)(void *))std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,void (*)(void *),operations_research::ThreadPool *>>, v9);
  if (v8)
  {
    std::__throw_system_error(v8, "thread constructor failed");
    __break(1u);
  }
}

void sub_22D9EEC78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__thread_struct>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22D9EEC8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sub_22D9EECB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10)
{
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (*)(void *),operations_research::ThreadPool *>>::~unique_ptr[abi:ne180100](&a9);
  std::unique_ptr<std::__thread_struct>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,void (*)(void *),operations_research::ThreadPool *>>(uint64_t a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  const void *v4;
  uint64_t v5;

  v2 = std::__thread_local_data();
  v3 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  (*(void (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
  v4 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
  {
    v5 = MEMORY[0x22E31DDD4]();
    MEMORY[0x22E31DF78](v5, 0x20C4093837F09);
  }
  MEMORY[0x22E31DF78](a1, 0xA0C40A8488062);
  return 0;
}

void sub_22D9EED50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (*)(void *),operations_research::ThreadPool *>>::~unique_ptr[abi:ne180100]((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t **std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (*)(void *),operations_research::ThreadPool *>>::~unique_ptr[abi:ne180100](uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
    {
      v4 = MEMORY[0x22E31DDD4]();
      MEMORY[0x22E31DF78](v4, 0x20C4093837F09);
    }
    MEMORY[0x22E31DF78](v2, 0xA0C40A8488062);
  }
  return a1;
}

uint64_t *std::unique_ptr<std::__thread_struct>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = MEMORY[0x22E31DDD4]();
    MEMORY[0x22E31DF78](v3, 0x20C4093837F09);
  }
  return a1;
}

uint64_t operations_research::glop::EtaMatrix::EtaMatrix(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int *v9;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;

  *(_QWORD *)a1 = &off_24F97FF50;
  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)a3 + 8 * a2);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_BYTE *)(a1 + 88) = 0;
  std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((_QWORD *)(a1 + 24), *(char **)a3, *(char **)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v6 + 8 * *(int *)(a1 + 8)) = 0;
  v9 = *(int **)(a3 + 32);
  v8 = *(int **)(a3 + 40);
  if ((double)(int)((unint64_t)(v7 - v6) >> 3) * 0.5 > (double)(unint64_t)(v8 - v9) && v9 != v8)
  {
    do
    {
      v13 = *v9;
      if (*v9 == a2)
        goto LABEL_8;
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v13);
      v15 = *(_QWORD *)(a1 + 56);
      if (v15 == *(_QWORD *)(a1 + 64))
      {
        if (!v15)
        {
          v16 = 4;
LABEL_15:
          v17 = (v16 + 3) & 0xFFFFFFFFFFFFFFFCLL;
          v18 = (char *)operator new[]();
          v19 = v18;
          v20 = &v18[4 * v17];
          v15 = *(_QWORD *)(a1 + 56);
          if (v15 >= 1)
          {
            memmove(v18, *(const void **)(a1 + 72), 4 * v15);
            memmove(v20, *(const void **)(a1 + 80), 8 * v15);
          }
          v21 = *(_QWORD *)(a1 + 48);
          *(_QWORD *)(a1 + 48) = v19;
          *(_QWORD *)(a1 + 72) = v19;
          *(_QWORD *)(a1 + 80) = v20;
          *(_QWORD *)(a1 + 64) = v17;
          if (v21)
          {
            MEMORY[0x22E31DF60](v21, 0x1000C8077774924);
            v15 = *(_QWORD *)(a1 + 56);
          }
          goto LABEL_7;
        }
        v16 = 2 * v15;
        if (v15 < 2 * v15)
          goto LABEL_15;
      }
LABEL_7:
      *(_QWORD *)(a1 + 56) = v15 + 1;
      v12 = *(_QWORD *)(a1 + 80);
      *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * v15) = v13;
      *(_QWORD *)(v12 + 8 * v15) = v14;
      *(_BYTE *)(a1 + 88) = 1;
LABEL_8:
      ++v9;
    }
    while (v9 != v8);
  }
  return a1;
}

void sub_22D9EEFE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v12;
  void *v13;

  v12 = *(_QWORD *)(v10 + 48);
  *(_QWORD *)(v10 + 48) = 0;
  if (v12)
  {
    MEMORY[0x22E31DF60](v12, 0x1000C8077774924);
    v13 = *a10;
    if (!*a10)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v13 = *a10;
    if (!*a10)
      goto LABEL_3;
  }
  *(_QWORD *)(v10 + 32) = v13;
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

void operations_research::glop::EtaMatrix::~EtaMatrix(operations_research::glop::EtaMatrix *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_24F97FF50;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    MEMORY[0x22E31DF60](v2, 0x1000C8077774924);
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 4) = v3;
    operator delete(v3);
  }
}

{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_24F97FF50;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    MEMORY[0x22E31DF60](v2, 0x1000C8077774924);
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 4) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x22E31DF78);
}

double operations_research::glop::EtaMatrix::SparseLeftSolve(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  double v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  _DWORD *v24;
  char *v25;
  int64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _OWORD *v31;
  char *v32;
  uint64_t v33;
  int v34;
  _BYTE v36[16];

  if (!a2)
  {
    google::LogMessage::LogMessage((google::LogMessage *)v36, (google::glog_internal_namespace_ *)"./ortools/glop/basis_representation.cc", 76, 2);
    v15 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v36);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"y", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v36);
    return *(double *)&v17;
  }
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *a2;
  v6 = *(double *)(*a2 + 8 * v4);
  v7 = *(char **)a3;
  v8 = *(char **)(a3 + 8);
  v9 = (uint64_t)&v8[-*(_QWORD *)a3];
  v10 = v9 >> 2;
  if ((int)(v9 >> 2) < 1)
  {
    *(double *)&v17 = v6 / *(double *)(a1 + 16);
    *(_QWORD *)(v5 + 8 * v4) = v17;
LABEL_12:
    v18 = *(_QWORD *)(a3 + 16);
    if ((unint64_t)v8 < v18)
    {
      *(_DWORD *)v8 = v4;
      v19 = (uint64_t)(v8 + 4);
LABEL_33:
      *(_QWORD *)(a3 + 8) = v19;
      return *(double *)&v17;
    }
    v20 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v21 = v18 - (_QWORD)v7;
    if (v21 >> 1 > v20)
      v20 = v21 >> 1;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
      v22 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v23 = operator new(4 * v22);
      v24 = &v23[4 * v10];
      v25 = &v23[4 * v22];
      *v24 = v4;
      v19 = (uint64_t)(v24 + 1);
      v26 = v8 - v7;
      if (v8 == v7)
        goto LABEL_31;
    }
    else
    {
      v23 = 0;
      v24 = (_DWORD *)(4 * v10);
      v25 = 0;
      *(_DWORD *)(4 * v10) = v4;
      v19 = 4 * v10 + 4;
      v26 = v8 - v7;
      if (v8 == v7)
      {
LABEL_31:
        *(_QWORD *)a3 = v24;
        *(_QWORD *)(a3 + 8) = v19;
        *(_QWORD *)(a3 + 16) = v25;
        if (v7)
          operator delete(v7);
        goto LABEL_33;
      }
    }
    v27 = v26 - 4;
    if (v27 < 0x2C)
      goto LABEL_42;
    if ((unint64_t)(v8 - v23 - v9) < 0x20)
      goto LABEL_42;
    v28 = (v27 >> 2) + 1;
    v29 = 4 * (v28 & 0x7FFFFFFFFFFFFFF8);
    v30 = &v8[-v29];
    v24 = (_DWORD *)((char *)v24 - v29);
    v31 = &v23[4 * v10 - 16];
    v32 = v8 - 16;
    v33 = v28 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v17 = *(_OWORD *)v32;
      *(v31 - 1) = *((_OWORD *)v32 - 1);
      *v31 = v17;
      v31 -= 2;
      v32 -= 32;
      v33 -= 8;
    }
    while (v33);
    v8 = v30;
    if (v28 != (v28 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_42:
      do
      {
        v34 = *((_DWORD *)v8 - 1);
        v8 -= 4;
        *--v24 = v34;
      }
      while (v8 != v7);
    }
    goto LABEL_31;
  }
  v11 = 0;
  v12 = 0;
  v13 = ((unint64_t)v9 >> 2);
  do
  {
    v14 = *(_DWORD *)&v7[4 * v11];
    if (v14 == v4)
    {
      while (v13 - 1 != v11)
      {
        v14 = *(_DWORD *)&v7[4 * v11++ + 4];
        if (v14 != v4)
        {
          v12 = 1;
          goto LABEL_4;
        }
      }
      *(double *)&v17 = v6 / *(double *)(a1 + 16);
      *(_QWORD *)(v5 + 8 * v4) = v17;
      return *(double *)&v17;
    }
LABEL_4:
    v6 = v6 - *(double *)(v5 + 8 * v14) * *(double *)(*(_QWORD *)(a1 + 24) + 8 * v14);
    ++v11;
  }
  while (v11 != v13);
  *(double *)&v17 = v6 / *(double *)(a1 + 16);
  *(_QWORD *)(v5 + 8 * v4) = v17;
  if ((v12 & 1) == 0)
    goto LABEL_12;
  return *(double *)&v17;
}

void sub_22D9EF370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void operations_research::glop::EtaFactorization::~EtaFactorization(operations_research::glop::EtaFactorization *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24F97FF70;
  v2 = (uint64_t *)*((_QWORD *)this + 1);
  v3 = (uint64_t *)*((_QWORD *)this + 2);
  if (v2 == v3)
  {
    *((_QWORD *)this + 2) = v2;
    if (!v2)
      return;
    goto LABEL_3;
  }
  do
  {
    v5 = *v2++;
    v4 = v5;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  while (v2 != v3);
  v2 = (uint64_t *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 2) = v2;
  if (v2)
LABEL_3:
    operator delete(v2);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24F97FF70;
  v2 = (uint64_t *)*((_QWORD *)this + 1);
  v3 = (uint64_t *)*((_QWORD *)this + 2);
  if (v2 == v3)
  {
    *((_QWORD *)this + 2) = v2;
    if (!v2)
      goto LABEL_9;
  }
  else
  {
    do
    {
      v5 = *v2++;
      v4 = v5;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    }
    while (v2 != v3);
    v2 = (uint64_t *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 2) = v2;
    if (!v2)
LABEL_9:
      JUMPOUT(0x22E31DF78);
  }
  operator delete(v2);
  goto LABEL_9;
}

void operations_research::glop::EtaFactorization::Update(_QWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;

  v7 = operator new();
  operations_research::glop::EtaMatrix::EtaMatrix(v7, a3, a4);
  v9 = (uint64_t *)a1[2];
  v8 = a1[3];
  if ((unint64_t)v9 < v8)
  {
    *v9 = v7;
    v10 = (uint64_t)(v9 + 1);
    goto LABEL_23;
  }
  v11 = (char *)a1[1];
  v12 = ((char *)v9 - v11) >> 3;
  v13 = v12 + 1;
  if ((unint64_t)(v12 + 1) >> 61)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v14 = v8 - (_QWORD)v11;
  if (v14 >> 2 > v13)
    v13 = v14 >> 2;
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
    v15 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v15 = v13;
  if (v15)
  {
    if (v15 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v16 = (char *)operator new(8 * v15);
    v17 = (uint64_t *)&v16[8 * v12];
    v18 = &v16[8 * v15];
    *v17 = v7;
    v10 = (uint64_t)(v17 + 1);
    v19 = (char *)((char *)v9 - v11);
    if (v9 == (uint64_t *)v11)
      goto LABEL_21;
    goto LABEL_14;
  }
  v16 = 0;
  v17 = (uint64_t *)(8 * v12);
  v18 = 0;
  *(_QWORD *)(8 * v12) = v7;
  v10 = 8 * v12 + 8;
  v19 = (char *)((char *)v9 - v11);
  if (v9 != (uint64_t *)v11)
  {
LABEL_14:
    v20 = (unint64_t)(v19 - 8);
    if (v20 < 0x58)
      goto LABEL_28;
    if ((unint64_t)(v11 - v16) < 0x20)
      goto LABEL_28;
    v21 = (v20 >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v23 = &v9[v22 / 0xFFFFFFFFFFFFFFF8];
    v17 = (uint64_t *)((char *)v17 - v22);
    v24 = &v16[8 * v12 - 16];
    v25 = v9 - 2;
    v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27 = *(_OWORD *)v25;
      *((_OWORD *)v24 - 1) = *((_OWORD *)v25 - 1);
      *(_OWORD *)v24 = v27;
      v24 -= 32;
      v25 -= 4;
      v26 -= 4;
    }
    while (v26);
    v9 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v28 = *--v9;
        *--v17 = v28;
      }
      while (v9 != (uint64_t *)v11);
    }
    v9 = (uint64_t *)a1[1];
  }
LABEL_21:
  a1[1] = v17;
  a1[2] = v10;
  a1[3] = v18;
  if (v9)
    operator delete(v9);
LABEL_23:
  a1[2] = v10;
}

void sub_22D9EF638(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x10B1C40E95B3851);
  _Unwind_Resume(a1);
}

uint64_t operations_research::glop::BasisFactorization::BasisFactorization(uint64_t a1, uint64_t a2, uint64_t a3)
{
  operations_research::glop::GlopParameters *v6;

  *(_QWORD *)a1 = &off_24F97FF90;
  v6 = (operations_research::glop::GlopParameters *)(a1 + 168);
  operations_research::glop::BasisFactorization::Stats::Stats((operations_research::glop::BasisFactorization::Stats *)(a1 + 8));
  operations_research::glop::GlopParameters::GlopParameters((uint64_t)v6, 0);
  *(_QWORD *)(a1 + 464) = a2;
  *(_QWORD *)(a1 + 472) = a3;
  *(_QWORD *)(a1 + 480) = 0x3FA999999999999ALL;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_BYTE *)(a1 + 649) = 0;
  *(_QWORD *)(a1 + 868) = 0;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 577) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_QWORD *)(a1 + 880) = &off_24F97FF70;
  *(_QWORD *)(a1 + 904) = 0;
  *(_QWORD *)(a1 + 888) = 0;
  *(_QWORD *)(a1 + 896) = 0;
  operations_research::glop::LuFactorization::LuFactorization((operations_research::glop::LuFactorization *)(a1 + 912));
  *(_QWORD *)(a1 + 4632) = 0;
  *(_DWORD *)(a1 + 868) = *(_DWORD *)(a1 + 296);
  *(_BYTE *)(a1 + 864) = *(_BYTE *)(a1 + 365);
  operations_research::glop::GlopParameters::CopyFrom(v6, v6);
  operations_research::glop::GlopParameters::CopyFrom((operations_research::glop::GlopParameters *)(a1 + 2496), v6);
  operations_research::glop::GlopParameters::CopyFrom((operations_research::glop::GlopParameters *)(a1 + 4336), v6);
  return a1;
}

void sub_22D9EF790(_Unwind_Exception *a1)
{
  void **v1;
  operations_research::glop::GlopParameters *v2;
  _QWORD *v3;
  operations_research::glop::ScatteredColumn *v4;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  operations_research::glop::EtaFactorization::~EtaFactorization((operations_research::glop::EtaFactorization *)(v3 + 110));
  v6 = (void *)v3[105];
  if (v6)
  {
    v3[106] = v6;
    operator delete(v6);
  }
  v7 = (void *)v3[102];
  if (v7)
  {
    v3[103] = v7;
    operator delete(v7);
  }
  operations_research::glop::CompactSparseMatrix::~CompactSparseMatrix((operations_research::glop::CompactSparseMatrix *)(v3 + 92));
  operations_research::glop::CompactSparseMatrix::~CompactSparseMatrix((operations_research::glop::CompactSparseMatrix *)(v3 + 82));
  operations_research::glop::ScatteredColumn::~ScatteredColumn(v4);
  v8 = (void *)v3[68];
  if (v8)
  {
    v3[69] = v8;
    operator delete(v8);
    v9 = (void *)v3[65];
    if (!v9)
    {
LABEL_7:
      v10 = (void *)v3[62];
      if (!v10)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  else
  {
    v9 = (void *)v3[65];
    if (!v9)
      goto LABEL_7;
  }
  v3[66] = v9;
  operator delete(v9);
  v10 = (void *)v3[62];
  if (!v10)
  {
LABEL_9:
    operations_research::glop::GlopParameters::~GlopParameters(v2);
    operations_research::glop::BasisFactorization::Stats::~Stats(v1);
    _Unwind_Resume(a1);
  }
LABEL_8:
  v3[63] = v10;
  operator delete(v10);
  goto LABEL_9;
}

void operations_research::glop::CompactSparseMatrix::~CompactSparseMatrix(operations_research::glop::CompactSparseMatrix *this)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
}

void operations_research::glop::ScatteredColumn::~ScatteredColumn(operations_research::glop::ScatteredColumn *this)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
    operator delete(v2);
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v4;
    operator delete(v4);
  }
}

void operations_research::glop::BasisFactorization::Stats::~Stats(void **this)
{
  operations_research::glop::BasisFactorization::Stats *v1;

  v1 = (operations_research::glop::BasisFactorization::Stats *)this;
  this[10] = off_24F97FEB0;
  if (*((char *)this + 111) < 0)
  {
    operator delete(this[11]);
    this = (void **)v1;
  }
  operations_research::StatsGroup::~StatsGroup((operations_research::StatsGroup *)this);
}

void operations_research::glop::BasisFactorization::~BasisFactorization(operations_research::glop::BasisFactorization *this)
{
  uint64_t *v2;
  uint64_t *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)this = &off_24F97FF90;
  operations_research::glop::LuFactorization::~LuFactorization((operations_research::glop::BasisFactorization *)((char *)this + 912));
  *((_QWORD *)this + 110) = &off_24F97FF70;
  v2 = (uint64_t *)*((_QWORD *)this + 111);
  v3 = (uint64_t *)*((_QWORD *)this + 112);
  if (v2 == v3)
  {
    *((_QWORD *)this + 112) = v2;
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  do
  {
    v19 = *v2++;
    v18 = v19;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  while (v2 != v3);
  v2 = (uint64_t *)*((_QWORD *)this + 111);
  *((_QWORD *)this + 112) = v2;
  if (v2)
LABEL_3:
    operator delete(v2);
LABEL_4:
  v4 = (void *)*((_QWORD *)this + 105);
  if (v4)
  {
    *((_QWORD *)this + 106) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 102);
  if (v5)
  {
    *((_QWORD *)this + 103) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 99);
  if (v6)
  {
    *((_QWORD *)this + 100) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 96);
  if (v7)
  {
    *((_QWORD *)this + 97) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 93);
  if (v8)
  {
    *((_QWORD *)this + 94) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 89);
  if (v9)
  {
    *((_QWORD *)this + 90) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 86);
  if (v10)
  {
    *((_QWORD *)this + 87) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 83);
  if (v11)
  {
    *((_QWORD *)this + 84) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 78);
  if (v12)
    operator delete(v12);
  v13 = (void *)*((_QWORD *)this + 75);
  if (v13)
  {
    *((_QWORD *)this + 76) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)this + 71);
  if (v14)
  {
    *((_QWORD *)this + 72) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 68);
  if (v15)
  {
    *((_QWORD *)this + 69) = v15;
    operator delete(v15);
  }
  v16 = (void *)*((_QWORD *)this + 65);
  if (v16)
  {
    *((_QWORD *)this + 66) = v16;
    operator delete(v16);
  }
  v17 = (void *)*((_QWORD *)this + 62);
  if (v17)
  {
    *((_QWORD *)this + 63) = v17;
    operator delete(v17);
  }
  operations_research::glop::GlopParameters::~GlopParameters((operations_research::glop::BasisFactorization *)((char *)this + 168));
  *((_QWORD *)this + 11) = off_24F97FEB0;
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  operations_research::StatsGroup::~StatsGroup((operations_research::glop::BasisFactorization *)((char *)this + 8));
}

{
  operations_research::glop::BasisFactorization::~BasisFactorization(this);
  JUMPOUT(0x22E31DF78);
}

void operations_research::glop::BasisFactorization::Clear(operations_research::glop::BasisFactorization *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  *((_DWORD *)this + 218) = 0;
  *((_BYTE *)this + 648) = 0;
  v2 = (uint64_t *)*((_QWORD *)this + 111);
  v3 = (uint64_t *)*((_QWORD *)this + 112);
  if (v2 != v3)
  {
    do
    {
      v5 = *v2++;
      v4 = v5;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    }
    while (v2 != v3);
    v2 = (uint64_t *)*((_QWORD *)this + 111);
  }
  *((_QWORD *)this + 112) = v2;
  operations_research::glop::LuFactorization::Clear((operations_research::glop::BasisFactorization *)((char *)this + 912));
  *((_QWORD *)this + 63) = *((_QWORD *)this + 62);
  *((_QWORD *)this + 61) = 0;
  operations_research::glop::CompactSparseMatrix::Reset((uint64_t)this + 656, **((_DWORD **)this + 58));
  operations_research::glop::CompactSparseMatrix::Reset((uint64_t)this + 736, **((_DWORD **)this + 58));
  std::vector<int>::assign((std::vector<int> *)this + 34, *(int *)(*((_QWORD *)this + 58) + 4), &operations_research::glop::kInvalidCol);
  std::vector<int>::assign((std::vector<int> *)this + 35, *(int *)(*((_QWORD *)this + 58) + 4), &operations_research::glop::kInvalidCol);
}

void operations_research::glop::BasisFactorization::Initialize(std::vector<int> *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *end;
  unint64_t v5;
  int *value;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  _QWORD v20[2];

  operations_research::glop::BasisFactorization::Clear((operations_research::glop::BasisFactorization *)this);
  end = this[19].__end_;
  v5 = *(unsigned int *)end;
  if ((int)v5 < 1)
    goto LABEL_17;
  value = this[19].__end_cap_.__value_;
  v7 = end[7];
  v8 = **(int **)value;
  v9 = *(_QWORD *)(v7 + 8 * v8);
  if (*(_QWORD *)(v7 + (((v8 << 32) + 0x100000000) >> 29)) - v9 != 1)
    goto LABEL_16;
  v10 = end[1];
  v11 = end[4];
  if (*(_DWORD *)(v11 + 4 * v9) || *(double *)(v10 + 8 * v9) != 1.0)
    goto LABEL_16;
  v13 = 1;
  do
  {
    v14 = v13;
    if (v5 == v13)
      break;
    v15 = *(int *)(*(_QWORD *)value + 4 * v13);
    v16 = *(_QWORD *)(v7 + 8 * v15);
    if (*(_QWORD *)(v7 + (((v15 << 32) + 0x100000000) >> 29)) - v16 != 1)
      break;
    v17 = *(double *)(v10 + 8 * v16);
    v18 = *(unsigned int *)(v11 + 4 * v16);
    v13 = v14 + 1;
  }
  while (v14 == v18 && v17 == 1.0);
  if (v14 >= v5)
  {
LABEL_17:
    operations_research::glop::Status::Status(a2);
  }
  else
  {
LABEL_16:
    v20[0] = this[19].__end_;
    v20[1] = value;
    operations_research::glop::LuFactorization::ComputeFactorization(this + 38, (const operations_research::glop::CompactSparseMatrixView *)v20, a2);
  }
}

BOOL operations_research::glop::BasisFactorization::IsRefactorized(operations_research::glop::BasisFactorization *this)
{
  return *((_DWORD *)this + 218) == 0;
}

uint64_t operations_research::glop::BasisFactorization::Refactorize@<X0>(std::vector<int> *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t end_low;
  uint64_t result;
  __int128 v6;

  end_low = SLODWORD(this[36].__end_);
  if (!(_DWORD)end_low)
    return operations_research::glop::Status::Status(a2);
  operations_research::IntegerDistribution::Add((uint64_t)&this[3].__end_cap_, end_low);
  operations_research::glop::BasisFactorization::Clear((operations_research::glop::BasisFactorization *)this);
  v6 = *(_OWORD *)&this[19].__end_;
  operations_research::glop::LuFactorization::ComputeFactorization(this + 38, (const operations_research::glop::CompactSparseMatrixView *)&v6, a2);
  result = operations_research::glop::LuFactorization::NumberOfEntries((operations_research::glop::LuFactorization *)&this[38]);
  *(double *)&this[193].__begin_ = *(double *)&this[193].__begin_ + (double)result * 0.000000002 * 10.0;
  return result;
}

void sub_22D9EFD98(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

double operations_research::glop::BasisFactorization::ForceRefactorization@<D0>(std::vector<int> *this@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v5;

  operations_research::IntegerDistribution::Add((uint64_t)&this[3].__end_cap_, SLODWORD(this[36].__end_));
  operations_research::glop::BasisFactorization::Clear((operations_research::glop::BasisFactorization *)this);
  v5 = *(_OWORD *)&this[19].__end_;
  operations_research::glop::LuFactorization::ComputeFactorization(this + 38, (const operations_research::glop::CompactSparseMatrixView *)&v5, a2);
  result = *(double *)&this[193].__begin_
         + (double)operations_research::glop::LuFactorization::NumberOfEntries((operations_research::glop::LuFactorization *)&this[38])
         * 0.000000002
         * 10.0;
  *(double *)&this[193].__begin_ = result;
  return result;
}

void sub_22D9EFE3C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

void operations_research::glop::BasisFactorization::MiddleProductFormUpdate(uint64_t a1@<X0>, int a2@<W1>, signed int a3@<W2>, uint64_t a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  _DWORD *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  __n128 *v34;
  __n128 *v35;
  uint64_t v36;
  int v37;
  _QWORD *ColumnOfU;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  _DWORD *v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  char *v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  double *v73;
  int *v74;
  unint64_t v75;
  uint64_t v76;
  int *v77;
  double *v78;
  double v79;
  double v80;
  uint64_t v81;
  unsigned int v82;
  char *v83;
  _QWORD *v84;
  void **v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void **v93;
  void **v94;
  unint64_t v95;
  std::string v96;
  void *__p[2];
  unsigned __int8 v98;
  _BYTE v99[16];
  __int128 v100;
  double v101;

  v7 = *(unsigned int *)(*(_QWORD *)(a1 + 840) + 4 * a2);
  v8 = *(unsigned int *)(*(_QWORD *)(a1 + 816) + 4 * a3);
  if ((_DWORD)v7 != -1 && (_DWORD)v8 != -1)
  {
    v11 = a1 + 520;
    v12 = *(int *)(a1 + 736);
    *(_QWORD *)&v100 = 0;
    v13 = *(_QWORD *)(a1 + 520);
    v14 = (*(_QWORD *)(a1 + 528) - v13) >> 3;
    v89 = v8;
    v90 = a4;
    if (v12 <= v14)
    {
      if (v12 < v14)
        *(_QWORD *)(a1 + 528) = v13 + 8 * v12;
    }
    else
    {
      std::vector<double>::__append(v11, v12 - v14, (uint64_t *)&v100);
    }
    v15 = *(_QWORD *)(a1 + 792);
    v16 = *(_QWORD *)(v15 + 8 * (int)v7);
    v17 = *(_QWORD *)(v15 + (((v7 << 32) + 0x100000000) >> 29));
    if (v16 < v17)
    {
      v94 = (void **)(a1 + 544);
      v18 = *(char **)(a1 + 552);
      while (1)
      {
        v20 = *(int *)(*(_QWORD *)(a1 + 768) + 4 * v16);
        a5.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(a1 + 744) + 8 * v16);
        *(_QWORD *)(*(_QWORD *)(a1 + 520) + 8 * v20) = a5.n128_u64[0];
        v21 = *(_QWORD *)(a1 + 560);
        if ((unint64_t)v18 >= v21)
          break;
        *(_DWORD *)v18 = v20;
        v19 = (uint64_t)(v18 + 4);
LABEL_18:
        *(_QWORD *)(a1 + 552) = v19;
        ++v16;
        v18 = (char *)v19;
        if (v16 == v17)
          goto LABEL_45;
      }
      v22 = (char *)*v94;
      v23 = v18 - (_BYTE *)*v94;
      v24 = v23 >> 2;
      v25 = (v23 >> 2) + 1;
      if (v25 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v26 = v21 - (_QWORD)v22;
      if (v26 >> 1 > v25)
        v25 = v26 >> 1;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
        v27 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v27 = v25;
      if (v27)
      {
        if (v27 >> 62)
LABEL_95:
          std::__throw_bad_array_new_length[abi:ne180100]();
        v28 = operator new(4 * v27);
        v29 = &v28[4 * v24];
        *v29 = v20;
        v19 = (uint64_t)(v29 + 1);
        if (v18 == v22)
          goto LABEL_43;
      }
      else
      {
        v28 = 0;
        v29 = (_DWORD *)(4 * v24);
        *(_DWORD *)(4 * v24) = v20;
        v19 = 4 * v24 + 4;
        if (v18 == v22)
          goto LABEL_43;
      }
      v30 = v18 - 4 - v22;
      if (v30 >= 0xBC)
      {
        if (&v28[v23 - 4 - (v30 & 0xFFFFFFFFFFFFFFFCLL)] > &v28[v23 - 4])
        {
          v31 = v18;
        }
        else if (&v18[-(v30 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v18 - 4)
        {
          v31 = v18;
        }
        else if ((unint64_t)(v18 - v28 - v23) >= 0x20)
        {
          v32 = (v30 >> 2) + 1;
          v33 = 4 * (v32 & 0x7FFFFFFFFFFFFFF8);
          v31 = &v18[-v33];
          v29 = (_DWORD *)((char *)v29 - v33);
          v34 = (__n128 *)&v28[4 * v24 - 16];
          v35 = (__n128 *)(v18 - 16);
          v36 = v32 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            a5 = *v35;
            v34[-1] = v35[-1];
            *v34 = a5;
            v34 -= 2;
            v35 -= 2;
            v36 -= 8;
          }
          while (v36);
          if (v32 == (v32 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_43:
            *(_QWORD *)(a1 + 544) = v29;
            *(_QWORD *)(a1 + 552) = v19;
            *(_QWORD *)(a1 + 560) = &v28[4 * v27];
            if (v22)
              operator delete(v22);
            goto LABEL_18;
          }
        }
        else
        {
          v31 = v18;
        }
      }
      else
      {
        v31 = v18;
      }
      do
      {
        v37 = *((_DWORD *)v31 - 1);
        v31 -= 4;
        *--v29 = v37;
      }
      while (v31 != v22);
      goto LABEL_43;
    }
LABEL_45:
    ColumnOfU = (_QWORD *)operations_research::glop::LuFactorization::GetColumnOfU(a1 + 912, a3, a5);
    v39 = ColumnOfU[1];
    if (v39 >= 1)
    {
      v40 = 0;
      v42 = ColumnOfU[3];
      v41 = ColumnOfU[4];
      v91 = v41;
      v93 = (void **)(a1 + 544);
      v43 = *(char **)(a1 + 552);
      while (1)
      {
        while (1)
        {
          v44 = *(int *)(v42 + 4 * v40);
          *(double *)(*(_QWORD *)(a1 + 520) + 8 * v44) = *(double *)(*(_QWORD *)(a1 + 520) + 8 * v44)
                                                       - *(double *)(v41 + 8 * v40);
          v45 = *(_QWORD *)(a1 + 560);
          if ((unint64_t)v43 >= v45)
            break;
          *(_DWORD *)v43 = v44;
          v43 += 4;
          *(_QWORD *)(a1 + 552) = v43;
          if (++v40 == v39)
            goto LABEL_74;
        }
        v46 = (char *)*v93;
        v47 = v43 - (_BYTE *)*v93;
        v48 = v47 >> 2;
        v49 = (v47 >> 2) + 1;
        if (v49 >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v50 = v45 - (_QWORD)v46;
        if (v50 >> 1 > v49)
          v49 = v50 >> 1;
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
          v49 = 0x3FFFFFFFFFFFFFFFLL;
        v95 = v49;
        if (v49)
        {
          if (v49 >> 62)
            goto LABEL_95;
          v51 = operator new(4 * v49);
          v52 = &v51[4 * v48];
          *v52 = v44;
          v53 = (uint64_t)(v52 + 1);
          if (v43 == v46)
          {
LABEL_65:
            *(_QWORD *)(a1 + 544) = v52;
            *(_QWORD *)(a1 + 552) = v53;
            *(_QWORD *)(a1 + 560) = &v51[4 * v95];
            if (!v46)
              goto LABEL_62;
LABEL_61:
            operator delete(v46);
            goto LABEL_62;
          }
        }
        else
        {
          v51 = 0;
          v52 = (_DWORD *)(4 * v48);
          *(_DWORD *)(4 * v48) = v44;
          v53 = 4 * v48 + 4;
          if (v43 == v46)
            goto LABEL_65;
        }
        v54 = v43 - 4 - v46;
        if (v54 < 0xBC
          || &v51[v47 - 4 - (v54 & 0xFFFFFFFFFFFFFFFCLL)] > &v51[v47 - 4]
          || &v43[-(v54 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v43 - 4
          || (unint64_t)(v43 - &v51[v47]) < 0x20)
        {
          break;
        }
        v58 = (v54 >> 2) + 1;
        v59 = 4 * (v58 & 0x7FFFFFFFFFFFFFF8);
        v55 = &v43[-v59];
        v52 = (_DWORD *)((char *)v52 - v59);
        v60 = &v51[4 * v48 - 16];
        v61 = v43 - 16;
        v62 = v58 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v63 = *(_OWORD *)v61;
          *(v60 - 1) = *((_OWORD *)v61 - 1);
          *v60 = v63;
          v60 -= 2;
          v61 -= 32;
          v62 -= 8;
        }
        while (v62);
        v56 = v95;
        if (v58 != (v58 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_59;
LABEL_60:
        *(_QWORD *)(a1 + 544) = v52;
        *(_QWORD *)(a1 + 552) = v53;
        *(_QWORD *)(a1 + 560) = &v51[4 * v56];
        if (v46)
          goto LABEL_61;
LABEL_62:
        v41 = v91;
        *(_QWORD *)(a1 + 552) = v53;
        ++v40;
        v43 = (char *)v53;
        if (v40 == v39)
          goto LABEL_74;
      }
      v55 = v43;
      v56 = v95;
      do
      {
LABEL_59:
        v57 = *((_DWORD *)v55 - 1);
        v55 -= 4;
        *--v52 = v57;
      }
      while (v55 != v46);
      goto LABEL_60;
    }
LABEL_74:
    v64 = *(_QWORD *)(a1 + 712);
    v65 = *(_QWORD *)(v64 + 8 * (int)v89);
    v66 = *(_QWORD *)(v64 + (((v89 << 32) + 0x100000000) >> 29));
    v67 = 0.0;
    v68 = v66 - v65;
    if (v66 <= v65)
      goto LABEL_82;
    v69 = *(_QWORD *)(a1 + 664);
    v70 = *(_QWORD *)(a1 + 688);
    v71 = *(_QWORD *)(a1 + 520);
    if (v68 >= 2)
    {
      v72 = v65 + (v68 & 0xFFFFFFFFFFFFFFFELL);
      v73 = (double *)(v69 + 8 * v65 + 8);
      v74 = (int *)(v70 + 4 * v65 + 4);
      v75 = v68 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        v67 = v67 + *(v73 - 1) * *(double *)(v71 + 8 * *(v74 - 1)) + *v73 * *(double *)(v71 + 8 * *v74);
        v73 += 2;
        v74 += 2;
        v75 -= 2;
      }
      while (v75);
      if (v68 == (v68 & 0xFFFFFFFFFFFFFFFELL))
      {
LABEL_82:
        v82 = operations_research::glop::CompactSparseMatrix::AddAndClearColumnWithNonZeros(a1 + 656, (uint64_t *)(a1 + 520), (int **)(a1 + 544));
        *(_QWORD *)&v100 = a1 + 656;
        *((_QWORD *)&v100 + 1) = __PAIR64__(v89, v82);
        v101 = v67 + 1.0;
        if (v67 + 1.0 == 0.0)
        {
          v83 = (char *)operator new(0x20uLL);
          strcpy(v83, "Degenerate rank-one update.");
          google::LogMessage::LogMessage((google::LogMessage *)v99, (google::glog_internal_namespace_ *)"./ortools/glop/basis_representation.cc", 278, 2);
          v84 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v99);
          operations_research::glop::GetErrorCodeString((char *)1, (uint64_t)__p);
          if ((v98 & 0x80u) == 0)
            v85 = __p;
          else
            v85 = (void **)__p[0];
          if ((v98 & 0x80u) == 0)
            v86 = v98;
          else
            v86 = (uint64_t)__p[1];
          v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)v85, v86);
          v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)": ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)v83, 27);
          if ((char)v98 < 0)
            operator delete(__p[0]);
          google::LogMessage::~LogMessage((google::LogMessage *)v99);
          std::string::__init_copy_ctor_external(&v96, v83, 0x1BuLL);
          operations_research::glop::Status::Status(v90, 1, (__int128 *)&v96);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v96.__r_.__value_.__l.__data_);
          operator delete(v83);
        }
        else
        {
          operations_research::glop::RankOneUpdateFactorization::Update((_QWORD *)(a1 + 480), &v100);
          operations_research::glop::Status::Status(v90);
        }
        return;
      }
    }
    else
    {
      v72 = v65;
    }
    v76 = v66 - v72;
    v77 = (int *)(v70 + 4 * v72);
    v78 = (double *)(v69 + 8 * v72);
    do
    {
      v79 = *v78++;
      v80 = v79;
      v81 = *v77++;
      v67 = v67 + v80 * *(double *)(v71 + 8 * v81);
      --v76;
    }
    while (v76);
    goto LABEL_82;
  }
  if ((*operations_research::glop::BasisFactorization::MiddleProductFormUpdate(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::RowIndex_tag_,int>)::vlocal__[0] & 0x80000000) == 0
    && (operations_research::glop::BasisFactorization::MiddleProductFormUpdate(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::RowIndex_tag_,int>)::vlocal__[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)operations_research::glop::BasisFactorization::MiddleProductFormUpdate(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::RowIndex_tag_,int>)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/glop/basis_representation.cc", 0)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)&v100, (google::glog_internal_namespace_ *)"./ortools/glop/basis_representation.cc", 249);
    v10 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v100);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"One update vector is missing!!!", 31);
    google::LogMessage::~LogMessage((google::LogMessage *)&v100);
  }
  operations_research::IntegerDistribution::Add(a1 + 88, *(int *)(a1 + 872));
  operations_research::glop::BasisFactorization::Clear((operations_research::glop::BasisFactorization *)a1);
  v100 = *(_OWORD *)(a1 + 464);
  operations_research::glop::LuFactorization::ComputeFactorization((std::vector<int> *)(a1 + 912), (const operations_research::glop::CompactSparseMatrixView *)&v100, a4);
  *(double *)(a1 + 4632) = *(double *)(a1 + 4632)
                         + (double)operations_research::glop::LuFactorization::NumberOfEntries((operations_research::glop::LuFactorization *)(a1 + 912))
                         * 0.000000002
                         * 10.0;
}

void sub_22D9F05B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,char a29)
{
  void *v29;

  if (a20 < 0)
    operator delete(__p);
  operator delete(v29);
  _Unwind_Resume(a1);
}

void operations_research::glop::RankOneUpdateFactorization::Update(_QWORD *a1, __int128 *a2)
{
  unint64_t v4;
  _QWORD *v5;
  __int128 v6;
  _QWORD *v7;
  _QWORD **v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = (_QWORD *)a1[3];
  v4 = a1[4];
  if ((unint64_t)v5 >= v4)
  {
    v8 = (_QWORD **)(a1 + 2);
    v9 = (_QWORD *)a1[2];
    v10 = 0xAAAAAAAAAAAAAAABLL * (v5 - v9) + 1;
    if (v10 > 0xAAAAAAAAAAAAAAALL)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (_QWORD)v9) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = (char *)operator new(24 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * (v5 - v9)];
    *(_OWORD *)v14 = *a2;
    *((_QWORD *)v14 + 2) = *((_QWORD *)a2 + 2);
    v7 = v14 + 24;
    if (v5 != v9)
    {
      do
      {
        v15 = *(_OWORD *)(v5 - 3);
        *((_QWORD *)v14 - 1) = *(v5 - 1);
        *(_OWORD *)(v14 - 24) = v15;
        v14 -= 24;
        v5 -= 3;
      }
      while (v5 != v9);
      v5 = *v8;
    }
    a1[2] = v14;
    a1[3] = v7;
    a1[4] = &v13[24 * v12];
    if (v5)
      operator delete(v5);
  }
  else
  {
    v6 = *a2;
    v5[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)v5 = v6;
    v7 = v5 + 3;
  }
  v16 = *(_QWORD *)(*(_QWORD *)a2 + 56);
  v17 = *((int *)a2 + 2);
  v18 = *((int *)a2 + 3);
  v19 = *(_QWORD *)(v16 + 8 * v17);
  a1[3] = v7;
  a1[1] += *(_QWORD *)(v16 + (((v17 << 32) + 0x100000000) >> 29))
         - (v19
          + *(_QWORD *)(v16 + 8 * v18))
         + *(_QWORD *)(v16 + (((v18 << 32) + 0x100000000) >> 29));
}

void operations_research::glop::BasisFactorization::Update(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>, __n128 a6@<Q0>)
{
  uint64_t v8;
  __int128 v9;

  v8 = *(int *)(a1 + 872);
  if ((int)v8 >= *(_DWORD *)(a1 + 868))
  {
    operations_research::IntegerDistribution::Add(a1 + 88, v8);
    operations_research::glop::BasisFactorization::Clear((operations_research::glop::BasisFactorization *)a1);
    v9 = *(_OWORD *)(a1 + 464);
    operations_research::glop::LuFactorization::ComputeFactorization((std::vector<int> *)(a1 + 912), (const operations_research::glop::CompactSparseMatrixView *)&v9, a5);
    *(double *)(a1 + 4632) = *(double *)(a1 + 4632)
                           + (double)operations_research::glop::LuFactorization::NumberOfEntries((operations_research::glop::LuFactorization *)(a1 + 912))
                           * 0.000000002
                           * 10.0;
    return;
  }
  *(_DWORD *)(a1 + 872) = v8 + 1;
  if (!*(_BYTE *)(a1 + 864))
  {
    operations_research::glop::EtaFactorization::Update((_QWORD *)(a1 + 880), a2, a3, a4);
LABEL_9:
    *(_BYTE *)(a1 + 648) = 0;
    operations_research::glop::Status::Status(a5);
    return;
  }
  operations_research::glop::BasisFactorization::MiddleProductFormUpdate(a1, a2, a3, a5, a6);
  if (!*(_DWORD *)a5)
  {
    if (*(char *)(a5 + 31) < 0)
      operator delete(*(void **)(a5 + 8));
    goto LABEL_9;
  }
}

void sub_22D9F08E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

void operations_research::glop::BasisFactorization::LeftSolve(uint64_t a1, uint64_t a2)
{
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  int *v16;
  double *v17;
  uint64_t v18;
  double v19;
  double v20;
  float64x2_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  float64x2_t *v26;
  unint64_t v27;
  float64x2_t *v28;
  float64x2_t v29;
  float64x2_t v30;
  unint64_t v31;
  uint64_t v32;
  double *v33;
  double *v34;
  double v35;
  double v36;
  double v37;
  int *v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  _BYTE v43[16];

  if (!a2)
  {
    google::LogMessage::LogMessage((google::LogMessage *)v43, (google::glog_internal_namespace_ *)"./ortools/glop/basis_representation.cc", 308, 2);
    v5 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v43);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"y", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v43);
    return;
  }
  v4 = **(_DWORD **)(a1 + 464);
  if (v4)
    *(double *)(a1 + 4632) = *(double *)(a1 + 4632)
                           + (double)*(uint64_t *)(a1 + 488) * 0.000000002
                           + ((double)v4 / (double)v4 + 1.0)
                           * ((double)operations_research::glop::LuFactorization::NumberOfEntries((operations_research::glop::LuFactorization *)(a1 + 912))
                            * 0.000000002);
  if (!*(_BYTE *)(a1 + 864))
  {
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(a2 + 32);
    v7 = *(_QWORD *)(a1 + 888);
    v8 = ((unint64_t)(*(_QWORD *)(a1 + 896) - v7) >> 3) - 1;
    if ((int)v8 < 0)
    {
LABEL_26:
      operations_research::glop::LuFactorization::LeftSolve(a1 + 912, (_QWORD *)a2);
      return;
    }
    v9 = *(_QWORD *)a2;
    v10 = *(_QWORD *)a2 + 16;
    while (1)
    {
      v12 = *(_QWORD *)(v7 + 8 * v8);
      v13 = *(_QWORD *)(v12 + 56);
      v14 = *(int *)(v12 + 8);
      v15 = *(double *)(v9 + 8 * v14);
      if (v13)
      {
        if (v13 >= 1)
        {
          v16 = *(int **)(v12 + 72);
          v17 = *(double **)(v12 + 80);
          do
          {
            v18 = *v16++;
            v19 = *(double *)(v9 + 8 * v18);
            v20 = *v17++;
            v15 = v15 - v19 * v20;
            --v13;
          }
          while (v13);
        }
        goto LABEL_10;
      }
      v21 = *(float64x2_t **)(v12 + 24);
      v22 = *(_QWORD *)(v12 + 32) - (_QWORD)v21;
      if ((int)(v22 >> 3) >= 1)
      {
        v23 = (v22 >> 3);
        if (v23 >= 4)
        {
          v25 = (v22 >> 3) & 3;
          v24 = v23 - v25;
          v26 = v21 + 1;
          v27 = v23 - v25;
          v28 = (float64x2_t *)v10;
          do
          {
            v29 = vmulq_f64(v26[-1], vnegq_f64(v28[-1]));
            v30 = vmulq_f64(*v26, vnegq_f64(*v28));
            v15 = v15 + v29.f64[0] + v29.f64[1] + v30.f64[0] + v30.f64[1];
            v28 += 2;
            v26 += 2;
            v27 -= 4;
          }
          while (v27);
          if (!v25)
            goto LABEL_10;
        }
        else
        {
          v24 = 0;
        }
        v31 = v24 - v23;
        v32 = v24;
        v33 = &v21->f64[v32];
        v34 = (double *)(v9 + v32 * 8);
        do
        {
          v35 = *v34++;
          v36 = v35;
          v37 = *v33++;
          v15 = v15 - v36 * v37;
        }
        while (!__CFADD__(v31++, 1));
      }
LABEL_10:
      *(double *)(v9 + 8 * v14) = v15 / *(double *)(v12 + 16);
      if (v8-- <= 0)
        goto LABEL_26;
    }
  }
  operations_research::glop::LuFactorization::LeftSolveUWithNonZeros(a1 + 912, a2);
  operations_research::glop::RankOneUpdateFactorization::LeftSolveWithNonZeros(a1 + 480, (uint64_t *)a2);
  operations_research::glop::LuFactorization::LeftSolveLWithNonZeros((_BYTE *)(a1 + 912), a2);
  if (!*(_BYTE *)(a2 + 24))
  {
    v39 = *(int **)(a2 + 32);
    v40 = *(char **)(a2 + 40);
    v41 = 126 - 2 * __clz((v40 - (char *)v39) >> 2);
    if (v40 == (char *)v39)
      v42 = 0;
    else
      v42 = v41;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *,false>(v39, v40, (uint64_t)v43, v42, 1);
    *(_BYTE *)(a2 + 24) = 1;
  }
}

void sub_22D9F0BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void operations_research::glop::RankOneUpdateFactorization::LeftSolveWithNonZeros(uint64_t a1, uint64_t *a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  unsigned int v12;
  double v13;
  unsigned int v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  int *v24;
  double *v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  double *v31;
  double v32;
  double v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  double *v46;
  double v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[16];

  if (a2)
  {
    if (a2[4] == a2[5])
    {
      operations_research::glop::RankOneUpdateFactorization::LeftSolve(a1, a2);
    }
    else
    {
      operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredRowEntry>>::ClearSparseMask((uint64_t)a2);
      v5 = a2[4];
      v4 = (int *)a2[5];
      if ((int *)v5 == v4)
      {
        v9 = 1;
      }
      else
      {
        v6 = a2[7];
        v7 = (int *)a2[4];
        do
        {
          v8 = *v7++;
          *(_QWORD *)(v6 + (((unint64_t)v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        }
        while (v7 != v4);
        v9 = *(double *)a1 * (double)(int)((unint64_t)(a2[1] - *a2) >> 3) < (double)(unint64_t)(((uint64_t)v4 - v5) >> 2);
      }
      v12 = -1431655765 * ((*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) - 1;
      if ((v12 & 0x80000000) == 0)
      {
        do
        {
          v14 = v12;
          v15 = *(_QWORD *)(a1 + 16);
          v16 = (int *)(v15 + 24 * v12);
          v17 = *(_QWORD *)v16;
          v18 = v16[2];
          v19 = *(_QWORD *)(*(_QWORD *)v16 + 56);
          v20 = *(_QWORD *)(v19 + 8 * v18);
          v21 = *(_QWORD *)(v19 + (((v18 << 32) + 0x100000000) >> 29));
          v22 = 0.0;
          if (v9)
          {
            v23 = v21 - v20;
            if (v21 > v20)
            {
              v24 = (int *)(*(_QWORD *)(v17 + 32) + 4 * v20);
              v25 = (double *)(*(_QWORD *)(v17 + 8) + 8 * v20);
              do
              {
                v26 = *v25++;
                v27 = v26;
                v28 = *v24++;
                v22 = v22 + v27 * *(double *)(*a2 + 8 * v28);
                --v23;
              }
              while (v23);
            }
            v13 = -v22 / *(double *)(v15 + 24 * v14 + 16);
            if (v13 != 0.0)
            {
              v39 = *(int *)(v15 + 24 * v14 + 12);
              v40 = *(_QWORD *)(v19 + 8 * v39);
              v41 = *(_QWORD *)(v19 + (((v39 << 32) + 0x100000000) >> 29));
              v42 = v41 <= v40;
              v43 = v41 - v40;
              if (!v42)
              {
                v44 = *a2;
                v45 = (int *)(*(_QWORD *)(v17 + 32) + 4 * v40);
                v46 = (double *)(*(_QWORD *)(v17 + 8) + 8 * v40);
                do
                {
                  v47 = *v46++;
                  v48 = v47;
                  v49 = *v45++;
                  *(double *)(v44 + 8 * v49) = *(double *)(v44 + 8 * v49) + v13 * v48;
                  --v43;
                }
                while (v43);
              }
            }
            v9 = 1;
          }
          else
          {
            v29 = v21 - v20;
            if (v21 > v20)
            {
              v30 = (int *)(*(_QWORD *)(v17 + 32) + 4 * v20);
              v31 = (double *)(*(_QWORD *)(v17 + 8) + 8 * v20);
              do
              {
                v32 = *v31++;
                v33 = v32;
                v34 = *v30++;
                v22 = v22 + v33 * *(double *)(*a2 + 8 * v34);
                --v29;
              }
              while (v29);
            }
            v35 = -v22 / *(double *)(v15 + 24 * v14 + 16);
            if (v35 != 0.0)
            {
              v36 = *(int *)(v15 + 24 * v14 + 12);
              v37 = *(_QWORD *)(v19 + 8 * v36);
              v38 = *(_QWORD *)(v19 + (((v36 << 32) + 0x100000000) >> 29));
              if (v37 < v38)
              {
                do
                {
                  operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredColumnEntry>>::Add((uint64_t)a2, *(_DWORD *)(*(_QWORD *)(v17 + 32) + 4 * v37), v35 * *(double *)(*(_QWORD *)(v17 + 8) + 8 * v37));
                  ++v37;
                }
                while (v38 != v37);
                v5 = a2[4];
                v4 = (int *)a2[5];
              }
            }
            if ((int *)v5 == v4)
            {
              v9 = 1;
              v5 = (uint64_t)v4;
            }
            else
            {
              v9 = *(double *)a1 * (double)(int)((unint64_t)(a2[1] - *a2) >> 3) < (double)(unint64_t)(((uint64_t)v4 - v5) >> 2);
            }
          }
          v12 = v14 - 1;
        }
        while ((int)v14 > 0);
      }
      operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredRowEntry>>::ClearSparseMask((uint64_t)a2);
      v50 = a2[4];
      v51 = a2[5];
      if (v50 == v51
        || *(double *)a1 * (double)(int)((unint64_t)(a2[1] - *a2) >> 3) < (double)(unint64_t)((v51 - v50) >> 2))
      {
        operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredRowEntry>>::ClearSparseMask((uint64_t)a2);
        a2[5] = a2[4];
      }
    }
  }
  else
  {
    google::LogMessage::LogMessage((google::LogMessage *)v52, (google::glog_internal_namespace_ *)"./ortools/glop/rank_one_update.h", 165, 2);
    v10 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v52);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"y", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v52);
  }
}

void sub_22D9F0F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void operations_research::glop::BasisFactorization::RightSolve(operations_research::glop::BasisFactorization *this, operations_research::glop::ScatteredColumn *a2)
{
  int v4;
  double v5;
  int *v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  double v22;
  int *v23;
  double *v24;
  double v25;
  double v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  float64x2_t v34;
  float64x2_t *v35;
  unint64_t v36;
  float64x2_t *v37;
  float64x2_t v38;
  unint64_t v39;
  uint64_t v40;
  double *v41;
  double *v42;
  double v43;
  _BYTE v44[16];

  if (!a2)
  {
    google::LogMessage::LogMessage((google::LogMessage *)v44, (google::glog_internal_namespace_ *)"./ortools/glop/basis_representation.cc", 324, 2);
    v10 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v44);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"d", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v44);
    return;
  }
  v4 = **((_DWORD **)this + 58);
  if (v4)
  {
    v5 = (double)(int)((*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2) / (double)v4 + 1.0;
    *((double *)this + 579) = *((double *)this + 579)
                            + (double)*((uint64_t *)this + 61) * 0.000000002
                            + v5
                            * ((double)operations_research::glop::LuFactorization::NumberOfEntries((operations_research::glop::BasisFactorization *)((char *)this + 912))
                             * 0.000000002);
  }
  if (!*((_BYTE *)this + 864))
  {
    *((_QWORD *)a2 + 5) = *((_QWORD *)a2 + 4);
    operations_research::glop::LuFactorization::RightSolve((uint64_t)this + 912, (uint64_t **)a2);
    v12 = *((_QWORD *)this + 112);
    v13 = *((_QWORD *)this + 111);
    v14 = v12 - v13;
    if (v12 == v13)
      return;
    v15 = 0;
    v16 = v14 >> 3;
    v17 = *(_QWORD *)a2;
    if (v16 <= 1)
      v16 = 1;
    while (1)
    {
      v18 = *(_QWORD *)(v13 + 8 * v15);
      v19 = *(int *)(v18 + 8);
      v20 = *(double *)(v17 + 8 * v19);
      if (v20 == 0.0)
        goto LABEL_16;
      v21 = *(_QWORD *)(v18 + 56);
      v22 = v20 / *(double *)(v18 + 16);
      if (v21)
      {
        if (v21 >= 1)
        {
          v23 = *(int **)(v18 + 72);
          v24 = *(double **)(v18 + 80);
          do
          {
            v25 = *v24++;
            v26 = v25;
            v27 = *v23++;
            *(double *)(v17 + 8 * v27) = *(double *)(v17 + 8 * v27) - v26 * v22;
            --v21;
          }
          while (v21);
        }
        goto LABEL_15;
      }
      v28 = *(_QWORD *)(v18 + 24);
      v29 = *(_QWORD *)(v18 + 32) - v28;
      if ((int)(v29 >> 3) >= 1)
      {
        v30 = (v29 >> 3);
        if (v30 >= 4 && (v17 < v28 + 8 * v30 ? (v31 = v28 >= v17 + 8 * v30) : (v31 = 1), v31))
        {
          v32 = (v29 >> 3) & 3;
          v33 = v30 - v32;
          v34 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v22, 0);
          v35 = (float64x2_t *)(v28 + 16);
          v36 = v30 - v32;
          v37 = (float64x2_t *)(v17 + 16);
          do
          {
            v38 = vmlsq_f64(*v37, v34, *v35);
            v37[-1] = vmlsq_f64(v37[-1], v34, v35[-1]);
            *v37 = v38;
            v35 += 2;
            v37 += 2;
            v36 -= 4;
          }
          while (v36);
          if (!v32)
            goto LABEL_15;
        }
        else
        {
          v33 = 0;
        }
        v39 = v33 - v30;
        v40 = 8 * v33;
        v41 = (double *)(v17 + 8 * v33);
        v42 = (double *)(v28 + v40);
        do
        {
          v43 = *v42++;
          *v41 = *v41 - v43 * v22;
          ++v41;
          v31 = __CFADD__(v39++, 1);
        }
        while (!v31);
      }
LABEL_15:
      *(double *)(v17 + 8 * v19) = v22;
LABEL_16:
      if (++v15 == v16)
        return;
    }
  }
  operations_research::glop::LuFactorization::RightSolveLWithNonZeros((operations_research::glop::BasisFactorization *)((char *)this + 912), a2);
  operations_research::glop::RankOneUpdateFactorization::RightSolveWithNonZeros((operations_research::glop::BasisFactorization *)((char *)this + 480), a2);
  operations_research::glop::LuFactorization::RightSolveUWithNonZeros((operations_research::glop::BasisFactorization *)((char *)this + 912), (int **)a2);
  if (!*((_BYTE *)a2 + 24))
  {
    v6 = (int *)*((_QWORD *)a2 + 4);
    v7 = (char *)*((_QWORD *)a2 + 5);
    v8 = 126 - 2 * __clz((v7 - (char *)v6) >> 2);
    if (v7 == (char *)v6)
      v9 = 0;
    else
      v9 = v8;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::RowIndex_tag_,int> *,false>(v6, v7, (uint64_t)v44, v9, 1);
    *((_BYTE *)a2 + 24) = 1;
  }
}

void sub_22D9F123C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void operations_research::glop::RankOneUpdateFactorization::RightSolveWithNonZeros(operations_research::glop::RankOneUpdateFactorization *this, operations_research::glop::ScatteredColumn *a2)
{
  int *v4;
  int *v5;
  uint64_t v6;
  int *v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  int *v26;
  double *v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  double *v33;
  double v34;
  double v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  double *v48;
  double v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[16];

  if (!a2)
  {
    google::LogMessage::LogMessage((google::LogMessage *)v54, (google::glog_internal_namespace_ *)"./ortools/glop/rank_one_update.h", 199, 2);
    v11 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v54);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"d", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v54);
    return;
  }
  if (*((_QWORD *)a2 + 4) == *((_QWORD *)a2 + 5))
  {
    operations_research::glop::RankOneUpdateFactorization::RightSolve((uint64_t)this, (uint64_t *)a2);
    return;
  }
  operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredRowEntry>>::ClearSparseMask((uint64_t)a2);
  v5 = (int *)*((_QWORD *)a2 + 4);
  v4 = (int *)*((_QWORD *)a2 + 5);
  if (v5 == v4)
  {
    v9 = 1;
    v10 = *((_QWORD *)this + 3) - *((_QWORD *)this + 2);
    if (!v10)
      goto LABEL_36;
LABEL_11:
    v13 = 0;
    v14 = v10 / 24;
    if (v14 <= 1)
      v15 = 1;
    else
      v15 = v14;
    do
    {
      v17 = *((_QWORD *)this + 2);
      v18 = (int *)(v17 + 24 * v13);
      v19 = *(_QWORD *)v18;
      v20 = v18[3];
      v21 = *(_QWORD *)(*(_QWORD *)v18 + 56);
      v22 = *(_QWORD *)(v21 + 8 * v20);
      v23 = *(_QWORD *)(v21 + (((v20 << 32) + 0x100000000) >> 29));
      v24 = 0.0;
      if (v9)
      {
        v25 = v23 - v22;
        if (v23 > v22)
        {
          v26 = (int *)(*(_QWORD *)(v19 + 32) + 4 * v22);
          v27 = (double *)(*(_QWORD *)(v19 + 8) + 8 * v22);
          do
          {
            v28 = *v27++;
            v29 = v28;
            v30 = *v26++;
            v24 = v24 + v29 * *(double *)(*(_QWORD *)a2 + 8 * v30);
            --v25;
          }
          while (v25);
        }
        v16 = -v24 / *(double *)(v17 + 24 * v13 + 16);
        if (v16 != 0.0)
        {
          v41 = *(int *)(v17 + 24 * v13 + 8);
          v42 = *(_QWORD *)(v21 + 8 * v41);
          v43 = *(_QWORD *)(v21 + (((v41 << 32) + 0x100000000) >> 29));
          v44 = v43 <= v42;
          v45 = v43 - v42;
          if (!v44)
          {
            v46 = *(_QWORD *)a2;
            v47 = (int *)(*(_QWORD *)(v19 + 32) + 4 * v42);
            v48 = (double *)(*(_QWORD *)(v19 + 8) + 8 * v42);
            do
            {
              v49 = *v48++;
              v50 = v49;
              v51 = *v47++;
              *(double *)(v46 + 8 * v51) = *(double *)(v46 + 8 * v51) + v16 * v50;
              --v45;
            }
            while (v45);
          }
        }
        v9 = 1;
      }
      else
      {
        v31 = v23 - v22;
        if (v23 > v22)
        {
          v32 = (int *)(*(_QWORD *)(v19 + 32) + 4 * v22);
          v33 = (double *)(*(_QWORD *)(v19 + 8) + 8 * v22);
          do
          {
            v34 = *v33++;
            v35 = v34;
            v36 = *v32++;
            v24 = v24 + v35 * *(double *)(*(_QWORD *)a2 + 8 * v36);
            --v31;
          }
          while (v31);
        }
        v37 = -v24 / *(double *)(v17 + 24 * v13 + 16);
        if (v37 != 0.0)
        {
          v38 = *(int *)(v17 + 24 * v13 + 8);
          v39 = *(_QWORD *)(v21 + 8 * v38);
          v40 = *(_QWORD *)(v21 + (((v38 << 32) + 0x100000000) >> 29));
          if (v39 < v40)
          {
            do
            {
              operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredColumnEntry>>::Add((uint64_t)a2, *(_DWORD *)(*(_QWORD *)(v19 + 32) + 4 * v39), v37 * *(double *)(*(_QWORD *)(v19 + 8) + 8 * v39));
              ++v39;
            }
            while (v40 != v39);
            v5 = (int *)*((_QWORD *)a2 + 4);
            v4 = (int *)*((_QWORD *)a2 + 5);
          }
        }
        if (v5 == v4)
        {
          v9 = 1;
          v5 = v4;
        }
        else
        {
          v9 = *(double *)this * (double)(int)((*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3) < (double)(unint64_t)(v4 - v5);
        }
      }
      ++v13;
    }
    while (v13 != v15);
    goto LABEL_36;
  }
  v6 = *((_QWORD *)a2 + 7);
  v7 = (int *)*((_QWORD *)a2 + 4);
  do
  {
    v8 = *v7++;
    *(_QWORD *)(v6 + (((unint64_t)v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
  }
  while (v7 != v4);
  v9 = *(double *)this * (double)(int)((*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3) < (double)(unint64_t)(v4 - v5);
  v10 = *((_QWORD *)this + 3) - *((_QWORD *)this + 2);
  if (v10)
    goto LABEL_11;
LABEL_36:
  operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredRowEntry>>::ClearSparseMask((uint64_t)a2);
  v52 = *((_QWORD *)a2 + 4);
  v53 = *((_QWORD *)a2 + 5);
  if (v52 == v53
    || *(double *)this * (double)(int)((*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3) < (double)(unint64_t)((v53 - v52) >> 2))
  {
    operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredRowEntry>>::ClearSparseMask((uint64_t)a2);
    *((_QWORD *)a2 + 5) = *((_QWORD *)a2 + 4);
  }
}

void sub_22D9F15FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t operations_research::glop::BasisFactorization::RightSolveForTau(operations_research::glop::BasisFactorization *this, char **a2)
{
  int v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  double v16;
  int *v17;
  double *v18;
  double v19;
  double v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t v27;
  float64x2_t v28;
  float64x2_t *v29;
  unint64_t v30;
  float64x2_t *v31;
  float64x2_t v32;
  unint64_t v33;
  uint64_t v34;
  double *v35;
  double *v36;
  double v37;
  uint64_t v38;
  unint64_t v39;
  int *v40;
  int *v41;
  _QWORD *v42;
  unint64_t v43;
  int *v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  uint64_t v55;

  v4 = **((_DWORD **)this + 58);
  if (v4)
    *((double *)this + 579) = *((double *)this + 579)
                            + (double)*((uint64_t *)this + 61) * 0.000000002
                            + ((double)v4 / (double)v4 + 1.0)
                            * ((double)operations_research::glop::LuFactorization::NumberOfEntries((operations_research::glop::BasisFactorization *)((char *)this + 912))
                             * 0.000000002);
  if (*((_BYTE *)this + 864))
  {
    v5 = (void **)((char *)this + 568);
    if (*((_BYTE *)this + 648))
    {
      *((_BYTE *)this + 648) = 0;
      operations_research::glop::LuFactorization::RightSolveLWithPermutedInput((_BYTE *)this + 912, (uint64_t)a2, (uint64_t *)this + 71);
    }
    else
    {
      v38 = **((unsigned int **)this + 58);
      v39 = (int)v38;
      v40 = (int *)*((_QWORD *)this + 75);
      v41 = (int *)*((_QWORD *)this + 76);
      if (v40 == v41 || (double)(int)v38 * 0.05 <= (double)(unint64_t)(v41 - v40))
      {
        v55 = 0;
        v51 = v38 << 32;
        v52 = (char *)*((_QWORD *)this + 71);
        v53 = (uint64_t)(*((_QWORD *)this + 72) - (_QWORD)v52) >> 3;
        if ((int)v38 <= v53)
        {
          if ((int)v38 < v53)
            *((_QWORD *)this + 72) = &v52[8 * (int)v38];
        }
        else
        {
          std::vector<double>::__append((uint64_t)this + 568, (int)v38 - v53, &v55);
          v52 = (char *)*v5;
        }
        bzero(v52, v51 >> 29);
      }
      else
      {
        v42 = *v5;
        v43 = (char *)v41 - (char *)v40 - 4;
        v44 = (int *)*((_QWORD *)this + 75);
        if (v43 < 4)
          goto LABEL_57;
        v45 = (v43 >> 2) + 1;
        v44 = &v40[v45 & 0x7FFFFFFFFFFFFFFELL];
        v46 = v40 + 1;
        v47 = v45 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          v48 = *v46;
          v42[*(v46 - 1)] = 0;
          v42[v48] = 0;
          v46 += 2;
          v47 -= 2;
        }
        while (v47);
        if (v45 != (v45 & 0x7FFFFFFFFFFFFFFELL))
        {
LABEL_57:
          do
          {
            v49 = *v44++;
            v42[v49] = 0;
          }
          while (v44 != v41);
        }
        v55 = 0;
        v50 = (uint64_t)(*((_QWORD *)this + 72) - (_QWORD)v42) >> 3;
        if (v39 <= v50)
        {
          if (v39 < v50)
            *((_QWORD *)this + 72) = &v42[v39];
        }
        else
        {
          std::vector<double>::__append((uint64_t)this + 568, v39 - v50, &v55);
        }
      }
      *((_QWORD *)this + 76) = *((_QWORD *)this + 75);
      operations_research::glop::LuFactorization::RightSolveLForScatteredColumn((operations_research::glop::BasisFactorization *)((char *)this + 912), (const operations_research::glop::ScatteredColumn *)a2, (operations_research::glop::BasisFactorization *)((char *)this + 568));
    }
    operations_research::glop::RankOneUpdateFactorization::RightSolveWithNonZeros((operations_research::glop::BasisFactorization *)((char *)this + 480), (operations_research::glop::BasisFactorization *)((char *)this + 568));
    operations_research::glop::LuFactorization::RightSolveUWithNonZeros((operations_research::glop::BasisFactorization *)((char *)this + 912), (int **)this + 71);
    goto LABEL_52;
  }
  *((_QWORD *)this + 76) = *((_QWORD *)this + 75);
  if ((char **)((char *)this + 568) != a2)
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((_QWORD *)this + 71, *a2, a2[1], (a2[1] - *a2) >> 3);
  operations_research::glop::LuFactorization::RightSolve((uint64_t)this + 912, (uint64_t **)this + 71);
  v6 = *((_QWORD *)this + 112);
  v7 = *((_QWORD *)this + 111);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    v9 = 0;
    v10 = v8 >> 3;
    v11 = *((_QWORD *)this + 71);
    if (v10 <= 1)
      v10 = 1;
    do
    {
      v12 = *(_QWORD *)(v7 + 8 * v9);
      v13 = *(int *)(v12 + 8);
      v14 = *(double *)(v11 + 8 * v13);
      if (v14 == 0.0)
        goto LABEL_13;
      v15 = *(_QWORD *)(v12 + 56);
      v16 = v14 / *(double *)(v12 + 16);
      if (v15)
      {
        if (v15 >= 1)
        {
          v17 = *(int **)(v12 + 72);
          v18 = *(double **)(v12 + 80);
          do
          {
            v19 = *v18++;
            v20 = v19;
            v21 = *v17++;
            *(double *)(v11 + 8 * v21) = *(double *)(v11 + 8 * v21) - v20 * v16;
            --v15;
          }
          while (v15);
        }
        goto LABEL_12;
      }
      v22 = *(_QWORD *)(v12 + 24);
      v23 = *(_QWORD *)(v12 + 32) - v22;
      if ((int)(v23 >> 3) >= 1)
      {
        v24 = (v23 >> 3);
        if (v24 >= 4 && (v11 < v22 + 8 * v24 ? (v25 = v22 >= v11 + 8 * v24) : (v25 = 1), v25))
        {
          v26 = (v23 >> 3) & 3;
          v27 = v24 - v26;
          v28 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v16, 0);
          v29 = (float64x2_t *)(v22 + 16);
          v30 = v24 - v26;
          v31 = (float64x2_t *)(v11 + 16);
          do
          {
            v32 = vmlsq_f64(*v31, v28, *v29);
            v31[-1] = vmlsq_f64(v31[-1], v28, v29[-1]);
            *v31 = v32;
            v29 += 2;
            v31 += 2;
            v30 -= 4;
          }
          while (v30);
          if (!v26)
            goto LABEL_12;
        }
        else
        {
          v27 = 0;
        }
        v33 = v27 - v24;
        v34 = 8 * v27;
        v35 = (double *)(v11 + 8 * v27);
        v36 = (double *)(v22 + v34);
        do
        {
          v37 = *v36++;
          *v35 = *v35 - v37 * v16;
          ++v35;
          v25 = __CFADD__(v33++, 1);
        }
        while (!v25);
      }
LABEL_12:
      *(double *)(v11 + 8 * v13) = v16;
LABEL_13:
      ++v9;
    }
    while (v9 != v10);
  }
LABEL_52:
  *((_BYTE *)this + 649) = 1;
  return (uint64_t)this + 568;
}

void operations_research::glop::BasisFactorization::LeftSolveForUnitRow(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v6;
  int *v7;
  int *v8;
  char *v9;
  unint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  char *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unsigned int *v23;
  uint64_t v24;
  unint64_t v25;
  _DWORD *v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  unint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  _DWORD *v36;
  uint64_t v37;
  int *v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42[2];

  if (!a3)
  {
    google::LogMessage::LogMessage((google::LogMessage *)v42, (google::glog_internal_namespace_ *)"./ortools/glop/basis_representation.cc", 367, 2);
    v21 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v42);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"y", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v42);
    return;
  }
  v6 = **(_DWORD **)(a1 + 464);
  if (v6)
  {
    *(double *)(a1 + 4632) = *(double *)(a1 + 4632)
                           + (double)*(uint64_t *)(a1 + 488) * 0.000000002
                           + (1.0 / (double)v6 + 1.0)
                           * ((double)operations_research::glop::LuFactorization::NumberOfEntries((operations_research::glop::LuFactorization *)(a1 + 912))
                            * 0.000000002);
    v6 = **(_DWORD **)(a1 + 464);
  }
  v8 = *(int **)(a3 + 32);
  v7 = *(int **)(a3 + 40);
  if (v8 == v7 || (double)v6 * 0.05 <= (double)(unint64_t)(v7 - v8))
  {
    v42[0] = 0;
    v18 = (unint64_t)v6 << 32;
    v19 = *(char **)a3;
    v20 = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3;
    if (v6 <= v20)
    {
      if (v6 < v20)
        *(_QWORD *)(a3 + 8) = &v19[8 * v6];
    }
    else
    {
      std::vector<double>::__append(a3, v6 - v20, v42);
      v19 = *(char **)a3;
    }
    bzero(v19, v18 >> 29);
  }
  else
  {
    v9 = *(char **)a3;
    v10 = (char *)v7 - (char *)v8 - 4;
    v11 = *(int **)(a3 + 32);
    if (v10 < 4)
      goto LABEL_52;
    v12 = (v10 >> 2) + 1;
    v11 = &v8[v12 & 0x7FFFFFFFFFFFFFFELL];
    v13 = v8 + 1;
    v14 = v12 & 0x7FFFFFFFFFFFFFFELL;
    do
    {
      v15 = *v13;
      *(_QWORD *)&v9[8 * *(v13 - 1)] = 0;
      *(_QWORD *)&v9[8 * v15] = 0;
      v13 += 2;
      v14 -= 2;
    }
    while (v14);
    if (v12 != (v12 & 0x7FFFFFFFFFFFFFFELL))
    {
LABEL_52:
      do
      {
        v16 = *v11++;
        *(_QWORD *)&v9[8 * v16] = 0;
      }
      while (v11 != v7);
    }
    v42[0] = 0;
    v17 = (uint64_t)(*(_QWORD *)(a3 + 8) - (_QWORD)v9) >> 3;
    if (v6 <= v17)
    {
      if (v6 < v17)
        *(_QWORD *)(a3 + 8) = &v9[8 * v6];
    }
    else
    {
      std::vector<double>::__append(a3, v6 - v17, v42);
    }
  }
  v23 = *(unsigned int **)(a3 + 32);
  *(_QWORD *)(a3 + 40) = v23;
  if (*(_BYTE *)(a1 + 864))
  {
    v24 = *(unsigned int *)(*(_QWORD *)(a1 + 816) + 4 * (int)a2);
    if ((_DWORD)v24 == -1)
    {
      v27 = operations_research::glop::LuFactorization::LeftSolveUForUnitRow(a1 + 912, a2, a3);
      v28 = a1 + 656;
      if (*(_QWORD *)(a3 + 32) == *(_QWORD *)(a3 + 40))
        v29 = operations_research::glop::CompactSparseMatrix::AddDenseColumnPrefix(v28, (_QWORD *)a3, v27);
      else
        v29 = operations_research::glop::CompactSparseMatrix::AddDenseColumnWithNonZeros(v28, (_QWORD *)a3, (int **)(a3 + 32));
      *(_DWORD *)(*(_QWORD *)(a1 + 816) + 4 * (int)a2) = v29;
      operations_research::glop::RankOneUpdateFactorization::LeftSolveWithNonZeros(a1 + 480, (uint64_t *)a3);
      if (*(_BYTE *)(a1 + 649))
      {
LABEL_22:
        *(_WORD *)(a1 + 648) = operations_research::glop::LuFactorization::LeftSolveLWithNonZeros((_BYTE *)(a1 + 912), a3, (uint64_t *)(a1 + 568));
        if (*(_BYTE *)(a3 + 24))
          return;
LABEL_44:
        v38 = *(int **)(a3 + 32);
        v39 = *(char **)(a3 + 40);
        v40 = 126 - 2 * __clz((v39 - (char *)v38) >> 2);
        if (v39 == (char *)v38)
          v41 = 0;
        else
          v41 = v40;
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *,false>(v38, v39, (uint64_t)v42, v41, 1);
        *(_BYTE *)(a3 + 24) = 1;
        return;
      }
    }
    else
    {
      operations_research::glop::CompactSparseMatrix::ColumnCopyToClearedDenseColumnWithNonZeros((_QWORD *)(a1 + 656), v24, (_QWORD *)a3, a3 + 32);
      operations_research::glop::RankOneUpdateFactorization::LeftSolveWithNonZeros(a1 + 480, (uint64_t *)a3);
      if (*(_BYTE *)(a1 + 649))
        goto LABEL_22;
    }
    *(_BYTE *)(a1 + 648) = 0;
    operations_research::glop::LuFactorization::LeftSolveLWithNonZeros((_BYTE *)(a1 + 912), a3);
    *(_BYTE *)(a1 + 649) = 0;
    if (*(_BYTE *)(a3 + 24))
      return;
    goto LABEL_44;
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * (int)a2) = 0x3FF0000000000000;
  v25 = *(_QWORD *)(a3 + 48);
  if ((unint64_t)v23 >= v25)
  {
    v30 = v25 - (_QWORD)v23;
    v31 = v30 >> 1;
    if ((unint64_t)(v30 >> 1) <= 1)
      v31 = 1;
    v32 = (unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL;
    v33 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v32)
      v33 = v31;
    if (v33 >> 62)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v34 = v33;
    v35 = operator new(4 * v33);
    v36 = &v35[v34];
    *v35 = a2;
    v26 = v35 + 1;
    *(_QWORD *)(a3 + 32) = v35;
    *(_QWORD *)(a3 + 40) = v35 + 1;
    *(_QWORD *)(a3 + 48) = v36;
    if (v23)
      operator delete(v23);
  }
  else
  {
    *v23 = a2;
    v26 = v23 + 1;
  }
  *(_QWORD *)(a3 + 40) = v26;
  if ((int)(((*(_QWORD *)(a1 + 896) - *(_QWORD *)(a1 + 888)) >> 3) - 1) >= 0)
  {
    v37 = 8 * (((*(_QWORD *)(a1 + 896) - *(_QWORD *)(a1 + 888)) >> 3) - 1);
    do
    {
      operations_research::glop::EtaMatrix::SparseLeftSolve(*(_QWORD *)(*(_QWORD *)(a1 + 888) + v37), (uint64_t *)a3, a3 + 32);
      v37 -= 8;
    }
    while (v37 != -8);
  }
  operations_research::glop::LuFactorization::LeftSolve(a1 + 912, (_QWORD *)a3);
}

void sub_22D9F1D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void operations_research::glop::CompactSparseMatrix::ColumnCopyToClearedDenseColumnWithNonZeros(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v5;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _DWORD *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39[2];

  if (a3)
  {
    v5 = a3;
    v8 = *(int *)a1;
    v39[0] = 0;
    v9 = (uint64_t)(a3[1] - *a3) >> 3;
    if (v8 <= v9)
    {
      if (v8 < v9)
        a3[1] = *a3 + 8 * v8;
    }
    else
    {
      std::vector<double>::__append((uint64_t)a3, v8 - v9, v39);
    }
    v12 = *(char **)a4;
    *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
    v13 = a1[7];
    v14 = *(_QWORD *)(v13 + 8 * (int)a2);
    v15 = *(_QWORD *)(v13 + (((a2 << 32) + 0x100000000) >> 29));
    if (v14 < v15)
    {
      v37 = v15;
      while (1)
      {
        while (1)
        {
          v16 = *(int *)(a1[4] + 4 * v14);
          *(_QWORD *)(*v5 + 8 * v16) = *(_QWORD *)(a1[1] + 8 * v14);
          v17 = *(_QWORD *)(a4 + 16);
          if ((unint64_t)v12 >= v17)
            break;
          *(_DWORD *)v12 = v16;
          v12 += 4;
          *(_QWORD *)(a4 + 8) = v12;
          if (++v14 == v15)
            return;
        }
        v18 = v5;
        v19 = *(char **)a4;
        v20 = (uint64_t)&v12[-*(_QWORD *)a4];
        v21 = v20 >> 2;
        v22 = (v20 >> 2) + 1;
        if (v22 >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v23 = v17 - (_QWORD)v19;
        if (v23 >> 1 > v22)
          v22 = v23 >> 1;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
          v22 = 0x3FFFFFFFFFFFFFFFLL;
        v38 = v22;
        if (v22)
        {
          if (v22 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v24 = operator new(4 * v22);
          v25 = &v24[4 * v21];
          *v25 = v16;
          v26 = (uint64_t)(v25 + 1);
          if (v12 == v19)
          {
LABEL_30:
            v5 = v18;
            *(_QWORD *)a4 = v25;
            *(_QWORD *)(a4 + 8) = v26;
            *(_QWORD *)(a4 + 16) = &v24[4 * v38];
            if (!v19)
              goto LABEL_27;
LABEL_26:
            operator delete(v19);
            goto LABEL_27;
          }
        }
        else
        {
          v24 = 0;
          v25 = (_DWORD *)(4 * v21);
          *(_DWORD *)(4 * v21) = v16;
          v26 = 4 * v21 + 4;
          if (v12 == v19)
            goto LABEL_30;
        }
        v27 = v12 - 4 - v19;
        if (v27 < 0xBC
          || &v24[v20 - 4 - (v27 & 0xFFFFFFFFFFFFFFFCLL)] > &v24[v20 - 4]
          || &v12[-(v27 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v12 - 4
          || (unint64_t)(v12 - v24 - v20) < 0x20)
        {
          break;
        }
        v31 = (v27 >> 2) + 1;
        v32 = 4 * (v31 & 0x7FFFFFFFFFFFFFF8);
        v28 = &v12[-v32];
        v25 = (_DWORD *)((char *)v25 - v32);
        v33 = &v24[4 * v21 - 16];
        v34 = v12 - 16;
        v35 = v31 & 0x7FFFFFFFFFFFFFF8;
        v5 = v18;
        do
        {
          v36 = *(_OWORD *)v34;
          *(v33 - 1) = *((_OWORD *)v34 - 1);
          *v33 = v36;
          v33 -= 2;
          v34 -= 32;
          v35 -= 8;
        }
        while (v35);
        v29 = v38;
        if (v31 != (v31 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_24;
LABEL_25:
        *(_QWORD *)a4 = v25;
        *(_QWORD *)(a4 + 8) = v26;
        *(_QWORD *)(a4 + 16) = &v24[4 * v29];
        if (v19)
          goto LABEL_26;
LABEL_27:
        v15 = v37;
        *(_QWORD *)(a4 + 8) = v26;
        ++v14;
        v12 = (char *)v26;
        if (v14 == v37)
          return;
      }
      v28 = v12;
      v5 = v18;
      v29 = v38;
      do
      {
LABEL_24:
        v30 = *((_DWORD *)v28 - 1);
        v28 -= 4;
        *--v25 = v30;
      }
      while (v28 != v19);
      goto LABEL_25;
    }
  }
  else
  {
    google::LogMessage::LogMessage((google::LogMessage *)v39, (google::glog_internal_namespace_ *)"./ortools/lp_data/sparse.h", 439, 2);
    v10 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v39);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"dense_column", 12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v39);
  }
}

void sub_22D9F2070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void operations_research::glop::BasisFactorization::TemporaryLeftSolveForUnitRow(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v6;
  int *v7;
  int *v8;
  char *v9;
  unint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  char *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _BYTE *v23;
  int *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29[2];

  if (*(_DWORD *)(a1 + 872))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v29, (google::glog_internal_namespace_ *)"./ortools/glop/basis_representation.cc", 417);
    v28 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Check failed: IsRefactorized() ", 31);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v29);
  }
  if (a3)
  {
    v6 = **(_DWORD **)(a1 + 464);
    if (v6)
    {
      *(double *)(a1 + 4632) = *(double *)(a1 + 4632)
                             + (double)*(uint64_t *)(a1 + 488) * 0.000000002
                             + (1.0 / (double)v6 + 1.0)
                             * ((double)operations_research::glop::LuFactorization::NumberOfEntries((operations_research::glop::LuFactorization *)(a1 + 912))
                              * 0.000000002);
      v6 = **(_DWORD **)(a1 + 464);
    }
    v8 = *(int **)(a3 + 32);
    v7 = *(int **)(a3 + 40);
    if (v8 == v7 || (double)v6 * 0.05 <= (double)(unint64_t)(v7 - v8))
    {
      v29[0] = 0;
      v18 = (unint64_t)v6 << 32;
      v19 = *(char **)a3;
      v20 = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3;
      if (v6 <= v20)
      {
        if (v6 < v20)
          *(_QWORD *)(a3 + 8) = &v19[8 * v6];
      }
      else
      {
        std::vector<double>::__append(a3, v6 - v20, v29);
        v19 = *(char **)a3;
      }
      bzero(v19, v18 >> 29);
    }
    else
    {
      v9 = *(char **)a3;
      v10 = (char *)v7 - (char *)v8 - 4;
      v11 = *(int **)(a3 + 32);
      if (v10 < 4)
        goto LABEL_31;
      v12 = (v10 >> 2) + 1;
      v11 = &v8[v12 & 0x7FFFFFFFFFFFFFFELL];
      v13 = v8 + 1;
      v14 = v12 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        v15 = *v13;
        *(_QWORD *)&v9[8 * *(v13 - 1)] = 0;
        *(_QWORD *)&v9[8 * v15] = 0;
        v13 += 2;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x7FFFFFFFFFFFFFFELL))
      {
LABEL_31:
        do
        {
          v16 = *v11++;
          *(_QWORD *)&v9[8 * v16] = 0;
        }
        while (v11 != v7);
      }
      v29[0] = 0;
      v17 = (uint64_t)(*(_QWORD *)(a3 + 8) - (_QWORD)v9) >> 3;
      if (v6 <= v17)
      {
        if (v6 < v17)
          *(_QWORD *)(a3 + 8) = &v9[8 * v6];
      }
      else
      {
        std::vector<double>::__append(a3, v6 - v17, v29);
      }
    }
    *(_QWORD *)(a3 + 40) = *(_QWORD *)(a3 + 32);
    v23 = (_BYTE *)(a1 + 912);
    operations_research::glop::LuFactorization::LeftSolveUForUnitRow((uint64_t)v23, a2, a3);
    operations_research::glop::LuFactorization::LeftSolveLWithNonZeros(v23, a3);
    if (!*(_BYTE *)(a3 + 24))
    {
      v24 = *(int **)(a3 + 32);
      v25 = *(char **)(a3 + 40);
      v26 = 126 - 2 * __clz((v25 - (char *)v24) >> 2);
      if (v25 == (char *)v24)
        v27 = 0;
      else
        v27 = v26;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *,false>(v24, v25, (uint64_t)v29, v27, 1);
      *(_BYTE *)(a3 + 24) = 1;
    }
  }
  else
  {
    google::LogMessage::LogMessage((google::LogMessage *)v29, (google::glog_internal_namespace_ *)"./ortools/glop/basis_representation.cc", 419, 2);
    v21 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v29);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"y", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v29);
  }
}

void sub_22D9F2330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void sub_22D9F2344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void operations_research::glop::BasisFactorization::RightSolveForProblemColumn(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  double v8;
  uint64_t v9;
  int *v10;
  int *v11;
  int **v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  unint64_t v16;
  int *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  char *v43;
  int *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  double v59;
  int *v60;
  double *v61;
  double v62;
  double v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  BOOL v68;
  uint64_t v69;
  unint64_t v70;
  float64x2_t v71;
  float64x2_t *v72;
  unint64_t v73;
  float64x2_t *v74;
  float64x2_t v75;
  unint64_t v76;
  uint64_t v77;
  double *v78;
  double *v79;
  double v80;
  int *v81;
  char *v82;
  int v83;
  int *v84;
  char *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88[3];

  if (!a3)
  {
    google::LogMessage::LogMessage((google::LogMessage *)v88, (google::glog_internal_namespace_ *)"./ortools/glop/basis_representation.cc", 431, 2);
    v13 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v88);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"d", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v88);
    return;
  }
  v5 = *(_QWORD *)(a1 + 464);
  v6 = a2;
  v7 = a2 + 1;
  if (*(_DWORD *)v5)
  {
    v8 = (double)(int)(*(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7) - *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * a2))
       / (double)*(int *)v5
       + 1.0;
    *(double *)(a1 + 4632) = *(double *)(a1 + 4632)
                           + (double)*(uint64_t *)(a1 + 488) * 0.000000002
                           + v8
                           * ((double)operations_research::glop::LuFactorization::NumberOfEntries((operations_research::glop::LuFactorization *)(a1 + 912))
                            * 0.000000002);
    v9 = **(unsigned int **)(a1 + 464);
    v11 = *(int **)(a3 + 32);
    v10 = *(int **)(a3 + 40);
    v12 = (int **)(a3 + 32);
    if (v11 == v10)
      goto LABEL_15;
  }
  else
  {
    v9 = 0;
    v11 = *(int **)(a3 + 32);
    v10 = *(int **)(a3 + 40);
    v12 = (int **)(a3 + 32);
    if (v11 == v10)
    {
LABEL_15:
      v88[0] = 0;
      v24 = v9 << 32;
      v25 = *(char **)a3;
      v26 = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3;
      if ((int)v9 <= v26)
      {
        if ((int)v9 < v26)
          *(_QWORD *)(a3 + 8) = &v25[8 * (int)v9];
      }
      else
      {
        std::vector<double>::__append(a3, (int)v9 - v26, v88);
        v25 = *(char **)a3;
      }
      bzero(v25, v24 >> 29);
      goto LABEL_20;
    }
  }
  if ((double)(int)v9 * 0.05 <= (double)(unint64_t)(v10 - v11))
    goto LABEL_15;
  v15 = *(char **)a3;
  v16 = (char *)v10 - (char *)v11 - 4;
  v17 = v11;
  if (v16 < 4)
    goto LABEL_73;
  v18 = (v16 >> 2) + 1;
  v17 = &v11[v18 & 0x7FFFFFFFFFFFFFFELL];
  v19 = v11 + 1;
  v20 = v18 & 0x7FFFFFFFFFFFFFFELL;
  do
  {
    v21 = *v19;
    *(_QWORD *)&v15[8 * *(v19 - 1)] = 0;
    *(_QWORD *)&v15[8 * v21] = 0;
    v19 += 2;
    v20 -= 2;
  }
  while (v20);
  if (v18 != (v18 & 0x7FFFFFFFFFFFFFFELL))
  {
LABEL_73:
    do
    {
      v22 = *v17++;
      *(_QWORD *)&v15[8 * v22] = 0;
    }
    while (v17 != v10);
  }
  v88[0] = 0;
  v23 = (uint64_t)(*(_QWORD *)(a3 + 8) - (_QWORD)v15) >> 3;
  if ((int)v9 <= v23)
  {
    if ((int)v9 < v23)
      *(_QWORD *)(a3 + 8) = &v15[8 * (int)v9];
  }
  else
  {
    std::vector<double>::__append(a3, (int)v9 - v23, v88);
  }
LABEL_20:
  *(_QWORD *)(a3 + 40) = *(_QWORD *)(a3 + 32);
  if (*(_BYTE *)(a1 + 864))
  {
    v27 = *(_QWORD **)(a1 + 464);
    v28 = v27[7];
    v29 = *(_QWORD *)(v28 + 8 * v6);
    v30 = v27[4] + 4 * v29;
    v31 = v27[1] + 8 * v29;
    v88[0] = *(_QWORD *)(v28 + 8 * v7) - v29;
    v88[1] = v30;
    v88[2] = v31;
    operations_research::glop::LuFactorization::RightSolveLForColumnView((_BYTE *)(a1 + 912), v88, (_QWORD *)a3);
    operations_research::glop::RankOneUpdateFactorization::RightSolveWithNonZeros((operations_research::glop::RankOneUpdateFactorization *)(a1 + 480), (operations_research::glop::ScatteredColumn *)a3);
    v32 = *(_QWORD *)(a1 + 840);
    v33 = *(_QWORD *)(a1 + 848) - v32;
    if ((int)v6 >= (int)((unint64_t)v33 >> 2))
    {
      v34 = v33 >> 2;
      if (v7 <= v34)
      {
        if (v7 < v34)
          *(_QWORD *)(a1 + 848) = v32 + 4 * v7;
      }
      else
      {
        std::vector<int>::__append((std::vector<int> *)(a1 + 840), v7 - v34, &operations_research::glop::kInvalidCol);
      }
    }
    v81 = *(int **)(a3 + 32);
    v82 = *(char **)(a3 + 40);
    if (v81 == (int *)v82)
    {
      v83 = operations_research::glop::CompactSparseMatrix::AddDenseColumn(a1 + 736, (_QWORD *)a3);
    }
    else
    {
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::RowIndex_tag_,int> *,false>(v81, v82, (uint64_t)v88, 126 - 2 * __clz((v82 - (char *)v81) >> 2), 1);
      v83 = operations_research::glop::CompactSparseMatrix::AddDenseColumnWithNonZeros(a1 + 736, (_QWORD *)a3, v12);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 840) + 4 * v6) = v83;
    operations_research::glop::LuFactorization::RightSolveUWithNonZeros((operations_research::glop::LuFactorization *)(a1 + 912), (int **)a3);
    if (!*(_BYTE *)(a3 + 24))
    {
      v84 = *(int **)(a3 + 32);
      v85 = *(char **)(a3 + 40);
      v86 = 126 - 2 * __clz((v85 - (char *)v84) >> 2);
      if (v85 == (char *)v84)
        v87 = 0;
      else
        v87 = v86;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::RowIndex_tag_,int> *,false>(v84, v85, (uint64_t)v88, v87, 1);
      *(_BYTE *)(a3 + 24) = 1;
    }
    return;
  }
  v35 = *(_QWORD **)(a1 + 464);
  v36 = *(int *)v35;
  v88[0] = 0;
  v37 = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3;
  if (v36 <= v37)
  {
    if (v36 < v37)
      *(_QWORD *)(a3 + 8) = *(_QWORD *)a3 + 8 * v36;
  }
  else
  {
    std::vector<double>::__append(a3, v36 - v37, v88);
  }
  v38 = v35[7];
  v39 = *(_QWORD *)(v38 + 8 * v6);
  v40 = *(_QWORD *)(v38 + 8 * v7);
  v41 = v40 <= v39;
  v42 = v40 - v39;
  if (!v41)
  {
    v43 = *(char **)a3;
    v44 = (int *)(v35[4] + 4 * v39);
    v45 = (uint64_t *)(v35[1] + 8 * v39);
    do
    {
      v46 = *v45++;
      v47 = v46;
      v48 = *v44++;
      *(_QWORD *)&v43[8 * v48] = v47;
      --v42;
    }
    while (v42);
  }
  operations_research::glop::LuFactorization::RightSolve(a1 + 912, (uint64_t **)a3);
  v49 = *(_QWORD *)(a1 + 896);
  v50 = *(_QWORD *)(a1 + 888);
  v51 = v49 - v50;
  if (v49 != v50)
  {
    v52 = 0;
    v53 = v51 >> 3;
    v54 = *(_QWORD *)a3;
    if (v53 <= 1)
      v53 = 1;
    do
    {
      v55 = *(_QWORD *)(v50 + 8 * v52);
      v56 = *(int *)(v55 + 8);
      v57 = *(double *)(v54 + 8 * v56);
      if (v57 == 0.0)
        goto LABEL_36;
      v58 = *(_QWORD *)(v55 + 56);
      v59 = v57 / *(double *)(v55 + 16);
      if (v58)
      {
        if (v58 >= 1)
        {
          v60 = *(int **)(v55 + 72);
          v61 = *(double **)(v55 + 80);
          do
          {
            v62 = *v61++;
            v63 = v62;
            v64 = *v60++;
            *(double *)(v54 + 8 * v64) = *(double *)(v54 + 8 * v64) - v63 * v59;
            --v58;
          }
          while (v58);
        }
        goto LABEL_35;
      }
      v65 = *(_QWORD *)(v55 + 24);
      v66 = *(_QWORD *)(v55 + 32) - v65;
      if ((int)(v66 >> 3) >= 1)
      {
        v67 = (v66 >> 3);
        if (v67 >= 4 && (v54 < v65 + 8 * v67 ? (v68 = v65 >= v54 + 8 * v67) : (v68 = 1), v68))
        {
          v69 = (v66 >> 3) & 3;
          v70 = v67 - v69;
          v71 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v59, 0);
          v72 = (float64x2_t *)(v65 + 16);
          v73 = v67 - v69;
          v74 = (float64x2_t *)(v54 + 16);
          do
          {
            v75 = vmlsq_f64(*v74, v71, *v72);
            v74[-1] = vmlsq_f64(v74[-1], v71, v72[-1]);
            *v74 = v75;
            v72 += 2;
            v74 += 2;
            v73 -= 4;
          }
          while (v73);
          if (!v69)
            goto LABEL_35;
        }
        else
        {
          v70 = 0;
        }
        v76 = v70 - v67;
        v77 = 8 * v70;
        v78 = (double *)(v54 + 8 * v70);
        v79 = (double *)(v65 + v77);
        do
        {
          v80 = *v79++;
          *v78 = *v78 - v80 * v59;
          ++v78;
          v68 = __CFADD__(v76++, 1);
        }
        while (!v68);
      }
LABEL_35:
      *(double *)(v54 + 8 * v56) = v59;
LABEL_36:
      ++v52;
    }
    while (v52 != v53);
  }
}

void sub_22D9F2890(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void operations_research::glop::BasisFactorization::RightSolveSquaredNorm(uint64_t a1, unint64_t *a2)
{
  int v4;
  double v5;

  v4 = **(_DWORD **)(a1 + 464);
  if (v4)
  {
    v5 = (double)*(int *)a2 / (double)v4 + 1.0;
    *(double *)(a1 + 4632) = *(double *)(a1 + 4632)
                           + (double)*(uint64_t *)(a1 + 488) * 0.000000002
                           + v5
                           * ((double)operations_research::glop::LuFactorization::NumberOfEntries((operations_research::glop::LuFactorization *)(a1 + 912))
                            * 0.000000002);
  }
  operations_research::glop::LuFactorization::RightSolveSquaredNorm(a1 + 912, a2);
}

void operations_research::glop::BasisFactorization::DualEdgeSquaredNorm(uint64_t a1, int a2)
{
  int v4;

  v4 = **(_DWORD **)(a1 + 464);
  if (v4)
    *(double *)(a1 + 4632) = *(double *)(a1 + 4632)
                           + (double)*(uint64_t *)(a1 + 488) * 0.000000002
                           + (1.0 / (double)v4 + 1.0)
                           * ((double)operations_research::glop::LuFactorization::NumberOfEntries((operations_research::glop::LuFactorization *)(a1 + 912))
                            * 0.000000002);
  operations_research::glop::LuFactorization::DualEdgeSquaredNorm(a1 + 912, a2);
}

double operations_research::glop::BasisFactorization::ComputeInfinityNormConditionNumberUpperBound(operations_research::glop::BasisFactorization *this)
{
  _QWORD *v1;
  unint64_t v2;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  double result;
  double v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  _QWORD v36[2];

  v1 = (_QWORD *)*((_QWORD *)this + 58);
  v2 = *(unsigned int *)v1;
  if ((int)v2 < 1)
    return 1.0;
  v4 = (int *)**((_QWORD **)this + 59);
  v5 = v1[7];
  v6 = *v4;
  v7 = *(_QWORD *)(v5 + 8 * v6);
  if (*(_QWORD *)(v5 + (((v6 << 32) + 0x100000000) >> 29)) - v7 != 1)
    goto LABEL_16;
  v8 = v1[1];
  v9 = v1[4];
  if (*(_DWORD *)(v9 + 4 * v7) || *(double *)(v8 + 8 * v7) != 1.0)
    goto LABEL_16;
  v11 = 1;
  do
  {
    v12 = v11;
    if (v2 == v11)
      break;
    v13 = v4[v11];
    v14 = *(_QWORD *)(v5 + 8 * v13);
    if (*(_QWORD *)(v5 + (((v13 << 32) + 0x100000000) >> 29)) - v14 != 1)
      break;
    v15 = *(double *)(v8 + 8 * v14);
    v16 = *(unsigned int *)(v9 + 4 * v14);
    v11 = v12 + 1;
  }
  while (v12 == v16 && v15 == 1.0);
  result = 1.0;
  if (v12 < v2)
  {
LABEL_16:
    v19 = 1.0;
    *((double *)this + 579) = *((double *)this + 579)
                            + (double)*((uint64_t *)this + 61) * 0.000000002
                            + ((double)(int)v2 / (double)(int)v2 + 1.0)
                            * ((double)operations_research::glop::LuFactorization::NumberOfEntries((operations_research::glop::BasisFactorization *)((char *)this + 912))
                             * 0.000000002);
    v20 = (_QWORD *)*((_QWORD *)this + 58);
    v21 = *(unsigned int *)v20;
    if ((int)v21 >= 1)
    {
      v22 = (_QWORD *)*((_QWORD *)this + 59);
      v23 = v20[7];
      v24 = *(int *)*v22;
      v25 = *(_QWORD *)(v23 + 8 * v24);
      if (*(_QWORD *)(v23 + (((v24 << 32) + 0x100000000) >> 29)) - v25 != 1)
        goto LABEL_31;
      v26 = v20[1];
      v27 = v20[4];
      if (*(_DWORD *)(v27 + 4 * v25) || *(double *)(v26 + 8 * v25) != 1.0)
        goto LABEL_31;
      v29 = 1;
      do
      {
        v30 = v29;
        if (v21 == v29)
          break;
        v31 = *(int *)(*v22 + 4 * v29);
        v32 = *(_QWORD *)(v23 + 8 * v31);
        if (*(_QWORD *)(v23 + (((v31 << 32) + 0x100000000) >> 29)) - v32 != 1)
          break;
        v33 = *(double *)(v26 + 8 * v32);
        v34 = *(unsigned int *)(v27 + 4 * v32);
        v29 = v30 + 1;
      }
      while (v30 == v34 && v33 == 1.0);
      v19 = 1.0;
      if (v30 < v21)
      {
LABEL_31:
        v36[0] = *((_QWORD *)this + 58);
        v36[1] = v22;
        v19 = operations_research::glop::CompactSparseMatrixView::ComputeInfinityNorm((operations_research::glop::CompactSparseMatrixView *)v36);
      }
    }
    return v19
         * operations_research::glop::LuFactorization::ComputeInverseInfinityNormUpperBound((operations_research::glop::BasisFactorization *)((char *)this + 912));
  }
  return result;
}

double operations_research::glop::BasisFactorization::DeterministicTime(operations_research::glop::BasisFactorization *this)
{
  return *((double *)this + 579);
}

_QWORD *std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 61)
      goto LABEL_22;
    v10 = v8 >> 2;
    if (v8 >> 2 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 61)
LABEL_22:
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v13 = v12;
    result = operator new(8 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 3;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[8 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

operations_research::glop::BasisFactorization::Stats *operations_research::glop::BasisFactorization::Stats::Stats(operations_research::glop::BasisFactorization::Stats *this)
{
  void *__p;
  __int128 v4;

  strcpy((char *)this, "BasisFactorization");
  *((_BYTE *)this + 23) = 18;
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = (char *)this + 64;
  __p = operator new(0x20uLL);
  v4 = xmmword_22DCE6650;
  strcpy((char *)__p, "refactorization_interval");
  *(_QWORD *)operations_research::DistributionStat::DistributionStat((operations_research::glop::BasisFactorization::Stats *)((char *)this + 80), (__int128 *)&__p, this) = &unk_24F987D30;
  if (SHIBYTE(v4) < 0)
    operator delete(__p);
  return this;
}

void sub_22D9F2E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  operations_research::StatsGroup *v15;

  if (a15 < 0)
  {
    operator delete(__p);
    operations_research::StatsGroup::~StatsGroup(v15);
    _Unwind_Resume(a1);
  }
  operations_research::StatsGroup::~StatsGroup(v15);
  _Unwind_Resume(a1);
}

void operations_research::glop::LuFactorization::~LuFactorization(operations_research::glop::LuFactorization *this)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  operations_research::glop::Markowitz::~Markowitz((operations_research::glop::LuFactorization *)((char *)this + 1880));
  operations_research::glop::GlopParameters::~GlopParameters((operations_research::glop::LuFactorization *)((char *)this + 1584));
  *((_QWORD *)this + 188) = off_24F97FEB0;
  if (*((char *)this + 1535) < 0)
  {
    operator delete(*((void **)this + 189));
    *((_QWORD *)this + 178) = off_24F97FEB0;
    if ((*((char *)this + 1455) & 0x80000000) == 0)
    {
LABEL_3:
      operations_research::StatsGroup::~StatsGroup((operations_research::glop::LuFactorization *)((char *)this + 1344));
      v2 = (void *)*((_QWORD *)this + 165);
      if (!v2)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    *((_QWORD *)this + 178) = off_24F97FEB0;
    if ((*((char *)this + 1455) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete(*((void **)this + 179));
  operations_research::StatsGroup::~StatsGroup((operations_research::glop::LuFactorization *)((char *)this + 1344));
  v2 = (void *)*((_QWORD *)this + 165);
  if (v2)
  {
LABEL_4:
    *((_QWORD *)this + 166) = v2;
    operator delete(v2);
  }
LABEL_5:
  v3 = (void *)*((_QWORD *)this + 162);
  if (v3)
  {
    *((_QWORD *)this + 163) = v3;
    operator delete(v3);
  }
  v4 = *((_QWORD *)this + 156);
  *((_QWORD *)this + 156) = 0;
  if (v4)
    MEMORY[0x22E31DF60](v4, 0x1000C8077774924);
  v5 = (void *)*((_QWORD *)this + 153);
  if (v5)
  {
    *((_QWORD *)this + 154) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 150);
  if (v6)
  {
    *((_QWORD *)this + 151) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 147);
  if (v7)
  {
    *((_QWORD *)this + 148) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 144);
  if (v8)
  {
    *((_QWORD *)this + 145) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 141);
  if (v9)
  {
    *((_QWORD *)this + 142) = v9;
    operator delete(v9);
  }
  operations_research::glop::TriangularMatrix::~TriangularMatrix((operations_research::glop::LuFactorization *)((char *)this + 848));
  operations_research::glop::TriangularMatrix::~TriangularMatrix((operations_research::glop::LuFactorization *)((char *)this + 568));
  operations_research::glop::TriangularMatrix::~TriangularMatrix((operations_research::glop::LuFactorization *)((char *)this + 288));
  operations_research::glop::TriangularMatrix::~TriangularMatrix((operations_research::glop::LuFactorization *)((char *)this + 8));
}

void operations_research::glop::Markowitz::~Markowitz(operations_research::glop::Markowitz *this)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;

  operations_research::glop::GlopParameters::~GlopParameters((operations_research::glop::Markowitz *)((char *)this + 1544));
  v2 = (void *)*((_QWORD *)this + 190);
  if (v2)
  {
    *((_QWORD *)this + 191) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 187);
  if (v3)
  {
    *((_QWORD *)this + 188) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 184);
  if (v4)
  {
    *((_QWORD *)this + 185) = v4;
    operator delete(v4);
  }
  v5 = *((_QWORD *)this + 179);
  if (v5)
  {
    v6 = *((_QWORD *)this + 180);
    v7 = (void *)*((_QWORD *)this + 179);
    if (v6 != v5)
    {
      v8 = *((_QWORD *)this + 180);
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v6 - 16) = v9;
          operator delete(v9);
        }
        v6 = v8;
      }
      while (v8 != v5);
      v7 = (void *)*((_QWORD *)this + 179);
    }
    *((_QWORD *)this + 180) = v5;
    operator delete(v7);
  }
  v11 = (void *)*((_QWORD *)this + 176);
  if (v11)
  {
    *((_QWORD *)this + 177) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 173);
  if (v12)
  {
    *((_QWORD *)this + 174) = v12;
    operator delete(v12);
  }
  operations_research::glop::MatrixNonZeroPattern::~MatrixNonZeroPattern((operations_research::glop::Markowitz *)((char *)this + 1232));
  v13 = (void *)*((_QWORD *)this + 151);
  if (v13)
    operator delete(v13);
  operations_research::glop::TriangularMatrix::~TriangularMatrix((operations_research::glop::Markowitz *)((char *)this + 928));
  operations_research::glop::TriangularMatrix::~TriangularMatrix((operations_research::glop::Markowitz *)((char *)this + 648));
  v14 = (_QWORD *)*((_QWORD *)this + 78);
  if (v14)
  {
    v15 = (_QWORD *)*((_QWORD *)this + 79);
    v16 = (void *)*((_QWORD *)this + 78);
    if (v15 != v14)
    {
      do
      {
        v18 = *(v15 - 6);
        v15 -= 6;
        v17 = v18;
        *v15 = 0;
        if (v18)
          MEMORY[0x22E31DF60](v17, 0x1000C8077774924);
      }
      while (v15 != v14);
      v16 = (void *)*((_QWORD *)this + 78);
    }
    *((_QWORD *)this + 79) = v14;
    operator delete(v16);
  }
  v19 = (void *)*((_QWORD *)this + 75);
  if (v19)
  {
    *((_QWORD *)this + 76) = v19;
    operator delete(v19);
  }
  v20 = (void *)*((_QWORD *)this + 72);
  if (v20)
  {
    *((_QWORD *)this + 73) = v20;
    operator delete(v20);
  }
  v21 = *((_QWORD *)this + 66);
  *((_QWORD *)this + 66) = 0;
  if (v21)
    MEMORY[0x22E31DF60](v21, 0x1000C8077774924);
  v22 = (_QWORD *)*((_QWORD *)this + 63);
  if (v22)
  {
    v23 = (_QWORD *)*((_QWORD *)this + 64);
    v24 = (void *)*((_QWORD *)this + 63);
    if (v23 != v22)
    {
      do
      {
        v26 = *(v23 - 6);
        v23 -= 6;
        v25 = v26;
        *v23 = 0;
        if (v26)
          MEMORY[0x22E31DF60](v25, 0x1000C8077774924);
      }
      while (v23 != v22);
      v24 = (void *)*((_QWORD *)this + 63);
    }
    *((_QWORD *)this + 64) = v22;
    operator delete(v24);
  }
  v27 = (void *)*((_QWORD *)this + 60);
  if (v27)
  {
    *((_QWORD *)this + 61) = v27;
    operator delete(v27);
  }
  v28 = (void *)*((_QWORD *)this + 57);
  if (v28)
  {
    *((_QWORD *)this + 58) = v28;
    operator delete(v28);
  }
  v29 = *((_QWORD *)this + 51);
  *((_QWORD *)this + 51) = 0;
  if (v29)
    MEMORY[0x22E31DF60](v29, 0x1000C8077774924);
  *((_QWORD *)this + 40) = off_24F97FEB0;
  if (*((char *)this + 351) < 0)
  {
    operator delete(*((void **)this + 41));
    *((_QWORD *)this + 30) = off_24F97FEB0;
    if ((*((char *)this + 271) & 0x80000000) == 0)
    {
LABEL_51:
      *((_QWORD *)this + 20) = off_24F97FEB0;
      if ((*((char *)this + 191) & 0x80000000) == 0)
        goto LABEL_52;
LABEL_57:
      operator delete(*((void **)this + 21));
      *((_QWORD *)this + 10) = off_24F97FEB0;
      if ((*((char *)this + 111) & 0x80000000) == 0)
        goto LABEL_53;
LABEL_58:
      operator delete(*((void **)this + 11));
      operations_research::StatsGroup::~StatsGroup(this);
      return;
    }
  }
  else
  {
    *((_QWORD *)this + 30) = off_24F97FEB0;
    if ((*((char *)this + 271) & 0x80000000) == 0)
      goto LABEL_51;
  }
  operator delete(*((void **)this + 31));
  *((_QWORD *)this + 20) = off_24F97FEB0;
  if (*((char *)this + 191) < 0)
    goto LABEL_57;
LABEL_52:
  *((_QWORD *)this + 10) = off_24F97FEB0;
  if (*((char *)this + 111) < 0)
    goto LABEL_58;
LABEL_53:
  operations_research::StatsGroup::~StatsGroup(this);
}

void operations_research::glop::MatrixNonZeroPattern::~MatrixNonZeroPattern(operations_research::glop::MatrixNonZeroPattern *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  char v11;

  v2 = (void *)*((_QWORD *)this + 15);
  if (v2)
  {
    *((_QWORD *)this + 16) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 12);
  if (v3)
    operator delete(v3);
  v4 = (void *)*((_QWORD *)this + 9);
  if (v4)
    operator delete(v4);
  v5 = (void *)*((_QWORD *)this + 6);
  if (v5)
  {
    *((_QWORD *)this + 7) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 3);
  if (v6)
  {
    *((_QWORD *)this + 4) = v6;
    operator delete(v6);
  }
  v7 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v8 = *((_QWORD *)this + 1);
    v9 = *(void **)this;
    if (v8 != v7)
    {
      v10 = *((_QWORD *)this + 1);
      do
      {
        v11 = *(_BYTE *)(v10 - 32);
        v10 -= 32;
        if ((v11 & 1) != 0)
          operator delete(*(void **)(v8 - 24));
        v8 = v10;
      }
      while (v10 != v7);
      v9 = *(void **)this;
    }
    *((_QWORD *)this + 1) = v7;
    operator delete(v9);
  }
}

void operations_research::glop::TriangularMatrix::~TriangularMatrix(operations_research::glop::TriangularMatrix *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v2 = (void *)*((_QWORD *)this + 32);
  if (v2)
  {
    *((_QWORD *)this + 33) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 29);
  if (v3)
    operator delete(v3);
  v4 = (void *)*((_QWORD *)this + 26);
  if (v4)
  {
    *((_QWORD *)this + 27) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 23);
  if (v5)
  {
    *((_QWORD *)this + 24) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 20);
  if (v6)
  {
    *((_QWORD *)this + 21) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 17);
  if (v7)
  {
    *((_QWORD *)this + 18) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 14);
  if (v8)
    operator delete(v8);
  v9 = (void *)*((_QWORD *)this + 10);
  if (v9)
  {
    *((_QWORD *)this + 11) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 7);
  if (v10)
  {
    *((_QWORD *)this + 8) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 4);
  if (v11)
  {
    *((_QWORD *)this + 5) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 1);
  if (v12)
  {
    *((_QWORD *)this + 2) = v12;
    operator delete(v12);
  }
}

void operations_research::glop::RankOneUpdateFactorization::LeftSolve(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  double v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  BOOL v13;
  uint64_t v14;
  int *v15;
  double *v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  double *v28;
  double v29;
  double v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _BYTE v34[16];

  if (a2)
  {
    v2 = *(_QWORD *)(a1 + 16);
    v3 = -1431655765 * ((unint64_t)(*(_QWORD *)(a1 + 24) - v2) >> 3) - 1;
    if ((v3 & 0x80000000) == 0)
    {
      do
      {
        v6 = (int *)(v2 + 24 * v3);
        v7 = *(_QWORD *)v6;
        v8 = v6[2];
        v9 = *(_QWORD *)(*(_QWORD *)v6 + 56);
        v10 = *(_QWORD *)(v9 + 8 * v8);
        v11 = *(_QWORD *)(v9 + (((v8 << 32) + 0x100000000) >> 29));
        v12 = 0.0;
        v13 = v11 <= v10;
        v14 = v11 - v10;
        if (!v13)
        {
          v15 = (int *)(*(_QWORD *)(v7 + 32) + 4 * v10);
          v16 = (double *)(*(_QWORD *)(v7 + 8) + 8 * v10);
          do
          {
            v17 = *v16++;
            v18 = v17;
            v19 = *v15++;
            v12 = v12 + v18 * *(double *)(*a2 + 8 * v19);
            --v14;
          }
          while (v14);
        }
        v4 = v3;
        v5 = -v12 / *(double *)(v2 + 24 * v3 + 16);
        if (v5 != 0.0)
        {
          v20 = *(int *)(v2 + 24 * v3 + 12);
          v21 = *(_QWORD *)(v9 + 8 * v20);
          v22 = *(_QWORD *)(v9 + (((v20 << 32) + 0x100000000) >> 29));
          v13 = v22 <= v21;
          v23 = v22 - v21;
          if (!v13)
          {
            v24 = *(_QWORD *)(v7 + 8);
            v25 = *(_QWORD *)(v7 + 32);
            v26 = *a2;
            v27 = (int *)(v25 + 4 * v21);
            v28 = (double *)(v24 + 8 * v21);
            do
            {
              v29 = *v28++;
              v30 = v29;
              v31 = *v27++;
              *(double *)(v26 + 8 * v31) = *(double *)(v26 + 8 * v31) + v5 * v30;
              --v23;
            }
            while (v23);
          }
        }
        v3 = v4 - 1;
      }
      while (v4 > 0);
    }
  }
  else
  {
    google::LogMessage::LogMessage((google::LogMessage *)v34, (google::glog_internal_namespace_ *)"./ortools/glop/rank_one_update.h", 156, 2);
    v32 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v34);
    v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"y", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v34);
  }
}

void sub_22D9F351C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredRowEntry>>::ClearSparseMask(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  int *v6;
  int *v7;
  uint64_t v8;
  int v9;
  char v10;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  if (v2 == v3)
  {
    v5 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
    goto LABEL_8;
  }
  v4 = (double)(unint64_t)((v3 - v2) >> 2);
  v5 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if ((double)(int)((unint64_t)v5 >> 3) * 0.8 < v4)
  {
LABEL_8:
    v10 = 0;
    std::vector<BOOL>::assign((char **)(a1 + 56), (int)(v5 >> 3), &v10);
    return;
  }
  std::vector<BOOL>::resize(a1 + 56, (int)(v5 >> 3), 0);
  v6 = *(int **)(a1 + 32);
  v7 = *(int **)(a1 + 40);
  if (v6 != v7)
  {
    v8 = *(_QWORD *)(a1 + 56);
    do
    {
      v9 = *v6++;
      *(_QWORD *)(v8 + (((unint64_t)v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v9);
    }
    while (v6 != v7);
  }
}

void operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredColumnEntry>>::Add(uint64_t a1, int a2, double a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _DWORD *v18;
  char *v19;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  int v29;

  *(double *)(*(_QWORD *)a1 + 8 * a2) = *(double *)(*(_QWORD *)a1 + 8 * a2) + a3;
  v3 = *(_QWORD *)(a1 + 56);
  v4 = (unint64_t)a2 >> 6;
  v5 = *(_QWORD *)(v3 + 8 * v4);
  if (a3 != 0.0 && (v5 & (1 << a2)) == 0)
  {
    *(_QWORD *)(v3 + 8 * v4) = v5 | (1 << a2);
    v10 = *(char **)(a1 + 40);
    v9 = *(_QWORD *)(a1 + 48);
    if ((unint64_t)v10 < v9)
    {
      *(_DWORD *)v10 = a2;
      v11 = (uint64_t)(v10 + 4);
LABEL_27:
      *(_QWORD *)(a1 + 40) = v11;
      *(_BYTE *)(a1 + 24) = 0;
      return;
    }
    v12 = *(char **)(a1 + 32);
    v13 = (v10 - v12) >> 2;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v15 = v9 - (_QWORD)v12;
    if (v15 >> 1 > v14)
      v14 = v15 >> 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
      v16 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v17 = operator new(4 * v16);
      v18 = &v17[4 * v13];
      v19 = &v17[4 * v16];
      *v18 = a2;
      v11 = (uint64_t)(v18 + 1);
      v20 = v10 - v12;
      if (v10 == v12)
        goto LABEL_25;
    }
    else
    {
      v17 = 0;
      v18 = (_DWORD *)(4 * v13);
      v19 = 0;
      *(_DWORD *)(4 * v13) = a2;
      v11 = 4 * v13 + 4;
      v20 = v10 - v12;
      if (v10 == v12)
      {
LABEL_25:
        *(_QWORD *)(a1 + 32) = v18;
        *(_QWORD *)(a1 + 40) = v11;
        *(_QWORD *)(a1 + 48) = v19;
        if (v12)
          operator delete(v12);
        goto LABEL_27;
      }
    }
    v21 = v20 - 4;
    if (v21 < 0x2C)
      goto LABEL_32;
    if ((unint64_t)(v12 - v17) < 0x20)
      goto LABEL_32;
    v22 = (v21 >> 2) + 1;
    v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
    v24 = &v10[-v23];
    v18 = (_DWORD *)((char *)v18 - v23);
    v25 = &v17[4 * v13 - 16];
    v26 = v10 - 16;
    v27 = v22 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v28 = *(_OWORD *)v26;
      *(v25 - 1) = *((_OWORD *)v26 - 1);
      *v25 = v28;
      v25 -= 2;
      v26 -= 32;
      v27 -= 8;
    }
    while (v27);
    v10 = v24;
    if (v22 != (v22 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_32:
      do
      {
        v29 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *--v18 = v29;
      }
      while (v10 != v12);
    }
    goto LABEL_25;
  }
}

void std::vector<BOOL>::resize(uint64_t a1, unint64_t a2, size_t __len)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void *__dst;
  __int128 v23;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = a2 - v4;
  if (a2 <= v4)
  {
    *(_QWORD *)(a1 + 8) = a2;
    return;
  }
  v6 = __len;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = v7 << 6;
  if (v7 << 6 < v5 || v4 > (v7 << 6) - v5)
  {
    __dst = 0;
    v23 = 0uLL;
    if ((a2 & 0x8000000000000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v10 = v7 << 7;
    if (v10 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0))
      v10 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
    if (v8 <= 0x3FFFFFFFFFFFFFFELL)
      v11 = v10;
    else
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    std::vector<BOOL>::reserve((uint64_t)&__dst, v11);
    v12 = *(void **)a1;
    v13 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)&v23 = v13 + v5;
    v15 = __dst;
    if (v13 < 1)
    {
      LODWORD(v16) = 0;
    }
    else
    {
      v14 = (unint64_t)v13 >> 6;
      if ((unint64_t)v13 >= 0x40)
        memmove(__dst, v12, 8 * v14);
      v15 += v14;
      v16 = v13 & 0x3F;
      if (v16)
        *v15 = *v15 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v16) | *((_QWORD *)v12 + v14) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v16);
      v12 = *(void **)a1;
    }
    *(_QWORD *)a1 = __dst;
    __dst = v12;
    v17 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v23;
    v23 = v17;
    if (v12)
      operator delete(v12);
  }
  else
  {
    v15 = (_QWORD *)(*(_QWORD *)a1 + 8 * (v4 >> 6));
    v16 = *(_QWORD *)(a1 + 8) & 0x3FLL;
    *(_QWORD *)(a1 + 8) = a2;
  }
  if (v5)
  {
    if (v6)
    {
      if ((_DWORD)v16)
      {
        if ((64 - v16) >= v5)
          v18 = v5;
        else
          v18 = (64 - v16);
        *v15++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v16 - v18)) & (-1 << v16);
        v5 -= v18;
      }
      v19 = v5 >> 6;
      if (v5 >= 0x40)
        memset(v15, 255, 8 * (v5 >> 6));
      if ((v5 & 0x3F) != 0)
      {
        v20 = v15[v19] | (0xFFFFFFFFFFFFFFFFLL >> -(v5 & 0x3F));
LABEL_43:
        v15[v19] = v20;
      }
    }
    else
    {
      if ((_DWORD)v16)
      {
        if ((64 - v16) >= v5)
          v21 = v5;
        else
          v21 = (64 - v16);
        *v15++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v16 - v21)) & (-1 << v16));
        v5 -= v21;
      }
      v19 = v5 >> 6;
      if (v5 >= 0x40)
        bzero(v15, 8 * (v5 >> 6));
      if ((v5 & 0x3F) != 0)
      {
        v20 = v15[v19] & ~(0xFFFFFFFFFFFFFFFFLL >> -(v5 & 0x3F));
        goto LABEL_43;
      }
    }
  }
}

void sub_22D9F3A14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::glop::RankOneUpdateFactorization::RightSolve(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  double v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  BOOL v15;
  uint64_t v16;
  int *v17;
  double *v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  double *v30;
  double v31;
  double v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _BYTE v36[16];

  if (a2)
  {
    v2 = *(_QWORD *)(a1 + 16);
    v3 = *(_QWORD *)(a1 + 24);
    v4 = v3 - v2;
    if (v3 != v2)
    {
      v5 = 0;
      v6 = v4 / 24;
      if (v6 <= 1)
        v6 = 1;
      do
      {
        v8 = (int *)(v2 + 24 * v5);
        v9 = *(_QWORD *)v8;
        v10 = v8[3];
        v11 = *(_QWORD *)(*(_QWORD *)v8 + 56);
        v12 = *(_QWORD *)(v11 + 8 * v10);
        v13 = *(_QWORD *)(v11 + (((v10 << 32) + 0x100000000) >> 29));
        v14 = 0.0;
        v15 = v13 <= v12;
        v16 = v13 - v12;
        if (!v15)
        {
          v17 = (int *)(*(_QWORD *)(v9 + 32) + 4 * v12);
          v18 = (double *)(*(_QWORD *)(v9 + 8) + 8 * v12);
          do
          {
            v19 = *v18++;
            v20 = v19;
            v21 = *v17++;
            v14 = v14 + v20 * *(double *)(*a2 + 8 * v21);
            --v16;
          }
          while (v16);
        }
        v7 = -v14 / *(double *)(v2 + 24 * v5 + 16);
        if (v7 != 0.0)
        {
          v22 = *(int *)(v2 + 24 * v5 + 8);
          v23 = *(_QWORD *)(v11 + 8 * v22);
          v24 = *(_QWORD *)(v11 + (((v22 << 32) + 0x100000000) >> 29));
          v15 = v24 <= v23;
          v25 = v24 - v23;
          if (!v15)
          {
            v26 = *(_QWORD *)(v9 + 8);
            v27 = *(_QWORD *)(v9 + 32);
            v28 = *a2;
            v29 = (int *)(v27 + 4 * v23);
            v30 = (double *)(v26 + 8 * v23);
            do
            {
              v31 = *v30++;
              v32 = v31;
              v33 = *v29++;
              *(double *)(v28 + 8 * v33) = *(double *)(v28 + 8 * v33) + v7 * v32;
              --v25;
            }
            while (v25);
          }
        }
        ++v5;
      }
      while (v5 != v6);
    }
  }
  else
  {
    google::LogMessage::LogMessage((google::LogMessage *)v36, (google::glog_internal_namespace_ *)"./ortools/glop/rank_one_update.h", 189, 2);
    v34 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v36);
    v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"d", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v36);
  }
}

void sub_22D9F3BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void std::vector<double>::__append(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  int64x2_t v18;
  int64x2_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  int64x2_t v26;
  int64x2_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;

  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = (uint64_t *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 3)
  {
    if (a2)
    {
      v16 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 8 * a2 > (unint64_t)a3)
        goto LABEL_43;
      v17 = v16 + 1;
      v8 = (uint64_t *)(v7 + 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL));
      v18 = vdupq_lane_s64(*a3, 0);
      v19 = (int64x2_t *)(v7 + 16);
      v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v19[-1] = v18;
        *v19 = v18;
        v19 += 2;
        v20 -= 4;
      }
      while (v20);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_43:
        do
          *v8++ = *a3;
        while (v8 != (uint64_t *)(v7 + 8 * a2));
      }
      v8 = (uint64_t *)(v7 + 8 * a2);
    }
    *(_QWORD *)(a1 + 8) = v8;
  }
  else
  {
    v9 = *(uint64_t **)a1;
    v10 = v7 - *(_QWORD *)a1;
    v11 = v10 >> 3;
    v12 = (v10 >> 3) + a2;
    if (v12 >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v13 = v6 - (_QWORD)v9;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v15 = (char *)operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v21 = (unint64_t)&v15[8 * v11];
    v22 = (uint64_t *)(v21 + 8 * a2);
    v23 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v24 = (uint64_t *)v21;
    if (v23 < 0x13)
      goto LABEL_44;
    if (v21 < (unint64_t)(a3 + 1))
    {
      v24 = (uint64_t *)&v15[8 * v11];
      if (&v15[8 * a2 + v10] > (char *)a3)
        goto LABEL_44;
    }
    v25 = v23 + 1;
    v24 = (uint64_t *)(v21 + 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL));
    v26 = vdupq_lane_s64(*a3, 0);
    v27 = (int64x2_t *)&v15[8 * v11 + 16];
    v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27[-1] = v26;
      *v27 = v26;
      v27 += 2;
      v28 -= 4;
    }
    while (v28);
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_44:
      do
        *v24++ = *a3;
      while (v24 != v22);
    }
    if ((uint64_t *)v7 != v9)
    {
      v29 = v7 - (_QWORD)v9 - 8;
      if (v29 < 0x58)
        goto LABEL_45;
      if (v7 - (unint64_t)&v15[v10] < 0x20)
        goto LABEL_45;
      v30 = (v29 >> 3) + 1;
      v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
      v8 = (uint64_t *)(v7 - v31);
      v21 -= v31;
      v32 = &v15[8 * v11 - 16];
      v33 = (__int128 *)(v7 - 16);
      v34 = v30 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v35 = *v33;
        *((_OWORD *)v32 - 1) = *(v33 - 1);
        *(_OWORD *)v32 = v35;
        v32 -= 32;
        v33 -= 2;
        v34 -= 4;
      }
      while (v34);
      if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_45:
        do
        {
          v36 = *--v8;
          *(_QWORD *)(v21 - 8) = v36;
          v21 -= 8;
        }
        while (v8 != v9);
      }
    }
    *(_QWORD *)a1 = v21;
    *(_QWORD *)(a1 + 8) = v22;
    *(_QWORD *)(a1 + 16) = &v15[8 * v14];
    if (v9)
      operator delete(v9);
  }
}

int *std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *,false>(int *result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  int *v9;
  int *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int *v24;
  int *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int *v33;
  int *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  int *v48;
  char *v49;
  int v50;
  int v51;
  int v52;
  int *v53;
  int *v54;
  int v55;
  int v56;
  int *v57;
  BOOL v58;
  int v59;
  int v60;
  int *v61;
  int *v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int *v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int *v74;
  int *v75;
  int *v76;
  int v77;
  int *v78;
  int *v79;
  _DWORD *v80;
  char *v81;
  BOOL v83;
  uint64_t v84;
  int *v85;
  int *v86;
  int v87;
  int v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;

  v9 = result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = a2 - (char *)v10;
    v12 = (a2 - (char *)v10) >> 2;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v69 = *((_DWORD *)a2 - 1);
        v70 = *v10;
        if (v69 < *v10)
        {
          *v10 = v69;
          *((_DWORD *)a2 - 1) = v70;
        }
        return result;
      case 3uLL:
        v71 = *v10;
        v72 = v10[1];
        v73 = *((_DWORD *)a2 - 1);
        if (v72 >= *v10)
        {
          if (v73 < v72)
          {
            v10[1] = v73;
            *((_DWORD *)a2 - 1) = v72;
            v91 = *v10;
            v90 = v10[1];
            if (v90 < *v10)
            {
              *v10 = v90;
              v10[1] = v91;
            }
          }
        }
        else
        {
          if (v73 >= v72)
          {
            *v10 = v72;
            v10[1] = v71;
            v98 = *((_DWORD *)a2 - 1);
            if (v98 >= v71)
              return result;
            v10[1] = v98;
          }
          else
          {
            *v10 = v73;
          }
          *((_DWORD *)a2 - 1) = v71;
        }
        return result;
      case 4uLL:
        v74 = v10 + 1;
        v75 = (int *)v10[1];
        v76 = v10 + 2;
        v77 = v10[2];
        v78 = (int *)*v10;
        if ((int)v75 >= (int)v78)
        {
          if (v77 >= (int)v75)
          {
LABEL_144:
            LODWORD(v75) = v77;
            v92 = *((_DWORD *)a2 - 1);
            if (v92 >= (int)v75)
              return result;
LABEL_145:
            *v76 = v92;
            *((_DWORD *)a2 - 1) = (_DWORD)v75;
            v95 = *v76;
            v96 = *v74;
            if (v95 < v96)
            {
              v10[1] = v95;
              v10[2] = v96;
              v97 = *v10;
              if (v95 < *v10)
              {
                *v10 = v95;
                v10[1] = v97;
              }
            }
            return result;
          }
          *v74 = v77;
          *v76 = (int)v75;
          v79 = v10;
          v80 = v10 + 1;
          result = v75;
          if (v77 >= (int)v78)
          {
LABEL_136:
            v92 = *((_DWORD *)a2 - 1);
            if (v92 >= (int)v75)
              return result;
            goto LABEL_145;
          }
        }
        else
        {
          v79 = v10;
          v80 = v10 + 2;
          result = (int *)*v10;
          if (v77 >= (int)v75)
          {
            *v10 = (int)v75;
            v10[1] = (int)v78;
            v79 = v10 + 1;
            v80 = v10 + 2;
            result = v78;
            if (v77 >= (int)v78)
              goto LABEL_144;
          }
        }
        *v79 = v77;
        *v80 = (_DWORD)v78;
        LODWORD(v75) = (_DWORD)result;
        goto LABEL_136;
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(v10, v10 + 1, v10 + 2, v10 + 3, (int *)a2 - 1);
      default:
        if (v11 > 95)
        {
          if (!a4)
          {
            if (v10 != (int *)a2)
              return (int *)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>((char *)v10, a2, a2);
            return result;
          }
          v13 = v12 >> 1;
          v14 = &v10[v12 >> 1];
          v15 = *((_DWORD *)a2 - 1);
          if ((unint64_t)v11 < 0x201)
          {
            v18 = *v10;
            v19 = *v14;
            if (*v10 >= *v14)
            {
              if (v15 < v18)
              {
                *v10 = v15;
                *((_DWORD *)a2 - 1) = v18;
                v21 = *v14;
                if (*v10 < *v14)
                {
                  *v14 = *v10;
                  *v10 = v21;
                  --a4;
                  v22 = v21;
                  if ((a5 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v15 < v18)
              {
                *v14 = v15;
                goto LABEL_31;
              }
              *v14 = v18;
              *v10 = v19;
              v31 = *((_DWORD *)a2 - 1);
              if (v31 < v19)
              {
                *v10 = v31;
LABEL_31:
                *((_DWORD *)a2 - 1) = v19;
              }
            }
            --a4;
            v22 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v16 = *v14;
          v17 = *v10;
          if (*v14 >= *v10)
          {
            if (v15 < v16)
            {
              *v14 = v15;
              *((_DWORD *)a2 - 1) = v16;
              v20 = *v10;
              if (*v14 < *v10)
              {
                *v10 = *v14;
                *v14 = v20;
              }
            }
          }
          else
          {
            if (v15 >= v16)
            {
              *v10 = v16;
              *v14 = v17;
              v23 = *((_DWORD *)a2 - 1);
              if (v23 >= v17)
                goto LABEL_23;
              *v14 = v23;
            }
            else
            {
              *v10 = v15;
            }
            *((_DWORD *)a2 - 1) = v17;
          }
LABEL_23:
          v24 = &v10[v13];
          v27 = *(v24 - 1);
          v25 = v24 - 1;
          v26 = v27;
          v28 = v10[1];
          v29 = *((_DWORD *)a2 - 2);
          if (v27 >= v28)
          {
            if (v29 < v26)
            {
              *v25 = v29;
              *((_DWORD *)a2 - 2) = v26;
              v30 = v10[1];
              if (*v25 < v30)
              {
                v10[1] = *v25;
                *v25 = v30;
              }
            }
          }
          else
          {
            if (v29 >= v26)
            {
              v10[1] = v26;
              *v25 = v28;
              v32 = *((_DWORD *)a2 - 2);
              if (v32 >= v28)
                goto LABEL_37;
              *v25 = v32;
            }
            else
            {
              v10[1] = v29;
            }
            *((_DWORD *)a2 - 2) = v28;
          }
LABEL_37:
          v33 = &v10[v13];
          v36 = v33[1];
          v34 = v33 + 1;
          v35 = v36;
          v37 = v10[2];
          v38 = *((_DWORD *)a2 - 3);
          if (v36 >= v37)
          {
            if (v38 < v35)
            {
              *v34 = v38;
              *((_DWORD *)a2 - 3) = v35;
              v39 = v10[2];
              if (*v34 < v39)
              {
                v10[2] = *v34;
                *v34 = v39;
              }
            }
          }
          else
          {
            if (v38 >= v35)
            {
              v10[2] = v35;
              *v34 = v37;
              v40 = *((_DWORD *)a2 - 3);
              if (v40 >= v37)
                goto LABEL_46;
              *v34 = v40;
            }
            else
            {
              v10[2] = v38;
            }
            *((_DWORD *)a2 - 3) = v37;
          }
LABEL_46:
          v41 = *v14;
          v42 = *v25;
          v43 = *v34;
          if (*v14 < *v25)
          {
            if (v43 >= v41)
            {
              *v25 = v41;
              *v14 = v42;
              v25 = v14;
              v41 = v43;
              if (v43 >= v42)
              {
                v44 = *v10;
                *v10 = v42;
                *v14 = v44;
                --a4;
                v22 = *v10;
                if ((a5 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v43 >= v41)
            goto LABEL_54;
          *v14 = v43;
          *v34 = v41;
          v34 = v14;
          v41 = v42;
          if (v43 < v42)
          {
LABEL_53:
            *v25 = v43;
            *v34 = v42;
LABEL_54:
            v45 = *v10;
            *v10 = v41;
            *v14 = v45;
            --a4;
            v22 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            if (*(v10 - 1) < v22)
              goto LABEL_56;
            if (v22 >= *((_DWORD *)a2 - 1))
            {
              v61 = v10 + 1;
              do
              {
                v10 = v61;
                if (v61 >= (int *)a2)
                  break;
                ++v61;
              }
              while (v22 >= *v10);
            }
            else
            {
              do
              {
                v60 = v10[1];
                ++v10;
              }
              while (v22 >= v60);
            }
            v62 = (int *)a2;
            if (v10 < (int *)a2)
            {
              v62 = (int *)a2;
              do
                v63 = *--v62;
              while (v22 < v63);
            }
            if (v10 < v62)
            {
              v64 = *v10;
              v65 = *v62;
              do
              {
                *v10 = v65;
                *v62 = v64;
                do
                {
                  v66 = v10[1];
                  ++v10;
                  v64 = v66;
                }
                while (v22 >= v66);
                do
                {
                  v67 = *--v62;
                  v65 = v67;
                }
                while (v22 < v67);
              }
              while (v10 < v62);
            }
            v68 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v68;
            a5 = 0;
            *v68 = v22;
            continue;
          }
          v59 = *v10;
          *v10 = v43;
          *v14 = v59;
          --a4;
          v22 = *v10;
          if ((a5 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v46 = 0;
          do
            v47 = v10[++v46];
          while (v47 < v22);
          v48 = &v10[v46];
          v49 = a2;
          if (v46 == 1)
          {
            v49 = a2;
            do
            {
              if (v48 >= (int *)v49)
                break;
              v51 = *((_DWORD *)v49 - 1);
              v49 -= 4;
            }
            while (v51 >= v22);
          }
          else
          {
            do
            {
              v50 = *((_DWORD *)v49 - 1);
              v49 -= 4;
            }
            while (v50 >= v22);
          }
          if (v48 >= (int *)v49)
          {
            v57 = v48 - 1;
            if (v48 - 1 != v10)
              goto LABEL_73;
          }
          else
          {
            v52 = *(_DWORD *)v49;
            v53 = &v10[v46];
            v54 = (int *)v49;
            do
            {
              *v53 = v52;
              *v54 = v47;
              do
              {
                v55 = v53[1];
                ++v53;
                v47 = v55;
              }
              while (v55 < v22);
              do
              {
                v56 = *--v54;
                v52 = v56;
              }
              while (v56 >= v22);
            }
            while (v53 < v54);
            v57 = v53 - 1;
            if (v53 - 1 == v10)
              goto LABEL_74;
LABEL_73:
            *v10 = *v57;
          }
LABEL_74:
          *v57 = v22;
          if (v48 < (int *)v49)
            goto LABEL_77;
          v58 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(v10, v57);
          v10 = v57 + 1;
          result = (int *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(v57 + 1, (int *)a2);
          if (!(_DWORD)result)
          {
            if (v58)
              continue;
LABEL_77:
            result = (int *)std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *,false>(v9, v57, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v57 + 1;
            continue;
          }
          a2 = (char *)v57;
          if (v58)
            return result;
          goto LABEL_2;
        }
        v81 = (char *)(v10 + 1);
        v83 = v10 == (int *)a2 || v81 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v83)
          {
            v84 = 0;
            v85 = v10;
            do
            {
              v88 = *v85;
              v87 = v85[1];
              v85 = (int *)v81;
              if (v87 < v88)
              {
                v89 = v84;
                do
                {
                  *(int *)((char *)v10 + v89 + 4) = v88;
                  if (!v89)
                  {
                    v86 = v10;
                    goto LABEL_121;
                  }
                  v88 = *(int *)((char *)v10 + v89 - 4);
                  v89 -= 4;
                }
                while (v87 < v88);
                v86 = (int *)((char *)v10 + v89 + 4);
LABEL_121:
                *v86 = v87;
              }
              v81 = (char *)(v85 + 1);
              v84 += 4;
            }
            while (v85 + 1 != (int *)a2);
          }
        }
        else if (!v83)
        {
          do
          {
            v94 = *v9;
            v93 = v9[1];
            v9 = (int *)v81;
            if (v93 < v94)
            {
              do
              {
                *(_DWORD *)v81 = v94;
                v94 = *((_DWORD *)v81 - 2);
                v81 -= 4;
              }
              while (v93 < v94);
              *(_DWORD *)v81 = v93;
            }
            v81 = (char *)(v9 + 1);
          }
          while (v9 + 1 != (int *)a2);
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(int *a1, int *a2)
{
  int v3;
  int *v4;
  int v5;
  int v6;
  int *v7;
  int *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int *v14;
  int v15;
  int *v16;
  int v17;
  int v18;
  int *v19;
  int *v20;
  int v21;
  int *v22;
  int v23;
  uint64_t i;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v9 = *(a2 - 1);
      v10 = *a1;
      if (v9 >= *a1)
        return 1;
      *a1 = v9;
      *(a2 - 1) = v10;
      return 1;
    case 3:
      v11 = *a1;
      v12 = a1[1];
      v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12)
          return 1;
        a1[1] = v13;
        *(a2 - 1) = v12;
        v30 = *a1;
        v29 = a1[1];
        if (v29 >= *a1)
          return 1;
        *a1 = v29;
        a1[1] = v30;
        return 1;
      }
      else if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        v35 = *(a2 - 1);
        if (v35 >= v11)
          return 1;
        a1[1] = v35;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      v14 = a1 + 1;
      v15 = a1[1];
      v16 = a1 + 2;
      v17 = a1[2];
      v18 = *a1;
      if (v15 < *a1)
      {
        v19 = a1;
        v20 = a1 + 2;
        v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          v19 = a1 + 1;
          v20 = a1 + 2;
          v21 = v18;
          if (v17 >= v18)
            goto LABEL_38;
        }
LABEL_35:
        *v19 = v17;
        *v20 = v18;
        v15 = v21;
LABEL_36:
        v31 = *(a2 - 1);
        if (v31 >= v15)
          return 1;
        goto LABEL_39;
      }
      if (v17 < v15)
      {
        *v14 = v17;
        *v16 = v15;
        v19 = a1;
        v20 = a1 + 1;
        v21 = v15;
        if (v17 >= v18)
          goto LABEL_36;
        goto LABEL_35;
      }
LABEL_38:
      v15 = v17;
      v31 = *(a2 - 1);
      if (v31 >= v15)
        return 1;
LABEL_39:
      *v16 = v31;
      *(a2 - 1) = v15;
      v32 = *v16;
      v33 = *v14;
      if (v32 >= v33)
        return 1;
      a1[1] = v32;
      a1[2] = v33;
      v34 = *a1;
      if (v32 >= *a1)
        return 1;
      *a1 = v32;
      a1[1] = v34;
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v4 = a1 + 2;
      v3 = a1[2];
      v5 = a1[1];
      v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5)
          goto LABEL_20;
        a1[1] = v3;
        *v4 = v5;
        v7 = a1;
        v8 = a1 + 1;
      }
      else
      {
        v7 = a1;
        v8 = a1 + 2;
        if (v3 < v5)
          goto LABEL_19;
        *a1 = v5;
        a1[1] = v6;
        v7 = a1 + 1;
        v8 = a1 + 2;
      }
      if (v3 >= v6)
        goto LABEL_20;
LABEL_19:
      *v7 = v3;
      *v8 = v6;
LABEL_20:
      v22 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v23 = 0;
      for (i = 12; ; i += 4)
      {
        v25 = *v22;
        v26 = *v4;
        if (*v22 < v26)
          break;
LABEL_23:
        v4 = v22++;
        if (v22 == a2)
          return 1;
      }
      v27 = i;
      do
      {
        *(int *)((char *)a1 + v27) = v26;
        v28 = v27 - 4;
        if (v27 == 4)
        {
          *a1 = v25;
          if (++v23 != 8)
            goto LABEL_23;
          return v22 + 1 == a2;
        }
        v26 = *(int *)((char *)a1 + v27 - 8);
        v27 -= 4;
      }
      while (v25 < v26);
      *(int *)((char *)a1 + v28) = v25;
      if (++v23 != 8)
        goto LABEL_23;
      return v22 + 1 == a2;
  }
}

int *std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(int *result, int *a2, int *a3, int *a4, int *a5)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;

  v5 = *a2;
  v6 = *result;
  v7 = *a3;
  if (*a2 >= *result)
  {
    if (v7 >= v5)
    {
      v5 = *a3;
      v9 = *a4;
      if (*a4 >= v7)
        goto LABEL_17;
      goto LABEL_14;
    }
    *a2 = v7;
    *a3 = v5;
    v8 = *result;
    if (*a2 < *result)
    {
      *result = *a2;
      *a2 = v8;
      v5 = *a3;
      v9 = *a4;
      if (*a4 >= *a3)
        goto LABEL_17;
      goto LABEL_14;
    }
  }
  else
  {
    if (v7 >= v5)
    {
      *result = v5;
      *a2 = v6;
      v5 = *a3;
      if (*a3 >= v6)
        goto LABEL_11;
      *a2 = v5;
    }
    else
    {
      *result = v7;
    }
    *a3 = v6;
    v5 = v6;
  }
LABEL_11:
  v9 = *a4;
  if (*a4 >= v5)
    goto LABEL_17;
LABEL_14:
  *a3 = v9;
  *a4 = v5;
  v10 = *a2;
  if (*a3 < *a2)
  {
    *a2 = *a3;
    *a3 = v10;
    v11 = *result;
    if (*a2 < *result)
    {
      *result = *a2;
      *a2 = v11;
    }
  }
LABEL_17:
  v12 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v12;
    v13 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v13;
      v14 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v14;
        v15 = *result;
        if (*a2 < *result)
        {
          *result = *a2;
          *a2 = v15;
        }
      }
    }
  }
  return result;
}

char *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(char *a1, char *a2, char *a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  char *v7;
  int v8;
  char *v9;
  int v10;
  int v11;
  char *v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int64_t v22;
  char *v23;
  int v24;
  int v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  int v31;
  int v32;
  int64_t v34;
  int64_t v35;
  uint64_t v36;
  char *v37;
  int v38;
  BOOL v39;
  char *v40;
  int v41;
  int v42;
  uint64_t v43;

  if (a1 == a2)
    return a3;
  v3 = a2 - a1;
  v4 = (a2 - a1) >> 2;
  if (a2 - a1 >= 5 && (unint64_t)v3 >= 8)
  {
    v34 = (unint64_t)(v4 - 2) >> 1;
    v35 = v34;
    do
    {
      if (v34 >= v35)
      {
        v36 = (2 * v35) | 1;
        v37 = &a1[4 * v36];
        if (2 * v35 + 2 >= v4)
        {
          v38 = *(_DWORD *)v37;
          v40 = &a1[4 * v35];
          v41 = *(_DWORD *)v40;
          if (*(_DWORD *)v37 >= *(_DWORD *)v40)
            goto LABEL_78;
        }
        else
        {
          v38 = *((_DWORD *)v37 + 1);
          v39 = *(_DWORD *)v37 < v38;
          if (*(_DWORD *)v37 > v38)
            v38 = *(_DWORD *)v37;
          if (v39)
          {
            v37 += 4;
            v36 = 2 * v35 + 2;
          }
          v40 = &a1[4 * v35];
          v41 = *(_DWORD *)v40;
          if (v38 >= *(_DWORD *)v40)
          {
LABEL_78:
            while (1)
            {
              *(_DWORD *)v40 = v38;
              v40 = v37;
              if (v34 < v36)
                break;
              v43 = (2 * v36) | 1;
              v37 = &a1[4 * v43];
              v36 = 2 * v36 + 2;
              if (v36 < v4)
              {
                v38 = *(_DWORD *)v37;
                v42 = *((_DWORD *)v37 + 1);
                if (*(_DWORD *)v37 <= v42)
                  v38 = *((_DWORD *)v37 + 1);
                if (*(_DWORD *)v37 >= v42)
                  v36 = v43;
                else
                  v37 += 4;
                if (v38 < v41)
                  break;
              }
              else
              {
                v38 = *(_DWORD *)v37;
                v36 = v43;
                if (*(_DWORD *)v37 < v41)
                  break;
              }
            }
            *(_DWORD *)v40 = v41;
          }
        }
      }
      v15 = v35-- <= 0;
    }
    while (!v15);
  }
  v5 = a2;
  if (a2 != a3)
  {
    if (v3 < 8)
    {
      v6 = *(_DWORD *)a1;
      v7 = a2;
      do
      {
        v8 = *(_DWORD *)v7;
        if (*(_DWORD *)v7 < v6)
        {
          *(_DWORD *)v7 = v6;
          *(_DWORD *)a1 = v8;
          v6 = v8;
        }
        v7 += 4;
      }
      while (v7 != a3);
LABEL_37:
      v5 = a3;
      goto LABEL_38;
    }
    v9 = a2;
    while (1)
    {
      v10 = *(_DWORD *)v9;
      if (*(_DWORD *)v9 < *(_DWORD *)a1)
      {
        *(_DWORD *)v9 = *(_DWORD *)a1;
        *(_DWORD *)a1 = v10;
        v11 = *((_DWORD *)a1 + 1);
        if (v3 == 8)
        {
          v12 = a1 + 4;
          v13 = 1;
          if (v11 >= v10)
            goto LABEL_26;
        }
        else
        {
          v14 = *((_DWORD *)a1 + 2);
          v15 = v11 < v14;
          if (v11 <= v14)
            v11 = *((_DWORD *)a1 + 2);
          if (v15)
            v12 = a1 + 8;
          else
            v12 = a1 + 4;
          if (v15)
            v13 = 2;
          else
            v13 = 1;
          if (v11 >= v10)
          {
LABEL_26:
            v16 = a1;
            while (1)
            {
              *(_DWORD *)v16 = v11;
              v16 = v12;
              if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v13)
                break;
              v18 = (2 * v13) | 1;
              v12 = &a1[4 * v18];
              v13 = 2 * v13 + 2;
              if (v13 < v4)
              {
                v11 = *(_DWORD *)v12;
                v17 = *((_DWORD *)v12 + 1);
                if (*(_DWORD *)v12 <= v17)
                  v11 = *((_DWORD *)v12 + 1);
                if (*(_DWORD *)v12 >= v17)
                  v13 = v18;
                else
                  v12 += 4;
                if (v11 < v10)
                  break;
              }
              else
              {
                v11 = *(_DWORD *)v12;
                v13 = v18;
                if (*(_DWORD *)v12 < v10)
                  break;
              }
            }
            *(_DWORD *)v16 = v10;
          }
        }
      }
      v9 += 4;
      if (v9 == a3)
        goto LABEL_37;
    }
  }
LABEL_38:
  if (v3 >= 5)
  {
    v19 = (unint64_t)v3 >> 2;
    do
    {
      v20 = 0;
      v21 = *(_DWORD *)a1;
      v22 = (unint64_t)(v19 - 2) >> 1;
      v23 = a1;
      do
      {
        while (1)
        {
          v26 = &v23[4 * v20 + 4];
          v27 = (2 * v20) | 1;
          v20 = 2 * v20 + 2;
          if (v20 < v19)
            break;
          v20 = v27;
          *(_DWORD *)v23 = *(_DWORD *)v26;
          v23 = v26;
          if (v27 > v22)
            goto LABEL_51;
        }
        v24 = *(_DWORD *)v26;
        v25 = *((_DWORD *)v26 + 1);
        if (*(_DWORD *)v26 <= v25)
          v24 = *((_DWORD *)v26 + 1);
        if (*(_DWORD *)v26 >= v25)
          v20 = v27;
        else
          v26 += 4;
        *(_DWORD *)v23 = v24;
        v23 = v26;
      }
      while (v20 <= v22);
LABEL_51:
      a2 -= 4;
      if (v26 == a2)
      {
        *(_DWORD *)v26 = v21;
      }
      else
      {
        *(_DWORD *)v26 = *(_DWORD *)a2;
        *(_DWORD *)a2 = v21;
        v28 = v26 - a1 + 4;
        if (v28 >= 5)
        {
          v29 = (((unint64_t)v28 >> 2) - 2) >> 1;
          v30 = &a1[4 * v29];
          v31 = *(_DWORD *)v30;
          v32 = *(_DWORD *)v26;
          if (*(_DWORD *)v30 < *(_DWORD *)v26)
          {
            do
            {
              *(_DWORD *)v26 = v31;
              v26 = v30;
              if (!v29)
                break;
              v29 = (v29 - 1) >> 1;
              v30 = &a1[4 * v29];
              v31 = *(_DWORD *)v30;
            }
            while (*(_DWORD *)v30 < v32);
            *(_DWORD *)v26 = v32;
          }
        }
      }
      v15 = v19-- <= 2;
    }
    while (!v15);
  }
  return v5;
}

int *std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::RowIndex_tag_,int> *,false>(int *result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  int *v9;
  int *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int *v24;
  int *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int *v33;
  int *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  int *v48;
  char *v49;
  int v50;
  int v51;
  int v52;
  int *v53;
  int *v54;
  int v55;
  int v56;
  int *v57;
  BOOL v58;
  int v59;
  int v60;
  int *v61;
  int *v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int *v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int *v74;
  int *v75;
  int *v76;
  int v77;
  int *v78;
  int *v79;
  _DWORD *v80;
  char *v81;
  BOOL v83;
  uint64_t v84;
  int *v85;
  int *v86;
  int v87;
  int v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;

  v9 = result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = a2 - (char *)v10;
    v12 = (a2 - (char *)v10) >> 2;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v69 = *((_DWORD *)a2 - 1);
        v70 = *v10;
        if (v69 < *v10)
        {
          *v10 = v69;
          *((_DWORD *)a2 - 1) = v70;
        }
        return result;
      case 3uLL:
        v71 = *v10;
        v72 = v10[1];
        v73 = *((_DWORD *)a2 - 1);
        if (v72 >= *v10)
        {
          if (v73 < v72)
          {
            v10[1] = v73;
            *((_DWORD *)a2 - 1) = v72;
            v91 = *v10;
            v90 = v10[1];
            if (v90 < *v10)
            {
              *v10 = v90;
              v10[1] = v91;
            }
          }
        }
        else
        {
          if (v73 >= v72)
          {
            *v10 = v72;
            v10[1] = v71;
            v98 = *((_DWORD *)a2 - 1);
            if (v98 >= v71)
              return result;
            v10[1] = v98;
          }
          else
          {
            *v10 = v73;
          }
          *((_DWORD *)a2 - 1) = v71;
        }
        return result;
      case 4uLL:
        v74 = v10 + 1;
        v75 = (int *)v10[1];
        v76 = v10 + 2;
        v77 = v10[2];
        v78 = (int *)*v10;
        if ((int)v75 >= (int)v78)
        {
          if (v77 >= (int)v75)
          {
LABEL_144:
            LODWORD(v75) = v77;
            v92 = *((_DWORD *)a2 - 1);
            if (v92 >= (int)v75)
              return result;
LABEL_145:
            *v76 = v92;
            *((_DWORD *)a2 - 1) = (_DWORD)v75;
            v95 = *v76;
            v96 = *v74;
            if (v95 < v96)
            {
              v10[1] = v95;
              v10[2] = v96;
              v97 = *v10;
              if (v95 < *v10)
              {
                *v10 = v95;
                v10[1] = v97;
              }
            }
            return result;
          }
          *v74 = v77;
          *v76 = (int)v75;
          v79 = v10;
          v80 = v10 + 1;
          result = v75;
          if (v77 >= (int)v78)
          {
LABEL_136:
            v92 = *((_DWORD *)a2 - 1);
            if (v92 >= (int)v75)
              return result;
            goto LABEL_145;
          }
        }
        else
        {
          v79 = v10;
          v80 = v10 + 2;
          result = (int *)*v10;
          if (v77 >= (int)v75)
          {
            *v10 = (int)v75;
            v10[1] = (int)v78;
            v79 = v10 + 1;
            v80 = v10 + 2;
            result = v78;
            if (v77 >= (int)v78)
              goto LABEL_144;
          }
        }
        *v79 = v77;
        *v80 = (_DWORD)v78;
        LODWORD(v75) = (_DWORD)result;
        goto LABEL_136;
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(v10, v10 + 1, v10 + 2, v10 + 3, (int *)a2 - 1);
      default:
        if (v11 > 95)
        {
          if (!a4)
          {
            if (v10 != (int *)a2)
              return (int *)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>((char *)v10, a2, a2);
            return result;
          }
          v13 = v12 >> 1;
          v14 = &v10[v12 >> 1];
          v15 = *((_DWORD *)a2 - 1);
          if ((unint64_t)v11 < 0x201)
          {
            v18 = *v10;
            v19 = *v14;
            if (*v10 >= *v14)
            {
              if (v15 < v18)
              {
                *v10 = v15;
                *((_DWORD *)a2 - 1) = v18;
                v21 = *v14;
                if (*v10 < *v14)
                {
                  *v14 = *v10;
                  *v10 = v21;
                  --a4;
                  v22 = v21;
                  if ((a5 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v15 < v18)
              {
                *v14 = v15;
                goto LABEL_31;
              }
              *v14 = v18;
              *v10 = v19;
              v31 = *((_DWORD *)a2 - 1);
              if (v31 < v19)
              {
                *v10 = v31;
LABEL_31:
                *((_DWORD *)a2 - 1) = v19;
              }
            }
            --a4;
            v22 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v16 = *v14;
          v17 = *v10;
          if (*v14 >= *v10)
          {
            if (v15 < v16)
            {
              *v14 = v15;
              *((_DWORD *)a2 - 1) = v16;
              v20 = *v10;
              if (*v14 < *v10)
              {
                *v10 = *v14;
                *v14 = v20;
              }
            }
          }
          else
          {
            if (v15 >= v16)
            {
              *v10 = v16;
              *v14 = v17;
              v23 = *((_DWORD *)a2 - 1);
              if (v23 >= v17)
                goto LABEL_23;
              *v14 = v23;
            }
            else
            {
              *v10 = v15;
            }
            *((_DWORD *)a2 - 1) = v17;
          }
LABEL_23:
          v24 = &v10[v13];
          v27 = *(v24 - 1);
          v25 = v24 - 1;
          v26 = v27;
          v28 = v10[1];
          v29 = *((_DWORD *)a2 - 2);
          if (v27 >= v28)
          {
            if (v29 < v26)
            {
              *v25 = v29;
              *((_DWORD *)a2 - 2) = v26;
              v30 = v10[1];
              if (*v25 < v30)
              {
                v10[1] = *v25;
                *v25 = v30;
              }
            }
          }
          else
          {
            if (v29 >= v26)
            {
              v10[1] = v26;
              *v25 = v28;
              v32 = *((_DWORD *)a2 - 2);
              if (v32 >= v28)
                goto LABEL_37;
              *v25 = v32;
            }
            else
            {
              v10[1] = v29;
            }
            *((_DWORD *)a2 - 2) = v28;
          }
LABEL_37:
          v33 = &v10[v13];
          v36 = v33[1];
          v34 = v33 + 1;
          v35 = v36;
          v37 = v10[2];
          v38 = *((_DWORD *)a2 - 3);
          if (v36 >= v37)
          {
            if (v38 < v35)
            {
              *v34 = v38;
              *((_DWORD *)a2 - 3) = v35;
              v39 = v10[2];
              if (*v34 < v39)
              {
                v10[2] = *v34;
                *v34 = v39;
              }
            }
          }
          else
          {
            if (v38 >= v35)
            {
              v10[2] = v35;
              *v34 = v37;
              v40 = *((_DWORD *)a2 - 3);
              if (v40 >= v37)
                goto LABEL_46;
              *v34 = v40;
            }
            else
            {
              v10[2] = v38;
            }
            *((_DWORD *)a2 - 3) = v37;
          }
LABEL_46:
          v41 = *v14;
          v42 = *v25;
          v43 = *v34;
          if (*v14 < *v25)
          {
            if (v43 >= v41)
            {
              *v25 = v41;
              *v14 = v42;
              v25 = v14;
              v41 = v43;
              if (v43 >= v42)
              {
                v44 = *v10;
                *v10 = v42;
                *v14 = v44;
                --a4;
                v22 = *v10;
                if ((a5 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v43 >= v41)
            goto LABEL_54;
          *v14 = v43;
          *v34 = v41;
          v34 = v14;
          v41 = v42;
          if (v43 < v42)
          {
LABEL_53:
            *v25 = v43;
            *v34 = v42;
LABEL_54:
            v45 = *v10;
            *v10 = v41;
            *v14 = v45;
            --a4;
            v22 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            if (*(v10 - 1) < v22)
              goto LABEL_56;
            if (v22 >= *((_DWORD *)a2 - 1))
            {
              v61 = v10 + 1;
              do
              {
                v10 = v61;
                if (v61 >= (int *)a2)
                  break;
                ++v61;
              }
              while (v22 >= *v10);
            }
            else
            {
              do
              {
                v60 = v10[1];
                ++v10;
              }
              while (v22 >= v60);
            }
            v62 = (int *)a2;
            if (v10 < (int *)a2)
            {
              v62 = (int *)a2;
              do
                v63 = *--v62;
              while (v22 < v63);
            }
            if (v10 < v62)
            {
              v64 = *v10;
              v65 = *v62;
              do
              {
                *v10 = v65;
                *v62 = v64;
                do
                {
                  v66 = v10[1];
                  ++v10;
                  v64 = v66;
                }
                while (v22 >= v66);
                do
                {
                  v67 = *--v62;
                  v65 = v67;
                }
                while (v22 < v67);
              }
              while (v10 < v62);
            }
            v68 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v68;
            a5 = 0;
            *v68 = v22;
            continue;
          }
          v59 = *v10;
          *v10 = v43;
          *v14 = v59;
          --a4;
          v22 = *v10;
          if ((a5 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v46 = 0;
          do
            v47 = v10[++v46];
          while (v47 < v22);
          v48 = &v10[v46];
          v49 = a2;
          if (v46 == 1)
          {
            v49 = a2;
            do
            {
              if (v48 >= (int *)v49)
                break;
              v51 = *((_DWORD *)v49 - 1);
              v49 -= 4;
            }
            while (v51 >= v22);
          }
          else
          {
            do
            {
              v50 = *((_DWORD *)v49 - 1);
              v49 -= 4;
            }
            while (v50 >= v22);
          }
          if (v48 >= (int *)v49)
          {
            v57 = v48 - 1;
            if (v48 - 1 != v10)
              goto LABEL_73;
          }
          else
          {
            v52 = *(_DWORD *)v49;
            v53 = &v10[v46];
            v54 = (int *)v49;
            do
            {
              *v53 = v52;
              *v54 = v47;
              do
              {
                v55 = v53[1];
                ++v53;
                v47 = v55;
              }
              while (v55 < v22);
              do
              {
                v56 = *--v54;
                v52 = v56;
              }
              while (v56 >= v22);
            }
            while (v53 < v54);
            v57 = v53 - 1;
            if (v53 - 1 == v10)
              goto LABEL_74;
LABEL_73:
            *v10 = *v57;
          }
LABEL_74:
          *v57 = v22;
          if (v48 < (int *)v49)
            goto LABEL_77;
          v58 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::RowIndex_tag_,int> *>(v10, v57);
          v10 = v57 + 1;
          result = (int *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::RowIndex_tag_,int> *>(v57 + 1, (int *)a2);
          if (!(_DWORD)result)
          {
            if (v58)
              continue;
LABEL_77:
            result = (int *)std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::RowIndex_tag_,int> *,false>(v9, v57, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v57 + 1;
            continue;
          }
          a2 = (char *)v57;
          if (v58)
            return result;
          goto LABEL_2;
        }
        v81 = (char *)(v10 + 1);
        v83 = v10 == (int *)a2 || v81 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v83)
          {
            v84 = 0;
            v85 = v10;
            do
            {
              v88 = *v85;
              v87 = v85[1];
              v85 = (int *)v81;
              if (v87 < v88)
              {
                v89 = v84;
                do
                {
                  *(int *)((char *)v10 + v89 + 4) = v88;
                  if (!v89)
                  {
                    v86 = v10;
                    goto LABEL_121;
                  }
                  v88 = *(int *)((char *)v10 + v89 - 4);
                  v89 -= 4;
                }
                while (v87 < v88);
                v86 = (int *)((char *)v10 + v89 + 4);
LABEL_121:
                *v86 = v87;
              }
              v81 = (char *)(v85 + 1);
              v84 += 4;
            }
            while (v85 + 1 != (int *)a2);
          }
        }
        else if (!v83)
        {
          do
          {
            v94 = *v9;
            v93 = v9[1];
            v9 = (int *)v81;
            if (v93 < v94)
            {
              do
              {
                *(_DWORD *)v81 = v94;
                v94 = *((_DWORD *)v81 - 2);
                v81 -= 4;
              }
              while (v93 < v94);
              *(_DWORD *)v81 = v93;
            }
            v81 = (char *)(v9 + 1);
          }
          while (v9 + 1 != (int *)a2);
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::RowIndex_tag_,int> *>(int *a1, int *a2)
{
  int v3;
  int *v4;
  int v5;
  int v6;
  int *v7;
  int *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int *v14;
  int v15;
  int *v16;
  int v17;
  int v18;
  int *v19;
  int *v20;
  int v21;
  int *v22;
  int v23;
  uint64_t i;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v9 = *(a2 - 1);
      v10 = *a1;
      if (v9 >= *a1)
        return 1;
      *a1 = v9;
      *(a2 - 1) = v10;
      return 1;
    case 3:
      v11 = *a1;
      v12 = a1[1];
      v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12)
          return 1;
        a1[1] = v13;
        *(a2 - 1) = v12;
        v30 = *a1;
        v29 = a1[1];
        if (v29 >= *a1)
          return 1;
        *a1 = v29;
        a1[1] = v30;
        return 1;
      }
      else if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        v35 = *(a2 - 1);
        if (v35 >= v11)
          return 1;
        a1[1] = v35;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      v14 = a1 + 1;
      v15 = a1[1];
      v16 = a1 + 2;
      v17 = a1[2];
      v18 = *a1;
      if (v15 < *a1)
      {
        v19 = a1;
        v20 = a1 + 2;
        v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          v19 = a1 + 1;
          v20 = a1 + 2;
          v21 = v18;
          if (v17 >= v18)
            goto LABEL_38;
        }
LABEL_35:
        *v19 = v17;
        *v20 = v18;
        v15 = v21;
LABEL_36:
        v31 = *(a2 - 1);
        if (v31 >= v15)
          return 1;
        goto LABEL_39;
      }
      if (v17 < v15)
      {
        *v14 = v17;
        *v16 = v15;
        v19 = a1;
        v20 = a1 + 1;
        v21 = v15;
        if (v17 >= v18)
          goto LABEL_36;
        goto LABEL_35;
      }
LABEL_38:
      v15 = v17;
      v31 = *(a2 - 1);
      if (v31 >= v15)
        return 1;
LABEL_39:
      *v16 = v31;
      *(a2 - 1) = v15;
      v32 = *v16;
      v33 = *v14;
      if (v32 >= v33)
        return 1;
      a1[1] = v32;
      a1[2] = v33;
      v34 = *a1;
      if (v32 >= *a1)
        return 1;
      *a1 = v32;
      a1[1] = v34;
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v4 = a1 + 2;
      v3 = a1[2];
      v5 = a1[1];
      v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5)
          goto LABEL_20;
        a1[1] = v3;
        *v4 = v5;
        v7 = a1;
        v8 = a1 + 1;
      }
      else
      {
        v7 = a1;
        v8 = a1 + 2;
        if (v3 < v5)
          goto LABEL_19;
        *a1 = v5;
        a1[1] = v6;
        v7 = a1 + 1;
        v8 = a1 + 2;
      }
      if (v3 >= v6)
        goto LABEL_20;
LABEL_19:
      *v7 = v3;
      *v8 = v6;
LABEL_20:
      v22 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v23 = 0;
      for (i = 12; ; i += 4)
      {
        v25 = *v22;
        v26 = *v4;
        if (*v22 < v26)
          break;
LABEL_23:
        v4 = v22++;
        if (v22 == a2)
          return 1;
      }
      v27 = i;
      do
      {
        *(int *)((char *)a1 + v27) = v26;
        v28 = v27 - 4;
        if (v27 == 4)
        {
          *a1 = v25;
          if (++v23 != 8)
            goto LABEL_23;
          return v22 + 1 == a2;
        }
        v26 = *(int *)((char *)a1 + v27 - 8);
        v27 -= 4;
      }
      while (v25 < v26);
      *(int *)((char *)a1 + v28) = v25;
      if (++v23 != 8)
        goto LABEL_23;
      return v22 + 1 == a2;
  }
}

operations_research::glop::DualEdgeNorms *operations_research::glop::DualEdgeNorms::DualEdgeNorms(operations_research::glop::DualEdgeNorms *this, const operations_research::glop::BasisFactorization *a2)
{
  operations_research::glop::DualEdgeNorms::Stats *v4;

  v4 = operations_research::glop::DualEdgeNorms::Stats::Stats(this);
  operations_research::glop::GlopParameters::GlopParameters((uint64_t)v4 + 320, 0);
  *((_QWORD *)this + 77) = a2;
  *((_QWORD *)this + 78) = 0;
  *((_QWORD *)this + 80) = 0;
  *((_QWORD *)this + 79) = 0;
  *((_BYTE *)this + 648) = 1;
  return this;
}

void sub_22D9F5874(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 240) = off_24F97FEB0;
  if (*(char *)(v1 + 271) < 0)
    operator delete(*(void **)(v1 + 248));
  operations_research::glop::DualEdgeNorms::DualEdgeNorms(v1);
  operations_research::StatsGroup::~StatsGroup((operations_research::StatsGroup *)v1);
  _Unwind_Resume(a1);
}

uint64_t operations_research::glop::DualEdgeNorms::NeedsBasisRefactorization(operations_research::glop::DualEdgeNorms *this)
{
  return *((unsigned __int8 *)this + 648);
}

uint64_t operations_research::glop::DualEdgeNorms::Clear(uint64_t this)
{
  *(_BYTE *)(this + 648) = 1;
  return this;
}

void operations_research::glop::DualEdgeNorms::ResizeOnNewRows(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v7 = 0x3FF0000000000000;
  v2 = a2;
  v3 = *(_QWORD *)(a1 + 624);
  v4 = (*(_QWORD *)(a1 + 632) - v3) >> 3;
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<double>::__append(a1 + 624, v6, &v7);
  }
  else if (!v5)
  {
    *(_QWORD *)(a1 + 632) = v3 + 8 * v2;
  }
}

uint64_t operations_research::glop::DualEdgeNorms::GetEdgeSquaredNorms(operations_research::glop::DualEdgeNorms *this)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if (*((_BYTE *)this + 648))
  {
    v2 = **(int **)(*((_QWORD *)this + 77) + 464);
    v8 = 0;
    v3 = *((_QWORD *)this + 78);
    v4 = (*((_QWORD *)this + 79) - v3) >> 3;
    if (v2 <= v4)
    {
      if (v2 < v4)
        *((_QWORD *)this + 79) = v3 + 8 * v2;
    }
    else
    {
      std::vector<double>::__append((uint64_t)this + 624, v2 - v4, &v8);
    }
    if ((int)v2 >= 1)
    {
      v5 = 0;
      do
      {
        operations_research::glop::BasisFactorization::DualEdgeSquaredNorm(*((_QWORD *)this + 77), v5);
        *(_QWORD *)(*((_QWORD *)this + 78) + 8 * v5++) = v6;
      }
      while (v2 != v5);
    }
    *((_BYTE *)this + 648) = 0;
  }
  return (uint64_t)this + 624;
}

void operations_research::glop::DualEdgeNorms::UpdateDataOnBasisPermutation(uint64_t a1, uint64_t *a2)
{
  if (!*(_BYTE *)(a1 + 648))
    operations_research::glop::ApplyColumnPermutationToRowIndexedVector<operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double>>(a2, (char **)(a1 + 624));
}

void operations_research::glop::ApplyColumnPermutationToRowIndexedVector<operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double>>(uint64_t *a1, char **a2)
{
  char *v4;
  char *v5;
  int64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *__p;

  __p = 0;
  v5 = *a2;
  v4 = a2[1];
  v6 = v4 - *a2;
  v7 = v6 >> 3;
  if (v4 == *a2)
  {
    v8 = 0;
    v9 = 0;
    v10 = a1[1] - *a1;
    if ((v10 & 0x3FFFFFFFCLL) == 0)
      goto LABEL_14;
  }
  else
  {
    if (v6 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(v4 - *a2);
    v9 = (uint64_t *)&v8[8 * v7];
    __p = v8;
    memcpy(v8, v5, v6);
    v10 = a1[1] - *a1;
    if ((v10 & 0x3FFFFFFFCLL) == 0)
      goto LABEL_14;
  }
  v11 = (int)(((char *)v9 - v8) >> 3);
  if (v11 <= v7)
  {
    if (v11 < v7)
      a2[1] = &v5[8 * v11];
  }
  else
  {
    std::vector<double>::__append((uint64_t)a2, v11 - v7, v9 - 1);
    v8 = __p;
  }
  if ((int)(v10 >> 2) >= 1)
  {
    v12 = 0;
    v13 = *a1;
    v14 = *a2;
    do
    {
      *(_QWORD *)&v14[8 * *(int *)(v13 + 4 * v12)] = *(_QWORD *)&v8[8 * v12];
      ++v12;
    }
    while ((v10 >> 2) != v12);
    goto LABEL_15;
  }
LABEL_14:
  if (v8)
LABEL_15:
    operator delete(v8);
}

void sub_22D9F5B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::glop::DualEdgeNorms::UpdateBeforeBasisPivot(uint64_t a1, int a2, int a3, uint64_t *a4, char **a5)
{
  uint64_t *v9;
  const operations_research::glop::ScatteredColumn *v10;
  double v11;
  double v12;
  double v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  double v17;
  double v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  _BYTE v30[16];

  if (!*(_BYTE *)(a1 + 648))
  {
    v9 = (uint64_t *)operations_research::glop::BasisFactorization::RightSolveForTau(*(operations_research::glop::BasisFactorization **)(a1 + 616), a5);
    v11 = operations_research::glop::PreciseSquaredNorm((operations_research::glop *)a5, v10);
    v12 = sqrt(v11);
    v13 = sqrt(*(double *)(*(_QWORD *)(a1 + 624) + 8 * a3));
    operations_research::RatioDistribution::Add(a1 + 160, (v12 - v13) / v12);
    if (fabs((v12 - v13) / v12) <= *(double *)(a1 + 384))
    {
      v16 = *a4;
      v17 = *(double *)(*a4 + 8 * a3);
      v18 = v11 / (v17 * v17);
      v19 = (int *)a4[4];
      v20 = a4[5] - (_QWORD)v19;
      v21 = *(_QWORD *)(a1 + 624);
      if (v20 >= 1)
      {
        v22 = (unint64_t)v20 >> 2;
        v23 = *v9;
        if (v22 <= 1)
          v22 = 1;
        v24 = -2.0 / v17;
        do
        {
          v26 = *v19++;
          v25 = v26;
          v27 = 8 * v26;
          v28 = *(double *)(v21 + 8 * v26)
              + *(double *)(v16 + 8 * v26) * (v24 * *(double *)(v23 + 8 * v26) + *(double *)(v16 + 8 * v26) * v18);
          if (v28 < 0.0001 && v25 != a3)
            v28 = 0.0001;
          *(double *)(v21 + v27) = v28;
          --v22;
        }
        while (v22);
      }
      *(double *)(v21 + 8 * a3) = v18;
    }
    else
    {
      if (*operations_research::glop::DualEdgeNorms::UpdateBeforeBasisPivot(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::ScatteredColumn const&,operations_research::glop::ScatteredRow const&)::vlocal__[0] >= 1
        && (operations_research::glop::DualEdgeNorms::UpdateBeforeBasisPivot(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::ScatteredColumn const&,operations_research::glop::ScatteredRow const&)::vlocal__[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)operations_research::glop::DualEdgeNorms::UpdateBeforeBasisPivot(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::ScatteredColumn const&,operations_research::glop::ScatteredRow const&)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/glop/dual_edge_norms.cc", (const char *)1)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)v30, (google::glog_internal_namespace_ *)"./ortools/glop/dual_edge_norms.cc", 70);
        v14 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v30);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Recomputing edge norms: ", 24);
        v15 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" vs ", 4);
        std::ostream::operator<<();
        google::LogMessage::~LogMessage((google::LogMessage *)v30);
      }
      *(_BYTE *)(a1 + 648) = 1;
    }
  }
}

void sub_22D9F5D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

operations_research::glop::DualEdgeNorms::Stats *operations_research::glop::DualEdgeNorms::Stats::Stats(operations_research::glop::DualEdgeNorms::Stats *this)
{
  __int128 v3[2];

  strcpy((char *)this, "DualEdgeNorms");
  *((_BYTE *)this + 23) = 13;
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = (char *)this + 64;
  BYTE7(v3[1]) = 11;
  strcpy((char *)v3, "tau_density");
  *(_QWORD *)operations_research::DistributionStat::DistributionStat((operations_research::glop::DualEdgeNorms::Stats *)((char *)this + 80), v3, this) = &unk_24F987C70;
  if (SBYTE7(v3[1]) < 0)
    operator delete(*(void **)&v3[0]);
  BYTE7(v3[1]) = 19;
  strcpy((char *)v3, "edge_norms_accuracy");
  *(_QWORD *)operations_research::DistributionStat::DistributionStat((operations_research::glop::DualEdgeNorms::Stats *)((char *)this + 160), v3, this) = &unk_24F987CD0;
  if (SBYTE7(v3[1]) < 0)
    operator delete(*(void **)&v3[0]);
  BYTE7(v3[1]) = 19;
  strcpy((char *)v3, "lower_bounded_norms");
  *(_QWORD *)operations_research::DistributionStat::DistributionStat((operations_research::glop::DualEdgeNorms::Stats *)((char *)this + 240), v3, this) = &unk_24F987D30;
  if (SBYTE7(v3[1]) < 0)
    operator delete(*(void **)&v3[0]);
  return this;
}

void sub_22D9F5ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (a14 < 0)
    operator delete(__p);
  *(_QWORD *)(v14 + 160) = off_24F97FEB0;
  if (*(char *)(v14 + 191) < 0)
    operator delete(*(void **)(v14 + 168));
  *(_QWORD *)(v14 + 80) = off_24F97FEB0;
  if (*(char *)(v14 + 111) < 0)
    operator delete(*(void **)(v14 + 88));
  operations_research::StatsGroup::~StatsGroup((operations_research::StatsGroup *)v14);
  _Unwind_Resume(a1);
}

uint64_t operations_research::glop::EnteringVariable::EnteringVariable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char __p[17];
  char v8;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  operations_research::glop::GlopParameters::GlopParameters(a1 + 32, 0);
  *(_DWORD *)(a1 + 328) = 0;
  strcpy((char *)(a1 + 336), "EnteringVariable");
  *(_BYTE *)(a1 + 359) = 16;
  *(_DWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = a1 + 400;
  v8 = 16;
  strcpy(__p, "num_perfect_ties");
  *(_QWORD *)operations_research::DistributionStat::DistributionStat((operations_research::Stat *)(a1 + 416), (__int128 *)__p, (operations_research::StatsGroup *)(a1 + 336)) = &unk_24F987D30;
  if (v8 < 0)
    operator delete(*(void **)__p);
  *(_DWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 528) = a1 + 496;
  *(_QWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_DWORD *)(a1 + 536) = -1;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  return a1;
}

void sub_22D9F606C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  operations_research::glop::GlopParameters *v14;
  operations_research::StatsGroup *v15;

  if (a14 < 0)
    operator delete(__p);
  operations_research::StatsGroup::~StatsGroup(v15);
  operations_research::glop::GlopParameters::~GlopParameters(v14);
  _Unwind_Resume(a1);
}

void operations_research::glop::EnteringVariable::PrimalChooseEnteringColumn(operations_research::glop::EnteringVariable *this@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  unint64_t v7;
  _QWORD *v8;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v11;
  _QWORD *v12;
  std::string *v13;
  std::string::size_type v14;
  _QWORD *v15;
  std::string v16;
  _BYTE v17[16];
  std::string __p;

  if (!a2)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_22DCE5C00;
    strcpy(__p.__r_.__value_.__l.__data_, "entering_col must not be null.");
    google::LogMessage::LogMessage((google::LogMessage *)v17, (google::glog_internal_namespace_ *)"./ortools/glop/entering_variable.cc", 39, 2);
    v8 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v17);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)p_p, size);
    google::LogMessage::~LogMessage((google::LogMessage *)v17);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v16, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v16 = __p;
    operations_research::glop::Status::Status(a3, 3, (__int128 *)&v16);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v16.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      return;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  v6 = *((_DWORD *)this + 82);
  switch(v6)
  {
    case 2:
      operations_research::glop::EnteringVariable::NormalizedChooseEnteringColumn<false>((uint64_t)this, a2);
      goto LABEL_21;
    case 1:
      operations_research::glop::EnteringVariable::NormalizedChooseEnteringColumn<true>((uint64_t)this, a2);
      goto LABEL_21;
    case 0:
      if (!*((_BYTE *)this + 129))
      {
        if (*((_BYTE *)this + 128))
          operations_research::glop::EnteringVariable::DantzigChooseEnteringColumn<true,false>((uint64_t)this, a2);
        else
          operations_research::glop::EnteringVariable::DantzigChooseEnteringColumn<false,false>((uint64_t)this, a2);
        goto LABEL_21;
      }
      if (*((_DWORD *)this + 124) != *(_DWORD *)(**(_QWORD **)this + 4))
        operations_research::glop::EnteringVariable::ResetUnusedColumns((operations_research::glop::VariablesInfo **)this);
      if (*((_BYTE *)this + 128))
      {
        operations_research::glop::EnteringVariable::DantzigChooseEnteringColumn<true,true>((uint64_t)this, a2);
        v7 = *a2;
        if ((_DWORD)v7 != -1)
        {
LABEL_10:
          *(_QWORD *)(*((_QWORD *)this + 63) + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v7);
LABEL_21:
          operations_research::glop::Status::Status(a3);
          return;
        }
      }
      else
      {
        operations_research::glop::EnteringVariable::DantzigChooseEnteringColumn<false,true>((uint64_t)this, a2);
        v7 = *a2;
        if ((_DWORD)v7 != -1)
          goto LABEL_10;
      }
      operations_research::glop::EnteringVariable::ResetUnusedColumns((operations_research::glop::VariablesInfo **)this);
      if (*((_BYTE *)this + 128))
        operations_research::glop::EnteringVariable::DantzigChooseEnteringColumn<true,true>((uint64_t)this, a2);
      else
        operations_research::glop::EnteringVariable::DantzigChooseEnteringColumn<false,true>((uint64_t)this, a2);
      goto LABEL_21;
  }
  google::LogMessage::LogMessage((google::LogMessage *)v17, (google::glog_internal_namespace_ *)"./ortools/glop/entering_variable.cc", 82, 2);
  v11 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v17);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Unknown pricing rule: ", 22);
  operations_research::ProtoEnumToString<operations_research::glop::GlopParameters_PricingRule>((operations_research::glop *)*((unsigned int *)this + 82), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &__p;
  else
    v13 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v14 = __p.__r_.__value_.__l.__size_;
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)". Using steepest edge.", 22);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  google::LogMessage::~LogMessage((google::LogMessage *)v17);
  operations_research::glop::EnteringVariable::NormalizedChooseEnteringColumn<true>((uint64_t)this, a2);
  operations_research::glop::Status::Status(a3);
}

void sub_22D9F63D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

operations_research::glop::VariablesInfo **operations_research::glop::EnteringVariable::ResetUnusedColumns(operations_research::glop::VariablesInfo **this)
{
  operations_research::glop::VariablesInfo *v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  operations_research::glop::VariablesInfo *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t IsBasicBitRow;
  unint64_t v11;
  operations_research::glop::VariablesInfo *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v2 = *this;
  v3 = *(unsigned int *)(*(_QWORD *)v2 + 4);
  if (*((_DWORD *)this + 124) != (_DWORD)v3)
  {
    v4 = v3 & ~((int)v3 >> 31);
    *((_DWORD *)this + 124) = v4;
    v5 = (v4 + 63) >> 6;
    v6 = this[63];
    v7 = this[64] - v6;
    v8 = v7 >> 3;
    v19 = 0;
    if (v5 <= v7 >> 3)
    {
      if (v5 < v7 >> 3)
        this[64] = (operations_research::glop::VariablesInfo *)((char *)v6 + 8 * v5);
    }
    else
    {
      std::vector<unsigned long long>::__append((uint64_t)(this + 63), v5 - (v7 >> 3), &v19);
      v6 = this[63];
    }
    if (v5 >= v8)
      v9 = v8;
    else
      v9 = v5;
    bzero(v6, 8 * v9);
    v2 = *this;
  }
  IsBasicBitRow = operations_research::glop::VariablesInfo::GetIsBasicBitRow(v2);
  if ((int)v3 >= 1)
  {
    v11 = 0;
    v12 = this[63];
    v13 = *(_QWORD *)(IsBasicBitRow + 8);
    do
    {
      v15 = v11 >> 6;
      v16 = *((_QWORD *)v12 + (v11 >> 6));
      v17 = 1 << v11;
      if ((v16 & (1 << v11)) != 0)
      {
        v14 = v16 & ~v17;
      }
      else
      {
        if ((*(_QWORD *)(v13 + 8 * v15) & v17) != 0)
          goto LABEL_14;
        v14 = v16 | v17;
      }
      *((_QWORD *)v12 + v15) = v14;
LABEL_14:
      ++v11;
    }
    while (v3 != v11);
  }
  return this + 62;
}

uint64_t operations_research::glop::EnteringVariable::DantzigChooseEnteringColumn<true,true>(uint64_t a1, int *a2)
{
  char *MatrixColumnNorms;
  uint64_t result;
  int v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  double v28;
  double v29;
  int v30;
  uint64_t v31;

  MatrixColumnNorms = operations_research::glop::PrimalEdgeNorms::GetMatrixColumnNorms(*(operations_research::glop::PrimalEdgeNorms **)(a1 + 24));
  result = operations_research::glop::ReducedCosts::GetReducedCosts(*(operations_research::glop::ReducedCosts **)(a1 + 16));
  v6 = -1;
  *a2 = -1;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(unint64_t **)(v7 + 840);
  v9 = *(unint64_t **)(v7 + 848);
  if (v8 == v9)
  {
    v12 = 0;
    v11 = 0;
    goto LABEL_18;
  }
  v10 = *v8;
  if (*v8)
  {
    v11 = 0;
  }
  else
  {
    v13 = (unint64_t)((char *)v9 - (char *)v8) >> 3;
    v14 = (int)(v9 - v8);
    if ((int)v13 <= 1)
      v15 = 1;
    else
      v15 = (unint64_t)((char *)v9 - (char *)v8) >> 3;
    if (v14 <= 1)
      v14 = 1;
    v16 = v14 - 1;
    while (v16 != v10)
    {
      v17 = v10 + 1;
      if (v8[++v10])
      {
        v15 = v17;
        break;
      }
    }
    if (v15 == (_DWORD)v13)
    {
      v12 = 0;
      v11 = 0;
      v6 = -1;
      goto LABEL_18;
    }
    v10 = v8[v15];
    v11 = v15 << 6;
  }
  v6 = __clz(__rbit64(v10)) & 0x3F | v11;
  v12 = (v10 - 1) & v10;
LABEL_18:
  v19 = *(_DWORD *)(v7 + 872);
  if (v6 != v19)
  {
    v20 = *(_QWORD *)(a1 + 504);
    v21 = *(_QWORD *)result;
    v22 = *(_QWORD *)MatrixColumnNorms;
    v23 = (char *)v9 - (char *)v8;
    v24 = (unint64_t)((char *)v9 - (char *)v8) >> 3;
    v25 = (int)(v23 >> 3);
    v26 = 0.0;
    while (1)
    {
      if (((*(_QWORD *)(v20 + (((unint64_t)v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
      {
        v27 = 8 * v6;
        v28 = fabs(*(double *)(v21 + v27));
        v29 = *(double *)(v22 + v27);
        if (v28 > v26 * v29)
        {
          *a2 = v6;
          v26 = v28 / v29;
        }
      }
      if (v12)
        goto LABEL_22;
      result = (uint64_t)v11 >> 6;
      if ((v11 >> 6) + 1 > (int)v24)
        v30 = (v11 >> 6) + 1;
      else
        v30 = v24;
      v31 = result + 1;
      while (v31 < v25)
      {
        result = v8[v31++];
        if (result)
        {
          v30 = v31 - 1;
          break;
        }
      }
      if (v30 == (_DWORD)v24)
      {
        v12 = 0;
        v6 = -1;
        if (v19 == -1)
          return result;
      }
      else
      {
        v12 = v8[v30];
        v11 = v30 << 6;
LABEL_22:
        v6 = (__clz(__rbit64(v12)) & 0x3F) + v11;
        result = v12 - 1;
        v12 &= v12 - 1;
        if (v6 == v19)
          return result;
      }
    }
  }
  return result;
}

uint64_t operations_research::glop::EnteringVariable::DantzigChooseEnteringColumn<false,true>(uint64_t a1, int *a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  int v26;
  uint64_t v27;

  result = operations_research::glop::ReducedCosts::GetReducedCosts(*(operations_research::glop::ReducedCosts **)(a1 + 16));
  v5 = -1;
  *a2 = -1;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(unint64_t **)(v6 + 840);
  v8 = *(unint64_t **)(v6 + 848);
  if (v7 == v8)
  {
    v11 = 0;
    v10 = 0;
    goto LABEL_18;
  }
  v9 = *v7;
  if (*v7)
  {
    v10 = 0;
  }
  else
  {
    v12 = (unint64_t)((char *)v8 - (char *)v7) >> 3;
    v13 = (int)(v8 - v7);
    if ((int)v12 <= 1)
      v14 = 1;
    else
      v14 = (unint64_t)((char *)v8 - (char *)v7) >> 3;
    if (v13 <= 1)
      v13 = 1;
    v15 = v13 - 1;
    while (v15 != v9)
    {
      v16 = v9 + 1;
      if (v7[++v9])
      {
        v14 = v16;
        break;
      }
    }
    if (v14 == (_DWORD)v12)
    {
      v11 = 0;
      v10 = 0;
      v5 = -1;
      goto LABEL_18;
    }
    v9 = v7[v14];
    v10 = v14 << 6;
  }
  v5 = __clz(__rbit64(v9)) & 0x3F | v10;
  v11 = (v9 - 1) & v9;
LABEL_18:
  v18 = *(_DWORD *)(v6 + 872);
  if (v5 != v18)
  {
    v19 = *(_QWORD *)(a1 + 504);
    v20 = *(_QWORD *)result;
    v21 = (char *)v8 - (char *)v7;
    v22 = (unint64_t)((char *)v8 - (char *)v7) >> 3;
    v23 = (int)(v21 >> 3);
    v24 = 0.0;
    while (1)
    {
      result = *(_QWORD *)(v19 + (((unint64_t)v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v5;
      if ((result & 1) != 0)
      {
        v25 = fabs(*(double *)(v20 + 8 * v5));
        if (v25 > v24)
        {
          *a2 = v5;
          v24 = v25;
        }
      }
      if (v11)
        goto LABEL_22;
      if ((v10 >> 6) + 1 > (int)v22)
        v26 = (v10 >> 6) + 1;
      else
        v26 = v22;
      v27 = ((uint64_t)v10 >> 6) + 1;
      while (v27 < v23)
      {
        if (v7[v27++])
        {
          v26 = v27 - 1;
          break;
        }
      }
      if (v26 == (_DWORD)v22)
      {
        v11 = 0;
        v5 = -1;
        if (v18 == -1)
          return result;
      }
      else
      {
        v11 = v7[v26];
        v10 = v26 << 6;
LABEL_22:
        v5 = (__clz(__rbit64(v11)) & 0x3F) + v10;
        v11 &= v11 - 1;
        if (v5 == v18)
          return result;
      }
    }
  }
  return result;
}

uint64_t *operations_research::glop::EnteringVariable::DantzigChooseEnteringColumn<true,false>(uint64_t a1, int *a2)
{
  char *MatrixColumnNorms;
  uint64_t *result;
  int v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  int v29;
  uint64_t v30;

  MatrixColumnNorms = operations_research::glop::PrimalEdgeNorms::GetMatrixColumnNorms(*(operations_research::glop::PrimalEdgeNorms **)(a1 + 24));
  result = (uint64_t *)operations_research::glop::ReducedCosts::GetReducedCosts(*(operations_research::glop::ReducedCosts **)(a1 + 16));
  v6 = -1;
  *a2 = -1;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(unint64_t **)(v7 + 840);
  v9 = *(unint64_t **)(v7 + 848);
  if (v8 == v9)
  {
    v12 = 0;
    v11 = 0;
    goto LABEL_18;
  }
  v10 = *v8;
  if (*v8)
  {
    v11 = 0;
  }
  else
  {
    v13 = (unint64_t)((char *)v9 - (char *)v8) >> 3;
    v14 = (int)(v9 - v8);
    if ((int)v13 <= 1)
      v15 = 1;
    else
      v15 = (unint64_t)((char *)v9 - (char *)v8) >> 3;
    if (v14 <= 1)
      v14 = 1;
    v16 = v14 - 1;
    while (v16 != v10)
    {
      v17 = v10 + 1;
      if (v8[++v10])
      {
        v15 = v17;
        break;
      }
    }
    if (v15 == (_DWORD)v13)
    {
      v12 = 0;
      v11 = 0;
      v6 = -1;
      goto LABEL_18;
    }
    v10 = v8[v15];
    v11 = v15 << 6;
  }
  v6 = __clz(__rbit64(v10)) & 0x3F | v11;
  v12 = (v10 - 1) & v10;
LABEL_18:
  v19 = *(_DWORD *)(v7 + 872);
  if (v6 != v19)
  {
    v20 = *result;
    v21 = *(_QWORD *)MatrixColumnNorms;
    v22 = (char *)v9 - (char *)v8;
    v23 = (unint64_t)((char *)v9 - (char *)v8) >> 3;
    v24 = (int)(v22 >> 3);
    v25 = 0.0;
    while (1)
    {
      v26 = 8 * v6;
      v27 = fabs(*(double *)(v20 + v26));
      v28 = *(double *)(v21 + v26);
      if (v27 > v25 * v28)
      {
        *a2 = v6;
        v25 = v27 / v28;
      }
      if (v12)
        goto LABEL_22;
      if ((v11 >> 6) + 1 > (int)v23)
        v29 = (v11 >> 6) + 1;
      else
        v29 = v23;
      v30 = ((uint64_t)v11 >> 6) + 1;
      while (v30 < v24)
      {
        if (v8[v30++])
        {
          v29 = v30 - 1;
          break;
        }
      }
      if (v29 == (_DWORD)v23)
      {
        v12 = 0;
        v6 = -1;
        if (v19 == -1)
          return result;
      }
      else
      {
        v12 = v8[v29];
        v11 = v29 << 6;
LABEL_22:
        v6 = (__clz(__rbit64(v12)) & 0x3F) + v11;
        v12 &= v12 - 1;
        if (v6 == v19)
          return result;
      }
    }
  }
  return result;
}

uint64_t *operations_research::glop::EnteringVariable::DantzigChooseEnteringColumn<false,false>(uint64_t a1, int *a2)
{
  uint64_t *result;
  int v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  int v25;
  uint64_t v26;

  result = (uint64_t *)operations_research::glop::ReducedCosts::GetReducedCosts(*(operations_research::glop::ReducedCosts **)(a1 + 16));
  v5 = -1;
  *a2 = -1;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(unint64_t **)(v6 + 840);
  v8 = *(unint64_t **)(v6 + 848);
  if (v7 == v8)
  {
    v11 = 0;
    v10 = 0;
    goto LABEL_18;
  }
  v9 = *v7;
  if (*v7)
  {
    v10 = 0;
  }
  else
  {
    v12 = (unint64_t)((char *)v8 - (char *)v7) >> 3;
    v13 = (int)(v8 - v7);
    if ((int)v12 <= 1)
      v14 = 1;
    else
      v14 = (unint64_t)((char *)v8 - (char *)v7) >> 3;
    if (v13 <= 1)
      v13 = 1;
    v15 = v13 - 1;
    while (v15 != v9)
    {
      v16 = v9 + 1;
      if (v7[++v9])
      {
        v14 = v16;
        break;
      }
    }
    if (v14 == (_DWORD)v12)
    {
      v11 = 0;
      v10 = 0;
      v5 = -1;
      goto LABEL_18;
    }
    v9 = v7[v14];
    v10 = v14 << 6;
  }
  v5 = __clz(__rbit64(v9)) & 0x3F | v10;
  v11 = (v9 - 1) & v9;
LABEL_18:
  v18 = *(_DWORD *)(v6 + 872);
  if (v5 != v18)
  {
    v19 = *result;
    v20 = (char *)v8 - (char *)v7;
    v21 = (unint64_t)((char *)v8 - (char *)v7) >> 3;
    v22 = (int)(v20 >> 3);
    v23 = 0.0;
    while (1)
    {
      v24 = fabs(*(double *)(v19 + 8 * v5));
      if (v24 > v23)
      {
        *a2 = v5;
        v23 = v24;
      }
      if (v11)
        goto LABEL_22;
      if ((v10 >> 6) + 1 > (int)v21)
        v25 = (v10 >> 6) + 1;
      else
        v25 = v21;
      v26 = ((uint64_t)v10 >> 6) + 1;
      while (v26 < v22)
      {
        if (v7[v26++])
        {
          v25 = v26 - 1;
          break;
        }
      }
      if (v25 == (_DWORD)v21)
      {
        v11 = 0;
        v5 = -1;
        if (v18 == -1)
          return result;
      }
      else
      {
        v11 = v7[v25];
        v10 = v25 << 6;
LABEL_22:
        v5 = (__clz(__rbit64(v11)) & 0x3F) + v10;
        v11 &= v11 - 1;
        if (v5 == v18)
          return result;
      }
    }
  }
  return result;
}

_QWORD *operations_research::glop::EnteringVariable::NormalizedChooseEnteringColumn<true>(uint64_t a1, int *a2)
{
  uint64_t v3;
  _QWORD *EdgeSquaredNorms;
  _QWORD *result;
  int v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  double v23;
  uint64_t v24;
  double v25;
  double v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  int *v44;
  unint64_t v45;
  char *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  _BYTE *v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  int64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _BYTE *v63;
  int *v64;
  unint64_t v65;
  char *v66;
  int *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  char *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  _QWORD *v76;
  int *v77;
  int v78;
  void **v79;
  unint64_t v80;
  _DWORD v81[2];

  v3 = a1;
  EdgeSquaredNorms = (_QWORD *)operations_research::glop::PrimalEdgeNorms::GetEdgeSquaredNorms(*(operations_research::glop::PrimalEdgeNorms **)(a1 + 24));
  result = (_QWORD *)operations_research::glop::ReducedCosts::GetReducedCosts(*(operations_research::glop::ReducedCosts **)(v3 + 16));
  v6 = -1;
  *a2 = -1;
  v7 = *(char **)(v3 + 552);
  *(_QWORD *)(v3 + 560) = v7;
  v8 = *(_QWORD *)(v3 + 16);
  v9 = *(unint64_t **)(v8 + 840);
  v10 = *(unint64_t **)(v8 + 848);
  if (v9 == v10)
  {
    v13 = 0;
    v12 = 0;
    v14 = *(_DWORD *)(v8 + 872);
    if (v14 == -1)
      return result;
  }
  else
  {
    v11 = *v9;
    if (*v9)
    {
      v12 = 0;
      goto LABEL_19;
    }
    v15 = 0;
    v16 = (char *)v10 - (char *)v9;
    v17 = v16 >> 3;
    v18 = (int)((uint64_t)v16 >> 3);
    if ((int)(v16 >> 3) <= 1)
      v19 = 1;
    else
      v19 = v16 >> 3;
    if (v18 <= 1)
      v18 = 1;
    v20 = v18 - 1;
    while (v20 != v15)
    {
      v21 = v15 + 1;
      if (v9[++v15])
      {
        v19 = v21;
        break;
      }
    }
    if (v19 != (_DWORD)v17)
    {
      v11 = v9[v19];
      v12 = v19 << 6;
LABEL_19:
      v6 = __clz(__rbit64(v11)) & 0x3F | v12;
      v13 = (v11 - 1) & v11;
      v14 = *(_DWORD *)(v8 + 872);
      if (v6 == v14)
        return result;
      goto LABEL_20;
    }
    v13 = 0;
    v12 = 0;
    v6 = -1;
    v14 = *(_DWORD *)(v8 + 872);
    if (v14 == -1)
      return result;
  }
LABEL_20:
  v79 = (void **)(v3 + 552);
  v23 = 0.0;
  v76 = result;
  v77 = a2;
  v75 = *(_QWORD *)(v3 + 16);
  v78 = v14;
  do
  {
    while (1)
    {
      v24 = 8 * v6;
      v25 = *(double *)(*result + v24) * *(double *)(*result + v24);
      v26 = *(double *)(*EdgeSquaredNorms + v24);
      if (v25 < v23 * v26)
        goto LABEL_21;
      if (v25 != v23 * v26)
      {
        v7 = *(char **)(v3 + 552);
        *(_QWORD *)(v3 + 560) = v7;
        *a2 = v6;
        v23 = v25 / v26;
        goto LABEL_21;
      }
      v27 = *(_QWORD *)(v3 + 568);
      if ((unint64_t)v7 >= v27)
      {
        v36 = EdgeSquaredNorms;
        v37 = v3;
        v38 = (char *)*v79;
        v39 = v7 - (_BYTE *)*v79;
        v40 = v39 >> 2;
        v41 = (v39 >> 2) + 1;
        if (v41 >> 62)
          goto LABEL_90;
        v42 = v27 - (_QWORD)v38;
        if (v42 >> 1 > v41)
          v41 = v42 >> 1;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
          v41 = 0x3FFFFFFFFFFFFFFFLL;
        v80 = v41;
        if (v41)
        {
          if (v41 >> 62)
            goto LABEL_91;
          v43 = operator new(4 * v41);
          v44 = (int *)&v43[4 * v40];
          *v44 = v6;
          v28 = (uint64_t)(v44 + 1);
          if (v7 != v38)
            goto LABEL_47;
        }
        else
        {
          v43 = 0;
          v44 = (int *)(4 * v40);
          *(_DWORD *)(4 * v40) = v6;
          v28 = 4 * v40 + 4;
          if (v7 != v38)
          {
LABEL_47:
            v45 = v7 - 4 - v38;
            if (v45 < 0xBC
              || &v43[v39 - 4 - (v45 & 0xFFFFFFFFFFFFFFFCLL)] > &v43[v39 - 4]
              || &v7[-(v45 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4
              || (unint64_t)(v7 - v43 - v39) < 0x20)
            {
              v46 = v7;
              v3 = v37;
              EdgeSquaredNorms = v36;
              v14 = v78;
            }
            else
            {
              v48 = (v45 >> 2) + 1;
              v49 = 4 * (v48 & 0x7FFFFFFFFFFFFFF8);
              v46 = &v7[-v49];
              v44 = (int *)((char *)v44 - v49);
              v50 = &v43[4 * v40 - 16];
              v51 = v7 - 16;
              v52 = v48 & 0x7FFFFFFFFFFFFFF8;
              v3 = v37;
              do
              {
                v53 = *(_OWORD *)v51;
                *(v50 - 1) = *((_OWORD *)v51 - 1);
                *v50 = v53;
                v50 -= 2;
                v51 -= 32;
                v52 -= 8;
              }
              while (v52);
              EdgeSquaredNorms = v36;
              v14 = v78;
              if (v48 == (v48 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_53;
            }
            do
            {
              v47 = *((_DWORD *)v46 - 1);
              v46 -= 4;
              *--v44 = v47;
            }
            while (v46 != v38);
LABEL_53:
            *(_QWORD *)(v3 + 552) = v44;
            *(_QWORD *)(v3 + 560) = v28;
            *(_QWORD *)(v3 + 568) = &v43[4 * v80];
            v8 = v75;
            if (v38)
              operator delete(v38);
            result = v76;
            a2 = v77;
            goto LABEL_56;
          }
        }
        v3 = v37;
        EdgeSquaredNorms = v36;
        v14 = v78;
        goto LABEL_53;
      }
      *(_DWORD *)v7 = v6;
      v28 = (uint64_t)(v7 + 4);
LABEL_56:
      *(_QWORD *)(v3 + 560) = v28;
      v7 = (char *)v28;
LABEL_21:
      if (!v13)
        break;
LABEL_22:
      v6 = (__clz(__rbit64(v13)) & 0x3F) + v12;
      v13 &= v13 - 1;
      if (v6 == v14)
        goto LABEL_64;
    }
    v29 = *(_QWORD *)(v8 + 840);
    v30 = *(_QWORD *)(v8 + 848) - v29;
    v31 = (unint64_t)v30 >> 3;
    v32 = (int)(v30 >> 3);
    if ((v12 >> 6) + 1 > (int)v31)
      v33 = (v12 >> 6) + 1;
    else
      v33 = v31;
    v34 = ((uint64_t)v12 >> 6) + 1;
    while (v34 < v32)
    {
      if (*(_QWORD *)(v29 + 8 * v34++))
      {
        v33 = v34 - 1;
        break;
      }
    }
    if (v33 != (_DWORD)v31)
    {
      v13 = *(_QWORD *)(v29 + 8 * v33);
      v12 = v33 << 6;
      goto LABEL_22;
    }
    v13 = 0;
    v6 = -1;
  }
  while (v14 != -1);
LABEL_64:
  v54 = *v79;
  if (*v79 != v7)
  {
    v55 = *(_QWORD *)(v3 + 568);
    if ((unint64_t)v7 < v55)
    {
      *(_DWORD *)v7 = *a2;
      v56 = v7 + 4;
      goto LABEL_84;
    }
    v57 = v3;
    v58 = v7 - v54;
    v59 = (v7 - v54) >> 2;
    v60 = v59 + 1;
    if ((unint64_t)(v59 + 1) >> 62)
LABEL_90:
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v61 = v55 - (_QWORD)v54;
    if (v61 >> 1 > v60)
      v60 = v61 >> 1;
    if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
      v62 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v62 = v60;
    if (v62)
    {
      if (v62 >> 62)
LABEL_91:
        std::__throw_bad_array_new_length[abi:ne180100]();
      v63 = operator new(4 * v62);
      v64 = (int *)&v63[4 * v59];
      *v64 = *a2;
      v65 = v58 - 4;
      if ((unint64_t)(v58 - 4) < 0x2C)
      {
LABEL_79:
        v66 = v7;
        v67 = v64;
        v3 = v57;
        goto LABEL_80;
      }
    }
    else
    {
      v63 = 0;
      v64 = (int *)(4 * v59);
      *(_DWORD *)(4 * v59) = *a2;
      v65 = v58 - 4;
      if ((unint64_t)(v58 - 4) < 0x2C)
        goto LABEL_79;
    }
    if ((unint64_t)(v54 - v63) < 0x20)
      goto LABEL_79;
    v69 = (v65 >> 2) + 1;
    v70 = 4 * (v69 & 0x7FFFFFFFFFFFFFF8);
    v66 = &v7[-v70];
    v67 = &v64[v70 / 0xFFFFFFFFFFFFFFFCLL];
    v71 = &v63[4 * v59 - 16];
    v72 = v7 - 16;
    v73 = v69 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v74 = *(_OWORD *)v72;
      *(v71 - 1) = *((_OWORD *)v72 - 1);
      *v71 = v74;
      v71 -= 2;
      v72 -= 32;
      v73 -= 8;
    }
    while (v73);
    v3 = v57;
    if (v69 != (v69 & 0x7FFFFFFFFFFFFFF8))
    {
      do
      {
LABEL_80:
        v68 = *((_DWORD *)v66 - 1);
        v66 -= 4;
        *--v67 = v68;
      }
      while (v66 != v54);
    }
    *(_QWORD *)(v3 + 552) = v67;
    v56 = (char *)(v64 + 1);
    *(_QWORD *)(v3 + 560) = v64 + 1;
    *(_QWORD *)(v3 + 568) = &v63[4 * v62];
    if (v54)
    {
      operator delete(v54);
      v54 = *v79;
    }
    else
    {
      v54 = v67;
    }
LABEL_84:
    *(_QWORD *)(v3 + 560) = v56;
    v81[0] = 0;
    v81[1] = ((unint64_t)(v56 - v54) >> 2) - 1;
    result = (_QWORD *)std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)v81, *(_QWORD *)(v3 + 8), v81);
    *a2 = *(_DWORD *)(*(_QWORD *)(v3 + 552) + 4 * (int)result);
  }
  return result;
}

_QWORD *operations_research::glop::EnteringVariable::NormalizedChooseEnteringColumn<false>(uint64_t a1, int *a2)
{
  uint64_t v3;
  _QWORD *DevexWeights;
  _QWORD *result;
  int v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  double v23;
  uint64_t v24;
  double v25;
  double v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  int *v44;
  unint64_t v45;
  char *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  _BYTE *v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  int64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _BYTE *v63;
  int *v64;
  unint64_t v65;
  char *v66;
  int *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  char *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  _QWORD *v76;
  int *v77;
  int v78;
  void **v79;
  unint64_t v80;
  _DWORD v81[2];

  v3 = a1;
  DevexWeights = (_QWORD *)operations_research::glop::PrimalEdgeNorms::GetDevexWeights(*(operations_research::glop::PrimalEdgeNorms **)(a1 + 24));
  result = (_QWORD *)operations_research::glop::ReducedCosts::GetReducedCosts(*(operations_research::glop::ReducedCosts **)(v3 + 16));
  v6 = -1;
  *a2 = -1;
  v7 = *(char **)(v3 + 552);
  *(_QWORD *)(v3 + 560) = v7;
  v8 = *(_QWORD *)(v3 + 16);
  v9 = *(unint64_t **)(v8 + 840);
  v10 = *(unint64_t **)(v8 + 848);
  if (v9 == v10)
  {
    v13 = 0;
    v12 = 0;
    v14 = *(_DWORD *)(v8 + 872);
    if (v14 == -1)
      return result;
  }
  else
  {
    v11 = *v9;
    if (*v9)
    {
      v12 = 0;
      goto LABEL_19;
    }
    v15 = 0;
    v16 = (char *)v10 - (char *)v9;
    v17 = v16 >> 3;
    v18 = (int)((uint64_t)v16 >> 3);
    if ((int)(v16 >> 3) <= 1)
      v19 = 1;
    else
      v19 = v16 >> 3;
    if (v18 <= 1)
      v18 = 1;
    v20 = v18 - 1;
    while (v20 != v15)
    {
      v21 = v15 + 1;
      if (v9[++v15])
      {
        v19 = v21;
        break;
      }
    }
    if (v19 != (_DWORD)v17)
    {
      v11 = v9[v19];
      v12 = v19 << 6;
LABEL_19:
      v6 = __clz(__rbit64(v11)) & 0x3F | v12;
      v13 = (v11 - 1) & v11;
      v14 = *(_DWORD *)(v8 + 872);
      if (v6 == v14)
        return result;
      goto LABEL_20;
    }
    v13 = 0;
    v12 = 0;
    v6 = -1;
    v14 = *(_DWORD *)(v8 + 872);
    if (v14 == -1)
      return result;
  }
LABEL_20:
  v79 = (void **)(v3 + 552);
  v23 = 0.0;
  v76 = result;
  v77 = a2;
  v75 = *(_QWORD *)(v3 + 16);
  v78 = v14;
  do
  {
    while (1)
    {
      v24 = 8 * v6;
      v25 = fabs(*(double *)(*result + v24));
      v26 = *(double *)(*DevexWeights + v24);
      if (v25 < v23 * v26)
        goto LABEL_21;
      if (v25 != v23 * v26)
      {
        v7 = *(char **)(v3 + 552);
        *(_QWORD *)(v3 + 560) = v7;
        *a2 = v6;
        v23 = v25 / v26;
        goto LABEL_21;
      }
      v27 = *(_QWORD *)(v3 + 568);
      if ((unint64_t)v7 >= v27)
      {
        v36 = DevexWeights;
        v37 = v3;
        v38 = (char *)*v79;
        v39 = v7 - (_BYTE *)*v79;
        v40 = v39 >> 2;
        v41 = (v39 >> 2) + 1;
        if (v41 >> 62)
          goto LABEL_90;
        v42 = v27 - (_QWORD)v38;
        if (v42 >> 1 > v41)
          v41 = v42 >> 1;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
          v41 = 0x3FFFFFFFFFFFFFFFLL;
        v80 = v41;
        if (v41)
        {
          if (v41 >> 62)
            goto LABEL_91;
          v43 = operator new(4 * v41);
          v44 = (int *)&v43[4 * v40];
          *v44 = v6;
          v28 = (uint64_t)(v44 + 1);
          if (v7 != v38)
            goto LABEL_47;
        }
        else
        {
          v43 = 0;
          v44 = (int *)(4 * v40);
          *(_DWORD *)(4 * v40) = v6;
          v28 = 4 * v40 + 4;
          if (v7 != v38)
          {
LABEL_47:
            v45 = v7 - 4 - v38;
            if (v45 < 0xBC
              || &v43[v39 - 4 - (v45 & 0xFFFFFFFFFFFFFFFCLL)] > &v43[v39 - 4]
              || &v7[-(v45 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4
              || (unint64_t)(v7 - v43 - v39) < 0x20)
            {
              v46 = v7;
              v3 = v37;
              DevexWeights = v36;
              v14 = v78;
            }
            else
            {
              v48 = (v45 >> 2) + 1;
              v49 = 4 * (v48 & 0x7FFFFFFFFFFFFFF8);
              v46 = &v7[-v49];
              v44 = (int *)((char *)v44 - v49);
              v50 = &v43[4 * v40 - 16];
              v51 = v7 - 16;
              v52 = v48 & 0x7FFFFFFFFFFFFFF8;
              v3 = v37;
              do
              {
                v53 = *(_OWORD *)v51;
                *(v50 - 1) = *((_OWORD *)v51 - 1);
                *v50 = v53;
                v50 -= 2;
                v51 -= 32;
                v52 -= 8;
              }
              while (v52);
              DevexWeights = v36;
              v14 = v78;
              if (v48 == (v48 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_53;
            }
            do
            {
              v47 = *((_DWORD *)v46 - 1);
              v46 -= 4;
              *--v44 = v47;
            }
            while (v46 != v38);
LABEL_53:
            *(_QWORD *)(v3 + 552) = v44;
            *(_QWORD *)(v3 + 560) = v28;
            *(_QWORD *)(v3 + 568) = &v43[4 * v80];
            v8 = v75;
            if (v38)
              operator delete(v38);
            result = v76;
            a2 = v77;
            goto LABEL_56;
          }
        }
        v3 = v37;
        DevexWeights = v36;
        v14 = v78;
        goto LABEL_53;
      }
      *(_DWORD *)v7 = v6;
      v28 = (uint64_t)(v7 + 4);
LABEL_56:
      *(_QWORD *)(v3 + 560) = v28;
      v7 = (char *)v28;
LABEL_21:
      if (!v13)
        break;
LABEL_22:
      v6 = (__clz(__rbit64(v13)) & 0x3F) + v12;
      v13 &= v13 - 1;
      if (v6 == v14)
        goto LABEL_64;
    }
    v29 = *(_QWORD *)(v8 + 840);
    v30 = *(_QWORD *)(v8 + 848) - v29;
    v31 = (unint64_t)v30 >> 3;
    v32 = (int)(v30 >> 3);
    if ((v12 >> 6) + 1 > (int)v31)
      v33 = (v12 >> 6) + 1;
    else
      v33 = v31;
    v34 = ((uint64_t)v12 >> 6) + 1;
    while (v34 < v32)
    {
      if (*(_QWORD *)(v29 + 8 * v34++))
      {
        v33 = v34 - 1;
        break;
      }
    }
    if (v33 != (_DWORD)v31)
    {
      v13 = *(_QWORD *)(v29 + 8 * v33);
      v12 = v33 << 6;
      goto LABEL_22;
    }
    v13 = 0;
    v6 = -1;
  }
  while (v14 != -1);
LABEL_64:
  v54 = *v79;
  if (*v79 != v7)
  {
    v55 = *(_QWORD *)(v3 + 568);
    if ((unint64_t)v7 < v55)
    {
      *(_DWORD *)v7 = *a2;
      v56 = v7 + 4;
      goto LABEL_84;
    }
    v57 = v3;
    v58 = v7 - v54;
    v59 = (v7 - v54) >> 2;
    v60 = v59 + 1;
    if ((unint64_t)(v59 + 1) >> 62)
LABEL_90:
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v61 = v55 - (_QWORD)v54;
    if (v61 >> 1 > v60)
      v60 = v61 >> 1;
    if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
      v62 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v62 = v60;
    if (v62)
    {
      if (v62 >> 62)
LABEL_91:
        std::__throw_bad_array_new_length[abi:ne180100]();
      v63 = operator new(4 * v62);
      v64 = (int *)&v63[4 * v59];
      *v64 = *a2;
      v65 = v58 - 4;
      if ((unint64_t)(v58 - 4) < 0x2C)
      {
LABEL_79:
        v66 = v7;
        v67 = v64;
        v3 = v57;
        goto LABEL_80;
      }
    }
    else
    {
      v63 = 0;
      v64 = (int *)(4 * v59);
      *(_DWORD *)(4 * v59) = *a2;
      v65 = v58 - 4;
      if ((unint64_t)(v58 - 4) < 0x2C)
        goto LABEL_79;
    }
    if ((unint64_t)(v54 - v63) < 0x20)
      goto LABEL_79;
    v69 = (v65 >> 2) + 1;
    v70 = 4 * (v69 & 0x7FFFFFFFFFFFFFF8);
    v66 = &v7[-v70];
    v67 = &v64[v70 / 0xFFFFFFFFFFFFFFFCLL];
    v71 = &v63[4 * v59 - 16];
    v72 = v7 - 16;
    v73 = v69 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v74 = *(_OWORD *)v72;
      *(v71 - 1) = *((_OWORD *)v72 - 1);
      *v71 = v74;
      v71 -= 2;
      v72 -= 32;
      v73 -= 8;
    }
    while (v73);
    v3 = v57;
    if (v69 != (v69 & 0x7FFFFFFFFFFFFFF8))
    {
      do
      {
LABEL_80:
        v68 = *((_DWORD *)v66 - 1);
        v66 -= 4;
        *--v67 = v68;
      }
      while (v66 != v54);
    }
    *(_QWORD *)(v3 + 552) = v67;
    v56 = (char *)(v64 + 1);
    *(_QWORD *)(v3 + 560) = v64 + 1;
    *(_QWORD *)(v3 + 568) = &v63[4 * v62];
    if (v54)
    {
      operator delete(v54);
      v54 = *v79;
    }
    else
    {
      v54 = v67;
    }
LABEL_84:
    *(_QWORD *)(v3 + 560) = v56;
    v81[0] = 0;
    v81[1] = ((unint64_t)(v56 - v54) >> 2) - 1;
    result = (_QWORD *)std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)v81, *(_QWORD *)(v3 + 8), v81);
    *a2 = *(_DWORD *)(*(_QWORD *)(v3 + 552) + 4 * (int)result);
  }
  return result;
}

void operations_research::ProtoEnumToString<operations_research::glop::GlopParameters_PricingRule>(operations_research::glop *a1@<X0>, std::string *a2@<X8>)
{
  google::protobuf::EnumDescriptor *v4;
  uint64_t ValueByNumber;
  char *v6;
  __int128 *v7;
  __int128 v8;
  operations_research::glop *v9;
  _QWORD **v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[2];
  _BYTE v16[32];
  _QWORD v17[7];

  v17[6] = *MEMORY[0x24BDAC8D0];
  v4 = (google::protobuf::EnumDescriptor *)operations_research::glop::GlopParameters_PricingRule_descriptor(a1);
  ValueByNumber = google::protobuf::EnumDescriptor::FindValueByNumber(v4, (int)a1);
  if (ValueByNumber)
  {
    v7 = *(__int128 **)ValueByNumber;
    if (*(char *)(*(_QWORD *)ValueByNumber + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v8;
    }
  }
  else
  {
    v17[0] = "Invalid enum value of: ";
    v17[1] = 23;
    v9 = (operations_research::glop *)absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((uint64_t)a1, v16, v6);
    v15[0] = v16;
    v15[1] = v9 - (operations_research::glop *)v16;
    v14[0] = " for enum type: ";
    v14[1] = 16;
    v10 = (_QWORD **)operations_research::glop::GlopParameters_PricingRule_descriptor(v9);
    v11 = *v10;
    v12 = *((unsigned __int8 *)*v10 + 23);
    if ((v12 & 0x80u) != 0)
    {
      v11 = (_QWORD *)**v10;
      v12 = (*v10)[1];
    }
    v13[0] = v11;
    v13[1] = v12;
    absl::lts_2020_02_25::StrCat((uint64_t)v17, (uint64_t)v15, (uint64_t)v14, (uint64_t)v13, a2);
  }
}

void operations_research::glop::EnteringVariable::DualChooseEnteringColumn(operations_research::glop::UpdateRow *this@<X1>, uint64_t a2@<X0>, int **a3@<X2>, int *a4@<X3>, double *a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  _QWORD *Coefficients;
  _QWORD *ReducedCosts;
  _QWORD *NonZeroPositions;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  double v25;
  uint64_t CanDecreaseBitRow;
  uint64_t NonBasicBoxedVariables;
  double v28;
  uint64_t v29;
  int *v30;
  int *v31;
  double v32;
  double *v33;
  int v34;
  double v35;
  unint64_t v36;
  uint64_t v37;
  double v40;
  double *v41;
  unint64_t v42;
  double v43;
  double *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  double v50;
  double v51;
  unint64_t v52;
  double *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  double v57;
  double v58;
  double *v59;
  double *v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  double *v69;
  int *v70;
  double *v71;
  _QWORD *v72;
  _QWORD *v73;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v76;
  std::string *v77;
  std::string::size_type v78;
  double v79;
  double v80;
  double v81;
  uint64_t v82;
  __int128 *v83;
  uint64_t v84;
  double v85;
  int v86;
  double v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  double v91;
  char *v92;
  unint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  _BYTE *v101;
  int *v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  _BYTE *v110;
  int *v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  _OWORD *v117;
  char *v118;
  uint64_t v119;
  __int128 v120;
  int v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  _OWORD *v126;
  char *v127;
  uint64_t v128;
  __int128 v129;
  int v130;
  char *v131;
  char *v132;
  char *v133;
  unint64_t v134;
  char *v135;
  int *v136;
  uint64_t v137;
  int v138;
  void *v139;
  int64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  _BYTE *v145;
  int *v146;
  char *v147;
  unint64_t v148;
  uint64_t v149;
  char *v150;
  _OWORD *v151;
  char *v152;
  uint64_t v153;
  __int128 v154;
  int v155;
  operations_research::glop::Status *v156;
  double *v158;
  _QWORD *v160;
  uint64_t v161;
  double **v162;
  uint64_t CanIncreaseBitRow;
  void **v164;
  std::string v165;
  std::string v166;
  _BYTE v167[16];
  std::string __p;

  if (!a4)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_22DCE5C00;
    strcpy(__p.__r_.__value_.__l.__data_, "entering_col must not be null.");
    google::LogMessage::LogMessage((google::LogMessage *)v167, (google::glog_internal_namespace_ *)"./ortools/glop/entering_variable.cc", 93, 2);
    v73 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v167);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)p_p, size);
    google::LogMessage::~LogMessage((google::LogMessage *)v167);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v166, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v166 = __p;
    operations_research::glop::Status::Status(a6, 3, (__int128 *)&v166);
    if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
    {
      v139 = (void *)v166.__r_.__value_.__r.__words[0];
LABEL_171:
      operator delete(v139);
    }
LABEL_172:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  if (!a5)
  {
    strcpy((char *)&__p, "step must not be null.");
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 22;
    google::LogMessage::LogMessage((google::LogMessage *)v167, (google::glog_internal_namespace_ *)"./ortools/glop/entering_variable.cc", 94, 2);
    v76 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v167);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v77 = &__p;
    else
      v77 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v78 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v78 = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)v77, v78);
    google::LogMessage::~LogMessage((google::LogMessage *)v167);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v165, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v165 = __p;
    operations_research::glop::Status::Status(a6, 3, (__int128 *)&v165);
    if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
    {
      v139 = (void *)v165.__r_.__value_.__r.__words[0];
      goto LABEL_171;
    }
    goto LABEL_172;
  }
  Coefficients = (_QWORD *)operations_research::glop::UpdateRow::GetCoefficients(this);
  ReducedCosts = (_QWORD *)operations_research::glop::ReducedCosts::GetReducedCosts(*(operations_research::glop::ReducedCosts **)(a2 + 16));
  v162 = (double **)(a2 + 576);
  *(_QWORD *)(a2 + 584) = *(_QWORD *)(a2 + 576);
  NonZeroPositions = (_QWORD *)operations_research::glop::UpdateRow::GetNonZeroPositions(this);
  v15 = NonZeroPositions[1] - *NonZeroPositions;
  v16 = v15 >> 2;
  v17 = *(_BYTE **)(a2 + 576);
  v160 = ReducedCosts;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 592) - (_QWORD)v17) >> 3) < v15 >> 2)
  {
    if ((unint64_t)v15 >= 0x2AAAAAAAAAAAAAA9)
LABEL_200:
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v18 = *(_BYTE **)(a2 + 584);
    v19 = 24 * v16;
    v20 = (char *)operator new(24 * v16);
    v21 = &v20[24 * ((v18 - v17) / 24)];
    v22 = v21;
    if (v18 != v17)
    {
      v23 = &v20[24 * ((v18 - v17) / 24)];
      do
      {
        v24 = *(_OWORD *)(v18 - 24);
        v22 = v23 - 24;
        *((_QWORD *)v23 - 1) = *((_QWORD *)v18 - 1);
        *(_OWORD *)(v23 - 24) = v24;
        v18 -= 24;
        v23 -= 24;
      }
      while (v18 != v17);
    }
    *(_QWORD *)(a2 + 576) = v22;
    *(_QWORD *)(a2 + 584) = v21;
    *(_QWORD *)(a2 + 592) = &v20[v19];
    ReducedCosts = v160;
    if (v17)
      operator delete(v17);
  }
  v158 = a5;
  v156 = (operations_research::glop::Status *)a6;
  v25 = *(double *)(a2 + 120);
  CanDecreaseBitRow = operations_research::glop::VariablesInfo::GetCanDecreaseBitRow(*(operations_research::glop::VariablesInfo **)a2);
  CanIncreaseBitRow = operations_research::glop::VariablesInfo::GetCanIncreaseBitRow(*(operations_research::glop::VariablesInfo **)a2);
  NonBasicBoxedVariables = operations_research::glop::VariablesInfo::GetNonBasicBoxedVariables(*(operations_research::glop::VariablesInfo **)a2);
  v28 = *(double *)(a2 + 136) * *(double *)(*(_QWORD *)(a2 + 16) + 824);
  v29 = operations_research::glop::UpdateRow::GetNonZeroPositions(this);
  v30 = *(int **)v29;
  v31 = *(int **)(v29 + 8);
  v161 = NonBasicBoxedVariables;
  if (*(int **)v29 != v31)
  {
    v32 = 1.79769313e308;
    do
    {
      v34 = *v30;
      if (a7 <= 0.0)
        v35 = -*(double *)(*Coefficients + 8 * *v30);
      else
        v35 = *(double *)(*Coefficients + 8 * v34);
      v36 = (unint64_t)v34 >> 6;
      v37 = 1 << v34;
      if ((*(_QWORD *)(*(_QWORD *)(CanDecreaseBitRow + 8) + 8 * v36) & (1 << v34)) == 0 || v35 <= v25)
      {
        if ((*(_QWORD *)(*(_QWORD *)(CanIncreaseBitRow + 8) + 8 * v36) & v37) == 0 || v35 >= -v25)
          goto LABEL_14;
        v40 = *(double *)(*ReducedCosts + 8 * v34);
        v35 = -v35;
        if ((*(_QWORD *)(*(_QWORD *)(NonBasicBoxedVariables + 8) + 8 * v36) & v37) != 0)
        {
          v41 = *(double **)(a2 + 584);
          v42 = *(_QWORD *)(a2 + 592);
          v43 = v40 / v35;
          if ((unint64_t)v41 >= v42)
            goto LABEL_30;
        }
        else
        {
          if (v40 > v32 * v35)
            goto LABEL_14;
          v58 = (v28 + v40) / v35;
          if (v58 >= v32)
            v58 = v32;
          v32 = fmax(v58, 0.0);
          v41 = *(double **)(a2 + 584);
          v42 = *(_QWORD *)(a2 + 592);
          v43 = v40 / v35;
          if ((unint64_t)v41 >= v42)
          {
LABEL_30:
            v44 = *v162;
            v45 = 0xAAAAAAAAAAAAAAABLL * (v41 - *v162);
            v46 = v45 + 1;
            if (v45 + 1 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_200;
            v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - (_QWORD)v44) >> 3);
            if (2 * v47 > v46)
              v46 = 2 * v47;
            if (v47 >= 0x555555555555555)
              v48 = 0xAAAAAAAAAAAAAAALL;
            else
              v48 = v46;
            if (v48)
            {
              if (v48 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_201;
              v49 = (char *)operator new(24 * v48);
            }
            else
            {
              v49 = 0;
            }
            v59 = (double *)&v49[24 * v45];
            *(_DWORD *)v59 = v34;
            v59[1] = v43;
            v59[2] = v35;
            v60 = v59;
            if (v41 == v44)
              goto LABEL_70;
            NonBasicBoxedVariables = v161;
            do
            {
              v62 = *(_OWORD *)(v41 - 3);
              *(v60 - 1) = *(v41 - 1);
              *(_OWORD *)(v60 - 3) = v62;
              v60 -= 3;
              v41 -= 3;
            }
            while (v41 != v44);
LABEL_69:
            v41 = *v162;
LABEL_71:
            *(_QWORD *)(a2 + 576) = v60;
            v33 = v59 + 3;
            *(_QWORD *)(a2 + 584) = v59 + 3;
            *(_QWORD *)(a2 + 592) = &v49[24 * v48];
            if (v41)
              operator delete(v41);
            ReducedCosts = v160;
            goto LABEL_13;
          }
        }
      }
      else
      {
        v50 = *(double *)(*ReducedCosts + 8 * v34);
        v51 = -v50;
        if ((*(_QWORD *)(*(_QWORD *)(NonBasicBoxedVariables + 8) + 8 * v36) & v37) != 0)
        {
          v41 = *(double **)(a2 + 584);
          v52 = *(_QWORD *)(a2 + 592);
          v43 = v51 / v35;
          if ((unint64_t)v41 >= v52)
            goto LABEL_41;
        }
        else
        {
          if (v32 * v35 < v51)
            goto LABEL_14;
          v57 = (v28 - v50) / v35;
          if (v57 >= v32)
            v57 = v32;
          v32 = fmax(v57, 0.0);
          v41 = *(double **)(a2 + 584);
          v52 = *(_QWORD *)(a2 + 592);
          v43 = v51 / v35;
          if ((unint64_t)v41 >= v52)
          {
LABEL_41:
            v53 = *v162;
            v54 = 0xAAAAAAAAAAAAAAABLL * (v41 - *v162);
            v55 = v54 + 1;
            if (v54 + 1 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_200;
            v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - (_QWORD)v53) >> 3);
            if (2 * v56 > v55)
              v55 = 2 * v56;
            if (v56 >= 0x555555555555555)
              v48 = 0xAAAAAAAAAAAAAAALL;
            else
              v48 = v55;
            if (v48)
            {
              if (v48 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_201;
              v49 = (char *)operator new(24 * v48);
            }
            else
            {
              v49 = 0;
            }
            v59 = (double *)&v49[24 * v54];
            *(_DWORD *)v59 = v34;
            v59[1] = v43;
            v59[2] = v35;
            v60 = v59;
            if (v41 != v53)
            {
              NonBasicBoxedVariables = v161;
              do
              {
                v61 = *(_OWORD *)(v41 - 3);
                *(v60 - 1) = *(v41 - 1);
                *(_OWORD *)(v60 - 3) = v61;
                v60 -= 3;
                v41 -= 3;
              }
              while (v41 != v53);
              goto LABEL_69;
            }
LABEL_70:
            NonBasicBoxedVariables = v161;
            goto LABEL_71;
          }
        }
      }
      *(_DWORD *)v41 = v34;
      v33 = v41 + 3;
      v41[1] = v43;
      v41[2] = v35;
LABEL_13:
      *(_QWORD *)(a2 + 584) = v33;
LABEL_14:
      ++v30;
    }
    while (v30 != v31);
  }
  v63 = *(_QWORD *)(a2 + 576);
  v64 = *(_QWORD *)(a2 + 584);
  v65 = v64 - v63;
  if (v64 - v63 < 25)
  {
    v70 = a4;
    v71 = v158;
    v72 = a3;
  }
  else
  {
    v66 = v65 / 24;
    v67 = (unint64_t)(v65 / 24 - 2) >> 1;
    v68 = v67 + 1;
    v69 = (double *)(v63 + 24 * v67);
    v70 = a4;
    v71 = v158;
    v72 = a3;
    do
    {
      std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::glop::EnteringVariable::ColWithRatio *>>(v63, (uint64_t)&__p, v66, v69);
      v69 -= 3;
      --v68;
    }
    while (v68);
    v63 = *(_QWORD *)(a2 + 576);
    v64 = *(_QWORD *)(a2 + 584);
  }
  *v70 = -1;
  v72[1] = *v72;
  *(_QWORD *)(a2 + 560) = *(_QWORD *)(a2 + 552);
  if (v63 == v64)
    goto LABEL_163;
  v164 = (void **)(a2 + 552);
  v79 = fabs(a7);
  v80 = -1.0;
  v81 = 1.79769313e308;
  do
  {
    v85 = *(double *)(v63 + 8);
    if (v85 > v81)
      break;
    v86 = *(_DWORD *)v63;
    v87 = *(double *)(v63 + 16);
    if (v79 > v25
      && ((*(_QWORD *)(*(_QWORD *)(NonBasicBoxedVariables + 8) + (((unint64_t)v86 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v86) & 1) != 0)
    {
      v79 = v79
          - (*(double *)(**(_QWORD **)(*(_QWORD *)a2 + 16) + 8 * v86)
           - *(double *)(**(_QWORD **)(*(_QWORD *)a2 + 8) + 8 * v86))
          * v87;
      if (v79 > v25)
      {
        v89 = (char *)v72[1];
        v88 = v72[2];
        if ((unint64_t)v89 < v88)
        {
          *(_DWORD *)v89 = v86;
          v90 = (uint64_t)(v89 + 4);
LABEL_159:
          v72[1] = v90;
          v83 = *(__int128 **)(a2 + 576);
          v84 = *(_QWORD *)(a2 + 584);
          v82 = 0xAAAAAAAAAAAAAAABLL * ((v84 - (uint64_t)v83) >> 3);
          goto LABEL_99;
        }
        v104 = (char *)*v72;
        v105 = (uint64_t)&v89[-*v72];
        v106 = v105 >> 2;
        v107 = (v105 >> 2) + 1;
        if (v107 >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v108 = v88 - (_QWORD)v104;
        if (v108 >> 1 > v107)
          v107 = v108 >> 1;
        if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFFCLL)
          v109 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v109 = v107;
        if (v109)
        {
          if (v109 >> 62)
            goto LABEL_201;
          v110 = operator new(4 * v109);
          v111 = (int *)&v110[4 * v106];
          *v111 = v86;
          v90 = (uint64_t)(v111 + 1);
          if (v89 != v104)
          {
LABEL_136:
            v112 = v89 - 4 - v104;
            if (v112 < 0x2C)
            {
              v71 = v158;
              goto LABEL_155;
            }
            v122 = v89 - &v110[v105];
            v71 = v158;
            if (v122 < 0x20)
              goto LABEL_206;
            v123 = (v112 >> 2) + 1;
            v124 = 4 * (v123 & 0x7FFFFFFFFFFFFFF8);
            v125 = &v89[-v124];
            v111 = (int *)((char *)v111 - v124);
            v126 = &v110[4 * v106 - 16];
            v127 = v89 - 16;
            v128 = v123 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v129 = *(_OWORD *)v127;
              *(v126 - 1) = *((_OWORD *)v127 - 1);
              *v126 = v129;
              v126 -= 2;
              v127 -= 32;
              v128 -= 8;
            }
            while (v128);
            v89 = v125;
            if (v123 != (v123 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_206:
              do
              {
LABEL_155:
                v130 = *((_DWORD *)v89 - 1);
                v89 -= 4;
                *--v111 = v130;
              }
              while (v89 != v104);
            }
LABEL_156:
            v131 = &v110[4 * v109];
            v72 = a3;
            *a3 = v111;
            a3[1] = (int *)v90;
            a3[2] = (int *)v131;
            if (v104)
              operator delete(v104);
            NonBasicBoxedVariables = v161;
            goto LABEL_159;
          }
        }
        else
        {
          v110 = 0;
          v111 = (int *)(4 * v106);
          *(_DWORD *)(4 * v106) = v86;
          v90 = 4 * v106 + 4;
          if (v89 != v104)
            goto LABEL_136;
        }
        v71 = v158;
        goto LABEL_156;
      }
    }
    if (v87 >= v80)
    {
      v91 = v85 + v28 / v87;
      if (v91 >= v81)
        v91 = v81;
      if (v91 >= 0.0)
        v81 = v91;
      else
        v81 = 0.0;
      if (v87 == v80 && v85 == *v71)
      {
        v92 = *(char **)(a2 + 560);
        v93 = *(_QWORD *)(a2 + 568);
        if ((unint64_t)v92 < v93)
        {
          *(_DWORD *)v92 = v86;
          v94 = (uint64_t)(v92 + 4);
LABEL_150:
          *(_QWORD *)(a2 + 560) = v94;
          v63 = *(_QWORD *)(a2 + 576);
          NonBasicBoxedVariables = v161;
          goto LABEL_98;
        }
        v95 = (char *)*v164;
        v96 = v92 - (_BYTE *)*v164;
        v97 = v96 >> 2;
        v98 = (v96 >> 2) + 1;
        if (v98 >> 62)
          goto LABEL_202;
        v99 = v93 - (_QWORD)v95;
        if (v99 >> 1 > v98)
          v98 = v99 >> 1;
        if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFFCLL)
          v100 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v100 = v98;
        if (v100)
        {
          if (v100 >> 62)
            goto LABEL_201;
          v101 = operator new(4 * v100);
          v102 = (int *)&v101[4 * v97];
          *v102 = v86;
          v94 = (uint64_t)(v102 + 1);
          if (v92 != v95)
          {
LABEL_125:
            v103 = v92 - 4 - v95;
            if (v103 < 0x2C)
            {
              v70 = a4;
              goto LABEL_146;
            }
            v113 = v92 - &v101[v96];
            v70 = a4;
            if (v113 < 0x20)
              goto LABEL_207;
            v114 = (v103 >> 2) + 1;
            v115 = 4 * (v114 & 0x7FFFFFFFFFFFFFF8);
            v116 = &v92[-v115];
            v102 = (int *)((char *)v102 - v115);
            v117 = &v101[4 * v97 - 16];
            v118 = v92 - 16;
            v119 = v114 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v120 = *(_OWORD *)v118;
              *(v117 - 1) = *((_OWORD *)v118 - 1);
              *v117 = v120;
              v117 -= 2;
              v118 -= 32;
              v119 -= 8;
            }
            while (v119);
            v92 = v116;
            if (v114 != (v114 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_207:
              do
              {
LABEL_146:
                v121 = *((_DWORD *)v92 - 1);
                v92 -= 4;
                *--v102 = v121;
              }
              while (v92 != v95);
            }
LABEL_147:
            *(_QWORD *)(a2 + 552) = v102;
            *(_QWORD *)(a2 + 560) = v94;
            *(_QWORD *)(a2 + 568) = &v101[4 * v100];
            if (v95)
            {
              operator delete(v95);
              v64 = *(_QWORD *)(a2 + 584);
            }
            v71 = v158;
            v72 = a3;
            goto LABEL_150;
          }
        }
        else
        {
          v101 = 0;
          v102 = (int *)(4 * v97);
          *(_DWORD *)(4 * v97) = v86;
          v94 = 4 * v97 + 4;
          if (v92 != v95)
            goto LABEL_125;
        }
        v70 = a4;
        goto LABEL_147;
      }
      *(_QWORD *)(a2 + 560) = *(_QWORD *)(a2 + 552);
      *v70 = v86;
      *v71 = v85;
      v80 = v87;
    }
LABEL_98:
    v82 = 0xAAAAAAAAAAAAAAABLL * ((v64 - v63) >> 3);
    v83 = (__int128 *)v63;
    v84 = v64;
LABEL_99:
    std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__wrap_iter<operations_research::glop::EnteringVariable::ColWithRatio *>>(v83, v84, (uint64_t)&__p, v82);
    v64 = *(_QWORD *)(a2 + 584) - 24;
    *(_QWORD *)(a2 + 584) = v64;
    v63 = *(_QWORD *)(a2 + 576);
  }
  while (v63 != v64);
  v132 = *(char **)(a2 + 552);
  v133 = *(char **)(a2 + 560);
  if (v132 == v133)
  {
LABEL_163:
    v138 = *v70;
    v137 = (uint64_t)v156;
    if (v138 != -1)
      goto LABEL_196;
    goto LABEL_198;
  }
  v134 = *(_QWORD *)(a2 + 568);
  if ((unint64_t)v133 < v134)
  {
    *(_DWORD *)v133 = *v70;
    v135 = v133 + 4;
    v136 = v70;
    v137 = (uint64_t)v156;
    goto LABEL_195;
  }
  v140 = v133 - v132;
  v141 = (v133 - v132) >> 2;
  v142 = v141 + 1;
  if ((unint64_t)(v141 + 1) >> 62)
LABEL_202:
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v143 = v134 - (_QWORD)v132;
  if (v143 >> 1 > v142)
    v142 = v143 >> 1;
  if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFFCLL)
    v144 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v144 = v142;
  v137 = (uint64_t)v156;
  if (v144)
  {
    if (!(v144 >> 62))
    {
      v145 = operator new(4 * v144);
      goto LABEL_184;
    }
LABEL_201:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  v145 = 0;
LABEL_184:
  v146 = (int *)&v145[4 * v141];
  *v146 = *a4;
  if ((unint64_t)(v140 - 4) < 0x2C)
  {
    v147 = &v145[4 * v141];
    goto LABEL_190;
  }
  v147 = &v145[4 * v141];
  if ((unint64_t)(v132 - v145) < 0x20)
    goto LABEL_208;
  v148 = ((unint64_t)(v140 - 4) >> 2) + 1;
  v149 = 4 * (v148 & 0x7FFFFFFFFFFFFFF8);
  v150 = &v133[-v149];
  v147 = (char *)&v146[v149 / 0xFFFFFFFFFFFFFFFCLL];
  v151 = &v145[4 * v141 - 16];
  v152 = v133 - 16;
  v153 = v148 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v154 = *(_OWORD *)v152;
    *(v151 - 1) = *((_OWORD *)v152 - 1);
    *v151 = v154;
    v151 -= 2;
    v152 -= 32;
    v153 -= 8;
  }
  while (v153);
  v133 = v150;
  if (v148 != (v148 & 0x7FFFFFFFFFFFFFF8))
  {
LABEL_208:
    do
    {
LABEL_190:
      v155 = *((_DWORD *)v133 - 1);
      v133 -= 4;
      *((_DWORD *)v147 - 1) = v155;
      v147 -= 4;
    }
    while (v133 != v132);
  }
  *(_QWORD *)(a2 + 552) = v147;
  v135 = (char *)(v146 + 1);
  *(_QWORD *)(a2 + 560) = v146 + 1;
  *(_QWORD *)(a2 + 568) = &v145[4 * v144];
  if (v132)
  {
    operator delete(v132);
    v132 = (char *)*v164;
  }
  else
  {
    v132 = v147;
  }
  v136 = a4;
LABEL_195:
  *(_QWORD *)(a2 + 560) = v135;
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  HIDWORD(__p.__r_.__value_.__r.__words[0]) = ((unint64_t)(v135 - v132) >> 2) - 1;
  v138 = *(_DWORD *)(*(_QWORD *)(a2 + 552)
                   + 4
                   * (int)std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&__p, *(_QWORD *)(a2 + 8), &__p));
  *v136 = v138;
  if (v138 != -1)
  {
LABEL_196:
    if (*v71 <= 0.0)
      operations_research::glop::ReducedCosts::ShiftCost(*(_QWORD *)(a2 + 16), v138);
  }
LABEL_198:
  operations_research::glop::Status::Status(v137);
}

void sub_22D9F8518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,char a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::glop::EnteringVariable::DualPhaseIChooseEnteringColumn(operations_research::glop::UpdateRow *this@<X1>, uint64_t a2@<X0>, _DWORD *a3@<X2>, double *a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  _QWORD *Coefficients;
  _QWORD *ReducedCosts;
  _QWORD *NonZeroPositions;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  double v25;
  double v26;
  uint64_t v27;
  int *v28;
  int *v29;
  char *v30;
  int v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double *v37;
  unint64_t v38;
  double v39;
  double *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  double *v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  double *v55;
  double v56;
  double v57;
  int v58;
  double v59;
  double v60;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v68;
  std::string *v69;
  std::string::size_type v70;
  void *v71;
  _DWORD *v72;
  uint64_t v73;
  uint64_t CanIncreaseBitRow;
  _QWORD *v75;
  uint64_t CanDecreaseBitRow;
  void **v77;
  std::string v78;
  std::string v79;
  _BYTE v80[16];
  std::string __p;

  if (!a3)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_22DCE5C00;
    strcpy(__p.__r_.__value_.__l.__data_, "entering_col must not be null.");
    google::LogMessage::LogMessage((google::LogMessage *)v80, (google::glog_internal_namespace_ *)"./ortools/glop/entering_variable.cc", 271, 2);
    v65 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v80);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)p_p, size);
    google::LogMessage::~LogMessage((google::LogMessage *)v80);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v79, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v79 = __p;
    operations_research::glop::Status::Status(a5, 3, (__int128 *)&v79);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    {
      v71 = (void *)v79.__r_.__value_.__r.__words[0];
LABEL_82:
      operator delete(v71);
    }
LABEL_83:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  if (!a4)
  {
    strcpy((char *)&__p, "step must not be null.");
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 22;
    google::LogMessage::LogMessage((google::LogMessage *)v80, (google::glog_internal_namespace_ *)"./ortools/glop/entering_variable.cc", 272, 2);
    v68 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v80);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v69 = &__p;
    else
      v69 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v70 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v70 = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)v69, v70);
    google::LogMessage::~LogMessage((google::LogMessage *)v80);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v78, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v78 = __p;
    operations_research::glop::Status::Status(a5, 3, (__int128 *)&v78);
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    {
      v71 = (void *)v78.__r_.__value_.__r.__words[0];
      goto LABEL_82;
    }
    goto LABEL_83;
  }
  Coefficients = (_QWORD *)operations_research::glop::UpdateRow::GetCoefficients(this);
  ReducedCosts = (_QWORD *)operations_research::glop::ReducedCosts::GetReducedCosts(*(operations_research::glop::ReducedCosts **)(a2 + 16));
  v77 = (void **)(a2 + 576);
  *(_QWORD *)(a2 + 584) = *(_QWORD *)(a2 + 576);
  NonZeroPositions = (_QWORD *)operations_research::glop::UpdateRow::GetNonZeroPositions(this);
  v15 = NonZeroPositions[1] - *NonZeroPositions;
  v16 = v15 >> 2;
  v17 = *(_BYTE **)(a2 + 576);
  v75 = ReducedCosts;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 592) - (_QWORD)v17) >> 3) < v15 >> 2)
  {
    if ((unint64_t)v15 >= 0x2AAAAAAAAAAAAAA9)
LABEL_86:
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v18 = *(_BYTE **)(a2 + 584);
    v19 = 24 * v16;
    v20 = (char *)operator new(24 * v16);
    v21 = &v20[24 * ((v18 - v17) / 24)];
    v22 = v21;
    if (v18 != v17)
    {
      v23 = &v20[24 * ((v18 - v17) / 24)];
      do
      {
        v24 = *(_OWORD *)(v18 - 24);
        v22 = v23 - 24;
        *((_QWORD *)v23 - 1) = *((_QWORD *)v18 - 1);
        *(_OWORD *)(v23 - 24) = v24;
        v18 -= 24;
        v23 -= 24;
      }
      while (v18 != v17);
    }
    *(_QWORD *)(a2 + 576) = v22;
    *(_QWORD *)(a2 + 584) = v21;
    *(_QWORD *)(a2 + 592) = &v20[v19];
    ReducedCosts = v75;
    if (v17)
      operator delete(v17);
  }
  v72 = a3;
  v73 = a5;
  v25 = *(double *)(a2 + 120);
  v26 = *(double *)(*(_QWORD *)(a2 + 16) + 824);
  CanDecreaseBitRow = operations_research::glop::VariablesInfo::GetCanDecreaseBitRow(*(operations_research::glop::VariablesInfo **)a2);
  CanIncreaseBitRow = operations_research::glop::VariablesInfo::GetCanIncreaseBitRow(*(operations_research::glop::VariablesInfo **)a2);
  operations_research::glop::VariablesInfo::GetTypeRow(*(operations_research::glop::VariablesInfo **)a2);
  v27 = operations_research::glop::UpdateRow::GetNonZeroPositions(this);
  v28 = *(int **)v27;
  v29 = *(int **)(v27 + 8);
  if (*(int **)v27 != v29)
  {
    do
    {
      v31 = *v28;
      v32 = *(double *)(*Coefficients + 8 * *v28);
      v33 = fabs(v32);
      if (v33 >= v25)
      {
        v34 = -v32;
        if (a6 > 0.0)
          v34 = *(double *)(*Coefficients + 8 * v31);
        v35 = *(double *)(*ReducedCosts + 8 * v31);
        v36 = fabs(v35);
        if (v36 <= v26)
        {
          if (v34 > 0.0
            && ((*(_QWORD *)(*(_QWORD *)(CanDecreaseBitRow + 8) + (((unint64_t)v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v31) & 1) == 0
            || v34 < 0.0
            && ((*(_QWORD *)(*(_QWORD *)(CanIncreaseBitRow + 8) + (((unint64_t)v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v31) & 1) == 0)
          {
            goto LABEL_14;
          }
        }
        else if (v34 * v35 > 0.0)
        {
          goto LABEL_14;
        }
        v37 = *(double **)(a2 + 584);
        v38 = *(_QWORD *)(a2 + 592);
        v39 = v36 / v33;
        if ((unint64_t)v37 < v38)
        {
          *(_DWORD *)v37 = v31;
          v30 = (char *)(v37 + 3);
          v37[1] = v39;
          v37[2] = v33;
        }
        else
        {
          v40 = (double *)*v77;
          v41 = 0xAAAAAAAAAAAAAAABLL * (((char *)v37 - (_BYTE *)*v77) >> 3);
          v42 = v41 + 1;
          if (v41 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_86;
          v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - (_QWORD)v40) >> 3);
          if (2 * v43 > v42)
            v42 = 2 * v43;
          if (v43 >= 0x555555555555555)
            v44 = 0xAAAAAAAAAAAAAAALL;
          else
            v44 = v42;
          if (v44)
          {
            if (v44 > 0xAAAAAAAAAAAAAAALL)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v45 = (char *)operator new(24 * v44);
          }
          else
          {
            v45 = 0;
          }
          v46 = &v45[24 * v41];
          *(_DWORD *)v46 = v31;
          *((double *)v46 + 1) = v39;
          *((double *)v46 + 2) = v33;
          v47 = (double *)v46;
          if (v37 != v40)
          {
            do
            {
              v48 = *(_OWORD *)(v37 - 3);
              *(v47 - 1) = *(v37 - 1);
              *(_OWORD *)(v47 - 3) = v48;
              v47 -= 3;
              v37 -= 3;
            }
            while (v37 != v40);
            v37 = (double *)*v77;
          }
          *(_QWORD *)(a2 + 576) = v47;
          v30 = v46 + 24;
          *(_QWORD *)(a2 + 584) = v46 + 24;
          *(_QWORD *)(a2 + 592) = &v45[24 * v44];
          ReducedCosts = v75;
          if (v37)
            operator delete(v37);
        }
        *(_QWORD *)(a2 + 584) = v30;
      }
LABEL_14:
      ++v28;
    }
    while (v28 != v29);
  }
  v49 = *(_QWORD *)(a2 + 576);
  v50 = *(_QWORD *)(a2 + 584);
  v51 = v50 - v49;
  if (v50 - v49 >= 25)
  {
    v52 = v51 / 24;
    v53 = (unint64_t)(v51 / 24 - 2) >> 1;
    v54 = v53 + 1;
    v55 = (double *)(v49 + 24 * v53);
    do
    {
      std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::glop::EnteringVariable::ColWithRatio *>>(v49, (uint64_t)&__p, v52, v55);
      v55 -= 3;
      --v54;
    }
    while (v54);
    v49 = *(_QWORD *)(a2 + 576);
    v50 = *(_QWORD *)(a2 + 584);
  }
  *v72 = -1;
  *a4 = -1.0;
  if (v49 != v50)
  {
    v56 = fabs(a6);
    v57 = 0.0;
    do
    {
      v58 = *(_DWORD *)v49;
      v60 = *(double *)(v49 + 8);
      v59 = *(double *)(v49 + 16);
      if (v60 > *a4 && v59 >= v57)
      {
        *v72 = v58;
        *a4 = v60;
        v57 = v59;
      }
      v62 = v58;
      v56 = v56 - v59;
      v63 = (unint64_t)v58 >> 6;
      v64 = 1 << v58;
      if ((*(_QWORD *)(*(_QWORD *)(CanDecreaseBitRow + 8) + 8 * v63) & v64) != 0
        && (*(_QWORD *)(*(_QWORD *)(CanIncreaseBitRow + 8) + 8 * v63) & v64) != 0
        && fabs(*(double *)(*ReducedCosts + 8 * v62)) > v25)
      {
        v56 = v56 - v59;
      }
      if (v56 <= 0.0)
        break;
      std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__wrap_iter<operations_research::glop::EnteringVariable::ColWithRatio *>>((__int128 *)v49, v50, (uint64_t)&__p, 0xAAAAAAAAAAAAAAABLL * ((v50 - v49) >> 3));
      v50 = *(_QWORD *)(a2 + 584) - 24;
      *(_QWORD *)(a2 + 584) = v50;
      v49 = *(_QWORD *)(a2 + 576);
    }
    while (v49 != v50);
  }
  operations_research::glop::Status::Status(v73);
}

void sub_22D9F8C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double operations_research::glop::EnteringVariable::SetParameters(operations_research::glop::EnteringVariable *this, const operations_research::glop::GlopParameters *a2)
{
  return operations_research::glop::GlopParameters::CopyFrom((operations_research::glop::EnteringVariable *)((char *)this + 32), a2);
}

uint64_t operations_research::glop::EnteringVariable::SetPricingRule(uint64_t result, int a2)
{
  *(_DWORD *)(result + 328) = a2;
  return result;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::glop::EnteringVariable::ColWithRatio *>>(uint64_t result, uint64_t a2, uint64_t a3, double *a4)
{
  int64_t v4;
  uint64_t v5;
  __int128 *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  __int128 v16;
  __int128 v17;
  double *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;

  if (a3 >= 2)
  {
    v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - result) >> 3)))
    {
      v5 = (0x5555555555555556 * (((uint64_t)a4 - result) >> 3)) | 1;
      v6 = (__int128 *)(result + 24 * v5);
      if (0x5555555555555556 * (((uint64_t)a4 - result) >> 3) + 2 < a3)
      {
        v7 = *(double *)(result + 24 * v5 + 8);
        v8 = *((double *)v6 + 4);
        if (v7 != v8)
        {
          if (v7 <= v8)
            goto LABEL_9;
          goto LABEL_8;
        }
        v9 = *(double *)(result + 24 * v5 + 16);
        v10 = *((double *)v6 + 5);
        if (v9 != v10)
        {
          if (v9 >= v10)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (*(_DWORD *)v6 > *((_DWORD *)v6 + 6))
        {
LABEL_8:
          v6 = (__int128 *)((char *)v6 + 24);
          v5 = 0x5555555555555556 * (((uint64_t)a4 - result) >> 3) + 2;
        }
      }
LABEL_9:
      v11 = *((double *)v6 + 1);
      v12 = a4[1];
      if (v11 == v12)
      {
        v13 = *((double *)v6 + 2);
        v14 = a4[2];
        if (v13 == v14)
        {
          if (*(_DWORD *)v6 > *(_DWORD *)a4)
            return result;
        }
        else if (v13 < v14)
        {
          return result;
        }
      }
      else
      {
        if (v11 > v12)
          return result;
        v14 = a4[2];
      }
      v15 = *a4;
      v16 = *v6;
      a4[2] = *((double *)v6 + 2);
      *(_OWORD *)a4 = v16;
      if (v4 < v5)
      {
LABEL_17:
        *(double *)v6 = v15;
        *((double *)v6 + 1) = v12;
        *((double *)v6 + 2) = v14;
        return result;
      }
      while (1)
      {
        v18 = (double *)v6;
        v19 = 2 * v5;
        v5 = (2 * v5) | 1;
        v6 = (__int128 *)(result + 24 * v5);
        v20 = v19 + 2;
        if (v20 >= a3)
          goto LABEL_26;
        v21 = *(double *)(result + 24 * v5 + 8);
        v22 = *((double *)v6 + 4);
        if (v21 == v22)
        {
          v23 = *(double *)(result + 24 * v5 + 16);
          v24 = *((double *)v6 + 5);
          if (v23 == v24)
          {
            if (*(_DWORD *)v6 <= *((_DWORD *)v6 + 6))
              goto LABEL_26;
LABEL_25:
            v6 = (__int128 *)((char *)v6 + 24);
            v5 = v20;
            goto LABEL_26;
          }
          if (v23 < v24)
            goto LABEL_25;
        }
        else if (v21 > v22)
        {
          goto LABEL_25;
        }
LABEL_26:
        v25 = *((double *)v6 + 1);
        if (v25 == v12)
        {
          v26 = *((double *)v6 + 2);
          if (v26 == v14)
          {
            if (*(_DWORD *)v6 > SLODWORD(v15))
              goto LABEL_38;
          }
          else if (v26 < v14)
          {
LABEL_38:
            *v18 = v15;
            v18[1] = v12;
            v18[2] = v14;
            return result;
          }
        }
        else if (v25 > v12)
        {
          goto LABEL_38;
        }
        v17 = *v6;
        v18[2] = *((double *)v6 + 2);
        *(_OWORD *)v18 = v17;
        if (v4 < v5)
          goto LABEL_17;
      }
    }
  }
  return result;
}

__int128 *std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__wrap_iter<operations_research::glop::EnteringVariable::ColWithRatio *>>(__int128 *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v5;
  __int128 v6;
  double *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  BOOL v13;
  double v14;
  double v15;
  __int128 *v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  double *v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  double *v29;
  unint64_t v30;
  double v31;
  double v32;
  __int128 v33;
  uint64_t v34;

  if (a4 < 2)
    return result;
  v4 = 0;
  v33 = *result;
  v34 = *((_QWORD *)result + 2);
  v5 = result;
  do
  {
    v7 = (double *)v5;
    v8 = v4 + 1;
    v5 = (__int128 *)((char *)v5 + 24 * v4 + 24);
    v9 = 2 * v4;
    v4 = (2 * v4) | 1;
    v10 = v9 + 2;
    if (v10 >= a4)
      goto LABEL_4;
    v11 = v7[3 * v8 + 1];
    v12 = *((double *)v5 + 4);
    v13 = v11 <= v12;
    if (v11 != v12)
      goto LABEL_9;
    v14 = v7[3 * v8 + 2];
    v15 = *((double *)v5 + 5);
    if (v14 == v15)
    {
      v13 = *(_DWORD *)v5 <= *((_DWORD *)v5 + 6);
LABEL_9:
      if (!v13)
        goto LABEL_3;
      goto LABEL_4;
    }
    if (v14 < v15)
    {
LABEL_3:
      v5 = (__int128 *)((char *)v5 + 24);
      v4 = v10;
    }
LABEL_4:
    v6 = *v5;
    v7[2] = *((double *)v5 + 2);
    *(_OWORD *)v7 = v6;
  }
  while (v4 <= (uint64_t)((unint64_t)(a4 - 2) >> 1));
  v16 = (__int128 *)(a2 - 24);
  if (v5 == (__int128 *)(a2 - 24))
  {
    *((_QWORD *)v5 + 2) = v34;
    *v5 = v33;
    return result;
  }
  v17 = *v16;
  *((_QWORD *)v5 + 2) = *(_QWORD *)(a2 - 8);
  *v5 = v17;
  *v16 = v33;
  *(_QWORD *)(a2 - 8) = v34;
  v18 = (char *)v5 - (char *)result + 24;
  if (v18 < 25)
    return result;
  v19 = v18 / 0x18uLL - 2;
  v20 = v19 >> 1;
  v21 = (double *)result + 3 * (v19 >> 1);
  v22 = v21[1];
  v23 = *((double *)v5 + 1);
  if (v22 == v23)
  {
    v24 = *((double *)result + 3 * v20 + 2);
    v25 = *((double *)v5 + 2);
    if (v24 == v25)
    {
      if (*(_DWORD *)v21 <= *(_DWORD *)v5)
        return result;
    }
    else if (v24 >= v25)
    {
      return result;
    }
  }
  else
  {
    if (v22 <= v23)
      return result;
    v25 = *((double *)v5 + 2);
  }
  v26 = *(_QWORD *)v5;
  v27 = *(_OWORD *)v21;
  *((double *)v5 + 2) = v21[2];
  *v5 = v27;
  if (v19 < 2)
    goto LABEL_34;
  while (2)
  {
    v29 = v21;
    v30 = v20 - 1;
    v20 = (v20 - 1) >> 1;
    v21 = (double *)result + 3 * v20;
    v31 = v21[1];
    if (v31 != v23)
    {
      if (v31 <= v23)
        break;
      goto LABEL_27;
    }
    v32 = *((double *)result + 3 * v20 + 2);
    if (v32 == v25)
    {
      if (*(_DWORD *)v21 <= (int)v26)
        break;
      goto LABEL_27;
    }
    if (v32 < v25)
    {
LABEL_27:
      v28 = *(_OWORD *)v21;
      v29[2] = v21[2];
      *(_OWORD *)v29 = v28;
      if (v30 <= 1)
        goto LABEL_34;
      continue;
    }
    break;
  }
  v21 = v29;
LABEL_34:
  *(_QWORD *)v21 = v26;
  v21[1] = v23;
  v21[2] = v25;
  return result;
}

uint64_t std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;

  result = a3[1];
  if ((_DWORD)result != *a3)
  {
    v4 = result - *a3 + 1;
    if ((_DWORD)result - *a3 == -1)
    {
      v16 = *(_QWORD *)(a2 + 2496);
      v17 = (v16 + 1) % 0x270uLL;
      v18 = *(_DWORD *)(a2 + 4 * ((v16 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(a2 + 4 * v17) & 0x7FFFFFFE | *(_DWORD *)(a2 + 4 * v16) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a2 + 4 * v17) << 31) >> 31) & 0x9908B0DF;
      *(_DWORD *)(a2 + 4 * v16) = v18;
      *(_QWORD *)(a2 + 2496) = v17;
      v19 = ((v18 ^ (v18 >> 11)) << 7) & 0x9D2C5680 ^ v18 ^ (v18 >> 11);
      return (v19 << 15) & 0xEFC60000 ^ v19 ^ (((v19 << 15) & 0xEFC60000 ^ v19) >> 18);
    }
    else
    {
      v5 = __clz(v4);
      v6 = 31;
      if (((v4 << v5) & 0x7FFFFFFF) != 0)
        v6 = 32;
      v7 = v6 - v5;
      v8 = v7 >> 5;
      if ((v7 & 0x1F) != 0)
        ++v8;
      if (v8 <= v7)
        v9 = 0xFFFFFFFF >> -(v7 / v8);
      else
        v9 = 0;
      v10 = *(_QWORD *)(a2 + 2496);
      do
      {
        v11 = 4 * v10;
        v12 = v10 + 397;
        v10 = (v10 + 1) % 0x270;
        v13 = *(_DWORD *)(a2 + 4 * (v12 % 0x270)) ^ ((*(_DWORD *)(a2 + 4 * v10) & 0x7FFFFFFE | *(_DWORD *)(a2 + v11) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a2 + 4 * v10) << 31) >> 31) & 0x9908B0DF;
        *(_DWORD *)(a2 + v11) = v13;
        v14 = ((v13 ^ (v13 >> 11)) << 7) & 0x9D2C5680 ^ v13 ^ (v13 >> 11);
        v15 = ((v14 << 15) & 0xEFC60000 ^ v14 ^ (((v14 << 15) & 0xEFC60000 ^ v14) >> 18)) & v9;
      }
      while (v15 >= v4);
      *(_QWORD *)(a2 + 2496) = v10;
      return *a3 + v15;
    }
  }
  return result;
}

void std::vector<unsigned long long>::__append(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  int64x2_t v18;
  int64x2_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  int64x2_t v26;
  int64x2_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;

  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = (uint64_t *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 3)
  {
    if (a2)
    {
      v16 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 8 * a2 > (unint64_t)a3)
        goto LABEL_43;
      v17 = v16 + 1;
      v8 = (uint64_t *)(v7 + 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL));
      v18 = vdupq_lane_s64(*a3, 0);
      v19 = (int64x2_t *)(v7 + 16);
      v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v19[-1] = v18;
        *v19 = v18;
        v19 += 2;
        v20 -= 4;
      }
      while (v20);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_43:
        do
          *v8++ = *a3;
        while (v8 != (uint64_t *)(v7 + 8 * a2));
      }
      v8 = (uint64_t *)(v7 + 8 * a2);
    }
    *(_QWORD *)(a1 + 8) = v8;
  }
  else
  {
    v9 = *(uint64_t **)a1;
    v10 = v7 - *(_QWORD *)a1;
    v11 = v10 >> 3;
    v12 = (v10 >> 3) + a2;
    if (v12 >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v13 = v6 - (_QWORD)v9;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v15 = (char *)operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v21 = (unint64_t)&v15[8 * v11];
    v22 = (uint64_t *)(v21 + 8 * a2);
    v23 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v24 = (uint64_t *)v21;
    if (v23 < 0x13)
      goto LABEL_44;
    if (v21 < (unint64_t)(a3 + 1))
    {
      v24 = (uint64_t *)&v15[8 * v11];
      if (&v15[8 * a2 + v10] > (char *)a3)
        goto LABEL_44;
    }
    v25 = v23 + 1;
    v24 = (uint64_t *)(v21 + 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL));
    v26 = vdupq_lane_s64(*a3, 0);
    v27 = (int64x2_t *)&v15[8 * v11 + 16];
    v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27[-1] = v26;
      *v27 = v26;
      v27 += 2;
      v28 -= 4;
    }
    while (v28);
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_44:
      do
        *v24++ = *a3;
      while (v24 != v22);
    }
    if ((uint64_t *)v7 != v9)
    {
      v29 = v7 - (_QWORD)v9 - 8;
      if (v29 < 0x58)
        goto LABEL_45;
      if (v7 - (unint64_t)&v15[v10] < 0x20)
        goto LABEL_45;
      v30 = (v29 >> 3) + 1;
      v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
      v8 = (uint64_t *)(v7 - v31);
      v21 -= v31;
      v32 = &v15[8 * v11 - 16];
      v33 = (__int128 *)(v7 - 16);
      v34 = v30 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v35 = *v33;
        *((_OWORD *)v32 - 1) = *(v33 - 1);
        *(_OWORD *)v32 = v35;
        v32 -= 32;
        v33 -= 2;
        v34 -= 4;
      }
      while (v34);
      if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_45:
        do
        {
          v36 = *--v8;
          *(_QWORD *)(v21 - 8) = v36;
          v21 -= 8;
        }
        while (v8 != v9);
      }
    }
    *(_QWORD *)a1 = v21;
    *(_QWORD *)(a1 + 8) = v22;
    *(_QWORD *)(a1 + 16) = &v15[8 * v14];
    if (v9)
      operator delete(v9);
  }
}

_QWORD *operations_research::glop::InitialBasis::InitialBasis(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *result = 0;
  result[1] = result;
  result[2] = result;
  result[3] = a2;
  result[4] = a3;
  result[5] = a4;
  result[6] = a5;
  result[7] = a6;
  return result;
}

void operations_research::glop::InitialBasis::CompleteBixbyBasis(uint64_t a1, int a2, std::vector<int> *a3)
{
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  std::vector<int>::pointer begin;
  unint64_t v12;
  BOOL v13;
  std::vector<int>::size_type v14;
  unint64_t v15;
  unint64_t v16;
  std::vector<int>::pointer v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  int v32;
  uint64_t v33[3];
  int *v34;
  int *v35;
  uint64_t v36;
  void *__p;
  void *v38;
  char *v39;
  void *v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  unint64_t v44;
  unint64_t v45;

  v6 = **(int **)(a1 + 24);
  v43 = 0;
  v44 = 0;
  v45 = 0;
  if ((_DWORD)v6)
  {
    if ((v6 & 0x80000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v7 = ((v6 - 1) >> 6) + 1;
    v8 = operator new(8 * v7);
    v9 = v8;
    v44 = v6;
    v45 = v7;
    v43 = v8;
    if (v6 >= 0x41)
      v10 = (v6 - 1) >> 6;
    else
      v10 = 0;
    v8[v10] = 0;
    if (v6 >= 0x40)
      bzero(v8, 8 * (v6 >> 6));
    if ((v6 & 0x3F) != 0)
      v9[v6 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v6 & 0x3F));
    v40 = operator new(8 * v7);
    v41 = 0;
    v42 = ((v6 - 1) >> 6) + 1;
    std::vector<BOOL>::__construct_at_end[abi:ne180100](&v40, v6, 0);
    begin = a3->__begin_;
    v12 = a3->__end_ - a3->__begin_;
    v13 = v6 >= v12;
    v14 = v6 - v12;
    if (v6 > v12)
      goto LABEL_11;
  }
  else
  {
    v40 = 0;
    v41 = 0;
    v42 = 0;
    begin = a3->__begin_;
    v15 = a3->__end_ - a3->__begin_;
    v13 = v6 >= v15;
    v14 = v6 - v15;
    if (v6 > v15)
    {
LABEL_11:
      std::vector<int>::__append(a3, v14, &operations_research::glop::kInvalidCol);
      goto LABEL_15;
    }
  }
  if (!v13)
    a3->__end_ = &begin[v6];
LABEL_15:
  if ((_DWORD)v6)
  {
    v16 = 0;
    v17 = a3->__begin_;
    v18 = (char *)v43;
    v19 = (char *)v40;
    do
    {
      if (v17[v16] == -1)
      {
        v20 = (v16 >> 3) & 0x1FFFFFFFFFFFFFF8;
        *(_QWORD *)&v18[v20] |= 1 << v16;
        *(_QWORD *)&v19[v20] |= 1 << v16;
      }
      ++v16;
    }
    while (v6 != v16);
  }
  v21 = **(int **)(a1 + 24);
  v38 = 0;
  v39 = 0;
  __p = 0;
  if ((_DWORD)v21)
  {
    if ((v21 & 0x80000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    __p = operator new(8 * v21);
    v39 = (char *)__p + 8 * v21;
    memset_pattern16(__p, &unk_22DCE6720, 8 * v21);
    v38 = v39;
  }
  v34 = 0;
  v35 = 0;
  v36 = 0;
  operations_research::glop::InitialBasis::ComputeCandidates(a1, a2, (uint64_t)&v34);
  v22 = v35;
  if (v35 != v34)
  {
    v23 = 0;
    v22 = v34;
    do
    {
      v25 = v22[v23];
      v26 = *(_QWORD **)(a1 + 24);
      v27 = v26[7];
      v28 = *(_QWORD *)(v27 + 8 * v25);
      v29 = v26[4] + 4 * v28;
      v30 = v26[1] + 8 * v28;
      v33[0] = *(_QWORD *)(v27 + (((v25 << 32) + 0x100000000) >> 29)) - v28;
      v33[1] = v29;
      v33[2] = v30;
      if (operations_research::glop::InfinityNorm(v33) == 1.0)
      {
        v32 = 0;
        v31 = operations_research::glop::RestrictedInfinityNorm(v33, (uint64_t *)&v40, &v32);
        if (v31 > 0.99
          || operations_research::glop::IsDominated(v33, &__p)
          && (v31 = operations_research::glop::RestrictedInfinityNorm(v33, (uint64_t *)&v43, &v32), v31 != 0.0))
        {
          *(_QWORD *)((char *)v43 + (((unint64_t)v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v32);
          operations_research::glop::SetSupportToFalse(v33, &v40);
          v24 = v32;
          *((double *)__p + v32) = fabs(v31) * 0.01;
          a3->__begin_[v24] = v25;
        }
      }
      ++v23;
      v22 = v34;
    }
    while (v23 < v35 - v34);
  }
  if (v22)
  {
    v35 = v22;
    operator delete(v22);
  }
  if (__p)
  {
    v38 = __p;
    operator delete(__p);
  }
  if (v40)
    operator delete(v40);
  if (v43)
    operator delete(v43);
}

void sub_22D9F9828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22)
{
  void *v23;

  if (__p)
  {
    operator delete(__p);
    v23 = a22;
    if (!a22)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v23 = a22;
    if (!a22)
      goto LABEL_3;
  }
  operator delete(v23);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::glop::InitialBasis::ComputeCandidates(uint64_t a1, int a2, uint64_t a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _DWORD *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  int *v31;
  unint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v36;

  v5 = *(char **)a3;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  *(_QWORD *)a1 = 0;
  if (a2 >= 1)
  {
    v6 = 0;
    v7 = a2;
    v8 = 0.0;
    while (*(_BYTE *)(**(_QWORD **)(a1 + 56) + v6) == 4
         || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 56) + 8 * (v6 + 1)) <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 56) + 8 * v6))
    {
LABEL_7:
      if (++v6 == v7)
        goto LABEL_37;
    }
    v12 = *(_QWORD *)(a3 + 16);
    if ((unint64_t)v5 < v12)
    {
      *(_DWORD *)v5 = v6;
      v9 = (uint64_t)(v5 + 4);
LABEL_4:
      v10 = *(double *)(**(_QWORD **)(a1 + 32) + 8 * v6);
      *(_QWORD *)(a3 + 8) = v9;
      v11 = fabs(v10);
      if (v8 < v11)
        v8 = v11;
      *(double *)a1 = v8;
      v5 = (char *)v9;
      goto LABEL_7;
    }
    v13 = *(char **)a3;
    v14 = (uint64_t)&v5[-*(_QWORD *)a3];
    v15 = v14 >> 2;
    v16 = (v14 >> 2) + 1;
    if (v16 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v17 = v12 - (_QWORD)v13;
    if (v17 >> 1 > v16)
      v16 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v19 = operator new(4 * v18);
      v20 = &v19[4 * v15];
      *v20 = v6;
      v9 = (uint64_t)(v20 + 1);
      if (v5 == v13)
        goto LABEL_34;
    }
    else
    {
      v19 = 0;
      v20 = (_DWORD *)(4 * v15);
      *(_DWORD *)(4 * v15) = v6;
      v9 = 4 * v15 + 4;
      if (v5 == v13)
        goto LABEL_34;
    }
    v21 = v5 - 4 - v13;
    if (v21 >= 0xBC)
    {
      if (&v19[v14 - 4 - (v21 & 0xFFFFFFFFFFFFFFFCLL)] > &v19[v14 - 4])
      {
        v22 = v5;
      }
      else if (&v5[-(v21 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v5 - 4)
      {
        v22 = v5;
      }
      else if ((unint64_t)(v5 - v19 - v14) >= 0x20)
      {
        v23 = (v21 >> 2) + 1;
        v24 = 4 * (v23 & 0x7FFFFFFFFFFFFFF8);
        v22 = &v5[-v24];
        v20 = (_DWORD *)((char *)v20 - v24);
        v25 = &v19[4 * v15 - 16];
        v26 = v5 - 16;
        v27 = v23 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 8;
        }
        while (v27);
        if (v23 == (v23 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_34:
          *(_QWORD *)a3 = v20;
          *(_QWORD *)(a3 + 8) = v9;
          *(_QWORD *)(a3 + 16) = &v19[4 * v18];
          if (v13)
          {
            operator delete(v13);
            v8 = *(double *)a1;
          }
          goto LABEL_4;
        }
      }
      else
      {
        v22 = v5;
      }
    }
    else
    {
      v22 = v5;
    }
    do
    {
      v29 = *((_DWORD *)v22 - 1);
      v22 -= 4;
      *--v20 = v29;
    }
    while (v22 != v13);
    goto LABEL_34;
  }
  v8 = 0.0;
LABEL_37:
  v30 = *(_QWORD *)a3;
  v31 = *(int **)(a3 + 8);
  v32 = 126 - 2 * __clz(((uint64_t)v31 - *(_QWORD *)a3) >> 2);
  v33 = v8 * 1000.0;
  if (v31 == *(int **)a3)
    v34 = 0;
  else
    v34 = v32;
  if (v8 == 0.0)
    v33 = 1.0;
  *(double *)a1 = v33;
  v36 = *(_QWORD *)(a1 + 8);
  return std::__introsort<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::BixbyColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *,false>(v30, v31, &v36, v34, 1);
}

void operations_research::glop::InitialBasis::GetPrimalMarosBasis(uint64_t a1, unsigned int a2, std::vector<int> *a3)
{
  operations_research::glop::InitialBasis::GetMarosBasis<false>(a1, a2, a3);
}

void operations_research::glop::InitialBasis::GetMarosBasis<false>(uint64_t a1, uint64_t a2, std::vector<int> *this)
{
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  std::vector<int>::pointer begin;
  uint64_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t *v15;
  int32x4_t v16;
  uint64_t v17;
  int v18;
  int *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int *v36;
  int v37;
  unint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v44;
  int v45;
  signed int v46;
  int v47;
  signed int v48;
  _QWORD *v49;
  int *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  signed int v54;
  int v55;
  int *v56;
  double v57;
  double v58;
  unint64_t v59;
  int v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  double *v66;
  double v67;
  double v68;
  double v69;
  uint64_t v70;
  unsigned int v71;
  unint64_t v72;
  unsigned __int8 v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  unint64_t *v78;
  _QWORD *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  int v83;
  void **v84;
  void **v85;
  void *v86;
  void **v87;
  char v88;
  std::vector<int> *v89;
  uint64_t v90;
  _BYTE v91[16];
  void *v92[2];
  void *v93[2];
  __int128 v94;
  void *v95[2];
  void *v96[2];
  __int128 v97;
  void *v98[2];
  void *__p[2];
  __int128 v100;
  int v101;
  void *v102;
  uint64_t v103;
  unint64_t v104;

  if (*operations_research::glop::InitialBasis::GetMarosBasis<false>(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>> *)::vlocal__[0] >= 1
    && (operations_research::glop::InitialBasis::GetMarosBasis<false>(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>> *)::vlocal__[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)operations_research::glop::InitialBasis::GetMarosBasis<false>(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>> *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/glop/initial_basis.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v92, (google::glog_internal_namespace_ *)"./ortools/glop/initial_basis.cc", 230);
    v6 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v92);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Starting Maros crash procedure.", 31);
    google::LogMessage::~LogMessage((google::LogMessage *)v92);
  }
  v7 = **(int **)(a1 + 24);
  v8 = **(unsigned int **)(a1 + 24);
  v9 = this->__end_ - this->__begin_;
  if (v7 <= v9)
  {
    if (v7 < v9)
      this->__end_ = &this->__begin_[v7];
  }
  else
  {
    std::vector<int>::__append(this, v7 - v9);
  }
  v90 = (a2 - v7);
  if ((int)v7 >= 1)
  {
    begin = this->__begin_;
    if (v7 < 8)
    {
      v11 = 0;
LABEL_15:
      v18 = v11 + a2 - v8;
      v19 = &begin[v11];
      v20 = v8 - v11;
      do
      {
        *v19++ = v18++;
        --v20;
      }
      while (v20);
      goto LABEL_17;
    }
    v12 = vdupq_n_s32(v90);
    v13 = vdupq_n_s32((int)v90 + 4);
    v11 = v8 & 0xFFFFFFF8;
    v14 = (int32x4_t)xmmword_22DCE64F0;
    v15 = (int32x4_t *)(begin + 4);
    v16.i64[0] = 0x800000008;
    v16.i64[1] = 0x800000008;
    v17 = v11;
    do
    {
      v15[-1] = vaddq_s32(v12, v14);
      *v15 = vaddq_s32(v13, v14);
      v14 = vaddq_s32(v14, v16);
      v15 += 2;
      v17 -= 8;
    }
    while (v17);
    if (v11 != v8)
      goto LABEL_15;
  }
LABEL_17:
  v102 = 0;
  v103 = 0;
  v104 = 0;
  if (!(a2 << 32))
  {
    v23 = 0;
    v25 = a2;
    if ((int)v90 < 1)
      goto LABEL_33;
    goto LABEL_29;
  }
  if (a2 << 32 < 0)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v21 = (unint64_t)((int)a2 - 1) >> 6;
  v22 = operator new(8 * (v21 + 1));
  v23 = v22;
  v103 = (int)a2;
  v104 = v21 + 1;
  v102 = v22;
  if (a2 >= 0x41uLL)
    v24 = (unint64_t)((int)a2 - 1) >> 6;
  else
    v24 = 0;
  v22[v24] = 0;
  if ((unint64_t)a2 >> 6)
    memset(v22, 255, 8 * ((unint64_t)(int)a2 >> 6));
  if ((a2 & 0x3F) != 0)
    v23[(unint64_t)(int)a2 >> 6] |= 0xFFFFFFFFFFFFFFFFLL >> -(a2 & 0x3F);
  v25 = a2;
  if ((int)v90 >= 1)
  {
LABEL_29:
    v26 = 0;
    v27 = **(_QWORD **)(a1 + 56);
    do
    {
      if (*(_BYTE *)(v27 + v26) == 4)
        *(_QWORD *)((char *)v23 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v26);
      ++v26;
    }
    while (v90 != v26);
  }
LABEL_33:
  if ((int)v8 >= 1)
  {
    v28 = **(_QWORD **)(a1 + 56);
    v29 = (int)v90;
    do
    {
      if (!*(_BYTE *)(v28 + v29))
        *(_QWORD *)((char *)v23 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v29);
      ++v29;
    }
    while ((uint64_t)v29 < (int)a2);
  }
  v89 = this;
  v101 = 0;
  *(_OWORD *)__p = 0u;
  v100 = 0u;
  v97 = 0u;
  *(_OWORD *)v98 = 0u;
  *(_OWORD *)v95 = 0u;
  *(_OWORD *)v96 = 0u;
  *(_OWORD *)v93 = 0u;
  v94 = 0u;
  *(_OWORD *)v92 = 0u;
  operations_research::glop::MatrixNonZeroPattern::Reset((uint64_t)v92, v8, v25);
  if ((int)v90 >= 1)
  {
    v30 = 0;
    do
    {
      v31 = *(_QWORD *)(a1 + 24);
      v32 = *(_QWORD *)(v31 + 56);
      v33 = *(_QWORD *)(v32 + 8 * v30);
      v34 = v30 + 1;
      v35 = *(_QWORD *)(v32 + 8 * (v30 + 1)) - v33;
      if (v35 >= 1)
      {
        v36 = (int *)(*(_QWORD *)(v31 + 32) + 4 * v33);
        do
        {
          v38 = *v36++;
          v37 = v38;
          if (((*(_QWORD *)((char *)v23 + ((v38 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v38) & 1) != 0
            && (v23[v30 >> 6] & (1 << v30)) != 0)
          {
            operations_research::glop::MatrixNonZeroPattern::AddEntry(v92, v37, v30);
          }
          --v35;
        }
        while (v35);
      }
      ++v30;
    }
    while (v34 != v90);
  }
  if ((int)v7 <= 0)
  {
    v40 = (int)v90;
  }
  else
  {
    v39 = v93[1];
    v40 = (int)v90;
    v41 = v8;
    v42 = (int)v90;
    do
    {
      if (!*v39++)
        *(_QWORD *)((char *)v23 + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v42);
      ++v42;
      --v41;
    }
    while (v41);
  }
  if ((int)v8 >= 1)
  {
    while (1)
    {
      v44 = 0;
      v45 = -1;
      v46 = 0x80000000;
      do
      {
        if (((*(_QWORD *)((char *)v23 + (((unint64_t)(v40 + v44) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v40 + v44)) & 1) != 0)
        {
          v47 = (*(_BYTE *)(**(_QWORD **)(a1 + 56)
                                           + (int)v44
                                           + *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4)
                                           - **(_DWORD **)(a1 + 24))
                                - 1) <= 3u
              ? dword_22DCE6730[(char)(*(_BYTE *)(**(_QWORD **)(a1 + 56)
                                                + (int)v44
                                                + *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4)
                                                - **(_DWORD **)(a1 + 24))
                                     - 1)]
              : 0;
          v48 = v47 - *((_DWORD *)v93[1] + v44);
          if (v48 > v46)
          {
            v45 = v44;
            v46 = v48;
          }
        }
        ++v44;
      }
      while (v8 != v44);
      if (v45 == -1)
        break;
      v49 = (char *)v92[0] + 32 * v45;
      v52 = *v49;
      v50 = (int *)(v49 + 1);
      v51 = v52;
      if ((v52 & 1) != 0)
        v50 = *(int **)v50;
      if (v51 < 2)
        goto LABEL_90;
      v53 = v51 >> 1;
      v54 = 0x80000000;
      v55 = -1;
      v56 = &v50[v53];
      do
      {
        v59 = *v50;
        if (((*(_QWORD *)((char *)v23 + ((v59 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v59) & 1) == 0)
          goto LABEL_72;
        if ((*(_BYTE *)(**(_QWORD **)(a1 + 56) + v59) - 1) > 3u)
        {
          v60 = 30 - *((_DWORD *)v95[0] + v59);
          if (v60 <= v54)
            goto LABEL_72;
        }
        else
        {
          v60 = dword_22DCE6760[(char)(*(_BYTE *)(**(_QWORD **)(a1 + 56) + v59) - 1)] - *((_DWORD *)v95[0] + v59);
          if (v60 <= v54)
            goto LABEL_72;
        }
        v61 = *(_QWORD **)(a1 + 24);
        v62 = v61[7];
        v63 = *(_QWORD *)(v62 + 8 * v59);
        v64 = *(_QWORD *)(v62 + ((uint64_t)((v59 << 32) + 0x100000000) >> 29)) - v63;
        if (v64 < 1)
        {
          v57 = 0.0;
          v58 = 0.0;
        }
        else
        {
          v65 = (_DWORD *)(v61[4] + 4 * v63);
          v66 = (double *)(v61[1] + 8 * v63);
          v58 = 0.0;
          v57 = 0.0;
          do
          {
            v67 = *v66++;
            v68 = v67;
            LODWORD(v67) = *v65++;
            v69 = fabs(v68);
            if (LODWORD(v67) == v45)
              v58 = v69;
            if (v57 < v69)
              v57 = v69;
            --v64;
          }
          while (v64);
        }
        if (v58 >= v57 * 0.001)
        {
          v54 = v60;
          v55 = *v50;
        }
LABEL_72:
        ++v50;
      }
      while (v50 != v56);
      if (v55 == -1)
        goto LABEL_90;
      v70 = **(_QWORD **)(a1 + 56);
      if ((*(_BYTE *)(v70 + *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4) + v45 - **(_DWORD **)(a1 + 24)) - 1) > 3u)
      {
        v71 = 3;
        v72 = v55;
        v73 = *(_BYTE *)(v70 + v55) - 1;
        if (v73 <= 3u)
          goto LABEL_92;
LABEL_89:
        if (v71 >= 3)
          goto LABEL_90;
LABEL_93:
        v89->__begin_[v45] = v55;
        if (*operations_research::glop::InitialBasis::GetMarosBasis<false>(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>> *)::vlocal__[0] >= 2
          && (operations_research::glop::InitialBasis::GetMarosBasis<false>(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>> *)::vlocal__[0] != &google::kLogSiteUninitialized
           || google::InitVLOG3__((google *)operations_research::glop::InitialBasis::GetMarosBasis<false>(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>> *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/glop/initial_basis.cc", (const char *)2)))
        {
          google::LogMessage::LogMessage((google::LogMessage *)v91, (google::glog_internal_namespace_ *)"./ortools/glop/initial_basis.cc", 336);
          v74 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v91);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"Slack variable ", 15);
          v75 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)" replaced by column ", 20);
          v76 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)". Pivot coefficient magnitude: ", 31);
          v77 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)".", 1);
          google::LogMessage::~LogMessage((google::LogMessage *)v91);
        }
        *(_QWORD *)((char *)v23 + ((v72 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v55);
        *(_QWORD *)((char *)v23 + (((unint64_t)(v45 + (int)v90) >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << (v45 + v90));
        operations_research::glop::MatrixNonZeroPattern::DeleteRowAndColumn((uint64_t)v92, v45, v55);
        v78 = (unint64_t *)((char *)v92[0] + 32 * v45);
        v81 = *v78;
        v79 = v78 + 1;
        v80 = v81;
        if ((v81 & 1) != 0)
          v79 = (_QWORD *)*v79;
        if (v80 >= 2)
        {
          v82 = (2 * v80) & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v83 = *(_DWORD *)v79;
            v79 = (_QWORD *)((char *)v79 + 4);
            *(_QWORD *)((char *)v23 + (((unint64_t)v83 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v83);
            v82 -= 4;
          }
          while (v82);
        }
      }
      else
      {
        v71 = dword_22DCE6770[(char)(*(_BYTE *)(v70
                                              + *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4)
                                              + v45
                                              - **(_DWORD **)(a1 + 24))
                                   - 1)];
        v72 = v55;
        v73 = *(_BYTE *)(v70 + v55) - 1;
        if (v73 > 3u)
          goto LABEL_89;
LABEL_92:
        if (v71 < dword_22DCE6770[(char)v73])
          goto LABEL_93;
LABEL_90:
        *(_QWORD *)((char *)v23 + (((unint64_t)(v45 + (int)v90) >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << (v45 + v90));
      }
    }
  }
  if (__p[1])
  {
    *(void **)&v100 = __p[1];
    operator delete(__p[1]);
  }
  if (v98[0])
    operator delete(v98[0]);
  if (v96[1])
    operator delete(v96[1]);
  if (v95[0])
  {
    v95[1] = v95[0];
    operator delete(v95[0]);
  }
  if (v93[1])
  {
    *(void **)&v94 = v93[1];
    operator delete(v93[1]);
  }
  v84 = (void **)v92[0];
  if (v92[0])
  {
    v85 = (void **)v92[1];
    v86 = v92[0];
    if (v92[1] != v92[0])
    {
      v87 = (void **)v92[1];
      do
      {
        v88 = *((_BYTE *)v87 - 32);
        v87 -= 4;
        if ((v88 & 1) != 0)
          operator delete(*(v85 - 3));
        v85 = v87;
      }
      while (v87 != v84);
      v86 = v92[0];
    }
    v92[1] = v84;
    operator delete(v86);
  }
  if (v23)
    operator delete(v23);
}

void operations_research::glop::InitialBasis::GetDualMarosBasis(uint64_t a1, unsigned int a2, std::vector<int> *a3)
{
  operations_research::glop::InitialBasis::GetMarosBasis<true>(a1, a2, a3);
}

void operations_research::glop::InitialBasis::GetMarosBasis<true>(uint64_t a1, uint64_t a2, std::vector<int> *this)
{
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  std::vector<int>::pointer begin;
  uint64_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t *v15;
  int32x4_t v16;
  uint64_t v17;
  int v18;
  int *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int *v36;
  int v37;
  unint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v44;
  int v45;
  signed int v46;
  int v47;
  signed int v48;
  _QWORD *v49;
  int *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  signed int v54;
  int v55;
  int *v56;
  double v57;
  double v58;
  unint64_t v59;
  int v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  double *v66;
  double v67;
  double v68;
  double v69;
  uint64_t v70;
  unsigned int v71;
  unint64_t v72;
  unsigned __int8 v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  unint64_t *v78;
  _QWORD *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  int v83;
  void **v84;
  void **v85;
  void *v86;
  void **v87;
  char v88;
  std::vector<int> *v89;
  uint64_t v90;
  _BYTE v91[16];
  void *v92[2];
  void *v93[2];
  __int128 v94;
  void *v95[2];
  void *v96[2];
  __int128 v97;
  void *v98[2];
  void *__p[2];
  __int128 v100;
  int v101;
  void *v102;
  uint64_t v103;
  unint64_t v104;

  if (*operations_research::glop::InitialBasis::GetMarosBasis<true>(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>> *)::vlocal__[0] >= 1
    && (operations_research::glop::InitialBasis::GetMarosBasis<true>(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>> *)::vlocal__[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)operations_research::glop::InitialBasis::GetMarosBasis<true>(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>> *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/glop/initial_basis.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v92, (google::glog_internal_namespace_ *)"./ortools/glop/initial_basis.cc", 230);
    v6 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v92);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Starting Maros crash procedure.", 31);
    google::LogMessage::~LogMessage((google::LogMessage *)v92);
  }
  v7 = **(int **)(a1 + 24);
  v8 = **(unsigned int **)(a1 + 24);
  v9 = this->__end_ - this->__begin_;
  if (v7 <= v9)
  {
    if (v7 < v9)
      this->__end_ = &this->__begin_[v7];
  }
  else
  {
    std::vector<int>::__append(this, v7 - v9);
  }
  v90 = (a2 - v7);
  if ((int)v7 >= 1)
  {
    begin = this->__begin_;
    if (v7 < 8)
    {
      v11 = 0;
LABEL_15:
      v18 = v11 + a2 - v8;
      v19 = &begin[v11];
      v20 = v8 - v11;
      do
      {
        *v19++ = v18++;
        --v20;
      }
      while (v20);
      goto LABEL_17;
    }
    v12 = vdupq_n_s32(v90);
    v13 = vdupq_n_s32((int)v90 + 4);
    v11 = v8 & 0xFFFFFFF8;
    v14 = (int32x4_t)xmmword_22DCE64F0;
    v15 = (int32x4_t *)(begin + 4);
    v16.i64[0] = 0x800000008;
    v16.i64[1] = 0x800000008;
    v17 = v11;
    do
    {
      v15[-1] = vaddq_s32(v12, v14);
      *v15 = vaddq_s32(v13, v14);
      v14 = vaddq_s32(v14, v16);
      v15 += 2;
      v17 -= 8;
    }
    while (v17);
    if (v11 != v8)
      goto LABEL_15;
  }
LABEL_17:
  v102 = 0;
  v103 = 0;
  v104 = 0;
  if (!(a2 << 32))
  {
    v23 = 0;
    v25 = a2;
    if ((int)v90 < 1)
      goto LABEL_35;
    goto LABEL_29;
  }
  if (a2 << 32 < 0)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v21 = (unint64_t)((int)a2 - 1) >> 6;
  v22 = operator new(8 * (v21 + 1));
  v23 = v22;
  v103 = (int)a2;
  v104 = v21 + 1;
  v102 = v22;
  if (a2 >= 0x41uLL)
    v24 = (unint64_t)((int)a2 - 1) >> 6;
  else
    v24 = 0;
  v22[v24] = 0;
  if ((unint64_t)a2 >> 6)
    memset(v22, 255, 8 * ((unint64_t)(int)a2 >> 6));
  if ((a2 & 0x3F) != 0)
    v23[(unint64_t)(int)a2 >> 6] |= 0xFFFFFFFFFFFFFFFFLL >> -(a2 & 0x3F);
  v25 = a2;
  if ((int)v90 >= 1)
  {
LABEL_29:
    v26 = 0;
    v27 = **(_QWORD **)(a1 + 56);
    do
    {
      if (*(_BYTE *)(v27 + v26) == 4 || *(double *)(**(_QWORD **)(a1 + 32) + 8 * v26) != 0.0)
        *(_QWORD *)((char *)v23 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v26);
      ++v26;
    }
    while (v90 != v26);
  }
LABEL_35:
  if ((int)v8 >= 1)
  {
    v28 = **(_QWORD **)(a1 + 56);
    v29 = (int)v90;
    do
    {
      if (!*(_BYTE *)(v28 + v29))
        *(_QWORD *)((char *)v23 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v29);
      ++v29;
    }
    while ((uint64_t)v29 < (int)a2);
  }
  v89 = this;
  v101 = 0;
  *(_OWORD *)__p = 0u;
  v100 = 0u;
  v97 = 0u;
  *(_OWORD *)v98 = 0u;
  *(_OWORD *)v95 = 0u;
  *(_OWORD *)v96 = 0u;
  *(_OWORD *)v93 = 0u;
  v94 = 0u;
  *(_OWORD *)v92 = 0u;
  operations_research::glop::MatrixNonZeroPattern::Reset((uint64_t)v92, v8, v25);
  if ((int)v90 >= 1)
  {
    v30 = 0;
    do
    {
      v31 = *(_QWORD *)(a1 + 24);
      v32 = *(_QWORD *)(v31 + 56);
      v33 = *(_QWORD *)(v32 + 8 * v30);
      v34 = v30 + 1;
      v35 = *(_QWORD *)(v32 + 8 * (v30 + 1)) - v33;
      if (v35 >= 1)
      {
        v36 = (int *)(*(_QWORD *)(v31 + 32) + 4 * v33);
        do
        {
          v38 = *v36++;
          v37 = v38;
          if (((*(_QWORD *)((char *)v23 + ((v38 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v38) & 1) != 0
            && (v23[v30 >> 6] & (1 << v30)) != 0)
          {
            operations_research::glop::MatrixNonZeroPattern::AddEntry(v92, v37, v30);
          }
          --v35;
        }
        while (v35);
      }
      ++v30;
    }
    while (v34 != v90);
  }
  if ((int)v7 <= 0)
  {
    v40 = (int)v90;
  }
  else
  {
    v39 = v93[1];
    v40 = (int)v90;
    v41 = v8;
    v42 = (int)v90;
    do
    {
      if (!*v39++)
        *(_QWORD *)((char *)v23 + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v42);
      ++v42;
      --v41;
    }
    while (v41);
  }
  if ((int)v8 >= 1)
  {
    while (1)
    {
      v44 = 0;
      v45 = -1;
      v46 = 0x80000000;
      do
      {
        if (((*(_QWORD *)((char *)v23 + (((unint64_t)(v40 + v44) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v40 + v44)) & 1) != 0)
        {
          v47 = (*(_BYTE *)(**(_QWORD **)(a1 + 56)
                                           + (int)v44
                                           + *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4)
                                           - **(_DWORD **)(a1 + 24))
                                - 1) <= 3u
              ? dword_22DCE6730[(char)(*(_BYTE *)(**(_QWORD **)(a1 + 56)
                                                + (int)v44
                                                + *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4)
                                                - **(_DWORD **)(a1 + 24))
                                     - 1)]
              : 0;
          v48 = v47 - *((_DWORD *)v93[1] + v44);
          if (v48 > v46)
          {
            v45 = v44;
            v46 = v48;
          }
        }
        ++v44;
      }
      while (v8 != v44);
      if (v45 == -1)
        break;
      v49 = (char *)v92[0] + 32 * v45;
      v52 = *v49;
      v50 = (int *)(v49 + 1);
      v51 = v52;
      if ((v52 & 1) != 0)
        v50 = *(int **)v50;
      if (v51 < 2)
        goto LABEL_92;
      v53 = v51 >> 1;
      v54 = 0x80000000;
      v55 = -1;
      v56 = &v50[v53];
      do
      {
        v59 = *v50;
        if (((*(_QWORD *)((char *)v23 + ((v59 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v59) & 1) == 0)
          goto LABEL_74;
        if ((*(_BYTE *)(**(_QWORD **)(a1 + 56) + v59) - 1) > 3u)
        {
          v60 = 30 - *((_DWORD *)v95[0] + v59);
          if (v60 <= v54)
            goto LABEL_74;
        }
        else
        {
          v60 = dword_22DCE6760[(char)(*(_BYTE *)(**(_QWORD **)(a1 + 56) + v59) - 1)] - *((_DWORD *)v95[0] + v59);
          if (v60 <= v54)
            goto LABEL_74;
        }
        v61 = *(_QWORD **)(a1 + 24);
        v62 = v61[7];
        v63 = *(_QWORD *)(v62 + 8 * v59);
        v64 = *(_QWORD *)(v62 + ((uint64_t)((v59 << 32) + 0x100000000) >> 29)) - v63;
        if (v64 < 1)
        {
          v57 = 0.0;
          v58 = 0.0;
        }
        else
        {
          v65 = (_DWORD *)(v61[4] + 4 * v63);
          v66 = (double *)(v61[1] + 8 * v63);
          v58 = 0.0;
          v57 = 0.0;
          do
          {
            v67 = *v66++;
            v68 = v67;
            LODWORD(v67) = *v65++;
            v69 = fabs(v68);
            if (LODWORD(v67) == v45)
              v58 = v69;
            if (v57 < v69)
              v57 = v69;
            --v64;
          }
          while (v64);
        }
        if (v58 >= v57 * 0.001)
        {
          v54 = v60;
          v55 = *v50;
        }
LABEL_74:
        ++v50;
      }
      while (v50 != v56);
      if (v55 == -1)
        goto LABEL_92;
      v70 = **(_QWORD **)(a1 + 56);
      if ((*(_BYTE *)(v70 + *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4) + v45 - **(_DWORD **)(a1 + 24)) - 1) > 3u)
      {
        v71 = 3;
        v72 = v55;
        v73 = *(_BYTE *)(v70 + v55) - 1;
        if (v73 <= 3u)
          goto LABEL_94;
LABEL_91:
        if (v71 >= 3)
          goto LABEL_92;
LABEL_95:
        v89->__begin_[v45] = v55;
        if (*operations_research::glop::InitialBasis::GetMarosBasis<true>(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>> *)::vlocal__[0] >= 2
          && (operations_research::glop::InitialBasis::GetMarosBasis<true>(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>> *)::vlocal__[0] != &google::kLogSiteUninitialized
           || google::InitVLOG3__((google *)operations_research::glop::InitialBasis::GetMarosBasis<true>(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>> *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/glop/initial_basis.cc", (const char *)2)))
        {
          google::LogMessage::LogMessage((google::LogMessage *)v91, (google::glog_internal_namespace_ *)"./ortools/glop/initial_basis.cc", 336);
          v74 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v91);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"Slack variable ", 15);
          v75 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)" replaced by column ", 20);
          v76 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)". Pivot coefficient magnitude: ", 31);
          v77 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)".", 1);
          google::LogMessage::~LogMessage((google::LogMessage *)v91);
        }
        *(_QWORD *)((char *)v23 + ((v72 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v55);
        *(_QWORD *)((char *)v23 + (((unint64_t)(v45 + (int)v90) >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << (v45 + v90));
        operations_research::glop::MatrixNonZeroPattern::DeleteRowAndColumn((uint64_t)v92, v45, v55);
        v78 = (unint64_t *)((char *)v92[0] + 32 * v45);
        v81 = *v78;
        v79 = v78 + 1;
        v80 = v81;
        if ((v81 & 1) != 0)
          v79 = (_QWORD *)*v79;
        if (v80 >= 2)
        {
          v82 = (2 * v80) & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v83 = *(_DWORD *)v79;
            v79 = (_QWORD *)((char *)v79 + 4);
            *(_QWORD *)((char *)v23 + (((unint64_t)v83 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v83);
            v82 -= 4;
          }
          while (v82);
        }
      }
      else
      {
        v71 = dword_22DCE6770[(char)(*(_BYTE *)(v70
                                              + *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4)
                                              + v45
                                              - **(_DWORD **)(a1 + 24))
                                   - 1)];
        v72 = v55;
        v73 = *(_BYTE *)(v70 + v55) - 1;
        if (v73 > 3u)
          goto LABEL_91;
LABEL_94:
        if (v71 < dword_22DCE6770[(char)v73])
          goto LABEL_95;
LABEL_92:
        *(_QWORD *)((char *)v23 + (((unint64_t)(v45 + (int)v90) >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << (v45 + v90));
      }
    }
  }
  if (__p[1])
  {
    *(void **)&v100 = __p[1];
    operator delete(__p[1]);
  }
  if (v98[0])
    operator delete(v98[0]);
  if (v96[1])
    operator delete(v96[1]);
  if (v95[0])
  {
    v95[1] = v95[0];
    operator delete(v95[0]);
  }
  if (v93[1])
  {
    *(void **)&v94 = v93[1];
    operator delete(v93[1]);
  }
  v84 = (void **)v92[0];
  if (v92[0])
  {
    v85 = (void **)v92[1];
    v86 = v92[0];
    if (v92[1] != v92[0])
    {
      v87 = (void **)v92[1];
      do
      {
        v88 = *((_BYTE *)v87 - 32);
        v87 -= 4;
        if ((v88 & 1) != 0)
          operator delete(*(v85 - 3));
        v85 = v87;
      }
      while (v87 != v84);
      v86 = v92[0];
    }
    v92[1] = v84;
    operator delete(v86);
  }
  if (v23)
    operator delete(v23);
}

void operations_research::glop::InitialBasis::CompleteTriangularPrimalBasis(uint64_t a1, int a2, std::vector<int> *a3)
{
  operations_research::glop::InitialBasis::CompleteTriangularBasis<false>(a1, a2, a3);
}

void operations_research::glop::InitialBasis::CompleteTriangularBasis<false>(uint64_t a1, int a2, std::vector<int> *a3)
{
  std::vector<int> *v3;
  unsigned int *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  std::vector<int>::pointer begin;
  unint64_t v14;
  BOOL v15;
  std::vector<int>::size_type v16;
  unint64_t v17;
  unint64_t v18;
  std::vector<int>::pointer v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  int v28;
  unint64_t v29;
  _BYTE *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  _DWORD *v40;
  unint64_t v41;
  char *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  __int128 *v47;
  uint64_t v48;
  __int128 v49;
  double v50;
  _BYTE *v51;
  double v52;
  BOOL v53;
  double v54;
  unsigned int *i;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int *v61;
  double *v62;
  double v63;
  double v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  void **v75;
  void **v76;
  void *v77;
  void **v78;
  char v79;
  std::vector<int> *v80;
  int v81;
  unsigned int *v82;
  unsigned int *v83;
  _BYTE *v84;
  uint64_t v85;
  char *v86;
  void *v87[2];
  void *v88[2];
  __int128 v89;
  void *__p[2];
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  int v96;
  char *v97;
  unint64_t v98;
  unint64_t v99;

  v3 = a3;
  v6 = *(unsigned int **)(a1 + 24);
  v7 = (int)*v6;
  v8 = *v6;
  v97 = 0;
  v98 = 0;
  v99 = 0;
  if ((_DWORD)v7)
  {
    if ((v7 & 0x80000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v9 = (v7 - 1) >> 6;
    v10 = operator new(8 * (v9 + 1));
    v11 = v10;
    v98 = v7;
    v99 = v9 + 1;
    v97 = (char *)v10;
    if (v7 >= 0x41)
      v12 = (v7 - 1) >> 6;
    else
      v12 = 0;
    v10[v12] = 0;
    if (v8 >= 0x40)
      bzero(v10, 8 * (v7 >> 6));
    if ((v7 & 0x3F) != 0)
      v11[v7 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v7 & 0x3F));
    begin = v3->__begin_;
    v14 = v3->__end_ - v3->__begin_;
    v15 = v7 >= v14;
    v16 = v7 - v14;
    if (v7 > v14)
      goto LABEL_11;
  }
  else
  {
    v11 = 0;
    begin = a3->__begin_;
    v17 = a3->__end_ - a3->__begin_;
    v15 = v7 >= v17;
    v16 = v7 - v17;
    if (v7 > v17)
    {
LABEL_11:
      std::vector<int>::__append(v3, v16, &operations_research::glop::kInvalidCol);
      goto LABEL_15;
    }
  }
  if (!v15)
    v3->__end_ = &begin[v7];
LABEL_15:
  if ((_DWORD)v8)
  {
    v18 = 0;
    v19 = v3->__begin_;
    do
    {
      if (v19[v18] == -1)
        *(_QWORD *)((char *)v11 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      ++v18;
    }
    while (v8 != v18);
  }
  v96 = 0;
  v94 = 0u;
  v95 = 0u;
  v92 = 0u;
  v93 = 0u;
  *(_OWORD *)__p = 0u;
  v91 = 0u;
  *(_OWORD *)v88 = 0u;
  v89 = 0u;
  v20 = a2;
  *(_OWORD *)v87 = 0u;
  operations_research::glop::MatrixNonZeroPattern::Reset((uint64_t)v87, v8, a2);
  if (a2 >= 1)
  {
    v21 = 0;
    do
    {
      v22 = *(_QWORD *)(a1 + 24);
      v23 = *(_QWORD *)(v22 + 56);
      v24 = *(_QWORD *)(v23 + 8 * v21);
      v25 = v21 + 1;
      v26 = *(_QWORD *)(v23 + 8 * (v21 + 1)) - v24;
      if (v26 >= 1)
      {
        v27 = (int *)(*(_QWORD *)(v22 + 32) + 4 * v24);
        do
        {
          v29 = *v27++;
          v28 = v29;
          if (((*(_QWORD *)((char *)v11 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v29) & 1) != 0)
            operations_research::glop::MatrixNonZeroPattern::AddEntry(v87, v28, v21);
          --v26;
        }
        while (v26);
      }
      ++v21;
    }
    while (v25 != v20);
    v80 = v3;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v84 = 0;
    v85 = 0;
    v86 = 0;
    *(_QWORD *)a1 = 0;
    while (1)
    {
      v35 = fabs(*(double *)(**(_QWORD **)(a1 + 32) + 8 * v33));
      if (*(double *)a1 >= v35)
        v35 = *(double *)a1;
      *(double *)a1 = v35;
      if (*((_DWORD *)__p[0] + v33) != 1)
        goto LABEL_31;
      if (v32 >= v31)
        break;
      *(_DWORD *)v32 = v33;
      v34 = (uint64_t)(v32 + 4);
LABEL_30:
      v85 = v34;
      v32 = (char *)v34;
LABEL_31:
      if (++v33 == v20)
      {
        v50 = *(double *)a1;
        v51 = v84;
        v3 = v80;
        goto LABEL_65;
      }
    }
    v36 = (v32 - v30) >> 2;
    v37 = v36 + 1;
    if ((unint64_t)(v36 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    if ((v31 - v30) >> 1 > v37)
      v37 = (v31 - v30) >> 1;
    if ((unint64_t)(v31 - v30) >= 0x7FFFFFFFFFFFFFFCLL)
      v38 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v38 = v37;
    if (v38)
    {
      if (v38 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v39 = operator new(4 * v38);
      v40 = &v39[4 * v36];
      *v40 = v33;
      v34 = (uint64_t)(v40 + 1);
      if (v32 == v30)
        goto LABEL_50;
    }
    else
    {
      v39 = 0;
      v40 = (_DWORD *)(4 * v36);
      *(_DWORD *)(4 * v36) = v33;
      v34 = 4 * v36 + 4;
      if (v32 == v30)
        goto LABEL_50;
    }
    v41 = v32 - 4 - v30;
    if (v41 >= 0xBC)
    {
      if (&v39[v32 - v30 - 4 - (v41 & 0xFFFFFFFFFFFFFFFCLL)] > &v39[v32 - v30 - 4])
      {
        v42 = v32;
      }
      else if (&v32[-(v41 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v32 - 4)
      {
        v42 = v32;
      }
      else if ((unint64_t)(v30 - v39) >= 0x20)
      {
        v44 = (v41 >> 2) + 1;
        v45 = 4 * (v44 & 0x7FFFFFFFFFFFFFF8);
        v42 = &v32[-v45];
        v40 = (_DWORD *)((char *)v40 - v45);
        v46 = &v39[4 * v36 - 16];
        v47 = (__int128 *)(v32 - 16);
        v48 = v44 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v49 = *v47;
          *(v46 - 1) = *(v47 - 1);
          *v46 = v49;
          v46 -= 2;
          v47 -= 2;
          v48 -= 8;
        }
        while (v48);
        if (v44 == (v44 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_50;
      }
      else
      {
        v42 = v32;
      }
    }
    else
    {
      v42 = v32;
    }
    do
    {
      v43 = *((_DWORD *)v42 - 1);
      v42 -= 4;
      *--v40 = v43;
    }
    while (v42 != v30);
LABEL_50:
    v31 = &v39[4 * v38];
    v84 = v40;
    v85 = v34;
    v86 = v31;
    if (v30)
      operator delete(v30);
    v30 = v40;
    goto LABEL_30;
  }
  v32 = 0;
  v51 = 0;
  v84 = 0;
  v85 = 0;
  v86 = 0;
  v50 = 0.0;
  *(_QWORD *)a1 = 0;
LABEL_65:
  v52 = v50 * 1000.0;
  v53 = v50 == 0.0;
  v54 = 1.0;
  if (!v53)
    v54 = v52;
  *(double *)a1 = v54;
  std::priority_queue<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>,operations_research::glop::InitialBasis::TriangularColumnComparator>::priority_queue<std::__wrap_iter<gtl::IntType<operations_research::glop::ColIndex_tag_,int>*>,void>(&v82, v51, v32, (uint64_t *)(a1 + 16));
  for (i = v82; v82 != v83; i = v82)
  {
    v56 = *i;
    std::priority_queue<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>,operations_research::glop::InitialBasis::TriangularColumnComparator>::pop(&v82);
    if (*((_DWORD *)__p[0] + (int)v56) == 1)
    {
      v57 = *(_QWORD **)(a1 + 24);
      v58 = v57[7];
      v59 = *(_QWORD *)(v58 + 8 * (int)v56);
      v60 = *(_QWORD *)(v58 + (((v56 << 32) + 0x100000000) >> 29)) - v59;
      if (v60 >= 1)
      {
        v61 = (int *)(v57[4] + 4 * v59);
        v62 = (double *)(v57[1] + 8 * v59);
        v63 = 0.0;
        while (1)
        {
          v64 = fabs(*v62);
          if (v63 < v64)
            v63 = v64;
          v66 = *v61++;
          v65 = v66;
          if (((*(_QWORD *)&v97[((unint64_t)v66 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v66) & 1) != 0)
            break;
          ++v62;
          if (!--v60)
          {
            v67 = -1;
            if (fabs(0.0) < v63 * 0.01)
              goto LABEL_69;
            goto LABEL_82;
          }
        }
        v67 = v65;
        if (fabs(*v62) < v63 * 0.01)
          continue;
LABEL_82:
        v68 = v67;
        v3->__begin_[v67] = v56;
        *(_QWORD *)&v97[((unint64_t)v67 >> 3) & 0x1FFFFFFFFFFFFFF8] &= ~(1 << v67);
        operations_research::glop::MatrixNonZeroPattern::DeleteRowAndColumn((uint64_t)v87, v67, v56);
        v69 = (unint64_t *)((char *)v87[0] + 32 * v68);
        v72 = *v69;
        v71 = v69 + 1;
        v70 = v72;
        if ((v72 & 1) != 0)
          v71 = (_QWORD *)*v71;
        if (v70 >= 2)
        {
          v73 = 4 * (v70 >> 1);
          do
          {
            v74 = *(_DWORD *)v71;
            v81 = v74;
            if (v74 != (_DWORD)v56)
            {
              operations_research::glop::MatrixNonZeroPattern::DecreaseColDegree((uint64_t)v87, v74);
              if (*((_DWORD *)__p[0] + v81) == 1)
                std::priority_queue<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>,operations_research::glop::InitialBasis::TriangularColumnComparator>::push((uint64_t)&v82, &v81);
            }
            v71 = (_QWORD *)((char *)v71 + 4);
            v73 -= 4;
          }
          while (v73);
        }
        continue;
      }
      v67 = -1;
      if (fabs(0.0) >= 0.0 * 0.01)
        goto LABEL_82;
    }
LABEL_69:
    ;
  }
  if (i)
  {
    v83 = i;
    operator delete(i);
  }
  if (v51)
    operator delete(v51);
  if (*((_QWORD *)&v94 + 1))
  {
    *(_QWORD *)&v95 = *((_QWORD *)&v94 + 1);
    operator delete(*((void **)&v94 + 1));
  }
  if ((_QWORD)v93)
    operator delete((void *)v93);
  if (*((_QWORD *)&v91 + 1))
    operator delete(*((void **)&v91 + 1));
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v88[1])
  {
    *(void **)&v89 = v88[1];
    operator delete(v88[1]);
  }
  v75 = (void **)v87[0];
  if (v87[0])
  {
    v76 = (void **)v87[1];
    v77 = v87[0];
    if (v87[1] != v87[0])
    {
      v78 = (void **)v87[1];
      do
      {
        v79 = *((_BYTE *)v78 - 32);
        v78 -= 4;
        if ((v79 & 1) != 0)
          operator delete(*(v76 - 3));
        v76 = v78;
      }
      while (v78 != v75);
      v77 = v87[0];
    }
    v87[1] = v75;
    operator delete(v77);
  }
  if (v97)
    operator delete(v97);
}

void sub_22D9FB654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  void *v19;

  if (v19)
    operator delete(v19);
  _Unwind_Resume(exception_object);
}

void operations_research::glop::InitialBasis::CompleteTriangularDualBasis(uint64_t a1, int a2, std::vector<int> *a3)
{
  operations_research::glop::InitialBasis::CompleteTriangularBasis<true>(a1, a2, a3);
}

void operations_research::glop::InitialBasis::CompleteTriangularBasis<true>(uint64_t a1, int a2, std::vector<int> *a3)
{
  std::vector<int> *v3;
  unsigned int *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  std::vector<int>::pointer begin;
  unint64_t v14;
  BOOL v15;
  std::vector<int>::size_type v16;
  unint64_t v17;
  unint64_t v18;
  std::vector<int>::pointer v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  int v27;
  unint64_t v28;
  _BYTE *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  _DWORD *v39;
  unint64_t v40;
  char *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  __int128 *v46;
  uint64_t v47;
  __int128 v48;
  double v49;
  _BYTE *v50;
  double v51;
  BOOL v52;
  double v53;
  unsigned int *i;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  double *v61;
  double v62;
  double v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  void **v74;
  void **v75;
  void *v76;
  void **v77;
  char v78;
  std::vector<int> *v79;
  int v80;
  unsigned int *v81;
  unsigned int *v82;
  _BYTE *v83;
  uint64_t v84;
  char *v85;
  void *v86[2];
  void *v87[2];
  __int128 v88;
  void *__p[2];
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  int v95;
  char *v96;
  unint64_t v97;
  unint64_t v98;

  v3 = a3;
  v6 = *(unsigned int **)(a1 + 24);
  v7 = (int)*v6;
  v8 = *v6;
  v96 = 0;
  v97 = 0;
  v98 = 0;
  if ((_DWORD)v7)
  {
    if ((v7 & 0x80000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v9 = (v7 - 1) >> 6;
    v10 = operator new(8 * (v9 + 1));
    v11 = v10;
    v97 = v7;
    v98 = v9 + 1;
    v96 = (char *)v10;
    if (v7 >= 0x41)
      v12 = (v7 - 1) >> 6;
    else
      v12 = 0;
    v10[v12] = 0;
    if (v8 >= 0x40)
      bzero(v10, 8 * (v7 >> 6));
    if ((v7 & 0x3F) != 0)
      v11[v7 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v7 & 0x3F));
    begin = v3->__begin_;
    v14 = v3->__end_ - v3->__begin_;
    v15 = v7 >= v14;
    v16 = v7 - v14;
    if (v7 > v14)
      goto LABEL_11;
  }
  else
  {
    v11 = 0;
    begin = a3->__begin_;
    v17 = a3->__end_ - a3->__begin_;
    v15 = v7 >= v17;
    v16 = v7 - v17;
    if (v7 > v17)
    {
LABEL_11:
      std::vector<int>::__append(v3, v16, &operations_research::glop::kInvalidCol);
      goto LABEL_15;
    }
  }
  if (!v15)
    v3->__end_ = &begin[v7];
LABEL_15:
  if ((_DWORD)v8)
  {
    v18 = 0;
    v19 = v3->__begin_;
    do
    {
      if (v19[v18] == -1)
        *(_QWORD *)((char *)v11 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      ++v18;
    }
    while (v8 != v18);
  }
  v95 = 0;
  v93 = 0u;
  v94 = 0u;
  v91 = 0u;
  v92 = 0u;
  *(_OWORD *)__p = 0u;
  v90 = 0u;
  *(_OWORD *)v87 = 0u;
  v88 = 0u;
  v20 = a2;
  *(_OWORD *)v86 = 0u;
  operations_research::glop::MatrixNonZeroPattern::Reset((uint64_t)v86, v8, a2);
  if (a2 > 0)
  {
    v21 = 0;
    do
    {
      if (*(double *)(**(_QWORD **)(a1 + 32) + 8 * v21) == 0.0)
      {
        v22 = *(_QWORD *)(a1 + 24);
        v23 = *(_QWORD *)(v22 + 56);
        v24 = *(_QWORD *)(v23 + 8 * v21);
        v25 = *(_QWORD *)(v23 + 8 * (v21 + 1)) - v24;
        if (v25 >= 1)
        {
          v26 = (int *)(*(_QWORD *)(v22 + 32) + 4 * v24);
          do
          {
            v28 = *v26++;
            v27 = v28;
            if (((*(_QWORD *)((char *)v11 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v28) & 1) != 0)
              operations_research::glop::MatrixNonZeroPattern::AddEntry(v86, v27, v21);
            --v25;
          }
          while (v25);
        }
      }
      ++v21;
    }
    while (v21 != v20);
    v79 = v3;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v83 = 0;
    v84 = 0;
    v85 = 0;
    *(_QWORD *)a1 = 0;
    while (1)
    {
      v34 = fabs(*(double *)(**(_QWORD **)(a1 + 32) + 8 * v32));
      if (*(double *)a1 >= v34)
        v34 = *(double *)a1;
      *(double *)a1 = v34;
      if (*((_DWORD *)__p[0] + v32) != 1)
        goto LABEL_32;
      if (v31 >= v30)
        break;
      *(_DWORD *)v31 = v32;
      v33 = (uint64_t)(v31 + 4);
LABEL_31:
      v84 = v33;
      v31 = (char *)v33;
LABEL_32:
      if (++v32 == v20)
      {
        v49 = *(double *)a1;
        v50 = v83;
        v3 = v79;
        goto LABEL_66;
      }
    }
    v35 = (v31 - v29) >> 2;
    v36 = v35 + 1;
    if ((unint64_t)(v35 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    if ((v30 - v29) >> 1 > v36)
      v36 = (v30 - v29) >> 1;
    if ((unint64_t)(v30 - v29) >= 0x7FFFFFFFFFFFFFFCLL)
      v37 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v37 = v36;
    if (v37)
    {
      if (v37 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v38 = operator new(4 * v37);
      v39 = &v38[4 * v35];
      *v39 = v32;
      v33 = (uint64_t)(v39 + 1);
      if (v31 == v29)
        goto LABEL_51;
    }
    else
    {
      v38 = 0;
      v39 = (_DWORD *)(4 * v35);
      *(_DWORD *)(4 * v35) = v32;
      v33 = 4 * v35 + 4;
      if (v31 == v29)
        goto LABEL_51;
    }
    v40 = v31 - 4 - v29;
    if (v40 >= 0xBC)
    {
      if (&v38[v31 - v29 - 4 - (v40 & 0xFFFFFFFFFFFFFFFCLL)] > &v38[v31 - v29 - 4])
      {
        v41 = v31;
      }
      else if (&v31[-(v40 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v31 - 4)
      {
        v41 = v31;
      }
      else if ((unint64_t)(v29 - v38) >= 0x20)
      {
        v43 = (v40 >> 2) + 1;
        v44 = 4 * (v43 & 0x7FFFFFFFFFFFFFF8);
        v41 = &v31[-v44];
        v39 = (_DWORD *)((char *)v39 - v44);
        v45 = &v38[4 * v35 - 16];
        v46 = (__int128 *)(v31 - 16);
        v47 = v43 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v48 = *v46;
          *(v45 - 1) = *(v46 - 1);
          *v45 = v48;
          v45 -= 2;
          v46 -= 2;
          v47 -= 8;
        }
        while (v47);
        if (v43 == (v43 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_51;
      }
      else
      {
        v41 = v31;
      }
    }
    else
    {
      v41 = v31;
    }
    do
    {
      v42 = *((_DWORD *)v41 - 1);
      v41 -= 4;
      *--v39 = v42;
    }
    while (v41 != v29);
LABEL_51:
    v30 = &v38[4 * v37];
    v83 = v39;
    v84 = v33;
    v85 = v30;
    if (v29)
      operator delete(v29);
    v29 = v39;
    goto LABEL_31;
  }
  v31 = 0;
  v50 = 0;
  v83 = 0;
  v84 = 0;
  v85 = 0;
  v49 = 0.0;
  *(_QWORD *)a1 = 0;
LABEL_66:
  v51 = v49 * 1000.0;
  v52 = v49 == 0.0;
  v53 = 1.0;
  if (!v52)
    v53 = v51;
  *(double *)a1 = v53;
  std::priority_queue<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>,operations_research::glop::InitialBasis::TriangularColumnComparator>::priority_queue<std::__wrap_iter<gtl::IntType<operations_research::glop::ColIndex_tag_,int>*>,void>(&v81, v50, v31, (uint64_t *)(a1 + 16));
  for (i = v81; v81 != v82; i = v81)
  {
    v55 = *i;
    std::priority_queue<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>,operations_research::glop::InitialBasis::TriangularColumnComparator>::pop(&v81);
    if (*((_DWORD *)__p[0] + (int)v55) == 1)
    {
      v56 = *(_QWORD **)(a1 + 24);
      v57 = v56[7];
      v58 = *(_QWORD *)(v57 + 8 * (int)v55);
      v59 = *(_QWORD *)(v57 + (((v55 << 32) + 0x100000000) >> 29)) - v58;
      if (v59 >= 1)
      {
        v60 = (int *)(v56[4] + 4 * v58);
        v61 = (double *)(v56[1] + 8 * v58);
        v62 = 0.0;
        while (1)
        {
          v63 = fabs(*v61);
          if (v62 < v63)
            v62 = v63;
          v65 = *v60++;
          v64 = v65;
          if (((*(_QWORD *)&v96[((unint64_t)v65 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v65) & 1) != 0)
            break;
          ++v61;
          if (!--v59)
          {
            v66 = -1;
            if (fabs(0.0) < v62 * 0.01)
              goto LABEL_70;
            goto LABEL_83;
          }
        }
        v66 = v64;
        if (fabs(*v61) < v62 * 0.01)
          continue;
LABEL_83:
        v67 = v66;
        v3->__begin_[v66] = v55;
        *(_QWORD *)&v96[((unint64_t)v66 >> 3) & 0x1FFFFFFFFFFFFFF8] &= ~(1 << v66);
        operations_research::glop::MatrixNonZeroPattern::DeleteRowAndColumn((uint64_t)v86, v66, v55);
        v68 = (unint64_t *)((char *)v86[0] + 32 * v67);
        v71 = *v68;
        v70 = v68 + 1;
        v69 = v71;
        if ((v71 & 1) != 0)
          v70 = (_QWORD *)*v70;
        if (v69 >= 2)
        {
          v72 = 4 * (v69 >> 1);
          do
          {
            v73 = *(_DWORD *)v70;
            v80 = v73;
            if (v73 != (_DWORD)v55)
            {
              operations_research::glop::MatrixNonZeroPattern::DecreaseColDegree((uint64_t)v86, v73);
              if (*((_DWORD *)__p[0] + v80) == 1)
                std::priority_queue<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>,operations_research::glop::InitialBasis::TriangularColumnComparator>::push((uint64_t)&v81, &v80);
            }
            v70 = (_QWORD *)((char *)v70 + 4);
            v72 -= 4;
          }
          while (v72);
        }
        continue;
      }
      v66 = -1;
      if (fabs(0.0) >= 0.0 * 0.01)
        goto LABEL_83;
    }
LABEL_70:
    ;
  }
  if (i)
  {
    v82 = i;
    operator delete(i);
  }
  if (v50)
    operator delete(v50);
  if (*((_QWORD *)&v93 + 1))
  {
    *(_QWORD *)&v94 = *((_QWORD *)&v93 + 1);
    operator delete(*((void **)&v93 + 1));
  }
  if ((_QWORD)v92)
    operator delete((void *)v92);
  if (*((_QWORD *)&v90 + 1))
    operator delete(*((void **)&v90 + 1));
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v87[1])
  {
    *(void **)&v88 = v87[1];
    operator delete(v87[1]);
  }
  v74 = (void **)v86[0];
  if (v86[0])
  {
    v75 = (void **)v86[1];
    v76 = v86[0];
    if (v86[1] != v86[0])
    {
      v77 = (void **)v86[1];
      do
      {
        v78 = *((_BYTE *)v77 - 32);
        v77 -= 4;
        if ((v78 & 1) != 0)
          operator delete(*(v75 - 3));
        v75 = v77;
      }
      while (v77 != v74);
      v76 = v86[0];
    }
    v86[1] = v74;
    operator delete(v76);
  }
  if (v96)
    operator delete(v96);
}

void sub_22D9FBDBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  void *v19;

  if (v19)
    operator delete(v19);
  _Unwind_Resume(exception_object);
}

BOOL operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(uint64_t *a1, int a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  char v10;
  BOOL v11;
  unsigned int v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;

  if (a2 == a3)
    return 0;
  v4 = *a1;
  v5 = **(_QWORD **)(*a1 + 56);
  v6 = *(unsigned __int8 *)(v5 + a2);
  if ((v6 - 1) > 3u)
  {
    v7 = 2;
    v8 = a3;
    v9 = *(unsigned __int8 *)(v5 + a3);
    v10 = v9 - 1;
    if ((v9 - 1) > 3u)
    {
LABEL_5:
      v11 = v7 >= 2;
      if (v7 != 2)
        return !v11;
      goto LABEL_11;
    }
  }
  else
  {
    v7 = dword_22DCE6740[(char)(v6 - 1)];
    v8 = a3;
    v9 = *(unsigned __int8 *)(v5 + a3);
    v10 = v9 - 1;
    if ((v9 - 1) > 3u)
      goto LABEL_5;
  }
  v12 = dword_22DCE6740[v10];
  v11 = v7 >= v12;
  if (v7 != v12)
    return !v11;
LABEL_11:
  if (v6 == 3)
  {
    v13 = *(double *)(**(_QWORD **)(v4 + 40) + 8 * a2) - *(double *)(**(_QWORD **)(v4 + 48) + 8 * a2);
  }
  else if (v6 == 2)
  {
    v13 = -*(double *)(**(_QWORD **)(v4 + 48) + 8 * a2);
  }
  else
  {
    v13 = 0.0;
    if (v6 == 1)
      v13 = *(double *)(**(_QWORD **)(v4 + 40) + 8 * a2);
  }
  v14 = **(_QWORD **)(v4 + 32);
  v15 = v13 + fabs(*(double *)(v14 + 8 * a2)) / *(double *)v4;
  if (v9 == 3)
  {
    v16 = *(double *)(**(_QWORD **)(v4 + 40) + 8 * v8) - *(double *)(**(_QWORD **)(v4 + 48) + 8 * v8);
  }
  else if (v9 == 2)
  {
    v16 = -*(double *)(**(_QWORD **)(v4 + 48) + 8 * v8);
  }
  else
  {
    v16 = 0.0;
    if (v9 == 1)
      v16 = *(double *)(**(_QWORD **)(v4 + 40) + 8 * v8);
  }
  return v15 < v16 + fabs(*(double *)(v14 + 8 * v8)) / *(double *)v4;
}

BOOL operations_research::glop::InitialBasis::TriangularColumnComparator::operator()(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  char v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;

  if ((_DWORD)a2 == (_DWORD)a3)
    return 0;
  v4 = *a1;
  v5 = **(_QWORD **)(*a1 + 56);
  v6 = *(unsigned __int8 *)(v5 + (int)a2);
  if ((v6 - 1) > 3u)
  {
    v7 = 2;
    v8 = (int)a3;
    v9 = *(unsigned __int8 *)(v5 + (int)a3);
    v10 = v9 - 1;
    if ((v9 - 1) > 3u)
    {
LABEL_5:
      v11 = v7 > 2;
      if (v7 != 2)
        return v11;
      goto LABEL_11;
    }
  }
  else
  {
    v7 = dword_22DCE6740[(char)(v6 - 1)];
    v8 = (int)a3;
    v9 = *(unsigned __int8 *)(v5 + (int)a3);
    v10 = v9 - 1;
    if ((v9 - 1) > 3u)
      goto LABEL_5;
  }
  v12 = dword_22DCE6740[v10];
  v11 = v7 > v12;
  if (v7 != v12)
    return v11;
LABEL_11:
  v13 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 56);
  v14 = *(_QWORD *)(v13 + (((a2 << 32) + 0x100000000) >> 29)) - *(_QWORD *)(v13 + 8 * (int)a2);
  v15 = *(_QWORD *)(v13 + (((a3 << 32) + 0x100000000) >> 29)) - *(_QWORD *)(v13 + 8 * v8);
  if (v14 != v15)
    return v14 > v15;
  if (v6 == 3)
  {
    v16 = *(double *)(**(_QWORD **)(v4 + 40) + 8 * (int)a2) - *(double *)(**(_QWORD **)(v4 + 48) + 8 * (int)a2);
  }
  else if (v6 == 2)
  {
    v16 = -*(double *)(**(_QWORD **)(v4 + 48) + 8 * (int)a2);
  }
  else
  {
    v16 = 0.0;
    if (v6 == 1)
      v16 = *(double *)(**(_QWORD **)(v4 + 40) + 8 * (int)a2);
  }
  v17 = **(_QWORD **)(v4 + 32);
  v18 = v16 + fabs(*(double *)(v17 + 8 * (int)a2)) / *(double *)v4;
  if (v9 == 3)
  {
    v19 = *(double *)(**(_QWORD **)(v4 + 40) + 8 * v8) - *(double *)(**(_QWORD **)(v4 + 48) + 8 * v8);
  }
  else if (v9 == 2)
  {
    v19 = -*(double *)(**(_QWORD **)(v4 + 48) + 8 * v8);
  }
  else
  {
    v19 = 0.0;
    if (v9 == 1)
      v19 = *(double *)(**(_QWORD **)(v4 + 40) + 8 * v8);
  }
  return v18 > v19 + fabs(*(double *)(v17 + 8 * v8)) / *(double *)v4;
}

_QWORD *std::priority_queue<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>,operations_research::glop::InitialBasis::TriangularColumnComparator>::pop(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  char *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;

  v1 = result;
  v3 = (unsigned int *)*result;
  v2 = result[1];
  v25 = result[3];
  v4 = v2 - (_QWORD)v3;
  if (v2 - (uint64_t)v3 >= 5)
  {
    v24 = v2;
    v5 = 0;
    v6 = v4 >> 2;
    v23 = *v3;
    v7 = (unint64_t)((v4 >> 2) - 2) >> 1;
    v22 = (char *)v3;
    do
    {
      while (1)
      {
        v11 = &v3[v5];
        v12 = v11[1];
        v10 = v11 + 1;
        v9 = v12;
        v13 = (2 * v5) | 1;
        v14 = 2 * v5 + 2;
        if (v14 < v6)
          break;
        v5 = (2 * v5) | 1;
        *v3 = v9;
        v3 = v10;
        if (v13 > v7)
          goto LABEL_9;
      }
      v8 = v10[1];
      result = (_QWORD *)operations_research::glop::InitialBasis::TriangularColumnComparator::operator()(&v25, v9, v8);
      if ((_DWORD)result)
      {
        LODWORD(v9) = v8;
        ++v10;
        v5 = v14;
      }
      else
      {
        v5 = v13;
      }
      *v3 = v9;
      v3 = v10;
    }
    while (v5 <= v7);
LABEL_9:
    v2 = v24;
    v15 = (unsigned int *)(v24 - 4);
    if (v10 == (unsigned int *)(v24 - 4))
    {
      *v10 = v23;
    }
    else
    {
      *v10 = *v15;
      *v15 = v23;
      v16 = (char *)v10 - v22 + 4;
      if (v16 >= 5)
      {
        v17 = (((unint64_t)v16 >> 2) - 2) >> 1;
        v18 = (unsigned int *)&v22[4 * v17];
        v19 = *v18;
        v20 = *v10;
        result = (_QWORD *)operations_research::glop::InitialBasis::TriangularColumnComparator::operator()(&v25, *v18, v20);
        if ((_DWORD)result)
        {
          do
          {
            v21 = v18;
            *v10 = v19;
            if (!v17)
              break;
            v17 = (v17 - 1) >> 1;
            v18 = (unsigned int *)&v22[4 * v17];
            v19 = *v18;
            result = (_QWORD *)operations_research::glop::InitialBasis::TriangularColumnComparator::operator()(&v25, *v18, v20);
            v10 = v21;
          }
          while ((result & 1) != 0);
          *v21 = v20;
        }
      }
    }
  }
  v1[1] = v2 - 4;
  return result;
}

void std::priority_queue<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>,operations_research::glop::InitialBasis::TriangularColumnComparator>::push(uint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _DWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  char *v24;
  unint64_t v25;
  char *v26;
  int v27;
  uint64_t v28;
  char *v29;
  unsigned int v30;
  char *v31;
  uint64_t v32;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    v8 = *(char **)a1;
    v9 = (uint64_t)&v5[-*(_QWORD *)a1];
    v10 = v9 >> 2;
    v11 = (v9 >> 2) + 1;
    if (v11 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = v4 - (_QWORD)v8;
    if (v12 >> 1 > v11)
      v11 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v14 = operator new(4 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v10];
    *v15 = *a2;
    v7 = (char *)(v15 + 1);
    if (v5 != v8)
    {
      v16 = v5 - v8 - 4;
      if (v16 < 0x2C)
        goto LABEL_32;
      if ((unint64_t)(v5 - v14 - v9) < 0x20)
        goto LABEL_32;
      v17 = (v16 >> 2) + 1;
      v18 = 4 * (v17 & 0x7FFFFFFFFFFFFFF8);
      v6 = &v5[-v18];
      v15 = (_DWORD *)((char *)v15 - v18);
      v19 = &v14[4 * v10 - 16];
      v20 = v5 - 16;
      v21 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v22 = *(_OWORD *)v20;
        *(v19 - 1) = *((_OWORD *)v20 - 1);
        *v19 = v22;
        v19 -= 2;
        v20 -= 32;
        v21 -= 8;
      }
      while (v21);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_32:
        do
        {
          v23 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *--v15 = v23;
        }
        while (v6 != v8);
      }
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v14[4 * v13];
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_DWORD *)v5 = *a2;
    v7 = v5 + 4;
  }
  *(_QWORD *)(a1 + 8) = v7;
  v24 = *(char **)a1;
  v32 = *(_QWORD *)(a1 + 24);
  if (v7 - v24 >= 5)
  {
    v25 = (((unint64_t)(v7 - v24) >> 2) - 2) >> 1;
    v26 = &v24[4 * v25];
    v27 = *(_DWORD *)v26;
    v30 = *((_DWORD *)v7 - 1);
    v29 = v7 - 4;
    v28 = v30;
    if (operations_research::glop::InitialBasis::TriangularColumnComparator::operator()(&v32, *(unsigned int *)v26, v30))
    {
      do
      {
        v31 = v26;
        *(_DWORD *)v29 = v27;
        if (!v25)
          break;
        v25 = (v25 - 1) >> 1;
        v26 = &v24[4 * v25];
        v27 = *(_DWORD *)v26;
        v29 = v31;
      }
      while (operations_research::glop::InitialBasis::TriangularColumnComparator::operator()(&v32, *(unsigned int *)v26, v28));
      *(_DWORD *)v31 = v28;
    }
  }
}

_QWORD *std::priority_queue<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>,operations_research::glop::InitialBasis::TriangularColumnComparator>::priority_queue<std::__wrap_iter<gtl::IntType<operations_research::glop::ColIndex_tag_,int>*>,void>(_QWORD *a1, _BYTE *a2, _BYTE *a3, uint64_t *a4)
{
  int64_t v6;
  uint64_t v7;
  char *v10;
  _BOOL8 v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  uint64_t v20;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v6 = a3 - a2;
  if (a3 == a2)
  {
    v7 = *a4;
    a1[3] = *a4;
    v20 = v7;
  }
  else
  {
    if (v6 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v10 = (char *)operator new(a3 - a2);
    v11 = (_BOOL8)v10;
    *a1 = v10;
    a1[1] = v10;
    v12 = &v10[4 * (v6 >> 2)];
    a1[2] = v12;
    if (a3 != a2)
      memmove(v10, a2, v6);
    a1[1] = v12;
    v13 = *a4;
    a1[3] = *a4;
    v20 = v13;
    v14 = (uint64_t)&v12[-v11];
    if ((uint64_t)&v12[-v11] >= 5)
    {
      v15 = v14 >> 2;
      v16 = (unint64_t)((v14 >> 2) - 2) >> 1;
      v17 = v16 + 1;
      v18 = (unsigned int *)(v11 + 4 * v16);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::TriangularColumnComparator &,std::__wrap_iter<gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>>(v11, &v20, v15, v18--);
        --v17;
      }
      while (v17);
    }
  }
  return a1;
}

void sub_22D9FC624(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::TriangularColumnComparator &,std::__wrap_iter<gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>>(_BOOL8 result, uint64_t *a2, uint64_t a3, unsigned int *a4)
{
  unint64_t v4;
  _DWORD *v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  _BOOL4 v17;
  unsigned int v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 2)
    {
      v8 = a3;
      v10 = ((uint64_t)a4 - result) >> 1;
      v11 = v10 | 1;
      v12 = (unsigned int *)(result + 4 * (v10 | 1));
      v13 = v10 + 2;
      v14 = *v12;
      if (v10 + 2 >= a3)
      {
        v23 = *a4;
        result = operations_research::glop::InitialBasis::TriangularColumnComparator::operator()(a2, v14, v23);
        if (!result)
          goto LABEL_18;
      }
      else
      {
        v15 = v4 >> 1;
        v16 = v12[1];
        v17 = operations_research::glop::InitialBasis::TriangularColumnComparator::operator()(a2, v14, v16);
        if (v17)
          LODWORD(v14) = v16;
        v7 = v15;
        v8 = a3;
        if (v17)
        {
          ++v12;
          v11 = v13;
        }
        v23 = *v5;
        result = operations_research::glop::InitialBasis::TriangularColumnComparator::operator()(a2, v14, v23);
        if (!result)
        {
LABEL_18:
          while (1)
          {
            *v5 = v14;
            v5 = v12;
            if (v7 < v11)
              break;
            v20 = (2 * v11) | 1;
            v12 = (unsigned int *)(v6 + 4 * v20);
            v21 = 2 * v11 + 2;
            LODWORD(v14) = *v12;
            if (v21 < v8)
            {
              v18 = v12[1];
              v19 = operations_research::glop::InitialBasis::TriangularColumnComparator::operator()(a2, *v12, v18);
              if (v19)
              {
                LODWORD(v14) = v18;
                ++v12;
              }
              v8 = a3;
              if (v19)
                v11 = v21;
              else
                v11 = v20;
              result = operations_research::glop::InitialBasis::TriangularColumnComparator::operator()(a2, v14, v23);
              if (result)
                break;
            }
            else
            {
              v11 = (2 * v11) | 1;
              result = operations_research::glop::InitialBasis::TriangularColumnComparator::operator()(a2, v14, v23);
              if (result)
                break;
            }
          }
          *v5 = v23;
        }
      }
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::BixbyColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *,false>(uint64_t result, int *a2, uint64_t *a3, uint64_t a4, int a5)
{
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  int v16;
  int v17;
  int v18;
  BOOL v19;
  _BOOL4 v20;
  int v21;
  int v22;
  BOOL v23;
  _BOOL4 v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int *v30;
  int *v31;
  int v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  int v37;
  _BOOL4 v38;
  int *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int *v44;
  int *v45;
  int v46;
  int v47;
  int v48;
  BOOL v49;
  int v50;
  _BOOL4 v51;
  int *v52;
  int *v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  BOOL v59;
  int v60;
  _BOOL4 v61;
  int *v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int *v67;
  char v68;
  BOOL v69;
  int v70;
  int v71;
  int v72;
  int v73;
  BOOL v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  int *v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int *v83;
  int *v84;

  v8 = (int *)result;
LABEL_2:
  v9 = v8;
  v83 = a2;
LABEL_3:
  v10 = 1 - a4;
  v82 = a5;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v70 = *(a2 - 1);
        v71 = *v9;
        result = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v70, *v9);
        if ((_DWORD)result)
        {
          *v9 = v70;
          *(a2 - 1) = v71;
        }
        return result;
      case 3uLL:
        v72 = *v9;
        v73 = v9[1];
        v74 = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v73, *v9);
        v75 = *(a2 - 1);
        result = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v75, v73);
        if (v74)
        {
          if ((_DWORD)result)
          {
            *v8 = v75;
            *(a2 - 1) = v72;
          }
          else
          {
            *v8 = v73;
            v8[1] = v72;
            v81 = *(a2 - 1);
            result = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v81, v72);
            if ((_DWORD)result)
            {
              v8[1] = v81;
              *(a2 - 1) = v72;
            }
          }
        }
        else if ((_DWORD)result)
        {
          v8[1] = v75;
          *(a2 - 1) = v73;
          v80 = *v8;
          v79 = v8[1];
          result = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v79, *v8);
          if ((_DWORD)result)
          {
            *v8 = v79;
            v8[1] = v80;
          }
        }
        return result;
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::BixbyColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(v9, v9 + 1, v9 + 2, a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::BixbyColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1, a3);
      default:
        if (v12 <= 95)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::BixbyColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(v9, a2, a3);
          else
            return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::BixbyColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>((uint64_t)v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          v16 = *(a2 - 1);
          v84 = v15;
          if ((unint64_t)v12 < 0x201)
          {
            v21 = *v9;
            v22 = *v15;
            v23 = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, *v8, *v15);
            v24 = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v16, v21);
            if (!v23)
            {
              if (v24)
              {
                *v8 = v16;
                *(a2 - 1) = v21;
                v27 = *v8;
                v28 = *v84;
                if (operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, *v8, *v84))
                {
                  *v84 = v27;
                  *v8 = v28;
                  if ((a5 & 1) != 0)
                    goto LABEL_61;
                  goto LABEL_34;
                }
              }
              goto LABEL_33;
            }
            if (v24)
            {
              *v84 = v16;
            }
            else
            {
              *v84 = v21;
              *v8 = v22;
              v42 = *(a2 - 1);
              if (!operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v42, v22))
                goto LABEL_33;
              *v8 = v42;
            }
            *(a2 - 1) = v22;
LABEL_33:
            if ((a5 & 1) != 0)
              goto LABEL_61;
            goto LABEL_34;
          }
          v17 = *v15;
          v18 = *v9;
          v19 = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, *v15, *v8);
          v20 = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v16, v17);
          if (v19)
          {
            if (v20)
            {
              *v8 = v16;
            }
            else
            {
              *v8 = v17;
              *v84 = v18;
              v29 = *(a2 - 1);
              if (!operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v29, v18))
                goto LABEL_24;
              *v84 = v29;
            }
            *(a2 - 1) = v18;
          }
          else if (v20)
          {
            *v84 = v16;
            *(a2 - 1) = v17;
            v25 = *v84;
            v26 = *v8;
            if (operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, *v84, *v8))
            {
              *v8 = v25;
              *v84 = v26;
            }
          }
LABEL_24:
          v30 = a2;
          v31 = &v8[v14];
          v34 = *(v31 - 1);
          v33 = v31 - 1;
          v32 = v34;
          v35 = v8[1];
          v36 = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v34, v35);
          v37 = *(v30 - 2);
          v38 = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v37, v34);
          if (v36)
          {
            if (v38)
            {
              v8[1] = v37;
              v39 = v83;
            }
            else
            {
              v8[1] = v32;
              *v33 = v35;
              v39 = v83;
              v43 = *(v83 - 2);
              if (!operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v43, v35))
                goto LABEL_39;
              *v33 = v43;
            }
            *(v39 - 2) = v35;
          }
          else
          {
            v39 = v83;
            if (v38)
            {
              *v33 = v37;
              *(v83 - 2) = v32;
              v40 = *v33;
              v41 = v8[1];
              if (operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, *v33, v41))
              {
                v8[1] = v40;
                *v33 = v41;
              }
            }
          }
LABEL_39:
          v44 = &v8[v14];
          v47 = v44[1];
          v45 = v44 + 1;
          v46 = v47;
          v48 = v8[2];
          v49 = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v47, v48);
          v50 = *(v39 - 3);
          v51 = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v50, v47);
          if (v49)
          {
            a5 = v82;
            if (v51)
            {
              v8[2] = v50;
              v52 = v83;
              v53 = v84;
            }
            else
            {
              v8[2] = v46;
              *v45 = v48;
              v56 = *(v83 - 3);
              v53 = v84;
              if (!operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v56, v48))
                goto LABEL_48;
              *v45 = v56;
              v52 = v83;
            }
            *(v52 - 3) = v48;
          }
          else
          {
            a5 = v82;
            v53 = v84;
            if (v51)
            {
              *v45 = v50;
              *(v83 - 3) = v46;
              v54 = *v45;
              v55 = v8[2];
              if (operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, *v45, v55))
              {
                v8[2] = v54;
                *v45 = v55;
              }
            }
          }
LABEL_48:
          v57 = *v53;
          v58 = *v33;
          v59 = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, *v53, *v33);
          v60 = *v45;
          v61 = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, *v45, v57);
          if (v59)
          {
            if (v61)
            {
              v62 = v84;
LABEL_56:
              *v33 = v60;
              *v45 = v58;
              a2 = v83;
              v64 = *v8;
              *v8 = v57;
              *v62 = v64;
              if ((a5 & 1) != 0)
                goto LABEL_61;
              goto LABEL_34;
            }
            *v33 = v57;
            v62 = v84;
            *v84 = v58;
            v33 = v84;
            v57 = v60;
            if (operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v60, v58))
              goto LABEL_56;
            a2 = v83;
            v66 = *v8;
            *v8 = v58;
            *v84 = v66;
            if ((a5 & 1) != 0)
              goto LABEL_61;
          }
          else
          {
            if (!v61)
            {
              a2 = v83;
              v65 = *v8;
              *v8 = v57;
              *v84 = v65;
              if ((a5 & 1) != 0)
                goto LABEL_61;
              goto LABEL_34;
            }
            v62 = v84;
            *v84 = v60;
            *v45 = v57;
            v45 = v84;
            v57 = v58;
            if (operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v60, v58))
              goto LABEL_56;
            a2 = v83;
            v63 = *v8;
            *v8 = v60;
            *v84 = v63;
            if ((a5 & 1) != 0)
              goto LABEL_61;
          }
LABEL_34:
          if (!operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, *(v8 - 1), *v8))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *,operations_research::glop::InitialBasis::BixbyColumnComparator &>(v8, a2, a3);
            v9 = (int *)result;
            goto LABEL_65;
          }
LABEL_61:
          v67 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *,operations_research::glop::InitialBasis::BixbyColumnComparator &>(v8, a2, a3);
          if ((v68 & 1) == 0)
            goto LABEL_64;
          v69 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::BixbyColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(v8, v67, a3);
          v9 = v67 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::BixbyColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(v67 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v69)
              continue;
LABEL_64:
            result = std::__introsort<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::BixbyColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *,false>(v8, v67, a3, -v11, a5 & 1);
            v9 = v67 + 1;
LABEL_65:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v67;
          if (v69)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
        {
          v76 = (v13 - 2) >> 1;
          v77 = v76 + 1;
          v78 = &v9[v76];
          do
          {
            std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::BixbyColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>((_BOOL8)v9, a3, a2 - v9, v78--);
            --v77;
          }
          while (v77);
          return (uint64_t)std::__sort_heap[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::BixbyColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(v9, a2, a3);
        }
        return result;
    }
  }
}

int *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::BixbyColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(int *result, int *a2, uint64_t *a3)
{
  int *v4;
  int *v5;
  uint64_t v7;
  int *v8;
  int *v9;
  int *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  char v22;
  BOOL v23;
  unsigned int v24;
  double v25;

  if (result == a2)
    return result;
  v4 = result;
  v5 = result + 1;
  if (result + 1 == a2)
    return result;
  v7 = 0;
  v8 = result;
  while (2)
  {
    v10 = v5;
    v12 = *v8;
    v11 = v8[1];
    result = (int *)operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v11, *v8);
    if (!(_DWORD)result)
      goto LABEL_6;
    v8[1] = v12;
    v9 = v4;
    if (v8 == v4)
      goto LABEL_5;
    v13 = *a3;
    v14 = v7;
    while (1)
    {
      v16 = *(int *)((char *)v4 + v14 - 4);
      if (v11 == v16)
      {
LABEL_4:
        v9 = v8;
        goto LABEL_5;
      }
      v17 = **(_QWORD **)(v13 + 56);
      v18 = *(unsigned __int8 *)(v17 + v11);
      if ((v18 - 1) > 3u)
      {
        v19 = 2;
        v20 = v16;
        v21 = *(unsigned __int8 *)(v17 + v16);
        v22 = v21 - 1;
        result = (int *)(v21 - 1);
        if (result > 3)
        {
LABEL_16:
          v23 = v19 >= 2;
          if (v19 != 2)
            goto LABEL_17;
          goto LABEL_22;
        }
      }
      else
      {
        v19 = dword_22DCE6740[(char)(v18 - 1)];
        v20 = v16;
        v21 = *(unsigned __int8 *)(v17 + v16);
        v22 = v21 - 1;
        result = (int *)(v21 - 1);
        if (result > 3)
          goto LABEL_16;
      }
      v24 = dword_22DCE6740[v22];
      v23 = v19 >= v24;
      if (v19 != v24)
      {
LABEL_17:
        if (v23)
          goto LABEL_4;
        goto LABEL_12;
      }
LABEL_22:
      if (v18 == 3)
      {
        v25 = *(double *)(**(_QWORD **)(v13 + 40) + 8 * v11) - *(double *)(**(_QWORD **)(v13 + 48) + 8 * v11);
LABEL_28:
        if (v21 == 3)
          goto LABEL_10;
        goto LABEL_31;
      }
      if (v18 != 2)
      {
        v25 = 0.0;
        if (v18 == 1)
        {
          v25 = *(double *)(**(_QWORD **)(v13 + 40) + 8 * v11);
          if (v21 == 3)
            goto LABEL_10;
          goto LABEL_31;
        }
        goto LABEL_28;
      }
      v25 = -*(double *)(**(_QWORD **)(v13 + 48) + 8 * v11);
      if (v21 == 3)
      {
LABEL_10:
        v15 = *(double *)(**(_QWORD **)(v13 + 40) + 8 * v20) - *(double *)(**(_QWORD **)(v13 + 48) + 8 * v20);
        goto LABEL_11;
      }
LABEL_31:
      if (v21 == 2)
      {
        v15 = -*(double *)(**(_QWORD **)(v13 + 48) + 8 * v20);
      }
      else
      {
        v15 = 0.0;
        if (v21 == 1)
          v15 = *(double *)(**(_QWORD **)(v13 + 40) + 8 * v20);
      }
LABEL_11:
      if (v25 + fabs(*(double *)(**(_QWORD **)(v13 + 32) + 8 * v11)) / *(double *)v13 >= v15
                                                                                          + fabs(*(double *)(**(_QWORD **)(v13 + 32) + 8 * v20))
                                                                                          / *(double *)v13)
        break;
LABEL_12:
      --v8;
      *(int *)((char *)v4 + v14) = v16;
      v14 -= 4;
      if (!v14)
      {
        v9 = v4;
        goto LABEL_5;
      }
    }
    v9 = (int *)((char *)v4 + v14);
LABEL_5:
    *v9 = v11;
LABEL_6:
    v5 = v10 + 1;
    v7 += 4;
    v8 = v10;
    if (v10 + 1 != a2)
      continue;
    return result;
  }
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::BixbyColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(uint64_t result, int *a2, uint64_t *a3)
{
  int *v4;
  int *v5;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  double v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  char v19;
  BOOL v20;
  unsigned int v21;
  double v22;

  if ((int *)result != a2)
  {
    v4 = (int *)result;
    v5 = (int *)(result + 4);
    if ((int *)(result + 4) != a2)
    {
      v7 = *a3;
      do
      {
        v8 = *v5;
        v9 = *v4;
        result = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, *v5, *v4);
        if ((_DWORD)result)
        {
          *v5 = v9;
          v10 = *(v4 - 1);
          v11 = v4;
          if (v8 != v10)
          {
            v12 = **(_QWORD **)(v7 + 56);
            v13 = *(unsigned __int8 *)(v12 + v8);
            v14 = (char)(v13 - 1);
            v11 = v4;
            do
            {
              if (v14 > 3)
              {
                v16 = 2;
                v17 = v10;
                v18 = *(unsigned __int8 *)(v12 + v10);
                v19 = v18 - 1;
                result = (v18 - 1);
                if (result > 3)
                {
LABEL_14:
                  v20 = v16 >= 2;
                  if (v16 == 2)
                    goto LABEL_20;
                  goto LABEL_15;
                }
              }
              else
              {
                v16 = dword_22DCE6740[v14];
                v17 = v10;
                v18 = *(unsigned __int8 *)(v12 + v10);
                v19 = v18 - 1;
                result = (v18 - 1);
                if (result > 3)
                  goto LABEL_14;
              }
              v21 = dword_22DCE6740[v19];
              v20 = v16 >= v21;
              if (v16 == v21)
              {
LABEL_20:
                if (v13 == 3)
                {
                  result = 8 * v8;
                  v22 = *(double *)(**(_QWORD **)(v7 + 40) + result) - *(double *)(**(_QWORD **)(v7 + 48) + result);
                }
                else
                {
                  if (v13 == 2)
                  {
                    v22 = -*(double *)(**(_QWORD **)(v7 + 48) + 8 * v8);
                    if (v18 != 3)
                      goto LABEL_27;
LABEL_9:
                    v15 = *(double *)(**(_QWORD **)(v7 + 40) + 8 * v17) - *(double *)(**(_QWORD **)(v7 + 48) + 8 * v17);
                    goto LABEL_10;
                  }
                  v22 = 0.0;
                  if (v13 == 1)
                  {
                    v22 = *(double *)(**(_QWORD **)(v7 + 40) + 8 * v8);
                    if (v18 == 3)
                      goto LABEL_9;
LABEL_27:
                    if (v18 == 2)
                    {
                      v15 = -*(double *)(**(_QWORD **)(v7 + 48) + 8 * v17);
                    }
                    else
                    {
                      v15 = 0.0;
                      if (v18 == 1)
                        v15 = *(double *)(**(_QWORD **)(v7 + 40) + 8 * v17);
                    }
LABEL_10:
                    if (v22 + fabs(*(double *)(**(_QWORD **)(v7 + 32) + 8 * v8)) / *(double *)v7 >= v15 + fabs(*(double *)(**(_QWORD **)(v7 + 32) + 8 * v17)) / *(double *)v7)
                      break;
                    goto LABEL_11;
                  }
                }
                if (v18 == 3)
                  goto LABEL_9;
                goto LABEL_27;
              }
LABEL_15:
              if (v20)
                break;
LABEL_11:
              *v11 = v10;
              v10 = *(v11 - 2);
              --v11;
            }
            while (v8 != v10);
          }
          *v11 = v8;
        }
        ++v5;
        ++v4;
      }
      while (v5 != a2);
    }
  }
  return result;
}

int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *,operations_research::glop::InitialBasis::BixbyColumnComparator &>(int *a1, int *a2, uint64_t *a3)
{
  int *v4;
  int v6;
  int *v7;
  int v8;
  int *v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  char v20;
  BOOL v21;
  unsigned int v22;
  double v23;
  double v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  double v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  char v34;
  BOOL v35;
  unsigned int v36;
  double v37;

  v4 = a2;
  v6 = *a1;
  if (operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, *a1, *(a2 - 1)))
  {
    v7 = a1;
    do
    {
      v8 = v7[1];
      ++v7;
    }
    while (!operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v6, v8));
  }
  else
  {
    v9 = a1 + 1;
    do
    {
      v7 = v9;
      if (v9 >= v4)
        break;
      ++v9;
    }
    while (!operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v6, *v7));
  }
  if (v7 < v4)
  {
    do
      v10 = *--v4;
    while (operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v6, v10));
  }
  if (v7 < v4)
  {
    v11 = *a3;
    v12 = *v7;
    v13 = *v4;
    do
    {
      *v7++ = v13;
      *v4 = v12;
      v14 = *a3;
      while (1)
      {
        v12 = *v7;
        if (v6 == *v7)
          goto LABEL_17;
        v15 = **(_QWORD **)(v14 + 56);
        v16 = *(unsigned __int8 *)(v15 + v6);
        if ((v16 - 1) > 3u)
          break;
        v17 = dword_22DCE6740[(char)(v16 - 1)];
        v18 = v12;
        v19 = *(unsigned __int8 *)(v15 + v12);
        v20 = v19 - 1;
        if ((v19 - 1) <= 3u)
          goto LABEL_24;
LABEL_21:
        v21 = v17 >= 2;
        if (v17 == 2)
          goto LABEL_25;
LABEL_15:
        if (!v21)
          goto LABEL_39;
LABEL_17:
        ++v7;
      }
      v17 = 2;
      v18 = v12;
      v19 = *(unsigned __int8 *)(v15 + v12);
      v20 = v19 - 1;
      if ((v19 - 1) > 3u)
        goto LABEL_21;
LABEL_24:
      v22 = dword_22DCE6740[v20];
      v21 = v17 >= v22;
      if (v17 != v22)
        goto LABEL_15;
LABEL_25:
      if (v16 == 3)
      {
        v23 = *(double *)(**(_QWORD **)(v14 + 40) + 8 * v6) - *(double *)(**(_QWORD **)(v14 + 48) + 8 * v6);
        if (v19 == 3)
          goto LABEL_37;
        goto LABEL_32;
      }
      if (v16 == 2)
      {
        v23 = -*(double *)(**(_QWORD **)(v14 + 48) + 8 * v6);
LABEL_31:
        if (v19 == 3)
          goto LABEL_37;
        goto LABEL_32;
      }
      v23 = 0.0;
      if (v16 != 1)
        goto LABEL_31;
      v23 = *(double *)(**(_QWORD **)(v14 + 40) + 8 * v6);
      if (v19 == 3)
      {
LABEL_37:
        v24 = *(double *)(**(_QWORD **)(v14 + 40) + 8 * v18) - *(double *)(**(_QWORD **)(v14 + 48) + 8 * v18);
        goto LABEL_38;
      }
LABEL_32:
      if (v19 == 2)
      {
        v24 = -*(double *)(**(_QWORD **)(v14 + 48) + 8 * v18);
      }
      else
      {
        v24 = 0.0;
        if (v19 == 1)
          v24 = *(double *)(**(_QWORD **)(v14 + 40) + 8 * v18);
      }
LABEL_38:
      if (v23 + fabs(*(double *)(**(_QWORD **)(v14 + 32) + 8 * v6)) / *(double *)v14 >= v24
                                                                                         + fabs(*(double *)(**(_QWORD **)(v14 + 32) + 8 * v18))
                                                                                         / *(double *)v14)
        goto LABEL_17;
LABEL_39:
      v25 = *--v4;
      v13 = v25;
      if (v6 != v25)
      {
        v26 = **(_QWORD **)(v11 + 56);
        v27 = *(unsigned __int8 *)(v26 + v6);
        v28 = (char)(v27 - 1);
        do
        {
          if (v28 > 3)
          {
            v31 = 2;
            v32 = v13;
            v33 = *(unsigned __int8 *)(v26 + v13);
            v34 = v33 - 1;
            if ((v33 - 1) > 3u)
            {
LABEL_46:
              v35 = v31 >= 2;
              if (v31 == 2)
                goto LABEL_52;
              goto LABEL_47;
            }
          }
          else
          {
            v31 = dword_22DCE6740[v28];
            v32 = v13;
            v33 = *(unsigned __int8 *)(v26 + v13);
            v34 = v33 - 1;
            if ((v33 - 1) > 3u)
              goto LABEL_46;
          }
          v36 = dword_22DCE6740[v34];
          v35 = v31 >= v36;
          if (v31 == v36)
          {
LABEL_52:
            if (v27 == 3)
            {
              v37 = *(double *)(**(_QWORD **)(v11 + 40) + 8 * v6) - *(double *)(**(_QWORD **)(v11 + 48) + 8 * v6);
            }
            else
            {
              if (v27 == 2)
              {
                v37 = -*(double *)(**(_QWORD **)(v11 + 48) + 8 * v6);
                if (v33 != 3)
                  goto LABEL_59;
LABEL_41:
                v29 = *(double *)(**(_QWORD **)(v11 + 40) + 8 * v32) - *(double *)(**(_QWORD **)(v11 + 48) + 8 * v32);
                goto LABEL_42;
              }
              v37 = 0.0;
              if (v27 == 1)
              {
                v37 = *(double *)(**(_QWORD **)(v11 + 40) + 8 * v6);
                if (v33 == 3)
                  goto LABEL_41;
LABEL_59:
                if (v33 == 2)
                {
                  v29 = -*(double *)(**(_QWORD **)(v11 + 48) + 8 * v32);
                }
                else
                {
                  v29 = 0.0;
                  if (v33 == 1)
                    v29 = *(double *)(**(_QWORD **)(v11 + 40) + 8 * v32);
                }
LABEL_42:
                if (v37 + fabs(*(double *)(**(_QWORD **)(v11 + 32) + 8 * v6)) / *(double *)v11 >= v29 + fabs(*(double *)(**(_QWORD **)(v11 + 32) + 8 * v32)) / *(double *)v11)
                  goto LABEL_13;
                goto LABEL_43;
              }
            }
            if (v33 == 3)
              goto LABEL_41;
            goto LABEL_59;
          }
LABEL_47:
          if (v35)
            goto LABEL_13;
LABEL_43:
          v30 = *--v4;
          v13 = v30;
        }
        while (v6 != v30);
      }
      v13 = v6;
LABEL_13:
      ;
    }
    while (v7 < v4);
  }
  if (v7 - 1 != a1)
    *a1 = *(v7 - 1);
  *(v7 - 1) = v6;
  return v7;
}

int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *,operations_research::glop::InitialBasis::BixbyColumnComparator &>(int *a1, int *a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  int *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int *v14;
  int *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  int v22;
  char v23;
  BOOL v24;
  unsigned int v25;
  double v26;
  double v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  unsigned int v33;
  BOOL v34;
  unsigned int v35;
  double v36;
  double v37;
  int *result;

  v6 = 0;
  v7 = *a1;
  do
    v8 = a1[++v6];
  while (operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v8, v7));
  v9 = &a1[v6];
  if (v6 == 1)
  {
    do
    {
      if (v9 >= a2)
        break;
      v11 = *--a2;
    }
    while (!operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v11, v7));
  }
  else
  {
    do
      v10 = *--a2;
    while (!operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v10, v7));
  }
  if (v9 < a2)
  {
    v12 = *a3;
    v13 = *a2;
    v14 = &a1[v6];
    v15 = a2;
    while (1)
    {
      *v14 = v13;
      *v15 = v8;
      v16 = v14[1];
      ++v14;
      v8 = v16;
      if (v16 != v7)
        break;
LABEL_12:
      v8 = v7;
LABEL_13:
      v17 = *a3;
      do
      {
        while (1)
        {
          do
          {
            v18 = *--v15;
            v13 = v18;
          }
          while (v18 == v7);
          v19 = **(_QWORD **)(v17 + 56);
          v20 = *(unsigned __int8 *)(v19 + v13);
          if ((v20 - 1) > 3u)
            break;
          v21 = dword_22DCE6740[(char)(v20 - 1)];
          v22 = *(unsigned __int8 *)(v19 + v7);
          v23 = v22 - 1;
          if ((v22 - 1) > 3u)
            goto LABEL_19;
LABEL_22:
          v25 = dword_22DCE6740[v23];
          v24 = v21 >= v25;
          if (v21 == v25)
            goto LABEL_23;
LABEL_14:
          if (!v24)
            goto LABEL_10;
        }
        v21 = 2;
        v22 = *(unsigned __int8 *)(v19 + v7);
        v23 = v22 - 1;
        if ((v22 - 1) <= 3u)
          goto LABEL_22;
LABEL_19:
        v24 = v21 >= 2;
        if (v21 != 2)
          goto LABEL_14;
LABEL_23:
        if (v20 == 3)
        {
          v26 = *(double *)(**(_QWORD **)(v17 + 40) + 8 * v13) - *(double *)(**(_QWORD **)(v17 + 48) + 8 * v13);
          if (v22 == 3)
          {
LABEL_35:
            v27 = *(double *)(**(_QWORD **)(v17 + 40) + 8 * v7) - *(double *)(**(_QWORD **)(v17 + 48) + 8 * v7);
            continue;
          }
        }
        else
        {
          if (v20 == 2)
          {
            v26 = -*(double *)(**(_QWORD **)(v17 + 48) + 8 * v13);
          }
          else
          {
            v26 = 0.0;
            if (v20 == 1)
            {
              v26 = *(double *)(**(_QWORD **)(v17 + 40) + 8 * v13);
              if (v22 == 3)
                goto LABEL_35;
              goto LABEL_30;
            }
          }
          if (v22 == 3)
            goto LABEL_35;
        }
LABEL_30:
        if (v22 == 2)
        {
          v27 = -*(double *)(**(_QWORD **)(v17 + 48) + 8 * v7);
        }
        else
        {
          v27 = 0.0;
          if (v22 == 1)
            v27 = *(double *)(**(_QWORD **)(v17 + 40) + 8 * v7);
        }
      }
      while (v26 + fabs(*(double *)(**(_QWORD **)(v17 + 32) + 8 * v13)) / *(double *)v17 >= v27
                                                                                             + fabs(*(double *)(**(_QWORD **)(v17 + 32) + 8 * v7))
                                                                                             / *(double *)v17);
LABEL_10:
      if (v14 >= v15)
        goto LABEL_63;
    }
    v28 = **(_QWORD **)(v12 + 56);
    v29 = *(unsigned __int8 *)(v28 + v7);
    v30 = (char)(v29 - 1);
    while (1)
    {
      v32 = *(unsigned __int8 *)(v28 + v8);
      if ((v32 - 1) > 3u)
      {
        v33 = 2;
        if (v30 > 3)
        {
LABEL_43:
          v34 = v33 >= 2;
          if (v33 != 2)
            goto LABEL_39;
          goto LABEL_47;
        }
      }
      else
      {
        v33 = dword_22DCE6740[(char)(v32 - 1)];
        if (v30 > 3)
          goto LABEL_43;
      }
      v35 = dword_22DCE6740[v30];
      v34 = v33 >= v35;
      if (v33 != v35)
      {
LABEL_39:
        if (v34)
          goto LABEL_13;
        goto LABEL_40;
      }
LABEL_47:
      if (v32 == 3)
      {
        v36 = *(double *)(**(_QWORD **)(v12 + 40) + 8 * v8) - *(double *)(**(_QWORD **)(v12 + 48) + 8 * v8);
LABEL_53:
        if (v29 == 3)
          goto LABEL_58;
        goto LABEL_54;
      }
      if (v32 != 2)
      {
        v36 = 0.0;
        if (v32 == 1)
        {
          v36 = *(double *)(**(_QWORD **)(v12 + 40) + 8 * v8);
          if (v29 == 3)
            goto LABEL_58;
          goto LABEL_54;
        }
        goto LABEL_53;
      }
      v36 = -*(double *)(**(_QWORD **)(v12 + 48) + 8 * v8);
      if (v29 == 3)
      {
LABEL_58:
        v37 = *(double *)(**(_QWORD **)(v12 + 40) + 8 * v7) - *(double *)(**(_QWORD **)(v12 + 48) + 8 * v7);
        goto LABEL_60;
      }
LABEL_54:
      if (v29 == 2)
      {
        v37 = -*(double *)(**(_QWORD **)(v12 + 48) + 8 * v7);
      }
      else
      {
        v37 = 0.0;
        if (v29 == 1)
          v37 = *(double *)(**(_QWORD **)(v12 + 40) + 8 * v7);
      }
LABEL_60:
      if (v36 + fabs(*(double *)(**(_QWORD **)(v12 + 32) + 8 * v8)) / *(double *)v12 >= v37
                                                                                         + fabs(*(double *)(**(_QWORD **)(v12 + 32) + 8 * v7))
                                                                                         / *(double *)v12)
        goto LABEL_13;
LABEL_40:
      v31 = v14[1];
      ++v14;
      v8 = v31;
      if (v31 == v7)
        goto LABEL_12;
    }
  }
  v14 = &a1[v6];
LABEL_63:
  result = v14 - 1;
  if (v14 - 1 != a1)
    *a1 = *result;
  *result = v7;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::BixbyColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(int *a1, int *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  int v8;
  int v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  _BOOL4 v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  int *v19;
  _BOOL4 v20;
  int *v21;
  int *v22;
  _BOOL4 v23;
  int v24;
  int v25;
  BOOL v26;
  int *v27;
  int v28;
  uint64_t i;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  int v35;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v8, *a1))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      v10 = *a1;
      v11 = a1[1];
      v12 = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v11, *a1);
      v13 = *(a2 - 1);
      v14 = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v13, v11);
      if (v12)
      {
        if (v14)
        {
          *a1 = v13;
        }
        else
        {
          *a1 = v11;
          a1[1] = v10;
          v35 = *(a2 - 1);
          if (!operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v35, v10))
            return 1;
          a1[1] = v35;
        }
        *(a2 - 1) = v10;
      }
      else if (v14)
      {
        a1[1] = v13;
        *(a2 - 1) = v11;
        v25 = *a1;
        v24 = a1[1];
        if (operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v24, *a1))
        {
          *a1 = v24;
          a1[1] = v25;
        }
      }
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::BixbyColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::BixbyColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v15 = a1[1];
      v16 = *a1;
      v17 = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v15, *a1);
      v19 = a1 + 2;
      v18 = a1[2];
      v20 = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v18, v15);
      if (v17)
      {
        v21 = a1;
        v22 = a1 + 2;
        if (!v20)
        {
          *a1 = v15;
          a1[1] = v16;
          v23 = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v18, v16);
          v21 = a1 + 1;
          v22 = a1 + 2;
          if (!v23)
            goto LABEL_19;
        }
LABEL_18:
        *v21 = v18;
        *v22 = v16;
        goto LABEL_19;
      }
      if (v20)
      {
        a1[1] = v18;
        *v19 = v15;
        v26 = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v18, v16);
        v21 = a1;
        v22 = a1 + 1;
        if (v26)
          goto LABEL_18;
      }
LABEL_19:
      v27 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v28 = 0;
      for (i = 12; ; i += 4)
      {
        v30 = *v27;
        v31 = *v19;
        if (operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, *v27, *v19))
          break;
LABEL_22:
        v19 = v27++;
        if (v27 == a2)
          return 1;
      }
      v32 = i;
      do
      {
        *(int *)((char *)a1 + v32) = v31;
        v33 = v32 - 4;
        if (v32 == 4)
        {
          *a1 = v30;
          if (++v28 != 8)
            goto LABEL_22;
          return v27 + 1 == a2;
        }
        v31 = *(int *)((char *)a1 + v32 - 8);
        v34 = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, v30, v31);
        v32 = v33;
      }
      while (v34);
      *(int *)((char *)a1 + v33) = v30;
      if (++v28 != 8)
        goto LABEL_22;
      return v27 + 1 == a2;
  }
}

BOOL std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::BixbyColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(int *a1, int *a2, int *a3, int *a4, uint64_t *a5)
{
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  _BOOL4 v15;
  int v16;
  int v17;
  int v18;
  _BOOL8 result;
  int v20;
  int v21;
  int v22;
  int v23;

  v10 = *a2;
  v11 = *a2;
  v12 = *a1;
  v13 = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a5, *a2, *a1);
  v14 = *a3;
  v15 = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a5, *a3, v10);
  if (v13)
  {
    if (v15)
    {
      *a1 = v14;
    }
    else
    {
      *a1 = v11;
      *a2 = v12;
      v10 = *a3;
      v11 = *a3;
      if (!operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a5, *a3, v12))
        goto LABEL_11;
      *a2 = v11;
    }
    *a3 = v12;
    v10 = v12;
    v11 = v12;
LABEL_11:
    v18 = *a4;
    result = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a5, *a4, v10);
    if (!result)
      return result;
    goto LABEL_14;
  }
  if (v15)
  {
    *a2 = v14;
    *a3 = v11;
    v16 = *a2;
    v17 = *a1;
    if (!operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a5, *a2, *a1))
      goto LABEL_11;
    *a1 = v16;
    *a2 = v17;
    v11 = *a3;
    v18 = *a4;
    result = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a5, *a4, *a3);
    if (!result)
      return result;
  }
  else
  {
    v11 = v14;
    v18 = *a4;
    result = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a5, *a4, v14);
    if (!result)
      return result;
  }
LABEL_14:
  *a3 = v18;
  *a4 = v11;
  v20 = *a3;
  v21 = *a2;
  result = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a5, *a3, *a2);
  if (result)
  {
    *a2 = v20;
    *a3 = v21;
    v22 = *a2;
    v23 = *a1;
    result = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a5, *a2, *a1);
    if (result)
    {
      *a1 = v22;
      *a2 = v23;
    }
  }
  return result;
}

BOOL std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::BixbyColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(int *a1, int *a2, int *a3, int *a4, int *a5, uint64_t *a6)
{
  int v12;
  int v13;
  _BOOL8 result;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::BixbyColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(a1, a2, a3, a4, a6);
  v12 = *a5;
  v13 = *a4;
  result = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a6, *a5, *a4);
  if (result)
  {
    *a4 = v12;
    *a5 = v13;
    v15 = *a4;
    v16 = *a3;
    result = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a6, *a4, *a3);
    if (result)
    {
      *a3 = v15;
      *a4 = v16;
      v17 = *a3;
      v18 = *a2;
      result = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a6, *a3, *a2);
      if (result)
      {
        *a2 = v17;
        *a3 = v18;
        v19 = *a2;
        v20 = *a1;
        result = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a6, *a2, *a1);
        if (result)
        {
          *a1 = v19;
          *a2 = v20;
        }
      }
    }
  }
  return result;
}

BOOL std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::BixbyColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(_BOOL8 result, uint64_t *a2, uint64_t a3, int *a4)
{
  unint64_t v4;
  int *v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  _BOOL4 v17;
  int v18;
  _BOOL4 v19;
  int *v20;
  uint64_t v21;
  int v23;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 2)
    {
      v8 = a3;
      v10 = ((uint64_t)a4 - result) >> 1;
      v11 = v10 + 1;
      v12 = (int *)(result + 4 * (v10 + 1));
      v13 = v10 + 2;
      v14 = *v12;
      if (v10 + 2 >= a3)
      {
        v23 = *a4;
        result = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a2, v14, *a4);
        if (!result)
          goto LABEL_17;
      }
      else
      {
        v15 = v4 >> 1;
        v16 = v12[1];
        v17 = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a2, v14, v16);
        if (v17)
          v14 = v16;
        v7 = v15;
        v8 = a3;
        if (v17)
        {
          ++v12;
          v11 = v13;
        }
        v23 = *v5;
        result = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a2, v14, *v5);
        if (!result)
        {
LABEL_17:
          while (1)
          {
            v20 = v12;
            *v5 = v14;
            if (v7 < v11)
              break;
            v21 = (2 * v11) | 1;
            v12 = (int *)(v6 + 4 * v21);
            v11 = 2 * v11 + 2;
            v14 = *v12;
            if (v11 < v8)
            {
              v18 = v12[1];
              v19 = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a2, *v12, v18);
              if (v19)
              {
                v14 = v18;
                ++v12;
              }
              v8 = a3;
              if (!v19)
                v11 = v21;
              result = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a2, v14, v23);
              v5 = v20;
              if (result)
                break;
            }
            else
            {
              v11 = v21;
              result = operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a2, v14, v23);
              v5 = v20;
              if (result)
                break;
            }
          }
          *v20 = v23;
        }
      }
    }
  }
  return result;
}

int *std::__sort_heap[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::glop::InitialBasis::BixbyColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(int *result, int *a2, uint64_t *a3)
{
  int *v3;
  int *v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int *v10;
  int v11;
  int *v12;
  int *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  int v21;
  char v22;
  BOOL v23;
  unsigned int v24;
  double v25;
  double v26;
  uint64_t v27;
  unint64_t v28;
  int *v29;
  int v30;
  int v31;
  int *v32;

  if ((char *)a2 - (char *)result >= 5)
  {
    v3 = a2;
    v4 = result;
    v5 = (unint64_t)((char *)a2 - (char *)result) >> 2;
    do
    {
      v7 = 0;
      v8 = *v4;
      v9 = *a3;
      v10 = v4;
      do
      {
        v12 = v10;
        v13 = &v10[v7];
        v14 = v13[1];
        v10 = v13 + 1;
        v11 = v14;
        v15 = 2 * v7;
        v7 = (2 * v7) | 1;
        v16 = v15 + 2;
        if (v16 >= v5)
          goto LABEL_7;
        v17 = v10[1];
        if (v11 == v17)
          goto LABEL_7;
        v18 = **(_QWORD **)(v9 + 56);
        v19 = *(unsigned __int8 *)(v18 + v11);
        if ((v19 - 1) > 3u)
        {
          v20 = 2;
          result = (int *)v17;
          v21 = *(unsigned __int8 *)(v18 + v17);
          v22 = v21 - 1;
          if ((v21 - 1) > 3u)
          {
LABEL_12:
            v23 = v20 >= 2;
            if (v20 != 2)
              goto LABEL_13;
            goto LABEL_18;
          }
        }
        else
        {
          v20 = dword_22DCE6740[(char)(v19 - 1)];
          result = (int *)v17;
          v21 = *(unsigned __int8 *)(v18 + v17);
          v22 = v21 - 1;
          if ((v21 - 1) > 3u)
            goto LABEL_12;
        }
        v24 = dword_22DCE6740[v22];
        v23 = v20 >= v24;
        if (v20 != v24)
        {
LABEL_13:
          if (!v23)
            goto LABEL_6;
          goto LABEL_7;
        }
LABEL_18:
        if (v19 == 3)
        {
          v25 = *(double *)(**(_QWORD **)(v9 + 40) + 8 * v11) - *(double *)(**(_QWORD **)(v9 + 48) + 8 * v11);
          if (v21 == 3)
          {
LABEL_30:
            v26 = *(double *)(**(_QWORD **)(v9 + 40) + 8 * (_QWORD)result)
                - *(double *)(**(_QWORD **)(v9 + 48) + 8 * (_QWORD)result);
            goto LABEL_31;
          }
        }
        else
        {
          if (v19 == 2)
          {
            v25 = -*(double *)(**(_QWORD **)(v9 + 48) + 8 * v11);
          }
          else
          {
            v25 = 0.0;
            if (v19 == 1)
            {
              v25 = *(double *)(**(_QWORD **)(v9 + 40) + 8 * v11);
              if (v21 == 3)
                goto LABEL_30;
              goto LABEL_25;
            }
          }
          if (v21 == 3)
            goto LABEL_30;
        }
LABEL_25:
        if (v21 == 2)
        {
          v26 = -*(double *)(**(_QWORD **)(v9 + 48) + 8 * (_QWORD)result);
        }
        else
        {
          v26 = 0.0;
          if (v21 == 1)
            v26 = *(double *)(**(_QWORD **)(v9 + 40) + 8 * (_QWORD)result);
        }
LABEL_31:
        if (v25 + fabs(*(double *)(**(_QWORD **)(v9 + 32) + 8 * v11)) / *(double *)v9 < v26
                                                                                         + fabs(*(double *)(**(_QWORD **)(v9 + 32) + 8 * (_QWORD)result))
                                                                                         / *(double *)v9)
        {
LABEL_6:
          v11 = v10[1];
          ++v10;
          v7 = v16;
        }
LABEL_7:
        *v12 = v11;
      }
      while (v7 <= (uint64_t)((unint64_t)(v5 - 2) >> 1));
      if (v10 == --v3)
      {
        *v10 = v8;
      }
      else
      {
        *v10 = *v3;
        *v3 = v8;
        v27 = (char *)v10 - (char *)v4 + 4;
        if (v27 >= 5)
        {
          v28 = (((unint64_t)v27 >> 2) - 2) >> 1;
          v29 = &v4[v28];
          v30 = *v29;
          v31 = *v10;
          result = (int *)operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, *v29, *v10);
          if ((_DWORD)result)
          {
            do
            {
              v32 = v29;
              *v10 = v30;
              if (!v28)
                break;
              v28 = (v28 - 1) >> 1;
              v29 = &v4[v28];
              v30 = *v29;
              result = (int *)operations_research::glop::InitialBasis::BixbyColumnComparator::operator()(a3, *v29, v31);
              v10 = v32;
            }
            while ((result & 1) != 0);
            *v32 = v31;
          }
        }
      }
    }
    while (v5-- > 2);
  }
  return result;
}

operations_research::glop::LuFactorization *operations_research::glop::LuFactorization::LuFactorization(operations_research::glop::LuFactorization *this)
{
  *(_BYTE *)this = 1;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 100) = 0u;
  *((_BYTE *)this + 116) = 1;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_DWORD *)this + 98) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *((_BYTE *)this + 396) = 1;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *((_DWORD *)this + 168) = 0;
  *((_BYTE *)this + 676) = 1;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 696) = 0u;
  *(_OWORD *)((char *)this + 712) = 0u;
  *(_OWORD *)((char *)this + 728) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *(_OWORD *)((char *)this + 760) = 0u;
  *(_OWORD *)((char *)this + 776) = 0u;
  *(_OWORD *)((char *)this + 792) = 0u;
  *(_OWORD *)((char *)this + 808) = 0u;
  *(_OWORD *)((char *)this + 824) = 0u;
  *(_OWORD *)((char *)this + 840) = 0u;
  *(_OWORD *)((char *)this + 856) = 0u;
  *(_OWORD *)((char *)this + 872) = 0u;
  *(_OWORD *)((char *)this + 888) = 0u;
  *(_OWORD *)((char *)this + 904) = 0u;
  *(_OWORD *)((char *)this + 920) = 0u;
  *(_OWORD *)((char *)this + 936) = 0u;
  *((_DWORD *)this + 238) = 0;
  *((_BYTE *)this + 956) = 1;
  *((_OWORD *)this + 60) = 0u;
  *((_OWORD *)this + 61) = 0u;
  *((_OWORD *)this + 62) = 0u;
  *((_OWORD *)this + 63) = 0u;
  *((_OWORD *)this + 64) = 0u;
  *((_OWORD *)this + 65) = 0u;
  *((_OWORD *)this + 66) = 0u;
  *((_OWORD *)this + 67) = 0u;
  *((_OWORD *)this + 68) = 0u;
  *((_OWORD *)this + 69) = 0u;
  *((_OWORD *)this + 70) = 0u;
  *((_OWORD *)this + 71) = 0u;
  *((_OWORD *)this + 72) = 0u;
  *((_OWORD *)this + 73) = 0u;
  *((_OWORD *)this + 74) = 0u;
  *((_OWORD *)this + 75) = 0u;
  *((_OWORD *)this + 76) = 0u;
  *((_OWORD *)this + 77) = 0u;
  *((_OWORD *)this + 78) = 0u;
  *((_OWORD *)this + 79) = 0u;
  *(_OWORD *)((char *)this + 1273) = 0u;
  *((_OWORD *)this + 83) = 0u;
  *((_OWORD *)this + 82) = 0u;
  *((_OWORD *)this + 81) = 0u;
  operations_research::glop::LuFactorization::Stats::Stats((operations_research::glop::LuFactorization *)((char *)this + 1344));
  operations_research::glop::GlopParameters::GlopParameters((uint64_t)this + 1584, 0);
  operations_research::glop::Markowitz::Markowitz((operations_research::glop::LuFactorization *)((char *)this + 1880));
  return this;
}

void sub_22D9FE6DC(_Unwind_Exception *a1)
{
  operations_research::glop::TriangularMatrix *v1;
  void **v2;
  operations_research::glop::GlopParameters *v3;
  operations_research::glop::LuFactorization::Stats *v4;
  operations_research::glop::GlopParameters *v5;
  void **v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v5 = v3;
  operations_research::glop::GlopParameters::~GlopParameters(v5);
  operations_research::glop::LuFactorization::Stats::~Stats(v4);
  v7 = v2 + 162;
  v8 = v2[165];
  if (v8)
  {
    v2[166] = v8;
    operator delete(v8);
    v9 = *v7;
    if (!*v7)
    {
LABEL_3:
      v10 = v2[156];
      v2[156] = 0;
      if (!v10)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else
  {
    v9 = *v7;
    if (!*v7)
      goto LABEL_3;
  }
  v2[163] = v9;
  operator delete(v9);
  v10 = v2[156];
  v2[156] = 0;
  if (!v10)
  {
LABEL_4:
    v11 = v2[153];
    if (!v11)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  MEMORY[0x22E31DF60](v10, 0x1000C8077774924);
  v11 = v2[153];
  if (!v11)
  {
LABEL_5:
    v12 = v2[150];
    if (!v12)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  v2[154] = v11;
  operator delete(v11);
  v12 = v2[150];
  if (!v12)
  {
LABEL_6:
    v13 = v2[147];
    if (!v13)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  v2[151] = v12;
  operator delete(v12);
  v13 = v2[147];
  if (!v13)
  {
LABEL_7:
    v14 = v2[144];
    if (!v14)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  v2[148] = v13;
  operator delete(v13);
  v14 = v2[144];
  if (!v14)
  {
LABEL_8:
    v15 = v2[141];
    if (!v15)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_17:
  v2[145] = v14;
  operator delete(v14);
  v15 = v2[141];
  if (!v15)
  {
LABEL_10:
    operations_research::glop::TriangularMatrix::~TriangularMatrix((operations_research::glop::TriangularMatrix *)(v2 + 106));
    operations_research::glop::TriangularMatrix::~TriangularMatrix((operations_research::glop::TriangularMatrix *)(v2 + 71));
    operations_research::glop::TriangularMatrix::~TriangularMatrix((operations_research::glop::TriangularMatrix *)(v2 + 36));
    operations_research::glop::TriangularMatrix::~TriangularMatrix(v1);
    _Unwind_Resume(a1);
  }
LABEL_9:
  v2[142] = v15;
  operator delete(v15);
  goto LABEL_10;
}

void operations_research::glop::LuFactorization::Stats::~Stats(operations_research::glop::LuFactorization::Stats *this)
{
  *((_QWORD *)this + 20) = off_24F97FEB0;
  if (*((char *)this + 191) < 0)
  {
    operator delete(*((void **)this + 21));
    *((_QWORD *)this + 10) = off_24F97FEB0;
    if ((*((char *)this + 111) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(*((void **)this + 11));
    operations_research::StatsGroup::~StatsGroup(this);
    return;
  }
  *((_QWORD *)this + 10) = off_24F97FEB0;
  if (*((char *)this + 111) < 0)
    goto LABEL_6;
LABEL_3:
  operations_research::StatsGroup::~StatsGroup(this);
}

void operations_research::glop::LuFactorization::Clear(operations_research::glop::LuFactorization *this)
{
  operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 8, 0, 0);
  operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 288, 0, 0);
  operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 568, 0, 0);
  operations_research::glop::TriangularMatrix::Reset((uint64_t)this + 848, 0, 0);
  *(_BYTE *)this = 1;
  *((_QWORD *)this + 142) = *((_QWORD *)this + 141);
  *((_QWORD *)this + 148) = *((_QWORD *)this + 147);
  *((_QWORD *)this + 151) = *((_QWORD *)this + 150);
  *((_QWORD *)this + 145) = *((_QWORD *)this + 144);
}

void operations_research::glop::LuFactorization::ComputeFactorization(std::vector<int> *this@<X0>, const operations_research::glop::CompactSparseMatrixView *a2@<X1>, uint64_t a3@<X8>)
{
  operations_research::glop::TriangularMatrix *p_end;
  uint64_t v7;
  std::vector<int>::pointer begin;
  unint64_t v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  std::vector<int>::pointer v16;
  std::vector<int>::pointer v17;
  uint64_t v18;
  std::vector<int>::pointer v19;
  unint64_t v20;
  uint64_t v21;
  std::vector<int>::pointer v22;
  std::vector<int>::pointer v23;
  std::string v24;
  void *__p[2];
  unsigned __int8 v26;
  _BYTE v27[16];
  std::string v28;

  p_end = (operations_research::glop::TriangularMatrix *)&this->__end_;
  operations_research::glop::TriangularMatrix::Reset((uint64_t)&this->__end_, 0, 0);
  operations_research::glop::TriangularMatrix::Reset((uint64_t)&this[12], 0, 0);
  operations_research::glop::TriangularMatrix::Reset((uint64_t)&this[23].__end_cap_, 0, 0);
  operations_research::glop::TriangularMatrix::Reset((uint64_t)&this[35].__end_, 0, 0);
  LOBYTE(this->__begin_) = 1;
  this[47].__end_ = this[47].__begin_;
  this[49].__end_ = this[49].__begin_;
  this[50].__end_ = this[50].__begin_;
  this[48].__end_ = this[48].__begin_;
  if (**(_DWORD **)a2 != ((*(_QWORD *)(*((_QWORD *)a2 + 1) + 8) - **((_QWORD **)a2 + 1)) >> 2))
  {
    *((_BYTE *)&v28.__r_.__value_.__s + 23) = 21;
    strcpy((char *)&v28, "Not a square matrix!!");
    google::LogMessage::LogMessage((google::LogMessage *)v27, (google::glog_internal_namespace_ *)"./ortools/glop/lu_factorization.cc", 49, 2);
    v10 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v27);
    operations_research::glop::GetErrorCodeString((char *)1, (uint64_t)__p);
    if ((v26 & 0x80u) == 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    if ((v26 & 0x80u) == 0)
      v12 = v26;
    else
      v12 = (uint64_t)__p[1];
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v28, 21);
    if ((char)v26 < 0)
    {
      operator delete(__p[0]);
      google::LogMessage::~LogMessage((google::LogMessage *)v27);
      if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_15;
    }
    else
    {
      google::LogMessage::~LogMessage((google::LogMessage *)v27);
      if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_15:
        v24 = v28;
        goto LABEL_18;
      }
    }
    std::string::__init_copy_ctor_external(&v24, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
LABEL_18:
    operations_research::glop::Status::Status(a3, 1, (__int128 *)&v24);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v24.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
    }
    else if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      return;
    }
    operator delete(v28.__r_.__value_.__l.__data_);
    return;
  }
  operations_research::glop::Markowitz::ComputeLU(p_end, (uint64_t)&this[78].__end_, (uint64_t)a2, this + 49, this + 47, (operations_research::glop::TriangularMatrix *)&this[12], a3);
  if (!*(_DWORD *)a3)
  {
    if (*(char *)(a3 + 31) < 0)
      operator delete(*(void **)(a3 + 8));
    v7 = (char *)this[47].__end_ - (char *)this[47].__begin_;
    begin = this[48].__begin_;
    v9 = this[48].__end_ - begin;
    if (v7 >> 2 <= v9)
    {
      if (v7 >> 2 < v9)
        this[48].__end_ = &begin[v7 >> 2];
    }
    else
    {
      std::vector<int>::__append(this + 48, (v7 >> 2) - v9);
    }
    if ((int)((unint64_t)v7 >> 2) >= 1)
    {
      v15 = 0;
      v16 = this[47].__begin_;
      v17 = this[48].__begin_;
      do
      {
        v17[v16[v15]] = v15;
        ++v15;
      }
      while (((unint64_t)v7 >> 2) != v15);
    }
    v18 = (char *)this[49].__end_ - (char *)this[49].__begin_;
    v19 = this[50].__begin_;
    v20 = this[50].__end_ - v19;
    if (v18 >> 2 <= v20)
    {
      if (v18 >> 2 < v20)
        this[50].__end_ = &v19[v18 >> 2];
    }
    else
    {
      std::vector<int>::__append(this + 50, (v18 >> 2) - v20);
    }
    if ((int)((unint64_t)v18 >> 2) >= 1)
    {
      v21 = 0;
      v22 = this[49].__begin_;
      v23 = this[50].__begin_;
      do
      {
        v23[v22[v21]] = v21;
        ++v21;
      }
      while (((unint64_t)v18 >> 2) != v21);
    }
    operations_research::glop::TriangularMatrix::PopulateFromTranspose((operations_research::glop::TriangularMatrix *)&this[23].__end_cap_, (char **)&this[12]);
    operations_research::glop::TriangularMatrix::PopulateFromTranspose((operations_research::glop::TriangularMatrix *)&this[35].__end_, (char **)p_end);
    LOBYTE(this->__begin_) = 0;
    operations_research::glop::Status::Status(a3);
  }
}

void sub_22D9FEC64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if ((a28 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::glop::LuFactorization::RightSolve(uint64_t a1, uint64_t **a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  int *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[16];

  if (!*(_BYTE *)a1)
  {
    v4 = (uint64_t *)(a1 + 1224);
    v5 = *(_QWORD *)(a1 + 1184) - *(_QWORD *)(a1 + 1176);
    if ((v5 & 0x3FFFFFFFCLL) != 0)
    {
      v6 = a2[1];
      v7 = (int)(v6 - *a2);
      v8 = *(_QWORD *)(a1 + 1224);
      v9 = (*(_QWORD *)(a1 + 1232) - v8) >> 3;
      if (v7 <= v9)
      {
        if (v7 < v9)
          *(_QWORD *)(a1 + 1232) = v8 + 8 * v7;
      }
      else
      {
        std::vector<double>::__append(a1 + 1224, v7 - v9, v6 - 1);
      }
      if ((int)(v5 >> 2) >= 1)
      {
        v10 = *(int **)(a1 + 1176);
        v11 = *a2;
        v12 = (v5 >> 2);
        v13 = *(_QWORD *)(a1 + 1224);
        do
        {
          v15 = *v10++;
          v14 = v15;
          v16 = *v11++;
          *(_QWORD *)(v13 + 8 * v14) = v16;
          --v12;
        }
        while (v12);
      }
    }
    operations_research::glop::TriangularMatrix::LowerSolve(a1 + 8, v4);
    operations_research::glop::TriangularMatrix::UpperSolve(a1 + 288, v4);
    if (a2)
    {
      v17 = *(_QWORD *)(a1 + 1160) - *(_QWORD *)(a1 + 1152);
      if ((v17 & 0x3FFFFFFFCLL) != 0)
      {
        v18 = *(_QWORD *)(a1 + 1232);
        v19 = (int)((v18 - *(_QWORD *)(a1 + 1224)) >> 3);
        v20 = a2[1] - *a2;
        if (v19 <= v20)
        {
          if (v19 < v20)
            a2[1] = &(*a2)[v19];
        }
        else
        {
          std::vector<double>::__append((uint64_t)a2, v19 - v20, (uint64_t *)(v18 - 8));
        }
        if ((int)(v17 >> 2) >= 1)
        {
          v23 = *(int **)(a1 + 1152);
          v24 = *(uint64_t **)(a1 + 1224);
          v25 = (v17 >> 2);
          v26 = *a2;
          do
          {
            v28 = *v23++;
            v27 = v28;
            v29 = *v24++;
            v26[v27] = v29;
            --v25;
          }
          while (v25);
        }
      }
    }
    else
    {
      google::LogMessage::LogMessage((google::LogMessage *)v30, (google::glog_internal_namespace_ *)"./ortools/lp_data/permutation.h", 193, 2);
      v21 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v30);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"result", 6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" == NULL", 8);
      google::LogMessage::~LogMessage((google::LogMessage *)v30);
    }
  }
}

void sub_22D9FEEC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void operations_research::glop::LuFactorization::LeftSolve(uint64_t a1, _QWORD *a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _BYTE v26[16];

  if (!*(_BYTE *)a1)
  {
    v4 = (uint64_t *)(a1 + 1224);
    v5 = *(_QWORD *)(a1 + 1160) - *(_QWORD *)(a1 + 1152);
    if ((v5 & 0x3FFFFFFFCLL) != 0)
    {
      v6 = a2[1];
      v7 = (int)((v6 - *a2) >> 3);
      v8 = *(_QWORD *)(a1 + 1224);
      v9 = (*(_QWORD *)(a1 + 1232) - v8) >> 3;
      if (v7 <= v9)
      {
        if (v7 < v9)
          *(_QWORD *)(a1 + 1232) = v8 + 8 * v7;
      }
      else
      {
        std::vector<double>::__append(a1 + 1224, v7 - v9, (uint64_t *)(v6 - 8));
      }
      if ((int)(v5 >> 2) >= 1)
      {
        v10 = *(int **)(a1 + 1152);
        v11 = (_QWORD *)*a2;
        v12 = (v5 >> 2);
        v13 = *(_QWORD **)(a1 + 1224);
        do
        {
          v14 = *v10++;
          *v13++ = v11[v14];
          --v12;
        }
        while (v12);
      }
    }
    operations_research::glop::TriangularMatrix::TransposeUpperSolve(a1 + 288, v4);
    operations_research::glop::TriangularMatrix::TransposeLowerSolve(a1 + 8, v4);
    if (a2)
    {
      v15 = *(_QWORD *)(a1 + 1184) - *(_QWORD *)(a1 + 1176);
      if ((v15 & 0x3FFFFFFFCLL) != 0)
      {
        v16 = *(_QWORD *)(a1 + 1232);
        v17 = (int)((v16 - *(_QWORD *)(a1 + 1224)) >> 3);
        v18 = (uint64_t)(a2[1] - *a2) >> 3;
        if (v17 <= v18)
        {
          if (v17 < v18)
            a2[1] = *a2 + 8 * v17;
        }
        else
        {
          std::vector<double>::__append((uint64_t)a2, v17 - v18, (uint64_t *)(v16 - 8));
        }
        if ((int)(v15 >> 2) >= 1)
        {
          v21 = *(int **)(a1 + 1176);
          v22 = *(_QWORD *)(a1 + 1224);
          v23 = (v15 >> 2);
          v24 = (_QWORD *)*a2;
          do
          {
            v25 = *v21++;
            *v24++ = *(_QWORD *)(v22 + 8 * v25);
            --v23;
          }
          while (v23);
        }
      }
    }
    else
    {
      google::LogMessage::LogMessage((google::LogMessage *)v26, (google::glog_internal_namespace_ *)"./ortools/lp_data/permutation.h", 208, 2);
      v19 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v26);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"result", 6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" == NULL", 8);
      google::LogMessage::~LogMessage((google::LogMessage *)v26);
    }
  }
}

void sub_22D9FF0A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void operations_research::glop::LuFactorization::RightSolveSquaredNorm(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  std::vector<int> *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  std::vector<int> *v17;
  std::vector<int>::pointer begin;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  _DWORD *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t *v36;
  _QWORD *v37;
  uint64_t *v38;
  int *v39;
  int *v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;

  if (*(_BYTE *)a1)
  {
    operations_research::glop::SquaredNorm(a2);
    return;
  }
  v5 = a1 + 8;
  v4 = *(int *)(a1 + 8);
  *(_QWORD *)(a1 + 1328) = *(_QWORD *)(a1 + 1320);
  v6 = a1 + 1296;
  v49 = 0;
  v7 = *(_QWORD *)(v5 + 1288);
  v8 = (*(_QWORD *)(v5 + 1296) - v7) >> 3;
  v44 = (uint64_t *)v6;
  if (v4 <= v8)
  {
    if (v4 < v8)
      *(_QWORD *)(a1 + 1304) = v7 + 8 * v4;
  }
  else
  {
    std::vector<double>::__append(v6, v4 - v8, &v49);
  }
  v45 = (_QWORD *)v5;
  v9 = (std::vector<int> *)(v5 + 1312);
  v10 = *a2;
  if ((uint64_t)*a2 >= 1)
  {
    v11 = 0;
    v12 = a2[1];
    v13 = a2[2];
    v14 = *(char **)(a1 + 1328);
    v47 = v12;
    v48 = *a2;
    v46 = v13;
    while (1)
    {
      while (1)
      {
        v15 = *(int *)(*(_QWORD *)(a1 + 1176) + 4 * *(int *)(v12 + 4 * v11));
        *(_QWORD *)(*(_QWORD *)(a1 + 1296) + 8 * v15) = *(_QWORD *)(v13 + 8 * v11);
        v16 = *(_QWORD *)(a1 + 1336);
        if ((unint64_t)v14 >= v16)
          break;
        *(_DWORD *)v14 = v15;
        v14 += 4;
        *(_QWORD *)(a1 + 1328) = v14;
        if (++v11 == v10)
          goto LABEL_37;
      }
      v17 = v9;
      begin = v9->__begin_;
      v19 = v14 - (char *)v9->__begin_;
      v20 = v19 >> 2;
      v21 = (v19 >> 2) + 1;
      if (v21 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v22 = v16 - (_QWORD)begin;
      if (v22 >> 1 > v21)
        v21 = v22 >> 1;
      v23 = (unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v21;
      if (v23)
      {
        if (v23 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v24 = operator new(4 * v23);
        v25 = &v24[4 * v20];
        *v25 = v15;
        v26 = (uint64_t)(v25 + 1);
        if (v14 == (char *)begin)
        {
LABEL_31:
          v9 = v17;
          *(_QWORD *)(a1 + 1320) = v25;
          *(_QWORD *)(a1 + 1328) = v26;
          *(_QWORD *)(a1 + 1336) = &v24[4 * v23];
          if (!begin)
            goto LABEL_28;
LABEL_27:
          operator delete(begin);
          goto LABEL_28;
        }
      }
      else
      {
        v24 = 0;
        v25 = (_DWORD *)(4 * v20);
        *(_DWORD *)(4 * v20) = v15;
        v26 = 4 * v20 + 4;
        if (v14 == (char *)begin)
          goto LABEL_31;
      }
      v27 = v14 - 4 - (char *)begin;
      if (v27 < 0xBC
        || &v24[v19 - 4 - (v27 & 0xFFFFFFFFFFFFFFFCLL)] > &v24[v19 - 4]
        || &v14[-(v27 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v14 - 4
        || (unint64_t)(v14 - v24 - v19) < 0x20)
      {
        break;
      }
      v30 = (v27 >> 2) + 1;
      v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
      v28 = &v14[-v31];
      v25 = (_DWORD *)((char *)v25 - v31);
      v32 = &v24[4 * v20 - 16];
      v33 = v14 - 16;
      v34 = v30 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v35 = *(_OWORD *)v33;
        *(v32 - 1) = *((_OWORD *)v33 - 1);
        *v32 = v35;
        v32 -= 2;
        v33 -= 32;
        v34 -= 8;
      }
      while (v34);
      v9 = v17;
      if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_25;
LABEL_26:
      *(_QWORD *)(a1 + 1320) = v25;
      *(_QWORD *)(a1 + 1328) = v26;
      *(_QWORD *)(a1 + 1336) = &v24[4 * v23];
      if (begin)
        goto LABEL_27;
LABEL_28:
      v12 = v47;
      v10 = v48;
      v13 = v46;
      *(_QWORD *)(a1 + 1328) = v26;
      ++v11;
      v14 = (char *)v26;
      if (v11 == v48)
        goto LABEL_37;
    }
    v28 = v14;
    v9 = v17;
    do
    {
LABEL_25:
      v29 = *((_DWORD *)v28 - 1);
      v28 -= 4;
      *--v25 = v29;
    }
    while (v28 != (char *)begin);
    goto LABEL_26;
  }
LABEL_37:
  operations_research::glop::TriangularMatrix::ComputeRowsToConsiderInSortedOrder(v45, v9);
  if (*(_QWORD *)(a1 + 1320) == *(_QWORD *)(a1 + 1328))
  {
    v36 = v44;
    operations_research::glop::TriangularMatrix::LowerSolve((uint64_t)v45, v44);
    v37 = (_QWORD *)(a1 + 288);
    v38 = v44;
    if (*(_QWORD *)(a1 + 1320) != *(_QWORD *)(a1 + 1328))
    {
LABEL_39:
      operations_research::glop::TriangularMatrix::HyperSparseSolveWithReversedNonZeros(v37, v38, (uint64_t)v9);
      v39 = *(int **)(a1 + 1320);
      v40 = *(int **)(a1 + 1328);
      if (v39 != v40)
        goto LABEL_40;
LABEL_45:
      operations_research::glop::SquaredNorm(v36);
      *(_QWORD *)(a1 + 1304) = *(_QWORD *)(a1 + 1296);
      return;
    }
  }
  else
  {
    v36 = v44;
    operations_research::glop::TriangularMatrix::HyperSparseSolve(v45, v44, v9);
    operations_research::glop::TriangularMatrix::ComputeRowsToConsiderInSortedOrder(a1 + 288, v9);
    v37 = (_QWORD *)(a1 + 288);
    v38 = v44;
    if (*(_QWORD *)(a1 + 1320) != *(_QWORD *)(a1 + 1328))
      goto LABEL_39;
  }
  operations_research::glop::TriangularMatrix::UpperSolve((uint64_t)v37, v38);
  v39 = *(int **)(a1 + 1320);
  v40 = *(int **)(a1 + 1328);
  if (v39 == v40)
    goto LABEL_45;
LABEL_40:
  v41 = *v36;
  v42 = 0.0;
  do
  {
    v43 = *v39++;
    v42 = v42 + *(double *)(v41 + 8 * v43) * *(double *)(v41 + 8 * v43);
    *(_QWORD *)(v41 + 8 * v43) = 0;
  }
  while (v39 != v40);
}

void operations_research::glop::LuFactorization::DualEdgeSquaredNorm(uint64_t a1, int a2)
{
  int v2;
  uint64_t v4;
  int *v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void **v10;
  unint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  int *v20;
  char *v21;
  int64_t v22;
  unint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  int *v28;
  uint64_t v29;
  __int128 v30;
  int v31;
  _QWORD *v32;
  uint64_t *v33;
  int *v34;
  int *v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;

  if (!*(_BYTE *)a1)
  {
    v2 = a2;
    v4 = *(_QWORD *)(a1 + 1128);
    if (v4 != *(_QWORD *)(a1 + 1136))
      v2 = *(_DWORD *)(v4 + 4 * a2);
    v5 = *(int **)(a1 + 1320);
    *(_QWORD *)(a1 + 1328) = v5;
    v6 = (uint64_t *)(a1 + 1296);
    v7 = *(int *)(a1 + 8);
    v39 = 0;
    v8 = *(_QWORD *)(a1 + 1296);
    v9 = (*(_QWORD *)(a1 + 1304) - v8) >> 3;
    if (v7 <= v9)
    {
      if (v7 < v9)
        *(_QWORD *)(a1 + 1304) = v8 + 8 * v7;
    }
    else
    {
      std::vector<double>::__append(a1 + 1296, v7 - v9, &v39);
      v8 = *(_QWORD *)(a1 + 1296);
      v5 = *(int **)(a1 + 1328);
    }
    v10 = (void **)(a1 + 1320);
    *(_QWORD *)(v8 + 8 * v2) = 0x3FF0000000000000;
    v11 = *(_QWORD *)(a1 + 1336);
    if ((unint64_t)v5 < v11)
    {
      *v5 = v2;
      v12 = (uint64_t)(v5 + 1);
      goto LABEL_31;
    }
    v13 = (int *)*v10;
    v14 = (char *)v5 - (_BYTE *)*v10;
    v15 = v14 >> 2;
    v16 = (v14 >> 2) + 1;
    if (v16 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v17 = v11 - (_QWORD)v13;
    if (v17 >> 1 > v16)
      v16 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v19 = operator new(4 * v18);
      v20 = (int *)&v19[4 * v15];
      v21 = &v19[4 * v18];
      *v20 = v2;
      v12 = (uint64_t)(v20 + 1);
      v22 = (char *)v5 - (char *)v13;
      if (v5 == v13)
        goto LABEL_29;
    }
    else
    {
      v19 = 0;
      v20 = (int *)(4 * v15);
      v21 = 0;
      *(_DWORD *)(4 * v15) = v2;
      v12 = 4 * v15 + 4;
      v22 = (char *)v5 - (char *)v13;
      if (v5 == v13)
        goto LABEL_29;
    }
    v23 = v22 - 4;
    if (v23 >= 0x2C)
    {
      if ((unint64_t)((char *)v5 - &v19[v14]) >= 0x20)
      {
        v25 = (v23 >> 2) + 1;
        v26 = 4 * (v25 & 0x7FFFFFFFFFFFFFF8);
        v24 = &v5[v26 / 0xFFFFFFFFFFFFFFFCLL];
        v20 = (int *)((char *)v20 - v26);
        v27 = &v19[4 * v15 - 16];
        v28 = v5 - 4;
        v29 = v25 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v30 = *(_OWORD *)v28;
          *(v27 - 1) = *((_OWORD *)v28 - 1);
          *v27 = v30;
          v27 -= 2;
          v28 -= 8;
          v29 -= 8;
        }
        while (v29);
        if (v25 == (v25 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_29:
          *(_QWORD *)(a1 + 1320) = v20;
          *(_QWORD *)(a1 + 1328) = v12;
          *(_QWORD *)(a1 + 1336) = v21;
          if (v13)
            operator delete(v13);
LABEL_31:
          *(_QWORD *)(a1 + 1328) = v12;
          operations_research::glop::TriangularMatrix::ComputeRowsToConsiderInSortedOrder(a1 + 568, a1 + 1320);
          if (*(_QWORD *)(a1 + 1320) == *(_QWORD *)(a1 + 1328))
          {
            operations_research::glop::TriangularMatrix::LowerSolveStartingAt(a1 + 568, v2, (uint64_t *)(a1 + 1296));
            v32 = (_QWORD *)(a1 + 848);
            v33 = (uint64_t *)(a1 + 1296);
            if (*(_QWORD *)(a1 + 1320) != *(_QWORD *)(a1 + 1328))
            {
LABEL_33:
              operations_research::glop::TriangularMatrix::HyperSparseSolveWithReversedNonZeros(v32, v33, a1 + 1320);
              v34 = *(int **)(a1 + 1320);
              v35 = *(int **)(a1 + 1328);
              if (v34 != v35)
                goto LABEL_34;
              goto LABEL_39;
            }
          }
          else
          {
            operations_research::glop::TriangularMatrix::HyperSparseSolve((_QWORD *)(a1 + 568), (uint64_t *)(a1 + 1296), (std::vector<int> *)(a1 + 1320));
            operations_research::glop::TriangularMatrix::ComputeRowsToConsiderInSortedOrder(a1 + 848, a1 + 1320);
            v32 = (_QWORD *)(a1 + 848);
            v33 = (uint64_t *)(a1 + 1296);
            if (*(_QWORD *)(a1 + 1320) != *(_QWORD *)(a1 + 1328))
              goto LABEL_33;
          }
          operations_research::glop::TriangularMatrix::UpperSolve((uint64_t)v32, v33);
          v34 = *(int **)(a1 + 1320);
          v35 = *(int **)(a1 + 1328);
          if (v34 != v35)
          {
LABEL_34:
            v36 = *v6;
            v37 = 0.0;
            do
            {
              v38 = *v34++;
              v37 = v37 + *(double *)(v36 + 8 * v38) * *(double *)(v36 + 8 * v38);
              *(_QWORD *)(v36 + 8 * v38) = 0;
            }
            while (v34 != v35);
            return;
          }
LABEL_39:
          operations_research::glop::SquaredNorm((uint64_t *)(a1 + 1296));
          *(_QWORD *)(a1 + 1304) = *(_QWORD *)(a1 + 1296);
          return;
        }
      }
      else
      {
        v24 = v5;
      }
    }
    else
    {
      v24 = v5;
    }
    do
    {
      v31 = *--v24;
      *--v20 = v31;
    }
    while (v24 != v13);
    goto LABEL_29;
  }
}

void operations_research::glop::LuFactorization::RightSolveLWithPermutedInput(_BYTE *a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v4;
  std::vector<int> *v5;

  if (!*a1)
  {
    v4 = a1 + 8;
    v5 = (std::vector<int> *)(a3 + 4);
    operations_research::glop::TriangularMatrix::ComputeRowsToConsiderInSortedOrder(a1 + 8, a3 + 4);
    if (a3[4] == a3[5])
      operations_research::glop::TriangularMatrix::LowerSolve((uint64_t)v4, a3);
    else
      operations_research::glop::TriangularMatrix::HyperSparseSolve(v4, a3, v5);
  }
}

void operations_research::glop::LuFactorization::RightSolveLForColumnView(_BYTE *a1, uint64_t *a2, _QWORD *a3)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _DWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;

  v4 = (char *)a3[4];
  v31 = (void **)(a3 + 4);
  a3[5] = v4;
  if (*a1)
  {
    v5 = *a2;
    if (*a2 >= 1)
    {
      v6 = 0;
      v7 = a2[1];
      v8 = a2[2];
      v29 = v8;
      v30 = v7;
      while (1)
      {
        while (1)
        {
          v9 = *(int *)(v7 + 4 * v6);
          *(_QWORD *)(*a3 + 8 * v9) = *(_QWORD *)(v8 + 8 * v6);
          v10 = a3[6];
          if ((unint64_t)v4 >= v10)
            break;
          *(_DWORD *)v4 = v9;
          v4 += 4;
          a3[5] = v4;
          if (++v6 == v5)
            return;
        }
        v11 = (char *)*v31;
        v12 = v4 - (_BYTE *)*v31;
        v13 = v12 >> 2;
        v14 = (v12 >> 2) + 1;
        if (v14 >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v15 = v10 - (_QWORD)v11;
        if (v15 >> 1 > v14)
          v14 = v15 >> 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
          v16 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
        {
          if (v16 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v17 = operator new(4 * v16);
          v18 = &v17[4 * v13];
          *v18 = v9;
          v19 = (uint64_t)(v18 + 1);
          if (v4 == v11)
            goto LABEL_29;
        }
        else
        {
          v17 = 0;
          v18 = (_DWORD *)(4 * v13);
          *(_DWORD *)(4 * v13) = v9;
          v19 = 4 * v13 + 4;
          if (v4 == v11)
            goto LABEL_29;
        }
        v20 = v4 - 4 - v11;
        if (v20 < 0xBC)
        {
          v21 = v4;
          goto LABEL_28;
        }
        if (&v17[v12 - 4 - (v20 & 0xFFFFFFFFFFFFFFFCLL)] > &v17[v12 - 4])
          break;
        if (&v4[-(v20 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v4 - 4)
        {
          v21 = v4;
          do
          {
LABEL_28:
            v28 = *((_DWORD *)v21 - 1);
            v21 -= 4;
            *--v18 = v28;
          }
          while (v21 != v11);
          goto LABEL_29;
        }
        if ((unint64_t)(v4 - v17 - v12) < 0x20)
        {
          v21 = v4;
          goto LABEL_28;
        }
        v22 = (v20 >> 2) + 1;
        v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
        v21 = &v4[-v23];
        v18 = (_DWORD *)((char *)v18 - v23);
        v24 = &v17[4 * v13 - 16];
        v25 = v4 - 16;
        v26 = v22 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v27 = *(_OWORD *)v25;
          *(v24 - 1) = *((_OWORD *)v25 - 1);
          *v24 = v27;
          v24 -= 2;
          v25 -= 32;
          v26 -= 8;
        }
        while (v26);
        if (v22 != (v22 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_28;
LABEL_29:
        a3[4] = v18;
        a3[5] = v19;
        a3[6] = &v17[4 * v16];
        if (v11)
          operator delete(v11);
        v8 = v29;
        v7 = v30;
        a3[5] = v19;
        ++v6;
        v4 = (char *)v19;
        if (v6 == v5)
          return;
      }
      v21 = v4;
      goto LABEL_28;
    }
  }
  else
  {
    operations_research::glop::LuFactorization::RightSolveLInternal<operations_research::glop::ColumnView>((uint64_t)a1, a2, (uint64_t)a3);
  }
}

void operations_research::glop::LuFactorization::RightSolveLInternal<operations_research::glop::ColumnView>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _DWORD *v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  void **v41;

  v4 = (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3;
  v5 = *a2;
  if (*a2 >= 1)
  {
    v6 = 0;
    v7 = *(_DWORD *)(a1 + 112);
    v40 = a1;
    v41 = (void **)(a3 + 32);
    v8 = a2[1];
    v9 = a2[2];
    v10 = *(char **)(a3 + 40);
    v39 = *a2;
    v38 = v7;
    v36 = v9;
    v37 = v8;
    while (1)
    {
      v11 = *(int *)(*(_QWORD *)(a1 + 1176) + 4 * *(int *)(v8 + 4 * v6));
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v11) = *(_QWORD *)(v9 + 8 * v6);
      v12 = *(_QWORD *)(a3 + 48);
      if ((unint64_t)v10 >= v12)
        break;
      *(_DWORD *)v10 = v11;
      v10 += 4;
      *(_QWORD *)(a3 + 40) = v10;
      if ((int)v11 >= v7)
        goto LABEL_33;
LABEL_3:
      if (++v6 == v5)
        goto LABEL_38;
    }
    v13 = (char *)*v41;
    v14 = v10 - (_BYTE *)*v41;
    v15 = v14 >> 2;
    v16 = (v14 >> 2) + 1;
    if (v16 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v17 = v12 - (_QWORD)v13;
    if (v17 >> 1 > v16)
      v16 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v19 = operator new(4 * v18);
      v20 = &v19[4 * v15];
      *v20 = v11;
      v21 = (uint64_t)(v20 + 1);
      if (v10 == v13)
      {
LABEL_30:
        *(_QWORD *)(a3 + 32) = v20;
        *(_QWORD *)(a3 + 40) = v21;
        *(_QWORD *)(a3 + 48) = &v19[4 * v18];
        if (v13)
          operator delete(v13);
        v10 = (char *)v21;
        v5 = v39;
        a1 = v40;
        v7 = v38;
        v9 = v36;
        v8 = v37;
        *(_QWORD *)(a3 + 40) = v21;
        if ((int)v11 < v38)
          goto LABEL_3;
LABEL_33:
        v31 = *(_QWORD *)(a1 + 64);
        v32 = *(_QWORD *)(v31 + (((v11 << 32) + 0x100000000) >> 29));
        v33 = *(_QWORD *)(v31 + 8 * v11);
        if ((int)v11 >= (int)v4)
          v34 = v4;
        else
          v34 = v11;
        if (v32 != v33)
          LODWORD(v4) = v34;
        goto LABEL_3;
      }
    }
    else
    {
      v19 = 0;
      v20 = (_DWORD *)(4 * v15);
      *(_DWORD *)(4 * v15) = v11;
      v21 = 4 * v15 + 4;
      if (v10 == v13)
        goto LABEL_30;
    }
    v22 = v10 - 4 - v13;
    if (v22 >= 0xBC)
    {
      if (&v19[v14 - 4 - (v22 & 0xFFFFFFFFFFFFFFFCLL)] > &v19[v14 - 4])
      {
        v23 = v10;
      }
      else if (&v10[-(v22 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v10 - 4)
      {
        v23 = v10;
      }
      else if ((unint64_t)(v10 - &v19[v14]) >= 0x20)
      {
        v24 = (v22 >> 2) + 1;
        v25 = 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
        v23 = &v10[-v25];
        v20 = (_DWORD *)((char *)v20 - v25);
        v26 = &v19[4 * v15 - 16];
        v27 = v10 - 16;
        v28 = v24 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v29 = *(_OWORD *)v27;
          *(v26 - 1) = *((_OWORD *)v27 - 1);
          *v26 = v29;
          v26 -= 2;
          v27 -= 32;
          v28 -= 8;
        }
        while (v28);
        if (v24 == (v24 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_30;
      }
      else
      {
        v23 = v10;
      }
    }
    else
    {
      v23 = v10;
    }
    do
    {
      v30 = *((_DWORD *)v23 - 1);
      v23 -= 4;
      *--v20 = v30;
    }
    while (v23 != v13);
    goto LABEL_30;
  }
LABEL_38:
  v35 = (_QWORD *)(a1 + 8);
  operations_research::glop::TriangularMatrix::ComputeRowsToConsiderInSortedOrder(a1 + 8, a3 + 32);
  *(_BYTE *)(a3 + 24) = 1;
  if (*(_QWORD *)(a3 + 32) == *(_QWORD *)(a3 + 40))
    operations_research::glop::TriangularMatrix::LowerSolveStartingAt((uint64_t)v35, v4, (uint64_t *)a3);
  else
    operations_research::glop::TriangularMatrix::HyperSparseSolve(v35, (uint64_t *)a3, (std::vector<int> *)(a3 + 32));
}

void operations_research::glop::LuFactorization::RightSolveLWithNonZeros(operations_research::glop::LuFactorization *this, operations_research::glop::ScatteredColumn *a2)
{
  std::vector<int> *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  _QWORD *v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;

  if (!*(_BYTE *)this)
  {
    v4 = (std::vector<int> *)((char *)a2 + 32);
    if (*((_QWORD *)a2 + 4) == *((_QWORD *)a2 + 5))
    {
      v11 = *((_QWORD *)a2 + 1) - *(_QWORD *)a2;
      v12 = *((_QWORD *)this + 162);
      *((_QWORD *)this + 162) = *(_QWORD *)a2;
      *(_QWORD *)a2 = v12;
      v13 = *((_QWORD *)this + 163);
      *((_QWORD *)this + 163) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = v13;
      v14 = *((_QWORD *)this + 164);
      *((_QWORD *)this + 164) = *((_QWORD *)a2 + 2);
      *((_QWORD *)a2 + 2) = v14;
      v30 = 0;
      v15 = (int)(v11 >> 3);
      v16 = (uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3;
      if (v15 <= v16)
      {
        if (v15 < v16)
          *((_QWORD *)a2 + 1) = *(_QWORD *)a2 + 8 * v15;
      }
      else
      {
        std::vector<double>::__append((uint64_t)a2, v15 - v16, &v30);
      }
      if ((int)((unint64_t)v11 >> 3) >= 1)
      {
        v27 = (_QWORD *)*((_QWORD *)this + 162);
        v28 = (int *)*((_QWORD *)this + 147);
        v29 = ((unint64_t)v11 >> 3);
        do
        {
          if (*(double *)v27 != 0.0)
            *(_QWORD *)(*(_QWORD *)a2 + 8 * *v28) = *v27;
          ++v28;
          ++v27;
          --v29;
        }
        while (v29);
      }
      v30 = 0;
      std::vector<double>::assign((uint64_t)this + 1296, (int)(v11 >> 3), &v30);
      v26 = (char *)this + 8;
    }
    else
    {
      v5 = *((_QWORD *)this + 162);
      *((_QWORD *)this + 162) = *(_QWORD *)a2;
      *(_QWORD *)a2 = v5;
      v6 = *((_QWORD *)this + 163);
      *((_QWORD *)this + 163) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = v6;
      v7 = *((_QWORD *)this + 164);
      *((_QWORD *)this + 164) = *((_QWORD *)a2 + 2);
      *((_QWORD *)a2 + 2) = v7;
      v8 = *((_QWORD *)this + 163) - *((_QWORD *)this + 162);
      v30 = 0;
      v9 = (int)(v8 >> 3);
      v10 = (uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3;
      if (v9 <= v10)
      {
        if (v9 < v10)
          *((_QWORD *)a2 + 1) = *(_QWORD *)a2 + 8 * v9;
      }
      else
      {
        std::vector<double>::__append((uint64_t)a2, v9 - v10, &v30);
      }
      v17 = (int *)*((_QWORD *)a2 + 4);
      v18 = (int *)*((_QWORD *)a2 + 5);
      if (v17 != v18)
      {
        v19 = *((_QWORD *)this + 162);
        v20 = *((_QWORD *)this + 147);
        v21 = *(_QWORD *)a2;
        do
        {
          v22 = *v17;
          v23 = *(_QWORD *)(v19 + 8 * v22);
          *(_QWORD *)(v19 + 8 * v22) = 0;
          v24 = *(int *)(v20 + 4 * v22);
          *(_QWORD *)(v21 + 8 * v24) = v23;
          *v17++ = v24;
        }
        while (v17 != v18);
      }
      v25 = (char *)this + 8;
      operations_research::glop::TriangularMatrix::ComputeRowsToConsiderInSortedOrder(v25, v4);
      *((_BYTE *)a2 + 24) = 1;
      v26 = v25;
      if (*((_QWORD *)a2 + 4) != *((_QWORD *)a2 + 5))
      {
        operations_research::glop::TriangularMatrix::HyperSparseSolve(v25, (uint64_t *)a2, v4);
        return;
      }
    }
    operations_research::glop::TriangularMatrix::LowerSolve((uint64_t)v26, (uint64_t *)a2);
  }
}

void operations_research::glop::LuFactorization::RightSolveLForScatteredColumn(operations_research::glop::LuFactorization *this, const operations_research::glop::ScatteredColumn *a2, operations_research::glop::ScatteredColumn *a3)
{
  *((_QWORD *)a3 + 5) = *((_QWORD *)a3 + 4);
  if (*(_BYTE *)this)
  {
    operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredColumnEntry>>::operator=((uint64_t)a3, (uint64_t)a2);
  }
  else if (*((_QWORD *)a2 + 4) == *((_QWORD *)a2 + 5))
  {
    operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredColumnEntry>>::operator=((uint64_t)a3, (uint64_t)a2);
    operations_research::glop::LuFactorization::RightSolveLWithNonZeros(this, a3);
  }
  else
  {
    operations_research::glop::LuFactorization::RightSolveLInternal<operations_research::glop::ScatteredColumn>((uint64_t)this, (uint64_t *)a2, (uint64_t)a3);
  }
}

void operations_research::glop::LuFactorization::RightSolveLInternal<operations_research::glop::ScatteredColumn>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _DWORD *v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  void **v44;

  v4 = (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3;
  v5 = a2[4];
  v6 = a2[5] - v5;
  if (v6 >= 1)
  {
    v7 = 0;
    v8 = *(_DWORD *)(a1 + 112);
    v9 = *a2;
    v10 = (unint64_t)v6 >> 2;
    v43 = a1;
    v44 = (void **)(a3 + 32);
    if (v10 <= 1)
      v11 = 1;
    else
      v11 = v10;
    v12 = *(char **)(a3 + 40);
    v42 = a2[4];
    v41 = *(_DWORD *)(a1 + 112);
    v39 = v11;
    v40 = *a2;
    while (1)
    {
      v13 = *(int *)(v5 + 4 * v7);
      v14 = *(int *)(*(_QWORD *)(a1 + 1176) + 4 * v13);
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v14) = *(_QWORD *)(v9 + 8 * v13);
      v15 = *(_QWORD *)(a3 + 48);
      if ((unint64_t)v12 >= v15)
        break;
      *(_DWORD *)v12 = v14;
      v12 += 4;
      *(_QWORD *)(a3 + 40) = v12;
      if ((int)v14 >= v8)
        goto LABEL_36;
LABEL_6:
      if (++v7 == v11)
        goto LABEL_41;
    }
    v16 = (char *)*v44;
    v17 = v12 - (_BYTE *)*v44;
    v18 = v17 >> 2;
    v19 = (v17 >> 2) + 1;
    if (v19 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v20 = v15 - (_QWORD)v16;
    if (v20 >> 1 > v19)
      v19 = v20 >> 1;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
      v21 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v22 = operator new(4 * v21);
      v23 = &v22[4 * v18];
      *v23 = v14;
      v24 = (uint64_t)(v23 + 1);
      if (v12 == v16)
      {
LABEL_33:
        *(_QWORD *)(a3 + 32) = v23;
        *(_QWORD *)(a3 + 40) = v24;
        *(_QWORD *)(a3 + 48) = &v22[4 * v21];
        if (v16)
          operator delete(v16);
        v12 = (char *)v24;
        v5 = v42;
        a1 = v43;
        v8 = v41;
        v11 = v39;
        v9 = v40;
        *(_QWORD *)(a3 + 40) = v24;
        if ((int)v14 < v41)
          goto LABEL_6;
LABEL_36:
        v34 = *(_QWORD *)(a1 + 64);
        v35 = *(_QWORD *)(v34 + (((v14 << 32) + 0x100000000) >> 29));
        v36 = *(_QWORD *)(v34 + 8 * v14);
        if ((int)v14 >= (int)v4)
          v37 = v4;
        else
          v37 = v14;
        if (v35 != v36)
          LODWORD(v4) = v37;
        goto LABEL_6;
      }
    }
    else
    {
      v22 = 0;
      v23 = (_DWORD *)(4 * v18);
      *(_DWORD *)(4 * v18) = v14;
      v24 = 4 * v18 + 4;
      if (v12 == v16)
        goto LABEL_33;
    }
    v25 = v12 - 4 - v16;
    if (v25 >= 0xBC)
    {
      if (&v22[v17 - 4 - (v25 & 0xFFFFFFFFFFFFFFFCLL)] > &v22[v17 - 4])
      {
        v26 = v12;
      }
      else if (&v12[-(v25 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v12 - 4)
      {
        v26 = v12;
      }
      else if ((unint64_t)(v12 - &v22[v17]) >= 0x20)
      {
        v27 = (v25 >> 2) + 1;
        v28 = 4 * (v27 & 0x7FFFFFFFFFFFFFF8);
        v26 = &v12[-v28];
        v23 = (_DWORD *)((char *)v23 - v28);
        v29 = &v22[4 * v18 - 16];
        v30 = v12 - 16;
        v31 = v27 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v32 = *(_OWORD *)v30;
          *(v29 - 1) = *((_OWORD *)v30 - 1);
          *v29 = v32;
          v29 -= 2;
          v30 -= 32;
          v31 -= 8;
        }
        while (v31);
        if (v27 == (v27 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_33;
      }
      else
      {
        v26 = v12;
      }
    }
    else
    {
      v26 = v12;
    }
    do
    {
      v33 = *((_DWORD *)v26 - 1);
      v26 -= 4;
      *--v23 = v33;
    }
    while (v26 != v16);
    goto LABEL_33;
  }
LABEL_41:
  v38 = (_QWORD *)(a1 + 8);
  operations_research::glop::TriangularMatrix::ComputeRowsToConsiderInSortedOrder(a1 + 8, a3 + 32);
  *(_BYTE *)(a3 + 24) = 1;
  if (*(_QWORD *)(a3 + 32) == *(_QWORD *)(a3 + 40))
    operations_research::glop::TriangularMatrix::LowerSolveStartingAt((uint64_t)v38, v4, (uint64_t *)a3);
  else
    operations_research::glop::TriangularMatrix::HyperSparseSolve(v38, (uint64_t *)a3, (std::vector<int> *)(a3 + 32));
}

void operations_research::glop::LuFactorization::LeftSolveUWithNonZeros(uint64_t a1, uint64_t a2)
{
  std::vector<int> *v4;
  _QWORD *v5;
  _QWORD *v6;
  _BYTE v7[16];

  if (*(_QWORD *)(a1 + 1128) != *(_QWORD *)(a1 + 1136))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v7, (google::glog_internal_namespace_ *)"./ortools/glop/lu_factorization.cc", 288);
    v6 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: col_perm_.empty() ", 32);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v7);
  }
  if (!*(_BYTE *)a1)
  {
    v4 = (std::vector<int> *)(a2 + 32);
    operations_research::glop::TriangularMatrix::ComputeRowsToConsiderInSortedOrder(a1 + 568, a2 + 32);
    *(_BYTE *)(a2 + 24) = 1;
    v5 = (_QWORD *)(a1 + 288);
    if (*(_QWORD *)(a2 + 32) == *(_QWORD *)(a2 + 40))
      operations_research::glop::TriangularMatrix::TransposeUpperSolve((uint64_t)v5, (uint64_t *)a2);
    else
      operations_research::glop::TriangularMatrix::TransposeHyperSparseSolve(v5, (uint64_t *)a2, v4);
  }
}

void sub_22DA0034C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void operations_research::glop::LuFactorization::RightSolveUWithNonZeros(operations_research::glop::LuFactorization *this, int **a2)
{
  char *v4;
  _QWORD *v5;
  _QWORD *v6;
  _BYTE v7[16];

  if (*((_QWORD *)this + 141) != *((_QWORD *)this + 142))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v7, (google::glog_internal_namespace_ *)"./ortools/glop/lu_factorization.cc", 304);
    v6 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: col_perm_.empty() ", 32);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v7);
  }
  if (!*(_BYTE *)this)
  {
    v4 = (char *)(a2 + 4);
    operations_research::glop::TriangularMatrix::ComputeRowsToConsiderInSortedOrder((int *)this + 72, a2 + 4);
    *((_BYTE *)a2 + 24) = 1;
    v5 = (_QWORD *)((char *)this + 568);
    if (a2[4] == a2[5])
      operations_research::glop::TriangularMatrix::TransposeLowerSolve((uint64_t)v5, (uint64_t *)a2);
    else
      operations_research::glop::TriangularMatrix::TransposeHyperSparseSolveWithReversedNonZeros(v5, (uint64_t *)a2, (uint64_t)v4);
  }
}

void sub_22DA00438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

uint64_t operations_research::glop::LuFactorization::LeftSolveLWithNonZeros(_BYTE *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int *v10;
  int *v11;
  _QWORD *v12;
  unint64_t v13;
  int *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  int *v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  int *v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  int *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  __int128 *v72;
  uint64_t v73;
  __int128 v74;
  int v75;
  int *v76;
  int *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  _QWORD *v87;
  uint64_t v88;
  unint64_t v89;
  _BYTE *v90;
  _DWORD *v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  _OWORD *v98;
  char *v99;
  uint64_t v100;
  __int128 v101;
  int *v102;
  void **v103;
  _QWORD *v104;
  uint64_t v105;

  if (*a1)
    return 0;
  v5 = a2;
  v6 = a1;
  v7 = a2 + 32;
  operations_research::glop::TriangularMatrix::ComputeRowsToConsiderInSortedOrder(a1 + 848, a2 + 32);
  *(_BYTE *)(v5 + 24) = 1;
  v8 = v6 + 1;
  if (*(_QWORD *)(v5 + 32) == *(_QWORD *)(v5 + 40))
  {
    operations_research::glop::TriangularMatrix::TransposeLowerSolve((uint64_t)v8, (uint64_t *)v5);
    v104 = (_QWORD *)v5;
    if (a3)
      goto LABEL_5;
LABEL_17:
    if (*(_QWORD *)(v5 + 32) == *(_QWORD *)(v5 + 40))
    {
      v49 = *(_QWORD *)(v5 + 8) - *(_QWORD *)v5;
      v50 = v6[162];
      v6[162] = *(_QWORD *)v5;
      *(_QWORD *)v5 = v50;
      v51 = v6[163];
      v6[163] = *(_QWORD *)(v5 + 8);
      *(_QWORD *)(v5 + 8) = v51;
      v52 = v6[164];
      v6[164] = *(_QWORD *)(v5 + 16);
      *(_QWORD *)(v5 + 16) = v52;
      v105 = 0;
      v53 = (_QWORD *)v5;
      v54 = (int)(v49 >> 3);
      v55 = (uint64_t)(v53[1] - *v53) >> 3;
      if (v54 <= v55)
      {
        if (v54 < v55)
          v104[1] = *v53 + 8 * v54;
      }
      else
      {
        std::vector<double>::__append((uint64_t)v53, v54 - v55, &v105);
      }
      if ((int)((unint64_t)v49 >> 3) >= 1)
      {
        v64 = (_QWORD *)v6[162];
        v65 = (int *)v6[150];
        v66 = ((unint64_t)v49 >> 3);
        do
        {
          if (*(double *)v64 != 0.0)
            *(_QWORD *)(*v104 + 8 * *v65) = *v64;
          ++v65;
          ++v64;
          --v66;
        }
        while (v66);
      }
      v105 = 0;
      std::vector<double>::assign((uint64_t)(v6 + 162), (int)(v49 >> 3), &v105);
    }
    else
    {
      v25 = v6[162];
      v6[162] = *(_QWORD *)v5;
      *(_QWORD *)v5 = v25;
      v26 = v6[163];
      v6[163] = *(_QWORD *)(v5 + 8);
      *(_QWORD *)(v5 + 8) = v26;
      v27 = v6[164];
      v6[164] = *(_QWORD *)(v5 + 16);
      *(_QWORD *)(v5 + 16) = v27;
      v28 = v6[163] - v6[162];
      v105 = 0;
      v29 = (int)(v28 >> 3);
      v30 = (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3;
      if (v29 <= v30)
      {
        if (v29 < v30)
          *(_QWORD *)(v5 + 8) = *(_QWORD *)v5 + 8 * v29;
      }
      else
      {
        std::vector<double>::__append(v5, v29 - v30, &v105);
      }
      v56 = *(int **)(v5 + 32);
      v57 = *(int **)(v5 + 40);
      if (v56 != v57)
      {
        v58 = v6[162];
        v59 = v6[150];
        v60 = *(_QWORD *)v5;
        do
        {
          v61 = *v56;
          v62 = *(_QWORD *)(v58 + 8 * v61);
          *(_QWORD *)(v58 + 8 * v61) = 0;
          v63 = *(int *)(v59 + 4 * v61);
          *(_QWORD *)(v60 + 8 * v63) = v62;
          *v56++ = v63;
        }
        while (v56 != v57);
      }
    }
    return 0;
  }
  operations_research::glop::TriangularMatrix::TransposeHyperSparseSolveWithReversedNonZeros(v8, (uint64_t *)v5, v7);
  v104 = (_QWORD *)v5;
  if (!a3)
    goto LABEL_17;
LABEL_5:
  v9 = *(_QWORD *)(v5 + 8) - *(_QWORD *)v5;
  v11 = (int *)a3[4];
  v10 = (int *)a3[5];
  if (v11 == v10 || (double)(int)((unint64_t)v9 >> 3) * 0.05 <= (double)(unint64_t)(v10 - v11))
  {
    v105 = 0;
    v22 = (v9 << 29) & 0xFFFFFFFF00000000;
    v23 = (_QWORD *)*a3;
    v24 = (a3[1] - *a3) >> 3;
    if (v22 >> 32 <= v24)
    {
      if (v22 >> 32 < v24)
        a3[1] = (uint64_t)&v23[v22 >> 32];
    }
    else
    {
      std::vector<double>::__append((uint64_t)a3, (v22 >> 32) - v24, &v105);
      v23 = (_QWORD *)*a3;
    }
    bzero(v23, v22 >> 29);
  }
  else
  {
    v12 = (_QWORD *)*a3;
    v13 = (char *)v10 - (char *)v11 - 4;
    v14 = (int *)a3[4];
    if (v13 < 4)
      goto LABEL_96;
    v15 = (v13 >> 2) + 1;
    v14 = &v11[v15 & 0x7FFFFFFFFFFFFFFELL];
    v16 = v11 + 1;
    v17 = v15 & 0x7FFFFFFFFFFFFFFELL;
    do
    {
      v18 = *v16;
      v12[*(v16 - 1)] = 0;
      v12[v18] = 0;
      v16 += 2;
      v17 -= 2;
    }
    while (v17);
    if (v15 != (v15 & 0x7FFFFFFFFFFFFFFELL))
    {
LABEL_96:
      do
      {
        v19 = *v14++;
        v12[v19] = 0;
      }
      while (v14 != v10);
    }
    v105 = 0;
    v20 = (int)(v9 >> 3);
    v21 = (a3[1] - (uint64_t)v12) >> 3;
    if (v20 <= v21)
    {
      if (v20 < v21)
        a3[1] = (uint64_t)&v12[v20];
    }
    else
    {
      std::vector<double>::__append((uint64_t)a3, v20 - v21, &v105);
    }
  }
  a3[5] = a3[4];
  v31 = *(_QWORD *)v5;
  *(_QWORD *)v5 = *a3;
  *a3 = v31;
  v32 = *(_QWORD *)(v5 + 8);
  *(_QWORD *)(v5 + 8) = a3[1];
  a3[1] = v32;
  v33 = *(_QWORD *)(v5 + 16);
  *(_QWORD *)(v5 + 16) = a3[2];
  a3[2] = v33;
  v34 = *(_QWORD *)(v5 + 32);
  if (v34 == *(_QWORD *)(v5 + 40))
  {
    v45 = (int *)v6[150];
    v46 = v6[151] - (_QWORD)v45;
    if ((int)(v46 >> 2) >= 1)
    {
      v47 = (_QWORD *)*a3;
      v48 = (v46 >> 2);
      do
      {
        if (*(double *)v47 != 0.0)
          *(_QWORD *)(*(_QWORD *)v5 + 8 * *v45) = *v47;
        ++v45;
        ++v47;
        --v48;
      }
      while (v48);
    }
    return 1;
  }
  *(_QWORD *)(v5 + 32) = a3[4];
  a3[4] = v34;
  v35 = *(_QWORD *)(v5 + 40);
  *(_QWORD *)(v5 + 40) = a3[5];
  a3[5] = v35;
  v36 = *(_QWORD *)(v5 + 48);
  *(_QWORD *)(v5 + 48) = a3[6];
  a3[6] = v36;
  v37 = a3[5] - a3[4];
  v38 = v37 >> 2;
  v39 = *(_BYTE **)(v5 + 32);
  if (v37 >> 2 > (unint64_t)((uint64_t)(*(_QWORD *)(v5 + 48) - (_QWORD)v39) >> 2))
  {
    if (v37 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v40 = *(_BYTE **)(v5 + 40);
    v41 = (char *)operator new(v37);
    v42 = v40 - v39;
    v43 = &v41[(v40 - v39) & 0xFFFFFFFFFFFFFFFCLL];
    v44 = v43;
    if (v40 == v39)
      goto LABEL_57;
    if ((unint64_t)(v42 - 4) >= 0x2C)
    {
      v44 = &v41[(v40 - v39) & 0xFFFFFFFFFFFFFFFCLL];
      if ((unint64_t)(v40 - &v41[v42 & 0xFFFFFFFFFFFFFFFCLL]) >= 0x20)
      {
        v67 = v42 >> 2;
        v68 = ((unint64_t)(v42 - 4) >> 2) + 1;
        v69 = 4 * (v68 & 0x7FFFFFFFFFFFFFF8);
        v70 = &v40[-v69];
        v44 = &v43[-v69];
        v71 = &v41[4 * v67 - 16];
        v72 = (__int128 *)(v40 - 16);
        v73 = v68 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v74 = *v72;
          *((_OWORD *)v71 - 1) = *(v72 - 1);
          *(_OWORD *)v71 = v74;
          v71 -= 32;
          v72 -= 2;
          v73 -= 8;
        }
        while (v73);
        v40 = v70;
        if (v68 == (v68 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_57:
          v5 = (uint64_t)v104;
          v104[4] = v44;
          v104[5] = v43;
          v104[6] = &v41[4 * v38];
          if (v39)
            operator delete(v39);
          goto LABEL_59;
        }
      }
    }
    else
    {
      v44 = &v41[(v40 - v39) & 0xFFFFFFFFFFFFFFFCLL];
    }
    do
    {
      v75 = *((_DWORD *)v40 - 1);
      v40 -= 4;
      *((_DWORD *)v44 - 1) = v75;
      v44 -= 4;
    }
    while (v40 != v39);
    goto LABEL_57;
  }
LABEL_59:
  v103 = (void **)v7;
  v77 = (int *)a3[4];
  v76 = (int *)a3[5];
  if (v77 != v76)
  {
    v78 = *(char **)(v5 + 40);
    v102 = (int *)a3[5];
    while (1)
    {
      while (1)
      {
        v79 = *v77;
        v80 = *(int *)(v6[150] + 4 * v79);
        *(_QWORD *)(*(_QWORD *)v5 + 8 * v80) = *(_QWORD *)(*a3 + 8 * v79);
        v81 = *(_QWORD *)(v5 + 48);
        if ((unint64_t)v78 >= v81)
          break;
        *(_DWORD *)v78 = v80;
        v78 += 4;
        *(_QWORD *)(v5 + 40) = v78;
        if (++v77 == v76)
          goto LABEL_89;
      }
      v82 = (char *)*v103;
      v83 = v78 - (_BYTE *)*v103;
      v84 = v83 >> 2;
      v85 = (v83 >> 2) + 1;
      if (v85 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v86 = a3;
      v87 = v6;
      v88 = v81 - (_QWORD)v82;
      if (v88 >> 1 > v85)
        v85 = v88 >> 1;
      v89 = (unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v85;
      if (v89)
      {
        if (v89 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v90 = operator new(4 * v89);
        v91 = &v90[4 * v84];
        *v91 = v80;
        v92 = (uint64_t)(v91 + 1);
        if (v78 == v82)
        {
LABEL_83:
          v5 = (uint64_t)v104;
          v104[4] = v91;
          v104[5] = v92;
          v104[6] = &v90[4 * v89];
          if (!v82)
            goto LABEL_80;
LABEL_79:
          operator delete(v82);
          goto LABEL_80;
        }
      }
      else
      {
        v90 = 0;
        v91 = (_DWORD *)(4 * v84);
        *(_DWORD *)(4 * v84) = v80;
        v92 = 4 * v84 + 4;
        if (v78 == v82)
          goto LABEL_83;
      }
      v93 = v78 - 4 - v82;
      if (v93 < 0xBC
        || &v90[v83 - 4 - (v93 & 0xFFFFFFFFFFFFFFFCLL)] > &v90[v83 - 4]
        || &v78[-(v93 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v78 - 4
        || (unint64_t)(v78 - v90 - v83) < 0x20)
      {
        break;
      }
      v96 = (v93 >> 2) + 1;
      v97 = 4 * (v96 & 0x7FFFFFFFFFFFFFF8);
      v94 = &v78[-v97];
      v91 = (_DWORD *)((char *)v91 - v97);
      v98 = &v90[4 * v84 - 16];
      v99 = v78 - 16;
      v100 = v96 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v101 = *(_OWORD *)v99;
        *(v98 - 1) = *((_OWORD *)v99 - 1);
        *v98 = v101;
        v98 -= 2;
        v99 -= 32;
        v100 -= 8;
      }
      while (v100);
      v5 = (uint64_t)v104;
      if (v96 != (v96 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_77;
LABEL_78:
      *(_QWORD *)(v5 + 32) = v91;
      *(_QWORD *)(v5 + 40) = v92;
      *(_QWORD *)(v5 + 48) = &v90[4 * v89];
      if (v82)
        goto LABEL_79;
LABEL_80:
      v6 = v87;
      a3 = v86;
      v76 = v102;
      *(_QWORD *)(v5 + 40) = v92;
      ++v77;
      v78 = (char *)v92;
      if (v77 == v102)
        goto LABEL_89;
    }
    v94 = v78;
    v5 = (uint64_t)v104;
    do
    {
LABEL_77:
      v95 = *((_DWORD *)v94 - 1);
      v94 -= 4;
      *--v91 = v95;
    }
    while (v94 != v82);
    goto LABEL_78;
  }
LABEL_89:
  *(_BYTE *)(v5 + 24) = 0;
  return 1;
}

uint64_t operations_research::glop::LuFactorization::LeftSolveLWithNonZeros(_BYTE *a1, uint64_t a2)
{
  return operations_research::glop::LuFactorization::LeftSolveLWithNonZeros(a1, a2, 0);
}

uint64_t operations_research::glop::LuFactorization::LeftSolveUForUnitRow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v8;
  void **v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  _DWORD *v19;
  char *v20;
  uint64_t v21;
  int64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  _DWORD *v30;
  char *v31;
  int64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  _OWORD *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  _OWORD *v46;
  char *v47;
  uint64_t v48;
  __int128 v49;
  int v50;
  _QWORD *v51;

  v4 = a2;
  if (!*(_BYTE *)a1)
  {
    v8 = *(_QWORD *)(a1 + 1128);
    if (v8 != *(_QWORD *)(a1 + 1136))
      v4 = *(unsigned int *)(v8 + 4 * (int)a2);
    *(_QWORD *)(*(_QWORD *)a3 + 8 * (int)v4) = 0x3FF0000000000000;
    v9 = (void **)(a3 + 32);
    v11 = *(char **)(a3 + 40);
    v10 = *(_QWORD *)(a3 + 48);
    if ((unint64_t)v11 < v10)
    {
      *(_DWORD *)v11 = v4;
      v12 = (uint64_t)(v11 + 4);
LABEL_47:
      *(_QWORD *)(a3 + 40) = v12;
      if (*(_QWORD *)(*(_QWORD *)(a1 + 624) + (((v4 << 32) + 0x100000000) >> 29)) == *(_QWORD *)(*(_QWORD *)(a1 + 624)
                                                                                                  + 8 * (int)v4))
      {
        *(double *)(*(_QWORD *)a3 + 8 * (int)v4) = *(double *)(*(_QWORD *)a3 + 8 * (int)v4)
                                                   / *(double *)(*(_QWORD *)(a1 + 648) + 8 * (int)v4);
      }
      else
      {
        v51 = (_QWORD *)(a1 + 568);
        operations_research::glop::TriangularMatrix::ComputeRowsToConsiderInSortedOrder(v51, a3 + 32);
        *(_BYTE *)(a3 + 24) = 1;
        if (*(_QWORD *)(a3 + 32) == *(_QWORD *)(a3 + 40))
          operations_research::glop::TriangularMatrix::LowerSolveStartingAt((uint64_t)v51, v4, (uint64_t *)a3);
        else
          operations_research::glop::TriangularMatrix::HyperSparseSolve(v51, (uint64_t *)a3, (std::vector<int> *)(a3 + 32));
      }
      return v4;
    }
    v23 = (char *)*v9;
    v24 = v11 - (_BYTE *)*v9;
    v25 = v24 >> 2;
    v26 = (v24 >> 2) + 1;
    if (v26 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v27 = v10 - (_QWORD)v23;
    if (v27 >> 1 > v26)
      v26 = v27 >> 1;
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
      v28 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v28 = v26;
    if (v28)
    {
      if (v28 >> 62)
        goto LABEL_54;
      v29 = operator new(4 * v28);
      v30 = &v29[4 * v25];
      v31 = &v29[4 * v28];
      *v30 = v4;
      v12 = (uint64_t)(v30 + 1);
      v32 = v11 - v23;
      if (v11 == v23)
        goto LABEL_45;
    }
    else
    {
      v29 = 0;
      v30 = (_DWORD *)(4 * v25);
      v31 = 0;
      *(_DWORD *)(4 * v25) = v4;
      v12 = 4 * v25 + 4;
      v32 = v11 - v23;
      if (v11 == v23)
      {
LABEL_45:
        *(_QWORD *)(a3 + 32) = v30;
        *(_QWORD *)(a3 + 40) = v12;
        *(_QWORD *)(a3 + 48) = v31;
        if (v23)
          operator delete(v23);
        goto LABEL_47;
      }
    }
    v42 = v32 - 4;
    if (v42 < 0x2C)
      goto LABEL_58;
    if ((unint64_t)(v11 - v29 - v24) < 0x20)
      goto LABEL_58;
    v43 = (v42 >> 2) + 1;
    v44 = 4 * (v43 & 0x7FFFFFFFFFFFFFF8);
    v45 = &v11[-v44];
    v30 = (_DWORD *)((char *)v30 - v44);
    v46 = &v29[4 * v25 - 16];
    v47 = v11 - 16;
    v48 = v43 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v49 = *(_OWORD *)v47;
      *(v46 - 1) = *((_OWORD *)v47 - 1);
      *v46 = v49;
      v46 -= 2;
      v47 -= 32;
      v48 -= 8;
    }
    while (v48);
    v11 = v45;
    if (v43 != (v43 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_58:
      do
      {
        v50 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *--v30 = v50;
      }
      while (v11 != v23);
    }
    goto LABEL_45;
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * (int)a2) = 0x3FF0000000000000;
  v6 = *(char **)(a3 + 40);
  v5 = *(_QWORD *)(a3 + 48);
  if ((unint64_t)v6 < v5)
  {
    *(_DWORD *)v6 = a2;
    *(_QWORD *)(a3 + 40) = v6 + 4;
    return v4;
  }
  v13 = *(char **)(a3 + 32);
  v14 = (v6 - v13) >> 2;
  v15 = v14 + 1;
  if ((unint64_t)(v14 + 1) >> 62)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v16 = v5 - (_QWORD)v13;
  if (v16 >> 1 > v15)
    v15 = v16 >> 1;
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
    v17 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v17 = v15;
  if (v17)
  {
    if (!(v17 >> 62))
    {
      v18 = operator new(4 * v17);
      v19 = &v18[4 * v14];
      v20 = &v18[4 * v17];
      *v19 = v4;
      v21 = (uint64_t)(v19 + 1);
      v22 = v6 - v13;
      if (v6 == v13)
        goto LABEL_35;
LABEL_29:
      v33 = v22 - 4;
      if (v33 < 0x2C)
        goto LABEL_59;
      if ((unint64_t)(v13 - v18) < 0x20)
        goto LABEL_59;
      v34 = (v33 >> 2) + 1;
      v35 = 4 * (v34 & 0x7FFFFFFFFFFFFFF8);
      v36 = &v6[-v35];
      v19 = (_DWORD *)((char *)v19 - v35);
      v37 = &v18[4 * v14 - 16];
      v38 = v6 - 16;
      v39 = v34 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v40 = *(_OWORD *)v38;
        *(v37 - 1) = *((_OWORD *)v38 - 1);
        *v37 = v40;
        v37 -= 2;
        v38 -= 32;
        v39 -= 8;
      }
      while (v39);
      v6 = v36;
      if (v34 != (v34 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_59:
        do
        {
          v41 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *--v19 = v41;
        }
        while (v6 != v13);
      }
      goto LABEL_35;
    }
LABEL_54:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  v18 = 0;
  v19 = (_DWORD *)(4 * v14);
  v20 = 0;
  *(_DWORD *)(4 * v14) = a2;
  v21 = 4 * v14 + 4;
  v22 = v6 - v13;
  if (v6 != v13)
    goto LABEL_29;
LABEL_35:
  *(_QWORD *)(a3 + 32) = v19;
  *(_QWORD *)(a3 + 40) = v21;
  *(_QWORD *)(a3 + 48) = v20;
  if (v13)
    operator delete(v13);
  *(_QWORD *)(a3 + 40) = v21;
  return v4;
}

uint64_t operations_research::glop::LuFactorization::GetColumnOfU(uint64_t a1, unsigned int a2, __n128 a3)
{
  unsigned int v3;
  uint64_t v5;
  char *v6;
  char *v7;
  void *v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;

  v3 = a2;
  if (*(_BYTE *)a1)
  {
    v5 = 0;
    *(_QWORD *)(a1 + 1256) = 0;
    *(_BYTE *)(a1 + 1288) = 0;
    if (!*(_QWORD *)(a1 + 1264))
    {
      v6 = (char *)operator new[]();
      v7 = v6;
      v8 = v6 + 16;
      v5 = *(_QWORD *)(a1 + 1256);
      if (v5 >= 1)
      {
        memmove(v6, *(const void **)(a1 + 1272), 4 * v5);
        memmove(v8, *(const void **)(a1 + 1280), 8 * v5);
      }
      v9 = *(_QWORD *)(a1 + 1248);
      *(_QWORD *)(a1 + 1248) = v7;
      *(_QWORD *)(a1 + 1272) = v7;
      *(_QWORD *)(a1 + 1280) = v8;
      *(_QWORD *)(a1 + 1264) = 4;
      if (v9)
      {
        MEMORY[0x22E31DF60](v9, 0x1000C8077774924);
        v5 = *(_QWORD *)(a1 + 1256);
      }
    }
    *(_QWORD *)(a1 + 1256) = v5 + 1;
    *(_DWORD *)(*(_QWORD *)(a1 + 1272) + 4 * v5) = v3;
    *(_QWORD *)(*(_QWORD *)(a1 + 1280) + 8 * v5) = 0x3FF0000000000000;
    *(_BYTE *)(a1 + 1288) = 1;
    return a1 + 1248;
  }
  else
  {
    v11 = (_QWORD *)(a1 + 288);
    v12 = *(_QWORD *)(a1 + 1128);
    if (v12 != *(_QWORD *)(a1 + 1136))
      v3 = *(_DWORD *)(v12 + 4 * (int)a2);
    operations_research::glop::TriangularMatrix::CopyColumnToSparseColumn(v11, v3, a1 + 1248, a3);
    return a1 + 1248;
  }
}

uint64_t operations_research::glop::LuFactorization::NumberOfEntries(operations_research::glop::LuFactorization *this)
{
  if (*(_BYTE *)this)
    return 0;
  else
    return *((int *)this + 73)
         + (uint64_t)*((int *)this + 3)
         + ((uint64_t)(*((_QWORD *)this + 3) - *((_QWORD *)this + 2)) >> 3)
         + ((uint64_t)(*((_QWORD *)this + 38) - *((_QWORD *)this + 37)) >> 3);
}

double operations_research::glop::LuFactorization::ComputeInverseInfinityNormUpperBound(operations_research::glop::LuFactorization *this)
{
  double v2;

  v2 = operations_research::glop::TriangularMatrix::ComputeInverseInfinityNormUpperBound((operations_research::glop::LuFactorization *)((char *)this + 8));
  return v2
       * operations_research::glop::TriangularMatrix::ComputeInverseInfinityNormUpperBound((operations_research::glop::LuFactorization *)((char *)this + 288));
}

operations_research::glop::LuFactorization::Stats *operations_research::glop::LuFactorization::Stats::Stats(operations_research::glop::LuFactorization::Stats *this)
{
  char __p[18];
  char v4;

  strcpy((char *)this, "LuFactorization");
  *((_BYTE *)this + 23) = 15;
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = (char *)this + 64;
  v4 = 17;
  strcpy(__p, "basis_num_entries");
  *(_QWORD *)operations_research::DistributionStat::DistributionStat((operations_research::glop::LuFactorization::Stats *)((char *)this + 80), (__int128 *)__p, this) = &unk_24F987D30;
  if (v4 < 0)
    operator delete(*(void **)__p);
  v4 = 10;
  strcpy(__p, "lu_fill_in");
  *(_QWORD *)operations_research::DistributionStat::DistributionStat((operations_research::glop::LuFactorization::Stats *)((char *)this + 160), (__int128 *)__p, this) = &unk_24F987C70;
  if (v4 < 0)
    operator delete(*(void **)__p);
  return this;
}

void sub_22DA011BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (a14 < 0)
    operator delete(__p);
  *(_QWORD *)(v14 + 80) = off_24F97FEB0;
  if (*(char *)(v14 + 111) < 0)
    operator delete(*(void **)(v14 + 88));
  operations_research::StatsGroup::~StatsGroup((operations_research::StatsGroup *)v14);
  _Unwind_Resume(a1);
}

operations_research::glop::Markowitz *operations_research::glop::Markowitz::Markowitz(operations_research::glop::Markowitz *this)
{
  operations_research::glop::Markowitz::Stats *v2;

  v2 = operations_research::glop::Markowitz::Stats::Stats(this);
  *(_OWORD *)((char *)v2 + 433) = 0u;
  *(_OWORD *)((char *)v2 + 408) = 0u;
  *(_OWORD *)((char *)v2 + 424) = 0u;
  *(_OWORD *)((char *)v2 + 456) = 0u;
  *(_OWORD *)((char *)v2 + 472) = 0u;
  *(_OWORD *)((char *)v2 + 488) = 0u;
  *(_OWORD *)((char *)v2 + 504) = 0u;
  *(_OWORD *)((char *)v2 + 520) = 0u;
  *(_OWORD *)((char *)v2 + 536) = 0u;
  *(_OWORD *)((char *)v2 + 552) = 0u;
  *((_BYTE *)v2 + 568) = 0;
  *((_OWORD *)v2 + 36) = 0u;
  *((_OWORD *)v2 + 37) = 0u;
  *((_OWORD *)v2 + 38) = 0u;
  *((_OWORD *)v2 + 39) = 0u;
  *((_OWORD *)v2 + 40) = 0u;
  *((_OWORD *)v2 + 41) = 0u;
  *((_OWORD *)v2 + 42) = 0u;
  *((_OWORD *)v2 + 43) = 0u;
  *((_OWORD *)v2 + 44) = 0u;
  *((_OWORD *)v2 + 45) = 0u;
  *((_OWORD *)v2 + 46) = 0u;
  *((_DWORD *)v2 + 188) = 0;
  *((_BYTE *)v2 + 756) = 1;
  *(_OWORD *)((char *)v2 + 760) = 0u;
  *(_OWORD *)((char *)v2 + 776) = 0u;
  *(_OWORD *)((char *)v2 + 792) = 0u;
  *(_OWORD *)((char *)v2 + 808) = 0u;
  *(_OWORD *)((char *)v2 + 824) = 0u;
  *(_OWORD *)((char *)v2 + 840) = 0u;
  *(_OWORD *)((char *)v2 + 856) = 0u;
  *(_OWORD *)((char *)v2 + 872) = 0u;
  *(_OWORD *)((char *)v2 + 888) = 0u;
  *(_OWORD *)((char *)v2 + 904) = 0u;
  *(_OWORD *)((char *)v2 + 920) = 0u;
  *(_OWORD *)((char *)v2 + 936) = 0u;
  *(_OWORD *)((char *)v2 + 952) = 0u;
  *(_OWORD *)((char *)v2 + 968) = 0u;
  *(_OWORD *)((char *)v2 + 984) = 0u;
  *(_OWORD *)((char *)v2 + 1000) = 0u;
  *(_OWORD *)((char *)v2 + 1016) = 0u;
  *((_DWORD *)v2 + 258) = 0;
  *((_BYTE *)v2 + 1036) = 1;
  *(_OWORD *)((char *)v2 + 1384) = 0u;
  *(_OWORD *)((char *)v2 + 1400) = 0u;
  *(_OWORD *)((char *)v2 + 1416) = 0u;
  *(_OWORD *)((char *)v2 + 1432) = 0u;
  *((_QWORD *)v2 + 181) = 0;
  *((_OWORD *)this + 65) = 0u;
  *((_OWORD *)this + 66) = 0u;
  *((_OWORD *)this + 67) = 0u;
  *((_OWORD *)this + 68) = 0u;
  *((_OWORD *)this + 69) = 0u;
  *((_OWORD *)this + 70) = 0u;
  *((_OWORD *)this + 71) = 0u;
  *((_OWORD *)this + 72) = 0u;
  *((_OWORD *)this + 73) = 0u;
  *((_OWORD *)this + 74) = 0u;
  *((_OWORD *)this + 75) = 0u;
  *((_OWORD *)this + 76) = 0u;
  *((_OWORD *)this + 77) = 0u;
  *((_OWORD *)this + 78) = 0u;
  *((_OWORD *)this + 79) = 0u;
  *((_OWORD *)this + 80) = 0u;
  *((_OWORD *)this + 81) = 0u;
  *((_OWORD *)this + 82) = 0u;
  *((_OWORD *)this + 83) = 0u;
  *((_OWORD *)this + 84) = 0u;
  *((_OWORD *)this + 85) = 0u;
  *((_DWORD *)this + 344) = 0;
  *((_QWORD *)this + 192) = 0;
  *((_OWORD *)this + 95) = 0u;
  *((_OWORD *)this + 94) = 0u;
  *((_OWORD *)this + 93) = 0u;
  *((_OWORD *)this + 92) = 0u;
  operations_research::glop::GlopParameters::GlopParameters((uint64_t)v2 + 1544, 0);
  return this;
}

void sub_22DA0134C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  operations_research::glop::SparseMatrixWithReusableColumnMemory *v2;
  operations_research::glop::MatrixNonZeroPattern *v3;
  operations_research::glop::ColumnPriorityQueue *v4;
  void **v5;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v7 = (void *)v1[190];
  if (v7)
  {
    v1[191] = v7;
    operator delete(v7);
    v8 = (void *)v1[187];
    if (!v8)
    {
LABEL_3:
      v9 = *v5;
      if (!*v5)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v8 = (void *)v1[187];
    if (!v8)
      goto LABEL_3;
  }
  v1[188] = v8;
  operator delete(v8);
  v9 = *v5;
  if (!*v5)
  {
LABEL_4:
    operations_research::glop::ColumnPriorityQueue::~ColumnPriorityQueue(v4);
    operations_research::glop::MatrixNonZeroPattern::~MatrixNonZeroPattern(v3);
    v10 = (void *)v1[151];
    if (!v10)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  v1[185] = v9;
  operator delete(v9);
  operations_research::glop::ColumnPriorityQueue::~ColumnPriorityQueue(v4);
  operations_research::glop::MatrixNonZeroPattern::~MatrixNonZeroPattern(v3);
  v10 = (void *)v1[151];
  if (!v10)
  {
LABEL_6:
    operations_research::glop::TriangularMatrix::~TriangularMatrix((operations_research::glop::TriangularMatrix *)(v1 + 116));
    operations_research::glop::TriangularMatrix::~TriangularMatrix((operations_research::glop::TriangularMatrix *)(v1 + 81));
    operations_research::glop::SparseMatrixWithReusableColumnMemory::~SparseMatrixWithReusableColumnMemory((operations_research::glop::SparseMatrixWithReusableColumnMemory *)(v1 + 66));
    operations_research::glop::SparseMatrixWithReusableColumnMemory::~SparseMatrixWithReusableColumnMemory(v2);
    operations_research::glop::Markowitz::Stats::~Stats((operations_research::glop::Markowitz::Stats *)v1);
    _Unwind_Resume(a1);
  }
LABEL_5:
  operator delete(v10);
  goto LABEL_6;
}

void operations_research::glop::ColumnPriorityQueue::~ColumnPriorityQueue(operations_research::glop::ColumnPriorityQueue *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = *((_QWORD *)this + 6);
  if (v2)
  {
    v3 = *((_QWORD *)this + 7);
    v4 = (void *)*((_QWORD *)this + 6);
    if (v3 != v2)
    {
      v5 = *((_QWORD *)this + 7);
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 7) = v2;
    operator delete(v4);
  }
  v8 = (void *)*((_QWORD *)this + 3);
  if (v8)
  {
    *((_QWORD *)this + 4) = v8;
    operator delete(v8);
  }
  v9 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v9;
    operator delete(v9);
  }
}

void operations_research::glop::SparseMatrixWithReusableColumnMemory::~SparseMatrixWithReusableColumnMemory(operations_research::glop::SparseMatrixWithReusableColumnMemory *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;

  v2 = (_QWORD *)*((_QWORD *)this + 12);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 13);
    v4 = (void *)*((_QWORD *)this + 12);
    if (v3 != v2)
    {
      do
      {
        v6 = *(v3 - 6);
        v3 -= 6;
        v5 = v6;
        *v3 = 0;
        if (v6)
          MEMORY[0x22E31DF60](v5, 0x1000C8077774924);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 12);
    }
    *((_QWORD *)this + 13) = v2;
    operator delete(v4);
  }
  v7 = (void *)*((_QWORD *)this + 9);
  if (v7)
  {
    *((_QWORD *)this + 10) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 6);
  if (v8)
  {
    *((_QWORD *)this + 7) = v8;
    operator delete(v8);
  }
  v9 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v9)
    MEMORY[0x22E31DF60](v9, 0x1000C8077774924);
}

void operations_research::glop::Markowitz::Stats::~Stats(operations_research::glop::Markowitz::Stats *this)
{
  *((_QWORD *)this + 40) = off_24F97FEB0;
  if (*((char *)this + 351) < 0)
  {
    operator delete(*((void **)this + 41));
    *((_QWORD *)this + 30) = off_24F97FEB0;
    if ((*((char *)this + 271) & 0x80000000) == 0)
    {
LABEL_3:
      *((_QWORD *)this + 20) = off_24F97FEB0;
      if ((*((char *)this + 191) & 0x80000000) == 0)
        goto LABEL_4;
LABEL_9:
      operator delete(*((void **)this + 21));
      *((_QWORD *)this + 10) = off_24F97FEB0;
      if ((*((char *)this + 111) & 0x80000000) == 0)
        goto LABEL_5;
LABEL_10:
      operator delete(*((void **)this + 11));
      operations_research::StatsGroup::~StatsGroup(this);
      return;
    }
  }
  else
  {
    *((_QWORD *)this + 30) = off_24F97FEB0;
    if ((*((char *)this + 271) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete(*((void **)this + 31));
  *((_QWORD *)this + 20) = off_24F97FEB0;
  if (*((char *)this + 191) < 0)
    goto LABEL_9;
LABEL_4:
  *((_QWORD *)this + 10) = off_24F97FEB0;
  if (*((char *)this + 111) < 0)
    goto LABEL_10;
LABEL_5:
  operations_research::StatsGroup::~StatsGroup(this);
}

operations_research::glop::Markowitz::Stats *operations_research::glop::Markowitz::Stats::Stats(operations_research::glop::Markowitz::Stats *this)
{
  void *__p;
  __int128 v4;

  strcpy((char *)this, "Markowitz");
  *((_BYTE *)this + 23) = 9;
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = (char *)this + 64;
  __p = operator new(0x20uLL);
  v4 = xmmword_22DCE65A0;
  strcpy((char *)__p, "basis_singleton_column_ratio");
  *(_QWORD *)operations_research::DistributionStat::DistributionStat((operations_research::glop::Markowitz::Stats *)((char *)this + 80), (__int128 *)&__p, this) = &unk_24F987C70;
  if (SHIBYTE(v4) < 0)
    operator delete(__p);
  __p = operator new(0x28uLL);
  v4 = xmmword_22DCE6530;
  strcpy((char *)__p, "basis_residual_singleton_column_ratio");
  *(_QWORD *)operations_research::DistributionStat::DistributionStat((operations_research::glop::Markowitz::Stats *)((char *)this + 160), (__int128 *)&__p, this) = &unk_24F987C70;
  if (SHIBYTE(v4) < 0)
    operator delete(__p);
  __p = operator new(0x20uLL);
  v4 = xmmword_22DCE65A0;
  strcpy((char *)__p, "pivots_without_fill_in_ratio");
  *(_QWORD *)operations_research::DistributionStat::DistributionStat((operations_research::glop::Markowitz::Stats *)((char *)this + 240), (__int128 *)&__p, this) = &unk_24F987C70;
  if (SHIBYTE(v4) < 0)
    operator delete(__p);
  __p = operator new(0x20uLL);
  v4 = xmmword_22DCE6650;
  strcpy((char *)__p, "degree_two_pivot_columns");
  *(_QWORD *)operations_research::DistributionStat::DistributionStat((operations_research::glop::Markowitz::Stats *)((char *)this + 320), (__int128 *)&__p, this) = &unk_24F987C70;
  if (SHIBYTE(v4) < 0)
    operator delete(__p);
  return this;
}

void sub_22DA017F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (a17 < 0)
    operator delete(__p);
  *(_QWORD *)(v17 + 240) = off_24F97FEB0;
  if (*(char *)(v17 + 271) < 0)
    operator delete(*(void **)(v17 + 248));
  *(_QWORD *)(v17 + 160) = off_24F97FEB0;
  if (*(char *)(v17 + 191) < 0)
    operator delete(*(void **)(v17 + 168));
  *(_QWORD *)(v17 + 80) = off_24F97FEB0;
  if (*(char *)(v17 + 111) < 0)
  {
    operator delete(*(void **)(v17 + 88));
    operations_research::StatsGroup::~StatsGroup((operations_research::StatsGroup *)v17);
    _Unwind_Resume(a1);
  }
  operations_research::StatsGroup::~StatsGroup((operations_research::StatsGroup *)v17);
  _Unwind_Resume(a1);
}

uint64_t operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredColumnEntry>>::operator=(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  void *v5;
  unint64_t v6;

  v3 = result;
  if (result == a2)
  {
    *(_BYTE *)(result + 24) = *(_BYTE *)(a2 + 24);
  }
  else
  {
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((_QWORD *)result, *(char **)a2, *(char **)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
    *(_BYTE *)(v3 + 24) = *(_BYTE *)(a2 + 24);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((_QWORD *)(v3 + 32), *(char **)(a2 + 32), *(char **)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
    v4 = *(_QWORD *)(a2 + 64);
    if (v4)
    {
      v5 = *(void **)(v3 + 56);
      if (v4 > *(_QWORD *)(v3 + 72) << 6)
      {
        if (v5)
        {
          operator delete(v5);
          *(_QWORD *)(v3 + 56) = 0;
          *(_QWORD *)(v3 + 64) = 0;
          *(_QWORD *)(v3 + 72) = 0;
          v4 = *(_QWORD *)(a2 + 64);
        }
        if ((v4 & 0x8000000000000000) != 0)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v6 = ((v4 - 1) >> 6) + 1;
        v5 = operator new(8 * v6);
        *(_QWORD *)(v3 + 56) = v5;
        *(_QWORD *)(v3 + 64) = 0;
        *(_QWORD *)(v3 + 72) = v6;
        v4 = *(_QWORD *)(a2 + 64);
      }
      memmove(v5, *(const void **)(a2 + 56), (((v4 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
      v4 = *(_QWORD *)(a2 + 64);
    }
    *(_QWORD *)(v3 + 64) = v4;
    return v3;
  }
  return result;
}

uint64_t *std::vector<double>::assign(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *result;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  int64x2_t v18;
  int64x2_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64x2_t v25;
  int64x2_t *v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64x2_t v34;
  int64x2_t *v35;
  uint64_t v36;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(uint64_t **)a1;
  result = v7;
  if (a2 > (v6 - (uint64_t)v7) >> 3)
  {
    if (v7)
    {
      *(_QWORD *)(a1 + 8) = v7;
      operator delete(v7);
      v6 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a2 >> 61)
      goto LABEL_38;
    v9 = v6 >> 2;
    if (v6 >> 2 <= a2)
      v9 = a2;
    v10 = (unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8;
    v11 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v10)
      v11 = v9;
    if (v11 >> 61)
LABEL_38:
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = v11;
    result = (uint64_t *)operator new(8 * v11);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 16) = &result[v12];
    v13 = &result[a2];
    v14 = *a3;
    v15 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v16 = result;
    if (v15 < 3)
      goto LABEL_41;
    v17 = v15 + 1;
    v16 = &result[v17 & 0x3FFFFFFFFFFFFFFCLL];
    v18 = vdupq_lane_s64(v14, 0);
    v19 = (int64x2_t *)(result + 2);
    v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v19[-1] = v18;
      *v19 = v18;
      v19 += 2;
      v20 -= 4;
    }
    while (v20);
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_41:
      do
        *v16++ = v14;
      while (v16 != v13);
    }
    goto LABEL_37;
  }
  v21 = *(uint64_t **)(a1 + 8);
  v22 = (char *)v21 - (char *)v7;
  v23 = v21 - v7;
  if (v23 >= a2)
    v24 = a2;
  else
    v24 = v21 - v7;
  if (v24)
  {
    if (v24 < 8 || v7 < a3 + 1 && &v7[v24] > a3)
      goto LABEL_42;
    result = &v7[v24 & 0xFFFFFFFFFFFFFFFCLL];
    v25 = vdupq_lane_s64(*a3, 0);
    v26 = (int64x2_t *)(v7 + 2);
    v27 = v24 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v26[-1] = v25;
      *v26 = v25;
      v26 += 2;
      v27 -= 4;
    }
    while (v27);
    v28 = v24 == (v24 & 0xFFFFFFFFFFFFFFFCLL);
    v24 &= 3u;
    if (!v28)
    {
LABEL_42:
      do
      {
        *result++ = *a3;
        --v24;
      }
      while (v24);
    }
  }
  v10 = a2 >= v23;
  v29 = a2 - v23;
  if (v29 == 0 || !v10)
  {
    v13 = &v7[a2];
LABEL_37:
    *(_QWORD *)(a1 + 8) = v13;
    return result;
  }
  v30 = &v21[v29];
  v31 = 8 * a2 - (v22 & 0xFFFFFFFFFFFFFFF8) - 8;
  if (v31 < 0x98 || v21 < a3 + 1 && (uint64_t *)((char *)v21 + v31 + 8) > a3)
    goto LABEL_43;
  v32 = (v31 >> 3) + 1;
  v33 = &v21[v32 & 0x3FFFFFFFFFFFFFFCLL];
  v34 = vdupq_lane_s64(*a3, 0);
  v35 = (int64x2_t *)(v21 + 2);
  v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v35[-1] = v34;
    *v35 = v34;
    v35 += 2;
    v36 -= 4;
  }
  while (v36);
  v21 = v33;
  if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_43:
    do
      *v21++ = *a3;
    while (v21 != v30);
  }
  *(_QWORD *)(a1 + 8) = v30;
  return result;
}

void operations_research::glop::Markowitz::ComputeRowAndColumnPermutation(uint64_t a1@<X0>, uint64_t a2@<X1>, std::vector<int> *a3@<X2>, std::vector<int> *a4@<X3>, uint64_t a5@<X8>)
{
  int v9;
  unint64_t v10;
  int v11;
  std::vector<int>::size_type v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  int v22;
  double v23;
  int v24;
  uint64_t Pivot;
  uint64_t v26;
  int v27;
  uint64_t v28;
  double v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::string::size_type v35;
  std::string::size_type v36;
  uint64_t v37;
  int v38;
  _QWORD *v39;
  int v40;
  _QWORD *v41;
  google::LogMessage *v42;
  _QWORD *v43;
  _QWORD *v44;
  std::string *p_u;
  std::string::size_type size;
  uint64_t v48;
  operations_research::glop::TriangularMatrix *v49;
  std::string v50;
  std::string __u;
  unsigned int v52;
  int v53;
  double v54;
  int v55;
  _QWORD v56[4];

  v56[2] = *MEMORY[0x24BDAC8D0];
  operations_research::glop::Markowitz::Clear((operations_research::glop::Markowitz *)a1);
  v9 = **(_DWORD **)a2;
  v10 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - **(_QWORD **)(a2 + 8);
  v11 = v10 >> 2;
  LODWORD(__u.__r_.__value_.__l.__data_) = -1;
  v12 = v11;
  std::vector<int>::assign(a4, v11, (std::vector<int>::const_reference)&__u);
  LODWORD(__u.__r_.__value_.__l.__data_) = -1;
  std::vector<int>::assign(a3, v9, (std::vector<int>::const_reference)&__u);
  if (*(_QWORD *)(*(_QWORD *)a2 + 8) == *(_QWORD *)(*(_QWORD *)a2 + 16))
  {
    operations_research::glop::Status::Status(a5);
    return;
  }
  *(_QWORD *)(a1 + 400) = a2;
  v49 = (operations_research::glop::TriangularMatrix *)(a1 + 648);
  operations_research::glop::TriangularMatrix::Reset(a1 + 648, v9, (v10 >> 2));
  v48 = a1 + 928;
  operations_research::glop::TriangularMatrix::Reset(a1 + 928, v9, (v10 >> 2));
  LODWORD(__u.__r_.__value_.__l.__data_) = -1;
  std::vector<int>::assign((std::vector<int> *)(a1 + 456), v11, (std::vector<int>::const_reference)&__u);
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a1 + 480);
  v13 = *(_QWORD **)(a1 + 504);
  v14 = *(_QWORD **)(a1 + 512);
  while (v14 != v13)
  {
    v16 = *(v14 - 6);
    v14 -= 6;
    v15 = v16;
    *v14 = 0;
    if (v16)
      MEMORY[0x22E31DF60](v15, 0x1000C8077774924);
  }
  *(_QWORD *)(a1 + 512) = v13;
  LODWORD(__u.__r_.__value_.__l.__data_) = -1;
  std::vector<int>::assign((std::vector<int> *)(a1 + 576), v12, (std::vector<int>::const_reference)&__u);
  *(_QWORD *)(a1 + 608) = *(_QWORD *)(a1 + 600);
  v17 = *(_QWORD **)(a1 + 632);
  v18 = *(_QWORD **)(a1 + 624);
  while (v17 != v18)
  {
    v20 = *(v17 - 6);
    v17 -= 6;
    v19 = v20;
    *v17 = 0;
    if (v20)
      MEMORY[0x22E31DF60](v19, 0x1000C8077774924);
  }
  *(_QWORD *)(a1 + 632) = v18;
  __u.__r_.__value_.__s.__data_[0] = 0;
  std::vector<BOOL>::assign((char **)(a1 + 1208), v12, &__u);
  *(_BYTE *)(a1 + 1464) = 1;
  v55 = 0;
  operations_research::glop::Markowitz::ExtractSingletonColumns(a1, (_QWORD *)a2, (uint64_t *)a3, a4, &v55, v21);
  operations_research::glop::Markowitz::ExtractResidualSingletonColumns(a1, (_QWORD *)a2, (uint64_t *)a3, (uint64_t *)a4, &v55);
  v22 = v55;
  operations_research::glop::MatrixNonZeroPattern::InitializeFromMatrixSubset(a1 + 1232, (unsigned int **)a2, a3, a4, (_QWORD *)(a1 + 1496), (_QWORD *)(a1 + 1520));
  if (v9 >= (int)(v10 >> 2))
    v9 = v10 >> 2;
  if (v22 >= v9)
  {
LABEL_30:
    operations_research::RatioDistribution::Add(a1 + 240, (double)v22 / (double)v9);
    operations_research::RatioDistribution::Add(a1 + 320, 0.0 / (double)v9);
    operations_research::glop::Status::Status(a5);
    return;
  }
  v23 = *(double *)(a1 + 1720);
  v24 = v22;
  while (1)
  {
    v54 = 0.0;
    v52 = -1;
    v53 = -1;
    Pivot = operations_research::glop::Markowitz::FindPivot(a1, a3, a4, &v53, (int *)&v52, &v54);
    v27 = v53;
    if (v53 == -1)
      break;
    v28 = v52;
    if (v52 == -1)
      break;
    v29 = v54;
    if (fabs(v54) <= v23)
      break;
    v30 = *(_DWORD *)(*(_QWORD *)(a1 + 1280) + 4 * (int)v52);
    v31 = *(_QWORD *)(a1 + 1256);
    *(_QWORD *)(*(_QWORD *)(a1 + 1304) + (((unint64_t)(int)v52 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v52;
    --*(_DWORD *)(a1 + 1376);
    *(_DWORD *)(v31 + 4 * v27) = 0;
    if (Pivot)
    {
      operations_research::glop::Markowitz::UpdateResidualMatrix((uint64_t *)a1, v27, v28);
    }
    else
    {
      ++v22;
      if (v30 == 1)
        operations_research::glop::Markowitz::RemoveRowFromResidualMatrix(a1, v27);
      else
        operations_research::glop::Markowitz::RemoveColumnFromResidualMatrix((_QWORD *)a1, v26, v28);
    }
    if (*(_BYTE *)(a1 + 1464))
    {
      operations_research::glop::TriangularMatrix::AddDiagonalOnlyColumn((uint64_t)v49, 1.0);
      v32 = *(int *)(**(_QWORD **)(a2 + 8) + 4 * (int)v28);
      v33 = *(_QWORD *)(*(_QWORD *)a2 + 56);
      v34 = *(_QWORD *)(v33 + 8 * v32);
      v35 = *(_QWORD *)(v33 + (((v32 << 32) + 0x100000000) >> 29)) - v34;
      v36 = *(_QWORD *)(*(_QWORD *)a2 + 32) + 4 * v34;
      v37 = *(_QWORD *)(*(_QWORD *)a2 + 8) + 8 * v34;
      __u.__r_.__value_.__r.__words[0] = v35;
      __u.__r_.__value_.__l.__size_ = v36;
      __u.__r_.__value_.__r.__words[2] = v37;
      operations_research::glop::TriangularMatrix::AddTriangularColumn(v48, (uint64_t *)&__u, v27);
    }
    else
    {
      v38 = *(_DWORD *)(*(_QWORD *)(a1 + 456) + 4 * (int)v28);
      v39 = (_QWORD *)(a1 + 408);
      if (v38 != -1)
        v39 = (_QWORD *)(*(_QWORD *)(a1 + 504) + 48 * v38);
      operations_research::glop::TriangularMatrix::AddAndNormalizeTriangularColumn((uint64_t)v49, v39, v27, v29);
      operations_research::glop::SparseMatrixWithReusableColumnMemory::ClearAndReleaseColumn((_QWORD *)(a1 + 408), v28);
      v40 = *(_DWORD *)(*(_QWORD *)(a1 + 576) + 4 * (int)v28);
      v41 = (_QWORD *)(a1 + 528);
      if (v40 != -1)
        v41 = (_QWORD *)(*(_QWORD *)(a1 + 624) + 48 * v40);
      operations_research::glop::TriangularMatrix::AddTriangularColumnWithGivenDiagonalEntry(v48, v41, v29);
      operations_research::glop::SparseMatrixWithReusableColumnMemory::ClearAndReleaseColumn((_QWORD *)(a1 + 528), v28);
    }
    a4->__begin_[(int)v28] = v24;
    a3->__begin_[v27] = v24++;
    if (v9 == v24)
      goto LABEL_30;
  }
  *(double *)v56 = v54;
  v56[1] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("The matrix is singular! pivot = %E", 34, (uint64_t)v56, 1, (uint64_t)&__u);
  if (*operations_research::glop::Markowitz::ComputeRowAndColumnPermutation(operations_research::glop::CompactSparseMatrixView const&,operations_research::glop::Permutation<gtl::IntType<operations_research::glop::RowIndex_tag_,int>> *,operations_research::glop::Permutation<gtl::IntType<operations_research::glop::ColIndex_tag_,int>> *)::vlocal__ >= 1
    && (operations_research::glop::Markowitz::ComputeRowAndColumnPermutation(operations_research::glop::CompactSparseMatrixView const&,operations_research::glop::Permutation<gtl::IntType<operations_research::glop::RowIndex_tag_,int>> *,operations_research::glop::Permutation<gtl::IntType<operations_research::glop::ColIndex_tag_,int>> *)::vlocal__ != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)&operations_research::glop::Markowitz::ComputeRowAndColumnPermutation(operations_research::glop::CompactSparseMatrixView const&,operations_research::glop::Permutation<gtl::IntType<operations_research::glop::RowIndex_tag_,int>> *,operations_research::glop::Permutation<gtl::IntType<operations_research::glop::ColIndex_tag_,int>> *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/glop/markowitz.cc", (const char *)1)))
  {
    v42 = google::LogMessage::LogMessage((google::LogMessage *)v56, (google::glog_internal_namespace_ *)"./ortools/glop/markowitz.cc", 86);
    v43 = (_QWORD *)google::LogMessage::stream(v42);
    v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"ERROR_LU: ", 10);
    if ((__u.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_u = &__u;
    else
      p_u = (std::string *)__u.__r_.__value_.__r.__words[0];
    if ((__u.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__u.__r_.__value_.__r.__words[2]);
    else
      size = __u.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)p_u, size);
    google::LogMessage::~LogMessage((google::LogMessage *)v56);
  }
  if (SHIBYTE(__u.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v50, __u.__r_.__value_.__l.__data_, __u.__r_.__value_.__l.__size_);
  else
    v50 = __u;
  operations_research::glop::Status::Status(a5, 1, (__int128 *)&v50);
  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__u.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_49:
    operator delete(__u.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(__u.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_49;
}

void sub_22DA021B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::glop::Markowitz::Clear(operations_research::glop::Markowitz *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;

  *((_QWORD *)this + 58) = *((_QWORD *)this + 57);
  *((_QWORD *)this + 61) = *((_QWORD *)this + 60);
  v2 = (_QWORD *)*((_QWORD *)this + 63);
  v3 = (_QWORD *)*((_QWORD *)this + 64);
  while (v3 != v2)
  {
    v5 = *(v3 - 6);
    v3 -= 6;
    v4 = v5;
    *v3 = 0;
    if (v5)
      MEMORY[0x22E31DF60](v4, 0x1000C8077774924);
  }
  *((_QWORD *)this + 64) = v2;
  *((_QWORD *)this + 73) = *((_QWORD *)this + 72);
  *((_QWORD *)this + 76) = *((_QWORD *)this + 75);
  v6 = (_QWORD *)*((_QWORD *)this + 79);
  v7 = (_QWORD *)*((_QWORD *)this + 78);
  while (v6 != v7)
  {
    v9 = *(v6 - 6);
    v6 -= 6;
    v8 = v9;
    *v6 = 0;
    if (v9)
      MEMORY[0x22E31DF60](v8, 0x1000C8077774924);
  }
  *((_QWORD *)this + 79) = v7;
  *((_QWORD *)this + 158) = *((_QWORD *)this + 157);
  *((_QWORD *)this + 161) = *((_QWORD *)this + 160);
  v10 = *((_QWORD *)this + 155);
  v11 = *((_QWORD *)this + 154);
  if (v10 != v11)
  {
    v12 = *((_QWORD *)this + 155);
    do
    {
      v13 = *(_BYTE *)(v12 - 32);
      v12 -= 32;
      if ((v13 & 1) != 0)
        operator delete(*(void **)(v10 - 24));
      v10 = v12;
    }
    while (v12 != v11);
  }
  *((_QWORD *)this + 155) = v11;
  *((_QWORD *)this + 164) = 0;
  *((_QWORD *)this + 167) = 0;
  *((_DWORD *)this + 344) = 0;
  *((_QWORD *)this + 177) = *((_QWORD *)this + 176);
  *((_QWORD *)this + 174) = *((_QWORD *)this + 173);
  v14 = *((_QWORD *)this + 180);
  v15 = *((_QWORD *)this + 179);
  if (v14 != v15)
  {
    v16 = *((_QWORD *)this + 180);
    do
    {
      v18 = *(void **)(v16 - 24);
      v16 -= 24;
      v17 = v18;
      if (v18)
      {
        *(_QWORD *)(v14 - 16) = v17;
        operator delete(v17);
      }
      v14 = v16;
    }
    while (v16 != v15);
  }
  *((_QWORD *)this + 180) = v15;
  *((_QWORD *)this + 185) = *((_QWORD *)this + 184);
  *((_BYTE *)this + 1465) = 0;
}

void operations_research::glop::Markowitz::ExtractSingletonColumns(uint64_t a1, _QWORD *a2, uint64_t *a3, _QWORD *a4, int *a5, __n128 a6)
{
  unint64_t v8;
  uint64_t v10;
  __n128 *v11;
  __n128 *v12;
  __n128 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int32 v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  __n128 *v27;
  unint64_t v28;
  uint64_t v29;
  __int32 *v30;
  uint64_t v31;
  __n128 *v32;
  uint64_t v33;
  double v34;
  unint64_t v35;

  v8 = *(_QWORD *)(a2[1] + 8) - *(_QWORD *)a2[1];
  v35 = v8 >> 2;
  if ((int)(v8 >> 2) >= 1)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = (v8 >> 2);
    while (1)
    {
      v15 = *a2;
      v16 = *(int *)(*(_QWORD *)a2[1] + 4 * v10);
      v17 = *(_QWORD *)(*a2 + 56);
      v18 = *(_QWORD *)(v17 + 8 * v16);
      if (*(_QWORD *)(v17 + (((v16 << 32) + 0x100000000) >> 29)) - v18 == 1)
      {
        v19 = *(_DWORD *)(*(_QWORD *)(v15 + 32) + 4 * v18);
        v20 = *(_QWORD *)(*(_QWORD *)(v15 + 8) + 8 * v18);
        if (v12 >= v13)
        {
          v21 = v12 - v11;
          v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 60)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          if (((char *)v13 - (char *)v11) >> 3 > v22)
            v22 = ((char *)v13 - (char *)v11) >> 3;
          if ((unint64_t)((char *)v13 - (char *)v11) >= 0x7FFFFFFFFFFFFFF0)
            v23 = 0xFFFFFFFFFFFFFFFLL;
          else
            v23 = v22;
          if (v23)
          {
            if (v23 >> 60)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v24 = (char *)operator new(16 * v23);
            v25 = (uint64_t)&v24[16 * v21];
            *(_DWORD *)v25 = v19;
            *(_DWORD *)(v25 + 4) = v10;
            *(_QWORD *)(v25 + 8) = v20;
            if (v12 != v11)
            {
LABEL_16:
              v26 = v25;
              do
              {
                a6 = v12[-1];
                v27 = (__n128 *)(v26 - 16);
                *(__n128 *)(v26 - 16) = a6;
                --v12;
                v26 -= 16;
              }
              while (v12 != v11);
              v13 = (__n128 *)&v24[16 * v23];
              v12 = (__n128 *)(v25 + 16);
              if (v11)
LABEL_19:
                operator delete(v11);
LABEL_20:
              v11 = v27;
              goto LABEL_4;
            }
          }
          else
          {
            v24 = 0;
            v25 = 16 * v21;
            *(_DWORD *)v25 = v19;
            *(_DWORD *)(v25 + 4) = v10;
            *(_QWORD *)(v25 + 8) = v20;
            if (v12 != v11)
              goto LABEL_16;
          }
          v27 = (__n128 *)v25;
          v13 = (__n128 *)&v24[16 * v23];
          v12 = (__n128 *)(v25 + 16);
          if (v11)
            goto LABEL_19;
          goto LABEL_20;
        }
        v12->n128_u32[0] = v19;
        v12->n128_u32[1] = v10;
        v12->n128_u64[1] = v20;
        ++v12;
      }
LABEL_4:
      if (++v10 == v14)
        goto LABEL_25;
    }
  }
  v12 = 0;
  v11 = 0;
LABEL_25:
  v28 = 126 - 2 * __clz(v12 - v11);
  if (v12 == v11)
    v29 = 0;
  else
    v29 = v28;
  if (v12 != v11)
  {
    v30 = &v11->n128_i32[1];
    do
    {
      v32 = (__n128 *)(v30 - 1);
      v31 = *(v30 - 1);
      v33 = *a3;
      if (*(_DWORD *)(*a3 + 4 * v31) == -1)
      {
        v34 = *(double *)(v30 + 1);
        *(_DWORD *)(*a4 + 4 * *v30) = *a5;
        *(_DWORD *)(v33 + 4 * v31) = *a5;
        operations_research::glop::TriangularMatrix::AddDiagonalOnlyColumn(a1 + 648, 1.0);
        operations_research::glop::TriangularMatrix::AddDiagonalOnlyColumn(a1 + 928, v34);
        ++*a5;
      }
      v30 += 4;
    }
    while (&v32[1] != v12);
  }
  operations_research::RatioDistribution::Add(a1 + 80, (double)*a5 / (double)(int)v35);
  if (v11)
    operator delete(v11);
}

void sub_22DA02640(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::glop::Markowitz::ExtractResidualSingletonColumns(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, int *a5)
{
  unint64_t v7;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v26;
  uint64_t v27;
  operations_research::glop::TriangularMatrix *v28;
  uint64_t v29[3];

  v7 = *(_QWORD *)(a2[1] + 8) - *(_QWORD *)a2[1];
  v26 = v7 >> 2;
  if ((int)(v7 >> 2) >= 1)
  {
    v11 = 0;
    v27 = a1 + 928;
    v28 = (operations_research::glop::TriangularMatrix *)(a1 + 648);
    v12 = (v7 >> 2);
    v13 = -1;
    do
    {
      v14 = *a4;
      if (*(_DWORD *)(*a4 + 4 * v11) == -1)
      {
        v15 = *(int *)(*(_QWORD *)a2[1] + 4 * v11);
        v16 = *(_QWORD *)(*a2 + 56);
        v17 = *(_QWORD *)(v16 + 8 * v15);
        v18 = *(_QWORD *)(v16 + (((v15 << 32) + 0x100000000) >> 29)) - v17;
        v19 = (int *)(*(_QWORD *)(*a2 + 32) + 4 * v17);
        v20 = *(_QWORD *)(*a2 + 8) + 8 * v17;
        v29[0] = v18;
        v29[1] = (uint64_t)v19;
        v29[2] = v20;
        if (v18 >= 1)
        {
          v21 = 0;
          v22 = *a3;
          do
          {
            v24 = *v19++;
            v23 = v24;
            if (*(_DWORD *)(v22 + 4 * v24) == -1)
            {
              if (v21 > 0)
                goto LABEL_3;
              ++v21;
              v13 = v23;
            }
            --v18;
          }
          while (v18);
          if (v21 == 1)
          {
            *(_DWORD *)(v14 + 4 * v11) = *a5;
            *(_DWORD *)(v22 + 4 * v13) = *a5;
            operations_research::glop::TriangularMatrix::AddDiagonalOnlyColumn((uint64_t)v28, 1.0);
            operations_research::glop::TriangularMatrix::AddTriangularColumn(v27, v29, v13);
            ++*a5;
          }
        }
      }
LABEL_3:
      ++v11;
    }
    while (v11 != v12);
  }
  return operations_research::RatioDistribution::Add(a1 + 160, (double)*a5 / (double)(int)v26);
}

void operations_research::glop::MatrixNonZeroPattern::InitializeFromMatrixSubset(uint64_t a1, unsigned int **a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  int *v37;
  _OWORD *v38;
  __int128 *v39;
  uint64_t v40;
  __int128 v41;
  unint64_t v42;
  char *v43;
  int v44;
  BOOL v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _BYTE *v54;
  _DWORD *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  _OWORD *v61;
  char *v62;
  uint64_t v63;
  __int128 v64;
  int v65;
  BOOL v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t i;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  unint64_t v87;
  int *v88;
  _OWORD *v89;
  __int128 *v90;
  unint64_t v91;
  __int128 v92;
  unint64_t v93;
  char *v94;
  int v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  _QWORD *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  _BYTE *v106;
  _DWORD *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  _OWORD *v112;
  char *v113;
  uint64_t v114;
  __int128 v115;
  int v116;
  _QWORD *v117;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;

  v10 = (*((_QWORD *)a2[1] + 1) - *(_QWORD *)a2[1]) >> 2;
  v11 = **a2;
  operations_research::glop::MatrixNonZeroPattern::Reset(a1, v11, v10);
  v12 = (_QWORD *)a1;
  v117 = a5;
  a5[1] = *a5;
  a6[1] = *a6;
  if ((int)v10 >= 1)
  {
    v13 = 0;
    v14 = *a4;
    v15 = *a2;
    v16 = a2[1];
    do
    {
      if (*(_DWORD *)(v14 + 4 * v13) == -1)
      {
        v17 = *(int *)(*(_QWORD *)v16 + 4 * v13);
        v18 = v15[7];
        v19 = *(_QWORD *)(v18 + 8 * v17);
        v20 = *(_QWORD *)(v18 + (((v17 << 32) + 0x100000000) >> 29)) - v19;
        if (v20 >= 1)
        {
          v21 = (int *)(v15[4] + 4 * v19);
          v22 = *(_QWORD *)(a1 + 24);
          do
          {
            v23 = *v21++;
            ++*(_DWORD *)(v22 + 4 * v23);
            --v20;
          }
          while (v20);
        }
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(a1 + 72) + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
        --*(_DWORD *)(a1 + 144);
      }
      ++v13;
    }
    while (v13 != v10);
  }
  v119 = v10;
  v120 = a4;
  v24 = a3;
  v121 = (_QWORD *)a1;
  if ((int)v11 >= 1)
  {
    v25 = 0;
    while (1)
    {
      if (*(_DWORD *)(*v24 + 4 * v25) != -1)
      {
        *(_DWORD *)(v12[3] + 4 * v25) = 0;
        goto LABEL_13;
      }
      v26 = *v12 + 32 * v25;
      v28 = v26 + 8;
      v27 = *(_QWORD *)v26;
      if ((*(_QWORD *)v26 & 1) != 0)
      {
        v28 = *(_QWORD *)(v26 + 8);
        v29 = *(_QWORD *)(v26 + 16);
      }
      else
      {
        v29 = 6;
      }
      v30 = *(_DWORD *)(v12[3] + 4 * v25);
      if (v29 < v30)
        break;
LABEL_36:
      v45 = v30 == 1;
      v24 = a3;
      if (v45)
      {
        v47 = (char *)a6[1];
        v46 = a6[2];
        if ((unint64_t)v47 >= v46)
        {
          v48 = (char *)*a6;
          v49 = (uint64_t)&v47[-*a6];
          v50 = v49 >> 2;
          v51 = (v49 >> 2) + 1;
          if (v51 >> 62)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v52 = v46 - (_QWORD)v48;
          if (v52 >> 1 > v51)
            v51 = v52 >> 1;
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL)
            v53 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v53 = v51;
          if (v53)
          {
            if (v53 >> 62)
              goto LABEL_116;
            v54 = operator new(4 * v53);
            v12 = v121;
            v55 = &v54[4 * v50];
            *v55 = v25;
            v56 = (uint64_t)(v55 + 1);
            if (v47 == v48)
              goto LABEL_57;
LABEL_51:
            v57 = v47 - 4 - v48;
            if (v57 < 0x2C)
              goto LABEL_121;
            if ((unint64_t)(v47 - &v54[v49]) < 0x20)
              goto LABEL_121;
            v58 = (v57 >> 2) + 1;
            v59 = 4 * (v58 & 0x7FFFFFFFFFFFFFF8);
            v60 = &v47[-v59];
            v55 = (_DWORD *)((char *)v55 - v59);
            v61 = &v54[4 * v50 - 16];
            v62 = v47 - 16;
            v63 = v58 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v64 = *(_OWORD *)v62;
              *(v61 - 1) = *((_OWORD *)v62 - 1);
              *v61 = v64;
              v61 -= 2;
              v62 -= 32;
              v63 -= 8;
            }
            while (v63);
            v47 = v60;
            if (v58 != (v58 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_121:
              do
              {
                v65 = *((_DWORD *)v47 - 1);
                v47 -= 4;
                *--v55 = v65;
              }
              while (v47 != v48);
            }
          }
          else
          {
            v54 = 0;
            v55 = (_DWORD *)(4 * v50);
            *(_DWORD *)(4 * v50) = v25;
            v56 = 4 * v50 + 4;
            if (v47 != v48)
              goto LABEL_51;
          }
LABEL_57:
          *a6 = v55;
          a6[1] = v56;
          a6[2] = &v54[4 * v53];
          if (v48)
          {
            operator delete(v48);
            v12 = v121;
          }
          v24 = a3;
          a6[1] = v56;
          goto LABEL_13;
        }
        *(_DWORD *)v47 = v25;
        a6[1] = v47 + 4;
      }
LABEL_13:
      if (++v25 == v11)
        goto LABEL_60;
    }
    v31 = 2 * v29;
    if (v31 <= v30)
      v32 = v30;
    else
      v32 = v31;
    if (v32 >> 62)
      goto LABEL_116;
    v33 = (char *)operator new(4 * v32);
    v34 = v33;
    v12 = v121;
    if (v27 >= 2)
    {
      v35 = 0;
      v36 = v27 >> 1;
      if (v27 < 0x10 || (unint64_t)&v33[-v28] < 0x20)
      {
        v37 = (int *)v28;
      }
      else
      {
        v35 = v36 & 0x7FFFFFFFFFFFFFF8;
        v37 = (int *)(v28 + 4 * (v36 & 0x7FFFFFFFFFFFFFF8));
        v38 = v33 + 16;
        v39 = (__int128 *)(v28 + 16);
        v40 = v36 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v41 = *v39;
          *(v38 - 1) = *(v39 - 1);
          *v38 = v41;
          v38 += 2;
          v39 += 2;
          v40 -= 8;
        }
        while (v40);
        if (v36 == v35)
          goto LABEL_33;
      }
      v42 = v36 - v35;
      v43 = &v33[4 * v35];
      do
      {
        v44 = *v37++;
        *(_DWORD *)v43 = v44;
        v43 += 4;
        --v42;
      }
      while (v42);
    }
LABEL_33:
    if ((v27 & 1) != 0)
    {
      operator delete(*(void **)(v26 + 8));
      v12 = v121;
      v27 = *(_QWORD *)v26;
    }
    *(_QWORD *)(v26 + 8) = v34;
    *(_QWORD *)(v26 + 16) = v32;
    *(_QWORD *)v26 = v27 | 1;
    v30 = *(_DWORD *)(v12[3] + 4 * v25);
    goto LABEL_36;
  }
LABEL_60:
  v66 = (int)v10 < 1;
  v68 = v10;
  v67 = v120;
  if (!v66)
  {
    for (i = 0; i != v68; ++i)
    {
      if (*(_DWORD *)(*v67 + 4 * i) != -1)
        continue;
      v70 = *(int *)(*(_QWORD *)a2[1] + 4 * i);
      v71 = *((_QWORD *)*a2 + 7);
      v72 = *(_QWORD *)(v71 + 8 * v70);
      v73 = *(_QWORD *)(v71 + (((v70 << 32) + 0x100000000) >> 29));
      v74 = v73 - v72;
      if (v73 <= v72)
      {
        *(_DWORD *)(v12[6] + 4 * i) = 0;
        v68 = v119;
        v67 = v120;
        continue;
      }
      v75 = 0;
      v76 = 0;
      v77 = *((_QWORD *)*a2 + 4) + 4 * v72;
      v78 = a3;
      do
      {
        v79 = *(int *)(v77 + 4 * v76);
        if (*(_DWORD *)(*v78 + 4 * v79) == -1)
        {
          v80 = *v12 + 32 * v79;
          v81 = v80 + 8;
          v82 = *(_QWORD *)v80;
          if ((*(_QWORD *)v80 & 1) != 0)
          {
            v81 = *(_QWORD *)(v80 + 8);
            v83 = *(_QWORD *)(v80 + 16);
            v84 = v82 >> 1;
            if (v82 >> 1 == v83)
              goto LABEL_75;
          }
          else
          {
            v83 = 6;
            v84 = v82 >> 1;
            if (v82 >> 1 == 6)
            {
LABEL_75:
              if (((v83 >> 61) & 3) != 0)
                goto LABEL_116;
              v85 = (char *)operator new(8 * v83);
              v86 = v85;
              *(_DWORD *)&v85[4 * v83] = i;
              if (v82 >= 2)
              {
                v87 = 0;
                if (v83 < 8 || (unint64_t)&v85[-v81] < 0x20)
                {
                  v88 = (int *)v81;
                }
                else
                {
                  v87 = v83 & 0xFFFFFFFFFFFFFFF8;
                  v88 = (int *)(v81 + 4 * (v83 & 0xFFFFFFFFFFFFFFF8));
                  v89 = v85 + 16;
                  v90 = (__int128 *)(v81 + 16);
                  v91 = v83 & 0xFFFFFFFFFFFFFFF8;
                  do
                  {
                    v92 = *v90;
                    *(v89 - 1) = *(v90 - 1);
                    *v89 = v92;
                    v89 += 2;
                    v90 += 2;
                    v91 -= 8;
                  }
                  while (v91);
                  if (v83 == v87)
                    goto LABEL_86;
                }
                v93 = v83 - v87;
                v94 = &v85[4 * v87];
                do
                {
                  v95 = *v88++;
                  *(_DWORD *)v94 = v95;
                  v94 += 4;
                  --v93;
                }
                while (v93);
              }
LABEL_86:
              if ((v82 & 1) != 0)
              {
                operator delete(*(void **)(v80 + 8));
                v82 = *(_QWORD *)v80;
              }
              *(_QWORD *)(v80 + 8) = v86;
              *(_QWORD *)(v80 + 16) = 2 * v83;
              v82 |= 1uLL;
              v12 = v121;
              v78 = a3;
LABEL_68:
              ++v75;
              *(_QWORD *)v80 = v82 + 2;
              goto LABEL_69;
            }
          }
          *(_DWORD *)(v81 + 4 * v84) = i;
          goto LABEL_68;
        }
LABEL_69:
        ++v76;
      }
      while (v76 != v74);
      *(_DWORD *)(v12[6] + 4 * i) = v75;
      v45 = v75 == 1;
      v68 = v119;
      v67 = v120;
      if (v45)
      {
        v97 = (char *)v117[1];
        v96 = v117[2];
        if ((unint64_t)v97 < v96)
        {
          *(_DWORD *)v97 = i;
          v98 = (uint64_t)(v97 + 4);
          v99 = v117;
LABEL_114:
          v99[1] = v98;
          continue;
        }
        v100 = (char *)*v117;
        v101 = (uint64_t)&v97[-*v117];
        v102 = v101 >> 2;
        v103 = (v101 >> 2) + 1;
        if (v103 >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v104 = v96 - (_QWORD)v100;
        if (v104 >> 1 > v103)
          v103 = v104 >> 1;
        if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFFCLL)
          v105 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v105 = v103;
        if (!v105)
        {
          v106 = 0;
          v107 = (_DWORD *)(4 * v102);
          *(_DWORD *)(4 * v102) = i;
          v98 = 4 * v102 + 4;
          if (v97 == v100)
          {
LABEL_110:
            *v117 = v107;
            v117[1] = v98;
            v117[2] = &v106[4 * v105];
            if (v100)
            {
              operator delete(v100);
              v12 = v121;
            }
            v99 = v117;
            goto LABEL_114;
          }
LABEL_104:
          v108 = v97 - 4 - v100;
          if (v108 < 0x2C)
            goto LABEL_122;
          if ((unint64_t)(v97 - &v106[v101]) < 0x20)
            goto LABEL_122;
          v109 = (v108 >> 2) + 1;
          v110 = 4 * (v109 & 0x7FFFFFFFFFFFFFF8);
          v111 = &v97[-v110];
          v107 = (_DWORD *)((char *)v107 - v110);
          v112 = &v106[4 * v102 - 16];
          v113 = v97 - 16;
          v114 = v109 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v115 = *(_OWORD *)v113;
            *(v112 - 1) = *((_OWORD *)v113 - 1);
            *v112 = v115;
            v112 -= 2;
            v113 -= 32;
            v114 -= 8;
          }
          while (v114);
          v97 = v111;
          if (v109 != (v109 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_122:
            do
            {
              v116 = *((_DWORD *)v97 - 1);
              v97 -= 4;
              *--v107 = v116;
            }
            while (v97 != v100);
          }
          goto LABEL_110;
        }
        if (!(v105 >> 62))
        {
          v106 = operator new(4 * v105);
          v12 = v121;
          v107 = &v106[4 * v102];
          *v107 = i;
          v98 = (uint64_t)(v107 + 1);
          if (v97 == v100)
            goto LABEL_110;
          goto LABEL_104;
        }
LABEL_116:
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
    }
  }
}

uint64_t operations_research::glop::Markowitz::FindPivot(uint64_t a1, _QWORD *a2, _QWORD *a3, _DWORD *a4, int *a5, double *a6)
{
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  _QWORD *v21;
  int *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void **v33;
  double v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  unint64_t v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _BYTE *v54;
  int *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  _OWORD *v60;
  int *v61;
  uint64_t v62;
  __int128 v63;
  int v64;
  unint64_t v65;
  int v66;
  void **v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  double *v72;
  double v73;
  double v74;
  double v75;
  int *v76;
  double v77;
  double v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int *v88;
  uint64_t *i;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void **v97;
  uint64_t v98;
  double *v99;
  uint64_t v100;
  _DWORD *v101;

  v12 = *(_QWORD *)(a1 + 1496);
  v13 = *(_QWORD *)(a1 + 1504);
  while (v12 != v13)
  {
    v15 = *(_DWORD *)(v13 - 4);
    v13 -= 4;
    v14 = v15;
    *(_QWORD *)(a1 + 1504) = v13;
    if (*(_DWORD *)(*(_QWORD *)(a1 + 1280) + 4 * v15) == 1)
    {
      if (*(_BYTE *)(a1 + 1464))
      {
        *a5 = v14;
        v82 = *(uint64_t **)(a1 + 400);
        v83 = *v82;
        v84 = *(int *)(*(_QWORD *)v82[1] + 4 * v14);
        v85 = *(_QWORD *)(*v82 + 56);
        v86 = *(_QWORD *)(v85 + 8 * v84);
        v87 = *(_QWORD *)(v85 + (((v84 << 32) + 0x100000000) >> 29)) - v86;
        if (v87 < 1)
          return 0;
        v88 = (int *)(*(_QWORD *)(v83 + 32) + 4 * v86);
        for (i = (uint64_t *)(*(_QWORD *)(v83 + 8) + 8 * v86); ; ++i)
        {
          v91 = *v88++;
          v90 = v91;
          if (*(_DWORD *)(*a2 + 4 * v91) == -1)
            break;
          if (!--v87)
            return 0;
        }
        *a4 = v90;
        goto LABEL_88;
      }
      v16 = operations_research::glop::Markowitz::ComputeColumn((_QWORD *)a1, a2, v14);
      if (v16[1])
      {
        *a5 = v14;
        i = (uint64_t *)v16[4];
        *a4 = *(_DWORD *)v16[3];
LABEL_88:
        v30 = *i;
LABEL_89:
        v35 = 0;
        *(_QWORD *)a6 = v30;
        return v35;
      }
      v12 = *(_QWORD *)(a1 + 1496);
      v13 = *(_QWORD *)(a1 + 1504);
    }
  }
  *(_BYTE *)(a1 + 1464) = 0;
LABEL_8:
  v17 = *(_QWORD *)(a1 + 1520);
  v18 = *(_QWORD *)(a1 + 1528);
LABEL_9:
  while (v17 != v18)
  {
    v20 = *(_DWORD *)(v18 - 4);
    v18 -= 4;
    v19 = v20;
    *(_QWORD *)(a1 + 1528) = v18;
    if (*(_DWORD *)(*a2 + 4 * v20) == -1 && *(_DWORD *)(*(_QWORD *)(a1 + 1256) + 4 * v19) == 1)
    {
      v21 = (_QWORD *)(*(_QWORD *)(a1 + 1232) + 32 * v19);
      v24 = *v21;
      v22 = (int *)(v21 + 1);
      v23 = v24;
      if ((v24 & 1) != 0)
        v22 = *(int **)v22;
      if (v23 >= 2)
      {
        v25 = 4 * (v23 >> 1);
        while (1)
        {
          v26 = *v22;
          if (((*(_QWORD *)(*(_QWORD *)(a1 + 1304) + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v26) & 1) == 0)
            break;
          ++v22;
          v25 -= 4;
          if (!v25)
            goto LABEL_9;
        }
        if ((_DWORD)v26 != -1)
        {
          v27 = operations_research::glop::Markowitz::ComputeColumn((_QWORD *)a1, a2, v26);
          v28 = v27[1];
          if (v28)
          {
            *a5 = v26;
            *a4 = v19;
            if (v28 < 1)
            {
              v30 = 0;
            }
            else
            {
              v29 = 0;
              v30 = 0;
              do
              {
                if (*(_DWORD *)(v27[3] + 4 * v29) == v19)
                  v30 = *(_QWORD *)(v27[4] + 8 * v29);
                ++v29;
              }
              while (v28 != v29);
            }
            goto LABEL_89;
          }
          goto LABEL_8;
        }
      }
    }
  }
  v101 = a4;
  if (!*(_BYTE *)(a1 + 1465))
  {
    *(_BYTE *)(a1 + 1465) = 1;
    v80 = (a3[1] - *a3) >> 2;
    operations_research::glop::ColumnPriorityQueue::Reset((std::vector<int> *)(a1 + 1384), (a2[1] - *a2) >> 2, v80);
    if ((int)v80 >= 1)
    {
      v81 = 0;
      do
      {
        if (*(_DWORD *)(*a3 + 4 * v81) == -1)
          operations_research::glop::Markowitz::UpdateDegree((uint64_t *)a1, v81, *(_DWORD *)(*(_QWORD *)(a1 + 1280) + 4 * v81));
        ++v81;
      }
      while (v80 != v81);
    }
  }
  v31 = *(_QWORD *)(a1 + 1472);
  *(_QWORD *)(a1 + 1480) = v31;
  v32 = *(int *)(a1 + 1728);
  if (!(_DWORD)v32)
    return 0x7FFFFFFFFFFFFFFFLL;
  v33 = (void **)(a1 + 1472);
  v34 = *(double *)(a1 + 1696);
  v35 = 0x7FFFFFFFFFFFFFFFLL;
  v36 = (int *)v31;
  while (1)
  {
    v37 = *(_QWORD *)(a1 + 1432);
    v38 = *(int *)(a1 + 1456);
    v39 = v38 + 1;
    v40 = (uint64_t *)(v37 + 24 * (int)v38 + 8);
    while (1)
    {
      v41 = *v40;
      if (*(v40 - 1) != *v40)
        break;
      ++v38;
      *(_DWORD *)(a1 + 1456) = v39++;
      v40 += 3;
      if (v38 == 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 1440) - v37) >> 3))
        goto LABEL_92;
    }
    v43 = *(_DWORD *)(v41 - 4);
    v42 = v43;
    *v40 = v41 - 4;
    v44 = 4 * v43;
    *(_DWORD *)(*(_QWORD *)(a1 + 1384) + v44) = -1;
    *(_DWORD *)(*(_QWORD *)(a1 + 1408) + v44) = 0;
    if (v43 == -1)
      break;
    if (*(_DWORD *)(*a3 + 4 * v42) == -1)
    {
      v45 = *(int *)(*(_QWORD *)(a1 + 1280) + 4 * v42);
      v46 = *(int **)(a1 + 1480);
      v47 = *(_QWORD *)(a1 + 1488);
      v99 = a6;
      v100 = v35;
      if ((unint64_t)v46 < v47)
      {
        *v46 = v42;
        v31 = (uint64_t)(v46 + 1);
LABEL_51:
        *(_QWORD *)(a1 + 1480) = v31;
        v66 = v45 - 1;
        if (v35 < v45 - 1)
          goto LABEL_91;
        v67 = v33;
        v68 = v32;
        v69 = operations_research::glop::Markowitz::ComputeColumn((_QWORD *)a1, a2, v42);
        v32 = v68;
        v70 = v69[1];
        if (v70 < 1)
          goto LABEL_58;
        v71 = 0;
        v72 = (double *)v69[4];
        v73 = 0.0;
        do
        {
          v74 = fabs(v72[v71]);
          if (v73 < v74)
            v73 = v74;
          ++v71;
        }
        while (v70 != v71);
        if (v73 == 0.0)
        {
LABEL_58:
          *(_QWORD *)(a1 + 1480) -= 4;
          a6 = v99;
          v35 = v100;
          v33 = v67;
        }
        else
        {
          v75 = v34 * v73;
          v76 = (int *)v69[3];
          a6 = v99;
          v35 = v100;
          v33 = v67;
          do
          {
            v77 = *v72;
            v78 = fabs(*v72);
            if (v78 >= v75)
            {
              v79 = (*(int *)(*(_QWORD *)(a1 + 1256) + 4 * *v76) - 1) * v66;
              if (v35 > v79 || v35 == v79 && v78 > fabs(*v99))
              {
                *a5 = v42;
                *v101 = *v76;
                *v99 = v77;
                v35 = v79;
              }
            }
            ++v76;
            ++v72;
            --v70;
          }
          while (v70);
        }
        goto LABEL_59;
      }
      v98 = *(int *)(*(_QWORD *)(a1 + 1280) + 4 * v42);
      v48 = (int *)*v33;
      v49 = (char *)v46 - (_BYTE *)*v33;
      v50 = v49 >> 2;
      v51 = (v49 >> 2) + 1;
      if (v51 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v52 = v47 - (_QWORD)v48;
      if (v52 >> 1 > v51)
        v51 = v52 >> 1;
      if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL)
        v51 = 0x3FFFFFFFFFFFFFFFLL;
      v96 = v51;
      v97 = v33;
      if (v51)
      {
        v94 = (char *)v46 - (_BYTE *)*v33;
        v95 = v49 >> 2;
        if (v51 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v53 = v32;
        v54 = operator new(4 * v51);
        v35 = v100;
        v32 = v53;
        v49 = v94;
        v50 = v95;
        v55 = (int *)&v54[4 * v95];
        *v55 = v42;
        v31 = (uint64_t)(v55 + 1);
        if (v46 != v48)
        {
LABEL_42:
          v56 = (char *)(v46 - 1) - (char *)v48;
          if (v56 < 0x2C)
            goto LABEL_104;
          if ((unint64_t)((char *)v46 - &v54[v49]) < 0x20)
            goto LABEL_104;
          v57 = (v56 >> 2) + 1;
          v58 = 4 * (v57 & 0x7FFFFFFFFFFFFFF8);
          v59 = &v46[v58 / 0xFFFFFFFFFFFFFFFCLL];
          v55 = (int *)((char *)v55 - v58);
          v60 = &v54[4 * v50 - 16];
          v61 = v46 - 4;
          v62 = v57 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v63 = *(_OWORD *)v61;
            *(v60 - 1) = *((_OWORD *)v61 - 1);
            *v60 = v63;
            v60 -= 2;
            v61 -= 8;
            v62 -= 8;
          }
          while (v62);
          v46 = v59;
          if (v57 != (v57 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_104:
            do
            {
              v64 = *--v46;
              *--v55 = v64;
            }
            while (v46 != v48);
          }
          *(_QWORD *)(a1 + 1472) = v55;
          *(_QWORD *)(a1 + 1480) = v31;
          *(_QWORD *)(a1 + 1488) = &v54[4 * v96];
          if (v48)
          {
LABEL_49:
            v65 = v32;
            operator delete(v48);
            v32 = v65;
            v35 = v100;
          }
LABEL_50:
          v33 = v97;
          v45 = v98;
          goto LABEL_51;
        }
      }
      else
      {
        v54 = 0;
        v55 = (int *)(4 * v50);
        *(_DWORD *)(4 * v50) = v42;
        v31 = 4 * v50 + 4;
        if (v46 != v48)
          goto LABEL_42;
      }
      *(_QWORD *)(a1 + 1472) = v55;
      *(_QWORD *)(a1 + 1480) = v31;
      *(_QWORD *)(a1 + 1488) = &v54[4 * v96];
      if (v48)
        goto LABEL_49;
      goto LABEL_50;
    }
LABEL_59:
    v31 = *(_QWORD *)(a1 + 1480);
    v36 = *(int **)(a1 + 1472);
    if (v32 <= (v31 - (uint64_t)v36) >> 2)
      goto LABEL_91;
  }
  v31 = *(_QWORD *)(a1 + 1480);
LABEL_91:
  v36 = (int *)*v33;
LABEL_92:
  if (v36 != (int *)v31)
  {
    v92 = v35;
    do
    {
      if (*v36 != *a5)
        operations_research::glop::ColumnPriorityQueue::PushOrAdjust((uint64_t *)(a1 + 1384), *v36, *(_DWORD *)(*(_QWORD *)(a1 + 1280) + 4 * *v36));
      ++v36;
    }
    while (v36 != (int *)v31);
    return v92;
  }
  return v35;
}

uint64_t operations_research::glop::MatrixNonZeroPattern::DeleteRowAndColumn(uint64_t result, int a2, int a3)
{
  *(_QWORD *)(*(_QWORD *)(result + 72) + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
  --*(_DWORD *)(result + 144);
  *(_DWORD *)(*(_QWORD *)(result + 24) + 4 * a2) = 0;
  return result;
}

void operations_research::glop::Markowitz::RemoveRowFromResidualMatrix(uint64_t a1, int a2)
{
  _QWORD *v3;
  unint64_t v4;
  int *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  int *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  int v37;
  void **v38;

  v3 = (_QWORD *)(*(_QWORD *)(a1 + 1232) + 32 * a2);
  v6 = *v3;
  v5 = (int *)(v3 + 1);
  v4 = v6;
  if (*(_BYTE *)(a1 + 1465))
  {
    if ((v4 & 1) != 0)
      v5 = *(int **)v5;
    if (v4 >= 2)
    {
      v7 = 4 * (v4 >> 1);
      do
      {
        v8 = *v5;
        if (((*(_QWORD *)(*(_QWORD *)(a1 + 1304) + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        {
          v9 = *v5;
          v10 = *(_QWORD *)(a1 + 1280);
          v11 = 4 * v8;
          v12 = *(_DWORD *)(v10 + v11) - 1;
          *(_DWORD *)(v10 + v11) = v12;
          operations_research::glop::Markowitz::UpdateDegree((uint64_t *)a1, v9, v12);
        }
        ++v5;
        v7 -= 4;
      }
      while (v7);
    }
    return;
  }
  if ((v4 & 1) != 0)
    v5 = *(int **)v5;
  if (v4 >= 2)
  {
    v13 = &v5[v4 >> 1];
    v38 = (void **)(a1 + 1496);
    while (1)
    {
      v15 = *v5;
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 1304) + (((unint64_t)v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
        goto LABEL_16;
      v16 = *(_QWORD *)(a1 + 1280);
      v17 = 4 * v15;
      v18 = *(_DWORD *)(v16 + v17) - 1;
      *(_DWORD *)(v16 + v17) = v18;
      if (v18 != 1)
        goto LABEL_16;
      v19 = *(char **)(a1 + 1504);
      v20 = *(_QWORD *)(a1 + 1512);
      if ((unint64_t)v19 >= v20)
        break;
      *(_DWORD *)v19 = v15;
      v14 = (uint64_t)(v19 + 4);
LABEL_15:
      *(_QWORD *)(a1 + 1504) = v14;
LABEL_16:
      if (++v5 == v13)
        return;
    }
    v21 = (char *)*v38;
    v22 = v19 - (_BYTE *)*v38;
    v23 = v22 >> 2;
    v24 = (v22 >> 2) + 1;
    if (v24 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v25 = v20 - (_QWORD)v21;
    if (v25 >> 1 > v24)
      v24 = v25 >> 1;
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
      v26 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v26 = v24;
    if (v26)
    {
      if (v26 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v27 = operator new(4 * v26);
      v28 = (int *)&v27[4 * v23];
      *v28 = v15;
      v14 = (uint64_t)(v28 + 1);
      if (v19 == v21)
        goto LABEL_37;
    }
    else
    {
      v27 = 0;
      v28 = (int *)(4 * v23);
      *(_DWORD *)(4 * v23) = v15;
      v14 = 4 * v23 + 4;
      if (v19 == v21)
      {
LABEL_37:
        *(_QWORD *)(a1 + 1496) = v28;
        *(_QWORD *)(a1 + 1504) = v14;
        *(_QWORD *)(a1 + 1512) = &v27[4 * v26];
        if (v21)
          operator delete(v21);
        goto LABEL_15;
      }
    }
    v29 = v19 - 4 - v21;
    if (v29 < 0x2C)
      goto LABEL_43;
    if ((unint64_t)(v19 - &v27[v22]) < 0x20)
      goto LABEL_43;
    v30 = (v29 >> 2) + 1;
    v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
    v32 = &v19[-v31];
    v28 = (int *)((char *)v28 - v31);
    v33 = &v27[4 * v23 - 16];
    v34 = v19 - 16;
    v35 = v30 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v36 = *(_OWORD *)v34;
      *(v33 - 1) = *((_OWORD *)v34 - 1);
      *v33 = v36;
      v33 -= 2;
      v34 -= 32;
      v35 -= 8;
    }
    while (v35);
    v19 = v32;
    if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_43:
      do
      {
        v37 = *((_DWORD *)v19 - 1);
        v19 -= 4;
        *--v28 = v37;
      }
      while (v19 != v21);
    }
    goto LABEL_37;
  }
}

void operations_research::glop::Markowitz::RemoveColumnFromResidualMatrix(_QWORD *a1, uint64_t a2, int a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  _DWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _OWORD *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  void **v33;

  v4 = *(_DWORD *)(a1[57] + 4 * a3);
  if (v4 != -1)
  {
    v5 = a1[63] + 48 * v4;
    v6 = *(_QWORD *)(v5 + 8);
    if (v6 < 1)
      return;
    goto LABEL_5;
  }
  v5 = (uint64_t)(a1 + 51);
  v6 = a1[52];
  if (v6 >= 1)
  {
LABEL_5:
    v7 = 0;
    v8 = *(_QWORD *)(v5 + 24);
    v32 = v8;
    v33 = (void **)(a1 + 190);
    while (1)
    {
      v10 = *(int *)(v8 + 4 * v7);
      v11 = a1[157];
      v12 = *(_DWORD *)(v11 + 4 * v10) - 1;
      *(_DWORD *)(v11 + 4 * v10) = v12;
      if (v12 != 1)
        goto LABEL_8;
      v13 = (char *)a1[191];
      v14 = a1[192];
      if ((unint64_t)v13 >= v14)
        break;
      *(_DWORD *)v13 = v10;
      v9 = (uint64_t)(v13 + 4);
LABEL_7:
      a1[191] = v9;
LABEL_8:
      if (++v7 == v6)
        return;
    }
    v15 = (char *)*v33;
    v16 = v13 - (_BYTE *)*v33;
    v17 = v16 >> 2;
    v18 = (v16 >> 2) + 1;
    if (v18 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v19 = v14 - (_QWORD)v15;
    if (v19 >> 1 > v18)
      v18 = v19 >> 1;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
      v20 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v21 = operator new(4 * v20);
      v22 = &v21[4 * v17];
      *v22 = v10;
      v9 = (uint64_t)(v22 + 1);
      if (v13 == v15)
        goto LABEL_28;
    }
    else
    {
      v21 = 0;
      v22 = (_DWORD *)(4 * v17);
      *(_DWORD *)(4 * v17) = v10;
      v9 = 4 * v17 + 4;
      if (v13 == v15)
      {
LABEL_28:
        a1[190] = v22;
        a1[191] = v9;
        a1[192] = &v21[4 * v20];
        if (v15)
          operator delete(v15);
        v8 = v32;
        goto LABEL_7;
      }
    }
    v23 = v13 - 4 - v15;
    if (v23 < 0x2C)
      goto LABEL_36;
    if ((unint64_t)(v13 - &v21[v16]) < 0x20)
      goto LABEL_36;
    v24 = (v23 >> 2) + 1;
    v25 = 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
    v26 = &v13[-v25];
    v22 = (_DWORD *)((char *)v22 - v25);
    v27 = &v21[4 * v17 - 16];
    v28 = v13 - 16;
    v29 = v24 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v30 = *(_OWORD *)v28;
      *(v27 - 1) = *((_OWORD *)v28 - 1);
      *v27 = v30;
      v27 -= 2;
      v28 -= 32;
      v29 -= 8;
    }
    while (v29);
    v13 = v26;
    if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_36:
      do
      {
        v31 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *--v22 = v31;
      }
      while (v13 != v15);
    }
    goto LABEL_28;
  }
}

void operations_research::glop::Markowitz::UpdateResidualMatrix(uint64_t *a1, int a2, uint64_t a3)
{
  int v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  int *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v5 = *(_DWORD *)(a1[57] + 4 * (int)a3);
  if (v5 == -1)
    v6 = a1 + 51;
  else
    v6 = (_QWORD *)(a1[63] + 48 * v5);
  v7 = a3;
  operations_research::glop::MatrixNonZeroPattern::Update((uint64_t)(a1 + 154), a2, a3, v6);
  v9 = (_QWORD *)(a1[154] + 32 * a2);
  v12 = *v9;
  v11 = (int *)(v9 + 1);
  v10 = v12;
  if ((v12 & 1) != 0)
    v11 = *(int **)v11;
  if (v10 >= 2)
  {
    v13 = 4 * (v10 >> 1);
    do
    {
      v14 = *v11++;
      operations_research::glop::Markowitz::UpdateDegree(a1, v14, *(_DWORD *)(a1[160] + 4 * v14));
      *(_QWORD *)(a1[151] + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v13 -= 4;
    }
    while (v13);
  }
  operations_research::glop::Markowitz::RemoveColumnFromResidualMatrix(a1, v8, v7);
}

void operations_research::glop::SparseMatrixWithReusableColumnMemory::ClearAndReleaseColumn(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  _DWORD *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _DWORD *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  uint64_t v25;

  v3 = a2;
  v4 = a1[6];
  v6 = (char *)a1[10];
  v5 = a1[11];
  v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    v9 = (char *)a1[9];
    v10 = (v6 - v9) >> 2;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = v5 - (_QWORD)v9;
    if (v12 >> 1 > v11)
      v11 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v14 = operator new(4 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v10];
    v16 = &v14[4 * v13];
    *v15 = *(_DWORD *)(v4 + 4 * v3);
    v8 = v15 + 1;
    if (v6 != v9)
    {
      v17 = v6 - v9 - 4;
      if (v17 < 0x2C)
        goto LABEL_27;
      if ((unint64_t)(v9 - v14) < 0x20)
        goto LABEL_27;
      v18 = (v17 >> 2) + 1;
      v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
      v7 = &v6[-v19];
      v15 = (_DWORD *)((char *)v15 - v19);
      v20 = &v14[4 * v10 - 16];
      v21 = v6 - 16;
      v22 = v18 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 8;
      }
      while (v22);
      if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_27:
        do
        {
          v24 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *--v15 = v24;
        }
        while (v7 != v9);
      }
    }
    a1[9] = v15;
    a1[10] = v8;
    a1[11] = v16;
    if (v9)
    {
      operator delete(v9);
      v4 = a1[6];
    }
  }
  else
  {
    *(_DWORD *)v6 = *(_DWORD *)(v4 + 4 * a2);
    v8 = v6 + 4;
  }
  a1[10] = v8;
  v25 = a1[12] + 48 * *(int *)(v4 + 4 * v3);
  *(_QWORD *)(v25 + 8) = 0;
  *(_BYTE *)(v25 + 40) = 0;
  *(_DWORD *)(v4 + 4 * v3) = -1;
}

void operations_research::glop::Markowitz::ComputeLU(operations_research::glop::TriangularMatrix *a1@<X4>, uint64_t a2@<X0>, uint64_t a3@<X1>, std::vector<int> *a4@<X2>, std::vector<int> *a5@<X3>, operations_research::glop::TriangularMatrix *a6@<X5>, uint64_t a7@<X8>)
{
  int *v14;

  v14 = (int *)(a2 + 648);
  operations_research::glop::TriangularMatrix::Swap((int *)(a2 + 648), a1);
  operations_research::glop::TriangularMatrix::Swap((int *)(a2 + 928), a6);
  operations_research::glop::Markowitz::ComputeRowAndColumnPermutation(a2, a3, a4, a5, a7);
  if (!*(_DWORD *)a7)
  {
    if (*(char *)(a7 + 31) < 0)
      operator delete(*(void **)(a7 + 8));
    operations_research::glop::TriangularMatrix::ApplyRowPermutationToNonDiagonalEntries((uint64_t)v14, (uint64_t *)a4);
    operations_research::glop::TriangularMatrix::ApplyRowPermutationToNonDiagonalEntries(a2 + 928, (uint64_t *)a4);
    operations_research::glop::TriangularMatrix::Swap(v14, a1);
    operations_research::glop::TriangularMatrix::Swap((int *)(a2 + 928), a6);
    operations_research::glop::Status::Status(a7);
  }
}

_QWORD *operations_research::glop::Markowitz::ComputeColumn(_QWORD *a1, _QWORD *a2, int a3)
{
  char v3;
  _QWORD *v6;
  unint64_t v8;
  int v9;
  uint64_t v10;
  _BOOL4 v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD **v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  int v54;
  _QWORD *v55;
  uint64_t v56[3];

  v3 = a3;
  v6 = a1 + 51;
  v8 = a3;
  v9 = *(_DWORD *)(a1[57] + 4 * a3);
  v10 = (uint64_t)v6;
  if (v9 != -1)
    v10 = a1[63] + 48 * v9;
  if (*(_QWORD *)(v10 + 8))
  {
    v11 = 0;
  }
  else
  {
    v12 = *(_DWORD *)(a1[72] + 4 * a3);
    if (v12 == -1)
      v13 = (uint64_t)(a1 + 66);
    else
      v13 = a1[78] + 48 * v12;
    v11 = *(_QWORD *)(v13 + 8) == 0;
  }
  v14 = (_QWORD *)operations_research::glop::SparseMatrixWithReusableColumnMemory::mutable_column(v6, a3);
  v15 = v14;
  if ((*(_QWORD *)(a1[151] + 8 * (v8 >> 6)) & (1 << v3)) == 0)
  {
    if (v14[1] == *(_DWORD *)(a1[160] + 4 * v8))
      return v15;
    v54 = a3;
    v55 = a2;
    if (!v11)
      goto LABEL_33;
    v24 = *(int *)(**(_QWORD **)(a1[50] + 8) + 4 * v8);
    v25 = *(_QWORD *)(*(_QWORD *)a1[50] + 56);
    v26 = *(_QWORD *)(v25 + (((v24 << 32) + 0x100000000) >> 29)) - *(_QWORD *)(v25 + 8 * v24);
    if (v14[2] < v26)
    {
      v27 = (v26 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v28 = (char *)operator new[]();
      v29 = v28;
      v30 = &v28[4 * v27];
      v31 = v15[1];
      if (v31 >= 1)
      {
        memmove(v28, (const void *)v15[3], 4 * v31);
        memmove(v30, (const void *)v15[4], 8 * v31);
      }
      v32 = *v15;
      *v15 = v29;
      v15[3] = v29;
      v15[4] = v30;
      v15[2] = v27;
      if (v32)
        MEMORY[0x22E31DF60](v32, 0x1000C8077774924);
    }
    v33 = (uint64_t *)a1[50];
    v34 = *v33;
    v35 = *(int *)(*(_QWORD *)v33[1] + 4 * v8);
    v36 = *(_QWORD *)(*v33 + 56);
    v37 = *(_QWORD *)(v36 + 8 * v35);
    v38 = *(_QWORD *)(v36 + (((v35 << 32) + 0x100000000) >> 29)) - v37;
    if (v38 < 1)
    {
LABEL_33:
      v52 = operations_research::glop::SparseMatrixWithReusableColumnMemory::mutable_column(a1 + 66, v54);
      operations_research::glop::SparseVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::SparseColumnEntry>>::MoveTaggedEntriesTo(v15, v55, v52);
      return v15;
    }
    v39 = (int *)(*(_QWORD *)(v34 + 32) + 4 * v37);
    v40 = (uint64_t *)(*(_QWORD *)(v34 + 8) + 8 * v37);
    v41 = v15[1];
    while (1)
    {
      v43 = *v39++;
      v42 = v43;
      v44 = *v40;
      if (v41 == v15[2])
      {
        if (!v41)
        {
          v45 = 4;
LABEL_27:
          v46 = (v45 + 3) & 0xFFFFFFFFFFFFFFFCLL;
          v47 = (char *)operator new[]();
          v48 = v47;
          v49 = &v47[4 * v46];
          v41 = v15[1];
          if (v41 >= 1)
          {
            memmove(v47, (const void *)v15[3], 4 * v41);
            memmove(v49, (const void *)v15[4], 8 * v41);
          }
          v50 = *v15;
          *v15 = v48;
          v15[3] = v48;
          v15[4] = v49;
          v15[2] = v46;
          if (v50)
          {
            MEMORY[0x22E31DF60](v50, 0x1000C8077774924);
            v41 = v15[1];
          }
          goto LABEL_21;
        }
        v45 = 2 * v41;
        if (v41 < 2 * v41)
          goto LABEL_27;
      }
LABEL_21:
      v15[1] = v41 + 1;
      *(_DWORD *)(v15[3] + 4 * v41) = v42;
      *(_QWORD *)(v15[4] + 8 * v41) = v44;
      *((_BYTE *)v15 + 40) = 1;
      ++v40;
      ++v41;
      if (!--v38)
        goto LABEL_33;
    }
  }
  if (v11)
  {
    v16 = (_QWORD **)a1[50];
    v17 = *v16;
    v18 = *(int *)(*v16[1] + 4 * v8);
    v19 = v17[7];
    v20 = *(_QWORD *)(v19 + 8 * v18);
    v21 = *(_QWORD *)(v19 + (((v18 << 32) + 0x100000000) >> 29)) - v20;
    v22 = v17[4] + 4 * v20;
    v23 = v17[1] + 8 * v20;
  }
  else
  {
    v21 = v14[1];
    v22 = v14[3];
    v23 = v14[4];
  }
  v56[0] = v21;
  v56[1] = v22;
  v56[2] = v23;
  v51 = (uint64_t *)operations_research::glop::SparseMatrixWithReusableColumnMemory::mutable_column(a1 + 66, a3);
  operations_research::glop::TriangularMatrix::PermutedLowerSparseSolve((uint64_t)(a1 + 81), v56, a2, v15, v51);
  *(_QWORD *)(a1[151] + 8 * (v8 >> 6)) &= ~(1 << v3);
  return v15;
}

uint64_t operations_research::glop::SparseMatrixWithReusableColumnMemory::mutable_column(_QWORD *a1, int a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  char *v12;
  uint64_t v13;
  _OWORD v15[3];

  v3 = a1[6];
  LODWORD(v4) = *(_DWORD *)(v3 + 4 * a2);
  if ((_DWORD)v4 == -1)
  {
    v6 = a1[10];
    if (a1[9] == v6)
    {
      v8 = a1[12];
      v9 = a1[13];
      v7 = (void **)(a1 + 12);
      memset(v15, 0, 41);
      if (v9 >= a1[14])
      {
        v12 = std::vector<operations_research::glop::SparseColumn>::__push_back_slow_path<operations_research::glop::SparseColumn>(v7, (uint64_t *)v15);
        v13 = *(_QWORD *)&v15[0];
        a1[13] = v12;
        *(_QWORD *)&v15[0] = 0;
        if (v13)
          MEMORY[0x22E31DF60](v13, 0x1000C8077774924);
      }
      else
      {
        *(_QWORD *)v9 = 0;
        v10 = *(_OWORD *)((char *)v15 + 8);
        v11 = *(_OWORD *)((char *)&v15[1] + 8);
        *(_BYTE *)(v9 + 40) = BYTE8(v15[2]);
        *(_OWORD *)(v9 + 24) = v11;
        *(_OWORD *)(v9 + 8) = v10;
        a1[13] = v9 + 48;
      }
      v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v8) >> 4);
      v3 = a1[6];
    }
    else
    {
      LODWORD(v4) = *(_DWORD *)(v6 - 4);
      a1[10] = v6 - 4;
    }
    *(_DWORD *)(v3 + 4 * a2) = v4;
  }
  return a1[12] + 48 * (int)v4;
}

void sub_22DA04244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x22E31DF60](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

_QWORD *operations_research::glop::SparseVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::SparseColumnEntry>>::MoveTaggedEntriesTo(_QWORD *result, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  _QWORD *v26;

  v3 = result[1];
  if (v3 < 1)
    return result;
  v5 = a2;
  v6 = result;
  v7 = 0;
  while (1)
  {
    v8 = *(int *)(result[3] + 4 * v7);
    if ((*(_DWORD *)(*a2 + 4 * v8) & 0x80000000) == 0)
      break;
    if (v3 == ++v7)
      return result;
  }
  v9 = *(_QWORD *)(result[4] + 8 * v7);
  v10 = *(_QWORD *)(a3 + 8);
  if (v10 == *(_QWORD *)(a3 + 16))
  {
    if (v10)
    {
      v11 = 2 * v10;
      if (v10 >= 2 * v10)
        goto LABEL_15;
    }
    else
    {
      v11 = 4;
    }
    v12 = (v11 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v13 = (char *)operator new[]();
    v14 = v13;
    v15 = &v13[4 * v12];
    v10 = *(_QWORD *)(a3 + 8);
    if (v10 >= 1)
    {
      memmove(v13, *(const void **)(a3 + 24), 4 * v10);
      memmove(v15, *(const void **)(a3 + 32), 8 * v10);
    }
    result = *(_QWORD **)a3;
    *(_QWORD *)a3 = v14;
    *(_QWORD *)(a3 + 24) = v14;
    *(_QWORD *)(a3 + 32) = v15;
    *(_QWORD *)(a3 + 16) = v12;
    if (result)
    {
      result = (_QWORD *)MEMORY[0x22E31DF60](result, 0x1000C8077774924);
      v10 = *(_QWORD *)(a3 + 8);
    }
  }
LABEL_15:
  v16 = v10 + 1;
  *(_QWORD *)(a3 + 8) = v10 + 1;
  v17 = *(char **)(a3 + 24);
  v18 = *(char **)(a3 + 32);
  *(_DWORD *)&v17[4 * v10] = v8;
  *(_QWORD *)&v18[8 * v10] = v9;
  v19 = v7 + 1;
  if (v7 + 1 < v3)
  {
    v26 = v5;
    do
    {
      while (1)
      {
        v20 = v6[3];
        v21 = *(int *)(v20 + 4 * v19);
        if ((*(_DWORD *)(*v5 + 4 * v21) & 0x80000000) == 0)
          break;
        *(_DWORD *)(v20 + 4 * v7) = v21;
        *(_QWORD *)(v6[4] + 8 * v7++) = *(_QWORD *)(v6[4] + 8 * v19);
        if (v3 == ++v19)
          goto LABEL_31;
      }
      v22 = *(_QWORD *)(v6[4] + 8 * v19);
      if (v16 == *(_QWORD *)(a3 + 16))
      {
        if (!v16)
        {
          v23 = 4;
LABEL_27:
          v24 = (v23 + 3) & 0xFFFFFFFFFFFFFFFCLL;
          v25 = (char *)operator new[]();
          v17 = v25;
          v18 = &v25[4 * v24];
          v16 = *(_QWORD *)(a3 + 8);
          if (v16 >= 1)
          {
            memmove(v25, *(const void **)(a3 + 24), 4 * v16);
            memmove(v18, *(const void **)(a3 + 32), 8 * v16);
          }
          result = *(_QWORD **)a3;
          *(_QWORD *)a3 = v17;
          *(_QWORD *)(a3 + 24) = v17;
          *(_QWORD *)(a3 + 32) = v18;
          *(_QWORD *)(a3 + 16) = v24;
          if (result)
          {
            result = (_QWORD *)MEMORY[0x22E31DF60](result, 0x1000C8077774924);
            v16 = *(_QWORD *)(a3 + 8);
            v17 = *(char **)(a3 + 24);
            v18 = *(char **)(a3 + 32);
          }
          v5 = v26;
          goto LABEL_18;
        }
        v23 = 2 * v16;
        if (v16 < 2 * v16)
          goto LABEL_27;
      }
LABEL_18:
      *(_DWORD *)&v17[4 * v16] = v21;
      *(_QWORD *)&v18[8 * v16++] = v22;
      *(_QWORD *)(a3 + 8) = v16;
      ++v19;
    }
    while (v3 != v19);
  }
LABEL_31:
  v6[1] = v7;
  *(_BYTE *)(a3 + 40) = 1;
  return result;
}

void operations_research::glop::ColumnPriorityQueue::Reset(std::vector<int> *this, int a2, int a3)
{
  std::vector<int> *v6;
  std::vector<int> *v7;
  int *begin;
  std::vector<int>::pointer end;
  std::vector<int>::pointer v10;
  void *v11;
  void *v12;
  unint64_t v13;
  std::vector<int>::pointer v14;
  std::vector<int>::pointer v15;
  unint64_t v16;
  int *v17;
  std::vector<int>::pointer v18;
  void *v19;
  void *v20;
  std::vector<int>::value_type __u;
  std::vector<int>::value_type v22;

  v6 = this + 1;
  this[1].__end_ = this[1].__begin_;
  this->__end_ = this->__begin_;
  v7 = this + 2;
  begin = this[2].__begin_;
  end = this[2].__end_;
  if (end != begin)
  {
    v10 = this[2].__end_;
    do
    {
      v12 = (void *)*((_QWORD *)v10 - 3);
      v10 -= 6;
      v11 = v12;
      if (v12)
      {
        *((_QWORD *)end - 2) = v11;
        operator delete(v11);
      }
      end = v10;
    }
    while (v10 != begin);
  }
  this[2].__end_ = begin;
  __u = 0;
  std::vector<int>::assign(v6, a3, &__u);
  v22 = -1;
  std::vector<int>::assign(this, a3, &v22);
  v13 = a2 + 1;
  v15 = this[2].__begin_;
  v14 = this[2].__end_;
  v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v14 - (char *)v15) >> 3);
  if (v13 <= v16)
  {
    if (v13 < v16)
    {
      v17 = &v15[6 * (int)v13];
      if (v14 != v17)
      {
        v18 = this[2].__end_;
        do
        {
          v20 = (void *)*((_QWORD *)v18 - 3);
          v18 -= 6;
          v19 = v20;
          if (v20)
          {
            *((_QWORD *)v14 - 2) = v19;
            operator delete(v19);
          }
          v14 = v18;
        }
        while (v18 != v17);
      }
      this[2].__end_ = v17;
    }
  }
  else
  {
    std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)v7, v13 - v16);
  }
  LODWORD(this[3].__begin_) = a3;
}

void operations_research::glop::Markowitz::UpdateDegree(uint64_t *a1, int a2, int a3)
{
  int *v5;
  unint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  int *v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  _OWORD *v21;
  int *v22;
  uint64_t v23;
  __int128 v24;
  int v25;

  if (a3 != 1)
  {
    operations_research::glop::ColumnPriorityQueue::PushOrAdjust(a1 + 173, a2, a3);
    return;
  }
  v5 = (int *)a1[188];
  v6 = a1[189];
  if ((unint64_t)v5 >= v6)
  {
    v8 = (int *)a1[187];
    v9 = v5 - v8;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v11 = v6 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = operator new(4 * v12);
      v14 = (int *)&v13[4 * v9];
      v15 = &v13[4 * v12];
      *v14 = a2;
      v7 = (uint64_t)(v14 + 1);
      v16 = (char *)v5 - (char *)v8;
      if (v5 == v8)
        goto LABEL_22;
    }
    else
    {
      v13 = 0;
      v14 = (int *)(4 * v9);
      v15 = 0;
      *(_DWORD *)(4 * v9) = a2;
      v7 = 4 * v9 + 4;
      v16 = (char *)v5 - (char *)v8;
      if (v5 == v8)
      {
LABEL_22:
        a1[187] = (uint64_t)v14;
        a1[188] = v7;
        a1[189] = (uint64_t)v15;
        if (v8)
          operator delete(v8);
        goto LABEL_24;
      }
    }
    v17 = v16 - 4;
    if (v17 < 0x2C)
      goto LABEL_29;
    if ((unint64_t)((char *)v8 - v13) < 0x20)
      goto LABEL_29;
    v18 = (v17 >> 2) + 1;
    v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
    v20 = &v5[v19 / 0xFFFFFFFFFFFFFFFCLL];
    v14 = (int *)((char *)v14 - v19);
    v21 = &v13[4 * v9 - 16];
    v22 = v5 - 4;
    v23 = v18 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v24 = *(_OWORD *)v22;
      *(v21 - 1) = *((_OWORD *)v22 - 1);
      *v21 = v24;
      v21 -= 2;
      v22 -= 8;
      v23 -= 8;
    }
    while (v23);
    v5 = v20;
    if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_29:
      do
      {
        v25 = *--v5;
        *--v14 = v25;
      }
      while (v5 != v8);
    }
    goto LABEL_22;
  }
  *v5 = a2;
  v7 = (uint64_t)(v5 + 1);
LABEL_24:
  a1[188] = v7;
}

void operations_research::glop::ColumnPriorityQueue::PushOrAdjust(uint64_t *a1, int a2, int a3)
{
  uint64_t v3;
  int v4;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  int *v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  _DWORD *v27;
  char *v28;
  int64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  int v38;
  int v39;

  v3 = a1[3];
  v4 = *(_DWORD *)(v3 + 4 * a2);
  if (v4 == a3)
    return;
  v8 = *a1;
  v9 = *(_DWORD *)(*a1 + 4 * a2);
  if (v9 != -1)
  {
    v10 = (_QWORD *)(a1[6] + 24 * v4);
    v11 = (int *)v10[1];
    v12 = *--v11;
    *(_DWORD *)(*v10 + 4 * v9) = v12;
    *(_DWORD *)(v8 + 4 * *v11) = v9;
    v10[1] = v11;
  }
  if (a3 < 1)
  {
    v21 = 4 * a2;
    *(_DWORD *)(v8 + v21) = -1;
    *(_DWORD *)(v3 + v21) = 0;
    return;
  }
  v13 = a1[6] + 24 * a3;
  v14 = (uint64_t *)(v13 + 8);
  v15 = *(char **)(v13 + 8);
  v16 = *(char **)v13;
  v17 = (uint64_t)&v15[-*(_QWORD *)v13];
  v18 = 4 * a2;
  *(_DWORD *)(v8 + v18) = (unint64_t)v17 >> 2;
  *(_DWORD *)(v3 + v18) = a3;
  v19 = *(_QWORD *)(v13 + 16);
  if ((unint64_t)v15 >= v19)
  {
    v22 = v17 >> 2;
    v23 = (v17 >> 2) + 1;
    if (v23 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v24 = v19 - (_QWORD)v16;
    if (v24 >> 1 > v23)
      v23 = v24 >> 1;
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
      v25 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v25 = v23;
    if (v25)
    {
      if (v25 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v26 = operator new(4 * v25);
      v22 = v17 >> 2;
      v27 = &v26[4 * (v17 >> 2)];
      v28 = &v26[4 * v25];
      *v27 = a2;
      v20 = (uint64_t)(v27 + 1);
      v29 = v15 - v16;
      if (v15 == v16)
        goto LABEL_25;
    }
    else
    {
      v26 = 0;
      v27 = (_DWORD *)(4 * v22);
      v28 = 0;
      *(_DWORD *)(4 * v22) = a2;
      v20 = 4 * v22 + 4;
      v29 = v15 - v16;
      if (v15 == v16)
      {
LABEL_25:
        *(_QWORD *)v13 = v27;
        *v14 = v20;
        *(_QWORD *)(v13 + 16) = v28;
        if (v16)
          operator delete(v16);
        goto LABEL_27;
      }
    }
    v30 = v29 - 4;
    if (v30 < 0x2C)
      goto LABEL_35;
    if ((unint64_t)(v15 - v26 - v17) < 0x20)
      goto LABEL_35;
    v31 = (v30 >> 2) + 1;
    v32 = 4 * (v31 & 0x7FFFFFFFFFFFFFF8);
    v33 = &v15[-v32];
    v27 = (_DWORD *)((char *)v27 - v32);
    v34 = &v26[4 * v22 - 16];
    v35 = v15 - 16;
    v36 = v31 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v37 = *(_OWORD *)v35;
      *(v34 - 1) = *((_OWORD *)v35 - 1);
      *v34 = v37;
      v34 -= 2;
      v35 -= 32;
      v36 -= 8;
    }
    while (v36);
    v15 = v33;
    if (v31 != (v31 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_35:
      do
      {
        v38 = *((_DWORD *)v15 - 1);
        v15 -= 4;
        *--v27 = v38;
      }
      while (v15 != v16);
    }
    goto LABEL_25;
  }
  *(_DWORD *)v15 = a2;
  v20 = (uint64_t)(v15 + 4);
LABEL_27:
  *v14 = v20;
  v39 = *((_DWORD *)a1 + 18);
  if (v39 >= a3)
    v39 = a3;
  *((_DWORD *)a1 + 18) = v39;
}

uint64_t operations_research::glop::MatrixNonZeroPattern::DecreaseColDegree(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = 4 * a2;
  result = (*(_DWORD *)(v2 + v3) - 1);
  *(_DWORD *)(v2 + v3) = result;
  return result;
}

void operations_research::glop::MatrixNonZeroPattern::Update(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v7;
  unint64_t *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int *v20;
  double *v21;
  int v22;
  int v23;
  uint64_t v24;

  v7 = *(_DWORD *)(a1 + 144);
  operations_research::glop::MatrixNonZeroPattern::RemoveDeletedColumnsFromRow((_QWORD *)a1, a2);
  v9 = (unint64_t *)(*(_QWORD *)a1 + 32 * a2);
  v12 = *v9;
  v10 = v9 + 1;
  v11 = v12;
  if ((v12 & 1) != 0)
    v10 = (_QWORD *)*v10;
  if (v11 >= 2)
  {
    v13 = v11 >> 1;
    v14 = *(_QWORD *)(a1 + 48);
    v15 = *(_QWORD *)(a1 + 96);
    v16 = 4 * v13;
    do
    {
      v17 = *(_DWORD *)v10;
      v10 = (_QWORD *)((char *)v10 + 4);
      --*(_DWORD *)(v14 + 4 * v17);
      *(_QWORD *)(v15 + (((unint64_t)v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v17);
      v16 -= 4;
    }
    while (v16);
  }
  v18 = a4[1];
  if (v18 >= 1)
  {
    v19 = v7 + 1;
    v20 = (int *)a4[3];
    v21 = (double *)a4[4];
    do
    {
      v23 = *v20++;
      v22 = v23;
      if (v23 != a2 && *v21 != 0.0)
      {
        v24 = *(int *)(*(_QWORD *)(a1 + 24) + 4 * v22);
        if ((_DWORD)v24 != v19)
        {
          if ((unint64_t)(v24 + 4) < *(_QWORD *)(*(_QWORD *)a1 + 32 * v22) >> 1)
            operations_research::glop::MatrixNonZeroPattern::RemoveDeletedColumnsFromRow((_QWORD *)a1, v22);
          operations_research::glop::MatrixNonZeroPattern::MergeInto((uint64_t *)a1, a2, v22);
        }
      }
      ++v21;
      --v18;
    }
    while (v18);
  }
}

void operations_research::glop::MatrixNonZeroPattern::Reset(uint64_t a1, uint64_t a2, int a3)
{
  std::vector<int>::pointer begin;
  uint64_t v7;
  std::vector<int> *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  std::vector<int>::size_type v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  std::vector<int>::value_type __x;
  std::vector<int>::value_type v28;

  begin = *(std::vector<int>::pointer *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = (std::vector<int> *)(a1 + 24);
  __x = 0;
  v9 = a2 << 32;
  v10 = (int)a2;
  v11 = (v7 - (uint64_t)begin) >> 2;
  v12 = (int)a2 >= v11;
  v13 = (int)a2 - v11;
  if (v13 != 0 && v12)
  {
    std::vector<int>::__append(v8, v13, &__x);
    begin = v8->__begin_;
  }
  else if (!v12)
  {
    *(_QWORD *)(a1 + 32) = &begin[v10];
  }
  bzero(begin, v9 >> 30);
  v14 = *(char **)(a1 + 48);
  v15 = *(_QWORD *)(a1 + 56);
  v28 = 0;
  v16 = (v15 - (uint64_t)v14) >> 2;
  if (a3 <= v16)
  {
    if (a3 < v16)
      *(_QWORD *)(a1 + 56) = &v14[4 * a3];
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)(a1 + 48), a3 - v16, &v28);
    v14 = *(char **)(a1 + 48);
  }
  bzero(v14, 4 * a3);
  v18 = *(_QWORD *)a1;
  v17 = *(_QWORD *)(a1 + 8);
  if (v17 != *(_QWORD *)a1)
  {
    v19 = *(_QWORD *)(a1 + 8);
    do
    {
      v20 = *(_BYTE *)(v19 - 32);
      v19 -= 32;
      if ((v20 & 1) != 0)
        operator delete(*(void **)(v17 - 24));
      v17 = v19;
    }
    while (v19 != v18);
    v17 = *(_QWORD *)a1;
  }
  *(_QWORD *)(a1 + 8) = v18;
  v21 = (v18 - v17) >> 5;
  if (v10 <= v21)
  {
    if (v10 < v21)
    {
      v22 = v17 + 32 * v10;
      if (v18 != v22)
      {
        v23 = v18;
        do
        {
          v24 = *(_BYTE *)(v23 - 32);
          v23 -= 32;
          if ((v24 & 1) != 0)
            operator delete(*(void **)(v18 - 24));
          v18 = v23;
        }
        while (v23 != v22);
      }
      *(_QWORD *)(a1 + 8) = v22;
    }
  }
  else
  {
    std::vector<absl::lts_2020_02_25::InlinedVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,6ul,std::allocator<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>::__append((uint64_t *)a1, v10 - v21);
  }
  v26 = 0;
  std::vector<BOOL>::assign((char **)(a1 + 72), a3, &v26);
  v25 = 0;
  std::vector<BOOL>::assign((char **)(a1 + 96), a3, &v25);
  *(_DWORD *)(a1 + 144) = a3;
}

void operations_research::glop::MatrixNonZeroPattern::AddEntry(_QWORD *a1, int a2, int a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  int *v12;
  _OWORD *v13;
  __int128 *v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;
  char *v18;
  int v19;

  ++*(_DWORD *)(a1[3] + 4 * a2);
  ++*(_DWORD *)(a1[6] + 4 * a3);
  v4 = *a1 + 32 * a2;
  v6 = v4 + 8;
  v5 = *(_QWORD *)v4;
  if ((*(_QWORD *)v4 & 1) != 0)
  {
    v6 = *(_QWORD *)(v4 + 8);
    v7 = *(_QWORD *)(v4 + 16);
    v8 = v5 >> 1;
    if (v5 >> 1 != v7)
      goto LABEL_3;
  }
  else
  {
    v7 = 6;
    v8 = v5 >> 1;
    if (v5 >> 1 != 6)
    {
LABEL_3:
      *(_DWORD *)(v6 + 4 * v8) = a3;
      goto LABEL_19;
    }
  }
  if (((v7 >> 61) & 3) != 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v9 = (char *)operator new(8 * v7);
  v10 = v9;
  *(_DWORD *)&v9[4 * v7] = a3;
  if (v5 >= 2)
  {
    v11 = 0;
    if (v7 < 8 || (unint64_t)&v9[-v6] < 0x20)
    {
      v12 = (int *)v6;
    }
    else
    {
      v11 = v7 & 0xFFFFFFFFFFFFFFF8;
      v12 = (int *)(v6 + 4 * (v7 & 0xFFFFFFFFFFFFFFF8));
      v13 = v9 + 16;
      v14 = (__int128 *)(v6 + 16);
      v15 = v7 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v16 = *v14;
        *(v13 - 1) = *(v14 - 1);
        *v13 = v16;
        v13 += 2;
        v14 += 2;
        v15 -= 8;
      }
      while (v15);
      if (v7 == v11)
        goto LABEL_16;
    }
    v17 = v7 - v11;
    v18 = &v9[4 * v11];
    do
    {
      v19 = *v12++;
      *(_DWORD *)v18 = v19;
      v18 += 4;
      --v17;
    }
    while (v17);
  }
LABEL_16:
  if ((v5 & 1) != 0)
  {
    operator delete(*(void **)(v4 + 8));
    v5 = *(_QWORD *)v4;
  }
  *(_QWORD *)(v4 + 8) = v10;
  *(_QWORD *)(v4 + 16) = 2 * v7;
  v5 |= 1uLL;
LABEL_19:
  *(_QWORD *)v4 = v5 + 2;
}

void operations_research::glop::MatrixNonZeroPattern::RemoveDeletedColumnsFromRow(_QWORD *a1, int a2)
{
  unint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  int *v10;
  int v11;
  int v12;
  int v13;
  char v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  _OWORD *v18;
  unint64_t v19;
  _OWORD *v20;
  unint64_t v21;
  uint64_t v22;
  int *v23;
  _OWORD *v24;
  __int128 *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  _DWORD *v32;
  int v33;

  v2 = (unint64_t *)(*a1 + 32 * a2);
  v3 = *v2 >> 1;
  v4 = *v2 & 1;
  if ((int)v3 < 1)
  {
    v13 = 0;
    goto LABEL_8;
  }
  v5 = (void **)(v2 + 1);
  v6 = a1[9];
  v7 = (*v2 >> 1);
  if (v4)
  {
    v28 = 0;
    v13 = 0;
    v29 = 4 * v7;
    do
    {
      v30 = *(_DWORD *)((char *)*v5 + v28);
      if (((*(_QWORD *)(v6 + (((unint64_t)v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v30) & 1) == 0)
        *((_DWORD *)*v5 + v13++) = v30;
      v28 += 4;
    }
    while (v29 != v28);
LABEL_8:
    v5 = (void **)(v2 + 1);
    if (v4)
    {
      v14 = 0;
      v15 = (_QWORD *)v2[1];
      v9 = v2[2];
      v16 = v13;
      if (v9 >= v13)
        goto LABEL_24;
    }
    else
    {
      v14 = 1;
      v9 = 6;
      v15 = v2 + 1;
      v16 = v13;
      if ((unint64_t)v13 <= 6)
        goto LABEL_24;
    }
LABEL_10:
    if (2 * v9 <= v16)
      v17 = v16;
    else
      v17 = 2 * v9;
    if (v17 >> 62)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v18 = operator new(4 * v17);
    v19 = v3;
    v20 = v18;
    v21 = v16 - v3;
    if (v16 == v3)
      goto LABEL_16;
LABEL_15:
    bzero((char *)v20 + 4 * v3, 4 * v21);
    goto LABEL_16;
  }
  v8 = 0;
  v9 = 6;
  v10 = (int *)(v2 + 1);
  do
  {
    v12 = *v10++;
    v11 = v12;
    if (((*(_QWORD *)(v6 + (((unint64_t)v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      *((_DWORD *)v5 + v8++) = v11;
    --v7;
  }
  while (v7);
  v4 = 0;
  v14 = 1;
  v15 = v2 + 1;
  v16 = v8;
  if ((unint64_t)v8 > 6)
    goto LABEL_10;
LABEL_24:
  if (v16 <= v3)
    goto LABEL_41;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  v20 = v15;
  v21 = v16 - v3;
  if (v16 != v3)
    goto LABEL_15;
LABEL_16:
  if (!v19)
  {
    if (!v18)
      goto LABEL_41;
    goto LABEL_38;
  }
  v22 = 0;
  if (v19 < 8 || (unint64_t)((char *)v18 - (char *)v15) < 0x20)
  {
    v23 = (int *)v15;
  }
  else
  {
    v22 = v19 & 0x7FFFFFFFFFFFFFF8;
    v23 = (int *)v15 + (v19 & 0x7FFFFFFFFFFFFFF8);
    v24 = v18 + 1;
    v25 = (__int128 *)(v15 + 2);
    v26 = v19 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v27 = *v25;
      *(v24 - 1) = *(v25 - 1);
      *v24 = v27;
      v24 += 2;
      v25 += 2;
      v26 -= 8;
    }
    while (v26);
    if (v19 == v22)
      goto LABEL_38;
  }
  v31 = v19 - v22;
  v32 = (_DWORD *)v18 + v22;
  do
  {
    v33 = *v23++;
    *v32++ = v33;
    --v31;
  }
  while (v31);
LABEL_38:
  if ((v14 & 1) == 0)
    operator delete(*v5);
  *v5 = v18;
  v2[2] = v17;
  v4 = 1;
LABEL_41:
  *v2 = v4 | (2 * v16);
}

void operations_research::glop::MatrixNonZeroPattern::MergeInto(uint64_t *a1, int a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  int *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  unint64_t v18;
  int *v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  unint64_t v30;
  int *v31;
  _OWORD *v32;
  __int128 *v33;
  unint64_t v34;
  __int128 v35;
  unint64_t v36;
  char *v37;
  int v38;
  unint64_t v39;
  int v40;

  v4 = *a1;
  v5 = *a1 + 32 * a3;
  v6 = (_QWORD *)(v5 + 8);
  v7 = *(_QWORD *)v5;
  if ((*(_QWORD *)v5 & 1) != 0)
  {
    v6 = (_QWORD *)*v6;
    if (v7 < 2)
    {
LABEL_3:
      v8 = (_QWORD *)(v4 + 32 * a2);
      v11 = *v8;
      v10 = (int *)(v8 + 1);
      v9 = v11;
      if ((v11 & 1) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if (v7 < 2)
  {
    goto LABEL_3;
  }
  v13 = v7 >> 1;
  v14 = a1[12];
  v15 = 4 * v13;
  do
  {
    v16 = *(_DWORD *)v6;
    v6 = (_QWORD *)((char *)v6 + 4);
    *(_QWORD *)(v14 + (((unint64_t)v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    v15 -= 4;
  }
  while (v15);
  v7 = *(_QWORD *)v5;
  v17 = (_QWORD *)(v4 + 32 * a2);
  v18 = *v17;
  v10 = (int *)(v17 + 1);
  v9 = v18;
  if ((v18 & 1) == 0)
  {
LABEL_4:
    v12 = v7;
    if (v9 < 2)
      goto LABEL_34;
    goto LABEL_11;
  }
LABEL_10:
  v10 = *(int **)v10;
  v12 = v7;
  if (v9 >= 2)
  {
LABEL_11:
    v39 = v7;
    v40 = a3;
    v19 = &v10[v9 >> 1];
    while (1)
    {
      while (1)
      {
        v20 = *v10;
        v21 = a1[12];
        v22 = (unint64_t)*v10 >> 6;
        v23 = *(_QWORD *)(v21 + 8 * v22);
        if (((1 << *v10) & v23) == 0)
          break;
        *(_QWORD *)(v21 + 8 * v22) = v23 & ~(1 << v20);
        if (++v10 == v19)
          goto LABEL_33;
      }
      v24 = *(_QWORD *)v5;
      if ((*(_QWORD *)v5 & 1) != 0)
      {
        v25 = *(_QWORD *)(v5 + 8);
        v26 = *(_QWORD *)(v5 + 16);
        v27 = v24 >> 1;
        if (v24 >> 1 == v26)
        {
LABEL_18:
          if (((v26 >> 61) & 3) != 0)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v28 = (char *)operator new(8 * v26);
          v29 = v28;
          *(_DWORD *)&v28[4 * v26] = v20;
          if (v24 < 2)
            goto LABEL_29;
          v30 = 0;
          if (v26 < 8 || (unint64_t)&v28[-v25] < 0x20)
          {
            v31 = (int *)v25;
          }
          else
          {
            v30 = v26 & 0xFFFFFFFFFFFFFFF8;
            v31 = (int *)(v25 + 4 * (v26 & 0xFFFFFFFFFFFFFFF8));
            v32 = v28 + 16;
            v33 = (__int128 *)(v25 + 16);
            v34 = v26 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v35 = *v33;
              *(v32 - 1) = *(v33 - 1);
              *v32 = v35;
              v32 += 2;
              v33 += 2;
              v34 -= 8;
            }
            while (v34);
            if (v26 == v30)
              goto LABEL_29;
          }
          v36 = v26 - v30;
          v37 = &v28[4 * v30];
          do
          {
            v38 = *v31++;
            *(_DWORD *)v37 = v38;
            v37 += 4;
            --v36;
          }
          while (v36);
LABEL_29:
          if ((v24 & 1) != 0)
          {
            operator delete(*(void **)(v5 + 8));
            v24 = *(_QWORD *)v5;
          }
          *(_QWORD *)(v5 + 8) = v29;
          *(_QWORD *)(v5 + 16) = 2 * v26;
          v24 |= 1uLL;
          goto LABEL_32;
        }
      }
      else
      {
        v25 = v5 + 8;
        v26 = 6;
        v27 = v24 >> 1;
        if (v24 >> 1 == 6)
          goto LABEL_18;
      }
      *(_DWORD *)(v25 + 4 * v27) = v20;
LABEL_32:
      *(_QWORD *)v5 = v24 + 2;
      ++*(_DWORD *)(a1[6] + 4 * v20);
      if (++v10 == v19)
      {
LABEL_33:
        v12 = *(_QWORD *)v5;
        v7 = v39;
        a3 = v40;
        break;
      }
    }
  }
LABEL_34:
  *(_DWORD *)(a1[3] + 4 * a3) += (v12 >> 1) - (v7 >> 1);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::glop::`anonymous namespace'::MatrixEntry *,false>(__n128 *a1, __n128 *a2, uint64_t a3, char a4, __n128 a5)
{
  __n128 *v9;
  __n128 *v10;
  __n128 *v11;
  __n128 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 *v16;
  signed __int32 v17;
  signed __int32 v18;
  signed __int32 v19;
  signed __int32 v20;
  BOOL v21;
  _BOOL4 v22;
  _BOOL4 v23;
  signed __int32 v24;
  signed __int32 v25;
  BOOL v26;
  _BOOL4 v27;
  _BOOL4 v28;
  _BOOL4 v29;
  _BOOL4 v30;
  signed __int32 v31;
  signed __int32 v32;
  _BOOL4 v33;
  __n128 *v34;
  signed __int32 v35;
  __n128 *v36;
  __n128 *v37;
  signed __int32 v38;
  signed __int32 v39;
  BOOL v40;
  BOOL v41;
  signed __int32 v42;
  _BOOL4 v43;
  _BOOL4 v44;
  __n128 v45;
  signed __int32 v46;
  _BOOL4 v47;
  __n128 v48;
  signed __int32 v49;
  _BOOL4 v50;
  signed __int32 v51;
  __n128 v52;
  signed __int32 v53;
  _BOOL4 v54;
  __n128 *v55;
  signed __int32 v56;
  __n128 *v57;
  __n128 *v58;
  signed __int32 v59;
  signed __int32 v60;
  BOOL v61;
  BOOL v62;
  signed __int32 v63;
  _BOOL4 v64;
  _BOOL4 v65;
  __n128 v66;
  signed __int32 v67;
  _BOOL4 v68;
  __n128 v69;
  __n128 v70;
  signed __int32 v71;
  _BOOL4 v72;
  signed __int32 v73;
  signed __int32 v74;
  BOOL v75;
  _BOOL4 v76;
  _BOOL4 v77;
  _BOOL4 v78;
  _BOOL4 v79;
  signed __int32 v80;
  BOOL v81;
  uint64_t v82;
  signed __int32 v83;
  BOOL v84;
  BOOL v85;
  __n128 *v86;
  __n128 *v87;
  signed __int32 v88;
  signed __int32 v89;
  _BOOL4 v90;
  _BOOL4 v91;
  signed __int32 v92;
  signed __int32 v93;
  BOOL v94;
  BOOL v95;
  __n128 *v96;
  signed __int32 v97;
  signed __int32 v98;
  BOOL v99;
  BOOL v100;
  signed __int32 v101;
  signed __int32 v102;
  _BOOL4 v103;
  _BOOL4 v104;
  BOOL v105;
  __n128 v106;
  signed __int32 v107;
  BOOL v108;
  signed __int32 v109;
  signed __int32 v110;
  BOOL v111;
  BOOL v112;
  __n128 *v113;
  signed __int32 v114;
  _BOOL4 v115;
  _BOOL4 v116;
  __n128 *v117;
  signed __int32 v118;
  signed __int32 v119;
  BOOL v120;
  BOOL v121;
  signed __int32 v122;
  signed __int32 v123;
  _BOOL4 v124;
  _BOOL4 v125;
  signed __int32 v126;
  signed __int32 v127;
  BOOL v128;
  BOOL v129;
  signed __int32 v130;
  signed __int32 v131;
  __n128 *v132;
  _BOOL4 v133;
  _BOOL4 v134;
  __n128 *v135;
  signed __int32 v136;
  signed __int32 v137;
  BOOL v138;
  __n128 *v139;
  signed __int32 v140;
  _BOOL4 v141;
  _BOOL4 v142;
  __n128 v143;
  __n128 *v144;
  __n128 *v145;
  __n128 *v146;
  signed __int32 v147;
  signed __int32 v148;
  __n128 *v149;
  signed __int32 v150;
  _BOOL4 v151;
  _BOOL4 v152;
  __n128 v153;
  signed __int32 v154;
  signed __int32 v155;
  _BOOL4 v156;
  __n128 v157;
  signed __int32 v158;
  signed __int32 v159;
  _BOOL4 v160;
  __n128 v161;
  signed __int32 v162;
  _BOOL4 v163;
  __n128 *v164;
  BOOL v165;
  char v166;
  uint64_t v167;
  __n128 *v168;
  uint64_t v169;
  __n128 *v170;
  signed __int32 v171;
  signed __int32 v172;
  _BOOL4 v173;
  unint64_t v174;
  uint64_t v175;
  char *v176;
  signed __int32 v177;
  BOOL v178;
  BOOL v179;
  int64_t v180;
  int64_t v181;
  int64_t v182;
  uint64_t v183;
  __n128 *v184;
  signed __int32 v185;
  _BOOL4 v186;
  __n128 *v187;
  signed __int32 v188;
  signed __int32 v189;
  BOOL v190;
  unint64_t v191;
  signed __int32 v192;
  signed __int32 v193;
  _BOOL4 v194;
  _BOOL4 v195;
  _BOOL4 v196;
  __n128 *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v201;
  _OWORD *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  _BOOL4 v207;
  uint64_t v208;
  unint64_t v209;
  __n128 *v210;
  signed __int32 v211;
  signed __int32 v212;
  _BOOL4 v213;
  uint64_t v214;
  _OWORD *v215;
  BOOL v216;
  __n128 v217;
  signed __int32 v218;
  _BOOL4 v219;
  __n128 *v220;
  signed __int32 v221;
  signed __int32 v222;
  _BOOL4 v223;
  unint64_t v224;
  __n128 *v225;
  signed __int32 v226;
  signed __int32 v227;
  BOOL v228;
  BOOL v229;
  signed __int32 v230;
  signed __int32 v231;
  _BOOL4 v232;
  __n128 v233;
  __n128 v234;
  __n128 v235;
  __n128 v236;
  __n128 v237;
  __n128 v238;
  __n128 v239;
  __n128 v240;
  __n128 v241;
  __n128 v242;
  __n128 v243;
  __n128 v244;
  __n128 v245;
  __n128 v246;
  __n128 v247;
  __n128 v248;
  __n128 v249;
  __n128 v250;
  __n128 v251;
  __n128 v252;
  __n128 v253;
  __n128 v254;
  __n128 v255;
  __n128 v256;
  __n128 v257;

LABEL_1:
  v9 = a2 - 1;
  v10 = a2 - 2;
  v11 = a2 - 3;
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (char *)a2 - (char *)v12;
    v14 = a2 - v12;
    switch(v14)
    {
      case 0:
      case 1:
        return;
      case 2:
        v130 = a2[-1].n128_i32[0];
        v131 = a2[-1].n128_i32[1];
        v132 = a2 - 1;
        v133 = v131 < (signed __int32)v12->n128_u32[1];
        v165 = v130 == v12->n128_u32[0];
        v134 = v130 < (signed __int32)v12->n128_u32[0];
        if (v165)
          v134 = v133;
        if (v134)
        {
          v252 = *v12;
          *v12 = *v132;
          *v132 = v252;
        }
        return;
      case 3:
        v135 = v12 + 1;
        v136 = v12[1].n128_i32[0];
        v137 = v12[1].n128_i32[1];
        v138 = v136 < (signed __int32)v12->n128_u32[0];
        if (v136 == v12->n128_u32[0])
          v138 = v137 < (signed __int32)v12->n128_u32[1];
        v140 = a2[-1].n128_i32[0];
        v139 = a2 - 1;
        v141 = (signed __int32)a2[-1].n128_u32[1] < v137;
        v165 = v140 == v136;
        v142 = v140 < v136;
        if (v165)
          v142 = v141;
        if (v138)
        {
          if (v142)
          {
            v253 = *v12;
            *v12 = *v139;
            v143 = v253;
LABEL_276:
            *v139 = v143;
            return;
          }
          v257 = *v12;
          *v12 = *v135;
          *v135 = v257;
          v230 = a2[-1].n128_i32[0];
          v231 = v12[1].n128_i32[0];
          v165 = v230 == v231;
          v232 = v230 < v231;
          if (v165)
            v232 = (signed __int32)a2[-1].n128_u32[1] < (signed __int32)v12[1].n128_u32[1];
          if (v232)
          {
            v143 = *v135;
            *v135 = *v139;
            goto LABEL_276;
          }
        }
        else if (v142)
        {
          v217 = *v135;
          *v135 = *v139;
          *v139 = v217;
          v218 = v12[1].n128_i32[0];
          v165 = v218 == v12->n128_u32[0];
          v219 = v218 < (signed __int32)v12->n128_u32[0];
          if (v165)
            v219 = (signed __int32)v12[1].n128_u32[1] < (signed __int32)v12->n128_u32[1];
          if (v219)
          {
            v256 = *v12;
            *v12 = *v135;
            *v135 = v256;
          }
        }
        return;
      case 4:
        return;
      case 5:
        v144 = v12 + 1;
        v145 = v12 + 2;
        v146 = v12 + 3;
        v147 = a2[-1].n128_i32[0];
        v148 = a2[-1].n128_i32[1];
        v149 = a2 - 1;
        v150 = v12[3].n128_i32[0];
        v151 = v148 < (signed __int32)v12[3].n128_u32[1];
        v165 = v147 == v150;
        v152 = v147 < v150;
        if (v165)
          v152 = v151;
        if (v152)
        {
          v153 = *v146;
          *v146 = *v149;
          *v149 = v153;
          v154 = v12[3].n128_i32[0];
          v155 = v12[2].n128_i32[0];
          v165 = v154 == v155;
          v156 = v154 < v155;
          if (v165)
            v156 = (signed __int32)v12[3].n128_u32[1] < (signed __int32)v12[2].n128_u32[1];
          if (v156)
          {
            v157 = *v145;
            *v145 = *v146;
            *v146 = v157;
            v158 = v12[2].n128_i32[0];
            v159 = v12[1].n128_i32[0];
            v165 = v158 == v159;
            v160 = v158 < v159;
            if (v165)
              v160 = (signed __int32)v12[2].n128_u32[1] < (signed __int32)v12[1].n128_u32[1];
            if (v160)
            {
              v161 = *v144;
              *v144 = *v145;
              *v145 = v161;
              v162 = v12[1].n128_i32[0];
              v165 = v162 == v12->n128_u32[0];
              v163 = v162 < (signed __int32)v12->n128_u32[0];
              if (v165)
                v163 = (signed __int32)v12[1].n128_u32[1] < (signed __int32)v12->n128_u32[1];
              if (v163)
              {
                v254 = *v12;
                *v12 = *v144;
                *v144 = v254;
              }
            }
          }
        }
        return;
      default:
        if (v13 > 383)
        {
          if (!a3)
          {
            if (v12 != a2)
            {
              v180 = (unint64_t)(v14 - 2) >> 1;
              v181 = v180;
              do
              {
                v182 = v181;
                if (v180 >= v181)
                {
                  v183 = (2 * v181) | 1;
                  v184 = &v12[v183];
                  if (2 * v182 + 2 >= v14)
                  {
                    v185 = v184->n128_u32[0];
                  }
                  else
                  {
                    v185 = v184[1].n128_i32[0];
                    v186 = (signed __int32)v184->n128_u32[1] < (signed __int32)v184[1].n128_u32[1];
                    if (v184->n128_u32[0] != v185)
                      v186 = (signed __int32)v184->n128_u32[0] < v185;
                    if (v186)
                    {
                      ++v184;
                      v183 = 2 * v182 + 2;
                    }
                    else
                    {
                      v185 = v184->n128_u32[0];
                    }
                  }
                  v187 = &v12[v182];
                  v188 = v187->n128_u32[0];
                  v189 = v187->n128_i32[1];
                  v165 = v185 == v187->n128_u32[0];
                  v190 = v185 < (signed __int32)v187->n128_u32[0];
                  if (v165)
                    v190 = (signed __int32)v184->n128_u32[1] < v189;
                  if (!v190)
                  {
                    v191 = v187->n128_u64[1];
                    do
                    {
                      v197 = v187;
                      v187 = v184;
                      *v197 = *v184;
                      if (v180 < v183)
                        break;
                      v198 = (2 * v183) | 1;
                      v184 = &v12[v198];
                      v183 = 2 * v183 + 2;
                      if (v183 < v14)
                      {
                        v192 = v184->n128_u32[0];
                        v193 = v184[1].n128_i32[0];
                        v194 = (signed __int32)v184->n128_u32[1] < (signed __int32)v184[1].n128_u32[1];
                        if (v184->n128_u32[0] != v193)
                          v194 = (signed __int32)v184->n128_u32[0] < v193;
                        if (v194)
                        {
                          v192 = v184[1].n128_i32[0];
                          ++v184;
                        }
                        else
                        {
                          v183 = v198;
                        }
                      }
                      else
                      {
                        v192 = v184->n128_u32[0];
                        v183 = v198;
                      }
                      v195 = (signed __int32)v184->n128_u32[1] < v189;
                      v165 = v192 == v188;
                      v196 = v192 < v188;
                      if (!v165)
                        v195 = v196;
                    }
                    while (!v195);
                    v187->n128_u32[0] = v188;
                    v187->n128_u32[1] = v189;
                    v187->n128_u64[1] = v191;
                  }
                }
                v181 = v182 - 1;
              }
              while (v182);
              v199 = (unint64_t)v13 >> 4;
              do
              {
                v201 = 0;
                v255 = *v12;
                v202 = v12;
                do
                {
                  v203 = (uint64_t)&v202[v201 + 1];
                  v204 = (2 * v201) | 1;
                  v205 = 2 * v201 + 2;
                  if (v205 < v199)
                  {
                    v206 = *(_DWORD *)(v203 + 16);
                    v207 = *(_DWORD *)v203 < v206;
                    if (*(_DWORD *)v203 == v206)
                      v207 = *(_DWORD *)(v203 + 4) < *(_DWORD *)(v203 + 20);
                    if (v207)
                    {
                      v203 += 16;
                      v204 = v205;
                    }
                  }
                  *v202 = *(_OWORD *)v203;
                  v202 = (_OWORD *)v203;
                  v201 = v204;
                }
                while (v204 <= (uint64_t)((unint64_t)(v199 - 2) >> 1));
                if ((__n128 *)v203 == --a2)
                {
                  *(__n128 *)v203 = v255;
                }
                else
                {
                  *(__n128 *)v203 = *a2;
                  *a2 = v255;
                  v208 = v203 - (_QWORD)v12 + 16;
                  if (v208 >= 17)
                  {
                    v209 = (((unint64_t)v208 >> 4) - 2) >> 1;
                    v210 = &v12[v209];
                    v211 = *(_DWORD *)v203;
                    v212 = *(_DWORD *)(v203 + 4);
                    v213 = (signed __int32)v210->n128_u32[0] < *(_DWORD *)v203;
                    if (v210->n128_u32[0] == *(_DWORD *)v203)
                      v213 = (signed __int32)v210->n128_u32[1] < v212;
                    if (v213)
                    {
                      v214 = *(_QWORD *)(v203 + 8);
                      do
                      {
                        v215 = (_OWORD *)v203;
                        v203 = (uint64_t)v210;
                        *v215 = *v210;
                        if (!v209)
                          break;
                        v209 = (v209 - 1) >> 1;
                        v210 = &v12[v209];
                        v216 = (signed __int32)v210->n128_u32[0] < v211;
                        if (v210->n128_u32[0] == v211)
                          v216 = (signed __int32)v210->n128_u32[1] < v212;
                      }
                      while (v216);
                      *(_DWORD *)v203 = v211;
                      *(_DWORD *)(v203 + 4) = v212;
                      *(_QWORD *)(v203 + 8) = v214;
                    }
                  }
                }
              }
              while (v199-- > 2);
            }
            return;
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = &v12[(unint64_t)v14 >> 1];
          v17 = a2[-1].n128_i32[0];
          v18 = a2[-1].n128_i32[1];
          if ((unint64_t)v13 < 0x801)
          {
            v24 = v12->n128_u32[0];
            v25 = v12->n128_i32[1];
            v26 = (signed __int32)v12->n128_u32[0] < (signed __int32)v16->n128_u32[0];
            if (v12->n128_u32[0] == v16->n128_u32[0])
              v26 = v25 < (signed __int32)v16->n128_u32[1];
            v27 = v18 < v25;
            v165 = v17 == v24;
            v28 = v17 < v24;
            if (v165)
              v28 = v27;
            if (v26)
            {
              if (v28)
              {
                v234 = *v16;
                *v16 = *v9;
LABEL_52:
                a5.n128_u64[1] = v234.n128_u64[1];
                *v9 = v234;
                goto LABEL_53;
              }
              v241 = *v16;
              *v16 = *v12;
              a5.n128_u64[1] = v241.n128_u64[1];
              *v12 = v241;
              v49 = a2[-1].n128_i32[0];
              v165 = v49 == v12->n128_u32[0];
              v50 = v49 < (signed __int32)v12->n128_u32[0];
              if (v165)
                v50 = (signed __int32)a2[-1].n128_u32[1] < (signed __int32)v12->n128_u32[1];
              if (v50)
              {
                v234 = *v12;
                *v12 = *v9;
                goto LABEL_52;
              }
            }
            else if (v28)
            {
              v237 = *v12;
              *v12 = *v9;
              a5.n128_u64[1] = v237.n128_u64[1];
              *v9 = v237;
              v30 = (signed __int32)v12->n128_u32[0] < (signed __int32)v16->n128_u32[0];
              if (v12->n128_u32[0] == v16->n128_u32[0])
                v30 = (signed __int32)v12->n128_u32[1] < (signed __int32)v16->n128_u32[1];
              if (v30)
              {
                v238 = *v16;
                *v16 = *v12;
                a5.n128_u64[1] = v238.n128_u64[1];
                *v12 = v238;
                --a3;
                v31 = v12->n128_u32[0];
                if ((a4 & 1) != 0)
                  goto LABEL_54;
                goto LABEL_95;
              }
            }
LABEL_53:
            --a3;
            v31 = v12->n128_u32[0];
            if ((a4 & 1) != 0)
              goto LABEL_54;
LABEL_95:
            v80 = v12[-1].n128_i32[0];
            v51 = v12->n128_i32[1];
            v165 = v80 == v31;
            v81 = v80 < v31;
            if (v165)
              v81 = (signed __int32)v12[-1].n128_u32[1] < v51;
            if (v81)
              goto LABEL_98;
            v107 = a2[-1].n128_i32[0];
            v165 = v31 == v107;
            v108 = v31 < v107;
            if (v165)
              v108 = v51 < (signed __int32)a2[-1].n128_u32[1];
            if (v108)
            {
              do
              {
                v109 = v12[1].n128_i32[0];
                v110 = v12[1].n128_i32[1];
                ++v12;
                v111 = v51 < v110;
                v165 = v31 == v109;
                v112 = v31 < v109;
                if (v165)
                  v112 = v111;
              }
              while (!v112);
            }
            else
            {
              v113 = v12 + 1;
              do
              {
                v12 = v113;
                if (v113 >= a2)
                  break;
                v114 = v113->n128_u32[0];
                v115 = v51 < (signed __int32)v12->n128_u32[1];
                v165 = v31 == v114;
                v116 = v31 < v114;
                if (!v165)
                  v115 = v116;
                v113 = v12 + 1;
              }
              while (!v115);
            }
            v117 = a2;
            if (v12 < a2)
            {
              v117 = a2;
              do
              {
                v118 = v117[-1].n128_i32[0];
                v119 = v117[-1].n128_i32[1];
                --v117;
                v120 = v51 < v119;
                v165 = v31 == v118;
                v121 = v31 < v118;
                if (v165)
                  v121 = v120;
              }
              while (v121);
            }
            a5.n128_u64[0] = a1->n128_u64[1];
            while (v12 < v117)
            {
              v251 = *v12;
              *v12 = *v117;
              *v117 = v251;
              do
              {
                v122 = v12[1].n128_i32[0];
                v123 = v12[1].n128_i32[1];
                ++v12;
                v124 = v51 < v123;
                v165 = v31 == v122;
                v125 = v31 < v122;
                if (v165)
                  v125 = v124;
              }
              while (!v125);
              do
              {
                v126 = v117[-1].n128_i32[0];
                v127 = v117[-1].n128_i32[1];
                --v117;
                v128 = v51 < v127;
                v165 = v31 == v126;
                v129 = v31 < v126;
                if (v165)
                  v129 = v128;
              }
              while (v129);
            }
            if (&v12[-1] != a1)
              *a1 = v12[-1];
            a4 = 0;
            v12[-1].n128_u32[0] = v31;
            v12[-1].n128_u32[1] = v51;
            v12[-1].n128_u64[1] = a5.n128_u64[0];
            continue;
          }
          v19 = v16->n128_u32[0];
          v20 = v16->n128_i32[1];
          v21 = (signed __int32)v16->n128_u32[0] < (signed __int32)v12->n128_u32[0];
          if (v16->n128_u32[0] == v12->n128_u32[0])
            v21 = v20 < (signed __int32)v12->n128_u32[1];
          v22 = v18 < v20;
          v165 = v17 == v19;
          v23 = v17 < v19;
          if (v165)
            v23 = v22;
          if (v21)
          {
            if (v23)
            {
              v233 = *v12;
              *v12 = *v9;
LABEL_35:
              *v9 = v233;
              goto LABEL_36;
            }
            v239 = *v12;
            *v12 = *v16;
            *v16 = v239;
            v32 = a2[-1].n128_i32[0];
            v165 = v32 == v16->n128_u32[0];
            v33 = v32 < (signed __int32)v16->n128_u32[0];
            if (v165)
              v33 = (signed __int32)a2[-1].n128_u32[1] < (signed __int32)v16->n128_u32[1];
            if (v33)
            {
              v233 = *v16;
              *v16 = *v9;
              goto LABEL_35;
            }
          }
          else if (v23)
          {
            v235 = *v16;
            *v16 = *v9;
            *v9 = v235;
            v29 = (signed __int32)v16->n128_u32[0] < (signed __int32)v12->n128_u32[0];
            if (v16->n128_u32[0] == v12->n128_u32[0])
              v29 = (signed __int32)v16->n128_u32[1] < (signed __int32)v12->n128_u32[1];
            if (v29)
            {
              v236 = *v12;
              *v12 = *v16;
              *v16 = v236;
            }
          }
LABEL_36:
          v34 = v12 + 1;
          v35 = v12[1].n128_i32[0];
          v36 = &v12[v15];
          v38 = v36[-1].n128_i32[0];
          v39 = v36[-1].n128_i32[1];
          v37 = v36 - 1;
          v40 = v39 < (signed __int32)v12[1].n128_u32[1];
          v165 = v38 == v35;
          v41 = v38 < v35;
          if (!v165)
            v40 = v41;
          v42 = a2[-2].n128_i32[0];
          v43 = (signed __int32)a2[-2].n128_u32[1] < v39;
          v165 = v42 == v38;
          v44 = v42 < v38;
          if (v165)
            v44 = v43;
          if (v40)
          {
            if (v44)
            {
              v45 = *v34;
              *v34 = *v10;
LABEL_59:
              *v10 = v45;
              goto LABEL_60;
            }
            v52 = *v34;
            *v34 = *v37;
            *v37 = v52;
            v53 = a2[-2].n128_i32[0];
            v165 = v53 == v37->n128_u32[0];
            v54 = v53 < (signed __int32)v37->n128_u32[0];
            if (v165)
              v54 = (signed __int32)a2[-2].n128_u32[1] < (signed __int32)v37->n128_u32[1];
            if (v54)
            {
              v242 = *v37;
              *v37 = *v10;
              v45 = v242;
              goto LABEL_59;
            }
          }
          else if (v44)
          {
            v240 = *v37;
            *v37 = *v10;
            *v10 = v240;
            v46 = v12[1].n128_i32[0];
            v47 = (signed __int32)v37->n128_u32[0] < v46;
            if (v37->n128_u32[0] == v46)
              v47 = (signed __int32)v37->n128_u32[1] < (signed __int32)v12[1].n128_u32[1];
            if (v47)
            {
              v48 = *v34;
              *v34 = *v37;
              *v37 = v48;
            }
          }
LABEL_60:
          v55 = v12 + 2;
          v56 = v12[2].n128_i32[0];
          v57 = &v12[v15];
          v59 = v57[1].n128_i32[0];
          v60 = v57[1].n128_i32[1];
          v58 = v57 + 1;
          v61 = v60 < (signed __int32)v12[2].n128_u32[1];
          v165 = v59 == v56;
          v62 = v59 < v56;
          if (!v165)
            v61 = v62;
          v63 = a2[-3].n128_i32[0];
          v64 = (signed __int32)a2[-3].n128_u32[1] < v60;
          v165 = v63 == v59;
          v65 = v63 < v59;
          if (v165)
            v65 = v64;
          if (v61)
          {
            if (v65)
            {
              v66 = *v55;
              *v55 = *v11;
LABEL_76:
              *v11 = v66;
              goto LABEL_77;
            }
            v70 = *v55;
            *v55 = *v58;
            *v58 = v70;
            v71 = a2[-3].n128_i32[0];
            v165 = v71 == v58->n128_u32[0];
            v72 = v71 < (signed __int32)v58->n128_u32[0];
            if (v165)
              v72 = (signed __int32)a2[-3].n128_u32[1] < (signed __int32)v58->n128_u32[1];
            if (v72)
            {
              v244 = *v58;
              *v58 = *v11;
              v66 = v244;
              goto LABEL_76;
            }
          }
          else if (v65)
          {
            v243 = *v58;
            *v58 = *v11;
            *v11 = v243;
            v67 = v12[2].n128_i32[0];
            v68 = (signed __int32)v58->n128_u32[0] < v67;
            if (v58->n128_u32[0] == v67)
              v68 = (signed __int32)v58->n128_u32[1] < (signed __int32)v12[2].n128_u32[1];
            if (v68)
            {
              v69 = *v55;
              *v55 = *v58;
              *v58 = v69;
            }
          }
LABEL_77:
          v73 = v16->n128_u32[0];
          v74 = v16->n128_i32[1];
          v75 = (signed __int32)v16->n128_u32[0] < (signed __int32)v37->n128_u32[0];
          if (v16->n128_u32[0] == v37->n128_u32[0])
            v75 = v74 < (signed __int32)v37->n128_u32[1];
          v76 = (signed __int32)v58->n128_u32[1] < v74;
          v165 = v58->n128_u32[0] == v73;
          v77 = (signed __int32)v58->n128_u32[0] < v73;
          if (v165)
            v77 = v76;
          if (v75)
          {
            if (v77)
            {
              v245 = *v37;
              *v37 = *v58;
LABEL_93:
              *v58 = v245;
              goto LABEL_94;
            }
            v248 = *v37;
            *v37 = *v16;
            *v16 = v248;
            v79 = (signed __int32)v58->n128_u32[0] < (signed __int32)v16->n128_u32[0];
            if (v58->n128_u32[0] == v16->n128_u32[0])
              v79 = (signed __int32)v58->n128_u32[1] < (signed __int32)v16->n128_u32[1];
            if (v79)
            {
              v245 = *v16;
              *v16 = *v58;
              goto LABEL_93;
            }
          }
          else if (v77)
          {
            v246 = *v16;
            *v16 = *v58;
            *v58 = v246;
            v78 = (signed __int32)v16->n128_u32[0] < (signed __int32)v37->n128_u32[0];
            if (v16->n128_u32[0] == v37->n128_u32[0])
              v78 = (signed __int32)v16->n128_u32[1] < (signed __int32)v37->n128_u32[1];
            if (v78)
            {
              v247 = *v37;
              *v37 = *v16;
              *v16 = v247;
            }
          }
LABEL_94:
          v249 = *v12;
          *v12 = *v16;
          a5.n128_u64[1] = v249.n128_u64[1];
          *v16 = v249;
          --a3;
          v31 = v12->n128_u32[0];
          if ((a4 & 1) == 0)
            goto LABEL_95;
LABEL_54:
          v51 = v12->n128_i32[1];
LABEL_98:
          v82 = 0;
          a5.n128_u64[0] = v12->n128_u64[1];
          do
          {
            v83 = v12[v82 + 1].n128_i32[0];
            v84 = (signed __int32)v12[v82 + 1].n128_u32[1] < v51;
            v165 = v83 == v31;
            v85 = v83 < v31;
            if (!v165)
              v84 = v85;
            ++v82;
          }
          while (v84);
          v86 = &v12[v82];
          v87 = a2;
          if (v82 == 1)
          {
            v87 = a2;
            do
            {
              if (v86 >= v87)
                break;
              v92 = v87[-1].n128_i32[0];
              v93 = v87[-1].n128_i32[1];
              --v87;
              v94 = v93 < v51;
              v165 = v92 == v31;
              v95 = v92 < v31;
              if (v165)
                v95 = v94;
            }
            while (!v95);
          }
          else
          {
            do
            {
              v88 = v87[-1].n128_i32[0];
              v89 = v87[-1].n128_i32[1];
              --v87;
              v90 = v89 < v51;
              v165 = v88 == v31;
              v91 = v88 < v31;
              if (v165)
                v91 = v90;
            }
            while (!v91);
          }
          v12 = v86;
          if (v86 < v87)
          {
            v96 = v87;
            do
            {
              v250 = *v12;
              *v12 = *v96;
              *v96 = v250;
              do
              {
                v97 = v12[1].n128_i32[0];
                v98 = v12[1].n128_i32[1];
                ++v12;
                v99 = v98 < v51;
                v165 = v97 == v31;
                v100 = v97 < v31;
                if (v165)
                  v100 = v99;
              }
              while (v100);
              do
              {
                v101 = v96[-1].n128_i32[0];
                v102 = v96[-1].n128_i32[1];
                --v96;
                v103 = v102 < v51;
                v165 = v101 == v31;
                v104 = v101 < v31;
                if (v165)
                  v104 = v103;
              }
              while (!v104);
            }
            while (v12 < v96);
          }
          if (&v12[-1] != a1)
            *a1 = v12[-1];
          v12[-1].n128_u32[0] = v31;
          v12[-1].n128_u32[1] = v51;
          v12[-1].n128_u64[1] = a5.n128_u64[0];
          if (v86 < v87)
            goto LABEL_127;
          {
            if (v105)
              continue;
LABEL_127:
            a4 = 0;
            continue;
          }
          a2 = v12 - 1;
          if (v105)
            return;
          goto LABEL_1;
        }
        v164 = v12 + 1;
        v165 = v12 == a2 || v164 == a2;
        v166 = v165;
        if ((a4 & 1) != 0)
        {
          if ((v166 & 1) == 0)
          {
            v167 = 0;
            v168 = v12;
            do
            {
              v170 = v164;
              v171 = v168[1].n128_i32[0];
              v172 = v168[1].n128_i32[1];
              v173 = v171 < (signed __int32)v168->n128_u32[0];
              if (v171 == v168->n128_u32[0])
                v173 = v172 < (signed __int32)v168->n128_u32[1];
              if (v173)
              {
                v174 = v168[1].n128_u64[1];
                v175 = v167;
                do
                {
                  v176 = (char *)v12 + v175;
                  *(__n128 *)((char *)v12 + v175 + 16) = *(__n128 *)((char *)v12 + v175);
                  if (!v175)
                  {
                    v169 = (uint64_t)v12;
                    goto LABEL_196;
                  }
                  v177 = *((_DWORD *)v176 - 4);
                  v178 = v172 < *((_DWORD *)v176 - 3);
                  v165 = v171 == v177;
                  v179 = v171 < v177;
                  if (!v165)
                    v178 = v179;
                  v175 -= 16;
                }
                while (v178);
                v169 = (uint64_t)&v12[1] + v175;
LABEL_196:
                *(_DWORD *)v169 = v171;
                *(_DWORD *)(v169 + 4) = v172;
                *(_QWORD *)(v169 + 8) = v174;
              }
              v164 = v170 + 1;
              v167 += 16;
              v168 = v170;
            }
            while (&v170[1] != a2);
          }
        }
        else if ((v166 & 1) == 0)
        {
          do
          {
            v220 = v164;
            v221 = a1[1].n128_i32[0];
            v222 = a1[1].n128_i32[1];
            v223 = v221 < (signed __int32)a1->n128_u32[0];
            if (v221 == a1->n128_u32[0])
              v223 = v222 < (signed __int32)a1->n128_u32[1];
            if (v223)
            {
              v224 = a1[1].n128_u64[1];
              v225 = v220;
              do
              {
                *v225 = v225[-1];
                v226 = v225[-2].n128_i32[0];
                v227 = v225[-2].n128_i32[1];
                --v225;
                v228 = v222 < v227;
                v165 = v221 == v226;
                v229 = v221 < v226;
                if (v165)
                  v229 = v228;
              }
              while (v229);
              v225->n128_u32[0] = v221;
              v225->n128_u32[1] = v222;
              v225->n128_u64[1] = v224;
            }
            v164 = v220 + 1;
            a1 = v220;
          }
          while (&v220[1] != a2);
        }
        return;
    }
  }
}

  v11 = a1;
  while (2)
  {
    a1 = v11;
    v12 = (char *)a2 - (char *)v11;
    v13 = a2 - v11;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v90 = *(a2 - 1);
        v91 = *v11;
        v92 = **a3;
        result = *(double *)(v92 + 8 * v90);
        if (result < *(double *)(v92 + 8 * v91))
        {
          *v11 = v90;
          goto LABEL_163;
        }
        return result;
      case 3:
        v93 = **a3;
        v91 = *v11;
        v94 = v11[1];
        v95 = *(double *)(v93 + 8 * v94);
        result = *(double *)(v93 + 8 * v91);
        v96 = *(a2 - 1);
        v97 = *(double *)(v93 + 8 * v96);
        if (v95 >= result)
        {
          if (v97 < v95)
          {
            v11[1] = v96;
            *(a2 - 1) = v94;
            v148 = *v11;
            v147 = v11[1];
            result = *(double *)(v93 + 8 * v147);
            if (result < *(double *)(v93 + 8 * v148))
            {
              *v11 = v147;
              v11[1] = v148;
            }
          }
        }
        else
        {
          if (v97 >= v95)
          {
            *v11 = v94;
            v11[1] = v91;
            v153 = *(a2 - 1);
            if (*(double *)(v93 + 8 * v153) >= result)
              return result;
            v11[1] = v153;
          }
          else
          {
            *v11 = v96;
          }
LABEL_163:
          *(a2 - 1) = v91;
        }
        return result;
      case 4:
        v98 = v11 + 1;
        v99 = v11[1];
        v100 = v11 + 2;
        v101 = v11[2];
        v102 = **a3;
        v103 = *v11;
        v104 = *(double *)(v102 + 8 * v99);
        v105 = *(double *)(v102 + 8 * *v11);
        v106 = v101;
        v107 = *(double *)(v102 + 8 * v101);
        if (v104 >= v105)
        {
          if (v107 >= v104)
          {
            v99 = v11[2];
          }
          else
          {
            v108 = v99;
            *v98 = v101;
            *v100 = v99;
            v109 = v11;
            v110 = v11 + 1;
            v106 = v99;
            if (v107 < v105)
              goto LABEL_165;
          }
          v154 = *(a2 - 1);
          result = *(double *)(v102 + 8 * v154);
          if (result >= *(double *)(v102 + 8 * v106))
            return result;
        }
        else
        {
          v108 = v103;
          if (v107 < v104)
          {
            v109 = v11;
            v110 = v11 + 2;
            v99 = *v11;
            goto LABEL_165;
          }
          *v11 = v99;
          v11[1] = v103;
          v109 = v11 + 1;
          v110 = v11 + 2;
          v99 = v103;
          if (v107 < v105)
          {
LABEL_165:
            *v109 = v101;
            *v110 = v103;
            v154 = *(a2 - 1);
            result = *(double *)(v102 + 8 * v154);
            if (result >= *(double *)(v102 + 8 * v108))
              return result;
            goto LABEL_169;
          }
          v99 = v101;
          v154 = *(a2 - 1);
          result = *(double *)(v102 + 8 * v154);
          if (result >= *(double *)(v102 + 8 * v106))
            return result;
        }
LABEL_169:
        *v100 = v154;
        *(a2 - 1) = v99;
        v155 = *v100;
        v156 = *v98;
        result = *(double *)(v102 + 8 * v155);
        if (result < *(double *)(v102 + 8 * v156))
        {
          v11[1] = v155;
          v11[2] = v156;
          v157 = *v11;
          if (result < *(double *)(v102 + 8 * v157))
          {
            *v11 = v155;
            v11[1] = v157;
          }
        }
        return result;
      case 5:
        return result;
      default:
        if (v12 > 95)
        {
          if (!a4)
          {
            if (v11 != a2)
            {
              v120 = (unint64_t)(v13 - 2) >> 1;
              v121 = v120;
              do
              {
                if (v120 >= v121)
                {
                  v123 = (2 * v121) | 1;
                  v124 = &v11[v123];
                  v125 = **a3;
                  if (2 * v121 + 2 < v13 && *(double *)(v125 + 8 * *v124) < *(double *)(v125 + 8 * v124[1]))
                  {
                    ++v124;
                    v123 = 2 * v121 + 2;
                  }
                  v126 = &v11[v121];
                  v127 = *v124;
                  v128 = *v126;
                  result = *(double *)(v125 + 8 * v128);
                  if (*(double *)(v125 + 8 * v127) >= result)
                  {
                    do
                    {
                      v129 = v124;
                      *v126 = v127;
                      if (v120 < v123)
                        break;
                      v130 = 2 * v123;
                      v123 = (2 * v123) | 1;
                      v124 = &v11[v123];
                      v131 = v130 + 2;
                      if (v131 < v13 && *(double *)(v125 + 8 * *v124) < *(double *)(v125 + 8 * v124[1]))
                      {
                        ++v124;
                        v123 = v131;
                      }
                      v127 = *v124;
                      v126 = v129;
                    }
                    while (*(double *)(v125 + 8 * v127) >= result);
                    *v129 = v128;
                  }
                }
                v122 = v121-- <= 0;
              }
              while (!v122);
              v132 = (unint64_t)v12 >> 2;
              do
              {
                v133 = 0;
                v134 = *v11;
                v135 = *a3;
                v136 = v11;
                do
                {
                  v137 = v136;
                  v136 += v133 + 1;
                  v138 = 2 * v133;
                  v133 = (2 * v133) | 1;
                  v139 = v138 + 2;
                  if (v139 < v132)
                  {
                    result = *(double *)(*v135 + 8 * *v136);
                    if (result < *(double *)(*v135 + 8 * v136[1]))
                    {
                      ++v136;
                      v133 = v139;
                    }
                  }
                  *v137 = *v136;
                }
                while (v133 <= (uint64_t)((unint64_t)(v132 - 2) >> 1));
                if (v136 == --a2)
                {
                  *v136 = v134;
                }
                else
                {
                  *v136 = *a2;
                  *a2 = v134;
                  v140 = (char *)v136 - (char *)v11 + 4;
                  if (v140 >= 5)
                  {
                    v141 = (((unint64_t)v140 >> 2) - 2) >> 1;
                    v142 = &v11[v141];
                    v143 = *v142;
                    v144 = *v136;
                    v145 = **a3;
                    result = *(double *)(v145 + 8 * v144);
                    if (*(double *)(v145 + 8 * v143) < result)
                    {
                      do
                      {
                        v146 = v142;
                        *v136 = v143;
                        if (!v141)
                          break;
                        v141 = (v141 - 1) >> 1;
                        v142 = &v11[v141];
                        v143 = *v142;
                        v136 = v146;
                      }
                      while (*(double *)(v145 + 8 * v143) < result);
                      *v146 = v144;
                    }
                  }
                }
                v122 = v132-- <= 2;
              }
              while (!v122);
            }
            return result;
          }
          v14 = (unint64_t)v13 >> 1;
          v15 = &v11[(unint64_t)v13 >> 1];
          v16 = **a3;
          v17 = *(a2 - 1);
          v18 = *(double *)(v16 + 8 * v17);
          if ((unint64_t)v12 < 0x201)
          {
            v23 = *v11;
            v24 = *v15;
            v25 = *(double *)(v16 + 8 * v23);
            v26 = *(double *)(v16 + 8 * v24);
            if (v25 >= v26)
            {
              if (v18 < v25)
              {
                *v11 = v17;
                *(a2 - 1) = v23;
                v29 = *v11;
                v30 = *v15;
                if (*(double *)(v16 + 8 * v29) < *(double *)(v16 + 8 * v30))
                {
                  *v15 = v29;
                  *v11 = v30;
                  --a4;
                  v31 = v30;
                  v30 = (int)v30;
                  if ((a5 & 1) != 0)
                    goto LABEL_54;
                  goto LABEL_53;
                }
              }
              goto LABEL_31;
            }
            if (v18 >= v25)
            {
              *v15 = v23;
              *v11 = v24;
              v44 = *(a2 - 1);
              if (*(double *)(v16 + 8 * v44) >= v26)
                goto LABEL_31;
              *v11 = v44;
            }
            else
            {
              *v15 = v17;
            }
            *(a2 - 1) = v24;
LABEL_31:
            --a4;
            v31 = *v11;
            v30 = *v11;
            if ((a5 & 1) != 0)
              goto LABEL_54;
            goto LABEL_53;
          }
          v19 = *v15;
          v20 = *v11;
          v21 = *(double *)(v16 + 8 * v19);
          v22 = *(double *)(v16 + 8 * v20);
          if (v21 >= v22)
          {
            if (v18 < v21)
            {
              *v15 = v17;
              *(a2 - 1) = v19;
              v27 = *v15;
              v28 = *v11;
              if (*(double *)(v16 + 8 * v27) < *(double *)(v16 + 8 * v28))
              {
                *v11 = v27;
                *v15 = v28;
              }
            }
          }
          else
          {
            if (v18 >= v21)
            {
              *v11 = v19;
              *v15 = v20;
              v32 = *(a2 - 1);
              if (*(double *)(v16 + 8 * v32) >= v22)
                goto LABEL_22;
              *v15 = v32;
            }
            else
            {
              *v11 = v17;
            }
            *(a2 - 1) = v20;
          }
LABEL_22:
          v33 = &v11[v14];
          v36 = *(v33 - 1);
          v34 = v33 - 1;
          v35 = v36;
          v37 = v11[1];
          v38 = *(double *)(v16 + 8 * v36);
          v39 = *(double *)(v16 + 8 * v37);
          v40 = *(a2 - 2);
          v41 = *(double *)(v16 + 8 * v40);
          if (v38 >= v39)
          {
            if (v41 < v38)
            {
              *v34 = v40;
              *(a2 - 2) = v35;
              v42 = *v34;
              v43 = v11[1];
              if (*(double *)(v16 + 8 * v42) < *(double *)(v16 + 8 * v43))
              {
                v11[1] = v42;
                *v34 = v43;
              }
            }
          }
          else
          {
            if (v41 >= v38)
            {
              v11[1] = v35;
              *v34 = v37;
              v45 = *(a2 - 2);
              if (*(double *)(v16 + 8 * v45) >= v39)
                goto LABEL_36;
              *v34 = v45;
            }
            else
            {
              v11[1] = v40;
            }
            *(a2 - 2) = v37;
          }
LABEL_36:
          v46 = &v11[v14];
          v49 = v46[1];
          v47 = v46 + 1;
          v48 = v49;
          v50 = v11[2];
          v51 = *(double *)(v16 + 8 * v49);
          v52 = *(double *)(v16 + 8 * v50);
          v53 = *(a2 - 3);
          v54 = *(double *)(v16 + 8 * v53);
          if (v51 >= v52)
          {
            if (v54 < v51)
            {
              *v47 = v53;
              *(a2 - 3) = v48;
              v55 = *v47;
              v56 = v11[2];
              if (*(double *)(v16 + 8 * v55) < *(double *)(v16 + 8 * v56))
              {
                v11[2] = v55;
                *v47 = v56;
              }
            }
          }
          else
          {
            if (v54 >= v51)
            {
              v11[2] = v48;
              *v47 = v50;
              v57 = *(a2 - 3);
              if (*(double *)(v16 + 8 * v57) >= v52)
                goto LABEL_45;
              *v47 = v57;
            }
            else
            {
              v11[2] = v53;
            }
            *(a2 - 3) = v50;
          }
LABEL_45:
          v58 = *v15;
          v59 = *v34;
          v60 = *(double *)(v16 + 8 * v58);
          v61 = *(double *)(v16 + 8 * v59);
          v62 = *v47;
          v63 = *(double *)(v16 + 8 * v62);
          if (v60 < v61)
          {
            if (v63 >= v60)
            {
              *v34 = v58;
              *v15 = v59;
              v34 = v15;
              LODWORD(v58) = v62;
              if (v63 >= v61)
              {
                LODWORD(v58) = v59;
                goto LABEL_52;
              }
            }
LABEL_51:
            *v34 = v62;
            *v47 = v59;
            goto LABEL_52;
          }
          if (v63 >= v60)
            goto LABEL_52;
          *v15 = v62;
          *v47 = v58;
          v47 = v15;
          LODWORD(v58) = v59;
          if (v63 < v61)
            goto LABEL_51;
          LODWORD(v58) = v62;
LABEL_52:
          v64 = *v11;
          *v11 = v58;
          *v15 = v64;
          --a4;
          v31 = *v11;
          v30 = *v11;
          if ((a5 & 1) != 0)
            goto LABEL_54;
LABEL_53:
          result = *(double *)(v16 + 8 * v30);
          if (*(double *)(v16 + 8 * *(v11 - 1)) >= result)
          {
            if (result >= *(double *)(v16 + 8 * *(a2 - 1)))
            {
              v82 = v11 + 1;
              do
              {
                v11 = v82;
                if (v82 >= a2)
                  break;
                ++v82;
              }
              while (result >= *(double *)(v16 + 8 * *v11));
            }
            else
            {
              do
              {
                v81 = v11[1];
                ++v11;
              }
              while (result >= *(double *)(v16 + 8 * v81));
            }
            v83 = a2;
            if (v11 < a2)
            {
              v83 = a2;
              do
                v84 = *--v83;
              while (result < *(double *)(v16 + 8 * v84));
            }
            if (v11 < v83)
            {
              v85 = *v11;
              v86 = *v83;
              do
              {
                *v11 = v86;
                *v83 = v85;
                do
                {
                  v87 = v11[1];
                  ++v11;
                  v85 = v87;
                }
                while (result >= *(double *)(v16 + 8 * v87));
                do
                {
                  v88 = *--v83;
                  v86 = v88;
                }
                while (result < *(double *)(v16 + 8 * v88));
              }
              while (v11 < v83);
            }
            v89 = v11 - 1;
            if (v11 - 1 != a1)
              *a1 = *v89;
            a5 = 0;
            *v89 = v31;
            continue;
          }
LABEL_54:
          v65 = 0;
          v66 = **a3;
          v67 = *(double *)(v66 + 8 * v30);
          do
            v68 = v11[++v65];
          while (*(double *)(v66 + 8 * v68) < v67);
          v69 = &v11[v65];
          v70 = a2;
          if (v65 == 1)
          {
            v70 = a2;
            do
            {
              if (v69 >= v70)
                break;
              v72 = *--v70;
            }
            while (*(double *)(v66 + 8 * v72) >= v67);
          }
          else
          {
            do
              v71 = *--v70;
            while (*(double *)(v66 + 8 * v71) >= v67);
          }
          if (v69 < v70)
          {
            v73 = *v70;
            v74 = v68;
            v75 = &v11[v65];
            v76 = v70;
            do
            {
              *v75 = v73;
              *v76 = v74;
              do
              {
                v77 = v75[1];
                ++v75;
                v74 = v77;
              }
              while (*(double *)(v66 + 8 * v77) < v67);
              do
              {
                v78 = *--v76;
                v73 = v78;
              }
              while (*(double *)(v66 + 8 * v78) >= v67);
            }
            while (v75 < v76);
            v79 = v75 - 1;
            if (v75 - 1 == v11)
              goto LABEL_72;
LABEL_71:
            *v11 = *v79;
            goto LABEL_72;
          }
          v79 = v69 - 1;
          if (v69 - 1 != v11)
            goto LABEL_71;
LABEL_72:
          *v79 = v31;
          if (v69 < v70)
            goto LABEL_75;
          v11 = v79 + 1;
          {
            if (v80)
              continue;
LABEL_75:
            a5 = 0;
            v11 = v79 + 1;
            continue;
          }
          a2 = v79;
          if (v80)
            return result;
          goto LABEL_1;
        }
        v111 = *a3;
        if ((a5 & 1) != 0)
        {
          if (v11 != a2)
          {
            v112 = v11 + 1;
            if (v11 + 1 != a2)
            {
              v113 = 0;
              v114 = *v111;
              v115 = v11;
              do
              {
                v118 = *v115;
                v117 = v115[1];
                v115 = v112;
                result = *(double *)(v114 + 8 * v117);
                if (result < *(double *)(v114 + 8 * v118))
                {
                  v119 = v113;
                  do
                  {
                    *(int *)((char *)v11 + v119 + 4) = v118;
                    if (!v119)
                    {
                      v116 = v11;
                      goto LABEL_112;
                    }
                    v118 = *(int *)((char *)v11 + v119 - 4);
                    v119 -= 4;
                  }
                  while (result < *(double *)(v114 + 8 * v118));
                  v116 = (int *)((char *)v11 + v119 + 4);
LABEL_112:
                  *v116 = v117;
                }
                v112 = v115 + 1;
                v113 += 4;
              }
              while (v115 + 1 != a2);
            }
          }
        }
        else if (v11 != a2)
        {
          v149 = v11 + 1;
          if (v11 + 1 != a2)
          {
            v150 = *v111;
            do
            {
              v152 = *a1;
              v151 = a1[1];
              a1 = v149;
              result = *(double *)(v150 + 8 * v151);
              if (result < *(double *)(v150 + 8 * v152))
              {
                do
                {
                  *v149 = v152;
                  v152 = *(v149 - 2);
                  --v149;
                }
                while (result < *(double *)(v150 + 8 * v152));
                *v149 = v151;
              }
              v149 = a1 + 1;
            }
            while (a1 + 1 != a2);
          }
        }
        return result;
    }
  }
}

  v9 = (__n128 *)(a2 - 20);
  v10 = (__n128 *)(a2 - 40);
  v11 = (__n128 *)(a2 - 60);
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = a2 - v12;
    v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v12) >> 2);
    switch(v14)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*(_QWORD *)(a2 - 16) < *(_QWORD *)(v12 + 4))
        {
          v212 = *(_DWORD *)(v12 + 16);
          v187 = *(__n128 *)v12;
          v94 = *(_OWORD *)(a2 - 20);
          *(_DWORD *)(v12 + 16) = *(_DWORD *)(a2 - 4);
          *(_OWORD *)v12 = v94;
          *(_DWORD *)(a2 - 4) = v212;
          *(__n128 *)(a2 - 20) = v187;
        }
        return;
      case 3:
        v95 = (__n128 *)(v12 + 20);
        v96 = *(_QWORD *)(v12 + 24);
        v97 = *(_QWORD *)(a2 - 16);
        if (v96 >= *(_QWORD *)(v12 + 4))
        {
          if (v97 < v96)
          {
            v157 = *v95;
            v158 = *(_DWORD *)(v12 + 36);
            v159 = *(_DWORD *)(a2 - 4);
            *v95 = *v9;
            *(_DWORD *)(v12 + 36) = v159;
            *(_DWORD *)(a2 - 4) = v158;
            *v9 = v157;
            if (*(_QWORD *)(v12 + 24) < *(_QWORD *)(v12 + 4))
            {
              v216 = *(_DWORD *)(v12 + 16);
              v191 = *(__n128 *)v12;
              *(__n128 *)v12 = *v95;
              *(_DWORD *)(v12 + 16) = *(_DWORD *)(v12 + 36);
              *v95 = v191;
              *(_DWORD *)(v12 + 36) = v216;
            }
          }
        }
        else
        {
          if (v97 >= v96)
          {
            v217 = *(_DWORD *)(v12 + 16);
            v192 = *(__n128 *)v12;
            *(__n128 *)v12 = *v95;
            *(_DWORD *)(v12 + 16) = *(_DWORD *)(v12 + 36);
            *v95 = v192;
            *(_DWORD *)(v12 + 36) = v217;
            if (*(_QWORD *)(a2 - 16) >= *(_QWORD *)(v12 + 24))
              return;
            v99 = *v95;
            v166 = *(_DWORD *)(v12 + 36);
            v167 = *(_DWORD *)(a2 - 4);
            *v95 = *v9;
            *(_DWORD *)(v12 + 36) = v167;
            *(_DWORD *)(a2 - 4) = v166;
          }
          else
          {
            v213 = *(_DWORD *)(v12 + 16);
            v188 = *(__n128 *)v12;
            v98 = *v9;
            *(_DWORD *)(v12 + 16) = *(_DWORD *)(a2 - 4);
            *(__n128 *)v12 = v98;
            v99 = v188;
            *(_DWORD *)(a2 - 4) = v213;
          }
          *v9 = v99;
        }
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBounds(void)::$_0 &,operations_research::sat::AllDifferentBoundsPropagator::VarValue *>(v12, v12 + 20, v12 + 40, a2 - 20, a5);
        return;
      case 5:
        v100 = (__n128 *)(v12 + 20);
        v101 = (__n128 *)(v12 + 40);
        v102 = (__int128 *)(v12 + 60);
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBounds(void)::$_0 &,operations_research::sat::AllDifferentBoundsPropagator::VarValue *>(v12, v12 + 20, v12 + 40, v12 + 60, a5);
        if (*(_QWORD *)(a2 - 16) < *(_QWORD *)(v12 + 64))
        {
          v103 = *v102;
          v104 = *(_DWORD *)(v12 + 76);
          v105 = *(_DWORD *)(a2 - 4);
          *v102 = *(_OWORD *)(a2 - 20);
          *(_DWORD *)(v12 + 76) = v105;
          *(_DWORD *)(a2 - 4) = v104;
          *(_OWORD *)(a2 - 20) = v103;
          if (*(_QWORD *)(v12 + 64) < *(_QWORD *)(v12 + 44))
          {
            v106 = *(_DWORD *)(v12 + 56);
            v107 = *v101;
            *v101 = (__n128)*v102;
            *(_DWORD *)(v12 + 56) = *(_DWORD *)(v12 + 76);
            *v102 = (__int128)v107;
            *(_DWORD *)(v12 + 76) = v106;
            if (*(_QWORD *)(v12 + 44) < *(_QWORD *)(v12 + 24))
            {
              v108 = *(_DWORD *)(v12 + 36);
              v109 = *v100;
              *v100 = *v101;
              *(_DWORD *)(v12 + 36) = *(_DWORD *)(v12 + 56);
              *v101 = v109;
              *(_DWORD *)(v12 + 56) = v108;
              if (*(_QWORD *)(v12 + 24) < *(_QWORD *)(v12 + 4))
              {
                v214 = *(_DWORD *)(v12 + 16);
                v189 = *(__n128 *)v12;
                *(__n128 *)v12 = *v100;
                *(_DWORD *)(v12 + 16) = *(_DWORD *)(v12 + 36);
                *v100 = v189;
                *(_DWORD *)(v12 + 36) = v214;
              }
            }
          }
        }
        return;
      default:
        if (v13 > 479)
        {
          if (!a3)
          {
            if (v12 != a2)
            {
              v122 = (unint64_t)(v14 - 2) >> 1;
              v123 = v122;
              do
              {
                if (v122 >= v123)
                {
                  v125 = (2 * v123) | 1;
                  v126 = v12 + 20 * v125;
                  if (2 * v123 + 2 < v14)
                  {
                    v127 = *(_QWORD *)(v126 + 4);
                    v128 = *(_QWORD *)(v126 + 24);
                    v126 += 20 * (v127 < v128);
                    if (v127 < v128)
                      v125 = 2 * v123 + 2;
                  }
                  v129 = v12 + 20 * v123;
                  v130 = *(_QWORD *)(v129 + 4);
                  if (*(_QWORD *)(v126 + 4) >= v130)
                  {
                    v131 = *(_DWORD *)v129;
                    v132 = *(_QWORD *)(v129 + 12);
                    do
                    {
                      v133 = v129;
                      v129 = v126;
                      v134 = *(_OWORD *)v126;
                      *(_DWORD *)(v133 + 16) = *(_DWORD *)(v126 + 16);
                      *(_OWORD *)v133 = v134;
                      if (v122 < v125)
                        break;
                      v135 = (2 * v125) | 1;
                      v126 = v12 + 20 * v135;
                      v136 = 2 * v125 + 2;
                      if (v136 < v14)
                      {
                        v137 = *(_QWORD *)(v126 + 4);
                        v138 = *(_QWORD *)(v126 + 24);
                        v126 += 20 * (v137 < v138);
                        if (v137 < v138)
                          v135 = v136;
                      }
                      v125 = v135;
                    }
                    while (*(_QWORD *)(v126 + 4) >= v130);
                    *(_DWORD *)v129 = v131;
                    *(_QWORD *)(v129 + 4) = v130;
                    *(_QWORD *)(v129 + 12) = v132;
                  }
                }
                v124 = v123-- <= 0;
              }
              while (!v124);
              v139 = v13 / 0x14uLL;
              do
              {
                v140 = 0;
                v215 = *(_DWORD *)(v12 + 16);
                v190 = *(__n128 *)v12;
                v141 = v12;
                do
                {
                  v143 = v141 + 20 * v140 + 20;
                  v144 = (2 * v140) | 1;
                  v145 = 2 * v140 + 2;
                  if (v145 < v139)
                  {
                    v146 = *(_QWORD *)(v143 + 4);
                    v147 = *(_QWORD *)(v143 + 24);
                    v143 += 20 * (v146 < v147);
                    if (v146 < v147)
                      v144 = v145;
                  }
                  v142 = *(_OWORD *)v143;
                  *(_DWORD *)(v141 + 16) = *(_DWORD *)(v143 + 16);
                  *(_OWORD *)v141 = v142;
                  v141 = v143;
                  v140 = v144;
                }
                while (v144 <= (uint64_t)((unint64_t)(v139 - 2) >> 1));
                a2 -= 20;
                if (v143 == a2)
                {
                  *(_DWORD *)(v143 + 16) = v215;
                  *(__n128 *)v143 = v190;
                }
                else
                {
                  v148 = *(_OWORD *)a2;
                  *(_DWORD *)(v143 + 16) = *(_DWORD *)(a2 + 16);
                  *(_OWORD *)v143 = v148;
                  *(_DWORD *)(a2 + 16) = v215;
                  *(__n128 *)a2 = v190;
                  v149 = v143 - v12 + 20;
                  if (v149 >= 21)
                  {
                    v150 = (v149 / 0x14uLL - 2) >> 1;
                    v151 = v12 + 20 * v150;
                    v152 = *(_QWORD *)(v143 + 4);
                    if (*(_QWORD *)(v151 + 4) < v152)
                    {
                      v153 = *(_DWORD *)v143;
                      v154 = *(_QWORD *)(v143 + 12);
                      do
                      {
                        v155 = v143;
                        v143 = v151;
                        v156 = *(_OWORD *)v151;
                        *(_DWORD *)(v155 + 16) = *(_DWORD *)(v151 + 16);
                        *(_OWORD *)v155 = v156;
                        if (!v150)
                          break;
                        v150 = (v150 - 1) >> 1;
                        v151 = v12 + 20 * v150;
                      }
                      while (*(_QWORD *)(v151 + 4) < v152);
                      *(_DWORD *)v143 = v153;
                      *(_QWORD *)(v143 + 4) = v152;
                      *(_QWORD *)(v143 + 12) = v154;
                    }
                  }
                }
                v124 = v139-- <= 2;
              }
              while (!v124);
            }
            return;
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = v12 + 20 * ((unint64_t)v14 >> 1);
          v17 = *(_QWORD *)(a2 - 16);
          if ((unint64_t)v13 < 0xA01)
          {
            v20 = *(_QWORD *)(v12 + 4);
            if (v20 >= *(_QWORD *)(v16 + 4))
            {
              if (v17 < v20)
              {
                v197 = *(_DWORD *)(v12 + 16);
                v172 = *(__n128 *)v12;
                v24 = *v9;
                *(_DWORD *)(v12 + 16) = *(_DWORD *)(a2 - 4);
                *(__n128 *)v12 = v24;
                a5 = v172;
                *(_DWORD *)(a2 - 4) = v197;
                *v9 = v172;
                if (*(_QWORD *)(v12 + 4) < *(_QWORD *)(v16 + 4))
                {
                  v198 = *(_DWORD *)(v16 + 16);
                  v173 = *(__n128 *)v16;
                  v25 = *(__n128 *)v12;
                  *(_DWORD *)(v16 + 16) = *(_DWORD *)(v12 + 16);
                  *(__n128 *)v16 = v25;
                  a5 = v173;
                  *(_DWORD *)(v12 + 16) = v198;
                  *(__n128 *)v12 = v173;
                  --a3;
                  if ((a4 & 1) != 0)
                    goto LABEL_32;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v17 >= v20)
              {
                v201 = *(_DWORD *)(v16 + 16);
                v176 = *(__n128 *)v16;
                v40 = *(__n128 *)v12;
                *(_DWORD *)(v16 + 16) = *(_DWORD *)(v12 + 16);
                *(__n128 *)v16 = v40;
                a5 = v176;
                *(_DWORD *)(v12 + 16) = v201;
                *(__n128 *)v12 = v176;
                if (*(_QWORD *)(a2 - 16) >= *(_QWORD *)(v12 + 4))
                  goto LABEL_31;
                v194 = *(_DWORD *)(v12 + 16);
                v169 = *(__n128 *)v12;
                v41 = *v9;
                *(_DWORD *)(v12 + 16) = *(_DWORD *)(a2 - 4);
                *(__n128 *)v12 = v41;
              }
              else
              {
                v194 = *(_DWORD *)(v16 + 16);
                v169 = *(__n128 *)v16;
                v21 = *v9;
                *(_DWORD *)(v16 + 16) = *(_DWORD *)(a2 - 4);
                *(__n128 *)v16 = v21;
              }
              a5 = v169;
              *(_DWORD *)(a2 - 4) = v194;
              *v9 = v169;
            }
LABEL_31:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_32;
LABEL_55:
            v42 = *(_QWORD *)(v12 + 4);
            if (*(_QWORD *)(v12 - 16) < v42)
              goto LABEL_56;
            if (v42 >= *(_QWORD *)(a2 - 16))
            {
              v84 = v12 + 20;
              do
              {
                v12 = v84;
                if (v84 >= a2)
                  break;
                v85 = *(_QWORD *)(v84 + 4);
                v84 += 20;
              }
              while (v42 >= v85);
            }
            else
            {
              v82 = v12;
              do
              {
                v12 = v82 + 20;
                v83 = *(_QWORD *)(v82 + 24);
                v82 += 20;
              }
              while (v42 >= v83);
            }
            v86 = a2;
            if (v12 < a2)
            {
              v87 = a2;
              do
              {
                v86 = v87 - 20;
                v88 = *(_QWORD *)(v87 - 16);
                v87 -= 20;
              }
              while (v42 < v88);
            }
            v89 = *(_DWORD *)a1;
            v90 = *(_QWORD *)(a1 + 12);
            while (v12 < v86)
            {
              v211 = *(_DWORD *)(v12 + 16);
              v186 = *(__n128 *)v12;
              v91 = *(__n128 *)v86;
              *(_DWORD *)(v12 + 16) = *(_DWORD *)(v86 + 16);
              *(__n128 *)v12 = v91;
              a5 = v186;
              *(_DWORD *)(v86 + 16) = v211;
              *(__n128 *)v86 = v186;
              do
              {
                v92 = *(_QWORD *)(v12 + 24);
                v12 += 20;
              }
              while (v42 >= v92);
              do
              {
                v93 = *(_QWORD *)(v86 - 16);
                v86 -= 20;
              }
              while (v42 < v93);
            }
            if (v12 - 20 != a1)
            {
              a5 = *(__n128 *)(v12 - 20);
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(v12 - 4);
              *(__n128 *)a1 = a5;
            }
            a4 = 0;
            *(_DWORD *)(v12 - 20) = v89;
            *(_QWORD *)(v12 - 16) = v42;
            *(_QWORD *)(v12 - 8) = v90;
            continue;
          }
          v18 = *(_QWORD *)(v16 + 4);
          if (v18 >= *(_QWORD *)(v12 + 4))
          {
            if (v17 < v18)
            {
              v195 = *(_DWORD *)(v16 + 16);
              v170 = *(__n128 *)v16;
              v22 = *v9;
              *(_DWORD *)(v16 + 16) = *(_DWORD *)(a2 - 4);
              *(__n128 *)v16 = v22;
              *(_DWORD *)(a2 - 4) = v195;
              *v9 = v170;
              if (*(_QWORD *)(v16 + 4) < *(_QWORD *)(v12 + 4))
              {
                v196 = *(_DWORD *)(v12 + 16);
                v171 = *(__n128 *)v12;
                v23 = *(__n128 *)v16;
                *(_DWORD *)(v12 + 16) = *(_DWORD *)(v16 + 16);
                *(__n128 *)v12 = v23;
                *(_DWORD *)(v16 + 16) = v196;
                *(__n128 *)v16 = v171;
              }
            }
          }
          else
          {
            if (v17 >= v18)
            {
              v199 = *(_DWORD *)(v12 + 16);
              v174 = *(__n128 *)v12;
              v26 = *(__n128 *)v16;
              *(_DWORD *)(v12 + 16) = *(_DWORD *)(v16 + 16);
              *(__n128 *)v12 = v26;
              *(_DWORD *)(v16 + 16) = v199;
              *(__n128 *)v16 = v174;
              if (*(_QWORD *)(a2 - 16) >= *(_QWORD *)(v16 + 4))
                goto LABEL_22;
              v193 = *(_DWORD *)(v16 + 16);
              v168 = *(__n128 *)v16;
              v27 = *v9;
              *(_DWORD *)(v16 + 16) = *(_DWORD *)(a2 - 4);
              *(__n128 *)v16 = v27;
            }
            else
            {
              v193 = *(_DWORD *)(v12 + 16);
              v168 = *(__n128 *)v12;
              v19 = *v9;
              *(_DWORD *)(v12 + 16) = *(_DWORD *)(a2 - 4);
              *(__n128 *)v12 = v19;
            }
            *(_DWORD *)(a2 - 4) = v193;
            *v9 = v168;
          }
LABEL_22:
          v28 = (__n128 *)(v12 + 20);
          v29 = v12 + 20 * v15;
          v30 = v29 - 20;
          v31 = *(_QWORD *)(v29 - 16);
          v32 = *(_QWORD *)(a2 - 36);
          if (v31 >= *(_QWORD *)(v12 + 24))
          {
            if (v32 < v31)
            {
              v200 = *(_DWORD *)(v30 + 16);
              v175 = *(__n128 *)v30;
              v36 = *v10;
              *(_DWORD *)(v30 + 16) = *(_DWORD *)(a2 - 24);
              *(__n128 *)v30 = v36;
              *(_DWORD *)(a2 - 24) = v200;
              *v10 = v175;
              if (*(_QWORD *)(v30 + 4) < *(_QWORD *)(v12 + 24))
              {
                v37 = *v28;
                v38 = *(_DWORD *)(v12 + 36);
                v39 = *(_DWORD *)(v30 + 16);
                *v28 = *(__n128 *)v30;
                *(_DWORD *)(v12 + 36) = v39;
                *(_DWORD *)(v30 + 16) = v38;
                *(__n128 *)v30 = v37;
              }
            }
          }
          else
          {
            if (v32 >= v31)
            {
              v43 = *v28;
              v44 = *(_DWORD *)(v12 + 36);
              v45 = *(_DWORD *)(v30 + 16);
              *v28 = *(__n128 *)v30;
              *(_DWORD *)(v12 + 36) = v45;
              *(_DWORD *)(v30 + 16) = v44;
              *(__n128 *)v30 = v43;
              if (*(_QWORD *)(a2 - 36) >= *(_QWORD *)(v30 + 4))
                goto LABEL_36;
              v202 = *(_DWORD *)(v30 + 16);
              v177 = *(__n128 *)v30;
              v46 = *v10;
              *(_DWORD *)(v30 + 16) = *(_DWORD *)(a2 - 24);
              *(__n128 *)v30 = v46;
              v33 = v177;
              *(_DWORD *)(a2 - 24) = v202;
            }
            else
            {
              v33 = *v28;
              v34 = *(_DWORD *)(v12 + 36);
              v35 = *(_DWORD *)(a2 - 24);
              *v28 = *v10;
              *(_DWORD *)(v12 + 36) = v35;
              *(_DWORD *)(a2 - 24) = v34;
            }
            *v10 = v33;
          }
LABEL_36:
          v47 = (__n128 *)(v12 + 40);
          v48 = v12 + 20 * v15;
          v49 = v48 + 20;
          v50 = *(_QWORD *)(v48 + 24);
          v51 = *(_QWORD *)(a2 - 56);
          if (v50 >= *(_QWORD *)(v12 + 44))
          {
            if (v51 < v50)
            {
              v203 = *(_DWORD *)(v49 + 16);
              v178 = *(__n128 *)v49;
              v55 = *v11;
              *(_DWORD *)(v49 + 16) = *(_DWORD *)(a2 - 44);
              *(__n128 *)v49 = v55;
              *(_DWORD *)(a2 - 44) = v203;
              *v11 = v178;
              if (*(_QWORD *)(v49 + 4) < *(_QWORD *)(v12 + 44))
              {
                v56 = *v47;
                v57 = *(_DWORD *)(v12 + 56);
                v58 = *(_DWORD *)(v49 + 16);
                *v47 = *(__n128 *)v49;
                *(_DWORD *)(v12 + 56) = v58;
                *(_DWORD *)(v49 + 16) = v57;
                *(__n128 *)v49 = v56;
              }
            }
          }
          else
          {
            if (v51 >= v50)
            {
              v59 = *v47;
              v60 = *(_DWORD *)(v12 + 56);
              v61 = *(_DWORD *)(v49 + 16);
              *v47 = *(__n128 *)v49;
              *(_DWORD *)(v12 + 56) = v61;
              *(_DWORD *)(v49 + 16) = v60;
              *(__n128 *)v49 = v59;
              if (*(_QWORD *)(a2 - 56) >= *(_QWORD *)(v49 + 4))
                goto LABEL_45;
              v204 = *(_DWORD *)(v49 + 16);
              v179 = *(__n128 *)v49;
              v62 = *v11;
              *(_DWORD *)(v49 + 16) = *(_DWORD *)(a2 - 44);
              *(__n128 *)v49 = v62;
              v52 = v179;
              *(_DWORD *)(a2 - 44) = v204;
            }
            else
            {
              v52 = *v47;
              v53 = *(_DWORD *)(v12 + 56);
              v54 = *(_DWORD *)(a2 - 44);
              *v47 = *v11;
              *(_DWORD *)(v12 + 56) = v54;
              *(_DWORD *)(a2 - 44) = v53;
            }
            *v11 = v52;
          }
LABEL_45:
          v63 = *(_QWORD *)(v16 + 4);
          v64 = *(_QWORD *)(v49 + 4);
          if (v63 >= *(_QWORD *)(v30 + 4))
          {
            if (v64 < v63)
            {
              v206 = *(_DWORD *)(v16 + 16);
              v181 = *(__n128 *)v16;
              *(_OWORD *)v16 = *(_OWORD *)v49;
              *(_DWORD *)(v16 + 16) = *(_DWORD *)(v49 + 16);
              *(_DWORD *)(v49 + 16) = v206;
              *(__n128 *)v49 = v181;
              if (*(_QWORD *)(v16 + 4) < *(_QWORD *)(v30 + 4))
              {
                v207 = *(_DWORD *)(v30 + 16);
                v182 = *(__n128 *)v30;
                *(_OWORD *)v30 = *(_OWORD *)v16;
                *(_DWORD *)(v30 + 16) = *(_DWORD *)(v16 + 16);
                *(_DWORD *)(v16 + 16) = v207;
                *(__n128 *)v16 = v182;
              }
            }
          }
          else
          {
            if (v64 >= v63)
            {
              v208 = *(_DWORD *)(v30 + 16);
              v183 = *(__n128 *)v30;
              *(_OWORD *)v30 = *(_OWORD *)v16;
              *(_DWORD *)(v30 + 16) = *(_DWORD *)(v16 + 16);
              *(_DWORD *)(v16 + 16) = v208;
              *(__n128 *)v16 = v183;
              if (*(_QWORD *)(v49 + 4) >= *(_QWORD *)(v16 + 4))
                goto LABEL_54;
              v205 = *(_DWORD *)(v16 + 16);
              v180 = *(__n128 *)v16;
              *(_OWORD *)v16 = *(_OWORD *)v49;
              *(_DWORD *)(v16 + 16) = *(_DWORD *)(v49 + 16);
            }
            else
            {
              v205 = *(_DWORD *)(v30 + 16);
              v180 = *(__n128 *)v30;
              *(_OWORD *)v30 = *(_OWORD *)v49;
              *(_DWORD *)(v30 + 16) = *(_DWORD *)(v49 + 16);
            }
            *(_DWORD *)(v49 + 16) = v205;
            *(__n128 *)v49 = v180;
          }
LABEL_54:
          v209 = *(_DWORD *)(v12 + 16);
          v184 = *(__n128 *)v12;
          v65 = *(__n128 *)v16;
          *(_DWORD *)(v12 + 16) = *(_DWORD *)(v16 + 16);
          *(__n128 *)v12 = v65;
          a5 = v184;
          *(_DWORD *)(v16 + 16) = v209;
          *(__n128 *)v16 = v184;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_55;
LABEL_32:
          v42 = *(_QWORD *)(v12 + 4);
LABEL_56:
          v66 = 0;
          v67 = *(_DWORD *)v12;
          v68 = *(_QWORD *)(v12 + 12);
          do
          {
            v69 = *(_QWORD *)(v12 + v66 + 24);
            v66 += 20;
          }
          while (v69 < v42);
          v70 = v12 + v66;
          v71 = a2;
          if (v66 == 20)
          {
            v74 = a2;
            while (v70 < v74)
            {
              v72 = v74 - 20;
              v75 = *(_QWORD *)(v74 - 16);
              v74 -= 20;
              if (v75 < v42)
                goto LABEL_64;
            }
            v72 = v74;
            v12 = v70;
          }
          else
          {
            do
            {
              v72 = v71 - 20;
              v73 = *(_QWORD *)(v71 - 16);
              v71 -= 20;
            }
            while (v73 >= v42);
LABEL_64:
            v12 = v70;
            if (v70 < v72)
            {
              v76 = v72;
              do
              {
                v210 = *(_DWORD *)(v12 + 16);
                v185 = *(__n128 *)v12;
                v77 = *(__n128 *)v76;
                *(_DWORD *)(v12 + 16) = *(_DWORD *)(v76 + 16);
                *(__n128 *)v12 = v77;
                a5 = v185;
                *(_DWORD *)(v76 + 16) = v210;
                *(__n128 *)v76 = v185;
                do
                {
                  v78 = *(_QWORD *)(v12 + 24);
                  v12 += 20;
                }
                while (v78 < v42);
                do
                {
                  v79 = *(_QWORD *)(v76 - 16);
                  v76 -= 20;
                }
                while (v79 >= v42);
              }
              while (v12 < v76);
            }
          }
          if (v12 - 20 != a1)
          {
            a5 = *(__n128 *)(v12 - 20);
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(v12 - 4);
            *(__n128 *)a1 = a5;
          }
          *(_DWORD *)(v12 - 20) = v67;
          *(_QWORD *)(v12 - 16) = v42;
          *(_QWORD *)(v12 - 8) = v68;
          if (v70 < v72)
            goto LABEL_75;
          v80 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBounds(void)::$_0 &,operations_research::sat::AllDifferentBoundsPropagator::VarValue *>(a1, v12 - 20, a5);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBounds(void)::$_0 &,operations_research::sat::AllDifferentBoundsPropagator::VarValue *>(v12, a2, v81))
          {
            if (v80)
              continue;
LABEL_75:
            std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBounds(void)::$_0 &,operations_research::sat::AllDifferentBoundsPropagator::VarValue *,false>(a1, v12 - 20, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v12 - 20;
          if (v80)
            return;
          goto LABEL_1;
        }
        v110 = (_DWORD *)(v12 + 20);
        v112 = v12 == a2 || v110 == (_DWORD *)a2;
        if ((a4 & 1) != 0)
        {
          if (!v112)
          {
            v113 = 0;
            v114 = (_QWORD *)v12;
            do
            {
              v116 = v110;
              v117 = v114[3];
              if (v117 < *(_QWORD *)((char *)v114 + 4))
              {
                v118 = *v116;
                v119 = v114[4];
                v120 = v113;
                do
                {
                  v121 = v12 + v120;
                  *(_OWORD *)(v121 + 20) = *(_OWORD *)(v12 + v120);
                  *(_DWORD *)(v121 + 36) = *(_DWORD *)(v12 + v120 + 16);
                  if (!v120)
                  {
                    v115 = v12;
                    goto LABEL_120;
                  }
                  v120 -= 20;
                }
                while (v117 < *(_QWORD *)(v121 - 16));
                v115 = v12 + v120 + 20;
LABEL_120:
                *(_DWORD *)v115 = v118;
                *(_QWORD *)(v115 + 4) = v117;
                *(_QWORD *)(v115 + 12) = v119;
              }
              v110 = v116 + 5;
              v113 += 20;
              v114 = v116;
            }
            while (v116 + 5 != (_DWORD *)a2);
          }
        }
        else if (!v112)
        {
          do
          {
            v160 = v110;
            v161 = *(_QWORD *)(a1 + 24);
            if (v161 < *(_QWORD *)(a1 + 4))
            {
              v162 = *v110;
              v163 = *(_QWORD *)(a1 + 32);
              v164 = v160;
              do
              {
                *(_OWORD *)v164 = *(_OWORD *)(v164 - 5);
                v164[4] = *(v164 - 1);
                v165 = *(_QWORD *)(v164 - 9);
                v164 -= 5;
              }
              while (v161 < v165);
              *v164 = v162;
              *(_QWORD *)(v164 + 1) = v161;
              *(_QWORD *)(v164 + 3) = v163;
            }
            v110 = v160 + 5;
            a1 = (uint64_t)v160;
          }
          while (v160 + 5 != (_DWORD *)a2);
        }
        return;
    }
  }
}

  v9 = (__n128 *)(a2 - 20);
  v10 = (__n128 *)(a2 - 40);
  v11 = (__n128 *)(a2 - 60);
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = a2 - v12;
    v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v12) >> 2);
    switch(v14)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*(_QWORD *)(a2 - 8) < *(_QWORD *)(v12 + 12))
        {
          v214 = *(_DWORD *)(v12 + 16);
          v183 = *(__n128 *)v12;
          v92 = *(_OWORD *)(a2 - 20);
          *(_DWORD *)(v12 + 16) = *(_DWORD *)(a2 - 4);
          *(_OWORD *)v12 = v92;
          *(_DWORD *)(a2 - 4) = v214;
          *(__n128 *)(a2 - 20) = v183;
        }
        return;
      case 3:
        v93 = (__n128 *)(v12 + 20);
        v94 = *(_QWORD *)(v12 + 32);
        v95 = *(_QWORD *)(a2 - 8);
        if (v94 >= *(_QWORD *)(v12 + 12))
        {
          if (v95 < v94)
          {
            v149 = *v93;
            v150 = *(_DWORD *)(v12 + 36);
            v151 = *(_DWORD *)(a2 - 4);
            *v93 = *v9;
            *(_DWORD *)(v12 + 36) = v151;
            *(_DWORD *)(a2 - 4) = v150;
            *v9 = v149;
            if (*(_QWORD *)(v12 + 32) < *(_QWORD *)(v12 + 12))
            {
              v218 = *(_DWORD *)(v12 + 16);
              v189 = *(__n128 *)v12;
              *(__n128 *)v12 = *v93;
              *(_DWORD *)(v12 + 16) = *(_DWORD *)(v12 + 36);
              *v93 = v189;
              *(_DWORD *)(v12 + 36) = v218;
            }
          }
        }
        else
        {
          if (v95 >= v94)
          {
            v219 = *(_DWORD *)(v12 + 16);
            v191 = *(__n128 *)v12;
            *(__n128 *)v12 = *v93;
            *(_DWORD *)(v12 + 16) = *(_DWORD *)(v12 + 36);
            *v93 = v191;
            *(_DWORD *)(v12 + 36) = v219;
            if (*(_QWORD *)(a2 - 8) >= *(_QWORD *)(v12 + 32))
              return;
            v97 = *v93;
            v156 = *(_DWORD *)(v12 + 36);
            v157 = *(_DWORD *)(a2 - 4);
            *v93 = *v9;
            *(_DWORD *)(v12 + 36) = v157;
            *(_DWORD *)(a2 - 4) = v156;
          }
          else
          {
            v215 = *(_DWORD *)(v12 + 16);
            v184 = *(__n128 *)v12;
            v96 = *v9;
            *(_DWORD *)(v12 + 16) = *(_DWORD *)(a2 - 4);
            *(__n128 *)v12 = v96;
            v97 = v184;
            *(_DWORD *)(a2 - 4) = v215;
          }
          *v9 = v97;
        }
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBoundsInternal(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,absl::lts_2020_02_25::Span<operations_research::sat::AllDifferentBoundsPropagator::VarValue>)::$_0 &,operations_research::sat::AllDifferentBoundsPropagator::VarValue*>(v12, v12 + 20, v12 + 40, a2 - 20, a5);
        return;
      case 5:
        v98 = (__n128 *)(v12 + 20);
        v99 = (__n128 *)(v12 + 40);
        v100 = (__int128 *)(v12 + 60);
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBoundsInternal(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,absl::lts_2020_02_25::Span<operations_research::sat::AllDifferentBoundsPropagator::VarValue>)::$_0 &,operations_research::sat::AllDifferentBoundsPropagator::VarValue*>(v12, v12 + 20, v12 + 40, v12 + 60, a5);
        if (*(_QWORD *)(a2 - 8) < *(_QWORD *)(v12 + 72))
        {
          v101 = *v100;
          v102 = *(_DWORD *)(v12 + 76);
          v103 = *(_DWORD *)(a2 - 4);
          *v100 = *(_OWORD *)(a2 - 20);
          *(_DWORD *)(v12 + 76) = v103;
          *(_DWORD *)(a2 - 4) = v102;
          *(_OWORD *)(a2 - 20) = v101;
          if (*(_QWORD *)(v12 + 72) < *(_QWORD *)(v12 + 52))
          {
            v104 = *(_DWORD *)(v12 + 56);
            v105 = *v99;
            *v99 = (__n128)*v100;
            *(_DWORD *)(v12 + 56) = *(_DWORD *)(v12 + 76);
            *v100 = (__int128)v105;
            *(_DWORD *)(v12 + 76) = v104;
            if (*(_QWORD *)(v12 + 52) < *(_QWORD *)(v12 + 32))
            {
              v106 = *(_DWORD *)(v12 + 36);
              v107 = *v98;
              *v98 = *v99;
              *(_DWORD *)(v12 + 36) = *(_DWORD *)(v12 + 56);
              *v99 = v107;
              *(_DWORD *)(v12 + 56) = v106;
              if (*(_QWORD *)(v12 + 32) < *(_QWORD *)(v12 + 12))
              {
                v216 = *(_DWORD *)(v12 + 16);
                v185 = *(__n128 *)v12;
                *(__n128 *)v12 = *v98;
                *(_DWORD *)(v12 + 16) = *(_DWORD *)(v12 + 36);
                *v98 = v185;
                *(_DWORD *)(v12 + 36) = v216;
              }
            }
          }
        }
        return;
      default:
        if (v13 > 479)
        {
          if (!a3)
          {
            if (v12 != a2)
            {
              v118 = (unint64_t)(v14 - 2) >> 1;
              v119 = v118;
              do
              {
                if (v118 >= v119)
                {
                  v121 = (2 * v119) | 1;
                  v122 = v12 + 20 * v121;
                  if (2 * v119 + 2 < v14)
                  {
                    v123 = *(_QWORD *)(v122 + 12);
                    v124 = *(_QWORD *)(v122 + 32);
                    v122 += 20 * (v123 < v124);
                    if (v123 < v124)
                      v121 = 2 * v119 + 2;
                  }
                  v125 = v12 + 20 * v119;
                  v126 = *(_QWORD *)(v125 + 12);
                  if (*(_QWORD *)(v122 + 12) >= v126)
                  {
                    v193 = *(_DWORD *)(v125 + 8);
                    v187 = *(_QWORD *)v125;
                    do
                    {
                      v127 = v125;
                      v125 = v122;
                      v128 = *(_OWORD *)v122;
                      *(_DWORD *)(v127 + 16) = *(_DWORD *)(v122 + 16);
                      *(_OWORD *)v127 = v128;
                      if (v118 < v121)
                        break;
                      v129 = (2 * v121) | 1;
                      v122 = v12 + 20 * v129;
                      v130 = 2 * v121 + 2;
                      if (v130 < v14)
                      {
                        v131 = *(_QWORD *)(v122 + 12);
                        v132 = *(_QWORD *)(v122 + 32);
                        v122 += 20 * (v131 < v132);
                        if (v131 < v132)
                          v129 = v130;
                      }
                      v121 = v129;
                    }
                    while (*(_QWORD *)(v122 + 12) >= v126);
                    *(_DWORD *)(v125 + 8) = v193;
                    *(_QWORD *)v125 = v187;
                    *(_QWORD *)(v125 + 12) = v126;
                  }
                }
                v120 = v119-- <= 0;
              }
              while (!v120);
              v133 = v13 / 0x14uLL;
              do
              {
                v134 = 0;
                v217 = *(_DWORD *)(v12 + 16);
                v188 = *(__n128 *)v12;
                v135 = v12;
                do
                {
                  v137 = v135 + 20 * v134 + 20;
                  v138 = (2 * v134) | 1;
                  v139 = 2 * v134 + 2;
                  if (v139 < v133)
                  {
                    v140 = *(_QWORD *)(v137 + 12);
                    v141 = *(_QWORD *)(v137 + 32);
                    v137 += 20 * (v140 < v141);
                    if (v140 < v141)
                      v138 = v139;
                  }
                  v136 = *(_OWORD *)v137;
                  *(_DWORD *)(v135 + 16) = *(_DWORD *)(v137 + 16);
                  *(_OWORD *)v135 = v136;
                  v135 = v137;
                  v134 = v138;
                }
                while (v138 <= (uint64_t)((unint64_t)(v133 - 2) >> 1));
                a2 -= 20;
                if (v137 == a2)
                {
                  *(_DWORD *)(v137 + 16) = v217;
                  *(__n128 *)v137 = v188;
                }
                else
                {
                  v142 = *(_OWORD *)a2;
                  *(_DWORD *)(v137 + 16) = *(_DWORD *)(a2 + 16);
                  *(_OWORD *)v137 = v142;
                  *(_DWORD *)(a2 + 16) = v217;
                  *(__n128 *)a2 = v188;
                  v143 = v137 - v12 + 20;
                  if (v143 >= 21)
                  {
                    v144 = (v143 / 0x14uLL - 2) >> 1;
                    v145 = v12 + 20 * v144;
                    v146 = *(_QWORD *)(v137 + 12);
                    if (*(_QWORD *)(v145 + 12) < v146)
                    {
                      v163 = *(_DWORD *)(v137 + 8);
                      v160 = *(_QWORD *)v137;
                      do
                      {
                        v147 = v137;
                        v137 = v145;
                        v148 = *(_OWORD *)v145;
                        *(_DWORD *)(v147 + 16) = *(_DWORD *)(v145 + 16);
                        *(_OWORD *)v147 = v148;
                        if (!v144)
                          break;
                        v144 = (v144 - 1) >> 1;
                        v145 = v12 + 20 * v144;
                      }
                      while (*(_QWORD *)(v145 + 12) < v146);
                      *(_DWORD *)(v137 + 8) = v163;
                      *(_QWORD *)v137 = v160;
                      *(_QWORD *)(v137 + 12) = v146;
                    }
                  }
                }
                v120 = v133-- <= 2;
              }
              while (!v120);
            }
            return;
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = v12 + 20 * ((unint64_t)v14 >> 1);
          v17 = *(_QWORD *)(a2 - 8);
          if ((unint64_t)v13 < 0xA01)
          {
            v20 = *(_QWORD *)(v12 + 12);
            if (v20 >= *(_QWORD *)(v16 + 12))
            {
              if (v17 < v20)
              {
                v199 = *(_DWORD *)(v12 + 16);
                v168 = *(__n128 *)v12;
                v24 = *v9;
                *(_DWORD *)(v12 + 16) = *(_DWORD *)(a2 - 4);
                *(__n128 *)v12 = v24;
                a5 = v168;
                *(_DWORD *)(a2 - 4) = v199;
                *v9 = v168;
                if (*(_QWORD *)(v12 + 12) < *(_QWORD *)(v16 + 12))
                {
                  v200 = *(_DWORD *)(v16 + 16);
                  v169 = *(__n128 *)v16;
                  v25 = *(__n128 *)v12;
                  *(_DWORD *)(v16 + 16) = *(_DWORD *)(v12 + 16);
                  *(__n128 *)v16 = v25;
                  a5 = v169;
                  *(_DWORD *)(v12 + 16) = v200;
                  *(__n128 *)v12 = v169;
                  --a3;
                  if ((a4 & 1) != 0)
                    goto LABEL_32;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v17 >= v20)
              {
                v203 = *(_DWORD *)(v16 + 16);
                v172 = *(__n128 *)v16;
                v40 = *(__n128 *)v12;
                *(_DWORD *)(v16 + 16) = *(_DWORD *)(v12 + 16);
                *(__n128 *)v16 = v40;
                a5 = v172;
                *(_DWORD *)(v12 + 16) = v203;
                *(__n128 *)v12 = v172;
                if (*(_QWORD *)(a2 - 8) >= *(_QWORD *)(v12 + 12))
                  goto LABEL_31;
                v196 = *(_DWORD *)(v12 + 16);
                v165 = *(__n128 *)v12;
                v41 = *v9;
                *(_DWORD *)(v12 + 16) = *(_DWORD *)(a2 - 4);
                *(__n128 *)v12 = v41;
              }
              else
              {
                v196 = *(_DWORD *)(v16 + 16);
                v165 = *(__n128 *)v16;
                v21 = *v9;
                *(_DWORD *)(v16 + 16) = *(_DWORD *)(a2 - 4);
                *(__n128 *)v16 = v21;
              }
              a5 = v165;
              *(_DWORD *)(a2 - 4) = v196;
              *v9 = v165;
            }
LABEL_31:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_32;
LABEL_55:
            v42 = *(_QWORD *)(v12 + 12);
            if (*(_QWORD *)(v12 - 8) < v42)
              goto LABEL_56;
            v162 = *(_DWORD *)(v12 + 8);
            v159 = *(_QWORD *)v12;
            if (v42 >= *(_QWORD *)(a2 - 8))
            {
              v83 = v12 + 20;
              do
              {
                v12 = v83;
                if (v83 >= a2)
                  break;
                v84 = *(_QWORD *)(v83 + 12);
                v83 += 20;
              }
              while (v42 >= v84);
            }
            else
            {
              v81 = v12;
              do
              {
                v12 = v81 + 20;
                v82 = *(_QWORD *)(v81 + 32);
                v81 += 20;
              }
              while (v42 >= v82);
            }
            v85 = a2;
            if (v12 < a2)
            {
              v86 = a2;
              do
              {
                v85 = v86 - 20;
                v87 = *(_QWORD *)(v86 - 8);
                v86 -= 20;
              }
              while (v42 < v87);
            }
            while (v12 < v85)
            {
              v213 = *(_DWORD *)(v12 + 16);
              v182 = *(__n128 *)v12;
              v88 = *(__n128 *)v85;
              *(_DWORD *)(v12 + 16) = *(_DWORD *)(v85 + 16);
              *(__n128 *)v12 = v88;
              a5 = v182;
              *(_DWORD *)(v85 + 16) = v213;
              *(__n128 *)v85 = v182;
              do
              {
                v89 = *(_QWORD *)(v12 + 32);
                v12 += 20;
              }
              while (v42 >= v89);
              do
              {
                v90 = *(_QWORD *)(v85 - 8);
                v85 -= 20;
              }
              while (v42 < v90);
            }
            v91 = (__n128 *)(v12 - 20);
            if (v12 - 20 != a1)
            {
              a5 = *v91;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(v12 - 4);
              *(__n128 *)a1 = a5;
            }
            a4 = 0;
            *(_DWORD *)(v12 - 12) = v162;
            v91->n128_u64[0] = v159;
            *(_QWORD *)(v12 - 8) = v42;
            continue;
          }
          v18 = *(_QWORD *)(v16 + 12);
          if (v18 >= *(_QWORD *)(v12 + 12))
          {
            if (v17 < v18)
            {
              v197 = *(_DWORD *)(v16 + 16);
              v166 = *(__n128 *)v16;
              v22 = *v9;
              *(_DWORD *)(v16 + 16) = *(_DWORD *)(a2 - 4);
              *(__n128 *)v16 = v22;
              *(_DWORD *)(a2 - 4) = v197;
              *v9 = v166;
              if (*(_QWORD *)(v16 + 12) < *(_QWORD *)(v12 + 12))
              {
                v198 = *(_DWORD *)(v12 + 16);
                v167 = *(__n128 *)v12;
                v23 = *(__n128 *)v16;
                *(_DWORD *)(v12 + 16) = *(_DWORD *)(v16 + 16);
                *(__n128 *)v12 = v23;
                *(_DWORD *)(v16 + 16) = v198;
                *(__n128 *)v16 = v167;
              }
            }
          }
          else
          {
            if (v17 >= v18)
            {
              v201 = *(_DWORD *)(v12 + 16);
              v170 = *(__n128 *)v12;
              v26 = *(__n128 *)v16;
              *(_DWORD *)(v12 + 16) = *(_DWORD *)(v16 + 16);
              *(__n128 *)v12 = v26;
              *(_DWORD *)(v16 + 16) = v201;
              *(__n128 *)v16 = v170;
              if (*(_QWORD *)(a2 - 8) >= *(_QWORD *)(v16 + 12))
                goto LABEL_22;
              v195 = *(_DWORD *)(v16 + 16);
              v164 = *(__n128 *)v16;
              v27 = *v9;
              *(_DWORD *)(v16 + 16) = *(_DWORD *)(a2 - 4);
              *(__n128 *)v16 = v27;
            }
            else
            {
              v195 = *(_DWORD *)(v12 + 16);
              v164 = *(__n128 *)v12;
              v19 = *v9;
              *(_DWORD *)(v12 + 16) = *(_DWORD *)(a2 - 4);
              *(__n128 *)v12 = v19;
            }
            *(_DWORD *)(a2 - 4) = v195;
            *v9 = v164;
          }
LABEL_22:
          v28 = (__n128 *)(v12 + 20);
          v29 = v12 + 20 * v15;
          v30 = v29 - 20;
          v31 = *(_QWORD *)(v29 - 8);
          v32 = *(_QWORD *)(a2 - 28);
          if (v31 >= *(_QWORD *)(v12 + 32))
          {
            if (v32 < v31)
            {
              v202 = *(_DWORD *)(v30 + 16);
              v171 = *(__n128 *)v30;
              v36 = *v10;
              *(_DWORD *)(v30 + 16) = *(_DWORD *)(a2 - 24);
              *(__n128 *)v30 = v36;
              *(_DWORD *)(a2 - 24) = v202;
              *v10 = v171;
              if (*(_QWORD *)(v30 + 12) < *(_QWORD *)(v12 + 32))
              {
                v37 = *v28;
                v38 = *(_DWORD *)(v12 + 36);
                v39 = *(_DWORD *)(v30 + 16);
                *v28 = *(__n128 *)v30;
                *(_DWORD *)(v12 + 36) = v39;
                *(_DWORD *)(v30 + 16) = v38;
                *(__n128 *)v30 = v37;
              }
            }
          }
          else
          {
            if (v32 >= v31)
            {
              v43 = *v28;
              v44 = *(_DWORD *)(v12 + 36);
              v45 = *(_DWORD *)(v30 + 16);
              *v28 = *(__n128 *)v30;
              *(_DWORD *)(v12 + 36) = v45;
              *(_DWORD *)(v30 + 16) = v44;
              *(__n128 *)v30 = v43;
              if (*(_QWORD *)(a2 - 28) >= *(_QWORD *)(v30 + 12))
                goto LABEL_36;
              v204 = *(_DWORD *)(v30 + 16);
              v173 = *(__n128 *)v30;
              v46 = *v10;
              *(_DWORD *)(v30 + 16) = *(_DWORD *)(a2 - 24);
              *(__n128 *)v30 = v46;
              v33 = v173;
              *(_DWORD *)(a2 - 24) = v204;
            }
            else
            {
              v33 = *v28;
              v34 = *(_DWORD *)(v12 + 36);
              v35 = *(_DWORD *)(a2 - 24);
              *v28 = *v10;
              *(_DWORD *)(v12 + 36) = v35;
              *(_DWORD *)(a2 - 24) = v34;
            }
            *v10 = v33;
          }
LABEL_36:
          v47 = (__n128 *)(v12 + 40);
          v48 = v12 + 20 * v15;
          v49 = v48 + 20;
          v50 = *(_QWORD *)(v48 + 32);
          v51 = *(_QWORD *)(a2 - 48);
          if (v50 >= *(_QWORD *)(v12 + 52))
          {
            if (v51 < v50)
            {
              v205 = *(_DWORD *)(v49 + 16);
              v174 = *(__n128 *)v49;
              v55 = *v11;
              *(_DWORD *)(v49 + 16) = *(_DWORD *)(a2 - 44);
              *(__n128 *)v49 = v55;
              *(_DWORD *)(a2 - 44) = v205;
              *v11 = v174;
              if (*(_QWORD *)(v49 + 12) < *(_QWORD *)(v12 + 52))
              {
                v56 = *v47;
                v57 = *(_DWORD *)(v12 + 56);
                v58 = *(_DWORD *)(v49 + 16);
                *v47 = *(__n128 *)v49;
                *(_DWORD *)(v12 + 56) = v58;
                *(_DWORD *)(v49 + 16) = v57;
                *(__n128 *)v49 = v56;
              }
            }
          }
          else
          {
            if (v51 >= v50)
            {
              v59 = *v47;
              v60 = *(_DWORD *)(v12 + 56);
              v61 = *(_DWORD *)(v49 + 16);
              *v47 = *(__n128 *)v49;
              *(_DWORD *)(v12 + 56) = v61;
              *(_DWORD *)(v49 + 16) = v60;
              *(__n128 *)v49 = v59;
              if (*(_QWORD *)(a2 - 48) >= *(_QWORD *)(v49 + 12))
                goto LABEL_45;
              v206 = *(_DWORD *)(v49 + 16);
              v175 = *(__n128 *)v49;
              v62 = *v11;
              *(_DWORD *)(v49 + 16) = *(_DWORD *)(a2 - 44);
              *(__n128 *)v49 = v62;
              v52 = v175;
              *(_DWORD *)(a2 - 44) = v206;
            }
            else
            {
              v52 = *v47;
              v53 = *(_DWORD *)(v12 + 56);
              v54 = *(_DWORD *)(a2 - 44);
              *v47 = *v11;
              *(_DWORD *)(v12 + 56) = v54;
              *(_DWORD *)(a2 - 44) = v53;
            }
            *v11 = v52;
          }
LABEL_45:
          v63 = *(_QWORD *)(v16 + 12);
          v64 = *(_QWORD *)(v49 + 12);
          if (v63 >= *(_QWORD *)(v30 + 12))
          {
            if (v64 < v63)
            {
              v208 = *(_DWORD *)(v16 + 16);
              v177 = *(__n128 *)v16;
              *(_OWORD *)v16 = *(_OWORD *)v49;
              *(_DWORD *)(v16 + 16) = *(_DWORD *)(v49 + 16);
              *(_DWORD *)(v49 + 16) = v208;
              *(__n128 *)v49 = v177;
              if (*(_QWORD *)(v16 + 12) < *(_QWORD *)(v30 + 12))
              {
                v209 = *(_DWORD *)(v30 + 16);
                v178 = *(__n128 *)v30;
                *(_OWORD *)v30 = *(_OWORD *)v16;
                *(_DWORD *)(v30 + 16) = *(_DWORD *)(v16 + 16);
                *(_DWORD *)(v16 + 16) = v209;
                *(__n128 *)v16 = v178;
              }
            }
          }
          else
          {
            if (v64 >= v63)
            {
              v210 = *(_DWORD *)(v30 + 16);
              v179 = *(__n128 *)v30;
              *(_OWORD *)v30 = *(_OWORD *)v16;
              *(_DWORD *)(v30 + 16) = *(_DWORD *)(v16 + 16);
              *(_DWORD *)(v16 + 16) = v210;
              *(__n128 *)v16 = v179;
              if (*(_QWORD *)(v49 + 12) >= *(_QWORD *)(v16 + 12))
                goto LABEL_54;
              v207 = *(_DWORD *)(v16 + 16);
              v176 = *(__n128 *)v16;
              *(_OWORD *)v16 = *(_OWORD *)v49;
              *(_DWORD *)(v16 + 16) = *(_DWORD *)(v49 + 16);
            }
            else
            {
              v207 = *(_DWORD *)(v30 + 16);
              v176 = *(__n128 *)v30;
              *(_OWORD *)v30 = *(_OWORD *)v49;
              *(_DWORD *)(v30 + 16) = *(_DWORD *)(v49 + 16);
            }
            *(_DWORD *)(v49 + 16) = v207;
            *(__n128 *)v49 = v176;
          }
LABEL_54:
          v211 = *(_DWORD *)(v12 + 16);
          v180 = *(__n128 *)v12;
          v65 = *(__n128 *)v16;
          *(_DWORD *)(v12 + 16) = *(_DWORD *)(v16 + 16);
          *(__n128 *)v12 = v65;
          a5 = v180;
          *(_DWORD *)(v16 + 16) = v211;
          *(__n128 *)v16 = v180;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_55;
LABEL_32:
          v42 = *(_QWORD *)(v12 + 12);
LABEL_56:
          v66 = 0;
          v161 = *(_DWORD *)(v12 + 8);
          v158 = *(_QWORD *)v12;
          do
          {
            v67 = *(_QWORD *)(v12 + v66 + 32);
            v66 += 20;
          }
          while (v67 < v42);
          v68 = v12 + v66;
          v69 = a2;
          if (v66 == 20)
          {
            v72 = a2;
            while (v68 < v72)
            {
              v70 = v72 - 20;
              v73 = *(_QWORD *)(v72 - 8);
              v72 -= 20;
              if (v73 < v42)
                goto LABEL_64;
            }
            v70 = v72;
            v12 = v68;
          }
          else
          {
            do
            {
              v70 = v69 - 20;
              v71 = *(_QWORD *)(v69 - 8);
              v69 -= 20;
            }
            while (v71 >= v42);
LABEL_64:
            v12 = v68;
            if (v68 < v70)
            {
              v74 = v70;
              do
              {
                v212 = *(_DWORD *)(v12 + 16);
                v181 = *(__n128 *)v12;
                v75 = *(__n128 *)v74;
                *(_DWORD *)(v12 + 16) = *(_DWORD *)(v74 + 16);
                *(__n128 *)v12 = v75;
                a5 = v181;
                *(_DWORD *)(v74 + 16) = v212;
                *(__n128 *)v74 = v181;
                do
                {
                  v76 = *(_QWORD *)(v12 + 32);
                  v12 += 20;
                }
                while (v76 < v42);
                do
                {
                  v77 = *(_QWORD *)(v74 - 8);
                  v74 -= 20;
                }
                while (v77 >= v42);
              }
              while (v12 < v74);
            }
          }
          v78 = (__n128 *)(v12 - 20);
          if (v12 - 20 != a1)
          {
            a5 = *v78;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(v12 - 4);
            *(__n128 *)a1 = a5;
          }
          *(_DWORD *)(v12 - 12) = v161;
          v78->n128_u64[0] = v158;
          *(_QWORD *)(v12 - 8) = v42;
          if (v68 < v70)
            goto LABEL_75;
          v79 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBoundsInternal(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,absl::lts_2020_02_25::Span<operations_research::sat::AllDifferentBoundsPropagator::VarValue>)::$_0 &,operations_research::sat::AllDifferentBoundsPropagator::VarValue*>(a1, v12 - 20, a5);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBoundsInternal(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,absl::lts_2020_02_25::Span<operations_research::sat::AllDifferentBoundsPropagator::VarValue>)::$_0 &,operations_research::sat::AllDifferentBoundsPropagator::VarValue*>(v12, a2, v80))
          {
            if (v79)
              continue;
LABEL_75:
            std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBoundsInternal(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,absl::lts_2020_02_25::Span<operations_research::sat::AllDifferentBoundsPropagator::VarValue>)::$_0 &,operations_research::sat::AllDifferentBoundsPropagator::VarValue*,false>(a1, v12 - 20, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v12 - 20;
          if (v79)
            return;
          goto LABEL_1;
        }
        v108 = v12 + 20;
        v110 = v12 == a2 || v108 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v110)
          {
            v111 = 0;
            v112 = v12;
            do
            {
              v114 = *(_QWORD *)(v112 + 32);
              v115 = *(_QWORD *)(v112 + 12);
              v112 = v108;
              if (v114 < v115)
              {
                v192 = *(_DWORD *)(v108 + 8);
                v186 = *(_QWORD *)v108;
                v116 = v111;
                do
                {
                  v117 = v12 + v116;
                  *(_OWORD *)(v117 + 20) = *(_OWORD *)(v12 + v116);
                  *(_DWORD *)(v117 + 36) = *(_DWORD *)(v12 + v116 + 16);
                  if (!v116)
                  {
                    v113 = v12;
                    goto LABEL_119;
                  }
                  v116 -= 20;
                }
                while (v114 < *(_QWORD *)(v117 - 8));
                v113 = v12 + v116 + 20;
LABEL_119:
                *(_DWORD *)(v113 + 8) = v192;
                *(_QWORD *)v113 = v186;
                *(_QWORD *)(v113 + 12) = v114;
              }
              v108 = v112 + 20;
              v111 += 20;
            }
            while (v112 + 20 != a2);
          }
        }
        else if (!v110)
        {
          do
          {
            v152 = *(_QWORD *)(a1 + 32);
            v153 = *(_QWORD *)(a1 + 12);
            a1 = v108;
            if (v152 < v153)
            {
              v194 = *(_DWORD *)(v108 + 8);
              v190 = *(_QWORD *)v108;
              v154 = v108;
              do
              {
                *(_OWORD *)v154 = *(_OWORD *)(v154 - 20);
                *(_DWORD *)(v154 + 16) = *(_DWORD *)(v154 - 4);
                v155 = *(_QWORD *)(v154 - 28);
                v154 -= 20;
              }
              while (v152 < v155);
              *(_DWORD *)(v154 + 8) = v194;
              *(_QWORD *)v154 = v190;
              *(_QWORD *)(v154 + 12) = v152;
            }
            v108 = a1 + 20;
          }
          while (a1 + 20 != a2);
        }
        return;
    }
  }
}

  v295 = a2 - 3;
  v290 = a2 - 9;
  v291 = a2 - 6;
  v7 = a1;
  v306 = (unint64_t)a2;
  while (2)
  {
    v8 = (char *)a2 - (char *)v7;
    v9 = 0xAAAAAAAAAAAAAAABLL * (a2 - v7);
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v129 = (_BYTE *)*(a2 - 3);
        v128 = (_BYTE *)*(a2 - 2);
        v130 = v128 - v129;
        if (v128 == v129)
        {
          v132 = 0;
          v131 = 0;
          v289 = v7[1];
          v134 = v289 - *v7;
          if (v289 != *v7)
            goto LABEL_186;
        }
        else
        {
          if (v130 < 0)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v131 = (char *)operator new(v128 - v129);
          v132 = &v131[4 * (v130 >> 2)];
          memcpy(v131, v129, v130);
          v133 = v7[1];
          v134 = v133 - *v7;
          if (v133 != *v7)
          {
LABEL_186:
            if ((v134 & 0x8000000000000000) != 0)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v316 = operator new(v134);
            v135 = v132 - v131 > v134;
            operator delete(v316);
            if (v131)
              goto LABEL_188;
            goto LABEL_189;
          }
        }
        v135 = v132 != v131;
        if (v131)
LABEL_188:
          operator delete(v131);
LABEL_189:
        if (v135)
        {
          v136 = *v7;
          *v7 = *(a2 - 3);
          *(a2 - 3) = v136;
          v137 = v7[1];
          v7[1] = *(a2 - 2);
          *(a2 - 2) = v137;
          v138 = v7[2];
          v7[2] = *(a2 - 1);
          *(a2 - 1) = v138;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*>(v7, v7 + 3, v295);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*>(v7, v7 + 3, v7 + 6, v295);
        return;
      case 5uLL:
        std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*,0>(v7, v7 + 3, v7 + 6, v7 + 9, v295);
        return;
      default:
        v313 = v7;
        if (v8 <= 575)
        {
          if ((a4 & 1) != 0)
          {
            if (v7 == a2)
              return;
            v139 = v7 + 3;
            if (v7 + 3 == a2)
              return;
            v140 = 0;
            v141 = v7;
            while (1)
            {
              v243 = v139;
              v245 = (_BYTE *)v141[3];
              v244 = (_BYTE *)v141[4];
              v246 = v244 - v245;
              if (v244 == v245)
              {
                v248 = 0;
                v247 = 0;
                v259 = v141[1];
                v250 = v259 - *v141;
                if (v259 == *v141)
                  goto LABEL_326;
              }
              else
              {
                if (v246 < 0)
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                v247 = (char *)operator new(v244 - v245);
                v248 = &v247[4 * (v246 >> 2)];
                memcpy(v247, v245, v246);
                v249 = v141[1];
                v250 = v249 - *v141;
                if (v249 == *v141)
                {
LABEL_326:
                  v251 = v248 != v247;
                  if (!v247)
                    goto LABEL_317;
                  goto LABEL_316;
                }
              }
              if ((v250 & 0x8000000000000000) != 0)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v338 = operator new(v250);
              v251 = v248 - v247 > v250;
              operator delete(v338);
              if (!v247)
                goto LABEL_317;
LABEL_316:
              operator delete(v247);
LABEL_317:
              if (v251)
              {
                v252 = (_BYTE *)*v243;
                v253 = (_BYTE *)v141[4];
                v254 = v141[5];
                v243[1] = 0;
                v243[2] = 0;
                *v243 = 0;
                v255 = v253 - v252;
                if (v253 != v252)
                {
                  if ((v255 & 0x8000000000000000) != 0)
                  {
                    *(_OWORD *)(v141 + 3) = *(_OWORD *)v141;
                    v243[2] = v141[2];
                    *v141 = 0;
                    v141[1] = 0;
                    v141[2] = 0;
                    v242 = v7;
                    if (v141 != v7)
                      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                    goto LABEL_309;
                  }
                  v312 = v254;
                  v260 = 0;
                  for (i = v140; ; i -= 24)
                  {
                    v262 = (char *)v313 + i;
                    if (v260)
                    {
                      *((_QWORD *)v262 + 4) = v260;
                      operator delete(v260);
                      *((_QWORD *)v262 + 3) = 0;
                      *((_QWORD *)v262 + 4) = 0;
                      *((_QWORD *)v262 + 5) = 0;
                    }
                    *(_OWORD *)(v262 + 24) = *(_OWORD *)v262;
                    *((_QWORD *)v262 + 5) = *((_QWORD *)v262 + 2);
                    *((_QWORD *)v262 + 1) = 0;
                    *((_QWORD *)v262 + 2) = 0;
                    *(_QWORD *)v262 = 0;
                    if (!i)
                    {
                      v7 = v313;
                      v242 = v313;
                      a2 = (uint64_t *)v306;
                      v254 = v312;
                      goto LABEL_309;
                    }
                    v263 = operator new(v253 - v252);
                    memcpy(v263, v252, v253 - v252);
                    v265 = *(uint64_t *)((char *)v313 + i - 24);
                    v264 = *(uint64_t *)((char *)v313 + i - 16);
                    v266 = v264 - v265;
                    if (v264 == v265)
                    {
                      operator delete(v263);
                      if (!v255)
                        goto LABEL_338;
                    }
                    else
                    {
                      if ((v266 & 0x8000000000000000) != 0)
                        goto LABEL_418;
                      v331 = operator new(v264 - v265);
                      operator delete(v331);
                      operator delete(v263);
                      if (v255 <= v266)
                      {
LABEL_338:
                        v7 = v313;
                        v141 = (uint64_t *)((char *)v313 + i);
                        a2 = (uint64_t *)v306;
                        v254 = v312;
                        v258 = *(void **)((char *)v313 + i);
                        if (v258)
                          goto LABEL_324;
LABEL_339:
                        v242 = v141;
                        goto LABEL_309;
                      }
                    }
                    v260 = *(void **)v262;
                  }
                }
                *(_OWORD *)(v141 + 3) = *(_OWORD *)v141;
                v243[2] = v141[2];
                *v141 = 0;
                v141[1] = 0;
                v141[2] = 0;
                v242 = v7;
                if (v141 != v7)
                {
                  v256 = *(v141 - 3);
                  v257 = *(v141 - 2);
                  if (v257 != v256)
                  {
                    if (v257 - v256 < 0)
LABEL_418:
                      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                    v330 = operator new(v257 - v256);
                    operator delete(v330);
                  }
                  v258 = (void *)*v141;
                  if (!*v141)
                    goto LABEL_339;
LABEL_324:
                  v141[1] = (uint64_t)v258;
                  operator delete(v258);
                  *v141 = 0;
                  v141[1] = 0;
                  v242 = v141;
                  v141[2] = 0;
                }
LABEL_309:
                *v242 = (uint64_t)v252;
                v242[1] = (uint64_t)v253;
                v242[2] = v254;
              }
              v139 = v243 + 3;
              v140 += 24;
              v141 = v243;
              if (v243 + 3 == a2)
                return;
            }
          }
          if (v7 == a2)
            return;
          v267 = v7 + 3;
          while (1)
          {
            if (v267 == a2)
              return;
            v268 = v267;
            v270 = (_BYTE *)v7[3];
            v269 = (_BYTE *)v7[4];
            v271 = v269 - v270;
            if (v269 == v270)
            {
              v273 = 0;
              v272 = 0;
              v282 = v7[1];
              v275 = v282 - *v7;
              if (v282 == *v7)
                goto LABEL_358;
            }
            else
            {
              if (v271 < 0)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v272 = (char *)operator new(v269 - v270);
              v273 = &v272[4 * (v271 >> 2)];
              memcpy(v272, v270, v271);
              v274 = v7[1];
              v275 = v274 - *v7;
              if (v274 == *v7)
              {
LABEL_358:
                v276 = v273 != v272;
                if (v272)
                  goto LABEL_351;
                goto LABEL_352;
              }
            }
            if ((v275 & 0x8000000000000000) != 0)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v339 = operator new(v275);
            v276 = v273 - v272 > v275;
            operator delete(v339);
            if (v272)
LABEL_351:
              operator delete(v272);
LABEL_352:
            if (v276)
            {
              v277 = (const void *)*v268;
              v278 = *((_OWORD *)v7 + 2);
              v268[1] = 0;
              v268[2] = 0;
              *v268 = 0;
              v314 = v278;
              v279 = v278 - (_QWORD)v277;
              if ((const void *)v278 != v277)
              {
                if ((v279 & 0x8000000000000000) != 0)
                {
                  *(_OWORD *)v268 = *(_OWORD *)v7;
                  v268[2] = v7[2];
                  *v7 = 0;
                  v7[1] = 0;
                  v7[2] = 0;
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                }
                v283 = 0;
                while (1)
                {
                  if (v283)
                  {
                    v7[4] = (uint64_t)v283;
                    operator delete(v283);
                    v7[3] = 0;
                    v7[4] = 0;
                    v7[5] = 0;
                  }
                  *(_OWORD *)(v7 + 3) = *(_OWORD *)v7;
                  v7[5] = v7[2];
                  v7[1] = 0;
                  v7[2] = 0;
                  *v7 = 0;
                  v284 = operator new(v279);
                  memcpy(v284, v277, v279);
                  v285 = *(v7 - 3);
                  v286 = *(v7 - 2);
                  v287 = v286 - v285;
                  if (v286 == v285)
                  {
                    operator delete(v284);
                    if (!v279)
                      goto LABEL_369;
                  }
                  else
                  {
                    if ((v287 & 0x8000000000000000) != 0)
                      goto LABEL_415;
                    v333 = operator new(v286 - v285);
                    operator delete(v333);
                    operator delete(v284);
                    if (v279 <= v287)
                      goto LABEL_369;
                  }
                  v283 = (void *)*v7;
                  v7 -= 3;
                }
              }
              *(_OWORD *)v268 = *(_OWORD *)v7;
              v268[2] = v7[2];
              *v7 = 0;
              v7[1] = 0;
              v7[2] = 0;
              v280 = *(v7 - 3);
              v281 = *(v7 - 2);
              if (v281 != v280)
              {
                if (v281 - v280 < 0)
LABEL_415:
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                v332 = operator new(v281 - v280);
                operator delete(v332);
              }
LABEL_369:
              v288 = (void *)*v7;
              if (*v7)
              {
                v7[1] = (uint64_t)v288;
                operator delete(v288);
                *v7 = 0;
                v7[1] = 0;
                v7[2] = 0;
              }
              *v7 = (uint64_t)v277;
              *(_OWORD *)(v7 + 1) = v314;
            }
            v267 = v268 + 3;
            v7 = v268;
          }
        }
        if (a3)
        {
          v10 = &v7[3 * (v9 >> 1)];
          if ((unint64_t)v8 >= 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*>(v7, &v7[3 * (v9 >> 1)], v295);
            v11 = 3 * (v9 >> 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*>(v7 + 3, &v7[v11 - 3], v291);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*>(v7 + 6, &v7[v11 + 3], v290);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*>(&v7[v11 - 3], &v7[v11], &v7[v11 + 3]);
            v12 = *(_OWORD *)v7;
            *(_OWORD *)v7 = *(_OWORD *)v10;
            *(_OWORD *)v10 = v12;
            v13 = v7[2];
            v7[2] = v7[v11 + 2];
            v7[v11 + 2] = v13;
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_16;
LABEL_9:
            v15 = (_BYTE *)*(v7 - 3);
            v14 = (_BYTE *)*(v7 - 2);
            v16 = v14 - v15;
            if (v14 == v15)
            {
              v18 = 0;
              v17 = 0;
              v71 = v7[1];
              v20 = v71 - *v7;
              if (v71 == *v7)
                goto LABEL_96;
            }
            else
            {
              if (v16 < 0)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v17 = (char *)operator new(v14 - v15);
              v18 = &v17[4 * (v16 >> 2)];
              memcpy(v17, v15, v16);
              v19 = v7[1];
              v20 = v19 - *v7;
              if (v19 == *v7)
              {
LABEL_96:
                v21 = v18 != v17;
                if (v17)
                  goto LABEL_14;
                goto LABEL_15;
              }
            }
            if ((v20 & 0x8000000000000000) != 0)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v315 = operator new(v20);
            v21 = v18 - v17 > v20;
            operator delete(v315);
            if (v17)
LABEL_14:
              operator delete(v17);
LABEL_15:
            if (v21)
              goto LABEL_16;
            v72 = (const void *)*v7;
            v73 = *(_OWORD *)(v7 + 1);
            v7[1] = 0;
            v7[2] = 0;
            *v7 = 0;
            v309 = v73;
            v74 = (const void *)v73;
            v75 = v73 - (_QWORD)v72;
            v76 = (uint64_t)(v73 - (_QWORD)v72) >> 2;
            if ((const void *)v73 == v72)
            {
              v78 = 0;
              v77 = 0;
              v126 = *(_QWORD *)(v306 - 24);
              v127 = *(_QWORD *)(v306 - 16);
              v81 = v127 - v126;
              if (v127 == v126)
                goto LABEL_172;
            }
            else
            {
              if ((v75 & 0x8000000000000000) != 0)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v77 = (char *)operator new(v73 - (_QWORD)v72);
              v78 = &v77[4 * v76];
              memcpy(v77, v72, v75);
              v79 = *(_QWORD *)(v306 - 24);
              v80 = *(_QWORD *)(v306 - 16);
              v81 = v80 - v79;
              if (v80 == v79)
              {
LABEL_172:
                v82 = v78 != v77;
                if (v77)
                  goto LABEL_103;
                goto LABEL_104;
              }
            }
            if ((v81 & 0x8000000000000000) != 0)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v335 = operator new(v81);
            v82 = v78 - v77 > v81;
            operator delete(v335);
            if (v77)
LABEL_103:
              operator delete(v77);
LABEL_104:
            if (v82)
            {
              v7 = v313;
              while (1)
              {
                if (v74 == v72)
                {
                  v85 = 0;
                  v84 = 0;
                  v89 = v7[3];
                  v90 = v7[4];
                  v88 = v90 - v89;
                  if (v90 != v89)
                    goto LABEL_114;
                }
                else
                {
                  if ((v75 & 0x8000000000000000) != 0)
                    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                  v84 = (char *)operator new(v75);
                  v85 = &v84[4 * v76];
                  memcpy(v84, v72, v75);
                  v86 = v7[3];
                  v87 = v7[4];
                  v88 = v87 - v86;
                  if (v87 != v86)
                  {
LABEL_114:
                    if ((v88 & 0x8000000000000000) != 0)
                      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                    v326 = operator new(v88);
                    v83 = v85 - v84 > v88;
                    operator delete(v326);
                    if (!v84)
                      goto LABEL_108;
LABEL_107:
                    operator delete(v84);
                    goto LABEL_108;
                  }
                }
                v83 = v85 != v84;
                if (v84)
                  goto LABEL_107;
LABEL_108:
                v7 += 3;
                if (v83)
                  goto LABEL_130;
              }
            }
            v7 = v313 + 3;
            if ((unint64_t)(v313 + 3) < v306)
            {
              while (1)
              {
                if (v74 == v72)
                {
                  v92 = 0;
                  v91 = 0;
                  v96 = v7[1];
                  v94 = v96 - *v7;
                  if (v96 != *v7)
                    goto LABEL_121;
                }
                else
                {
                  if ((v75 & 0x8000000000000000) != 0)
                    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                  v91 = (char *)operator new(v75);
                  v92 = &v91[4 * v76];
                  memcpy(v91, v72, v75);
                  v93 = v7[1];
                  v94 = v93 - *v7;
                  if (v93 != *v7)
                  {
LABEL_121:
                    if ((v94 & 0x8000000000000000) != 0)
                      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                    v327 = operator new(v94);
                    v95 = v92 - v91 > v94;
                    operator delete(v327);
                    if (!v91)
                      goto LABEL_124;
LABEL_123:
                    operator delete(v91);
                    goto LABEL_124;
                  }
                }
                v95 = v92 != v91;
                if (v91)
                  goto LABEL_123;
LABEL_124:
                if (!v95)
                {
                  v7 += 3;
                  if ((unint64_t)v7 < v306)
                    continue;
                }
                break;
              }
            }
LABEL_130:
            v97 = (uint64_t *)v306;
            if ((unint64_t)v7 < v306)
            {
              v97 = (uint64_t *)v306;
              do
              {
                if (v74 == v72)
                {
                  v100 = 0;
                  v99 = 0;
                  v104 = *(v97 - 3);
                  v105 = *(v97 - 2);
                  v103 = v105 - v104;
                  if (v105 != v104)
                    goto LABEL_140;
                }
                else
                {
                  if ((v75 & 0x8000000000000000) != 0)
                    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                  v99 = (char *)operator new(v75);
                  v100 = &v99[4 * v76];
                  memcpy(v99, v72, v75);
                  v101 = *(v97 - 3);
                  v102 = *(v97 - 2);
                  v103 = v102 - v101;
                  if (v102 != v101)
                  {
LABEL_140:
                    if ((v103 & 0x8000000000000000) != 0)
                      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                    v322 = operator new(v103);
                    v98 = v100 - v99 > v103;
                    operator delete(v322);
                    if (!v99)
                      goto LABEL_134;
LABEL_133:
                    operator delete(v99);
                    goto LABEL_134;
                  }
                }
                v98 = v100 != v99;
                if (v99)
                  goto LABEL_133;
LABEL_134:
                v97 -= 3;
              }
              while (v98);
            }
LABEL_143:
            if (v7 < v97)
            {
              v106 = *v7;
              *v7 = *v97;
              *v97 = v106;
              v107 = v7[1];
              v7[1] = v97[1];
              v97[1] = v107;
              v108 = v7[2];
              v7[2] = v97[2];
              v97[2] = v108;
              while (1)
              {
                if (v74 == v72)
                {
                  v111 = 0;
                  v110 = 0;
                  v115 = v7[3];
                  v116 = v7[4];
                  v114 = v116 - v115;
                  if (v116 != v115)
                    goto LABEL_153;
                }
                else
                {
                  if ((v75 & 0x8000000000000000) != 0)
                    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                  v110 = (char *)operator new(v75);
                  v111 = &v110[4 * v76];
                  memcpy(v110, v72, v75);
                  v112 = v7[3];
                  v113 = v7[4];
                  v114 = v113 - v112;
                  if (v113 != v112)
                  {
LABEL_153:
                    if ((v114 & 0x8000000000000000) != 0)
                      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                    v319 = operator new(v114);
                    v109 = v111 - v110 > v114;
                    operator delete(v319);
                    if (!v110)
                      goto LABEL_147;
LABEL_146:
                    operator delete(v110);
                    goto LABEL_147;
                  }
                }
                v109 = v111 != v110;
                if (v110)
                  goto LABEL_146;
LABEL_147:
                v7 += 3;
                if (v109)
                {
                  while (1)
                  {
                    if (v74 == v72)
                    {
                      v119 = 0;
                      v118 = 0;
                      v123 = *(v97 - 3);
                      v124 = *(v97 - 2);
                      v122 = v124 - v123;
                      if (v124 != v123)
                        goto LABEL_164;
                    }
                    else
                    {
                      if ((v75 & 0x8000000000000000) != 0)
                        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                      v118 = (char *)operator new(v75);
                      v119 = &v118[4 * v76];
                      memcpy(v118, v72, v75);
                      v120 = *(v97 - 3);
                      v121 = *(v97 - 2);
                      v122 = v121 - v120;
                      if (v121 != v120)
                      {
LABEL_164:
                        if ((v122 & 0x8000000000000000) != 0)
                          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                        v317 = operator new(v122);
                        v117 = v119 - v118 > v122;
                        operator delete(v317);
                        if (!v118)
                          goto LABEL_158;
LABEL_157:
                        operator delete(v118);
                        goto LABEL_158;
                      }
                    }
                    v117 = v119 != v118;
                    if (v118)
                      goto LABEL_157;
LABEL_158:
                    v97 -= 3;
                    if (!v117)
                      goto LABEL_143;
                  }
                }
              }
            }
            v125 = (void *)*v313;
            if (v7 - 3 == v313)
            {
              a2 = (uint64_t *)v306;
              if (!v125)
                goto LABEL_177;
              *(v7 - 2) = (uint64_t)v125;
              operator delete(v125);
            }
            else
            {
              a2 = (uint64_t *)v306;
              if (v125)
              {
                v313[1] = (uint64_t)v125;
                operator delete(v125);
                *v313 = 0;
                v313[1] = 0;
                v313[2] = 0;
              }
              *(_OWORD *)v313 = *(_OWORD *)(v7 - 3);
              v313[2] = *(v7 - 1);
            }
            *(v7 - 3) = 0;
            *(v7 - 2) = 0;
            *(v7 - 1) = 0;
LABEL_177:
            a4 = 0;
            *(v7 - 3) = (uint64_t)v72;
            *((_OWORD *)v7 - 1) = v309;
            continue;
          }
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*>(&v7[3 * (v9 >> 1)], v7, v295);
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_9;
LABEL_16:
          v22 = 0;
          v23 = *v7;
          v24 = *(_OWORD *)(v7 + 1);
          v7[1] = 0;
          v7[2] = 0;
          *v7 = 0;
          v303 = v24;
          v25 = v24;
          v26 = v24 - v23;
          do
          {
            v29 = (_BYTE *)v313[v22 + 3];
            v28 = (_BYTE *)v313[v22 + 4];
            v30 = v28 - v29;
            if (v28 == v29)
            {
              v32 = 0;
              v31 = 0;
              if (v25 == v23)
                goto LABEL_17;
            }
            else
            {
              if (v30 < 0)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v31 = (char *)operator new(v28 - v29);
              v32 = &v31[4 * (v30 >> 2)];
              memcpy(v31, v29, v30);
              if (v25 == v23)
              {
LABEL_17:
                v27 = v32 != v31;
                if (!v31)
                  goto LABEL_19;
LABEL_18:
                operator delete(v31);
                goto LABEL_19;
              }
            }
            if ((v26 & 0x8000000000000000) != 0)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v334 = operator new(v26);
            v27 = v32 - v31 > v26;
            operator delete(v334);
            if (v31)
              goto LABEL_18;
LABEL_19:
            v22 += 3;
          }
          while (v27);
          v33 = &v313[v22];
          v34 = (uint64_t *)v306;
          if (v22 != 3)
          {
            while (1)
            {
              v37 = (_BYTE *)*(v34 - 3);
              v38 = v34 - 3;
              v39 = (_BYTE *)*(v34 - 2);
              v40 = v39 - v37;
              if (v39 == v37)
              {
                v42 = 0;
                v41 = 0;
                v34 = v38;
                if (v25 != v23)
                  goto LABEL_39;
              }
              else
              {
                if (v40 < 0)
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                v41 = (char *)operator new(v39 - v37);
                v42 = &v41[4 * (v40 >> 2)];
                memcpy(v41, v37, v40);
                v34 = v38;
                if (v25 != v23)
                {
LABEL_39:
                  if ((v26 & 0x8000000000000000) != 0)
                    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                  v324 = operator new(v26);
                  v36 = v42 - v41 > v26;
                  operator delete(v324);
                  if (!v41)
                    goto LABEL_33;
LABEL_32:
                  operator delete(v41);
                  goto LABEL_33;
                }
              }
              v36 = v42 != v41;
              if (v41)
                goto LABEL_32;
LABEL_33:
              if (v36)
                goto LABEL_58;
            }
          }
          v34 = (uint64_t *)v306;
          if ((unint64_t)v33 < v306)
          {
            for (j = v295; ; j = v34 - 3)
            {
              v45 = (const void *)*j;
              v46 = j;
              v47 = j[1] - *j;
              if (v47)
              {
                if (v47 < 0)
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                v48 = (char *)operator new(v47);
                v49 = &v48[4 * (v47 >> 2)];
                memcpy(v48, v45, v47);
                v34 = v46;
                if (v25 == v23)
                {
LABEL_42:
                  v43 = v49 == v48;
                  if (v48)
                    goto LABEL_43;
                  goto LABEL_55;
                }
              }
              else
              {
                v49 = 0;
                v48 = 0;
                v34 = v46;
                if (v25 == v23)
                  goto LABEL_42;
              }
              if ((v26 & 0x8000000000000000) != 0)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v325 = operator new(v26);
              v43 = v49 - v48 <= v26;
              operator delete(v325);
              if (v48)
              {
LABEL_43:
                operator delete(v48);
                if (v33 >= v34 || !v43)
                  break;
                continue;
              }
LABEL_55:
              v50 = !v43;
              if (v33 >= v34)
                v50 = 1;
              if ((v50 & 1) != 0)
                break;
            }
          }
LABEL_58:
          v297 = v34;
          __sz = v33;
          v7 = v33;
          if (v33 < v34)
          {
            v51 = v34;
            do
            {
              v52 = *v7;
              *v7 = *v51;
              *v51 = v52;
              v53 = v7[1];
              v7[1] = v51[1];
              v51[1] = v53;
              v54 = v7[2];
              v7[2] = v51[2];
              v51[2] = v54;
              do
              {
                v57 = (_BYTE *)v7[3];
                v56 = (_BYTE *)v7[4];
                v7 += 3;
                v58 = v56 - v57;
                if (v56 == v57)
                {
                  v60 = 0;
                  v59 = 0;
                  if (v25 == v23)
                    goto LABEL_62;
                }
                else
                {
                  if (v58 < 0)
                    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                  v59 = (char *)operator new(v56 - v57);
                  v60 = &v59[4 * (v58 >> 2)];
                  memcpy(v59, v57, v58);
                  if (v25 == v23)
                  {
LABEL_62:
                    v55 = v60 != v59;
                    if (!v59)
                      continue;
LABEL_63:
                    operator delete(v59);
                    continue;
                  }
                }
                if ((v26 & 0x8000000000000000) != 0)
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                v321 = operator new(v26);
                v55 = v60 - v59 > v26;
                operator delete(v321);
                if (v59)
                  goto LABEL_63;
              }
              while (v55);
              do
              {
                v63 = (_BYTE *)*(v51 - 3);
                v62 = (_BYTE *)*(v51 - 2);
                v51 -= 3;
                v64 = v62 - v63;
                if (v62 == v63)
                {
                  v66 = 0;
                  v65 = 0;
                  if (v25 == v23)
                    goto LABEL_73;
                }
                else
                {
                  if (v64 < 0)
                    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                  v65 = (char *)operator new(v62 - v63);
                  v66 = &v65[4 * (v64 >> 2)];
                  memcpy(v65, v63, v64);
                  if (v25 == v23)
                  {
LABEL_73:
                    v61 = v66 != v65;
                    if (!v65)
                      continue;
LABEL_74:
                    operator delete(v65);
                    continue;
                  }
                }
                if ((v26 & 0x8000000000000000) != 0)
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                v318 = operator new(v26);
                v61 = v66 - v65 > v26;
                operator delete(v318);
                if (v65)
                  goto LABEL_74;
              }
              while (!v61);
            }
            while (v7 < v51);
          }
          a1 = v313;
          v67 = (void *)*v313;
          if (v7 - 3 == v313)
          {
            a2 = (uint64_t *)v306;
            v69 = v297;
            v68 = __sz;
            if (v67)
            {
              *(v7 - 2) = (uint64_t)v67;
              operator delete(v67);
              goto LABEL_90;
            }
          }
          else
          {
            a2 = (uint64_t *)v306;
            if (v67)
            {
              v313[1] = (uint64_t)v67;
              operator delete(v67);
              *v313 = 0;
              v313[1] = 0;
              v313[2] = 0;
            }
            *(_OWORD *)v313 = *(_OWORD *)(v7 - 3);
            v313[2] = *(v7 - 1);
            v69 = v297;
            v68 = __sz;
LABEL_90:
            *(v7 - 3) = 0;
            *(v7 - 2) = 0;
            *(v7 - 1) = 0;
          }
          *(v7 - 3) = v23;
          *((_OWORD *)v7 - 1) = v303;
          if (v68 < v69)
          {
LABEL_94:
            std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*,false>(v313, v7 - 3, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          v70 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*>(v313, v7 - 3);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*>(v7, a2))
          {
            if (!v70)
              goto LABEL_94;
            continue;
          }
          a2 = v7 - 3;
          if (v70)
            return;
          goto LABEL_1;
        }
        if (v7 != a2)
        {
          v292 = (char *)a2 - (char *)v7;
          v142 = (v9 - 2) >> 1;
          v310 = v142;
          while (1)
          {
            v143 = v142;
            if (v310 < v142)
              goto LABEL_200;
            v144 = (2 * v142) | 1;
            v145 = &v313[3 * v144];
            if (2 * v142 + 2 >= (uint64_t)v9)
              goto LABEL_210;
            v146 = (const void *)*v145;
            v147 = v313[3 * v144 + 1];
            v148 = v147 - *v145;
            if (v147 == *v145)
            {
              v150 = 0;
              v149 = 0;
              v190 = v145[3];
              v191 = v145[4];
              v153 = v145 + 3;
              v154 = v191 - v190;
              if (v191 != v190)
                goto LABEL_206;
            }
            else
            {
              if (v148 < 0)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v149 = (char *)operator new(v147 - *v145);
              v150 = &v149[4 * (v148 >> 2)];
              memcpy(v149, v146, v148);
              v151 = v145[3];
              v152 = v145[4];
              v153 = v145 + 3;
              v154 = v152 - v151;
              if (v152 != v151)
              {
LABEL_206:
                if ((v154 & 0x8000000000000000) != 0)
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                v336 = operator new(v154);
                v155 = v150 - v149 > v154;
                operator delete(v336);
                if (v149)
                {
LABEL_208:
                  operator delete(v149);
                  if (!v155)
                    goto LABEL_210;
LABEL_209:
                  v145 = v153;
                  v144 = 2 * v143 + 2;
                  goto LABEL_210;
                }
                goto LABEL_253;
              }
            }
            v155 = v150 != v149;
            if (v149)
              goto LABEL_208;
LABEL_253:
            if (v155)
              goto LABEL_209;
LABEL_210:
            v157 = (const void *)*v145;
            v156 = v145[1];
            v158 = v156 - *v145;
            if (v156 == *v145)
            {
              v160 = 0;
              v159 = 0;
            }
            else
            {
              if (v158 < 0)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v159 = (char *)operator new(v156 - *v145);
              v160 = &v159[4 * (v158 >> 2)];
              memcpy(v159, v157, v158);
            }
            v161 = &v313[3 * v143];
            v162 = v161[1];
            v163 = v162 - *v161;
            if (v162 == *v161)
            {
              v164 = v160 != v159;
              if (!v159)
                goto LABEL_218;
            }
            else
            {
              if ((v163 & 0x8000000000000000) != 0)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v328 = operator new(v162 - *v161);
              v164 = v160 - v159 > v163;
              operator delete(v328);
              if (!v159)
                goto LABEL_218;
            }
            operator delete(v159);
LABEL_218:
            if (v164)
              goto LABEL_200;
            v165 = 0;
            v166 = *v161;
            v167 = *(_OWORD *)(v161 + 1);
            v161[1] = 0;
            v161[2] = 0;
            *v161 = 0;
            v294 = v167;
            v304 = v167;
            v296 = v143;
            __sza = v167 - v166;
            do
            {
              v169 = v145;
              if (v165)
              {
                v161[1] = (uint64_t)v165;
                operator delete(v165);
                *v161 = 0;
                v161[1] = 0;
                v161[2] = 0;
              }
              *(_OWORD *)v161 = *(_OWORD *)v145;
              v161[2] = v145[2];
              *v145 = 0;
              v145[1] = 0;
              v145[2] = 0;
              if (v310 < v144)
                goto LABEL_199;
              v170 = (2 * v144) | 1;
              v145 = &v313[3 * v170];
              v171 = 2 * v144 + 2;
              v172 = v9;
              if (v171 >= (uint64_t)v9)
              {
                v144 = (2 * v144) | 1;
                goto LABEL_239;
              }
              v173 = (const void *)*v145;
              v174 = v313[3 * v170 + 1];
              v175 = v174 - *v145;
              if (v174 == *v145)
              {
                v177 = 0;
                v176 = 0;
                v183 = v145[3];
                v184 = v145[4];
                v180 = v145 + 3;
                v181 = v184 - v183;
                if (v184 == v183)
                  goto LABEL_236;
              }
              else
              {
                if (v175 < 0)
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                v176 = (char *)operator new(v174 - *v145);
                v177 = &v176[4 * (v175 >> 2)];
                memcpy(v176, v173, v175);
                v178 = v145[3];
                v179 = v145[4];
                v180 = v145 + 3;
                v181 = v179 - v178;
                if (v179 == v178)
                {
LABEL_236:
                  v182 = v177 != v176;
                  if (!v176)
                    goto LABEL_237;
                  goto LABEL_232;
                }
              }
              if ((v181 & 0x8000000000000000) != 0)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v323 = operator new(v181);
              v182 = v177 - v176 > v181;
              operator delete(v323);
              if (!v176)
              {
LABEL_237:
                v144 = v170;
                if (!v182)
                  goto LABEL_239;
LABEL_238:
                v145 = v180;
                v144 = v171;
                goto LABEL_239;
              }
LABEL_232:
              operator delete(v176);
              v144 = v170;
              if (v182)
                goto LABEL_238;
LABEL_239:
              v186 = (const void *)*v145;
              v185 = v145[1];
              v187 = v185 - *v145;
              if (v185 == *v145)
              {
                v189 = 0;
                v188 = 0;
                v9 = v172;
                if (v304 == v166)
                  goto LABEL_220;
              }
              else
              {
                if (v187 < 0)
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                v188 = (char *)operator new(v185 - *v145);
                v189 = &v188[4 * (v187 >> 2)];
                memcpy(v188, v186, v187);
                v9 = v172;
                if (v304 == v166)
                {
LABEL_220:
                  v168 = v189 != v188;
                  if (!v188)
                    goto LABEL_222;
LABEL_221:
                  operator delete(v188);
                  goto LABEL_222;
                }
              }
              if ((__sza & 0x8000000000000000) != 0)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v320 = operator new(__sza);
              v168 = v189 - v188 > __sza;
              operator delete(v320);
              if (v188)
                goto LABEL_221;
LABEL_222:
              v165 = (void *)*v169;
              v161 = v169;
            }
            while (!v168);
            if (v165)
            {
              v169[1] = (uint64_t)v165;
              operator delete(v165);
              *v169 = 0;
              v169[1] = 0;
              v169[2] = 0;
            }
LABEL_199:
            *v169 = v166;
            *(_OWORD *)(v169 + 1) = v294;
            v143 = v296;
LABEL_200:
            v142 = v143 - 1;
            if (!v143)
            {
              v192 = v292 / 0x18;
              v193 = v313;
              v194 = v306;
              while (1)
              {
                v307 = v194;
                v311 = v192;
                v195 = 0;
                v196 = *v193;
                v305 = v193[1];
                __szb = v193[2];
                v193[1] = 0;
                v193[2] = 0;
                v197 = (v192 - 2) >> 1;
                v198 = v193;
                *v193 = 0;
                v199 = v192;
                do
                {
                  v200 = v195 + 1;
                  v201 = &v198[3 * v195 + 3];
                  v202 = 2 * v195;
                  v195 = (2 * v195) | 1;
                  v203 = v202 + 2;
                  if (v202 + 2 >= v199)
                    goto LABEL_268;
                  v204 = (const void *)*v201;
                  v205 = v198[3 * v200 + 1];
                  v206 = v205 - *v201;
                  if (v205 == *v201)
                  {
                    v208 = 0;
                    v207 = 0;
                    v215 = v201[3];
                    v216 = v201[4];
                    v211 = v201 + 3;
                    v212 = v216 - v215;
                    if (v216 == v215)
                      goto LABEL_271;
                  }
                  else
                  {
                    if (v206 < 0)
                      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                    v207 = (char *)operator new(v205 - *v201);
                    v208 = &v207[4 * (v206 >> 2)];
                    memcpy(v207, v204, v206);
                    v209 = v201[3];
                    v210 = v201[4];
                    v211 = v201 + 3;
                    v212 = v210 - v209;
                    if (v210 == v209)
                    {
LABEL_271:
                      v213 = v208 != v207;
                      v199 = v311;
                      if (v207)
                        goto LABEL_266;
                      goto LABEL_272;
                    }
                  }
                  if ((v212 & 0x8000000000000000) != 0)
                    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                  v337 = operator new(v212);
                  v213 = v208 - v207 > v212;
                  operator delete(v337);
                  v199 = v311;
                  if (v207)
                  {
LABEL_266:
                    operator delete(v207);
                    if (!v213)
                      goto LABEL_268;
LABEL_267:
                    v201 = v211;
                    v195 = v203;
                    goto LABEL_268;
                  }
LABEL_272:
                  if (v213)
                    goto LABEL_267;
LABEL_268:
                  v214 = (void *)*v198;
                  if (*v198)
                  {
                    v198[1] = (uint64_t)v214;
                    operator delete(v214);
                    *v198 = 0;
                    v198[1] = 0;
                    v198[2] = 0;
                  }
                  *(_OWORD *)v198 = *(_OWORD *)v201;
                  v198[2] = v201[2];
                  *v201 = 0;
                  v201[1] = 0;
                  v201[2] = 0;
                  v198 = v201;
                }
                while (v195 <= v197);
                v217 = v307 - 24;
                v218 = (void *)*v201;
                if (v201 == (uint64_t *)(v307 - 24))
                {
                  v193 = v313;
                  if (v218)
                  {
                    v201[1] = (uint64_t)v218;
                    operator delete(v218);
                    *v201 = 0;
                    v201[1] = 0;
                    v201[2] = 0;
                  }
                  *v201 = v196;
                  v201[1] = v305;
                  v201[2] = __szb;
                }
                else
                {
                  v193 = v313;
                  if (v218)
                  {
                    v201[1] = (uint64_t)v218;
                    operator delete(v218);
                    *v201 = 0;
                    v201[1] = 0;
                    v201[2] = 0;
                  }
                  *(_OWORD *)v201 = *(_OWORD *)(v307 - 24);
                  v201[2] = *(_QWORD *)(v307 - 8);
                  *(_QWORD *)(v307 - 24) = v196;
                  *(_QWORD *)(v307 - 16) = v305;
                  *(_QWORD *)(v307 - 8) = __szb;
                  v219 = (char *)v201 - (char *)v313 + 24;
                  if (v219 >= 25)
                  {
                    v220 = (v219 / 0x18uLL - 2) >> 1;
                    v221 = &v313[3 * v220];
                    v223 = (const void *)*v221;
                    v222 = v221[1];
                    v224 = v222 - *v221;
                    if (v222 == *v221)
                    {
                      v226 = 0;
                      v225 = 0;
                      v241 = v201[1];
                      v228 = v241 - *v201;
                      if (v241 != *v201)
                        goto LABEL_281;
                    }
                    else
                    {
                      if (v224 < 0)
                        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                      v225 = (char *)operator new(v222 - *v221);
                      v226 = &v225[4 * (v224 >> 2)];
                      memcpy(v225, v223, v224);
                      v227 = v201[1];
                      v228 = v227 - *v201;
                      if (v227 != *v201)
                      {
LABEL_281:
                        if ((v228 & 0x8000000000000000) != 0)
                          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                        v229 = v226 - v225 > v228;
                        if (v225)
LABEL_283:
                          operator delete(v225);
LABEL_284:
                        if (!v229)
                          goto LABEL_257;
                        v298 = v307 - 24;
                        v230 = 0;
                        v231 = (const void *)*v201;
                        v232 = *(_OWORD *)(v201 + 1);
                        v201[1] = 0;
                        v201[2] = 0;
                        *v201 = 0;
                        *(_OWORD *)__szc = v232;
                        v308 = (const void *)v232;
                        v233 = v232 - (_QWORD)v231;
                        while (2)
                        {
                          v235 = v221;
                          if (v230)
                          {
                            v201[1] = (uint64_t)v230;
                            operator delete(v230);
                            *v201 = 0;
                            v201[1] = 0;
                            v201[2] = 0;
                          }
                          *(_OWORD *)v201 = *(_OWORD *)v221;
                          v201[2] = v221[2];
                          *v221 = 0;
                          v221[1] = 0;
                          v221[2] = 0;
                          if (!v220)
                          {
LABEL_307:
                            *v235 = (uint64_t)v231;
                            *(_OWORD *)(v235 + 1) = *(_OWORD *)__szc;
                            v217 = v298;
                            goto LABEL_257;
                          }
                          v220 = (v220 - 1) >> 1;
                          v221 = &v313[3 * v220];
                          v237 = (const void *)*v221;
                          v236 = v221[1];
                          v238 = v236 - *v221;
                          if (v236 == *v221)
                          {
                            v240 = 0;
                            v239 = 0;
                            if (v308 == v231)
                              goto LABEL_286;
                          }
                          else
                          {
                            if (v238 < 0)
                              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                            v239 = (char *)operator new(v236 - *v221);
                            v240 = &v239[4 * (v238 >> 2)];
                            memcpy(v239, v237, v238);
                            if (v308 == v231)
                            {
LABEL_286:
                              v234 = v240 != v239;
                              if (v239)
                                goto LABEL_287;
                              goto LABEL_288;
                            }
                          }
                          if ((v233 & 0x8000000000000000) != 0)
                            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                          v329 = operator new(v233);
                          v234 = v240 - v239 > v233;
                          operator delete(v329);
                          if (v239)
LABEL_287:
                            operator delete(v239);
LABEL_288:
                          v230 = (void *)*v235;
                          v201 = v235;
                          if (!v234)
                          {
                            if (v230)
                            {
                              v235[1] = (uint64_t)v230;
                              operator delete(v230);
                              *v235 = 0;
                              v235[1] = 0;
                              v235[2] = 0;
                            }
                            goto LABEL_307;
                          }
                          continue;
                        }
                      }
                    }
                    v229 = v226 != v225;
                    if (v225)
                      goto LABEL_283;
                    goto LABEL_284;
                  }
                }
LABEL_257:
                v194 = v217;
                v192 = v311 - 1;
                if (v311 <= 2)
                  return;
              }
            }
          }
        }
        return;
    }
  }
}

  v9 = (__int128 *)(a2 - 80);
  v10 = (__int128 *)a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v10;
    v12 = v11;
    v13 = a2 - (char *)v10;
    v14 = 0xCCCCCCCCCCCCCCCDLL * (v13 >> 4);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v44 = *((_DWORD *)a2 - 18);
        v45 = *(_DWORD *)(a1 + 8);
        if (v44 < v45)
          goto LABEL_39;
        if (v45 >= v44)
        {
          v58 = *((double *)a2 - 8);
          v59 = *(double *)(a1 + 16);
          if (v58 < v59)
            goto LABEL_39;
          if (v59 >= v58)
          {
            v60 = *((double *)a2 - 7);
            v61 = *(double *)(a1 + 24);
            if (v60 < v61)
              goto LABEL_39;
            if (v61 >= v60)
            {
              v62 = *((double *)a2 - 6);
              v63 = *(double *)(a1 + 32);
              if (v62 < v63)
                goto LABEL_39;
              if (v63 >= v62)
              {
                v64 = *((_QWORD *)a2 - 5);
                v65 = *(_QWORD *)(a1 + 40);
                if (v64 < v65)
                  goto LABEL_39;
                if (v65 >= v64)
                {
                  v66 = *((_QWORD *)a2 - 4);
                  v67 = *(_QWORD *)(a1 + 48);
                  if (v66 < v67
                    || v67 >= v66
                    && ((v68 = *((_QWORD *)a2 - 3), v69 = *(_QWORD *)(a1 + 56), v68 < v69)
                     || v69 >= v68
                     && ((v70 = *((_QWORD *)a2 - 2), v71 = *(_QWORD *)(a1 + 64), v70 < v71)
                      || v71 >= v70
                      && ((v72 = *((_QWORD *)a2 - 1), v73 = *(_QWORD *)(a1 + 72), v72 < v73)
                       || v73 >= v72 && *(_QWORD *)v9 < *(_QWORD *)a1))))
                  {
LABEL_39:
                    v75 = *(_OWORD *)a1;
                    v84 = *(_OWORD *)(a1 + 48);
                    v87 = *(_OWORD *)(a1 + 64);
                    v78 = *(_OWORD *)(a1 + 16);
                    v81 = *(_OWORD *)(a1 + 32);
                    v46 = *((_OWORD *)a2 - 1);
                    v48 = *((_OWORD *)a2 - 4);
                    v47 = *((_OWORD *)a2 - 3);
                    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 - 2);
                    *(_OWORD *)(a1 + 64) = v46;
                    *(_OWORD *)(a1 + 16) = v48;
                    *(_OWORD *)(a1 + 32) = v47;
                    *(_OWORD *)a1 = *v9;
                    *((_OWORD *)a2 - 3) = v81;
                    *((_OWORD *)a2 - 2) = v84;
                    *((_OWORD *)a2 - 1) = v87;
                    *v9 = v75;
                    *((_OWORD *)a2 - 4) = v78;
                  }
                }
              }
            }
          }
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>((__int128 *)a1, (__int128 *)(a1 + 80), (__int128 *)a2 - 5);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>(a1, a1 + 80, a1 + 160, (uint64_t)(a2 - 80));
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>(a1, a1 + 80, a1 + 160, a1 + 240, (uint64_t)(a2 - 80));
        return;
      default:
        if (v13 <= 1919)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>(a1, (uint64_t)a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>((_QWORD *)a1, a2);
          return;
        }
        if (v11 != 1)
        {
          v15 = v14 >> 1;
          v16 = (__int128 *)(a1 + 80 * (v14 >> 1));
          if ((unint64_t)v13 < 0x2801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>(v16, (__int128 *)a1, (__int128 *)a2 - 5);
            if ((a5 & 1) != 0)
              goto LABEL_29;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>((__int128 *)a1, v16, (__int128 *)a2 - 5);
            v17 = 80 * v15;
            v18 = (__int128 *)(80 * v15 + a1 - 80);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>((__int128 *)(a1 + 80), v18, (__int128 *)a2 - 10);
            v19 = (__int128 *)(a1 + 80 + v17);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>((__int128 *)(a1 + 160), v19, (__int128 *)a2 - 15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>(v18, v16, v19);
            v74 = *(_OWORD *)a1;
            v83 = *(_OWORD *)(a1 + 48);
            v86 = *(_OWORD *)(a1 + 64);
            v77 = *(_OWORD *)(a1 + 16);
            v80 = *(_OWORD *)(a1 + 32);
            v20 = v16[4];
            v22 = v16[1];
            v21 = v16[2];
            *(_OWORD *)(a1 + 48) = v16[3];
            *(_OWORD *)(a1 + 64) = v20;
            *(_OWORD *)(a1 + 16) = v22;
            *(_OWORD *)(a1 + 32) = v21;
            *(_OWORD *)a1 = *v16;
            v16[3] = v83;
            v16[4] = v86;
            v16[1] = v77;
            v16[2] = v80;
            *v16 = v74;
            if ((a5 & 1) != 0)
              goto LABEL_29;
          }
          v23 = *(_DWORD *)(a1 - 72);
          v24 = *(_DWORD *)(a1 + 8);
          if (v23 >= v24)
          {
            if (v24 < v23)
              goto LABEL_33;
            v25 = *(double *)(a1 - 64);
            v26 = *(double *)(a1 + 16);
            if (v25 >= v26)
            {
              if (v26 < v25)
                goto LABEL_33;
              v27 = *(double *)(a1 - 56);
              v28 = *(double *)(a1 + 24);
              if (v27 >= v28)
              {
                if (v28 < v27)
                  goto LABEL_33;
                v29 = *(double *)(a1 - 48);
                v30 = *(double *)(a1 + 32);
                if (v29 >= v30)
                {
                  if (v30 < v29)
                    goto LABEL_33;
                  v31 = *(_QWORD *)(a1 - 40);
                  v32 = *(_QWORD *)(a1 + 40);
                  if (v31 >= v32)
                  {
                    if (v32 < v31)
                      goto LABEL_33;
                    v33 = *(_QWORD *)(a1 - 32);
                    v34 = *(_QWORD *)(a1 + 48);
                    if (v33 >= v34)
                    {
                      if (v34 < v33
                        || (v35 = *(_QWORD *)(a1 - 24), v36 = *(_QWORD *)(a1 + 56), v35 >= v36)
                        && (v36 < v35
                         || (v37 = *(_QWORD *)(a1 - 16), v38 = *(_QWORD *)(a1 + 64), v37 >= v38)
                         && (v38 < v37
                          || (v39 = *(_QWORD *)(a1 - 8), v40 = *(_QWORD *)(a1 + 72), v39 >= v40)
                          && (v40 < v39 || *(_QWORD *)(a1 - 80) >= *(_QWORD *)a1))))
                      {
LABEL_33:
                        v10 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::NeighborhoodGenerator::SolveData *,std::__less<void,void> &>((__int128 *)a1, (unint64_t)a2);
                        goto LABEL_34;
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_29:
          v41 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::NeighborhoodGenerator::SolveData *,std::__less<void,void> &>((double *)a1, (double *)a2);
          if ((v42 & 1) == 0)
            goto LABEL_32;
          v43 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>(a1, v41);
          v10 = (__int128 *)(v41 + 80);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>(v41 + 80, (uint64_t)a2))
          {
            v11 = v12 + 1;
            if (v43)
              continue;
LABEL_32:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *,false>(a1, v41, a3, -v12, a5 & 1);
            v10 = (__int128 *)(v41 + 80);
LABEL_34:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = (char *)v41;
          if (v43)
            return;
          goto LABEL_1;
        }
        if ((char *)a1 != a2)
        {
          v49 = (v14 - 2) >> 1;
          v50 = v49 + 1;
          v51 = (uint64_t *)(a1 + 80 * v49);
          do
          {
            std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>(a1, a3, 0xCCCCCCCCCCCCCCCDLL * (v13 >> 4), v51);
            v51 -= 10;
            --v50;
          }
          while (v50);
          v52 = v13 / 0x50uLL;
          do
          {
            while (1)
            {
              v76 = *(_OWORD *)a1;
              v85 = *(_OWORD *)(a1 + 48);
              v88 = *(_OWORD *)(a1 + 64);
              v79 = *(_OWORD *)(a1 + 16);
              v82 = *(_OWORD *)(a1 + 32);
              std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>(a1, a3, v52);
              if (v9 == v57)
                break;
              *v57 = *v9;
              v53 = v9[1];
              v54 = v9[2];
              v55 = v9[4];
              v57[3] = v9[3];
              v57[4] = v55;
              v57[1] = v53;
              v57[2] = v54;
              v9[3] = v85;
              v9[4] = v88;
              v9[1] = v79;
              v9[2] = v82;
              *v9 = v76;
              v9 -= 5;
              std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NeighborhoodGenerator::SolveData *>(a1, (uint64_t)(v57 + 5), a3, 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v57 - a1 + 80) >> 4));
              v56 = v52-- <= 2;
              if (v56)
                return;
            }
            v57[2] = v82;
            v57[3] = v85;
            v57[4] = v88;
            *v57 = v76;
            v57[1] = v79;
            v9 -= 5;
            v56 = v52-- <= 2;
          }
          while (!v56);
        }
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v8) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v78 = *(_DWORD *)(v8 + 8);
        v79 = *(int *)(a2 - 16) >> 1;
        v97 = v79 == v78 >> 1;
        v80 = v79 < v78 >> 1;
        if (v97)
          v80 = *(_DWORD *)(a2 - 12) < *(_DWORD *)(v8 + 12);
        if (v80)
        {
          v191 = *(_QWORD *)(v8 + 16);
          v185 = *(_OWORD *)v8;
          v81 = *(_OWORD *)(a2 - 24);
          *(_QWORD *)(v8 + 16) = *(_QWORD *)(a2 - 8);
          *(_OWORD *)v8 = v81;
          *(_QWORD *)(a2 - 8) = v191;
          *(_OWORD *)(a2 - 24) = v185;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::InequalityDetectionHelper *>((__int128 *)v8, (__int128 *)(v8 + 24), (int *)(a2 - 24));
        return;
      case 4:
        v82 = (__int128 *)(v8 + 24);
        v83 = (__int128 *)(v8 + 48);
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::InequalityDetectionHelper *>((__int128 *)v8, (__int128 *)(v8 + 24), (int *)(v8 + 48));
        v84 = *(_DWORD *)(v8 + 56);
        v85 = *(int *)(a2 - 16) >> 1;
        v97 = v85 == v84 >> 1;
        v86 = v85 < v84 >> 1;
        if (v97)
          v86 = *(_DWORD *)(a2 - 12) < *(_DWORD *)(v8 + 60);
        if (v86)
        {
          v87 = *v83;
          v88 = *(_QWORD *)(v8 + 64);
          v89 = *(_QWORD *)(a2 - 8);
          *v83 = *(_OWORD *)(a2 - 24);
          *(_QWORD *)(v8 + 64) = v89;
          *(_QWORD *)(a2 - 8) = v88;
          *(_OWORD *)(a2 - 24) = v87;
          v90 = *(_DWORD *)(v8 + 32);
          LODWORD(v88) = *(int *)(v8 + 56) >> 1;
          v97 = (_DWORD)v88 == v90 >> 1;
          v91 = (int)v88 < v90 >> 1;
          if (v97)
            v91 = *(_DWORD *)(v8 + 60) < *(_DWORD *)(v8 + 36);
          if (v91)
          {
            v92 = *(_QWORD *)(v8 + 40);
            v93 = *v82;
            *v82 = *v83;
            *(_QWORD *)(v8 + 40) = *(_QWORD *)(v8 + 64);
            *v83 = v93;
            *(_QWORD *)(v8 + 64) = v92;
            v94 = *(_DWORD *)(v8 + 8);
            LODWORD(v92) = *(int *)(v8 + 32) >> 1;
            v97 = (_DWORD)v92 == v94 >> 1;
            v95 = (int)v92 < v94 >> 1;
            if (v97)
              v95 = *(_DWORD *)(v8 + 36) < *(_DWORD *)(v8 + 12);
            if (v95)
            {
              v192 = *(_QWORD *)(v8 + 16);
              v186 = *(_OWORD *)v8;
              *(_OWORD *)v8 = *v82;
              *(_QWORD *)(v8 + 16) = *(_QWORD *)(v8 + 40);
              *v82 = v186;
              *(_QWORD *)(v8 + 40) = v192;
            }
          }
        }
        return;
      case 5:
        std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::InequalityDetectionHelper *,0>(v8, v8 + 24, v8 + 48, v8 + 72, a2 - 24);
        return;
      default:
        if (v9 > 575)
        {
          if (!a3)
          {
            if (v8 != a2)
            {
              v115 = (unint64_t)(v10 - 2) >> 1;
              v116 = v115;
              do
              {
                v117 = v116;
                if (v115 >= v116)
                {
                  v118 = (2 * v116) | 1;
                  v119 = v8 + 24 * v118;
                  if (2 * v117 + 2 < v10)
                  {
                    v120 = *(_DWORD *)(v119 + 32);
                    v121 = *(int *)(v119 + 8) >> 1;
                    v97 = v121 == v120 >> 1;
                    v122 = v121 < v120 >> 1;
                    if (v97)
                      v122 = *(_DWORD *)(v119 + 12) < *(_DWORD *)(v119 + 36);
                    v119 += 24 * v122;
                    if (v122)
                      v118 = 2 * v117 + 2;
                  }
                  v123 = v8 + 24 * v117;
                  v124 = *(_DWORD *)(v123 + 8);
                  v125 = *(_DWORD *)(v123 + 12);
                  v126 = *(int *)(v119 + 8) >> 1;
                  v127 = v124 >> 1;
                  v128 = *(_DWORD *)(v119 + 12) < v125;
                  v97 = v126 == v124 >> 1;
                  v129 = v126 < v124 >> 1;
                  if (!v97)
                    v128 = v129;
                  if (!v128)
                  {
                    v130 = *(_QWORD *)v123;
                    v131 = *(_QWORD *)(v123 + 16);
                    do
                    {
                      v135 = v123;
                      v123 = v119;
                      v136 = *(_OWORD *)v119;
                      *(_QWORD *)(v135 + 16) = *(_QWORD *)(v119 + 16);
                      *(_OWORD *)v135 = v136;
                      if (v115 < v118)
                        break;
                      v137 = (2 * v118) | 1;
                      v119 = v8 + 24 * v137;
                      v138 = 2 * v118 + 2;
                      if (v138 < v10)
                      {
                        v139 = *(_DWORD *)(v119 + 32);
                        v140 = *(int *)(v119 + 8) >> 1;
                        v97 = v140 == v139 >> 1;
                        v141 = v140 < v139 >> 1;
                        if (v97)
                          v141 = *(_DWORD *)(v119 + 12) < *(_DWORD *)(v119 + 36);
                        v119 += 24 * v141;
                        if (v141)
                          v137 = v138;
                      }
                      v132 = *(int *)(v119 + 8) >> 1;
                      v133 = *(_DWORD *)(v119 + 12) < v125;
                      v97 = v132 == v127;
                      v134 = v132 < v127;
                      if (!v97)
                        v133 = v134;
                      v118 = v137;
                    }
                    while (!v133);
                    *(_QWORD *)v123 = v130;
                    *(_DWORD *)(v123 + 8) = v124;
                    *(_DWORD *)(v123 + 12) = v125;
                    *(_QWORD *)(v123 + 16) = v131;
                  }
                }
                v116 = v117 - 1;
              }
              while (v117);
              v142 = v9 / 0x18uLL;
              do
              {
                v144 = 0;
                v193 = *(_QWORD *)(v8 + 16);
                v187 = *(_OWORD *)v8;
                v145 = v8;
                do
                {
                  v147 = v145 + 24 * v144 + 24;
                  v148 = (2 * v144) | 1;
                  v149 = 2 * v144 + 2;
                  if (v149 < v142)
                  {
                    v150 = *(_DWORD *)(v147 + 32);
                    v151 = *(int *)(v147 + 8) >> 1;
                    v97 = v151 == v150 >> 1;
                    v152 = v151 < v150 >> 1;
                    if (v97)
                      v152 = *(_DWORD *)(v147 + 12) < *(_DWORD *)(v147 + 36);
                    v147 += 24 * v152;
                    if (v152)
                      v148 = v149;
                  }
                  v146 = *(_OWORD *)v147;
                  *(_QWORD *)(v145 + 16) = *(_QWORD *)(v147 + 16);
                  *(_OWORD *)v145 = v146;
                  v145 = v147;
                  v144 = v148;
                }
                while (v148 <= (uint64_t)((unint64_t)(v142 - 2) >> 1));
                a2 -= 24;
                if (v147 == a2)
                {
                  *(_QWORD *)(v147 + 16) = v193;
                  *(_OWORD *)v147 = v187;
                }
                else
                {
                  v153 = *(_OWORD *)a2;
                  *(_QWORD *)(v147 + 16) = *(_QWORD *)(a2 + 16);
                  *(_OWORD *)v147 = v153;
                  *(_QWORD *)(a2 + 16) = v193;
                  *(_OWORD *)a2 = v187;
                  v154 = v147 - v8 + 24;
                  if (v154 >= 25)
                  {
                    v155 = (v154 / 0x18uLL - 2) >> 1;
                    v156 = v8 + 24 * v155;
                    v157 = *(_DWORD *)(v147 + 8);
                    v158 = *(_DWORD *)(v147 + 12);
                    v159 = *(int *)(v156 + 8) >> 1;
                    v160 = v157 >> 1;
                    v161 = *(_DWORD *)(v156 + 12) < v158;
                    v97 = v159 == v157 >> 1;
                    v162 = v159 < v157 >> 1;
                    if (!v97)
                      v161 = v162;
                    if (v161)
                    {
                      v163 = *(_QWORD *)v147;
                      v164 = *(_QWORD *)(v147 + 16);
                      do
                      {
                        v165 = v147;
                        v147 = v156;
                        v166 = *(_OWORD *)v156;
                        *(_QWORD *)(v165 + 16) = *(_QWORD *)(v156 + 16);
                        *(_OWORD *)v165 = v166;
                        if (!v155)
                          break;
                        v155 = (v155 - 1) >> 1;
                        v156 = v8 + 24 * v155;
                        v167 = *(int *)(v156 + 8) >> 1;
                        v97 = v167 == v160;
                        v168 = v167 < v160;
                        if (v97)
                          v168 = *(_DWORD *)(v156 + 12) < v158;
                      }
                      while (v168);
                      *(_QWORD *)v147 = v163;
                      *(_DWORD *)(v147 + 8) = v157;
                      *(_DWORD *)(v147 + 12) = v158;
                      *(_QWORD *)(v147 + 16) = v164;
                    }
                  }
                }
              }
              while (v142-- > 2);
            }
            return;
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = v8 + 24 * ((unint64_t)v10 >> 1);
          if ((unint64_t)v9 >= 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::InequalityDetectionHelper *>((__int128 *)a1, (__int128 *)(a1 + 24 * v11), (int *)(a2 - 24));
            v13 = 24 * v11;
            v14 = (__int128 *)(24 * v11 + a1 - 24);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::InequalityDetectionHelper *>((__int128 *)(a1 + 24), v14, (int *)(a2 - 48));
            v15 = (__int128 *)(a1 + 24 + v13);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::InequalityDetectionHelper *>((__int128 *)(a1 + 48), v15, (int *)(a2 - 72));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::InequalityDetectionHelper *>(v14, (__int128 *)v12, (int *)v15);
            v188 = *(_QWORD *)(a1 + 16);
            v182 = *(_OWORD *)a1;
            v16 = *(_QWORD *)(v12 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v12;
            *(_QWORD *)(a1 + 16) = v16;
            *(_QWORD *)(v12 + 16) = v188;
            *(_OWORD *)v12 = v182;
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_19;
LABEL_7:
            v17 = *(_DWORD *)(a1 + 8);
            v18 = *(_DWORD *)(a1 + 12);
            v19 = *(int *)(a1 - 16) >> 1;
            v20 = v17 >> 1;
            v21 = *(_DWORD *)(a1 - 12) < v18;
            v97 = v19 == v17 >> 1;
            v22 = v19 < v17 >> 1;
            if (!v97)
              v21 = v22;
            if (v21)
              goto LABEL_20;
            v23 = *(_DWORD *)(a2 - 16);
            v97 = v20 == v23 >> 1;
            v24 = v20 < v23 >> 1;
            if (v97)
              v24 = v18 < *(_DWORD *)(a2 - 12);
            if (v24)
            {
              v25 = a1;
              do
              {
                v8 = v25 + 24;
                v26 = *(_DWORD *)(v25 + 32);
                v27 = v18 < *(_DWORD *)(v25 + 36);
                v97 = v20 == v26 >> 1;
                v28 = v20 < v26 >> 1;
                if (v97)
                  v28 = v27;
                v25 = v8;
              }
              while (!v28);
            }
            else
            {
              v57 = a1 + 24;
              do
              {
                v8 = v57;
                if (v57 >= a2)
                  break;
                v58 = *(_DWORD *)(v57 + 8);
                v59 = v18 < *(_DWORD *)(v8 + 12);
                v97 = v20 == v58 >> 1;
                v60 = v20 < v58 >> 1;
                if (!v97)
                  v59 = v60;
                v57 = v8 + 24;
              }
              while (!v59);
            }
            v61 = a2;
            if (v8 < a2)
            {
              v62 = a2;
              do
              {
                v61 = v62 - 24;
                v63 = *(_DWORD *)(v62 - 16);
                v64 = v18 < *(_DWORD *)(v62 - 12);
                v97 = v20 == v63 >> 1;
                v65 = v20 < v63 >> 1;
                if (v97)
                  v65 = v64;
                v62 = v61;
              }
              while (v65);
            }
            v66 = *(_QWORD *)a1;
            v67 = *(_QWORD *)(a1 + 16);
            while (v8 < v61)
            {
              v190 = *(_QWORD *)(v8 + 16);
              v184 = *(_OWORD *)v8;
              v68 = *(_OWORD *)v61;
              *(_QWORD *)(v8 + 16) = *(_QWORD *)(v61 + 16);
              *(_OWORD *)v8 = v68;
              *(_QWORD *)(v61 + 16) = v190;
              *(_OWORD *)v61 = v184;
              do
              {
                v69 = *(_DWORD *)(v8 + 32);
                v70 = *(_DWORD *)(v8 + 36);
                v8 += 24;
                v71 = v18 < v70;
                v97 = v20 == v69 >> 1;
                v72 = v20 < v69 >> 1;
                if (v97)
                  v72 = v71;
              }
              while (!v72);
              do
              {
                v73 = *(_DWORD *)(v61 - 16);
                v74 = *(_DWORD *)(v61 - 12);
                v61 -= 24;
                v75 = v18 < v74;
                v97 = v20 == v73 >> 1;
                v76 = v20 < v73 >> 1;
                if (v97)
                  v76 = v75;
              }
              while (v76);
            }
            if (v8 - 24 != a1)
            {
              v77 = *(_OWORD *)(v8 - 24);
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(v8 - 8);
              *(_OWORD *)a1 = v77;
            }
            a4 = 0;
            *(_QWORD *)(v8 - 24) = v66;
            *(_DWORD *)(v8 - 16) = v17;
            *(_DWORD *)(v8 - 12) = v18;
            *(_QWORD *)(v8 - 8) = v67;
            continue;
          }
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::InequalityDetectionHelper *>((__int128 *)(a1 + 24 * v11), (__int128 *)a1, (int *)(a2 - 24));
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_7;
LABEL_19:
          v17 = *(_DWORD *)(a1 + 8);
          v18 = *(_DWORD *)(a1 + 12);
          v20 = v17 >> 1;
LABEL_20:
          v29 = 0;
          v30 = *(_QWORD *)a1;
          v31 = *(_QWORD *)(a1 + 16);
          do
          {
            v32 = *(int *)(a1 + v29 + 32) >> 1;
            v33 = *(_DWORD *)(a1 + v29 + 36) < v18;
            v97 = v32 == v20;
            v34 = v32 < v20;
            if (!v97)
              v33 = v34;
            v29 += 24;
          }
          while (v33);
          v35 = a1 + v29;
          v36 = a2;
          if (v29 == 24)
          {
            v41 = a2;
            while (v35 < v41)
            {
              v37 = v41 - 24;
              v42 = *(int *)(v41 - 16) >> 1;
              v43 = *(_DWORD *)(v41 - 12) < v18;
              v97 = v42 == v20;
              v44 = v42 < v20;
              if (v97)
                v44 = v43;
              v41 = v37;
              if (v44)
                goto LABEL_34;
            }
            v37 = v41;
            v8 = v35;
          }
          else
          {
            do
            {
              v37 = v36 - 24;
              v38 = *(int *)(v36 - 16) >> 1;
              v39 = *(_DWORD *)(v36 - 12) < v18;
              v97 = v38 == v20;
              v40 = v38 < v20;
              if (v97)
                v40 = v39;
              v36 = v37;
            }
            while (!v40);
LABEL_34:
            v8 = v35;
            if (v35 < v37)
            {
              v45 = v37;
              do
              {
                v189 = *(_QWORD *)(v8 + 16);
                v183 = *(_OWORD *)v8;
                v46 = *(_OWORD *)v45;
                *(_QWORD *)(v8 + 16) = *(_QWORD *)(v45 + 16);
                *(_OWORD *)v8 = v46;
                *(_QWORD *)(v45 + 16) = v189;
                *(_OWORD *)v45 = v183;
                do
                {
                  v47 = *(_DWORD *)(v8 + 32);
                  v48 = *(_DWORD *)(v8 + 36);
                  v8 += 24;
                  v47 >>= 1;
                  v49 = v48 < v18;
                  v97 = v47 == v20;
                  v50 = v47 < v20;
                  if (v97)
                    v50 = v49;
                }
                while (v50);
                do
                {
                  v51 = *(_DWORD *)(v45 - 16);
                  v52 = *(_DWORD *)(v45 - 12);
                  v45 -= 24;
                  v51 >>= 1;
                  v53 = v52 < v18;
                  v97 = v51 == v20;
                  v54 = v51 < v20;
                  if (v97)
                    v54 = v53;
                }
                while (!v54);
              }
              while (v8 < v45);
            }
          }
          if (v8 - 24 != a1)
          {
            v55 = *(_OWORD *)(v8 - 24);
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v8 - 8);
            *(_OWORD *)a1 = v55;
          }
          *(_QWORD *)(v8 - 24) = v30;
          *(_DWORD *)(v8 - 16) = v17;
          *(_DWORD *)(v8 - 12) = v18;
          *(_QWORD *)(v8 - 8) = v31;
          if (v35 < v37)
            goto LABEL_49;
          v56 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::InequalityDetectionHelper *>(a1, v8 - 24);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::InequalityDetectionHelper *>(v8, a2))
          {
            if (v56)
              continue;
LABEL_49:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::InequalityDetectionHelper *,false>(a1, v8 - 24, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v8 - 24;
          if (v56)
            return;
          goto LABEL_1;
        }
        v96 = (_QWORD *)(v8 + 24);
        v97 = v8 == a2 || v96 == (_QWORD *)a2;
        v98 = v97;
        if ((a4 & 1) != 0)
        {
          if ((v98 & 1) == 0)
          {
            v99 = 0;
            v100 = (_QWORD *)v8;
            do
            {
              v102 = v96;
              v103 = *((_DWORD *)v100 + 8);
              v104 = *((_DWORD *)v100 + 9);
              v105 = *((_DWORD *)v100 + 2);
              v106 = v103 >> 1;
              v97 = v103 >> 1 == v105 >> 1;
              v107 = v103 >> 1 < v105 >> 1;
              if (v97)
                v107 = v104 < *((_DWORD *)v100 + 3);
              if (v107)
              {
                v108 = *v102;
                v109 = v100[5];
                v110 = v99;
                do
                {
                  v111 = v8 + v110;
                  *(_OWORD *)(v111 + 24) = *(_OWORD *)(v8 + v110);
                  *(_QWORD *)(v111 + 40) = *(_QWORD *)(v8 + v110 + 16);
                  if (!v110)
                  {
                    v101 = v8;
                    goto LABEL_103;
                  }
                  v112 = *(_DWORD *)(v111 - 16);
                  v113 = v104 < *(_DWORD *)(v111 - 12);
                  v97 = v106 == v112 >> 1;
                  v114 = v106 < v112 >> 1;
                  if (!v97)
                    v113 = v114;
                  v110 -= 24;
                }
                while (v113);
                v101 = v8 + v110 + 24;
LABEL_103:
                *(_QWORD *)v101 = v108;
                *(_DWORD *)(v101 + 8) = v103;
                *(_DWORD *)(v101 + 12) = v104;
                *(_QWORD *)(v101 + 16) = v109;
              }
              v96 = v102 + 3;
              v99 += 24;
              v100 = v102;
            }
            while (v102 + 3 != (_QWORD *)a2);
          }
        }
        else if ((v98 & 1) == 0)
        {
          do
          {
            v169 = v96;
            v170 = *(_DWORD *)(a1 + 32);
            v171 = *(_DWORD *)(a1 + 36);
            v172 = *(_DWORD *)(a1 + 8);
            v173 = v170 >> 1;
            v97 = v170 >> 1 == v172 >> 1;
            v174 = v170 >> 1 < v172 >> 1;
            if (v97)
              v174 = v171 < *(_DWORD *)(a1 + 12);
            if (v174)
            {
              v175 = *v169;
              v176 = *(_QWORD *)(a1 + 40);
              v177 = v169;
              do
              {
                *(_OWORD *)v177 = *(_OWORD *)(v177 - 3);
                v177[2] = *(v177 - 1);
                v178 = *((_DWORD *)v177 - 10);
                v179 = *((_DWORD *)v177 - 9);
                v177 -= 3;
                v180 = v171 < v179;
                v97 = v173 == v178 >> 1;
                v181 = v173 < v178 >> 1;
                if (v97)
                  v181 = v180;
              }
              while (v181);
              *v177 = v175;
              *((_DWORD *)v177 + 2) = v170;
              *((_DWORD *)v177 + 3) = v171;
              v177[2] = v176;
            }
            v96 = v169 + 3;
            a1 = (uint64_t)v169;
          }
          while (v169 + 3 != (_QWORD *)a2);
        }
        return;
    }
  }
}

  v8 = a2 - 2;
  i = a1;
  while (2)
  {
    a1 = i;
    v10 = (uint64_t)a2 - i;
    v11 = (uint64_t)((uint64_t)a2 - i) >> 5;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return *(double *)&v16;
      case 2uLL:
        v81 = *((int *)a2 - 6) >> 1;
        v82 = *(int *)(i + 8) >> 1;
        v83 = v81 < v82;
        if (v81 == v82 && (v84 = *((_QWORD *)a2 - 2), v85 = *(_QWORD *)(i + 16), v83 = v84 < v85, v84 == v85))
        {
          if (!*((_BYTE *)a2 - 8) || *(_BYTE *)(i + 24))
            return *(double *)&v16;
        }
        else if (!v83)
        {
          return *(double *)&v16;
        }
        *(_OWORD *)v200 = *(_OWORD *)i;
        *(_OWORD *)&v200[16] = *(_OWORD *)(i + 16);
        v16 = *v8;
        *(_OWORD *)(i + 9) = *(_OWORD *)((char *)a2 - 23);
        *(_OWORD *)i = v16;
        *(_QWORD *)&v16 = *(_QWORD *)v200;
        *(_OWORD *)((char *)a2 - 23) = *(_OWORD *)&v200[9];
        *v8 = *(_OWORD *)v200;
        return *(double *)&v16;
      case 3uLL:
        *(_QWORD *)&v16 = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *>((__int128 *)i, (__int128 *)(i + 32), a2 - 2).n128_u64[0];
        return *(double *)&v16;
      case 4uLL:
        *(_QWORD *)&v16 = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *>(i, i + 32, i + 64, (uint64_t)(a2 - 2)).n128_u64[0];
        return *(double *)&v16;
      case 5uLL:
        *(_QWORD *)&v16 = std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *,0>(i, i + 32, i + 64, i + 96, (uint64_t)(a2 - 2)).n128_u64[0];
        return *(double *)&v16;
      default:
        if (v10 <= 767)
        {
          v86 = (_OWORD *)(i + 32);
          v88 = (_OWORD *)i == a2 || v86 == a2;
          if ((a4 & 1) != 0)
          {
            if (v88)
              return *(double *)&v16;
            v89 = 0;
            v90 = (_OWORD *)i;
            while (1)
            {
              v92 = v90;
              v90 = v86;
              v93 = *((_DWORD *)v92 + 10);
              v94 = v93 >> 1;
              v95 = *((int *)v92 + 2) >> 1;
              if (v93 >> 1 == v95)
              {
                v96 = *((_QWORD *)v92 + 6);
                v97 = *((_QWORD *)v92 + 2);
                if (v96 == v97)
                {
                  if (*((_BYTE *)v92 + 56))
                    v98 = *((_BYTE *)v92 + 24) == 0;
                  else
                    v98 = 0;
                  if (!v98)
                    goto LABEL_195;
                }
                else if (v96 >= v97)
                {
                  goto LABEL_195;
                }
              }
              else
              {
                if (v94 >= v95)
                  goto LABEL_195;
                v96 = *((_QWORD *)v92 + 6);
              }
              v99 = *((_QWORD *)v92 + 4);
              v100 = *((_DWORD *)v92 + 11);
              v101 = *((_BYTE *)v92 + 56);
              *v90 = *v92;
              v16 = *(_OWORD *)((char *)v92 + 9);
              *(_OWORD *)((char *)v90 + 9) = v16;
              v91 = i;
              if (v92 == (_OWORD *)i)
                goto LABEL_194;
              v102 = v89;
              if (!v101)
              {
                while (1)
                {
                  v106 = (_OWORD *)(i + v102);
                  v107 = *(int *)(i + v102 - 24) >> 1;
                  if (v94 == v107)
                  {
                    if (v96 >= *((_QWORD *)v106 - 2))
                      goto LABEL_217;
                  }
                  else if (v94 >= v107)
                  {
                    goto LABEL_222;
                  }
                  v92 -= 2;
                  *v106 = *(v106 - 2);
                  v16 = *(_OWORD *)((char *)v106 - 23);
                  *(_OWORD *)((char *)v106 + 9) = v16;
                  v102 -= 32;
                  if (!v102)
                    goto LABEL_193;
                }
              }
              while (1)
              {
                v103 = (_OWORD *)(i + v102);
                v104 = *(int *)(i + v102 - 24) >> 1;
                if (v94 != v104)
                {
                  if (v94 >= v104)
                    goto LABEL_222;
                  goto LABEL_211;
                }
                v105 = *((_QWORD *)v103 - 2);
                if (v96 == v105)
                  break;
                if (v96 >= v105)
                {
LABEL_217:
                  v91 = i + v102;
                  goto LABEL_194;
                }
LABEL_211:
                v92 -= 2;
                *v103 = *(v103 - 2);
                v16 = *(_OWORD *)((char *)v103 - 23);
                *(_OWORD *)((char *)v103 + 9) = v16;
                v102 -= 32;
                if (!v102)
                {
LABEL_193:
                  v91 = i;
                  goto LABEL_194;
                }
              }
              if (!*(_BYTE *)(i + v102 - 8))
                goto LABEL_211;
LABEL_222:
              v91 = (unint64_t)v92;
LABEL_194:
              *(_QWORD *)v91 = v99;
              *(_DWORD *)(v91 + 8) = v93;
              *(_DWORD *)(v91 + 12) = v100;
              *(_QWORD *)(v91 + 16) = v96;
              *(_BYTE *)(v91 + 24) = v101;
LABEL_195:
              v86 = v90 + 2;
              v89 += 32;
              if (v90 + 2 == a2)
                return *(double *)&v16;
            }
          }
          if (v88)
            return *(double *)&v16;
          while (1)
          {
            v181 = a1;
            a1 = (uint64_t)v86;
            v182 = *(_DWORD *)(v181 + 40);
            v183 = v182 >> 1;
            v184 = *(int *)(v181 + 8) >> 1;
            if (v182 >> 1 == v184)
            {
              v185 = *(_QWORD *)(v181 + 48);
              v186 = *(_QWORD *)(v181 + 16);
              if (v185 == v186)
              {
                if (*(_BYTE *)(v181 + 56))
                  v187 = *(_BYTE *)(v181 + 24) == 0;
                else
                  v187 = 0;
                if (!v187)
                  goto LABEL_323;
              }
              else if (v185 >= v186)
              {
                goto LABEL_323;
              }
              v188 = *(_QWORD *)a1;
              v189 = *(_DWORD *)(v181 + 44);
              v190 = *(_BYTE *)(v181 + 56);
              if (v190)
                goto LABEL_340;
              do
              {
LABEL_345:
                while (1)
                {
                  v191 = v181;
                  *(_OWORD *)(v181 + 32) = *(_OWORD *)v181;
                  v16 = *(_OWORD *)(v181 + 9);
                  *(_OWORD *)(v181 + 41) = v16;
                  v181 -= 32;
                  v195 = *(int *)(v191 - 24) >> 1;
                  if (v183 == v195)
                    break;
                  if (v183 >= v195)
                    goto LABEL_322;
                }
              }
              while (v185 < *(_QWORD *)(v191 - 16));
            }
            else
            {
              if (v183 >= v184)
                goto LABEL_323;
              v185 = *(_QWORD *)(v181 + 48);
              v188 = *(_QWORD *)a1;
              v189 = *(_DWORD *)(v181 + 44);
              v190 = *(_BYTE *)(v181 + 56);
              if (!v190)
                goto LABEL_345;
              do
              {
LABEL_340:
                while (1)
                {
                  v191 = v181;
                  *(_OWORD *)(v181 + 32) = *(_OWORD *)v181;
                  v16 = *(_OWORD *)(v181 + 9);
                  *(_OWORD *)(v181 + 41) = v16;
                  v181 -= 32;
                  v192 = *(int *)(v191 - 24) >> 1;
                  v193 = v183 < v192;
                  if (v183 == v192)
                  {
                    v194 = *(_QWORD *)(v191 - 16);
                    v193 = v185 < v194;
                    if (v185 == v194)
                      break;
                  }
                  if (!v193)
                    goto LABEL_322;
                }
              }
              while (!*(_BYTE *)(v191 - 8));
            }
LABEL_322:
            *(_QWORD *)v191 = v188;
            *(_DWORD *)(v191 + 8) = v182;
            *(_DWORD *)(v191 + 12) = v189;
            *(_QWORD *)(v191 + 16) = v185;
            *(_BYTE *)(v191 + 24) = v190;
LABEL_323:
            v86 = (_OWORD *)(a1 + 32);
            if ((_OWORD *)(a1 + 32) == a2)
              return *(double *)&v16;
          }
        }
        if (!a3)
        {
          if ((_OWORD *)i == a2)
            return *(double *)&v16;
          v108 = (v11 - 2) >> 1;
          v109 = v108;
          while (1)
          {
            v111 = v109;
            if (v108 < v109)
              goto LABEL_227;
            v112 = (2 * v109) | 1;
            v110 = (_OWORD *)(i + 32 * v112);
            if (2 * v111 + 2 >= (uint64_t)v11)
              goto LABEL_238;
            v113 = *((int *)v110 + 2) >> 1;
            v114 = *((int *)v110 + 10) >> 1;
            v115 = v113 < v114;
            if (v113 == v114
              && (v116 = i + 32 * v112,
                  v117 = *(_QWORD *)(v116 + 16),
                  v118 = *((_QWORD *)v110 + 6),
                  v115 = v117 < v118,
                  v117 == v118))
            {
              if (!*(_BYTE *)(v116 + 24) || *((_BYTE *)v110 + 56))
                goto LABEL_238;
            }
            else if (!v115)
            {
              goto LABEL_238;
            }
            v110 += 2;
            v112 = 2 * v111 + 2;
LABEL_238:
            v119 = i + 32 * v111;
            v120 = *((int *)v110 + 2) >> 1;
            v121 = *(_DWORD *)(v119 + 8);
            v122 = v121 >> 1;
            if (v120 == v121 >> 1)
            {
              v123 = *((_QWORD *)v110 + 2);
              v124 = *(_QWORD *)(v119 + 16);
              v125 = v123 < v124;
              if (v123 == v124)
              {
                if (*((_BYTE *)v110 + 24))
                  v126 = *(_BYTE *)(i + 32 * v111 + 24) == 0;
                else
                  v126 = 0;
                if (v126)
                  goto LABEL_227;
              }
              else
              {
                v123 = *(_QWORD *)(v119 + 16);
                if (v125)
                  goto LABEL_227;
              }
            }
            else
            {
              if (v120 < v122)
                goto LABEL_227;
              v123 = *(_QWORD *)(v119 + 16);
            }
            v127 = *(_QWORD *)v119;
            v128 = *(_DWORD *)(v119 + 12);
            v129 = *(unsigned __int8 *)(v119 + 24);
            v130 = *(_OWORD *)((char *)v110 + 9);
            *(_OWORD *)v119 = *v110;
            *(_OWORD *)(v119 + 9) = v130;
            while (1)
            {
              if (v108 < v112)
                goto LABEL_226;
              v132 = v110;
              v133 = 2 * v112;
              v112 = (2 * v112) | 1;
              v110 = (_OWORD *)(i + 32 * v112);
              v134 = v133 + 2;
              if (v134 < (uint64_t)v11)
              {
                v135 = *((int *)v110 + 2) >> 1;
                v136 = *((int *)v110 + 10) >> 1;
                v137 = v135 < v136;
                if (v135 != v136
                  || (v138 = i + 32 * v112,
                      v139 = *(_QWORD *)(v138 + 16),
                      v140 = *((_QWORD *)v110 + 6),
                      v137 = v139 < v140,
                      v139 != v140))
                {
                  if (!v137)
                    goto LABEL_263;
LABEL_262:
                  v110 += 2;
                  v112 = v134;
                  goto LABEL_263;
                }
                if (*(_BYTE *)(v138 + 24))
                  v141 = *((_BYTE *)v110 + 56) == 0;
                else
                  v141 = 0;
                if (v141)
                  goto LABEL_262;
              }
LABEL_263:
              v142 = *((int *)v110 + 2) >> 1;
              v143 = v142 < v122;
              if (v142 == v122)
              {
                v144 = *((_QWORD *)v110 + 2);
                v143 = v144 < v123;
                if (v144 == v123)
                  break;
              }
              if (v143)
                goto LABEL_225;
LABEL_250:
              v131 = *v110;
              *(_OWORD *)((char *)v132 + 9) = *(_OWORD *)((char *)v110 + 9);
              *v132 = v131;
            }
            if (*((_BYTE *)v110 + 24))
              v145 = v129 == 0;
            else
              v145 = 0;
            if (!v145)
              goto LABEL_250;
LABEL_225:
            v110 = v132;
LABEL_226:
            *(_QWORD *)v110 = v127;
            *((_DWORD *)v110 + 2) = v121;
            *((_DWORD *)v110 + 3) = v128;
            *((_QWORD *)v110 + 2) = v123;
            *((_BYTE *)v110 + 24) = v129;
LABEL_227:
            v109 = v111 - 1;
            if (!v111)
            {
              v146 = (unint64_t)v10 >> 5;
              while (1)
              {
                v147 = 0;
                *(_OWORD *)v201 = *(_OWORD *)i;
                *(_OWORD *)&v201[16] = *(_OWORD *)(i + 16);
                v148 = i;
                do
                {
                  v150 = (_OWORD *)v148;
                  v151 = v147 + 1;
                  v148 += 32 * (v147 + 1);
                  v152 = 2 * v147;
                  v147 = (2 * v147) | 1;
                  v153 = v152 + 2;
                  if (v153 < v146)
                  {
                    v154 = *(int *)(v148 + 8) >> 1;
                    v155 = *(int *)(v148 + 40) >> 1;
                    v156 = v154 < v155;
                    if (v154 == v155
                      && (v157 = &v150[2 * v151],
                          v158 = *((_QWORD *)v157 + 2),
                          v159 = *(_QWORD *)(v148 + 48),
                          v156 = v158 < v159,
                          v158 == v159))
                    {
                      if (*((_BYTE *)v157 + 24) && !*(_BYTE *)(v148 + 56))
                      {
LABEL_278:
                        v148 += 32;
                        v147 = v153;
                      }
                    }
                    else if (v156)
                    {
                      goto LABEL_278;
                    }
                  }
                  v149 = *(_OWORD *)v148;
                  *(_OWORD *)((char *)v150 + 9) = *(_OWORD *)(v148 + 9);
                  *v150 = v149;
                }
                while (v147 <= (uint64_t)((unint64_t)(v146 - 2) >> 1));
                a2 -= 2;
                if ((_OWORD *)v148 == a2)
                {
                  *(_QWORD *)&v16 = *(_QWORD *)v201;
                  *(_OWORD *)(v148 + 9) = *(_OWORD *)&v201[9];
                  *(_OWORD *)v148 = *(_OWORD *)v201;
                }
                else
                {
                  v16 = *a2;
                  *(_OWORD *)(v148 + 9) = *(_OWORD *)((char *)a2 + 9);
                  *(_OWORD *)v148 = v16;
                  *(_QWORD *)&v16 = *(_QWORD *)v201;
                  *(_OWORD *)((char *)a2 + 9) = *(_OWORD *)&v201[9];
                  *a2 = *(_OWORD *)v201;
                  v160 = v148 - i + 32;
                  if (v160 >= 33)
                  {
                    v161 = ((unint64_t)v160 >> 5) - 2;
                    v162 = v161 >> 1;
                    v163 = i + 32 * (v161 >> 1);
                    v164 = *(int *)(v163 + 8) >> 1;
                    v165 = *(_DWORD *)(v148 + 8);
                    v166 = v165 >> 1;
                    if (v164 == v165 >> 1)
                    {
                      v167 = *(_QWORD *)(v163 + 16);
                      v168 = *(_QWORD *)(v148 + 16);
                      v169 = v167 < v168;
                      if (v167 == v168)
                      {
                        if (*(_BYTE *)(i + 32 * v162 + 24))
                          v170 = *(_BYTE *)(v148 + 24) == 0;
                        else
                          v170 = 0;
                        if (!v170)
                          goto LABEL_276;
LABEL_303:
                        v171 = *(_QWORD *)v148;
                        v172 = *(_DWORD *)(v148 + 12);
                        v173 = *(_BYTE *)(v148 + 24);
                        v16 = *(_OWORD *)(v163 + 9);
                        *(_OWORD *)v148 = *(_OWORD *)v163;
                        *(_OWORD *)(v148 + 9) = v16;
                        if (v161 >= 2)
                        {
                          if (!v173)
                          {
                            while (1)
                            {
                              v177 = v162 - 1;
                              v162 = (v162 - 1) >> 1;
                              v174 = i + 32 * v162;
                              v178 = *(int *)(v174 + 8) >> 1;
                              v179 = v178 < v166;
                              if (v178 == v166 && (v180 = *(_QWORD *)(v174 + 16), v179 = v180 < v167, v180 == v167))
                              {
                                if (!*(_BYTE *)(i + 32 * v162 + 24))
                                  goto LABEL_304;
                              }
                              else if (!v179)
                              {
                                goto LABEL_304;
                              }
                              v16 = *(_OWORD *)v174;
                              *(_OWORD *)(v163 + 9) = *(_OWORD *)(v174 + 9);
                              *(_OWORD *)v163 = v16;
                              v163 = i + 32 * v162;
                              if (v177 <= 1)
                                goto LABEL_305;
                            }
                          }
                          while (1)
                          {
                            v175 = v162 - 1;
                            v162 = (v162 - 1) >> 1;
                            v174 = i + 32 * v162;
                            v176 = *(int *)(v174 + 8) >> 1;
                            if (v176 == v166)
                            {
                              if (*(_QWORD *)(v174 + 16) >= v167)
                                break;
                            }
                            else if (v176 >= v166)
                            {
                              break;
                            }
                            v16 = *(_OWORD *)v174;
                            *(_OWORD *)(v163 + 9) = *(_OWORD *)(v174 + 9);
                            *(_OWORD *)v163 = v16;
                            v163 = i + 32 * v162;
                            if (v175 < 2)
                              goto LABEL_305;
                          }
                        }
LABEL_304:
                        v174 = v163;
LABEL_305:
                        *(_QWORD *)v174 = v171;
                        *(_DWORD *)(v174 + 8) = v165;
                        *(_DWORD *)(v174 + 12) = v172;
                        *(_QWORD *)(v174 + 16) = v167;
                        *(_BYTE *)(v174 + 24) = v173;
                      }
                      else
                      {
                        v167 = *(_QWORD *)(v148 + 16);
                        if (v169)
                          goto LABEL_303;
                      }
                    }
                    else if (v164 < v166)
                    {
                      v167 = *(_QWORD *)(v148 + 16);
                      goto LABEL_303;
                    }
                  }
                }
LABEL_276:
                v27 = v146-- <= 2;
                if (v27)
                  return *(double *)&v16;
              }
            }
          }
        }
        v12 = v11 >> 1;
        v13 = (__int128 *)(i + 32 * (v11 >> 1));
        if ((unint64_t)v10 > 0x1000)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *>((__int128 *)a1, (__int128 *)(a1 + 32 * (v11 >> 1)), a2 - 2);
          v14 = 32 * v12;
          v15 = (__int128 *)(32 * v12 + a1 - 32);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *>((__int128 *)(a1 + 32), v15, a2 - 4);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *>((__int128 *)(a1 + 64), (__int128 *)(a1 + 32 + v14), a2 - 6);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *>(v15, v13, (__int128 *)(a1 + 32 + v14));
          *(_OWORD *)v197 = *(_OWORD *)a1;
          *(_OWORD *)&v197[16] = *(_OWORD *)(a1 + 16);
          v16 = *(__int128 *)((char *)v13 + 9);
          *(_OWORD *)a1 = *v13;
          *(_OWORD *)(a1 + 9) = v16;
          *(_QWORD *)&v16 = *(_QWORD *)v197;
          *(__int128 *)((char *)v13 + 9) = *(_OWORD *)&v197[9];
          *v13 = *(_OWORD *)v197;
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_13;
          goto LABEL_7;
        }
        *(_QWORD *)&v16 = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *>((__int128 *)(a1 + 32 * (v11 >> 1)), (__int128 *)a1, a2 - 2).n128_u64[0];
        --a3;
        if ((a4 & 1) == 0)
        {
LABEL_7:
          v17 = *(int *)(a1 - 24) >> 1;
          v18 = *(_DWORD *)(a1 + 8);
          v19 = v18 >> 1;
          if (v17 == v18 >> 1)
          {
            v20 = *(_QWORD *)(a1 - 16);
            v21 = *(_QWORD *)(a1 + 16);
            if (v20 == v21)
            {
              if (*(_BYTE *)(a1 - 8) && !*(_BYTE *)(a1 + 24))
                goto LABEL_18;
            }
            else
            {
              if (v20 < v21)
                goto LABEL_18;
              v20 = *(_QWORD *)(a1 + 16);
            }
          }
          else
          {
            if (v17 < v19)
              goto LABEL_18;
            v20 = *(_QWORD *)(a1 + 16);
          }
          v54 = *(_QWORD *)a1;
          v55 = *(_DWORD *)(a1 + 12);
          v56 = *(_BYTE *)(a1 + 24);
          v57 = *((_DWORD *)a2 - 6);
          v58 = v19 < v57 >> 1;
          if (v19 == v57 >> 1 && (v59 = *((_QWORD *)a2 - 2), v58 = v20 < v59, v20 == v59))
          {
            if (*(_BYTE *)(a1 + 24) && !*((_BYTE *)a2 - 8))
              goto LABEL_105;
          }
          else if (v58)
          {
            if (!*(_BYTE *)(a1 + 24))
            {
              for (i = a1 + 32; ; i += 32)
              {
                v67 = *(int *)(i + 8) >> 1;
                if (v19 == v67)
                {
                  if (v20 < *(_QWORD *)(i + 16))
                    goto LABEL_131;
                }
                else if (v19 < v67)
                {
                  goto LABEL_131;
                }
              }
            }
LABEL_105:
            for (i = a1 + 32; ; i += 32)
            {
              v60 = *(int *)(i + 8) >> 1;
              v61 = v19 < v60;
              if (v19 == v60 && (v62 = *(_QWORD *)(i + 16), v61 = v20 < v62, v20 == v62))
              {
                if (!*(_BYTE *)(i + 24))
                  goto LABEL_131;
              }
              else if (v61)
              {
                goto LABEL_131;
              }
            }
          }
          i = a1 + 32;
          if (a1 + 32 < (unint64_t)a2)
          {
            if (!*(_BYTE *)(a1 + 24))
            {
              while (1)
              {
                v66 = *(int *)(i + 8) >> 1;
                if (v19 == v66)
                {
                  if (v20 < *(_QWORD *)(i + 16))
                    goto LABEL_131;
                }
                else if (v19 < v66)
                {
                  goto LABEL_131;
                }
                i += 32;
                if (i >= (unint64_t)a2)
                  goto LABEL_131;
              }
            }
            do
            {
              v63 = *(int *)(i + 8) >> 1;
              v64 = v19 < v63;
              if (v19 == v63 && (v65 = *(_QWORD *)(i + 16), v64 = v20 < v65, v20 == v65))
              {
                if (!*(_BYTE *)(i + 24))
                  break;
              }
              else if (v64)
              {
                break;
              }
              i += 32;
            }
            while (i < (unint64_t)a2);
          }
LABEL_131:
          v68 = a2;
          if (i >= (unint64_t)a2)
            goto LABEL_168;
          if (*(_BYTE *)(a1 + 24))
          {
            for (j = a2 - 1; ; j -= 2)
            {
              v70 = v57 >> 1;
              v71 = v19 < v70;
              if (v19 == v70 && (v71 = v20 < *(_QWORD *)j, v20 == *(_QWORD *)j))
              {
                if (*((_BYTE *)j + 8))
                  goto LABEL_146;
              }
              else if (!v71)
              {
                goto LABEL_146;
              }
              v57 = *((_DWORD *)j - 10);
            }
          }
          for (j = a2 - 1; ; j -= 2)
          {
            v72 = v57 >> 1;
            if (v19 != v72)
              break;
            if (v20 >= *(_QWORD *)j)
              goto LABEL_146;
LABEL_143:
            v57 = *((_DWORD *)j - 10);
          }
          if (v19 < v72)
            goto LABEL_143;
LABEL_146:
          v68 = j - 1;
LABEL_168:
          while (i < (unint64_t)v68)
          {
            *(_OWORD *)v199 = *(_OWORD *)i;
            *(_OWORD *)&v199[16] = *(_OWORD *)(i + 16);
            v16 = *v68;
            *(_OWORD *)(i + 9) = *(_OWORD *)((char *)v68 + 9);
            *(_OWORD *)i = v16;
            *(_QWORD *)&v16 = *(_QWORD *)v199;
            *(_OWORD *)((char *)v68 + 9) = *(_OWORD *)&v199[9];
            *v68 = *(_OWORD *)v199;
            if (v56)
            {
              do
              {
                while (1)
                {
                  i += 32;
                  v73 = *(int *)(i + 8) >> 1;
                  v74 = v19 < v73;
                  if (v19 == v73)
                  {
                    v75 = *(_QWORD *)(i + 16);
                    v74 = v20 < v75;
                    if (v20 == v75)
                      break;
                  }
                  if (v74)
                    goto LABEL_157;
                }
              }
              while (*(_BYTE *)(i + 24));
            }
            else
            {
              do
              {
                while (1)
                {
                  i += 32;
                  v76 = *(int *)(i + 8) >> 1;
                  if (v19 != v76)
                    break;
                  if (v20 < *(_QWORD *)(i + 16))
                    goto LABEL_157;
                }
              }
              while (v19 >= v76);
            }
LABEL_157:
            if (v56)
            {
              do
              {
                while (1)
                {
                  v68 -= 2;
                  v77 = *((int *)v68 + 2) >> 1;
                  v78 = v19 < v77;
                  if (v19 == v77)
                  {
                    v79 = *((_QWORD *)v68 + 2);
                    v78 = v20 < v79;
                    if (v20 == v79)
                      break;
                  }
                  if (!v78)
                    goto LABEL_168;
                }
              }
              while (!*((_BYTE *)v68 + 24));
            }
            else
            {
              do
              {
                while (1)
                {
                  v68 -= 2;
                  v80 = *((int *)v68 + 2) >> 1;
                  if (v19 != v80)
                    break;
                  if (v20 >= *((_QWORD *)v68 + 2))
                    goto LABEL_168;
                }
              }
              while (v19 < v80);
            }
          }
          if (i - 32 != a1)
          {
            v16 = *(_OWORD *)(i - 32);
            *(_OWORD *)(a1 + 9) = *(_OWORD *)(i - 23);
            *(_OWORD *)a1 = v16;
          }
          a4 = 0;
          *(_QWORD *)(i - 32) = v54;
          *(_DWORD *)(i - 24) = v18;
          *(_DWORD *)(i - 20) = v55;
          *(_QWORD *)(i - 16) = v20;
          *(_BYTE *)(i - 8) = v56;
          continue;
        }
LABEL_13:
        v18 = *(_DWORD *)(a1 + 8);
        v19 = v18 >> 1;
LABEL_18:
        v22 = *(_QWORD *)(a1 + 16);
        v23 = *(_BYTE *)(a1 + 24);
        v24 = a1 + 32;
        if (!v23)
        {
          while (1)
          {
            v26 = *(int *)(v24 + 8) >> 1;
            v27 = v26 < v19;
            if (v26 == v19 && (v28 = *(_QWORD *)(v24 + 16), v27 = v28 < v22, v28 == v22))
            {
              if (!*(_BYTE *)(v24 + 24))
                goto LABEL_31;
            }
            else if (!v27)
            {
              goto LABEL_31;
            }
            v24 += 32;
          }
        }
        while (2)
        {
          v25 = *(int *)(v24 + 8) >> 1;
          if (v25 == v19)
          {
            if (*(_QWORD *)(v24 + 16) >= v22)
              goto LABEL_31;
LABEL_21:
            v24 += 32;
            continue;
          }
          break;
        }
        if (v25 < v19)
          goto LABEL_21;
LABEL_31:
        v29 = *(_QWORD *)a1;
        v30 = *(_DWORD *)(a1 + 12);
        if (v24 - 32 != a1)
        {
          k = (int *)(a2 - 2);
          if (!*(_BYTE *)(a1 + 24))
          {
            while (1)
            {
              v33 = k[2] >> 1;
              v34 = v33 < v19;
              if (v33 == v19 && (v35 = *((_QWORD *)k + 2), v34 = v35 < v22, v35 == v22))
              {
                if (*((_BYTE *)k + 24))
                  goto LABEL_62;
              }
              else if (v34)
              {
                goto LABEL_62;
              }
              k -= 8;
            }
          }
          while (1)
          {
            v32 = k[2] >> 1;
            if (v32 == v19)
            {
              if (*((_QWORD *)k + 2) < v22)
                goto LABEL_62;
            }
            else if (v32 < v19)
            {
              goto LABEL_62;
            }
            k -= 8;
          }
        }
        k = (int *)a2;
        if (v24 < (unint64_t)a2)
        {
          for (k = (int *)(a2 - 2); ; k -= 8)
          {
            v37 = k[2] >> 1;
            v38 = v37 < v19;
            if (v37 == v19 && (v39 = *((_QWORD *)k + 2), v38 = v39 < v22, v39 == v22))
            {
              if (*((_BYTE *)k + 24))
                v40 = *(_BYTE *)(a1 + 24) == 0;
              else
                v40 = 0;
              if (v40 || v24 >= (unint64_t)k)
                break;
            }
            else if (v38 || v24 >= (unint64_t)k)
            {
              break;
            }
          }
        }
LABEL_62:
        i = v24;
        if (v24 >= (unint64_t)k)
          goto LABEL_91;
        i = v24;
        v42 = (unint64_t)k;
        while (2)
        {
          *(_OWORD *)v198 = *(_OWORD *)i;
          *(_OWORD *)&v198[16] = *(_OWORD *)(i + 16);
          v43 = *(_OWORD *)v42;
          *(_OWORD *)(i + 9) = *(_OWORD *)(v42 + 9);
          *(_OWORD *)i = v43;
          i += 32;
          *(_OWORD *)(v42 + 9) = *(_OWORD *)&v198[9];
          *(_OWORD *)v42 = *(_OWORD *)v198;
          if (!v23)
          {
            while (1)
            {
              v45 = *(int *)(i + 8) >> 1;
              v46 = v45 < v19;
              if (v45 == v19 && (v47 = *(_QWORD *)(i + 16), v46 = v47 < v22, v47 == v22))
              {
                if (!*(_BYTE *)(i + 24))
                  goto LABEL_78;
              }
              else if (!v46)
              {
                goto LABEL_78;
              }
              i += 32;
            }
          }
          while (2)
          {
            v44 = *(int *)(i + 8) >> 1;
            if (v44 == v19)
            {
              if (*(_QWORD *)(i + 16) >= v22)
                goto LABEL_78;
LABEL_68:
              i += 32;
              continue;
            }
            break;
          }
          if (v44 < v19)
            goto LABEL_68;
LABEL_78:
          v42 -= 32;
          if (!v23)
          {
            while (1)
            {
              v49 = *(int *)(v42 + 8) >> 1;
              v50 = v49 < v19;
              if (v49 == v19 && (v51 = *(_QWORD *)(v42 + 16), v50 = v51 < v22, v51 == v22))
              {
                if (*(_BYTE *)(v42 + 24))
                  goto LABEL_64;
              }
              else if (v50)
              {
                goto LABEL_64;
              }
              v42 -= 32;
            }
          }
          while (2)
          {
            v48 = *(int *)(v42 + 8) >> 1;
            if (v48 == v19)
            {
              if (*(_QWORD *)(v42 + 16) < v22)
                goto LABEL_64;
LABEL_81:
              v42 -= 32;
              continue;
            }
            break;
          }
          if (v48 >= v19)
            goto LABEL_81;
LABEL_64:
          if (i < v42)
            continue;
          break;
        }
LABEL_91:
        if (i - 32 != a1)
        {
          v52 = *(_OWORD *)(i - 32);
          *(_OWORD *)(a1 + 9) = *(_OWORD *)(i - 23);
          *(_OWORD *)a1 = v52;
        }
        *(_QWORD *)(i - 32) = v29;
        *(_DWORD *)(i - 24) = v18;
        *(_DWORD *)(i - 20) = v30;
        *(_QWORD *)(i - 16) = v22;
        *(_BYTE *)(i - 8) = v23;
        if (v24 < (unint64_t)k)
        {
LABEL_96:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *,false>(a1, i - 32, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v53 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *>(a1, i - 32);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *>(i, (uint64_t)a2))
        {
          if (v53)
            continue;
          goto LABEL_96;
        }
        a2 = (_OWORD *)(i - 32);
        if (!v53)
          goto LABEL_1;
        return *(double *)&v16;
    }
  }
}

  v9 = (const void **)a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = 0xAAAAAAAAAAAAAAABLL * (v12 >> 3);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v33 = (const void **)*(a2 - 3);
        v32 = a2 - 3;
        v31 = v33;
        v34 = *(char *)(a1 + 23);
        v35 = *((char *)v32 + 23);
        if (v35 >= 0)
          v36 = *((unsigned __int8 *)v32 + 23);
        else
          v36 = (size_t)v32[1];
        if (v35 >= 0)
          v37 = v32;
        else
          v37 = v31;
        if (v34 >= 0)
          v38 = *(unsigned __int8 *)(a1 + 23);
        else
          v38 = *(_QWORD *)(a1 + 8);
        if (v34 >= 0)
          v39 = (const void *)a1;
        else
          v39 = *(const void **)a1;
        if (v38 >= v36)
          v40 = v36;
        else
          v40 = v38;
        v41 = memcmp(v37, v39, v40);
        v42 = v36 < v38;
        if (v41)
          v42 = v41 < 0;
        if (v42)
        {
          v52 = *(const void **)(a1 + 16);
          v50 = *(_OWORD *)a1;
          v43 = *(_OWORD *)v32;
          *(_QWORD *)(a1 + 16) = v32[2];
          *(_OWORD *)a1 = v43;
          *(_OWORD *)v32 = v50;
          v32[2] = v52;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)(a1 + 24), a2 - 3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48), a2 - 3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a1 + 24, a1 + 48, (__int128 *)(a1 + 72), a2 - 3);
        return;
      default:
        if (v12 <= 575)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, a2);
          return;
        }
        if (v10 != 1)
        {
          v14 = v13 >> 1;
          v15 = a1 + 24 * (v13 >> 1);
          if ((unint64_t)v12 < 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)v15, (const void **)a1, a2 - 3);
            if ((a5 & 1) != 0)
              goto LABEL_28;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)v15, a2 - 3);
            v16 = 24 * v14;
            v17 = (const void **)(24 * v14 + a1 - 24);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)(a1 + 24), v17, a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)(a1 + 48), (const void **)(a1 + 24 + v16), a2 - 9);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v17, (const void **)v15, (const void **)(a1 + 24 + v16));
            v51 = *(_QWORD *)(a1 + 16);
            v49 = *(_OWORD *)a1;
            v18 = *(_OWORD *)v15;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v15 + 16);
            *(_OWORD *)a1 = v18;
            *(_QWORD *)(v15 + 16) = v51;
            *(_OWORD *)v15 = v49;
            if ((a5 & 1) != 0)
              goto LABEL_28;
          }
          v19 = *(char *)(a1 + 23);
          v20 = *(char *)(a1 - 1);
          if (v20 >= 0)
            v21 = *(unsigned __int8 *)(a1 - 1);
          else
            v21 = *(_QWORD *)(a1 - 16);
          if (v20 >= 0)
            v22 = (const void *)(a1 - 24);
          else
            v22 = *(const void **)(a1 - 24);
          if (v19 >= 0)
            v23 = *(unsigned __int8 *)(a1 + 23);
          else
            v23 = *(_QWORD *)(a1 + 8);
          if (v19 >= 0)
            v24 = (const void *)a1;
          else
            v24 = *(const void **)a1;
          if (v23 >= v21)
            v25 = v21;
          else
            v25 = v23;
          v26 = memcmp(v22, v24, v25);
          v27 = v21 < v23;
          if (v26)
            v27 = v26 < 0;
          if (!v27)
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>((const void **)a1, a2);
            goto LABEL_33;
          }
LABEL_28:
          v28 = (const void **)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>((__int128 *)a1, (uint64_t)a2);
          if ((v29 & 1) == 0)
            goto LABEL_31;
          v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, v28);
          v9 = v28 + 3;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((uint64_t)(v28 + 3), a2))
          {
            v10 = v11 + 1;
            if (v30)
              continue;
LABEL_31:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(a1, v28, a3, -v11, a5 & 1);
            v9 = v28 + 3;
LABEL_33:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v28;
          if (v30)
            return;
          goto LABEL_1;
        }
        if ((const void **)a1 != a2)
        {
          v44 = (v13 - 2) >> 1;
          v45 = v44 + 1;
          v46 = (__n128 *)(a1 + 24 * v44);
          do
          {
            std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a3, 0xAAAAAAAAAAAAAAABLL * (v12 >> 3), v46);
            v46 = (__n128 *)((char *)v46 - 24);
            --v45;
          }
          while (v45);
          v47 = v12 / 0x18uLL;
          do
          {
            std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::string *>(a1, (uint64_t)a2, a3, v47);
            a2 -= 3;
          }
          while (v47-- > 2);
        }
        return;
    }
  }
}

  v11 = a2 - 1;
  v118 = a2 - 2;
  v12 = a2 - 3;
  v13 = a1;
  while (2)
  {
    a1 = v13;
    v14 = (char *)a2 - (char *)v13;
    v15 = a2 - v13;
    switch(v15)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v81 = a2[-1].n128_f64[0];
        v80 = a2 - 1;
        if (v81 * v13->n128_f64[1] > v13->n128_f64[0] * v80->n128_f64[1])
        {
          v138 = *v13;
          *v13 = *v80;
          *v80 = v138;
        }
        return;
      case 3uLL:
        v82 = v13 + 1;
        v83 = v13[1].n128_f64[0];
        v84 = a2 - 1;
        v85 = v83 * v13->n128_f64[1];
        v86 = v13[1].n128_f64[1];
        v87 = v86 * a2[-1].n128_f64[0];
        v88 = v83 * a2[-1].n128_f64[1];
        if (v85 <= v13->n128_f64[0] * v86)
        {
          if (v87 > v88)
          {
            v110 = *v82;
            *v82 = *v84;
            *v84 = v110;
            if (v13[1].n128_f64[0] * v13->n128_f64[1] > v13->n128_f64[0] * v13[1].n128_f64[1])
            {
              v141 = *v13;
              *v13 = *v82;
              *v82 = v141;
            }
          }
        }
        else
        {
          if (v87 <= v88)
          {
            v142 = *v13;
            *v13 = *v82;
            *v82 = v142;
            if (a2[-1].n128_f64[0] * v13[1].n128_f64[1] <= v13[1].n128_f64[0] * a2[-1].n128_f64[1])
              return;
            v89 = *v82;
            *v82 = *v84;
          }
          else
          {
            v139 = *v13;
            *v13 = *v84;
            v89 = v139;
          }
          *v84 = v89;
        }
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::KnapsackItem> &,operations_research::sat::KnapsackItem*>(v13, v13[1].n128_f64, v13[2].n128_f64, a2[-1].n128_f64, a6);
        return;
      case 5uLL:
        v90 = v13 + 1;
        v91 = v13 + 2;
        v92 = v13 + 3;
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::KnapsackItem> &,operations_research::sat::KnapsackItem*>(v13, v13[1].n128_f64, v13[2].n128_f64, v13[3].n128_f64, a6);
        v94 = a2[-1].n128_f64[0];
        v93 = a2 - 1;
        if (v94 * v13[3].n128_f64[1] > v13[3].n128_f64[0] * v93->n128_f64[1])
        {
          v95 = *v92;
          *v92 = *v93;
          *v93 = v95;
          if (v13[3].n128_f64[0] * v13[2].n128_f64[1] > v13[2].n128_f64[0] * v13[3].n128_f64[1])
          {
            v96 = *v91;
            *v91 = *v92;
            *v92 = v96;
            if (v13[2].n128_f64[0] * v13[1].n128_f64[1] > v13[1].n128_f64[0] * v13[2].n128_f64[1])
            {
              v97 = *v90;
              *v90 = *v91;
              *v91 = v97;
              if (v13[1].n128_f64[0] * v13->n128_f64[1] > v13->n128_f64[0] * v13[1].n128_f64[1])
              {
                v140 = *v13;
                *v13 = *v90;
                *v90 = v140;
              }
            }
          }
        }
        return;
      default:
        if (v14 > 383)
        {
          if (!a4)
          {
            if (v13 != a2)
              std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::KnapsackItem> &,operations_research::sat::KnapsackItem*,operations_research::sat::KnapsackItem*>(v13->n128_f64, a2->n128_f64, a2->n128_f64);
            return;
          }
          v16 = v15 >> 1;
          v17 = &v13[v15 >> 1];
          v19 = a2[-1].n128_f64[0];
          v18 = a2[-1].n128_f64[1];
          if ((unint64_t)v14 < 0x801)
          {
            v23 = v13->n128_f64[1];
            v24 = &v13[v16].n128_f64[1];
            v25 = v23 * v19;
            v26 = v13->n128_f64[0] * v18;
            if (v13->n128_f64[0] * *v24 <= v17->n128_f64[0] * v23)
            {
              if (v25 > v26)
              {
                v123 = *v13;
                *v13 = *v11;
                a6.n128_u64[1] = v123.n128_u64[1];
                *v11 = v123;
                if (v13->n128_f64[0] * *v24 > v17->n128_f64[0] * v13->n128_f64[1])
                {
                  v124 = *v17;
                  *v17 = *v13;
                  a6.n128_u64[1] = v124.n128_u64[1];
                  *v13 = v124;
                  --a4;
                  a6.n128_u64[0] = v13->n128_u64[0];
                  if ((a5 & 1) != 0)
                    goto LABEL_32;
                  goto LABEL_54;
                }
              }
            }
            else
            {
              if (v25 <= v26)
              {
                v127 = *v17;
                *v17 = *v13;
                a6.n128_u64[1] = v127.n128_u64[1];
                *v13 = v127;
                if (a2[-1].n128_f64[0] * v13->n128_f64[1] <= v13->n128_f64[0] * a2[-1].n128_f64[1])
                  goto LABEL_31;
                v120 = *v13;
                *v13 = *v11;
              }
              else
              {
                v120 = *v17;
                *v17 = *v11;
              }
              a6.n128_u64[1] = v120.n128_u64[1];
              *v11 = v120;
            }
LABEL_31:
            --a4;
            a6.n128_u64[0] = v13->n128_u64[0];
            if ((a5 & 1) != 0)
              goto LABEL_32;
LABEL_54:
            v37 = v13->n128_f64[1];
            if (v13[-1].n128_f64[0] * v37 > a6.n128_f64[0] * v13[-1].n128_f64[1])
              goto LABEL_55;
            if (a6.n128_f64[0] * a2[-1].n128_f64[1] <= v37 * a2[-1].n128_f64[0])
            {
              n128_f64 = v13[1].n128_f64;
              do
              {
                v13 = (__n128 *)n128_f64;
                if (n128_f64 >= (double *)a2)
                  break;
                v71 = a6.n128_f64[0] * n128_f64[1];
                v72 = v37 * *n128_f64;
                n128_f64 += 2;
              }
              while (v71 <= v72);
            }
            else
            {
              do
              {
                v68 = v13[1].n128_f64[0];
                v69 = v13[1].n128_f64[1];
                ++v13;
              }
              while (a6.n128_f64[0] * v69 <= v37 * v68);
            }
            v73 = a2;
            if (v13 < a2)
            {
              v73 = a2;
              do
              {
                v74 = v73[-1].n128_f64[0];
                v75 = v73[-1].n128_f64[1];
                --v73;
              }
              while (a6.n128_f64[0] * v75 > v37 * v74);
            }
            while (v13 < v73)
            {
              v137 = *v13;
              *v13 = *v73;
              *v73 = v137;
              do
              {
                v76 = v13[1].n128_f64[0];
                v77 = v13[1].n128_f64[1];
                ++v13;
              }
              while (a6.n128_f64[0] * v77 <= v37 * v76);
              do
              {
                v78 = v73[-1].n128_f64[0];
                v79 = v73[-1].n128_f64[1];
                --v73;
              }
              while (a6.n128_f64[0] * v79 > v37 * v78);
            }
            if (&v13[-1] != a1)
              *a1 = v13[-1];
            a5 = 0;
            v13[-1].n128_u64[0] = a6.n128_u64[0];
            v13[-1].n128_f64[1] = v37;
            continue;
          }
          v20 = &v13[v16].n128_f64[1];
          v21 = *v20 * v19;
          v22 = v17->n128_f64[0] * v18;
          if (v17->n128_f64[0] * v13->n128_f64[1] <= v13->n128_f64[0] * *v20)
          {
            if (v21 > v22)
            {
              v121 = *v17;
              *v17 = *v11;
              *v11 = v121;
              if (v17->n128_f64[0] * v13->n128_f64[1] > v13->n128_f64[0] * *v20)
              {
                v122 = *v13;
                *v13 = *v17;
                *v17 = v122;
              }
            }
          }
          else
          {
            if (v21 <= v22)
            {
              v125 = *v13;
              *v13 = *v17;
              *v17 = v125;
              if (a2[-1].n128_f64[0] * *v20 <= v17->n128_f64[0] * a2[-1].n128_f64[1])
                goto LABEL_22;
              v119 = *v17;
              *v17 = *v11;
            }
            else
            {
              v119 = *v13;
              *v13 = *v11;
            }
            *v11 = v119;
          }
LABEL_22:
          v27 = v13 + 1;
          v28 = &v13[v16];
          v30 = v28[-1].n128_f64[0];
          v29 = v28 - 1;
          v31 = &v29->n128_f64[1];
          v32 = v29->n128_f64[1];
          v33 = v32 * a2[-2].n128_f64[0];
          v34 = v30 * a2[-2].n128_f64[1];
          if (v30 * v13[1].n128_f64[1] <= v13[1].n128_f64[0] * v32)
          {
            if (v33 > v34)
            {
              v126 = *v29;
              *v29 = *v118;
              *v118 = v126;
              if (v29->n128_f64[0] * v13[1].n128_f64[1] > v13[1].n128_f64[0] * *v31)
              {
                v36 = *v27;
                *v27 = *v29;
                *v29 = v36;
              }
            }
          }
          else if (v33 <= v34)
          {
            v38 = *v27;
            *v27 = *v29;
            *v29 = v38;
            if (a2[-2].n128_f64[0] * *v31 > v29->n128_f64[0] * a2[-2].n128_f64[1])
            {
              v128 = *v29;
              *v29 = *v118;
              *v118 = v128;
            }
          }
          else
          {
            v35 = *v27;
            *v27 = *v118;
            *v118 = v35;
          }
          v39 = v13 + 2;
          v40 = &v13[v16];
          v42 = v40[1].n128_f64[0];
          v41 = v40 + 1;
          v43 = &v41->n128_f64[1];
          v44 = v41->n128_f64[1];
          v45 = v44 * a2[-3].n128_f64[0];
          v46 = v42 * a2[-3].n128_f64[1];
          if (v42 * v13[2].n128_f64[1] <= v13[2].n128_f64[0] * v44)
          {
            if (v45 > v46)
            {
              v129 = *v41;
              *v41 = *v12;
              *v12 = v129;
              if (v41->n128_f64[0] * v13[2].n128_f64[1] > v13[2].n128_f64[0] * *v43)
              {
                v48 = *v39;
                *v39 = *v41;
                *v41 = v48;
              }
            }
          }
          else
          {
            if (v45 <= v46)
            {
              v49 = *v39;
              *v39 = *v41;
              *v41 = v49;
              if (a2[-3].n128_f64[0] * *v43 <= v41->n128_f64[0] * a2[-3].n128_f64[1])
                goto LABEL_44;
              v130 = *v41;
              *v41 = *v12;
              v47 = v130;
            }
            else
            {
              v47 = *v39;
              *v39 = *v12;
            }
            *v12 = v47;
          }
LABEL_44:
          v50 = *v20 * v41->n128_f64[0];
          v51 = v17->n128_f64[0] * *v43;
          if (v17->n128_f64[0] * *v31 <= v29->n128_f64[0] * *v20)
          {
            if (v50 > v51)
            {
              v132 = *v17;
              *v17 = *v41;
              *v41 = v132;
              if (v17->n128_f64[0] * *v31 > v29->n128_f64[0] * *v20)
              {
                v133 = *v29;
                *v29 = *v17;
                *v17 = v133;
              }
            }
          }
          else
          {
            if (v50 <= v51)
            {
              v134 = *v29;
              *v29 = *v17;
              *v17 = v134;
              if (v41->n128_f64[0] * *v20 <= v17->n128_f64[0] * *v43)
                goto LABEL_53;
              v131 = *v17;
              *v17 = *v41;
            }
            else
            {
              v131 = *v29;
              *v29 = *v41;
            }
            *v41 = v131;
          }
LABEL_53:
          v135 = *v13;
          *v13 = *v17;
          a6.n128_u64[1] = v135.n128_u64[1];
          *v17 = v135;
          --a4;
          a6.n128_u64[0] = v13->n128_u64[0];
          if ((a5 & 1) == 0)
            goto LABEL_54;
LABEL_32:
          v37 = v13->n128_f64[1];
LABEL_55:
          v52 = 0;
          do
          {
            v53 = v37 * v13[v52 + 1].n128_f64[0];
            v54 = a6.n128_f64[0] * v13[++v52].n128_f64[1];
          }
          while (v53 > v54);
          v55 = &v13[v52];
          v56 = a2;
          if (v52 == 1)
          {
            v56 = a2;
            do
            {
              if (v55 >= v56)
                break;
              v59 = v56[-1].n128_f64[0];
              v60 = v56[-1].n128_f64[1];
              --v56;
            }
            while (v37 * v59 <= a6.n128_f64[0] * v60);
          }
          else
          {
            do
            {
              v57 = v56[-1].n128_f64[0];
              v58 = v56[-1].n128_f64[1];
              --v56;
            }
            while (v37 * v57 <= a6.n128_f64[0] * v58);
          }
          v13 = (__n128 *)((char *)v13 + v52 * 16);
          if (v55 < v56)
          {
            v61 = v56;
            do
            {
              v136 = *v13;
              *v13 = *v61;
              *v61 = v136;
              do
              {
                v62 = v13[1].n128_f64[0];
                v63 = v13[1].n128_f64[1];
                ++v13;
              }
              while (v37 * v62 > a6.n128_f64[0] * v63);
              do
              {
                v64 = v61[-1].n128_f64[0];
                v65 = v61[-1].n128_f64[1];
                --v61;
              }
              while (v37 * v64 <= a6.n128_f64[0] * v65);
            }
            while (v13 < v61);
          }
          if (&v13[-1] != a1)
            *a1 = v13[-1];
          v13[-1].n128_u64[0] = a6.n128_u64[0];
          v13[-1].n128_f64[1] = v37;
          if (v55 < v56)
            goto LABEL_74;
          v66 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::KnapsackItem> &,operations_research::sat::KnapsackItem*>(a1, v13 - 1, a6);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::KnapsackItem> &,operations_research::sat::KnapsackItem*>(v13, a2, v67))
          {
            if (v66)
              continue;
LABEL_74:
            std::__introsort<std::_ClassicAlgPolicy,std::greater<operations_research::sat::KnapsackItem> &,operations_research::sat::KnapsackItem*,false>(a1, &v13[-1], a3, a4, a5 & 1);
            a5 = 0;
            continue;
          }
          a2 = v13 - 1;
          if (v66)
            return;
          goto LABEL_1;
        }
        v98 = v13 + 1;
        v100 = v13 == a2 || v98 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v100)
          {
            v101 = 0;
            v102 = (double *)v13;
            do
            {
              v105 = *v102;
              v104 = v102[1];
              v107 = v102[2];
              v106 = v102[3];
              v102 = (double *)v98;
              if (v107 * v104 > v105 * v106)
              {
                v108 = v101;
                do
                {
                  v109 = (double *)((char *)v13->n128_f64 + v108);
                  *(__n128 *)((char *)v13 + v108 + 16) = *(__n128 *)((char *)v13 + v108);
                  if (!v108)
                  {
                    v103 = (double *)v13;
                    goto LABEL_116;
                  }
                  v108 -= 16;
                }
                while (v107 * *(v109 - 1) > v106 * *(v109 - 2));
                v103 = (double *)((char *)v13[1].n128_f64 + v108);
LABEL_116:
                *v103 = v107;
                v103[1] = v106;
              }
              v98 = (__n128 *)(v102 + 2);
              v101 += 16;
            }
            while (v102 + 2 != (double *)a2);
          }
        }
        else if (!v100)
        {
          do
          {
            v112 = a1->n128_f64[0];
            v111 = a1->n128_f64[1];
            v114 = a1[1].n128_f64[0];
            v113 = a1[1].n128_f64[1];
            a1 = v98;
            if (v114 * v111 > v112 * v113)
            {
              v115 = v98;
              do
              {
                *v115 = v115[-1];
                v117 = v115[-2].n128_f64[0];
                v116 = v115[-2].n128_f64[1];
                --v115;
              }
              while (v114 * v116 > v113 * v117);
              v115->n128_f64[0] = v114;
              v115->n128_f64[1] = v113;
            }
            ++v98;
          }
          while (&a1[1] != a2);
        }
        return;
    }
  }
}

  i = a1;
  while (2)
  {
    a1 = i;
    v9 = a2 - i;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - i) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return *(double *)&v17;
      case 2:
        v66 = *(_DWORD *)(a2 - 24);
        v65 = a2 - 24;
        v64 = v66;
        v67 = *(_QWORD *)(v65 + 4);
        v68 = *(_QWORD *)(i + 4);
        v69 = v67 < v68;
        if (v67 != v68)
          goto LABEL_174;
        if (*(unsigned __int8 *)(v65 + 12) == *(unsigned __int8 *)(i + 12))
        {
          v69 = v64 < *(_DWORD *)i;
LABEL_174:
          if (!v69)
            return *(double *)&v17;
        }
        else if (*(_BYTE *)(v65 + 12))
        {
          return *(double *)&v17;
        }
        v162 = *(_QWORD *)(i + 16);
        v154 = *(_OWORD *)i;
        v17 = *(_OWORD *)v65;
        *(_QWORD *)(i + 16) = *(_QWORD *)(v65 + 16);
        *(_OWORD *)i = v17;
        *(_QWORD *)&v17 = v154;
        *(_QWORD *)(v65 + 16) = v162;
        *(_OWORD *)v65 = v154;
        return *(double *)&v17;
      case 3:
        *(_QWORD *)&v17 = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*>(i, (int *)(i + 24), a2 - 24).n128_u64[0];
        return *(double *)&v17;
      case 4:
        *(_QWORD *)&v17 = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*>(i, i + 24, i + 48, a2 - 24).n128_u64[0];
        return *(double *)&v17;
      case 5:
        *(_QWORD *)&v17 = std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*,0>(i, i + 24, i + 48, i + 72, a2 - 24).n128_u64[0];
        return *(double *)&v17;
      default:
        if (v9 <= 575)
        {
          v70 = i + 24;
          v72 = i == a2 || v70 == a2;
          if ((a4 & 1) != 0)
          {
            if (v72)
              return *(double *)&v17;
            v73 = 0;
            v74 = i;
            while (1)
            {
              v76 = v74;
              v74 = v70;
              v77 = *(_DWORD *)(v76 + 24);
              v78 = *(_QWORD *)(v76 + 28);
              v79 = *(_BYTE *)(v76 + 36);
              v80 = (_QWORD *)(v76 + 37);
              v81 = *(_QWORD *)(v76 + 4);
              v82 = v78 < v81;
              if (v78 == v81)
              {
                if (*(unsigned __int8 *)(v76 + 12) != v79)
                {
                  if (*(_BYTE *)(v76 + 36))
                    goto LABEL_191;
                  *(_QWORD *)v155 = *v80;
                  *(_DWORD *)&v155[7] = *(_DWORD *)(v76 + 44);
                  *(_QWORD *)(v74 + 16) = *(_QWORD *)(v76 + 16);
                  v17 = *(_OWORD *)v76;
                  *(_OWORD *)v74 = *(_OWORD *)v76;
                  v75 = i;
                  if (v76 == i)
                    goto LABEL_190;
                  goto LABEL_211;
                }
                v82 = v77 < *(_DWORD *)v76;
              }
              if (!v82)
                goto LABEL_191;
              *(_QWORD *)v155 = *v80;
              *(_DWORD *)&v155[7] = *(_DWORD *)(v76 + 44);
              *(_QWORD *)(v74 + 16) = *(_QWORD *)(v76 + 16);
              v17 = *(_OWORD *)v76;
              *(_OWORD *)v74 = *(_OWORD *)v76;
              v75 = i;
              if (v76 == i)
                goto LABEL_190;
              if (v79)
              {
                v83 = v73;
                while (1)
                {
                  v85 = i + v83;
                  v86 = (_DWORD *)(i + v83 - 24);
                  v87 = *(_QWORD *)(i + v83 - 20);
                  if (v78 == v87)
                  {
                    if (*(unsigned __int8 *)(v85 - 12) != v79 || v77 >= *v86)
                      goto LABEL_221;
                  }
                  else if (v78 >= v87)
                  {
                    goto LABEL_220;
                  }
                  v76 -= 24;
                  v17 = *(_OWORD *)v86;
                  *(_OWORD *)v85 = *(_OWORD *)v86;
                  *(_QWORD *)(v85 + 16) = *(_QWORD *)(i + v83 - 8);
                  v83 -= 24;
                  if (!v83)
                    goto LABEL_189;
                }
              }
LABEL_211:
              v83 = v73;
              while (1)
              {
                v89 = i + v83;
                v90 = (__int128 *)(i + v83 - 24);
                v91 = *(_QWORD *)(i + v83 - 20);
                if (v78 == v91)
                  break;
                if (v78 >= v91)
                {
LABEL_220:
                  v75 = v76;
                  goto LABEL_190;
                }
LABEL_217:
                v76 -= 24;
                v17 = *v90;
                *(_OWORD *)v89 = *v90;
                *(_QWORD *)(v89 + 16) = *(_QWORD *)(i + v83 - 8);
                v83 -= 24;
                if (!v83)
                {
LABEL_189:
                  v75 = i;
                  goto LABEL_190;
                }
              }
              if (*(_BYTE *)(v89 - 12))
                v88 = 1;
              else
                v88 = v77 < *(_DWORD *)v90;
              if (v88)
                goto LABEL_217;
LABEL_221:
              v75 = i + v83;
LABEL_190:
              *(_DWORD *)v75 = v77;
              *(_QWORD *)(v75 + 4) = v78;
              *(_BYTE *)(v75 + 12) = v79;
              *(_QWORD *)(v75 + 13) = *(_QWORD *)v155;
              *(_DWORD *)(v75 + 20) = *(_DWORD *)&v155[7];
LABEL_191:
              v70 = v74 + 24;
              v73 += 24;
              if (v74 + 24 == a2)
                return *(double *)&v17;
            }
          }
          if (v72)
            return *(double *)&v17;
          while (1)
          {
            v135 = a1;
            a1 = v70;
            v136 = *(_DWORD *)(v135 + 24);
            v137 = *(_QWORD *)(v135 + 28);
            v138 = *(_BYTE *)(v135 + 36);
            v139 = (_QWORD *)(v135 + 37);
            v140 = *(_QWORD *)(v135 + 4);
            v141 = v137 < v140;
            if (v137 == v140)
            {
              if (*(unsigned __int8 *)(v135 + 12) != v138)
              {
                if (!*(_BYTE *)(v135 + 36))
                {
                  *(_QWORD *)v158 = *v139;
                  *(_DWORD *)&v158[7] = *(_DWORD *)(v135 + 44);
                  goto LABEL_315;
                }
                goto LABEL_298;
              }
              v141 = v136 < *(_DWORD *)v135;
            }
            if (v141)
            {
              *(_QWORD *)v158 = *v139;
              *(_DWORD *)&v158[7] = *(_DWORD *)(v135 + 44);
              if (*(_BYTE *)(v135 + 36))
              {
                do
                {
                  v142 = v135;
                  v17 = *(_OWORD *)v135;
                  *(_OWORD *)(v135 + 24) = *(_OWORD *)v135;
                  *(_QWORD *)(v135 + 40) = *(_QWORD *)(v135 + 16);
                  v135 -= 24;
                  v143 = *(_QWORD *)(v142 - 20);
                  v144 = v137 < v143;
                  if (v137 == v143)
                    v144 = *(unsigned __int8 *)(v142 - 12) == v138 && v136 < *(_DWORD *)(v142 - 24);
                }
                while (v144);
              }
              else
              {
                do
                {
LABEL_315:
                  while (1)
                  {
                    v142 = v135;
                    v17 = *(_OWORD *)v135;
                    *(_OWORD *)(v135 + 24) = *(_OWORD *)v135;
                    *(_QWORD *)(v135 + 40) = *(_QWORD *)(v135 + 16);
                    v135 -= 24;
                    v145 = *(_QWORD *)(v142 - 20);
                    if (v137 == v145)
                      break;
                    if (v137 >= v145)
                      goto LABEL_297;
                  }
                  if (*(_BYTE *)(v142 - 12))
                    v146 = 1;
                  else
                    v146 = v136 < *(_DWORD *)(v142 - 24);
                }
                while (v146);
              }
LABEL_297:
              *(_DWORD *)v142 = v136;
              *(_QWORD *)(v142 + 4) = v137;
              *(_BYTE *)(v142 + 12) = v138;
              *(_QWORD *)(v142 + 13) = *(_QWORD *)v158;
              *(_DWORD *)(v142 + 20) = *(_DWORD *)&v158[7];
            }
LABEL_298:
            v70 = a1 + 24;
            if (a1 + 24 == a2)
              return *(double *)&v17;
          }
        }
        if (!a3)
        {
          if (i == a2)
            return *(double *)&v17;
          v92 = (unint64_t)(v10 - 2) >> 1;
          v93 = v92;
          while (1)
          {
            v95 = v93;
            if (v92 < v93)
              goto LABEL_226;
            v96 = (2 * v93) | 1;
            v94 = i + 24 * v96;
            if (2 * v95 + 2 >= v10)
              goto LABEL_235;
            v97 = *(_QWORD *)(v94 + 4);
            v98 = *(_QWORD *)(v94 + 28);
            v99 = v97 < v98;
            if (v97 != v98)
              goto LABEL_232;
            if (*(unsigned __int8 *)(v94 + 12) == *(unsigned __int8 *)(v94 + 36))
              break;
            if (!*(_BYTE *)(v94 + 12))
            {
LABEL_234:
              v94 += 24;
              v96 = 2 * v95 + 2;
            }
LABEL_235:
            v100 = i + 24 * v95;
            v101 = *(_QWORD *)(v94 + 4);
            v102 = *(_DWORD *)v100;
            v103 = *(_QWORD *)(v100 + 4);
            v104 = *(unsigned __int8 *)(v100 + 12);
            v105 = v101 < v103;
            if (v101 == v103)
            {
              if (*(unsigned __int8 *)(v94 + 12) != v104)
              {
                if (!*(_BYTE *)(v94 + 12))
                  goto LABEL_226;
                goto LABEL_241;
              }
              v105 = *(_DWORD *)v94 < v102;
            }
            if (v105)
              goto LABEL_226;
LABEL_241:
            *(_DWORD *)&v156[7] = *(_DWORD *)(v100 + 20);
            *(_QWORD *)v156 = *(_QWORD *)(v100 + 13);
            do
            {
              while (1)
              {
                while (1)
                {
                  v106 = *(_OWORD *)v94;
                  *(_QWORD *)(v100 + 16) = *(_QWORD *)(v94 + 16);
                  *(_OWORD *)v100 = v106;
                  if (v92 < v96)
                    goto LABEL_225;
                  v100 = v94;
                  v107 = 2 * v96;
                  v96 = (2 * v96) | 1;
                  v94 = i + 24 * v96;
                  v108 = v107 + 2;
                  if (v108 >= v10)
                    goto LABEL_251;
                  v109 = *(_QWORD *)(v94 + 4);
                  v110 = *(_QWORD *)(v94 + 28);
                  v111 = v109 < v110;
                  if (v109 != v110)
                    goto LABEL_248;
                  if (*(unsigned __int8 *)(v94 + 12) == *(unsigned __int8 *)(v94 + 36))
                  {
                    v111 = *(_DWORD *)v94 < *(_DWORD *)(v94 + 24);
LABEL_248:
                    if (v111)
                      goto LABEL_250;
                    goto LABEL_251;
                  }
                  if (!*(_BYTE *)(v94 + 12))
                  {
LABEL_250:
                    v94 += 24;
                    v96 = v108;
                  }
LABEL_251:
                  v112 = *(_QWORD *)(v94 + 4);
                  if (v112 == v103)
                    break;
                  if (v112 < v103)
                    goto LABEL_224;
                }
                if (*(unsigned __int8 *)(v94 + 12) != v104)
                  break;
                if (*(_DWORD *)v94 < v102)
                  goto LABEL_224;
              }
            }
            while (*(_BYTE *)(v94 + 12));
LABEL_224:
            v94 = v100;
LABEL_225:
            *(_DWORD *)v94 = v102;
            *(_QWORD *)(v94 + 4) = v103;
            *(_BYTE *)(v94 + 12) = v104;
            *(_QWORD *)(v94 + 13) = *(_QWORD *)v156;
            *(_DWORD *)(v94 + 20) = *(_DWORD *)&v156[7];
LABEL_226:
            v93 = v95 - 1;
            if (!v95)
            {
              v113 = v9 / 0x18uLL;
              while (1)
              {
                v114 = 0;
                v163 = *(_QWORD *)(i + 16);
                v157 = *(_OWORD *)i;
                v115 = i;
                do
                {
                  v117 = v115;
                  v115 += 24 * v114 + 24;
                  v118 = 2 * v114;
                  v114 = (2 * v114) | 1;
                  v119 = v118 + 2;
                  if (v119 >= v113)
                    goto LABEL_266;
                  v120 = *(_QWORD *)(v115 + 4);
                  v121 = *(_QWORD *)(v115 + 28);
                  v122 = v120 < v121;
                  if (v120 != v121)
                    goto LABEL_271;
                  if (*(unsigned __int8 *)(v115 + 12) == *(unsigned __int8 *)(v115 + 36))
                  {
                    v122 = *(_DWORD *)v115 < *(_DWORD *)(v115 + 24);
LABEL_271:
                    if (v122)
                      goto LABEL_265;
                    goto LABEL_266;
                  }
                  if (!*(_BYTE *)(v115 + 12))
                  {
LABEL_265:
                    v115 += 24;
                    v114 = v119;
                  }
LABEL_266:
                  v116 = *(_OWORD *)v115;
                  *(_QWORD *)(v117 + 16) = *(_QWORD *)(v115 + 16);
                  *(_OWORD *)v117 = v116;
                }
                while (v114 <= (uint64_t)((unint64_t)(v113 - 2) >> 1));
                a2 -= 24;
                if (v115 == a2)
                {
                  *(_QWORD *)&v17 = v157;
                  *(_QWORD *)(v115 + 16) = v163;
                  *(_OWORD *)v115 = v157;
                  goto LABEL_263;
                }
                v17 = *(_OWORD *)a2;
                *(_QWORD *)(v115 + 16) = *(_QWORD *)(a2 + 16);
                *(_OWORD *)v115 = v17;
                *(_QWORD *)&v17 = v157;
                *(_QWORD *)(a2 + 16) = v163;
                *(_OWORD *)a2 = v157;
                v123 = v115 - i + 24;
                if (v123 < 25)
                  goto LABEL_263;
                v124 = v123 / 0x18uLL - 2;
                v125 = v124 >> 1;
                v126 = i + 24 * (v124 >> 1);
                v127 = *(_QWORD *)(v126 + 4);
                v128 = *(_DWORD *)v115;
                v129 = *(_QWORD *)(v115 + 4);
                v130 = *(unsigned __int8 *)(v115 + 12);
                v131 = v127 < v129;
                if (v127 != v129)
                  goto LABEL_280;
                if (*(unsigned __int8 *)(v126 + 12) != v130)
                {
                  if (*(_BYTE *)(v126 + 12))
                    goto LABEL_263;
LABEL_282:
                  *(_DWORD *)&v150[7] = *(_DWORD *)(v115 + 20);
                  *(_QWORD *)v150 = *(_QWORD *)(v115 + 13);
                  v17 = *(_OWORD *)v126;
                  *(_QWORD *)(v115 + 16) = *(_QWORD *)(v126 + 16);
                  *(_OWORD *)v115 = v17;
                  if (v124 >= 2)
                  {
                    while (1)
                    {
                      v133 = v125 - 1;
                      v125 = (v125 - 1) >> 1;
                      v132 = i + 24 * v125;
                      v134 = *(_QWORD *)(v132 + 4);
                      if (v134 == v129)
                      {
                        if (*(unsigned __int8 *)(v132 + 12) == v130)
                        {
                          if (*(_DWORD *)v132 >= v128)
                            break;
                        }
                        else if (*(_BYTE *)(v132 + 12))
                        {
                          break;
                        }
                      }
                      else if (v134 >= v129)
                      {
                        break;
                      }
                      v17 = *(_OWORD *)v132;
                      *(_QWORD *)(v126 + 16) = *(_QWORD *)(v132 + 16);
                      *(_OWORD *)v126 = v17;
                      v126 = i + 24 * v125;
                      if (v133 <= 1)
                        goto LABEL_284;
                    }
                  }
                  v132 = v126;
LABEL_284:
                  *(_DWORD *)v132 = v128;
                  *(_QWORD *)(v132 + 4) = v129;
                  *(_BYTE *)(v132 + 12) = v130;
                  *(_QWORD *)(v132 + 13) = *(_QWORD *)v150;
                  *(_DWORD *)(v132 + 20) = *(_DWORD *)&v150[7];
                  goto LABEL_263;
                }
                v131 = *(_DWORD *)v126 < v128;
LABEL_280:
                if (v131)
                  goto LABEL_282;
LABEL_263:
                v29 = v113-- <= 2;
                if (v29)
                  return *(double *)&v17;
              }
            }
          }
          v99 = *(_DWORD *)v94 < *(_DWORD *)(v94 + 24);
LABEL_232:
          if (v99)
            goto LABEL_234;
          goto LABEL_235;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = i + 24 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 >= 0xC01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*>(a1, (int *)(a1 + 24 * v11), a2 - 24);
          v13 = 24 * v11;
          v14 = (int *)(24 * v11 + a1 - 24);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*>(a1 + 24, v14, a2 - 48);
          v15 = (int *)(a1 + 24 + v13);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*>(a1 + 48, v15, a2 - 72);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*>((uint64_t)v14, (int *)v12, (uint64_t)v15);
          v159 = *(_QWORD *)(a1 + 16);
          v151 = *(_OWORD *)a1;
          v16 = *(_QWORD *)(v12 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_QWORD *)(a1 + 16) = v16;
          *(_QWORD *)&v17 = v151;
          *(_QWORD *)(v12 + 16) = v159;
          *(_OWORD *)v12 = v151;
          --a3;
          v18 = *(_DWORD *)a1;
          if ((a4 & 1) != 0)
            goto LABEL_12;
LABEL_7:
          v19 = *(_QWORD *)(a1 - 20);
          v20 = *(_QWORD *)(a1 + 4);
          v21 = *(_BYTE *)(a1 + 12);
          if (v19 == v20)
          {
            if (*(unsigned __int8 *)(a1 - 12) == v21)
            {
              if (*(_DWORD *)(a1 - 24) < v18)
                goto LABEL_16;
              goto LABEL_69;
            }
            if (*(_BYTE *)(a1 - 12))
              goto LABEL_69;
LABEL_16:
            v20 = *(_QWORD *)(a1 - 20);
            goto LABEL_17;
          }
          if (v19 < v20)
            goto LABEL_17;
LABEL_69:
          *(_QWORD *)v149 = *(_QWORD *)(a1 + 13);
          *(_DWORD *)&v149[7] = *(_DWORD *)(a1 + 20);
          v41 = *(_QWORD *)(a2 - 20);
          v42 = v20 < v41;
          if (v20 == v41)
          {
            if (*(unsigned __int8 *)(a2 - 12) != v21)
            {
              if (!*(_BYTE *)(a1 + 12))
                goto LABEL_103;
              goto LABEL_86;
            }
            v42 = v18 < *(_DWORD *)(a2 - 24);
          }
          if (v42)
          {
            if (*(_BYTE *)(a1 + 12))
            {
              for (i = a1 + 24; ; i += 24)
              {
                v43 = *(_QWORD *)(i + 4);
                if (v20 == v43)
                {
                  if (*(unsigned __int8 *)(i + 12) == v21 && v18 < *(_DWORD *)i)
                    goto LABEL_111;
                }
                else if (v20 < v43)
                {
                  goto LABEL_111;
                }
              }
            }
LABEL_103:
            for (i = a1 + 24; ; i += 24)
            {
              v50 = *(_QWORD *)(i + 4);
              if (v20 == v50)
              {
                if (*(_BYTE *)(i + 12))
                  v49 = 1;
                else
                  v49 = v18 < *(_DWORD *)i;
                if (v49)
                  goto LABEL_111;
              }
              else if (v20 < v50)
              {
                goto LABEL_111;
              }
            }
          }
LABEL_86:
          i = a1 + 24;
          if (a1 + 24 < a2)
          {
            if (!*(_BYTE *)(a1 + 12))
            {
              while (1)
              {
                v48 = *(_QWORD *)(i + 4);
                if (v20 == v48)
                {
                  if (*(_BYTE *)(i + 12))
                    v47 = 1;
                  else
                    v47 = v18 < *(_DWORD *)i;
                  if (v47)
                    goto LABEL_111;
                }
                else if (v20 < v48)
                {
                  goto LABEL_111;
                }
                i += 24;
                if (i >= a2)
                  goto LABEL_111;
              }
            }
            do
            {
              v45 = *(_QWORD *)(i + 4);
              v46 = v20 < v45;
              if (v20 == v45)
                v46 = *(unsigned __int8 *)(i + 12) == v21 && v18 < *(_DWORD *)i;
              if (v46)
                break;
              i += 24;
            }
            while (i < a2);
          }
LABEL_111:
          v51 = (_BYTE *)a2;
          if (i < a2)
          {
            if (!*(_BYTE *)(a1 + 12))
            {
              for (j = (_BYTE *)(a2 - 12); ; j -= 24)
              {
                if (v20 == v41)
                {
                  if (*j)
                    v55 = 1;
                  else
                    v55 = v18 < *((_DWORD *)j - 3);
                  if (!v55)
                    goto LABEL_130;
                }
                else if (v20 >= v41)
                {
                  goto LABEL_130;
                }
                v41 = *((_QWORD *)j - 4);
              }
            }
            j = (_BYTE *)(a2 - 12);
            v53 = v20 < v41;
            if (v20 != v41)
              goto LABEL_119;
LABEL_116:
            v53 = *j == v21 && v18 < *((_DWORD *)j - 3);
LABEL_119:
            while (v53)
            {
              v54 = *((_QWORD *)j - 4);
              j -= 24;
              v53 = v20 < v54;
              if (v20 == v54)
                goto LABEL_116;
            }
LABEL_130:
            v51 = j - 12;
          }
LABEL_163:
          while (i < (unint64_t)v51)
          {
            v161 = *(_QWORD *)(i + 16);
            v153 = *(_OWORD *)i;
            v17 = *(_OWORD *)v51;
            *(_QWORD *)(i + 16) = *((_QWORD *)v51 + 2);
            *(_OWORD *)i = v17;
            *(_QWORD *)&v17 = v153;
            *((_QWORD *)v51 + 2) = v161;
            *(_OWORD *)v51 = v153;
            if (v21)
            {
              do
              {
                while (1)
                {
                  i += 24;
                  v56 = *(_QWORD *)(i + 4);
                  if (v20 == v56)
                    break;
                  if (v20 < v56)
                    goto LABEL_147;
                }
              }
              while (*(unsigned __int8 *)(i + 12) != v21 || v18 >= *(_DWORD *)i);
            }
            else
            {
              do
              {
                while (1)
                {
                  i += 24;
                  v59 = *(_QWORD *)(i + 4);
                  if (v20 == v59)
                    break;
                  if (v20 < v59)
                    goto LABEL_147;
                }
                if (*(_BYTE *)(i + 12))
                  v58 = 1;
                else
                  v58 = v18 < *(_DWORD *)i;
              }
              while (!v58);
            }
LABEL_147:
            if (v21)
            {
              do
              {
                while (1)
                {
                  v51 -= 24;
                  v60 = *(_QWORD *)(v51 + 4);
                  if (v20 == v60)
                    break;
                  if (v20 >= v60)
                    goto LABEL_163;
                }
              }
              while (v51[12] == v21 && v18 < *(_DWORD *)v51);
            }
            else
            {
              do
              {
                while (1)
                {
                  v51 -= 24;
                  v63 = *(_QWORD *)(v51 + 4);
                  if (v20 == v63)
                    break;
                  if (v20 >= v63)
                    goto LABEL_163;
                }
                if (v51[12])
                  v62 = 1;
                else
                  v62 = v18 < *(_DWORD *)v51;
              }
              while (v62);
            }
          }
          if (i - 24 != a1)
          {
            v17 = *(_OWORD *)(i - 24);
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(i - 8);
            *(_OWORD *)a1 = v17;
          }
          a4 = 0;
          *(_DWORD *)(i - 24) = v18;
          *(_QWORD *)(i - 20) = v20;
          *(_BYTE *)(i - 12) = v21;
          *(_DWORD *)(i - 4) = *(_DWORD *)&v149[7];
          *(_QWORD *)(i - 11) = *(_QWORD *)v149;
          continue;
        }
        *(_QWORD *)&v17 = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*>(a1 + 24 * v11, (int *)a1, a2 - 24).n128_u64[0];
        --a3;
        v18 = *(_DWORD *)a1;
        if ((a4 & 1) == 0)
          goto LABEL_7;
LABEL_12:
        v20 = *(_QWORD *)(a1 + 4);
        v21 = *(_BYTE *)(a1 + 12);
LABEL_17:
        v22 = 0;
        *(_QWORD *)v148 = *(_QWORD *)(a1 + 13);
        *(_DWORD *)&v148[7] = *(_DWORD *)(a1 + 20);
        while (1)
        {
          v23 = a1 + v22;
          v24 = *(_QWORD *)(a1 + v22 + 28);
          if (v24 != v20)
          {
            if (v24 >= v20)
              goto LABEL_25;
            goto LABEL_19;
          }
          if (*(unsigned __int8 *)(v23 + 36) != v21)
            break;
          if (*(_DWORD *)(v23 + 24) >= v18)
            goto LABEL_25;
LABEL_19:
          v22 += 24;
        }
        if (!*(_BYTE *)(v23 + 36))
          goto LABEL_19;
LABEL_25:
        v25 = a1 + v22 + 24;
        v26 = a2 - 24;
        if (v22)
        {
          while (1)
          {
            v27 = v26;
            v30 = *(_QWORD *)(v26 + 4);
            v26 -= 24;
            v29 = v30 < v20;
            if (v30 != v20)
              goto LABEL_29;
            if (*(unsigned __int8 *)(v27 + 12) == v21)
            {
              v29 = *(_DWORD *)v27 < v18;
LABEL_29:
              if (v29)
                goto LABEL_45;
            }
            else if (!*(_BYTE *)(v27 + 12))
            {
              goto LABEL_45;
            }
          }
        }
        v27 = a2;
        if (v25 < a2)
        {
          v28 = a2 - 24;
          do
          {
            while (1)
            {
              while (1)
              {
                v27 = v28;
                v32 = *(_QWORD *)(v28 + 4);
                v28 -= 24;
                if (v32 == v20)
                  break;
                if (v25 >= v27 || v32 < v20)
                  goto LABEL_45;
              }
              if (*(unsigned __int8 *)(v27 + 12) == v21)
                break;
              if (v25 >= v27 || !*(_BYTE *)(v27 + 12))
                goto LABEL_45;
            }
          }
          while (*(_DWORD *)v27 >= v18 && v25 < v27);
        }
LABEL_45:
        i = v25;
        if (v25 < v27)
        {
          v33 = v27;
          do
          {
            v160 = *(_QWORD *)(i + 16);
            v152 = *(_OWORD *)i;
            v34 = *(_OWORD *)v33;
            *(_QWORD *)(i + 16) = *(_QWORD *)(v33 + 16);
            *(_OWORD *)i = v34;
            *(_QWORD *)(v33 + 16) = v160;
            *(_OWORD *)v33 = v152;
            v35 = i + 24;
            do
            {
              while (1)
              {
                while (1)
                {
                  i = v35;
                  v36 = *(_QWORD *)(v35 + 4);
                  v35 += 24;
                  if (v36 == v20)
                    break;
                  if (v36 >= v20)
                    goto LABEL_55;
                }
                if (*(unsigned __int8 *)(i + 12) != v21)
                  break;
                if (*(_DWORD *)i >= v18)
                  goto LABEL_55;
              }
            }
            while (!*(_BYTE *)(i + 12));
LABEL_55:
            v37 = v33 - 24;
            do
            {
              while (1)
              {
                while (1)
                {
                  v33 = v37;
                  v38 = *(_QWORD *)(v37 + 4);
                  v37 -= 24;
                  if (v38 == v20)
                    break;
                  if (v38 < v20)
                    goto LABEL_47;
                }
                if (*(unsigned __int8 *)(v33 + 12) != v21)
                  break;
                if (*(_DWORD *)v33 < v18)
                  goto LABEL_47;
              }
            }
            while (*(_BYTE *)(v33 + 12));
LABEL_47:
            ;
          }
          while (i < v33);
        }
        if (i - 24 != a1)
        {
          v39 = *(_OWORD *)(i - 24);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(i - 8);
          *(_OWORD *)a1 = v39;
        }
        *(_DWORD *)(i - 24) = v18;
        *(_QWORD *)(i - 20) = v20;
        *(_BYTE *)(i - 12) = v21;
        *(_DWORD *)(i - 4) = *(_DWORD *)&v148[7];
        *(_QWORD *)(i - 11) = *(_QWORD *)v148;
        if (v25 < v27)
        {
LABEL_68:
          std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*,false>(a1, i - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v40 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*>(a1, i - 24);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*>(i, a2))
        {
          if (v40)
            continue;
          goto LABEL_68;
        }
        a2 = i - 24;
        if (!v40)
          goto LABEL_1;
        return *(double *)&v17;
    }
  }
}

  v9 = a2 - 1;
  v10 = a2 - 2;
  v11 = a2 - 3;
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (char *)a2 - (char *)v12;
    v14 = a2 - v12;
    switch(v14)
    {
      case 0:
      case 1:
        return;
      case 2:
        if ((signed __int32)a2[-1].n128_u32[2] < (signed __int32)v12->n128_u32[2])
        {
          v145 = *v12;
          *v12 = a2[-1];
          a2[-1] = v145;
        }
        return;
      case 3:
        v67 = v12 + 1;
        v68 = v12[1].n128_i32[2];
        v69 = a2[-1].n128_i32[2];
        if (v68 >= (signed __int32)v12->n128_u32[2])
        {
          if (v69 < v68)
          {
            v119 = *v67;
            *v67 = *v9;
            *v9 = v119;
            if ((signed __int32)v12[1].n128_u32[2] < (signed __int32)v12->n128_u32[2])
            {
              v149 = *v12;
              *v12 = *v67;
              *v67 = v149;
            }
          }
        }
        else
        {
          if (v69 < v68)
            goto LABEL_110;
          v146 = *v12;
          *v12 = *v67;
          *v67 = v146;
          if ((signed __int32)a2[-1].n128_u32[2] < (signed __int32)v12[1].n128_u32[2])
          {
            v70 = *v67;
            *v67 = *v9;
            *v9 = v70;
          }
        }
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::StampingSimplifier::ProcessClauses(void)::Entry *>(v12, v12 + 1, v12 + 2, a2 - 1, a5);
        return;
      case 5:
        v9 = v12 + 1;
        v71 = v12 + 2;
        v72 = v12 + 3;
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::StampingSimplifier::ProcessClauses(void)::Entry *>(v12, v12 + 1, v12 + 2, v12 + 3, a5);
        if ((signed __int32)a2[-1].n128_u32[2] < (signed __int32)v12[3].n128_u32[2])
        {
          v73 = *v72;
          *v72 = a2[-1];
          a2[-1] = v73;
          if ((signed __int32)v12[3].n128_u32[2] < (signed __int32)v12[2].n128_u32[2])
          {
            v74 = *v71;
            *v71 = *v72;
            *v72 = v74;
            if ((signed __int32)v12[2].n128_u32[2] < (signed __int32)v12[1].n128_u32[2])
            {
              v75 = *v9;
              *v9 = *v71;
              *v71 = v75;
              if ((signed __int32)v12[1].n128_u32[2] < (signed __int32)v12->n128_u32[2])
              {
LABEL_110:
                v147 = *v12;
                *v12 = *v9;
                *v9 = v147;
              }
            }
          }
        }
        return;
      default:
        if (v13 > 383)
        {
          if (!a3)
          {
            if (v12 != a2)
            {
              v88 = (unint64_t)(v14 - 2) >> 1;
              v89 = v88;
              do
              {
                if (v88 >= v89)
                {
                  v91 = (2 * v89) | 1;
                  v92 = &v12[v91];
                  if (2 * v89 + 2 < v14)
                  {
                    v93 = v92->n128_i32[2];
                    v94 = v92[1].n128_i32[2];
                    v92 += v93 < v94;
                    if (v93 < v94)
                      v91 = 2 * v89 + 2;
                  }
                  v95 = &v12[v89];
                  v96 = v95->n128_i32[2];
                  if ((signed __int32)v92->n128_u32[2] >= v96)
                  {
                    v97 = v95->n128_u64[0];
                    v98 = v95->n128_u32[3];
                    do
                    {
                      v99 = v95;
                      v95 = v92;
                      *v99 = *v92;
                      if (v88 < v91)
                        break;
                      v100 = (2 * v91) | 1;
                      v92 = &v12[v100];
                      v101 = 2 * v91 + 2;
                      if (v101 < v14)
                      {
                        v102 = v92->n128_i32[2];
                        v103 = v92[1].n128_i32[2];
                        v92 += v102 < v103;
                        if (v102 < v103)
                          v100 = v101;
                      }
                      v91 = v100;
                    }
                    while ((signed __int32)v92->n128_u32[2] >= v96);
                    v95->n128_u64[0] = v97;
                    v95->n128_u32[2] = v96;
                    v95->n128_u32[3] = v98;
                  }
                }
                v90 = v89-- <= 0;
              }
              while (!v90);
              v104 = (unint64_t)v13 >> 4;
              do
              {
                v105 = 0;
                v148 = *v12;
                v106 = v12;
                do
                {
                  v107 = (uint64_t)&v106[v105 + 1];
                  v108 = (2 * v105) | 1;
                  v109 = 2 * v105 + 2;
                  if (v109 < v104)
                  {
                    v110 = *(_DWORD *)(v107 + 8);
                    v111 = *(_DWORD *)(v107 + 24);
                    v107 += 16 * (v110 < v111);
                    if (v110 < v111)
                      v108 = v109;
                  }
                  *v106 = *(_OWORD *)v107;
                  v106 = (_OWORD *)v107;
                  v105 = v108;
                }
                while (v108 <= (uint64_t)((unint64_t)(v104 - 2) >> 1));
                if ((__n128 *)v107 == --a2)
                {
                  *(__n128 *)v107 = v148;
                }
                else
                {
                  *(__n128 *)v107 = *a2;
                  *a2 = v148;
                  v112 = v107 - (_QWORD)v12 + 16;
                  if (v112 >= 17)
                  {
                    v113 = (((unint64_t)v112 >> 4) - 2) >> 1;
                    v114 = &v12[v113];
                    v115 = *(_DWORD *)(v107 + 8);
                    if ((signed __int32)v114->n128_u32[2] < v115)
                    {
                      v116 = *(_QWORD *)v107;
                      v117 = *(_DWORD *)(v107 + 12);
                      do
                      {
                        v118 = (_OWORD *)v107;
                        v107 = (uint64_t)v114;
                        *v118 = *v114;
                        if (!v113)
                          break;
                        v113 = (v113 - 1) >> 1;
                        v114 = &v12[v113];
                      }
                      while ((signed __int32)v114->n128_u32[2] < v115);
                      *(_QWORD *)v107 = v116;
                      *(_DWORD *)(v107 + 8) = v115;
                      *(_DWORD *)(v107 + 12) = v117;
                    }
                  }
                }
                v90 = v104-- <= 2;
              }
              while (!v90);
            }
            return;
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = &v12[(unint64_t)v14 >> 1];
          v17 = a2[-1].n128_i32[2];
          if ((unint64_t)v13 < 0x801)
          {
            v19 = v12->n128_i32[2];
            if (v19 >= (signed __int32)v16->n128_u32[2])
            {
              if (v17 < v19)
              {
                v130 = *v12;
                *v12 = *v9;
                a5 = v130;
                *v9 = v130;
                if ((signed __int32)v12->n128_u32[2] < (signed __int32)v16->n128_u32[2])
                {
                  v131 = *v16;
                  *v16 = *v12;
                  a5 = v131;
                  *v12 = v131;
                  --a3;
                  if ((a4 & 1) != 0)
                    goto LABEL_32;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v17 >= v19)
              {
                v134 = *v16;
                *v16 = *v12;
                a5 = v134;
                *v12 = v134;
                if ((signed __int32)a2[-1].n128_u32[2] >= (signed __int32)v12->n128_u32[2])
                  goto LABEL_31;
                v127 = *v12;
                *v12 = *v9;
              }
              else
              {
                v127 = *v16;
                *v16 = *v9;
              }
              a5 = v127;
              *v9 = v127;
            }
LABEL_31:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_32;
LABEL_55:
            v27 = v12->n128_i32[2];
            if ((signed __int32)v12[-1].n128_u32[2] < v27)
              goto LABEL_56;
            if (v27 >= (signed __int32)a2[-1].n128_u32[2])
            {
              v57 = v12 + 1;
              do
              {
                v12 = v57;
                if (v57 >= a2)
                  break;
                v58 = v57->n128_i32[2];
                ++v57;
              }
              while (v27 >= v58);
            }
            else
            {
              v55 = v12;
              do
              {
                v12 = v55 + 1;
                v56 = v55[1].n128_i32[2];
                ++v55;
              }
              while (v27 >= v56);
            }
            v59 = a2;
            if (v12 < a2)
            {
              v60 = a2;
              do
              {
                v59 = v60 - 1;
                v61 = v60[-1].n128_i32[2];
                --v60;
              }
              while (v27 < v61);
            }
            v62 = a1->n128_u64[0];
            v63 = a1->n128_u32[3];
            while (v12 < v59)
            {
              v144 = *v12;
              *v12 = *v59;
              a5 = v144;
              *v59 = v144;
              do
              {
                v64 = v12[1].n128_i32[2];
                ++v12;
              }
              while (v27 >= v64);
              do
              {
                v65 = v59[-1].n128_i32[2];
                --v59;
              }
              while (v27 < v65);
            }
            v66 = v12 - 1;
            if (&v12[-1] != a1)
            {
              a5 = *v66;
              *a1 = *v66;
            }
            a4 = 0;
            v12[-1].n128_u64[0] = v62;
            v12[-1].n128_u32[2] = v27;
            v12[-1].n128_u32[3] = v63;
            continue;
          }
          v18 = v16->n128_i32[2];
          if (v18 >= (signed __int32)v12->n128_u32[2])
          {
            if (v17 < v18)
            {
              v128 = *v16;
              *v16 = *v9;
              *v9 = v128;
              if ((signed __int32)v16->n128_u32[2] < (signed __int32)v12->n128_u32[2])
              {
                v129 = *v12;
                *v12 = *v16;
                *v16 = v129;
              }
            }
          }
          else
          {
            if (v17 >= v18)
            {
              v132 = *v12;
              *v12 = *v16;
              *v16 = v132;
              if ((signed __int32)a2[-1].n128_u32[2] >= (signed __int32)v16->n128_u32[2])
                goto LABEL_22;
              v126 = *v16;
              *v16 = *v9;
            }
            else
            {
              v126 = *v12;
              *v12 = *v9;
            }
            *v9 = v126;
          }
LABEL_22:
          v20 = v12 + 1;
          v21 = &v12[v15];
          v22 = v21 - 1;
          v23 = v21[-1].n128_i32[2];
          v24 = a2[-2].n128_i32[2];
          if (v23 >= (signed __int32)v12[1].n128_u32[2])
          {
            if (v24 < v23)
            {
              v133 = *v22;
              *v22 = *v10;
              *v10 = v133;
              if ((signed __int32)v22->n128_u32[2] < (signed __int32)v12[1].n128_u32[2])
              {
                v26 = *v20;
                *v20 = *v22;
                *v22 = v26;
              }
            }
          }
          else
          {
            if (v24 >= v23)
            {
              v28 = *v20;
              *v20 = *v22;
              *v22 = v28;
              if ((signed __int32)a2[-2].n128_u32[2] >= (signed __int32)v22->n128_u32[2])
                goto LABEL_36;
              v135 = *v22;
              *v22 = *v10;
              v25 = v135;
            }
            else
            {
              v25 = *v20;
              *v20 = *v10;
            }
            *v10 = v25;
          }
LABEL_36:
          v29 = v12 + 2;
          v30 = &v12[v15];
          v31 = v30 + 1;
          v32 = v30[1].n128_i32[2];
          v33 = a2[-3].n128_i32[2];
          if (v32 >= (signed __int32)v12[2].n128_u32[2])
          {
            if (v33 < v32)
            {
              v136 = *v31;
              *v31 = *v11;
              *v11 = v136;
              if ((signed __int32)v31->n128_u32[2] < (signed __int32)v12[2].n128_u32[2])
              {
                v35 = *v29;
                *v29 = *v31;
                *v31 = v35;
              }
            }
          }
          else
          {
            if (v33 >= v32)
            {
              v36 = *v29;
              *v29 = *v31;
              *v31 = v36;
              if ((signed __int32)a2[-3].n128_u32[2] >= (signed __int32)v31->n128_u32[2])
                goto LABEL_45;
              v137 = *v31;
              *v31 = *v11;
              v34 = v137;
            }
            else
            {
              v34 = *v29;
              *v29 = *v11;
            }
            *v11 = v34;
          }
LABEL_45:
          v37 = v16->n128_i32[2];
          v38 = v31->n128_i32[2];
          if (v37 >= (signed __int32)v22->n128_u32[2])
          {
            if (v38 < v37)
            {
              v139 = *v16;
              *v16 = *v31;
              *v31 = v139;
              if ((signed __int32)v16->n128_u32[2] < (signed __int32)v22->n128_u32[2])
              {
                v140 = *v22;
                *v22 = *v16;
                *v16 = v140;
              }
            }
          }
          else
          {
            if (v38 >= v37)
            {
              v141 = *v22;
              *v22 = *v16;
              *v16 = v141;
              if ((signed __int32)v31->n128_u32[2] >= (signed __int32)v16->n128_u32[2])
                goto LABEL_54;
              v138 = *v16;
              *v16 = *v31;
            }
            else
            {
              v138 = *v22;
              *v22 = *v31;
            }
            *v31 = v138;
          }
LABEL_54:
          v142 = *v12;
          *v12 = *v16;
          a5 = v142;
          *v16 = v142;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_55;
LABEL_32:
          v27 = v12->n128_i32[2];
LABEL_56:
          v39 = 0;
          v40 = v12->n128_u64[0];
          v41 = v12->n128_u32[3];
          do
            v42 = v12[++v39].n128_i32[2];
          while (v42 < v27);
          v43 = &v12[v39];
          v44 = a2;
          if (v39 == 1)
          {
            v47 = a2;
            while (v43 < v47)
            {
              v45 = v47 - 1;
              v48 = v47[-1].n128_i32[2];
              --v47;
              if (v48 < v27)
                goto LABEL_64;
            }
            v45 = v47;
            v12 = v43;
          }
          else
          {
            do
            {
              v45 = v44 - 1;
              v46 = v44[-1].n128_i32[2];
              --v44;
            }
            while (v46 >= v27);
LABEL_64:
            v12 = v43;
            if (v43 < v45)
            {
              v49 = v45;
              do
              {
                v143 = *v12;
                *v12 = *v49;
                a5 = v143;
                *v49 = v143;
                do
                {
                  v50 = v12[1].n128_i32[2];
                  ++v12;
                }
                while (v50 < v27);
                do
                {
                  v51 = v49[-1].n128_i32[2];
                  --v49;
                }
                while (v51 >= v27);
              }
              while (v12 < v49);
            }
          }
          v52 = v12 - 1;
          if (&v12[-1] != a1)
          {
            a5 = *v52;
            *a1 = *v52;
          }
          v12[-1].n128_u64[0] = v40;
          v12[-1].n128_u32[2] = v27;
          v12[-1].n128_u32[3] = v41;
          if (v43 < v45)
            goto LABEL_75;
          v53 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::StampingSimplifier::ProcessClauses(void)::Entry *>(a1, v12 - 1, a5);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::StampingSimplifier::ProcessClauses(void)::Entry *>(v12, a2, v54))
          {
            if (v53)
              continue;
LABEL_75:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::StampingSimplifier::ProcessClauses(void)::Entry *,false>(a1, &v12[-1], a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v12 - 1;
          if (v53)
            return;
          goto LABEL_1;
        }
        v76 = v12 + 1;
        v78 = v12 == a2 || v76 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v78)
          {
            v79 = 0;
            v80 = v12;
            do
            {
              v82 = v76;
              v83 = v80[1].n128_i32[2];
              if (v83 < (signed __int32)v80->n128_u32[2])
              {
                v84 = v82->n128_u64[0];
                v85 = v80[1].n128_u32[3];
                v86 = v79;
                do
                {
                  *(__n128 *)((char *)v12 + v86 + 16) = *(__n128 *)((char *)v12 + v86);
                  if (!v86)
                  {
                    v81 = (uint64_t)v12;
                    goto LABEL_121;
                  }
                  v87 = *(__int32 *)((char *)&v12->n128_i32[-2] + v86);
                  v86 -= 16;
                }
                while (v83 < v87);
                v81 = (uint64_t)&v12[1] + v86;
LABEL_121:
                *(_QWORD *)v81 = v84;
                *(_DWORD *)(v81 + 8) = v83;
                *(_DWORD *)(v81 + 12) = v85;
              }
              v76 = v82 + 1;
              v79 += 16;
              v80 = v82;
            }
            while (&v82[1] != a2);
          }
        }
        else if (!v78)
        {
          do
          {
            v120 = v76;
            v121 = a1[1].n128_i32[2];
            if (v121 < (signed __int32)a1->n128_u32[2])
            {
              v122 = v76->n128_u64[0];
              v123 = a1[1].n128_u32[3];
              v124 = v120;
              do
              {
                *v124 = v124[-1];
                v125 = v124[-2].n128_i32[2];
                --v124;
              }
              while (v121 < v125);
              v124->n128_u64[0] = v122;
              v124->n128_u32[2] = v121;
              v124->n128_u32[3] = v123;
            }
            v76 = v120 + 1;
            a1 = v120;
          }
          while (&v120[1] != a2);
        }
        return;
    }
  }
}

  v9 = a1;
  while (2)
  {
    a1 = v9;
    v10 = a2 - v9;
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v9) >> 3);
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return a5.n128_f64[0];
      case 2uLL:
        v77 = (unint64_t *)(a2 - 16);
        a5.n128_u64[0] = *(_QWORD *)(a2 - 16);
        v78 = *(_DWORD *)(a2 - 8);
        v79 = (__n128 *)(v9 + 8);
        v80 = *(_DWORD *)(v9 + 16);
        v85 = v78 == v80;
        v81 = v78 > v80;
        if (v85)
          v81 = a5.n128_f64[0] < *(double *)(v9 + 8);
        if (v81)
        {
          v82 = *(_QWORD *)v9;
          *(_QWORD *)v9 = *(_QWORD *)(a2 - 24);
          *(_QWORD *)(a2 - 24) = v82;
          a5 = *v79;
          v165 = *v79;
          v83 = *v77;
          *(_QWORD *)(v9 + 13) = *(_QWORD *)(a2 - 11);
          v79->n128_u64[0] = v83;
          *(_QWORD *)(a2 - 11) = *(unint64_t *)((char *)v165.n128_u64 + 5);
          *v77 = v165.n128_u64[0];
        }
        return a5.n128_f64[0];
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>((uint64_t *)v9, (uint64_t *)(v9 + 24), (uint64_t *)(a2 - 24));
        return a5.n128_f64[0];
      case 4uLL:
        a5.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>(v9, v9 + 24, v9 + 48, a2 - 24).n128_u64[0];
        return a5.n128_f64[0];
      case 5uLL:
        a5.n128_u64[0] = std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *,0>(v9, v9 + 24, v9 + 48, v9 + 72, a2 - 24).n128_u64[0];
        return a5.n128_f64[0];
      default:
        if (v10 > 575)
        {
          if (!a3)
          {
            if (v9 != a2)
            {
              v101 = (v11 - 2) >> 1;
              v102 = v101;
              do
              {
                v103 = v102;
                if (v101 >= v102)
                {
                  v104 = (2 * v102) | 1;
                  v105 = v9 + 24 * v104;
                  if (2 * v103 + 2 < (uint64_t)v11)
                  {
                    v106 = *(_DWORD *)(v105 + 16);
                    v107 = *(_DWORD *)(v105 + 40);
                    v85 = v106 == v107;
                    v108 = v106 > v107;
                    if (v85)
                      v108 = *(double *)(v105 + 8) < *(double *)(v105 + 32);
                    v105 += 24 * v108;
                    if (v108)
                      v104 = 2 * v103 + 2;
                  }
                  v109 = v9 + 24 * v103;
                  v110 = *(_DWORD *)(v105 + 16);
                  a5.n128_u64[0] = *(_QWORD *)(v109 + 8);
                  v111 = *(_DWORD *)(v109 + 16);
                  v85 = v110 == v111;
                  v112 = v110 > v111;
                  if (v85)
                    v112 = *(double *)(v105 + 8) < a5.n128_f64[0];
                  if (!v112)
                  {
                    v113 = *(_QWORD *)v109;
                    v114 = *(_DWORD *)(v109 + 20);
                    do
                    {
                      v118 = (_QWORD *)v109;
                      v109 = v105;
                      *v118 = *(_QWORD *)v105;
                      v119 = *(_QWORD *)(v105 + 8);
                      *(_QWORD *)((char *)v118 + 13) = *(_QWORD *)(v109 + 13);
                      v118[1] = v119;
                      if (v101 < v104)
                        break;
                      v120 = (2 * v104) | 1;
                      v105 = v9 + 24 * v120;
                      v121 = 2 * v104 + 2;
                      if (v121 < (uint64_t)v11)
                      {
                        v122 = *(_DWORD *)(v105 + 16);
                        v123 = *(_DWORD *)(v105 + 40);
                        v85 = v122 == v123;
                        v124 = v122 > v123;
                        if (v85)
                          v124 = *(double *)(v105 + 8) < *(double *)(v105 + 32);
                        v105 += 24 * v124;
                        if (v124)
                          v120 = v121;
                      }
                      v115 = *(_DWORD *)(v105 + 16);
                      v116 = *(double *)(v105 + 8) < a5.n128_f64[0];
                      v85 = v115 == v111;
                      v117 = v115 > v111;
                      if (!v85)
                        v116 = v117;
                      v104 = v120;
                    }
                    while (!v116);
                    *(_QWORD *)v109 = v113;
                    *(_QWORD *)(v109 + 8) = a5.n128_u64[0];
                    *(_DWORD *)(v109 + 16) = v111;
                    *(_BYTE *)(v109 + 20) = v114;
                  }
                }
                v102 = v103 - 1;
              }
              while (v103);
              v125 = v10 / 0x18uLL;
              do
              {
                v127 = 0;
                v128 = *(_QWORD *)v9;
                *(_QWORD *)v166 = *(_QWORD *)(v9 + 8);
                *(_QWORD *)&v166[5] = *(_QWORD *)(v9 + 13);
                v129 = (_QWORD *)v9;
                do
                {
                  v132 = (uint64_t)&v129[3 * v127 + 3];
                  v133 = (2 * v127) | 1;
                  v134 = 2 * v127 + 2;
                  if (v134 < v125)
                  {
                    a5.n128_u64[0] = v129[3 * v127 + 4];
                    v135 = v129[3 * v127 + 5];
                    v136 = *(_DWORD *)(v132 + 40);
                    v85 = v135 == v136;
                    v137 = v135 > v136;
                    if (v85)
                      v137 = a5.n128_f64[0] < *(double *)(v132 + 32);
                    v132 += 24 * v137;
                    if (v137)
                      v133 = v134;
                  }
                  *v129 = *(_QWORD *)v132;
                  v131 = (_QWORD *)(v132 + 8);
                  v130 = *(_QWORD *)(v132 + 8);
                  *(_QWORD *)((char *)v129 + 13) = *(_QWORD *)(v132 + 13);
                  v129[1] = v130;
                  v129 = (_QWORD *)v132;
                  v127 = v133;
                }
                while (v133 <= (uint64_t)((unint64_t)(v125 - 2) >> 1));
                if (v132 == a2 - 24)
                {
                  *(_QWORD *)v132 = v128;
                  *(_QWORD *)(v132 + 13) = *(_QWORD *)&v166[5];
                  *v131 = *(_QWORD *)v166;
                }
                else
                {
                  *(_QWORD *)v132 = *(_QWORD *)(a2 - 24);
                  v138 = *(_QWORD *)(a2 - 16);
                  *(_QWORD *)(v132 + 13) = *(_QWORD *)(a2 - 11);
                  *v131 = v138;
                  *(_QWORD *)(a2 - 24) = v128;
                  *(_QWORD *)(a2 - 11) = *(_QWORD *)&v166[5];
                  *(_QWORD *)(a2 - 16) = *(_QWORD *)v166;
                  v139 = v132 - v9 + 24;
                  if (v139 >= 25)
                  {
                    v140 = (v139 / 0x18uLL - 2) >> 1;
                    v141 = v9 + 24 * v140;
                    v142 = *(_DWORD *)(v141 + 16);
                    a5.n128_u64[0] = *(_QWORD *)(v132 + 8);
                    v143 = *(_DWORD *)(v132 + 16);
                    v85 = v142 == v143;
                    v144 = v142 > v143;
                    if (v85)
                      v144 = *(double *)(v141 + 8) < a5.n128_f64[0];
                    if (v144)
                    {
                      v145 = *(_QWORD *)v132;
                      v146 = *(_DWORD *)(v132 + 20);
                      do
                      {
                        v147 = (_QWORD *)v132;
                        v132 = v141;
                        *v147 = *(_QWORD *)v141;
                        v148 = *(_QWORD *)(v141 + 8);
                        *(_QWORD *)((char *)v147 + 13) = *(_QWORD *)(v132 + 13);
                        v147[1] = v148;
                        if (!v140)
                          break;
                        v140 = (v140 - 1) >> 1;
                        v141 = v9 + 24 * v140;
                        v149 = *(_DWORD *)(v141 + 16);
                        v85 = v149 == v143;
                        v150 = v149 > v143;
                        if (v85)
                          v150 = *(double *)(v141 + 8) < a5.n128_f64[0];
                      }
                      while (v150);
                      *(_QWORD *)v132 = v145;
                      *(_QWORD *)(v132 + 8) = a5.n128_u64[0];
                      *(_DWORD *)(v132 + 16) = v143;
                      *(_BYTE *)(v132 + 20) = v146;
                    }
                  }
                }
                a2 -= 24;
              }
              while (v125-- > 2);
            }
            return a5.n128_f64[0];
          }
          v12 = v11 >> 1;
          v13 = (uint64_t *)(v9 + 24 * (v11 >> 1));
          if ((unint64_t)v10 >= 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>((uint64_t *)a1, (uint64_t *)(a1 + 24 * (v11 >> 1)), (uint64_t *)(a2 - 24));
            v14 = a1 + 24 * v12;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>((uint64_t *)(a1 + 24), (uint64_t *)(v14 - 24), (uint64_t *)(a2 - 48));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>((uint64_t *)(a1 + 48), (uint64_t *)(a1 + 24 + 24 * v12), (uint64_t *)(a2 - 72));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>((uint64_t *)(v14 - 24), v13, (uint64_t *)(a1 + 24 + 24 * v12));
            v15 = *(_QWORD *)a1;
            *(_QWORD *)a1 = *v13;
            *v13 = v15;
            v162 = *(_OWORD *)(a1 + 8);
            v16 = *(_QWORD *)(v14 + 13);
            *(_QWORD *)(a1 + 8) = *(_QWORD *)(v14 + 8);
            *(_QWORD *)(a1 + 13) = v16;
            *(_QWORD *)(v14 + 13) = *(_QWORD *)((char *)&v162 + 5);
            *(_QWORD *)(v14 + 8) = v162;
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_19;
LABEL_7:
            v17 = *(_DWORD *)(a1 - 8);
            a5.n128_u64[0] = *(_QWORD *)(a1 + 8);
            v18 = *(_DWORD *)(a1 + 16);
            v85 = v17 == v18;
            v19 = v17 > v18;
            if (v85)
              v19 = *(double *)(a1 - 16) < a5.n128_f64[0];
            if (v19)
              goto LABEL_20;
            v20 = *(_DWORD *)(a2 - 8);
            v85 = v18 == v20;
            v21 = v18 > v20;
            if (v85)
              v21 = a5.n128_f64[0] < *(double *)(a2 - 16);
            if (v21)
            {
              v22 = a1;
              do
              {
                v9 = v22 + 24;
                v23 = *(double *)(v22 + 32);
                v24 = *(_DWORD *)(v22 + 40);
                v25 = a5.n128_f64[0] < v23;
                v85 = v18 == v24;
                v26 = v18 > v24;
                if (!v85)
                  v25 = v26;
                v22 = v9;
              }
              while (!v25);
            }
            else
            {
              v55 = a1 + 24;
              do
              {
                v9 = v55;
                if (v55 >= a2)
                  break;
                v56 = *(double *)(v55 + 8);
                v57 = *(_DWORD *)(v55 + 16);
                v58 = a5.n128_f64[0] < v56;
                v85 = v18 == v57;
                v59 = v18 > v57;
                if (!v85)
                  v58 = v59;
                v55 = v9 + 24;
              }
              while (!v58);
            }
            v60 = (double *)a2;
            if (v9 < a2)
            {
              v61 = (double *)a2;
              do
              {
                v60 = v61 - 3;
                v62 = *(v61 - 2);
                v63 = *((_DWORD *)v61 - 2);
                v64 = a5.n128_f64[0] < v62;
                v85 = v18 == v63;
                v65 = v18 > v63;
                if (!v85)
                  v64 = v65;
                v61 = v60;
              }
              while (v64);
            }
            v66 = *(_QWORD *)a1;
            v67 = *(_DWORD *)(a1 + 20);
            while (v9 < (unint64_t)v60)
            {
              v68 = *(_QWORD *)v9;
              *(double *)v9 = *v60;
              *(_QWORD *)v60 = v68;
              v164 = *(_OWORD *)(v9 + 8);
              v69 = *(_QWORD *)((char *)v60 + 13);
              *(double *)(v9 + 8) = v60[1];
              *(_QWORD *)(v9 + 13) = v69;
              *((_QWORD *)v60 + 1) = v164;
              *(double *)((char *)v60 + 13) = *(double *)((char *)&v164 + 5);
              do
              {
                v70 = *(double *)(v9 + 32);
                v71 = *(_DWORD *)(v9 + 40);
                v9 += 24;
                v85 = v18 == v71;
                v72 = v18 > v71;
                if (v85)
                  v72 = a5.n128_f64[0] < v70;
              }
              while (!v72);
              do
              {
                v73 = *(v60 - 2);
                v74 = *((_DWORD *)v60 - 2);
                v60 -= 3;
                v85 = v18 == v74;
                v75 = v18 > v74;
                if (v85)
                  v75 = a5.n128_f64[0] < v73;
              }
              while (v75);
            }
            if (v9 - 24 != a1)
            {
              *(_QWORD *)a1 = *(_QWORD *)(v9 - 24);
              v76 = *(_QWORD *)(v9 - 16);
              *(_QWORD *)(a1 + 13) = *(_QWORD *)(v9 - 11);
              *(_QWORD *)(a1 + 8) = v76;
            }
            a4 = 0;
            *(_QWORD *)(v9 - 24) = v66;
            *(_QWORD *)(v9 - 16) = a5.n128_u64[0];
            *(_DWORD *)(v9 - 8) = v18;
            *(_BYTE *)(v9 - 4) = v67;
            continue;
          }
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>((uint64_t *)(a1 + 24 * (v11 >> 1)), (uint64_t *)a1, (uint64_t *)(a2 - 24));
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_7;
LABEL_19:
          a5.n128_u64[0] = *(_QWORD *)(a1 + 8);
          v18 = *(_DWORD *)(a1 + 16);
LABEL_20:
          v27 = 0;
          v28 = *(_QWORD *)a1;
          v29 = *(_DWORD *)(a1 + 20);
          do
          {
            v30 = *(_DWORD *)(a1 + v27 + 40);
            v85 = v30 == v18;
            v31 = v30 > v18;
            if (v85)
              v31 = *(double *)(a1 + v27 + 32) < a5.n128_f64[0];
            v27 += 24;
          }
          while (v31);
          v32 = a1 + v27;
          v33 = a2;
          if (v27 == 24)
          {
            v39 = a2;
            while (v32 < v39)
            {
              v34 = (uint64_t *)(v39 - 24);
              v40 = *(double *)(v39 - 16);
              v41 = *(_DWORD *)(v39 - 8);
              v42 = v40 < a5.n128_f64[0];
              v85 = v41 == v18;
              v43 = v41 > v18;
              if (!v85)
                v42 = v43;
              v39 = (unint64_t)v34;
              if (v42)
                goto LABEL_34;
            }
            v34 = (uint64_t *)v39;
            v9 = v32;
          }
          else
          {
            do
            {
              v34 = (uint64_t *)(v33 - 24);
              v35 = *(double *)(v33 - 16);
              v36 = *(_DWORD *)(v33 - 8);
              v37 = v35 < a5.n128_f64[0];
              v85 = v36 == v18;
              v38 = v36 > v18;
              if (!v85)
                v37 = v38;
              v33 = (unint64_t)v34;
            }
            while (!v37);
LABEL_34:
            v9 = v32;
            if (v32 < (unint64_t)v34)
            {
              v44 = v34;
              do
              {
                v45 = *(_QWORD *)v9;
                *(_QWORD *)v9 = *v44;
                *v44 = v45;
                v163 = *(_OWORD *)(v9 + 8);
                v46 = *(uint64_t *)((char *)v44 + 13);
                *(_QWORD *)(v9 + 8) = v44[1];
                *(_QWORD *)(v9 + 13) = v46;
                v44[1] = v163;
                *(uint64_t *)((char *)v44 + 13) = *(_QWORD *)((char *)&v163 + 5);
                do
                {
                  v47 = *(double *)(v9 + 32);
                  v48 = *(_DWORD *)(v9 + 40);
                  v9 += 24;
                  v85 = v48 == v18;
                  v49 = v48 > v18;
                  if (v85)
                    v49 = v47 < a5.n128_f64[0];
                }
                while (v49);
                do
                {
                  v50 = *((double *)v44 - 2);
                  v51 = *((_DWORD *)v44 - 2);
                  v44 -= 3;
                  v85 = v51 == v18;
                  v52 = v51 > v18;
                  if (v85)
                    v52 = v50 < a5.n128_f64[0];
                }
                while (!v52);
              }
              while (v9 < (unint64_t)v44);
            }
          }
          if (v9 - 24 != a1)
          {
            *(_QWORD *)a1 = *(_QWORD *)(v9 - 24);
            v53 = *(_QWORD *)(v9 - 16);
            *(_QWORD *)(a1 + 13) = *(_QWORD *)(v9 - 11);
            *(_QWORD *)(a1 + 8) = v53;
          }
          *(_QWORD *)(v9 - 24) = v28;
          *(_QWORD *)(v9 - 16) = a5.n128_u64[0];
          *(_DWORD *)(v9 - 8) = v18;
          *(_BYTE *)(v9 - 4) = v29;
          if (v32 < (unint64_t)v34)
            goto LABEL_49;
          v54 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>(a1, v9 - 24);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>(v9, a2))
          {
            if (v54)
              continue;
LABEL_49:
            std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *,false>(a1, v9 - 24, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v9 - 24;
          if (v54)
            return a5.n128_f64[0];
          goto LABEL_1;
        }
        v84 = (_QWORD *)(v9 + 24);
        v85 = v9 == a2 || v84 == (_QWORD *)a2;
        v86 = v85;
        if ((a4 & 1) != 0)
        {
          if ((v86 & 1) == 0)
          {
            v87 = 0;
            v88 = (_QWORD *)v9;
            do
            {
              v90 = v84;
              a5.n128_u64[0] = v88[4];
              v91 = *((_DWORD *)v88 + 10);
              v92 = *((_DWORD *)v88 + 4);
              v85 = v91 == v92;
              v93 = v91 > v92;
              if (v85)
                v93 = a5.n128_f64[0] < *((double *)v88 + 1);
              if (v93)
              {
                v94 = *v90;
                v95 = *((_DWORD *)v88 + 11);
                v96 = v87;
                do
                {
                  v97 = (_QWORD *)(v9 + v96);
                  v98 = *(_QWORD *)(v9 + v96 + 8);
                  v97[3] = *(_QWORD *)(v9 + v96);
                  v97[4] = v98;
                  *(_QWORD *)((char *)v97 + 37) = *(_QWORD *)(v9 + v96 + 13);
                  if (!v96)
                  {
                    v89 = v9;
                    goto LABEL_95;
                  }
                  v99 = *((_DWORD *)v97 - 2);
                  v85 = v91 == v99;
                  v100 = v91 > v99;
                  if (v85)
                    v100 = a5.n128_f64[0] < *((double *)v97 - 2);
                  v96 -= 24;
                }
                while (v100);
                v89 = v9 + v96 + 24;
LABEL_95:
                *(_QWORD *)v89 = v94;
                v97[1] = a5.n128_u64[0];
                *(_DWORD *)(v89 + 16) = v91;
                *(_BYTE *)(v89 + 20) = v95;
              }
              v84 = v90 + 3;
              v87 += 24;
              v88 = v90;
            }
            while (v90 + 3 != (_QWORD *)a2);
          }
        }
        else if ((v86 & 1) == 0)
        {
          v151 = (_BYTE *)(v9 + 44);
          do
          {
            v152 = v84;
            a5.n128_u64[0] = *(_QWORD *)(a1 + 32);
            v153 = *(_DWORD *)(a1 + 40);
            v154 = *(_DWORD *)(a1 + 16);
            v85 = v153 == v154;
            v155 = v153 > v154;
            if (v85)
              v155 = a5.n128_f64[0] < *(double *)(a1 + 8);
            if (v155)
            {
              v156 = *v152;
              v157 = *(_DWORD *)(a1 + 44);
              v158 = v151;
              do
              {
                *(_QWORD *)(v158 - 20) = *(_QWORD *)(v158 - 44);
                *(_QWORD *)(v158 - 12) = *(_QWORD *)(v158 - 36);
                *(_QWORD *)(v158 - 7) = *(_QWORD *)(v158 - 31);
                v159 = *((_DWORD *)v158 - 13);
                v85 = v153 == v159;
                v160 = v153 > v159;
                if (v85)
                  v160 = a5.n128_f64[0] < *(double *)(v158 - 60);
                v158 -= 24;
              }
              while (v160);
              *(_QWORD *)(v158 - 20) = v156;
              *(_QWORD *)(v158 - 12) = a5.n128_u64[0];
              *((_DWORD *)v158 - 1) = v153;
              *v158 = v157;
            }
            v84 = v152 + 3;
            v151 += 24;
            a1 = (uint64_t)v152;
          }
          while (v152 + 3 != (uint64_t *)a2);
        }
        return a5.n128_f64[0];
    }
  }
}

  v9 = a1;
  while (2)
  {
    a1 = v9;
    v10 = a2 - v9;
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v9) >> 3);
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return a5.n128_f64[0];
      case 2uLL:
        v72 = (unint64_t *)(a2 - 16);
        a5.n128_u64[0] = *(_QWORD *)(a2 - 16);
        v73 = (__n128 *)(v9 + 8);
        v74 = *(double *)(v9 + 8);
        v75 = *(_DWORD *)(a2 - 8) > *(_DWORD *)(v9 + 16);
        if (a5.n128_f64[0] != v74)
          v75 = a5.n128_f64[0] < v74;
        if (v75)
        {
          v76 = *(_QWORD *)v9;
          *(_QWORD *)v9 = *(_QWORD *)(a2 - 24);
          *(_QWORD *)(a2 - 24) = v76;
          a5 = *v73;
          v157 = *v73;
          v77 = *v72;
          *(_QWORD *)(v9 + 13) = *(_QWORD *)(a2 - 11);
          v73->n128_u64[0] = v77;
          *(_QWORD *)(a2 - 11) = *(unint64_t *)((char *)v157.n128_u64 + 5);
          *v72 = v157.n128_u64[0];
        }
        return a5.n128_f64[0];
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>((uint64_t *)v9, (uint64_t *)(v9 + 24), (uint64_t *)(a2 - 24));
        return a5.n128_f64[0];
      case 4uLL:
        a5.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>(v9, v9 + 24, v9 + 48, a2 - 24).n128_u64[0];
        return a5.n128_f64[0];
      case 5uLL:
        a5.n128_u64[0] = std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *,0>(v9, v9 + 24, v9 + 48, v9 + 72, a2 - 24).n128_u64[0];
        return a5.n128_f64[0];
      default:
        if (v10 > 575)
        {
          if (!a3)
          {
            if (v9 != a2)
            {
              v95 = (v11 - 2) >> 1;
              v96 = v95;
              do
              {
                v97 = v96;
                if (v95 >= v96)
                {
                  v98 = (2 * v96) | 1;
                  v99 = v9 + 24 * v98;
                  if (2 * v97 + 2 < (uint64_t)v11)
                  {
                    v100 = *(double *)(v99 + 8);
                    v101 = *(double *)(v99 + 32);
                    v102 = *(_DWORD *)(v99 + 16) > *(_DWORD *)(v99 + 40);
                    if (v100 != v101)
                      v102 = v100 < v101;
                    v99 += 24 * v102;
                    if (v102)
                      v98 = 2 * v97 + 2;
                  }
                  v103 = v9 + 24 * v97;
                  v104 = *(double *)(v99 + 8);
                  a5.n128_u64[0] = *(_QWORD *)(v103 + 8);
                  v105 = *(_DWORD *)(v103 + 16);
                  v106 = *(_DWORD *)(v99 + 16) > v105;
                  if (v104 != a5.n128_f64[0])
                    v106 = v104 < a5.n128_f64[0];
                  if (!v106)
                  {
                    v107 = *(_QWORD *)v103;
                    v108 = *(_DWORD *)(v103 + 20);
                    do
                    {
                      v111 = (_QWORD *)v103;
                      v103 = v99;
                      *v111 = *(_QWORD *)v99;
                      v112 = *(_QWORD *)(v99 + 8);
                      *(_QWORD *)((char *)v111 + 13) = *(_QWORD *)(v103 + 13);
                      v111[1] = v112;
                      if (v95 < v98)
                        break;
                      v113 = (2 * v98) | 1;
                      v99 = v9 + 24 * v113;
                      v114 = 2 * v98 + 2;
                      if (v114 < (uint64_t)v11)
                      {
                        v115 = *(double *)(v99 + 8);
                        v116 = *(double *)(v99 + 32);
                        v117 = *(_DWORD *)(v99 + 16) > *(_DWORD *)(v99 + 40);
                        if (v115 != v116)
                          v117 = v115 < v116;
                        v99 += 24 * v117;
                        if (v117)
                          v113 = v114;
                      }
                      v109 = *(double *)(v99 + 8);
                      v110 = v109 < a5.n128_f64[0];
                      if (v109 == a5.n128_f64[0])
                        v110 = *(_DWORD *)(v99 + 16) > v105;
                      v98 = v113;
                    }
                    while (!v110);
                    *(_QWORD *)v103 = v107;
                    *(_QWORD *)(v103 + 8) = a5.n128_u64[0];
                    *(_DWORD *)(v103 + 16) = v105;
                    *(_BYTE *)(v103 + 20) = v108;
                  }
                }
                v96 = v97 - 1;
              }
              while (v97);
              v118 = v10 / 0x18uLL;
              do
              {
                v120 = 0;
                v121 = *(_QWORD *)v9;
                *(_QWORD *)v158 = *(_QWORD *)(v9 + 8);
                *(_QWORD *)&v158[5] = *(_QWORD *)(v9 + 13);
                v122 = (_QWORD *)v9;
                do
                {
                  v125 = (uint64_t)&v122[3 * v120 + 3];
                  v126 = (2 * v120) | 1;
                  v127 = 2 * v120 + 2;
                  if (v127 < v118)
                  {
                    a5.n128_u64[0] = v122[3 * v120 + 4];
                    v128 = *(double *)&v122[3 * v120 + 7];
                    v129 = SLODWORD(v122[3 * v120 + 5]) > SLODWORD(v122[3 * v120 + 8]);
                    if (a5.n128_f64[0] != v128)
                      v129 = a5.n128_f64[0] < v128;
                    v125 += 24 * v129;
                    if (v129)
                      v126 = v127;
                  }
                  *v122 = *(_QWORD *)v125;
                  v124 = (_QWORD *)(v125 + 8);
                  v123 = *(_QWORD *)(v125 + 8);
                  *(_QWORD *)((char *)v122 + 13) = *(_QWORD *)(v125 + 13);
                  v122[1] = v123;
                  v122 = (_QWORD *)v125;
                  v120 = v126;
                }
                while (v126 <= (uint64_t)((unint64_t)(v118 - 2) >> 1));
                if (v125 == a2 - 24)
                {
                  *(_QWORD *)v125 = v121;
                  *(_QWORD *)(v125 + 13) = *(_QWORD *)&v158[5];
                  *v124 = *(_QWORD *)v158;
                }
                else
                {
                  *(_QWORD *)v125 = *(_QWORD *)(a2 - 24);
                  v130 = *(_QWORD *)(a2 - 16);
                  *(_QWORD *)(v125 + 13) = *(_QWORD *)(a2 - 11);
                  *v124 = v130;
                  *(_QWORD *)(a2 - 24) = v121;
                  *(_QWORD *)(a2 - 11) = *(_QWORD *)&v158[5];
                  *(_QWORD *)(a2 - 16) = *(_QWORD *)v158;
                  v131 = v125 - v9 + 24;
                  if (v131 >= 25)
                  {
                    v132 = (v131 / 0x18uLL - 2) >> 1;
                    v133 = v9 + 24 * v132;
                    v134 = *(double *)(v133 + 8);
                    a5.n128_u64[0] = *(_QWORD *)(v125 + 8);
                    v135 = *(_DWORD *)(v125 + 16);
                    v136 = *(_DWORD *)(v133 + 16) > v135;
                    if (v134 != a5.n128_f64[0])
                      v136 = v134 < a5.n128_f64[0];
                    if (v136)
                    {
                      v137 = *(_QWORD *)v125;
                      v138 = *(_DWORD *)(v125 + 20);
                      do
                      {
                        v139 = (_QWORD *)v125;
                        v125 = v133;
                        *v139 = *(_QWORD *)v133;
                        v140 = *(_QWORD *)(v133 + 8);
                        *(_QWORD *)((char *)v139 + 13) = *(_QWORD *)(v125 + 13);
                        v139[1] = v140;
                        if (!v132)
                          break;
                        v132 = (v132 - 1) >> 1;
                        v133 = v9 + 24 * v132;
                        v141 = *(double *)(v133 + 8);
                        v142 = *(_DWORD *)(v133 + 16) > v135;
                        if (v141 != a5.n128_f64[0])
                          v142 = v141 < a5.n128_f64[0];
                      }
                      while (v142);
                      *(_QWORD *)v125 = v137;
                      *(_QWORD *)(v125 + 8) = a5.n128_u64[0];
                      *(_DWORD *)(v125 + 16) = v135;
                      *(_BYTE *)(v125 + 20) = v138;
                    }
                  }
                }
                a2 -= 24;
              }
              while (v118-- > 2);
            }
            return a5.n128_f64[0];
          }
          v12 = v11 >> 1;
          v13 = (uint64_t *)(v9 + 24 * (v11 >> 1));
          if ((unint64_t)v10 >= 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>((uint64_t *)a1, (uint64_t *)(a1 + 24 * (v11 >> 1)), (uint64_t *)(a2 - 24));
            v14 = a1 + 24 * v12;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>((uint64_t *)(a1 + 24), (uint64_t *)(v14 - 24), (uint64_t *)(a2 - 48));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>((uint64_t *)(a1 + 48), (uint64_t *)(a1 + 24 + 24 * v12), (uint64_t *)(a2 - 72));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>((uint64_t *)(v14 - 24), v13, (uint64_t *)(a1 + 24 + 24 * v12));
            v15 = *(_QWORD *)a1;
            *(_QWORD *)a1 = *v13;
            *v13 = v15;
            v154 = *(_OWORD *)(a1 + 8);
            v16 = *(_QWORD *)(v14 + 13);
            *(_QWORD *)(a1 + 8) = *(_QWORD *)(v14 + 8);
            *(_QWORD *)(a1 + 13) = v16;
            *(_QWORD *)(v14 + 13) = *(_QWORD *)((char *)&v154 + 5);
            *(_QWORD *)(v14 + 8) = v154;
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_19;
LABEL_7:
            v17 = *(double *)(a1 - 16);
            a5.n128_u64[0] = *(_QWORD *)(a1 + 8);
            v18 = *(_DWORD *)(a1 + 16);
            v19 = *(_DWORD *)(a1 - 8) > v18;
            if (v17 != a5.n128_f64[0])
              v19 = v17 < a5.n128_f64[0];
            if (v19)
              goto LABEL_20;
            v20 = *(double *)(a2 - 16);
            v21 = v18 > *(_DWORD *)(a2 - 8);
            if (a5.n128_f64[0] != v20)
              v21 = a5.n128_f64[0] < v20;
            if (v21)
            {
              v22 = a1;
              do
              {
                v9 = v22 + 24;
                v23 = *(double *)(v22 + 32);
                v24 = v18 > *(_DWORD *)(v22 + 40);
                v25 = a5.n128_f64[0] < v23;
                if (a5.n128_f64[0] == v23)
                  v25 = v24;
                v22 = v9;
              }
              while (!v25);
            }
            else
            {
              v52 = a1 + 24;
              do
              {
                v9 = v52;
                if (v52 >= a2)
                  break;
                v53 = *(double *)(v52 + 8);
                v54 = v18 > *(_DWORD *)(v52 + 16);
                v55 = a5.n128_f64[0] < v53;
                if (a5.n128_f64[0] == v53)
                  v55 = v54;
                v52 = v9 + 24;
              }
              while (!v55);
            }
            v56 = (double *)a2;
            if (v9 < a2)
            {
              v57 = (double *)a2;
              do
              {
                v56 = v57 - 3;
                v58 = *(v57 - 2);
                v59 = v18 > *((_DWORD *)v57 - 2);
                v60 = a5.n128_f64[0] < v58;
                if (a5.n128_f64[0] == v58)
                  v60 = v59;
                v57 = v56;
              }
              while (v60);
            }
            v61 = *(_QWORD *)a1;
            v62 = *(_DWORD *)(a1 + 20);
            while (v9 < (unint64_t)v56)
            {
              v63 = *(_QWORD *)v9;
              *(double *)v9 = *v56;
              *(_QWORD *)v56 = v63;
              v156 = *(_OWORD *)(v9 + 8);
              v64 = *(_QWORD *)((char *)v56 + 13);
              *(double *)(v9 + 8) = v56[1];
              *(_QWORD *)(v9 + 13) = v64;
              *((_QWORD *)v56 + 1) = v156;
              *(double *)((char *)v56 + 13) = *(double *)((char *)&v156 + 5);
              do
              {
                v65 = *(double *)(v9 + 32);
                v66 = *(_DWORD *)(v9 + 40);
                v9 += 24;
                v67 = v18 > v66;
                if (a5.n128_f64[0] != v65)
                  v67 = a5.n128_f64[0] < v65;
              }
              while (!v67);
              do
              {
                v68 = *(v56 - 2);
                v69 = *((_DWORD *)v56 - 2);
                v56 -= 3;
                v70 = v18 > v69;
                if (a5.n128_f64[0] != v68)
                  v70 = a5.n128_f64[0] < v68;
              }
              while (v70);
            }
            if (v9 - 24 != a1)
            {
              *(_QWORD *)a1 = *(_QWORD *)(v9 - 24);
              v71 = *(_QWORD *)(v9 - 16);
              *(_QWORD *)(a1 + 13) = *(_QWORD *)(v9 - 11);
              *(_QWORD *)(a1 + 8) = v71;
            }
            a4 = 0;
            *(_QWORD *)(v9 - 24) = v61;
            *(_QWORD *)(v9 - 16) = a5.n128_u64[0];
            *(_DWORD *)(v9 - 8) = v18;
            *(_BYTE *)(v9 - 4) = v62;
            continue;
          }
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>((uint64_t *)(a1 + 24 * (v11 >> 1)), (uint64_t *)a1, (uint64_t *)(a2 - 24));
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_7;
LABEL_19:
          a5.n128_u64[0] = *(_QWORD *)(a1 + 8);
          v18 = *(_DWORD *)(a1 + 16);
LABEL_20:
          v26 = 0;
          v27 = *(_QWORD *)a1;
          v28 = *(_DWORD *)(a1 + 20);
          do
          {
            v29 = *(double *)(a1 + v26 + 32);
            v30 = *(_DWORD *)(a1 + v26 + 40) > v18;
            if (v29 != a5.n128_f64[0])
              v30 = v29 < a5.n128_f64[0];
            v26 += 24;
          }
          while (v30);
          v31 = a1 + v26;
          v32 = a2;
          if (v26 == 24)
          {
            v37 = a2;
            while (v31 < v37)
            {
              v33 = (uint64_t *)(v37 - 24);
              v38 = *(double *)(v37 - 16);
              v39 = *(_DWORD *)(v37 - 8) > v18;
              v40 = v38 < a5.n128_f64[0];
              if (v38 == a5.n128_f64[0])
                v40 = v39;
              v37 = (unint64_t)v33;
              if (v40)
                goto LABEL_34;
            }
            v33 = (uint64_t *)v37;
            v9 = v31;
          }
          else
          {
            do
            {
              v33 = (uint64_t *)(v32 - 24);
              v34 = *(double *)(v32 - 16);
              v35 = *(_DWORD *)(v32 - 8) > v18;
              v36 = v34 < a5.n128_f64[0];
              if (v34 == a5.n128_f64[0])
                v36 = v35;
              v32 = (unint64_t)v33;
            }
            while (!v36);
LABEL_34:
            v9 = v31;
            if (v31 < (unint64_t)v33)
            {
              v41 = v33;
              do
              {
                v42 = *(_QWORD *)v9;
                *(_QWORD *)v9 = *v41;
                *v41 = v42;
                v155 = *(_OWORD *)(v9 + 8);
                v43 = *(uint64_t *)((char *)v41 + 13);
                *(_QWORD *)(v9 + 8) = v41[1];
                *(_QWORD *)(v9 + 13) = v43;
                v41[1] = v155;
                *(uint64_t *)((char *)v41 + 13) = *(_QWORD *)((char *)&v155 + 5);
                do
                {
                  v44 = *(double *)(v9 + 32);
                  v45 = *(_DWORD *)(v9 + 40);
                  v9 += 24;
                  v46 = v45 > v18;
                  if (v44 != a5.n128_f64[0])
                    v46 = v44 < a5.n128_f64[0];
                }
                while (v46);
                do
                {
                  v47 = *((double *)v41 - 2);
                  v48 = *((_DWORD *)v41 - 2);
                  v41 -= 3;
                  v49 = v48 > v18;
                  if (v47 != a5.n128_f64[0])
                    v49 = v47 < a5.n128_f64[0];
                }
                while (!v49);
              }
              while (v9 < (unint64_t)v41);
            }
          }
          if (v9 - 24 != a1)
          {
            *(_QWORD *)a1 = *(_QWORD *)(v9 - 24);
            v50 = *(_QWORD *)(v9 - 16);
            *(_QWORD *)(a1 + 13) = *(_QWORD *)(v9 - 11);
            *(_QWORD *)(a1 + 8) = v50;
          }
          *(_QWORD *)(v9 - 24) = v27;
          *(_QWORD *)(v9 - 16) = a5.n128_u64[0];
          *(_DWORD *)(v9 - 8) = v18;
          *(_BYTE *)(v9 - 4) = v28;
          if (v31 < (unint64_t)v33)
            goto LABEL_49;
          v51 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>(a1, v9 - 24);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>(v9, a2))
          {
            if (v51)
              continue;
LABEL_49:
            std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *,false>(a1, v9 - 24, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v9 - 24;
          if (v51)
            return a5.n128_f64[0];
          goto LABEL_1;
        }
        v78 = (_QWORD *)(v9 + 24);
        v80 = v9 == a2 || v78 == (_QWORD *)a2;
        if ((a4 & 1) != 0)
        {
          if (!v80)
          {
            v81 = 0;
            v82 = (_QWORD *)v9;
            do
            {
              v84 = v78;
              a5.n128_u64[0] = v82[4];
              v85 = *((_DWORD *)v82 + 10);
              v86 = *((double *)v82 + 1);
              v87 = v85 > *((_DWORD *)v82 + 4);
              if (a5.n128_f64[0] != v86)
                v87 = a5.n128_f64[0] < v86;
              if (v87)
              {
                v88 = *v84;
                v89 = *((_DWORD *)v82 + 11);
                v90 = v81;
                do
                {
                  v91 = (_QWORD *)(v9 + v90);
                  v92 = *(_QWORD *)(v9 + v90 + 8);
                  v91[3] = *(_QWORD *)(v9 + v90);
                  v91[4] = v92;
                  *(_QWORD *)((char *)v91 + 37) = *(_QWORD *)(v9 + v90 + 13);
                  if (!v90)
                  {
                    v83 = v9;
                    goto LABEL_95;
                  }
                  v93 = *((double *)v91 - 2);
                  v94 = v85 > *((_DWORD *)v91 - 2);
                  if (a5.n128_f64[0] != v93)
                    v94 = a5.n128_f64[0] < v93;
                  v90 -= 24;
                }
                while (v94);
                v83 = v9 + v90 + 24;
LABEL_95:
                *(_QWORD *)v83 = v88;
                v91[1] = a5.n128_u64[0];
                *(_DWORD *)(v83 + 16) = v85;
                *(_BYTE *)(v83 + 20) = v89;
              }
              v78 = v84 + 3;
              v81 += 24;
              v82 = v84;
            }
            while (v84 + 3 != (_QWORD *)a2);
          }
        }
        else if (!v80)
        {
          v143 = (_BYTE *)(v9 + 44);
          do
          {
            v144 = v78;
            a5.n128_u64[0] = *(_QWORD *)(a1 + 32);
            v145 = *(_DWORD *)(a1 + 40);
            v146 = *(double *)(a1 + 8);
            v147 = v145 > *(_DWORD *)(a1 + 16);
            if (a5.n128_f64[0] != v146)
              v147 = a5.n128_f64[0] < v146;
            if (v147)
            {
              v148 = *v144;
              v149 = *(_DWORD *)(a1 + 44);
              v150 = v143;
              do
              {
                *(_QWORD *)(v150 - 20) = *(_QWORD *)(v150 - 44);
                *(_QWORD *)(v150 - 12) = *(_QWORD *)(v150 - 36);
                *(_QWORD *)(v150 - 7) = *(_QWORD *)(v150 - 31);
                v151 = *(double *)(v150 - 60);
                v152 = v145 > *((_DWORD *)v150 - 13);
                if (a5.n128_f64[0] != v151)
                  v152 = a5.n128_f64[0] < v151;
                v150 -= 24;
              }
              while (v152);
              *(_QWORD *)(v150 - 20) = v148;
              *(_QWORD *)(v150 - 12) = a5.n128_u64[0];
              *((_DWORD *)v150 - 1) = v145;
              *v150 = v149;
            }
            v78 = v144 + 3;
            v143 += 24;
            a1 = (uint64_t)v144;
          }
          while (v144 + 3 != (uint64_t *)a2);
        }
        return a5.n128_f64[0];
    }
  }
}

  v11 = a2 - 1;
  v88 = a2 - 2;
  v12 = a2 - 3;
  v13 = a1;
  while (2)
  {
    a1 = v13;
    v14 = (char *)a2 - (char *)v13;
    v15 = a2 - v13;
    switch(v15)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v64 = a2[-1].n128_i64[0];
        v63 = a2 - 1;
        if (v64 < (int64_t)v13->n128_u64[0])
          goto LABEL_100;
        return result;
      case 3uLL:
        v65 = v13 + 1;
        v66 = v13[1].n128_i64[0];
        v68 = a2[-1].n128_u64[0];
        v63 = a2 - 1;
        v67 = v68;
        if (v66 >= (int64_t)v13->n128_u64[0])
        {
          if (v67 < v66)
          {
            result = *v65;
            *v65 = *v63;
            *v63 = result;
            goto LABEL_144;
          }
        }
        else if (v67 >= v66)
        {
          v111 = *v13;
          *v13 = *v65;
          result = v111;
          *v65 = v111;
          if ((int64_t)v63->n128_u64[0] < (int64_t)v13[1].n128_u64[0])
          {
            result = *v65;
            *v65 = *v63;
            *v63 = result;
          }
        }
        else
        {
LABEL_100:
          v108 = *v13;
          *v13 = *v63;
          result = v108;
          *v63 = v108;
        }
        return result;
      case 4uLL:
        v65 = v13 + 1;
        v69 = v13[1].n128_i64[0];
        v70 = v13 + 2;
        v71 = v13[2].n128_i64[0];
        if (v69 >= (int64_t)v13->n128_u64[0])
        {
          if (v71 < v69)
          {
            result = *v65;
            *v65 = *v70;
            *v70 = result;
            if ((int64_t)v13[1].n128_u64[0] < (int64_t)v13->n128_u64[0])
            {
              v110 = *v13;
              *v13 = *v65;
              result = v110;
              *v65 = v110;
            }
          }
        }
        else
        {
          if (v71 >= v69)
          {
            v112 = *v13;
            *v13 = *v65;
            result = v112;
            *v65 = v112;
            if (v71 >= (int64_t)v13[1].n128_u64[0])
              goto LABEL_141;
            result = *v65;
            *v65 = *v70;
          }
          else
          {
            v109 = *v13;
            *v13 = *v70;
            result = v109;
          }
          *v70 = result;
        }
LABEL_141:
        if ((int64_t)v11->n128_u64[0] < (int64_t)v70->n128_u64[0])
        {
          result = *v70;
          *v70 = *v11;
          *v11 = result;
          if ((int64_t)v70->n128_u64[0] < (int64_t)v65->n128_u64[0])
          {
            result = *v65;
            *v65 = *v70;
            *v70 = result;
LABEL_144:
            if ((int64_t)v13[1].n128_u64[0] < (int64_t)v13->n128_u64[0])
            {
              v113 = *v13;
              *v13 = *v65;
              result = v113;
              *v65 = v113;
            }
          }
        }
        return result;
      case 5uLL:
        result.n128_u64[0] = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::ClosedInterval *>(v13, v13 + 1, (uint64_t *)&v13[2], (__n128 *)v13[3].n128_u64, (__n128 *)a2[-1].n128_u64, result).n128_u64[0];
        return result;
      default:
        if (v14 > 383)
        {
          if (!a4)
          {
            if (v13 != a2)
              std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::ClosedInterval *,operations_research::ClosedInterval *>((char *)v13, (char *)a2, (char *)a2);
            return result;
          }
          v16 = v15 >> 1;
          v17 = &v13[v15 >> 1];
          v18 = v11->n128_u64[0];
          if ((unint64_t)v14 < 0x801)
          {
            v20 = v13->n128_u64[0];
            if ((int64_t)v13->n128_u64[0] >= (int64_t)v17->n128_u64[0])
            {
              if (v18 < v20)
              {
                v93 = *v13;
                *v13 = *v11;
                result = v93;
                *v11 = v93;
                if ((int64_t)v13->n128_u64[0] < (int64_t)v17->n128_u64[0])
                {
                  v94 = *v17;
                  *v17 = *v13;
                  result = v94;
                  *v13 = v94;
                  --a4;
                  v21 = v13->n128_u64[0];
                  if ((a5 & 1) != 0)
                    goto LABEL_55;
                  goto LABEL_54;
                }
              }
              goto LABEL_31;
            }
            if (v18 >= v20)
            {
              v97 = *v17;
              *v17 = *v13;
              result = v97;
              *v13 = v97;
              if ((int64_t)v11->n128_u64[0] >= (int64_t)v13->n128_u64[0])
                goto LABEL_31;
              v90 = *v13;
              *v13 = *v11;
            }
            else
            {
              v90 = *v17;
              *v17 = *v11;
            }
            result = v90;
            *v11 = v90;
LABEL_31:
            --a4;
            v21 = v13->n128_u64[0];
            if ((a5 & 1) != 0)
              goto LABEL_55;
            goto LABEL_54;
          }
          v19 = v17->n128_u64[0];
          if ((int64_t)v17->n128_u64[0] >= (int64_t)v13->n128_u64[0])
          {
            if (v18 < v19)
            {
              v91 = *v17;
              *v17 = *v11;
              *v11 = v91;
              if ((int64_t)v17->n128_u64[0] < (int64_t)v13->n128_u64[0])
              {
                v92 = *v13;
                *v13 = *v17;
                *v17 = v92;
              }
            }
          }
          else
          {
            if (v18 >= v19)
            {
              v95 = *v13;
              *v13 = *v17;
              *v17 = v95;
              if ((int64_t)v11->n128_u64[0] >= (int64_t)v17->n128_u64[0])
                goto LABEL_22;
              v89 = *v17;
              *v17 = *v11;
            }
            else
            {
              v89 = *v13;
              *v13 = *v11;
            }
            *v11 = v89;
          }
LABEL_22:
          v22 = v13 + 1;
          v23 = &v13[v16];
          v26 = v23[-1].n128_i64[0];
          v24 = v23 - 1;
          v25 = v26;
          v27 = v88->n128_u64[0];
          if (v26 >= (int64_t)v13[1].n128_u64[0])
          {
            if (v27 < v25)
            {
              v96 = *v24;
              *v24 = *v88;
              *v88 = v96;
              if ((int64_t)v24->n128_u64[0] < (int64_t)v22->n128_u64[0])
              {
                v29 = *v22;
                *v22 = *v24;
                *v24 = v29;
              }
            }
          }
          else if (v27 >= v25)
          {
            v30 = *v22;
            *v22 = *v24;
            *v24 = v30;
            if ((int64_t)v88->n128_u64[0] < (int64_t)v24->n128_u64[0])
            {
              v98 = *v24;
              *v24 = *v88;
              *v88 = v98;
            }
          }
          else
          {
            v28 = *v22;
            *v22 = *v88;
            *v88 = v28;
          }
          v31 = v13 + 2;
          v32 = &v13[v16];
          v35 = v32[1].n128_i64[0];
          v33 = v32 + 1;
          v34 = v35;
          v36 = v12->n128_u64[0];
          if (v35 >= (int64_t)v13[2].n128_u64[0])
          {
            if (v36 < v34)
            {
              v99 = *v33;
              *v33 = *v12;
              *v12 = v99;
              if ((int64_t)v33->n128_u64[0] < (int64_t)v31->n128_u64[0])
              {
                v38 = *v31;
                *v31 = *v33;
                *v33 = v38;
              }
            }
          }
          else
          {
            if (v36 >= v34)
            {
              v39 = *v31;
              *v31 = *v33;
              *v33 = v39;
              if ((int64_t)v12->n128_u64[0] >= (int64_t)v33->n128_u64[0])
                goto LABEL_44;
              v100 = *v33;
              *v33 = *v12;
              v37 = v100;
            }
            else
            {
              v37 = *v31;
              *v31 = *v12;
            }
            *v12 = v37;
          }
LABEL_44:
          v40 = v17->n128_u64[0];
          v41 = v33->n128_u64[0];
          if ((int64_t)v17->n128_u64[0] >= (int64_t)v24->n128_u64[0])
          {
            if (v41 < v40)
            {
              v102 = *v17;
              *v17 = *v33;
              *v33 = v102;
              if ((int64_t)v17->n128_u64[0] < (int64_t)v24->n128_u64[0])
              {
                v103 = *v24;
                *v24 = *v17;
                *v17 = v103;
              }
            }
          }
          else
          {
            if (v41 >= v40)
            {
              v104 = *v24;
              *v24 = *v17;
              *v17 = v104;
              if ((int64_t)v33->n128_u64[0] >= (int64_t)v17->n128_u64[0])
                goto LABEL_53;
              v101 = *v17;
              *v17 = *v33;
            }
            else
            {
              v101 = *v24;
              *v24 = *v33;
            }
            *v33 = v101;
          }
LABEL_53:
          v105 = *v13;
          *v13 = *v17;
          result = v105;
          *v17 = v105;
          --a4;
          v21 = v13->n128_u64[0];
          if ((a5 & 1) != 0)
            goto LABEL_55;
LABEL_54:
          if ((int64_t)v13[-1].n128_u64[0] >= v21)
          {
            if (v21 >= (int64_t)v11->n128_u64[0])
            {
              n128_u64 = (unint64_t)v13[1].n128_u64;
              do
              {
                v13 = (__n128 *)n128_u64;
                if (n128_u64 >= (unint64_t)a2)
                  break;
                n128_u64 += 16;
              }
              while (v21 >= (int64_t)v13->n128_u64[0]);
            }
            else
            {
              do
              {
                v55 = v13[1].n128_i64[0];
                ++v13;
              }
              while (v21 >= v55);
            }
            v57 = a2;
            if (v13 < a2)
            {
              v57 = a2;
              do
              {
                v58 = v57[-1].n128_i64[0];
                --v57;
              }
              while (v21 < v58);
            }
            v59 = a1->n128_u64[1];
            while (v13 < v57)
            {
              v107 = *v13;
              *v13 = *v57;
              result = v107;
              *v57 = v107;
              do
              {
                v60 = v13[1].n128_i64[0];
                ++v13;
              }
              while (v21 >= v60);
              do
              {
                v61 = v57[-1].n128_i64[0];
                --v57;
              }
              while (v21 < v61);
            }
            v62 = v13 - 1;
            if (&v13[-1] != a1)
            {
              result = *v62;
              *a1 = *v62;
            }
            a5 = 0;
            v13[-1].n128_u64[0] = v21;
            v13[-1].n128_u64[1] = v59;
            continue;
          }
LABEL_55:
          v42 = 0;
          v43 = v13->n128_u64[1];
          do
            v44 = v13[++v42].n128_i64[0];
          while (v44 < v21);
          v45 = &v13[v42];
          v46 = a2;
          if (v42 == 1)
          {
            v46 = a2;
            do
            {
              if (v45 >= v46)
                break;
              v48 = v46[-1].n128_i64[0];
              --v46;
            }
            while (v48 >= v21);
          }
          else
          {
            do
            {
              v47 = v46[-1].n128_i64[0];
              --v46;
            }
            while (v47 >= v21);
          }
          v13 = (__n128 *)((char *)v13 + v42 * 16);
          if (v45 < v46)
          {
            v49 = v46;
            do
            {
              v106 = *v13;
              *v13 = *v49;
              result = v106;
              *v49 = v106;
              do
              {
                v50 = v13[1].n128_i64[0];
                ++v13;
              }
              while (v50 < v21);
              do
              {
                v51 = v49[-1].n128_i64[0];
                --v49;
              }
              while (v51 >= v21);
            }
            while (v13 < v49);
          }
          v52 = v13 - 1;
          if (&v13[-1] != a1)
          {
            result = *v52;
            *a1 = *v52;
          }
          v13[-1].n128_u64[0] = v21;
          v13[-1].n128_u64[1] = v43;
          if (v45 < v46)
            goto LABEL_74;
          v53 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::ClosedInterval *>(a1, v13 - 1, result);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::ClosedInterval *>(v13, a2, v54))
          {
            if (v53)
              continue;
LABEL_74:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::ClosedInterval *,false>(a1, &v13[-1], a3, a4, a5 & 1);
            a5 = 0;
            continue;
          }
          a2 = v13 - 1;
          if (v53)
            return result;
          goto LABEL_1;
        }
        v72 = v13 + 1;
        v74 = v13 == a2 || v72 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v74)
          {
            v75 = 0;
            v76 = v13;
            do
            {
              v78 = v72;
              v79 = v76[1].n128_i64[0];
              if (v79 < (int64_t)v76->n128_u64[0])
              {
                v80 = v76[1].n128_i64[1];
                v81 = v75;
                do
                {
                  result = *(__n128 *)((char *)v13 + v81);
                  *(__n128 *)((char *)v13 + v81 + 16) = result;
                  if (!v81)
                  {
                    v77 = v13;
                    goto LABEL_115;
                  }
                  v82 = *(uint64_t *)((char *)v13[-1].n128_i64 + v81);
                  v81 -= 16;
                }
                while (v79 < v82);
                v77 = (__n128 *)((char *)v13 + v81 + 16);
LABEL_115:
                v77->n128_u64[0] = v79;
                v77->n128_u64[1] = v80;
              }
              v72 = v78 + 1;
              v75 += 16;
              v76 = v78;
            }
            while (&v78[1] != a2);
          }
        }
        else if (!v74)
        {
          do
          {
            v83 = v72;
            v84 = a1[1].n128_i64[0];
            if (v84 < (int64_t)a1->n128_u64[0])
            {
              v85 = a1[1].n128_u64[1];
              v86 = v83;
              do
              {
                result = v86[-1];
                *v86 = result;
                v87 = v86[-2].n128_i64[0];
                --v86;
              }
              while (v84 < v87);
              v86->n128_u64[0] = v84;
              v86->n128_u64[1] = v85;
            }
            v72 = v83 + 1;
            a1 = v83;
          }
          while (&v83[1] != a2);
        }
        return result;
    }
  }
}

  v204 = a2;
  v207 = &a2[-1].i64[1];
  v199 = &a2[-2].i64[1];
  i64 = a2[-1].i64;
  while (2)
  {
    v5 = v204;
    v6 = (char *)v204 - (char *)a1;
    v7 = ((char *)v204 - (char *)a1) >> 3;
    switch(v7)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (operations_research::StatsGroup::StatString(void)const::$_0::operator()(v204[-1].i64[1], a1->i64[0]))
        {
          v103 = a1->i64[0];
          a1->i64[0] = v204[-1].i64[1];
          v204[-1].i64[1] = v103;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::StatsGroup::StatString(void)::$_0 &,operations_research::Stat **>(a1->i64, &a1->i64[1], v207);
        return;
      case 4:
        v104 = a1[1].i64;
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::StatsGroup::StatString(void)::$_0 &,operations_research::Stat **>(a1->i64, &a1->i64[1], a1[1].i64);
        if (operations_research::StatsGroup::StatString(void)const::$_0::operator()(v204[-1].i64[1], a1[1].i64[0]))
        {
          v105 = *v104;
          *v104 = v204[-1].i64[1];
          v204[-1].i64[1] = v105;
          if (operations_research::StatsGroup::StatString(void)const::$_0::operator()(*v104, a1->i64[1]))
          {
            v107 = a1->i64[1];
            v106 = a1[1].i64[0];
            v108 = a1->i64[0];
            a1->i64[1] = v106;
            a1[1].i64[0] = v107;
            if (operations_research::StatsGroup::StatString(void)const::$_0::operator()(v106, v108))
              *a1 = vextq_s8(*a1, *a1, 8uLL);
          }
        }
        return;
      case 5:
        std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::StatsGroup::StatString(void)::$_0 &,operations_research::Stat **,0>(a1->i64, &a1->i64[1], a1[1].i64, &a1[1].i64[1], v207);
        return;
      default:
        v215 = a1;
        if (v6 <= 191)
        {
          if ((a4 & 1) != 0)
          {
            if (a1 == v204)
              return;
            v109 = (int8x16_t *)&a1->u64[1];
            if (&a1->u64[1] == (unint64_t *)v204)
              return;
            v110 = 0;
LABEL_204:
            v113 = a1->i64[0];
            v112 = a1->i64[1];
            a1 = v109;
            if (!operations_research::StatsGroup::StatString(void)const::$_0::operator()(v112, v113))
              goto LABEL_203;
            v212 = a1;
            v114 = a1->i64[0];
            v115 = v110;
            while (1)
            {
              *(uint64_t *)((char *)&v215->i64[1] + v115) = *(uint64_t *)((char *)v215->i64 + v115);
              if (!v115)
              {
                v111 = (uint64_t *)v215;
                goto LABEL_202;
              }
              v117 = *(uint64_t *)((char *)&v215->i64[-1] + v115);
              if (*(char *)(v114 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(&v218, *(const std::string::value_type **)(v114 + 8), *(_QWORD *)(v114 + 16));
                if ((*(char *)(v117 + 31) & 0x80000000) == 0)
                {
LABEL_212:
                  v119 = *(_OWORD *)(v117 + 8);
                  v217.__r_.__value_.__r.__words[2] = *(_QWORD *)(v117 + 24);
                  *(_OWORD *)&v217.__r_.__value_.__l.__data_ = v119;
                  goto LABEL_215;
                }
              }
              else
              {
                v118 = *(_OWORD *)(v114 + 8);
                v218.__r_.__value_.__r.__words[2] = *(_QWORD *)(v114 + 24);
                *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v118;
                if ((*(char *)(v117 + 31) & 0x80000000) == 0)
                  goto LABEL_212;
              }
              std::string::__init_copy_ctor_external(&v217, *(const std::string::value_type **)(v117 + 8), *(_QWORD *)(v117 + 16));
LABEL_215:
              v120 = SHIBYTE(v217.__r_.__value_.__r.__words[2]);
              v121 = (void *)v217.__r_.__value_.__r.__words[0];
              v122 = HIBYTE(v218.__r_.__value_.__r.__words[2]);
              if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(v218.__r_.__value_.__r.__words[2]);
              else
                size = v218.__r_.__value_.__l.__size_;
              if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v124 = &v218;
              else
                v124 = (std::string *)v218.__r_.__value_.__r.__words[0];
              if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v125 = HIBYTE(v217.__r_.__value_.__r.__words[2]);
              else
                v125 = v217.__r_.__value_.__l.__size_;
              if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v126 = &v217;
              else
                v126 = (std::string *)v217.__r_.__value_.__r.__words[0];
              if (v125 >= size)
                v127 = size;
              else
                v127 = v125;
              v128 = memcmp(v124, v126, v127);
              if (v120 < 0)
              {
                operator delete(v121);
                if ((*((_BYTE *)&v218.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_234:
                  operator delete(v218.__r_.__value_.__l.__data_);
              }
              else if (v122 < 0)
              {
                goto LABEL_234;
              }
              v116 = size < v125;
              if (v128)
                v116 = v128 < 0;
              v115 -= 8;
              if (!v116)
              {
                v111 = (uint64_t *)((char *)&v215->i64[1] + v115);
LABEL_202:
                *v111 = v114;
                v5 = v204;
                a1 = v212;
LABEL_203:
                v109 = (int8x16_t *)&a1->u64[1];
                v110 += 8;
                if (&a1->u64[1] == (unint64_t *)v5)
                  return;
                goto LABEL_204;
              }
            }
          }
          if (a1 == v204)
            return;
          v181 = (int8x16_t *)&a1->u64[1];
          if (&a1->u64[1] == (unint64_t *)v204)
            return;
LABEL_327:
          v183 = a1->i64[0];
          v182 = a1->i64[1];
          a1 = v181;
          if (!operations_research::StatsGroup::StatString(void)const::$_0::operator()(v182, v183))
            goto LABEL_326;
          v184 = a1->i64[0];
          v185 = a1->i64[0] + 8;
          v216 = a1;
          while (1)
          {
            v187 = a1[-1].i64[0];
            a1->i64[0] = a1[-1].i64[1];
            if (*(char *)(v184 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(&v218, *(const std::string::value_type **)(v184 + 8), *(_QWORD *)(v184 + 16));
              if ((*(char *)(v187 + 31) & 0x80000000) == 0)
              {
LABEL_334:
                v189 = *(_OWORD *)(v187 + 8);
                v217.__r_.__value_.__r.__words[2] = *(_QWORD *)(v187 + 24);
                *(_OWORD *)&v217.__r_.__value_.__l.__data_ = v189;
                goto LABEL_337;
              }
            }
            else
            {
              v188 = *(_OWORD *)v185;
              v218.__r_.__value_.__r.__words[2] = *(_QWORD *)(v185 + 16);
              *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v188;
              if ((*(char *)(v187 + 31) & 0x80000000) == 0)
                goto LABEL_334;
            }
            std::string::__init_copy_ctor_external(&v217, *(const std::string::value_type **)(v187 + 8), *(_QWORD *)(v187 + 16));
LABEL_337:
            v190 = SHIBYTE(v217.__r_.__value_.__r.__words[2]);
            v191 = (void *)v217.__r_.__value_.__r.__words[0];
            v192 = HIBYTE(v218.__r_.__value_.__r.__words[2]);
            if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v193 = HIBYTE(v218.__r_.__value_.__r.__words[2]);
            else
              v193 = v218.__r_.__value_.__l.__size_;
            if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v194 = &v218;
            else
              v194 = (std::string *)v218.__r_.__value_.__r.__words[0];
            if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v195 = HIBYTE(v217.__r_.__value_.__r.__words[2]);
            else
              v195 = v217.__r_.__value_.__l.__size_;
            if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v196 = &v217;
            else
              v196 = (std::string *)v217.__r_.__value_.__r.__words[0];
            if (v195 >= v193)
              v197 = v193;
            else
              v197 = v195;
            v198 = memcmp(v194, v196, v197);
            if (v190 < 0)
            {
              operator delete(v191);
              if ((*((_BYTE *)&v218.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_356:
                operator delete(v218.__r_.__value_.__l.__data_);
            }
            else if (v192 < 0)
            {
              goto LABEL_356;
            }
            v186 = v193 < v195;
            if (v198)
              v186 = v198 < 0;
            a1 = (int8x16_t *)((char *)a1 - 8);
            if (!v186)
            {
              a1->i64[0] = v184;
              v5 = v204;
              a1 = v216;
LABEL_326:
              v181 = (int8x16_t *)&a1->u64[1];
              if (&a1->u64[1] == (unint64_t *)v5)
                return;
              goto LABEL_327;
            }
          }
        }
        if (!a3)
        {
          if (a1 == v204)
            return;
          v129 = (unint64_t)(v7 - 2) >> 1;
          v130 = v129;
          do
          {
            v131 = v130;
            if (v129 >= v130)
            {
              v132 = (2 * v130) | 1;
              v133 = &v215->i64[v132];
              if (2 * v130 + 2 < v7
                && operations_research::StatsGroup::StatString(void)const::$_0::operator()(*v133, v133[1]))
              {
                ++v133;
                v132 = 2 * v131 + 2;
              }
              v134 = &v215->i64[v131];
              if (!operations_research::StatsGroup::StatString(void)const::$_0::operator()(*v133, *v134))
              {
                v135 = *v134;
                do
                {
                  v136 = v133;
                  *v134 = *v133;
                  if (v129 < v132)
                    break;
                  v137 = (2 * v132) | 1;
                  v133 = &v215->i64[v137];
                  v138 = 2 * v132 + 2;
                  if (v138 < v7
                    && operations_research::StatsGroup::StatString(void)const::$_0::operator()(*v133, v133[1]))
                  {
                    ++v133;
                    v137 = v138;
                  }
                  v134 = v136;
                  v132 = v137;
                }
                while (!operations_research::StatsGroup::StatString(void)const::$_0::operator()(*v133, v135));
                *v136 = v135;
              }
            }
            v130 = v131 - 1;
          }
          while (v131);
          v139 = (unint64_t)v6 >> 3;
          v140 = v204;
          v141 = (uint64_t *)v215;
          while (1)
          {
            v205 = v140;
            v143 = 0;
            v203 = *v141;
            v144 = (unint64_t)(v139 - 2) >> 1;
            v208 = v144;
            v210 = v139;
            do
            {
              v146 = &v141[v143 + 1];
              v147 = (2 * v143) | 1;
              v148 = 2 * v143 + 2;
              if (v148 >= v139)
                goto LABEL_261;
              v149 = *v146;
              v150 = v146[1];
              if (*(char *)(*v146 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(&v218, *(const std::string::value_type **)(v149 + 8), *(_QWORD *)(v149 + 16));
                v213 = v146 + 1;
                if ((*(char *)(v150 + 31) & 0x80000000) == 0)
                {
LABEL_265:
                  v152 = *(_OWORD *)(v150 + 8);
                  v217.__r_.__value_.__r.__words[2] = *(_QWORD *)(v150 + 24);
                  *(_OWORD *)&v217.__r_.__value_.__l.__data_ = v152;
                  goto LABEL_268;
                }
              }
              else
              {
                v151 = *(_OWORD *)(v149 + 8);
                v218.__r_.__value_.__r.__words[2] = *(_QWORD *)(v149 + 24);
                *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v151;
                v213 = v146 + 1;
                if ((*(char *)(v150 + 31) & 0x80000000) == 0)
                  goto LABEL_265;
              }
              std::string::__init_copy_ctor_external(&v217, *(const std::string::value_type **)(v150 + 8), *(_QWORD *)(v150 + 16));
LABEL_268:
              v153 = SHIBYTE(v217.__r_.__value_.__r.__words[2]);
              v154 = (void *)v217.__r_.__value_.__r.__words[0];
              v155 = HIBYTE(v218.__r_.__value_.__r.__words[2]);
              if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v156 = HIBYTE(v218.__r_.__value_.__r.__words[2]);
              else
                v156 = v218.__r_.__value_.__l.__size_;
              if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v157 = &v218;
              else
                v157 = (std::string *)v218.__r_.__value_.__r.__words[0];
              if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v158 = HIBYTE(v217.__r_.__value_.__r.__words[2]);
              else
                v158 = v217.__r_.__value_.__l.__size_;
              if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v159 = &v217;
              else
                v159 = (std::string *)v217.__r_.__value_.__r.__words[0];
              if (v158 >= v156)
                v160 = v156;
              else
                v160 = v158;
              v161 = memcmp(v157, v159, v160);
              if (v153 < 0)
              {
                operator delete(v154);
                if ((*((_BYTE *)&v218.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_287:
                  operator delete(v218.__r_.__value_.__l.__data_);
              }
              else if (v155 < 0)
              {
                goto LABEL_287;
              }
              v145 = v156 < v158;
              if (v161)
                v145 = v161 < 0;
              v139 = v210;
              if (v145)
              {
                v146 = v213;
                v147 = v148;
              }
              v144 = v208;
LABEL_261:
              *v141 = *v146;
              v141 = v146;
              v143 = v147;
            }
            while (v147 <= v144);
            v162 = &v205[-1].i64[1];
            v31 = v146 == (uint64_t *)&v205[-1].u64[1];
            v206 = (int8x16_t *)((char *)v205 - 8);
            if (!v31)
            {
              *v146 = *v162;
              *v162 = v203;
              v163 = (char *)v146 - (char *)v215 + 8;
              if (v163 < 9)
                goto LABEL_254;
              v164 = (((unint64_t)v163 >> 3) - 2) >> 1;
              v165 = &v215->i64[v164];
              if (!operations_research::StatsGroup::StatString(void)const::$_0::operator()(*v165, *v146))
                goto LABEL_254;
              v166 = *v146;
              v214 = *v146 + 8;
              while (2)
              {
                v168 = v165;
                *v146 = *v165;
                if (!v164)
                {
LABEL_321:
                  *v168 = v166;
                  v139 = v210;
                  goto LABEL_254;
                }
                v164 = (v164 - 1) >> 1;
                v165 = &v215->i64[v164];
                v169 = *v165;
                if (*(char *)(*v165 + 31) < 0)
                {
                  std::string::__init_copy_ctor_external(&v218, *(const std::string::value_type **)(v169 + 8), *(_QWORD *)(v169 + 16));
                  if (*(char *)(v166 + 31) < 0)
                    goto LABEL_300;
LABEL_298:
                  v171 = *(_OWORD *)v214;
                  v217.__r_.__value_.__r.__words[2] = *(_QWORD *)(v214 + 16);
                  *(_OWORD *)&v217.__r_.__value_.__l.__data_ = v171;
                }
                else
                {
                  v170 = *(_OWORD *)(v169 + 8);
                  v218.__r_.__value_.__r.__words[2] = *(_QWORD *)(v169 + 24);
                  *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v170;
                  if ((*(char *)(v166 + 31) & 0x80000000) == 0)
                    goto LABEL_298;
LABEL_300:
                  std::string::__init_copy_ctor_external(&v217, *(const std::string::value_type **)(v166 + 8), *(_QWORD *)(v166 + 16));
                }
                v172 = SHIBYTE(v217.__r_.__value_.__r.__words[2]);
                v173 = (void *)v217.__r_.__value_.__r.__words[0];
                v174 = HIBYTE(v218.__r_.__value_.__r.__words[2]);
                if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v175 = HIBYTE(v218.__r_.__value_.__r.__words[2]);
                else
                  v175 = v218.__r_.__value_.__l.__size_;
                if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v176 = &v218;
                else
                  v176 = (std::string *)v218.__r_.__value_.__r.__words[0];
                if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v177 = HIBYTE(v217.__r_.__value_.__r.__words[2]);
                else
                  v177 = v217.__r_.__value_.__l.__size_;
                if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v178 = &v217;
                else
                  v178 = (std::string *)v217.__r_.__value_.__r.__words[0];
                if (v177 >= v175)
                  v179 = v175;
                else
                  v179 = v177;
                v180 = memcmp(v176, v178, v179);
                if (v172 < 0)
                {
                  operator delete(v173);
                  if ((*((_BYTE *)&v218.__r_.__value_.__s + 23) & 0x80) != 0)
                    goto LABEL_320;
                }
                else if (v174 < 0)
                {
LABEL_320:
                  operator delete(v218.__r_.__value_.__l.__data_);
                }
                v167 = v175 < v177;
                if (v180)
                  v167 = v180 < 0;
                v146 = v168;
                if (!v167)
                  goto LABEL_321;
                continue;
              }
            }
            *v146 = v203;
LABEL_254:
            v142 = v139-- <= 2;
            v140 = v206;
            v141 = (uint64_t *)v215;
            if (v142)
              return;
          }
        }
        v8 = (unint64_t)v7 >> 1;
        v9 = (uint64_t *)a1;
        v10 = &a1->i64[(unint64_t)v7 >> 1];
        if ((unint64_t)v6 < 0x401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::StatsGroup::StatString(void)::$_0 &,operations_research::Stat **>(v10, v9, v207);
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_10;
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::StatsGroup::StatString(void)::$_0 &,operations_research::Stat **>(v9, v10, v207);
          v11 = v8;
          v12 = &v9[v8];
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::StatsGroup::StatString(void)::$_0 &,operations_research::Stat **>(v9 + 1, v12 - 1, i64);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::StatsGroup::StatString(void)::$_0 &,operations_research::Stat **>(v9 + 2, &v9[v11 + 1], v199);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::StatsGroup::StatString(void)::$_0 &,operations_research::Stat **>(v12 - 1, v10, &v9[v11 + 1]);
          v13 = *v9;
          *v9 = *v12;
          *v12 = v13;
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_10;
        }
        if (!operations_research::StatsGroup::StatString(void)const::$_0::operator()(*(v9 - 1), *v9))
        {
          v67 = *v9;
          if (operations_research::StatsGroup::StatString(void)const::$_0::operator()(*v9, *v207))
          {
            a1 = (int8x16_t *)v9;
            do
            {
              v68 = a1->i64[1];
              a1 = (int8x16_t *)((char *)a1 + 8);
            }
            while (!operations_research::StatsGroup::StatString(void)const::$_0::operator()(v67, v68));
          }
          else
          {
            v69 = (int8x16_t *)(v9 + 1);
            do
            {
              a1 = v69;
              if (v69 >= v204)
                break;
              v69 = (int8x16_t *)((char *)v69 + 8);
            }
            while (!operations_research::StatsGroup::StatString(void)const::$_0::operator()(v67, a1->i64[0]));
          }
          v70 = v204;
          if (a1 < v204)
          {
            v70 = v204;
            do
            {
              v71 = v70[-1].i64[1];
              v70 = (int8x16_t *)((char *)v70 - 8);
            }
            while (operations_research::StatsGroup::StatString(void)const::$_0::operator()(v67, v71));
          }
          if (a1 < v70)
          {
            v72 = (__int128 *)(v67 + 8);
            do
            {
              v73 = a1->i64[0];
              a1->i64[0] = v70->i64[0];
              v70->i64[0] = v73;
              do
              {
                v76 = a1->i64[1];
                a1 = (int8x16_t *)((char *)a1 + 8);
                v75 = v76;
                if (*(char *)(v67 + 31) < 0)
                {
                  std::string::__init_copy_ctor_external(&v218, *(const std::string::value_type **)(v67 + 8), *(_QWORD *)(v67 + 16));
                  if ((*(char *)(v75 + 31) & 0x80000000) == 0)
                  {
LABEL_132:
                    v78 = *(_OWORD *)(v75 + 8);
                    v217.__r_.__value_.__r.__words[2] = *(_QWORD *)(v75 + 24);
                    *(_OWORD *)&v217.__r_.__value_.__l.__data_ = v78;
                    goto LABEL_135;
                  }
                }
                else
                {
                  v77 = *v72;
                  v218.__r_.__value_.__r.__words[2] = *(_QWORD *)(v67 + 24);
                  *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v77;
                  if ((*(char *)(v75 + 31) & 0x80000000) == 0)
                    goto LABEL_132;
                }
                std::string::__init_copy_ctor_external(&v217, *(const std::string::value_type **)(v75 + 8), *(_QWORD *)(v75 + 16));
LABEL_135:
                v79 = SHIBYTE(v217.__r_.__value_.__r.__words[2]);
                v80 = (void *)v217.__r_.__value_.__r.__words[0];
                v81 = HIBYTE(v218.__r_.__value_.__r.__words[2]);
                if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v82 = HIBYTE(v218.__r_.__value_.__r.__words[2]);
                else
                  v82 = v218.__r_.__value_.__l.__size_;
                if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v83 = &v218;
                else
                  v83 = (std::string *)v218.__r_.__value_.__r.__words[0];
                if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v84 = HIBYTE(v217.__r_.__value_.__r.__words[2]);
                else
                  v84 = v217.__r_.__value_.__l.__size_;
                if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v85 = &v217;
                else
                  v85 = (std::string *)v217.__r_.__value_.__r.__words[0];
                if (v84 >= v82)
                  v86 = v82;
                else
                  v86 = v84;
                v87 = memcmp(v83, v85, v86);
                if (v79 < 0)
                {
                  operator delete(v80);
                  if ((*((_BYTE *)&v218.__r_.__value_.__s + 23) & 0x80) == 0)
                    goto LABEL_127;
                }
                else if ((v81 & 0x80) == 0)
                {
                  goto LABEL_127;
                }
                operator delete(v218.__r_.__value_.__l.__data_);
LABEL_127:
                v74 = v82 < v84;
                if (v87)
                  v74 = v87 < 0;
              }
              while (!v74);
              do
              {
                v90 = v70[-1].i64[1];
                v70 = (int8x16_t *)((char *)v70 - 8);
                v89 = v90;
                if (*(char *)(v67 + 31) < 0)
                {
                  std::string::__init_copy_ctor_external(&v218, *(const std::string::value_type **)(v67 + 8), *(_QWORD *)(v67 + 16));
                  if ((*(char *)(v89 + 31) & 0x80000000) == 0)
                  {
LABEL_160:
                    v92 = *(_OWORD *)(v89 + 8);
                    v217.__r_.__value_.__r.__words[2] = *(_QWORD *)(v89 + 24);
                    *(_OWORD *)&v217.__r_.__value_.__l.__data_ = v92;
                    goto LABEL_163;
                  }
                }
                else
                {
                  v91 = *v72;
                  v218.__r_.__value_.__r.__words[2] = *(_QWORD *)(v67 + 24);
                  *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v91;
                  if ((*(char *)(v89 + 31) & 0x80000000) == 0)
                    goto LABEL_160;
                }
                std::string::__init_copy_ctor_external(&v217, *(const std::string::value_type **)(v89 + 8), *(_QWORD *)(v89 + 16));
LABEL_163:
                v93 = SHIBYTE(v217.__r_.__value_.__r.__words[2]);
                v94 = (void *)v217.__r_.__value_.__r.__words[0];
                v95 = HIBYTE(v218.__r_.__value_.__r.__words[2]);
                if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v96 = HIBYTE(v218.__r_.__value_.__r.__words[2]);
                else
                  v96 = v218.__r_.__value_.__l.__size_;
                if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v97 = &v218;
                else
                  v97 = (std::string *)v218.__r_.__value_.__r.__words[0];
                if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v98 = HIBYTE(v217.__r_.__value_.__r.__words[2]);
                else
                  v98 = v217.__r_.__value_.__l.__size_;
                if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v99 = &v217;
                else
                  v99 = (std::string *)v217.__r_.__value_.__r.__words[0];
                if (v98 >= v96)
                  v100 = v96;
                else
                  v100 = v98;
                v101 = memcmp(v97, v99, v100);
                if (v93 < 0)
                {
                  operator delete(v94);
                  if ((*((_BYTE *)&v218.__r_.__value_.__s + 23) & 0x80) == 0)
                    goto LABEL_155;
                }
                else if ((v95 & 0x80) == 0)
                {
                  goto LABEL_155;
                }
                operator delete(v218.__r_.__value_.__l.__data_);
LABEL_155:
                v88 = v96 < v98;
                if (v101)
                  v88 = v101 < 0;
              }
              while (v88);
            }
            while (a1 < v70);
          }
          v102 = &a1[-1].i64[1];
          if (&a1[-1].u64[1] != (unint64_t *)v215)
            v215->i64[0] = *v102;
          a4 = 0;
          *v102 = v67;
          continue;
        }
LABEL_10:
        v14 = 0;
        v15 = *v9;
        v16 = *v9 + 8;
        do
        {
          v18 = v215->i64[v14 + 1];
          if (*(char *)(v18 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v218, *(const std::string::value_type **)(v18 + 8), *(_QWORD *)(v18 + 16));
            if ((*(char *)(v15 + 31) & 0x80000000) == 0)
            {
LABEL_16:
              v20 = *(_OWORD *)v16;
              v217.__r_.__value_.__r.__words[2] = *(_QWORD *)(v16 + 16);
              *(_OWORD *)&v217.__r_.__value_.__l.__data_ = v20;
              goto LABEL_19;
            }
          }
          else
          {
            v19 = *(_OWORD *)(v18 + 8);
            v218.__r_.__value_.__r.__words[2] = *(_QWORD *)(v18 + 24);
            *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v19;
            if ((*(char *)(v15 + 31) & 0x80000000) == 0)
              goto LABEL_16;
          }
          std::string::__init_copy_ctor_external(&v217, *(const std::string::value_type **)(v15 + 8), *(_QWORD *)(v15 + 16));
LABEL_19:
          v21 = SHIBYTE(v217.__r_.__value_.__r.__words[2]);
          v22 = (void *)v217.__r_.__value_.__r.__words[0];
          v23 = HIBYTE(v218.__r_.__value_.__r.__words[2]);
          if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v24 = HIBYTE(v218.__r_.__value_.__r.__words[2]);
          else
            v24 = v218.__r_.__value_.__l.__size_;
          if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v25 = &v218;
          else
            v25 = (std::string *)v218.__r_.__value_.__r.__words[0];
          if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v26 = HIBYTE(v217.__r_.__value_.__r.__words[2]);
          else
            v26 = v217.__r_.__value_.__l.__size_;
          if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v27 = &v217;
          else
            v27 = (std::string *)v217.__r_.__value_.__r.__words[0];
          if (v26 >= v24)
            v28 = v24;
          else
            v28 = v26;
          v29 = memcmp(v25, v27, v28);
          if (v21 < 0)
          {
            operator delete(v22);
            if ((*((_BYTE *)&v218.__r_.__value_.__s + 23) & 0x80) == 0)
              goto LABEL_11;
          }
          else if ((v23 & 0x80) == 0)
          {
            goto LABEL_11;
          }
          operator delete(v218.__r_.__value_.__l.__data_);
LABEL_11:
          v17 = v24 < v26;
          if (v29)
            v17 = v29 < 0;
          ++v14;
        }
        while (v17);
        v30 = &v215->i64[v14];
        v31 = v14 == 1;
        v32 = (uint64_t *)v204;
        if (v31)
        {
          v32 = (uint64_t *)v204;
          do
          {
            if (v30 >= v32)
              break;
            v34 = *--v32;
          }
          while (!operations_research::StatsGroup::StatString(void)const::$_0::operator()(v34, v15));
        }
        else
        {
          do
            v33 = *--v32;
          while (!operations_research::StatsGroup::StatString(void)const::$_0::operator()(v33, v15));
        }
        if (v30 >= v32)
        {
          v64 = (int8x16_t *)(v30 - 1);
          v65 = (uint64_t *)v215;
          if (v30 - 1 == (uint64_t *)v215)
            goto LABEL_107;
LABEL_106:
          *v65 = v64->i64[0];
          goto LABEL_107;
        }
        v201 = v32;
        v202 = v30;
        while (2)
        {
          v35 = *v30;
          *v30 = *v32;
          *v32 = v35;
          while (2)
          {
            v38 = v30[1];
            ++v30;
            v37 = v38;
            if (*(char *)(v38 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(&v218, *(const std::string::value_type **)(v37 + 8), *(_QWORD *)(v37 + 16));
              if (*(char *)(v15 + 31) < 0)
                goto LABEL_56;
LABEL_54:
              v40 = *(_OWORD *)v16;
              v217.__r_.__value_.__r.__words[2] = *(_QWORD *)(v16 + 16);
              *(_OWORD *)&v217.__r_.__value_.__l.__data_ = v40;
            }
            else
            {
              v39 = *(_OWORD *)(v37 + 8);
              v218.__r_.__value_.__r.__words[2] = *(_QWORD *)(v37 + 24);
              *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v39;
              if ((*(char *)(v15 + 31) & 0x80000000) == 0)
                goto LABEL_54;
LABEL_56:
              std::string::__init_copy_ctor_external(&v217, *(const std::string::value_type **)(v15 + 8), *(_QWORD *)(v15 + 16));
            }
            v41 = SHIBYTE(v217.__r_.__value_.__r.__words[2]);
            v42 = (void *)v217.__r_.__value_.__r.__words[0];
            v43 = HIBYTE(v218.__r_.__value_.__r.__words[2]);
            if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v44 = HIBYTE(v218.__r_.__value_.__r.__words[2]);
            else
              v44 = v218.__r_.__value_.__l.__size_;
            if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v45 = &v218;
            else
              v45 = (std::string *)v218.__r_.__value_.__r.__words[0];
            if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v46 = HIBYTE(v217.__r_.__value_.__r.__words[2]);
            else
              v46 = v217.__r_.__value_.__l.__size_;
            if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v47 = &v217;
            else
              v47 = (std::string *)v217.__r_.__value_.__r.__words[0];
            if (v46 >= v44)
              v48 = v44;
            else
              v48 = v46;
            v49 = memcmp(v45, v47, v48);
            if (v41 < 0)
            {
              operator delete(v42);
              if ((*((_BYTE *)&v218.__r_.__value_.__s + 23) & 0x80) != 0)
                goto LABEL_76;
            }
            else if (v43 < 0)
            {
LABEL_76:
              operator delete(v218.__r_.__value_.__l.__data_);
            }
            v36 = v44 < v46;
            if (v49)
              v36 = v49 < 0;
            if (v36)
              continue;
            break;
          }
          while (2)
          {
            v52 = *--v32;
            v51 = v52;
            if (*(char *)(v52 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(&v218, *(const std::string::value_type **)(v51 + 8), *(_QWORD *)(v51 + 16));
              if (*(char *)(v15 + 31) < 0)
                goto LABEL_84;
LABEL_82:
              v54 = *(_OWORD *)v16;
              v217.__r_.__value_.__r.__words[2] = *(_QWORD *)(v16 + 16);
              *(_OWORD *)&v217.__r_.__value_.__l.__data_ = v54;
            }
            else
            {
              v53 = *(_OWORD *)(v51 + 8);
              v218.__r_.__value_.__r.__words[2] = *(_QWORD *)(v51 + 24);
              *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v53;
              if ((*(char *)(v15 + 31) & 0x80000000) == 0)
                goto LABEL_82;
LABEL_84:
              std::string::__init_copy_ctor_external(&v217, *(const std::string::value_type **)(v15 + 8), *(_QWORD *)(v15 + 16));
            }
            v55 = SHIBYTE(v217.__r_.__value_.__r.__words[2]);
            v56 = (void *)v217.__r_.__value_.__r.__words[0];
            v57 = HIBYTE(v218.__r_.__value_.__r.__words[2]);
            if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v58 = HIBYTE(v218.__r_.__value_.__r.__words[2]);
            else
              v58 = v218.__r_.__value_.__l.__size_;
            if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v59 = &v218;
            else
              v59 = (std::string *)v218.__r_.__value_.__r.__words[0];
            if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v60 = HIBYTE(v217.__r_.__value_.__r.__words[2]);
            else
              v60 = v217.__r_.__value_.__l.__size_;
            if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v61 = &v217;
            else
              v61 = (std::string *)v217.__r_.__value_.__r.__words[0];
            if (v60 >= v58)
              v62 = v58;
            else
              v62 = v60;
            v63 = memcmp(v59, v61, v62);
            if (v55 < 0)
            {
              operator delete(v56);
              if ((*((_BYTE *)&v218.__r_.__value_.__s + 23) & 0x80) != 0)
                goto LABEL_104;
            }
            else if (v57 < 0)
            {
LABEL_104:
              operator delete(v218.__r_.__value_.__l.__data_);
            }
            v50 = v58 < v60;
            if (v63)
              v50 = v63 < 0;
            if (!v50)
              continue;
            break;
          }
          if (v30 < v32)
            continue;
          break;
        }
        v64 = (int8x16_t *)(v30 - 1);
        v32 = v201;
        v30 = v202;
        v65 = (uint64_t *)v215;
        if (v64 != v215)
          goto LABEL_106;
LABEL_107:
        v64->i64[0] = v15;
        if (v30 < v32)
        {
LABEL_110:
          std::__introsort<std::_ClassicAlgPolicy,operations_research::StatsGroup::StatString(void)::$_0 &,operations_research::Stat **,false>(v215, v64, a3, a4 & 1);
          a4 = 0;
          a1 = (int8x16_t *)&v64->u64[1];
          continue;
        }
        v66 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::StatsGroup::StatString(void)::$_0 &,operations_research::Stat **>(v215, v64);
        a1 = (int8x16_t *)&v64->u64[1];
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::StatsGroup::StatString(void)::$_0 &,operations_research::Stat **>((int8x16_t *)&v64->u64[1], v204))
        {
          if (v66)
            continue;
          goto LABEL_110;
        }
        a2 = v64;
        a1 = v215;
        if (!v66)
          goto LABEL_1;
        return;
    }
  }
}

