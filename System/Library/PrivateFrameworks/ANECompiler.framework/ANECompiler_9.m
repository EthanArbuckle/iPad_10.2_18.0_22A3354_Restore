void sub_206D85968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinParseDynamicSliceUnit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "DynamicSliceinfo array cannot be empty.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unable to parse dynamic slice info at index #%ld.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unable to parse dynamic slice axis at index #%ld.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unable to parse dynamic slice size at index #%ld.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Coordinate mode range of MinusOneToOne is not supported\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Coordinate mode and padding mode mismatch is not allowed for Symmetric and Reflective", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Missing coordinate information with respect to offset order", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Missing padding information with respect to offset order", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Missing slice size information with respect to offset order", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Sampling Method is not supported. It is fixed to nearest neighbor", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

uint64_t ANECGetMutableProcedureInfoSize(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  if (a3)
    *a3 = 32;
  if (a2)
    *a2 = 8 * result + 32;
  return result;
}

uint64_t ANECGetMutableOperationInfoSize(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  if (a3)
    *a3 = 8;
  if (a2)
    *a2 = 8 * result + 8;
  return result;
}

uint64_t ANECValidateMutableProcedureInfo(uint64_t a1, unint64_t a2)
{
  _BOOL8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _BOOL8 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BOOL8 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BOOL8 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BOOL8 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  if (!a1)
  {
    v10 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v10)
      ANECValidateMutableProcedureInfo_cold_1(v10, v11, v12, v13, v14, v15, v16, v17);
    return 6;
  }
  if (a2 <= 0x1F)
  {
    v2 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v2)
      return 6;
    goto LABEL_4;
  }
  v19 = *(unsigned int *)(a1 + 24);
  if (8 * v19 + 32 > a2)
  {
    v2 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v2)
      return 6;
LABEL_4:
    ANECValidateMutableProcedureInfo_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
    return 6;
  }
  if (*(_QWORD *)(a1 + 16) > a2)
  {
    v20 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v20)
      ANECValidateMutableProcedureInfo_cold_4(v20, v21, v22, v23, v24, v25, v26, v27);
    return 6;
  }
  if (!*(_DWORD *)(a1 + 24))
    return 0;
  v29 = 0;
  while (1)
  {
    v30 = *(_QWORD *)(a1 + 8 * v29 + 32);
    if (v30 >= 0xFFFFFFFFFFFFFFF8)
    {
      v44 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v44)
        return 6;
LABEL_47:
      ANECValidateMutableProcedureInfo_cold_5(v44, v45, v46, v47, v48, v49, v50, v51);
      return 6;
    }
    if (v30 + 8 > a2)
      break;
    v31 = *(unsigned int *)(a1 + v30 + 4);
    v32 = 8 * v31 + 8;
    v33 = __CFADD__(v30, v32);
    v34 = v30 + v32;
    if (v33)
    {
      v44 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v44)
        return 6;
      goto LABEL_47;
    }
    if (v34 > a2)
    {
      v52 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v52)
        goto LABEL_49;
      return 6;
    }
    if (*(unsigned int *)(a1 + v30) >= v19)
    {
      v68 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v68)
        ANECValidateMutableProcedureInfo_cold_14(v68, v69, v70, v71, v72, v73, v74, v75);
      return 6;
    }
    if ((_DWORD)v31)
    {
      v35 = (unint64_t *)(a1 + 8 + v30);
      v36 = v31;
      while (1)
      {
        v38 = *v35++;
        v37 = v38;
        v39 = v38 + 24;
        if (v38 >= 0xFFFFFFFFFFFFFFE8)
        {
          v44 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (!v44)
            return 6;
          goto LABEL_47;
        }
        if (v39 > a2)
        {
          v52 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (!v52)
            return 6;
          goto LABEL_49;
        }
        v40 = (unint64_t *)(a1 + v37);
        if (*v40 >= v31)
        {
          v60 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v60)
            ANECValidateMutableProcedureInfo_cold_13(v60, v61, v62, v63, v64, v65, v66, v67);
          return 6;
        }
        v42 = v40[1];
        v41 = v40[2];
        v33 = __CFADD__(v42, v41);
        v43 = v42 + v41;
        if (v33)
        {
          v44 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (!v44)
            return 6;
          goto LABEL_47;
        }
        if (v43 > a2)
          break;
        if (!--v36)
          goto LABEL_29;
      }
      v52 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v52)
        return 6;
      goto LABEL_49;
    }
LABEL_29:
    result = 0;
    if (++v29 == v19)
      return result;
  }
  v52 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (!v52)
    return 6;
LABEL_49:
  ANECValidateMutableProcedureInfo_cold_6(v52, v53, v54, v55, v56, v57, v58, v59);
  return 6;
}

_DWORD *ANECGetMutableOperationInfo(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  _DWORD *result;

  if (!*(_DWORD *)(a1 + 24)
    || (v3 = *(_QWORD *)(a1 + 8 * a2 + 32), v3 > *(_QWORD *)(a1 + 16) - 8)
    || (result = (_DWORD *)(a1 + v3), *result != a2))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ANECGetMutableOperationInfo_cold_1(a2);
    return 0;
  }
  return result;
}

uint64_t ANECGetMutableWeightInfo(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (*(_DWORD *)(a2 + 4) <= a3)
    return 0;
  else
    return a1 + *(_QWORD *)(a2 + 8 * a3 + 8);
}

uint64_t ANECGetMutableWeight(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 16);
  *a3 = result + *(_QWORD *)(a2 + 8);
  a3[1] = v3;
  return result;
}

void ANECValidateMutableProcedureInfo_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s: Null aggregate weight buffer", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ANECValidateMutableProcedureInfo_cold_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s: Insufficient weight buffer size to fit ANECMutableProcedureInfo ", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ANECValidateMutableProcedureInfo_cold_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s: Invalid weight buffer size ", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ANECValidateMutableProcedureInfo_cold_5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "pointer overflow in MutableProcedureInfo", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ANECValidateMutableProcedureInfo_cold_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "buffer overrun in MutableProcedureInfo", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ANECValidateMutableProcedureInfo_cold_13(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s: Invalid weight buffer index ", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ANECValidateMutableProcedureInfo_cold_14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s: Invalid operation index ", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ANECGetMutableOperationInfo_cold_1(int a1)
{
  int v1;
  const char *v2;
  __int16 v3;
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v1 = 136315394;
  v2 = "const ANECMutableOperationInfo *ANECGetMutableOperationInfo(const ANECMutableProcedureInfo *, uint32_t)";
  v3 = 1024;
  v4 = a1;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%s: Invalid operation info for index %d", (uint8_t *)&v1, 0x12u);
  OUTLINED_FUNCTION_4();
}

__CFDictionary *ZinCreateMatrixDecompositionUnit(const ZinIrMatrixDecompositionUnitInfo *a1)
{
  __CFDictionary *Unit;
  const __CFAllocator *v3;
  __CFDictionary *Mutable;
  const __CFString *v5;
  CFNumberRef v11;
  __CFArray *v12;
  uint64_t v13;
  unint64_t i;
  unint64_t v15;
  uint64_t v16;
  char v17;
  CFNumberRef v18;
  char v20;
  __int16 valuePtr;

  Unit = ZinCreateUnit(a1);
  v3 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v5 = ZinIrMatrixDecompositionTypeToCFString(*((_DWORD *)a1 + 20));
  CFDictionaryAddValue(Mutable, CFSTR("Type"), v5);
  _S0 = *((_DWORD *)a1 + 40);
  __asm { FCVT            H0, S0 }
  valuePtr = _S0;
  v11 = CFNumberCreate(v3, kCFNumberSInt16Type, &valuePtr);
  CFDictionaryAddValue(Mutable, CFSTR("Epsilon"), v11);
  CFRelease(v11);
  v12 = CFArrayCreateMutable(v3, 0, MEMORY[0x24BDBD690]);
  v13 = *((_QWORD *)a1 + 12);
  if (v13)
  {
    for (i = 0; i != v13; ++i)
    {
      v20 = 0;
      v15 = i >> 6;
      v16 = 1 << i;
      if ((*(_QWORD *)(*((_QWORD *)a1 + 11) + 8 * (i >> 6)) & (1 << i)) != 0)
      {
        v17 = 1;
        v20 = 1;
      }
      else
      {
        v17 = 0;
      }
      if ((*(_QWORD *)(*((_QWORD *)a1 + 14) + 8 * v15) & v16) != 0)
      {
        v17 |= 2u;
        v20 = v17;
      }
      if ((*(_QWORD *)(*((_QWORD *)a1 + 17) + 8 * v15) & v16) != 0)
        v20 = v17 | 4;
      v18 = CFNumberCreate(v3, kCFNumberSInt8Type, &v20);
      CFArrayAppendValue(v12, v18);
      CFRelease(v18);
    }
  }
  CFDictionaryAddValue(Mutable, CFSTR("RotationAxis"), v12);
  CFRelease(v12);
  CFDictionaryAddValue(Unit, CFSTR("Params"), Mutable);
  CFRelease(Mutable);
  return Unit;
}

void ZinIrPEGOCUnit::ZinIrPEGOCUnit(ZinIrPEGOCUnit *this, const ZinIrPEGOCUnitInfo *a2)
{
  _QWORD *v4;

  ZinIrPEUnit::ZinIrPEUnit(this, a2);
  *v4 = &off_24C018B00;
  ZinIrPEUnitInfo::ZinIrPEUnitInfo((ZinIrPEUnitInfo *)(v4 + 130), a2);
  *((_QWORD *)this + 130) = &unk_24C01E0A0;
  ZinIrDynamicGOCUnitInfo::ZinIrDynamicGOCUnitInfo((ZinIrPEGOCUnit *)((char *)this + 2008), (const ZinIrPEGOCUnitInfo *)((char *)a2 + 968));
}

void sub_206D86508(_Unwind_Exception *a1)
{
  ZinIrKernel **v1;
  void **v2;

  ZinIrPEUnitInfo::~ZinIrPEUnitInfo(v2);
  ZinIrPEUnit::~ZinIrPEUnit(v1);
  _Unwind_Resume(a1);
}

void ZinIrPEUnit::~ZinIrPEUnit(ZinIrKernel **this)
{
  void **v2;

  *this = (ZinIrKernel *)&unk_24C015C60;
  v2 = (void **)(this + 7);
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](this + 129, 0);
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](this + 128, 0);
  ZinIrPEUnitInfo::~ZinIrPEUnitInfo(v2);
  ZinIrUnit::~ZinIrUnit((ZinIrUnit *)this);
}

uint64_t ZinIrPEGOCUnit::CreateLayer(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v49;
  std::__shared_weak_count *v50;
  _BYTE v51[24];
  _QWORD v52[6];
  _QWORD v53[2];
  _QWORD v54[4];
  void *__p;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  ZinGOCLayer *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  unint64_t v64;

  v8 = a1 + 2008;
  v9 = operator new();
  __p = 0;
  v56 = 0;
  v57 = 0;
  ZinIrDynamicGOCUnit::ZinIrDynamicGOCUnit(v9, v8, &__p);
  if (__p)
  {
    v56 = __p;
    operator delete(__p);
  }
  v62 = 0;
  v63 = 0;
  v64 = 0;
  std::vector<ZinIrTensorInfo>::__init_with_size[abi:ne180100]<ZinIrTensorInfo*,ZinIrTensorInfo*>(&v62, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3));
  v10 = v62;
  if (*((_QWORD *)v62 + 18) != 2)
    ZinAssertImpl("The scale and bias are expected to be stacked along height for PEGOC");
  v11 = v62 + 120;
  *((_QWORD *)v62 + 18) = 1;
  v12 = v63;
  if ((unint64_t)v63 >= v64)
  {
    v20 = 0xEEEEEEEEEEEEEEEFLL * ((v63 - v10) >> 3);
    v21 = v20 + 1;
    if (v20 + 1 > 0x222222222222222)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    if (0xDDDDDDDDDDDDDDDELL * ((uint64_t)(v64 - (_QWORD)v10) >> 3) > v21)
      v21 = 0xDDDDDDDDDDDDDDDELL * ((uint64_t)(v64 - (_QWORD)v10) >> 3);
    if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v64 - (_QWORD)v10) >> 3) >= 0x111111111111111)
      v22 = 0x222222222222222;
    else
      v22 = v21;
    if (v22)
    {
      v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrTensorInfo>>((uint64_t)&v64, v22);
      v10 = v62;
      v12 = v63;
    }
    else
    {
      v23 = 0;
    }
    v24 = &v23[120 * v20];
    v25 = *(_OWORD *)v11;
    v26 = *((_OWORD *)v11 + 1);
    v27 = *((_OWORD *)v11 + 3);
    v28 = &v23[120 * v22];
    *((_OWORD *)v24 + 2) = *((_OWORD *)v11 + 2);
    *((_OWORD *)v24 + 3) = v27;
    *(_OWORD *)v24 = v25;
    *((_OWORD *)v24 + 1) = v26;
    v29 = *((_OWORD *)v11 + 4);
    v30 = *((_OWORD *)v11 + 5);
    v31 = *((_OWORD *)v11 + 6);
    *((_QWORD *)v24 + 14) = *((_QWORD *)v11 + 14);
    *((_OWORD *)v24 + 5) = v30;
    *((_OWORD *)v24 + 6) = v31;
    *((_OWORD *)v24 + 4) = v29;
    v19 = v24 + 120;
    if (v12 == (_OWORD *)v10)
    {
      v38 = v24;
    }
    else
    {
      do
      {
        v32 = *(_OWORD *)((char *)v12 - 120);
        v33 = *(_OWORD *)((char *)v12 - 104);
        v34 = *(_OWORD *)((char *)v12 - 88);
        *(_OWORD *)(v24 - 72) = *(_OWORD *)((char *)v12 - 72);
        *(_OWORD *)(v24 - 88) = v34;
        *(_OWORD *)(v24 - 104) = v33;
        *(_OWORD *)(v24 - 120) = v32;
        v35 = *(_OWORD *)((char *)v12 - 56);
        v36 = *(_OWORD *)((char *)v12 - 40);
        v37 = *(_OWORD *)((char *)v12 - 24);
        v38 = v24 - 120;
        *((_DWORD *)v24 - 2) = *((_DWORD *)v12 - 2);
        *(_OWORD *)(v24 - 24) = v37;
        *(_OWORD *)(v24 - 40) = v36;
        *(_OWORD *)(v24 - 56) = v35;
        v12 = (_OWORD *)((char *)v12 - 120);
        v24 -= 120;
      }
      while (v12 != (_OWORD *)v10);
    }
    v62 = v38;
    v63 = v19;
    v64 = (unint64_t)v28;
    if (v10)
      operator delete(v10);
  }
  else
  {
    v13 = *(_OWORD *)v11;
    v14 = *(_OWORD *)(v10 + 136);
    v15 = *(_OWORD *)(v10 + 168);
    *((_OWORD *)v63 + 2) = *(_OWORD *)(v10 + 152);
    v12[3] = v15;
    *v12 = v13;
    v12[1] = v14;
    v16 = *(_OWORD *)(v10 + 184);
    v17 = *(_OWORD *)(v10 + 200);
    v18 = *(_OWORD *)(v10 + 216);
    *((_QWORD *)v12 + 14) = *((_QWORD *)v10 + 29);
    v12[5] = v17;
    v12[6] = v18;
    v12[4] = v16;
    v19 = (char *)v12 + 120;
  }
  v63 = v19;
  ZinIrUnit::SetBottomInfo(v9, (uint64_t)&v62);
  v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t **, uint64_t))(*(_QWORD *)v9 + 80))(v9, a2, a3, a4);
  ZinIrPEUnit::CreateCommonSubLayers(a1, a2, (uint64_t)a3, (uint64_t)&__p);
  v54[0] = 0;
  v54[1] = __p;
  v53[0] = 0;
  v53[1] = v56;
  v52[2] = v58;
  v52[3] = v60;
  v52[4] = 0;
  v52[5] = v61;
  v54[2] = 0;
  v54[3] = 0;
  v52[0] = v57;
  v52[1] = 0;
  ZinPELayer::GetPostScaleAndBiasFromGOC(v59, v51);
  v40 = operator new();
  v41 = v40;
  v42 = (std::__shared_weak_count *)(*a3)[1];
  v49 = **a3;
  v50 = v42;
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldxr(p_shared_owners);
    while (__stxr(v44 + 1, p_shared_owners));
  }
  ZinPEGOCLayer::ZinPEGOCLayer(v40, &v49, a1 + 1048, v54, v53, v39, v52, v51);
  v45 = v50;
  if (v50)
  {
    v46 = (unint64_t *)&v50->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v62)
  {
    v63 = v62;
    operator delete(v62);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return v41;
}

void sub_206D86900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v32;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  MEMORY[0x20BD002F8](v29, 0x10B3C404F75725BLL);
  v32 = *(void **)(v30 - 88);
  if (v32)
  {
    *(_QWORD *)(v30 - 80) = v32;
    operator delete(v32);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  _Unwind_Resume(a1);
}

uint64_t ZinIrPEGOCUnit::CreateKernel(ZinIrPEUnit *a1, const ZinIrHalParameters *a2, ZinIrFileManager *a3, const ZinWeightFileInfo *a4, uint64_t a5, uint64_t a6, ZinIrUnitStatus *a7)
{
  uint64_t v7;
  uint64_t v8;

  if ((_DWORD)a5)
    ZinAssertImpl("PEGOC does not support Espresso scale & bias format", a2, a3, a4, a5, a6, a7, v7, v8);
  return ZinIrPEUnit::CreateCommonSubKernels(a1, a2, a3, a4, a7);
}

uint64_t ZinIrPEGOCUnit::TensorDimensions(ZinIrPEGOCUnit *this, const ZinIrHalParameters *a2, ZinTensorDimensions *a3, CFArrayRef *a4)
{
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  __int128 v7;

  v4 = *((_QWORD *)this + 1);
  if (*((_QWORD *)this + 2) - v4 == 240)
  {
    result = 0;
    v6 = *(_OWORD *)(v4 + 8);
    v7 = *(_OWORD *)(v4 + 24);
    *((_QWORD *)a3 + 4) = *(_QWORD *)(v4 + 40);
    *(_OWORD *)a3 = v6;
    *((_OWORD *)a3 + 1) = v7;
  }
  else
  {
    ZinIrUnitStatus::SetError(a4, CFSTR("InvalidBottomCount"));
    return 3;
  }
  return result;
}

void ZinIrPEGOCUnit::~ZinIrPEGOCUnit(ZinIrPEGOCUnit *this)
{
  ZinIrPEGOCUnit::~ZinIrPEGOCUnit(this);
  JUMPOUT(0x20BD002F8);
}

{
  void **v2;
  void **v3;
  void **v4;

  *(_QWORD *)this = &off_24C018B00;
  v2 = (void **)((char *)this + 1040);
  *((_QWORD *)this + 130) = &unk_24C01E0A0;
  v3 = (void **)((char *)this + 2008);
  *((_QWORD *)this + 251) = &unk_24C0221D8;
  v4 = (void **)((char *)this + 2096);
  *((_QWORD *)this + 262) = off_24C021950;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 2176);
  ZinIrUnitInfo::~ZinIrUnitInfo(v4);
  ZinIrUnitInfo::~ZinIrUnitInfo(v3);
  ZinIrPEUnitInfo::~ZinIrPEUnitInfo(v2);
  ZinIrPEUnit::~ZinIrPEUnit((ZinIrKernel **)this);
}

uint64_t ZinIrPEGOCUnit::GetUnitInfo(ZinIrPEGOCUnit *this)
{
  return (uint64_t)this + 1040;
}

void ZinIrPEUnitInfo::ZinIrPEUnitInfo(ZinIrPEUnitInfo *this, const ZinIrPEUnitInfo *a2)
{
  __int128 v4;
  int v5;

  *(_QWORD *)this = off_24C017CA0;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  v5 = *((_DWORD *)a2 + 8);
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 8) = v5;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 40), *((__int128 **)a2 + 5), *((__int128 **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3));
  *((_OWORD *)this + 4) = *((_OWORD *)a2 + 4);
  *(_QWORD *)this = &unk_24C01AD00;
  std::__optional_copy_base<ZinIrNeuronUnitInfo,false>::__optional_copy_base[abi:ne180100]((_BYTE *)this + 80, (uint64_t)a2 + 80);
  std::__optional_copy_base<ZinIrNeuronUnitInfo,false>::__optional_copy_base[abi:ne180100]((_BYTE *)this + 200, (uint64_t)a2 + 200);
  std::__optional_copy_base<ZinIrEWUnitInfo,false>::__optional_copy_base[abi:ne180100]((_BYTE *)this + 320, (uint64_t)a2 + 320);
  std::__optional_copy_base<ZinIrNeuronUnitInfo,false>::__optional_copy_base[abi:ne180100]((_BYTE *)this + 416, (uint64_t)a2 + 416);
  std::__optional_copy_base<ZinIrGOCUnitInfo,false>::__optional_copy_base[abi:ne180100]((_BYTE *)this + 536, (uint64_t)a2 + 536);
  std::__optional_copy_base<ZinIrNeuronUnitInfo,false>::__optional_copy_base[abi:ne180100]((_BYTE *)this + 696, (uint64_t)a2 + 696);
  std::__optional_copy_base<ZinIrQuantUnitInfo,false>::__optional_copy_base[abi:ne180100]((_BYTE *)this + 816, (uint64_t)a2 + 816);
}

void sub_206D86B68(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;

  if (*(_BYTE *)(v1 + 808))
    ZinIrUnitInfo::~ZinIrUnitInfo(v7);
  if (*(_BYTE *)(v1 + 688))
    ZinIrUnitInfo::~ZinIrUnitInfo(v6);
  if (*(_BYTE *)(v1 + 528))
    ZinIrUnitInfo::~ZinIrUnitInfo(v5);
  if (*(_BYTE *)(v1 + 408))
    ZinIrUnitInfo::~ZinIrUnitInfo(v4);
  if (*(_BYTE *)(v1 + 312))
    ZinIrUnitInfo::~ZinIrUnitInfo(v3);
  if (*(_BYTE *)(v1 + 192))
    ZinIrUnitInfo::~ZinIrUnitInfo(v2);
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)v1);
  _Unwind_Resume(a1);
}

void sub_206D86C0C()
{
  uint64_t v0;
  void **v1;

  if (*(char *)(v0 + 31) < 0)
    operator delete(*v1);
  JUMPOUT(0x206D86C04);
}

void ZinIrPEUnitInfo::~ZinIrPEUnitInfo(void **this)
{
  *this = &unk_24C01AD00;
  if (*((_BYTE *)this + 960))
    ZinIrUnitInfo::~ZinIrUnitInfo(this + 102);
  if (*((_BYTE *)this + 808))
    ZinIrUnitInfo::~ZinIrUnitInfo(this + 87);
  if (*((_BYTE *)this + 688))
    ZinIrUnitInfo::~ZinIrUnitInfo(this + 67);
  if (*((_BYTE *)this + 528))
    ZinIrUnitInfo::~ZinIrUnitInfo(this + 52);
  if (*((_BYTE *)this + 408))
    ZinIrUnitInfo::~ZinIrUnitInfo(this + 40);
  if (*((_BYTE *)this + 312))
    ZinIrUnitInfo::~ZinIrUnitInfo(this + 25);
  if (*((_BYTE *)this + 192))
    ZinIrUnitInfo::~ZinIrUnitInfo(this + 10);
  ZinIrUnitInfo::~ZinIrUnitInfo(this);
}

{
  ZinIrPEUnitInfo::~ZinIrPEUnitInfo(this);
  JUMPOUT(0x20BD002F8);
}

void ZinIrPEGOCUnitInfo::~ZinIrPEGOCUnitInfo(ZinIrPEGOCUnitInfo *this)
{
  void **v2;
  void **v3;

  *(_QWORD *)this = &unk_24C01E0A0;
  v2 = (void **)((char *)this + 968);
  *((_QWORD *)this + 121) = &unk_24C0221D8;
  v3 = (void **)((char *)this + 1056);
  *((_QWORD *)this + 132) = off_24C021950;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 1136);
  ZinIrUnitInfo::~ZinIrUnitInfo(v3);
  ZinIrUnitInfo::~ZinIrUnitInfo(v2);
  ZinIrPEUnitInfo::~ZinIrPEUnitInfo((void **)this);
}

{
  void **v2;
  void **v3;

  *(_QWORD *)this = &unk_24C01E0A0;
  v2 = (void **)((char *)this + 968);
  *((_QWORD *)this + 121) = &unk_24C0221D8;
  v3 = (void **)((char *)this + 1056);
  *((_QWORD *)this + 132) = off_24C021950;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 1136);
  ZinIrUnitInfo::~ZinIrUnitInfo(v3);
  ZinIrUnitInfo::~ZinIrUnitInfo(v2);
  ZinIrPEUnitInfo::~ZinIrPEUnitInfo((void **)this);
  JUMPOUT(0x20BD002F8);
}

_BYTE *std::__optional_copy_base<ZinIrEWUnitInfo,false>::__optional_copy_base[abi:ne180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[88] = 0;
  if (*(_BYTE *)(a2 + 88))
  {
    std::construct_at[abi:ne180100]<ZinIrEWUnitInfo,ZinIrEWUnitInfo const&,ZinIrEWUnitInfo*>((uint64_t)a1, a2);
    a1[88] = 1;
  }
  return a1;
}

void sub_206D86E30(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 88))
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrEWUnitInfo,ZinIrEWUnitInfo const&,ZinIrEWUnitInfo*>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  int v5;

  *(_QWORD *)a1 = off_24C017CA0;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  v5 = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 40), *(__int128 **)(a2 + 40), *(__int128 **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)a1 = off_24C01A728;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  return a1;
}

void sub_206D86F08(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

_BYTE *std::__optional_copy_base<ZinIrQuantUnitInfo,false>::__optional_copy_base[abi:ne180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[144] = 0;
  if (*(_BYTE *)(a2 + 144))
  {
    std::construct_at[abi:ne180100]<ZinIrQuantUnitInfo,ZinIrQuantUnitInfo const&,ZinIrQuantUnitInfo*>((uint64_t)a1, a2);
    a1[144] = 1;
  }
  return a1;
}

void sub_206D86F64(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 144))
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrQuantUnitInfo,ZinIrQuantUnitInfo const&,ZinIrQuantUnitInfo*>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  *(_QWORD *)a1 = off_24C017CA0;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  v5 = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 40), *(__int128 **)(a2 + 40), *(__int128 **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)a1 = off_24C01E0C0;
  v6 = *(_OWORD *)(a2 + 80);
  v7 = *(_OWORD *)(a2 + 96);
  v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  return a1;
}

void sub_206D87044(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t ZinParseAffineTransformUnit(const __CFDictionary *a1, char **a2, CFArrayRef *a3)
{
  const __CFDictionary *Value;
  const __CFDictionary *v6;
  CFTypeID v7;
  uint64_t result;
  const __CFNumber *v9;
  const __CFNumber *v10;
  CFTypeID v11;
  const __CFNumber *v12;
  const __CFNumber *v13;
  CFTypeID v14;
  const __CFArray *v15;
  const __CFArray *v16;
  CFTypeID v17;
  char **v18;
  int Count;
  CFIndex v20;
  _QWORD *v21;
  uint64_t v22;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v24;
  CFTypeID v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  int v42;
  const __CFString *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  int v55;
  char *v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  int v66;
  _BOOL8 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BOOL8 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int valuePtr;
  uint64_t v85;
  int v86;

  Value = (const __CFDictionary *)CFDictionaryGetValue(a1, CFSTR("Params"));
  if (Value && (v6 = Value, v7 = CFGetTypeID(Value), v7 == CFDictionaryGetTypeID()))
  {
    result = ZinParseTextureCommonUnit(v6, (ZinIrTextureUnitInfo *)a2, a3);
    if ((_DWORD)result)
      return result;
    v9 = (const __CFNumber *)CFDictionaryGetValue(v6, CFSTR("OutputWidth"));
    if (v9)
    {
      v10 = v9;
      v11 = CFGetTypeID(v9);
      if (v11 == CFNumberGetTypeID())
      {
        valuePtr = 0;
        CFNumberGetValue(v10, kCFNumberSInt32Type, &valuePtr);
        a2[20] = (char *)valuePtr;
        v12 = (const __CFNumber *)CFDictionaryGetValue(v6, CFSTR("OutputHeight"));
        if (v12)
        {
          v13 = v12;
          v14 = CFGetTypeID(v12);
          if (v14 == CFNumberGetTypeID())
          {
            v83 = 0;
            CFNumberGetValue(v13, kCFNumberSInt32Type, &v83);
            a2[21] = (char *)v83;
            v15 = (const __CFArray *)CFDictionaryGetValue(v6, CFSTR("OutputCoordinateInfo"));
            if (v15 && (v16 = v15, v17 = CFGetTypeID(v15), v17 == CFArrayGetTypeID()))
            {
              v18 = a2 + 25;
              if ((int)CFArrayGetCount(v16) > 0)
              {
                Count = CFArrayGetCount(v16);
                if (Count < 1)
                  return 0;
                v20 = 0;
                v21 = a2 + 27;
                v22 = Count;
                while (1)
                {
                  ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v16, v20);
                  if (!ValueAtIndex
                    || (v24 = ValueAtIndex, v25 = CFGetTypeID(ValueAtIndex), v25 != CFDictionaryGetTypeID()))
                  {
                    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                      ZinParseAffineTransformUnit(v20);
                    goto LABEL_78;
                  }
                  if (ZinParseCoordinateInfo(v24, (int *)&v85, a3))
                  {
                    v75 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    if (v75)
                      ZinParseAffineTransformUnit(v75, v76, v77, v78, v79, v80, v81, v82);
                    goto LABEL_78;
                  }
                  v26 = a2[25];
                  v27 = a2[26];
                  if (v26 != v27)
                    break;
LABEL_20:
                  if ((unint64_t)v27 >= *v21)
                  {
                    v31 = 0xAAAAAAAAAAAAAAABLL * ((v27 - v26) >> 2);
                    v32 = v31 + 1;
                    if (v31 + 1 > 0x1555555555555555)
                      goto LABEL_84;
                    v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v21 - (_QWORD)v26) >> 2);
                    if (2 * v33 > v32)
                      v32 = 2 * v33;
                    if (v33 >= 0xAAAAAAAAAAAAAAALL)
                      v34 = 0x1555555555555555;
                    else
                      v34 = v32;
                    if (v34)
                      v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANEDebugInfo::DebugInfoInMem::Layer>>((uint64_t)(a2 + 27), v34);
                    else
                      v35 = 0;
                    v36 = &v35[12 * v31];
                    v37 = v85;
                    *((_DWORD *)v36 + 2) = v86;
                    *(_QWORD *)v36 = v37;
                    v39 = a2[25];
                    v38 = a2[26];
                    v40 = v36;
                    if (v38 != v39)
                    {
                      do
                      {
                        v41 = *(_QWORD *)(v38 - 12);
                        v38 -= 12;
                        v42 = *((_DWORD *)v38 + 2);
                        *(_QWORD *)(v40 - 12) = v41;
                        v40 -= 12;
                        *((_DWORD *)v40 + 2) = v42;
                      }
                      while (v38 != v39);
                      v38 = *v18;
                    }
                    v30 = v36 + 12;
                    a2[25] = v40;
                    a2[26] = v36 + 12;
                    a2[27] = &v35[12 * v34];
                    if (v38)
                      operator delete(v38);
                  }
                  else
                  {
                    v29 = v85;
                    *((_DWORD *)v27 + 2) = v86;
                    *(_QWORD *)v27 = v29;
                    v30 = v27 + 12;
                  }
                  result = 0;
                  a2[26] = v30;
                  if (++v20 == v22)
                    return result;
                }
                v28 = a2[25];
                while (*(_DWORD *)v28 != (_DWORD)v85)
                {
                  v28 += 12;
                  if (v28 == v27)
                    goto LABEL_20;
                }
                v67 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                if (v67)
                  ZinParseTextureUnitSamplingGridInfo(v67, v68, v69, v70, v71, v72, v73, v74);
LABEL_78:
                v43 = CFSTR("InvalidCoordinate");
                goto LABEL_39;
              }
            }
            else
            {
              v18 = a2 + 25;
            }
            v44 = a2[27];
            v45 = a2[26];
            if (v45 >= v44)
            {
              v47 = *v18;
              v48 = 0xAAAAAAAAAAAAAAABLL * ((v45 - *v18) >> 2);
              v49 = v48 + 1;
              if (v48 + 1 > 0x1555555555555555)
                goto LABEL_84;
              v50 = 0xAAAAAAAAAAAAAAABLL * ((v44 - v47) >> 2);
              if (2 * v50 > v49)
                v49 = 2 * v50;
              if (v50 >= 0xAAAAAAAAAAAAAAALL)
                v51 = 0x1555555555555555;
              else
                v51 = v49;
              if (v51)
              {
                v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANEDebugInfo::DebugInfoInMem::Layer>>((uint64_t)(a2 + 27), v51);
                v47 = a2[25];
                v45 = a2[26];
              }
              else
              {
                v52 = 0;
              }
              v53 = &v52[12 * v48];
              v44 = &v52[12 * v51];
              *(_QWORD *)v53 = 3;
              *((_DWORD *)v53 + 2) = 0;
              v46 = v53 + 12;
              if (v45 != v47)
              {
                do
                {
                  v54 = *(_QWORD *)(v45 - 12);
                  v45 -= 12;
                  v55 = *((_DWORD *)v45 + 2);
                  *(_QWORD *)(v53 - 12) = v54;
                  v53 -= 12;
                  *((_DWORD *)v53 + 2) = v55;
                }
                while (v45 != v47);
                v47 = *v18;
              }
              a2[25] = v53;
              a2[26] = v46;
              a2[27] = v44;
              if (v47)
              {
                operator delete(v47);
                v44 = a2[27];
              }
            }
            else
            {
              *(_QWORD *)v45 = 3;
              *((_DWORD *)v45 + 2) = 0;
              v46 = v45 + 12;
            }
            a2[26] = v46;
            if (v46 < v44)
            {
              *(_QWORD *)v46 = 4;
              *((_DWORD *)v46 + 2) = 0;
              v56 = v46 + 12;
LABEL_75:
              result = 0;
              a2[26] = v56;
              return result;
            }
            v57 = *v18;
            v58 = 0xAAAAAAAAAAAAAAABLL * ((v46 - *v18) >> 2);
            v59 = v58 + 1;
            if (v58 + 1 <= 0x1555555555555555)
            {
              v60 = 0xAAAAAAAAAAAAAAABLL * ((v44 - v57) >> 2);
              if (2 * v60 > v59)
                v59 = 2 * v60;
              if (v60 >= 0xAAAAAAAAAAAAAAALL)
                v61 = 0x1555555555555555;
              else
                v61 = v59;
              if (v61)
              {
                v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANEDebugInfo::DebugInfoInMem::Layer>>((uint64_t)(a2 + 27), v61);
                v57 = a2[25];
                v46 = a2[26];
              }
              else
              {
                v62 = 0;
              }
              v63 = &v62[12 * v58];
              v64 = &v62[12 * v61];
              *(_QWORD *)v63 = 4;
              *((_DWORD *)v63 + 2) = 0;
              v56 = v63 + 12;
              if (v46 != v57)
              {
                do
                {
                  v65 = *(_QWORD *)(v46 - 12);
                  v46 -= 12;
                  v66 = *((_DWORD *)v46 + 2);
                  *(_QWORD *)(v63 - 12) = v65;
                  v63 -= 12;
                  *((_DWORD *)v63 + 2) = v66;
                }
                while (v46 != v57);
                v57 = *v18;
              }
              a2[25] = v63;
              a2[26] = v56;
              a2[27] = v64;
              if (v57)
                operator delete(v57);
              goto LABEL_75;
            }
LABEL_84:
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          }
        }
      }
    }
    v43 = CFSTR("InvalidUnitAffineTransformInfo");
  }
  else
  {
    v43 = CFSTR("InvalidParamSyntax");
  }
LABEL_39:
  ZinIrUnitStatus::SetError(a3, v43);
  return 3;
}

void ZinParseAffineTransformUnit(int a1)
{
  _DWORD v1[2];
  uint64_t v2;

  v2 = *MEMORY[0x24BDAC8D0];
  v1[0] = 67109120;
  v1[1] = a1;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Unable to parse coordinate info at index #%d.\n", (uint8_t *)v1, 8u);
  OUTLINED_FUNCTION_1();
}

void ZinParseAffineTransformUnit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unable to parse coordinate info for texture unit\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

_QWORD *ZinPhiLayer::ZinPhiLayer(_QWORD *a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  ZinIrKernel *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  ZinIrKernel *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;

  v6 = operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(v6, 78);
  v7 = a2[1];
  v18 = *a2;
  v19 = (std::__shared_weak_count *)v7;
  v20 = v6;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v17 = 0;
  ZinIrOpLayer::ZinIrOpLayer((uint64_t)a1, &v20, &v18, a3, &v17);
  v10 = v17;
  v17 = 0;
  if (v10)
  {
    ZinIrKernel::~ZinIrKernel(v10);
    MEMORY[0x20BD002F8](v11, 0x1032C40DEE44497);
  }
  v12 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v20;
  v20 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  *a1 = &off_24BFFDA08;
  return a1;
}

void sub_206D87810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ZinIrKernel *a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;

  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  v13 = a12;
  a12 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

uint64_t ZinPhiLayer::Clone(ZinIrOpLayer *a1, uint64_t *a2, __int128 *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *GroupId;
  uint64_t v16[2];

  v6 = (_QWORD *)operator new();
  v7 = (uint64_t)v6;
  v8 = *a2;
  v9 = (std::__shared_weak_count *)a2[1];
  v16[0] = v8;
  v16[1] = (uint64_t)v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  ZinPhiLayer::ZinPhiLayer(v6, v16, a3);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  GroupId = (uint64_t *)ZinIrOpLayer::GetGroupId(a1);
  ZinIrOpLayer::SetGroupId(v7, *GroupId);
  return v7;
}

void sub_206D87938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x20BD002F8](v9, 0x10B3C4024B96488);
  _Unwind_Resume(a1);
}

_QWORD *ZinPhiLayer::ValidateSemantics_Impl(ZinIrOpLayer *a1, uint64_t *a2, unsigned __int8 *a3)
{
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[7];
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[14];

  ZinIrOpLayer::ValidateSemantics_Impl(a1, a2, a3);
  if (a2[1] == *a2)
    ZinAssertImpl("Phi layer must have at least one input.");
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a1 + 80))(&v16, a1, 0, 0);
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      v8 = *(_OWORD *)v6;
      v9 = *(_OWORD *)(v6 + 16);
      v10 = *(_OWORD *)(v6 + 48);
      v14[2] = *(_OWORD *)(v6 + 32);
      v14[3] = v10;
      v14[0] = v8;
      v14[1] = v9;
      v11 = *(_OWORD *)(v6 + 64);
      v12 = *(_OWORD *)(v6 + 80);
      v13 = *(_OWORD *)(v6 + 96);
      v15 = *(_QWORD *)(v6 + 112);
      v14[5] = v12;
      v14[6] = v13;
      v14[4] = v11;
      if ((_DWORD)v16 != LODWORD(v14[0]))
        ZinAssertImpl("Input tensors of Phi layer must have the same format as the output tensor.");
      result = (_QWORD *)ZinTensorPosition::operator==(v17, (_QWORD *)v14 + 1);
      if ((result & 1) == 0)
        ZinAssertImpl("Input tensors of Phi layer must have the same dims as the output tensor.");
      v6 += 120;
    }
    while (v6 != v7);
  }
  return result;
}

uint64_t ZinIrSerializer::WriteUint8(ZinIrSerializer *this, char a2)
{
  _BYTE *v2;

  if (!*((_BYTE *)this + 24))
  {
    v2 = (_BYTE *)*((_QWORD *)this + 1);
    --*((_QWORD *)this + 2);
    *v2 = a2;
  }
  ++*((_QWORD *)this + 1);
  return 1;
}

size_t ZinIrSerializer::Write(ZinIrSerializer *this, const void *a2, size_t __n)
{
  void *v5;

  if (!*((_BYTE *)this + 24))
  {
    v5 = (void *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 2) -= __n;
    memcpy(v5, a2, __n);
  }
  *((_QWORD *)this + 1) += __n;
  return __n;
}

uint64_t ZinIrSerializer::WriteUint16(ZinIrSerializer *this, __int16 a2)
{
  _WORD *v2;

  if (!*((_BYTE *)this + 24))
  {
    v2 = (_WORD *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 2) -= 2;
    *v2 = a2;
  }
  *((_QWORD *)this + 1) += 2;
  return 2;
}

uint64_t ZinIrSerializer::WriteUint32(ZinIrSerializer *this, int a2)
{
  _DWORD *v2;

  if (!*((_BYTE *)this + 24))
  {
    v2 = (_DWORD *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 2) -= 4;
    *v2 = a2;
  }
  *((_QWORD *)this + 1) += 4;
  return 4;
}

uint64_t ZinIrSerializer::WriteFloat32(ZinIrSerializer *this, float a2)
{
  float *v2;

  if (!*((_BYTE *)this + 24))
  {
    v2 = (float *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 2) -= 4;
    *v2 = a2;
  }
  *((_QWORD *)this + 1) += 4;
  return 4;
}

uint64_t ZinIrSerializer::WriteUint64(ZinIrSerializer *this, uint64_t a2)
{
  _QWORD *v2;

  if (!*((_BYTE *)this + 24))
  {
    v2 = (_QWORD *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 2) -= 8;
    *v2 = a2;
  }
  *((_QWORD *)this + 1) += 8;
  return 8;
}

uint64_t ZinIrSerializer::AddPaddingUntilAlignedTo(ZinIrSerializer *this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = a2 - 1;
  v3 = *((_QWORD *)this + 1);
  if ((v3 & v2) == 0)
    return 0;
  v4 = 0;
  do
  {
    if (!*((_BYTE *)this + 24))
    {
      --*((_QWORD *)this + 2);
      *(_BYTE *)v3 = 0;
      v3 = *((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 1) = ++v3;
    ++v4;
  }
  while ((v3 & v2) != 0);
  return v4;
}

void ZinIrSerializer::ZinIrSerializer(ZinIrSerializer *this, char *a2, uint64_t a3)
{
  *(_QWORD *)this = 0x700000008;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = a3;
  *((_BYTE *)this + 24) = 0;
}

void ZinVisualization::CreateDotGraphAndLogConditionally(uint64_t a1, std::string::size_type a2, ZinIrCompilerParameters *a3, uint64_t a4, int a5)
{
  _BYTE v8[24];
  std::string v9;

  if ((*((_DWORD *)a3 + 24) & a5) != 0)
  {
    ZinIrCompilerParameters::ZinIrCompilerParameters(&v9, a3);
    v8[0] = 0;
    v8[16] = 0;
    ZinVisualization::CreateCFDotGraphAndLog(a1, a2, (uint64_t)&v9, a4, (uint64_t)v8);
    ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)&v9);
  }
}

void sub_206D87C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)va);
  _Unwind_Resume(a1);
}

void ZinVisualization::CreateCFDotGraphAndLog(uint64_t a1, std::string::size_type a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10;
  std::string *v11;
  __int128 v12;
  void **v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  size_t v17;
  std::string *v18;
  const void *v19;
  void **v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  int v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  std::string::size_type v33;
  _QWORD *v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  _BYTE v38[32];
  int v39;
  _BYTE v40[32];
  int v41;
  std::string v42;
  void *__p[2];
  int64_t v44;
  void *v45[2];
  int64_t v46;
  _BYTE v47[24];
  _BYTE *v48;
  std::string v49;
  char __str[100];
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v10 = *(_DWORD *)(a1 + 152);
  *(_DWORD *)(a1 + 152) = v10 + 1;
  snprintf(__str, 0x64uLL, "%02d", v10);
  ReplaceUnsupportedCharWithUnderscore(a4, (std::string *)v38);
  v11 = std::string::append((std::string *)v38, "_", 1uLL);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  *(_QWORD *)&v40[16] = *((_QWORD *)&v11->__r_.__value_.__l + 2);
  *(_OWORD *)v40 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, __str);
  if (v44 >= 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  if (v44 >= 0)
    v14 = HIBYTE(v44);
  else
    v14 = (std::string::size_type)__p[1];
  v15 = std::string::append((std::string *)v40, (const std::string::value_type *)v13, v14);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v46 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)v45 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v44) < 0)
    operator delete(__p[0]);
  if ((v40[23] & 0x80000000) != 0)
    operator delete(*(void **)v40);
  if ((v38[23] & 0x80000000) != 0)
    operator delete(*(void **)v38);
  if (*(char *)(a3 + 47) >= 0)
    v17 = *(unsigned __int8 *)(a3 + 47);
  else
    v17 = *(_QWORD *)(a3 + 32);
  v18 = &v42;
  std::string::basic_string[abi:ne180100]((uint64_t)&v42, v17 + 13);
  if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v18 = (std::string *)v42.__r_.__value_.__r.__words[0];
  if (v17)
  {
    if (*(char *)(a3 + 47) >= 0)
      v19 = (const void *)(a3 + 24);
    else
      v19 = *(const void **)(a3 + 24);
    memmove(v18, v19, v17);
  }
  strcpy((char *)v18 + v17, ".zinir_graph_");
  if (v46 >= 0)
    v20 = v45;
  else
    v20 = (void **)v45[0];
  if (v46 >= 0)
    v21 = HIBYTE(v46);
  else
    v21 = (std::string::size_type)v45[1];
  v22 = std::string::append(&v42, (const std::string::value_type *)v20, v21);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  v24 = std::string::append(&v49, "_", 1uLL);
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  *(_QWORD *)&v38[16] = *((_QWORD *)&v24->__r_.__value_.__l + 2);
  *(_OWORD *)v38 = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  v26 = *(char *)(a2 + 23);
  if (v26 >= 0)
    v27 = (const std::string::value_type *)a2;
  else
    v27 = *(const std::string::value_type **)a2;
  if (v26 >= 0)
    v28 = *(unsigned __int8 *)(a2 + 23);
  else
    v28 = *(_QWORD *)(a2 + 8);
  v29 = std::string::append((std::string *)v38, v27, v28);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  *(_QWORD *)&v40[16] = *((_QWORD *)&v29->__r_.__value_.__l + 2);
  *(_OWORD *)v40 = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  v31 = std::string::append((std::string *)v40, ".dot", 4uLL);
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v44 = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if ((v40[23] & 0x80000000) != 0)
    operator delete(*(void **)v40);
  if ((v38[23] & 0x80000000) != 0)
    operator delete(*(void **)v38);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  memset(v40, 0, sizeof(v40));
  v41 = 1065353216;
  memset(v38, 0, sizeof(v38));
  v39 = 1065353216;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a2 + 23) >= 0)
      v33 = a2;
    else
      v33 = *(_QWORD *)a2;
    LODWORD(v49.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v49.__r_.__value_.__r.__words + 4) = v33;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s", (uint8_t *)&v49, 0xCu);
  }
  v48 = 0;
  v34 = operator new(0x30uLL);
  *v34 = &off_24C000DC8;
  v34[1] = a3;
  v34[2] = __p;
  v34[3] = v40;
  v34[4] = v38;
  v34[5] = a5;
  v48 = v34;
  v35 = ZinIrControlFlowGraph::TraverseForward((_QWORD *)a1, (uint64_t)v47);
  v36 = v48;
  if (v48 == v47)
  {
    v37 = 4;
    v36 = v47;
    goto LABEL_52;
  }
  if (v48)
  {
    v37 = 5;
LABEL_52:
    (*(void (**)(void))(*v36 + 8 * v37))();
  }
  if (v35 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    ZinVisualization::CreateCFDotGraphAndLog();
  std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinVisualization::CFGLayerMetadata>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinVisualization::CFGLayerMetadata>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinVisualization::CFGLayerMetadata>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinVisualization::CFGLayerMetadata>>>::~__hash_table((uint64_t)v38);
  std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::~__hash_table((uint64_t)v40);
  if (SHIBYTE(v44) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v46) < 0)
    operator delete(v45[0]);
}

void sub_206D88080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,char *a51)
{
  char *v51;
  char *v53;
  uint64_t v54;

  v53 = a51;
  if (a51 == v51)
  {
    v54 = 4;
    v53 = &a48;
  }
  else
  {
    if (!a51)
      goto LABEL_6;
    v54 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v53 + 8 * v54))();
LABEL_6:
  std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinVisualization::CFGLayerMetadata>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinVisualization::CFGLayerMetadata>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinVisualization::CFGLayerMetadata>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinVisualization::CFGLayerMetadata>>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::~__hash_table((uint64_t)&a20);
  if (a39 < 0)
    operator delete(__p);
  if (a46 < 0)
    operator delete(a41);
  _Unwind_Resume(a1);
}

void ZinVisualization::CreateLimitedSizeDotGraphsAndLogConditionally(uint64_t a1, std::string::size_type a2, ZinIrCompilerParameters *a3, uint64_t a4, int a5)
{
  _QWORD **v7;
  unint64_t v8;
  _QWORD *v9;
  __int128 v10;
  std::string::size_type i;
  _QWORD *v12;
  _QWORD **v13;
  BOOL v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t *v26;
  char *v27;
  uint64_t *v28;
  size_t v29;
  std::string *v30;
  const void *v31;
  std::string *v32;
  std::string::size_type size;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  std::string::size_type v39;
  std::string *v40;
  __int128 v41;
  uint64_t v42;
  std::string v44;
  __int128 v45;
  char v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  void *v53[2];
  std::string::size_type v54;
  uint64_t *v55;
  void *v56;
  uint64_t *v57;
  _BYTE v58[24];
  std::string v59;
  uint64_t v60;
  _QWORD **v61;
  _QWORD *v62[3];

  if ((*((_DWORD *)a3 + 24) & a5) != 0)
  {
    ZinIrCompilerParameters::ZinIrCompilerParameters(&v44, a3);
    if (!*(_QWORD *)(a1 + 344))
      ZinAssertImpl("Must run scheduler first");
    std::map<ZinIrBasicBlock *,std::vector<ZinIrOpLayer *>,ScheduleComparator,std::allocator<std::pair<ZinIrBasicBlock * const,std::vector<ZinIrOpLayer *>>>>::map[abi:ne180100]((uint64_t *)&v61, a1 + 328);
    v7 = v61;
    if (v61 == v62)
    {
      v8 = 0;
    }
    else
    {
      v8 = 0;
      do
      {
        v9 = v7[5];
        v59.__r_.__value_.__r.__words[0] = (std::string::size_type)v7[4];
        v60 = 0;
        *(_OWORD *)&v59.__r_.__value_.__r.__words[1] = 0uLL;
        std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v59.__r_.__value_.__l.__size_, v9, (uint64_t)v7[6], v7[6] - v9);
        v10 = *(_OWORD *)&v59.__r_.__value_.__r.__words[1];
        for (i = v59.__r_.__value_.__l.__size_; i != v59.__r_.__value_.__r.__words[2]; i += 8)
        {
          if ((*(_QWORD *)(*(_QWORD *)i + 48) & 0x8000000000000000) != 0)
            ZinAssertImpl("Cannot run limited visualization without a schedule on all layers");
        }
        if (v59.__r_.__value_.__l.__size_)
        {
          v59.__r_.__value_.__r.__words[2] = v59.__r_.__value_.__l.__size_;
          operator delete((void *)v10);
        }
        v12 = v7[1];
        if (v12)
        {
          do
          {
            v13 = (_QWORD **)v12;
            v12 = (_QWORD *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v13 = (_QWORD **)v7[2];
            v14 = *v13 == v7;
            v7 = v13;
          }
          while (!v14);
        }
        v8 += (uint64_t)(*((_QWORD *)&v10 + 1) - v10) >> 3;
        v7 = v13;
      }
      while (v13 != v62);
    }
    ZinIrCompilerParameters::ZinIrCompilerParameters(&v59, (const ZinIrCompilerParameters *)&v44);
    v58[0] = 0;
    v58[16] = 0;
    ZinVisualization::CreateCFDotGraphAndLog(a1, a2, (uint64_t)&v59, a4, (uint64_t)v58);
    ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)&v59);
    if (v8 >= 0xBB9)
    {
      v42 = a1;
      v15 = 0;
      v16 = 0;
      v56 = 0;
      v55 = 0;
      v57 = 0;
      do
      {
        if (v16)
          v17 = v16 - 200;
        else
          v17 = 0;
        if (v8 - 1 >= v16 + 2999)
          v18 = v16 + 2999;
        else
          v18 = v8 - 1;
        if (v15 >= v57)
        {
          v19 = ((char *)v15 - (char *)v55) >> 4;
          if ((unint64_t)(v19 + 1) >> 60)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v20 = v57 - v55;
          if (v20 <= v19 + 1)
            v20 = v19 + 1;
          if ((unint64_t)((char *)v57 - (char *)v55) >= 0x7FFFFFFFFFFFFFF0)
            v21 = 0xFFFFFFFFFFFFFFFLL;
          else
            v21 = v20;
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>((uint64_t)&v57, v21);
          v24 = &v22[16 * v19];
          *(_QWORD *)v24 = v17;
          *((_QWORD *)v24 + 1) = v18;
          v25 = (char *)v56;
          v26 = v55;
          v27 = v24;
          if (v56 != v55)
          {
            do
            {
              *((_OWORD *)v27 - 1) = *((_OWORD *)v25 - 1);
              v27 -= 16;
              v25 -= 16;
            }
            while (v25 != (char *)v26);
            v25 = (char *)v55;
          }
          v15 = (uint64_t *)(v24 + 16);
          v55 = (uint64_t *)v27;
          v56 = v24 + 16;
          v57 = (uint64_t *)&v22[16 * v23];
          if (v25)
            operator delete(v25);
        }
        else
        {
          *v15 = v17;
          v15[1] = v18;
          v15 += 2;
        }
        v16 += 3000;
        v56 = v15;
      }
      while (v16 < v8);
      v28 = v55;
      if (v55 == v15)
        goto LABEL_78;
      do
      {
        if (*(char *)(a2 + 23) >= 0)
          v29 = *(unsigned __int8 *)(a2 + 23);
        else
          v29 = *(_QWORD *)(a2 + 8);
        std::string::basic_string[abi:ne180100]((uint64_t)&v50, v29 + 7);
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v30 = &v50;
        else
          v30 = (std::string *)v50.__r_.__value_.__r.__words[0];
        if (v29)
        {
          if (*(char *)(a2 + 23) >= 0)
            v31 = (const void *)a2;
          else
            v31 = *(const void **)a2;
          memmove(v30, v31, v29);
        }
        strcpy((char *)v30 + v29, "_sched_");
        std::to_string(&v49, *v28);
        if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v32 = &v49;
        else
          v32 = (std::string *)v49.__r_.__value_.__r.__words[0];
        if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v49.__r_.__value_.__r.__words[2]);
        else
          size = v49.__r_.__value_.__l.__size_;
        v34 = std::string::append(&v50, (const std::string::value_type *)v32, size);
        v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        v51.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v35;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        v36 = std::string::append(&v51, ":", 1uLL);
        v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v52.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v48, v28[1]);
        if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v38 = &v48;
        else
          v38 = (std::string *)v48.__r_.__value_.__r.__words[0];
        if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v39 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
        else
          v39 = v48.__r_.__value_.__l.__size_;
        v40 = std::string::append(&v52, (const std::string::value_type *)v38, v39);
        v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
        v54 = v40->__r_.__value_.__r.__words[2];
        *(_OWORD *)v53 = v41;
        v40->__r_.__value_.__l.__size_ = 0;
        v40->__r_.__value_.__r.__words[2] = 0;
        v40->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v48.__r_.__value_.__l.__data_);
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v52.__r_.__value_.__l.__data_);
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v51.__r_.__value_.__l.__data_);
        if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v49.__r_.__value_.__l.__data_);
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v50.__r_.__value_.__l.__data_);
        ZinIrCompilerParameters::ZinIrCompilerParameters(&v47, (const ZinIrCompilerParameters *)&v44);
        v45 = *(_OWORD *)v28;
        v46 = 1;
        ZinVisualization::CreateCFDotGraphAndLog(v42, (std::string::size_type)v53, (uint64_t)&v47, a4, (uint64_t)&v45);
        ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)&v47);
        if (SHIBYTE(v54) < 0)
          operator delete(v53[0]);
        v28 += 2;
      }
      while (v28 != v15);
      v15 = v55;
      if (v55)
      {
LABEL_78:
        v56 = v15;
        operator delete(v15);
      }
    }
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)&v61, v62[0]);
    ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)&v44);
  }
}

void sub_206D8865C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)&STACK[0x700]);
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy(v3 - 112, *(_QWORD **)(v3 - 104));
  ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)va);
  _Unwind_Resume(a1);
}

void ZinVisualization::AppendLayerDetailedInfoToStream(uint64_t a1, ZinIrOpLayer *this)
{
  unsigned int v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  void **v19;
  uint64_t v20;
  void *__p[2];
  unsigned __int8 v22;
  void *v23;
  uint64_t v24;
  unsigned __int8 v25;

  if (ZinIrOpLayer::IsANELayer(this))
  {
    ZinVisualization::AppendEngIrLayerDetailedInfoToStream(a1, (uint64_t)this);
  }
  else
  {
    v4 = *(_DWORD *)(*((_QWORD *)this + 8) + 8);
    ZinIrEnumToStringUtil::OpCodeToString(v4, &v23);
    if (*((_QWORD *)this + 17))
    {
      v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 16), (uint64_t)"      ", 6);
      if ((v25 & 0x80u) == 0)
        v6 = &v23;
      else
        v6 = v23;
      if ((v25 & 0x80u) == 0)
        v7 = v25;
      else
        v7 = v24;
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" DESCINFO=", 10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 16), (uint64_t)"  ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 16), (uint64_t)"  ", 2);
      LOBYTE(__p[0]) = 10;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 16), (uint64_t)__p, 1);
    }
    if (v4 == 1)
    {
      v13 = (_QWORD *)(a1 + 16);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"      ", 6);
      if ((v25 & 0x80u) == 0)
        v15 = &v23;
      else
        v15 = v23;
      if ((v25 & 0x80u) == 0)
        v16 = v25;
      else
        v16 = v24;
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" POOLINFO=", 10);
      (*(void (**)(void **__return_ptr, ZinIrOpLayer *, uint64_t))(*(_QWORD *)this + 16))(__p, this, 0xFFFFFFFFLL);
      if ((v22 & 0x80u) == 0)
        v19 = __p;
      else
        v19 = (void **)__p[0];
      if ((v22 & 0x80u) == 0)
        v20 = v22;
      else
        v20 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, v20);
      if ((char)v22 < 0)
        operator delete(__p[0]);
      LOBYTE(__p[0]) = 10;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)__p, 1);
    }
    else if (!v4)
    {
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 16), (uint64_t)"      ", 6);
      if ((v25 & 0x80u) == 0)
        v10 = &v23;
      else
        v10 = v23;
      if ((v25 & 0x80u) == 0)
        v11 = v25;
      else
        v11 = v24;
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" CONVINFO=", 10);
      LOBYTE(__p[0]) = 10;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 16), (uint64_t)__p, 1);
    }
    if ((char)v25 < 0)
      operator delete(v23);
  }
}

void sub_206D88994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void ZinVisualization::AppendEngIrLayerDetailedInfoToStream(int a1, uint64_t a2)
{
  ZinIrOpLayer **v3;
  ZinIrOpLayer **v4;
  ZinIrOpLayer **v5;
  ZinIrOpLayer **v6;

  (*(void (**)(ZinIrOpLayer ***__return_ptr, uint64_t))(*(_QWORD *)a2 + 312))(&v5, a2);
  v3 = v5;
  v4 = v6;
  if (v5 != v6)
  {
    do
    {
      if (*v3)
        ZinVisualization::AppendLayerDetailedInfoToStream(a1, *v3);
      ++v3;
    }
    while (v3 != v4);
    v3 = v5;
  }
  if (v3)
  {
    v6 = v3;
    operator delete(v3);
  }
}

void sub_206D88A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinVisualization::AppendLayerDetailedOpcodeToStream(uint64_t a1, ZinIrOpLayer *a2)
{
  _QWORD *v3;
  void *p_p;
  uint64_t v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  void *v11[2];
  unsigned __int8 v12;
  void *__p;
  char *v14;
  unsigned __int8 v15;

  v3 = (_QWORD *)(a1 + 16);
  ZinIrEnumToStringUtil::OpCodeToString(*(_DWORD *)(*((_QWORD *)a2 + 8) + 8), &__p);
  if ((v15 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v15 & 0x80u) == 0)
    v5 = v15;
  else
    v5 = (uint64_t)v14;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)p_p, v5);
  if ((char)v15 < 0)
    operator delete(__p);
  if (ZinIrOpLayer::IsANELayer(a2))
  {
    (*(void (**)(void **__return_ptr, ZinIrOpLayer *))(*(_QWORD *)a2 + 312))(&__p, a2);
    v6 = (char *)__p;
    v7 = v14;
    if (__p != v14)
    {
      do
      {
        if (*(_QWORD *)v6)
        {
          ZinIrEnumToStringUtil::OpCodeToString(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v6 + 64) + 8), v11);
          v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"-", 1);
          if ((v12 & 0x80u) == 0)
            v9 = v11;
          else
            v9 = (void **)v11[0];
          if ((v12 & 0x80u) == 0)
            v10 = v12;
          else
            v10 = (uint64_t)v11[1];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
          if ((char)v12 < 0)
            operator delete(v11[0]);
        }
        v6 += 8;
      }
      while (v6 != v7);
      v6 = (char *)__p;
    }
    if (v6)
    {
      v14 = v6;
      operator delete(v6);
    }
  }
}

void sub_206D88B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 ZinVisualization::ZinOpLayerGraphDumpInJson::ZinOpLayerGraphDumpInJson(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __n128 result;
  uint64_t v7;

  *(_QWORD *)a1 = &unk_24C02BCF8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  result = *(__n128 *)a4;
  v7 = *(_QWORD *)(a4 + 32);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a4 + 16);
  *(__n128 *)(a1 + 56) = result;
  *(_QWORD *)(a1 + 88) = v7;
  *(_QWORD *)(a1 + 96) = a2;
  *(_QWORD *)(a1 + 104) = a5;
  *(_QWORD *)(a1 + 112) = a6;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = a3;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  return result;
}

void std::__function::__func<ZinVisualization::CreateCFDotGraphAndLog(ZinIrControlFlowGraph *,std::string const&,ZinIrCompilerParameters,std::string const&,std::optional<ZinLiveRange>)::$_0,std::allocator<ZinVisualization::CreateCFDotGraphAndLog(ZinIrControlFlowGraph *,std::string const&,ZinIrCompilerParameters,std::string const&,std::optional<ZinLiveRange>)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<ZinVisualization::CreateCFDotGraphAndLog(ZinIrControlFlowGraph *,std::string const&,ZinIrCompilerParameters,std::string const&,std::optional<ZinLiveRange>)::$_0,std::allocator<ZinVisualization::CreateCFDotGraphAndLog(ZinIrControlFlowGraph *,std::string const&,ZinIrCompilerParameters,std::string const&,std::optional<ZinLiveRange>)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24C000DC8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<ZinVisualization::CreateCFDotGraphAndLog(ZinIrControlFlowGraph *,std::string const&,ZinIrCompilerParameters,std::string const&,std::optional<ZinLiveRange>)::$_0,std::allocator<ZinVisualization::CreateCFDotGraphAndLog(ZinIrControlFlowGraph *,std::string const&,ZinIrCompilerParameters,std::string const&,std::optional<ZinLiveRange>)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24C000DC8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<ZinVisualization::CreateCFDotGraphAndLog(ZinIrControlFlowGraph *,std::string const&,ZinIrCompilerParameters,std::string const&,std::optional<ZinLiveRange>)::$_0,std::allocator<ZinVisualization::CreateCFDotGraphAndLog(ZinIrControlFlowGraph *,std::string const&,ZinIrCompilerParameters,std::string const&,std::optional<ZinLiveRange>)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::operator()(uint64_t a1, ZinIrTarget **a2)
{
  ZinIrTarget *v2;
  void **v3;
  void *__p[2];
  char v6;
  _BYTE buf[12];
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  if (*(_QWORD *)(ZinIrTarget::GetHal(*a2) + 16))
  {
    ZinIrTarget::GetHal(v2);
    ZinIrOpLayerGraph::DebugPrint(__p);
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      v3 = __p;
      if (v6 < 0)
        v3 = (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v3;
      _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s", buf, 0xCu);
    }
    ZinIrTarget::GetHal(v2);
    std::string::basic_string[abi:ne180100]<0>(buf, &byte_207AF6795);
    if (v8 < 0)
      operator delete(*(void **)buf);
    if (v6 < 0)
      operator delete(__p[0]);
  }
  return 0;
}

void sub_206D88DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinVisualization::CreateCFDotGraphAndLog(ZinIrControlFlowGraph *,std::string const&,ZinIrCompilerParameters,std::string const&,std::optional<ZinLiveRange>)::$_0,std::allocator<ZinVisualization::CreateCFDotGraphAndLog(ZinIrControlFlowGraph *,std::string const&,ZinIrCompilerParameters,std::string const&,std::optional<ZinLiveRange>)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinVisualization::CreateCFDotGraphAndLog(ZinIrControlFlowGraph *,std::string const&,ZinIrCompilerParameters,std::string const&,std::optional<ZinLiveRange>)::$_0,std::allocator<ZinVisualization::CreateCFDotGraphAndLog(ZinIrControlFlowGraph *,std::string const&,ZinIrCompilerParameters,std::string const&,std::optional<ZinLiveRange>)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::target_type()
{
}

uint64_t std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinVisualization::CFGLayerMetadata>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinVisualization::CFGLayerMetadata>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinVisualization::CFGLayerMetadata>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinVisualization::CFGLayerMetadata>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinVisualization::CFGLayerMetadata>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinVisualization::CFGLayerMetadata>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinVisualization::CFGLayerMetadata>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinVisualization::CFGLayerMetadata>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinVisualization::CFGLayerMetadata>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinVisualization::CFGLayerMetadata>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinVisualization::CFGLayerMetadata>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinVisualization::CFGLayerMetadata>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<ZinIrOpLayer * const,ZinVisualization::CFGLayerMetadata>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<ZinIrOpLayer * const,ZinVisualization::CFGLayerMetadata>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void ZinVisualization::CreateCFDotGraphAndLog()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Failed to generate dot graph.", v0, 2u);
}

uint64_t ZinParseQuantUnit(const __CFDictionary *a1, ZinIrQuantUnitInfo *a2, CFArrayRef *a3)
{
  const __CFDictionary *Value;
  const __CFDictionary *v7;
  CFTypeID v8;
  const void *v9;
  CFTypeID v10;
  uint64_t v11;
  const void *v12;
  CFTypeID v13;
  uint64_t FloatFormat;
  uint64_t v15;
  const __CFString *v16;
  const __CFNumber *v18;
  const __CFNumber *v19;
  CFTypeID v20;
  const void *v21;
  CFTypeID v22;
  const __CFNumber *v23;
  const __CFNumber *v24;
  CFTypeID v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  Value = (const __CFDictionary *)CFDictionaryGetValue(a1, CFSTR("Params"));
  if (!Value || (v7 = Value, v8 = CFGetTypeID(Value), v8 != CFDictionaryGetTypeID()))
  {
    v16 = CFSTR("InvalidParamSyntax");
LABEL_14:
    ZinIrUnitStatus::SetError(a3, v16);
    return 3;
  }
  v9 = CFDictionaryGetValue(v7, CFSTR("ScaleOffset"));
  if (v9 && (v10 = CFGetTypeID(v9), v10 == CFNumberGetTypeID()))
  {
    if (ZinParsePerCoutInfo(v7, CFSTR("ScaleIndex"), (int *)a2 + 21, CFSTR("ScaleOffset"), (uint64_t *)a2 + 12, CFSTR("ScaleCount"), (int *)a2 + 22, a3))
    {
LABEL_22:
      v16 = CFSTR("InvalidQuantizationParams");
      goto LABEL_14;
    }
    v11 = *((unsigned int *)a2 + 22);
    if ((int)v11 <= 0)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinParseQuantUnit(v11, v26, v27, v28, v29, v30, v31, v32);
      goto LABEL_34;
    }
    v12 = CFDictionaryGetValue(v7, CFSTR("QuantScaleType"));
    if (v12)
    {
      v13 = CFGetTypeID(v12);
      if (v13 == CFStringGetTypeID())
      {
        FloatFormat = ZinGetFloatFormat(v7, CFSTR("QuantScaleType"), (int *)a2 + 34, a3);
        if ((_DWORD)FloatFormat)
        {
          v15 = FloatFormat;
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            ZinParseQuantUnit();
          ZinIrUnitStatus::SetError(a3, CFSTR("InvalidQuantizationFormat"));
          return v15;
        }
      }
    }
  }
  else
  {
    v18 = (const __CFNumber *)CFDictionaryGetValue(v7, CFSTR("QuantScale"));
    if (v18)
    {
      v19 = v18;
      v20 = CFGetTypeID(v18);
      if (v20 == CFNumberGetTypeID())
        CFNumberGetValue(v19, kCFNumberFloat32Type, (char *)a2 + 128);
    }
  }
  v21 = CFDictionaryGetValue(v7, CFSTR("ZeroPointOffset"));
  if (!v21 || (v22 = CFGetTypeID(v21), v22 != CFNumberGetTypeID()))
  {
    v23 = (const __CFNumber *)CFDictionaryGetValue(v7, CFSTR("QuantZeroPoint"));
    if (v23)
    {
      v24 = v23;
      v25 = CFGetTypeID(v23);
      if (v25 == CFNumberGetTypeID())
        CFNumberGetValue(v24, kCFNumberSInt32Type, (char *)a2 + 132);
    }
    goto LABEL_27;
  }
  if (ZinParsePerCoutInfo(v7, CFSTR("ZeroPointIndex"), (int *)a2 + 27, CFSTR("ZeroPointOffset"), (uint64_t *)a2 + 15, CFSTR("ZeroPointCount"), (int *)a2 + 28, a3))goto LABEL_22;
  if (*((int *)a2 + 28) <= 0)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinParseQuantUnit((uint64_t)a2, v33, v34, v35, v36, v37, v38, v39);
LABEL_34:
    v16 = CFSTR("InvalidQuantizationScaleCount");
    goto LABEL_14;
  }
LABEL_27:
  if (ZinIrQuantizationInfo::HasDefaultQuantizationScalarZeroPoint((ZinIrQuantUnitInfo *)((char *)a2 + 80)))
    return 0;
  return ZinGetQuantizationFormat(a1, CFSTR("OutputType"), (int *)a2 + 35);
}

void ZinParseQuantUnit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_2_9(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid quant scale count: %d\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_2_9(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid quant scale count: %d\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinParseQuantUnit()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Failed to parse Quant scale format!\n", v0, 2u);
  OUTLINED_FUNCTION_1();
}

uint64_t ZinComputeProgramValidateLCThread(int a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t result;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  switch(a1)
  {
    case 1:
      result = ZinIsOutsideBounds(a2, 2136, a3, a4);
      if ((_DWORD)result)
        goto LABEL_12;
      return result;
    case 2:
      v13 = a2;
      v14 = 24;
      goto LABEL_11;
    case 3:
      v13 = a2;
      v14 = 3368;
      goto LABEL_11;
    case 4:
      v13 = a2;
      v14 = 2152;
      goto LABEL_11;
    case 5:
      v13 = a2;
      v14 = 32;
      goto LABEL_11;
    case 6:
      v13 = a2;
      v14 = 280;
LABEL_11:
      if ((ZinIsOutsideBounds(v13, v14, a3, a4) & 1) == 0)
        return 0;
LABEL_12:
      v15 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v15)
        ZinComputeProgramValidateLCThread_cold_2(v15, v16, v17, v18, v19, v20, v21, v22);
      return 3;
    default:
      v5 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v5)
        ZinComputeProgramValidateLCThread_cold_1(v5, v6, v7, v8, v9, v10, v11, v12);
      return 3;
  }
}

uint64_t ZinComputeProgramValidateProcedureNameFromLCThread(uint64_t a1, unsigned int *a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v4 = 3;
  if (a1 && a2)
  {
    switch(*(_DWORD *)(a1 + 8))
    {
      case 1:
        v5 = a2 + 523;
        goto LABEL_9;
      case 2:
      case 3:
        v5 = a2 + 2;
        goto LABEL_9;
      case 4:
        v5 = a2 + 526;
        goto LABEL_9;
      case 5:
        v5 = a2 + 6;
        goto LABEL_9;
      case 6:
        v5 = a2 + 1;
LABEL_9:
        v6 = *v5;
        if (!v6 || !ZinIsStringOutsideBounds((char *)(a1 + v6), a3, a4))
          goto LABEL_12;
        v4 = 2;
        break;
      default:
LABEL_12:
        v4 = 0;
        break;
    }
  }
  return v4;
}

uint64_t ZinComputeProgramGetProcedureNameFromLCThread(uint64_t a1, _DWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  unsigned int v4;

  v3 = 3;
  if (a1 && a2)
  {
    if (a3)
    {
      *a3 = 0;
      switch(*(_DWORD *)(a1 + 8))
      {
        case 1:
          v4 = a2[523];
          if (!v4)
            return 0;
          goto LABEL_6;
        case 2:
        case 3:
          v4 = a2[2];
          if (!v4)
            return 0;
          goto LABEL_6;
        case 4:
          v4 = a2[526];
          if (!v4)
            return 0;
          goto LABEL_6;
        case 5:
          v4 = a2[6];
          if (!v4)
            return 0;
          goto LABEL_6;
        case 6:
          v4 = a2[1];
          if (!v4)
            return 0;
LABEL_6:
          v3 = 0;
          *a3 = a1 + v4;
          break;
        default:
          v3 = 3;
          break;
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t ZinComputeProgramValidateSymbolVariableNamesFromSNEThread(uint64_t a1, _DWORD *a2, unint64_t a3, unint64_t a4)
{
  uint64_t result;
  unint64_t v7;
  unint64_t v10;
  unsigned int *v11;
  uint64_t v12;

  if (!a1)
    return 3;
  result = 3;
  if (a2 && *(_DWORD *)(a1 + 8) == 6 && *a2 == 1)
  {
    v7 = a2[5];
    if ((_DWORD)v7)
    {
      v10 = 0;
      v11 = a2 + 8;
      do
      {
        if (*(v11 - 2) <= 2)
        {
          v12 = *v11;
          if ((_DWORD)v12)
          {
            if (ZinIsStringOutsideBounds((char *)(a1 + v12), a3, a4))
              return 2;
            v7 = a2[5];
          }
        }
        v11 += 4;
        ++v10;
      }
      while (v10 < v7);
    }
    return 0;
  }
  return result;
}

uint64_t ZinComputeProgramGetSymbolVariableNamesFromSNEThread(uint64_t a1, _DWORD *a2, std::vector<std::string> *a3)
{
  uint64_t result;
  unint64_t v6;
  unint64_t v8;
  std::allocator<std::string> *p_end_cap;
  unsigned int *v10;
  uint64_t v11;
  std::string *value;
  std::vector<std::string>::pointer end;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  std::string *v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  int v23;
  void *__p[2];
  std::string::size_type v25;
  std::__split_buffer<std::string> __v;

  if (!a1)
    return 3;
  result = 3;
  if (a2 && *(_DWORD *)(a1 + 8) == 6 && *a2 == 1)
  {
    v6 = a2[5];
    if ((_DWORD)v6)
    {
      v8 = 0;
      p_end_cap = (std::allocator<std::string> *)&a3->__end_cap_;
      v10 = a2 + 8;
      do
      {
        if (*(v10 - 2) <= 2)
        {
          v11 = *v10;
          if ((_DWORD)v11)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, (char *)(a1 + v11));
            end = a3->__end_;
            value = a3->__end_cap_.__value_;
            if (end >= value)
            {
              v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)a3->__begin_) >> 3);
              v16 = v15 + 1;
              if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)a3->__begin_) >> 3);
              if (2 * v17 > v16)
                v16 = 2 * v17;
              if (v17 >= 0x555555555555555)
                v18 = 0xAAAAAAAAAAAAAAALL;
              else
                v18 = v16;
              __v.__end_cap_.__value_ = p_end_cap;
              if (v18)
                v19 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, v18);
              else
                v19 = 0;
              v20 = v19 + v15;
              __v.__first_ = v19;
              __v.__begin_ = v20;
              __v.__end_cap_.__value_ = &v19[v18];
              v21 = *(_OWORD *)__p;
              v20->__r_.__value_.__r.__words[2] = v25;
              *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
              __p[1] = 0;
              v25 = 0;
              __p[0] = 0;
              __v.__end_ = v20 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(a3, &__v);
              v22 = a3->__end_;
              std::__split_buffer<std::string>::~__split_buffer(&__v);
              v23 = SHIBYTE(v25);
              a3->__end_ = v22;
              if (v23 < 0)
                operator delete(__p[0]);
            }
            else
            {
              v14 = *(_OWORD *)__p;
              end->__r_.__value_.__r.__words[2] = v25;
              *(_OWORD *)&end->__r_.__value_.__l.__data_ = v14;
              a3->__end_ = end + 1;
            }
            v6 = a2[5];
          }
        }
        v10 += 4;
        ++v8;
      }
      while (v8 < v6);
    }
    return 0;
  }
  return result;
}

void sub_206D897B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::__split_buffer<std::string> *a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinComputeProgramValidateNamesFromSinglePlaneTiledCompressedMultislice(unint64_t a1, unsigned int *a2, unint64_t a3, unint64_t a4)
{
  if (a2)
    return ZinComputeProgramValidateNamesFromSinglePlaneTiledCompressedHelper(a1, (unint64_t)a2, *a2, a2[6], a2[6], a3, a4);
  else
    return 3;
}

uint64_t ZinComputeProgramGetNamesFromSinglePlaneTiledCompressedMultislice(uint64_t a1, unsigned int *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!a2 || !a1)
    return 3;
  v5 = a2[6];
  v6 = a2[12];
  if (a3)
  {
    v7 = *a2;
    *a3 = 0;
    if ((_DWORD)v7)
      *a3 = a1 + v7;
  }
  if (a4)
  {
    *a4 = 0;
    if ((_DWORD)v5)
      *a4 = a1 + v5;
  }
  if (!a5)
    return 0;
  *a5 = 0;
  if (!(_DWORD)v6)
    return 0;
  v8 = 0;
  *a5 = a1 + v6;
  return v8;
}

uint64_t ZinComputeProgramValidateNameFromParamBinding(unint64_t a1, unsigned int *a2, unint64_t a3, unint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = 3;
  if (a1 && a2)
  {
    if ((ZinIsOutsideBounds((unint64_t)a2, 12, a3, a4) & 1) != 0)
      return 2;
    v9 = *a2;
    if ((_DWORD)v9 && (ZinIsOutsideBounds(a1, v9, a3, a4) & 1) != 0)
      return 2;
    else
      return 0;
  }
  return result;
}

uint64_t ZinComputeProgramGetParamNameFromBinding(uint64_t a1, _DWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = 3;
  if (a1 && a2)
  {
    if (*a2 != 7)
    {
      v4 = 0;
      goto LABEL_8;
    }
    if (!a3)
      return 0;
    *a3 = 0;
    v3 = a2[4];
    if ((_DWORD)v3)
    {
      v4 = a1 + v3;
LABEL_8:
      v3 = 0;
      *a3 = v4;
    }
  }
  return v3;
}

uint64_t ZinComputeProgramValidateNamesFromMultiPlaneLinear(unint64_t a1, unsigned int *a2, unint64_t a3, unint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int v22;

  result = 3;
  if (a1 && a2)
  {
    if ((ZinIsOutsideBounds((unint64_t)a2, 3352, a3, a4) & 1) != 0)
      return 2;
    v9 = *a2;
    if ((_DWORD)v9)
    {
      if ((ZinIsOutsideBounds(a1, v9, a3, a4) & 1) != 0)
        return 2;
    }
    v10 = a2[4];
    if (v10 > 4)
    {
      v11 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v11)
        ZinComputeProgramValidateNamesFromMultiPlaneLinear_cold_1(v11, v12, v13, v14, v15, v16, v17, v18);
      return 2;
    }
    if (a2[4])
    {
      v19 = 0;
      v20 = a2 + 27;
      do
      {
        v22 = *v20;
        v20 += 26;
        v21 = v22;
        if (v22)
        {
          if ((ZinIsOutsideBounds(a1, v21, a3, a4) & 1) != 0)
            return 2;
          v10 = a2[4];
        }
        ++v19;
      }
      while (v19 < v10);
    }
    return 0;
  }
  return result;
}

uint64_t ZinComputeProgramGetNamesFromMultiPlaneLinear(uint64_t a1, unsigned int *a2, _QWORD *a3, unsigned int *a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int v18;

  v5 = 3;
  if (a1 && a2)
  {
    if (a3)
    {
      *a3 = 0;
      v6 = *a2;
      if ((_DWORD)v6)
        *a3 = a1 + v6;
    }
    v7 = a2[4];
    if (v7 < 5)
    {
      if (a4)
        *a4 = v7;
      if (a5)
      {
        v5 = a2[4];
        if ((_DWORD)v5)
        {
          v16 = a2 + 27;
          do
          {
            *a5 = 0;
            v18 = *v16;
            v16 += 26;
            v17 = v18;
            if (v18)
              *a5 = a1 + v17;
            ++a5;
            --v5;
          }
          while (v5);
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      v8 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v8)
        ZinComputeProgramValidateNamesFromMultiPlaneLinear_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
      return 3;
    }
  }
  return v5;
}

uint64_t ZinComputeProgramValidateNamesFromMultiPlaneTiledCompressed(unint64_t a1, unsigned int *a2, unint64_t a3, unint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  unsigned int v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;

  result = 3;
  if (a1 && a2)
  {
    if ((ZinIsOutsideBounds((unint64_t)a2, 1560, a3, a4) & 1) != 0)
      return 2;
    v9 = *a2;
    if ((_DWORD)v9)
    {
      if ((ZinIsOutsideBounds(a1, v9, a3, a4) & 1) != 0)
        return 2;
    }
    v10 = a2[4];
    if (v10 <= 4)
    {
      if (!v10)
        return 0;
      v19 = 0;
      v20 = a2 + 6;
      v21 = a2 + 6;
      while (1)
      {
        v23 = *v21;
        v21 += 12;
        v22 = v23;
        if (v23)
        {
          if ((ZinIsOutsideBounds(a1, v22, a3, a4) & 1) != 0)
            break;
        }
        v24 = v20[6];
        if ((_DWORD)v24)
        {
          if ((ZinIsOutsideBounds(a1, v24, a3, a4) & 1) != 0)
            break;
        }
        result = 0;
        ++v19;
        v20 = v21;
        if (v19 >= a2[4])
          return result;
      }
      return 2;
    }
    v11 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v11)
      ZinComputeProgramValidateNamesFromMultiPlaneLinear_cold_1(v11, v12, v13, v14, v15, v16, v17, v18);
    return 3;
  }
  return result;
}

uint64_t ZinComputeProgramGetNamesFromMultiPlaneTiledCompressed(uint64_t a1, unsigned int *a2, _QWORD *a3, _DWORD *a4, _QWORD *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = 3;
  if (a1 && a2)
  {
    if (a3)
    {
      *a3 = 0;
      v7 = *a2;
      if ((_DWORD)v7)
        *a3 = a1 + v7;
    }
    LODWORD(v8) = a2[4];
    if (v8 < 5)
    {
      if (a4)
      {
        *a4 = v8;
        LODWORD(v8) = a2[4];
      }
      if ((_DWORD)v8)
      {
        v17 = a2 + 12;
        v18 = a5;
        v19 = a6;
        v8 = v8;
        do
        {
          if (a5)
          {
            *v18 = 0;
            v20 = *(v17 - 6);
            if ((_DWORD)v20)
              *v18 = a1 + v20;
          }
          if (a6)
          {
            *v19 = 0;
            v21 = *v17;
            if ((_DWORD)v21)
              *v19 = a1 + v21;
          }
          ++v19;
          v17 += 12;
          ++v18;
          --v8;
        }
        while (v8);
      }
      return 0;
    }
    else
    {
      v9 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v9)
        ZinComputeProgramValidateNamesFromMultiPlaneLinear_cold_1(v9, v10, v11, v12, v13, v14, v15, v16);
      return 2;
    }
  }
  return v6;
}

uint64_t ANECGetIOTypeFromBinding(uint64_t a1)
{
  unsigned int v1;

  v1 = *(_DWORD *)(a1 + 4) - 1;
  if (v1 >= 3)
    return 3;
  else
    return v1;
}

uint64_t ANECGetBindingIOTypeFromIOType(int a1)
{
  if ((a1 - 1) > 2)
    return 1;
  else
    return dword_207A9C5E8[a1 - 1];
}

void ZinComputeProgramValidateLCThread_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s: Invalid thread cmd flavor", a5, a6, a7, a8, 2u);
}

void ZinComputeProgramValidateLCThread_cold_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s: Buffer overrun while parsing macho header", a5, a6, a7, a8, 2u);
}

void ZinComputeProgramValidateNamesFromMultiPlaneLinear_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "plane count overrun", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

_QWORD *ZinIrMemoryPools::GetPrivatePool(_QWORD *a1, int a2, unint64_t a3)
{
  _QWORD *result;
  int v4;
  unint64_t v5;

  v5 = a3;
  v4 = a2;
  result = std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(a1, &v5);
  if (result)
  {
    result = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(result + 3, &v4);
    if (result)
      return (_QWORD *)result[3];
  }
  return result;
}

_QWORD *ZinIrMemoryPools::GetPrivatePools(_QWORD *a1, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v5;

  v5 = a2;
  if (!std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(a1, &v5))ZinAssertImpl("Private pool not available.");
  v3 = std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::find<long>(a1, &v5);
  if (!v3)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return v3 + 3;
}

uint64_t ZinIrMemoryPools::SetPrivatePool(_QWORD *a1, int a2, unint64_t a3, uint64_t *a4)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  unint64_t v11;
  int *v12;

  v11 = a3;
  v10 = a2;
  if (ZinIrMemoryPools::GetPrivatePool(a1, a2, a3))
    ZinAssertImpl("Memory pool is getting overwritten.");
  v12 = (int *)&v11;
  v6 = std::__hash_table<std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::unordered_map<MemType,std::unique_ptr<ZinIrMemoryPool>>>,std::__unordered_map_hasher<ZinNamedType<unsigned long,AneIndexTag>,std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::unordered_map<MemType,std::unique_ptr<ZinIrMemoryPool>>>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,true>,std::__unordered_map_equal<ZinNamedType<unsigned long,AneIndexTag>,std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::unordered_map<MemType,std::unique_ptr<ZinIrMemoryPool>>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,true>,std::allocator<std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::unordered_map<MemType,std::unique_ptr<ZinIrMemoryPool>>>>>::__emplace_unique_key_args<ZinNamedType<unsigned long,AneIndexTag>,std::piecewise_construct_t const&,std::tuple<ZinNamedType<unsigned long,AneIndexTag> const&>,std::tuple<>>((uint64_t)a1, &v11, (uint64_t)&std::piecewise_construct, (_QWORD **)&v12);
  v12 = &v10;
  v7 = std::__hash_table<std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>,std::__unordered_map_hasher<MemType,std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>,std::hash<MemType>,std::equal_to<MemType>,true>,std::__unordered_map_equal<MemType,std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>,std::equal_to<MemType>,std::hash<MemType>,true>,std::allocator<std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>>>::__emplace_unique_key_args<MemType,std::piecewise_construct_t const&,std::tuple<MemType const&>,std::tuple<>>((uint64_t)(v6 + 3), &v10, (uint64_t)&std::piecewise_construct, &v12);
  v8 = *a4;
  *a4 = 0;
  result = v7[3];
  v7[3] = v8;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::unordered_map<MemType,std::unique_ptr<ZinIrMemoryPool>>>,std::__unordered_map_hasher<ZinNamedType<unsigned long,AneIndexTag>,std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::unordered_map<MemType,std::unique_ptr<ZinIrMemoryPool>>>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,true>,std::__unordered_map_equal<ZinNamedType<unsigned long,AneIndexTag>,std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::unordered_map<MemType,std::unique_ptr<ZinIrMemoryPool>>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,true>,std::allocator<std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::unordered_map<MemType,std::unique_ptr<ZinIrMemoryPool>>>>>::__emplace_unique_key_args<ZinNamedType<unsigned long,AneIndexTag>,std::piecewise_construct_t const&,std::tuple<ZinNamedType<unsigned long,AneIndexTag> const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = a1 + 16;
  v14 = (char *)operator new(0x40uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v7;
  *((_QWORD *)v14 + 2) = **a4;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  v11 = (_QWORD *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::unordered_map<MemType,std::unique_ptr<ZinIrMemoryPool>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::unordered_map<MemType,std::unique_ptr<ZinIrMemoryPool>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return v11;
}

void sub_206D8A1B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::unordered_map<MemType,std::unique_ptr<ZinIrMemoryPool>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::unordered_map<MemType,std::unique_ptr<ZinIrMemoryPool>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::unordered_map<MemType,std::unique_ptr<ZinIrMemoryPool>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::unordered_map<MemType,std::unique_ptr<ZinIrMemoryPool>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__hash_table<std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>,std::__unordered_map_hasher<MemType,std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>,std::hash<MemType>,std::equal_to<MemType>,true>,std::__unordered_map_equal<MemType,std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>,std::equal_to<MemType>,std::hash<MemType>,true>,std::allocator<std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>>>::~__hash_table((uint64_t)v2 + 24);
    operator delete(v2);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>,std::__unordered_map_hasher<MemType,std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>,std::hash<MemType>,std::equal_to<MemType>,true>,std::__unordered_map_equal<MemType,std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>,std::equal_to<MemType>,std::hash<MemType>,true>,std::allocator<std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>>>::__emplace_unique_key_args<MemType,std::piecewise_construct_t const&,std::tuple<MemType const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *v11 = *v21;
LABEL_38:
    *v21 = v11;
    goto LABEL_39;
  }
  *v11 = *v13;
  *v13 = v11;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    v22 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_206D8A43C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD *__p)
{
  uint64_t v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = __p[3];
    __p[3] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t ZinRCASDecompositionUtils::AddDeinterleaveCopyIfNeeded(ZinRCASDecompositionUtils *this, uint64_t **a2, ZinIrOpLayerGraph *a3)
{
  ZinIrTensor *InputTensor;
  ZinIrOpLayer *v6;
  size_t v7;
  std::string *v8;
  char *v9;
  std::string *v10;
  __int128 v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  ZinIrOpLayer *v18;
  _QWORD *v19;
  char inserted;
  char v21;
  void *__p[2];
  void *v24;
  _QWORD *v25;
  std::string v26;
  std::string v27;
  _QWORD v28[3];
  char v29;
  __int128 v30;
  int64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  InputTensor = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(this, 0);
  if (ZinIrTensor::HasInterleaveOtherThanOne(InputTensor))
  {
    v6 = (ZinIrOpLayer *)**((_QWORD **)this + 11);
    if (*((char *)this + 47) >= 0)
      v7 = *((unsigned __int8 *)this + 47);
    else
      v7 = *((_QWORD *)this + 4);
    v8 = &v27;
    std::string::basic_string[abi:ne180100]((uint64_t)&v27, v7 + 1);
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v8 = (std::string *)v27.__r_.__value_.__r.__words[0];
    if (v7)
    {
      if (*((char *)this + 47) >= 0)
        v9 = (char *)this + 24;
      else
        v9 = (char *)*((_QWORD *)this + 3);
      memmove(v8, v9, v7);
    }
    *(_WORD *)((char *)&v8->__r_.__value_.__l.__data_ + v7) = 95;
    std::string::basic_string[abi:ne180100]<0>(&v26, "deinterleave");
    v10 = std::string::append(&v26, "_xfm", 4uLL);
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v31 = v10->__r_.__value_.__r.__words[2];
    v30 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (v31 >= 0)
      v12 = (const std::string::value_type *)&v30;
    else
      v12 = (const std::string::value_type *)v30;
    if (v31 >= 0)
      v13 = HIBYTE(v31);
    else
      v13 = *((_QWORD *)&v30 + 1);
    v14 = std::string::append(&v27, v12, v13);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v24 = (void *)v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    ZinObjectNameFactory::ZinObjectNameFactory(v28, __p);
    if (SHIBYTE(v24) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v31) < 0)
      operator delete((void *)v30);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    v16 = *((_QWORD *)v6 + 2);
    v17 = *(_DWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0, 0)
                    + 88);
    v25 = 0;
    v18 = (ZinIrOpLayer *)ZinBuilder::CreateCopyLayer(v16, (uint64_t)v6, (uint64_t)v28, v17, &v25);
    v19 = v25;
    v25 = 0;
    if (v19)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v25, v19);
    *(_QWORD *)&v30 = this;
    v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
    v27.__r_.__value_.__l.__size_ = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(__p, &v27);
    inserted = ZinIrOpLayerGraph::InsertNodeBetween(a2, v18, v6, this, (ZinIrOpLayer ***)__p);
    if (v18)
      v21 = inserted;
    else
      v21 = 0;
    __p[0] = &unk_24C02BB18;
    if (__p[1])
    {
      v24 = __p[1];
      operator delete(__p[1]);
    }
    v28[0] = off_24C01FBB0;
    if (v29 < 0)
      operator delete((void *)v28[1]);
    if ((v21 & 1) == 0)
      ZinAssertImpl("De-interleave copy insertion failed for Sort/TopK layer", __p[0]);
  }
  return 0;
}

void sub_206D8A734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (__p)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

std::string::size_type ZinRCASDecompositionUtils::PreProcessRCASLayer(uint64_t **a1, std::string::size_type a2, int a3, BOOL *a4, uint64_t a5, uint64_t a6, float a7)
{
  std::string::size_type v9;
  uint64_t v10;
  int v11;
  int *v12;
  _DWORD *v13;
  int v14;
  uint64_t v15;
  size_t v16;
  int64x2_t *v17;
  const void *v18;
  std::string *v19;
  __int128 v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  uint64_t InputTensor;
  int64x2_t v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t ValueAt;
  uint64_t v32;
  int v33;
  int v34;
  ZinIrOpLayer *v35;
  _DWORD *v36;
  ZinIrOpLayer *Reshape;
  int inserted;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  int v42;
  _DWORD *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  ZinIrOpLayer *SortLayer;
  void *v50;
  _DWORD *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  int v57;
  _BYTE *v58;
  unsigned int *v59;
  unsigned int *v60;
  unint64_t v61;
  uint64_t v62;
  size_t v63;
  int64x2_t *v64;
  const void *v65;
  std::string *v66;
  __int128 v67;
  const std::string::value_type *v68;
  std::string::size_type v69;
  std::string *v70;
  __int128 v71;
  uint64_t v72;
  int64x2_t v73;
  int v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  char *v92;
  _WORD *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  __int16 v101;
  uint64_t v102;
  ZinIrOpLayer *v103;
  std::__shared_weak_count *v104;
  unsigned int v105;
  unint64_t *v106;
  unint64_t v107;
  int v108;
  _QWORD *v109;
  ZinIrOpLayer **v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int16 v119;
  __int16 v120;
  char *v121;
  void *v122;
  char *v123;
  int64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  __int16 v130;
  ZinIrOpLayer *ConstLayer;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  _BOOL4 v135;
  _OWORD *v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  ZinIrOpLayer *ReinterpretCastLayer;
  _BOOL4 v141;
  int v142;
  __int128 v143;
  uint64_t v144;
  _OWORD *v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  ZinIrOpLayer *v149;
  _BOOL4 v150;
  int v151;
  int v152;
  _QWORD *v153;
  ZinIrOpLayer **v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  char *v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  char *v162;
  uint64_t ***v163;
  char *v164;
  char *v165;
  char *v166;
  uint64_t **v167;
  std::__shared_weak_count *v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  char *v172;
  ZinIrOpLayer **v173;
  char *v174;
  char *v175;
  char *v176;
  ZinIrOpLayer *v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  void *v181;
  ZinIrOpLayer **v182;
  char *v183;
  char *v184;
  char *v185;
  ZinIrOpLayer *v186;
  _BOOL4 v187;
  std::__shared_weak_count *v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  char *v192;
  ZinIrOpLayer **v193;
  char *v194;
  char *v195;
  char *v196;
  ZinIrOpLayer *v197;
  int v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  int v202;
  uint64_t ConcatMode;
  _QWORD *v204;
  ZinIrOpLayer *v205;
  int v206;
  _QWORD *v207;
  _QWORD *v208;
  int v209;
  std::string *v210;
  __int128 v211;
  uint64_t v212;
  int v213;
  _OWORD *v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  ZinIrOpLayer *v218;
  _BOOL4 v219;
  int v220;
  _BOOL4 v221;
  int v222;
  int *v223;
  int *v224;
  int v225;
  int v226;
  uint64_t ****v227;
  ZinIrOpLayer *v228;
  int v229;
  ZinIrOpLayer *v230;
  ZinIrOpLayer *v231;
  char v232;
  uint64_t v233;
  __int128 v234;
  __int128 v235;
  uint64_t **v236;
  uint64_t v237;
  uint64_t v238;
  size_t v239;
  _BYTE *v240;
  uint64_t *v241;
  std::string *v242;
  __int128 v243;
  const std::string::value_type *v244;
  std::string::size_type v245;
  std::string *v246;
  int64x2_t v247;
  std::string *v248;
  std::string::size_type size;
  std::string *v250;
  __int128 v251;
  ZinIrOpLayer *v252;
  _BOOL4 v253;
  int v254;
  uint64_t v255;
  int64x2_t v256;
  int v257;
  _DWORD *v258;
  ZinIrOpLayer *v259;
  int v260;
  int v261;
  ZinIrOpLayer *v262;
  _BOOL4 v263;
  int v264;
  int v265;
  int v266;
  ZinIrOpLayer *CopyLayer;
  _QWORD *v268;
  _BOOL4 v269;
  int v270;
  int v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t Pow2;
  uint64_t v277;
  int v278;
  uint64_t v279;
  size_t v280;
  _BYTE *v281;
  const void *v282;
  uint64_t **v283;
  _WORD *v284;
  unint64_t *p_shared_owners;
  unint64_t v287;
  ZinIrOpLayer *v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  _BOOL4 v292;
  _OWORD *v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  ZinIrOpLayer *Broadcast;
  _BOOL4 v298;
  int v299;
  _QWORD *v300;
  ZinIrTensor *v301;
  _QWORD *v302;
  ZinIrOpLayer *v303;
  int v304;
  _QWORD *i;
  std::string::size_type v306;
  int v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  uint64_t v312;
  int v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t **v316;
  int v318;
  _BOOL4 v321;
  std::string::size_type v323;
  uint64_t v324;
  int v325;
  uint64_t v326;
  uint64_t v327;
  _BOOL4 v328;
  uint64_t v329;
  _QWORD *v330;
  void *v331[2];
  char *v332;
  char v333;
  __int128 v334;
  __int128 v335;
  void *v336[2];
  void *v337;
  char v338;
  std::string v339;
  std::string::size_type v340;
  void *v341;
  uint64_t v342;
  char *v343;
  __int128 v344;
  void *v345;
  std::__shared_weak_count *v346;
  unint64_t v347;
  std::string v348;
  char v349;
  __int128 v350;
  __int128 v351;
  uint64_t v352;
  _BYTE __p[80];
  __int128 v354;
  __int128 v355;
  int v356;
  _BYTE v357[32];
  int v358;
  int64x2_t v359;
  int64x2_t v360;
  uint64_t v361;
  uint64_t v362;

  _S8 = a7;
  v9 = a2;
  v362 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_DWORD *)(v10 + 8);
  if (v11 == 65)
  {
    v12 = (int *)(v10 + 16);
    v13 = (_DWORD *)(v10 + 20);
  }
  else
  {
    if (v11 != 66)
    {
      v14 = 5;
      goto LABEL_8;
    }
    v12 = (int *)(v10 + 24);
    v13 = (_DWORD *)(v10 + 28);
  }
  if (*v13 != 5)
    goto LABEL_85;
  v14 = *v12;
LABEL_8:
  v15 = *(_QWORD *)(a2 + 16);
  if (*(char *)(a2 + 47) >= 0)
    v16 = *(unsigned __int8 *)(a2 + 47);
  else
    v16 = *(_QWORD *)(a2 + 32);
  std::string::basic_string[abi:ne180100]((uint64_t)&v359, v16 + 1);
  if (v360.i8[7] >= 0)
    v17 = &v359;
  else
    v17 = (int64x2_t *)v359.i64[0];
  if (v16)
  {
    if (*(char *)(v9 + 47) >= 0)
      v18 = (const void *)(v9 + 24);
    else
      v18 = *(const void **)(v9 + 24);
    memmove(v17, v18, v16);
  }
  *(__int16 *)((char *)v17->i16 + v16) = 95;
  std::string::basic_string[abi:ne180100]<0>(&v350, "rcas_rshpe_vectax");
  v19 = std::string::append((std::string *)&v350, "_xfm", 4uLL);
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  *(_QWORD *)&v357[16] = *((_QWORD *)&v19->__r_.__value_.__l + 2);
  *(_OWORD *)v357 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (v357[23] >= 0)
    v21 = v357;
  else
    v21 = *(const std::string::value_type **)v357;
  if (v357[23] >= 0)
    v22 = v357[23];
  else
    v22 = *(_QWORD *)&v357[8];
  v23 = std::string::append((std::string *)&v359, v21, v22);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = *((_QWORD *)&v23->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  ZinObjectNameFactory::ZinObjectNameFactory(v336, __p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if ((v357[23] & 0x80000000) != 0)
    operator delete(*(void **)v357);
  if (SBYTE7(v351) < 0)
    operator delete((void *)v350);
  if (v360.i8[7] < 0)
    operator delete((void *)v359.i64[0]);
  InputTensor = ZinIrOpLayer::GetInputTensor((ZinIrOpLayer *)v9, 0);
  v26 = *(int64x2_t *)(InputTensor + 64);
  v359 = *(int64x2_t *)(InputTensor + 48);
  v360 = v26;
  v361 = *(_QWORD *)(InputTensor + 80);
  v27 = *(_DWORD *)(ZinIrOpLayer::GetInputTensor((ZinIrOpLayer *)v9, 0) + 88);
  if (v360.i64[1] == 1 && v14 != 4)
  {
    v28 = 1;
    v29 = 4;
    goto LABEL_66;
  }
  if (v360.i64[0] == 1 && v14 != 3)
  {
    v28 = 1;
    v29 = 3;
    goto LABEL_66;
  }
  if (v359.i64[1] == 1 && v14 != 2)
  {
    v28 = 1;
    v29 = 2;
    goto LABEL_66;
  }
  if (v361 == 1 && v14 != 1)
  {
    v29 = 1;
LABEL_48:
    v28 = 1;
    goto LABEL_66;
  }
  if (v359.i64[0] == 1 && v14)
  {
    v29 = 0;
    goto LABEL_48;
  }
  *(int64x2_t *)__p = v359;
  *(int64x2_t *)&__p[16] = v360;
  *(_QWORD *)&__p[32] = v361;
  if (v14)
  {
    if (v14 == 1)
      v30 = 0x200000003;
    else
      v30 = 1;
  }
  else
  {
    v30 = 0x100000002;
  }
  *(_QWORD *)&v354 = v30;
  *(int64x2_t *)&__p[40] = v359;
  *(int64x2_t *)&__p[56] = v360;
  *(_QWORD *)&__p[72] = v361;
  ValueAt = GetValueAtDimension<ZinTensorDimensions>(v359.i64, v30);
  v32 = GetValueAtDimension<ZinTensorDimensions>(v359.i64, SDWORD1(v354));
  v33 = SetValueAtDimension<ZinTensorDimensions>(&__p[40], SDWORD1(v354), v32 * ValueAt);
  v34 = SetValueAtDimension<ZinTensorDimensions>(&__p[40], v354, 1);
  v35 = **(ZinIrOpLayer ***)(v9 + 88);
  v36 = operator new(0x14uLL);
  *((_QWORD *)&v350 + 1) = v36 + 5;
  *(_QWORD *)&v351 = v36 + 5;
  v36[4] = 4;
  *(_OWORD *)v36 = xmmword_207A9C698;
  *(_QWORD *)&v350 = v36;
  DimensionOrderHint::DimensionOrderHint(v357, &v350);
  Reshape = (ZinIrOpLayer *)ZinBuilder::CreateReshape(v15, (uint64_t)v336, (uint64_t)&v359, v27, (__int128 *)&__p[40], (const DimensionOrderHint *)v357);
  if (*(_QWORD *)v357)
  {
    *(_QWORD *)&v357[8] = *(_QWORD *)v357;
    operator delete(*(void **)v357);
  }
  if ((_QWORD)v350)
  {
    *((_QWORD *)&v350 + 1) = v350;
    operator delete((void *)v350);
  }
  v348.__r_.__value_.__r.__words[0] = v9;
  *(_QWORD *)&v350 = &v348;
  *((_QWORD *)&v350 + 1) = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(v357, &v350);
  inserted = ZinIrOpLayerGraph::InsertNodeBetween(a1, Reshape, v35, (ZinIrOpLayer *)v9, (ZinIrOpLayer ***)v357);
  *(_QWORD *)v357 = &unk_24C02BB18;
  if (*(_QWORD *)&v357[8])
  {
    *(_QWORD *)&v357[16] = *(_QWORD *)&v357[8];
    operator delete(*(void **)&v357[8]);
  }
  if (*(_BYTE *)(a6 + 88))
    *(_BYTE *)(a6 + 88) = 0;
  v39 = *(_OWORD *)&__p[48];
  *(_OWORD *)(a6 + 32) = *(_OWORD *)&__p[32];
  *(_OWORD *)(a6 + 48) = v39;
  *(_OWORD *)(a6 + 64) = *(_OWORD *)&__p[64];
  *(_QWORD *)(a6 + 80) = v354;
  v40 = *(_OWORD *)&__p[16];
  *(_OWORD *)a6 = *(_OWORD *)__p;
  *(_OWORD *)(a6 + 16) = v40;
  *(_BYTE *)(a6 + 88) = 1;
  if (v34 | v33)
    v28 = 0;
  else
    v28 = inserted;
  v361 = *(_QWORD *)&__p[72];
  v359 = *(int64x2_t *)&__p[40];
  v360 = *(int64x2_t *)&__p[56];
  v29 = v354;
LABEL_66:
  v41 = *(_QWORD *)(v9 + 64);
  v42 = *(_DWORD *)(v41 + 8);
  if (v42 == 65)
  {
    (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(v9 + 88) + 80))(__p, **(_QWORD **)(v9 + 88), 0, 0);
    *(int64x2_t *)&__p[8] = v359;
    *(int64x2_t *)&__p[24] = v360;
    *(_QWORD *)&__p[40] = v361;
    v51 = operator new(0x78uLL);
    *(_QWORD *)&v357[8] = v51 + 30;
    *(_QWORD *)&v357[16] = v51 + 30;
    v51[28] = v356;
    v52 = v355;
    v53 = *(_OWORD *)&__p[64];
    *((_OWORD *)v51 + 5) = v354;
    *((_OWORD *)v51 + 6) = v52;
    v54 = *(_OWORD *)&__p[16];
    *(_OWORD *)v51 = *(_OWORD *)__p;
    *((_OWORD *)v51 + 1) = v54;
    v55 = *(_OWORD *)&__p[48];
    *((_OWORD *)v51 + 2) = *(_OWORD *)&__p[32];
    *((_OWORD *)v51 + 3) = v55;
    *((_OWORD *)v51 + 4) = v53;
    *(_QWORD *)v357 = v51;
    v56 = (*(uint64_t (**)(std::string::size_type, _QWORD, _QWORD))(*(_QWORD *)v9 + 32))(v9, 0, 0);
    SortLayer = (ZinIrOpLayer *)ZinBuilder::CreateSortLayer(v15, (uint64_t)v336, (uint64_t *)v357, *(_DWORD *)(v56 + 88), *(_DWORD *)(v41 + 12), *(_DWORD *)(v41 + 16), v29, v41 + 24, *(_BYTE *)(v41 + 48));
    if (*(_QWORD *)v357)
    {
      *(_QWORD *)&v357[8] = *(_QWORD *)v357;
      operator delete(*(void **)v357);
    }
    *(_QWORD *)v357 = &unk_24C02BB18;
    memset(&v357[8], 0, 24);
    v28 &= ZinIrOpLayerGraph::ReplaceNode(a1, (ZinIrOpLayer *)v9, SortLayer, (const Layer2TDMapper::SourceLayer *)v357);
    *(_QWORD *)v357 = &unk_24C02BB18;
    v50 = *(void **)&v357[8];
    if (!*(_QWORD *)&v357[8])
      goto LABEL_78;
    *(_QWORD *)&v357[16] = *(_QWORD *)&v357[8];
  }
  else
  {
    if (v42 != 66)
    {
      SortLayer = 0;
      goto LABEL_78;
    }
    (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(v9 + 88) + 80))(__p, **(_QWORD **)(v9 + 88), 0, 0);
    v43 = operator new(0x78uLL);
    *(_QWORD *)&v357[8] = v43 + 30;
    *(_QWORD *)&v357[16] = v43 + 30;
    v43[28] = v356;
    v44 = v355;
    v45 = *(_OWORD *)&__p[64];
    *((_OWORD *)v43 + 5) = v354;
    *((_OWORD *)v43 + 6) = v44;
    v46 = *(_OWORD *)&__p[16];
    *(_OWORD *)v43 = *(_OWORD *)__p;
    *((_OWORD *)v43 + 1) = v46;
    v47 = *(_OWORD *)&__p[48];
    *((_OWORD *)v43 + 2) = *(_OWORD *)&__p[32];
    *((_OWORD *)v43 + 3) = v47;
    *((_OWORD *)v43 + 4) = v45;
    *(_QWORD *)v357 = v43;
    v48 = (*(uint64_t (**)(std::string::size_type, _QWORD, _QWORD))(*(_QWORD *)v9 + 32))(v9, 0, 0);
    SortLayer = (ZinIrOpLayer *)ZinBuilder::CreateTopK(v15, (uint64_t)v336, (uint64_t *)v357, *(_DWORD *)(v48 + 88), *(_DWORD *)(v41 + 12), *(_QWORD *)(v41 + 16), *(_DWORD *)(v41 + 24), v29, v41 + 32, *(_BYTE *)(v41 + 56));
    if (*(_QWORD *)v357)
    {
      *(_QWORD *)&v357[8] = *(_QWORD *)v357;
      operator delete(*(void **)v357);
    }
    *(_QWORD *)__p = &unk_24C02BB18;
    memset(&__p[8], 0, 24);
    v28 &= ZinIrOpLayerGraph::ReplaceNode(a1, (ZinIrOpLayer *)v9, SortLayer, (const Layer2TDMapper::SourceLayer *)__p);
    *(_QWORD *)__p = &unk_24C02BB18;
    v50 = *(void **)&__p[8];
    if (!*(_QWORD *)&__p[8])
      goto LABEL_78;
    *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
  }
  operator delete(v50);
LABEL_78:
  v336[0] = off_24C01FBB0;
  if (v338 < 0)
    operator delete(v336[1]);
  if (SortLayer)
    v57 = v28;
  else
    v57 = 0;
  if (v57 != 1)
    ZinAssertImpl("RCAS Vector Axis setting failed");
  v10 = *((_QWORD *)SortLayer + 8);
  v11 = *(_DWORD *)(v10 + 8);
  v9 = (std::string::size_type)SortLayer;
LABEL_85:
  v323 = v9;
  if (v11 == 65)
  {
    v58 = (_BYTE *)(v10 + 48);
  }
  else
  {
    if (v11 != 66)
      goto LABEL_345;
    v58 = (_BYTE *)(v10 + 56);
  }
  if (*v58)
  {
    if (v11 == 65)
    {
      v59 = (unsigned int *)(v10 + 16);
      v60 = (unsigned int *)(v10 + 20);
    }
    else
    {
      v59 = (unsigned int *)(v10 + 24);
      v60 = (unsigned int *)(v10 + 28);
    }
    v61 = *v59 | ((unint64_t)*v60 << 32);
    v62 = *(_QWORD *)(v9 + 16);
    if (*(char *)(v9 + 47) >= 0)
      v63 = *(unsigned __int8 *)(v9 + 47);
    else
      v63 = *(_QWORD *)(v9 + 32);
    std::string::basic_string[abi:ne180100]((uint64_t)&v359, v63 + 1);
    if (v360.i8[7] >= 0)
      v64 = &v359;
    else
      v64 = (int64x2_t *)v359.i64[0];
    if (v63)
    {
      if (*(char *)(v9 + 47) >= 0)
        v65 = (const void *)(v9 + 24);
      else
        v65 = *(const void **)(v9 + 24);
      memmove(v64, v65, v63);
    }
    *(__int16 *)((char *)v64->i16 + v63) = 95;
    std::string::basic_string[abi:ne180100]<0>(&v350, "rcas_cnst_vectax");
    v66 = std::string::append((std::string *)&v350, "_xfm", 4uLL);
    v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
    *(_QWORD *)&v357[16] = *((_QWORD *)&v66->__r_.__value_.__l + 2);
    *(_OWORD *)v357 = v67;
    v66->__r_.__value_.__l.__size_ = 0;
    v66->__r_.__value_.__r.__words[2] = 0;
    v66->__r_.__value_.__r.__words[0] = 0;
    if (v357[23] >= 0)
      v68 = v357;
    else
      v68 = *(const std::string::value_type **)v357;
    if (v357[23] >= 0)
      v69 = v357[23];
    else
      v69 = *(_QWORD *)&v357[8];
    v70 = std::string::append((std::string *)&v359, v68, v69);
    v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
    *(_QWORD *)&__p[16] = *((_QWORD *)&v70->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v71;
    v70->__r_.__value_.__l.__size_ = 0;
    v70->__r_.__value_.__r.__words[2] = 0;
    v70->__r_.__value_.__r.__words[0] = 0;
    ZinObjectNameFactory::ZinObjectNameFactory(v336, __p);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if ((v357[23] & 0x80000000) != 0)
      operator delete(*(void **)v357);
    if (SBYTE7(v351) < 0)
      operator delete((void *)v350);
    if (v360.i8[7] < 0)
      operator delete((void *)v359.i64[0]);
    v316 = **(uint64_t ****)(v9 + 88);
    v72 = ZinIrOpLayer::GetInputTensor((ZinIrOpLayer *)v9, 0);
    v73 = *(int64x2_t *)(v72 + 64);
    v359 = *(int64x2_t *)(v72 + 48);
    v360 = v73;
    v361 = *(_QWORD *)(v72 + 80);
    v74 = SetValueAtDimension<ZinTensorDimensions>(&v359, SHIDWORD(v61), 1);
    if (a3 != 3 && a3 != 10)
      ZinAssertImpl("Indices must be either fp16 or uint16 format");
    v358 = 1065353216;
    v312 = v72 + 48;
    memset(v357, 0, sizeof(v357));
    v345 = 0;
    v346 = 0;
    v347 = 0;
    v75 = v361 * v359.i64[0] * v359.i64[1] * v360.i64[0] * v360.i64[1];
    v314 = HIDWORD(v61);
    v315 = v62;
    v313 = v74;
    if (a3 != 3)
    {
      v331[0] = 0;
      v331[1] = 0;
      v332 = 0;
      std::vector<unsigned short>::reserve(v331, v75);
      v111 = v359.i64[0];
      if (v359.i64[0] >= 1)
      {
        v324 = 0;
        v112 = v361;
        do
        {
          if (v112 >= 1)
          {
            v327 = 0;
            v113 = v359.i64[1];
            do
            {
              if (v113 >= 1)
              {
                v114 = 0;
                v115 = v360.i64[0];
                do
                {
                  if (v115 >= 1)
                  {
                    v116 = 0;
                    v117 = v360.i64[1];
                    do
                    {
                      if (v117 >= 1)
                      {
                        if ((_DWORD)v61 == 5)
                          ZinAssertImpl("Invalid sort dimension");
                        v118 = 0;
                        do
                        {
                          switch((int)v61)
                          {
                            case 0:
                              v119 = v324;
                              goto LABEL_191;
                            case 1:
                              v119 = v327;
LABEL_191:
                              v120 = v119;
                              break;
                            case 2:
                              v120 = v114;
                              break;
                            case 3:
                              v120 = v116;
                              break;
                            case 4:
                              v120 = v118;
                              break;
                            default:
                              v120 = 0;
                              break;
                          }
                          v121 = (char *)v331[1];
                          if (v331[1] >= v332)
                          {
                            v123 = (char *)v331[0];
                            v124 = (char *)v331[1] - (char *)v331[0];
                            if ((char *)v331[1] - (char *)v331[0] <= -3)
                              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                            v125 = v124 >> 1;
                            if (v332 - (char *)v331[0] <= (unint64_t)((v124 >> 1) + 1))
                              v126 = v125 + 1;
                            else
                              v126 = v332 - (char *)v331[0];
                            if ((unint64_t)(v332 - (char *)v331[0]) >= 0x7FFFFFFFFFFFFFFELL)
                              v127 = 0x7FFFFFFFFFFFFFFFLL;
                            else
                              v127 = v126;
                            if (v127)
                            {
                              v128 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<half>>((uint64_t)&v332, v127);
                              v123 = (char *)v331[0];
                              v121 = (char *)v331[1];
                            }
                            else
                            {
                              v128 = 0;
                            }
                            v129 = &v128[2 * v125];
                            *(_WORD *)v129 = v120;
                            v122 = v129 + 2;
                            while (v121 != v123)
                            {
                              v130 = *((_WORD *)v121 - 1);
                              v121 -= 2;
                              *((_WORD *)v129 - 1) = v130;
                              v129 -= 2;
                            }
                            v331[0] = v129;
                            v331[1] = v122;
                            v332 = &v128[2 * v127];
                            if (v123)
                              operator delete(v123);
                          }
                          else
                          {
                            *(_WORD *)v331[1] = v120;
                            v122 = v121 + 2;
                          }
                          v331[1] = v122;
                          ++v118;
                          v117 = v360.i64[1];
                        }
                        while (v360.i64[1] > v118);
                        v115 = v360.i64[0];
                      }
                      ++v116;
                    }
                    while (v115 > v116);
                    v113 = v359.i64[1];
                    v9 = v323;
                  }
                  ++v114;
                }
                while (v113 > v114);
                v112 = v361;
              }
              ++v327;
            }
            while (v112 > v327);
            v111 = v359.i64[0];
          }
          ++v324;
        }
        while (v111 > v324);
      }
      std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned short>,std::allocator<ZinIrConstData_specialization<unsigned short>>,std::vector<unsigned short>,void>((uint64_t)v331, &v344);
      v334 = v344;
      v344 = 0uLL;
      ConstLayer = (ZinIrOpLayer *)ZinBuilder::CreateConstLayer(v315, (uint64_t)v336, (__int128 *)v359.i8, a3, (uint64_t *)&v334, 0, 0);
      v132 = (std::__shared_weak_count *)*((_QWORD *)&v334 + 1);
      if (*((_QWORD *)&v334 + 1))
      {
        v133 = (unint64_t *)(*((_QWORD *)&v334 + 1) + 8);
        do
          v134 = __ldaxr(v133);
        while (__stlxr(v134 - 1, v133));
        if (!v134)
        {
          ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
          std::__shared_weak_count::__release_weak(v132);
        }
      }
      v341 = (void *)v9;
      *(_QWORD *)&v350 = &v341;
      *((_QWORD *)&v350 + 1) = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(__p, &v350);
      v135 = ZinIrOpLayerGraph::AddNode(a1, ConstLayer, (ZinIrOpLayer ***)__p);
      *(_QWORD *)__p = &unk_24C02BB18;
      if (*(_QWORD *)&__p[8])
      {
        *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
        operator delete(*(void **)&__p[8]);
      }
      v360.i64[1] *= 2;
      (*(void (**)(_BYTE *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)ConstLayer + 80))(__p, ConstLayer, 0, 0);
      v136 = operator new(0x78uLL);
      *((_QWORD *)&v350 + 1) = (char *)v136 + 120;
      *(_QWORD *)&v351 = (char *)v136 + 120;
      v137 = v354;
      v136[4] = *(_OWORD *)&__p[64];
      v136[5] = v137;
      v136[6] = v355;
      *((_DWORD *)v136 + 28) = v356;
      v138 = *(_OWORD *)&__p[16];
      *v136 = *(_OWORD *)__p;
      v136[1] = v138;
      v139 = *(_OWORD *)&__p[48];
      v136[2] = *(_OWORD *)&__p[32];
      v136[3] = v139;
      *(_QWORD *)&v350 = v136;
      ReinterpretCastLayer = (ZinIrOpLayer *)ZinBuilder::CreateReinterpretCastLayer(v315, (uint64_t)v336, (uint64_t)&v350, (__int128 *)v359.i8, 2);
      if ((_QWORD)v350)
      {
        *((_QWORD *)&v350 + 1) = v350;
        operator delete((void *)v350);
      }
      v341 = (void *)v9;
      *(_QWORD *)&v350 = &v341;
      *((_QWORD *)&v350 + 1) = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(__p, &v350);
      v141 = ZinIrOpLayerGraph::AddNode(a1, ReinterpretCastLayer, (ZinIrOpLayer ***)__p);
      *(_QWORD *)__p = &unk_24C02BB18;
      if (*(_QWORD *)&__p[8])
      {
        *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
        operator delete(*(void **)&__p[8]);
      }
      v142 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)ConstLayer, (uint64_t)ReinterpretCastLayer, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      v143 = *(_OWORD *)(v312 + 16);
      v350 = *(_OWORD *)v312;
      v351 = v143;
      v144 = *(_QWORD *)(v312 + 32);
      *((_QWORD *)&v351 + 1) = 2 * *((_QWORD *)&v143 + 1);
      v352 = v144;
      ((void (*)(_BYTE *__return_ptr, uint64_t **, _QWORD, _QWORD))(*v316)[10])(__p, v316, 0, 0);
      v145 = operator new(0x78uLL);
      v342 = (uint64_t)v145 + 120;
      v343 = (char *)v145 + 120;
      v146 = v354;
      v145[4] = *(_OWORD *)&__p[64];
      v145[5] = v146;
      v145[6] = v355;
      *((_DWORD *)v145 + 28) = v356;
      v147 = *(_OWORD *)&__p[16];
      *v145 = *(_OWORD *)__p;
      v145[1] = v147;
      v148 = *(_OWORD *)&__p[48];
      v145[2] = *(_OWORD *)&__p[32];
      v145[3] = v148;
      v341 = v145;
      v149 = (ZinIrOpLayer *)ZinBuilder::CreateReinterpretCastLayer(v315, (uint64_t)v336, (uint64_t)&v341, &v350, 2);
      if (v341)
      {
        v342 = (uint64_t)v341;
        operator delete(v341);
      }
      v340 = v9;
      v341 = &v340;
      v342 = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(__p, &v341);
      v150 = ZinIrOpLayerGraph::AddNode(a1, v149, (ZinIrOpLayer ***)__p);
      *(_QWORD *)__p = &unk_24C02BB18;
      if (*(_QWORD *)&__p[8])
      {
        *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
        operator delete(*(void **)&__p[8]);
      }
      v151 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)v316, (uint64_t)v149, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      v152 = v142;
      *(_QWORD *)__p = v149;
      std::__hash_table<ZinIrTensor const*,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const* const&>((uint64_t)v357, __p, __p);
      v153 = &v346->__vftable;
      if ((unint64_t)v346 >= v347)
      {
        v159 = ((char *)v346 - (_BYTE *)v345) >> 3;
        if ((unint64_t)(v159 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v160 = (uint64_t)(v347 - (_QWORD)v345) >> 2;
        if (v160 <= v159 + 1)
          v160 = v159 + 1;
        if (v347 - (unint64_t)v345 >= 0x7FFFFFFFFFFFFFF8)
          v161 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v161 = v160;
        if (v161)
          v162 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v347, v161);
        else
          v162 = 0;
        v182 = (ZinIrOpLayer **)&v162[8 * v159];
        v183 = &v162[8 * v161];
        *v182 = v149;
        v154 = v182 + 1;
        v185 = (char *)v345;
        v184 = (char *)v346;
        if (v346 != v345)
        {
          do
          {
            v186 = (ZinIrOpLayer *)*((_QWORD *)v184 - 1);
            v184 -= 8;
            *--v182 = v186;
          }
          while (v184 != v185);
          v184 = (char *)v345;
        }
        v345 = v182;
        v346 = (std::__shared_weak_count *)v154;
        v347 = (unint64_t)v183;
        if (v184)
          operator delete(v184);
      }
      else
      {
        v346->__vftable = (std::__shared_weak_count_vtbl *)v149;
        v154 = (ZinIrOpLayer **)(v153 + 1);
      }
      v346 = (std::__shared_weak_count *)v154;
      if ((unint64_t)v154 >= v347)
      {
        v189 = ((char *)v154 - (_BYTE *)v345) >> 3;
        if ((unint64_t)(v189 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v190 = (uint64_t)(v347 - (_QWORD)v345) >> 2;
        if (v190 <= v189 + 1)
          v190 = v189 + 1;
        if (v347 - (unint64_t)v345 >= 0x7FFFFFFFFFFFFFF8)
          v191 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v191 = v190;
        if (v191)
          v192 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v347, v191);
        else
          v192 = 0;
        v187 = v141;
        v193 = (ZinIrOpLayer **)&v192[8 * v189];
        v194 = &v192[8 * v191];
        *v193 = ReinterpretCastLayer;
        v188 = (std::__shared_weak_count *)(v193 + 1);
        v196 = (char *)v345;
        v195 = (char *)v346;
        if (v346 == v345)
        {
          v105 = v314;
          v102 = v315;
        }
        else
        {
          v105 = v314;
          v102 = v315;
          do
          {
            v197 = (ZinIrOpLayer *)*((_QWORD *)v195 - 1);
            v195 -= 8;
            *--v193 = v197;
          }
          while (v195 != v196);
          v195 = (char *)v345;
        }
        v345 = v193;
        v346 = v188;
        v347 = (unint64_t)v194;
        if (v195)
          operator delete(v195);
      }
      else
      {
        v187 = v141;
        *v154 = ReinterpretCastLayer;
        v188 = (std::__shared_weak_count *)(v154 + 1);
        v105 = v314;
        v102 = v315;
      }
      v198 = (v135 && v187) & v152 & v150;
      v346 = v188;
      v199 = (std::__shared_weak_count *)*((_QWORD *)&v344 + 1);
      if (*((_QWORD *)&v344 + 1))
      {
        v200 = (unint64_t *)(*((_QWORD *)&v344 + 1) + 8);
        do
          v201 = __ldaxr(v200);
        while (__stlxr(v201 - 1, v200));
        if (!v201)
        {
          ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
          std::__shared_weak_count::__release_weak(v199);
        }
      }
      v108 = v198 & v151;
      v181 = v331[0];
      if (!v331[0])
        goto LABEL_315;
      v331[1] = v331[0];
      goto LABEL_314;
    }
    v350 = 0uLL;
    *(_QWORD *)&v351 = 0;
    std::vector<half>::reserve((void **)&v350, v75);
    v76 = v359.i64[0];
    if (v359.i64[0] >= 1)
    {
      v326 = 0;
      v77 = v361;
      do
      {
        if (v77 >= 1)
        {
          v78 = 0;
          v79 = v359.i64[1];
          do
          {
            if (v79 >= 1)
            {
              v80 = 0;
              v81 = v360.i64[0];
              do
              {
                if (v81 >= 1)
                {
                  v82 = 0;
                  v83 = v360.i64[1];
                  do
                  {
                    if (v83 >= 1)
                    {
                      if ((_DWORD)v61 == 5)
                        ZinAssertImpl("Invalid sort dimension");
                      v84 = 0;
                      do
                      {
                        switch((int)v61)
                        {
                          case 0:
                            v85 = v326;
                            break;
                          case 1:
                            v85 = v78;
                            break;
                          case 2:
                            v85 = v80;
                            break;
                          case 3:
                            v85 = v82;
                            break;
                          case 4:
                            v85 = v84;
                            break;
                          default:
                            v85 = 0;
                            break;
                        }
                        _S0 = (float)v85;
                        __asm { FCVT            H9, S0 }
                        v92 = (char *)*((_QWORD *)&v350 + 1);
                        if (*((_QWORD *)&v350 + 1) >= (unint64_t)v351)
                        {
                          v94 = (char *)v350;
                          v95 = *((_QWORD *)&v350 + 1) - v350;
                          if ((uint64_t)(*((_QWORD *)&v350 + 1) - v350) <= -3)
                            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                          v96 = v95 >> 1;
                          if ((_QWORD)v351 - (_QWORD)v350 <= (unint64_t)((v95 >> 1) + 1))
                            v97 = v96 + 1;
                          else
                            v97 = v351 - v350;
                          if ((_QWORD)v351 - (_QWORD)v350 >= 0x7FFFFFFFFFFFFFFEuLL)
                            v98 = 0x7FFFFFFFFFFFFFFFLL;
                          else
                            v98 = v97;
                          if (v98)
                          {
                            v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<half>>((uint64_t)&v351, v98);
                            v92 = (char *)*((_QWORD *)&v350 + 1);
                            v94 = (char *)v350;
                          }
                          else
                          {
                            v99 = 0;
                          }
                          v100 = &v99[2 * v96];
                          *(_WORD *)v100 = _H9;
                          v93 = v100 + 2;
                          while (v92 != v94)
                          {
                            v101 = *((_WORD *)v92 - 1);
                            v92 -= 2;
                            *((_WORD *)v100 - 1) = v101;
                            v100 -= 2;
                          }
                          *(_QWORD *)&v350 = v100;
                          *((_QWORD *)&v350 + 1) = v93;
                          *(_QWORD *)&v351 = &v99[2 * v98];
                          if (v94)
                            operator delete(v94);
                        }
                        else
                        {
                          **((_WORD **)&v350 + 1) = _H9;
                          v93 = v92 + 2;
                        }
                        *((_QWORD *)&v350 + 1) = v93;
                        ++v84;
                        v83 = v360.i64[1];
                      }
                      while (v360.i64[1] > v84);
                      v81 = v360.i64[0];
                    }
                    ++v82;
                  }
                  while (v81 > v82);
                  v79 = v359.i64[1];
                  v9 = v323;
                }
                ++v80;
              }
              while (v79 > v80);
              v77 = v361;
            }
            ++v78;
          }
          while (v77 > v78);
          v76 = v359.i64[0];
        }
        ++v326;
      }
      while (v76 > v326);
    }
    std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<half>,std::allocator<ZinIrConstData_specialization<half>>,std::vector<half>,void>((uint64_t)&v350, v331);
    v335 = *(_OWORD *)v331;
    v331[0] = 0;
    v331[1] = 0;
    v102 = v315;
    v103 = (ZinIrOpLayer *)ZinBuilder::CreateConstLayer(v315, (uint64_t)v336, (__int128 *)v359.i8, 3, (uint64_t *)&v335, 0, 0);
    v104 = (std::__shared_weak_count *)*((_QWORD *)&v335 + 1);
    v105 = v314;
    if (*((_QWORD *)&v335 + 1))
    {
      v106 = (unint64_t *)(*((_QWORD *)&v335 + 1) + 8);
      do
        v107 = __ldaxr(v106);
      while (__stlxr(v107 - 1, v106));
      if (!v107)
      {
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
      }
    }
    *(_QWORD *)&v344 = v9;
    v341 = &v344;
    v342 = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(__p, &v341);
    v108 = ZinIrOpLayerGraph::AddNode(a1, v103, (ZinIrOpLayer ***)__p);
    *(_QWORD *)__p = &unk_24C02BB18;
    if (*(_QWORD *)&__p[8])
    {
      *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
      operator delete(*(void **)&__p[8]);
    }
    v109 = &v346->__vftable;
    if ((unint64_t)v346 >= v347)
    {
      v155 = ((char *)v346 - (_BYTE *)v345) >> 3;
      if ((unint64_t)(v155 + 1) >> 61)
        goto LABEL_483;
      v156 = (uint64_t)(v347 - (_QWORD)v345) >> 2;
      if (v156 <= v155 + 1)
        v156 = v155 + 1;
      if (v347 - (unint64_t)v345 >= 0x7FFFFFFFFFFFFFF8)
        v157 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v157 = v156;
      if (v157)
        v158 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v347, v157);
      else
        v158 = 0;
      v163 = (uint64_t ***)&v158[8 * v155];
      v164 = &v158[8 * v157];
      *v163 = v316;
      v110 = (ZinIrOpLayer **)(v163 + 1);
      v166 = (char *)v345;
      v165 = (char *)v346;
      if (v346 != v345)
      {
        do
        {
          v167 = (uint64_t **)*((_QWORD *)v165 - 1);
          v165 -= 8;
          *--v163 = v167;
        }
        while (v165 != v166);
        v165 = (char *)v345;
      }
      v345 = v163;
      v346 = (std::__shared_weak_count *)v110;
      v347 = (unint64_t)v164;
      if (v165)
        operator delete(v165);
    }
    else
    {
      v346->__vftable = (std::__shared_weak_count_vtbl *)v316;
      v110 = (ZinIrOpLayer **)(v109 + 1);
    }
    v346 = (std::__shared_weak_count *)v110;
    if ((unint64_t)v110 < v347)
    {
      *v110 = v103;
      v168 = (std::__shared_weak_count *)(v110 + 1);
LABEL_276:
      v346 = v168;
      v178 = (std::__shared_weak_count *)v331[1];
      if (v331[1])
      {
        v179 = (unint64_t *)((char *)v331[1] + 8);
        do
          v180 = __ldaxr(v179);
        while (__stlxr(v180 - 1, v179));
        if (!v180)
        {
          ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
          std::__shared_weak_count::__release_weak(v178);
        }
      }
      v181 = (void *)v350;
      if (!(_QWORD)v350)
        goto LABEL_315;
      *((_QWORD *)&v350 + 1) = v350;
LABEL_314:
      operator delete(v181);
LABEL_315:
      if (v313)
        v202 = 0;
      else
        v202 = v108;
      ConcatMode = ZinConcatLayerUtils::GetConcatMode(v105);
      if ((_DWORD)ConcatMode == 7)
        ZinAssertImpl("Concat mode is not valid");
      v330 = 0;
      ZinBuilder::CreateConcat(v102, (uint64_t)v336, (char **)&v345, ConcatMode, 1, &v330, 0, (uint64_t)v331);
      v204 = v330;
      v330 = 0;
      if (v204)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v330, v204);
      v205 = (ZinIrOpLayer *)*((_QWORD *)v331[1] - 1);
      v341 = (void *)v9;
      *(_QWORD *)&v350 = &v341;
      *((_QWORD *)&v350 + 1) = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(__p, &v350);
      v206 = ZinBuilder::AddConcatToGraph(a1, (uint64_t *)&v345, v331, (ZinIrOpLayer ***)__p);
      *(_QWORD *)__p = &unk_24C02BB18;
      if (*(_QWORD *)&__p[8])
      {
        *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
        operator delete(*(void **)&__p[8]);
      }
      v207 = v331[0];
      v208 = v331[1];
      while (v207 != v208)
      {
        *(_QWORD *)__p = 0;
        *(_QWORD *)__p = *v207;
        std::__hash_table<ZinIrTensor const*,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const* const&>((uint64_t)v357, __p, __p);
        ++v207;
      }
      if (a3 == 3)
      {
        std::unordered_set<ZinIrOpLayer *>::unordered_set((uint64_t)&v348, (uint64_t)v357);
        v9 = v323;
        v209 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a1, v316, v205, &v348);
        v210 = &v348;
      }
      else
      {
        v211 = *(_OWORD *)(v312 + 16);
        v350 = *(_OWORD *)v312;
        v351 = v211;
        v352 = *(_QWORD *)(v312 + 32);
        v212 = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)&v350, v105);
        v213 = SetValueAtDimension<ZinTensorDimensions>(&v350, v105, v212 + 1);
        (*(void (**)(_BYTE *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v205 + 80))(__p, v205, 0, 0);
        v214 = operator new(0x78uLL);
        v342 = (uint64_t)v214 + 120;
        v343 = (char *)v214 + 120;
        v215 = v354;
        v214[4] = *(_OWORD *)&__p[64];
        v214[5] = v215;
        v214[6] = v355;
        *((_DWORD *)v214 + 28) = v356;
        v216 = *(_OWORD *)&__p[16];
        *v214 = *(_OWORD *)__p;
        v214[1] = v216;
        v217 = *(_OWORD *)&__p[48];
        v214[2] = *(_OWORD *)&__p[32];
        v214[3] = v217;
        v341 = v214;
        v218 = (ZinIrOpLayer *)ZinBuilder::CreateReinterpretCastLayer(v102, (uint64_t)v336, (uint64_t)&v341, &v350, 3);
        if (v341)
        {
          v342 = (uint64_t)v341;
          operator delete(v341);
        }
        *(_QWORD *)&v344 = v323;
        v341 = &v344;
        v342 = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(__p, &v341);
        v219 = ZinIrOpLayerGraph::AddNode(a1, v218, (ZinIrOpLayer ***)__p);
        *(_QWORD *)__p = &unk_24C02BB18;
        if (*(_QWORD *)&__p[8])
        {
          *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
          operator delete(*(void **)&__p[8]);
        }
        v9 = v323;
        v220 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)v205, (uint64_t)v218, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        if (v213)
          v221 = 0;
        else
          v221 = v219;
        std::unordered_set<ZinIrOpLayer *>::unordered_set((uint64_t)&v339, (uint64_t)v357);
        v209 = v221 & v220 & ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a1, v316, v218, &v339);
        v210 = &v339;
      }
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v210);
      if (v333 && v331[0])
      {
        v331[1] = v331[0];
        operator delete(v331[0]);
      }
      if (v345)
      {
        v346 = (std::__shared_weak_count *)v345;
        operator delete(v345);
      }
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v357);
      v336[0] = off_24C01FBB0;
      if (v338 < 0)
        operator delete(v336[1]);
      if ((v202 & v206 & v209) == 0)
        ZinAssertImpl("RCAS Indices handling failed");
      v10 = *(_QWORD *)(v9 + 64);
      goto LABEL_345;
    }
    v169 = ((char *)v110 - (_BYTE *)v345) >> 3;
    if (!((unint64_t)(v169 + 1) >> 61))
    {
      v170 = (uint64_t)(v347 - (_QWORD)v345) >> 2;
      if (v170 <= v169 + 1)
        v170 = v169 + 1;
      if (v347 - (unint64_t)v345 >= 0x7FFFFFFFFFFFFFF8)
        v171 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v171 = v170;
      if (v171)
        v172 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v347, v171);
      else
        v172 = 0;
      v173 = (ZinIrOpLayer **)&v172[8 * v169];
      v174 = &v172[8 * v171];
      *v173 = v103;
      v168 = (std::__shared_weak_count *)(v173 + 1);
      v176 = (char *)v345;
      v175 = (char *)v346;
      if (v346 != v345)
      {
        do
        {
          v177 = (ZinIrOpLayer *)*((_QWORD *)v175 - 1);
          v175 -= 8;
          *--v173 = v177;
        }
        while (v175 != v176);
        v175 = (char *)v345;
      }
      v345 = v173;
      v346 = v168;
      v347 = (unint64_t)v174;
      if (v175)
        operator delete(v175);
      goto LABEL_276;
    }
LABEL_483:
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  }
LABEL_345:
  v222 = *(_DWORD *)(v10 + 8);
  if (v222 == 65)
  {
    v223 = (int *)(v10 + 16);
    v224 = (int *)(v10 + 20);
  }
  else
  {
    if (v222 != 66)
    {
      v227 = (uint64_t ****)(v9 + 88);
      v228 = **(ZinIrOpLayer ***)(v9 + 88);
      v226 = 5;
      v225 = 5;
      goto LABEL_352;
    }
    v223 = (int *)(v10 + 24);
    v224 = (int *)(v10 + 28);
  }
  v225 = *v223;
  v226 = *v224;
  v227 = (uint64_t ****)(v9 + 88);
  v228 = **(ZinIrOpLayer ***)(v9 + 88);
  if (*v223 == 2)
  {
    LOBYTE(v229) = 1;
    goto LABEL_359;
  }
LABEL_352:
  v230 = (ZinIrOpLayer *)ZinRCASDecompositionUtils::TransposeRCASDimensions((uint64_t)v228, v225, 2);
  v359.i64[0] = v323;
  v336[0] = &v359;
  v336[1] = (void *)1;
  Layer2TDMapper::SourceLayer::SourceLayer(__p, v336);
  v9 = v323;
  v229 = ZinIrOpLayerGraph::InsertNodeBetween(a1, v230, v228, (ZinIrOpLayer *)v323, (ZinIrOpLayer ***)__p);
  *(_QWORD *)__p = &unk_24C02BB18;
  if (*(_QWORD *)&__p[8])
  {
    *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
    operator delete(*(void **)&__p[8]);
  }
  if (v229)
    v228 = v230;
  else
    v228 = 0;
  if (v226 == 2)
    v226 = v225;
LABEL_359:
  if (v226 != 4 && (v225 != 4 || v226 != 2))
  {
    v231 = **(ZinIrOpLayer ***)(v9 + 88);
    v228 = (ZinIrOpLayer *)ZinRCASDecompositionUtils::TransposeRCASDimensions((uint64_t)v231, v226, 4);
    v359.i64[0] = v323;
    v336[0] = &v359;
    v336[1] = (void *)1;
    Layer2TDMapper::SourceLayer::SourceLayer(__p, v336);
    v232 = v229 & ZinIrOpLayerGraph::InsertNodeBetween(a1, v228, v231, (ZinIrOpLayer *)v323, (ZinIrOpLayer ***)__p);
    *(_QWORD *)__p = &unk_24C02BB18;
    if (*(_QWORD *)&__p[8])
    {
      *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
      operator delete(*(void **)&__p[8]);
    }
    if ((v232 & 1) == 0)
      goto LABEL_476;
  }
  if (!v228)
LABEL_476:
    ZinAssertImpl("RCAS layer pre-processing failed");
  v233 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v228 + 32))(v228, 0, 0);
  v234 = *(_OWORD *)(v233 + 48);
  v235 = *(_OWORD *)(v233 + 64);
  *(_QWORD *)(a5 + 32) = *(_QWORD *)(v233 + 80);
  *(_OWORD *)a5 = v234;
  *(_OWORD *)(a5 + 16) = v235;
  v236 = **v227;
  v237 = ((uint64_t (*)(uint64_t **, _QWORD, _QWORD))(*v236)[4])(v236, 0, 0);
  v238 = (uint64_t)v236[2];
  if (*((char *)v236 + 47) >= 0)
    v239 = *((unsigned __int8 *)v236 + 47);
  else
    v239 = (size_t)v236[4];
  std::string::basic_string[abi:ne180100]((uint64_t)v357, v239 + 1);
  if (v357[23] >= 0)
    v240 = v357;
  else
    v240 = *(_BYTE **)v357;
  if (v239)
  {
    if (*((char *)v236 + 47) >= 0)
      v241 = (uint64_t *)(v236 + 3);
    else
      v241 = v236[3];
    memmove(v240, v241, v239);
  }
  *(_WORD *)&v240[v239] = 95;
  std::string::basic_string[abi:ne180100]<0>(&v348, "rcas_fold_batch");
  v242 = std::string::append(&v348, "_xfm", 4uLL);
  v243 = *(_OWORD *)&v242->__r_.__value_.__l.__data_;
  *(_QWORD *)&v351 = *((_QWORD *)&v242->__r_.__value_.__l + 2);
  v350 = v243;
  v242->__r_.__value_.__l.__size_ = 0;
  v242->__r_.__value_.__r.__words[2] = 0;
  v242->__r_.__value_.__r.__words[0] = 0;
  if ((SBYTE7(v351) & 0x80u) == 0)
    v244 = (const std::string::value_type *)&v350;
  else
    v244 = (const std::string::value_type *)v350;
  if ((SBYTE7(v351) & 0x80u) == 0)
    v245 = BYTE7(v351);
  else
    v245 = *((_QWORD *)&v350 + 1);
  v246 = std::string::append((std::string *)v357, v244, v245);
  v247 = *(int64x2_t *)&v246->__r_.__value_.__l.__data_;
  v360.i64[0] = v246->__r_.__value_.__r.__words[2];
  v359 = v247;
  v246->__r_.__value_.__l.__size_ = 0;
  v246->__r_.__value_.__r.__words[2] = 0;
  v246->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v339, 0);
  if ((v339.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v248 = &v339;
  else
    v248 = (std::string *)v339.__r_.__value_.__r.__words[0];
  if ((v339.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v339.__r_.__value_.__r.__words[2]);
  else
    size = v339.__r_.__value_.__l.__size_;
  v250 = std::string::append((std::string *)&v359, (const std::string::value_type *)v248, size);
  v251 = *(_OWORD *)&v250->__r_.__value_.__l.__data_;
  v337 = (void *)v250->__r_.__value_.__r.__words[2];
  *(_OWORD *)v336 = v251;
  v250->__r_.__value_.__l.__size_ = 0;
  v250->__r_.__value_.__r.__words[2] = 0;
  v250->__r_.__value_.__r.__words[0] = 0;
  ZinObjectNameFactory::ZinObjectNameFactory(__p, v336);
  if (SHIBYTE(v337) < 0)
    operator delete(v336[0]);
  if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v339.__r_.__value_.__l.__data_);
  if (v360.i8[7] < 0)
    operator delete((void *)v359.i64[0]);
  if (SBYTE7(v351) < 0)
    operator delete((void *)v350);
  if (SHIBYTE(v348.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v348.__r_.__value_.__l.__data_);
  if ((v357[23] & 0x80000000) != 0)
    operator delete(*(void **)v357);
  if (*(_QWORD *)(v237 + 64) != 1 || *(_QWORD *)(v237 + 80) != 1)
  {
    v252 = (ZinIrOpLayer *)ZinRCASDecompositionUtils::TransposeRCASDimensions((uint64_t)v236, 2, 3);
    *(_QWORD *)v357 = v323;
    v359.i64[0] = (uint64_t)v357;
    v359.i64[1] = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(v336, &v359);
    v253 = ZinIrOpLayerGraph::AddNode(a1, v252, (ZinIrOpLayer ***)v336);
    v336[0] = &unk_24C02BB18;
    if (v336[1])
    {
      v337 = v336[1];
      operator delete(v336[1]);
    }
    v254 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)v236, (uint64_t)v252, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    v359.i64[0] = (uint64_t)v252;
    std::unordered_set<ZinIrOpLayer *>::unordered_set((uint64_t)v336, &v359, 1);
    v325 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a1, v236, v252, v336);
    v328 = v253;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v336);
    v255 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v252 + 32))(v252, 0, 0);
    v256 = *(int64x2_t *)(v255 + 64);
    v359 = *(int64x2_t *)(v255 + 48);
    v360 = v256;
    v359.i64[0] *= *(_QWORD *)(v255 + 80) * v359.i64[1];
    v359.i64[1] = 1;
    v361 = 1;
    v257 = *(_DWORD *)(v237 + 88);
    v258 = operator new(0x14uLL);
    *((_QWORD *)&v350 + 1) = v258 + 5;
    *(_QWORD *)&v351 = v258 + 5;
    v258[4] = 4;
    *(_OWORD *)v258 = xmmword_207A9C698;
    *(_QWORD *)&v350 = v258;
    DimensionOrderHint::DimensionOrderHint(v357, &v350);
    v259 = (ZinIrOpLayer *)ZinBuilder::CreateReshape(v238, (uint64_t)__p, v255 + 48, v257, (__int128 *)v359.i8, (const DimensionOrderHint *)v357);
    if (*(_QWORD *)v357)
    {
      *(_QWORD *)&v357[8] = *(_QWORD *)v357;
      operator delete(*(void **)v357);
    }
    if ((_QWORD)v350)
    {
      *((_QWORD *)&v350 + 1) = v350;
      operator delete((void *)v350);
    }
    v348.__r_.__value_.__r.__words[0] = v323;
    *(_QWORD *)&v350 = &v348;
    *((_QWORD *)&v350 + 1) = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(v357, &v350);
    v321 = ZinIrOpLayerGraph::AddNode(a1, v259, (ZinIrOpLayer ***)v357);
    *(_QWORD *)v357 = &unk_24C02BB18;
    if (*(_QWORD *)&v357[8])
    {
      *(_QWORD *)&v357[16] = *(_QWORD *)&v357[8];
      operator delete(*(void **)&v357[8]);
    }
    v318 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)v252, (uint64_t)v259, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    *(_QWORD *)&v350 = v259;
    std::unordered_set<ZinIrOpLayer *>::unordered_set((uint64_t)v357, &v350, 1);
    v260 = v254;
    v261 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a1, (uint64_t **)v252, v259, v357);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v357);
    v262 = (ZinIrOpLayer *)ZinRCASDecompositionUtils::TransposeRCASDimensions((uint64_t)v259, 3, 2);
    v339.__r_.__value_.__r.__words[0] = v323;
    v348.__r_.__value_.__r.__words[0] = (std::string::size_type)&v339;
    v348.__r_.__value_.__l.__size_ = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&v350, &v348);
    v263 = ZinIrOpLayerGraph::AddNode(a1, v262, (ZinIrOpLayer ***)&v350);
    *(_QWORD *)&v350 = &unk_24C02BB18;
    if (*((_QWORD *)&v350 + 1))
    {
      *(_QWORD *)&v351 = *((_QWORD *)&v350 + 1);
      operator delete(*((void **)&v350 + 1));
    }
    v264 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)v259, (uint64_t)v262, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    v348.__r_.__value_.__r.__words[0] = (std::string::size_type)v262;
    std::unordered_set<ZinIrOpLayer *>::unordered_set((uint64_t)&v350, &v348, 1);
    v265 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a1, (uint64_t **)v259, v262, &v350);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v350);
    v266 = *(_DWORD *)(v237 + 88);
    v331[0] = 0;
    CopyLayer = (ZinIrOpLayer *)ZinBuilder::CreateCopyLayer(v238, (uint64_t)v262, (uint64_t)__p, v266, v331);
    v268 = v331[0];
    v331[0] = 0;
    if (v268)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)v331, v268);
    v345 = (void *)v323;
    v339.__r_.__value_.__r.__words[0] = (std::string::size_type)&v345;
    v339.__r_.__value_.__l.__size_ = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&v348, &v339);
    v269 = ZinIrOpLayerGraph::AddNode(a1, CopyLayer, (ZinIrOpLayer ***)&v348);
    v348.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
    if (v348.__r_.__value_.__l.__size_)
    {
      v348.__r_.__value_.__r.__words[2] = v348.__r_.__value_.__l.__size_;
      operator delete((void *)v348.__r_.__value_.__l.__size_);
    }
    v270 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)v262, (uint64_t)CopyLayer, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    v339.__r_.__value_.__r.__words[0] = (std::string::size_type)CopyLayer;
    std::unordered_set<ZinIrOpLayer *>::unordered_set((uint64_t)&v348, &v339, 1);
    v271 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a1, (uint64_t **)v262, CopyLayer, &v348);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v348);
    if ((v328 & v260 & v325 & v321 & v318 & v261 & v263 & v264 & v265 & v269 & v270 & v271) != 0)
      v236 = (uint64_t **)CopyLayer;
    else
      v236 = 0;
  }
  *(_QWORD *)__p = off_24C01FBB0;
  if ((__p[31] & 0x80000000) != 0)
    operator delete(*(void **)&__p[8]);
  if (!v236)
    ZinAssertImpl("RCAS layer Batch flattening failed");
  v272 = ((uint64_t (*)(uint64_t **, _QWORD, _QWORD))(*v236)[4])(v236, 0, 0);
  *a4 = (*(_QWORD *)(v272 + 56) & (*(_QWORD *)(v272 + 56) - 1)) != 0;
  v273 = ((uint64_t (*)(uint64_t **, _QWORD, _QWORD))(*v236)[4])(v236, 0, 0);
  v274 = *(_QWORD *)(v273 + 56);
  if ((v274 & (v274 - 1)) != 0)
  {
    v329 = *(_QWORD *)(v273 + 48);
    v275 = *(_QWORD *)(v273 + 72);
    Pow2 = ZinRoundUpToNextPow2(v274);
    v277 = *(_QWORD *)(v273 + 56);
    v278 = *(_DWORD *)(v273 + 88);
    v279 = *(_QWORD *)(v323 + 16);
    if (*(char *)(v323 + 47) >= 0)
      v280 = *(unsigned __int8 *)(v323 + 47);
    else
      v280 = *(_QWORD *)(v323 + 32);
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v280 + 14);
    if (__p[23] >= 0)
      v281 = __p;
    else
      v281 = *(_BYTE **)__p;
    if (v280)
    {
      if (*(char *)(v323 + 47) >= 0)
        v282 = (const void *)(v323 + 24);
      else
        v282 = *(const void **)(v323 + 24);
      memmove(v281, v282, v280);
    }
    strcpy(&v281[v280], "_pad_channels_");
    ZinObjectNameFactory::ZinObjectNameFactory(v336, __p);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    v283 = **v227;
    v284 = operator new(2uLL);
    __asm { FCVT            H0, S8 }
    v339.__r_.__value_.__r.__words[0] = (std::string::size_type)v284;
    *v284 = _H0;
    v339.__r_.__value_.__l.__size_ = (std::string::size_type)(v284 + 1);
    v339.__r_.__value_.__r.__words[2] = (std::string::size_type)(v284 + 1);
    std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<half>,std::allocator<ZinIrConstData_specialization<half>>,std::vector<half>,void>((uint64_t)&v339, &v345);
    v359 = vdupq_n_s64(1uLL);
    v360 = v359;
    v361 = 1;
    v341 = v345;
    v342 = (uint64_t)v346;
    if (v346)
    {
      p_shared_owners = (unint64_t *)&v346->__shared_owners_;
      do
        v287 = __ldxr(p_shared_owners);
      while (__stxr(v287 + 1, p_shared_owners));
    }
    v288 = (ZinIrOpLayer *)ZinBuilder::CreateConstLayer(v279, (uint64_t)v336, (__int128 *)v359.i8, v278, (uint64_t *)&v341, 0, 0);
    v289 = (std::__shared_weak_count *)v342;
    if (v342)
    {
      v290 = (unint64_t *)(v342 + 8);
      do
        v291 = __ldaxr(v290);
      while (__stlxr(v291 - 1, v290));
      if (!v291)
      {
        ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
        std::__shared_weak_count::__release_weak(v289);
      }
    }
    *(_QWORD *)&v350 = v323;
    *(_QWORD *)v357 = &v350;
    *(_QWORD *)&v357[8] = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(__p, v357);
    v292 = ZinIrOpLayerGraph::AddNode(a1, v288, (ZinIrOpLayer ***)__p);
    *(_QWORD *)__p = &unk_24C02BB18;
    if (*(_QWORD *)&__p[8])
    {
      *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
      operator delete(*(void **)&__p[8]);
    }
    *(_DWORD *)__p = 4;
    *(_QWORD *)&__p[8] = v275;
    *(_DWORD *)&__p[16] = 2;
    *(_QWORD *)&__p[24] = Pow2 - v277;
    *(_DWORD *)&__p[32] = 0;
    *(_QWORD *)&__p[40] = v329;
    std::unordered_map<ZinIrDimension,unsigned long>::unordered_map((uint64_t)v357, (int *)__p, 3);
    (*(void (**)(_BYTE *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v288 + 80))(__p, v288, 0, 0);
    v293 = operator new(0x78uLL);
    *((_QWORD *)&v350 + 1) = (char *)v293 + 120;
    *(_QWORD *)&v351 = (char *)v293 + 120;
    v294 = v354;
    v293[4] = *(_OWORD *)&__p[64];
    v293[5] = v294;
    v293[6] = v355;
    *((_DWORD *)v293 + 28) = v356;
    v295 = *(_OWORD *)&__p[16];
    *v293 = *(_OWORD *)__p;
    v293[1] = v295;
    v296 = *(_OWORD *)&__p[48];
    v293[2] = *(_OWORD *)&__p[32];
    v293[3] = v296;
    *(_QWORD *)&v350 = v293;
    Broadcast = (ZinIrOpLayer *)ZinBuilder::CreateBroadcast(v279, (uint64_t)v336, (uint64_t *)&v350, (uint64_t)v357, v278);
    if ((_QWORD)v350)
    {
      *((_QWORD *)&v350 + 1) = v350;
      operator delete((void *)v350);
    }
    v348.__r_.__value_.__r.__words[0] = v323;
    *(_QWORD *)&v350 = &v348;
    *((_QWORD *)&v350 + 1) = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(__p, &v350);
    v298 = ZinIrOpLayerGraph::AddNode(a1, Broadcast, (ZinIrOpLayer ***)__p);
    *(_QWORD *)__p = &unk_24C02BB18;
    if (*(_QWORD *)&__p[8])
    {
      *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
      operator delete(*(void **)&__p[8]);
    }
    v299 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)v288, (uint64_t)Broadcast, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    v300 = operator new(0x10uLL);
    v331[1] = v300 + 2;
    v332 = (char *)(v300 + 2);
    *v300 = v283;
    v300[1] = Broadcast;
    v331[0] = v300;
    v301 = (ZinIrTensor *)((uint64_t (*)(uint64_t **, _QWORD, _QWORD))(*v283)[4])(v283, 0, 0);
    ZinIrTensor::CopyTensorMirInfo(v301, (ZinIrTensor::MirInfo **)&v335);
    ZinBuilder::CreateConcat(v279, (uint64_t)v336, (char **)v331, 0, 1, &v335, 0, (uint64_t)&v348);
    v302 = (_QWORD *)v335;
    *(_QWORD *)&v335 = 0;
    if (v302)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v335, v302);
    v303 = *(ZinIrOpLayer **)(v348.__r_.__value_.__l.__size_ - 8);
    *(_QWORD *)&v344 = v323;
    *(_QWORD *)&v350 = &v344;
    *((_QWORD *)&v350 + 1) = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(__p, &v350);
    v304 = ZinBuilder::AddConcatToGraph(a1, (uint64_t *)v331, &v348, (ZinIrOpLayer ***)__p);
    *(_QWORD *)__p = &unk_24C02BB18;
    if (*(_QWORD *)&__p[8])
    {
      *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
      operator delete(*(void **)&__p[8]);
    }
    memset(__p, 0, 32);
    *(_DWORD *)&__p[32] = 1065353216;
    v306 = v348.__r_.__value_.__l.__size_;
    for (i = (_QWORD *)v348.__r_.__value_.__r.__words[0]; i != (_QWORD *)v306; ++i)
    {
      *(_QWORD *)&v350 = 0;
      *(_QWORD *)&v350 = *i;
      std::__hash_table<ZinIrTensor const*,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const* const&>((uint64_t)__p, &v350, &v350);
    }
    std::unordered_set<ZinIrOpLayer *>::unordered_set((uint64_t)&v350, (uint64_t)__p);
    v307 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a1, v283, v303, &v350);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v350);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)__p);
    if (v349 && v348.__r_.__value_.__r.__words[0])
    {
      v348.__r_.__value_.__l.__size_ = v348.__r_.__value_.__r.__words[0];
      operator delete(v348.__r_.__value_.__l.__data_);
    }
    if (v331[0])
    {
      v331[1] = v331[0];
      operator delete(v331[0]);
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v357);
    v308 = v346;
    if (v346)
    {
      v309 = (unint64_t *)&v346->__shared_owners_;
      do
        v310 = __ldaxr(v309);
      while (__stlxr(v310 - 1, v309));
      if (!v310)
      {
        ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
        std::__shared_weak_count::__release_weak(v308);
      }
    }
    if (v339.__r_.__value_.__r.__words[0])
    {
      v339.__r_.__value_.__l.__size_ = v339.__r_.__value_.__r.__words[0];
      operator delete(v339.__r_.__value_.__l.__data_);
    }
    v336[0] = off_24C01FBB0;
    if (v338 < 0)
      operator delete(v336[1]);
    if (((v292 && v298) & v299 & v304 & v307 & 1) == 0)
      ZinAssertImpl("RCAS layer padding failed");
  }
  return v323;
}

void sub_206D8CC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;
  void *v41;

  *(_QWORD *)(v39 - 208) = &unk_24C02BB18;
  v41 = *(void **)(v39 - 200);
  if (v41)
  {
    *(_QWORD *)(v39 - 192) = v41;
    operator delete(v41);
  }
  if (a39 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t ZinRCASDecompositionUtils::PostProcessRCASLayer(uint64_t **a1, uint64_t a2, std::string::size_type a3, int a4, int a5, _QWORD *a6, uint64_t a7, int a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  __int128 *v17;
  const void *v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  ZinIrOpLayer *v25;
  _BOOL4 v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  _DWORD *v32;
  ZinIrOpLayer *v33;
  int v34;
  int v35;
  int v36;
  _BOOL4 v37;
  int v38;
  int v39;
  int v40;
  ZinIrOpLayer *v41;
  int v42;
  int v43;
  ZinIrOpLayer *v44;
  _BOOL4 v45;
  int v46;
  _BOOL4 v47;
  int v48;
  uint64_t v49;
  uint64_t DimensionValue;
  uint64_t v51;
  size_t v52;
  __int128 *v53;
  const void *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t ValueAt;
  int v58;
  uint64_t v59;
  _BOOL4 v60;
  int v61;
  int v62;
  char v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  size_t v75;
  __int128 *v76;
  const void *v77;
  std::string *v78;
  __int128 v79;
  const std::string::value_type *v80;
  std::string::size_type v81;
  std::string *v82;
  __int128 v83;
  _DWORD *v84;
  ZinIrOpLayer *v85;
  _BOOL4 v86;
  int v87;
  _BOOL4 v88;
  int v89;
  char v90;
  _DWORD *v91;
  int v92;
  int *v93;
  int v94;
  int v95;
  uint64_t v96;
  size_t v97;
  __int128 *v98;
  const void *v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  ZinIrOpLayer *ViewFromOffset;
  _BOOL4 v107;
  int v108;
  int v109;
  int v110;
  ZinIrOpLayer *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  _OWORD *v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  _BOOL4 v119;
  int v120;
  uint64_t v121;
  BOOL v122;
  __int128 v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  ZinIrOpLayer *v128;
  _BOOL4 v129;
  int v130;
  ZinIrOpLayer *v131;
  _QWORD *v132;
  _BOOL4 v133;
  int v134;
  uint64_t v135;
  __int128 v136;
  uint64_t v137;
  _DWORD *v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  _BOOL4 v144;
  char *v145;
  char *v146;
  int v147;
  char v148;
  uint64_t v149;
  int v150;
  _BYTE *v151;
  int v152;
  __int128 *p_p;
  uint64_t v154;
  BOOL v156;
  int v157;
  unsigned int v158;
  ZinIrOpLayer *v159;
  uint64_t v160;
  __int128 v161;
  uint64_t v162;
  _OWORD *v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  _BOOL4 v167;
  int v168;
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  int v174;
  ZinIrOpLayer *v175;
  _BOOL4 v176;
  int v177;
  uint64_t v178;
  __int128 v179;
  uint64_t v180;
  _DWORD *v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186;
  ZinIrOpLayer *v187;
  _BOOL4 v188;
  _BOOL4 v189;
  _BOOL4 v190;
  int v191;
  void *v195;
  char *v196;
  uint64_t v197;
  _OWORD v198[5];
  __int128 v199;
  std::string v200;
  std::string::size_type v201;
  __int128 v202;
  __int128 v203;
  _BYTE v204[48];
  __int128 v205;
  __int128 v206;
  int v207;
  __int128 v208;
  char *v209;
  __int128 v210;
  __int128 v211;
  uint64_t v212;
  __int128 __p;
  __int128 v214;
  uint64_t v215;
  __int128 v216;
  __int128 v217;
  uint64_t v218;
  __int128 v219;
  __int128 v220;
  uint64_t v221;
  __int128 v222;
  __int128 v223;
  uint64_t v224;
  uint64_t v225;

  v12 = a2;
  v225 = *MEMORY[0x24BDAC8D0];
  v14 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  v15 = *(_QWORD *)(v12 + 16);
  if (*(char *)(a3 + 47) >= 0)
    v16 = *(unsigned __int8 *)(a3 + 47);
  else
    v16 = *(_QWORD *)(a3 + 32);
  v17 = &v219;
  std::string::basic_string[abi:ne180100]((uint64_t)&v219, v16 + 14);
  if (SBYTE7(v220) < 0)
    v17 = (__int128 *)v219;
  if (v16)
  {
    if (*(char *)(a3 + 47) >= 0)
      v18 = (const void *)(a3 + 24);
    else
      v18 = *(const void **)(a3 + 24);
    memmove(v17, v18, v16);
  }
  strcpy((char *)v17 + v16, "_unfold_batch_");
  std::to_string((std::string *)&v216, 0);
  if ((SBYTE7(v217) & 0x80u) == 0)
    v19 = (const std::string::value_type *)&v216;
  else
    v19 = (const std::string::value_type *)v216;
  if ((SBYTE7(v217) & 0x80u) == 0)
    v20 = BYTE7(v217);
  else
    v20 = *((_QWORD *)&v216 + 1);
  v21 = std::string::append((std::string *)&v219, v19, v20);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  *(_QWORD *)&v223 = *((_QWORD *)&v21->__r_.__value_.__l + 2);
  v222 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  ZinObjectNameFactory::ZinObjectNameFactory(&v202, &v222);
  if (SBYTE7(v223) < 0)
    operator delete((void *)v222);
  if (SBYTE7(v217) < 0)
    operator delete((void *)v216);
  if (SBYTE7(v220) < 0)
    operator delete((void *)v219);
  v23 = a6[4];
  v24 = a6[2];
  if (v23 != 1 || v24 != 1)
  {
    if (v24 * v23 * *a6 != *(_QWORD *)(v14 + 48))
      ZinAssertImpl("Batch dimension is not consistent in RCAS layer");
    v25 = (ZinIrOpLayer *)ZinRCASDecompositionUtils::TransposeRCASDimensions(v12, 2, 3);
    *(_QWORD *)&v216 = a3;
    *(_QWORD *)&v219 = &v216;
    *((_QWORD *)&v219 + 1) = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&v222, &v219);
    v26 = ZinIrOpLayerGraph::AddNode(a1, v25, (ZinIrOpLayer ***)&v222);
    *(_QWORD *)&v222 = &unk_24C02BB18;
    if (*((_QWORD *)&v222 + 1))
    {
      *(_QWORD *)&v223 = *((_QWORD *)&v222 + 1);
      operator delete(*((void **)&v222 + 1));
    }
    v191 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, v12, (uint64_t)v25, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    *(_QWORD *)&v219 = v25;
    std::unordered_set<ZinIrOpLayer *>::unordered_set((uint64_t)&v222, &v219, 1);
    v190 = v26;
    v27 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a1, (uint64_t **)v12, v25, &v222);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v222);
    v28 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v25 + 32))(v25, 0, 0);
    v29 = *((_OWORD *)a6 + 1);
    v219 = *(_OWORD *)a6;
    v220 = v29;
    v221 = a6[4];
    v30 = *(_QWORD *)(v28 + 64);
    *((_QWORD *)&v219 + 1) = a6[2];
    *(_QWORD *)&v220 = v30;
    v31 = *(_DWORD *)(v14 + 88);
    v32 = operator new(0x14uLL);
    *((_QWORD *)&__p + 1) = v32 + 5;
    *(_QWORD *)&v214 = v32 + 5;
    v32[4] = 4;
    *(_OWORD *)v32 = xmmword_207A9C698;
    *(_QWORD *)&__p = v32;
    DimensionOrderHint::DimensionOrderHint(&v216, &__p);
    v33 = (ZinIrOpLayer *)ZinBuilder::CreateReshape(v15, (uint64_t)&v202, v28 + 48, v31, &v219, (const DimensionOrderHint *)&v216);
    if ((_QWORD)v216)
    {
      *((_QWORD *)&v216 + 1) = v216;
      operator delete((void *)v216);
    }
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    *(_QWORD *)&v210 = a3;
    *(_QWORD *)&__p = &v210;
    *((_QWORD *)&__p + 1) = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&v216, &__p);
    v189 = ZinIrOpLayerGraph::AddNode(a1, v33, (ZinIrOpLayer ***)&v216);
    *(_QWORD *)&v216 = &unk_24C02BB18;
    if (*((_QWORD *)&v216 + 1))
    {
      *(_QWORD *)&v217 = *((_QWORD *)&v216 + 1);
      operator delete(*((void **)&v216 + 1));
    }
    v34 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)v25, (uint64_t)v33, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    *(_QWORD *)&__p = v33;
    std::unordered_set<ZinIrOpLayer *>::unordered_set((uint64_t)&v216, &__p, 1);
    v35 = v27;
    v36 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a1, (uint64_t **)v25, v33, &v216);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v216);
    v12 = ZinRCASDecompositionUtils::TransposeRCASDimensions((uint64_t)v33, 3, 2);
    *(_QWORD *)&v208 = a3;
    *(_QWORD *)&v210 = &v208;
    *((_QWORD *)&v210 + 1) = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&__p, &v210);
    v37 = ZinIrOpLayerGraph::AddNode(a1, (ZinIrOpLayer *)v12, (ZinIrOpLayer ***)&__p);
    *(_QWORD *)&__p = &unk_24C02BB18;
    if (*((_QWORD *)&__p + 1))
    {
      *(_QWORD *)&v214 = *((_QWORD *)&__p + 1);
      operator delete(*((void **)&__p + 1));
    }
    v38 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)v33, v12, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    *(_QWORD *)&v210 = v12;
    std::unordered_set<ZinIrOpLayer *>::unordered_set((uint64_t)&__p, &v210, 1);
    v39 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a1, (uint64_t **)v33, (ZinIrOpLayer *)v12, &__p);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&__p);
    if ((v190 & v191 & v35 & v189 & v34 & v36 & v37 & v38 & v39) == 0)
      v12 = 0;
  }
  *(_QWORD *)&v202 = off_24C01FBB0;
  if (SHIBYTE(v203) < 0)
    operator delete(*((void **)&v202 + 1));
  if (!v12)
    ZinAssertImpl("RCAS layer Batch unflattening failed");
  if (a5 == 4)
  {
    v40 = 1;
  }
  else
  {
    if (a4 == 4 && a5 == 2)
    {
      v42 = 2;
      v40 = 1;
      v43 = 4;
      goto LABEL_53;
    }
    v44 = (ZinIrOpLayer *)ZinRCASDecompositionUtils::TransposeRCASDimensions(v12, 4, a5);
    *(_QWORD *)&v219 = a3;
    *(_QWORD *)&v222 = &v219;
    *((_QWORD *)&v222 + 1) = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&v202, &v222);
    v45 = ZinIrOpLayerGraph::AddNode(a1, v44, (ZinIrOpLayer ***)&v202);
    *(_QWORD *)&v202 = &unk_24C02BB18;
    if (*((_QWORD *)&v202 + 1))
    {
      *(_QWORD *)&v203 = *((_QWORD *)&v202 + 1);
      operator delete(*((void **)&v202 + 1));
    }
    v46 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, v12, (uint64_t)v44, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    *(_QWORD *)&v222 = v44;
    std::unordered_set<ZinIrOpLayer *>::unordered_set((uint64_t)&v202, &v222, 1);
    v40 = v45 & v46 & ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a1, (uint64_t **)v12, v44, &v202);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v202);
    if (a5 == 2)
    {
      v43 = 4;
      v12 = (uint64_t)v44;
      v42 = a4;
      goto LABEL_53;
    }
    v12 = (uint64_t)v44;
  }
  if (a4 == 2)
  {
    v41 = (ZinIrOpLayer *)v12;
    goto LABEL_56;
  }
  v42 = 2;
  v43 = a4;
LABEL_53:
  v41 = (ZinIrOpLayer *)ZinRCASDecompositionUtils::TransposeRCASDimensions(v12, v42, v43);
  *(_QWORD *)&v216 = a3;
  *(_QWORD *)&v219 = &v216;
  *((_QWORD *)&v219 + 1) = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v222, &v219);
  v47 = ZinIrOpLayerGraph::AddNode(a1, v41, (ZinIrOpLayer ***)&v222);
  *(_QWORD *)&v222 = &unk_24C02BB18;
  if (*((_QWORD *)&v222 + 1))
  {
    *(_QWORD *)&v223 = *((_QWORD *)&v222 + 1);
    operator delete(*((void **)&v222 + 1));
  }
  v48 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, v12, (uint64_t)v41, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  *(_QWORD *)&v219 = v41;
  std::unordered_set<ZinIrOpLayer *>::unordered_set((uint64_t)&v222, &v219, 1);
  v40 &= ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a1, (uint64_t **)v12, v41, &v222) & v47 & v48;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v222);
LABEL_56:
  if (!v40 || !v41)
    ZinAssertImpl("RCAS layer post-processing failed");
  v49 = (*(uint64_t (**)(std::string::size_type, _QWORD, _QWORD))(*(_QWORD *)a3 + 32))(a3, 0, 0);
  DimensionValue = ZinIrTensor::GetDimensionValue(v49, a4);
  if (((DimensionValue - 1) & ZinIrTensor::GetDimensionValue(v49, a4)) != 0)
  {
    v51 = *(_QWORD *)(a3 + 16);
    if (*(char *)(a3 + 47) >= 0)
      v52 = *(unsigned __int8 *)(a3 + 47);
    else
      v52 = *(_QWORD *)(a3 + 32);
    v53 = &v219;
    std::string::basic_string[abi:ne180100]((uint64_t)&v219, v52 + 15);
    if (SBYTE7(v220) < 0)
      v53 = (__int128 *)v219;
    if (v52)
    {
      if (*(char *)(a3 + 47) >= 0)
        v54 = (const void *)(a3 + 24);
      else
        v54 = *(const void **)(a3 + 24);
      memmove(v53, v54, v52);
    }
    strcpy((char *)v53 + v52, "_drop_channels_");
    ZinObjectNameFactory::ZinObjectNameFactory(&v222, &v219);
    if (SBYTE7(v220) < 0)
      operator delete((void *)v219);
    v55 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v41 + 32))(v41, 0, 0);
    v56 = *(_OWORD *)(v55 + 64);
    v219 = *(_OWORD *)(v55 + 48);
    v220 = v56;
    v221 = *(_QWORD *)(v55 + 80);
    ValueAt = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)(v49 + 48), a4);
    v58 = SetValueAtDimension<ZinTensorDimensions>(&v219, a4, ValueAt);
    ZinObjectNameFactory::CreateName((uint64_t)&v222, 0, (std::string *)&__p);
    v202 = 0u;
    v203 = 0u;
    *(int64x2_t *)&v204[8] = vdupq_n_s64(1uLL);
    *(_OWORD *)&v204[24] = *(_OWORD *)&v204[8];
    *(_QWORD *)v204 = 0;
    *(_QWORD *)&v204[40] = 1;
    v59 = ZinBuilder::CreateView(v51, (uint64_t)&__p, v55, &v219, (uint64_t)&v202);
    if (SBYTE7(v214) < 0)
      operator delete((void *)__p);
    *(_QWORD *)&v208 = a3;
    *(_QWORD *)&v210 = &v208;
    *((_QWORD *)&v210 + 1) = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&__p, &v210);
    v60 = ZinIrOpLayerGraph::AddNode(a1, (ZinIrOpLayer *)v59, (ZinIrOpLayer ***)&__p);
    *(_QWORD *)&__p = &unk_24C02BB18;
    if (*((_QWORD *)&__p + 1))
    {
      *(_QWORD *)&v214 = *((_QWORD *)&__p + 1);
      operator delete(*((void **)&__p + 1));
    }
    v61 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)v41, v59, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    if (v58)
      v60 = 0;
    *(_QWORD *)&__p = v59;
    std::unordered_set<ZinIrOpLayer *>::unordered_set((uint64_t)&v216, &__p, 1);
    v62 = v60 & v61 & ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a1, (uint64_t **)v41, (ZinIrOpLayer *)v59, &v216);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v216);
    *(_QWORD *)&v222 = off_24C01FBB0;
    if (SHIBYTE(v223) < 0)
      operator delete(*((void **)&v222 + 1));
    if (v59)
      v63 = v62;
    else
      v63 = 0;
    if ((v63 & 1) == 0)
      ZinAssertImpl("RCAS layer post-processing failed");
  }
  else
  {
    v59 = (uint64_t)v41;
  }
  v64 = *(_OWORD *)(a7 + 48);
  v198[2] = *(_OWORD *)(a7 + 32);
  v198[3] = v64;
  v65 = *(_OWORD *)(a7 + 80);
  v198[4] = *(_OWORD *)(a7 + 64);
  v199 = v65;
  v66 = *(_OWORD *)(a7 + 16);
  v198[0] = *(_OWORD *)a7;
  v198[1] = v66;
  if (BYTE8(v65))
  {
    v67 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v59 + 32))(v59, 0, 0);
    v68 = *(_OWORD *)(v67 + 64);
    v202 = *(_OWORD *)(v67 + 48);
    v203 = v68;
    *(_QWORD *)v204 = *(_QWORD *)(v67 + 80);
    v69 = *(_DWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v59 + 32))(v59, 0, 0) + 88);
    v222 = v202;
    v223 = v203;
    v224 = *(_QWORD *)v204;
    v70 = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)v198, v199);
    v71 = SetValueAtDimension<ZinTensorDimensions>(&v222, v199, v70);
    v72 = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)v198, SDWORD1(v199));
    v73 = SetValueAtDimension<ZinTensorDimensions>(&v222, SDWORD1(v199), v72);
    v74 = *(_QWORD *)(v59 + 16);
    if (*(char *)(v59 + 47) >= 0)
      v75 = *(unsigned __int8 *)(v59 + 47);
    else
      v75 = *(_QWORD *)(v59 + 32);
    v76 = &v210;
    std::string::basic_string[abi:ne180100]((uint64_t)&v210, v75 + 1);
    if (SBYTE7(v211) < 0)
      v76 = (__int128 *)v210;
    if (v75)
    {
      if (*(char *)(v59 + 47) >= 0)
        v77 = (const void *)(v59 + 24);
      else
        v77 = *(const void **)(v59 + 24);
      memmove(v76, v77, v75);
    }
    *(_WORD *)((char *)v76 + v75) = 95;
    std::string::basic_string[abi:ne180100]<0>(&v200, "rcas_4axbtch_vectax");
    v78 = std::string::append(&v200, "_xfm", 4uLL);
    v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
    v209 = (char *)v78->__r_.__value_.__r.__words[2];
    v208 = v79;
    v78->__r_.__value_.__l.__size_ = 0;
    v78->__r_.__value_.__r.__words[2] = 0;
    v78->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v209) >= 0)
      v80 = (const std::string::value_type *)&v208;
    else
      v80 = (const std::string::value_type *)v208;
    if (SHIBYTE(v209) >= 0)
      v81 = HIBYTE(v209);
    else
      v81 = *((_QWORD *)&v208 + 1);
    v82 = std::string::append((std::string *)&v210, v80, v81);
    v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
    *(_QWORD *)&v214 = *((_QWORD *)&v82->__r_.__value_.__l + 2);
    __p = v83;
    v82->__r_.__value_.__l.__size_ = 0;
    v82->__r_.__value_.__r.__words[2] = 0;
    v82->__r_.__value_.__r.__words[0] = 0;
    ZinObjectNameFactory::ZinObjectNameFactory(&v219, &__p);
    if (SBYTE7(v214) < 0)
      operator delete((void *)__p);
    if (SHIBYTE(v209) < 0)
      operator delete((void *)v208);
    if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v200.__r_.__value_.__l.__data_);
    if (SBYTE7(v211) < 0)
      operator delete((void *)v210);
    v84 = operator new(0x14uLL);
    *((_QWORD *)&v210 + 1) = v84 + 5;
    *(_QWORD *)&v211 = v84 + 5;
    v84[4] = 4;
    *(_OWORD *)v84 = xmmword_207A9C698;
    *(_QWORD *)&v210 = v84;
    DimensionOrderHint::DimensionOrderHint(&__p, &v210);
    v85 = (ZinIrOpLayer *)ZinBuilder::CreateReshape(v74, (uint64_t)&v219, (uint64_t)&v202, v69, &v222, (const DimensionOrderHint *)&__p);
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    if ((_QWORD)v210)
    {
      *((_QWORD *)&v210 + 1) = v210;
      operator delete((void *)v210);
    }
    *(_QWORD *)&v208 = a3;
    *(_QWORD *)&v210 = &v208;
    *((_QWORD *)&v210 + 1) = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&__p, &v210);
    v86 = ZinIrOpLayerGraph::AddNode(a1, v85, (ZinIrOpLayer ***)&__p);
    *(_QWORD *)&__p = &unk_24C02BB18;
    if (*((_QWORD *)&__p + 1))
    {
      *(_QWORD *)&v214 = *((_QWORD *)&__p + 1);
      operator delete(*((void **)&__p + 1));
    }
    v87 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, v59, (uint64_t)v85, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    if (v73 | v71)
      v88 = 0;
    else
      v88 = v86;
    *(_QWORD *)&__p = v85;
    std::unordered_set<ZinIrOpLayer *>::unordered_set((uint64_t)&v216, &__p, 1);
    v89 = v88 & v87 & ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a1, (uint64_t **)v59, v85, &v216);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v216);
    *(_QWORD *)&v219 = off_24C01FBB0;
    if (SHIBYTE(v220) < 0)
      operator delete(*((void **)&v219 + 1));
    if (v85)
      v90 = v89;
    else
      v90 = 0;
    if ((v90 & 1) == 0)
      ZinAssertImpl("RCAS layer HandleFourAxisBatching failed");
  }
  else
  {
    v85 = (ZinIrOpLayer *)v59;
  }
  v195 = 0;
  v196 = 0;
  v197 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v195, *(const void **)a9, *(_QWORD *)(a9 + 8), (uint64_t)(*(_QWORD *)(a9 + 8) - *(_QWORD *)a9) >> 3);
  v91 = *(_DWORD **)(a3 + 64);
  v92 = v91[2];
  if (v92 == 65)
  {
    v93 = v91 + 5;
    goto LABEL_131;
  }
  if (v92 == 66)
  {
    v93 = v91 + 7;
LABEL_131:
    v94 = *v93;
    goto LABEL_133;
  }
  v94 = 5;
LABEL_133:
  v95 = *(unsigned __int8 *)(a7 + 88);
  v96 = *(_QWORD *)(a3 + 16);
  if (*(char *)(a3 + 47) >= 0)
    v97 = *(unsigned __int8 *)(a3 + 47);
  else
    v97 = *(_QWORD *)(a3 + 32);
  v98 = &v202;
  std::string::basic_string[abi:ne180100]((uint64_t)&v202, v97 + 26);
  if (SBYTE7(v203) < 0)
    v98 = (__int128 *)v202;
  if (v97)
  {
    if (*(char *)(a3 + 47) >= 0)
      v99 = (const void *)(a3 + 24);
    else
      v99 = *(const void **)(a3 + 24);
    memmove(v98, v99, v97);
  }
  strcpy((char *)v98 + v97, "_split_indices_and_values_");
  ZinObjectNameFactory::ZinObjectNameFactory(&v222, &v202);
  if (SBYTE7(v203) < 0)
    operator delete((void *)v202);
  if (v196 != v195)
  {
    v100 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v85 + 32))(v85, 0, 0);
    v101 = *(_OWORD *)(v100 + 64);
    v219 = *(_OWORD *)(v100 + 48);
    v220 = v101;
    v221 = *(_QWORD *)(v100 + 80);
    v102 = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)(v100 + 48), v94);
    v103 = SetValueAtDimension<ZinTensorDimensions>(&v219, v94, v102 - 1);
    v104 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v85 + 32))(v85, 0, 0);
    v105 = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)&v219, v94);
    ViewFromOffset = (ZinIrOpLayer *)ZinBuilder::CreateViewFromOffset(v96, (uint64_t)&v222, v104, v94, 0, v105);
    *(_QWORD *)&__p = a3;
    *(_QWORD *)&v216 = &__p;
    *((_QWORD *)&v216 + 1) = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&v202, &v216);
    v107 = ZinIrOpLayerGraph::AddNode(a1, ViewFromOffset, (ZinIrOpLayer ***)&v202);
    *(_QWORD *)&v202 = &unk_24C02BB18;
    if (*((_QWORD *)&v202 + 1))
    {
      *(_QWORD *)&v203 = *((_QWORD *)&v202 + 1);
      operator delete(*((void **)&v202 + 1));
    }
    v108 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)v85, (uint64_t)ViewFromOffset, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    if (v103)
      v107 = 0;
    *(_QWORD *)&v202 = ViewFromOffset;
    std::unordered_set<ZinIrOpLayer *>::unordered_set((uint64_t)&v216, &v202, 1);
    v109 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a1, (uint64_t **)v85, ViewFromOffset, &v216);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v216);
    __p = 0u;
    v214 = 0u;
    LODWORD(v215) = 1065353216;
    *(_QWORD *)&v202 = ViewFromOffset;
    std::__hash_table<ZinIrTensor const*,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const* const&>((uint64_t)&__p, &v202, &v202);
    v110 = v107 & v108 & v109;
    v111 = v85;
    if (a8 == 10)
    {
      v112 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v85 + 32))(v85, 0, 0);
      v113 = *(_OWORD *)(v112 + 64);
      v210 = *(_OWORD *)(v112 + 48);
      v211 = v113;
      v114 = *(_QWORD *)(v112 + 80);
      *((_QWORD *)&v211 + 1) = 2 * *((_QWORD *)&v113 + 1);
      v212 = v114;
      (*(void (**)(__int128 *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v85 + 80))(&v202, v85, 0, 0);
      v115 = operator new(0x78uLL);
      *((_QWORD *)&v208 + 1) = (char *)v115 + 120;
      v209 = (char *)v115 + 120;
      v116 = v205;
      v115[4] = *(_OWORD *)&v204[32];
      v115[5] = v116;
      v115[6] = v206;
      *((_DWORD *)v115 + 28) = v207;
      v117 = v203;
      *v115 = v202;
      v115[1] = v117;
      v118 = *(_OWORD *)&v204[16];
      v115[2] = *(_OWORD *)v204;
      v115[3] = v118;
      *(_QWORD *)&v208 = v115;
      v111 = (ZinIrOpLayer *)ZinBuilder::CreateReinterpretCastLayer(v96, (uint64_t)&v222, (uint64_t)&v208, &v210, 2);
      if ((_QWORD)v208)
      {
        *((_QWORD *)&v208 + 1) = v208;
        operator delete((void *)v208);
      }
      v200.__r_.__value_.__r.__words[0] = a3;
      *(_QWORD *)&v208 = &v200;
      *((_QWORD *)&v208 + 1) = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(&v202, &v208);
      v119 = ZinIrOpLayerGraph::AddNode(a1, v111, (ZinIrOpLayer ***)&v202);
      *(_QWORD *)&v202 = &unk_24C02BB18;
      if (*((_QWORD *)&v202 + 1))
      {
        *(_QWORD *)&v203 = *((_QWORD *)&v202 + 1);
        operator delete(*((void **)&v202 + 1));
      }
      v120 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)v85, (uint64_t)v111, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      *(_QWORD *)&v202 = v111;
      std::__hash_table<ZinIrTensor const*,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const* const&>((uint64_t)&__p, &v202, &v202);
      v110 &= v119 & v120;
    }
    v121 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v111 + 32))(v111, 0, 0);
    v122 = v94 == 4 && a8 == 10;
    v123 = *(_OWORD *)(v121 + 64);
    v219 = *(_OWORD *)(v121 + 48);
    v220 = v123;
    v221 = *(_QWORD *)(v121 + 80);
    if (v122)
      v124 = 2;
    else
      v124 = 1;
    v125 = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)&v219, v94);
    if (SetValueAtDimension<ZinTensorDimensions>(&v219, v94, v125 - v124))
      v110 = 0;
    v126 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v111 + 32))(v111, 0, 0);
    v127 = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)&v219, v94);
    v128 = (ZinIrOpLayer *)ZinBuilder::CreateViewFromOffset(v96, (uint64_t)&v222, v126, v94, v127, v124);
    *(_QWORD *)&v208 = a3;
    *(_QWORD *)&v210 = &v208;
    *((_QWORD *)&v210 + 1) = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&v202, &v210);
    v129 = ZinIrOpLayerGraph::AddNode(a1, v128, (ZinIrOpLayer ***)&v202);
    *(_QWORD *)&v202 = &unk_24C02BB18;
    if (*((_QWORD *)&v202 + 1))
    {
      *(_QWORD *)&v203 = *((_QWORD *)&v202 + 1);
      operator delete(*((void **)&v202 + 1));
    }
    v130 = v110 & v129 & ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)v111, (uint64_t)v128, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    if (a8 == 10)
    {
      v200.__r_.__value_.__r.__words[0] = 0;
      v131 = (ZinIrOpLayer *)ZinBuilder::CreateCopyLayer(v96, (uint64_t)v128, (uint64_t)&v222, 2, &v200);
      v132 = (_QWORD *)v200.__r_.__value_.__r.__words[0];
      v200.__r_.__value_.__r.__words[0] = 0;
      if (v132)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v200, v132);
      *(_QWORD *)&v208 = a3;
      *(_QWORD *)&v210 = &v208;
      *((_QWORD *)&v210 + 1) = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(&v202, &v210);
      v133 = ZinIrOpLayerGraph::AddNode(a1, v131, (ZinIrOpLayer ***)&v202);
      *(_QWORD *)&v202 = &unk_24C02BB18;
      if (*((_QWORD *)&v202 + 1))
      {
        *(_QWORD *)&v203 = *((_QWORD *)&v202 + 1);
        operator delete(*((void **)&v202 + 1));
      }
      v134 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)v128, (uint64_t)v131, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      v135 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v128 + 32))(v128, 0, 0);
      v136 = *(_OWORD *)(v135 + 64);
      v210 = *(_OWORD *)(v135 + 48);
      v211 = v136;
      v137 = *(_QWORD *)(v135 + 80);
      *((_QWORD *)&v211 + 1) = *((_QWORD *)&v136 + 1) / 2;
      v212 = v137;
      (*(void (**)(__int128 *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v131 + 80))(&v202, v131, 0, 0);
      v138 = operator new(0x78uLL);
      *((_QWORD *)&v208 + 1) = v138 + 30;
      v209 = (char *)(v138 + 30);
      v138[28] = v207;
      v139 = v206;
      v140 = *(_OWORD *)&v204[32];
      *((_OWORD *)v138 + 5) = v205;
      *((_OWORD *)v138 + 6) = v139;
      v141 = v203;
      *(_OWORD *)v138 = v202;
      *((_OWORD *)v138 + 1) = v141;
      v142 = *(_OWORD *)&v204[16];
      *((_OWORD *)v138 + 2) = *(_OWORD *)v204;
      *((_OWORD *)v138 + 3) = v142;
      *((_OWORD *)v138 + 4) = v140;
      *(_QWORD *)&v208 = v138;
      v143 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v85 + 32))(v85, 0, 0);
      v128 = (ZinIrOpLayer *)ZinBuilder::CreateReinterpretCastLayer(v96, (uint64_t)&v222, (uint64_t)&v208, &v210, *(_DWORD *)(v143 + 88));
      if ((_QWORD)v208)
      {
        *((_QWORD *)&v208 + 1) = v208;
        operator delete((void *)v208);
      }
      v201 = a3;
      *(_QWORD *)&v208 = &v201;
      *((_QWORD *)&v208 + 1) = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(&v202, &v208);
      v144 = ZinIrOpLayerGraph::AddNode(a1, v128, (ZinIrOpLayer ***)&v202);
      *(_QWORD *)&v202 = &unk_24C02BB18;
      if (*((_QWORD *)&v202 + 1))
      {
        *(_QWORD *)&v203 = *((_QWORD *)&v202 + 1);
        operator delete(*((void **)&v202 + 1));
      }
      v130 &= v133 & v134 & v144 & ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)v131, (uint64_t)v128, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    }
    v145 = v196;
    if (v195 == v196)
    {
      v147 = 1;
    }
    else
    {
      v146 = (char *)v195 + 8;
      do
      {
        v147 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)v128, *((_QWORD *)v146 - 1), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        if (v146 == v145)
          v148 = 0;
        else
          v148 = v147;
        v146 += 8;
      }
      while ((v148 & 1) != 0);
    }
    v152 = v130 & v147;
    p_p = &__p;
LABEL_188:
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)p_p);
    if (v152)
      v154 = 0;
    else
      v154 = 3;
    goto LABEL_191;
  }
  v149 = *(_QWORD *)(a3 + 64);
  v150 = *(_DWORD *)(v149 + 8);
  if (v150 == 65)
  {
    v151 = (_BYTE *)(v149 + 48);
  }
  else
  {
    if (v150 != 66)
    {
      v154 = 0;
      goto LABEL_191;
    }
    v151 = (_BYTE *)(v149 + 56);
  }
  v154 = 0;
  if (!v95 && *v151)
  {
    v219 = 0u;
    v220 = 0u;
    LODWORD(v221) = 1065353216;
    v156 = v94 == 4 && a8 == 10;
    v157 = 1;
    if (v156)
      v158 = 2;
    else
      v158 = 1;
    v159 = v85;
    if (a8 == 10)
    {
      v160 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v85 + 32))(v85, 0, 0);
      v161 = *(_OWORD *)(v160 + 64);
      v216 = *(_OWORD *)(v160 + 48);
      v217 = v161;
      v162 = *(_QWORD *)(v160 + 80);
      *((_QWORD *)&v217 + 1) = 2 * *((_QWORD *)&v161 + 1);
      v218 = v162;
      (*(void (**)(__int128 *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v85 + 80))(&v202, v85, 0, 0);
      v163 = operator new(0x78uLL);
      *((_QWORD *)&__p + 1) = (char *)v163 + 120;
      *(_QWORD *)&v214 = (char *)v163 + 120;
      v164 = v205;
      v163[4] = *(_OWORD *)&v204[32];
      v163[5] = v164;
      v163[6] = v206;
      *((_DWORD *)v163 + 28) = v207;
      v165 = v203;
      *v163 = v202;
      v163[1] = v165;
      v166 = *(_OWORD *)&v204[16];
      v163[2] = *(_OWORD *)v204;
      v163[3] = v166;
      *(_QWORD *)&__p = v163;
      v159 = (ZinIrOpLayer *)ZinBuilder::CreateReinterpretCastLayer(v96, (uint64_t)&v222, (uint64_t)&__p, &v216, 2);
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      *(_QWORD *)&v210 = a3;
      *(_QWORD *)&__p = &v210;
      *((_QWORD *)&__p + 1) = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(&v202, &__p);
      v167 = ZinIrOpLayerGraph::AddNode(a1, v159, (ZinIrOpLayer ***)&v202);
      *(_QWORD *)&v202 = &unk_24C02BB18;
      if (*((_QWORD *)&v202 + 1))
      {
        *(_QWORD *)&v203 = *((_QWORD *)&v202 + 1);
        operator delete(*((void **)&v202 + 1));
      }
      v168 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)v85, (uint64_t)v159, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      *(_QWORD *)&v202 = v159;
      std::__hash_table<ZinIrTensor const*,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const* const&>((uint64_t)&v219, &v202, &v202);
      v157 = v167 & v168;
    }
    v169 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v159 + 32))(v159, 0, 0);
    v170 = *(_OWORD *)(v169 + 64);
    v216 = *(_OWORD *)(v169 + 48);
    v217 = v170;
    v218 = *(_QWORD *)(v169 + 80);
    v171 = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)(v169 + 48), v94);
    if (SetValueAtDimension<ZinTensorDimensions>(&v216, v94, v171 - v158))
      v172 = 0;
    else
      v172 = v157;
    v173 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v159 + 32))(v159, 0, 0);
    v174 = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)&v216, v94);
    v175 = (ZinIrOpLayer *)ZinBuilder::CreateViewFromOffset(v96, (uint64_t)&v222, v173, v94, v174, v158);
    *(_QWORD *)&v210 = a3;
    *(_QWORD *)&__p = &v210;
    *((_QWORD *)&__p + 1) = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&v202, &__p);
    v176 = ZinIrOpLayerGraph::AddNode(a1, v175, (ZinIrOpLayer ***)&v202);
    *(_QWORD *)&v202 = &unk_24C02BB18;
    if (*((_QWORD *)&v202 + 1))
    {
      *(_QWORD *)&v203 = *((_QWORD *)&v202 + 1);
      operator delete(*((void **)&v202 + 1));
    }
    v177 = v172 & v176 & ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)v159, (uint64_t)v175, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    if (a8 == 10)
    {
      v178 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v175 + 32))(v175, 0, 0);
      v179 = *(_OWORD *)(v178 + 64);
      __p = *(_OWORD *)(v178 + 48);
      v214 = v179;
      v180 = *(_QWORD *)(v178 + 80);
      *((_QWORD *)&v214 + 1) = *((_QWORD *)&v179 + 1) / 2;
      v215 = v180;
      (*(void (**)(__int128 *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v175 + 80))(&v202, v175, 0, 0);
      v181 = operator new(0x78uLL);
      *((_QWORD *)&v210 + 1) = v181 + 30;
      *(_QWORD *)&v211 = v181 + 30;
      v181[28] = v207;
      v182 = v206;
      v183 = *(_OWORD *)&v204[32];
      *((_OWORD *)v181 + 5) = v205;
      *((_OWORD *)v181 + 6) = v182;
      v184 = v203;
      *(_OWORD *)v181 = v202;
      *((_OWORD *)v181 + 1) = v184;
      v185 = *(_OWORD *)&v204[16];
      *((_OWORD *)v181 + 2) = *(_OWORD *)v204;
      *((_OWORD *)v181 + 3) = v185;
      *((_OWORD *)v181 + 4) = v183;
      *(_QWORD *)&v210 = v181;
      v186 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v85 + 32))(v85, 0, 0);
      v187 = (ZinIrOpLayer *)ZinBuilder::CreateReinterpretCastLayer(v96, (uint64_t)&v222, (uint64_t)&v210, &__p, *(_DWORD *)(v186 + 88));
      if ((_QWORD)v210)
      {
        *((_QWORD *)&v210 + 1) = v210;
        operator delete((void *)v210);
      }
      *(_QWORD *)&v208 = a3;
      *(_QWORD *)&v210 = &v208;
      *((_QWORD *)&v210 + 1) = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(&v202, &v210);
      v188 = ZinIrOpLayerGraph::AddNode(a1, v187, (ZinIrOpLayer ***)&v202);
      *(_QWORD *)&v202 = &unk_24C02BB18;
      if (*((_QWORD *)&v202 + 1))
      {
        *(_QWORD *)&v203 = *((_QWORD *)&v202 + 1);
        operator delete(*((void **)&v202 + 1));
      }
      v177 &= v188 & ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)v175, (uint64_t)v187, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    }
    else
    {
      *(_QWORD *)&v202 = v175;
      std::__hash_table<ZinIrTensor const*,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const* const&>((uint64_t)&v219, &v202, &v202);
      v187 = v175;
    }
    std::unordered_set<ZinIrOpLayer *>::unordered_set((uint64_t)&v202, (uint64_t)&v219);
    v152 = v177 & ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a1, (uint64_t **)v85, v187, &v202);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v202);
    p_p = &v219;
    goto LABEL_188;
  }
LABEL_191:
  *(_QWORD *)&v222 = off_24C01FBB0;
  if (SHIBYTE(v223) < 0)
    operator delete(*((void **)&v222 + 1));
  if (v195)
  {
    v196 = (char *)v195;
    operator delete(v195);
  }
  return v154;
}

void sub_206D8EC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  uint64_t v14;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v14 - 192);
  *(_QWORD *)(v14 - 144) = off_24C01FBB0;
  if (*(char *)(v14 - 113) < 0)
    operator delete(*(void **)(v14 - 136));
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t ZinRCASDecompositionUtils::MergeValuesAndIndices(uint64_t **a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v6;
  int v8;
  _QWORD *v9;
  size_t v10;
  _BYTE *v11;
  const void *v12;
  const ZinIrOpLayer *v13;
  ZinRCASDecompositionUtils **v14;
  ZinRCASDecompositionUtils **v15;
  ZinIrOpLayer *v16;
  ZinRCASDecompositionUtils *v17;
  uint64_t v18;
  int v19;
  _BYTE *v20;
  uint64_t v21;
  _BYTE *v22;
  BOOL v23;
  uint64_t v24;
  int v25;
  _BYTE *v26;
  int v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  _QWORD *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  ZinIrOpLayer *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unsigned int *v45;
  unsigned int *v46;
  unint64_t v47;
  _BYTE *v48;
  char v49;
  uint64_t v50;
  int v51;
  _BYTE *v52;
  int v53;
  uint64_t v54;
  __int128 v55;
  uint64_t ValueAt;
  int v57;
  int v58;
  uint64_t v59;
  _DWORD *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  ZinIrOpLayer *TopK;
  uint64_t v66;
  _DWORD *v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  ZinIrOpLayer *v72;
  _BOOL4 v73;
  _BOOL4 v74;
  uint64_t v75;
  int v76;
  _BYTE *v77;
  int v78;
  int v79;
  _BOOL4 v80;
  _BOOL4 v81;
  int v82;
  int v83;
  int v84;
  int v85;
  _BOOL4 v86;
  _BOOL4 v87;
  uint64_t v89;
  uint64_t **v90;
  void *v91;
  std::__shared_weak_count *v92;
  _QWORD *v93;
  _OWORD v94[2];
  int v95;
  _OWORD v96[2];
  int v97;
  void *v98;
  uint64_t v99;
  char *v100;
  _BYTE __p[48];
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  int v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  _QWORD v110[3];
  char v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  uint64_t v114;

  v6 = a2;
  v114 = *MEMORY[0x24BDAC8D0];
  v8 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 8);
  v9 = **(_QWORD ***)(a2 + 88);
  *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
  v89 = *(_QWORD *)(a2 + 16);
  if (*(char *)(a2 + 47) >= 0)
    v10 = *(unsigned __int8 *)(a2 + 47);
  else
    v10 = *(_QWORD *)(a2 + 32);
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v10 + 7);
  if (__p[23] >= 0)
    v11 = __p;
  else
    v11 = *(_BYTE **)__p;
  if (v10)
  {
    if (*(char *)(v6 + 47) >= 0)
      v12 = (const void *)(v6 + 24);
    else
      v12 = *(const void **)(v6 + 24);
    memmove(v11, v12, v10);
  }
  strcpy(&v11[v10], "_merge_");
  ZinObjectNameFactory::ZinObjectNameFactory(v110, __p);
  v90 = a1;
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  v14 = (ZinRCASDecompositionUtils **)v9[14];
  v15 = (ZinRCASDecompositionUtils **)v9[15];
  if (v14 == v15)
    goto LABEL_42;
  v16 = 0;
  do
  {
    v17 = *v14;
    if (*(_DWORD *)(*((_QWORD *)*v14 + 8) + 8) != v8)
      goto LABEL_37;
    v18 = *(_QWORD *)(v6 + 64);
    v19 = *(_DWORD *)(v18 + 8);
    if (v19 == 65)
    {
      v20 = (_BYTE *)(v18 + 48);
    }
    else
    {
      if (v19 != 66)
      {
        v23 = 0;
        goto LABEL_31;
      }
      v20 = (_BYTE *)(v18 + 56);
    }
    if (*v20)
    {
      if (v17 != (ZinRCASDecompositionUtils *)v6
        && ZinRCASDecompositionUtils::IsSameConfig(*v14, (const ZinIrOpLayer *)v6, v13))
      {
        v21 = v6;
        if (v6 + 112 != a4)
        {
          std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)a4, *(char **)(v6 + 112), *(_QWORD *)(v6 + 120), (uint64_t)(*(_QWORD *)(v6 + 120) - *(_QWORD *)(v6 + 112)) >> 3);
          v21 = v6;
        }
LABEL_36:
        *a3 = *(_DWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v21 + 32))(v21, 0, 0)
                        + 88);
        v16 = v17;
        goto LABEL_37;
      }
      goto LABEL_37;
    }
    if (v19 == 65)
      v22 = (_BYTE *)(v18 + 48);
    else
      v22 = (_BYTE *)(v18 + 56);
    v23 = *v22 != 0;
LABEL_31:
    if (v17 != (ZinRCASDecompositionUtils *)v6
      && !v23
      && ZinRCASDecompositionUtils::IsSameConfig(*v14, (const ZinIrOpLayer *)v6, v13))
    {
      v21 = (uint64_t)v17;
      if ((ZinRCASDecompositionUtils *)((char *)v17 + 112) != (ZinRCASDecompositionUtils *)a4)
      {
        std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)a4, *((char **)v17 + 14), *((_QWORD *)v17 + 15), (uint64_t)(*((_QWORD *)v17 + 15) - *((_QWORD *)v17 + 14)) >> 3);
        v21 = (uint64_t)v17;
      }
      goto LABEL_36;
    }
LABEL_37:
    ++v14;
  }
  while (v14 != v15);
  if (!v16)
  {
LABEL_42:
    v27 = *(_DWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0, 0) + 88);
    *a3 = v27;
    if (v27 == 10)
    {
      v28 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0, 0);
      ZinObjectNameFactory::CreateName((uint64_t)v110, 0, (std::string *)&v107);
      v93 = 0;
      v112 = 0;
      v113 = 0;
      *(_DWORD *)__p = 0;
      memset(&__p[8], 0, 28);
      ZinIrTensor::CreateTensor(v89, 3, (__int128 *)(v28 + 48), &v107, &v93, &v112, (unsigned int *)__p, (uint64_t *)&v98);
      v29 = v113;
      if (v113)
      {
        p_shared_owners = (unint64_t *)&v113->__shared_owners_;
        do
          v31 = __ldaxr(p_shared_owners);
        while (__stlxr(v31 - 1, p_shared_owners));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v32 = v93;
      v93 = 0;
      if (v32)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v93, v32);
      if (SBYTE7(v108) < 0)
        operator delete((void *)v107);
      v91 = v98;
      v92 = (std::__shared_weak_count *)v99;
      if (v99)
      {
        v33 = (unint64_t *)(v99 + 8);
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v6 + 24))(v6, &v91);
      v35 = v92;
      if (v92)
      {
        v36 = (unint64_t *)&v92->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v38 = (std::__shared_weak_count *)v99;
      if (v99)
      {
        v39 = (unint64_t *)(v99 + 8);
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
    }
    goto LABEL_110;
  }
  v24 = *(_QWORD *)(v6 + 64);
  v25 = *(_DWORD *)(v24 + 8);
  if (v25 != 65)
  {
    if (v25 == 66)
    {
      v26 = (_BYTE *)(v24 + 56);
      goto LABEL_66;
    }
    goto LABEL_67;
  }
  v26 = (_BYTE *)(v24 + 48);
LABEL_66:
  v41 = v16;
  if (!*v26)
LABEL_67:
    v41 = (ZinIrOpLayer *)v6;
  v42 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v41 + 32))(v41, 0, 0);
  v43 = *(_QWORD *)(v6 + 64);
  v44 = *(_DWORD *)(v43 + 8);
  if (v44 == 65)
  {
    v45 = (unsigned int *)(v43 + 16);
    v46 = (unsigned int *)(v43 + 20);
LABEL_72:
    v47 = *v45 | ((unint64_t)*v46 << 32);
  }
  else
  {
    if (v44 == 66)
    {
      v45 = (unsigned int *)(v43 + 24);
      v46 = (unsigned int *)(v43 + 28);
      goto LABEL_72;
    }
    v47 = 0x500000005;
  }
  if (v44 != 65)
  {
    if (v44 == 66)
    {
      v48 = (_BYTE *)(v43 + 56);
      goto LABEL_78;
    }
    goto LABEL_80;
  }
  v48 = (_BYTE *)(v43 + 48);
LABEL_78:
  if (*v48)
  {
    v49 = 1;
    goto LABEL_86;
  }
LABEL_80:
  v50 = *((_QWORD *)v16 + 8);
  v51 = *(_DWORD *)(v50 + 8);
  if (v51 == 65)
  {
    v52 = (_BYTE *)(v50 + 48);
LABEL_84:
    v49 = *v52 != 0;
  }
  else
  {
    if (v51 == 66)
    {
      v52 = (_BYTE *)(v50 + 56);
      goto LABEL_84;
    }
    v49 = 0;
  }
LABEL_86:
  v53 = *(_DWORD *)(v42 + 88);
  v54 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0, 0);
  v55 = *(_OWORD *)(v54 + 64);
  v107 = *(_OWORD *)(v54 + 48);
  v108 = v55;
  v109 = *(_QWORD *)(v54 + 80);
  ValueAt = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)&v107, SHIDWORD(v47));
  v57 = SetValueAtDimension<ZinTensorDimensions>(&v107, SHIDWORD(v47), ValueAt + 1);
  v58 = v57 == 0;
  if (v8 == 66)
  {
    v66 = *(_QWORD *)(v6 + 64);
    (*(void (**)(_BYTE *__return_ptr, _QWORD *, _QWORD, _QWORD))(*v9 + 80))(__p, v9, 0, 0);
    *(_OWORD *)&__p[8] = v107;
    *(_OWORD *)&__p[24] = v108;
    *(_QWORD *)&__p[40] = v109;
    v67 = operator new(0x78uLL);
    v99 = (uint64_t)(v67 + 30);
    v100 = (char *)(v67 + 30);
    v67[28] = v106;
    v68 = v105;
    v69 = v103;
    *((_OWORD *)v67 + 5) = v104;
    *((_OWORD *)v67 + 6) = v68;
    v70 = *(_OWORD *)&__p[16];
    *(_OWORD *)v67 = *(_OWORD *)__p;
    *((_OWORD *)v67 + 1) = v70;
    v71 = v102;
    *((_OWORD *)v67 + 2) = *(_OWORD *)&__p[32];
    *((_OWORD *)v67 + 3) = v71;
    *((_OWORD *)v67 + 4) = v69;
    v98 = v67;
    TopK = (ZinIrOpLayer *)ZinBuilder::CreateTopK(v89, (uint64_t)v110, (uint64_t *)&v98, v53, *(_DWORD *)(v66 + 12), *(_QWORD *)(v66 + 16), v47, SHIDWORD(v47), v66 + 32, v49);
LABEL_90:
    v72 = TopK;
    if (v98)
    {
      v99 = (uint64_t)v98;
      operator delete(v98);
    }
    if (!v72)
      goto LABEL_107;
    v112 = v6;
    v113 = (std::__shared_weak_count *)v16;
    v98 = &v112;
    v99 = 2;
    Layer2TDMapper::SourceLayer::SourceLayer(__p, &v98);
    v73 = ZinIrOpLayerGraph::AddNode(v90, v72, (ZinIrOpLayer ***)__p);
    if (v57)
      v74 = 0;
    else
      v74 = v73;
    *(_QWORD *)__p = &unk_24C02BB18;
    if (*(_QWORD *)&__p[8])
    {
      *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
      operator delete(*(void **)&__p[8]);
    }
    v75 = *((_QWORD *)v16 + 8);
    v76 = *(_DWORD *)(v75 + 8);
    if (v76 == 65)
    {
      v77 = (_BYTE *)(v75 + 48);
    }
    else
    {
      if (v76 != 66)
        goto LABEL_105;
      v77 = (_BYTE *)(v75 + 56);
    }
    if (*v77)
    {
      v78 = ZinIrOpLayerGraph::AddEdge((uint64_t)v90, (uint64_t)v9, (uint64_t)v72, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      memset(v96, 0, sizeof(v96));
      v97 = 1065353216;
      v79 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)v90, (uint64_t **)v6, v72, v96);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v96);
      v80 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)v90, (ZinIrOpLayer *)v6, 0);
      v81 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)v90, v16, 0);
      v82 = v78 & v79;
      v83 = v80 && v81;
LABEL_106:
      v58 = v74 & v82 & v83;
      goto LABEL_107;
    }
LABEL_105:
    v84 = ZinIrOpLayerGraph::AddEdge((uint64_t)v90, (uint64_t)v9, (uint64_t)v72, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    memset(v94, 0, sizeof(v94));
    v95 = 1065353216;
    v85 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)v90, (uint64_t **)v16, v72, v94);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v94);
    v86 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)v90, v16, 0);
    v87 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)v90, (ZinIrOpLayer *)v6, 0);
    v82 = v84 & v85;
    v83 = v86 && v87;
    goto LABEL_106;
  }
  if (v8 == 65)
  {
    v59 = *(_QWORD *)(v6 + 64);
    (*(void (**)(_BYTE *__return_ptr, _QWORD *, _QWORD, _QWORD))(*v9 + 80))(__p, v9, 0, 0);
    *(_OWORD *)&__p[8] = v107;
    *(_OWORD *)&__p[24] = v108;
    *(_QWORD *)&__p[40] = v109;
    v60 = operator new(0x78uLL);
    v99 = (uint64_t)(v60 + 30);
    v100 = (char *)(v60 + 30);
    v60[28] = v106;
    v61 = v105;
    v62 = v103;
    *((_OWORD *)v60 + 5) = v104;
    *((_OWORD *)v60 + 6) = v61;
    v63 = *(_OWORD *)&__p[16];
    *(_OWORD *)v60 = *(_OWORD *)__p;
    *((_OWORD *)v60 + 1) = v63;
    v64 = v102;
    *((_OWORD *)v60 + 2) = *(_OWORD *)&__p[32];
    *((_OWORD *)v60 + 3) = v64;
    *((_OWORD *)v60 + 4) = v62;
    v98 = v60;
    TopK = (ZinIrOpLayer *)ZinBuilder::CreateSortLayer(v89, (uint64_t)v110, (uint64_t *)&v98, v53, *(_DWORD *)(v59 + 12), v47, SHIDWORD(v47), v59 + 24, v49);
    goto LABEL_90;
  }
  v72 = 0;
LABEL_107:
  if (v58)
    v6 = (uint64_t)v72;
  else
    v6 = 0;
LABEL_110:
  v110[0] = off_24C01FBB0;
  if (v111 < 0)
    operator delete((void *)v110[1]);
  return v6;
}

void sub_206D8FA80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v34;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a23);
  *(_QWORD *)(v34 - 160) = off_24C01FBB0;
  if (*(char *)(v34 - 129) < 0)
    operator delete(*(void **)(v34 - 152));
  _Unwind_Resume(a1);
}

uint64_t ZinRCASDecompositionUtils::IsSameConfig(ZinRCASDecompositionUtils *this, const ZinIrOpLayer *a2, const ZinIrOpLayer *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  v3 = *((_QWORD *)this + 8);
  v4 = *(_DWORD *)(v3 + 8);
  v5 = *((_QWORD *)a2 + 8);
  if (v4 != *(_DWORD *)(v5 + 8))
    return 0;
  if (v4 == 65)
  {
    if (*(_DWORD *)(v3 + 16) == *(_DWORD *)(v5 + 16)
      && *(_DWORD *)(v3 + 20) == *(_DWORD *)(v5 + 20)
      && *(_DWORD *)(v3 + 12) == *(_DWORD *)(v5 + 12))
    {
      return std::operator==[abi:ne180100]<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>>((_QWORD *)(v3 + 24), (_QWORD *)(v5 + 24));
    }
    return 0;
  }
  if (v4 != 66
    || *(_DWORD *)(v3 + 12) != *(_DWORD *)(v5 + 12)
    || *(_DWORD *)(v3 + 24) != *(_DWORD *)(v5 + 24)
    || *(_DWORD *)(v3 + 28) != *(_DWORD *)(v5 + 28)
    || *(_QWORD *)(v3 + 16) != *(_QWORD *)(v5 + 16))
  {
    return 0;
  }
  return std::operator==[abi:ne180100]<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>>((_QWORD *)(v3 + 32), (_QWORD *)(v5 + 32));
}

void ZinRCASDecompositionUtils::CreatePartialSortDecomposition(uint64_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD v14[6];
  _QWORD *v15[4];

  if (a2 >= 1)
  {
    v8 = 1;
    v9 = 2;
    do
    {
      v10 = v9;
      do
      {
        ZinIrRCASInfo::ZinIrRCASInfo((uint64_t)v14, 1, a3, 2, v8, v10 - 2, v10 - 2, a4, 0);
        v11 = a1[1];
        if (v11 >= a1[2])
        {
          v12 = std::vector<ZinIrRCASInfo>::__push_back_slow_path<ZinIrRCASInfo const&>(a1, (uint64_t)v14);
        }
        else
        {
          std::construct_at[abi:ne180100]<ZinIrRCASInfo,ZinIrRCASInfo const&,ZinIrRCASInfo*>((ZinIrOpLayerOpCode *)a1[1], (uint64_t)v14);
          v12 = v11 + 80;
          a1[1] = v11 + 80;
        }
        a1[1] = v12;
        v14[0] = &unk_24C017970;
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v15, v15[1]);
        ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v14);
        --v10;
      }
      while (v10 > 1);
      ++v9;
    }
    while (v8++ != a2);
  }
}

void sub_206D8FD58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ZinIrRCASInfo::~ZinIrRCASInfo((ZinIrRCASInfo *)va);
  _Unwind_Resume(a1);
}

ZinIrOpLayer *ZinRCASDecompositionUtils::UpdateGraphWithDecomposedLayers(uint64_t **a1, uint64_t a2, const ZinIrOpLayerOpCode **a3, char a4)
{
  uint64_t v6;
  size_t v7;
  void **v8;
  const void *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  const ZinIrOpLayerOpCode *v13;
  int v14;
  __int128 v15;
  ZinIrTensor *v16;
  ZinIrOpLayer *inserted;
  const ZinIrOpLayerOpCode *v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  ZinIrOpLayer *RCASLayer;
  _BOOL4 v32;
  const ZinIrOpLayerOpCode *v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  ZinIrTensor *v37;
  int v38;
  _QWORD *v39;
  ZinIrOpLayer *Reshape;
  ZinIrOpLayer *v41;
  _BOOL4 v42;
  int v43;
  unsigned int v46;
  uint64_t v47;
  ZinIrOpLayerGraph *v48;
  int v49;
  ZinIrOpLayerGraph *v50;
  _OWORD v52[2];
  int v53;
  ZinIrOpLayerGraph **v54;
  _BYTE v55[20];
  __int128 v56;
  int v57;
  uint64_t v58[3];
  char v59;
  _BYTE v60[48];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  int v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  char v69;
  void *v70[2];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  void *__src;
  _BYTE *v79;
  int v80;
  __int128 v81;
  uint64_t v82;
  void *__p[2];
  __int128 v84;
  _OWORD v85[3];
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  void *v89[3];
  int v90;
  __int128 v91;
  uint64_t v92;
  void *v93;
  __int128 v94;
  __int128 v95;
  int v96;
  uint64_t v97[3];
  char v98;
  __int128 v99[2];
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  _QWORD v104[3];
  char v105;
  ZinIrOpLayerGraph *v106;
  ZinIrOpLayerGraph *v107;
  __int128 v108;
  __int128 v109;
  int v110;
  uint64_t v111[3];
  char v112;
  uint64_t v113;

  v113 = *MEMORY[0x24BDAC8D0];
  v47 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 96) - 8);
  if (*(char *)(a2 + 47) >= 0)
    v7 = *(unsigned __int8 *)(a2 + 47);
  else
    v7 = *(_QWORD *)(a2 + 32);
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v7 + 8);
  if ((SBYTE7(v84) & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if (v7)
  {
    if (*(char *)(a2 + 47) >= 0)
      v9 = (const void *)(a2 + 24);
    else
      v9 = *(const void **)(a2 + 24);
    memmove(v8, v9, v7);
  }
  strcpy((char *)v8 + v7, "_unroll_");
  ZinObjectNameFactory::ZinObjectNameFactory(v104, __p);
  if (SBYTE7(v84) < 0)
    operator delete(__p[0]);
  if (a3[1] == *a3 || (*(_DWORD *)(*(_QWORD *)(a2 + 64) + 8) - 65) >= 2)
    ZinAssertImpl("Not a valid Sort/TopK layer");
  v10 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0, 0);
  v11 = *(_OWORD *)(v10 + 64);
  v101 = *(_OWORD *)(v10 + 48);
  v102 = v11;
  v103 = *(_QWORD *)(v10 + 80);
  v46 = *(_DWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0, 0) + 88);
  v99[0] = v101;
  v99[1] = v102;
  v100 = v103;
  v12 = *(_QWORD *)(a2 + 64);
  if (*(_DWORD *)(v12 + 8) == 66)
    *((_QWORD *)&v99[0] + 1) = ZinRoundUpToNextPow2(*(_QWORD *)(v12 + 16));
  v13 = *a3;
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode((ZinIrOpLayerOpCode *)&v93, *a3);
  v93 = &unk_24C017970;
  v14 = *((_DWORD *)v13 + 11);
  v15 = *(_OWORD *)((char *)v13 + 28);
  v94 = *(_OWORD *)((char *)v13 + 12);
  v95 = v15;
  v96 = v14;
  std::set<unsigned long>::set[abi:ne180100](v97, (uint64_t)v13 + 48);
  v98 = *((_BYTE *)v13 + 72);
  v88 = 0;
  v86 = 0u;
  v87 = 0u;
  v84 = 0u;
  memset(v85, 0, sizeof(v85));
  *(_OWORD *)__p = 0u;
  DimensionOrderHint::DimensionOrderHint(v89, 0);
  LODWORD(v91) = 5;
  *((_QWORD *)&v91 + 1) = -1;
  v92 = -1;
  ZinRCASDecompositionUtils::GetRCASLowerInfo((uint64_t)&v93, (uint64_t *)&v101, (uint64_t *)__p, 1, (uint64_t)v70);
  v85[2] = v74;
  v86 = v75;
  v87 = v76;
  v88 = v77;
  *(_OWORD *)__p = *(_OWORD *)v70;
  v84 = v71;
  v85[0] = v72;
  v85[1] = v73;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v89, (char *)__src, (uint64_t)v79, (v79 - (_BYTE *)__src) >> 2);
  v90 = v80;
  v91 = v81;
  v92 = v82;
  if (__src)
  {
    v79 = __src;
    operator delete(__src);
  }
  v69 = 0;
  v16 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0, 0);
  ZinIrTensor::GetDimensionOrderHint(v16, (uint64_t)v70);
  inserted = ZinRCASDecompositionUtils::InsertTransposeAndReshape(a1, (uint64_t)__p, (DimensionOrderHint *)v70, v6, (_QWORD *)a2, &v69);
  if (v70[0])
  {
    v70[1] = v70[0];
    operator delete(v70[0]);
  }
  v18 = *a3;
  if (a3[1] == *a3)
    goto LABEL_46;
  v50 = (ZinIrOpLayerGraph *)a1;
  v48 = (ZinIrOpLayerGraph *)a2;
  v19 = 0;
  v20 = 0;
  v49 = 1;
  do
  {
    ZinIrOpLayerOpCode::ZinIrOpLayerOpCode((ZinIrOpLayerOpCode *)&v107, (const ZinIrOpLayerOpCode *)((char *)v18 + v19));
    v107 = (ZinIrOpLayerGraph *)&unk_24C017970;
    v21 = *(_OWORD *)((char *)v18 + v19 + 12);
    v22 = *(_OWORD *)((char *)v18 + v19 + 28);
    v110 = *(_DWORD *)((char *)v18 + v19 + 44);
    v108 = v21;
    v109 = v22;
    std::set<unsigned long>::set[abi:ne180100](v111, (uint64_t)v18 + v19 + 48);
    v112 = *((_BYTE *)v18 + v19 + 72);
    if (!inserted)
      ZinAssertImpl("Input or decomposed layer cannot be null");
    v23 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)inserted + 32))(inserted, 0, 0);
    v24 = *(_OWORD *)(v23 + 64);
    v66 = *(_OWORD *)(v23 + 48);
    v67 = v24;
    v68 = *(_QWORD *)(v23 + 80);
    if (v20)
    {
      ZinRCASDecompositionUtils::GetRCASLowerInfo((uint64_t)&v107, (uint64_t *)__p, (uint64_t *)__p, 0, (uint64_t)v70);
      v85[2] = v74;
      v86 = v75;
      v87 = v76;
      v88 = v77;
      *(_OWORD *)__p = *(_OWORD *)v70;
      v84 = v71;
      v85[0] = v72;
      v85[1] = v73;
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v89, (char *)__src, (uint64_t)v79, (v79 - (_BYTE *)__src) >> 2);
      v90 = v80;
      v91 = v81;
      v92 = v82;
      if (__src)
      {
        v79 = __src;
        operator delete(__src);
      }
    }
    (*(void (**)(_BYTE *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)inserted + 80))(v60, inserted, 0, 0);
    *(_OWORD *)&v60[8] = *(_OWORD *)((char *)v85 + 8);
    *(_OWORD *)&v60[24] = *(_OWORD *)((char *)&v85[1] + 8);
    *(_QWORD *)&v60[40] = *((_QWORD *)&v85[2] + 1);
    v25 = operator new(0x78uLL);
    v26 = v63;
    v27 = v64;
    v28 = v61;
    v25[4] = v62;
    v25[5] = v26;
    v25[6] = v27;
    v29 = *(_OWORD *)&v60[16];
    v30 = *(_OWORD *)&v60[32];
    *v25 = *(_OWORD *)v60;
    v25[1] = v29;
    v70[1] = (char *)v25 + 120;
    *(_QWORD *)&v71 = (char *)v25 + 120;
    *((_DWORD *)v25 + 28) = v65;
    v25[2] = v30;
    v25[3] = v28;
    v70[0] = v25;
    RCASLayer = (ZinIrOpLayer *)ZinBuilder::CreateRCASLayer(v47, (uint64_t)v104, v70, v46, v108, SDWORD1(v108), v91, *((uint64_t *)&v91 + 1), *(uint64_t *)((char *)&v109 + 4), v92, (uint64_t)v111, a4);
    if (v70[0])
    {
      v70[1] = v70[0];
      operator delete(v70[0]);
    }
    if (RCASLayer)
    {
      v106 = v48;
      v54 = &v106;
      *(_QWORD *)v55 = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(v70, &v54);
      v32 = ZinIrOpLayerGraph::AddNode(a1, RCASLayer, (ZinIrOpLayer ***)v70);
      v70[0] = &unk_24C02BB18;
      if (v70[1])
      {
        *(void **)&v71 = v70[1];
        operator delete(v70[1]);
      }
      v49 &= v32 & ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)inserted, (uint64_t)RCASLayer, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    }
    v33 = *a3;
    v34 = 0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 4);
    if (v34 - 1 <= v20)
    {
      inserted = RCASLayer;
    }
    else
    {
      if (v34 <= v20 + 1)
        std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
      ZinIrOpLayerOpCode::ZinIrOpLayerOpCode((ZinIrOpLayerOpCode *)&v54, (const ZinIrOpLayerOpCode *)((char *)v33 + v19 + 80));
      v54 = (ZinIrOpLayerGraph **)&unk_24C017970;
      v35 = *(_OWORD *)((char *)v33 + v19 + 92);
      v36 = *(_OWORD *)((char *)v33 + v19 + 108);
      v57 = *(_DWORD *)((char *)v33 + v19 + 124);
      *(_OWORD *)&v55[4] = v35;
      v56 = v36;
      std::set<unsigned long>::set[abi:ne180100](v58, (uint64_t)v33 + v19 + 128);
      v59 = *((_BYTE *)v33 + v19 + 152);
      v66 = *(_OWORD *)__p;
      v67 = v84;
      v68 = *(_QWORD *)&v85[0];
      ZinRCASDecompositionUtils::GetRCASLowerInfo((uint64_t)&v54, (uint64_t *)&v66, (uint64_t *)__p, 0, (uint64_t)v70);
      inserted = ZinRCASDecompositionUtils::InsertTransposeAndReshape(a1, (uint64_t)v70, (DimensionOrderHint *)v89, (uint64_t)RCASLayer, v48, &v69);
      (*(void (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)inserted + 32))(inserted, 0, 0);
      if (__src)
      {
        v79 = __src;
        operator delete(__src);
      }
      v54 = (ZinIrOpLayerGraph **)&unk_24C017970;
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v58, (_QWORD *)v58[1]);
      ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v54);
    }
    if (!v69)
    {
      v37 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)inserted + 32))(inserted, 0, 0);
      v49 = v49 & (ZinMirTensorTransform::FixDimensionOrder(v37, a1, (DimensionOrderHint *)v89, 1) == 0);
    }
    v107 = (ZinIrOpLayerGraph *)&unk_24C017970;
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v111, (_QWORD *)v111[1]);
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v107);
    ++v20;
    v18 = *a3;
    v19 += 80;
  }
  while (0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 4) > v20);
  if (!inserted)
  {
LABEL_46:
    v41 = 0;
  }
  else
  {
    v38 = v49;
    v39 = (_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)inserted + 32))(inserted, 0, 0)+ 48);
    if (ZinTensorDimensionsEqual(v39, v99))
    {
      Reshape = inserted;
    }
    else
    {
      Reshape = (ZinIrOpLayer *)ZinBuilder::CreateReshape(v47, (uint64_t)v104, (uint64_t)v39, v46, v99, (const DimensionOrderHint *)v89);
      if (Reshape)
      {
        v107 = v48;
        *(_QWORD *)v60 = &v107;
        *(_QWORD *)&v60[8] = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(v70, v60);
        v42 = ZinIrOpLayerGraph::AddNode(a1, Reshape, (ZinIrOpLayer ***)v70);
        v70[0] = &unk_24C02BB18;
        if (v70[1])
        {
          *(void **)&v71 = v70[1];
          operator delete(v70[1]);
        }
        v38 = v49 & v42 & ZinIrOpLayerGraph::AddEdge((uint64_t)v50, (uint64_t)inserted, (uint64_t)Reshape, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      }
    }
    memset(v52, 0, sizeof(v52));
    v53 = 1065353216;
    v43 = ZinIrOpLayerGraph::MoveOutgoingEdges(v50, (uint64_t **)v48, Reshape, v52);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v52);
    if ((v38 & v43 & ZinIrOpLayerGraph::RemoveNode(v50, v48, 0)) != 0)
      v41 = Reshape;
    else
      v41 = 0;
  }
  if (v89[0])
  {
    v89[1] = v89[0];
    operator delete(v89[0]);
  }
  v93 = &unk_24C017970;
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v97, (_QWORD *)v97[1]);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v93);
  v104[0] = off_24C01FBB0;
  if (v105 < 0)
    operator delete((void *)v104[1]);
  return v41;
}

void sub_206D906C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  uint64_t v64;
  void *v66;

  if (__p)
    operator delete(__p);
  v66 = (void *)STACK[0x2D8];
  if (STACK[0x2D8])
  {
    STACK[0x2E0] = (unint64_t)v66;
    operator delete(v66);
  }
  ZinIrRCASInfo::~ZinIrRCASInfo((ZinIrRCASInfo *)&STACK[0x310]);
  *(_QWORD *)(v64 - 232) = off_24C01FBB0;
  if (*(char *)(v64 - 201) < 0)
    operator delete(*(void **)(v64 - 224));
  _Unwind_Resume(a1);
}

void ZinRCASDecompositionUtils::GetRCASLowerInfo(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  int v18;
  int v19;
  _BOOL4 v20;
  BOOL v21;
  double v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  long double v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  void *__p;
  _BYTE *v37;
  int v38;
  __int128 v39;
  uint64_t v40;

  *(_QWORD *)(a5 + 112) = 0;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 96) = 0u;
  v10 = (char *)(a5 + 120);
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)a5 = 0u;
  DimensionOrderHint::DimensionOrderHint(a5 + 120, 0);
  *(_DWORD *)(a5 + 152) = 5;
  *(_QWORD *)(a5 + 160) = -1;
  *(_QWORD *)(a5 + 168) = -1;
  if (a4)
    v11 = a2;
  else
    v11 = a3;
  v12 = *v11;
  v13 = v11[1];
  v39 = *((_OWORD *)v11 + 1);
  v40 = v11[4];
  if ((a4 & 1) != 0 || !DimensionOrderHint::IsSet((DimensionOrderHint *)(a3 + 15)))
    goto LABEL_20;
  ZinRCASDecompositionUtils::GetRCASLowerInfo(ZinIrRCASInfo const&,ZinTensorDimensions const&,ZinRCASDecompositionUtils::RCASLowerInfo const&,BOOL)::$_0::operator()(*(_QWORD *)(a1 + 32), (uint64_t)&__p);
  v15 = a3[15];
  v14 = a3[16];
  if (v14 - v15 != v37 - (_BYTE *)__p)
  {
    v20 = 1;
    goto LABEL_16;
  }
  if (v15 != v14)
  {
    v16 = v15 + 4;
    v17 = (int *)__p;
    do
    {
      v18 = *v17++;
      v19 = *(_DWORD *)(v16 - 4);
      v20 = v19 != v18;
      v21 = v19 != v18 || v16 == v14;
      v16 += 4;
    }
    while (!v21);
LABEL_16:
    if (!__p)
      goto LABEL_18;
    goto LABEL_17;
  }
  v20 = 0;
  if (__p)
  {
LABEL_17:
    v37 = __p;
    operator delete(__p);
  }
LABEL_18:
  if (v20)
  {
    v12 = *a3;
    v13 = a3[1];
    v39 = *((_OWORD *)a3 + 1);
    v40 = a3[4];
  }
LABEL_20:
  v22 = log2((double)v13);
  v23 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a5 = *(_OWORD *)a2;
  *(_OWORD *)(a5 + 16) = v23;
  v24 = a2[4];
  *(_QWORD *)(a5 + 40) = v12;
  *(_QWORD *)(a5 + 32) = v24;
  *(_QWORD *)(a5 + 48) = v13;
  *(_OWORD *)(a5 + 56) = v39;
  *(_QWORD *)(a5 + 72) = v40;
  DimensionOrderHint::DimensionOrderHint(&__p, 0);
  if (v10 != (char *)&__p)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v10, (char *)__p, (uint64_t)v37, (v37 - (_BYTE *)__p) >> 2);
  *(_DWORD *)(a5 + 144) = v38;
  if (__p)
  {
    v37 = __p;
    operator delete(__p);
  }
  *(_DWORD *)(a5 + 152) = *(_DWORD *)(a1 + 20);
  v26 = *(_QWORD *)(a1 + 32);
  v25 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a5 + 160) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a5 + 168) = v25;
  v27 = *(_DWORD *)(a1 + 12);
  if (v26 > 2)
  {
    v30 = (uint64_t)v22;
    if (v26 >= (uint64_t)v22 - 3)
    {
      if (*(uint64_t *)(a5 + 48) >= 16)
        v28 = 16;
      else
        v28 = *(_QWORD *)(a5 + 48);
      ZinRCASDecompositionUtils::GetRCASLowerInfo(ZinIrRCASInfo const&,ZinTensorDimensions const&,ZinRCASDecompositionUtils::RCASLowerInfo const&,BOOL)::$_0::operator()(v26, (uint64_t)&__p);
      if (v10 != (char *)&__p)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v10, (char *)__p, (uint64_t)v37, (v37 - (_BYTE *)__p) >> 2);
      *(_DWORD *)(a5 + 144) = v38;
      if (__p)
      {
        v37 = __p;
        operator delete(__p);
      }
      v31 = *(_QWORD *)(a5 + 160);
      v32 = log2((double)v28);
      v33 = *(_QWORD *)(a5 + 168) - v30 + 4;
      *(_QWORD *)(a5 + 160) = (unint64_t)v32 - v30 + v31;
      *(_QWORD *)(a5 + 168) = v33;
    }
    else
    {
      ZinRCASDecompositionUtils::GetRCASLowerInfo(ZinIrRCASInfo const&,ZinTensorDimensions const&,ZinRCASDecompositionUtils::RCASLowerInfo const&,BOOL)::$_0::operator()(v26, (uint64_t)&__p);
      if (v10 != (char *)&__p)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v10, (char *)__p, (uint64_t)v37, (v37 - (_BYTE *)__p) >> 2);
      v28 = 1 << (v30 - v26);
      *(_DWORD *)(a5 + 144) = v38;
      if (__p)
      {
        v37 = __p;
        operator delete(__p);
      }
      *(_QWORD *)(a5 + 160) -= *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a5 + 168) = 0;
    }
  }
  else
  {
    if (*(uint64_t *)(a5 + 48) >= 8)
      v28 = 8;
    else
      v28 = *(_QWORD *)(a5 + 48);
    ZinRCASDecompositionUtils::GetRCASLowerInfo(ZinIrRCASInfo const&,ZinTensorDimensions const&,ZinRCASDecompositionUtils::RCASLowerInfo const&,BOOL)::$_0::operator()(v26, (uint64_t)&__p);
    if (v10 != (char *)&__p)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v10, (char *)__p, (uint64_t)v37, (v37 - (_BYTE *)__p) >> 2);
    *(_DWORD *)(a5 + 144) = v38;
    if (__p)
    {
      v37 = __p;
      operator delete(__p);
    }
    v29 = log2((double)(v28 >> (v27 == 2)));
    if (*(_QWORD *)(a1 + 24) >= (unint64_t)v29)
    {
      *(_DWORD *)(a5 + 152) = 3;
      *(_QWORD *)(a5 + 160) -= (unint64_t)v29;
    }
  }
  v34 = *(_QWORD *)(a5 + 48) / v28;
  if (v34 <= 1)
    v34 = 1;
  *(_QWORD *)(a5 + 48) = v28;
  *(_QWORD *)(a5 + 56) = v34;
  v35 = *(_OWORD *)(a5 + 56);
  *(_OWORD *)(a5 + 80) = *(_OWORD *)(a5 + 40);
  *(_OWORD *)(a5 + 96) = v35;
  *(_QWORD *)(a5 + 112) = *(_QWORD *)(a5 + 72);
  if (v27 == 2)
  {
    *(uint64_t *)(a5 + 88) /= 2;
    *(uint64_t *)(a5 + 8) /= 2;
  }
}

void sub_206D90C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;
  void **v11;
  void *v13;

  if (__p)
    operator delete(__p);
  v13 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 128) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

ZinIrOpLayer *ZinRCASDecompositionUtils::InsertTransposeAndReshape(uint64_t **a1, uint64_t a2, DimensionOrderHint *a3, uint64_t a4, _QWORD *a5, _BYTE *a6)
{
  int v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  const void *v16;
  uint64_t v17;
  __int128 v18;
  DimensionOrderHint *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  int v23;
  ZinIrOpLayer *Transpose;
  ZinIrOpLayer *Reshape;
  _BOOL4 v26;
  int v27;
  ZinIrTensor *v28;
  int v29;
  int v30;
  ZinIrTensor *v32;
  _OWORD *v33;
  _BOOL4 v34;
  int v35;
  ZinIrTensor *v36;
  uint64_t v37;
  __int128 v38;
  int fixed;
  ZinIrOpLayer **v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  _OWORD *v45;
  void *__p[2];
  __int128 v47;
  uint64_t v48;
  _QWORD v49[3];
  char v50;
  _QWORD *v51;
  _QWORD v52[4];

  v52[2] = *MEMORY[0x24BDAC8D0];
  *a6 = 0;
  v12 = *(_DWORD *)((*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a5 + 32))(a5, 0, 0) + 88);
  v13 = a5[2];
  if (*(char *)(a4 + 47) >= 0)
    v14 = *(unsigned __int8 *)(a4 + 47);
  else
    v14 = *(_QWORD *)(a4 + 32);
  v15 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v14 + 4);
  if (SBYTE7(v47) < 0)
    v15 = (void **)__p[0];
  if (v14)
  {
    if (*(char *)(a4 + 47) >= 0)
      v16 = (const void *)(a4 + 24);
    else
      v16 = *(const void **)(a4 + 24);
    memmove(v15, v16, v14);
  }
  strcpy((char *)v15 + v14, "_tr_");
  ZinObjectNameFactory::ZinObjectNameFactory(v49, __p);
  if (SBYTE7(v47) < 0)
    operator delete(__p[0]);
  v17 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a4 + 32))(a4, 0, 0);
  v18 = *(_OWORD *)(v17 + 64);
  *(_OWORD *)__p = *(_OWORD *)(v17 + 48);
  v47 = v18;
  v48 = *(_QWORD *)(v17 + 80);
  v19 = (DimensionOrderHint *)(a2 + 120);
  if (!DimensionOrderHint::IsSet((DimensionOrderHint *)(a2 + 120)) || !DimensionOrderHint::IsSet(a3))
  {
LABEL_19:
    v23 = 1;
    Transpose = (ZinIrOpLayer *)a4;
    goto LABEL_20;
  }
  v21 = *(_DWORD **)a3;
  v20 = (_DWORD *)*((_QWORD *)a3 + 1);
  v22 = *(_DWORD **)(a2 + 120);
  if ((_DWORD *)((char *)v20 - *(_QWORD *)a3) == (_DWORD *)(*(_QWORD *)(a2 + 128) - (_QWORD)v22))
  {
    while (v21 != v20)
    {
      if (*v21 != *v22)
        goto LABEL_34;
      ++v21;
      ++v22;
    }
    goto LABEL_19;
  }
LABEL_34:
  v32 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a4 + 32))(a4, 0, 0);
  fixed = ZinMirTensorTransform::FixDimensionOrder(v32, a1, a3, 1);
  v23 = fixed == 0;
  v33 = operator new(0x10uLL);
  v43 = v33;
  *v33 = xmmword_207A7E790;
  v44 = (uint64_t)(v33 + 1);
  v45 = v33 + 1;
  Transpose = (ZinIrOpLayer *)ZinBuilder::CreateTranspose(v13, (uint64_t)v49, (uint64_t)__p, v12, (uint64_t)&v43);
  if (Transpose)
  {
    v51 = a5;
    v52[0] = &v51;
    v52[1] = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&v40, v52);
    v34 = ZinIrOpLayerGraph::AddNode(a1, Transpose, &v40);
    v40 = (ZinIrOpLayer **)&unk_24C02BB18;
    if (v41)
    {
      v42 = v41;
      operator delete(v41);
    }
    v35 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, a4, (uint64_t)Transpose, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    v36 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Transpose + 32))(Transpose, 0, 0);
    if (ZinMirTensorTransform::FixDimensionOrder(v36, a1, (DimensionOrderHint *)(a2 + 120), 1) | fixed)
      v23 = 0;
    else
      v23 = v34 & v35;
    *a6 = 1;
  }
  v37 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Transpose + 32))(Transpose, 0, 0);
  v38 = *(_OWORD *)(v37 + 64);
  *(_OWORD *)__p = *(_OWORD *)(v37 + 48);
  v47 = v38;
  v48 = *(_QWORD *)(v37 + 80);
  if (v43)
  {
    v44 = (uint64_t)v43;
    operator delete(v43);
  }
LABEL_20:
  if (ZinTensorDimensionsEqual(__p, (_QWORD *)(a2 + 80)))
  {
    Reshape = Transpose;
  }
  else
  {
    Reshape = (ZinIrOpLayer *)ZinBuilder::CreateReshape(v13, (uint64_t)v49, (uint64_t)__p, v12, (__int128 *)(a2 + 40), (const DimensionOrderHint *)(a2 + 120));
    if (Reshape)
    {
      v52[0] = a5;
      v43 = v52;
      v44 = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(&v40, &v43);
      v26 = ZinIrOpLayerGraph::AddNode(a1, Reshape, &v40);
      v40 = (ZinIrOpLayer **)&unk_24C02BB18;
      if (v41)
      {
        v42 = v41;
        operator delete(v41);
      }
      v27 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)Transpose, (uint64_t)Reshape, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      v28 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Reshape + 32))(Reshape, 0, 0);
      v29 = ZinMirTensorTransform::FixDimensionOrder(v28, a1, v19, 1);
      v30 = v26 & v27;
      if (v29)
        v30 = 0;
      v23 &= v30;
      *a6 = 1;
    }
    (*(void (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Reshape + 32))(Reshape, 0, 0);
  }
  v49[0] = off_24C01FBB0;
  if (v50 < 0)
    operator delete((void *)v49[1]);
  if (v23)
    return Reshape;
  else
    return 0;
}

void sub_206D910DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

void ZinRCASValidationUtils::ValidateCommonInput(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v9;
  uint64_t ValueAt;
  char v11;
  char v12;
  _QWORD **v13;
  uint64_t *v14;
  unint64_t v15;
  char v16;
  uint64_t Dimension;
  _QWORD *v18;
  _QWORD **v19;
  BOOL v20;
  unint64_t v21;
  std::string *v22;
  int v23;
  std::string v24;
  char v25;
  _QWORD **v26;
  _QWORD *v27[2];

  if (a5)
    v9 = 7;
  else
    v9 = 8;
  if (a4 != 5)
  {
    ValueAt = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)(a1 + 8), a4);
    if (ValueAt > v9)
      ZinAssertImpl("Sort/TopK layer's vector_dimension size (%zd) exceeds the %ld-element record limit.", ValueAt, v9);
  }
  qmemcpy(&v24, "NDCHW", 5);
  std::set<char>::set[abi:ne180100]((uint64_t)&v26, (char *)&v24, 5);
  v25 = 0;
  v11 = ToCharDimension(a3, &v25);
  std::__tree<char>::__erase_unique<char>((uint64_t)&v26, &v25);
  if (a4 != 5)
  {
    v24.__r_.__value_.__s.__data_[0] = 0;
    v12 = ToCharDimension(a4, &v24);
    std::__tree<char>::__erase_unique<char>((uint64_t)&v26, (char *)&v24);
    v11 &= v12;
  }
  memset(&v24, 0, sizeof(v24));
  v13 = v26;
  if (v26 == v27)
  {
    v15 = 1;
    if ((v11 & 1) != 0)
      goto LABEL_17;
LABEL_22:
    ZinAssertImpl("Unknown dimension for Sort/TopK");
  }
  v14 = (uint64_t *)(a1 + 8);
  v15 = 1;
  do
  {
    v23 = 0;
    v16 = ToZinIrDimension(*((char *)v13 + 25), &v23);
    Dimension = ZinTensorDimensions::GetDimension(v14, v23);
    std::string::push_back(&v24, *((_BYTE *)v13 + 25));
    v18 = v13[1];
    if (v18)
    {
      do
      {
        v19 = (_QWORD **)v18;
        v18 = (_QWORD *)*v18;
      }
      while (v18);
    }
    else
    {
      do
      {
        v19 = (_QWORD **)v13[2];
        v20 = *v19 == v13;
        v13 = v19;
      }
      while (!v20);
    }
    v11 &= v16;
    v15 *= Dimension;
    v13 = v19;
  }
  while (v19 != v27);
  if ((v11 & 1) == 0)
    goto LABEL_22;
LABEL_17:
  v21 = *(_QWORD *)(a2 + 384);
  if (v15 > v21)
  {
    v22 = &v24;
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v22 = (std::string *)v24.__r_.__value_.__r.__words[0];
    ZinAssertImpl("Sort/TopK batched %s dimensions' product %ld exceeds max allowed %ld", (const char *)v22, v15, v21);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v26, v27[0]);
}

void sub_206D9138C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,char a21,_QWORD *a22)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a21, a22);
  _Unwind_Resume(a1);
}

unint64_t ZinRCASValidationUtils::ValidateCommonParams(unint64_t result, int a2, int a3, _QWORD *a4, int a5)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;

  if (a2 == a3)
    ZinAssertImpl("Sort and Vector dimension cannot be the same");
  if (a3 == 5)
  {
    if (a5)
      ZinAssertImpl("Vector dimension should be specified for indices generation");
  }
  else
  {
    result = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)(result + 8), a3);
    v8 = (_QWORD *)*a4;
    v7 = a4 + 1;
    v6 = v8;
    if (v8 != v7)
    {
      do
      {
        v9 = v6[4];
        if (v9 >= result)
          ZinAssertImpl("Sort/TopK key value must within [0, %ld], but %ld is found", result - 1, v9);
        v10 = (_QWORD *)v6[1];
        if (v10)
        {
          do
          {
            v11 = v10;
            v10 = (_QWORD *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = (_QWORD *)v6[2];
            v12 = *v11 == (_QWORD)v6;
            v6 = v11;
          }
          while (!v12);
        }
        v6 = v11;
      }
      while (v11 != v7);
    }
  }
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned short>,std::allocator<ZinIrConstData_specialization<unsigned short>>,std::vector<unsigned short>,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xA0uLL);
  result = std::__shared_ptr_emplace<ZinIrConstData_specialization<unsigned short>>::__shared_ptr_emplace[abi:ne180100]<std::vector<unsigned short>,std::allocator<ZinIrConstData_specialization<unsigned short>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_206D914C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinIrConstData_specialization<unsigned short>>::__shared_ptr_emplace[abi:ne180100]<std::vector<unsigned short>,std::allocator<ZinIrConstData_specialization<unsigned short>>,0>(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_24C05BCD8;
  a1[1] = 0;
  ZinIrConstData_specialization<unsigned short>::ZinIrConstData_specialization((ZinIrConstData *)(a1 + 3), a2);
  return a1;
}

void sub_206D91514(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

ZinIrConstData *ZinIrConstData_specialization<unsigned short>::ZinIrConstData_specialization(ZinIrConstData *a1, uint64_t a2)
{
  uint64_t v4;

  ZinIrConstData::ZinIrConstData(a1);
  *(_QWORD *)v4 = &unk_24C024E40;
  details::ZinIrMappedData_Impl<unsigned short>::ZinIrMappedData_Impl((char *)(v4 + 104), a2);
  return a1;
}

void sub_206D91568(_Unwind_Exception *a1)
{
  void **v1;

  ZinIrConstData::~ZinIrConstData(v1);
  _Unwind_Resume(a1);
}

char *details::ZinIrMappedData_Impl<unsigned short>::ZinIrMappedData_Impl(char *a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  char *v6;
  char *v7;

  a1[2] = 0;
  *((_QWORD *)a1 + 1) = 0;
  *(_WORD *)a1 = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = a1;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_))
  {
    v6 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                             + 32))(details::ZinIrMappedDataBase_Impl::backing_, v4 - (_QWORD)v5);
    if (!v6)
      ZinAssertImpl("Error: Failed to allocate memory for file backing");
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_))
    memcpy(v6, *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  v7 = &v6[*(_QWORD *)(a2 + 8) - *(_QWORD *)a2];
  *((_QWORD *)a1 + 1) = v6;
  *((_QWORD *)a1 + 2) = v7;
  *((_QWORD *)a1 + 3) = v7;
  a1[2] = 1;
  std::vector<unsigned short>::resize(a2, 0);
  std::vector<unsigned short>::shrink_to_fit(a2);
  return a1;
}

void std::vector<unsigned short>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 2 * a2;
  }
  else
  {
    std::vector<unsigned short>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<unsigned short>::shrink_to_fit(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BYTE *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __int16 v13;

  v2 = a1 + 16;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(char **)a1;
  v5 = *(_BYTE **)(a1 + 8);
  v6 = (v5 - v4) >> 1;
  if (v6 < (v3 - (uint64_t)v4) >> 1)
  {
    if (v5 == v4)
    {
      v11 = 0;
      v9 = 2 * v6;
    }
    else
    {
      v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<half>>(v2, v6);
      v4 = *(char **)a1;
      v8 = *(char **)(a1 + 8);
      v9 = (uint64_t)&v7[2 * v6];
      v11 = &v7[2 * v10];
      if (v8 != *(char **)a1)
      {
        v12 = v9;
        do
        {
          v13 = *((_WORD *)v8 - 1);
          v8 -= 2;
          *(_WORD *)(v12 - 2) = v13;
          v12 -= 2;
        }
        while (v8 != v4);
        goto LABEL_9;
      }
    }
    v12 = v9;
LABEL_9:
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v11;
    if (v4)
      operator delete(v4);
  }
}

void std::vector<unsigned short>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int16 v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 1);
    if (v10 < 0)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 1;
    v12 = v5 - v8;
    if (v12 > v10)
      v10 = v12;
    if (v12 >= 0x7FFFFFFFFFFFFFFELL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<half>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[2 * v11];
    v16 = &v14[2 * v13];
    bzero(v15, 2 * a2);
    v17 = &v15[2 * a2];
    while (v7 != v8)
    {
      v18 = *((_WORD *)v7 - 1);
      v7 -= 2;
      *((_WORD *)v15 - 1) = v18;
      v15 -= 2;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

uint64_t ZinRCASDecompositionUtils::TransposeRCASDimensions(uint64_t a1, int __val, int a3)
{
  uint64_t v6;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::string *p_p;
  std::string::size_type size;
  std::string *v24;
  __int128 v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t Transpose;
  std::string __p;
  std::string v32;
  void *v33[2];
  int64_t v34;
  std::string v35;
  std::string v36;
  std::string v37;
  std::string v38;
  std::string v39;
  __int128 v40;
  _DWORD *v41;
  _QWORD v42[3];
  char v43;

  v6 = *(_QWORD *)(a1 + 16);
  std::to_string(&v35, __val);
  v7 = *(char *)(a1 + 47);
  if (v7 >= 0)
    v8 = (const std::string::value_type *)(a1 + 24);
  else
    v8 = *(const std::string::value_type **)(a1 + 24);
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a1 + 47);
  else
    v9 = *(_QWORD *)(a1 + 32);
  v10 = std::string::insert(&v35, 0, v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v36, "_", 1uLL);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v32, "transpose_rcas");
  v14 = std::string::append(&v32, "_xfm", 4uLL);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v34 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)v33 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (v34 >= 0)
    v16 = v33;
  else
    v16 = (void **)v33[0];
  if (v34 >= 0)
    v17 = HIBYTE(v34);
  else
    v17 = (std::string::size_type)v33[1];
  v18 = std::string::append(&v37, (const std::string::value_type *)v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = std::string::append(&v38, "_", 1uLL);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v39.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v24 = std::string::append(&v39, (const std::string::value_type *)p_p, size);
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v41 = (_DWORD *)v24->__r_.__value_.__r.__words[2];
  v40 = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  ZinObjectNameFactory::ZinObjectNameFactory(v42, &v40);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)v40);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34) < 0)
    operator delete(v33[0]);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  v26 = operator new(0x10uLL);
  *((_QWORD *)&v40 + 1) = v26 + 4;
  v41 = v26 + 4;
  *v26 = __val;
  v26[1] = a3;
  v26[2] = a3;
  v26[3] = __val;
  *(_QWORD *)&v40 = v26;
  v27 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
  v28 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
  Transpose = ZinBuilder::CreateTranspose(v6, (uint64_t)v42, v27 + 48, *(_DWORD *)(v28 + 88), (uint64_t)&v40);
  if ((_QWORD)v40)
  {
    *((_QWORD *)&v40 + 1) = v40;
    operator delete((void *)v40);
  }
  v42[0] = off_24C01FBB0;
  if (v43 < 0)
    operator delete((void *)v42[1]);
  return Transpose;
}

void sub_206D91B24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;

  *(_QWORD *)(v52 - 88) = off_24C01FBB0;
  if (*(char *)(v52 - 57) < 0)
    operator delete(*(void **)(v52 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t std::operator==[abi:ne180100]<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _BOOL8 v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;

  if (a1[2] != a2[2])
    return 0;
  v4 = (_QWORD *)*a1;
  v2 = a1 + 1;
  v3 = v4;
  if (v4 == v2)
    return 1;
  v5 = (_QWORD *)*a2;
  do
  {
    v6 = v3[4] == v5[4];
    if (v3[4] != v5[4])
      break;
    v7 = (_QWORD *)v3[1];
    v8 = v3;
    if (v7)
    {
      do
      {
        v3 = v7;
        v7 = (_QWORD *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        v3 = (_QWORD *)v8[2];
        v9 = *v3 == (_QWORD)v8;
        v8 = v3;
      }
      while (!v9);
    }
    v10 = (_QWORD *)v5[1];
    if (v10)
    {
      do
      {
        v11 = v10;
        v10 = (_QWORD *)*v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        v11 = (_QWORD *)v5[2];
        v9 = *v11 == (_QWORD)v5;
        v5 = v11;
      }
      while (!v9);
    }
    v5 = v11;
  }
  while (v3 != v2);
  return v6;
}

uint64_t std::vector<ZinIrRCASInfo>::__push_back_slow_path<ZinIrRCASInfo const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  ZinIrOpLayerOpCode *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x199999999999999)
    v9 = 0x333333333333333;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (ZinIrOpLayerOpCode *)&v10[80 * v4];
  v16 = &v10[80 * v9];
  std::construct_at[abi:ne180100]<ZinIrRCASInfo,ZinIrRCASInfo const&,ZinIrRCASInfo*>(v14, a2);
  v15 = (char *)v14 + 80;
  std::vector<ZinIrRCASInfo>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<ZinIrRCASInfo>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_206D91DE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ZinIrRCASInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

ZinIrOpLayerOpCode *std::construct_at[abi:ne180100]<ZinIrRCASInfo,ZinIrRCASInfo const&,ZinIrRCASInfo*>(ZinIrOpLayerOpCode *a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(a1, (const ZinIrOpLayerOpCode *)a2);
  *(_QWORD *)v4 = &unk_24C017970;
  v5 = *(_OWORD *)(a2 + 12);
  v6 = *(_OWORD *)(a2 + 28);
  *(_DWORD *)(v4 + 44) = *(_DWORD *)(a2 + 44);
  *(_OWORD *)(v4 + 28) = v6;
  *(_OWORD *)(v4 + 12) = v5;
  std::set<unsigned long>::set[abi:ne180100]((uint64_t *)(v4 + 48), a2 + 48);
  *((_BYTE *)a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

void sub_206D91E58(_Unwind_Exception *a1)
{
  ZinIrHalH13g *v1;

  ZinIrHalH13g::~ZinIrHalH13g(v1);
  _Unwind_Resume(a1);
}

void ZinRCASDecompositionUtils::GetRCASLowerInfo(ZinIrRCASInfo const&,ZinTensorDimensions const&,ZinRCASDecompositionUtils::RCASLowerInfo const&,BOOL)::$_0::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  void *__p;
  void *v5;
  char *v6;

  if (a1 > 2)
  {
    v3 = operator new(0x14uLL);
    v5 = v3 + 5;
    v6 = (char *)(v3 + 5);
    v3[4] = 4;
    *(_OWORD *)v3 = xmmword_207A9C698;
  }
  else
  {
    v3 = operator new(0x14uLL);
    v5 = v3 + 5;
    v6 = (char *)(v3 + 5);
    v3[4] = 4;
    *(_OWORD *)v3 = xmmword_207A9C684;
  }
  __p = v3;
  DimensionOrderHint::DimensionOrderHint(a2, &__p);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
}

void sub_206D91F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::set<char>::set[abi:ne180100](uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v5 = a3;
    do
    {
      std::__tree<char>::__emplace_hint_unique_key_args<char,char const&>((uint64_t **)a1, v4, a2, a2);
      ++a2;
      --v5;
    }
    while (v5);
  }
  return a1;
}

void sub_206D91FA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<char>::__emplace_hint_unique_key_args<char,char const&>(uint64_t **a1, uint64_t *a2, char *a3, _BYTE *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<char>::__find_equal<char>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x20uLL);
    *((_BYTE *)v7 + 25) = *a4;
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<char>::__find_equal<char>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, char *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((char *)a2 + 25), v6 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((char *)v10 + 25) < v15)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(char *)(v16 + 25);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((char *)a4 + 25))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(char *)(v20 + 25);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t std::__tree<char>::__erase_unique<char>(uint64_t a1, char *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = *(char *)(v2 + 25);
    v6 = v5 < v3;
    if (v5 >= v3)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (!v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(char *)(v4 + 25))
    return 0;
  std::__tree<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,std::__map_value_compare<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,HazardEdgeCompare,true>,std::allocator<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>>>::__remove_node_pointer((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

double ZinLinearPattern::SharedClone@<D0>(ZinLinearPattern *this@<X0>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  std::allocate_shared[abi:ne180100]<ZinLinearPattern,std::allocator<ZinLinearPattern>,ZinLinearPattern const&,void>((uint64_t *)this, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

uint64_t ZinLinearPattern::GetAtoms(ZinLinearPattern *this)
{
  return (uint64_t)this + 184;
}

void ZinLinearPattern::GetOutputEdges(ZinLinearPattern *this@<X0>, char **a2@<X8>)
{
  uint64_t FirstMatch;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t *v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;

  v18 = 0;
  v19 = 0;
  v20 = 0;
  if (*((_DWORD *)this + 16))
    FirstMatch = ZinPattern::GetFirstMatch(this);
  else
    FirstMatch = (*(uint64_t (**)(ZinLinearPattern *))(*(_QWORD *)this + 56))(this);
  v4 = FirstMatch;
  if (FirstMatch)
  {
    v5 = *(uint64_t **)(FirstMatch + 112);
    v6 = *(uint64_t **)(FirstMatch + 120);
    if (v5 == v6)
    {
      v17 = 0;
      v7 = 0;
      v16 = 0;
    }
    else
    {
      v7 = 0;
      do
      {
        v8 = *v5;
        if (v7 >= (uint64_t *)v20)
        {
          v9 = ((char *)v7 - v18) >> 4;
          if ((unint64_t)(v9 + 1) >> 60)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v10 = (v20 - v18) >> 3;
          if (v10 <= v9 + 1)
            v10 = v9 + 1;
          if ((unint64_t)(v20 - v18) >= 0x7FFFFFFFFFFFFFF0)
            v11 = 0xFFFFFFFFFFFFFFFLL;
          else
            v11 = v10;
          if (v11)
            v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>((uint64_t)&v20, v11);
          else
            v12 = 0;
          v13 = (uint64_t *)&v12[16 * v9];
          *v13 = v4;
          v13[1] = v8;
          v14 = v19;
          v15 = v13;
          if (v19 != v18)
          {
            do
            {
              *((_OWORD *)v15 - 1) = *((_OWORD *)v14 - 1);
              v15 -= 2;
              v14 -= 16;
            }
            while (v14 != v18);
            v14 = v18;
          }
          v7 = v13 + 2;
          v18 = (char *)v15;
          v20 = &v12[16 * v11];
          if (v14)
            operator delete(v14);
        }
        else
        {
          *v7 = v4;
          v7[1] = v8;
          v7 += 2;
        }
        v19 = (char *)v7;
        ++v5;
      }
      while (v5 != v6);
      v16 = v18;
      v17 = v20;
    }
    *a2 = v16;
    a2[1] = (char *)v7;
    a2[2] = v17;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void sub_206D92428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinLinearPattern,std::allocator<ZinLinearPattern>,ZinLinearPattern const&,void>@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xE8uLL);
  result = std::__shared_ptr_emplace<ZinLinearPattern>::__shared_ptr_emplace[abi:ne180100]<ZinLinearPattern const&,std::allocator<ZinLinearPattern>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_206D924EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinLinearPattern>::__shared_ptr_emplace[abi:ne180100]<ZinLinearPattern const&,std::allocator<ZinLinearPattern>,0>(_QWORD *a1, uint64_t *a2)
{
  a1[2] = 0;
  *a1 = &unk_24C05B6F0;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinLinearPattern,ZinLinearPattern const&,ZinLinearPattern*>((ZinPattern *)(a1 + 3), a2);
  return a1;
}

void sub_206D92538(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

BOOL ZinMirSpatialSplitUtils::IsNonResident(ZinIrTensor *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v6;
  ZinIrTensor *v7;
  ZinIrTensor *RootTensor;

  RootTensor = ZinIrTensor::GetRootTensor(a1);
  v4 = *((_QWORD *)RootTensor + 13);
  if (v4 && *(_DWORD *)(v4 + 96) == 1)
    return 0;
  if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a2, &RootTensor))return 1;
  v7 = ZinIrTensor::GetRootTensor(a1);
  v6 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a2, &v7);
  if (!v6)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return *((_DWORD *)v6 + 6) == 1;
}

uint64_t ZinMirSpatialSplitUtils::IsL2Resident(ZinIrTensor *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  ZinIrTensor *v7;
  ZinIrTensor *RootTensor;

  RootTensor = ZinIrTensor::GetRootTensor(a1);
  v4 = *((_QWORD *)RootTensor + 13);
  if (v4 && *(_DWORD *)(v4 + 96) == 1)
    return 1;
  result = (uint64_t)std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a2, &RootTensor);
  if (result)
  {
    v7 = ZinIrTensor::GetRootTensor(a1);
    v6 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a2, &v7);
    if (!v6)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    return *((_DWORD *)v6 + 6) != 1;
  }
  return result;
}

_QWORD *ZinMirSpatialSplitUtils::IsChained(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;
  _QWORD *v4;
  uint64_t v5;

  v5 = a1;
  result = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a2, &v5);
  if (result)
  {
    v4 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a2, &v5);
    if (!v4)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    return (_QWORD *)(*((_DWORD *)v4 + 6) == 2);
  }
  return result;
}

uint64_t ZinMirSpatialSplitUtils::IsDeConv(ZinMirSpatialSplitUtils *this, const ZinIrOpLayer *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_DWORD *)(*((_QWORD *)this + 8) + 8) == 85
    && (v2 = *((_QWORD *)this + 54)) != 0
    && (v3 = *(_QWORD *)(v2 + 136)) != 0)
  {
    return (*(unsigned __int8 *)(v3 + 448) >> 6) & 1;
  }
  else
  {
    return 0;
  }
}

void ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v8;
  ZinIrTarget *v9;
  uint64_t Hal;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  _BOOL8 v16;
  uint64_t v17;
  size_t v18;
  void *v19;
  const void *v20;
  _QWORD **v21;
  _QWORD **v22;
  _QWORD *v23;
  ZinIrTensor *v24;
  _QWORD *v25;
  uint64_t v26;
  int IntermediateLayers;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  _QWORD *v34;
  void *v35;
  uint64_t *v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  ZinIrOpLayer *v40;
  ZinIrOpLayer *v41;
  ZinIrTensor *RootTensor;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  _BYTE v46[216];
  uint64_t *v47;
  _QWORD *v48[2];
  __int128 __p;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[3];
  _QWORD *v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v48[0] = 0;
  v48[1] = 0;
  v47 = (uint64_t *)v48;
  ZinIrNetworkStatus::ZinIrNetworkStatus((ZinIrNetworkStatus *)v46);
  v43 = (uint64_t)&v43;
  v44 = &v43;
  v45 = 0;
  if ((ZinIrNgraph<ZinIrBasicBlock *,ZinIrIdComparator<ZinIrBasicBlock *>>::TopologicalSortImpl<std::list<ZinIrBasicBlock *>>(a1, &v43) & 1) == 0)ZinAssertImpl("Topological sort of basic blocks must be successful");
  if (!a3[7])
  {
    v34 = a1;
    v8 = v44;
    if (v44 == &v43)
    {
LABEL_19:
      a1 = v34;
      ZinIrControlFlowGraph::SetScheduleMap(v34, &v47);
      goto LABEL_20;
    }
    while (1)
    {
      v50 = 0;
      v9 = (ZinIrTarget *)v8[2];
      __p = 0uLL;
      Hal = ZinIrTarget::GetHal(v9);
      v52[0] = &off_24C0018C8;
      v52[1] = &__p;
      v53 = v52;
      ZinIrOpLayerGraph::TraverseForward(Hal, (uint64_t)v52, 1);
      v11 = v53;
      if (v53 == v52)
        break;
      if (v53)
      {
        v12 = 5;
LABEL_10:
        (*(void (**)(void))(*v11 + 8 * v12))();
      }
      v13 = 126 - 2 * __clz((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3);
      if (*((_QWORD *)&__p + 1) == (_QWORD)__p)
        v14 = 0;
      else
        v14 = v13;
      std::__introsort<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_0 &,ZinIrOpLayer **,false>(__p, *((uint64_t **)&__p + 1), v14, 1);
      v35 = v8 + 2;
      v15 = (char *)(std::__tree<std::__value_type<ZinIrBasicBlock *,std::vector<ZinIrOpLayer *>>,std::__map_value_compare<ZinIrBasicBlock *,std::__value_type<ZinIrBasicBlock *,std::vector<ZinIrOpLayer *>>,ScheduleComparator,true>,std::allocator<std::__value_type<ZinIrBasicBlock *,std::vector<ZinIrOpLayer *>>>>::__emplace_unique_key_args<ZinIrBasicBlock *,std::piecewise_construct_t const&,std::tuple<ZinIrBasicBlock * const&>,std::tuple<>>(&v47, v8 + 2, (uint64_t)&std::piecewise_construct, (uint64_t **)&v35)+ 5);
      if (v15 != (char *)&__p)
        std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>(v15, (char *)__p, *((uint64_t *)&__p + 1), (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3);
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      v8 = (uint64_t *)v8[1];
      if (v8 == &v43)
        goto LABEL_19;
    }
    v11 = v52;
    v12 = 4;
    goto LABEL_10;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, &byte_207AF6795);
  ScheduleControlFlowGraph(a1, a2, &v47, &__p);
  if (SHIBYTE(v50) < 0)
    operator delete((void *)__p);
LABEL_20:
  if (*a3)
  {
    v16 = 1;
  }
  else if (*(_BYTE *)(*a2 + 1215))
  {
    v16 = a3[3] != 0;
  }
  else
  {
    v16 = 0;
  }
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  if (!a3[2])
  {
    v17 = a2[1];
    if (*(char *)(v17 + 47) >= 0)
      v18 = *(unsigned __int8 *)(v17 + 47);
    else
      v18 = *(_QWORD *)(v17 + 32);
    v19 = &v35;
    std::string::basic_string[abi:ne180100]((uint64_t)&v35, v18 + 18);
    if (v37 < 0)
      v19 = v35;
    if (v18)
    {
      if (*(char *)(v17 + 47) >= 0)
        v20 = (const void *)(v17 + 24);
      else
        v20 = *(const void **)(v17 + 24);
      memmove(v19, v20, v18);
    }
    strcpy((char *)v19 + v18, ".tile_cp_alloc.log");
    ZinCpBasedAllocator::ZinCpBasedAllocator(&__p, a1, a2, &v35, v16);
    if (SHIBYTE(v37) < 0)
      operator delete(v35);
    if (ZinCpBasedAllocator::Execute((ZinCpBasedAllocator *)&__p)
      && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency();
    }
    std::unordered_map<ZinIrTensor const*,CpAllocUtils::AllocationType>::unordered_map((uint64_t)&v35, (uint64_t)&v51);
    std::__hash_table<std::__hash_value_type<ZinDependencyOffsetDim,long>,std::__unordered_map_hasher<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::hash<ZinDependencyOffsetDim>,std::equal_to<ZinDependencyOffsetDim>,true>,std::__unordered_map_equal<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::equal_to<ZinDependencyOffsetDim>,std::hash<ZinDependencyOffsetDim>,true>,std::allocator<std::__hash_value_type<ZinDependencyOffsetDim,long>>>::__move_assign(a4, (uint64_t *)&v35);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v35);
    v22 = (_QWORD **)a1[44];
    v21 = (_QWORD **)a1[45];
    if (v21 == v22)
      ZinAssertImpl("Must run scheduler first");
    do
    {
      v23 = *v22;
      RootTensor = 0;
      v24 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v23 + 32))(v23, 0, 0);
      RootTensor = ZinIrTensor::GetRootTensor(v24);
      v25 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>((_QWORD *)a4, &RootTensor);
      if (v25 && CpAllocUtils::IsL2Dependent(*((_DWORD *)v25 + 6)))
      {
        v40 = 0;
        v41 = 0;
        v39 = -1;
        LOBYTE(v35) = 0;
        v38 = 0;
        ZinIrRegAllocUtil::FindLastProducerFirstConsumer(RootTensor, &v41, (uint64_t *)&v40, &v39, (ZinTensorFamilyUtil *)&v35);
        std::__optional_destruct_base<ZinTensorFamilyUtil,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v35);
        v26 = *((_QWORD *)v41 + 6);
        v35 = 0;
        v36 = 0;
        v37 = 0;
        IntermediateLayers = ZinTensorFamilyUtil::GetIntermediateLayers((uint64_t)v41, v40, 0, 0, &v35);
        v28 = v26 + 1;
        v29 = (uint64_t *)v35;
        if (IntermediateLayers)
        {
          v30 = v26 + 1;
        }
        else
        {
          v31 = v36;
          v32 = (uint64_t *)v35;
          v30 = v26 + 1;
          if (v35 != v36)
          {
            do
            {
              v33 = *v32++;
              v30 = v28 + 1;
              *(_QWORD *)(v33 + 48) = v28++;
            }
            while (v32 != v31);
          }
        }
        *((_QWORD *)v40 + 6) = v30;
        if (v29)
        {
          v36 = v29;
          operator delete(v29);
        }
      }
      if (!*(_BYTE *)(*a2 + 1215))
        v23[7] = 0;
      ++v22;
    }
    while (v22 != v21);
    ZinCpBasedAllocator::~ZinCpBasedAllocator((ZinCpBasedAllocator *)&__p);
  }
  std::__list_imp<ZinIrSection *>::clear(&v43);
  ZinIrNetworkStatus::~ZinIrNetworkStatus((ZinIrNetworkStatus *)v46);
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)&v47, v48[0]);
}

void sub_206D92BA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ZinMirSpatialSplitUtils::RemoveConcatsWithSingleInputs(ZinMirSpatialSplitUtils *this, ZinIrOpLayerGraph *a2, ZinIrOpLayer *a3)
{
  ZinIrOpLayer **v4;
  ZinIrOpLayer *v6;
  int v7;
  _OWORD v9[2];
  int v10;

  if (*(_DWORD *)(*((_QWORD *)a2 + 8) + 8) == 7)
  {
    v4 = (ZinIrOpLayer **)*((_QWORD *)a2 + 11);
    if (*((_QWORD *)a2 + 12) - (_QWORD)v4 == 8)
    {
      v6 = *v4;
      memset(v9, 0, sizeof(v9));
      v10 = 1065353216;
      v7 = ZinIrOpLayerGraph::MoveOutgoingEdges(this, (uint64_t **)a2, v6, v9);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v9);
      if ((v7 & ZinIrOpLayerGraph::RemoveNode(this, a2, 0) & 1) == 0)
        ZinAssertImpl("Illegal Concat Transformation");
    }
  }
  return 0;
}

void sub_206D92D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ZinMirSpatialSplitUtils::ComputeWorkUnitShapeTileHeight(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v8 = operator new(0x20uLL);
  *v8 = &off_24C001870;
  v8[1] = a3;
  v8[2] = a4;
  v8[3] = a2;
  v14 = v8;
  v9 = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v13, 1);
  v10 = v14;
  if (v14 == v13)
  {
    v11 = 4;
    v10 = v13;
    goto LABEL_5;
  }
  if (v14)
  {
    v11 = 5;
LABEL_5:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  return v9;
}

void sub_206D92E34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirSpatialSplitUtils::PreprocessForPressureBasedSubgraphIdentification(_QWORD *a1, uint64_t *a2, uint64_t a3, ZinL2FootprintCalculator **a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  ZinL2FootprintCalculator *v19;
  uint64_t v20[5];
  _BYTE v21[216];
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (!a7[11])
  {
LABEL_8:
    if (ZinMirSpatialSplitUtils::ComputeTemporaryLayerMirInfo(a1, a3))
      return 3;
    ZinIrNetworkStatus::ZinIrNetworkStatus((ZinIrNetworkStatus *)v21);
    ZinMirPETensorConstraint::Execute(a1, (uint64_t)a2, (uint64_t)v21);
    if (!ZinMirSpatialSplitUtils::ComputeTemporaryLayerMirInfo(a1, a3))
    {
      ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(a1, a2, a7, (uint64_t)v20);
      std::__hash_table<std::__hash_value_type<ZinDependencyOffsetDim,long>,std::__unordered_map_hasher<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::hash<ZinDependencyOffsetDim>,std::equal_to<ZinDependencyOffsetDim>,true>,std::__unordered_map_equal<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::equal_to<ZinDependencyOffsetDim>,std::hash<ZinDependencyOffsetDim>,true>,std::allocator<std::__hash_value_type<ZinDependencyOffsetDim,long>>>::__move_assign(a6, v20);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v20);
      if (!a7[2])
      {
        v19 = (ZinL2FootprintCalculator *)operator new();
        ZinL2FootprintCalculator::ZinL2FootprintCalculator(v19, a1, a2);
        std::unique_ptr<ZinL2FootprintCalculator>::reset[abi:ne180100](a4, v19);
        ZinMirSpatialSplitUtils::BuildMinDMABufferKeyMap(a5, a1, (uint64_t)a2);
      }
      if (!ZinMirSpatialSplitUtils::ComputeWorkUnitShapeTileHeight(a1, *a2, a6, (uint64_t)a7))
      {
        v17 = 0;
        goto LABEL_12;
      }
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinMirSpatialSplitUtils::PreprocessForPressureBasedSubgraphIdentification();
    }
    v17 = 3;
LABEL_12:
    ZinIrNetworkStatus::~ZinIrNetworkStatus((ZinIrNetworkStatus *)v21);
    return v17;
  }
  v22[0] = &unk_24C053830;
  v22[1] = ZinMirSpatialSplitUtils::RemoveConcatsWithSingleInputs;
  v23 = v22;
  v14 = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v22, 1);
  v15 = v23;
  if (v23 == v22)
  {
    v16 = 4;
    v15 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_7;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_7:
  if (!v14)
    goto LABEL_8;
  return 3;
}

void sub_206D93060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  MEMORY[0x20BD002F8](v7, 0x10E0C4067EF369CLL);
  ZinIrNetworkStatus::~ZinIrNetworkStatus((ZinIrNetworkStatus *)va);
  _Unwind_Resume(a1);
}

uint64_t ZinMirSpatialSplitUtils::ComputeTemporaryLayerMirInfo(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _BYTE v8[216];
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  ZinIrNetworkStatus::ZinIrNetworkStatus((ZinIrNetworkStatus *)v8);
  v9[0] = &off_24C001920;
  v9[1] = a2;
  v9[2] = v8;
  v10 = v9;
  v4 = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v9, 1);
  v5 = v10;
  if (v10 == v9)
  {
    v6 = 4;
    v5 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  ZinIrNetworkStatus::~ZinIrNetworkStatus((ZinIrNetworkStatus *)v8);
  return v4;
}

void sub_206D931A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;

  v12 = *(_QWORD **)(v10 - 48);
  if (v12 == v9)
  {
    v13 = 4;
    v12 = (_QWORD *)(v10 - 72);
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_6:
  ZinIrNetworkStatus::~ZinIrNetworkStatus((ZinIrNetworkStatus *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *ZinMirSpatialSplitUtils::BuildMinDMABufferKeyMap(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  int v7;
  _QWORD *result;
  uint64_t v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v6 = (_QWORD *)(a1 + 8);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 16) = 0;
  *v6 = 0;
  v10[0] = &off_24C001818;
  v10[1] = a3;
  v10[2] = a1;
  v11 = v10;
  v7 = ZinIrControlFlowGraph::TraverseForward(a2, (uint64_t)v10, 1);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v9 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
LABEL_6:
  if (v7)
    ZinAssertImpl("Spatial Splitting Preprocessing Error");
  return result;
}

void sub_206D932C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _Unwind_Resume(exception_object);
}

ZinEngineLayerMirInfo *ZinMirSpatialSplitUtils::PostprocessForPressureBasedSubgraphIdentification(ZinEngineLayerMirInfo *result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;

  v1 = (_QWORD *)((char *)result + 8);
  v2 = *(_QWORD **)result;
  if (*(ZinEngineLayerMirInfo **)result != (ZinEngineLayerMirInfo *)((char *)result + 8))
  {
    do
    {
      result = ZinANELayer::DeleteMirInfo((ZinEngineLayerMirInfo **)v2[4]);
      v3 = (_QWORD *)v2[1];
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v2[2];
          v5 = *v4 == (_QWORD)v2;
          v2 = v4;
        }
        while (!v5);
      }
      v2 = v4;
    }
    while (v4 != v1);
  }
  return result;
}

uint64_t ZinMirSpatialSplitUtils::ExecuteGenericDAGMode(_QWORD *a1, ZinIrCompilerParameters **a2)
{
  ZinIrCompilerParameters *v4;
  ZinIrCompilerParameters *v5;
  uint64_t v6;
  uint64_t *p_p;
  uint64_t v8;
  uint64_t v9;
  BOOL v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v19;
  int v20;
  uint64_t v21;
  unsigned __int16 GlobalRefinementInSpatialSplit;
  uint64_t v23;
  ZinL2FootprintCalculator *v24;
  PressureBasedSubgraphIdentification *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t v30;
  ZinMirSpatialSplitLatencyCostModel **v31;
  ZinL2FootprintCalculator *v32;
  uint64_t v34;
  std::__shared_weak_count *v35;
  _BYTE v36[24];
  uint64_t v37;
  PressureBasedSubgraphIdentification *v38;
  _BYTE v39[8];
  int v40;
  ZinMirSpatialSplitLatencyCostModel *v41[3];
  uint64_t v42;
  _QWORD **v43;
  _QWORD *v44[2];
  ZinL2FootprintCalculator *v45;
  uint64_t v46;
  int v47;
  _OWORD v48[2];
  int v49;
  _QWORD **v50;
  _QWORD *v51[2];
  void *__p;
  uint64_t v53;
  unsigned __int8 v54;
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v51[1] = 0;
  v51[0] = 0;
  v50 = v51;
  memset(v48, 0, sizeof(v48));
  v49 = 1065353216;
  *(_DWORD *)((char *)&v46 + 3) = 0;
  LODWORD(v46) = 0;
  HIBYTE(v46) = 1;
  v47 = 0;
  v5 = *a2;
  v4 = a2[1];
  if (*((_BYTE *)*a2 + 1327) && *((_BYTE *)v4 + 494))
  {
    ZinIrCompilerParameters::getSpatialSplitMode(a2[1], &__p);
    v6 = v54;
    if ((v54 & 0x80u) != 0)
      v6 = v53;
    if (v6 == 15)
    {
      p_p = (uint64_t *)__p;
      if ((v54 & 0x80u) == 0)
        p_p = (uint64_t *)&__p;
      v8 = *p_p;
      v9 = *(uint64_t *)((char *)p_p + 7);
      v11 = v8 == 0x2D636972656E6567 && v9 == 0x7078652D6761642DLL;
    }
    else
    {
      v11 = 0;
    }
    BYTE2(v47) = v11;
    if ((char)v54 < 0)
      operator delete(__p);
  }
  else
  {
    BYTE2(v47) = 0;
  }
  ZinIrCompilerParameters::getSpatialSplitMode(v4, &__p);
  v12 = v54;
  if ((v54 & 0x80u) != 0)
    v12 = v53;
  if (v12 == 18)
  {
    v13 = (uint64_t *)__p;
    if ((v54 & 0x80u) == 0)
      v13 = (uint64_t *)&__p;
    v14 = *v13;
    v15 = v13[1];
    v16 = *((unsigned __int16 *)v13 + 8);
    v19 = v14 == 0x2D636972656E6567 && v15 == 0x6F6D656D2D676164 && v16 == 31090;
  }
  else
  {
    v19 = 0;
  }
  BYTE5(v46) = v19;
  if ((char)v54 < 0)
    operator delete(__p);
  BYTE6(v46) = *((_BYTE *)v5 + 1150);
  BYTE1(v46) = *((_BYTE *)v5 + 1239);
  v20 = *((unsigned __int8 *)v5 + 1215);
  LOBYTE(v46) = *((_BYTE *)v5 + 1215);
  HIBYTE(v47) = *((_BYTE *)v4 + 533);
  v21 = *((_QWORD *)v4 + 60);
  if (v21)
  {
    if (v21 != 1)
      goto LABEL_41;
    if (!v20)
      ZinAssertImpl("HW doesn't support circular buffer feature.");
    v20 = 1;
  }
  else
  {
    v20 = 0;
  }
  LOBYTE(v46) = v20;
LABEL_41:
  if (v20)
  {
    LOBYTE(v47) = 1;
    if ((unsigned __int16)ZinIrCompilerParameters::getGlobalRefinementInSpatialSplit(v4) >= 0x100u)
    {
      GlobalRefinementInSpatialSplit = ZinIrCompilerParameters::getGlobalRefinementInSpatialSplit(v4);
      if (GlobalRefinementInSpatialSplit <= 0xFFu)
        std::__throw_bad_optional_access[abi:ne180100]();
      LOBYTE(v47) = GlobalRefinementInSpatialSplit;
    }
    BYTE1(v47) = 1;
  }
  if (*((_BYTE *)v4 + 494))
    BYTE1(v47) = 1;
  v45 = 0;
  v44[1] = 0;
  v44[0] = 0;
  v43 = v44;
  if (ZinMirSpatialSplitUtils::PreprocessForPressureBasedSubgraphIdentification(a1, (uint64_t *)a2, (uint64_t)&v50, &v45, (uint64_t)&v43, (uint64_t)v48, &v46))
  {
    v23 = 3;
  }
  else
  {
    SpatialSplitPressureBasedSubgraphIdentification::SpatialSplitPressureBasedSubgraphIdentification((uint64_t)v41, (uint64_t)a1, a2, (uint64_t)v48, (uint64_t)&v46, (uint64_t)v45, (uint64_t)&v43, 0);
    memset(v39, 0, 7);
    v39[7] = 1;
    v40 = 0;
    v37 = 0;
    v38 = 0;
    if ((_BYTE)v47 && !*((_BYTE *)a2[1] + 534))
    {
      v39[3] = 1;
      LOBYTE(v40) = 1;
      v24 = v45;
      v25 = (PressureBasedSubgraphIdentification *)operator new();
      BatchOrChannelSplitPressureBasedSubgraphIdentification::BatchOrChannelSplitPressureBasedSubgraphIdentification(v25, a1, a2, v48, v39, v24, &v43);
      v38 = v25;
      v26 = operator new();
      ZinMirBatchOrChannelSplitter::ZinMirBatchOrChannelSplitter(v26, a1, a2, 0, v39);
      v37 = v26;
    }
    ZinMirSpatialSplitLatencyCostModel::ZinMirSpatialSplitLatencyCostModel(v36, a1, a2, v48, &v42, &v46, *((_QWORD *)*a2 + 171));
    ZinMirSpatialSplitter::ZinMirSpatialSplitter((ZinMirGraphSplitterBase *)&__p, (uint64_t)a1, (uint64_t)a2, (uint64_t)v36, (uint64_t)v41, v46, v47, 0, (uint64_t *)&v38, &v37);
    if (BYTE5(v46) | v47)
      v55 = 1;
    v34 = 0;
    v35 = 0;
    v23 = ZinMirSpatialSplitter::Tile((uint64_t)&__p, &v34, (ZinEngineLayerMirInfo *)&v50, 0);
    v27 = v35;
    if (v35)
    {
      p_shared_owners = (unint64_t *)&v35->__shared_owners_;
      do
        v29 = __ldaxr(p_shared_owners);
      while (__stlxr(v29 - 1, p_shared_owners));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    ZinMirSpatialSplitter::~ZinMirSpatialSplitter((ZinMirSpatialSplitter *)&__p);
    ZinMirSpatialSplitLatencyCostModel::~ZinMirSpatialSplitLatencyCostModel((ZinMirSpatialSplitLatencyCostModel *)v36);
    v30 = v37;
    v37 = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v31 = (ZinMirSpatialSplitLatencyCostModel **)v38;
    v38 = 0;
    if (v31)
    {
      PressureBasedSubgraphIdentification::~PressureBasedSubgraphIdentification(v31);
      MEMORY[0x20BD002F8]();
    }
    PressureBasedSubgraphIdentification::~PressureBasedSubgraphIdentification(v41);
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v43, v44[0]);
  v32 = v45;
  v45 = 0;
  if (v32)
  {
    ZinL2FootprintCalculator::~ZinL2FootprintCalculator(v32);
    MEMORY[0x20BD002F8]();
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v48);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v50, v51[0]);
  return v23;
}

void sub_206D93888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,ZinMirSpatialSplitLatencyCostModel **a46,uint64_t a47,uint64_t a48,ZinMirSpatialSplitLatencyCostModel *a49)
{
  uint64_t v49;

  MEMORY[0x20BD002F8](v49, 0x10E1C40BFDD589CLL);
  std::unique_ptr<BatchOrChannelSplitPressureBasedSubgraphIdentification>::reset[abi:ne180100](&a46, 0);
  PressureBasedSubgraphIdentification::~PressureBasedSubgraphIdentification(&a49);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&STACK[0x260], (_QWORD *)STACK[0x268]);
  std::unique_ptr<ZinL2FootprintCalculator>::reset[abi:ne180100]((ZinL2FootprintCalculator **)&STACK[0x278], 0);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&STACK[0x290]);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&STACK[0x2C0], (_QWORD *)STACK[0x2C8]);
  _Unwind_Resume(a1);
}

uint64_t ZinMirSpatialSplitUtils::ExecuteDRAMLegalizer(ZinIrControlFlowGraph *a1, uint64_t *a2, uint64_t a3)
{
  _BOOL4 v5;
  ZinL2FootprintCalculator *v6;
  uint64_t active;
  uint64_t v8;
  ZinMirSpatialSplitLatencyCostModel **v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  PressureBasedSubgraphIdentification *v31[27];
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  void *v35;
  _BYTE v36[32];
  int v37;
  ZinIrControlFlowGraph *v38;
  uint64_t *v39;
  ZinL2FootprintCalculator *v40[3];
  ZinL2FootprintCalculator *v41[19];
  BOOL v42;
  _QWORD **v43;
  _QWORD *v44[2];
  _BYTE v45[40];
  _OWORD v46[2];
  int v47;
  uint64_t v48;
  int v49;
  _QWORD **v50;
  _QWORD *v51[2];
  void **v52[7];
  char v53;
  uint64_t v54;
  _QWORD v55[81];

  v55[80] = *MEMORY[0x24BDAC8D0];
  v51[1] = 0;
  v51[0] = 0;
  v50 = v51;
  v48 = 0x100000000010000;
  v49 = 256;
  memset(v46, 0, sizeof(v46));
  v47 = 1065353216;
  SplitPatternHandlerMgr::SplitPatternHandlerMgr(v45, a1, a2, a3);
  if (!*(_BYTE *)(*a2 + 1105))
  {
    active = 0;
    goto LABEL_38;
  }
  v44[1] = 0;
  v44[0] = 0;
  v43 = v44;
  do
  {
    v42 = 0;
    v41[0] = 0;
    if (ZinMirSpatialSplitUtils::PreprocessForPressureBasedSubgraphIdentification(a1, a2, (uint64_t)&v50, v41, (uint64_t)&v43, (uint64_t)v46, &v48))
    {
      v5 = 1;
    }
    else
    {
      if (v41[0])
        ZinAssertImpl("Footprint calculator is unset");
      SpatialSplitPressureBasedSubgraphIdentification::SpatialSplitPressureBasedSubgraphIdentification((uint64_t)v52, (uint64_t)a1, a2, (uint64_t)v46, (uint64_t)&v48, 0, (uint64_t)&v43, 0);
      v5 = PressureBasedSubgraphIdentification::IsolateLiveRangeForConcatInputs((PressureBasedSubgraphIdentification *)v52, &v42)|| PressureBasedSubgraphIdentification::AddCopyForLiveOutWithMultiFanOutParent((PressureBasedSubgraphIdentification *)v52, &v42)|| SplitPatternHandlerMgr::MatchAndCombine((uint64_t)v45, (uint64_t)v55, v54, (uint64_t)&v42) != 0;
      PressureBasedSubgraphIdentification::~PressureBasedSubgraphIdentification((ZinMirSpatialSplitLatencyCostModel **)v52);
    }
    v6 = v41[0];
    v41[0] = 0;
    if (v6)
    {
      ZinL2FootprintCalculator::~ZinL2FootprintCalculator(v6);
      MEMORY[0x20BD002F8]();
    }
    if (v5)
    {
      active = 3;
      goto LABEL_37;
    }
  }
  while (v42);
  SpatialSplitPressureBasedSubgraphIdentification::SpatialSplitPressureBasedSubgraphIdentification((uint64_t)v41, (uint64_t)a1, a2, (uint64_t)v46, (uint64_t)&v48, 0, (uint64_t)&v43, (uint64_t)v45);
  memset(v40, 0, sizeof(v40));
  memset(v36, 0, sizeof(v36));
  v37 = 1065353216;
  v38 = a1;
  v39 = a2;
  v34 = 0;
  v35 = &unk_24C025BE0;
  v31[0] = 0;
  ZinMirSpatialSplitter::ZinMirSpatialSplitter((ZinMirGraphSplitterBase *)v52, (uint64_t)a1, (uint64_t)a2, (uint64_t)&v35, (uint64_t)v41, v48, v49, (uint64_t)v45, (uint64_t *)v31, &v34);
  v8 = v34;
  v34 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = (ZinMirSpatialSplitLatencyCostModel **)v31[0];
  v31[0] = 0;
  if (v9)
  {
    PressureBasedSubgraphIdentification::~PressureBasedSubgraphIdentification(v9);
    MEMORY[0x20BD002F8]();
  }
  v53 = 1;
  v32 = 0;
  v33 = 0;
  v10 = ZinMirSpatialSplitter::Tile((uint64_t)v52, &v32, (ZinEngineLayerMirInfo *)&v50, 0);
  active = v10;
  v11 = v33;
  if (!v33)
    goto LABEL_26;
  p_shared_owners = (unint64_t *)&v33->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if ((_DWORD)active)
    {
LABEL_27:
      v14 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v14)
        ZinMirSpatialSplitUtils::ExecuteDRAMLegalizer(v14, v15, v16, v17, v18, v19, v20, v21);
      goto LABEL_36;
    }
  }
  else
  {
LABEL_26:
    if ((_DWORD)v10)
      goto LABEL_27;
  }
  if (SplitPatternHandlerMgr::FlattenCombinedLayers((SplitPatternHandlerMgr *)v45))
  {
    active = 3;
  }
  else
  {
    ZinIrNetworkStatus::ZinIrNetworkStatus((ZinIrNetworkStatus *)v31);
    active = ZinMirSetActiveNE(a1, (ZinIrNetworkStatus *)v31);
    if ((_DWORD)active)
    {
      v22 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v22)
        ZinMirSpatialSplitUtils::ExecuteDRAMLegalizer(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    ZinIrNetworkStatus::~ZinIrNetworkStatus((ZinIrNetworkStatus *)v31);
  }
LABEL_36:
  ZinMirSpatialSplitter::~ZinMirSpatialSplitter((ZinMirSpatialSplitter *)v52);
  v35 = &unk_24C024668;
  std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table((uint64_t)v36);
  v52[0] = (void **)v40;
  std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>::__destroy_vector::operator()[abi:ne180100](v52);
  PressureBasedSubgraphIdentification::~PressureBasedSubgraphIdentification(v41);
LABEL_37:
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v43, v44[0]);
LABEL_38:
  v52[0] = (void **)v45;
  std::vector<std::unique_ptr<ZinRtOperation>>::__destroy_vector::operator()[abi:ne180100](v52);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v46);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v50, v51[0]);
  return active;
}

void sub_206D93D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,ZinMirSpatialSplitLatencyCostModel *a52)
{
  uint64_t v52;

  ZinIrNetworkStatus::~ZinIrNetworkStatus((ZinIrNetworkStatus *)&a11);
  ZinMirSpatialSplitter::~ZinMirSpatialSplitter((ZinMirSpatialSplitter *)&STACK[0x318]);
  a41 = &unk_24C024668;
  std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table(v52);
  STACK[0x318] = (unint64_t)&a49;
  std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x318]);
  PressureBasedSubgraphIdentification::~PressureBasedSubgraphIdentification(&a52);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&STACK[0x280], (_QWORD *)STACK[0x288]);
  STACK[0x318] = (unint64_t)&STACK[0x298];
  std::vector<std::unique_ptr<ZinRtOperation>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x318]);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&STACK[0x2C0]);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&STACK[0x300], (_QWORD *)STACK[0x308]);
  _Unwind_Resume(a1);
}

uint64_t ZinMirSpatialSplitUtils::ExecuteManualMode(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  ZinMirSpatialSplitLatencyCostModel **v7;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  PressureBasedSubgraphIdentification *v12;
  _QWORD **v13;
  _QWORD *v14[2];
  _QWORD v15[3];
  void *v16;
  _OWORD v17[2];
  int v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[768];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  memset(v17, 0, sizeof(v17));
  v18 = 1065353216;
  v19 = a1;
  v20 = a2;
  v15[2] = a2;
  v16 = &unk_24C025BE0;
  v15[0] = &unk_24C0246A8;
  v15[1] = a1;
  v14[0] = 0;
  v14[1] = 0;
  v12 = 0;
  v13 = v14;
  v11 = 0;
  ZinMirSpatialSplitter::ZinMirSpatialSplitter((ZinMirGraphSplitterBase *)v21, a1, a2, (uint64_t)&v16, (uint64_t)v15, 0x100000000000000, 0, 0, (uint64_t *)&v12, &v11);
  v9 = 0;
  v10 = 0;
  v2 = ZinMirSpatialSplitter::Tile((uint64_t)v21, &v9, (ZinEngineLayerMirInfo *)&v13, 0);
  v3 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  ZinMirSpatialSplitter::~ZinMirSpatialSplitter((ZinMirSpatialSplitter *)v21);
  v6 = v11;
  v11 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (ZinMirSpatialSplitLatencyCostModel **)v12;
  v12 = 0;
  if (v7)
  {
    PressureBasedSubgraphIdentification::~PressureBasedSubgraphIdentification(v7);
    MEMORY[0x20BD002F8]();
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v13, v14[0]);
  v16 = &unk_24C024668;
  std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table((uint64_t)v17);
  return v2;
}

void sub_206D94008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, ZinMirSpatialSplitLatencyCostModel **a15, char a16, _QWORD *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v32;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  ZinMirSpatialSplitter::~ZinMirSpatialSplitter((ZinMirSpatialSplitter *)&a30);
  v32 = a14;
  a14 = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  std::unique_ptr<BatchOrChannelSplitPressureBasedSubgraphIdentification>::reset[abi:ne180100](&a15, 0);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a16, a17);
  a22 = &unk_24C024668;
  std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table(v30);
  _Unwind_Resume(a1);
}

uint64_t ZinMirSpatialSplitUtils::ExecuteLegacyMode(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  ZinMirSpatialSplitLatencyCostModel **v4;
  uint64_t v6;
  PressureBasedSubgraphIdentification *v7;
  _QWORD v8[3];
  void *v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[768];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  memset(v10, 0, sizeof(v10));
  v11 = 1065353216;
  v12 = a1;
  v13 = a2;
  v9 = &unk_24C025BE0;
  v8[0] = &unk_24C021758;
  v8[1] = a1;
  v8[2] = a2;
  v6 = 0;
  v7 = 0;
  ZinMirSpatialSplitter::ZinMirSpatialSplitter((ZinMirGraphSplitterBase *)v14, a1, a2, (uint64_t)&v9, (uint64_t)v8, 0x100000000000000, 0, 0, (uint64_t *)&v7, &v6);
  v2 = ZinMirSpatialSplitter::Run((ZinMirSpatialSplitter *)v14);
  ZinMirSpatialSplitter::~ZinMirSpatialSplitter((ZinMirSpatialSplitter *)v14);
  v3 = v6;
  v6 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (ZinMirSpatialSplitLatencyCostModel **)v7;
  v7 = 0;
  if (v4)
  {
    PressureBasedSubgraphIdentification::~PressureBasedSubgraphIdentification(v4);
    MEMORY[0x20BD002F8]();
  }
  v9 = &unk_24C024668;
  std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table((uint64_t)v10);
  return v2;
}

void sub_206D941A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  ZinMirSpatialSplitLatencyCostModel **v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, ZinMirSpatialSplitLatencyCostModel **);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, void *);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  ZinMirSpatialSplitter::~ZinMirSpatialSplitter((ZinMirSpatialSplitter *)va1);
  if (a4)
    (*(void (**)(uint64_t))(*(_QWORD *)a4 + 8))(a4);
  std::unique_ptr<BatchOrChannelSplitPressureBasedSubgraphIdentification>::reset[abi:ne180100]((ZinMirSpatialSplitLatencyCostModel ***)va, 0);
  v11 = &unk_24C024668;
  std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table(v4);
  _Unwind_Resume(a1);
}

void ZinMirSpatialSplitUtils::OptimizeOutputTensorTileRegions(int64_t *a1, int64_t *a2, int64_t a3, int a4, unint64_t a5, unint64_t a6, int a7, void **a8)
{
  int64_t *v14;
  int64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  int64_t v26;
  void **v27;
  int64_t *v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  char *v48;
  __int128 v49;
  __int128 v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  char *v59;
  char *v60;
  char *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  int64_t *v65;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  _QWORD *v71;
  uint64_t *v72;
  int64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *__p;
  uint64_t *v77;
  uint64_t v78;
  void *v79[2];
  void *v80[2];
  __int128 v81;

  v14 = a1;
  v15 = a1[2];
  v16 = a1[3];
  *(_OWORD *)v80 = 0u;
  v81 = 0u;
  *(_OWORD *)v79 = 0u;
  __p = 0;
  v77 = 0;
  v78 = 0;
  ZinMirSpatialSplitUtils::OptimizeOutputTensorTileRegionsForHeight((char **)&__p, *a1, a3, 0, 0, a7);
  ZinMirSpatialSplitUtils::OptimizeOutputTensorTileRegionsWithAlignment((char **)&v80[1], a6, a7, v16, a2[1]);
  ZinMirSpatialSplitUtils::OptimizeOutputTensorTileRegionsForHeight((char **)v79, v15, *a2, a4, a5, a7);
  v65 = a2;
  v67 = v77;
  v68 = (uint64_t *)__p;
  if (__p != v77)
  {
    v17 = a8 + 2;
    v71 = a8 + 2;
    do
    {
      v69 = (uint64_t *)v81;
      v70 = (uint64_t *)v80[1];
      if (v80[1] != (void *)v81)
      {
        v19 = *v68;
        v18 = v68[1];
        do
        {
          v21 = (uint64_t *)v79[0];
          v20 = (uint64_t *)v79[1];
          if (v79[0] != v79[1])
          {
            v74 = v70[1];
            v75 = *v70;
            v22 = (char *)a8[1];
            v72 = (uint64_t *)v79[1];
            do
            {
              v24 = *v21;
              v23 = v21[1];
              v25 = v14[1];
              v26 = v14[4];
              if ((unint64_t)v22 >= *v17)
              {
                v27 = a8;
                v28 = v14;
                v29 = v18;
                v30 = v19;
                v31 = v27;
                v32 = (char *)*v27;
                v33 = 0xCCCCCCCCCCCCCCCDLL * ((v22 - (_BYTE *)*v27) >> 4);
                v34 = v33 + 1;
                if (v33 + 1 > 0x333333333333333)
                  std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                v73 = v26;
                if (0x999999999999999ALL * ((uint64_t)(*v17 - (_QWORD)v32) >> 4) > v34)
                  v34 = 0x999999999999999ALL * ((uint64_t)(*v17 - (_QWORD)v32) >> 4);
                if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v17 - (_QWORD)v32) >> 4) >= 0x199999999999999)
                  v35 = 0x333333333333333;
                else
                  v35 = v34;
                if (v35)
                {
                  v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)v17, v35);
                  v32 = (char *)*v31;
                  v22 = (char *)v31[1];
                }
                else
                {
                  v36 = 0;
                }
                v37 = &v36[80 * v33];
                v19 = v30;
                *(_QWORD *)v37 = v30;
                *((_QWORD *)v37 + 1) = 0;
                *((_QWORD *)v37 + 2) = v24;
                *((_QWORD *)v37 + 3) = v75;
                *((_QWORD *)v37 + 4) = 0;
                *((_QWORD *)v37 + 5) = v29;
                v18 = v29;
                *((_QWORD *)v37 + 6) = v25;
                *((_QWORD *)v37 + 7) = v23;
                *((_QWORD *)v37 + 8) = v74;
                *((_QWORD *)v37 + 9) = v73;
                v38 = v37;
                v14 = v28;
                if (v22 == v32)
                {
                  a8 = v31;
                }
                else
                {
                  do
                  {
                    *((_OWORD *)v38 - 5) = *((_OWORD *)v22 - 5);
                    v39 = *((_OWORD *)v22 - 4);
                    v40 = *((_OWORD *)v22 - 3);
                    v41 = *((_OWORD *)v22 - 1);
                    *((_OWORD *)v38 - 2) = *((_OWORD *)v22 - 2);
                    *((_OWORD *)v38 - 1) = v41;
                    *((_OWORD *)v38 - 4) = v39;
                    *((_OWORD *)v38 - 3) = v40;
                    v38 -= 80;
                    v22 -= 80;
                  }
                  while (v22 != v32);
                  a8 = v31;
                  v32 = (char *)*v31;
                }
                v22 = v37 + 80;
                *a8 = v38;
                a8[1] = v37 + 80;
                a8[2] = &v36[80 * v35];
                if (v32)
                  operator delete(v32);
                v17 = v71;
                v20 = v72;
              }
              else
              {
                *(_QWORD *)v22 = v19;
                *((_QWORD *)v22 + 1) = 0;
                *((_QWORD *)v22 + 2) = v24;
                *((_QWORD *)v22 + 3) = v75;
                *((_QWORD *)v22 + 4) = 0;
                *((_QWORD *)v22 + 5) = v18;
                *((_QWORD *)v22 + 6) = v25;
                *((_QWORD *)v22 + 7) = v23;
                *((_QWORD *)v22 + 8) = v74;
                *((_QWORD *)v22 + 9) = v26;
                v22 += 80;
              }
              a8[1] = v22;
              v21 += 2;
            }
            while (v21 != v20);
          }
          v70 += 2;
        }
        while (v70 != v69);
      }
      v68 += 2;
    }
    while (v68 != v67);
  }
  v42 = v65[1] * a3 * *v65;
  v43 = (char *)a8[1];
  v44 = 0xCCCCCCCCCCCCCCCDLL * ((v43 - (_BYTE *)*a8) >> 4);
  v45 = v42 - v44;
  if (v42 < v44)
    ZinAssertImpl("Guarantee tile size == number of tiles for L2 constraints.  Harder to guarantee for split on X");
  if (v42 != v44)
  {
    v46 = 0;
    v47 = a8 + 2;
    do
    {
      v48 = v43 - 80;
      if ((unint64_t)v43 >= *v47)
      {
        v51 = 0xCCCCCCCCCCCCCCCDLL * ((v43 - (_BYTE *)*a8) >> 4);
        v52 = v51 + 1;
        if (v51 + 1 > 0x333333333333333)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(*v47 - (_QWORD)*a8) >> 4) > v52)
          v52 = 0x999999999999999ALL * ((uint64_t)(*v47 - (_QWORD)*a8) >> 4);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v47 - (_QWORD)*a8) >> 4) >= 0x199999999999999)
          v53 = 0x333333333333333;
        else
          v53 = v52;
        if (v53)
          v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)(a8 + 2), v53);
        else
          v54 = 0;
        v55 = &v54[80 * v51];
        *(_OWORD *)v55 = *(_OWORD *)v48;
        v56 = *((_OWORD *)v48 + 1);
        v57 = *((_OWORD *)v48 + 2);
        v58 = *((_OWORD *)v48 + 4);
        *((_OWORD *)v55 + 3) = *((_OWORD *)v48 + 3);
        *((_OWORD *)v55 + 4) = v58;
        *((_OWORD *)v55 + 1) = v56;
        *((_OWORD *)v55 + 2) = v57;
        v60 = (char *)*a8;
        v59 = (char *)a8[1];
        v61 = v55;
        if (v59 != *a8)
        {
          do
          {
            *((_OWORD *)v61 - 5) = *((_OWORD *)v59 - 5);
            v62 = *((_OWORD *)v59 - 4);
            v63 = *((_OWORD *)v59 - 3);
            v64 = *((_OWORD *)v59 - 1);
            *((_OWORD *)v61 - 2) = *((_OWORD *)v59 - 2);
            *((_OWORD *)v61 - 1) = v64;
            *((_OWORD *)v61 - 4) = v62;
            *((_OWORD *)v61 - 3) = v63;
            v61 -= 80;
            v59 -= 80;
          }
          while (v59 != v60);
          v59 = (char *)*a8;
        }
        v43 = v55 + 80;
        *a8 = v61;
        a8[1] = v55 + 80;
        a8[2] = &v54[80 * v53];
        if (v59)
          operator delete(v59);
      }
      else
      {
        v49 = *((_OWORD *)v43 - 2);
        *((_OWORD *)v43 + 2) = *((_OWORD *)v43 - 3);
        *((_OWORD *)v43 + 3) = v49;
        *((_OWORD *)v43 + 4) = *((_OWORD *)v43 - 1);
        v50 = *((_OWORD *)v43 - 4);
        *(_OWORD *)v43 = *(_OWORD *)v48;
        *((_OWORD *)v43 + 1) = v50;
        v43 += 80;
      }
      a8[1] = v43;
      ++v46;
    }
    while (v46 != v45);
  }
  if (__p)
  {
    v77 = (uint64_t *)__p;
    operator delete(__p);
  }
  if (v80[1])
  {
    *(void **)&v81 = v80[1];
    operator delete(v80[1]);
  }
  if (v79[0])
  {
    v79[1] = v79[0];
    operator delete(v79[0]);
  }
}

void sub_206D9468C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  if (__p)
    operator delete(__p);
  if (a26)
    operator delete(a26);
  if (a23)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

void ZinMirSpatialSplitUtils::OptimizeOutputTensorTileRegionsForHeight(char **a1, int64_t a2, int64_t a3, int a4, unint64_t a5, int a6)
{
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  int64_t *v24;
  char *v25;
  char *v26;
  int64_t *v27;
  uint64_t v28;

  if (a5 < 2)
  {
    if (a2 >= 1)
    {
      v8 = 0;
      v9 = a2 / a3;
      v10 = a2 % a3;
      v28 = a2 / a3 - 1;
      if (a2 / a3 > 1)
        v11 = a4;
      else
        v11 = 0;
      do
      {
        if (v11)
        {
          if ((v9 & 1) != 0)
          {
            v12 = v28;
            if (v10 < 0)
            {
              ++v10;
            }
            else
            {
              v12 = v9 + 1;
              --v10;
            }
          }
          else
          {
            if (v10 == 1)
              v12 = v9 + 2;
            else
              v12 = v9;
            if (v10 == 1)
              v13 = 0;
            else
              v13 = v10;
            if (v10 < 2)
            {
              v10 = v13;
            }
            else
            {
              v12 = v9 + 2;
              v10 -= 2;
            }
          }
        }
        else
        {
          if (v10 <= 0)
            v12 = v9;
          else
            v12 = v9 + 1;
          v10 -= v10 > 0;
        }
        if (a2 - v8 >= v12)
          v14 = v12;
        else
          v14 = a2 - v8;
        v16 = (int64_t *)a1[1];
        v15 = (unint64_t)a1[2];
        if ((unint64_t)v16 >= v15)
        {
          v18 = ((char *)v16 - *a1) >> 4;
          v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 60)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v20 = v15 - (_QWORD)*a1;
          if (v20 >> 3 > v19)
            v19 = v20 >> 3;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
            v21 = 0xFFFFFFFFFFFFFFFLL;
          else
            v21 = v19;
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>((uint64_t)(a1 + 2), v21);
          v24 = (int64_t *)&v22[16 * v18];
          *v24 = v8;
          v24[1] = v14;
          v26 = *a1;
          v25 = a1[1];
          v27 = v24;
          if (v25 != *a1)
          {
            do
            {
              *((_OWORD *)v27 - 1) = *((_OWORD *)v25 - 1);
              v27 -= 2;
              v25 -= 16;
            }
            while (v25 != v26);
            v25 = *a1;
          }
          v17 = (char *)(v24 + 2);
          *a1 = (char *)v27;
          a1[1] = (char *)(v24 + 2);
          a1[2] = &v22[16 * v23];
          if (v25)
            operator delete(v25);
        }
        else
        {
          *v16 = v8;
          v16[1] = v14;
          v17 = (char *)(v16 + 2);
        }
        a1[1] = v17;
        v8 += v14;
      }
      while (v8 < a2);
    }
  }
  else
  {
    ZinMirSpatialSplitUtils::OptimizeOutputTensorTileRegionsWithAlignment(a1, a5, a6, a2, a3);
  }
}

unint64_t ZinMirSpatialSplitUtils::OverComputedSpaceInDimension(ZinMirSpatialSplitUtils *this, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  unint64_t result;

  if ((unint64_t)this <= a2)
  {
    result = 0;
    if (!a6)
      goto LABEL_6;
    goto LABEL_5;
  }
  result = ((unint64_t)this + a3 + ~a2) / a3;
  if (a6)
LABEL_5:
    result -= (a3 + a5 - 1) / a3;
LABEL_6:
  if (a4)
    result += (a3 + a4 * a2 - 1) / a3;
  return result;
}

uint64_t ZinMirSpatialSplitUtils::ShouldCreateView(ZinIrOpLayer *a1, unint64_t a2, int a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v16;

  v3 = *((_QWORD *)a1 + 11);
  v4 = (_QWORD *)((char *)a1 + 88);
  if (a2 >= (*((_QWORD *)a1 + 12) - v3) >> 3)
    std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
  v8 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v3 + 8 * a2) + 32))(*(_QWORD *)(v3 + 8 * a2), 0, 0);
  v9 = (*(uint64_t (**)(ZinIrOpLayer *, uint64_t))(*(_QWORD *)a1 + 200))(a1, v8);
  if (a3 && (v9 & 1) != 0)
    return 0;
  v10 = *(_QWORD *)(*v4 + 8 * a2);
  if (a3 == 3)
  {
    if (*(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v10 + 32))(v10, 0, 0) + 64) != 1)
    {
      result = 1;
      if (a2 != 1 || *(_DWORD *)(*((_QWORD *)a1 + 8) + 8) != 84)
        return result;
    }
    return 0;
  }
  if (a2 == 1 && *(_DWORD *)(*((_QWORD *)a1 + 8) + 8) == 84)
  {
    if (a3)
      return 0;
    if (!(*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)a1 + 664))(a1))
      return 0;
    v12 = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)a1 + 832))(a1);
    v16 = 0;
    return !std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>((_QWORD *)(v12 + 16), &v16);
  }
  if (a3 != 4)
    return 1;
  if (ZinIrOpLayer::IsPELayer(a1))
  {
    v13 = 648;
    if (!a2)
      v13 = 640;
    v14 = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)a1 + v13))(a1);
  }
  else
  {
    v14 = 0;
  }
  if (*(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v10 + 32))(v10, 0, 0) + 72) == 1
    && v14 == 0)
  {
    return 0;
  }
  if (*(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v10 + 32))(v10, 0, 0) + 56) == 1)
    return v14 ^ 1u;
  else
    return 1;
}

uint64_t ZinMirSpatialSplitUtils::AdjustDimensionsForBroadcast(_QWORD *a1, _QWORD *a2, ZinIrOpLayer *this, uint64_t a4, unint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  ZinReshapeLayer *v13;
  uint64_t v14;
  uint64_t ReshapeInfo;
  int SrcDimension;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t result;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t Dimension;
  _OWORD v26[2];
  uint64_t v27;

  if (ZinIrOpLayer::IsPELayer(this))
  {
    if (a5 >= 2)
      ZinAssertImpl("PE Layer in spatial splitting should only have two inputs");
    v10 = *(_QWORD *)this;
    if (a5)
    {
      v11 = (*(uint64_t (**)(ZinIrOpLayer *))(v10 + 704))(this);
      v12 = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)this + 720))(this);
    }
    else
    {
      v11 = (*(uint64_t (**)(ZinIrOpLayer *))(v10 + 696))(this);
      v12 = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)this + 712))(this);
    }
    v13 = (ZinReshapeLayer *)v12;
    if (v11)
    {
LABEL_10:
      v14 = 0;
      do
      {
        if (ZinIrBroadcastInfo::HasDimension(*(_QWORD *)(v11 + 64), v14))
        {
          if (v13)
          {
            ReshapeInfo = ZinReshapeLayer::GetReshapeInfo(v13);
            SrcDimension = ZinIrTransposeInfo::GetSrcDimension(ReshapeInfo, v14);
          }
          else
          {
            SrcDimension = v14;
          }
          v18 = *(_DWORD **)a4;
          v17 = *(_DWORD **)(a4 + 8);
          if (*(_DWORD **)a4 != v17)
          {
            while (*v18 != SrcDimension)
            {
              if (++v18 == v17)
              {
                v18 = *(_DWORD **)(a4 + 8);
                break;
              }
            }
          }
          if (v18 != v17 && SetValueAtDimension<ZinTensorPosition>(a1, SrcDimension, 0)
            || SetValueAtDimension<ZinTensorDimensions>(a2, SrcDimension, 1))
          {
            return 3;
          }
        }
      }
      while (++v14 != 5);
    }
  }
  else if (ZinIrOpLayer::IsNELayer(this))
  {
    v13 = 0;
    v11 = *((_QWORD *)this + 46);
    if (v11)
      goto LABEL_10;
  }
  result = 0;
  if (a5 == 1 && *(_DWORD *)(*((_QWORD *)this + 8) + 8) == 84)
  {
    v21 = *(_DWORD **)a4;
    v20 = *(_DWORD **)(a4 + 8);
    if (*(_DWORD **)a4 != v20)
    {
      while (*v21)
      {
        if (++v21 == v20)
        {
          v21 = *(_DWORD **)(a4 + 8);
          break;
        }
      }
    }
    if (v21 == v20)
      return 0;
    v22 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)this + 11) + 8) + 32))(*(_QWORD *)(*((_QWORD *)this + 11) + 8), 0, 0);
    v23 = 0;
    v24 = *(_OWORD *)(v22 + 64);
    v26[0] = *(_OWORD *)(v22 + 48);
    v26[1] = v24;
    v27 = *(_QWORD *)(v22 + 80);
    while (1)
    {
      if ((_DWORD)v23)
      {
        if (SetValueAtDimension<ZinTensorPosition>(a1, v23, 0))
          break;
        Dimension = ZinTensorDimensions::GetDimension((uint64_t *)v26, v23);
        if (SetValueAtDimension<ZinTensorDimensions>(a2, v23, Dimension))
          break;
      }
      if (++v23 == 5)
        return 0;
    }
    return 3;
  }
  return result;
}

uint64_t ZinMirSpatialSplitUtils::CanConcatBeCircularBufferProducer(uint64_t a1, uint64_t a2, ZinIrOpLayer *a3)
{
  uint64_t i;
  ZinIrOpLayer **v6;
  ZinIrOpLayer **v7;
  uint64_t v8;
  uint64_t v9;
  ZinIrOpLayer *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  ZinIrOpLayer *v17;

  for (i = *((_QWORD *)a3 + 14); i != *((_QWORD *)a3 + 15); i += 8)
  {
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)i + 64) + 8) == 7)
      return 0;
  }
  v6 = (ZinIrOpLayer **)*((_QWORD *)a3 + 11);
  v7 = (ZinIrOpLayer **)*((_QWORD *)a3 + 12);
  if (v6 == v7)
    return 1;
  v8 = a1 + 72;
  v9 = a1 + 80;
  while (1)
  {
    v17 = *v6;
    if (v9 != std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>(v8, &v17))break;
LABEL_24:
    if (++v6 == v7)
      return 1;
  }
  if (!(*(unsigned __int8 *)(a2 + 8) | *(unsigned __int8 *)(a2 + 5)))
    return 0;
  v10 = v17;
  if (*(_DWORD *)(*((_QWORD *)v17 + 8) + 8) == 85)
  {
    v11 = *((_QWORD *)v17 + 54);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 136);
      if (v12)
      {
        if ((*(_BYTE *)(v12 + 448) & 0x40) != 0)
        {
          if ((PressureBasedSubgraphIdentification::IsIndirectlyReachable((uint64_t)v17, (uint64_t)a3, v8) & 1) != 0)
            return 0;
          v10 = v17;
        }
      }
    }
  }
  v14 = (uint64_t *)*((_QWORD *)v10 + 14);
  v13 = (uint64_t *)*((_QWORD *)v10 + 15);
  if (v13 == v14 || (unint64_t)((char *)v13 - (char *)v14) < 0x10)
  {
LABEL_23:
    if (*(_DWORD *)(*((_QWORD *)v10 + 8) + 8) == 7)
      return 0;
    goto LABEL_24;
  }
  while ((PressureBasedSubgraphIdentification::IsReachable(v8, *v14, a3) & 1) != 0)
  {
    if (++v14 == v13)
    {
      v10 = v17;
      goto LABEL_23;
    }
  }
  return 0;
}

BOOL ZinMirSpatialSplitUtils::HasKernelSupportOnHeight(ZinMirSpatialSplitUtils *this, const ZinIrOpLayer *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v14;
  unint64_t v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  char v22;

  v9 = *(_DWORD *)(*((_QWORD *)this + 8) + 8);
  if (v9 == 83)
  {
    (*(void (**)(uint64_t *__return_ptr, ZinMirSpatialSplitUtils *, const ZinIrOpLayer *, unint64_t *, unint64_t *, unint64_t *))(*(_QWORD *)this + 328))(&v17, this, a2, a3, a4, a5);
    *(_QWORD *)a2 = v18;
    (*(void (**)(_QWORD *__return_ptr, ZinMirSpatialSplitUtils *))(*(_QWORD *)this + 352))(v16, this);
    *a3 = SLODWORD(v16[0]);
    *a4 = (*(uint64_t (**)(ZinMirSpatialSplitUtils *))(*(_QWORD *)this + 336))(this) >> 32;
    v14 = v18;
    return v14 > 1;
  }
  if (v9 == 89)
  {
    (*(void (**)(uint64_t *__return_ptr, ZinMirSpatialSplitUtils *, const ZinIrOpLayer *, unint64_t *, unint64_t *, unint64_t *))(*(_QWORD *)this + 136))(&v17, this, a2, a3, a4, a5);
    if (!v22)
      return 0;
    v14 = v18;
    *(_QWORD *)a2 = v18;
    v15 = v19;
    *a3 = v21;
    *a4 = v15;
    return v14 > 1;
  }
  if (v9 != 85)
    return 0;
  (*(void (**)(uint64_t *__return_ptr, ZinMirSpatialSplitUtils *, const ZinIrOpLayer *, unint64_t *, unint64_t *, unint64_t *))(*(_QWORD *)this + 136))(&v17, this, a2, a3, a4, a5);
  if (!v22)
    return 0;
  v10 = v18;
  *(_QWORD *)a2 = v18;
  v11 = v19;
  *a3 = v21;
  *a4 = v11;
  if (v10 < 2)
    return 0;
  return v10 != 2 || v20 != 2;
}

uint64_t ZinMirSpatialSplitUtils::HasConsumerWithKernelSupportOnHeight(ZinMirSpatialSplitUtils *this, const ZinIrTensor *a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  ZinIrOpLayer **v5;
  ZinIrOpLayer **v6;
  ZinMirSpatialSplitUtils *v7;
  unint64_t *v8;
  uint64_t v9;
  void *__p;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  char v15[8];

  ZinIrTensor::GetTensorFamily(this, (uint64_t)&__p);
  v2 = (char *)__p;
  v3 = v12;
  if (__p == v12)
  {
    v9 = 0;
    if (!__p)
      return v9;
    goto LABEL_11;
  }
  while (2)
  {
    v4 = *(_QWORD *)(*(_QWORD *)v2 + 96);
    v5 = *(ZinIrOpLayer ***)(v4 + 112);
    v6 = *(ZinIrOpLayer ***)(v4 + 120);
    while (v5 != v6)
    {
      v7 = *v5;
      if (ZinIrOpLayer::IsANELayer(*v5)
        && ZinMirSpatialSplitUtils::HasKernelSupportOnHeight(v7, (const ZinIrOpLayer *)v15, &v14, &v13, v8))
      {
        v9 = 1;
        goto LABEL_10;
      }
      ++v5;
    }
    v2 += 8;
    if (v2 != v3)
      continue;
    break;
  }
  v9 = 0;
LABEL_10:
  v2 = (char *)__p;
  if (__p)
  {
LABEL_11:
    v12 = v2;
    operator delete(v2);
  }
  return v9;
}

void sub_206D95048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL ZinMirSpatialSplitUtils::HasKernelSupportOnHeight(ZinMirSpatialSplitUtils *this, const ZinIrOpLayer *a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  unint64_t v6;
  unint64_t v7;
  _BYTE v8[8];

  return ZinMirSpatialSplitUtils::HasKernelSupportOnHeight(this, (const ZinIrOpLayer *)v8, &v7, &v6, a5);
}

BOOL ZinMirSpatialSplitUtils::IsRootOutputOrOutsideSubgraph(ZinMirSpatialSplitUtils *this, const Subgraph *a2, const ZinIrOpLayer *a3)
{
  ZinIrTensor *v5;
  ZinIrOpLayer *v7;
  ZinIrOpLayer *v8;

  v8 = *(ZinIrOpLayer **)((*(uint64_t (**)(const Subgraph *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0)+ 96);
  if ((ZinMirSpatialSplitUtils *)((char *)this + 80) == (ZinMirSpatialSplitUtils *)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)this + 72, &v8))ZinAssertImpl("Invalid Spatial Split Helper Call");
  v5 = (ZinIrTensor *)(*(uint64_t (**)(const Subgraph *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  v7 = (ZinIrOpLayer *)*((_QWORD *)ZinIrTensor::GetRootTensor(v5) + 12);
  return (ZinMirSpatialSplitUtils *)((char *)this + 32) != (ZinMirSpatialSplitUtils *)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)this + 24, &v7)|| (ZinMirSpatialSplitUtils *)((char *)this + 80) == (ZinMirSpatialSplitUtils *)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)this + 72, &v7);
}

ZinIrOpLayer **ZinMirSpatialSplitUtils::GetSortedCluster@<X0>(uint64_t a1@<X0>, int a2@<W1>, ZinIrOpLayer ***a3@<X8>)
{
  ZinIrOpLayer **v5;
  ZinIrOpLayer **v6;
  unint64_t v7;
  uint64_t v8;

  std::vector<ZinIrSymbol *>::vector<std::__tree_const_iterator<ZinIrSymbol *,std::__tree_node<ZinIrSymbol *,void *> *,long>,0>(a3, *(_QWORD **)a1, (_QWORD *)(a1 + 8));
  v5 = *a3;
  v6 = a3[1];
  v7 = 126 - 2 * __clz(v6 - *a3);
  if (v6 == *a3)
    v8 = 0;
  else
    v8 = v7;
  if (a2)
    return std::__introsort<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_0 &,ZinIrOpLayer **,false>(v5, v6, v8, 1);
  else
    return std::__introsort<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_1 &,ZinIrOpLayer **,false>(v5, v6, v8, 1);
}

void sub_206D951C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirSpatialSplitUtils::CalculateSplitAlignmentConstraintInHOnCompressedTensor(ZinMirSpatialSplitUtils *this, const ZinIrOpLayer *a2)
{
  ZinIrTensor *v2;
  int **v3;
  uint64_t v4;
  int **v5;
  int *v6;
  uint64_t InterchangeDescriptor;
  uint64_t v9;
  int **v10;
  int **v11;

  v2 = (ZinIrTensor *)(*(uint64_t (**)(ZinMirSpatialSplitUtils *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
  ZinIrTensor::GetTensorFamily(v2, (uint64_t)&v10);
  v3 = v10;
  v4 = 1;
  if (v10 == v11)
  {
LABEL_5:
    if (!v10)
      return v4;
LABEL_6:
    v11 = v3;
    operator delete(v3);
    return v4;
  }
  v5 = v10;
  while (1)
  {
    v6 = *v5;
    if (*((_BYTE *)*v5 + 164))
      break;
    if (++v5 == v11)
      goto LABEL_5;
  }
  v9 = 0;
  if (ZinTensorFormatGetSize(v6[22], &v9))
    ZinAssertImpl("Error");
  InterchangeDescriptor = ZinIrTensor::GetInterchangeDescriptor((ZinIrTensor *)v6);
  v4 = v9 * GetMacroblockSize(SHIDWORD(InterchangeDescriptor));
  v3 = v10;
  if (v10)
    goto LABEL_6;
  return v4;
}

void sub_206D952A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirSpatialSplitUtils::UpdateMirInfoForSSM(ZinMirSpatialSplitUtils *this, ZinIrOpLayerGraph *a2, ZinIrOpLayer *a3)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t Hal;
  int *v11;
  ZinEngineLayerMirInfo *v12;
  ZinEngineLayerMirInfo *v14;
  ZinEngineLayerMirInfo *v15;

  if (*(_DWORD *)(*((_QWORD *)a2 + 8) + 8) == 85)
  {
    v4 = *((_QWORD *)a2 + 33);
    if (v4)
    {
      if (*((_QWORD *)a2 + 54))
      {
        if (*(_BYTE *)(v4 + 151))
        {
          ZinNEConvLayer::ComputeSmallSourceMode(a2, 1);
        }
        else
        {
          v5 = *(_DWORD *)(v4 + 144);
          v6 = *(unsigned __int8 *)(v4 + 150);
          v7 = ZinNEConvLayer::ComputeSmallSourceMode(a2, 1);
          if (v6)
            v8 = 1;
          else
            v8 = v5 == v7;
          if (!v8)
          {
            v9 = *((_QWORD *)a2 + 2);
            Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(v9 + 160));
            v11 = (int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
            v12 = (ZinEngineLayerMirInfo *)operator new();
            ZinEngineLayerMirInfo::ZinEngineLayerMirInfo(v12, v11[2]);
            v15 = v12;
            if ((*(unsigned int (**)(ZinIrOpLayerGraph *))(*(_QWORD *)a2 + 408))(a2))
            {
              ZinNELayer::FindValidMirInfoForOutputTranspose(a2, v11, v9 + 176, &v15);
            }
            else if (ZinNELayer::ComputeMirInfo(a2, (uint64_t)v11, (char **)&v15, 1))
            {
              std::unique_ptr<ZinEngineLayerMirInfo>::reset[abi:ne180100](&v15, 0);
              return 3;
            }
            if (!v15)
              ZinAssertImpl("can't update mir_info for SSM.");
            ZinMirL2Config::ZinMirSetFormats((ZinEngineLayerMirInfo *)((char *)v15 + 120), a2);
            ZinANELayer::DeleteMirInfo((ZinEngineLayerMirInfo **)a2);
            ZinANELayer::SetMirInfo((uint64_t)a2, (int **)&v15);
            v14 = v15;
            v15 = 0;
            if (v14)
            {
              ZinEngineLayerMirInfo::~ZinEngineLayerMirInfo(v14);
              MEMORY[0x20BD002F8]();
            }
          }
        }
      }
    }
  }
  return 0;
}

void sub_206D95440(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x10B0C40CB92D005);
  _Unwind_Resume(a1);
}

uint64_t ZinMirSpatialSplitUtils::MoveChannelConcatFromOuterToInnerMost(ZinMirSpatialSplitUtils *this, ZinIrOpLayerGraph *a2, ZinIrOpLayer *a3)
{
  ZinIrTensor *v5;
  ZinIrTensor *RootTensor;
  uint64_t v7;
  uint64_t v8;
  char *v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  _DWORD *v38;
  _DWORD *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  BOOL v43;
  BOOL v44;
  _BOOL4 v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  ZinIrOpLayer **v56;
  ZinIrOpLayer **v57;
  ZinIrOpLayer *v58;
  void *v59;
  uint64_t *v60;
  ZinIrOpLayer *v61;
  uint64_t *v62;
  uint64_t *v63;
  ZinIrOpLayer *v64;
  int v65;
  _OWORD v66[2];
  int v67;
  void *__dst[2];
  void *v69;
  uint64_t *v70;
  _QWORD *v71;
  uint64_t v72;
  void *__p;
  _DWORD *v74;
  char *v75;
  void *v76[2];
  void *v77;
  ZinIrOpLayer *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD v81[3];

  v81[1] = *MEMORY[0x24BDAC8D0];
  v5 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayerGraph *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  RootTensor = ZinIrTensor::GetRootTensor(v5);
  if (RootTensor != (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayerGraph *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0))return 0;
  v7 = *((_QWORD *)a2 + 8);
  if (*(_DWORD *)(v7 + 8) != 7
    || *(_DWORD *)(v7 + 12)
    || *(_BYTE *)((*(uint64_t (**)(ZinIrOpLayerGraph *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0)
                + 144))
  {
    return 0;
  }
  v76[0] = 0;
  v76[1] = 0;
  v77 = 0;
  __p = 0;
  v74 = 0;
  v75 = 0;
  v71 = 0;
  v72 = 0;
  v70 = (uint64_t *)&v71;
  if ((void **)((char *)a2 + 88) == v76)
  {
    v11 = 0;
    v10 = 0;
    v12 = (_DWORD *)(*((_QWORD *)a2 + 8) + 12);
    v13 = (uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 3;
    goto LABEL_11;
  }
  std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)v76, *((char **)a2 + 11), *((_QWORD *)a2 + 12), (uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 3);
  v11 = v74;
  v10 = v75;
  v12 = (_DWORD *)(*((_QWORD *)a2 + 8) + 12);
  v13 = (uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 3;
  if (v74 >= (_DWORD *)v75)
  {
LABEL_11:
    v15 = ((char *)v11 - (_BYTE *)__p) >> 4;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 60)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v17 = v10 - (_BYTE *)__p;
    if (v17 >> 3 > v16)
      v16 = v17 >> 3;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
      v18 = 0xFFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>((uint64_t)&v75, v18);
    v20 = &v19[16 * v15];
    v22 = &v19[16 * v21];
    *(_DWORD *)v20 = *v12;
    *((_QWORD *)v20 + 1) = v13;
    v14 = v20 + 16;
    v24 = (char *)__p;
    v23 = (char *)v74;
    if (v74 != __p)
    {
      do
      {
        *((_OWORD *)v20 - 1) = *((_OWORD *)v23 - 1);
        v20 -= 16;
        v23 -= 16;
      }
      while (v23 != v24);
      v23 = (char *)__p;
    }
    __p = v20;
    v74 = v14;
    v75 = v22;
    if (v23)
      operator delete(v23);
    goto LABEL_22;
  }
  *v74 = *v12;
  *((_QWORD *)v11 + 1) = v13;
  v14 = v11 + 4;
LABEL_22:
  v74 = v14;
  do
  {
    __dst[0] = 0;
    __dst[1] = 0;
    v69 = 0;
    v25 = (char *)v76[0];
    v26 = *(_QWORD **)v76[0];
    v27 = *(_QWORD *)(*(_QWORD *)v76[0] + 64);
    if (*(_DWORD *)(v27 + 8) == 7)
    {
      if (*(_DWORD *)(v27 + 12) >= 2u)
      {
        v28 = (char *)v76[1];
        if (v76[0] == v76[1])
        {
LABEL_37:
          v37 = (uint64_t)(v26[12] - v26[11]) >> 3;
          v38 = v74;
          if (v74 >= (_DWORD *)v75)
          {
            v46 = ((char *)v74 - (_BYTE *)__p) >> 4;
            v47 = v46 + 1;
            if ((unint64_t)(v46 + 1) >> 60)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v48 = v75 - (_BYTE *)__p;
            if ((v75 - (_BYTE *)__p) >> 3 > v47)
              v47 = v48 >> 3;
            if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF0)
              v49 = 0xFFFFFFFFFFFFFFFLL;
            else
              v49 = v47;
            v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>((uint64_t)&v75, v49);
            v52 = &v50[16 * v46];
            *(_DWORD *)v52 = *(_DWORD *)(v27 + 12);
            *((_QWORD *)v52 + 1) = v37;
            v54 = (char *)__p;
            v53 = (char *)v74;
            v55 = v52;
            if (v74 != __p)
            {
              do
              {
                *((_OWORD *)v55 - 1) = *((_OWORD *)v53 - 1);
                v55 -= 16;
                v53 -= 16;
              }
              while (v53 != v54);
              v53 = (char *)__p;
            }
            v39 = v52 + 16;
            __p = v55;
            v74 = v52 + 16;
            v75 = &v50[16 * v51];
            if (v53)
              operator delete(v53);
          }
          else
          {
            *v74 = *(_DWORD *)(v27 + 12);
            *((_QWORD *)v38 + 1) = v37;
            v39 = v38 + 4;
          }
          v74 = v39;
          v56 = (ZinIrOpLayer **)v76[0];
          v57 = (ZinIrOpLayer **)v76[1];
          if (v76[0] != v76[1])
          {
            do
            {
              v78 = *v56;
              v58 = v78;
              std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(&v70, &v78, (uint64_t *)&v78);
              v78 = 0;
              v79 = 0;
              v80 = 0;
              std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v78, *((const void **)v58 + 11), *((_QWORD *)v58 + 12), (uint64_t)(*((_QWORD *)v58 + 12) - *((_QWORD *)v58 + 11)) >> 3);
              std::vector<ZinGOCLayer const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<ZinGOCLayer const**>,std::__wrap_iter<ZinGOCLayer const**>>((uint64_t)__dst, (uint64_t)__dst[1], (char *)v78, (char *)v79, (v79 - (uint64_t)v78) >> 3);
              if (v78)
              {
                v79 = (uint64_t)v78;
                operator delete(v78);
              }
              ++v56;
            }
            while (v56 != v57);
            v56 = (ZinIrOpLayer **)v76[0];
          }
          *(_OWORD *)v76 = *(_OWORD *)__dst;
          v59 = v69;
          __dst[0] = v56;
          v69 = v77;
          v77 = v59;
          v43 = 1;
          goto LABEL_49;
        }
        while (1)
        {
          v29 = *(_QWORD **)v25;
          v30 = *(_QWORD *)(*(_QWORD *)v25 + 64);
          if (*(_DWORD *)(v30 + 8) != 7)
            break;
          v31 = v26[8];
          if (*(_DWORD *)(v31 + 12) != *(_DWORD *)(v30 + 12))
            break;
          v33 = *(char **)(v31 + 16);
          v32 = *(char **)(v31 + 24);
          v34 = *(_QWORD **)(v30 + 16);
          if (v32 - v33 != *(_QWORD *)(v30 + 24) - (_QWORD)v34)
            break;
          while (v33 != v32)
          {
            if (!ZinTensorPosition::operator==(v33, v34))
              goto LABEL_48;
            v35 = v33 + 40;
            v36 = v34 + 5;
            if (!ZinTensorPosition::operator==(v35, v36))
              goto LABEL_48;
            v33 = (char *)(v35 + 5);
            v34 = v36 + 5;
          }
          if (v29[15] - v29[14] > 8uLL
            || *(_BYTE *)((*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v29 + 32))(v29, 0, 0) + 144))
          {
            break;
          }
          v25 += 8;
          if (v25 == v28)
          {
            v27 = v26[8];
            goto LABEL_37;
          }
        }
      }
LABEL_48:
      v43 = 0;
LABEL_49:
      v45 = 1;
      goto LABEL_50;
    }
    if (!v72)
      goto LABEL_48;
    v40 = (char *)v76[1];
    if (v76[0] == v76[1])
    {
      v45 = 0;
      v43 = 1;
    }
    else
    {
      v41 = (char *)v76[0] + 8;
      do
      {
        v42 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)v41 - 1) + 32))(*((_QWORD *)v41 - 1), 0, 0);
        v43 = *(_BYTE *)(v42 + 144) != 0;
        if (*(_BYTE *)(v42 + 144))
          v44 = v41 == v40;
        else
          v44 = 1;
        v41 += 8;
      }
      while (!v44);
      v45 = *(unsigned __int8 *)(v42 + 144) == 0;
    }
LABEL_50:
    if (__dst[0])
    {
      __dst[1] = __dst[0];
      operator delete(__dst[0]);
    }
    if (!v43)
    {
      v8 = 0;
      goto LABEL_87;
    }
  }
  while (v45);
  v60 = v70;
  if (v70 != (uint64_t *)&v71)
  {
    do
    {
      v81[0] = v60[4];
      v61 = (ZinIrOpLayer *)v81[0];
      v78 = (ZinIrOpLayer *)v81;
      v79 = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(__dst, &v78);
      if (!ZinIrOpLayerGraph::RemoveNode(this, v61, 0))
        ZinAssertImpl("Invalid Concat Transformation");
      __dst[0] = &unk_24C02BB18;
      if (__dst[1])
      {
        v69 = __dst[1];
        operator delete(__dst[1]);
      }
      v62 = (uint64_t *)v60[1];
      if (v62)
      {
        do
        {
          v63 = v62;
          v62 = (uint64_t *)*v62;
        }
        while (v62);
      }
      else
      {
        do
        {
          v63 = (uint64_t *)v60[2];
          v44 = *v63 == (_QWORD)v60;
          v60 = v63;
        }
        while (!v44);
      }
      v60 = v63;
    }
    while (v63 != (uint64_t *)&v71);
  }
  v64 = (ZinIrOpLayer *)ZinMirSpatialSplitUtils::PerformConcatTransformation((uint64_t **)this, (uint64_t)a2, (uint64_t *)v76, (unsigned int **)&__p);
  memset(v66, 0, sizeof(v66));
  v67 = 1065353216;
  v65 = ZinIrOpLayerGraph::MoveOutgoingEdges(this, (uint64_t **)a2, v64, v66);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v66);
  if ((v65 & ZinIrOpLayerGraph::RemoveNode(this, a2, 0)) != 0)
    v8 = 0;
  else
    v8 = 3;
LABEL_87:
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v70, v71);
  if (__p)
  {
    v74 = __p;
    operator delete(__p);
  }
  if (v76[0])
  {
    v76[1] = v76[0];
    operator delete(v76[0]);
  }
  return v8;
}

void sub_206D95AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,_QWORD *a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a21, a22);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a27)
  {
    a28 = (uint64_t)a27;
    operator delete(a27);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinMirSpatialSplitUtils::PerformConcatTransformation(uint64_t **a1, uint64_t a2, uint64_t *a3, unsigned int **a4)
{
  unsigned int *v7;
  unint64_t v8;
  size_t v9;
  void *p_p;
  const void *v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unsigned int **v40;
  unsigned int *v41;
  unsigned int *v42;
  int v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  _BYTE *v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  ZinIrTensor *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  char v66;
  _QWORD *v67;
  char *v68;
  void *v69;
  int64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  _QWORD *v78;
  char *v79;
  uint64_t v80;
  unsigned int **v82;
  char v83;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  void *v88;
  uint64_t v89;
  char *v90;
  ZinIrOpLayer **v91;
  void *v92;
  void *v93;
  _QWORD *v94;
  void *__p;
  _QWORD *v96;
  char v97;
  char v98;
  void *v99[2];
  _QWORD v100[2];
  __n128 v101;
  char *v102;
  _QWORD v103[3];
  char v104;
  uint64_t v105;
  _QWORD v106[4];

  v106[2] = *MEMORY[0x24BDAC8D0];
  v7 = *a4;
  v8 = 1;
  while (v7 != a4[1])
  {
    if (!*v7)
    {
      v8 = *((_QWORD *)v7 + 1);
      break;
    }
    v7 += 4;
  }
  v85 = *(_QWORD *)(a2 + 16);
  if (*(char *)(a2 + 47) >= 0)
    v9 = *(unsigned __int8 *)(a2 + 47);
  else
    v9 = *(_QWORD *)(a2 + 32);
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v9 + 20);
  if (v97 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if (v9)
  {
    if (*(char *)(a2 + 47) >= 0)
      v11 = (const void *)(a2 + 24);
    else
      v11 = *(const void **)(a2 + 24);
    memmove(p_p, v11, v9);
  }
  v82 = a4;
  strcpy((char *)p_p + v9, "_concat_readjustment");
  v12 = ZinObjectNameFactory::ZinObjectNameFactory(v103, &__p);
  if (v97 < 0)
    operator delete(__p);
  v101 = 0uLL;
  v102 = 0;
  v14 = *a3;
  v13 = a3[1];
  if (v8 <= (v13 - *a3) >> 3)
  {
    v15 = 0;
    do
    {
      v99[0] = 0;
      v99[1] = 0;
      v100[0] = 0;
      if (v15 < (v13 - v14) >> 3)
      {
        v16 = 0;
        v17 = v15;
        do
        {
          if ((unint64_t)v16 >= v100[0])
          {
            v18 = (v16 - (char *)v99[0]) >> 3;
            if ((unint64_t)(v18 + 1) >> 61)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v19 = (uint64_t)(v100[0] - (unint64_t)v99[0]) >> 2;
            if (v19 <= v18 + 1)
              v19 = v18 + 1;
            if (v100[0] - (unint64_t)v99[0] >= 0x7FFFFFFFFFFFFFF8)
              v20 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v20 = v19;
            if (v20)
              v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v100, v20);
            else
              v21 = 0;
            v22 = &v21[8 * v18];
            *(_QWORD *)v22 = *(_QWORD *)(v14 + 8 * v17);
            v16 = v22 + 8;
            v24 = (char *)v99[0];
            v23 = (char *)v99[1];
            if (v99[1] != v99[0])
            {
              do
              {
                v25 = *((_QWORD *)v23 - 1);
                v23 -= 8;
                *((_QWORD *)v22 - 1) = v25;
                v22 -= 8;
              }
              while (v23 != v24);
              v23 = (char *)v99[0];
            }
            v99[0] = v22;
            v99[1] = v16;
            v100[0] = &v21[8 * v20];
            if (v23)
              operator delete(v23);
          }
          else
          {
            *(_QWORD *)v16 = *(_QWORD *)(v14 + 8 * v17);
            v16 += 8;
          }
          v99[1] = v16;
          v14 = *a3;
          v26 = a3[1] - *a3;
          v17 += (v26 >> 3) / v8;
        }
        while (v17 < v26 >> 3);
      }
      v94 = 0;
      ZinBuilder::CreateConcat(v85, (uint64_t)v103, (char **)v99, 0, 1, &v94, 0, (uint64_t)&__p);
      v27 = v94;
      v94 = 0;
      if (v27)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v94, v27);
      if (!v98)
        ZinAssertImpl("Invalid Concat Transformation");
      v106[0] = a2;
      v88 = v106;
      v89 = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(&v91, &v88);
      v28 = ZinBuilder::AddConcatToGraph(a1, (uint64_t *)v99, &__p, &v91);
      v91 = (ZinIrOpLayer **)&unk_24C02BB18;
      if (v92)
      {
        v93 = v92;
        operator delete(v92);
      }
      if ((v28 & 1) == 0)
        ZinAssertImpl("Invalid Concat Transformation");
      v29 = v96;
      v30 = v101.n128_u64[1];
      if (v101.n128_u64[1] >= (unint64_t)v102)
      {
        v32 = (uint64_t)(v101.n128_u64[1] - v101.n128_u64[0]) >> 3;
        if ((unint64_t)(v32 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v33 = (uint64_t)&v102[-v101.n128_u64[0]] >> 2;
        if (v33 <= v32 + 1)
          v33 = v32 + 1;
        if ((unint64_t)&v102[-v101.n128_u64[0]] >= 0x7FFFFFFFFFFFFFF8)
          v34 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v34 = v33;
        if (v34)
          v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v102, v34);
        else
          v35 = 0;
        v36 = &v35[8 * v32];
        *(_QWORD *)v36 = *(v29 - 1);
        v31 = v36 + 8;
        v37 = (char *)v101.n128_u64[1];
        v38 = (char *)v101.n128_u64[0];
        if (v101.n128_u64[1] != v101.n128_u64[0])
        {
          do
          {
            v39 = *((_QWORD *)v37 - 1);
            v37 -= 8;
            *((_QWORD *)v36 - 1) = v39;
            v36 -= 8;
          }
          while (v37 != v38);
          v37 = (char *)v101.n128_u64[0];
        }
        v101.n128_u64[0] = (unint64_t)v36;
        v101.n128_u64[1] = (unint64_t)v31;
        v102 = &v35[8 * v34];
        if (v37)
          operator delete(v37);
      }
      else
      {
        *(_QWORD *)v101.n128_u64[1] = *(v96 - 1);
        v31 = (_QWORD *)(v30 + 8);
      }
      v101.n128_u64[1] = (unint64_t)v31;
      if (v98 && __p)
      {
        v96 = __p;
        operator delete(__p);
      }
      if (v99[0])
      {
        v99[1] = v99[0];
        operator delete(v99[0]);
      }
      ++v15;
      v14 = *a3;
      v13 = a3[1];
    }
    while (v15 < ((v13 - *a3) >> 3) / v8);
  }
  v40 = a4;
  v41 = a4[1];
  if (v41 != *a4)
  {
    v83 = 0;
    do
    {
      v42 = v41;
      v99[0] = 0;
      v99[1] = 0;
      v100[0] = 0;
      v43 = *(v41 - 4);
      v41 -= 4;
      if (v43)
      {
        v44 = (char *)v101.n128_u64[1];
        v45 = v101.n128_u64[0];
        if (v101.n128_u64[1] == v101.n128_u64[0])
        {
          v79 = 0;
          v12 = 0uLL;
        }
        else
        {
          v46 = 0;
          do
          {
            v47 = 0;
            v48 = 0;
            v88 = 0;
            v89 = 0;
            v90 = 0;
            if (v46 < *((_QWORD *)v42 - 1) + v46)
            {
              v48 = 0;
              v49 = v46;
              do
              {
                v50 = v101.n128_u64[0];
                if (v48 >= v90)
                {
                  v51 = (v48 - (_BYTE *)v88) >> 3;
                  if ((unint64_t)(v51 + 1) >> 61)
                    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                  v52 = (v90 - (_BYTE *)v88) >> 2;
                  if (v52 <= v51 + 1)
                    v52 = v51 + 1;
                  if ((unint64_t)(v90 - (_BYTE *)v88) >= 0x7FFFFFFFFFFFFFF8)
                    v53 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v53 = v52;
                  if (v53)
                    v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v90, v53);
                  else
                    v54 = 0;
                  v55 = &v54[8 * v51];
                  *(_QWORD *)v55 = *(_QWORD *)(v50 + 8 * v49);
                  v48 = v55 + 8;
                  v57 = (char *)v88;
                  v56 = (char *)v89;
                  if ((void *)v89 != v88)
                  {
                    do
                    {
                      v58 = *((_QWORD *)v56 - 1);
                      v56 -= 8;
                      *((_QWORD *)v55 - 1) = v58;
                      v55 -= 8;
                    }
                    while (v56 != v57);
                    v56 = (char *)v88;
                  }
                  v88 = v55;
                  v89 = (uint64_t)v48;
                  v90 = &v54[8 * v53];
                  if (v56)
                    operator delete(v56);
                }
                else
                {
                  *(_QWORD *)v48 = *(_QWORD *)(v101.n128_u64[0] + 8 * v49);
                  v48 += 8;
                }
                v89 = (uint64_t)v48;
                ++v49;
              }
              while (v49 < *((_QWORD *)v42 - 1) + v46);
              v47 = v88;
              v44 = (char *)v101.n128_u64[1];
              v45 = v101.n128_u64[0];
            }
            v87 = 0;
            if ((char *)(v48 - v47) == &v44[-v45])
            {
              if ((v83 & 1) != 0)
                ZinAssertImpl("Invalid Concat Transformation", v12.n128_f64[0]);
              v59 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, __n128))(*(_QWORD *)a2 + 32))(a2, 0, 0, v12);
              ZinIrTensor::CopyTensorMirInfo(v59, (ZinIrTensor::MirInfo **)&__p);
              v60 = __p;
              __p = 0;
              v61 = v87;
              v87 = v60;
              if (v61)
              {
                std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v87, v61);
                v62 = __p;
                __p = 0;
                if (v62)
                  std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&__p, v62);
              }
              v83 = 1;
              v63 = v87;
            }
            else
            {
              v63 = 0;
            }
            v64 = *v41;
            v86 = v63;
            v87 = 0;
            ZinBuilder::CreateConcat(v85, (uint64_t)v103, (char **)&v88, v64, 0, &v86, 0, (uint64_t)&__p);
            v65 = v86;
            v86 = 0;
            if (v65)
              std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v86, v65);
            if (!v98)
              ZinAssertImpl("Invalid Concat Transformation");
            v105 = a2;
            v106[0] = &v105;
            v106[1] = 1;
            Layer2TDMapper::SourceLayer::SourceLayer(&v91, v106);
            v66 = ZinBuilder::AddConcatToGraph(a1, (uint64_t *)&v88, &__p, &v91);
            v91 = (ZinIrOpLayer **)&unk_24C02BB18;
            if (v92)
            {
              v93 = v92;
              operator delete(v92);
            }
            if ((v66 & 1) == 0)
              ZinAssertImpl("Invalid Concat Transformation");
            v67 = v96;
            v68 = (char *)v99[1];
            if (v99[1] >= (void *)v100[0])
            {
              v70 = ((char *)v99[1] - (char *)v99[0]) >> 3;
              if ((unint64_t)(v70 + 1) >> 61)
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              v71 = (uint64_t)(v100[0] - (unint64_t)v99[0]) >> 2;
              if (v71 <= v70 + 1)
                v71 = v70 + 1;
              if (v100[0] - (unint64_t)v99[0] >= 0x7FFFFFFFFFFFFFF8)
                v72 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v72 = v71;
              if (v72)
                v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v100, v72);
              else
                v73 = 0;
              v74 = &v73[8 * v70];
              *(_QWORD *)v74 = *(v67 - 1);
              v69 = v74 + 8;
              v76 = (char *)v99[0];
              v75 = (char *)v99[1];
              if (v99[1] != v99[0])
              {
                do
                {
                  v77 = *((_QWORD *)v75 - 1);
                  v75 -= 8;
                  *((_QWORD *)v74 - 1) = v77;
                  v74 -= 8;
                }
                while (v75 != v76);
                v75 = (char *)v99[0];
              }
              v99[0] = v74;
              v99[1] = v69;
              v100[0] = &v73[8 * v72];
              if (v75)
                operator delete(v75);
            }
            else
            {
              *(_QWORD *)v99[1] = *(v96 - 1);
              v69 = v68 + 8;
            }
            v99[1] = v69;
            if (v98 && __p)
            {
              v96 = __p;
              operator delete(__p);
            }
            v78 = v87;
            v87 = 0;
            if (v78)
              std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v87, v78);
            if (v88)
            {
              v89 = (uint64_t)v88;
              operator delete(v88);
            }
            v46 += *((_QWORD *)v42 - 1);
            v44 = (char *)v101.n128_u64[1];
            v45 = v101.n128_u64[0];
          }
          while (v46 < (uint64_t)(v101.n128_u64[1] - v101.n128_u64[0]) >> 3);
          v12 = *(__n128 *)v99;
          v79 = (char *)v100[0];
          v44 = (char *)v101.n128_u64[0];
          v40 = v82;
        }
        v101 = v12;
        v99[0] = v44;
        v100[0] = v102;
        v102 = v79;
        if (v44)
        {
          v99[1] = v44;
          operator delete(v44);
        }
      }
    }
    while (v41 != *v40);
  }
  if (v101.n128_u64[1] - v101.n128_u64[0] != 8)
    ZinAssertImpl("Invalid Concat Transformation", v12.n128_f64[0]);
  v80 = *(_QWORD *)v101.n128_u64[0];
  v101.n128_u64[1] = v101.n128_u64[0];
  operator delete((void *)v101.n128_u64[0]);
  v103[0] = off_24C01FBB0;
  if (v104 < 0)
    operator delete((void *)v103[1]);
  return v80;
}

void sub_206D96424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37)
{
  uint64_t v37;

  if (__p)
    operator delete(__p);
  *(_QWORD *)(v37 - 160) = off_24C01FBB0;
  if (*(char *)(v37 - 129) < 0)
    operator delete(*(void **)(v37 - 152));
  _Unwind_Resume(exception_object);
}

void ZinMirSpatialSplitUtils::SpatialDimensionsInWhichReshapeCannotBeSplit(ZinMirSpatialSplitUtils *this@<X0>, uint64_t **a2@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  uint64_t ValueAt;
  uint64_t ReshapeInfo;
  uint64_t v13;
  int v14;
  int v15;
  _QWORD *v16;
  _QWORD **v17;
  _QWORD *v18;
  _QWORD **v19;
  int v20;
  _QWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  char v24;
  uint64_t **v25;
  _QWORD **v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD **v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33[2];
  uint64_t *v34;
  _QWORD *v35[2];
  int v36;
  void *__p;
  void *v38;
  uint64_t v39;
  int v40;
  uint64_t *v41;
  _QWORD *v42[2];
  _OWORD v43[2];
  uint64_t v44;
  _OWORD v45[2];
  uint64_t v46;
  _DWORD *v47;
  _DWORD *v48;
  _QWORD v49[3];

  v49[1] = *MEMORY[0x24BDAC8D0];
  v5 = (_QWORD *)*((_QWORD *)this + 11);
  if (*((_QWORD **)this + 12) == v5)
    std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
  v6 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v5 + 32))(*v5, 0, 0);
  v7 = *(_OWORD *)(v6 + 64);
  v45[0] = *(_OWORD *)(v6 + 48);
  v45[1] = v7;
  v46 = *(_QWORD *)(v6 + 80);
  v8 = (*(uint64_t (**)(ZinMirSpatialSplitUtils *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
  v9 = 0;
  v10 = *(_OWORD *)(v8 + 64);
  v43[0] = *(_OWORD *)(v8 + 48);
  v43[1] = v10;
  v44 = *(_QWORD *)(v8 + 80);
  a2[2] = 0;
  a2[1] = 0;
  v25 = a2;
  *a2 = (uint64_t *)(a2 + 1);
  v42[0] = 0;
  v42[1] = 0;
  v41 = (uint64_t *)v42;
  do
  {
    LODWORD(v47) = v9;
    ValueAt = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)v45, v9);
    if (ValueAt != GetValueAtDimension<ZinTensorDimensions>((uint64_t *)v43, (int)v47))
      std::__tree<ZinIrDimension>::__emplace_unique_key_args<ZinIrDimension,ZinIrDimension>(&v41, (int *)&v47, &v47);
    ++v9;
  }
  while (v9 != 5);
  ReshapeInfo = ZinReshapeLayer::GetReshapeInfo(this);
  v38 = 0;
  v39 = 0;
  __p = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&__p, *(const void **)(ReshapeInfo + 16), *(_QWORD *)(ReshapeInfo + 24), (uint64_t)(*(_QWORD *)(ReshapeInfo + 24) - *(_QWORD *)(ReshapeInfo + 16)) >> 2);
  v13 = 0;
  v40 = *(_DWORD *)(ReshapeInfo + 40);
  v49[0] = 0x100000000;
  do
  {
    v36 = *((_DWORD *)v49 + v13);
    v14 = SpatialDimensionToZinIrDimension(v36);
    v15 = v14;
    v16 = v42[0];
    if (!v42[0])
      goto LABEL_16;
    v17 = v42;
    do
    {
      v18 = v16;
      v19 = v17;
      v20 = *((_DWORD *)v16 + 7);
      v21 = v16 + 1;
      if (v20 >= v14)
      {
        v21 = v18;
        v17 = (_QWORD **)v18;
      }
      v16 = (_QWORD *)*v21;
    }
    while (v16);
    if (v17 == v42)
      goto LABEL_16;
    if (v20 < v14)
      v18 = v19;
    if (v14 >= *((_DWORD *)v18 + 7))
    {
      std::__tree<SpatialDimension>::__emplace_unique_key_args<SpatialDimension,SpatialDimension const&>(v25, (unsigned int *)&v36, &v36);
    }
    else
    {
LABEL_16:
      v35[0] = 0;
      v35[1] = 0;
      v34 = (uint64_t *)v35;
      v33[0] = 0;
      v33[1] = 0;
      v32 = (uint64_t *)v33;
      DimensionOrderHint::GetOrder((DimensionOrderHint *)&__p, &v47);
      v23 = v47;
      v22 = v48;
      if (v47 != v48)
      {
        v24 = 0;
        while (1)
        {
          LODWORD(v29) = 0;
          LODWORD(v29) = *v23;
          if ((_DWORD)v29 != v15)
          {
            if ((v24 & 1) == 0)
            {
              std::__tree<ZinIrDimension>::__emplace_unique_key_args<ZinIrDimension,ZinIrDimension>(&v34, (int *)&v29, &v29);
              v24 = 0;
              goto LABEL_23;
            }
            std::__tree<ZinIrDimension>::__emplace_unique_key_args<ZinIrDimension,ZinIrDimension>(&v32, (int *)&v29, &v29);
          }
          v24 = 1;
LABEL_23:
          if (++v23 == v22)
          {
            v23 = v47;
            if (v47)
              goto LABEL_25;
            goto LABEL_26;
          }
        }
      }
      v24 = 0;
      if (v47)
      {
LABEL_25:
        v48 = v23;
        operator delete(v23);
      }
LABEL_26:
      if ((v24 & 1) == 0)
        ZinAssertImpl("Spatial Splitting Internal Error");
      v30 = 0;
      v31 = 0;
      v29 = &v30;
      v27 = 0;
      v28 = 0;
      v26 = &v27;
      std::__set_intersection[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<ZinIrDimension,std::__tree_node<ZinIrDimension,void *> *,long>,std::__tree_const_iterator<ZinIrDimension,std::__tree_node<ZinIrDimension,void *> *,long>,std::__tree_const_iterator<ZinIrDimension,std::__tree_node<ZinIrDimension,void *> *,long>,std::__tree_const_iterator<ZinIrDimension,std::__tree_node<ZinIrDimension,void *> *,long>,std::insert_iterator<std::set<ZinIrDimension>>>(v41, v42, v34, v35, (uint64_t)&v29, (uint64_t)&v30, (uint64_t)&v47);
      std::__set_intersection[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<ZinIrDimension,std::__tree_node<ZinIrDimension,void *> *,long>,std::__tree_const_iterator<ZinIrDimension,std::__tree_node<ZinIrDimension,void *> *,long>,std::__tree_const_iterator<ZinIrDimension,std::__tree_node<ZinIrDimension,void *> *,long>,std::__tree_const_iterator<ZinIrDimension,std::__tree_node<ZinIrDimension,void *> *,long>,std::insert_iterator<std::set<ZinIrDimension>>>(v41, v42, v32, v33, (uint64_t)&v26, (uint64_t)v26, (uint64_t)&v47);
      if (v31 && v28)
        std::__tree<SpatialDimension>::__emplace_unique_key_args<SpatialDimension,SpatialDimension const&>(v25, (unsigned int *)&v36, &v36);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v26, v27);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v29, v30);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v32, v33[0]);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v34, v35[0]);
    }
    ++v13;
  }
  while (v13 != 2);
  if (__p)
  {
    v38 = __p;
    operator delete(__p);
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v41, v42[0]);
}

void sub_206D96948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,char a28,_QWORD *a29)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a28, a29);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(a10, *(_QWORD **)(a10 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_0 &,ZinIrOpLayer **,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  BOOL v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v38 = *(a2 - 1);
        v39 = *v8;
        if (*(_QWORD *)(v38 + 48) < *(_QWORD *)(*v8 + 48))
        {
          *v8 = v38;
          *(a2 - 1) = v39;
        }
        return result;
      case 3uLL:
        return (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_0 &,ZinIrOpLayer **>(v8, v8 + 1, a2 - 1);
      case 4uLL:
        return (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_0 &,ZinIrOpLayer **>(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5uLL:
        v40 = v8 + 1;
        v41 = v8 + 2;
        v42 = v8 + 3;
        result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_0 &,ZinIrOpLayer **>(v8, v8 + 1, v8 + 2, v8 + 3);
        v43 = *(a2 - 1);
        v44 = v8[3];
        if (*(_QWORD *)(v43 + 48) < *(_QWORD *)(v44 + 48))
        {
          *v42 = v43;
          *(a2 - 1) = v44;
          v45 = *v42;
          v46 = *v41;
          v47 = *(_QWORD *)(*v42 + 48);
          if (v47 < *(_QWORD *)(*v41 + 48))
          {
            *v41 = v45;
            *v42 = v46;
            v48 = *v40;
            if (v47 < *(_QWORD *)(*v40 + 48))
            {
              v8[1] = v45;
              v8[2] = v48;
              v49 = *v8;
              if (v47 < *(_QWORD *)(*v8 + 48))
              {
                *v8 = v45;
                v8[1] = v49;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v50 = v8 + 1;
          v52 = v8 == a2 || v50 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v52)
            {
              v53 = 0;
              v54 = v8;
              do
              {
                v56 = *v54;
                v55 = v54[1];
                v54 = v50;
                v57 = *(_QWORD *)(v55 + 48);
                if (v57 < *(_QWORD *)(v56 + 48))
                {
                  v58 = v53;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v58 + 8) = v56;
                    if (!v58)
                      break;
                    v56 = *(uint64_t *)((char *)v8 + v58 - 8);
                    v58 -= 8;
                    if (v57 >= *(_QWORD *)(v56 + 48))
                    {
                      v59 = (uint64_t *)((char *)v8 + v58 + 8);
                      goto LABEL_80;
                    }
                  }
                  v59 = v8;
LABEL_80:
                  *v59 = v55;
                }
                v50 = v54 + 1;
                v53 += 8;
              }
              while (v54 + 1 != a2);
            }
          }
          else if (!v52)
          {
            do
            {
              v90 = *v7;
              v89 = v7[1];
              v7 = v50;
              v91 = *(_QWORD *)(v89 + 48);
              if (v91 < *(_QWORD *)(v90 + 48))
              {
                do
                {
                  *v50 = v90;
                  v90 = *(v50 - 2);
                  --v50;
                }
                while (v91 < *(_QWORD *)(v90 + 48));
                *v50 = v89;
              }
              v50 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v60 = (v10 - 2) >> 1;
            v61 = v60;
            do
            {
              v62 = v61;
              if (v60 >= v61)
              {
                v63 = (2 * v61) | 1;
                v64 = &v8[v63];
                v65 = *v64;
                if (2 * v62 + 2 < (uint64_t)v10)
                {
                  result = *(_QWORD *)(v65 + 48);
                  if (result < *(_QWORD *)(v64[1] + 48))
                  {
                    v65 = v64[1];
                    ++v64;
                    v63 = 2 * v62 + 2;
                  }
                }
                v66 = &v8[v62];
                v67 = *v66;
                v68 = *(_QWORD *)(*v66 + 48);
                if (*(_QWORD *)(v65 + 48) >= v68)
                {
                  do
                  {
                    v69 = v64;
                    *v66 = v65;
                    if (v60 < v63)
                      break;
                    result = (2 * v63) | 1;
                    v64 = &v8[result];
                    v70 = 2 * v63 + 2;
                    v65 = *v64;
                    if (v70 < (uint64_t)v10 && *(_QWORD *)(v65 + 48) < *(_QWORD *)(v64[1] + 48))
                    {
                      v65 = v64[1];
                      ++v64;
                      result = v70;
                    }
                    v66 = v69;
                    v63 = result;
                  }
                  while (*(_QWORD *)(v65 + 48) >= v68);
                  *v69 = v67;
                }
              }
              v61 = v62 - 1;
            }
            while (v62);
            v71 = (unint64_t)v9 >> 3;
            do
            {
              v72 = 0;
              v73 = *v8;
              v74 = v8;
              do
              {
                v75 = &v74[v72];
                v78 = v75[1];
                v76 = v75 + 1;
                v77 = v78;
                v79 = (2 * v72) | 1;
                v80 = 2 * v72 + 2;
                if (v80 < v71)
                {
                  result = *(_QWORD *)(v77 + 48);
                  if (result < *(_QWORD *)(v76[1] + 48))
                  {
                    v77 = v76[1];
                    ++v76;
                    v79 = v80;
                  }
                }
                *v74 = v77;
                v74 = v76;
                v72 = v79;
              }
              while (v79 <= (uint64_t)((unint64_t)(v71 - 2) >> 1));
              if (v76 == --a2)
              {
                *v76 = v73;
              }
              else
              {
                *v76 = *a2;
                *a2 = v73;
                v81 = (char *)v76 - (char *)v8 + 8;
                if (v81 >= 9)
                {
                  v82 = (((unint64_t)v81 >> 3) - 2) >> 1;
                  v83 = &v8[v82];
                  v84 = *v83;
                  v85 = *v76;
                  v86 = *(_QWORD *)(*v76 + 48);
                  if (*(_QWORD *)(*v83 + 48) < v86)
                  {
                    do
                    {
                      v87 = v83;
                      *v76 = v84;
                      if (!v82)
                        break;
                      v82 = (v82 - 1) >> 1;
                      v83 = &v8[v82];
                      v84 = *v83;
                      v76 = v87;
                    }
                    while (*(_QWORD *)(*v83 + 48) < v86);
                    *v87 = v85;
                  }
                }
              }
            }
            while (v71-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_0 &,ZinIrOpLayer **>(&v7[v10 >> 1], v7, a2 - 1);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_0 &,ZinIrOpLayer **>(v7, &v7[v10 >> 1], a2 - 1);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_0 &,ZinIrOpLayer **>(v7 + 1, v12 - 1, a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_0 &,ZinIrOpLayer **>(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_0 &,ZinIrOpLayer **>(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0)
        {
          v15 = *(_QWORD *)(v14 + 48);
          if (*(_QWORD *)(*(v7 - 1) + 48) < v15)
            goto LABEL_12;
          if (v15 >= *(_QWORD *)(*(a2 - 1) + 48))
          {
            v30 = v7 + 1;
            do
            {
              v8 = v30;
              if (v30 >= a2)
                break;
              ++v30;
            }
            while (v15 >= *(_QWORD *)(*v8 + 48));
          }
          else
          {
            v8 = v7;
            do
            {
              v29 = v8[1];
              ++v8;
            }
            while (v15 >= *(_QWORD *)(v29 + 48));
          }
          v31 = a2;
          if (v8 < a2)
          {
            v31 = a2;
            do
              v32 = *--v31;
            while (v15 < *(_QWORD *)(v32 + 48));
          }
          if (v8 < v31)
          {
            v33 = *v8;
            v34 = *v31;
            do
            {
              *v8 = v34;
              *v31 = v33;
              do
              {
                v35 = v8[1];
                ++v8;
                v33 = v35;
              }
              while (v15 >= *(_QWORD *)(v35 + 48));
              do
              {
                v36 = *--v31;
                v34 = v36;
              }
              while (v15 < *(_QWORD *)(v36 + 48));
            }
            while (v8 < v31);
          }
          v37 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v37;
          a4 = 0;
          *v37 = v14;
          continue;
        }
        v15 = *(_QWORD *)(v14 + 48);
LABEL_12:
        v16 = 0;
        do
          v17 = v7[++v16];
        while (*(_QWORD *)(v17 + 48) < v15);
        v18 = &v7[v16];
        v19 = a2;
        if (v16 == 1)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *--v19;
          }
          while (*(_QWORD *)(v21 + 48) >= v15);
        }
        else
        {
          do
            v20 = *--v19;
          while (*(_QWORD *)(v20 + 48) >= v15);
        }
        if (v18 >= v19)
        {
          v27 = v18 - 1;
        }
        else
        {
          v22 = *v19;
          v23 = &v7[v16];
          v24 = v19;
          do
          {
            *v23 = v22;
            *v24 = v17;
            do
            {
              v25 = v23[1];
              ++v23;
              v17 = v25;
            }
            while (*(_QWORD *)(v25 + 48) < v15);
            do
            {
              v26 = *--v24;
              v22 = v26;
            }
            while (*(_QWORD *)(v26 + 48) >= v15);
          }
          while (v23 < v24);
          v27 = v23 - 1;
        }
        if (v27 != v7)
          *v7 = *v27;
        *v27 = v14;
        if (v18 < v19)
        {
LABEL_33:
          result = std::__introsort<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_0 &,ZinIrOpLayer **,false>(v7, v27, a3, a4 & 1);
          a4 = 0;
          v8 = v27 + 1;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_0 &,ZinIrOpLayer **>(v7, v27);
        v8 = v27 + 1;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_0 &,ZinIrOpLayer **>(v27 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_33;
        }
        a2 = v27;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_0 &,ZinIrOpLayer **>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a2;
  v4 = *result;
  v5 = *(_QWORD *)(*a2 + 48);
  v6 = *(_QWORD *)(*result + 48);
  v7 = *a3;
  v8 = *(_QWORD *)(*a3 + 48);
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v3;
      v9 = *result;
      if (*(_QWORD *)(*a2 + 48) < *(_QWORD *)(*result + 48))
      {
        *result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v5)
    {
      *result = v3;
      *a2 = v4;
      if (*(_QWORD *)(*a3 + 48) >= v6)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v7;
    }
    *a3 = v4;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_0 &,ZinIrOpLayer **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*(_QWORD *)(v6 + 48) < *(_QWORD *)(*a1 + 48))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_0 &,ZinIrOpLayer **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_0 &,ZinIrOpLayer **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v18 = a1 + 1;
      v19 = a1 + 2;
      v20 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_0 &,ZinIrOpLayer **>(a1, a1 + 1, a1 + 2, a1 + 3);
      v21 = *(a2 - 1);
      v22 = a1[3];
      if (*(_QWORD *)(v21 + 48) < *(_QWORD *)(v22 + 48))
      {
        *v20 = v21;
        *(a2 - 1) = v22;
        v23 = *v20;
        v24 = *v19;
        v25 = *(_QWORD *)(*v20 + 48);
        if (v25 < *(_QWORD *)(*v19 + 48))
        {
          *v19 = v23;
          *v20 = v24;
          v26 = *v18;
          if (v25 < *(_QWORD *)(*v18 + 48))
          {
            a1[1] = v23;
            a1[2] = v26;
            v27 = *a1;
            if (v25 < *(_QWORD *)(*a1 + 48))
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_0 &,ZinIrOpLayer **>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    v14 = *(_QWORD *)(*v9 + 48);
    if (v14 < *(_QWORD *)(*v8 + 48))
    {
      v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        v16 = v15 - 8;
        if (v15 == 8)
          break;
        v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *(_QWORD *)(v13 + 48))
        {
          v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_0 &,ZinIrOpLayer **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_0 &,ZinIrOpLayer **>(a1, a2, a3);
  v9 = *a3;
  if (*(_QWORD *)(*a4 + 48) < *(_QWORD *)(*a3 + 48))
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*(_QWORD *)(*a3 + 48) < *(_QWORD *)(*a2 + 48))
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*(_QWORD *)(*a2 + 48) < *(_QWORD *)(*a1 + 48))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t std::unordered_map<ZinIrTensor const*,CpAllocUtils::AllocationType>::unordered_map(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::pair<ZinIrOpLayer * const,ZinAneInstruction *> const&>(a1, i + 2, (_OWORD *)i + 1);
  return a1;
}

void sub_206D97438(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ZinMirSpatialSplitUtils::ComputeTemporaryLayerMirInfo(ZinIrControlFlowGraph *,std::set<ZinANELayer *> &)::$_0,std::allocator<ZinMirSpatialSplitUtils::ComputeTemporaryLayerMirInfo(ZinIrControlFlowGraph *,std::set<ZinANELayer *> &)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<ZinMirSpatialSplitUtils::ComputeTemporaryLayerMirInfo(ZinIrControlFlowGraph *,std::set<ZinANELayer *> &)::$_0,std::allocator<ZinMirSpatialSplitUtils::ComputeTemporaryLayerMirInfo(ZinIrControlFlowGraph *,std::set<ZinANELayer *> &)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C001920;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ZinMirSpatialSplitUtils::ComputeTemporaryLayerMirInfo(ZinIrControlFlowGraph *,std::set<ZinANELayer *> &)::$_0,std::allocator<ZinMirSpatialSplitUtils::ComputeTemporaryLayerMirInfo(ZinIrControlFlowGraph *,std::set<ZinANELayer *> &)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C001920;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<ZinMirSpatialSplitUtils::ComputeTemporaryLayerMirInfo(ZinIrControlFlowGraph *,std::set<ZinANELayer *> &)::$_0,std::allocator<ZinMirSpatialSplitUtils::ComputeTemporaryLayerMirInfo(ZinIrControlFlowGraph *,std::set<ZinANELayer *> &)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t a2, ZinIrOpLayer **a3)
{
  ZinIrOpLayer *v4;
  uint64_t result;
  ZinIrOpLayer *v6;

  v4 = *a3;
  result = ZinIrOpLayer::IsANELayer(*a3);
  if ((_DWORD)result)
  {
    v6 = v4;
    if (*((_QWORD *)v4 + 33))
    {
      return 0;
    }
    else
    {
      std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>(*(uint64_t ***)(a1 + 8), (unint64_t *)&v6, (uint64_t *)&v6);
      result = ZinMirSetActiveNE(v4, *(CFArrayRef **)(a1 + 16));
      if ((_DWORD)result)
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          std::__function::__func<ZinMirSpatialSplitUtils::ComputeTemporaryLayerMirInfo(ZinIrControlFlowGraph *,std::set<ZinANELayer *> &)::$_0,std::allocator<ZinMirSpatialSplitUtils::ComputeTemporaryLayerMirInfo(ZinIrControlFlowGraph *,std::set<ZinANELayer *> &)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()();
        return 3;
      }
    }
  }
  return result;
}

uint64_t std::__function::__func<ZinMirSpatialSplitUtils::ComputeTemporaryLayerMirInfo(ZinIrControlFlowGraph *,std::set<ZinANELayer *> &)::$_0,std::allocator<ZinMirSpatialSplitUtils::ComputeTemporaryLayerMirInfo(ZinIrControlFlowGraph *,std::set<ZinANELayer *> &)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirSpatialSplitUtils::ComputeTemporaryLayerMirInfo(ZinIrControlFlowGraph *,std::set<ZinANELayer *> &)::$_0,std::allocator<ZinMirSpatialSplitUtils::ComputeTemporaryLayerMirInfo(ZinIrControlFlowGraph *,std::set<ZinANELayer *> &)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

void std::vector<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 21;
        std::__destroy_at[abi:ne180100]<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>,0>(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::__destroy_at[abi:ne180100]<std::pair<std::list<ZinIrOpLayer *>,SplitInfo>,0>(_QWORD *a1)
{
  void **v2;
  void **v4;

  v2 = (void **)(a1 + 3);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)(a1 + 11));
  std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::~__hash_table((uint64_t)(a1 + 6));
  v4 = v2;
  std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return std::__list_imp<ZinIrSection *>::clear(a1);
}

void ZinMirSpatialSplitUtils::OptimizeOutputTensorTileRegionsWithAlignment(char **a1, unint64_t a2, int a3, unint64_t a4, int64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void *__p;
  _QWORD *v36;
  unint64_t v37;

  v37 = 0;
  ZinTensorFormatGetSize(a3, &v37);
  if (v37 > a2)
    v9 = 1;
  else
    v9 = a2 / v37;
  v10 = a4 / v9;
  v34 = (uint64_t)(a4 / v9) / a5;
  std::vector<unsigned long>::vector(&__p, a5, &v34);
  v11 = (uint64_t)(a4 / v9) % a5;
  v12 = __p;
  v13 = v36;
  if (v11)
  {
    v14 = ((char *)v36 - (_BYTE *)__p) >> 3;
    v15 = __p;
    do
    {
      if (!v14)
        std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
      ++*v15++;
      --v14;
      --v11;
    }
    while (v11);
  }
  if (v12 == v13)
  {
    v18 = a1[1];
  }
  else
  {
    v32 = a4 / v9;
    v33 = a4;
    v16 = 0;
    v17 = a1 + 2;
    v18 = a1[1];
    do
    {
      v19 = *v12;
      v20 = *v12 * v9;
      if ((unint64_t)v18 >= *v17)
      {
        v21 = (v18 - *a1) >> 4;
        if ((unint64_t)(v21 + 1) >> 60)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v22 = *v17 - (_QWORD)*a1;
        v23 = v22 >> 3;
        if (v22 >> 3 <= (unint64_t)(v21 + 1))
          v23 = v21 + 1;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
          v24 = 0xFFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>((uint64_t)(a1 + 2), v24);
        v27 = &v25[16 * v21];
        *(_QWORD *)v27 = v16;
        *((_QWORD *)v27 + 1) = v20;
        v29 = *a1;
        v28 = a1[1];
        v30 = v27;
        if (v28 != *a1)
        {
          do
          {
            *((_OWORD *)v30 - 1) = *((_OWORD *)v28 - 1);
            v30 -= 16;
            v28 -= 16;
          }
          while (v28 != v29);
          v28 = *a1;
        }
        v18 = v27 + 16;
        *a1 = v30;
        a1[1] = v27 + 16;
        a1[2] = &v25[16 * v26];
        if (v28)
          operator delete(v28);
      }
      else
      {
        *(_QWORD *)v18 = v16;
        *((_QWORD *)v18 + 1) = v20;
        v18 += 16;
      }
      a1[1] = v18;
      v16 += v20;
      ++v12;
      if (v19)
        v31 = v12 == v13;
      else
        v31 = 1;
    }
    while (!v31);
    v12 = __p;
    v10 = v32;
    a4 = v33;
  }
  *((_QWORD *)v18 - 1) += a4 - v10 * v9;
  if (v12)
  {
    v36 = v12;
    operator delete(v12);
  }
}

void sub_206D97834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

ZinIrOpLayer **std::__introsort<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_0 &,ZinIrOpLayer **,false>(ZinIrOpLayer **result, ZinIrOpLayer **a2, uint64_t a3, char a4)
{
  ZinIrOpLayer **v6;
  ZinIrOpLayer **v7;
  ZinIrOpLayer **v8;
  ZinIrOpLayer **i;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  ZinIrOpLayer **v13;
  ZinIrOpLayer *v14;
  ZinIrOpLayer *v15;
  ZinIrOpLayer *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  ZinIrOpLayer *v20;
  ZinIrOpLayer *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  ZinIrOpLayer **v25;
  unint64_t v26;
  ZinIrOpLayer **k;
  ZinIrOpLayer *v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  ZinIrOpLayer *v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  int v37;
  ZinIrOpLayer **v38;
  ZinIrOpLayer **v39;
  ZinIrOpLayer *v40;
  ZinIrOpLayer *v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  ZinIrOpLayer *v45;
  ZinIrOpLayer *v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  BOOL v51;
  ZinIrOpLayer *v52;
  ZinIrOpLayer *v53;
  uint64_t v54;
  uint64_t v55;
  ZinIrOpLayer *v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  ZinIrOpLayer *v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  ZinIrOpLayer **j;
  ZinIrOpLayer *v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  ZinIrOpLayer *v69;
  ZinIrOpLayer *v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  ZinIrOpLayer *v74;
  ZinIrOpLayer *v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  ZinIrOpLayer **v79;
  ZinIrOpLayer *v80;
  ZinIrOpLayer *v81;
  BOOL v82;
  BOOL v83;
  ZinIrOpLayer **v84;
  BOOL v86;
  uint64_t v87;
  ZinIrOpLayer **v88;
  ZinIrOpLayer **v89;
  ZinIrOpLayer *v90;
  ZinIrOpLayer *v91;
  BOOL v92;
  BOOL v93;
  BOOL v94;
  uint64_t v95;
  uint64_t v96;
  ZinIrOpLayer *v97;
  ZinIrOpLayer **v98;
  uint64_t v99;
  ZinIrOpLayer *v100;
  int64_t v102;
  int64_t v103;
  int64_t v104;
  uint64_t v105;
  ZinIrOpLayer **v106;
  uint64_t v107;
  ZinIrOpLayer *v108;
  ZinIrOpLayer *v109;
  BOOL v110;
  BOOL v111;
  ZinIrOpLayer *v112;
  ZinIrOpLayer *v113;
  BOOL v114;
  BOOL v115;
  BOOL v116;
  uint64_t v117;
  uint64_t v118;
  BOOL v119;
  ZinIrOpLayer *v120;
  ZinIrOpLayer **v121;
  uint64_t v122;
  uint64_t v123;
  ZinIrOpLayer *v124;
  ZinIrOpLayer *v125;
  BOOL v126;
  BOOL v127;
  ZinIrOpLayer *v128;
  BOOL v129;
  uint64_t v130;
  uint64_t v131;
  BOOL v132;
  uint64_t v133;
  uint64_t v134;
  BOOL v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  ZinIrOpLayer **v140;
  ZinIrOpLayer **v141;
  uint64_t v142;
  uint64_t v143;
  ZinIrOpLayer *v144;
  ZinIrOpLayer *v145;
  BOOL v146;
  BOOL v147;
  BOOL v148;
  uint64_t v149;
  uint64_t v150;
  ZinIrOpLayer **v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  ZinIrOpLayer **v155;
  ZinIrOpLayer *v156;
  ZinIrOpLayer *v157;
  BOOL v158;
  BOOL v159;
  BOOL v160;
  uint64_t v161;
  uint64_t v162;
  ZinIrOpLayer *v163;
  ZinIrOpLayer **v164;
  unint64_t v165;
  ZinIrOpLayer *v166;
  BOOL v167;
  uint64_t v168;
  uint64_t v169;
  BOOL v170;
  uint64_t v171;
  uint64_t v172;
  ZinIrOpLayer **v173;
  ZinIrOpLayer *v174;
  ZinIrOpLayer *v175;
  BOOL v176;
  BOOL v177;
  ZinIrOpLayer **v178;
  BOOL v179;
  uint64_t v180;
  uint64_t v181;
  ZinIrOpLayer *v182;
  ZinIrOpLayer **v183;
  ZinIrOpLayer *v184;
  ZinIrOpLayer *v185;
  BOOL v186;
  uint64_t v187;
  uint64_t v188;
  ZinIrOpLayer *v189;
  int64_t v190;
  ZinIrOpLayer **v191;
  ZinIrOpLayer *v192;

  v6 = result;
LABEL_2:
  v7 = a2;
  v8 = a2 - 1;
  i = v6;
  while (2)
  {
    v6 = i;
    v10 = (char *)v7 - (char *)i;
    v11 = v10 >> 3;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v80 = *(a2 - 1);
        v81 = *v6;
        if (v80)
          v82 = v81 == 0;
        else
          v82 = 1;
        if (v82)
        {
          if (v80)
            v83 = v81 == 0;
          else
            v83 = 0;
          if (!v83)
            return result;
        }
        else
        {
          v170 = v80 != v81 && *((_QWORD *)v80 + 6) == *((_QWORD *)v81 + 6);
          if (v170
            && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(*(a2 - 1)), (_DWORD)result)
            && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v81), (_DWORD)result))
          {
            v171 = *((_QWORD *)v80 + 45);
            v172 = *((_QWORD *)v81 + 45);
          }
          else
          {
            v171 = *((_QWORD *)v80 + 6);
            v172 = *((_QWORD *)v81 + 6);
          }
          if (v171 >= v172)
            return result;
        }
        v189 = *v6;
        *v6 = *(a2 - 1);
        *(a2 - 1) = v189;
        return result;
      case 3:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_0 &,ZinIrOpLayer **>(v6, v6 + 1, v8);
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_0 &,ZinIrOpLayer **>(v6, v6 + 1, v6 + 2, v8);
      case 5:
        return std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_0 &,ZinIrOpLayer **,0>(v6, v6 + 1, v6 + 2, v6 + 3, v8);
      default:
        if (v10 <= 191)
        {
          v84 = v6 + 1;
          v86 = v6 == v7 || v84 == v7;
          if ((a4 & 1) != 0)
          {
            if (v86)
              return result;
            v87 = 0;
            v88 = v6;
            while (1)
            {
              v89 = v88;
              v88 = v84;
              v90 = *v89;
              v91 = v89[1];
              if (v91)
                v92 = v90 == 0;
              else
                v92 = 1;
              if (v92)
              {
                if (v91)
                  v93 = v90 == 0;
                else
                  v93 = 0;
                if (!v93)
                  goto LABEL_287;
              }
              else
              {
                v94 = v91 != v90 && *((_QWORD *)v91 + 6) == *((_QWORD *)v90 + 6);
                if (v94
                  && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v89[1]), (_DWORD)result)
                  && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v90), (_DWORD)result))
                {
                  v95 = *((_QWORD *)v91 + 45);
                  v96 = *((_QWORD *)v90 + 45);
                }
                else
                {
                  v95 = *((_QWORD *)v91 + 6);
                  v96 = *((_QWORD *)v90 + 6);
                }
                if (v95 >= v96)
                  goto LABEL_287;
              }
              v97 = v89[1];
              v89[1] = *v89;
              v98 = v6;
              if (v89 == v6)
                goto LABEL_286;
              v99 = v87;
              while (1)
              {
                v100 = *(ZinIrOpLayer **)((char *)v6 + v99 - 8);
                if (!v97 || !v100)
                {
                  if (!v97 || v100)
                  {
LABEL_284:
                    v98 = v89;
                    goto LABEL_286;
                  }
                  goto LABEL_282;
                }
                if (v97 != v100 && *((_QWORD *)v97 + 6) == *((_QWORD *)v100 + 6))
                {
                  result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v97);
                  if ((_DWORD)result)
                  {
                    result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v100);
                    if ((_DWORD)result)
                    {
                      if (*((_QWORD *)v97 + 45) >= *((_QWORD *)v100 + 45))
                        goto LABEL_284;
                      goto LABEL_282;
                    }
                  }
                }
                if (*((_QWORD *)v97 + 6) >= *((_QWORD *)v100 + 6))
                  break;
LABEL_282:
                --v89;
                *(ZinIrOpLayer **)((char *)v6 + v99) = *(ZinIrOpLayer **)((char *)v6 + v99 - 8);
                v99 -= 8;
                if (!v99)
                {
                  v98 = v6;
                  goto LABEL_286;
                }
              }
              v98 = (ZinIrOpLayer **)((char *)v6 + v99);
LABEL_286:
              *v98 = v97;
LABEL_287:
              v84 = v88 + 1;
              v87 += 8;
              if (v88 + 1 == a2)
                return result;
            }
          }
          if (v86)
            return result;
          while (1)
          {
            v173 = v6;
            v6 = v84;
            v174 = *v173;
            v175 = v173[1];
            if (v175)
              v176 = v174 == 0;
            else
              v176 = 1;
            if (v176)
            {
              if (v175)
                v177 = v174 == 0;
              else
                v177 = 0;
              v178 = a2;
              if (!v177)
                goto LABEL_498;
            }
            else
            {
              v179 = v175 != v174 && *((_QWORD *)v175 + 6) == *((_QWORD *)v174 + 6);
              v178 = a2;
              if (v179
                && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v173[1]), (_DWORD)result)
                && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v174), (_DWORD)result))
              {
                v180 = *((_QWORD *)v175 + 45);
                v181 = *((_QWORD *)v174 + 45);
              }
              else
              {
                v180 = *((_QWORD *)v175 + 6);
                v181 = *((_QWORD *)v174 + 6);
              }
              if (v180 >= v181)
                goto LABEL_498;
            }
            v182 = *v6;
            do
            {
              while (1)
              {
                v183 = v173;
                v173[1] = *v173;
                v185 = *--v173;
                v184 = v185;
                if (v182)
                {
                  if (v184)
                    break;
                }
                if (!v182 || v184)
                  goto LABEL_497;
              }
              v186 = v182 != v184 && *((_QWORD *)v182 + 6) == *((_QWORD *)v184 + 6);
              if (v186
                && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v182), (_DWORD)result)
                && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v184), (_DWORD)result))
              {
                v187 = *((_QWORD *)v182 + 45);
                v188 = *((_QWORD *)v184 + 45);
              }
              else
              {
                v187 = *((_QWORD *)v182 + 6);
                v188 = *((_QWORD *)v184 + 6);
              }
            }
            while (v187 < v188);
LABEL_497:
            *v183 = v182;
            v178 = a2;
LABEL_498:
            v84 = v6 + 1;
            if (v6 + 1 == v178)
              return result;
          }
        }
        if (!a3)
        {
          if (v6 == v7)
            return result;
          v102 = (unint64_t)(v11 - 2) >> 1;
          v103 = v102;
          while (1)
          {
            v104 = v103;
            if (v102 < v103)
              goto LABEL_379;
            v105 = (2 * v103) | 1;
            v106 = &v6[v105];
            v107 = 2 * v103 + 2;
            v190 = v103;
            if (v107 >= v11)
              goto LABEL_304;
            v108 = *v106;
            v109 = v106[1];
            if (*v106)
              v110 = v109 == 0;
            else
              v110 = 1;
            if (v110)
            {
              if (v108)
                v111 = v109 == 0;
              else
                v111 = 0;
              if (!v111)
                goto LABEL_304;
            }
            else
            {
              v135 = v108 != v109 && *((_QWORD *)v108 + 6) == *((_QWORD *)v109 + 6);
              if (v135
                && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(*v106),
                    v102 = (unint64_t)(v11 - 2) >> 1,
                    (_DWORD)result)
                && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v109),
                    v102 = (unint64_t)(v11 - 2) >> 1,
                    (_DWORD)result))
              {
                v136 = *((_QWORD *)v108 + 45);
                v137 = *((_QWORD *)v109 + 45);
              }
              else
              {
                v136 = *((_QWORD *)v108 + 6);
                v137 = *((_QWORD *)v109 + 6);
              }
              v119 = v136 < v137;
              v104 = v190;
              if (!v119)
                goto LABEL_304;
            }
            ++v106;
            v105 = v107;
LABEL_304:
            v112 = *v106;
            v113 = v6[v104];
            if (*v106)
              v114 = v113 == 0;
            else
              v114 = 1;
            if (v114)
            {
              if (v112)
                v115 = v113 == 0;
              else
                v115 = 0;
              v104 = v190;
              if (v115)
                goto LABEL_379;
            }
            else
            {
              v116 = v112 != v113 && *((_QWORD *)v112 + 6) == *((_QWORD *)v113 + 6);
              if (v116
                && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(*v106),
                    v102 = (unint64_t)(v11 - 2) >> 1,
                    (_DWORD)result)
                && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v113),
                    v102 = (unint64_t)(v11 - 2) >> 1,
                    (_DWORD)result))
              {
                v117 = *((_QWORD *)v112 + 45);
                v118 = *((_QWORD *)v113 + 45);
              }
              else
              {
                v117 = *((_QWORD *)v112 + 6);
                v118 = *((_QWORD *)v113 + 6);
              }
              v119 = v117 < v118;
              v104 = v190;
              if (v119)
                goto LABEL_379;
            }
            v120 = v6[v104];
            v6[v104] = *v106;
            while (1)
            {
              if (v102 < v105)
                goto LABEL_378;
              v121 = v106;
              v122 = 2 * v105;
              v105 = (2 * v105) | 1;
              v106 = &v6[v105];
              v123 = v122 + 2;
              if (v122 + 2 < v11)
              {
                v191 = v121;
                v124 = *v106;
                v125 = v106[1];
                if (*v106)
                  v126 = v125 == 0;
                else
                  v126 = 1;
                if (v126)
                {
                  if (v124)
                    v127 = v125 == 0;
                  else
                    v127 = 0;
                  v121 = v191;
                  if (v127)
                  {
LABEL_338:
                    ++v106;
                    v105 = v123;
                  }
                }
                else
                {
                  v132 = v124 != v125 && *((_QWORD *)v124 + 6) == *((_QWORD *)v125 + 6);
                  if (v132
                    && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(*v106),
                        v102 = (unint64_t)(v11 - 2) >> 1,
                        (_DWORD)result)
                    && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v125),
                        v102 = (unint64_t)(v11 - 2) >> 1,
                        (_DWORD)result))
                  {
                    v133 = *((_QWORD *)v124 + 45);
                    v134 = *((_QWORD *)v125 + 45);
                  }
                  else
                  {
                    v133 = *((_QWORD *)v124 + 6);
                    v134 = *((_QWORD *)v125 + 6);
                  }
                  v121 = v191;
                  if (v133 < v134)
                    goto LABEL_338;
                }
              }
              v128 = *v106;
              if (v120)
              {
                if (v128)
                  break;
              }
              if (!v120 && v128)
                goto LABEL_377;
LABEL_354:
              *v121 = *v106;
            }
            v129 = v128 != v120 && *((_QWORD *)v128 + 6) == *((_QWORD *)v120 + 6);
            if (v129
              && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(*v106),
                  v102 = (unint64_t)(v11 - 2) >> 1,
                  (_DWORD)result)
              && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v120),
                  v102 = (unint64_t)(v11 - 2) >> 1,
                  (_DWORD)result))
            {
              v130 = *((_QWORD *)v128 + 45);
              v131 = *((_QWORD *)v120 + 45);
            }
            else
            {
              v130 = *((_QWORD *)v128 + 6);
              v131 = *((_QWORD *)v120 + 6);
            }
            if (v130 >= v131)
              goto LABEL_354;
LABEL_377:
            v106 = v121;
LABEL_378:
            *v106 = v120;
            v104 = v190;
LABEL_379:
            v103 = v104 - 1;
            if (!v104)
            {
              v138 = (unint64_t)v10 >> 3;
              while (1)
              {
                v139 = 0;
                v192 = *v6;
                v140 = v6;
                do
                {
                  v141 = v140;
                  v140 += v139 + 1;
                  v142 = 2 * v139;
                  v139 = (2 * v139) | 1;
                  v143 = v142 + 2;
                  if (v142 + 2 >= v138)
                    goto LABEL_394;
                  v144 = *v140;
                  v145 = v140[1];
                  if (*v140)
                    v146 = v145 == 0;
                  else
                    v146 = 1;
                  if (v146)
                  {
                    if (v144)
                      v147 = v145 == 0;
                    else
                      v147 = 0;
                    if (v147)
                    {
LABEL_393:
                      ++v140;
                      v139 = v143;
                    }
                  }
                  else
                  {
                    v148 = v144 != v145 && *((_QWORD *)v144 + 6) == *((_QWORD *)v145 + 6);
                    if (v148
                      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(*v140), (_DWORD)result)
                      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v145), (_DWORD)result))
                    {
                      v149 = *((_QWORD *)v144 + 45);
                      v150 = *((_QWORD *)v145 + 45);
                    }
                    else
                    {
                      v149 = *((_QWORD *)v144 + 6);
                      v150 = *((_QWORD *)v145 + 6);
                    }
                    if (v149 < v150)
                      goto LABEL_393;
                  }
LABEL_394:
                  *v141 = *v140;
                }
                while (v139 <= (uint64_t)((unint64_t)(v138 - 2) >> 1));
                v151 = a2 - 1;
                v22 = v140 == --a2;
                if (v22)
                {
                  *v140 = v192;
                }
                else
                {
                  *v140 = *v151;
                  *v151 = v192;
                  v152 = (char *)v140 - (char *)v6 + 8;
                  if (v152 >= 9)
                  {
                    v153 = ((unint64_t)v152 >> 3) - 2;
                    v154 = v153 >> 1;
                    v155 = &v6[v153 >> 1];
                    v156 = *v155;
                    v157 = *v140;
                    if (*v155)
                      v158 = v157 == 0;
                    else
                      v158 = 1;
                    if (v158)
                    {
                      if (v156)
                        v159 = v157 == 0;
                      else
                        v159 = 0;
                      if (v159)
                      {
LABEL_430:
                        v163 = *v140;
                        *v140 = *v155;
                        if (v153 >= 2)
                        {
                          while (1)
                          {
                            v165 = v154 - 1;
                            v154 = (v154 - 1) >> 1;
                            v164 = &v6[v154];
                            v166 = *v164;
                            if (v163 && v166)
                            {
                              v167 = v166 != v163 && *((_QWORD *)v166 + 6) == *((_QWORD *)v163 + 6);
                              if (v167
                                && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(*v164), (_DWORD)result)
                                && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v163), (_DWORD)result))
                              {
                                v168 = *((_QWORD *)v166 + 45);
                                v169 = *((_QWORD *)v163 + 45);
                              }
                              else
                              {
                                v168 = *((_QWORD *)v166 + 6);
                                v169 = *((_QWORD *)v163 + 6);
                              }
                              if (v168 >= v169)
                                break;
                            }
                            else if (v163 || !v166)
                            {
                              break;
                            }
                            *v155 = *v164;
                            v155 = &v6[v154];
                            if (v165 <= 1)
                              goto LABEL_448;
                          }
                        }
                        v164 = v155;
LABEL_448:
                        *v164 = v163;
                      }
                    }
                    else
                    {
                      v160 = v156 != v157 && *((_QWORD *)v156 + 6) == *((_QWORD *)v157 + 6);
                      if (v160
                        && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(*v155), (_DWORD)result)
                        && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v157), (_DWORD)result))
                      {
                        v161 = *((_QWORD *)v156 + 45);
                        v162 = *((_QWORD *)v157 + 45);
                      }
                      else
                      {
                        v161 = *((_QWORD *)v156 + 6);
                        v162 = *((_QWORD *)v157 + 6);
                      }
                      if (v161 < v162)
                        goto LABEL_430;
                    }
                  }
                }
                v119 = v138-- <= 2;
                if (v119)
                  return result;
              }
            }
          }
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &v6[(unint64_t)v11 >> 1];
        if ((unint64_t)v10 < 0x401)
        {
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_0 &,ZinIrOpLayer **>(v13, v6, v8);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_0 &,ZinIrOpLayer **>(v6, v13, v8);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_0 &,ZinIrOpLayer **>(v6 + 1, v13 - 1, a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_0 &,ZinIrOpLayer **>(v6 + 2, &v6[v12 + 1], a2 - 3);
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_0 &,ZinIrOpLayer **>(v13 - 1, v13, &v6[v12 + 1]);
          v14 = *v6;
          *v6 = *v13;
          *v13 = v14;
        }
        --a3;
        if ((a4 & 1) != 0)
          goto LABEL_19;
        v16 = *(v6 - 1);
        v15 = *v6;
        if (!v16 || !v15)
        {
          if (v16 && !v15)
            goto LABEL_19;
LABEL_124:
          v52 = *v6;
          v53 = *v8;
          if (*v6 && v53)
          {
            if (v52 != v53
              && *((_QWORD *)v52 + 6) == *((_QWORD *)v53 + 6)
              && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(*v6), (_DWORD)result)
              && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v53), (_DWORD)result))
            {
              v54 = *((_QWORD *)v52 + 45);
              v55 = *((_QWORD *)v53 + 45);
            }
            else
            {
              v54 = *((_QWORD *)v52 + 6);
              v55 = *((_QWORD *)v53 + 6);
            }
            if (v54 < v55)
            {
LABEL_133:
              for (i = v6 + 1; ; ++i)
              {
                v56 = *i;
                if (v52 && v56)
                {
                  v57 = v52 != v56 && *((_QWORD *)v52 + 6) == *((_QWORD *)v56 + 6);
                  if (v57
                    && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v52), (_DWORD)result)
                    && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v56), (_DWORD)result))
                  {
                    v58 = *((_QWORD *)v52 + 45);
                    v59 = *((_QWORD *)v56 + 45);
                  }
                  else
                  {
                    v58 = *((_QWORD *)v52 + 6);
                    v59 = *((_QWORD *)v56 + 6);
                  }
                  if (v58 < v59)
                    goto LABEL_169;
                }
                else if (!v56)
                {
                  goto LABEL_169;
                }
              }
            }
          }
          else if (v52 && !v53)
          {
            goto LABEL_133;
          }
          for (i = v6 + 1; i < v7; ++i)
          {
            v60 = *i;
            if (v52 && v60)
            {
              v61 = v52 != v60 && *((_QWORD *)v52 + 6) == *((_QWORD *)v60 + 6);
              if (v61
                && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v52), (_DWORD)result)
                && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v60), (_DWORD)result))
              {
                v62 = *((_QWORD *)v52 + 45);
                v63 = *((_QWORD *)v60 + 45);
              }
              else
              {
                v62 = *((_QWORD *)v52 + 6);
                v63 = *((_QWORD *)v60 + 6);
              }
              if (v62 < v63)
                break;
            }
            else if (v52 && !v60)
            {
              break;
            }
          }
LABEL_169:
          j = v7;
          if (i >= v7)
            goto LABEL_216;
          for (j = a2 - 1; ; --j)
          {
            v65 = *j;
            if (v52)
            {
              if (v65)
                break;
            }
            if (!v52 || v65)
              goto LABEL_216;
LABEL_186:
            ;
          }
          v66 = v52 != v65 && *((_QWORD *)v52 + 6) == *((_QWORD *)v65 + 6);
          if (v66
            && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v52), (_DWORD)result)
            && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v65), (_DWORD)result))
          {
            v67 = *((_QWORD *)v52 + 45);
            v68 = *((_QWORD *)v65 + 45);
          }
          else
          {
            v67 = *((_QWORD *)v52 + 6);
            v68 = *((_QWORD *)v65 + 6);
          }
          if (v67 < v68)
            goto LABEL_186;
LABEL_216:
          if (i < j)
          {
            v69 = *i;
            *i++ = *j;
            *j = v69;
            while (1)
            {
              v70 = *i;
              if (v52 && v70)
              {
                v71 = v52 != v70 && *((_QWORD *)v52 + 6) == *((_QWORD *)v70 + 6);
                if (v71
                  && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v52), (_DWORD)result)
                  && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v70), (_DWORD)result))
                {
                  v72 = *((_QWORD *)v52 + 45);
                  v73 = *((_QWORD *)v70 + 45);
                }
                else
                {
                  v72 = *((_QWORD *)v52 + 6);
                  v73 = *((_QWORD *)v70 + 6);
                }
                if (v72 < v73)
                {
                  do
                  {
                    do
                    {
LABEL_204:
                      v75 = *--j;
                      v74 = v75;
                    }
                    while (!v75);
                    v76 = v52 != v74 && *((_QWORD *)v52 + 6) == *((_QWORD *)v74 + 6);
                    if (v76
                      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v52), (_DWORD)result)
                      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v74), (_DWORD)result))
                    {
                      v77 = *((_QWORD *)v52 + 45);
                      v78 = *((_QWORD *)v74 + 45);
                    }
                    else
                    {
                      v77 = *((_QWORD *)v52 + 6);
                      v78 = *((_QWORD *)v74 + 6);
                    }
                  }
                  while (v77 < v78);
                  goto LABEL_216;
                }
              }
              else if (v52 && !v70)
              {
                goto LABEL_204;
              }
              ++i;
            }
          }
          v79 = i - 1;
          if (i - 1 != v6)
            *v6 = *v79;
          a4 = 0;
          *v79 = v52;
          continue;
        }
        if (v16 != v15
          && *((_QWORD *)v16 + 6) == *((_QWORD *)v15 + 6)
          && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(*(v6 - 1)), (_DWORD)result)
          && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v15), (_DWORD)result))
        {
          v17 = *((_QWORD *)v16 + 45);
          v18 = *((_QWORD *)v15 + 45);
        }
        else
        {
          v17 = *((_QWORD *)v16 + 6);
          v18 = *((_QWORD *)v15 + 6);
        }
        if (v17 >= v18)
          goto LABEL_124;
LABEL_19:
        v19 = 0;
        v20 = *v6;
        while (2)
        {
          v21 = v6[v19 + 1];
          if (!v20 || !v21)
          {
            if (v20 || !v21)
              break;
            goto LABEL_35;
          }
          v22 = v21 != v20 && *((_QWORD *)v21 + 6) == *((_QWORD *)v20 + 6);
          if (v22 && ZinIrOpLayer::IsANELayer(v6[v19 + 1]) && ZinIrOpLayer::IsANELayer(v20))
          {
            v23 = *((_QWORD *)v21 + 45);
            v24 = *((_QWORD *)v20 + 45);
          }
          else
          {
            v23 = *((_QWORD *)v21 + 6);
            v24 = *((_QWORD *)v20 + 6);
          }
          if (v23 < v24)
          {
LABEL_35:
            ++v19;
            continue;
          }
          break;
        }
        v25 = &v6[v19];
        v26 = (unint64_t)&v6[v19 + 1];
        k = a2 - 1;
        if (v19 * 8)
        {
          while (1)
          {
            v28 = *k;
            if (v20 && v28)
            {
              v29 = v28 != v20 && *((_QWORD *)v28 + 6) == *((_QWORD *)v20 + 6);
              if (v29 && ZinIrOpLayer::IsANELayer(*k) && ZinIrOpLayer::IsANELayer(v20))
              {
                v30 = *((_QWORD *)v28 + 45);
                v31 = *((_QWORD *)v20 + 45);
              }
              else
              {
                v30 = *((_QWORD *)v28 + 6);
                v31 = *((_QWORD *)v20 + 6);
              }
              if (v30 < v31)
                goto LABEL_79;
            }
            else if (!v20 && v28)
            {
              goto LABEL_79;
            }
            --k;
          }
        }
        k = a2;
        if (v26 < (unint64_t)a2)
        {
          for (k = a2 - 1; ; --k)
          {
            v32 = *k;
            if (v20 && v32)
            {
              v33 = v32 != v20 && *((_QWORD *)v32 + 6) == *((_QWORD *)v20 + 6);
              if (v33 && ZinIrOpLayer::IsANELayer(*k) && ZinIrOpLayer::IsANELayer(v20))
              {
                if (v26 >= (unint64_t)k)
                  break;
                v34 = *((_QWORD *)v32 + 45);
                v35 = *((_QWORD *)v20 + 45);
              }
              else
              {
                if (v26 >= (unint64_t)k)
                  break;
                v34 = *((_QWORD *)v32 + 6);
                v35 = *((_QWORD *)v20 + 6);
              }
              if (v34 < v35)
                break;
            }
            else
            {
              if (v20)
                v36 = 1;
              else
                v36 = v32 == 0;
              v37 = v36;
              if (v26 >= (unint64_t)k || !v37)
                break;
            }
          }
        }
LABEL_79:
        if (v26 >= (unint64_t)k)
          goto LABEL_115;
        v38 = &v6[v19 + 1];
        v39 = k;
        while (2)
        {
          v40 = *v38;
          *v38++ = *v39;
          *v39 = v40;
          while (2)
          {
            v41 = *v38;
            if (!v20 || !v41)
            {
              if (v20 || !v41)
                goto LABEL_98;
              goto LABEL_97;
            }
            v42 = v41 != v20 && *((_QWORD *)v41 + 6) == *((_QWORD *)v20 + 6);
            if (v42 && ZinIrOpLayer::IsANELayer(*v38) && ZinIrOpLayer::IsANELayer(v20))
            {
              v43 = *((_QWORD *)v41 + 45);
              v44 = *((_QWORD *)v20 + 45);
            }
            else
            {
              v43 = *((_QWORD *)v41 + 6);
              v44 = *((_QWORD *)v20 + 6);
            }
            if (v43 < v44)
            {
LABEL_97:
              ++v38;
              continue;
            }
            break;
          }
          do
          {
LABEL_98:
            while (1)
            {
              v46 = *--v39;
              v45 = v46;
              if (v20)
              {
                if (v45)
                  break;
              }
              if (!v20 && v45)
                goto LABEL_113;
            }
            v47 = v45 != v20 && *((_QWORD *)v45 + 6) == *((_QWORD *)v20 + 6);
            if (v47 && ZinIrOpLayer::IsANELayer(v45) && ZinIrOpLayer::IsANELayer(v20))
            {
              v48 = *((_QWORD *)v45 + 45);
              v49 = *((_QWORD *)v20 + 45);
            }
            else
            {
              v48 = *((_QWORD *)v45 + 6);
              v49 = *((_QWORD *)v20 + 6);
            }
          }
          while (v48 >= v49);
LABEL_113:
          if (v38 < v39)
            continue;
          break;
        }
        v25 = v38 - 1;
LABEL_115:
        if (v25 != v6)
          *v6 = *v25;
        *v25 = v20;
        v50 = v26 >= (unint64_t)k;
        v7 = a2;
        if (!v50)
        {
LABEL_121:
          result = (ZinIrOpLayer **)std::__introsort<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_0 &,ZinIrOpLayer **,false>(v6, v25, a3, a4 & 1);
          a4 = 0;
          i = v25 + 1;
          continue;
        }
        v51 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_0 &,ZinIrOpLayer **>(v6, v25);
        i = v25 + 1;
        result = (ZinIrOpLayer **)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_0 &,ZinIrOpLayer **>(v25 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v51)
            continue;
          goto LABEL_121;
        }
        a2 = v25;
        if (!v51)
          goto LABEL_2;
        return result;
    }
  }
}

ZinIrOpLayer **std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_0 &,ZinIrOpLayer **,0>(ZinIrOpLayer **a1, ZinIrOpLayer **a2, ZinIrOpLayer **a3, ZinIrOpLayer **a4, ZinIrOpLayer **a5)
{
  ZinIrOpLayer **result;
  ZinIrOpLayer *v11;
  ZinIrOpLayer *v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  ZinIrOpLayer *v18;
  ZinIrOpLayer *v19;
  ZinIrOpLayer *v20;
  uint64_t v21;
  uint64_t v22;
  ZinIrOpLayer *v23;
  ZinIrOpLayer *v24;
  ZinIrOpLayer *v25;
  uint64_t v26;
  uint64_t v27;
  ZinIrOpLayer *v28;
  ZinIrOpLayer *v29;
  ZinIrOpLayer *v30;
  uint64_t v31;
  uint64_t v32;
  ZinIrOpLayer *v33;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_0 &,ZinIrOpLayer **>(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *a4;
  if (*a5)
    v13 = v12 == 0;
  else
    v13 = 1;
  if (v13)
  {
    if (v11)
      v14 = v12 == 0;
    else
      v14 = 0;
    if (!v14)
      return result;
  }
  else
  {
    v15 = v11 != v12 && *((_QWORD *)v11 + 6) == *((_QWORD *)v12 + 6);
    if (v15
      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(*a5), (_DWORD)result)
      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v12), (_DWORD)result))
    {
      v16 = *((_QWORD *)v11 + 45);
      v17 = *((_QWORD *)v12 + 45);
    }
    else
    {
      v16 = *((_QWORD *)v11 + 6);
      v17 = *((_QWORD *)v12 + 6);
    }
    if (v16 >= v17)
      return result;
  }
  v18 = *a4;
  *a4 = *a5;
  *a5 = v18;
  v19 = *a4;
  v20 = *a3;
  if (*a4 && v20)
  {
    if (v19 != v20
      && *((_QWORD *)v19 + 6) == *((_QWORD *)v20 + 6)
      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(*a4), (_DWORD)result)
      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v20), (_DWORD)result))
    {
      v21 = *((_QWORD *)v19 + 45);
      v22 = *((_QWORD *)v20 + 45);
    }
    else
    {
      v21 = *((_QWORD *)v19 + 6);
      v22 = *((_QWORD *)v20 + 6);
    }
    if (v21 >= v22)
      return result;
  }
  else if (!v19 || v20)
  {
    return result;
  }
  v23 = *a3;
  *a3 = *a4;
  *a4 = v23;
  v24 = *a3;
  v25 = *a2;
  if (*a3 && v25)
  {
    if (v24 != v25
      && *((_QWORD *)v24 + 6) == *((_QWORD *)v25 + 6)
      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(*a3), (_DWORD)result)
      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v25), (_DWORD)result))
    {
      v26 = *((_QWORD *)v24 + 45);
      v27 = *((_QWORD *)v25 + 45);
    }
    else
    {
      v26 = *((_QWORD *)v24 + 6);
      v27 = *((_QWORD *)v25 + 6);
    }
    if (v26 >= v27)
      return result;
  }
  else if (!v24 || v25)
  {
    return result;
  }
  v28 = *a2;
  *a2 = *a3;
  *a3 = v28;
  v29 = *a2;
  v30 = *a1;
  if (*a2 && v30)
  {
    if (v29 != v30
      && *((_QWORD *)v29 + 6) == *((_QWORD *)v30 + 6)
      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(*a2), (_DWORD)result)
      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v30), (_DWORD)result))
    {
      v31 = *((_QWORD *)v29 + 45);
      v32 = *((_QWORD *)v30 + 45);
    }
    else
    {
      v31 = *((_QWORD *)v29 + 6);
      v32 = *((_QWORD *)v30 + 6);
    }
    if (v31 < v32)
      goto LABEL_57;
  }
  else if (v29 && !v30)
  {
LABEL_57:
    v33 = *a1;
    *a1 = *a2;
    *a2 = v33;
  }
  return result;
}

ZinIrOpLayer **std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_0 &,ZinIrOpLayer **>(ZinIrOpLayer **result, ZinIrOpLayer **a2, ZinIrOpLayer **a3)
{
  ZinIrOpLayer **v4;
  ZinIrOpLayer **v5;
  ZinIrOpLayer *v6;
  ZinIrOpLayer *v7;
  BOOL v8;
  BOOL v9;
  ZinIrOpLayer *v10;
  ZinIrOpLayer *v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  ZinIrOpLayer *v16;
  ZinIrOpLayer *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  ZinIrOpLayer *v23;
  ZinIrOpLayer *v24;
  uint64_t v25;
  uint64_t v26;
  ZinIrOpLayer *v27;
  ZinIrOpLayer *v28;
  ZinIrOpLayer *v29;
  ZinIrOpLayer *v30;

  v4 = a2;
  v5 = result;
  v6 = *a2;
  v7 = *result;
  if (*a2)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
  {
    if (v6)
      v9 = v7 == 0;
    else
      v9 = 0;
    if (v9)
    {
LABEL_28:
      v16 = *a3;
      v17 = *v4;
      if (*a3 && v17)
      {
        if (v16 != v17
          && *((_QWORD *)v16 + 6) == *((_QWORD *)v17 + 6)
          && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(*a3), (_DWORD)result)
          && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v17), (_DWORD)result))
        {
          v18 = *((_QWORD *)v16 + 45);
          v19 = *((_QWORD *)v17 + 45);
        }
        else
        {
          v18 = *((_QWORD *)v16 + 6);
          v19 = *((_QWORD *)v17 + 6);
        }
        if (v18 >= v19)
        {
LABEL_48:
          v23 = *v5;
          *v5 = *v4;
          *v4 = v23;
          v24 = *a3;
          if (v23 && v24)
          {
            if (v24 != v23
              && *((_QWORD *)v24 + 6) == *((_QWORD *)v23 + 6)
              && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(*a3), (_DWORD)result)
              && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v23), (_DWORD)result))
            {
              v25 = *((_QWORD *)v24 + 45);
              v26 = *((_QWORD *)v23 + 45);
            }
            else
            {
              v25 = *((_QWORD *)v24 + 6);
              v26 = *((_QWORD *)v23 + 6);
            }
            v5 = v4;
            v4 = a3;
LABEL_73:
            if (v25 >= v26)
              return result;
            goto LABEL_74;
          }
          if (v23)
            return result;
          v5 = v4;
          v4 = a3;
          if (!v24)
            return result;
LABEL_74:
          v30 = *v5;
          *v5 = *v4;
          *v4 = v30;
          return result;
        }
      }
      else if (!v16 || v17)
      {
        goto LABEL_48;
      }
      v4 = a3;
      goto LABEL_74;
    }
  }
  else
  {
    v13 = v6 != v7 && *((_QWORD *)v6 + 6) == *((_QWORD *)v7 + 6);
    if (v13
      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(*a2), (_DWORD)result)
      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v7), (_DWORD)result))
    {
      v14 = *((_QWORD *)v6 + 45);
      v15 = *((_QWORD *)v7 + 45);
    }
    else
    {
      v14 = *((_QWORD *)v6 + 6);
      v15 = *((_QWORD *)v7 + 6);
    }
    if (v14 < v15)
      goto LABEL_28;
  }
  v10 = *a3;
  v11 = *v4;
  if (*a3)
    v12 = v11 == 0;
  else
    v12 = 1;
  if (v12)
  {
    if (!v10 || v11)
      return result;
  }
  else
  {
    v20 = v10 != v11 && *((_QWORD *)v10 + 6) == *((_QWORD *)v11 + 6);
    if (v20
      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(*a3), (_DWORD)result)
      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v11), (_DWORD)result))
    {
      v21 = *((_QWORD *)v10 + 45);
      v22 = *((_QWORD *)v11 + 45);
    }
    else
    {
      v21 = *((_QWORD *)v10 + 6);
      v22 = *((_QWORD *)v11 + 6);
    }
    if (v21 >= v22)
      return result;
  }
  v27 = *v4;
  *v4 = *a3;
  *a3 = v27;
  v28 = *v4;
  v29 = *v5;
  if (*v4 && v29)
  {
    if (v28 != v29
      && *((_QWORD *)v28 + 6) == *((_QWORD *)v29 + 6)
      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(*v4), (_DWORD)result)
      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v29), (_DWORD)result))
    {
      v25 = *((_QWORD *)v28 + 45);
      v26 = *((_QWORD *)v29 + 45);
    }
    else
    {
      v25 = *((_QWORD *)v28 + 6);
      v26 = *((_QWORD *)v29 + 6);
    }
    goto LABEL_73;
  }
  if (v28 && !v29)
    goto LABEL_74;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_0 &,ZinIrOpLayer **>(ZinIrOpLayer **a1, ZinIrOpLayer **a2)
{
  uint64_t v4;
  _BOOL8 result;
  ZinIrOpLayer *v6;
  ZinIrOpLayer *v7;
  BOOL v8;
  ZinIrOpLayer **v9;
  ZinIrOpLayer **v10;
  uint64_t v11;
  int v12;
  ZinIrOpLayer *v13;
  ZinIrOpLayer *v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  ZinIrOpLayer *v20;
  ZinIrOpLayer **v21;
  uint64_t v22;
  ZinIrOpLayer *v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  ZinIrOpLayer *v30;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (v6)
        v8 = v7 == 0;
      else
        v8 = 1;
      if (v8)
      {
        if (v6 && !v7)
        {
LABEL_69:
          v30 = *a1;
          *a1 = *(a2 - 1);
          *(a2 - 1) = v30;
          return 1;
        }
      }
      else
      {
        v27 = v6 != v7 && *((_QWORD *)v6 + 6) == *((_QWORD *)v7 + 6);
        if (v27 && ZinIrOpLayer::IsANELayer(*(a2 - 1)) && ZinIrOpLayer::IsANELayer(v7))
        {
          v28 = *((_QWORD *)v6 + 45);
          v29 = *((_QWORD *)v7 + 45);
        }
        else
        {
          v28 = *((_QWORD *)v6 + 6);
          v29 = *((_QWORD *)v7 + 6);
        }
        if (v28 < v29)
          goto LABEL_69;
        return 1;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_0 &,ZinIrOpLayer **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_0 &,ZinIrOpLayer **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_0 &,ZinIrOpLayer **,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v9 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_0 &,ZinIrOpLayer **>(a1, a1 + 1, a1 + 2);
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      while (2)
      {
        v13 = *v10;
        v14 = *v9;
        if (*v10)
          v15 = v14 == 0;
        else
          v15 = 1;
        if (v15)
        {
          if (v13)
            v16 = v14 == 0;
          else
            v16 = 0;
          if (!v16)
            goto LABEL_55;
        }
        else
        {
          v17 = v13 != v14 && *((_QWORD *)v13 + 6) == *((_QWORD *)v14 + 6);
          if (v17 && ZinIrOpLayer::IsANELayer(*v10) && ZinIrOpLayer::IsANELayer(v14))
          {
            v18 = *((_QWORD *)v13 + 45);
            v19 = *((_QWORD *)v14 + 45);
          }
          else
          {
            v18 = *((_QWORD *)v13 + 6);
            v19 = *((_QWORD *)v14 + 6);
          }
          if (v18 >= v19)
            goto LABEL_55;
        }
        v20 = *v10;
        *v10 = *v9;
        v21 = a1;
        if (v9 == a1)
          goto LABEL_54;
        v22 = v11;
        while (2)
        {
          v23 = *(ZinIrOpLayer **)((char *)a1 + v22 + 8);
          if (!v20 || !v23)
          {
            if (!v20 || v23)
            {
              v21 = (ZinIrOpLayer **)((char *)a1 + v22 + 16);
              goto LABEL_54;
            }
            goto LABEL_50;
          }
          v24 = v20 != v23 && *((_QWORD *)v20 + 6) == *((_QWORD *)v23 + 6);
          if (v24 && ZinIrOpLayer::IsANELayer(v20) && ZinIrOpLayer::IsANELayer(v23))
          {
            v25 = *((_QWORD *)v20 + 45);
            v26 = *((_QWORD *)v23 + 45);
          }
          else
          {
            v25 = *((_QWORD *)v20 + 6);
            v26 = *((_QWORD *)v23 + 6);
          }
          if (v25 < v26)
          {
LABEL_50:
            --v9;
            *(ZinIrOpLayer **)((char *)a1 + v22 + 16) = *(ZinIrOpLayer **)((char *)a1 + v22 + 8);
            v22 -= 8;
            if (v22 == -16)
            {
              v21 = a1;
              goto LABEL_54;
            }
            continue;
          }
          break;
        }
        v21 = v9;
LABEL_54:
        *v21 = v20;
        if (++v12 != 8)
        {
LABEL_55:
          v9 = v10;
          v11 += 8;
          if (++v10 == a2)
            return 1;
          continue;
        }
        return v10 + 1 == a2;
      }
  }
}

ZinIrOpLayer **std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_0 &,ZinIrOpLayer **>(ZinIrOpLayer **a1, ZinIrOpLayer **a2, ZinIrOpLayer **a3, ZinIrOpLayer **a4)
{
  ZinIrOpLayer **result;
  ZinIrOpLayer *v9;
  ZinIrOpLayer *v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  ZinIrOpLayer *v16;
  ZinIrOpLayer *v17;
  ZinIrOpLayer *v18;
  uint64_t v19;
  uint64_t v20;
  ZinIrOpLayer *v21;
  ZinIrOpLayer *v22;
  ZinIrOpLayer *v23;
  uint64_t v24;
  uint64_t v25;
  ZinIrOpLayer *v26;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_0 &,ZinIrOpLayer **>(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  if (*a4)
    v11 = v10 == 0;
  else
    v11 = 1;
  if (v11)
  {
    if (v9)
      v12 = v10 == 0;
    else
      v12 = 0;
    if (!v12)
      return result;
  }
  else
  {
    v13 = v9 != v10 && *((_QWORD *)v9 + 6) == *((_QWORD *)v10 + 6);
    if (v13
      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(*a4), (_DWORD)result)
      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v10), (_DWORD)result))
    {
      v14 = *((_QWORD *)v9 + 45);
      v15 = *((_QWORD *)v10 + 45);
    }
    else
    {
      v14 = *((_QWORD *)v9 + 6);
      v15 = *((_QWORD *)v10 + 6);
    }
    if (v14 >= v15)
      return result;
  }
  v16 = *a3;
  *a3 = *a4;
  *a4 = v16;
  v17 = *a3;
  v18 = *a2;
  if (*a3 && v18)
  {
    if (v17 != v18
      && *((_QWORD *)v17 + 6) == *((_QWORD *)v18 + 6)
      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(*a3), (_DWORD)result)
      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v18), (_DWORD)result))
    {
      v19 = *((_QWORD *)v17 + 45);
      v20 = *((_QWORD *)v18 + 45);
    }
    else
    {
      v19 = *((_QWORD *)v17 + 6);
      v20 = *((_QWORD *)v18 + 6);
    }
    if (v19 >= v20)
      return result;
  }
  else if (!v17 || v18)
  {
    return result;
  }
  v21 = *a2;
  *a2 = *a3;
  *a3 = v21;
  v22 = *a2;
  v23 = *a1;
  if (*a2 && v23)
  {
    if (v22 != v23
      && *((_QWORD *)v22 + 6) == *((_QWORD *)v23 + 6)
      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(*a2), (_DWORD)result)
      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v23), (_DWORD)result))
    {
      v24 = *((_QWORD *)v22 + 45);
      v25 = *((_QWORD *)v23 + 45);
    }
    else
    {
      v24 = *((_QWORD *)v22 + 6);
      v25 = *((_QWORD *)v23 + 6);
    }
    if (v24 < v25)
      goto LABEL_45;
  }
  else if (v22 && !v23)
  {
LABEL_45:
    v26 = *a1;
    *a1 = *a2;
    *a2 = v26;
  }
  return result;
}

ZinIrOpLayer **std::__introsort<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_1 &,ZinIrOpLayer **,false>(ZinIrOpLayer **result, ZinIrOpLayer **a2, uint64_t a3, char a4)
{
  ZinIrOpLayer **v6;
  ZinIrOpLayer **v7;
  ZinIrOpLayer **v8;
  ZinIrOpLayer **i;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  ZinIrOpLayer **v13;
  ZinIrOpLayer *v14;
  ZinIrOpLayer *v15;
  ZinIrOpLayer *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  ZinIrOpLayer *v20;
  ZinIrOpLayer *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  ZinIrOpLayer **v25;
  unint64_t v26;
  ZinIrOpLayer **k;
  ZinIrOpLayer *v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  ZinIrOpLayer *v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  int v37;
  ZinIrOpLayer **v38;
  ZinIrOpLayer **v39;
  ZinIrOpLayer *v40;
  ZinIrOpLayer *v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  ZinIrOpLayer *v45;
  ZinIrOpLayer *v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  BOOL v51;
  ZinIrOpLayer *v52;
  ZinIrOpLayer *v53;
  uint64_t v54;
  uint64_t v55;
  ZinIrOpLayer *v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  ZinIrOpLayer *v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  ZinIrOpLayer **j;
  ZinIrOpLayer *v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  ZinIrOpLayer *v69;
  ZinIrOpLayer *v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  ZinIrOpLayer *v74;
  ZinIrOpLayer *v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  ZinIrOpLayer **v79;
  ZinIrOpLayer *v80;
  ZinIrOpLayer *v81;
  BOOL v82;
  BOOL v83;
  ZinIrOpLayer **v84;
  BOOL v86;
  uint64_t v87;
  ZinIrOpLayer **v88;
  ZinIrOpLayer **v89;
  ZinIrOpLayer *v90;
  ZinIrOpLayer *v91;
  BOOL v92;
  BOOL v93;
  BOOL v94;
  uint64_t v95;
  uint64_t v96;
  ZinIrOpLayer *v97;
  ZinIrOpLayer **v98;
  uint64_t v99;
  ZinIrOpLayer *v100;
  int64_t v102;
  int64_t v103;
  int64_t v104;
  uint64_t v105;
  ZinIrOpLayer **v106;
  uint64_t v107;
  ZinIrOpLayer *v108;
  ZinIrOpLayer *v109;
  BOOL v110;
  BOOL v111;
  ZinIrOpLayer *v112;
  ZinIrOpLayer *v113;
  BOOL v114;
  BOOL v115;
  BOOL v116;
  uint64_t v117;
  uint64_t v118;
  BOOL v119;
  ZinIrOpLayer *v120;
  ZinIrOpLayer **v121;
  uint64_t v122;
  uint64_t v123;
  ZinIrOpLayer *v124;
  ZinIrOpLayer *v125;
  BOOL v126;
  BOOL v127;
  ZinIrOpLayer *v128;
  BOOL v129;
  uint64_t v130;
  uint64_t v131;
  BOOL v132;
  uint64_t v133;
  uint64_t v134;
  BOOL v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  ZinIrOpLayer **v140;
  ZinIrOpLayer **v141;
  uint64_t v142;
  uint64_t v143;
  ZinIrOpLayer *v144;
  ZinIrOpLayer *v145;
  BOOL v146;
  BOOL v147;
  BOOL v148;
  uint64_t v149;
  uint64_t v150;
  ZinIrOpLayer **v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  ZinIrOpLayer **v155;
  ZinIrOpLayer *v156;
  ZinIrOpLayer *v157;
  BOOL v158;
  BOOL v159;
  BOOL v160;
  uint64_t v161;
  uint64_t v162;
  ZinIrOpLayer *v163;
  ZinIrOpLayer **v164;
  unint64_t v165;
  ZinIrOpLayer *v166;
  BOOL v167;
  uint64_t v168;
  uint64_t v169;
  BOOL v170;
  uint64_t v171;
  uint64_t v172;
  ZinIrOpLayer **v173;
  ZinIrOpLayer *v174;
  ZinIrOpLayer *v175;
  BOOL v176;
  BOOL v177;
  ZinIrOpLayer **v178;
  BOOL v179;
  uint64_t v180;
  uint64_t v181;
  ZinIrOpLayer *v182;
  ZinIrOpLayer **v183;
  ZinIrOpLayer *v184;
  ZinIrOpLayer *v185;
  BOOL v186;
  uint64_t v187;
  uint64_t v188;
  ZinIrOpLayer *v189;
  int64_t v190;
  ZinIrOpLayer **v191;
  ZinIrOpLayer *v192;

  v6 = result;
LABEL_2:
  v7 = a2;
  v8 = a2 - 1;
  i = v6;
  while (2)
  {
    v6 = i;
    v10 = (char *)v7 - (char *)i;
    v11 = v10 >> 3;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v80 = *(a2 - 1);
        v81 = *v6;
        if (v80)
          v82 = v81 == 0;
        else
          v82 = 1;
        if (v82)
        {
          if (v80)
            v83 = v81 == 0;
          else
            v83 = 0;
          if (!v83)
            return result;
        }
        else
        {
          v170 = v80 != v81 && *((_QWORD *)v80 + 6) == *((_QWORD *)v81 + 6);
          if (v170
            && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(*(a2 - 1)), (_DWORD)result)
            && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v81), (_DWORD)result))
          {
            v171 = *((_QWORD *)v80 + 45);
            v172 = *((_QWORD *)v81 + 45);
          }
          else
          {
            v171 = *((_QWORD *)v80 + 6);
            v172 = *((_QWORD *)v81 + 6);
          }
          if (v171 <= v172)
            return result;
        }
        v189 = *v6;
        *v6 = *(a2 - 1);
        *(a2 - 1) = v189;
        return result;
      case 3:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_1 &,ZinIrOpLayer **>(v6, v6 + 1, v8);
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_1 &,ZinIrOpLayer **>(v6, v6 + 1, v6 + 2, v8);
      case 5:
        return std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_1 &,ZinIrOpLayer **,0>(v6, v6 + 1, v6 + 2, v6 + 3, v8);
      default:
        if (v10 <= 191)
        {
          v84 = v6 + 1;
          v86 = v6 == v7 || v84 == v7;
          if ((a4 & 1) != 0)
          {
            if (v86)
              return result;
            v87 = 0;
            v88 = v6;
            while (1)
            {
              v89 = v88;
              v88 = v84;
              v90 = *v89;
              v91 = v89[1];
              if (v91)
                v92 = v90 == 0;
              else
                v92 = 1;
              if (v92)
              {
                if (v91)
                  v93 = v90 == 0;
                else
                  v93 = 0;
                if (!v93)
                  goto LABEL_287;
              }
              else
              {
                v94 = v91 != v90 && *((_QWORD *)v91 + 6) == *((_QWORD *)v90 + 6);
                if (v94
                  && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v89[1]), (_DWORD)result)
                  && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v90), (_DWORD)result))
                {
                  v95 = *((_QWORD *)v91 + 45);
                  v96 = *((_QWORD *)v90 + 45);
                }
                else
                {
                  v95 = *((_QWORD *)v91 + 6);
                  v96 = *((_QWORD *)v90 + 6);
                }
                if (v95 <= v96)
                  goto LABEL_287;
              }
              v97 = v89[1];
              v89[1] = *v89;
              v98 = v6;
              if (v89 == v6)
                goto LABEL_286;
              v99 = v87;
              while (1)
              {
                v100 = *(ZinIrOpLayer **)((char *)v6 + v99 - 8);
                if (!v97 || !v100)
                {
                  if (!v97 || v100)
                  {
LABEL_284:
                    v98 = v89;
                    goto LABEL_286;
                  }
                  goto LABEL_282;
                }
                if (v97 != v100 && *((_QWORD *)v97 + 6) == *((_QWORD *)v100 + 6))
                {
                  result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v97);
                  if ((_DWORD)result)
                  {
                    result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v100);
                    if ((_DWORD)result)
                    {
                      if (*((_QWORD *)v97 + 45) <= *((_QWORD *)v100 + 45))
                        goto LABEL_284;
                      goto LABEL_282;
                    }
                  }
                }
                if (*((_QWORD *)v97 + 6) <= *((_QWORD *)v100 + 6))
                  break;
LABEL_282:
                --v89;
                *(ZinIrOpLayer **)((char *)v6 + v99) = *(ZinIrOpLayer **)((char *)v6 + v99 - 8);
                v99 -= 8;
                if (!v99)
                {
                  v98 = v6;
                  goto LABEL_286;
                }
              }
              v98 = (ZinIrOpLayer **)((char *)v6 + v99);
LABEL_286:
              *v98 = v97;
LABEL_287:
              v84 = v88 + 1;
              v87 += 8;
              if (v88 + 1 == a2)
                return result;
            }
          }
          if (v86)
            return result;
          while (1)
          {
            v173 = v6;
            v6 = v84;
            v174 = *v173;
            v175 = v173[1];
            if (v175)
              v176 = v174 == 0;
            else
              v176 = 1;
            if (v176)
            {
              if (v175)
                v177 = v174 == 0;
              else
                v177 = 0;
              v178 = a2;
              if (!v177)
                goto LABEL_500;
            }
            else
            {
              v179 = v175 != v174 && *((_QWORD *)v175 + 6) == *((_QWORD *)v174 + 6);
              v178 = a2;
              if (v179
                && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v173[1]), (_DWORD)result)
                && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v174), (_DWORD)result))
              {
                v180 = *((_QWORD *)v175 + 45);
                v181 = *((_QWORD *)v174 + 45);
              }
              else
              {
                v180 = *((_QWORD *)v175 + 6);
                v181 = *((_QWORD *)v174 + 6);
              }
              if (v180 <= v181)
                goto LABEL_500;
            }
            v182 = *v6;
            do
            {
              while (1)
              {
                v183 = v173;
                v173[1] = *v173;
                v185 = *--v173;
                v184 = v185;
                if (v182)
                {
                  if (v184)
                    break;
                }
                if (!v182 || v184)
                  goto LABEL_499;
              }
              v186 = v182 != v184 && *((_QWORD *)v182 + 6) == *((_QWORD *)v184 + 6);
              if (v186
                && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v182), (_DWORD)result)
                && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v184), (_DWORD)result))
              {
                v187 = *((_QWORD *)v182 + 45);
                v188 = *((_QWORD *)v184 + 45);
              }
              else
              {
                v187 = *((_QWORD *)v182 + 6);
                v188 = *((_QWORD *)v184 + 6);
              }
            }
            while (v187 > v188);
LABEL_499:
            *v183 = v182;
            v178 = a2;
LABEL_500:
            v84 = v6 + 1;
            if (v6 + 1 == v178)
              return result;
          }
        }
        if (!a3)
        {
          if (v6 == v7)
            return result;
          v102 = (unint64_t)(v11 - 2) >> 1;
          v103 = v102;
          while (1)
          {
            v104 = v103;
            if (v102 < v103)
              goto LABEL_381;
            v105 = (2 * v103) | 1;
            v106 = &v6[v105];
            v107 = 2 * v103 + 2;
            v190 = v103;
            if (v107 >= v11)
              goto LABEL_304;
            v108 = *v106;
            v109 = v106[1];
            if (*v106)
              v110 = v109 == 0;
            else
              v110 = 1;
            if (v110)
            {
              if (v108)
                v111 = v109 == 0;
              else
                v111 = 0;
              if (!v111)
                goto LABEL_304;
            }
            else
            {
              v135 = v108 != v109 && *((_QWORD *)v108 + 6) == *((_QWORD *)v109 + 6);
              if (v135
                && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(*v106),
                    v102 = (unint64_t)(v11 - 2) >> 1,
                    (_DWORD)result)
                && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v109),
                    v102 = (unint64_t)(v11 - 2) >> 1,
                    (_DWORD)result))
              {
                v136 = *((_QWORD *)v108 + 45);
                v137 = *((_QWORD *)v109 + 45);
              }
              else
              {
                v136 = *((_QWORD *)v108 + 6);
                v137 = *((_QWORD *)v109 + 6);
              }
              v119 = v136 <= v137;
              v104 = v190;
              if (v119)
                goto LABEL_304;
            }
            ++v106;
            v105 = v107;
LABEL_304:
            v112 = *v106;
            v113 = v6[v104];
            if (*v106)
              v114 = v113 == 0;
            else
              v114 = 1;
            if (v114)
            {
              if (v112)
                v115 = v113 == 0;
              else
                v115 = 0;
              v104 = v190;
              if (v115)
                goto LABEL_381;
            }
            else
            {
              v116 = v112 != v113 && *((_QWORD *)v112 + 6) == *((_QWORD *)v113 + 6);
              if (v116
                && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(*v106),
                    v102 = (unint64_t)(v11 - 2) >> 1,
                    (_DWORD)result)
                && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v113),
                    v102 = (unint64_t)(v11 - 2) >> 1,
                    (_DWORD)result))
              {
                v117 = *((_QWORD *)v112 + 45);
                v118 = *((_QWORD *)v113 + 45);
              }
              else
              {
                v117 = *((_QWORD *)v112 + 6);
                v118 = *((_QWORD *)v113 + 6);
              }
              v119 = v117 <= v118;
              v104 = v190;
              if (!v119)
                goto LABEL_381;
            }
            v120 = v6[v104];
            v6[v104] = *v106;
            while (1)
            {
              if (v102 < v105)
                goto LABEL_380;
              v121 = v106;
              v122 = 2 * v105;
              v105 = (2 * v105) | 1;
              v106 = &v6[v105];
              v123 = v122 + 2;
              if (v122 + 2 < v11)
              {
                v191 = v121;
                v124 = *v106;
                v125 = v106[1];
                if (*v106)
                  v126 = v125 == 0;
                else
                  v126 = 1;
                if (v126)
                {
                  if (v124)
                    v127 = v125 == 0;
                  else
                    v127 = 0;
                  v121 = v191;
                  if (v127)
                  {
LABEL_339:
                    ++v106;
                    v105 = v123;
                  }
                }
                else
                {
                  v132 = v124 != v125 && *((_QWORD *)v124 + 6) == *((_QWORD *)v125 + 6);
                  if (v132
                    && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(*v106),
                        v102 = (unint64_t)(v11 - 2) >> 1,
                        (_DWORD)result)
                    && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v125),
                        v102 = (unint64_t)(v11 - 2) >> 1,
                        (_DWORD)result))
                  {
                    v133 = *((_QWORD *)v124 + 45);
                    v134 = *((_QWORD *)v125 + 45);
                  }
                  else
                  {
                    v133 = *((_QWORD *)v124 + 6);
                    v134 = *((_QWORD *)v125 + 6);
                  }
                  v121 = v191;
                  if (v133 > v134)
                    goto LABEL_339;
                }
              }
              v128 = *v106;
              if (v120)
              {
                if (v128)
                  break;
              }
              if (!v120 && v128)
                goto LABEL_379;
LABEL_355:
              *v121 = *v106;
            }
            v129 = v128 != v120 && *((_QWORD *)v128 + 6) == *((_QWORD *)v120 + 6);
            if (v129
              && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(*v106),
                  v102 = (unint64_t)(v11 - 2) >> 1,
                  (_DWORD)result)
              && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v120),
                  v102 = (unint64_t)(v11 - 2) >> 1,
                  (_DWORD)result))
            {
              v130 = *((_QWORD *)v128 + 45);
              v131 = *((_QWORD *)v120 + 45);
            }
            else
            {
              v130 = *((_QWORD *)v128 + 6);
              v131 = *((_QWORD *)v120 + 6);
            }
            if (v130 <= v131)
              goto LABEL_355;
LABEL_379:
            v106 = v121;
LABEL_380:
            *v106 = v120;
            v104 = v190;
LABEL_381:
            v103 = v104 - 1;
            if (!v104)
            {
              v138 = (unint64_t)v10 >> 3;
              while (1)
              {
                v139 = 0;
                v192 = *v6;
                v140 = v6;
                do
                {
                  v141 = v140;
                  v140 += v139 + 1;
                  v142 = 2 * v139;
                  v139 = (2 * v139) | 1;
                  v143 = v142 + 2;
                  if (v142 + 2 >= v138)
                    goto LABEL_396;
                  v144 = *v140;
                  v145 = v140[1];
                  if (*v140)
                    v146 = v145 == 0;
                  else
                    v146 = 1;
                  if (v146)
                  {
                    if (v144)
                      v147 = v145 == 0;
                    else
                      v147 = 0;
                    if (v147)
                    {
LABEL_395:
                      ++v140;
                      v139 = v143;
                    }
                  }
                  else
                  {
                    v148 = v144 != v145 && *((_QWORD *)v144 + 6) == *((_QWORD *)v145 + 6);
                    if (v148
                      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(*v140), (_DWORD)result)
                      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v145), (_DWORD)result))
                    {
                      v149 = *((_QWORD *)v144 + 45);
                      v150 = *((_QWORD *)v145 + 45);
                    }
                    else
                    {
                      v149 = *((_QWORD *)v144 + 6);
                      v150 = *((_QWORD *)v145 + 6);
                    }
                    if (v149 > v150)
                      goto LABEL_395;
                  }
LABEL_396:
                  *v141 = *v140;
                }
                while (v139 <= (uint64_t)((unint64_t)(v138 - 2) >> 1));
                v151 = a2 - 1;
                v22 = v140 == --a2;
                if (v22)
                {
                  *v140 = v192;
                }
                else
                {
                  *v140 = *v151;
                  *v151 = v192;
                  v152 = (char *)v140 - (char *)v6 + 8;
                  if (v152 >= 9)
                  {
                    v153 = ((unint64_t)v152 >> 3) - 2;
                    v154 = v153 >> 1;
                    v155 = &v6[v153 >> 1];
                    v156 = *v155;
                    v157 = *v140;
                    if (*v155)
                      v158 = v157 == 0;
                    else
                      v158 = 1;
                    if (v158)
                    {
                      if (v156)
                        v159 = v157 == 0;
                      else
                        v159 = 0;
                      if (v159)
                      {
LABEL_432:
                        v163 = *v140;
                        *v140 = *v155;
                        if (v153 >= 2)
                        {
                          while (1)
                          {
                            v165 = v154 - 1;
                            v154 = (v154 - 1) >> 1;
                            v164 = &v6[v154];
                            v166 = *v164;
                            if (v163 && v166)
                            {
                              v167 = v166 != v163 && *((_QWORD *)v166 + 6) == *((_QWORD *)v163 + 6);
                              if (v167
                                && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(*v164), (_DWORD)result)
                                && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v163), (_DWORD)result))
                              {
                                v168 = *((_QWORD *)v166 + 45);
                                v169 = *((_QWORD *)v163 + 45);
                              }
                              else
                              {
                                v168 = *((_QWORD *)v166 + 6);
                                v169 = *((_QWORD *)v163 + 6);
                              }
                              if (v168 <= v169)
                                break;
                            }
                            else if (v163 || !v166)
                            {
                              break;
                            }
                            *v155 = *v164;
                            v155 = &v6[v154];
                            if (v165 <= 1)
                              goto LABEL_450;
                          }
                        }
                        v164 = v155;
LABEL_450:
                        *v164 = v163;
                      }
                    }
                    else
                    {
                      v160 = v156 != v157 && *((_QWORD *)v156 + 6) == *((_QWORD *)v157 + 6);
                      if (v160
                        && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(*v155), (_DWORD)result)
                        && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v157), (_DWORD)result))
                      {
                        v161 = *((_QWORD *)v156 + 45);
                        v162 = *((_QWORD *)v157 + 45);
                      }
                      else
                      {
                        v161 = *((_QWORD *)v156 + 6);
                        v162 = *((_QWORD *)v157 + 6);
                      }
                      if (v161 > v162)
                        goto LABEL_432;
                    }
                  }
                }
                v119 = v138-- <= 2;
                if (v119)
                  return result;
              }
            }
          }
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &v6[(unint64_t)v11 >> 1];
        if ((unint64_t)v10 < 0x401)
        {
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_1 &,ZinIrOpLayer **>(v13, v6, v8);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_1 &,ZinIrOpLayer **>(v6, v13, v8);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_1 &,ZinIrOpLayer **>(v6 + 1, v13 - 1, a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_1 &,ZinIrOpLayer **>(v6 + 2, &v6[v12 + 1], a2 - 3);
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_1 &,ZinIrOpLayer **>(v13 - 1, v13, &v6[v12 + 1]);
          v14 = *v6;
          *v6 = *v13;
          *v13 = v14;
        }
        --a3;
        if ((a4 & 1) != 0)
          goto LABEL_19;
        v16 = *(v6 - 1);
        v15 = *v6;
        if (!v16 || !v15)
        {
          if (v16 && !v15)
            goto LABEL_19;
LABEL_124:
          v52 = *v6;
          v53 = *v8;
          if (*v6 && v53)
          {
            if (v52 != v53
              && *((_QWORD *)v52 + 6) == *((_QWORD *)v53 + 6)
              && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(*v6), (_DWORD)result)
              && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v53), (_DWORD)result))
            {
              v54 = *((_QWORD *)v52 + 45);
              v55 = *((_QWORD *)v53 + 45);
            }
            else
            {
              v54 = *((_QWORD *)v52 + 6);
              v55 = *((_QWORD *)v53 + 6);
            }
            if (v54 > v55)
            {
LABEL_133:
              for (i = v6 + 1; ; ++i)
              {
                v56 = *i;
                if (v52 && v56)
                {
                  v57 = v52 != v56 && *((_QWORD *)v52 + 6) == *((_QWORD *)v56 + 6);
                  if (v57
                    && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v52), (_DWORD)result)
                    && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v56), (_DWORD)result))
                  {
                    v58 = *((_QWORD *)v52 + 45);
                    v59 = *((_QWORD *)v56 + 45);
                  }
                  else
                  {
                    v58 = *((_QWORD *)v52 + 6);
                    v59 = *((_QWORD *)v56 + 6);
                  }
                  if (v58 > v59)
                    goto LABEL_169;
                }
                else if (!v56)
                {
                  goto LABEL_169;
                }
              }
            }
          }
          else if (v52 && !v53)
          {
            goto LABEL_133;
          }
          for (i = v6 + 1; i < v7; ++i)
          {
            v60 = *i;
            if (v52 && v60)
            {
              v61 = v52 != v60 && *((_QWORD *)v52 + 6) == *((_QWORD *)v60 + 6);
              if (v61
                && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v52), (_DWORD)result)
                && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v60), (_DWORD)result))
              {
                v62 = *((_QWORD *)v52 + 45);
                v63 = *((_QWORD *)v60 + 45);
              }
              else
              {
                v62 = *((_QWORD *)v52 + 6);
                v63 = *((_QWORD *)v60 + 6);
              }
              if (v62 > v63)
                break;
            }
            else if (v52 && !v60)
            {
              break;
            }
          }
LABEL_169:
          j = v7;
          if (i >= v7)
            goto LABEL_216;
          for (j = a2 - 1; ; --j)
          {
            v65 = *j;
            if (v52)
            {
              if (v65)
                break;
            }
            if (!v52 || v65)
              goto LABEL_216;
LABEL_186:
            ;
          }
          v66 = v52 != v65 && *((_QWORD *)v52 + 6) == *((_QWORD *)v65 + 6);
          if (v66
            && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v52), (_DWORD)result)
            && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v65), (_DWORD)result))
          {
            v67 = *((_QWORD *)v52 + 45);
            v68 = *((_QWORD *)v65 + 45);
          }
          else
          {
            v67 = *((_QWORD *)v52 + 6);
            v68 = *((_QWORD *)v65 + 6);
          }
          if (v67 > v68)
            goto LABEL_186;
LABEL_216:
          if (i < j)
          {
            v69 = *i;
            *i++ = *j;
            *j = v69;
            while (1)
            {
              v70 = *i;
              if (v52 && v70)
              {
                v71 = v52 != v70 && *((_QWORD *)v52 + 6) == *((_QWORD *)v70 + 6);
                if (v71
                  && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v52), (_DWORD)result)
                  && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v70), (_DWORD)result))
                {
                  v72 = *((_QWORD *)v52 + 45);
                  v73 = *((_QWORD *)v70 + 45);
                }
                else
                {
                  v72 = *((_QWORD *)v52 + 6);
                  v73 = *((_QWORD *)v70 + 6);
                }
                if (v72 > v73)
                {
                  do
                  {
                    do
                    {
LABEL_204:
                      v75 = *--j;
                      v74 = v75;
                    }
                    while (!v75);
                    v76 = v52 != v74 && *((_QWORD *)v52 + 6) == *((_QWORD *)v74 + 6);
                    if (v76
                      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v52), (_DWORD)result)
                      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v74), (_DWORD)result))
                    {
                      v77 = *((_QWORD *)v52 + 45);
                      v78 = *((_QWORD *)v74 + 45);
                    }
                    else
                    {
                      v77 = *((_QWORD *)v52 + 6);
                      v78 = *((_QWORD *)v74 + 6);
                    }
                  }
                  while (v77 > v78);
                  goto LABEL_216;
                }
              }
              else if (v52 && !v70)
              {
                goto LABEL_204;
              }
              ++i;
            }
          }
          v79 = i - 1;
          if (i - 1 != v6)
            *v6 = *v79;
          a4 = 0;
          *v79 = v52;
          continue;
        }
        if (v16 != v15
          && *((_QWORD *)v16 + 6) == *((_QWORD *)v15 + 6)
          && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(*(v6 - 1)), (_DWORD)result)
          && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v15), (_DWORD)result))
        {
          v17 = *((_QWORD *)v16 + 45);
          v18 = *((_QWORD *)v15 + 45);
        }
        else
        {
          v17 = *((_QWORD *)v16 + 6);
          v18 = *((_QWORD *)v15 + 6);
        }
        if (v17 <= v18)
          goto LABEL_124;
LABEL_19:
        v19 = 0;
        v20 = *v6;
        while (2)
        {
          v21 = v6[v19 + 1];
          if (!v20 || !v21)
          {
            if (v20 || !v21)
              break;
            goto LABEL_35;
          }
          v22 = v21 != v20 && *((_QWORD *)v21 + 6) == *((_QWORD *)v20 + 6);
          if (v22 && ZinIrOpLayer::IsANELayer(v6[v19 + 1]) && ZinIrOpLayer::IsANELayer(v20))
          {
            v23 = *((_QWORD *)v21 + 45);
            v24 = *((_QWORD *)v20 + 45);
          }
          else
          {
            v23 = *((_QWORD *)v21 + 6);
            v24 = *((_QWORD *)v20 + 6);
          }
          if (v23 > v24)
          {
LABEL_35:
            ++v19;
            continue;
          }
          break;
        }
        v25 = &v6[v19];
        v26 = (unint64_t)&v6[v19 + 1];
        k = a2 - 1;
        if (v19 * 8)
        {
          while (1)
          {
            v28 = *k;
            if (v20 && v28)
            {
              v29 = v28 != v20 && *((_QWORD *)v28 + 6) == *((_QWORD *)v20 + 6);
              if (v29 && ZinIrOpLayer::IsANELayer(*k) && ZinIrOpLayer::IsANELayer(v20))
              {
                v30 = *((_QWORD *)v28 + 45);
                v31 = *((_QWORD *)v20 + 45);
              }
              else
              {
                v30 = *((_QWORD *)v28 + 6);
                v31 = *((_QWORD *)v20 + 6);
              }
              if (v30 > v31)
                goto LABEL_79;
            }
            else if (!v20 && v28)
            {
              goto LABEL_79;
            }
            --k;
          }
        }
        k = a2;
        if (v26 < (unint64_t)a2)
        {
          for (k = a2 - 1; ; --k)
          {
            v32 = *k;
            if (v20 && v32)
            {
              v33 = v32 != v20 && *((_QWORD *)v32 + 6) == *((_QWORD *)v20 + 6);
              if (v33 && ZinIrOpLayer::IsANELayer(*k) && ZinIrOpLayer::IsANELayer(v20))
              {
                if (v26 >= (unint64_t)k)
                  break;
                v34 = *((_QWORD *)v32 + 45);
                v35 = *((_QWORD *)v20 + 45);
              }
              else
              {
                if (v26 >= (unint64_t)k)
                  break;
                v34 = *((_QWORD *)v32 + 6);
                v35 = *((_QWORD *)v20 + 6);
              }
              if (v34 > v35)
                break;
            }
            else
            {
              if (v20)
                v36 = 1;
              else
                v36 = v32 == 0;
              v37 = v36;
              if (v26 >= (unint64_t)k || !v37)
                break;
            }
          }
        }
LABEL_79:
        if (v26 >= (unint64_t)k)
          goto LABEL_115;
        v38 = &v6[v19 + 1];
        v39 = k;
        while (2)
        {
          v40 = *v38;
          *v38++ = *v39;
          *v39 = v40;
          while (2)
          {
            v41 = *v38;
            if (!v20 || !v41)
            {
              if (v20 || !v41)
                goto LABEL_98;
              goto LABEL_97;
            }
            v42 = v41 != v20 && *((_QWORD *)v41 + 6) == *((_QWORD *)v20 + 6);
            if (v42 && ZinIrOpLayer::IsANELayer(*v38) && ZinIrOpLayer::IsANELayer(v20))
            {
              v43 = *((_QWORD *)v41 + 45);
              v44 = *((_QWORD *)v20 + 45);
            }
            else
            {
              v43 = *((_QWORD *)v41 + 6);
              v44 = *((_QWORD *)v20 + 6);
            }
            if (v43 > v44)
            {
LABEL_97:
              ++v38;
              continue;
            }
            break;
          }
          do
          {
LABEL_98:
            while (1)
            {
              v46 = *--v39;
              v45 = v46;
              if (v20)
              {
                if (v45)
                  break;
              }
              if (!v20 && v45)
                goto LABEL_113;
            }
            v47 = v45 != v20 && *((_QWORD *)v45 + 6) == *((_QWORD *)v20 + 6);
            if (v47 && ZinIrOpLayer::IsANELayer(v45) && ZinIrOpLayer::IsANELayer(v20))
            {
              v48 = *((_QWORD *)v45 + 45);
              v49 = *((_QWORD *)v20 + 45);
            }
            else
            {
              v48 = *((_QWORD *)v45 + 6);
              v49 = *((_QWORD *)v20 + 6);
            }
          }
          while (v48 <= v49);
LABEL_113:
          if (v38 < v39)
            continue;
          break;
        }
        v25 = v38 - 1;
LABEL_115:
        if (v25 != v6)
          *v6 = *v25;
        *v25 = v20;
        v50 = v26 >= (unint64_t)k;
        v7 = a2;
        if (!v50)
        {
LABEL_121:
          result = (ZinIrOpLayer **)std::__introsort<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_1 &,ZinIrOpLayer **,false>(v6, v25, a3, a4 & 1);
          a4 = 0;
          i = v25 + 1;
          continue;
        }
        v51 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_1 &,ZinIrOpLayer **>(v6, v25);
        i = v25 + 1;
        result = (ZinIrOpLayer **)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_1 &,ZinIrOpLayer **>(v25 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v51)
            continue;
          goto LABEL_121;
        }
        a2 = v25;
        if (!v51)
          goto LABEL_2;
        return result;
    }
  }
}

ZinIrOpLayer **std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_1 &,ZinIrOpLayer **,0>(ZinIrOpLayer **a1, ZinIrOpLayer **a2, ZinIrOpLayer **a3, ZinIrOpLayer **a4, ZinIrOpLayer **a5)
{
  ZinIrOpLayer **result;
  ZinIrOpLayer *v11;
  ZinIrOpLayer *v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  ZinIrOpLayer *v18;
  ZinIrOpLayer *v19;
  ZinIrOpLayer *v20;
  uint64_t v21;
  uint64_t v22;
  ZinIrOpLayer *v23;
  ZinIrOpLayer *v24;
  ZinIrOpLayer *v25;
  uint64_t v26;
  uint64_t v27;
  ZinIrOpLayer *v28;
  ZinIrOpLayer *v29;
  ZinIrOpLayer *v30;
  uint64_t v31;
  uint64_t v32;
  ZinIrOpLayer *v33;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_1 &,ZinIrOpLayer **>(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *a4;
  if (*a5)
    v13 = v12 == 0;
  else
    v13 = 1;
  if (v13)
  {
    if (v11)
      v14 = v12 == 0;
    else
      v14 = 0;
    if (!v14)
      return result;
  }
  else
  {
    v15 = v11 != v12 && *((_QWORD *)v11 + 6) == *((_QWORD *)v12 + 6);
    if (v15
      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(*a5), (_DWORD)result)
      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v12), (_DWORD)result))
    {
      v16 = *((_QWORD *)v11 + 45);
      v17 = *((_QWORD *)v12 + 45);
    }
    else
    {
      v16 = *((_QWORD *)v11 + 6);
      v17 = *((_QWORD *)v12 + 6);
    }
    if (v16 <= v17)
      return result;
  }
  v18 = *a4;
  *a4 = *a5;
  *a5 = v18;
  v19 = *a4;
  v20 = *a3;
  if (*a4 && v20)
  {
    if (v19 != v20
      && *((_QWORD *)v19 + 6) == *((_QWORD *)v20 + 6)
      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(*a4), (_DWORD)result)
      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v20), (_DWORD)result))
    {
      v21 = *((_QWORD *)v19 + 45);
      v22 = *((_QWORD *)v20 + 45);
    }
    else
    {
      v21 = *((_QWORD *)v19 + 6);
      v22 = *((_QWORD *)v20 + 6);
    }
    if (v21 <= v22)
      return result;
  }
  else if (!v19 || v20)
  {
    return result;
  }
  v23 = *a3;
  *a3 = *a4;
  *a4 = v23;
  v24 = *a3;
  v25 = *a2;
  if (*a3 && v25)
  {
    if (v24 != v25
      && *((_QWORD *)v24 + 6) == *((_QWORD *)v25 + 6)
      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(*a3), (_DWORD)result)
      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v25), (_DWORD)result))
    {
      v26 = *((_QWORD *)v24 + 45);
      v27 = *((_QWORD *)v25 + 45);
    }
    else
    {
      v26 = *((_QWORD *)v24 + 6);
      v27 = *((_QWORD *)v25 + 6);
    }
    if (v26 <= v27)
      return result;
  }
  else if (!v24 || v25)
  {
    return result;
  }
  v28 = *a2;
  *a2 = *a3;
  *a3 = v28;
  v29 = *a2;
  v30 = *a1;
  if (*a2 && v30)
  {
    if (v29 != v30
      && *((_QWORD *)v29 + 6) == *((_QWORD *)v30 + 6)
      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(*a2), (_DWORD)result)
      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v30), (_DWORD)result))
    {
      v31 = *((_QWORD *)v29 + 45);
      v32 = *((_QWORD *)v30 + 45);
    }
    else
    {
      v31 = *((_QWORD *)v29 + 6);
      v32 = *((_QWORD *)v30 + 6);
    }
    if (v31 > v32)
      goto LABEL_57;
  }
  else if (v29 && !v30)
  {
LABEL_57:
    v33 = *a1;
    *a1 = *a2;
    *a2 = v33;
  }
  return result;
}

ZinIrOpLayer **std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_1 &,ZinIrOpLayer **>(ZinIrOpLayer **result, ZinIrOpLayer **a2, ZinIrOpLayer **a3)
{
  ZinIrOpLayer **v4;
  ZinIrOpLayer **v5;
  ZinIrOpLayer *v6;
  ZinIrOpLayer *v7;
  BOOL v8;
  BOOL v9;
  ZinIrOpLayer *v10;
  ZinIrOpLayer *v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  ZinIrOpLayer *v16;
  ZinIrOpLayer *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  ZinIrOpLayer *v23;
  ZinIrOpLayer *v24;
  uint64_t v25;
  uint64_t v26;
  ZinIrOpLayer *v27;
  ZinIrOpLayer *v28;
  ZinIrOpLayer *v29;
  ZinIrOpLayer *v30;

  v4 = a2;
  v5 = result;
  v6 = *a2;
  v7 = *result;
  if (*a2)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
  {
    if (v6)
      v9 = v7 == 0;
    else
      v9 = 0;
    if (v9)
    {
LABEL_28:
      v16 = *a3;
      v17 = *v4;
      if (*a3 && v17)
      {
        if (v16 != v17
          && *((_QWORD *)v16 + 6) == *((_QWORD *)v17 + 6)
          && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(*a3), (_DWORD)result)
          && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v17), (_DWORD)result))
        {
          v18 = *((_QWORD *)v16 + 45);
          v19 = *((_QWORD *)v17 + 45);
        }
        else
        {
          v18 = *((_QWORD *)v16 + 6);
          v19 = *((_QWORD *)v17 + 6);
        }
        if (v18 <= v19)
        {
LABEL_48:
          v23 = *v5;
          *v5 = *v4;
          *v4 = v23;
          v24 = *a3;
          if (v23 && v24)
          {
            if (v24 != v23
              && *((_QWORD *)v24 + 6) == *((_QWORD *)v23 + 6)
              && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(*a3), (_DWORD)result)
              && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v23), (_DWORD)result))
            {
              v25 = *((_QWORD *)v24 + 45);
              v26 = *((_QWORD *)v23 + 45);
            }
            else
            {
              v25 = *((_QWORD *)v24 + 6);
              v26 = *((_QWORD *)v23 + 6);
            }
            v5 = v4;
            v4 = a3;
LABEL_73:
            if (v25 <= v26)
              return result;
            goto LABEL_74;
          }
          if (v23)
            return result;
          v5 = v4;
          v4 = a3;
          if (!v24)
            return result;
LABEL_74:
          v30 = *v5;
          *v5 = *v4;
          *v4 = v30;
          return result;
        }
      }
      else if (!v16 || v17)
      {
        goto LABEL_48;
      }
      v4 = a3;
      goto LABEL_74;
    }
  }
  else
  {
    v13 = v6 != v7 && *((_QWORD *)v6 + 6) == *((_QWORD *)v7 + 6);
    if (v13
      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(*a2), (_DWORD)result)
      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v7), (_DWORD)result))
    {
      v14 = *((_QWORD *)v6 + 45);
      v15 = *((_QWORD *)v7 + 45);
    }
    else
    {
      v14 = *((_QWORD *)v6 + 6);
      v15 = *((_QWORD *)v7 + 6);
    }
    if (v14 > v15)
      goto LABEL_28;
  }
  v10 = *a3;
  v11 = *v4;
  if (*a3)
    v12 = v11 == 0;
  else
    v12 = 1;
  if (v12)
  {
    if (!v10 || v11)
      return result;
  }
  else
  {
    v20 = v10 != v11 && *((_QWORD *)v10 + 6) == *((_QWORD *)v11 + 6);
    if (v20
      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(*a3), (_DWORD)result)
      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v11), (_DWORD)result))
    {
      v21 = *((_QWORD *)v10 + 45);
      v22 = *((_QWORD *)v11 + 45);
    }
    else
    {
      v21 = *((_QWORD *)v10 + 6);
      v22 = *((_QWORD *)v11 + 6);
    }
    if (v21 <= v22)
      return result;
  }
  v27 = *v4;
  *v4 = *a3;
  *a3 = v27;
  v28 = *v4;
  v29 = *v5;
  if (*v4 && v29)
  {
    if (v28 != v29
      && *((_QWORD *)v28 + 6) == *((_QWORD *)v29 + 6)
      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(*v4), (_DWORD)result)
      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v29), (_DWORD)result))
    {
      v25 = *((_QWORD *)v28 + 45);
      v26 = *((_QWORD *)v29 + 45);
    }
    else
    {
      v25 = *((_QWORD *)v28 + 6);
      v26 = *((_QWORD *)v29 + 6);
    }
    goto LABEL_73;
  }
  if (v28 && !v29)
    goto LABEL_74;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_1 &,ZinIrOpLayer **>(ZinIrOpLayer **a1, ZinIrOpLayer **a2)
{
  uint64_t v4;
  _BOOL8 result;
  ZinIrOpLayer *v6;
  ZinIrOpLayer *v7;
  BOOL v8;
  ZinIrOpLayer **v9;
  ZinIrOpLayer **v10;
  uint64_t v11;
  int v12;
  ZinIrOpLayer *v13;
  ZinIrOpLayer *v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  ZinIrOpLayer *v20;
  ZinIrOpLayer **v21;
  uint64_t v22;
  ZinIrOpLayer *v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  ZinIrOpLayer *v30;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (v6)
        v8 = v7 == 0;
      else
        v8 = 1;
      if (v8)
      {
        if (v6 && !v7)
        {
LABEL_69:
          v30 = *a1;
          *a1 = *(a2 - 1);
          *(a2 - 1) = v30;
          return 1;
        }
      }
      else
      {
        v27 = v6 != v7 && *((_QWORD *)v6 + 6) == *((_QWORD *)v7 + 6);
        if (v27 && ZinIrOpLayer::IsANELayer(*(a2 - 1)) && ZinIrOpLayer::IsANELayer(v7))
        {
          v28 = *((_QWORD *)v6 + 45);
          v29 = *((_QWORD *)v7 + 45);
        }
        else
        {
          v28 = *((_QWORD *)v6 + 6);
          v29 = *((_QWORD *)v7 + 6);
        }
        if (v28 > v29)
          goto LABEL_69;
        return 1;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_1 &,ZinIrOpLayer **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_1 &,ZinIrOpLayer **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_1 &,ZinIrOpLayer **,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v9 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_1 &,ZinIrOpLayer **>(a1, a1 + 1, a1 + 2);
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      while (2)
      {
        v13 = *v10;
        v14 = *v9;
        if (*v10)
          v15 = v14 == 0;
        else
          v15 = 1;
        if (v15)
        {
          if (v13)
            v16 = v14 == 0;
          else
            v16 = 0;
          if (!v16)
            goto LABEL_55;
        }
        else
        {
          v17 = v13 != v14 && *((_QWORD *)v13 + 6) == *((_QWORD *)v14 + 6);
          if (v17 && ZinIrOpLayer::IsANELayer(*v10) && ZinIrOpLayer::IsANELayer(v14))
          {
            v18 = *((_QWORD *)v13 + 45);
            v19 = *((_QWORD *)v14 + 45);
          }
          else
          {
            v18 = *((_QWORD *)v13 + 6);
            v19 = *((_QWORD *)v14 + 6);
          }
          if (v18 <= v19)
            goto LABEL_55;
        }
        v20 = *v10;
        *v10 = *v9;
        v21 = a1;
        if (v9 == a1)
          goto LABEL_54;
        v22 = v11;
        while (2)
        {
          v23 = *(ZinIrOpLayer **)((char *)a1 + v22 + 8);
          if (!v20 || !v23)
          {
            if (!v20 || v23)
            {
              v21 = (ZinIrOpLayer **)((char *)a1 + v22 + 16);
              goto LABEL_54;
            }
            goto LABEL_50;
          }
          v24 = v20 != v23 && *((_QWORD *)v20 + 6) == *((_QWORD *)v23 + 6);
          if (v24 && ZinIrOpLayer::IsANELayer(v20) && ZinIrOpLayer::IsANELayer(v23))
          {
            v25 = *((_QWORD *)v20 + 45);
            v26 = *((_QWORD *)v23 + 45);
          }
          else
          {
            v25 = *((_QWORD *)v20 + 6);
            v26 = *((_QWORD *)v23 + 6);
          }
          if (v25 > v26)
          {
LABEL_50:
            --v9;
            *(ZinIrOpLayer **)((char *)a1 + v22 + 16) = *(ZinIrOpLayer **)((char *)a1 + v22 + 8);
            v22 -= 8;
            if (v22 == -16)
            {
              v21 = a1;
              goto LABEL_54;
            }
            continue;
          }
          break;
        }
        v21 = v9;
LABEL_54:
        *v21 = v20;
        if (++v12 != 8)
        {
LABEL_55:
          v9 = v10;
          v11 += 8;
          if (++v10 == a2)
            return 1;
          continue;
        }
        return v10 + 1 == a2;
      }
  }
}

ZinIrOpLayer **std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_1 &,ZinIrOpLayer **>(ZinIrOpLayer **a1, ZinIrOpLayer **a2, ZinIrOpLayer **a3, ZinIrOpLayer **a4)
{
  ZinIrOpLayer **result;
  ZinIrOpLayer *v9;
  ZinIrOpLayer *v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  ZinIrOpLayer *v16;
  ZinIrOpLayer *v17;
  ZinIrOpLayer *v18;
  uint64_t v19;
  uint64_t v20;
  ZinIrOpLayer *v21;
  ZinIrOpLayer *v22;
  ZinIrOpLayer *v23;
  uint64_t v24;
  uint64_t v25;
  ZinIrOpLayer *v26;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSpatialSplitUtils::GetSortedCluster(std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const&,BOOL)::$_1 &,ZinIrOpLayer **>(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  if (*a4)
    v11 = v10 == 0;
  else
    v11 = 1;
  if (v11)
  {
    if (v9)
      v12 = v10 == 0;
    else
      v12 = 0;
    if (!v12)
      return result;
  }
  else
  {
    v13 = v9 != v10 && *((_QWORD *)v9 + 6) == *((_QWORD *)v10 + 6);
    if (v13
      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(*a4), (_DWORD)result)
      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v10), (_DWORD)result))
    {
      v14 = *((_QWORD *)v9 + 45);
      v15 = *((_QWORD *)v10 + 45);
    }
    else
    {
      v14 = *((_QWORD *)v9 + 6);
      v15 = *((_QWORD *)v10 + 6);
    }
    if (v14 <= v15)
      return result;
  }
  v16 = *a3;
  *a3 = *a4;
  *a4 = v16;
  v17 = *a3;
  v18 = *a2;
  if (*a3 && v18)
  {
    if (v17 != v18
      && *((_QWORD *)v17 + 6) == *((_QWORD *)v18 + 6)
      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(*a3), (_DWORD)result)
      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v18), (_DWORD)result))
    {
      v19 = *((_QWORD *)v17 + 45);
      v20 = *((_QWORD *)v18 + 45);
    }
    else
    {
      v19 = *((_QWORD *)v17 + 6);
      v20 = *((_QWORD *)v18 + 6);
    }
    if (v19 <= v20)
      return result;
  }
  else if (!v17 || v18)
  {
    return result;
  }
  v21 = *a2;
  *a2 = *a3;
  *a3 = v21;
  v22 = *a2;
  v23 = *a1;
  if (*a2 && v23)
  {
    if (v22 != v23
      && *((_QWORD *)v22 + 6) == *((_QWORD *)v23 + 6)
      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(*a2), (_DWORD)result)
      && (result = (ZinIrOpLayer **)ZinIrOpLayer::IsANELayer(v23), (_DWORD)result))
    {
      v24 = *((_QWORD *)v22 + 45);
      v25 = *((_QWORD *)v23 + 45);
    }
    else
    {
      v24 = *((_QWORD *)v22 + 6);
      v25 = *((_QWORD *)v23 + 6);
    }
    if (v24 > v25)
      goto LABEL_45;
  }
  else if (v22 && !v23)
  {
LABEL_45:
    v26 = *a1;
    *a1 = *a2;
    *a2 = v26;
  }
  return result;
}

double std::__set_intersection[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<ZinIrDimension,std::__tree_node<ZinIrDimension,void *> *,long>,std::__tree_const_iterator<ZinIrDimension,std::__tree_node<ZinIrDimension,void *> *,long>,std::__tree_const_iterator<ZinIrDimension,std::__tree_node<ZinIrDimension,void *> *,long>,std::__tree_const_iterator<ZinIrDimension,std::__tree_node<ZinIrDimension,void *> *,long>,std::insert_iterator<std::set<ZinIrDimension>>>@<D0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  _QWORD *v19;
  _QWORD *v20;
  double result;
  __int128 v22;

  *(_QWORD *)&v22 = a5;
  *((_QWORD *)&v22 + 1) = a6;
  if (a1 != a2)
  {
    v10 = a3;
    if (a3 != a4)
    {
      v11 = a1;
      do
      {
        v12 = *((_DWORD *)v11 + 7);
        v13 = *((_DWORD *)v10 + 7);
        if (v12 >= v13)
        {
          if (v13 >= v12)
          {
            std::insert_iterator<std::set<ZinIrDimension>>::operator=[abi:ne180100]((uint64_t)&v22, (int *)v11 + 7);
            v17 = (_QWORD *)v11[1];
            if (v17)
            {
              do
              {
                v16 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v16 = (_QWORD *)v11[2];
                v18 = *v16 == (_QWORD)v11;
                v11 = v16;
              }
              while (!v18);
            }
          }
          else
          {
            v16 = v11;
          }
          v19 = (_QWORD *)v10[1];
          if (v19)
          {
            do
            {
              v10 = v19;
              v19 = (_QWORD *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              v20 = v10;
              v10 = (_QWORD *)v10[2];
            }
            while ((_QWORD *)*v10 != v20);
          }
          v11 = v16;
        }
        else
        {
          v14 = (_QWORD *)v11[1];
          if (v14)
          {
            do
            {
              v11 = v14;
              v14 = (_QWORD *)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              v15 = v11;
              v11 = (_QWORD *)v11[2];
            }
            while ((_QWORD *)*v11 != v15);
          }
        }
      }
      while (v11 != a2 && v10 != a4);
    }
  }
  *(_QWORD *)a7 = a2;
  *(_QWORD *)(a7 + 8) = a4;
  result = *(double *)&v22;
  *(_OWORD *)(a7 + 16) = v22;
  return result;
}

uint64_t std::insert_iterator<std::set<ZinIrDimension>>::operator=[abi:ne180100](uint64_t a1, int *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  BOOL v6;

  v3 = std::__tree<ZinKernelFormat>::__emplace_hint_unique_key_args<ZinKernelFormat,ZinKernelFormat const&>(*(uint64_t ***)a1, *(uint64_t **)(a1 + 8), a2, a2);
  *(_QWORD *)(a1 + 8) = v3;
  v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      v5 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      v5 = (uint64_t *)v3[2];
      v6 = *v5 == (_QWORD)v3;
      v3 = v5;
    }
    while (!v6);
  }
  *(_QWORD *)(a1 + 8) = v5;
  return a1;
}

void std::__function::__func<ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_1,std::allocator<ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_1>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_1,std::allocator<ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_1>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0018C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_1,std::allocator<ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_1>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0018C8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_1,std::allocator<ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_1>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  void **v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v3 = *a3;
  if ((*(_QWORD *)(*a3 + 48) & 0x8000000000000000) != 0)
    ZinAssertImpl("Unscheduled layer in spatial splitting");
  v4 = *(void ***)(a1 + 8);
  v5 = v4[1];
  v6 = (unint64_t)v4[2];
  if ((unint64_t)v5 >= v6)
  {
    v8 = ((char *)v5 - (_BYTE *)*v4) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v9 = v6 - (_QWORD)*v4;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(v4 + 2), v11);
    else
      v12 = 0;
    v13 = &v12[8 * v8];
    v14 = &v12[8 * v11];
    *(_QWORD *)v13 = v3;
    v7 = v13 + 8;
    v16 = (char *)*v4;
    v15 = (char *)v4[1];
    if (v15 != *v4)
    {
      do
      {
        v17 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *((_QWORD *)v13 - 1) = v17;
        v13 -= 8;
      }
      while (v15 != v16);
      v15 = (char *)*v4;
    }
    *v4 = v13;
    v4[1] = v7;
    v4[2] = v14;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v5 = v3;
    v7 = v5 + 1;
  }
  v4[1] = v7;
  return 0;
}

uint64_t std::__function::__func<ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_1,std::allocator<ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_1>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_1,std::allocator<ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency(ZinIrControlFlowGraph *,ZinIrParameters const&,SplitConfiguration &)::$_1>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

void std::__function::__func<ZinMirSpatialSplitUtils::ComputeWorkUnitShapeTileHeight(ZinIrControlFlowGraph *,ZinIrHalParameters const&,std::unordered_map<ZinIrTensor const*,CpAllocUtils::AllocationType> const&,SplitConfiguration const&)::$_0,std::allocator<ZinMirSpatialSplitUtils::ComputeWorkUnitShapeTileHeight(ZinIrControlFlowGraph *,ZinIrHalParameters const&,std::unordered_map<ZinIrTensor const*,CpAllocUtils::AllocationType> const&,SplitConfiguration const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<ZinMirSpatialSplitUtils::ComputeWorkUnitShapeTileHeight(ZinIrControlFlowGraph *,ZinIrHalParameters const&,std::unordered_map<ZinIrTensor const*,CpAllocUtils::AllocationType> const&,SplitConfiguration const&)::$_0,std::allocator<ZinMirSpatialSplitUtils::ComputeWorkUnitShapeTileHeight(ZinIrControlFlowGraph *,ZinIrHalParameters const&,std::unordered_map<ZinIrTensor const*,CpAllocUtils::AllocationType> const&,SplitConfiguration const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C001870;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<ZinMirSpatialSplitUtils::ComputeWorkUnitShapeTileHeight(ZinIrControlFlowGraph *,ZinIrHalParameters const&,std::unordered_map<ZinIrTensor const*,CpAllocUtils::AllocationType> const&,SplitConfiguration const&)::$_0,std::allocator<ZinMirSpatialSplitUtils::ComputeWorkUnitShapeTileHeight(ZinIrControlFlowGraph *,ZinIrHalParameters const&,std::unordered_map<ZinIrTensor const*,CpAllocUtils::AllocationType> const&,SplitConfiguration const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C001870;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<ZinMirSpatialSplitUtils::ComputeWorkUnitShapeTileHeight(ZinIrControlFlowGraph *,ZinIrHalParameters const&,std::unordered_map<ZinIrTensor const*,CpAllocUtils::AllocationType> const&,SplitConfiguration const&)::$_0,std::allocator<ZinMirSpatialSplitUtils::ComputeWorkUnitShapeTileHeight(ZinIrControlFlowGraph *,ZinIrHalParameters const&,std::unordered_map<ZinIrTensor const*,CpAllocUtils::AllocationType> const&,SplitConfiguration const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t a2, ZinIrOpLayer **a3)
{
  ZinIrOpLayer *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  ZinIrTensor *v9;
  ZinIrTensor *RootTensor;
  _BOOL4 IsNonResident;
  BOOL v12;
  int v13;
  ZinIrTensor *v14;
  ZinIrTensor *v15;
  _BOOL4 v16;
  __int16 v17;
  uint64_t v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  void *__p[3];
  __int16 v23;
  __int16 v24;
  char v25;

  v4 = *a3;
  result = ZinIrOpLayer::IsANELayer(*a3);
  if (!(_DWORD)result)
    return result;
  v6 = *((_QWORD *)v4 + 11);
  v7 = *((_QWORD *)v4 + 12);
  if (v6 == v7)
  {
    v13 = 1;
  }
  else
  {
    v8 = v6 + 8;
    do
    {
      v9 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v8 - 8) + 32))(*(_QWORD *)(v8 - 8), 0, 0);
      RootTensor = ZinIrTensor::GetRootTensor(v9);
      IsNonResident = ZinMirSpatialSplitUtils::IsNonResident(RootTensor, *(_QWORD **)(a1 + 8));
      if (IsNonResident)
        break;
      v12 = v8 == v7;
      v8 += 8;
    }
    while (!v12);
    v13 = !IsNonResident;
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 16) + 2))
    ZinMirL2Config::ZinMirSetTileHeight((ZinMirL2Config *)(*((_QWORD *)v4 + 33) + 120), v4, v13);
  v14 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0, 0);
  v15 = ZinIrTensor::GetRootTensor(v14);
  v16 = ZinMirSpatialSplitUtils::IsNonResident(v15, *(_QWORD **)(a1 + 8));
  if (!ZinIrOpLayer::IsNELayer(v4))
  {
    v21 = *(_QWORD *)(a1 + 16);
    if (*(_BYTE *)(v21 + 2) || *(_BYTE *)(v21 + 8))
      ZinMirL2Config::SetPatchShape(*((_QWORD *)v4 + 33) + 120, v4, 1, 1, *(const ZinIrHalParameters **)(a1 + 24));
    return 0;
  }
  v25 = 0;
  if (v16)
    v17 = 0;
  else
    v17 = 256;
  v24 = 1;
  v23 = v17 | v13;
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 16) + 2))
    return 0;
  v18 = *((_QWORD *)v4 + 33) + 120;
  v19 = *(_DWORD *)(ZinIrOpLayer::GetInputTensor(v4, 0) + 88);
  ZinIrOpLayer::GetInputTensorDimensions(v4, __p);
  v20 = ZinMirL2Config::ZinMirSetWorkUnitShape(v18, v4, v19);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((v20 & 1) != 0)
    return 0;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    std::__function::__func<ZinMirSpatialSplitUtils::ComputeWorkUnitShapeTileHeight(ZinIrControlFlowGraph *,ZinIrHalParameters const&,std::unordered_map<ZinIrTensor const*,CpAllocUtils::AllocationType> const&,SplitConfiguration const&)::$_0,std::allocator<ZinMirSpatialSplitUtils::ComputeWorkUnitShapeTileHeight(ZinIrControlFlowGraph *,ZinIrHalParameters const&,std::unordered_map<ZinIrTensor const*,CpAllocUtils::AllocationType> const&,SplitConfiguration const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()();
  return 3;
}

void sub_206D9AEA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinMirSpatialSplitUtils::ComputeWorkUnitShapeTileHeight(ZinIrControlFlowGraph *,ZinIrHalParameters const&,std::unordered_map<ZinIrTensor const*,CpAllocUtils::AllocationType> const&,SplitConfiguration const&)::$_0,std::allocator<ZinMirSpatialSplitUtils::ComputeWorkUnitShapeTileHeight(ZinIrControlFlowGraph *,ZinIrHalParameters const&,std::unordered_map<ZinIrTensor const*,CpAllocUtils::AllocationType> const&,SplitConfiguration const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirSpatialSplitUtils::ComputeWorkUnitShapeTileHeight(ZinIrControlFlowGraph *,ZinIrHalParameters const&,std::unordered_map<ZinIrTensor const*,CpAllocUtils::AllocationType> const&,SplitConfiguration const&)::$_0,std::allocator<ZinMirSpatialSplitUtils::ComputeWorkUnitShapeTileHeight(ZinIrControlFlowGraph *,ZinIrHalParameters const&,std::unordered_map<ZinIrTensor const*,CpAllocUtils::AllocationType> const&,SplitConfiguration const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

void std::__function::__func<ZinMirSpatialSplitUtils::BuildMinDMABufferKeyMap(std::map<MinDMABufferMapKey,long> &,ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinMirSpatialSplitUtils::BuildMinDMABufferKeyMap(std::map<MinDMABufferMapKey,long> &,ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<ZinMirSpatialSplitUtils::BuildMinDMABufferKeyMap(std::map<MinDMABufferMapKey,long> &,ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinMirSpatialSplitUtils::BuildMinDMABufferKeyMap(std::map<MinDMABufferMapKey,long> &,ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C001818;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ZinMirSpatialSplitUtils::BuildMinDMABufferKeyMap(std::map<MinDMABufferMapKey,long> &,ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinMirSpatialSplitUtils::BuildMinDMABufferKeyMap(std::map<MinDMABufferMapKey,long> &,ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C001818;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<ZinMirSpatialSplitUtils::BuildMinDMABufferKeyMap(std::map<MinDMABufferMapKey,long> &,ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinMirSpatialSplitUtils::BuildMinDMABufferKeyMap(std::map<MinDMABufferMapKey,long> &,ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t a2, ZinIrOpLayer **a3)
{
  ZinIrOpLayer *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t **v15;
  ZinIrOpLayer *v17;
  char v18;
  uint64_t v19;
  int64x2_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;
  __int128 v34;
  char v35;
  __int128 v36;
  _BYTE v37[25];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  int v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char v46;
  uint64_t v47;
  int v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  char v52;
  uint64_t v53;
  int v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  char v58;
  uint64_t v59;
  int v60;
  _BYTE v61[32];
  int v62;
  int v63;
  _BYTE v64[32];
  int v65;
  int v66;
  _BYTE v67[32];
  int v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t *v78;
  uint64_t v79;
  void *v80[3];
  void *v81[3];
  _BYTE *v82;
  _BYTE *v83;

  v4 = *a3;
  if (ZinIrOpLayer::IsANELayer(*a3))
  {
    (*(void (**)(_BYTE **__return_ptr, ZinIrOpLayer *))(*(_QWORD *)v4 + 512))(&v82, v4);
    v20.i64[0] = 1;
    std::vector<unsigned long>::vector(v81, (v83 - v82) >> 3, &v20);
    v20.i64[0] = 0;
    std::vector<unsigned long>::vector(v80, (v83 - v82) >> 3, &v20);
    v77 = 0;
    v78 = 0;
    v79 = 0;
    v76 = 0;
    v5 = *((_QWORD *)v4 + 33);
    v6 = *(_OWORD *)(v5 + 136);
    v7 = *(_OWORD *)(v5 + 168);
    v73 = *(_OWORD *)(v5 + 152);
    v74 = v7;
    v75 = *(_OWORD *)(v5 + 184);
    v71 = *(_OWORD *)(v5 + 120);
    v72 = v6;
    v69 = *(_OWORD *)(v5 + 240);
    v70 = *(_QWORD *)(v5 + 256);
    v8 = (_OWORD *)(v5 + 120);
    if (ZinIrOpLayer::IsNELayer(v4))
    {
      if (!*(_BYTE *)(v5 + 150))
        *v8 = *(_OWORD *)(**(_QWORD **)(a1 + 8) + 648);
      *(_BYTE *)(v5 + 150) = 1;
    }
    else
    {
      *(_BYTE *)(v5 + 256) = 1;
    }
    v20 = vdupq_n_s64(1uLL);
    v27 = 0;
    v28 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v21 = 1;
    v22 = 0;
    v23 = 0;
    v29 = 1;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = xmmword_207A7E150;
    v35 = 0;
    v42 = 0;
    v47 = 0;
    v46 = 0;
    v44 = 0u;
    v45 = 0u;
    v43 = 0u;
    v48 = 0;
    v53 = 0;
    v49 = 0u;
    v50 = 0u;
    v51 = 0u;
    v52 = 0;
    v54 = 0;
    v59 = 0;
    v55 = 0u;
    v56 = 0u;
    v57 = 0u;
    v58 = 0;
    v60 = 0;
    memset(v61, 0, sizeof(v61));
    v36 = 0u;
    memset(v37, 0, sizeof(v37));
    v38 = 0;
    v39 = 0;
    v41 = 0;
    v40 = 0;
    v62 = 1065353216;
    v63 = 0;
    memset(v64, 0, sizeof(v64));
    v65 = 1065353216;
    v66 = 0;
    memset(v67, 0, sizeof(v67));
    v68 = 1065353216;
    DMABuffer::CalculateMinimumSizes(v4, **(_QWORD **)(a1 + 8), v81, v80, 1, 0, (uint64_t)&v20, &v77, (unint64_t *)&v76, 0);
    v9 = v74;
    *(_OWORD *)(v5 + 152) = v73;
    *(_OWORD *)(v5 + 168) = v9;
    *(_OWORD *)(v5 + 184) = v75;
    v10 = v72;
    *v8 = v71;
    *(_OWORD *)(v5 + 136) = v10;
    *(_OWORD *)(v5 + 240) = v69;
    *(_BYTE *)(v5 + 256) = v70;
    v11 = v77;
    if (v78 != v77)
    {
      v12 = 0;
      v13 = 0;
      do
      {
        v14 = *(uint64_t ***)(a1 + 16);
        v17 = v4;
        v18 = 1;
        v19 = v13;
        std::__tree<std::__value_type<MinDMABufferMapKey,long>,std::__map_value_compare<MinDMABufferMapKey,std::__value_type<MinDMABufferMapKey,long>,std::less<MinDMABufferMapKey>,true>,std::allocator<std::__value_type<MinDMABufferMapKey,long>>>::__emplace_unique_key_args<MinDMABufferMapKey,MinDMABufferMapKey,unsigned long &>(v14, (uint64_t)&v17, (uint64_t)&v17, (uint64_t *)&v11[v12]);
        ++v13;
        v11 = v77;
        ++v12;
      }
      while (v13 < v78 - v77);
    }
    v15 = *(uint64_t ***)(a1 + 16);
    v17 = v4;
    v18 = 0;
    v19 = -1;
    std::__tree<std::__value_type<MinDMABufferMapKey,long>,std::__map_value_compare<MinDMABufferMapKey,std::__value_type<MinDMABufferMapKey,long>,std::less<MinDMABufferMapKey>,true>,std::allocator<std::__value_type<MinDMABufferMapKey,long>>>::__emplace_unique_key_args<MinDMABufferMapKey,MinDMABufferMapKey,unsigned long &>(v15, (uint64_t)&v17, (uint64_t)&v17, &v76);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v67);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v64);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v61);
    if (v77)
    {
      v78 = v77;
      operator delete(v77);
    }
    if (v80[0])
    {
      v80[1] = v80[0];
      operator delete(v80[0]);
    }
    if (v81[0])
    {
      v81[1] = v81[0];
      operator delete(v81[0]);
    }
    if (v82)
    {
      v83 = v82;
      operator delete(v82);
    }
  }
  return 0;
}

void sub_206D9B2BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v3);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v2);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v1);
  v6 = *(void **)(v4 - 176);
  if (v6)
  {
    *(_QWORD *)(v4 - 168) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(v4 - 152);
  if (v7)
  {
    *(_QWORD *)(v4 - 144) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(v4 - 128);
  if (v8)
  {
    *(_QWORD *)(v4 - 120) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(v4 - 104);
  if (v9)
  {
    *(_QWORD *)(v4 - 96) = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ZinMirSpatialSplitUtils::BuildMinDMABufferKeyMap(std::map<MinDMABufferMapKey,long> &,ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinMirSpatialSplitUtils::BuildMinDMABufferKeyMap(std::map<MinDMABufferMapKey,long> &,ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirSpatialSplitUtils::BuildMinDMABufferKeyMap(std::map<MinDMABufferMapKey,long> &,ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinMirSpatialSplitUtils::BuildMinDMABufferKeyMap(std::map<MinDMABufferMapKey,long> &,ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

_OWORD *std::__tree<std::__value_type<MinDMABufferMapKey,long>,std::__map_value_compare<MinDMABufferMapKey,std::__value_type<MinDMABufferMapKey,long>,std::less<MinDMABufferMapKey>,true>,std::allocator<std::__value_type<MinDMABufferMapKey,long>>>::__emplace_unique_key_args<MinDMABufferMapKey,MinDMABufferMapKey,unsigned long &>(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void **v7;
  _OWORD *v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t v12;

  v7 = (void **)std::__tree<std::__value_type<MinDMABufferMapKey,long>,std::__map_value_compare<MinDMABufferMapKey,std::__value_type<MinDMABufferMapKey,long>,std::less<MinDMABufferMapKey>,true>,std::allocator<std::__value_type<MinDMABufferMapKey,long>>>::__find_equal<MinDMABufferMapKey>((uint64_t)a1, &v12, a2);
  v8 = *v7;
  if (!*v7)
  {
    v9 = (uint64_t **)v7;
    v8 = operator new(0x40uLL);
    v8[2] = *(_OWORD *)a3;
    v10 = *a4;
    *((_QWORD *)v8 + 6) = *(_QWORD *)(a3 + 16);
    *((_QWORD *)v8 + 7) = v10;
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v12, v9, (uint64_t *)v8);
  }
  return v8;
}

_QWORD *std::__tree<std::__value_type<MinDMABufferMapKey,long>,std::__map_value_compare<MinDMABufferMapKey,std::__value_type<MinDMABufferMapKey,long>,std::less<MinDMABufferMapKey>,true>,std::allocator<std::__value_type<MinDMABufferMapKey,long>>>::__find_equal<MinDMABufferMapKey>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (uint64_t)(v4 + 4);
        if (!MinDMABufferMapKey::operator<(a3, (uint64_t)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!MinDMABufferMapKey::operator<(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t **std::__tree<SpatialDimension>::__emplace_unique_key_args<SpatialDimension,SpatialDimension const&>(uint64_t **a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void ZinMirSpatialSplitUtils::ComputeScheduleAndTensorResidency()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1_5();
  OUTLINED_FUNCTION_2_2(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "CP Allocation failed, line: %d, file: %s", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinMirSpatialSplitUtils::PreprocessForPressureBasedSubgraphIdentification()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1_5();
  OUTLINED_FUNCTION_2_2(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Error: failed workunit selection, line: %d, file: %s", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinMirSpatialSplitUtils::ExecuteDRAMLegalizer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Active NE in DRAM Legalizer failed!\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "DRAM Legalizer failed!\n", a5, a6, a7, a8, 0);
}

void std::__function::__func<ZinMirSpatialSplitUtils::ComputeTemporaryLayerMirInfo(ZinIrControlFlowGraph *,std::set<ZinANELayer *> &)::$_0,std::allocator<ZinMirSpatialSplitUtils::ComputeTemporaryLayerMirInfo(ZinIrControlFlowGraph *,std::set<ZinANELayer *> &)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1_5();
  OUTLINED_FUNCTION_2_2(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Error: failed set active ne, line: %d, file: %s", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_4();
}

void std::__function::__func<ZinMirSpatialSplitUtils::ComputeWorkUnitShapeTileHeight(ZinIrControlFlowGraph *,ZinIrHalParameters const&,std::unordered_map<ZinIrTensor const*,CpAllocUtils::AllocationType> const&,SplitConfiguration const&)::$_0,std::allocator<ZinMirSpatialSplitUtils::ComputeWorkUnitShapeTileHeight(ZinIrControlFlowGraph *,ZinIrHalParameters const&,std::unordered_map<ZinIrTensor const*,CpAllocUtils::AllocationType> const&,SplitConfiguration const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1_5();
  OUTLINED_FUNCTION_2_2(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Error: failed workunit selection, line: %d, file: %s", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_4();
}

uint64_t ZinPEGOCPerf::GetPECostPerPatch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, unint64_t *a8)
{
  unint64_t v8;

  v8 = (a5 + a7 - 1) / a7 * ((a4 + a6 - 1) / a6);
  a8[2] = v8;
  a8[3] = v8;
  *a8 = v8;
  a8[1] = v8;
  return 0;
}

BOOL ZinPEGOCPerf::IsDynamicGOC(ZinPEGOCPerf *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*((_QWORD *)this + 42) + 24);
  return v1 && *(_QWORD *)(v1 + 440) != 0;
}

uint64_t ANECGetValidateNetworkSupportedVersion()
{
  return 2;
}

__CFDictionary *ANECValidateNetworkCreate(std::string::size_type a1, CFDictionaryRef theDict)
{
  const __CFData *Value;
  const __CFData *v5;
  CFTypeID v6;
  const __CFString *v7;
  const __CFString *v8;
  CFTypeID v9;
  const __CFString *v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __CFDictionary *Mutable;
  const __CFString *v20;
  const __CFString *v21;
  CFTypeID v22;
  const __CFString *v23;
  _BOOL8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const __CFDictionary *v32;
  const __CFDictionary *v33;
  CFTypeID v34;
  const __CFDictionary *v35;
  _BOOL8 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const __CFString *v44;
  const __CFString *v45;
  CFTypeID v46;
  const __CFString *v47;
  uint64_t v48;
  char v49;
  const __CFAllocator *v50;
  CFNumberRef v51;
  CFNumberRef v52;
  CFTypeID v53;
  const void *v54;
  _QWORD **v55;
  const void *v56;
  std::string *p_p;
  CFStringRef v58;
  CFStringRef v59;
  CFTypeID v60;
  CFStringRef v61;
  CFMutableDictionaryRef v62;
  const void *v63;
  const char *v64;
  CFStringRef v65;
  CFStringRef v66;
  CFTypeID v67;
  _QWORD *v68;
  _QWORD **v69;
  BOOL v70;
  _BOOL8 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _BOOL8 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _BOOL8 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  std::string __p;
  void *v97[2];
  uint64_t v98;
  void *v99[2];
  uint64_t v100;
  void *v101[2];
  uint64_t v102;
  UInt8 buffer[8];
  _QWORD **v104;
  _QWORD *v105[2];
  CFRange v106;

  v105[0] = 0;
  v105[1] = 0;
  *(_QWORD *)buffer = 0;
  v104 = v105;
  Value = (const __CFData *)CFDictionaryGetValue(theDict, CFSTR("MIL"));
  v5 = Value;
  if (Value)
  {
    v6 = CFGetTypeID(Value);
    if (v6 != CFDataGetTypeID())
      v5 = 0;
  }
  v106.length = CFDataGetLength(v5);
  v106.location = 0;
  CFDataGetBytes(v5, v106, buffer);
  if (v5)
  {
    v7 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("function"));
    v8 = v7;
    if (v7)
    {
      v9 = CFGetTypeID(v7);
      if (v9 == CFStringGetTypeID())
        v10 = v8;
      else
        v10 = 0;
    }
    else
    {
      v10 = 0;
    }
    v101[0] = 0;
    v101[1] = 0;
    v102 = 0;
    if ((ZinGetString(v10, (uint64_t)v101) & 1) == 0)
    {
      v24 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v24)
        ANECValidateNetworkCreate_cold_6(v24, v25, v26, v27, v28, v29, v30, v31);
      Mutable = 0;
      goto LABEL_83;
    }
    v20 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("architecture"));
    v21 = v20;
    if (v20)
    {
      v22 = CFGetTypeID(v20);
      if (v22 == CFStringGetTypeID())
        v23 = v21;
      else
        v23 = 0;
    }
    else
    {
      v23 = 0;
    }
    v99[0] = 0;
    v99[1] = 0;
    v100 = 0;
    if ((ZinGetString(v23, (uint64_t)v99) & 1) == 0)
    {
      v36 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v36)
        ANECValidateNetworkCreate_cold_5(v36, v37, v38, v39, v40, v41, v42, v43);
      Mutable = 0;
      goto LABEL_81;
    }
    v32 = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("parameters"));
    v33 = v32;
    if (v32)
    {
      v34 = CFGetTypeID(v32);
      if (v34 == CFDictionaryGetTypeID())
        v35 = v33;
      else
        v35 = 0;
    }
    else
    {
      v35 = 0;
    }
    v44 = (const __CFString *)CFDictionaryGetValue(v35, CFSTR("scratchPadPath"));
    v45 = v44;
    if (v44)
    {
      v46 = CFGetTypeID(v44);
      if (v46 == CFStringGetTypeID())
        v47 = v45;
      else
        v47 = 0;
    }
    else
    {
      v47 = 0;
    }
    v97[0] = 0;
    v97[1] = 0;
    v98 = 0;
    if ((ZinGetString(v47, (uint64_t)v97) & 1) != 0)
    {
      v48 = *(_QWORD *)buffer;
      std::string::basic_string[abi:ne180100]<0>(&__p, "1.0.15");
      v49 = ValidateMILProgram(v48, (uint64_t)v101, (uint64_t)v99, (uint64_t)v97, (uint64_t)&v104, -1, 0, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((v49 & 1) != 0)
      {
        v50 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
        if (Mutable)
        {
          __p.__r_.__value_.__r.__words[0] = a1;
          v51 = CFNumberCreate(v50, kCFNumberSInt64Type, &__p);
          v52 = v51;
          if (v51)
          {
            v53 = CFGetTypeID(v51);
            if (v53 != CFNumberGetTypeID())
              v52 = 0;
          }
          CFDictionaryAddValue(Mutable, CFSTR("resultsVersion"), v52);
          CFRelease(v52);
          v54 = (const void *)*MEMORY[0x24BDBD270];
          CFDictionaryAddValue(Mutable, CFSTR("supportOptimizedIOBuffer"), (const void *)*MEMORY[0x24BDBD270]);
          v55 = v104;
          if (v104 != v105)
          {
            v56 = (const void *)*MEMORY[0x24BDBD268];
            do
            {
              std::to_string(&__p, (unint64_t)v55[4]);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                p_p = &__p;
              else
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              v58 = CFStringCreateWithCString(v50, (const char *)p_p, 0x8000100u);
              v59 = v58;
              if (v58)
              {
                v60 = CFGetTypeID(v58);
                if (v60 == CFStringGetTypeID())
                  v61 = v59;
                else
                  v61 = 0;
              }
              else
              {
                v61 = 0;
              }
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              v62 = CFDictionaryCreateMutable(v50, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
              CFDictionaryAddValue(Mutable, v61, v62);
              CFRelease(v61);
              CFRelease(v62);
              if (*((_BYTE *)v55 + 40))
                v63 = v54;
              else
                v63 = v56;
              CFDictionaryAddValue(v62, CFSTR("support"), v63);
              if (*((char *)v55 + 71) >= 0)
                v64 = (const char *)(v55 + 6);
              else
                v64 = (const char *)v55[6];
              v65 = CFStringCreateWithCString(v50, v64, 0x8000100u);
              v66 = v65;
              if (v65)
              {
                v67 = CFGetTypeID(v65);
                if (v67 != CFStringGetTypeID())
                  v66 = 0;
              }
              CFDictionaryAddValue(v62, CFSTR("errorMsg"), v66);
              CFRelease(v66);
              v68 = v55[1];
              if (v68)
              {
                do
                {
                  v69 = (_QWORD **)v68;
                  v68 = (_QWORD *)*v68;
                }
                while (v68);
              }
              else
              {
                do
                {
                  v69 = (_QWORD **)v55[2];
                  v70 = *v69 == v55;
                  v55 = v69;
                }
                while (!v70);
              }
              v55 = v69;
            }
            while (v69 != v105);
          }
          goto LABEL_79;
        }
        v87 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v87)
          ANECValidateNetworkCreate_cold_2(v87, v88, v89, v90, v91, v92, v93, v94);
      }
      else
      {
        v79 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v79)
          ANECValidateNetworkCreate_cold_3(v79, v80, v81, v82, v83, v84, v85, v86);
      }
    }
    else
    {
      v71 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v71)
        ANECValidateNetworkCreate_cold_4(v71, v72, v73, v74, v75, v76, v77, v78);
    }
    Mutable = 0;
LABEL_79:
    if (SHIBYTE(v98) < 0)
      operator delete(v97[0]);
LABEL_81:
    if (SHIBYTE(v100) < 0)
      operator delete(v99[0]);
LABEL_83:
    if (SHIBYTE(v102) < 0)
      operator delete(v101[0]);
    goto LABEL_85;
  }
  v11 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v11)
    ANECValidateNetworkCreate_cold_1(v11, v12, v13, v14, v15, v16, v17, v18);
  Mutable = 0;
LABEL_85:
  std::__tree<std::__value_type<unsigned long long,ValidateEntry>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ValidateEntry>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ValidateEntry>>>::destroy((uint64_t)&v104, v105[0]);
  return Mutable;
}

void sub_206D9BD50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,char a34,_QWORD *a35)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  std::__tree<std::__value_type<unsigned long long,ValidateEntry>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ValidateEntry>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ValidateEntry>>>::destroy((uint64_t)&a34, a35);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<unsigned long long,ValidateEntry>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ValidateEntry>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ValidateEntry>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long long,ValidateEntry>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ValidateEntry>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ValidateEntry>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long long,ValidateEntry>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ValidateEntry>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ValidateEntry>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,ValidateEntry>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void ANECValidateNetworkCreate_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid \"MIL\" CFDataRef from MIL-ANEF validation interface!\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ANECValidateNetworkCreate_cold_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Could not create the output dictionary!\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ANECValidateNetworkCreate_cold_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Cannot validate the MIL program from MIL-ANEF validation interface!\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ANECValidateNetworkCreate_cold_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid \"scratchPadPath\" CFStringRef from ANEF interface!\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ANECValidateNetworkCreate_cold_5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid \"architecture\" CFStringRef from MIL-ANEF validation interface!\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ANECValidateNetworkCreate_cold_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid \"function\" CFStringRef from MIL-ANEF validation interface!\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

uint64_t ZinDynamicOffsetCustomBarCmd::ZinDynamicOffsetCustomBarCmd(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v7;
  void **v9;
  void **v10;
  uint64_t *v11;
  uint64_t v12;
  int v15;
  int v16;
  void *__p;
  char v18;
  int *v19;

  *(_OWORD *)(a1 + 8) = 0u;
  v5 = a1 + 8;
  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_QWORD *)(a1 + 52) = a5;
  if (!*(_QWORD *)(a3 + 24))
    ZinAssertImpl("Empty dynamic offsets.");
  v7 = *(_QWORD **)(a3 + 16);
  if (v7)
  {
    v9 = (void **)(a4 + 8);
    do
    {
      std::pair<ZinIrDimension const,ZinIrDynamicOffsetPerAxisInfo>::pair[abi:ne180100]((uint64_t)&v16, (uint64_t)(v7 + 2));
      v15 = v16;
      v10 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a4, &__p);
      if (v9 == v10)
        ZinAssertImpl("Missing livein param descriptor");
      v19 = &v15;
      v11 = std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>(v5, &v15, (uint64_t)&std::piecewise_construct, &v19);
      *((_DWORD *)v11 + 6) = *((_DWORD *)v10 + 14);
      std::string::operator=((std::string *)(v11 + 4), (const std::string *)(v10 + 8));
      v11[7] = (uint64_t)v10[11];
      if (v18 < 0)
        operator delete(__p);
      v7 = (_QWORD *)*v7;
    }
    while (v7);
  }
  if ((a5 & 0xFF00000000) != 0)
  {
    v12 = *(_QWORD *)(a1 + 52);
    if ((v12 & 0xFF00000000) == 0
      || *(_QWORD *)(a1 + 32) > 1uLL
      || *(_DWORD *)(*(_QWORD *)(a1 + 24) + 16) != (_DWORD)v12)
    {
      ZinAssertImpl("Wrap axis should only be specified when the dynamic offset is only along wrap axis.");
    }
  }
  return a1;
}

void sub_206D9C0F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>>>::~__hash_table(v18);
  _Unwind_Resume(a1);
}

BOOL ZinDynamicOffsetCustomBarCmd::HasDynamicOffsetOnlyAlongWrapAxis(ZinDynamicOffsetCustomBarCmd *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)((char *)this + 52);
  return (v1 & 0xFF00000000) != 0
      && *((_QWORD *)this + 4) <= 1uLL
      && *(_DWORD *)(*((_QWORD *)this + 3) + 16) == (_DWORD)v1;
}

uint64_t ZinDynamicOffsetCustomBarCmd::SetBarId(uint64_t this, char a2)
{
  *(_BYTE *)(this + 48) = a2;
  return this;
}

uint64_t ZinDynamicOffsetCustomBarCmd::GetDynamicOffsetInfo(ZinDynamicOffsetCustomBarCmd *this)
{
  return (uint64_t)this + 8;
}

uint64_t ZinDynamicOffsetCustomBarCmd::GetBarId(ZinDynamicOffsetCustomBarCmd *this)
{
  return *((unsigned __int8 *)this + 48);
}

uint64_t *std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *result;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD v20[3];

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 <= v6)
        v4 = v6 % v7;
    }
    else
    {
      v4 = (v7 - 1) & v6;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v9)
    {
      for (result = *v9; result; result = (uint64_t *)*result)
      {
        v11 = result[1];
        if (v11 == v6)
        {
          if (*((_DWORD *)result + 4) == (_DWORD)v6)
            return result;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>(a1, *a2, a4, (uint64_t)v20);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v4 = v6 % v7;
      else
        v4 = v6;
    }
    else
    {
      v4 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v18)
  {
    *(_QWORD *)v20[0] = *v18;
    *v18 = v20[0];
  }
  else
  {
    *(_QWORD *)v20[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v20[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v20[0])
    {
      v19 = *(_QWORD *)(*(_QWORD *)v20[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7)
          v19 %= v7;
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v20[0];
    }
  }
  result = (uint64_t *)v20[0];
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_206D9C390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,SpatialSplitMode>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x40uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  *((_DWORD *)v8 + 4) = **a3;
  *((_QWORD *)v8 + 7) = 0;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  result = std::string::basic_string[abi:ne180100]<0>((_QWORD *)v8 + 4, &byte_207AF6795);
  *((_QWORD *)v8 + 7) = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_206D9C444(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,SpatialSplitMode>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t ZinParseBatchToSpaceUnit(const __CFDictionary *a1, ZinIrBatchToSpaceUnitInfo *a2, CFArrayRef *a3)
{
  const __CFDictionary *Value;
  const __CFDictionary *v6;
  CFTypeID v7;
  const __CFNumber *v8;
  const __CFNumber *v9;
  CFTypeID v10;
  const __CFNumber *v11;
  const __CFNumber *v12;
  CFTypeID v13;
  const void *v14;
  const void *v15;
  CFTypeID v16;
  const void *v17;
  _QWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  const __CFNumber *v22;
  _DWORD *v23;

  Value = (const __CFDictionary *)CFDictionaryGetValue(a1, CFSTR("Params"));
  if (Value && (v6 = Value, v7 = CFGetTypeID(Value), v7 == CFDictionaryGetTypeID()))
  {
    v8 = (const __CFNumber *)CFDictionaryGetValue(v6, CFSTR("FactorX"));
    v9 = v8;
    if (v8)
    {
      v10 = CFGetTypeID(v8);
      if (v10 != CFNumberGetTypeID())
        v9 = 0;
    }
    v11 = (const __CFNumber *)CFDictionaryGetValue(v6, CFSTR("FactorY"));
    v12 = v11;
    if (v11)
    {
      v13 = CFGetTypeID(v11);
      if (v13 != CFNumberGetTypeID())
        v12 = 0;
    }
    v14 = CFDictionaryGetValue(v6, CFSTR("FactorZ"));
    if (v14)
    {
      v15 = v14;
      v16 = CFGetTypeID(v14);
      if (v16 == CFNumberGetTypeID())
        v17 = v15;
      else
        v17 = 0;
    }
    else
    {
      v17 = 0;
    }
    v19 = operator new(0x18uLL);
    *v19 = v9;
    v19[1] = v12;
    v19[2] = v17;
    v20 = (_DWORD *)((char *)a2 + 80);
    if (v9)
    {
      CFNumberGetValue(v9, kCFNumberSInt32Type, v20);
      v12 = (const __CFNumber *)v19[1];
    }
    else
    {
      *v20 = 1;
    }
    v21 = (_DWORD *)((char *)a2 + 84);
    if (v12)
      CFNumberGetValue(v12, kCFNumberSInt32Type, v21);
    else
      *v21 = 1;
    v22 = (const __CFNumber *)v19[2];
    v23 = (_DWORD *)((char *)a2 + 88);
    if (v22)
      CFNumberGetValue(v22, kCFNumberSInt32Type, v23);
    else
      *v23 = 1;
    operator delete(v19);
    return 0;
  }
  else
  {
    ZinIrUnitStatus::SetError(a3, CFSTR("InvalidParamSyntax"));
    return 3;
  }
}

void sub_206D9C5E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__CFString *ZinUnitTypeToCFString(int a1)
{
  if ((a1 - 1) > 0x46)
    return 0;
  else
    return off_24C05FA08[a1 - 1];
}

__CFDictionary *ZinCreateUnit(const ZinIrUnitInfo *a1)
{
  const __CFAllocator *v2;
  __CFDictionary *Mutable;
  const char *v4;
  CFStringRef v5;
  __CFString *v6;
  __CFArray *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  const char *v11;
  CFStringRef v12;
  int v13;
  const void *v14;
  const void *v15;
  CFNumberRef v16;
  int valuePtr;

  v2 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (*((char *)a1 + 31) >= 0)
    v4 = (char *)a1 + 8;
  else
    v4 = (const char *)*((_QWORD *)a1 + 1);
  v5 = CFStringCreateWithCString(v2, v4, 0x8000100u);
  CFDictionaryAddValue(Mutable, CFSTR("Name"), v5);
  CFRelease(v5);
  v6 = ZinUnitTypeToCFString(*((_DWORD *)a1 + 8));
  CFDictionaryAddValue(Mutable, CFSTR("Type"), v6);
  v7 = CFArrayCreateMutable(v2, 0, MEMORY[0x24BDBD690]);
  v8 = *((_QWORD *)a1 + 5);
  if (*((_QWORD *)a1 + 6) != v8)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = (const char *)(v8 + v9);
      if (*(char *)(v8 + v9 + 23) < 0)
        v11 = *(const char **)v11;
      v12 = CFStringCreateWithCString(v2, v11, 0x8000100u);
      CFArrayAppendValue(v7, v12);
      CFRelease(v12);
      ++v10;
      v8 = *((_QWORD *)a1 + 5);
      v9 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)a1 + 6) - v8) >> 3) > v10);
  }
  CFDictionaryAddValue(Mutable, CFSTR("Bottom"), v7);
  CFRelease(v7);
  v13 = *((_DWORD *)a1 + 16);
  if (v13)
  {
    v14 = (const void *)ZinTensorFormatToANECFormat(v13);
    CFDictionaryAddValue(Mutable, CFSTR("InputType"), v14);
  }
  v15 = (const void *)ZinTensorFormatToANECFormat(*((_DWORD *)a1 + 17));
  if (!v15)
    ZinAssertImpl("Invalid or missing output format.");
  CFDictionaryAddValue(Mutable, CFSTR("OutputType"), v15);
  valuePtr = *((_DWORD *)a1 + 18);
  if (valuePtr >= 1)
  {
    v16 = CFNumberCreate(v2, kCFNumberSInt32Type, &valuePtr);
    CFDictionaryAddValue(Mutable, CFSTR("OutputChannels"), v16);
    CFRelease(v16);
  }
  return Mutable;
}

void ZinAddKernelSizeToParamsDict(__CFDictionary *a1, _QWORD *a2, int a3)
{
  uint64_t v6;
  const __CFAllocator *v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  int v11;
  int valuePtr;
  int v13;

  v6 = a2[1];
  valuePtr = *a2;
  v13 = v6;
  v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, &valuePtr);
  v9 = CFNumberCreate(v7, kCFNumberSInt32Type, &v13);
  CFDictionaryAddValue(a1, CFSTR("KernelWidth"), v8);
  CFDictionaryAddValue(a1, CFSTR("KernelHeight"), v9);
  CFRelease(v8);
  CFRelease(v9);
  if (a3)
  {
    v11 = a2[2];
    v10 = CFNumberCreate(v7, kCFNumberSInt32Type, &v11);
    CFDictionaryAddValue(a1, CFSTR("KernelDepth"), v10);
    CFRelease(v10);
  }
}

void ZinAddWeightInfoToParamsDict(__CFDictionary *a1, const void *a2, const void *a3, const void *a4, const void *a5, _BYTE *a6)
{
  const __CFAllocator *v12;
  CFNumberRef v13;
  const void **v14;
  CFNumberRef v15;
  CFNumberRef v16;

  v12 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, a6 + 8);
  CFDictionaryAddValue(a1, a3, v13);
  CFRelease(v13);
  if (a2)
  {
    v14 = (const void **)MEMORY[0x24BDBD270];
    if (!*a6)
      v14 = (const void **)MEMORY[0x24BDBD268];
    CFDictionaryAddValue(a1, a2, *v14);
  }
  v15 = CFNumberCreate(v12, kCFNumberSInt32Type, a6 + 4);
  CFDictionaryAddValue(a1, a4, v15);
  CFRelease(v15);
  v16 = CFNumberCreate(v12, kCFNumberSInt64Type, a6 + 16);
  CFDictionaryAddValue(a1, a5, v16);
  CFRelease(v16);
}

void ZinAddStepsToParamsDict(__CFDictionary *a1, uint64_t a2, int a3)
{
  const __CFAllocator *v6;
  __CFArray *Mutable;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;

  v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  v8 = CFNumberCreate(v6, kCFNumberSInt32Type, (const void *)a2);
  v9 = CFNumberCreate(v6, kCFNumberSInt32Type, (const void *)(a2 + 4));
  CFArrayAppendValue(Mutable, v8);
  CFArrayAppendValue(Mutable, v9);
  CFRelease(v8);
  CFRelease(v9);
  if (a3)
  {
    v10 = CFNumberCreate(v6, kCFNumberSInt32Type, (const void *)(a2 + 8));
    CFArrayAppendValue(Mutable, v10);
    CFRelease(v10);
  }
  CFDictionaryAddValue(a1, CFSTR("Step"), Mutable);
  CFRelease(Mutable);
}

void ZinAddKernelDilationRateToParamsDict(__CFDictionary *a1, char *valuePtr)
{
  const __CFAllocator *v4;
  CFNumberRef v5;
  CFNumberRef v6;

  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, valuePtr);
  v6 = CFNumberCreate(v4, kCFNumberSInt32Type, valuePtr + 4);
  CFDictionaryAddValue(a1, CFSTR("KernelDilationX"), v5);
  CFDictionaryAddValue(a1, CFSTR("KernelDilationY"), v6);
  CFRelease(v5);
  CFRelease(v6);
}

void ZinAddPaddingToParamsDict(__CFDictionary *a1, const ZinIrPadding *a2, int a3)
{
  const __CFAllocator *v6;
  CFNumberRef v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;

  v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, (char *)a2 + 8);
  v8 = CFNumberCreate(v6, kCFNumberSInt32Type, (char *)a2 + 12);
  v9 = CFNumberCreate(v6, kCFNumberSInt32Type, a2);
  v10 = CFNumberCreate(v6, kCFNumberSInt32Type, (char *)a2 + 4);
  CFDictionaryAddValue(a1, CFSTR("PadTop"), v7);
  CFDictionaryAddValue(a1, CFSTR("PadBot"), v8);
  CFDictionaryAddValue(a1, CFSTR("PadLeft"), v9);
  CFDictionaryAddValue(a1, CFSTR("PadRight"), v10);
  CFRelease(v7);
  CFRelease(v8);
  CFRelease(v9);
  CFRelease(v10);
  if (a3)
  {
    v11 = CFNumberCreate(v6, kCFNumberSInt32Type, (char *)a2 + 16);
    v12 = CFNumberCreate(v6, kCFNumberSInt32Type, (char *)a2 + 20);
    CFDictionaryAddValue(a1, CFSTR("PadFront"), v11);
    CFDictionaryAddValue(a1, CFSTR("PadBack"), v12);
    CFRelease(v11);
    CFRelease(v12);
  }
}

const __CFString *ZinIrPaddingModeToCFString(unsigned int a1)
{
  if (a1 > 9)
    return CFSTR("Zero");
  else
    return (const __CFString *)qword_24C05FC40[a1];
}

void ZinSetFormat(void *key, _DWORD *a2, CFMutableDictionaryRef theDict)
{
  int v3;

  v3 = *a2 - 1;
  if (v3 >= 6 || ((0x3Bu >> v3) & 1) == 0)
    ZinAssertImpl("Error: invalid kernel format. It should be Int8, UInt8, FP16, FP32 or E4M3");
  CFDictionaryAddValue(theDict, key, *((const void **)&off_24C05FC90 + v3));
}

void ZinAddSpaceTransformFactorToParamsDict(__CFDictionary *a1, _DWORD *a2, uint64_t a3)
{
  const __CFAllocator *v6;
  CFNumberRef v7;
  CFNumberRef v8;
  CFNumberRef v9;

  v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, (const void *)a3);
  v8 = CFNumberCreate(v6, kCFNumberSInt32Type, (const void *)(a3 + 4));
  v9 = CFNumberCreate(v6, kCFNumberSInt32Type, (const void *)(a3 + 8));
  if (*a2 <= 0x25u && ((1 << *a2) & 0x3D80000000) != 0)
  {
    CFDictionaryAddValue(a1, CFSTR("FactorX"), v7);
    CFDictionaryAddValue(a1, CFSTR("FactorY"), v8);
    CFDictionaryAddValue(a1, CFSTR("FactorZ"), v9);
  }
  CFRelease(v7);
  CFRelease(v8);
  CFRelease(v9);
}

void ZinAddOffsetsToParamsDict(__CFDictionary *a1, uint64_t a2, uint64_t a3, const void *a4)
{
  const __CFAllocator *v5;
  __CFArray *Mutable;
  uint64_t *v7;
  const void *v8;
  const CFDictionaryKeyCallBacks *v9;
  const CFDictionaryValueCallBacks *v10;
  __CFDictionary *v11;
  const __CFString *v12;
  CFNumberRef v13;
  uint64_t *v14;
  const void *v15;
  const CFDictionaryValueCallBacks *v16;
  const char *v17;
  __CFDictionary *v18;
  const __CFString *v19;
  CFStringRef v20;
  int valuePtr;

  v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  v7 = *(uint64_t **)(a2 + 16);
  if (v7)
  {
    v8 = (const void *)*MEMORY[0x24BDBD270];
    v9 = (const CFDictionaryKeyCallBacks *)MEMORY[0x24BDBD6A0];
    v10 = (const CFDictionaryValueCallBacks *)MEMORY[0x24BDBD6B0];
    do
    {
      v11 = CFDictionaryCreateMutable(v5, 0, v9, v10);
      v12 = ZinIrCoordinateToCFString((_DWORD *)v7 + 4);
      CFDictionaryAddValue(v11, CFSTR("Dimension"), v12);
      valuePtr = v7[3];
      v13 = CFNumberCreate(v5, kCFNumberSInt32Type, &valuePtr);
      CFDictionaryAddValue(v11, CFSTR("Offset"), v13);
      if (*((_BYTE *)v7 + 32))
        CFDictionaryAddValue(v11, CFSTR("Circular"), v8);
      CFArrayAppendValue(Mutable, v11);
      CFRelease(v13);
      CFRelease(v11);
      v7 = (uint64_t *)*v7;
    }
    while (v7);
  }
  v14 = *(uint64_t **)(a3 + 16);
  if (v14)
  {
    v15 = (const void *)*MEMORY[0x24BDBD270];
    v16 = (const CFDictionaryValueCallBacks *)MEMORY[0x24BDBD6B0];
    do
    {
      v17 = (const char *)(v14 + 3);
      v18 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x24BDBD6A0], v16);
      v19 = ZinIrCoordinateToCFString((_DWORD *)v14 + 4);
      CFDictionaryAddValue(v18, CFSTR("Dimension"), v19);
      if (*((char *)v14 + 47) < 0)
        v17 = *(const char **)v17;
      v20 = CFStringCreateWithCString(v5, v17, 0x8000100u);
      CFDictionaryAddValue(v18, CFSTR("Offset"), v20);
      if (*((_BYTE *)v14 + 48))
        CFDictionaryAddValue(v18, CFSTR("Circular"), v15);
      CFArrayAppendValue(Mutable, v18);
      CFRelease(v20);
      CFRelease(v18);
      v14 = (uint64_t *)*v14;
    }
    while (v14);
  }
  CFDictionaryAddValue(a1, a4, Mutable);
  CFRelease(Mutable);
}

__CFDictionary *ZinCreatePadUnit(const ZinIrPadUnitInfo *a1)
{
  __CFDictionary *Unit;
  const __CFAllocator *v3;
  __CFDictionary *Mutable;
  CFNumberRef v5;
  CFNumberRef v6;
  CFNumberRef v7;
  CFNumberRef v8;
  __CFArray *v9;
  _DWORD *v10;
  _DWORD *v11;
  __CFDictionary *PaddingInfo;
  CFNumberRef v13;

  Unit = ZinCreateUnit(a1);
  v3 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  ZinAddPaddingToParamsDict(Mutable, (const ZinIrPadUnitInfo *)((char *)a1 + 156), 1);
  v5 = CFNumberCreate(v3, kCFNumberSInt32Type, (char *)a1 + 180);
  CFDictionaryAddValue(Mutable, CFSTR("PadChannelFront"), v5);
  CFRelease(v5);
  v6 = CFNumberCreate(v3, kCFNumberSInt32Type, (char *)a1 + 184);
  CFDictionaryAddValue(Mutable, CFSTR("PadChannelBack"), v6);
  CFRelease(v6);
  v7 = CFNumberCreate(v3, kCFNumberSInt32Type, (char *)a1 + 188);
  CFDictionaryAddValue(Mutable, CFSTR("PadBatchFront"), v7);
  CFRelease(v7);
  v8 = CFNumberCreate(v3, kCFNumberSInt32Type, (char *)a1 + 192);
  CFDictionaryAddValue(Mutable, CFSTR("PadBatchBack"), v8);
  CFRelease(v8);
  v9 = CFArrayCreateMutable(v3, 1, MEMORY[0x24BDBD690]);
  v10 = (_DWORD *)*((_QWORD *)a1 + 25);
  v11 = (_DWORD *)*((_QWORD *)a1 + 26);
  while (v10 != v11)
  {
    PaddingInfo = ZinCreatePaddingInfo(v10);
    CFArrayAppendValue(v9, PaddingInfo);
    CFRelease(PaddingInfo);
    v10 += 2;
  }
  CFDictionaryAddValue(Mutable, CFSTR("PaddingInfo"), v9);
  CFRelease(v9);
  v13 = CFNumberCreate(v3, kCFNumberSInt16Type, (char *)a1 + 224);
  CFDictionaryAddValue(Mutable, CFSTR("BackgroundValue"), v13);
  CFRelease(v13);
  CFDictionaryAddValue(Unit, CFSTR("Params"), Mutable);
  CFRelease(Mutable);
  return Unit;
}

__CFDictionary *ZinCreateFurthestPointSamplingUnit(int *a1)
{
  __CFDictionary *Unit;
  const __CFAllocator *v3;
  __CFDictionary *Mutable;
  CFNumberRef v5;
  const __CFString *v6;

  Unit = ZinCreateUnit((const ZinIrUnitInfo *)a1);
  v3 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v5 = CFNumberCreate(v3, kCFNumberSInt32Type, a1 + 20);
  CFDictionaryAddValue(Mutable, CFSTR("CentroidCount"), v5);
  CFRelease(v5);
  v6 = ZinIrFurthestPointSamplingDistanceMetricToCFString(a1[21]);
  CFDictionaryAddValue(Mutable, CFSTR("DistanceMetric"), v6);
  CFDictionaryAddValue(Unit, CFSTR("Params"), Mutable);
  CFRelease(Mutable);
  return Unit;
}

void ZinIrPEUnit::ZinIrPEUnit(ZinIrPEUnit *this, const ZinIrPEUnitInfo *a2)
{
  void *__p;
  void *v5;
  uint64_t v6;

  __p = 0;
  v5 = 0;
  v6 = 0;
  ZinIrUnit::ZinIrUnit(this, (uint64_t)&__p);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
  *(_QWORD *)this = &unk_24C015C60;
  ZinIrPEUnitInfo::ZinIrPEUnitInfo((ZinIrPEUnit *)((char *)this + 56), a2);
  *((_OWORD *)this + 64) = 0u;
}

void sub_206D9D3CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  ZinIrUnit *v11;

  ZinIrUnit::~ZinIrUnit(v11);
  _Unwind_Resume(a1);
}

uint64_t ZinIrPEUnit::CreateCommonSubLayers@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  float v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  ZinIrKernel *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  ZinIrKernel *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  ZinIrKernel *v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  _OWORD *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  ZinIrKernel *v44;
  uint64_t v45;
  ZinIrGOCUnit *v46;
  uint64_t v47;
  float v48;
  uint64_t v49;
  _OWORD *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  ZinIrKernel *v54;
  uint64_t v55;
  ZinIrQuantUnit *v56;
  uint64_t v57;
  _OWORD *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  void *__p[2];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  int v69;
  void *v70;
  void *v71;
  char *v72;

  v6 = result;
  *(_QWORD *)(a4 + 48) = 0;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  if (*(_BYTE *)(result + 248))
  {
    v8 = operator new();
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)&v63 = 0;
    ZinIrNeuronUnit::ZinIrNeuronUnit(v8, v6 + 136, __p, v9);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v10 = *(_QWORD *)(v6 + 8);
    v66 = *(_OWORD *)(v10 + 64);
    v67 = *(_OWORD *)(v10 + 80);
    v68 = *(_OWORD *)(v10 + 96);
    v69 = *(_DWORD *)(v10 + 112);
    *(_OWORD *)__p = *(_OWORD *)v10;
    v63 = *(_OWORD *)(v10 + 16);
    v64 = *(_OWORD *)(v10 + 32);
    v65 = *(_OWORD *)(v10 + 48);
    v11 = operator new(0x78uLL);
    v71 = (char *)v11 + 120;
    v72 = (char *)v11 + 120;
    v12 = v67;
    v11[4] = v66;
    v11[5] = v12;
    v11[6] = v68;
    *((_DWORD *)v11 + 28) = v69;
    v13 = v63;
    *v11 = *(_OWORD *)__p;
    v11[1] = v13;
    v14 = v65;
    v11[2] = v64;
    v11[3] = v14;
    v70 = v11;
    ZinIrUnit::SetBottomInfo(v8, (uint64_t)&v70);
    if (v70)
    {
      v71 = v70;
      operator delete(v70);
    }
    __p[0] = 0;
    *(_QWORD *)a4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v8 + 80))(v8, a2, a3, __p);
    v15 = (ZinIrKernel *)__p[0];
    __p[0] = 0;
    if (v15)
    {
      ZinIrKernel::~ZinIrKernel(v15);
      MEMORY[0x20BD002F8](v16);
    }
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  if (*(_BYTE *)(v6 + 368))
  {
    v17 = operator new();
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)&v63 = 0;
    ZinIrNeuronUnit::ZinIrNeuronUnit(v17, v6 + 256, __p, v18);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v19 = *(_QWORD *)(v6 + 8);
    v20 = *(_OWORD *)(v19 + 200);
    v66 = *(_OWORD *)(v19 + 184);
    v67 = v20;
    v68 = *(_OWORD *)(v19 + 216);
    v69 = *(_DWORD *)(v19 + 232);
    v21 = *(_OWORD *)(v19 + 136);
    *(_OWORD *)__p = *(_OWORD *)(v19 + 120);
    v63 = v21;
    v22 = *(_OWORD *)(v19 + 168);
    v64 = *(_OWORD *)(v19 + 152);
    v65 = v22;
    v23 = operator new(0x78uLL);
    v71 = (char *)v23 + 120;
    v72 = (char *)v23 + 120;
    v24 = v67;
    v23[4] = v66;
    v23[5] = v24;
    v23[6] = v68;
    *((_DWORD *)v23 + 28) = v69;
    v25 = v63;
    *v23 = *(_OWORD *)__p;
    v23[1] = v25;
    v26 = v65;
    v23[2] = v64;
    v23[3] = v26;
    v70 = v23;
    ZinIrUnit::SetBottomInfo(v17, (uint64_t)&v70);
    if (v70)
    {
      v71 = v70;
      operator delete(v70);
    }
    __p[0] = 0;
    *(_QWORD *)(a4 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v17 + 80))(v17, a2, a3, __p);
    v27 = (ZinIrKernel *)__p[0];
    __p[0] = 0;
    if (v27)
    {
      ZinIrKernel::~ZinIrKernel(v27);
      MEMORY[0x20BD002F8](v28);
    }
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  if (*(_BYTE *)(v6 + 464))
  {
    v29 = operator new();
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)&v63 = 0;
    ZinIrEWUnit::ZinIrEWUnit(v29, v6 + 376, __p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v30 = *(_QWORD *)(v6 + 8);
    v66 = *(_OWORD *)(v30 + 64);
    v67 = *(_OWORD *)(v30 + 80);
    v68 = *(_OWORD *)(v30 + 96);
    v69 = *(_DWORD *)(v30 + 112);
    *(_OWORD *)__p = *(_OWORD *)v30;
    v63 = *(_OWORD *)(v30 + 16);
    v64 = *(_OWORD *)(v30 + 32);
    v65 = *(_OWORD *)(v30 + 48);
    v31 = operator new(0x78uLL);
    v71 = (char *)v31 + 120;
    v72 = (char *)v31 + 120;
    v32 = v67;
    v31[4] = v66;
    v31[5] = v32;
    v31[6] = v68;
    *((_DWORD *)v31 + 28) = v69;
    v33 = v63;
    *v31 = *(_OWORD *)__p;
    v31[1] = v33;
    v34 = v65;
    v31[2] = v64;
    v31[3] = v34;
    v70 = v31;
    ZinIrUnit::SetBottomInfo(v29, (uint64_t)&v70);
    if (v70)
    {
      v71 = v70;
      operator delete(v70);
    }
    __p[0] = 0;
    *(_QWORD *)(a4 + 16) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v29 + 80))(v29, a2, a3, __p);
    v35 = (ZinIrKernel *)__p[0];
    __p[0] = 0;
    if (v35)
    {
      ZinIrKernel::~ZinIrKernel(v35);
      MEMORY[0x20BD002F8](v36);
    }
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  }
  if (*(_BYTE *)(v6 + 584))
  {
    v37 = operator new();
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)&v63 = 0;
    ZinIrNeuronUnit::ZinIrNeuronUnit(v37, v6 + 472, __p, v38);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v39 = *(_QWORD *)(v6 + 8);
    v66 = *(_OWORD *)(v39 + 64);
    v67 = *(_OWORD *)(v39 + 80);
    v68 = *(_OWORD *)(v39 + 96);
    v69 = *(_DWORD *)(v39 + 112);
    *(_OWORD *)__p = *(_OWORD *)v39;
    v63 = *(_OWORD *)(v39 + 16);
    v64 = *(_OWORD *)(v39 + 32);
    v65 = *(_OWORD *)(v39 + 48);
    v40 = operator new(0x78uLL);
    v71 = (char *)v40 + 120;
    v72 = (char *)v40 + 120;
    v41 = v67;
    v40[4] = v66;
    v40[5] = v41;
    v40[6] = v68;
    *((_DWORD *)v40 + 28) = v69;
    v42 = v63;
    *v40 = *(_OWORD *)__p;
    v40[1] = v42;
    v43 = v65;
    v40[2] = v64;
    v40[3] = v43;
    v70 = v40;
    ZinIrUnit::SetBottomInfo(v37, (uint64_t)&v70);
    if (v70)
    {
      v71 = v70;
      operator delete(v70);
    }
    __p[0] = 0;
    *(_QWORD *)(a4 + 24) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v37 + 80))(v37, a2, a3, __p);
    v44 = (ZinIrKernel *)__p[0];
    __p[0] = 0;
    if (v44)
    {
      ZinIrKernel::~ZinIrKernel(v44);
      MEMORY[0x20BD002F8](v45);
    }
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  }
  if (*(_BYTE *)(v6 + 744))
  {
    std::string::basic_string[abi:ne180100]<0>(&v70, "1.0.14");
    ZinIrVersion::ZinIrVersion(__p, &v70);
    v46 = (ZinIrGOCUnit *)operator new();
    ZinIrGOCUnit::ZinIrGOCUnit(v46, (const ZinIrGOCUnitInfo *)(v6 + 592), (const ZinIrVersion *)__p);
    ZinIrVersion::~ZinIrVersion(__p);
    if (SHIBYTE(v72) < 0)
      operator delete(v70);
    *(_QWORD *)(a4 + 32) = (*(uint64_t (**)(ZinIrGOCUnit *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v46 + 80))(v46, a2, a3, v6 + 1024);
    result = (*(uint64_t (**)(ZinIrGOCUnit *))(*(_QWORD *)v46 + 8))(v46);
  }
  if (*(_BYTE *)(v6 + 864))
  {
    v47 = operator new();
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)&v63 = 0;
    ZinIrNeuronUnit::ZinIrNeuronUnit(v47, v6 + 752, __p, v48);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v49 = *(_QWORD *)(v6 + 8);
    v66 = *(_OWORD *)(v49 + 64);
    v67 = *(_OWORD *)(v49 + 80);
    v68 = *(_OWORD *)(v49 + 96);
    v69 = *(_DWORD *)(v49 + 112);
    *(_OWORD *)__p = *(_OWORD *)v49;
    v63 = *(_OWORD *)(v49 + 16);
    v64 = *(_OWORD *)(v49 + 32);
    v65 = *(_OWORD *)(v49 + 48);
    v50 = operator new(0x78uLL);
    v71 = (char *)v50 + 120;
    v72 = (char *)v50 + 120;
    v51 = v67;
    v50[4] = v66;
    v50[5] = v51;
    v50[6] = v68;
    *((_DWORD *)v50 + 28) = v69;
    v52 = v63;
    *v50 = *(_OWORD *)__p;
    v50[1] = v52;
    v53 = v65;
    v50[2] = v64;
    v50[3] = v53;
    v70 = v50;
    ZinIrUnit::SetBottomInfo(v47, (uint64_t)&v70);
    if (v70)
    {
      v71 = v70;
      operator delete(v70);
    }
    __p[0] = 0;
    *(_QWORD *)(a4 + 40) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v47 + 80))(v47, a2, a3, __p);
    v54 = (ZinIrKernel *)__p[0];
    __p[0] = 0;
    if (v54)
    {
      ZinIrKernel::~ZinIrKernel(v54);
      MEMORY[0x20BD002F8](v55);
    }
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  }
  if (*(_BYTE *)(v6 + 1016))
  {
    v56 = (ZinIrQuantUnit *)operator new();
    ZinIrQuantUnit::ZinIrQuantUnit(v56, (const ZinIrQuantUnitInfo *)(v6 + 872));
    v57 = *(_QWORD *)(v6 + 8);
    *(_DWORD *)v57 = 3;
    v66 = *(_OWORD *)(v57 + 64);
    v67 = *(_OWORD *)(v57 + 80);
    v68 = *(_OWORD *)(v57 + 96);
    v69 = *(_DWORD *)(v57 + 112);
    *(_OWORD *)__p = *(_OWORD *)v57;
    v63 = *(_OWORD *)(v57 + 16);
    v64 = *(_OWORD *)(v57 + 32);
    v65 = *(_OWORD *)(v57 + 48);
    v58 = operator new(0x78uLL);
    v71 = (char *)v58 + 120;
    v72 = (char *)v58 + 120;
    v59 = v67;
    v58[4] = v66;
    v58[5] = v59;
    v58[6] = v68;
    *((_DWORD *)v58 + 28) = v69;
    v60 = v63;
    *v58 = *(_OWORD *)__p;
    v58[1] = v60;
    v61 = v65;
    v58[2] = v64;
    v58[3] = v61;
    v70 = v58;
    ZinIrUnit::SetBottomInfo((uint64_t)v56, (uint64_t)&v70);
    if (v70)
    {
      v71 = v70;
      operator delete(v70);
    }
    *(_QWORD *)(a4 + 48) = (*(uint64_t (**)(ZinIrQuantUnit *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v56 + 80))(v56, a2, a3, v6 + 1032);
    return (*(uint64_t (**)(ZinIrQuantUnit *))(*(_QWORD *)v56 + 8))(v56);
  }
  return result;
}

void sub_206D9DC14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  _Unwind_Resume(a1);
}

uint64_t ZinIrPEUnit::CreateCommonSubKernels(ZinIrPEUnit *this, const ZinIrHalParameters *a2, ZinIrFileManager *a3, const ZinWeightFileInfo *a4, ZinIrUnitStatus *a5)
{
  ZinIrGOCUnit *v10;
  uint64_t v11;
  ZinIrQuantUnit *v12;
  void *__p[2];
  char v15;
  void *v16[6];

  if (!*((_BYTE *)this + 744))
    goto LABEL_11;
  std::string::basic_string[abi:ne180100]<0>(__p, "1.0.14");
  ZinIrVersion::ZinIrVersion(v16, __p);
  v10 = (ZinIrGOCUnit *)operator new();
  ZinIrGOCUnit::ZinIrGOCUnit(v10, (ZinIrPEUnit *)((char *)this + 592), (const ZinIrVersion *)v16);
  ZinIrVersion::~ZinIrVersion(v16);
  if (v15 < 0)
    operator delete(__p[0]);
  v11 = (*(uint64_t (**)(ZinIrGOCUnit *, const ZinIrHalParameters *, ZinIrFileManager *, const ZinWeightFileInfo *, _QWORD, char *, ZinIrUnitStatus *))(*(_QWORD *)v10 + 32))(v10, a2, a3, a4, 0, (char *)this + 1024, a5);
  (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v10 + 8))(v10);
  if (!(_DWORD)v11)
  {
LABEL_11:
    if (!*((_BYTE *)this + 1016))
      return 0;
    v12 = (ZinIrQuantUnit *)operator new();
    ZinIrQuantUnit::ZinIrQuantUnit(v12, (ZinIrPEUnit *)((char *)this + 872));
    v11 = (*(uint64_t (**)(ZinIrQuantUnit *, const ZinIrHalParameters *, ZinIrFileManager *, const ZinWeightFileInfo *, _QWORD, char *, ZinIrUnitStatus *))(*(_QWORD *)v12 + 32))(v12, a2, a3, a4, 0, (char *)this + 1032, a5);
    (*(void (**)(ZinIrQuantUnit *))(*(_QWORD *)v12 + 8))(v12);
    if (!(_DWORD)v11)
      return 0;
  }
  return v11;
}

void sub_206D9DEC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  _Unwind_Resume(a1);
}

uint64_t ZinIrOpt::NegateReluNegate(uint64_t **this, ZinIrOpLayerGraph *a2, ZinIrOpLayer *a3)
{
  uint64_t Hal;
  const ZinIrOpLayer *v6;
  ZinIrOpLayer *v7;
  ZinOpLayerUtils *SingleNextLayer;
  const ZinIrOpLayer *v9;
  ZinMirTensorTransform *v10;
  ZinIrOpLayer *v11;
  ZinOpLayerUtils *v12;
  const ZinIrOpLayer *v13;
  uint64_t **v14;
  size_t v15;
  void *p_p;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  ZinIrOpLayer *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  _OWORD v40[2];
  int v41;
  _QWORD v42[2];
  uint64_t v43;
  std::__shared_weak_count *v44;
  void *__p;
  void *v46;
  void *v47;
  uint64_t v48;
  int v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::string v54;
  std::string v55;
  _QWORD v56[3];
  char v57;
  ZinIrOpLayerGraph *v58;
  std::__shared_weak_count *v59;
  uint64_t **v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*((_QWORD *)a2 + 2) + 160));
  if (!*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal) + 1883))
    return 0;
  if (!ZinOpLayerUtils::IsNegateGOC(a2, v6))
    return 0;
  SingleNextLayer = (ZinOpLayerUtils *)ZinMirTensorTransform::GetSingleNextLayer(a2, v7);
  if (!SingleNextLayer)
    return 0;
  v10 = SingleNextLayer;
  if (!ZinOpLayerUtils::IsReLU(SingleNextLayer, v9))
    return 0;
  v12 = (ZinOpLayerUtils *)ZinMirTensorTransform::GetSingleNextLayer(v10, v11);
  if (!v12)
    return 0;
  v14 = (uint64_t **)v12;
  if (!ZinOpLayerUtils::IsNegateGOC(v12, v13))
    return 0;
  if (*((char *)a2 + 47) >= 0)
    v15 = *((unsigned __int8 *)a2 + 47);
  else
    v15 = *((_QWORD *)a2 + 4);
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v15 + 7);
  if (SHIBYTE(v47) < 0)
    p_p = __p;
  if (v15)
  {
    if (*((char *)a2 + 47) >= 0)
      v17 = (char *)a2 + 24;
    else
      v17 = (char *)*((_QWORD *)a2 + 3);
    memmove(p_p, v17, v15);
  }
  strcpy((char *)p_p + v15, "_ewmin0");
  ZinObjectNameFactory::ZinObjectNameFactory(v56, &__p);
  if (SHIBYTE(v47) < 0)
    operator delete(__p);
  ZinObjectNameFactory::CreateName((uint64_t)v56, 1u, &v55);
  ZinObjectNameFactory::CreateName((uint64_t)v56, 0, &v54);
  v18 = operator new();
  ZinIrScaledEWInfo::ZinIrScaledEWInfo(v18, 4, 0, 0, 1.0, 1.0, 0.0);
  v53 = v18;
  v19 = *((_QWORD *)a2 + 2);
  v20 = ((uint64_t (*)(uint64_t **, _QWORD, _QWORD))(*v14)[4])(v14, 0, 0);
  v21 = *(_DWORD *)(v20 + 88);
  v50 = 0;
  v58 = 0;
  v59 = 0;
  LODWORD(__p) = 0;
  v47 = 0;
  v48 = 0;
  v46 = 0;
  v49 = 0;
  ZinIrTensor::CreateTensor(v19, v21, (__int128 *)(v20 + 48), (__int128 *)&v54, &v50, (uint64_t *)&v58, (unsigned int *)&__p, &v51);
  v22 = v59;
  if (v59)
  {
    p_shared_owners = (unint64_t *)&v59->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v50;
  v50 = 0;
  if (v25)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v50, v25);
  v26 = operator new();
  v27 = (ZinIrOpLayer *)v26;
  v43 = v51;
  v44 = v52;
  if (v52)
  {
    v28 = (unint64_t *)&v52->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  ZinScaledElementWiseLayer::ZinScaledElementWiseLayer(v26, &v53, &v43, &v55);
  v30 = v44;
  if (v44)
  {
    v31 = (unint64_t *)&v44->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v58 = a2;
  v59 = (std::__shared_weak_count *)v10;
  v60 = v14;
  v42[0] = &v58;
  v42[1] = 3;
  Layer2TDMapper::SourceLayer::SourceLayer(&__p, v42);
  ZinIrOpLayerGraph::AddNode(this, v27, (ZinIrOpLayer ***)&__p);
  __p = &unk_24C02BB18;
  if (v46)
  {
    v47 = v46;
    operator delete(v46);
  }
  memset(v40, 0, sizeof(v40));
  v41 = 1065353216;
  v33 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)this, v14, v27, v40);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v40);
  if ((v33 & 1) != 0)
  {
    __p = 0;
    v46 = 0;
    v47 = 0;
    std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&__p, *((const void **)a2 + 11), *((_QWORD *)a2 + 12), (uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 3);
    ZinIrOpLayerGraph::AddEdge((uint64_t)this, *(_QWORD *)__p, (uint64_t)v27, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)this, a2, 0);
    ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)this, v10, 0);
    ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)this, (ZinIrOpLayer *)v14, 0);
    if (__p)
    {
      v46 = __p;
      operator delete(__p);
    }
    v34 = 0;
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinUnflattenCompositeLayer::MakeUnflattenCompositeLayer();
    v34 = 3;
  }
  v36 = v52;
  if (v52)
  {
    v37 = (unint64_t *)&v52->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = v53;
  v53 = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  v56[0] = off_24C01FBB0;
  if (v57 < 0)
    operator delete((void *)v56[1]);
  return v34;
}

void sub_206D9E3F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  uint64_t v35;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  v35 = a27;
  a27 = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  if (a33 < 0)
    operator delete(__p);
  if (*(char *)(v33 - 137) < 0)
    operator delete(*(void **)(v33 - 160));
  *(_QWORD *)(v33 - 136) = off_24C01FBB0;
  if (*(char *)(v33 - 105) < 0)
    operator delete(*(void **)(v33 - 128));
  _Unwind_Resume(a1);
}

__int128 *ZinIrHalU1::GetParams(ZinIrHalU1 *this)
{
  unsigned __int8 v1;
  __int128 v3;
  _BYTE v4[32];
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[11];
  _OWORD v10[6];
  _OWORD v11[2];
  uint64_t v12;
  int v13;
  uint64_t v14;
  int64x2_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  {
    ZinIrHalU1::GetParams(void)const::ZinIrHalU1Parameters = xmmword_207A9CE40;
    dword_254525340 = 8;
    unk_254525348 = xmmword_207A895F0;
    unk_254525358 = xmmword_207A7E070;
    unk_254525368 = vdupq_n_s64(0x3FFuLL);
    unk_254525378 = xmmword_207A9CE50;
    unk_254525388 = xmmword_207A9CE60;
    unk_254525398 = vdupq_n_s64(0x3FuLL);
    unk_2545253A8 = vdupq_n_s64(1uLL);
    unk_2545253B8 = xmmword_207A9CE70;
    unk_2545253C8 = xmmword_207A9CE80;
    unk_2545253D8 = unk_2545253A8;
    *(_QWORD *)&v3 = 255;
    *((_QWORD *)&v3 + 1) = 255;
    unk_2545253E8 = v3;
    qword_2545253F8 = 1;
    xmmword_254525400 = xmmword_207A9CF28;
    unk_254525410 = unk_207A9CF38;
    xmmword_254525420 = xmmword_207A9CF28;
    unk_254525430 = unk_207A9CF38;
    qword_254525450 = 4;
    xmmword_254525440 = xmmword_207A9CF48;
    xmmword_254525458 = xmmword_207A89620;
    xmmword_254525468 = xmmword_207A9CE90;
    xmmword_254525478 = xmmword_207A9CE90;
    xmmword_254525488 = unk_2545253A8;
    xmmword_254525498 = xmmword_207A9CE90;
    xmmword_2545254A8 = xmmword_207A9CE90;
    xmmword_2545254B8 = xmmword_207A9CEA0;
    xmmword_2545254C8 = xmmword_207A9CEB0;
    xmmword_2545254D8 = xmmword_207A7D480;
    xmmword_2545254E8 = xmmword_207A7D420;
    xmmword_2545254F8 = xmmword_207A89640;
    xmmword_254525508 = xmmword_207A9CEC0;
    xmmword_254525518 = xmmword_207A9CED0;
    xmmword_254525528 = xmmword_207A9CEE0;
    xmmword_254525538 = xmmword_207A7E080;
    xmmword_254525548 = xmmword_207A7D550;
    xmmword_254525558 = xmmword_207A89670;
    xmmword_254525568 = xmmword_207A9CEF0;
    xmmword_254525578 = xmmword_207A9CF00;
    qword_254525598 = 0;
    LOBYTE(v3) = 0;
    BYTE8(v3) = 0;
    xmmword_254525588 = v3;
    xmmword_2545255A0 = xmmword_207A9CF10;
    word_2545255B0 = 1;
    xmmword_2545255B8 = xmmword_207A7D4C0;
    xmmword_2545255C8 = xmmword_207A7D4D0;
    xmmword_2545255D8 = xmmword_207A7D4E0;
    qword_2545255E8 = 0x10000;
    byte_2545255F0 = 122;
    xmmword_2545255F8 = xmmword_207A7D4F0;
    dword_254525608 = 520097776;
    qword_25452560C = 0xFFFFFFEB0000000BLL;
    xmmword_254525618 = xmmword_207A89680;
    xmmword_254525628 = xmmword_207A89690;
    xmmword_254525638 = xmmword_207A7D520;
    v15 = vdupq_n_s64(8uLL);
    std::vector<std::pair<unsigned long,unsigned long>>::vector[abi:ne180100](&qword_254525648, (uint64_t)&v15, 1uLL);
    xmmword_254525660 = xmmword_207A7D530;
    *(_OWORD *)algn_254525670 = xmmword_207A7D540;
    xmmword_254525680 = xmmword_207A9CEF0;
    unk_254525690 = vdupq_n_s64(1uLL);
    xmmword_2545256A0 = (__int128)vdupq_n_s64(8uLL);
    unk_2545256B0 = xmmword_207A7D550;
    qword_2545256C0 = 1;
    unk_2545256C8 = 0u;
    unk_2545256D8 = 0u;
    unk_2545256E8 = 0u;
    unk_2545256F8 = 0u;
    unk_254525708 = 0u;
    unk_254525718 = 0u;
    unk_254525728 = 0u;
    unk_254525738 = xmmword_207A7F3C0;
    unk_254525748 = xmmword_207A7D4F0;
    xmmword_254525758 = 0u;
    xmmword_254525768 = 0u;
    qword_254525778 = 12;
    word_254525780 = 1;
    dword_254525782 = 16843009;
    byte_254525786 = 1;
    dword_254525787 = 0;
    word_25452578B = 256;
    xmmword_25452578D = 0u;
    dword_25452579D = 16842752;
    *(uint64_t *)((char *)&qword_2545257A1 + 5) = 0;
    qword_2545257A1 = 0;
    word_2545257AE = 257;
    xmmword_2545257B0 = xmmword_207A7D5D0;
    unk_2545257C0 = xmmword_207A7D5E0;
    qword_2545257D0 = 40;
    xmmword_2545257D8 = 0u;
    byte_2545257F0 = 0;
    qword_2545257E8 = 0;
    *(uint64_t *)((char *)&qword_2545257F8 + 5) = 0;
    qword_2545257F8 = 0;
    qword_254525805 = 0x100010101010101;
    qword_25452580D = 0;
    *(_DWORD *)((char *)&qword_25452580D + 7) = 0;
    word_254525818 = 257;
    byte_25452581A = 1;
    qword_25452581B = 0;
    word_254525823 = 257;
    dword_254525825 = 0;
    byte_254525829 = 0;
    qword_254525838 = -1;
    unk_254525840 = -1;
    qword_254525830 = 128;
    word_254525848 = 0;
    dword_25452584C = 1;
    word_254525850 = 257;
    qword_254525852 = 0;
    *(uint64_t *)((char *)&qword_254525852 + 7) = 0;
    qword_254525861 = 0x10000000606;
    byte_254525869 = 0;
    std::string::basic_string[abi:ne180100]<0>(&qword_254525870, "None");
    qword_254525888 = 0;
    unk_2545258A0 = xmmword_207A7D5F0;
    dword_254525894 = 0;
    unk_254525898 = 0;
    dword_254525890 = 1071225242;
    unk_2545258B0 = vdupq_n_s64(0x40uLL);
    unk_2545258C0 = xmmword_207A7D530;
    qword_2545258D0 = 8;
    byte_2545258D8 = 0;
    unk_2545258DC = 1048576000;
    byte_2545258E4 = 0;
    v14 = 0x200000001;
    std::vector<ZinIrPaddingMode>::vector[abi:ne180100](&qword_2545258E8, &v14, 2uLL);
    v12 = 0x100000002;
    v13 = 0;
    std::vector<ZinIrPoolingMode>::vector[abi:ne180100](&qword_254525900, &v12, 3uLL);
    v10[4] = xmmword_207A9CFA0;
    v10[5] = unk_207A9CFB0;
    v11[0] = xmmword_207A9CFC0;
    *(_OWORD *)((char *)v11 + 12) = *(__int128 *)((char *)&xmmword_207A9CFC0 + 12);
    v10[0] = xmmword_207A9CF60;
    v10[1] = unk_207A9CF70;
    v10[2] = xmmword_207A9CF80;
    v10[3] = unk_207A9CF90;
    std::vector<ZinIrNeuronType>::vector[abi:ne180100](&qword_254525918, v10, 0x1FuLL);
    v9[8] = xmmword_207A9D05C;
    v9[9] = unk_207A9D06C;
    v9[10] = xmmword_207A9D07C;
    v9[4] = xmmword_207A9D01C;
    v9[5] = unk_207A9D02C;
    v9[6] = xmmword_207A9D03C;
    v9[7] = unk_207A9D04C;
    v9[0] = xmmword_207A9CFDC;
    v9[1] = unk_207A9CFEC;
    v9[2] = xmmword_207A9CFFC;
    v9[3] = unk_207A9D00C;
    std::vector<ZinIrNonLinearMode>::vector[abi:ne180100](&qword_254525930, v9, 0x2CuLL);
    qword_254525950 = 0;
    qword_254525958 = 0;
    qword_254525948 = (uint64_t)&qword_254525950;
    word_254525960 = 0;
    byte_254525962 = 1;
    *(_DWORD *)algn_254525963 = 0;
    qword_254525968 = 0;
    dword_254525970 = 0;
    xmmword_254525978 = 0u;
    unk_254525988 = 0u;
    word_254525998 = 1;
    *(_OWORD *)&algn_25452599A[6] = xmmword_207A9D090;
    *(_OWORD *)&algn_25452599A[22] = unk_207A9D0A0;
    qword_2545259C0 = 1;
    xmmword_2545259C8 = xmmword_207A896A0;
    *(_OWORD *)v4 = xmmword_207A9D0B8;
    *(_OWORD *)&v4[16] = unk_207A9D0C8;
    v5 = xmmword_207A9D0D8;
    std::vector<double>::vector[abi:ne180100](&qword_2545259D8, v4, 6uLL);
    *(_OWORD *)v4 = xmmword_207A9D0E8;
    *(_QWORD *)&v4[16] = 0x41CAD27480000000;
    std::vector<double>::vector[abi:ne180100](&qword_2545259F0, v4, 3uLL);
    *(_OWORD *)v4 = xmmword_207A9D100;
    *(_QWORD *)&v4[16] = 0x41DFC8BFD0000000;
    std::vector<double>::vector[abi:ne180100](&qword_254525A08, v4, 3uLL);
    v5 = xmmword_207A9D138;
    v6 = unk_207A9D148;
    v7 = xmmword_207A9D158;
    v8 = unk_207A9D168;
    *(_OWORD *)v4 = xmmword_207A9D118;
    *(_OWORD *)&v4[16] = unk_207A9D128;
    std::map<double,double>::map[abi:ne180100]((uint64_t)&unk_254525A20, (double *)v4, 6);
    xmmword_254525A38 = xmmword_207A7D640;
    *(_OWORD *)v4 = xmmword_207A9D178;
    *(_OWORD *)&v4[12] = *(__int128 *)((char *)&xmmword_207A9D178 + 12);
    std::vector<ZinKernelFormat>::vector[abi:ne180100](algn_254525A48, v4, 7uLL);
    xmmword_254525A60 = xmmword_207A7D4F0;
    xmmword_254525A70 = xmmword_207A7D650;
    qword_254525A80 = 64;
    word_254525A88 = 1;
    byte_254525A8A = 1;
    dword_254525B40 = 0;
    word_254525B44 = 0;
    qword_254525B60 = 0;
    byte_254525B68 = 0;
    qword_254525B70 = 0;
    byte_254525B78 = 0;
    unk_254525A8B = 0;
    unk_254525A92 = 0;
    dword_254525B38 = 0;
    xmmword_254525A98 = 0u;
    unk_254525AA8 = 0u;
    xmmword_254525AB8 = 0u;
    unk_254525AC8 = 0u;
    xmmword_254525AD8 = 0u;
    unk_254525AE8 = 0u;
    xmmword_254525AF8 = 0u;
    unk_254525B08 = 0u;
    xmmword_254525B18 = 0u;
    unk_254525B28 = 0u;
    byte_254525B58 = 0;
    xmmword_254525B48 = 0u;
    word_254525B79 = 257;
    __cxa_atexit((void (*)(void *))ZinIrHalParameters::~ZinIrHalParameters, &ZinIrHalU1::GetParams(void)const::ZinIrHalU1Parameters, &dword_2069AB000);
  }
  return &ZinIrHalU1::GetParams(void)const::ZinIrHalU1Parameters;
}

void sub_206D9ED50(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v2, *(_QWORD **)(v2 + 8));
  if (qword_254525A08)
  {
    qword_254525A10 = qword_254525A08;
    operator delete((void *)qword_254525A08);
  }
  if (qword_2545259F0)
  {
    qword_2545259F8 = qword_2545259F0;
    operator delete((void *)qword_2545259F0);
  }
  if (qword_2545259D8)
  {
    qword_2545259E0 = qword_2545259D8;
    operator delete((void *)qword_2545259D8);
  }
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy(v1 + 24, *(_QWORD **)(v1 + 32));
  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    qword_254525938 = *(_QWORD *)v1;
    operator delete(v4);
  }
  if (qword_254525918)
  {
    qword_254525920 = qword_254525918;
    operator delete((void *)qword_254525918);
  }
  if (qword_254525900)
  {
    qword_254525908 = qword_254525900;
    operator delete((void *)qword_254525900);
  }
  if (qword_2545258E8)
  {
    qword_2545258F0 = qword_2545258E8;
    operator delete((void *)qword_2545258E8);
  }
  if (byte_254525887 < 0)
    operator delete((void *)qword_254525870);
  if (qword_254525648)
  {
    qword_254525650 = qword_254525648;
    operator delete((void *)qword_254525648);
  }
  _Unwind_Resume(a1);
}

void sub_206D9EE94()
{
  JUMPOUT(0x206D9EE68);
}

void sub_206D9EE9C()
{
  JUMPOUT(0x206D9EE80);
}

uint64_t ZinIrOpt::ZinIrOptWidthConcatOptimizer(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6[0] = &off_24C0048D8;
  v6[1] = a2;
  v7 = v6;
  v2 = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v6, 1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_206D9EF44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ZinIrOpt::ZinIrOptWidthConcatOptimizer(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::ZinIrOptWidthConcatOptimizer(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::ZinIrOptWidthConcatOptimizer(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::ZinIrOptWidthConcatOptimizer(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0048D8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinIrOpt::ZinIrOptWidthConcatOptimizer(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::ZinIrOptWidthConcatOptimizer(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0048D8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinIrOpt::ZinIrOptWidthConcatOptimizer(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::ZinIrOptWidthConcatOptimizer(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t ***a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *i;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  char *v14;
  _OWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  uint64_t v27;
  _BOOL4 IsWidthAlign;
  ZinReshapeLayer **v29;
  ZinReshapeLayer **j;
  ZinReshapeLayer *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  ZinReshapeLayer **v43;
  char *v44;
  char *v45;
  ZinReshapeLayer *v46;
  uint64_t ReshapeInfo;
  ZinIrTransposeInfo *v48;
  uint64_t v49;
  __int128 v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  ZinIrOpt **v56;
  ZinIrOpt **v57;
  ZinIrOpt *InputTranspose;
  ZinIrOpt *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  ZinIrOpt **v65;
  char *v66;
  char *v67;
  ZinIrOpt *v68;
  uint64_t WidthTransposeCount;
  uint64_t v70;
  char *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v76;
  _DWORD *k;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  size_t v82;
  __int128 *v83;
  const void *v84;
  std::string::size_type v85;
  std::string::size_type size;
  int v87;
  ZinIrOpLayer *v88;
  uint64_t v89;
  uint64_t v90;
  ZinIrOpLayer *Transpose;
  int inserted;
  uint64_t v93;
  _QWORD *v94;
  unint64_t v95;
  uint64_t v96;
  ZinIrTransposeInfo *v97;
  int IsInverse;
  uint64_t v99;
  _BOOL4 v100;
  int v101;
  _BOOL4 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  ZinIrOpLayer *v106;
  ZinIrOpLayer *v107;
  ZinIrOpt *v108;
  ZinIrOpLayer *v109;
  ZinIrOpLayer *v110;
  int v111;
  ZinIrOpLayer *m;
  ZinIrOpLayer ***v113;
  ZinIrOpLayer **v114;
  ZinIrOpLayer *v115;
  size_t v116;
  std::string *v117;
  const void *v118;
  __n128 v119;
  int v120;
  uint64_t v122;
  int v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  _QWORD *v128;
  unint64_t *v129;
  unint64_t v130;
  ZinIrOpLayer *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  int v138;
  int v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t *v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t *v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  char *v157;
  uint64_t v158;
  int v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  ZinIrOpLayer *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  uint64_t *n;
  std::string::size_type v172;
  int v173;
  _BOOL4 v174;
  std::string *v175;
  __int128 v176;
  const std::string::value_type *v177;
  const std::string::value_type *v178;
  const std::string::value_type *v179;
  int v180;
  const std::string::value_type *v181;
  std::string::size_type v182;
  std::string *v183;
  __int128 v184;
  std::string *v185;
  uint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  uint64_t *v190;
  char *v191;
  char *v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t **v198;
  uint64_t v199;
  __int128 v200[2];
  uint64_t v201;
  _OWORD v202[2];
  uint64_t v203;
  _QWORD v204[3];
  char v205;
  void *v206;
  ZinIrOpt **v207;
  uint64_t v208;
  void *v209;
  char *v210;
  char *v211;
  void *v212;
  char *v213;
  char *v214;
  int64x2_t v215;
  __int128 v216;
  uint64_t v217;
  void *v218[2];
  uint64_t v219;
  void *__src;
  char *v221;
  unint64_t v222;
  void *__p;
  char *v224;
  char *v225;
  std::string v226;
  uint64_t v227;
  int v228;
  std::string v229;
  __int128 v230;
  uint64_t v231;
  __int128 v232;
  __int128 v233;
  int v234;
  _QWORD *v235;
  __int128 v236;
  std::string v237;
  std::string v238;
  uint64_t v239;

  v239 = *MEMORY[0x24BDAC8D0];
  v3 = *a3;
  v4 = *(_QWORD *)(*a3 + 64);
  if (*(_DWORD *)(v4 + 8) != 7 || *(_DWORD *)(v4 + 12) != 3)
    return 0;
  v198 = *a2;
  v199 = *a3;
  v5 = *(uint64_t **)(a1 + 8);
  v6 = *v5;
  v196 = v5[1];
  __p = 0;
  v224 = 0;
  v225 = 0;
  v7 = *(_QWORD **)(v3 + 88);
  for (i = *(_QWORD **)(v3 + 96); v7 != i; ++v7)
  {
    v9 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v7 + 32))(*v7, 0, 0);
    v10 = v9 + 48;
    v11 = v224;
    if (v224 >= v225)
    {
      v15 = __p;
      v16 = 0xCCCCCCCCCCCCCCCDLL * ((v224 - (_BYTE *)__p) >> 3);
      v17 = v16 + 1;
      if (v16 + 1 > 0x666666666666666)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      if (0x999999999999999ALL * ((v225 - (_BYTE *)__p) >> 3) > v17)
        v17 = 0x999999999999999ALL * ((v225 - (_BYTE *)__p) >> 3);
      if (0xCCCCCCCCCCCCCCCDLL * ((v225 - (_BYTE *)__p) >> 3) >= 0x333333333333333)
        v18 = 0x666666666666666;
      else
        v18 = v17;
      if (v18)
      {
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)&v225, v18);
        v15 = __p;
        v11 = v224;
      }
      else
      {
        v19 = 0;
      }
      v20 = &v19[8 * ((v224 - (_BYTE *)__p) >> 3)];
      v21 = *(_OWORD *)v10;
      v22 = *(_OWORD *)(v10 + 16);
      *((_QWORD *)v20 + 4) = *(_QWORD *)(v10 + 32);
      *(_OWORD *)v20 = v21;
      *((_OWORD *)v20 + 1) = v22;
      if (v11 == v15)
      {
        v26 = &v19[40 * v16];
      }
      else
      {
        v23 = &v19[40 * v16];
        do
        {
          v24 = *(_OWORD *)((char *)v11 - 40);
          v25 = *(_OWORD *)((char *)v11 - 24);
          v26 = v23 - 40;
          *((_QWORD *)v23 - 1) = *((_QWORD *)v11 - 1);
          *(_OWORD *)(v23 - 24) = v25;
          *(_OWORD *)(v23 - 40) = v24;
          v11 = (_OWORD *)((char *)v11 - 40);
          v23 -= 40;
        }
        while (v11 != v15);
      }
      v14 = v20 + 40;
      __p = v26;
      v224 = v20 + 40;
      v225 = &v19[40 * v18];
      if (v15)
        operator delete(v15);
    }
    else
    {
      v12 = *(_OWORD *)v10;
      v13 = *(_OWORD *)(v9 + 64);
      *((_QWORD *)v224 + 4) = *(_QWORD *)(v9 + 80);
      *v11 = v12;
      v11[1] = v13;
      v14 = (char *)v11 + 40;
    }
    v224 = v14;
  }
  v27 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v199 + 32))(v199, 0, 0);
  IsWidthAlign = ZinConcatLayerUtils::IsWidthAlign(&__p, *(_DWORD *)(v27 + 88), *(_QWORD *)(v6 + 528));
  __src = 0;
  v221 = 0;
  v222 = 0;
  v218[0] = 0;
  v218[1] = 0;
  v219 = 0;
  v215 = vdupq_n_s64(1uLL);
  v216 = (__int128)v215;
  v217 = 1;
  v212 = 0;
  v213 = 0;
  v214 = 0;
  v29 = *(ZinReshapeLayer ***)(v199 + 112);
  for (j = *(ZinReshapeLayer ***)(v199 + 120); v29 != j; ++v29)
  {
    v31 = *v29;
    v32 = v213;
    if (*(_DWORD *)(*((_QWORD *)*v29 + 8) + 8) == 37)
    {
      if (v213 >= v214)
      {
        v35 = (v213 - (_BYTE *)v212) >> 3;
        if ((unint64_t)(v35 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v36 = (v214 - (_BYTE *)v212) >> 2;
        if (v36 <= v35 + 1)
          v36 = v35 + 1;
        if ((unint64_t)(v214 - (_BYTE *)v212) >= 0x7FFFFFFFFFFFFFF8)
          v37 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v37 = v36;
        if (v37)
          v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v214, v37);
        else
          v38 = 0;
        v43 = (ZinReshapeLayer **)&v38[8 * v35];
        *v43 = v31;
        v33 = (char *)(v43 + 1);
        v45 = (char *)v212;
        v44 = v213;
        if (v213 != v212)
        {
          do
          {
            v46 = (ZinReshapeLayer *)*((_QWORD *)v44 - 1);
            v44 -= 8;
            *--v43 = v46;
          }
          while (v44 != v45);
          v44 = (char *)v212;
        }
        v212 = v43;
        v213 = v33;
        v214 = &v38[8 * v37];
        if (v44)
          operator delete(v44);
      }
      else
      {
        *(_QWORD *)v213 = v31;
        v33 = v32 + 8;
      }
      v213 = v33;
      ReshapeInfo = ZinReshapeLayer::GetReshapeInfo(v31);
      if (&__src != (void **)(ReshapeInfo + 16))
        std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)&__src, *(char **)(ReshapeInfo + 16), *(_QWORD *)(ReshapeInfo + 24), (uint64_t)(*(_QWORD *)(ReshapeInfo + 24) - *(_QWORD *)(ReshapeInfo + 16)) >> 3);
      v48 = (ZinIrTransposeInfo *)ZinReshapeLayer::GetReshapeInfo(v31);
      ZinIrTransposeInfo::GetInverseMappings(v48, (char **)&v232);
      if (v218[0])
      {
        v218[1] = v218[0];
        operator delete(v218[0]);
      }
      *(_OWORD *)v218 = v232;
      v219 = v233;
      v49 = (*(uint64_t (**)(ZinReshapeLayer *, _QWORD, _QWORD))(*(_QWORD *)v31 + 32))(v31, 0, 0);
      v50 = *(_OWORD *)(v49 + 64);
      v215 = *(int64x2_t *)(v49 + 48);
      v216 = v50;
      v217 = *(_QWORD *)(v49 + 80);
    }
    else
    {
      if (v213 >= v214)
      {
        v39 = (v213 - (_BYTE *)v212) >> 3;
        if ((unint64_t)(v39 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v40 = (v214 - (_BYTE *)v212) >> 2;
        if (v40 <= v39 + 1)
          v40 = v39 + 1;
        if ((unint64_t)(v214 - (_BYTE *)v212) >= 0x7FFFFFFFFFFFFFF8)
          v41 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v41 = v40;
        if (v41)
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v214, v41);
        else
          v42 = 0;
        v51 = &v42[8 * v39];
        *(_QWORD *)v51 = 0;
        v34 = v51 + 8;
        v53 = (char *)v212;
        v52 = v213;
        if (v213 != v212)
        {
          do
          {
            v54 = *((_QWORD *)v52 - 1);
            v52 -= 8;
            *((_QWORD *)v51 - 1) = v54;
            v51 -= 8;
          }
          while (v52 != v53);
          v52 = (char *)v212;
        }
        v212 = v51;
        v213 = v34;
        v214 = &v42[8 * v41];
        if (v52)
          operator delete(v52);
      }
      else
      {
        *(_QWORD *)v213 = 0;
        v34 = v32 + 8;
      }
      v213 = v34;
    }
  }
  v209 = 0;
  v210 = 0;
  v211 = 0;
  v206 = 0;
  v207 = 0;
  v208 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v206, *(const void **)(v199 + 88), *(_QWORD *)(v199 + 96), (uint64_t)(*(_QWORD *)(v199 + 96) - *(_QWORD *)(v199 + 88)) >> 3);
  v56 = (ZinIrOpt **)v206;
  v57 = v207;
  if (v206 != v207)
  {
    do
    {
      InputTranspose = ZinIrOpt::FindInputTranspose(*v56, (ZinIrOpLayer *)v55);
      v59 = InputTranspose;
      v60 = v210;
      if (v210 >= v211)
      {
        v62 = (v210 - (_BYTE *)v209) >> 3;
        if ((unint64_t)(v62 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v63 = (v211 - (_BYTE *)v209) >> 2;
        if (v63 <= v62 + 1)
          v63 = v62 + 1;
        if ((unint64_t)(v211 - (_BYTE *)v209) >= 0x7FFFFFFFFFFFFFF8)
          v55 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v55 = v63;
        if (v55)
          v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v211, v55);
        else
          v64 = 0;
        v65 = (ZinIrOpt **)&v64[8 * v62];
        *v65 = v59;
        v61 = (char *)(v65 + 1);
        v67 = (char *)v209;
        v66 = v210;
        if (v210 != v209)
        {
          do
          {
            v68 = (ZinIrOpt *)*((_QWORD *)v66 - 1);
            v66 -= 8;
            *--v65 = v68;
          }
          while (v66 != v67);
          v66 = (char *)v209;
        }
        v209 = v65;
        v210 = v61;
        v211 = &v64[8 * v55];
        if (v66)
          operator delete(v66);
      }
      else
      {
        *(_QWORD *)v210 = InputTranspose;
        v61 = v60 + 8;
      }
      v210 = v61;
      ++v56;
    }
    while (v56 != v57);
  }
  if (!ZinIrOpt::GetWidthTransposeCount((ZinReshapeLayer ***)&v212))
  {
    ZinIrOpt::GetWidthTranspose((ZinReshapeLayer ***)&v209, (void **)&v232);
    if (*((_QWORD *)&v232 + 1) == (_QWORD)v232)
    {
      v78 = v199;
      if (*((_QWORD *)&v232 + 1))
        operator delete(*((void **)&v232 + 1));
LABEL_131:
      v74 = 0;
      goto LABEL_301;
    }
    v76 = ZinReshapeLayer::GetReshapeInfo(*(ZinReshapeLayer **)v232);
    for (k = *(_DWORD **)(v76 + 16); ; k += 2)
    {
      if (k == *(_DWORD **)(v76 + 24))
      {
        v93 = 5;
        goto LABEL_222;
      }
      if (*k == 4)
        break;
    }
    v93 = k[1];
LABEL_222:
    v143 = (char *)__src;
    v221 = (char *)__src;
    if ((unint64_t)__src >= v222)
    {
      v145 = (uint64_t)(v222 - (_QWORD)__src) >> 2;
      if (v145 <= 1)
        v145 = 1;
      if (v222 - (unint64_t)__src >= 0x7FFFFFFFFFFFFFF8)
        v146 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v146 = v145;
      v147 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v222, v146);
      v149 = &v147[v148];
      *v147 = v93 | 0x400000000;
      v144 = v147 + 1;
      v151 = (char *)__src;
      v150 = v221;
      if (v221 != __src)
      {
        do
        {
          v152 = *((_QWORD *)v150 - 1);
          v150 -= 8;
          *--v147 = v152;
        }
        while (v150 != v151);
        v150 = (char *)__src;
      }
      __src = v147;
      v221 = (char *)v144;
      v222 = (unint64_t)v149;
      if (v150)
        operator delete(v150);
    }
    else
    {
      *(_QWORD *)__src = v93 | 0x400000000;
      v144 = (uint64_t *)(v143 + 8);
    }
    v221 = (char *)v144;
    if ((unint64_t)v144 >= v222)
    {
      v154 = ((char *)v144 - (_BYTE *)__src) >> 3;
      if ((unint64_t)(v154 + 1) >> 61)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v155 = (uint64_t)(v222 - (_QWORD)__src) >> 2;
      if (v155 <= v154 + 1)
        v155 = v154 + 1;
      if (v222 - (unint64_t)__src >= 0x7FFFFFFFFFFFFFF8)
        v156 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v156 = v155;
      if (v156)
        v157 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v222, v156);
      else
        v157 = 0;
      v190 = (uint64_t *)&v157[8 * v154];
      v191 = &v157[8 * v156];
      *v190 = (v93 << 32) | 4;
      v153 = (uint64_t)(v190 + 1);
      v193 = (char *)__src;
      v192 = v221;
      if (v221 != __src)
      {
        do
        {
          v194 = *((_QWORD *)v192 - 1);
          v192 -= 8;
          *--v190 = v194;
        }
        while (v192 != v193);
        v192 = (char *)__src;
      }
      __src = v190;
      v221 = (char *)v153;
      v222 = (unint64_t)v191;
      if (v192)
        operator delete(v192);
    }
    else
    {
      *v144 = (v93 << 32) | 4;
      v153 = (uint64_t)(v144 + 1);
    }
    v221 = (char *)v153;
    std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)v218, (char *)__src, v153, (v153 - (uint64_t)__src) >> 3);
    v195 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v199 + 32))(v199, 0, 0);
    ZinIrTransposeUnitInfo::TransposeDimensions<ZinTensorDimensions>((_QWORD *)(v195 + 48), (uint64_t)&__src, &v215);
    if ((_QWORD)v232)
    {
      *((_QWORD *)&v232 + 1) = v232;
      operator delete((void *)v232);
    }
  }
  if (ZinIrOpt::GetWidthTransposeCount((ZinReshapeLayer ***)&v209))
  {
    WidthTransposeCount = ZinIrOpt::GetWidthTransposeCount((ZinReshapeLayer ***)&v209);
    v70 = ZinIrOpt::GetWidthTransposeCount((ZinReshapeLayer ***)&v212);
    v71 = (char *)v209;
    if (v209 == v210)
    {
      v72 = 0;
    }
    else
    {
      v72 = 0;
      do
      {
        v73 = *(_QWORD *)v71;
        v71 += 8;
        if (!v73)
          ++v72;
      }
      while (v71 != v210);
    }
    v79 = (char *)v212;
    v78 = v199;
    if (v212 != v213)
    {
      do
      {
        v80 = *(_QWORD *)v79;
        v79 += 8;
        if (!v80)
          ++v72;
      }
      while (v79 != v213);
    }
    v81 = 2;
    if (IsWidthAlign)
      v81 = 0;
    if (v72 < WidthTransposeCount + v70 + v81)
    {
      if (*(char *)(v199 + 47) >= 0)
        v82 = *(unsigned __int8 *)(v199 + 47);
      else
        v82 = *(_QWORD *)(v199 + 32);
      std::string::basic_string[abi:ne180100]((uint64_t)&v232, v82 + 13);
      if ((SBYTE7(v233) & 0x80u) == 0)
        v83 = &v232;
      else
        v83 = (__int128 *)v232;
      if (v82)
      {
        if (*(char *)(v199 + 47) >= 0)
          v84 = (const void *)(v199 + 24);
        else
          v84 = *(const void **)(v199 + 24);
        memmove(v83, v84, v82);
      }
      strcpy((char *)v83 + v82, "_w_concat_opt");
      ZinObjectNameFactory::ZinObjectNameFactory(v204, &v232);
      if (SBYTE7(v233) < 0)
        operator delete((void *)v232);
      v202[0] = v215;
      v202[1] = v216;
      v203 = v217;
      memset(&v237, 0, sizeof(v237));
      std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v237, *(const void **)(v199 + 112), *(_QWORD *)(v199 + 120), (uint64_t)(*(_QWORD *)(v199 + 120) - *(_QWORD *)(v199 + 112)) >> 3);
      size = v237.__r_.__value_.__l.__size_;
      v85 = v237.__r_.__value_.__r.__words[0];
      if (v237.__r_.__value_.__r.__words[0] == v237.__r_.__value_.__l.__size_)
      {
        v87 = 1;
      }
      else
      {
        LOBYTE(v87) = 1;
        do
        {
          v88 = *(ZinIrOpLayer **)v85;
          v89 = *(_QWORD *)(*(_QWORD *)v85 + 16);
          v90 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v199 + 32))(v199, 0, 0);
          Transpose = (ZinIrOpLayer *)ZinBuilder::CreateTranspose(v89, (uint64_t)v204, (uint64_t)v202, *(_DWORD *)(v90 + 88), (uint64_t)v218);
          v238.__r_.__value_.__r.__words[0] = v199;
          v226.__r_.__value_.__r.__words[0] = (std::string::size_type)&v238;
          v226.__r_.__value_.__l.__size_ = 1;
          Layer2TDMapper::SourceLayer::SourceLayer(&v232, &v226);
          inserted = ZinIrOpLayerGraph::InsertNodeBetween(v198, Transpose, (ZinIrOpLayer *)v199, v88, (ZinIrOpLayer ***)&v232);
          if ((_BYTE)v87)
            v87 = inserted;
          else
            v87 = 0;
          *(_QWORD *)&v232 = &unk_24C02BB18;
          if (*((_QWORD *)&v232 + 1))
          {
            *(_QWORD *)&v233 = *((_QWORD *)&v232 + 1);
            operator delete(*((void **)&v232 + 1));
          }
          v85 += 8;
        }
        while (v85 != size);
      }
      memset(&v229, 0, sizeof(v229));
      std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v229, *(const void **)(v199 + 88), *(_QWORD *)(v199 + 96), (uint64_t)(*(_QWORD *)(v199 + 96) - *(_QWORD *)(v199 + 88)) >> 3);
      v94 = (_QWORD *)v229.__r_.__value_.__l.__size_;
      if (v229.__r_.__value_.__l.__size_ != v229.__r_.__value_.__r.__words[0])
      {
        v94 = (_QWORD *)v229.__r_.__value_.__r.__words[0];
        v95 = 0;
        do
        {
          v197 = v95;
          v96 = v94[v95];
          if (*(_DWORD *)(*(_QWORD *)(v96 + 64) + 8) != 37 || *(_QWORD *)(v96 + 120) - *(_QWORD *)(v96 + 112) != 8)
            goto LABEL_144;
          v97 = (ZinIrTransposeInfo *)ZinReshapeLayer::GetReshapeInfo((ZinReshapeLayer *)v96);
          ZinIrTransposeInfo::ZinIrTransposeInfo((uint64_t)&v232, (uint64_t)&__src);
          IsInverse = ZinIrTransposeInfo::IsInverse(v97, (const ZinIrTransposeInfo *)&v232);
          *(_QWORD *)&v232 = &unk_24C01E1F0;
          if ((_QWORD)v233)
          {
            *((_QWORD *)&v233 + 1) = v233;
            operator delete((void *)v233);
          }
          ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v232);
          if (IsInverse)
          {
            v99 = **(_QWORD **)(v96 + 88);
            v100 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)v198, (ZinIrOpLayer *)v96, 0);
            v101 = ZinIrOpLayerGraph::AddEdge((uint64_t)v198, v99, v199, 0, v197, 0);
            if ((_BYTE)v87)
              v102 = v100;
            else
              v102 = 0;
            v87 = v102 & v101;
          }
          else
          {
LABEL_144:
            v103 = *(_QWORD *)(v96 + 16);
            v104 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v96 + 32))(v96, 0, 0);
            v105 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v199 + 32))(v199, 0, 0);
            v106 = (ZinIrOpLayer *)ZinBuilder::CreateTranspose(v103, (uint64_t)v204, v104 + 48, *(_DWORD *)(v105 + 88), (uint64_t)&__src);
            v108 = ZinIrOpt::FindInputTranspose((ZinIrOpt *)v96, v107);
            v109 = v108;
            if (v108)
            {
              v238.__r_.__value_.__r.__words[0] = **((_QWORD **)v108 + 14);
              v110 = (ZinIrOpLayer *)v238.__r_.__value_.__r.__words[0];
              v226.__r_.__value_.__r.__words[0] = (std::string::size_type)&v238;
              v226.__r_.__value_.__l.__size_ = 1;
              Layer2TDMapper::SourceLayer::SourceLayer(&v232, &v226);
              v111 = ZinIrOpLayerGraph::InsertNodeBetween(v198, v106, v109, v110, (ZinIrOpLayer ***)&v232);
              if ((_BYTE)v87)
                v87 = v111;
              else
                v87 = 0;
              *(_QWORD *)&v232 = &unk_24C02BB18;
              if (*((_QWORD *)&v232 + 1))
              {
                *(_QWORD *)&v233 = *((_QWORD *)&v232 + 1);
                operator delete(*((void **)&v232 + 1));
              }
              for (m = v106; ; m = **v113)
              {
                v114 = (ZinIrOpLayer **)*((_QWORD *)m + 14);
                v113 = (ZinIrOpLayer ***)((char *)m + 112);
                v115 = *v114;
                if (*v114 == (ZinIrOpLayer *)v199)
                  break;
                if (*((char *)v115 + 47) >= 0)
                  v116 = *((unsigned __int8 *)v115 + 47);
                else
                  v116 = *((_QWORD *)v115 + 4);
                std::string::basic_string[abi:ne180100]((uint64_t)&v226, v116 + 21);
                if ((v226.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v117 = &v226;
                else
                  v117 = (std::string *)v226.__r_.__value_.__r.__words[0];
                if (v116)
                {
                  if (*((char *)v115 + 47) >= 0)
                    v118 = (char *)v115 + 24;
                  else
                    v118 = (const void *)*((_QWORD *)v115 + 3);
                  memmove(v117, v118, v116);
                }
                strcpy((char *)v117 + v116, "_w_concat_opt_replace");
                v119 = ZinObjectNameFactory::ZinObjectNameFactory(&v232, &v226);
                if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v226.__r_.__value_.__l.__data_);
                v120 = *(_DWORD *)(*((_QWORD *)v115 + 8) + 8);
                if (v120 == 4 || v120 == 2)
                {
                  v122 = *((_QWORD *)v115 + 2);
                  v123 = *(_DWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD, __n128))(*(_QWORD *)v115 + 32))(v115, 0, 0, v119)+ 88);
                  v124 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v106 + 32))(v106, 0, 0);
                  ZinObjectNameFactory::CreateName((uint64_t)&v232, 0, &v238);
                  v235 = 0;
                  v230 = 0uLL;
                  LODWORD(v226.__r_.__value_.__l.__data_) = 0;
                  v227 = 0;
                  *(_OWORD *)&v226.__r_.__value_.__r.__words[1] = 0uLL;
                  v228 = 0;
                  ZinIrTensor::CreateTensor(v122, v123, (__int128 *)(v124 + 48), (__int128 *)&v238, &v235, (uint64_t *)&v230, (unsigned int *)&v226, (uint64_t *)&v236);
                  v125 = (std::__shared_weak_count *)*((_QWORD *)&v230 + 1);
                  if (*((_QWORD *)&v230 + 1))
                  {
                    v126 = (unint64_t *)(*((_QWORD *)&v230 + 1) + 8);
                    do
                      v127 = __ldaxr(v126);
                    while (__stlxr(v127 - 1, v126));
                    if (!v127)
                    {
                      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                      std::__shared_weak_count::__release_weak(v125);
                    }
                  }
                  v128 = v235;
                  v235 = 0;
                  if (v128)
                    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v235, v128);
                  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v238.__r_.__value_.__l.__data_);
                  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v236;
                  if (*((_QWORD *)&v236 + 1))
                  {
                    v129 = (unint64_t *)(*((_QWORD *)&v236 + 1) + 8);
                    do
                      v130 = __ldxr(v129);
                    while (__stxr(v130 + 1, v129));
                  }
                  ZinObjectNameFactory::CreateName((uint64_t)&v232, 1u, &v226);
                  v131 = (ZinIrOpLayer *)(*(uint64_t (**)(ZinIrOpLayer *, std::string *, std::string *))(*(_QWORD *)v115 + 176))(v115, &v238, &v226);
                  if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v226.__r_.__value_.__l.__data_);
                  v132 = (std::__shared_weak_count *)v238.__r_.__value_.__l.__size_;
                  if (v238.__r_.__value_.__l.__size_)
                  {
                    v133 = (unint64_t *)(v238.__r_.__value_.__l.__size_ + 8);
                    do
                      v134 = __ldaxr(v133);
                    while (__stlxr(v134 - 1, v133));
                    if (!v134)
                    {
                      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                      std::__shared_weak_count::__release_weak(v132);
                    }
                  }
                  v226.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
                  v227 = 0;
                  *(_OWORD *)&v226.__r_.__value_.__r.__words[1] = 0uLL;
                  v138 = ZinIrOpLayerGraph::ReplaceNode(v198, v115, v131, (const Layer2TDMapper::SourceLayer *)&v226);
                  v226.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
                  if (v226.__r_.__value_.__l.__size_)
                  {
                    v226.__r_.__value_.__r.__words[2] = v226.__r_.__value_.__l.__size_;
                    operator delete((void *)v226.__r_.__value_.__l.__size_);
                  }
                  v135 = (std::__shared_weak_count *)*((_QWORD *)&v236 + 1);
                  if (*((_QWORD *)&v236 + 1))
                  {
                    v136 = (unint64_t *)(*((_QWORD *)&v236 + 1) + 8);
                    do
                      v137 = __ldaxr(v136);
                    while (__stlxr(v137 - 1, v136));
                    if (!v137)
                    {
                      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                      std::__shared_weak_count::__release_weak(v135);
                    }
                  }
                }
                else
                {
                  v138 = 0;
                }
                *(_QWORD *)&v232 = off_24C01FBB0;
                if (SHIBYTE(v233) < 0)
                  operator delete(*((void **)&v232 + 1));
                if ((_BYTE)v87)
                  v87 = v138;
                else
                  v87 = 0;
              }
            }
            else
            {
              v238.__r_.__value_.__r.__words[0] = v199;
              v226.__r_.__value_.__r.__words[0] = (std::string::size_type)&v238;
              v226.__r_.__value_.__l.__size_ = 1;
              Layer2TDMapper::SourceLayer::SourceLayer(&v232, &v226);
              v139 = ZinIrOpLayerGraph::InsertNodeBetween(v198, v106, (ZinIrOpLayer *)v96, (ZinIrOpLayer *)v199, (ZinIrOpLayer ***)&v232);
              if ((_BYTE)v87)
                v87 = v139;
              else
                v87 = 0;
              *(_QWORD *)&v232 = &unk_24C02BB18;
              if (*((_QWORD *)&v232 + 1))
              {
                *(_QWORD *)&v233 = *((_QWORD *)&v232 + 1);
                operator delete(*((void **)&v232 + 1));
              }
            }
          }
          v94 = (_QWORD *)v229.__r_.__value_.__r.__words[0];
          v95 = v197 + 1;
        }
        while (v197 + 1 < (uint64_t)(v229.__r_.__value_.__l.__size_ - v229.__r_.__value_.__r.__words[0]) >> 3);
      }
      if (v94)
      {
        v229.__r_.__value_.__l.__size_ = (std::string::size_type)v94;
        operator delete(v94);
      }
      if (v237.__r_.__value_.__r.__words[0])
      {
        v237.__r_.__value_.__l.__size_ = v237.__r_.__value_.__r.__words[0];
        operator delete(v237.__r_.__value_.__l.__data_);
      }
      v78 = v199;
      if (v87)
      {
        v200[0] = (__int128)v215;
        v200[1] = v216;
        v201 = v217;
        v140 = (char *)__src;
        v141 = 7;
        if (__src != v221)
        {
          do
          {
            if (*(_DWORD *)v140 == 4)
            {
              v142 = *((int *)v140 + 1);
              if (v142 > 3)
                v141 = 7;
              else
                v141 = dword_207A9D2C0[v142];
            }
            v140 += 8;
          }
          while (v140 != v221);
        }
        memset(&v226, 0, sizeof(v226));
        std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v226, *(const void **)(v199 + 88), *(_QWORD *)(v199 + 96), (uint64_t)(*(_QWORD *)(v199 + 96) - *(_QWORD *)(v199 + 88)) >> 3);
        v158 = *(_QWORD *)(v199 + 16);
        v159 = *(_DWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v199 + 32))(v199, 0, 0)
                         + 88);
        (*(void (**)(std::string *__return_ptr, _QWORD *, _QWORD))(v204[0] + 16))(&v238, v204, 0);
        v235 = 0;
        *(_OWORD *)&v237.__r_.__value_.__l.__data_ = 0uLL;
        LODWORD(v232) = 0;
        v233 = 0uLL;
        *((_QWORD *)&v232 + 1) = 0;
        v234 = 0;
        ZinIrTensor::CreateTensor(v158, v159, v200, (__int128 *)&v238, &v235, (uint64_t *)&v237, (unsigned int *)&v232, (uint64_t *)&v236);
        v160 = (std::__shared_weak_count *)v237.__r_.__value_.__l.__size_;
        v78 = v199;
        if (v237.__r_.__value_.__l.__size_)
        {
          v161 = (unint64_t *)(v237.__r_.__value_.__l.__size_ + 8);
          do
            v162 = __ldaxr(v161);
          while (__stlxr(v162 - 1, v161));
          if (!v162)
          {
            ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
            std::__shared_weak_count::__release_weak(v160);
          }
        }
        v163 = v235;
        v235 = 0;
        if (v163)
          std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v235, v163);
        if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v238.__r_.__value_.__l.__data_);
        v164 = operator new();
        v232 = 0uLL;
        *(_QWORD *)&v233 = 0;
        ZinIrConcatInfo::ZinIrConcatInfo(v164, v141, &v232);
        v231 = v164;
        if ((_QWORD)v232)
        {
          *((_QWORD *)&v232 + 1) = v232;
          operator delete((void *)v232);
        }
        v165 = (ZinIrOpLayer *)operator new();
        v230 = v236;
        if (*((_QWORD *)&v236 + 1))
        {
          v166 = (unint64_t *)(*((_QWORD *)&v236 + 1) + 8);
          do
            v167 = __ldxr(v166);
          while (__stxr(v167 + 1, v166));
        }
        (*(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t))(v204[0] + 16))(&v232, v204, 1);
        ZinConcatLayer::ZinConcatLayer(v165, &v231, &v230, &v232, 0);
        if (SBYTE7(v233) < 0)
          operator delete((void *)v232);
        v168 = (std::__shared_weak_count *)*((_QWORD *)&v230 + 1);
        if (*((_QWORD *)&v230 + 1))
        {
          v169 = (unint64_t *)(*((_QWORD *)&v230 + 1) + 8);
          do
            v170 = __ldaxr(v169);
          while (__stlxr(v170 - 1, v169));
          if (!v170)
          {
            ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
            std::__shared_weak_count::__release_weak(v168);
          }
        }
        v237.__r_.__value_.__r.__words[0] = v199;
        v238.__r_.__value_.__r.__words[0] = (std::string::size_type)&v237;
        v238.__r_.__value_.__l.__size_ = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(&v232, &v238);
        ZinIrOpLayerGraph::AddNode(v198, v165, (ZinIrOpLayer ***)&v232);
        *(_QWORD *)&v232 = &unk_24C02BB18;
        if (*((_QWORD *)&v232 + 1))
        {
          *(_QWORD *)&v233 = *((_QWORD *)&v232 + 1);
          operator delete(*((void **)&v232 + 1));
        }
        v172 = v226.__r_.__value_.__l.__size_;
        for (n = (uint64_t *)v226.__r_.__value_.__r.__words[0]; n != (uint64_t *)v172; ++n)
          ZinIrOpLayerGraph::AddEdge((uint64_t)v198, *n, (uint64_t)v165, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        v232 = 0u;
        v233 = 0u;
        v234 = 1065353216;
        v173 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)v198, (uint64_t **)v199, v165, &v232);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v232);
        v174 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)v198, (ZinIrOpLayer *)v199, 0);
        if ((*(_BYTE *)(v196 + 98) & 0x80) != 0)
        {
          std::operator+<char>();
          v175 = std::string::append(&v229, " -> ", 4uLL);
          v176 = *(_OWORD *)&v175->__r_.__value_.__l.__data_;
          v237.__r_.__value_.__r.__words[2] = v175->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v176;
          v175->__r_.__value_.__l.__size_ = 0;
          v175->__r_.__value_.__r.__words[2] = 0;
          v175->__r_.__value_.__r.__words[0] = 0;
          v179 = (const std::string::value_type *)*((_QWORD *)v165 + 3);
          v178 = (char *)v165 + 24;
          v177 = v179;
          v180 = v178[23];
          if (v180 >= 0)
            v181 = v178;
          else
            v181 = v177;
          if (v180 >= 0)
            v182 = *((unsigned __int8 *)v178 + 23);
          else
            v182 = *((_QWORD *)v178 + 1);
          v183 = std::string::append(&v237, v181, v182);
          v184 = *(_OWORD *)&v183->__r_.__value_.__l.__data_;
          v238.__r_.__value_.__r.__words[2] = v183->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v184;
          v183->__r_.__value_.__l.__size_ = 0;
          v183->__r_.__value_.__r.__words[2] = 0;
          v183->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v237.__r_.__value_.__l.__data_);
          if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v229.__r_.__value_.__l.__data_);
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
          {
            v185 = &v238;
            if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v185 = (std::string *)v238.__r_.__value_.__r.__words[0];
            LODWORD(v237.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)v237.__r_.__value_.__r.__words + 4) = (std::string::size_type)v185;
            _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s\n", (uint8_t *)&v237, 0xCu);
          }
          if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v238.__r_.__value_.__l.__data_);
        }
        v186 = v231;
        v231 = 0;
        if (v186)
          (*(void (**)(uint64_t))(*(_QWORD *)v186 + 8))(v186);
        v187 = (std::__shared_weak_count *)*((_QWORD *)&v236 + 1);
        if (*((_QWORD *)&v236 + 1))
        {
          v188 = (unint64_t *)(*((_QWORD *)&v236 + 1) + 8);
          do
            v189 = __ldaxr(v188);
          while (__stlxr(v189 - 1, v188));
          if (!v189)
          {
            ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
            std::__shared_weak_count::__release_weak(v187);
          }
        }
        if (v226.__r_.__value_.__r.__words[0])
        {
          v226.__r_.__value_.__l.__size_ = v226.__r_.__value_.__r.__words[0];
          operator delete(v226.__r_.__value_.__l.__data_);
        }
        if ((v173 & v174) != 0)
          v74 = 0;
        else
          v74 = 3;
      }
      else
      {
        v74 = 3;
      }
      v204[0] = off_24C01FBB0;
      if (v205 < 0)
        operator delete((void *)v204[1]);
      goto LABEL_301;
    }
    goto LABEL_131;
  }
  v74 = 0;
  v78 = v199;
LABEL_301:
  if (v206)
  {
    v207 = (ZinIrOpt **)v206;
    operator delete(v206);
  }
  if (v209)
  {
    v210 = (char *)v209;
    operator delete(v209);
  }
  if (v212)
  {
    v213 = (char *)v212;
    operator delete(v212);
  }
  if (v218[0])
  {
    v218[1] = v218[0];
    operator delete(v218[0]);
  }
  if (__src)
  {
    v221 = (char *)__src;
    operator delete(__src);
  }
  if (__p)
  {
    v224 = (char *)__p;
    operator delete(__p);
  }
  if ((_DWORD)v74 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    std::__function::__func<ZinIrOpt::ZinIrOptWidthConcatOptimizer(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::ZinIrOptWidthConcatOptimizer(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(v78);
  return v74;
}

void sub_206DA0450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void *a61,void *a62,uint64_t a63)
{
  void *__p;
  char a71;
  uint64_t v71;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *p_shared_owners;
  unint64_t v76;

  if (*(char *)(v71 - 137) < 0)
    operator delete(*(void **)(v71 - 160));
  if (a71 < 0)
    operator delete(__p);
  v73 = *(_QWORD *)(v71 - 232);
  *(_QWORD *)(v71 - 232) = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  v74 = *(std::__shared_weak_count **)(v71 - 168);
  if (v74)
  {
    p_shared_owners = (unint64_t *)&v74->__shared_owners_;
    do
      v76 = __ldaxr(p_shared_owners);
    while (__stlxr(v76 - 1, p_shared_owners));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  if (a61)
    operator delete(a61);
  if (a35 < 0)
    operator delete(a30);
  if (a37)
    operator delete(a37);
  if (a40)
    operator delete(a40);
  if (a43)
    operator delete(a43);
  if (a52)
    operator delete(a52);
  if (a55)
    operator delete(a55);
  if (a58)
    operator delete(a58);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ZinIrOpt::ZinIrOptWidthConcatOptimizer(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::ZinIrOptWidthConcatOptimizer(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::ZinIrOptWidthConcatOptimizer(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::ZinIrOptWidthConcatOptimizer(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

ZinIrOpt *ZinIrOpt::FindInputTranspose(ZinIrOpt *this, ZinIrOpLayer *a2)
{
  ZinIrOpt *v2;
  const ZinIrOpLayer *v3;
  int v4;

  v2 = this;
  if (!ZinOpLayerUtils::HasSingleFanInSingleFanout(this, a2))
    return 0;
  while (1)
  {
    v4 = *(_DWORD *)(*((_QWORD *)v2 + 8) + 8);
    if (v4 != 4)
    {
      if (v4 != 2)
        goto LABEL_8;
      if (ZinGOCLayer::IsPerCout((ZinIrKernel **)v2))
        break;
    }
    v2 = (ZinIrOpt *)**((_QWORD **)v2 + 11);
    if (!ZinOpLayerUtils::HasSingleFanInSingleFanout(v2, v3))
      return 0;
  }
  v4 = *(_DWORD *)(*((_QWORD *)v2 + 8) + 8);
LABEL_8:
  if (v4 == 37)
    return v2;
  else
    return 0;
}

uint64_t ZinIrOpt::GetWidthTransposeCount(ZinReshapeLayer ***a1)
{
  _BYTE *v1;
  _BYTE *v2;
  _BYTE *v4;
  _BYTE *v5;

  ZinIrOpt::GetWidthTranspose(a1, (void **)&v4);
  v1 = v4;
  v2 = v5;
  if (v4)
  {
    v5 = v4;
    operator delete(v4);
  }
  return (v2 - v1) >> 3;
}

void ZinIrOpt::GetWidthTranspose(ZinReshapeLayer ***a1@<X0>, void **a2@<X8>)
{
  ZinReshapeLayer **v2;
  ZinReshapeLayer **v3;
  uint64_t v5;
  ZinReshapeLayer *v6;
  uint64_t ReshapeInfo;
  _DWORD *i;
  unint64_t v10;
  ZinReshapeLayer **v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  ZinReshapeLayer **v18;
  char *v19;
  char *v20;
  ZinReshapeLayer *v21;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    v5 = (uint64_t)(a2 + 2);
    do
    {
      v6 = *v2;
      if (*v2)
      {
        ReshapeInfo = ZinReshapeLayer::GetReshapeInfo(*v2);
        for (i = *(_DWORD **)(ReshapeInfo + 16); i != *(_DWORD **)(ReshapeInfo + 24); i += 2)
        {
          if (*i == 4 || i[1] == 4)
          {
            v11 = (ZinReshapeLayer **)a2[1];
            v10 = (unint64_t)a2[2];
            if ((unint64_t)v11 >= v10)
            {
              v13 = ((char *)v11 - (_BYTE *)*a2) >> 3;
              if ((unint64_t)(v13 + 1) >> 61)
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              v14 = v10 - (_QWORD)*a2;
              v15 = v14 >> 2;
              if (v14 >> 2 <= (unint64_t)(v13 + 1))
                v15 = v13 + 1;
              if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
                v16 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v16 = v15;
              if (v16)
                v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v16);
              else
                v17 = 0;
              v18 = (ZinReshapeLayer **)&v17[8 * v13];
              *v18 = v6;
              v12 = v18 + 1;
              v20 = (char *)*a2;
              v19 = (char *)a2[1];
              if (v19 != *a2)
              {
                do
                {
                  v21 = (ZinReshapeLayer *)*((_QWORD *)v19 - 1);
                  v19 -= 8;
                  *--v18 = v21;
                }
                while (v19 != v20);
                v19 = (char *)*a2;
              }
              *a2 = v18;
              a2[1] = v12;
              a2[2] = &v17[8 * v16];
              if (v19)
                operator delete(v19);
            }
            else
            {
              *v11 = v6;
              v12 = v11 + 1;
            }
            a2[1] = v12;
            break;
          }
        }
      }
      ++v2;
    }
    while (v2 != v3);
  }
}

void sub_206DA0B34(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ZinIrOpt::ZinIrOptWidthConcatOptimizer(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::ZinIrOptWidthConcatOptimizer(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1)
{
  _QWORD *v1;
  int v2;
  _QWORD *v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  v1 = (_QWORD *)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    v1 = (_QWORD *)*v1;
  v2 = 136315138;
  v3 = v1;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Error: ZinIrOptWidthConcatOptimizer fails in %s.", (uint8_t *)&v2, 0xCu);
}

uint64_t ANECGetArray(CFDictionaryRef theDict, const __CFString *a2, uint64_t *a3, const __CFArray **a4)
{
  uint64_t result;
  const __CFArray *v8;
  CFTypeID v9;
  CFIndex Count;

  result = 6;
  if (theDict && a3 && a4)
  {
    result = (uint64_t)CFDictionaryGetValue(theDict, a2);
    if (result)
    {
      v8 = (const __CFArray *)result;
      v9 = CFGetTypeID((CFTypeRef)result);
      if (v9 == CFArrayGetTypeID())
      {
        *a4 = v8;
        Count = CFArrayGetCount(v8);
        result = 0;
        *a3 = Count;
      }
      else
      {
        *a4 = 0;
        return 6;
      }
    }
    else
    {
      *a3 = 0;
      *a4 = 0;
    }
  }
  return result;
}

uint64_t ANECGetArrayElem(CFArrayRef theArray, CFIndex a2, const __CFDictionary **a3)
{
  uint64_t result;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v8;
  CFTypeID v9;
  const __CFDictionary *v10;

  result = 6;
  if (theArray && a3)
  {
    if (CFArrayGetCount(theArray) <= a2)
    {
      return 6;
    }
    else
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, a2);
      if (ValueAtIndex)
      {
        v8 = ValueAtIndex;
        v9 = CFGetTypeID(ValueAtIndex);
        if (v9 == CFDictionaryGetTypeID())
          v10 = v8;
        else
          v10 = 0;
      }
      else
      {
        v10 = 0;
      }
      if (v10)
        result = 0;
      else
        result = 6;
      *a3 = v10;
    }
  }
  return result;
}

uint64_t ANECGetFileName(const __CFDictionary *a1, const void *a2, const void *a3, void **a4)
{
  CFTypeID v8;
  CFTypeID v9;
  uint64_t v10;
  CFTypeRef cf[2];
  void *v13;
  void *value;
  void *__p[2];
  char v16;
  void *v17[2];
  char v18;

  std::string::basic_string[abi:ne180100]<0>(v17, &byte_207AF6795);
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_207AF6795);
  if ((!a3
     || (cf[0] = CFDictionaryGetValue(a1, a3), CFDictionaryGetValueIfPresent(a1, a3, cf))
     && (v8 = CFGetTypeID(cf[0]), v8 == CFStringGetTypeID())
     && (ZinGetString((CFStringRef)cf[0], (uint64_t)__p) & 1) != 0)
    && (value = (void *)CFDictionaryGetValue(a1, a2), CFDictionaryGetValueIfPresent(a1, a2, (const void **)&value))
    && (v9 = CFGetTypeID(value), v9 == CFStringGetTypeID())
    && (ZinGetString((CFStringRef)value, (uint64_t)v17) & 1) != 0)
  {
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)__p, (const void **)v17, (uint64_t)cf);
    if (*((char *)a4 + 23) < 0)
      operator delete(*a4);
    v10 = 0;
    *(_OWORD *)a4 = *(_OWORD *)cf;
    a4[2] = v13;
  }
  else
  {
    if (*((char *)a4 + 23) < 0)
    {
      a4[1] = 0;
      a4 = (void **)*a4;
    }
    else
    {
      *((_BYTE *)a4 + 23) = 0;
    }
    *(_BYTE *)a4 = 0;
    v10 = 6;
  }
  if (v16 < 0)
    operator delete(__p[0]);
  if (v18 < 0)
    operator delete(v17[0]);
  return v10;
}

void sub_206DA0E80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrInstanceNormUnit::ZinIrInstanceNormUnit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  __int128 v6;
  int v7;

  v5 = ZinIrUnit::ZinIrUnit((_QWORD *)a1, a3);
  *v5 = &off_24C020778;
  v5[7] = off_24C017CA0;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v5 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 8);
    v5[10] = *(_QWORD *)(a2 + 24);
    *((_OWORD *)v5 + 4) = v6;
  }
  v7 = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 88) = v7;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 96), *(__int128 **)(a2 + 40), *(__int128 **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = off_24C020880;
  std::unordered_set<ZinIrDimension>::unordered_set(a1 + 136, a2 + 80);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 56) = off_24C023548;
  return a1;
}

void sub_206DA0FAC(_Unwind_Exception *a1)
{
  ZinIrUnit *v1;

  ZinIrUnit::~ZinIrUnit(v1);
  _Unwind_Resume(a1);
}

_QWORD *ZinIrInstanceNormUnit::CreateOpcode@<X0>(ZinIrInstanceNormUnit *this@<X0>, uint64_t a2@<X8>)
{
  char *v5;
  uint64_t v6;
  _QWORD *result;

  v5 = (char *)this + 136;
  v6 = operator new();
  result = ZinIrInstanceNormInfo::ZinIrInstanceNormInfo(v6, (uint64_t)v5, *((float *)this + 44));
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = v6;
  return result;
}

void sub_206DA1048(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x10A1C40D857B5A0);
  _Unwind_Resume(a1);
}

uint64_t ZinIrInstanceNormUnit::CreateLayer(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v20);
  if ((_DWORD)v20)
  {
    v5 = 0;
  }
  else
  {
    v6 = v21;
    v21 = 0;
    v7 = operator new();
    v5 = v7;
    v19 = v6;
    v8 = (std::__shared_weak_count *)(*a3)[1];
    v17 = **a3;
    v18 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    ZinInstanceNormLayer::ZinInstanceNormLayer(v7, &v19, &v17, a1 + 64);
    v11 = v18;
    if (v18)
    {
      v12 = (unint64_t *)&v18->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = v19;
    v19 = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    ZinIrOpLayer::ValidateSemantics(v5);
  }
  v15 = v21;
  v21 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  return v5;
}

void sub_206DA11A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  v16 = a12;
  a12 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  MEMORY[0x20BD002F8](v14, 0x10B3C409D855DA1);
  v17 = a14;
  a14 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  _Unwind_Resume(a1);
}

uint64_t ZinIrInstanceNormUnit::ValidateForDynamicShapes(ZinIrInstanceNormUnit *this, CFArrayRef *a2)
{
  uint64_t v2;
  int v3;
  int v4;

  v2 = *((_QWORD *)this + 1);
  v4 = *(_DWORD *)(v2 + 100);
  v3 = *(_DWORD *)(v2 + 104);
  if (v4 != 1 && v3 != 1)
    return 0;
  ZinIrUnitStatus::SetError(a2, CFSTR("InvalidUnit"));
  return 3;
}

_QWORD *ZinNEKernelRasterizerLayer::ZinNEKernelRasterizerLayer(_QWORD *a1, uint64_t *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;

  v8 = operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(v8, 86);
  v9 = a2[1];
  v17 = *a2;
  v18 = (std::__shared_weak_count *)v9;
  v19 = v8;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  ZinNELayer::ZinNELayer((uint64_t)a1, &v19, &v17, 0, 0, 0, 0, 0, 0, 0, a3, 0);
  v12 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v19;
  v19 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  *a1 = &off_24C023F60;
  a1[54] = a4;
  return a1;
}

void sub_206DA13C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  v17 = a16;
  a16 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  _Unwind_Resume(a1);
}

uint64_t ZinNEKernelRasterizerLayer::ShuffleProducerChannels(ZinNEKernelRasterizerLayer *this, ZinIrOpLayer *a2, const ZinIrHalParameters *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t Hal;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *__p;
  char *v42;
  char *v43;
  _QWORD v44[3];

  if ((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 54) + 88))(*((_QWORD *)this + 54)) == 1)
    return 0;
  v6 = *((_QWORD *)this + 2);
  v7 = *(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0) + 56);
  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(v6 + 160));
  v9 = *(int *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal) + 8);
  v10 = v7 + v9 - 1;
  v40 = 0;
  v11 = v10 / v9;
  std::vector<unsigned long>::vector(&__p, v9, &v40);
  std::vector<std::vector<unsigned long>>::vector(v44, v10 / v9, (uint64_t)&__p);
  if (__p)
  {
    v42 = (char *)__p;
    operator delete(__p);
  }
  if (v10 >= v9)
  {
    v12 = 0;
    LODWORD(v13) = 0;
    if (v9 <= 1)
      v14 = 1;
    else
      v14 = v9;
    if (v11 <= 1)
      v15 = 1;
    else
      v15 = v10 / v9;
    do
    {
      v16 = 0;
      v17 = (_QWORD *)(v44[0] + 24 * v12);
      v18 = (int)v13;
      v19 = v7 >= (int)v13;
      v20 = v7 - (int)v13;
      if (v19)
        v21 = v20;
      else
        v21 = 0;
      while (1)
      {
        v13 = v18 + v16;
        if (v21 == v16)
          break;
        *(_QWORD *)(*v17 + 8 * v16++) = v13;
        if (v14 == v16)
        {
          LODWORD(v13) = v18 + v16;
          break;
        }
      }
      ++v12;
    }
    while (v12 != v15);
  }
  __p = 0;
  v42 = 0;
  v43 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v38 = v7 + v9 - 1;
  v39 = v9;
  do
  {
    if (v10 >= v9)
    {
      v25 = v24;
      if (v7 > v24)
      {
        v26 = 0;
        do
        {
          v27 = *(_QWORD *)(v44[0] + 24 * v26);
          if (v22 >= v43)
          {
            v28 = (char *)__p;
            v29 = (v22 - (_BYTE *)__p) >> 3;
            v30 = v29 + 1;
            if ((unint64_t)(v29 + 1) >> 61)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v31 = v43 - (_BYTE *)__p;
            if ((v43 - (_BYTE *)__p) >> 2 > v30)
              v30 = v31 >> 2;
            if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
              v32 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v32 = v30;
            if (v32)
            {
              v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v43, v32);
              v28 = (char *)__p;
              v22 = v42;
            }
            else
            {
              v33 = 0;
            }
            v34 = &v33[8 * v29];
            *(_QWORD *)v34 = *(_QWORD *)(v27 + 8 * v23);
            v35 = v34 + 8;
            while (v22 != v28)
            {
              v36 = *((_QWORD *)v22 - 1);
              v22 -= 8;
              *((_QWORD *)v34 - 1) = v36;
              v34 -= 8;
            }
            __p = v34;
            v42 = v35;
            v43 = &v33[8 * v32];
            if (v28)
              operator delete(v28);
            v22 = v35;
          }
          else
          {
            *(_QWORD *)v22 = *(_QWORD *)(v27 + 8 * v23);
            v22 += 8;
          }
          v42 = v22;
          ++v25;
          ++v26;
        }
        while (v26 < v11 && v7 > v25);
        v24 = v25;
        v10 = v38;
        v9 = v39;
      }
    }
    ++v23;
  }
  while (v23 != v9);
  if (ZinIrOpLayer::ShuffleChannels((uint64_t)a2, (uint64_t)&__p))
    v5 = 3;
  else
    v5 = 0;
  if (__p)
  {
    v42 = (char *)__p;
    operator delete(__p);
  }
  __p = v44;
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return v5;
}

void sub_206DA16DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *__p, char *a16, uint64_t a17, char a18)
{
  if (__p)
  {
    a16 = __p;
    operator delete(__p);
  }
  __p = &a18;
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void ZinNEKernelRasterizerLayer::GetShufflingOrder(ZinNEKernelRasterizerLayer *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v32;
  uint64_t v33;

  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  std::vector<unsigned long>::reserve((void **)a5, (unint64_t)this);
  if (a3)
  {
    v9 = 0;
    v32 = (char *)(a4 * a2);
    v30 = a3 - 1;
    v28 = (char *)this - a4 * a2 * (a3 - 1);
    v29 = a4 * a2 * (a3 - 1);
    v10 = (_QWORD *)(a5 + 16);
    v27 = a3;
    do
    {
      v33 = v9;
      if (v9 != v30 || this == (ZinNEKernelRasterizerLayer *)v29)
        v12 = v32;
      else
        v12 = v28;
      if (a2)
      {
        v13 = 0;
        do
        {
          if (v13 < (unint64_t)v12)
          {
            v14 = 0;
            v15 = *(unint64_t **)(a5 + 8);
            v16 = v13;
            do
            {
              v17 = v16 + v33 * (_QWORD)v32;
              if ((unint64_t)v15 >= *v10)
              {
                v19 = *(unint64_t **)a5;
                v20 = ((uint64_t)v15 - *(_QWORD *)a5) >> 3;
                v21 = v20 + 1;
                if ((unint64_t)(v20 + 1) >> 61)
                  std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                v22 = *v10 - (_QWORD)v19;
                if (v22 >> 2 > v21)
                  v21 = v22 >> 2;
                if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
                  v23 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v23 = v21;
                if (v23)
                {
                  v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a5 + 16, v23);
                  v19 = *(unint64_t **)a5;
                  v15 = *(unint64_t **)(a5 + 8);
                }
                else
                {
                  v24 = 0;
                }
                v25 = &v24[8 * v20];
                *(_QWORD *)v25 = v17;
                v18 = (unint64_t *)(v25 + 8);
                while (v15 != v19)
                {
                  v26 = *--v15;
                  *((_QWORD *)v25 - 1) = v26;
                  v25 -= 8;
                }
                *(_QWORD *)a5 = v25;
                *(_QWORD *)(a5 + 8) = v18;
                *(_QWORD *)(a5 + 16) = &v24[8 * v23];
                if (v19)
                  operator delete(v19);
              }
              else
              {
                *v15 = v17;
                v18 = v15 + 1;
              }
              *(_QWORD *)(a5 + 8) = v18;
              v16 = v13 + ++v14 * a2;
              v15 = v18;
            }
            while (v16 < (unint64_t)v12);
          }
          ++v13;
        }
        while (v13 != a2);
      }
      v9 = v33 + 1;
    }
    while (v33 + 1 != v27);
  }
}

void sub_206DA18F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinNEKernelRasterizerLayer::LowerEngine(uint64_t a1, ZinIrOpLayerGraph *a2, uint64_t **a3)
{
  uint64_t v4;
  ZinKernelRasterizerLayer *v5;
  uint64_t v6;
  uint64_t v7;
  ZinIrOpLayer *v8;
  ZinIrOpLayer *v9;
  ZinIrOpLayerGraph *v10;
  uint64_t **v11;
  _QWORD **v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  std::string *v27;
  const void *v28;
  std::string *v29;
  std::string *v30;
  __int128 v31;
  const std::string::value_type *v32;
  std::string::size_type v33;
  std::string *v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _DWORD *v41;
  ZinIrOpLayer *Reshape;
  uint64_t **v43;
  BOOL v44;
  char *v45;
  char *v46;
  char v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  ZinIrOpLayer **v52;
  char *v53;
  char *v54;
  char *v55;
  ZinIrOpLayer *v56;
  ZinIrOpLayer **v57;
  uint64_t v58;
  __n128 v59;
  std::string *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  _BOOL4 v65;
  ZinIrOpLayer *v66;
  uint64_t **v67;
  _BOOL4 v68;
  _BOOL4 v69;
  ZinIrOpLayer **v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  __int128 v75;
  unsigned int v76;
  ZinEngineLayerMirInfo *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int fixed;
  _BOOL4 v82;
  ZinIrOpLayer *v83;
  uint64_t **v84;
  _BOOL4 v85;
  _BOOL4 v86;
  ZinIrOpLayer **v87;
  uint64_t v88;
  _OWORD *v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  ZinIrOpLayer **TemplateZeroPadding;
  uint64_t **v94;
  BOOL v95;
  char v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  ZinIrOpLayer **v100;
  std::string::size_type size;
  uint64_t v102;
  uint64_t (**v103)();
  ZinIrOpLayer *v104;
  std::string *v105;
  uint64_t v106;
  ZinObjectNameFactory *v107;
  ZinIrOpLayer *v108;
  uint64_t (**v109)();
  uint64_t **v110;
  uint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  __int128 *v115;
  uint64_t v116;
  ZinNEKernelRasterizerLayer *v117;
  uint64_t Hal;
  uint64_t v119;
  _QWORD *v120;
  uint64_t **v121;
  std::string *v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  std::string *v127;
  uint64_t v128;
  ZinIrOpLayer **v129;
  _QWORD *v130;
  uint64_t **v131;
  uint64_t v132;
  int v133;
  ZinIrOpLayer *v134;
  uint64_t **v135;
  _BOOL4 v136;
  ZinIrOpLayer **v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __int128 *v141;
  void *v142;
  ZinIrOpLayerGraph *v143;
  uint64_t **v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _DWORD *v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  _DWORD *v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;
  int v163;
  _QWORD *v164;
  ZinIrOpLayer *v165;
  _QWORD *v166;
  uint64_t **v167;
  _BOOL4 v168;
  int v169;
  int v170;
  _OWORD *v171;
  _QWORD *v172;
  ZinIrOpLayer *Alias;
  _QWORD *v174;
  uint64_t **v175;
  _BOOL4 v176;
  int v177;
  uint64_t v178;
  int v179;
  ZinIrOpLayer *v180;
  _QWORD *v181;
  uint64_t **v182;
  _BOOL4 v183;
  int v184;
  _BOOL8 v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  _OWORD v198[2];
  int v199;
  _QWORD *v200;
  _OWORD v201[2];
  int v202;
  _QWORD *v203;
  _QWORD *v204;
  _QWORD *v205;
  ZinIrOpLayer **v206;
  uint64_t v207;
  ZinIrOpLayer **v208;
  std::string v209;
  void *v210[2];
  __int128 v211;
  uint64_t v212;
  uint64_t v213;
  void *__p;
  char *v215;
  unint64_t v216;
  uint64_t **v217;
  ZinIrOpLayerGraph *v218;
  _QWORD v219[2];
  _QWORD *v220;
  void *v221[2];
  char *v222;
  std::string v223;
  std::string *v224;
  _BYTE v225[32];
  __int128 v226;
  __int128 v227;
  _BYTE v228[56];
  __int128 v229;
  __int128 v230;
  __int128 v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  __int128 v236;
  int v237;
  uint64_t v238;
  int v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  int v244;
  _BYTE v245[24];
  _BYTE *v246;
  uint64_t v247;
  ZinIrOpLayer **v248;
  void *v249;
  void *v250;
  __int128 v251;
  char *v252;
  char v253;
  uint64_t *v254[3];
  __int128 v255;
  char *v256;
  __int128 *v257;
  uint64_t v258;

  v258 = *MEMORY[0x24BDAC8D0];
  v217 = a3;
  v218 = a2;
  __p = 0;
  v215 = 0;
  v216 = 0;
  v4 = **a3;
  v5 = *(ZinKernelRasterizerLayer **)(a1 + 432);
  if ((unint64_t)(*(uint64_t (**)(ZinKernelRasterizerLayer *))(*(_QWORD *)v5 + 88))(v5) >= 2)
  {
    v6 = **(_QWORD **)(a1 + 88);
    if (*(_DWORD *)(*(_QWORD *)(v6 + 64) + 8) != 85)
      goto LABEL_101;
    v7 = ZinNEKernelRasterizerLayer::ShuffleProducerChannels((ZinNEKernelRasterizerLayer *)a1, *(ZinIrOpLayer **)(v6 + 432), (const ZinIrHalParameters *)v4);
    if ((_DWORD)v7)
      goto LABEL_241;
    v8 = *(ZinIrOpLayer **)(v6 + 384);
    if (v8)
    {
      v7 = ZinNEKernelRasterizerLayer::ShuffleProducerChannels((ZinNEKernelRasterizerLayer *)a1, v8, (const ZinIrHalParameters *)v4);
      if ((_DWORD)v7)
        goto LABEL_241;
    }
    v9 = *(ZinIrOpLayer **)(v6 + 392);
    if (v9)
    {
      v7 = ZinNEKernelRasterizerLayer::ShuffleProducerChannels((ZinNEKernelRasterizerLayer *)a1, v9, (const ZinIrHalParameters *)v4);
      if ((_DWORD)v7)
        goto LABEL_241;
    }
  }
  v10 = v218;
  v210[0] = (void *)a1;
  *(_QWORD *)v225 = v210;
  v11 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((_QWORD *)v218 + 8, (unint64_t **)v225);
  v12 = (_QWORD **)((char *)v10 + 104);
  if (v11)
    v12 = v11 + 3;
  v13 = (_QWORD *)**v12;
  v14 = v215;
  if ((unint64_t)v215 >= v216)
  {
    v16 = (v215 - (_BYTE *)__p) >> 3;
    if ((unint64_t)(v16 + 1) >> 61)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v17 = (uint64_t)(v216 - (_QWORD)__p) >> 2;
    if (v17 <= v16 + 1)
      v17 = v16 + 1;
    if (v216 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v17;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v216, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    v21 = &v19[8 * v18];
    *(_QWORD *)v20 = *v13;
    v15 = v20 + 8;
    v23 = (char *)__p;
    v22 = v215;
    if (v215 != __p)
    {
      do
      {
        v24 = *((_QWORD *)v22 - 1);
        v22 -= 8;
        *((_QWORD *)v20 - 1) = v24;
        v20 -= 8;
      }
      while (v22 != v23);
      v22 = (char *)__p;
    }
    __p = v20;
    v215 = v15;
    v216 = (unint64_t)v21;
    if (v22)
      operator delete(v22);
  }
  else
  {
    *(_QWORD *)v215 = *v13;
    v15 = v14 + 8;
  }
  v215 = v15;
  v213 = *(_QWORD *)(a1 + 16);
  v25 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)v15 - 1) + 32))(*((_QWORD *)v15 - 1), 0, 0);
  if (ZinKernelRasterizerLayer::GetMode(v5) == 1)
  {
    if (*((char *)v5 + 47) >= 0)
      v26 = *((unsigned __int8 *)v5 + 47);
    else
      v26 = *((_QWORD *)v5 + 4);
    v27 = &v223;
    std::string::basic_string[abi:ne180100]((uint64_t)&v223, v26 + 1);
    if ((v223.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v27 = (std::string *)v223.__r_.__value_.__r.__words[0];
    if (v26)
    {
      if (*((char *)v5 + 47) >= 0)
        v28 = (char *)v5 + 24;
      else
        v28 = (const void *)*((_QWORD *)v5 + 3);
      memmove(v27, v28, v26);
    }
    *(_WORD *)((char *)&v27->__r_.__value_.__l.__data_ + v26) = 95;
    v29 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v251, "reshape_kernel_rast");
    v30 = std::string::append(v29, "_xfm", 4uLL);
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v256 = (char *)v30->__r_.__value_.__r.__words[2];
    v255 = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v256) >= 0)
      v32 = (const std::string::value_type *)&v255;
    else
      v32 = (const std::string::value_type *)v255;
    if (SHIBYTE(v256) >= 0)
      v33 = HIBYTE(v256);
    else
      v33 = *((_QWORD *)&v255 + 1);
    v34 = std::string::append(&v223, v32, v33);
    v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    *(_QWORD *)&v211 = *((_QWORD *)&v34->__r_.__value_.__l + 2);
    *(_OWORD *)v210 = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    ZinObjectNameFactory::ZinObjectNameFactory(v225, v210);
    if (SBYTE7(v211) < 0)
      operator delete(v210[0]);
    if (SHIBYTE(v256) < 0)
      operator delete((void *)v255);
    if (SHIBYTE(v252) < 0)
      operator delete((void *)v251);
    if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v223.__r_.__value_.__l.__data_);
    v36 = *(_QWORD *)(v25 + 48);
    v37 = *(_QWORD *)(v25 + 56);
    v38 = v25 + 48;
    v210[0] = (void *)1;
    v210[1] = (void *)(v36 * v37);
    v211 = *(_OWORD *)(v38 + 16);
    v212 = *(_QWORD *)(v38 + 32);
    v39 = v213;
    v40 = *(_DWORD *)(v38 + 40);
    v41 = operator new(0x14uLL);
    *((_QWORD *)&v255 + 1) = v41 + 5;
    v256 = (char *)(v41 + 5);
    v41[4] = 4;
    *(_OWORD *)v41 = xmmword_207A9D2E8;
    *(_QWORD *)&v255 = v41;
    DimensionOrderHint::DimensionOrderHint(&v223, &v255);
    Reshape = (ZinIrOpLayer *)ZinBuilder::CreateReshape(v39, (uint64_t)v225, v38, v40, (__int128 *)v210, (const DimensionOrderHint *)&v223);
    if (v223.__r_.__value_.__r.__words[0])
    {
      v223.__r_.__value_.__l.__size_ = v223.__r_.__value_.__r.__words[0];
      operator delete(v223.__r_.__value_.__l.__data_);
    }
    if ((_QWORD)v255)
    {
      *((_QWORD *)&v255 + 1) = v255;
      operator delete((void *)v255);
    }
    v43 = (uint64_t **)v218;
    *(_QWORD *)&v251 = a1;
    *(_QWORD *)&v255 = &v251;
    *((_QWORD *)&v255 + 1) = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&v223, &v255);
    v44 = ZinIrOpLayerGraph::AddNode(v43, Reshape, (ZinIrOpLayer ***)&v223);
    v223.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
    if (v223.__r_.__value_.__l.__size_)
    {
      v223.__r_.__value_.__r.__words[2] = v223.__r_.__value_.__l.__size_;
      operator delete((void *)v223.__r_.__value_.__l.__size_);
    }
    if (v44
      && ZinIrOpLayerGraph::AddEdge((uint64_t)v218, *((_QWORD *)v215 - 1), (uint64_t)Reshape, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0))
    {
      v45 = v215;
      if ((unint64_t)v215 >= v216)
      {
        v48 = (v215 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v48 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v49 = (uint64_t)(v216 - (_QWORD)__p) >> 2;
        if (v49 <= v48 + 1)
          v49 = v48 + 1;
        if (v216 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
          v50 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v50 = v49;
        if (v50)
          v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v216, v50);
        else
          v51 = 0;
        v52 = (ZinIrOpLayer **)&v51[8 * v48];
        v53 = &v51[8 * v50];
        *v52 = Reshape;
        v46 = (char *)(v52 + 1);
        v55 = (char *)__p;
        v54 = v215;
        if (v215 != __p)
        {
          do
          {
            v56 = (ZinIrOpLayer *)*((_QWORD *)v54 - 1);
            v54 -= 8;
            *--v52 = v56;
          }
          while (v54 != v55);
          v54 = (char *)__p;
        }
        __p = v52;
        v215 = v46;
        v216 = (unint64_t)v53;
        if (v54)
          operator delete(v54);
      }
      else
      {
        *(_QWORD *)v215 = Reshape;
        v46 = v45 + 8;
      }
      v215 = v46;
      v47 = 1;
    }
    else
    {
      v47 = 0;
    }
    *(_QWORD *)v225 = off_24C01FBB0;
    if ((v225[31] & 0x80000000) != 0)
    {
      operator delete(*(void **)&v225[8]);
      if ((v47 & 1) != 0)
        goto LABEL_79;
    }
    else if ((v47 & 1) != 0)
    {
      goto LABEL_79;
    }
LABEL_101:
    v7 = 3;
    goto LABEL_241;
  }
LABEL_79:
  v57 = (ZinIrOpLayer **)*((_QWORD *)v215 - 1);
  v58 = (*((uint64_t (**)(ZinIrOpLayer **, _QWORD, _QWORD))*v57 + 4))(v57, 0, 0);
  v197 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
  v59 = ZinObjectNameFactory::ZinObjectNameFactory(v210, (char *)v5 + 24);
  memset(&v209, 0, sizeof(v209));
  v208 = v57;
  if ((unint64_t)(*(uint64_t (**)(ZinKernelRasterizerLayer *, __n128))(*(_QWORD *)v5 + 88))(v5, v59) <= 1
    && (*(_QWORD *)(v58 + 56) != 1 || *(_QWORD *)(v197 + 56) != 1))
  {
    v207 = 0;
    v71 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
    if (ZinTensorFormatGetSize(*(_DWORD *)(v71 + 88), &v207))
      ZinAssertImpl("invalid tensor format of kernel rasterizer layer\n");
    v72 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
    v73 = *(_QWORD *)(v4 + 480);
    v74 = ZinAlignPower2(v207 * *(_QWORD *)(v72 + 72), *(_QWORD *)(v4 + 568));
    *(_DWORD *)&v225[12] = 0;
    *(_WORD *)&v225[16] = 0;
    *(_DWORD *)&v225[20] = 0;
    *(_WORD *)&v225[24] = 0;
    v226 = 0u;
    v227 = 0u;
    *(_QWORD *)v228 = 0;
    *(_QWORD *)v225 = 0;
    *(_WORD *)&v225[8] = 0;
    *(int64x2_t *)&v228[8] = vdupq_n_s64(1uLL);
    *(_OWORD *)&v228[24] = *(_OWORD *)&v228[8];
    *(_OWORD *)&v228[40] = *(_OWORD *)&v228[8];
    v229 = *(_OWORD *)&v228[8];
    v230 = *(_OWORD *)&v228[8];
    *(_QWORD *)&v75 = 0x100000001;
    *((_QWORD *)&v75 + 1) = 0x100000001;
    v231 = v75;
    v232 = 0x100000001;
    v234 = 0;
    v233 = 0;
    v235 = 0;
    v236 = xmmword_207A85790;
    v237 = 1;
    v238 = 1;
    v239 = 0;
    v244 = 0;
    v240 = 1;
    v241 = 0;
    v243 = 0;
    v242 = 0;
    v76 = *(_DWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0) + 88);
    v223.__r_.__value_.__r.__words[0] = 0;
    v195 = ZinMirKernelSizeSplitterEngine::DetermineEfficientMaxChannelsPerNE(v76, (uint64_t)v225, (uint64_t *)&v223, v74, 1uLL, v73, *(_QWORD *)(v4 + 568), 1);
    v77 = (ZinEngineLayerMirInfo *)v223.__r_.__value_.__r.__words[0];
    v223.__r_.__value_.__r.__words[0] = 0;
    if (v77)
    {
      ZinEngineLayerMirInfo::~ZinEngineLayerMirInfo(v77);
      MEMORY[0x20BD002F8]();
    }
    v78 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0) + 56);
    v79 = *(int *)(v4 + 8);
    v206 = 0;
    v80 = (*((uint64_t (**)(ZinIrOpLayer **, _QWORD, _QWORD))*v208 + 4))(v208, 0, 0);
    fixed = ZinMirTensorTransform::FixAllocation(v80, (uint64_t)v210, 2, (uint64_t *)&v206, 0, 1uLL, 1);
    v82 = fixed == 0;
    v83 = (ZinIrOpLayer *)v206;
    if (v206)
    {
      v84 = (uint64_t **)v218;
      *(_QWORD *)&v251 = a1;
      *(_QWORD *)&v255 = &v251;
      *((_QWORD *)&v255 + 1) = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(&v223, &v255);
      v85 = ZinIrOpLayerGraph::AddNode(v84, v83, (ZinIrOpLayer ***)&v223);
      v223.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
      if (v223.__r_.__value_.__l.__size_)
      {
        v223.__r_.__value_.__r.__words[2] = v223.__r_.__value_.__l.__size_;
        operator delete((void *)v223.__r_.__value_.__l.__size_);
      }
      v86 = v85 & ZinIrOpLayerGraph::AddEdge((uint64_t)v218, (uint64_t)v208, (uint64_t)v206, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      if (fixed)
        v82 = 0;
      else
        v82 = v86;
      v87 = v206;
      v208 = v206;
    }
    else
    {
      v87 = v208;
    }
    ZinMirTensorTransform::Split((uint64_t **)v218, v87, 1uLL, 0, (uint64_t)v210, a1, (void **)&v223.__r_.__value_.__l.__data_);
    if (v209.__r_.__value_.__r.__words[0])
    {
      v209.__r_.__value_.__l.__size_ = v209.__r_.__value_.__r.__words[0];
      operator delete(v209.__r_.__value_.__l.__data_);
    }
    v100 = (ZinIrOpLayer **)v223.__r_.__value_.__r.__words[0];
    v209 = v223;
    size = v223.__r_.__value_.__l.__size_;
    if (v223.__r_.__value_.__r.__words[0] != v223.__r_.__value_.__l.__size_)
    {
      v102 = vcvtpd_u64_f64((double)v78 / (double)(unint64_t)(v195 * v79));
      v103 = &off_24C05B128;
      while (1)
      {
        v104 = *v100;
        v105 = (std::string *)operator new(0x28uLL);
        v105->__r_.__value_.__r.__words[0] = (std::string::size_type)v103;
        v105->__r_.__value_.__l.__size_ = (std::string::size_type)&v218;
        v105->__r_.__value_.__r.__words[2] = (std::string::size_type)v210;
        v105[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&v217;
        v105[1].__r_.__value_.__l.__size_ = a1;
        v224 = v105;
        if (*(_QWORD *)(v197 + 56) == 1)
        {
          *(_QWORD *)&v255 = v104;
          v108 = std::__function::__func<ZinNEKernelRasterizerLayer::LowerEngine(ZinIrOpLayerGraph *,ZinTransformInfo *)::$_0::operator() const(ZinIrOpLayer *)::{lambda(ZinIrOpLayer *)#1},std::allocator<ZinNEKernelRasterizerLayer::LowerEngine(ZinIrOpLayerGraph *,ZinTransformInfo *)::$_0::operator() const(ZinIrOpLayer *)::{lambda(ZinIrOpLayer *)#1}>,ZinIrOpLayer * ()(ZinIrOpLayer *)>::operator()((uint64_t)v105, (ZinIrOpLayerGraph **)&v255, v106, v107);
          goto LABEL_150;
        }
        v109 = v103;
        v110 = (uint64_t **)v218;
        v111 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v104 + 32))(v104, 0, 0);
        ZinMirTensorTransform::Split(v110, v104, *(_QWORD *)(v111 + 56) / *(uint64_t *)(v197 + 56), 1, (uint64_t)v210, a1, v221);
        v112 = v221[0];
        v113 = v221[1];
        v114 = (uint64_t)v224;
        if (!v224)
          goto LABEL_127;
        if (v224 != &v223)
          break;
        v257 = &v255;
        (*(void (**)(std::string *, __int128 *))(v223.__r_.__value_.__r.__words[0] + 24))(&v223, &v255);
LABEL_131:
        while (v112 != v113)
        {
          *(_QWORD *)&v251 = *v112;
          if (!v257)
            std::__throw_bad_function_call[abi:ne180100]();
          *v112++ = (*(uint64_t (**)(__int128 *, __int128 *))(*(_QWORD *)v257 + 48))(v257, &v251);
        }
        v115 = v257;
        if (v257 == &v255)
        {
          v115 = &v255;
          v116 = 4;
          v103 = v109;
          goto LABEL_136;
        }
        v103 = v109;
        if (v257)
        {
          v116 = 5;
LABEL_136:
          (*(void (**)(void))(*(_QWORD *)v115 + 8 * v116))();
        }
        v117 = *(ZinNEKernelRasterizerLayer **)(v197 + 56);
        Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(v213 + 160));
        v119 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
        ZinNEKernelRasterizerLayer::GetShufflingOrder(v117, *(int *)(v119 + 8), v102, v195, (uint64_t)v254);
        ZinSelect<ZinIrOpLayer *,unsigned long>((uint64_t *)v221, v254, (uint64_t)&v251);
        if (v221[0])
        {
          v221[1] = v221[0];
          operator delete(v221[0]);
        }
        *(_OWORD *)v221 = v251;
        v222 = v252;
        v220 = 0;
        ZinBuilder::CreateConcat(v213, (uint64_t)v210, (char **)v221, 0, 1, &v220, 0, (uint64_t)&v251);
        v120 = v220;
        v220 = 0;
        if (v120)
          std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v220, v120);
        v121 = (uint64_t **)v218;
        v247 = a1;
        v219[0] = &v247;
        v219[1] = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(&v248, v219);
        ZinBuilder::AddConcatToGraph(v121, (uint64_t *)v221, &v251, &v248);
        v248 = (ZinIrOpLayer **)&unk_24C02BB18;
        if (v249)
        {
          v250 = v249;
          operator delete(v249);
        }
        v108 = *(ZinIrOpLayer **)(*((_QWORD *)&v251 + 1) - 8);
        if (v253 && (_QWORD)v251)
        {
          *((_QWORD *)&v251 + 1) = v251;
          operator delete((void *)v251);
        }
        if (v254[0])
        {
          v254[1] = v254[0];
          operator delete(v254[0]);
        }
        if (v221[0])
        {
          v221[1] = v221[0];
          operator delete(v221[0]);
        }
LABEL_150:
        v122 = v224;
        if (v224 == &v223)
        {
          v122 = &v223;
          v123 = 4;
          goto LABEL_154;
        }
        if (v224)
        {
          v123 = 5;
LABEL_154:
          (*(void (**)(void))(v122->__r_.__value_.__r.__words[0] + 8 * v123))();
        }
        *v100++ = v108;
        if (v100 == (ZinIrOpLayer **)size)
          goto LABEL_156;
      }
      v114 = (*(uint64_t (**)(void))(v224->__r_.__value_.__r.__words[0] + 16))();
LABEL_127:
      v257 = (__int128 *)v114;
      goto LABEL_131;
    }
LABEL_156:
    v65 = v82;
LABEL_174:
    if (v209.__r_.__value_.__l.__size_ - v209.__r_.__value_.__r.__words[0] == 8)
    {
      v129 = *(ZinIrOpLayer ***)v209.__r_.__value_.__l.__data_;
      v208 = *(ZinIrOpLayer ***)v209.__r_.__value_.__l.__data_;
    }
    else
    {
      v205 = 0;
      ZinBuilder::CreateConcat(v213, (uint64_t)v210, &v209.__r_.__value_.__l.__data_, 5, 1, &v205, 0, (uint64_t)v225);
      v130 = v205;
      v205 = 0;
      if (v130)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v205, v130);
      v131 = (uint64_t **)v218;
      *(_QWORD *)&v251 = a1;
      *(_QWORD *)&v255 = &v251;
      *((_QWORD *)&v255 + 1) = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(&v223, &v255);
      ZinBuilder::AddConcatToGraph(v131, (uint64_t *)&v209, v225, (ZinIrOpLayer ***)&v223);
      v223.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
      if (v223.__r_.__value_.__l.__size_)
      {
        v223.__r_.__value_.__r.__words[2] = v223.__r_.__value_.__l.__size_;
        operator delete((void *)v223.__r_.__value_.__l.__size_);
      }
      v129 = *(ZinIrOpLayer ***)(*(_QWORD *)&v225[8] - 8);
      v208 = v129;
      if (v225[24] && *(_QWORD *)v225)
      {
        *(_QWORD *)&v225[8] = *(_QWORD *)v225;
        operator delete(*(void **)v225);
        v129 = v208;
      }
    }
    v248 = 0;
    v132 = (*((uint64_t (**)(ZinIrOpLayer **, _QWORD, _QWORD))*v129 + 4))(v129, 0, 0);
    if (ZinMirTensorTransform::FixAllocation(v132, (uint64_t)v210, 2, (uint64_t *)&v248, 0, 1uLL, 1))
      v133 = 0;
    else
      v133 = v65;
    v134 = (ZinIrOpLayer *)v248;
    if (v248)
    {
      v135 = (uint64_t **)v218;
      *(_QWORD *)&v255 = a1;
      v223.__r_.__value_.__r.__words[0] = (std::string::size_type)&v255;
      v223.__r_.__value_.__l.__size_ = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(v225, &v223);
      v136 = ZinIrOpLayerGraph::AddNode(v135, v134, (ZinIrOpLayer ***)v225);
      *(_QWORD *)v225 = &unk_24C02BB18;
      if (*(_QWORD *)&v225[8])
      {
        *(_QWORD *)&v225[16] = *(_QWORD *)&v225[8];
        operator delete(*(void **)&v225[8]);
      }
      v133 &= v136 & ZinIrOpLayerGraph::AddEdge((uint64_t)v218, (uint64_t)v208, (uint64_t)v248, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      v137 = v248;
      v208 = v248;
    }
    else
    {
      v137 = v208;
    }
    v138 = *(_QWORD *)((*((uint64_t (**)(ZinIrOpLayer **, _QWORD, _QWORD))*v137 + 4))(v137, 0, 0) + 104);
    if (v138)
    {
      v139 = *(unsigned int *)(v138 + 96);
      if ((_DWORD)v139 == 2)
      {
        DimensionOrderHint::DimensionOrderHint(&v255, 2);
        v140 = 64;
LABEL_197:
        v141 = (__int128 *)(v197 + 48);
        ZinIrTensor::CreateDefaultStride((const ZinTensorDimensions *)(v197 + 48), *(_DWORD *)(v197 + 88), v139, (uint64_t)&v255, v140, 1, 1, (int64x2_t *)&v223);
        v142 = (void *)operator new();
        ZinIrTensor::MirInfo::MirInfo(v142, v139, 1, 1, &v255, &v223);
        v221[0] = v142;
        v143 = v218;
        *(_QWORD *)&v251 = a1;
        *(_QWORD *)v225 = &v251;
        v144 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((_QWORD *)v218 + 3, (unint64_t **)v225);
        v145 = (uint64_t *)(v144 + 3);
        if (!v144)
          v145 = (uint64_t *)((char *)v143 + 104);
        v146 = *v145;
        v147 = v145[1];
        while (v146 != v147)
        {
          if (*(_DWORD *)(*(_QWORD *)(**(_QWORD **)v146 + 64) + 8) == 7)
          {
            v156 = (uint64_t)v208[2];
            (*((void (**)(_BYTE *__return_ptr, ZinIrOpLayer **, _QWORD, _QWORD))*v208 + 10))(v225, v208, 0, 0);
            v157 = operator new(0x78uLL);
            *((_QWORD *)&v251 + 1) = v157 + 30;
            v252 = (char *)(v157 + 30);
            v157[28] = *(_DWORD *)&v228[48];
            v158 = *(_OWORD *)&v228[32];
            v159 = *(_OWORD *)v228;
            *((_OWORD *)v157 + 5) = *(_OWORD *)&v228[16];
            *((_OWORD *)v157 + 6) = v158;
            v160 = *(_OWORD *)&v225[16];
            *(_OWORD *)v157 = *(_OWORD *)v225;
            *((_OWORD *)v157 + 1) = v160;
            v161 = v227;
            *((_OWORD *)v157 + 2) = v226;
            *((_OWORD *)v157 + 3) = v161;
            *((_OWORD *)v157 + 4) = v159;
            *(_QWORD *)&v251 = v157;
            v162 = *(_QWORD *)((*((uint64_t (**)(ZinIrOpLayer **, _QWORD, _QWORD))*v208 + 4))(v208, 0, 0)
                             + 104);
            if (v162)
              v163 = *(_DWORD *)(v162 + 96);
            else
              v163 = 0;
            v172 = v221[0];
            v221[0] = 0;
            v204 = v172;
            Alias = (ZinIrOpLayer *)ZinBuilder::CreateAlias(v156, (uint64_t)v210, (uint64_t)&v251, v163, v141, (uint64_t)&v204);
            v174 = v204;
            v204 = 0;
            if (v174)
              std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v204, v174);
            if ((_QWORD)v251)
            {
              *((_QWORD *)&v251 + 1) = v251;
              operator delete((void *)v251);
            }
            v175 = (uint64_t **)v218;
            v254[0] = (uint64_t *)a1;
            *(_QWORD *)&v251 = v254;
            *((_QWORD *)&v251 + 1) = 1;
            Layer2TDMapper::SourceLayer::SourceLayer(v225, &v251);
            v176 = ZinIrOpLayerGraph::AddNode(v175, Alias, (ZinIrOpLayer ***)v225);
            *(_QWORD *)v225 = &unk_24C02BB18;
            if (*(_QWORD *)&v225[8])
            {
              *(_QWORD *)&v225[16] = *(_QWORD *)&v225[8];
              operator delete(*(void **)&v225[8]);
            }
            v177 = ZinIrOpLayerGraph::AddEdge((uint64_t)v218, (uint64_t)v208, (uint64_t)Alias, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
            v178 = *((_QWORD *)Alias + 2);
            v179 = *(_DWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Alias + 32))(Alias, 0, 0)+ 88);
            v203 = 0;
            v180 = (ZinIrOpLayer *)ZinBuilder::CreateCopyLayer(v178, (uint64_t)Alias, (uint64_t)v210, v179, &v203);
            v181 = v203;
            v203 = 0;
            if (v181)
              std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v203, v181);
            v182 = (uint64_t **)v218;
            v254[0] = (uint64_t *)a1;
            *(_QWORD *)&v251 = v254;
            *((_QWORD *)&v251 + 1) = 1;
            Layer2TDMapper::SourceLayer::SourceLayer(v225, &v251);
            v183 = ZinIrOpLayerGraph::AddNode(v182, v180, (ZinIrOpLayer ***)v225);
            *(_QWORD *)v225 = &unk_24C02BB18;
            if (*(_QWORD *)&v225[8])
            {
              *(_QWORD *)&v225[16] = *(_QWORD *)&v225[8];
              operator delete(*(void **)&v225[8]);
            }
            v184 = ZinIrOpLayerGraph::AddEdge((uint64_t)v218, (uint64_t)Alias, (uint64_t)v180, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
            memset(v201, 0, sizeof(v201));
            v202 = 1065353216;
            v170 = v176 & v177 & v183 & v184 & ZinIrOpLayerGraph::MoveOutgoingEdges(v218, (uint64_t **)a1, v180, v201);
            v171 = v201;
            goto LABEL_227;
          }
          v146 += 8;
        }
        v148 = (uint64_t)v208[2];
        (*((void (**)(_BYTE *__return_ptr, ZinIrOpLayer **, _QWORD, _QWORD))*v208 + 10))(v225, v208, 0, 0);
        v149 = operator new(0x78uLL);
        *((_QWORD *)&v251 + 1) = v149 + 30;
        v252 = (char *)(v149 + 30);
        v149[28] = *(_DWORD *)&v228[48];
        v150 = *(_OWORD *)&v228[32];
        v151 = *(_OWORD *)v228;
        *((_OWORD *)v149 + 5) = *(_OWORD *)&v228[16];
        *((_OWORD *)v149 + 6) = v150;
        v152 = *(_OWORD *)&v225[16];
        *(_OWORD *)v149 = *(_OWORD *)v225;
        *((_OWORD *)v149 + 1) = v152;
        v153 = v227;
        *((_OWORD *)v149 + 2) = v226;
        *((_OWORD *)v149 + 3) = v153;
        *((_OWORD *)v149 + 4) = v151;
        *(_QWORD *)&v251 = v149;
        v154 = *(_QWORD *)((*((uint64_t (**)(ZinIrOpLayer **, _QWORD, _QWORD))*v208 + 4))(v208, 0, 0) + 104);
        if (v154)
          v155 = *(_DWORD *)(v154 + 96);
        else
          v155 = 0;
        v164 = v221[0];
        v221[0] = 0;
        v200 = v164;
        v165 = (ZinIrOpLayer *)ZinBuilder::CreateAlias(v148, (uint64_t)v210, (uint64_t)&v251, v155, v141, (uint64_t)&v200);
        v166 = v200;
        v200 = 0;
        if (v166)
          std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v200, v166);
        if ((_QWORD)v251)
        {
          *((_QWORD *)&v251 + 1) = v251;
          operator delete((void *)v251);
        }
        v167 = (uint64_t **)v218;
        v254[0] = (uint64_t *)a1;
        *(_QWORD *)&v251 = v254;
        *((_QWORD *)&v251 + 1) = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(v225, &v251);
        v168 = ZinIrOpLayerGraph::AddNode(v167, v165, (ZinIrOpLayer ***)v225);
        *(_QWORD *)v225 = &unk_24C02BB18;
        if (*(_QWORD *)&v225[8])
        {
          *(_QWORD *)&v225[16] = *(_QWORD *)&v225[8];
          operator delete(*(void **)&v225[8]);
        }
        v169 = ZinIrOpLayerGraph::AddEdge((uint64_t)v218, (uint64_t)v208, (uint64_t)v165, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        memset(v198, 0, sizeof(v198));
        v199 = 1065353216;
        v170 = v168 & v169 & ZinIrOpLayerGraph::MoveOutgoingEdges(v218, (uint64_t **)a1, v165, v198);
        v171 = v198;
LABEL_227:
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v171);
        if (v197)
        {
          if ((v133 & v170 & ZinIrOpLayerGraph::RemoveNode(v218, (ZinIrOpLayer *)a1, 0) & 1) != 0)
          {
            v7 = 0;
LABEL_233:
            v193 = v221[0];
            v221[0] = 0;
            if (v193)
              std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)v221, v193);
            if ((_QWORD)v255)
            {
              *((_QWORD *)&v255 + 1) = v255;
              operator delete((void *)v255);
            }
            goto LABEL_237;
          }
          v185 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v185)
            ZinNEKernelRasterizerLayer::LowerEngine(v185, v186, v187, v188, v189, v190, v191, v192);
        }
        v7 = 3;
        goto LABEL_233;
      }
    }
    else
    {
      v139 = 0;
    }
    DimensionOrderHint::DimensionOrderHint(&v255, 1);
    v140 = 16;
    goto LABEL_197;
  }
  v60 = (std::string *)operator new(0x38uLL);
  v60->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C059088;
  v60->__r_.__value_.__l.__size_ = (std::string::size_type)&v218;
  v60->__r_.__value_.__r.__words[2] = (std::string::size_type)v210;
  v60[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&v208;
  v60[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v213;
  v60[1].__r_.__value_.__r.__words[2] = (std::string::size_type)&v217;
  v60[2].__r_.__value_.__r.__words[0] = a1;
  v224 = v60;
  v61 = *(_DWORD *)(v58 + 88);
  v62 = ZinIrTarget::GetHal(*(ZinIrTarget **)(v213 + 160));
  if (!*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 16))(v62) + 1208))
  {
    ZinMirKernelRasterizer::GetPaddedTemplateSize(*(_QWORD *)(v58 + 64), *(_QWORD *)(v58 + 72), v61, (int64x2_t *)v225);
    if (v225[16])
    {
      v88 = v213;
      (*((void (**)(_BYTE *__return_ptr, ZinIrOpLayer **, _QWORD, _QWORD))*v57 + 10))(v225, v57, 0, 0);
      v89 = operator new(0x78uLL);
      *((_QWORD *)&v255 + 1) = (char *)v89 + 120;
      v256 = (char *)v89 + 120;
      v90 = *(_OWORD *)&v228[16];
      v89[4] = *(_OWORD *)v228;
      v89[5] = v90;
      v89[6] = *(_OWORD *)&v228[32];
      *((_DWORD *)v89 + 28) = *(_DWORD *)&v228[48];
      v91 = *(_OWORD *)&v225[16];
      *v89 = *(_OWORD *)v225;
      v89[1] = v91;
      v92 = v227;
      v89[2] = v226;
      v89[3] = v92;
      *(_QWORD *)&v255 = v89;
      TemplateZeroPadding = (ZinIrOpLayer **)ZinBuilder::CreateTemplateZeroPadding(v88, (uint64_t)v210, (uint64_t *)&v255);
      v208 = TemplateZeroPadding;
      if ((_QWORD)v255)
      {
        *((_QWORD *)&v255 + 1) = v255;
        operator delete((void *)v255);
        TemplateZeroPadding = v208;
      }
      v94 = (uint64_t **)v218;
      *(_QWORD *)&v251 = a1;
      *(_QWORD *)&v255 = &v251;
      *((_QWORD *)&v255 + 1) = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(v225, &v255);
      v95 = ZinIrOpLayerGraph::AddNode(v94, (ZinIrOpLayer *)TemplateZeroPadding, (ZinIrOpLayer ***)v225);
      *(_QWORD *)v225 = &unk_24C02BB18;
      if (*(_QWORD *)&v225[8])
      {
        *(_QWORD *)&v225[16] = *(_QWORD *)&v225[8];
        operator delete(*(void **)&v225[8]);
      }
      if (!v95
        || (ZinIrOpLayerGraph::AddEdge((uint64_t)v218, (uint64_t)v57, (uint64_t)v208, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0) & 1) == 0)
      {
        v96 = 0;
        v65 = 1;
        goto LABEL_168;
      }
    }
  }
  *(_QWORD *)&v251 = 0;
  v63 = (*((uint64_t (**)(ZinIrOpLayer **, _QWORD, _QWORD))*v208 + 4))(v208, 0, 0);
  v64 = ZinMirTensorTransform::FixAllocation(v63, (uint64_t)v210, 2, (uint64_t *)&v251, 0, 1uLL, 1);
  v65 = v64 == 0;
  v66 = (ZinIrOpLayer *)v251;
  if ((_QWORD)v251)
  {
    v67 = (uint64_t **)v218;
    v248 = (ZinIrOpLayer **)a1;
    *(_QWORD *)&v255 = &v248;
    *((_QWORD *)&v255 + 1) = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(v225, &v255);
    v68 = ZinIrOpLayerGraph::AddNode(v67, v66, (ZinIrOpLayer ***)v225);
    *(_QWORD *)v225 = &unk_24C02BB18;
    if (*(_QWORD *)&v225[8])
    {
      *(_QWORD *)&v225[16] = *(_QWORD *)&v225[8];
      operator delete(*(void **)&v225[8]);
    }
    v69 = v68 & ZinIrOpLayerGraph::AddEdge((uint64_t)v218, (uint64_t)v208, v251, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    if (v64)
      v65 = 0;
    else
      v65 = v69;
    v70 = (ZinIrOpLayer **)v251;
    v208 = (ZinIrOpLayer **)v251;
  }
  else
  {
    v70 = v208;
  }
  ZinMirTensorTransform::Split((uint64_t **)v218, v70, 1uLL, 0, (uint64_t)v210, a1, (void **)v225);
  if (v209.__r_.__value_.__r.__words[0])
  {
    v209.__r_.__value_.__l.__size_ = v209.__r_.__value_.__r.__words[0];
    operator delete(v209.__r_.__value_.__l.__data_);
  }
  v97 = *(_QWORD **)v225;
  v209 = *(std::string *)v225;
  v98 = *(_QWORD **)&v225[8];
  v99 = (uint64_t)v224;
  if (v224)
  {
    v196 = *(_QWORD **)&v225[8];
    if (v224 == &v223)
    {
      v246 = v245;
      (*(void (**)(std::string *, _BYTE *))(v223.__r_.__value_.__r.__words[0] + 24))(&v223, v245);
      v98 = v196;
      goto LABEL_158;
    }
    v99 = (*(uint64_t (**)(void))(v224->__r_.__value_.__r.__words[0] + 16))();
    v98 = v196;
  }
  v246 = (_BYTE *)v99;
LABEL_158:
  v124 = v98;
  while (v97 != v124)
  {
    *(_QWORD *)v225 = *v97;
    if (!v246)
      std::__throw_bad_function_call[abi:ne180100]();
    *v97++ = (*(uint64_t (**)(_BYTE *, _BYTE *))(*(_QWORD *)v246 + 48))(v246, v225);
  }
  v125 = v246;
  if (v246 == v245)
  {
    v126 = 4;
    v125 = v245;
    goto LABEL_166;
  }
  if (v246)
  {
    v126 = 5;
LABEL_166:
    (*(void (**)(void))(*v125 + 8 * v126))();
  }
  v96 = 1;
LABEL_168:
  v127 = v224;
  if (v224 == &v223)
  {
    v128 = 4;
    v127 = &v223;
  }
  else
  {
    if (!v224)
      goto LABEL_173;
    v128 = 5;
  }
  (*(void (**)(void))(v127->__r_.__value_.__r.__words[0] + 8 * v128))();
LABEL_173:
  if ((v96 & 1) != 0)
    goto LABEL_174;
  v7 = 3;
LABEL_237:
  if (v209.__r_.__value_.__r.__words[0])
  {
    v209.__r_.__value_.__l.__size_ = v209.__r_.__value_.__r.__words[0];
    operator delete(v209.__r_.__value_.__l.__data_);
  }
  v210[0] = off_24C01FBB0;
  if (SHIBYTE(v211) < 0)
    operator delete(v210[1]);
LABEL_241:
  if (__p)
  {
    v215 = (char *)__p;
    operator delete(__p);
  }
  return v7;
}

void sub_206DA2F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t ZinNEKernelRasterizerLayer::Clone(_QWORD *a1, uint64_t *a2, const void **a3)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void **v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  size_t v17;
  std::string *v18;
  const void *v19;
  std::string *v20;
  __int128 v21;
  void **v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  unint64_t *v26;
  unint64_t v27;
  ZinEngineLayerMirInfo *v28;
  uint64_t *GroupId;
  uint64_t v30;
  std::string v32;
  void *v33[2];
  int64_t v34;
  std::string v35;
  uint64_t v36[2];
  void *__p[2];
  int64_t v38;

  v6 = *(_QWORD *)(*a2 + 16);
  v7 = a1[54];
  if (*((char *)a3 + 23) >= 0)
    v8 = *((unsigned __int8 *)a3 + 23);
  else
    v8 = (size_t)a3[1];
  v9 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v8 + 3);
  if (v38 < 0)
    v9 = (void **)__p[0];
  if (v8)
  {
    if (*((char *)a3 + 23) >= 0)
      v10 = a3;
    else
      v10 = *a3;
    memmove(v9, v10, v8);
  }
  *(_DWORD *)((char *)v9 + v8) = 7498591;
  v11 = ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v6, v7, (const void **)__p);
  if (SHIBYTE(v38) < 0)
    operator delete(__p[0]);
  v12 = operator new();
  v13 = *a2;
  v14 = (std::__shared_weak_count *)a2[1];
  v36[0] = v13;
  v36[1] = (uint64_t)v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  if (*((char *)a3 + 23) >= 0)
    v17 = *((unsigned __int8 *)a3 + 23);
  else
    v17 = (size_t)a3[1];
  v18 = &v35;
  std::string::basic_string[abi:ne180100]((uint64_t)&v35, v17 + 1);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v18 = (std::string *)v35.__r_.__value_.__r.__words[0];
  if (v17)
  {
    if (*((char *)a3 + 23) >= 0)
      v19 = a3;
    else
      v19 = *a3;
    memmove(v18, v19, v17);
  }
  *(_WORD *)((char *)&v18->__r_.__value_.__l.__data_ + v17) = 95;
  std::string::basic_string[abi:ne180100]<0>(&v32, "ne_matmul_clone");
  v20 = std::string::append(&v32, "_xfm", 4uLL);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v34 = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)v33 = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (v34 >= 0)
    v22 = v33;
  else
    v22 = (void **)v33[0];
  if (v34 >= 0)
    v23 = HIBYTE(v34);
  else
    v23 = (std::string::size_type)v33[1];
  v24 = std::string::append(&v35, (const std::string::value_type *)v22, v23);
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v38 = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  ZinNEKernelRasterizerLayer::ZinNEKernelRasterizerLayer((_QWORD *)v12, v36, (__int128 *)__p, v11);
  if (SHIBYTE(v38) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v34) < 0)
    operator delete(v33[0]);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (v14)
  {
    v26 = (unint64_t *)&v14->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (a1[33])
  {
    ZinANELayer::CopyMirInfo((ZinANELayer *)a1, (ZinEngineLayerMirInfo **)__p);
    ZinANELayer::SetMirInfo(v12, (int **)__p);
    v28 = (ZinEngineLayerMirInfo *)__p[0];
    __p[0] = 0;
    if (v28)
    {
      ZinEngineLayerMirInfo::~ZinEngineLayerMirInfo(v28);
      MEMORY[0x20BD002F8]();
    }
  }
  ZinANELayer::CopyDMALayers((_QWORD *)v12, (const ZinANELayer *)a1);
  GroupId = (uint64_t *)ZinIrOpLayer::GetGroupId((ZinIrOpLayer *)a1);
  ZinIrOpLayer::SetGroupId(v12, *GroupId);
  v30 = *(_QWORD *)((char *)a1 + 420);
  if ((v30 & 0xFF00000000) != 0)
  {
    *(_DWORD *)(v12 + 420) = v30;
    *(_BYTE *)(v12 + 424) = 1;
  }
  return v12;
}

void sub_206DA3788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  std::unique_ptr<ZinEngineLayerMirInfo>::reset[abi:ne180100]((ZinEngineLayerMirInfo **)&__p, 0);
  _Unwind_Resume(a1);
}

void sub_206DA3828(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  JUMPOUT(0x206DA3820);
}

uint64_t ZinNEKernelRasterizerLayer::SpatialSplitCopy(ZinNEKernelRasterizerLayer *this, const TiledLayerTensorRegions *a2)
{
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  ZinIrKernel *v12;
  ZinIrKernel *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string __p;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  ZinIrOpLayer::CreateSpatialSplitCopyTensor(this, a2, &v21);
  v19 = v21;
  v20 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  ZinIrOpLayer::CreateSpatialSplitCopyName(this, a2, &__p);
  v6 = (*(uint64_t (**)(ZinNEKernelRasterizerLayer *, uint64_t *, std::string *))(*(_QWORD *)this + 176))(this, &v19, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v7 = v20;
  if (v20)
  {
    v8 = (unint64_t *)&v20->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = *(_QWORD *)(v6 + 264);
  if (v10 && !*(_BYTE *)(v10 + 233))
  {
    *(_QWORD *)(v10 + 200) = 1;
    *(_QWORD *)(v10 + 208) = 0;
    *(_QWORD *)(v10 + 216) = 0;
    *(_QWORD *)(v10 + 224) = 0;
    *(_WORD *)(v10 + 232) = 0;
  }
  v11 = *(_QWORD *)(v6 + 432);
  ZinANELayer::CreateSpatialSplitCopyKernel((uint64_t)this, (uint64_t *)(*((_QWORD *)this + 54) + 136), a2, (ZinIrKernel **)&__p);
  v12 = (ZinIrKernel *)__p.__r_.__value_.__r.__words[0];
  __p.__r_.__value_.__r.__words[0] = 0;
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)(v11 + 136), v12);
  v13 = (ZinIrKernel *)__p.__r_.__value_.__r.__words[0];
  __p.__r_.__value_.__r.__words[0] = 0;
  if (v13)
  {
    ZinIrKernel::~ZinIrKernel(v13);
    MEMORY[0x20BD002F8]();
  }
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return v6;
}

void sub_206DA39B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

_QWORD *ZinNEKernelRasterizerLayer::ExecutionOrderSort@<X0>(ZinNEKernelRasterizerLayer *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *result;

  v3 = *((_QWORD *)this + 54);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v4 = operator new(8uLL);
  *a2 = v4;
  *v4 = v3;
  result = v4 + 1;
  a2[1] = result;
  a2[2] = result;
  return result;
}

_QWORD *std::vector<std::vector<unsigned long>>::vector(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = 3 * a2;
    v8 = &v6[3 * a2];
    v9 = 8 * v7;
    do
    {
      *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(v6, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_206DA3AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *ZinSelect<ZinIrOpLayer *,unsigned long>@<X0>(uint64_t *a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return _ZNSt3__18for_eachB8ne180100INS_11__wrap_iterIPKmEEZ9ZinSelectIP12ZinIrOpLayermENS_6vectorIT_NS_9allocatorIS9_EEEERKSC_RKNS8_INS_9enable_ifIXsr3std11is_integralIT0_EE5valueESG_E4typeENSA_ISI_EEEEEUlmE_EESG_S9_S9_SG_(*a2, a2[1], a1, (void **)a3);
}

void sub_206DA3B1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ZinNEKernelRasterizerLayer::LowerEngine(ZinIrOpLayerGraph *,ZinTransformInfo *)::$_0::operator() const(ZinIrOpLayer *)::{lambda(ZinIrOpLayer *)#1},std::allocator<ZinNEKernelRasterizerLayer::LowerEngine(ZinIrOpLayerGraph *,ZinTransformInfo *)::$_0::operator() const(ZinIrOpLayer *)::{lambda(ZinIrOpLayer *)#1}>,ZinIrOpLayer * ()(ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<ZinNEKernelRasterizerLayer::LowerEngine(ZinIrOpLayerGraph *,ZinTransformInfo *)::$_0::operator() const(ZinIrOpLayer *)::{lambda(ZinIrOpLayer *)#1},std::allocator<ZinNEKernelRasterizerLayer::LowerEngine(ZinIrOpLayerGraph *,ZinTransformInfo *)::$_0::operator() const(ZinIrOpLayer *)::{lambda(ZinIrOpLayer *)#1}>,ZinIrOpLayer * ()(ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24C05B128;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<ZinNEKernelRasterizerLayer::LowerEngine(ZinIrOpLayerGraph *,ZinTransformInfo *)::$_0::operator() const(ZinIrOpLayer *)::{lambda(ZinIrOpLayer *)#1},std::allocator<ZinNEKernelRasterizerLayer::LowerEngine(ZinIrOpLayerGraph *,ZinTransformInfo *)::$_0::operator() const(ZinIrOpLayer *)::{lambda(ZinIrOpLayer *)#1}>,ZinIrOpLayer * ()(ZinIrOpLayer *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C05B128;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

ZinIrOpLayer *std::__function::__func<ZinNEKernelRasterizerLayer::LowerEngine(ZinIrOpLayerGraph *,ZinTransformInfo *)::$_0::operator() const(ZinIrOpLayer *)::{lambda(ZinIrOpLayer *)#1},std::allocator<ZinNEKernelRasterizerLayer::LowerEngine(ZinIrOpLayerGraph *,ZinTransformInfo *)::$_0::operator() const(ZinIrOpLayer *)::{lambda(ZinIrOpLayer *)#1}>,ZinIrOpLayer * ()(ZinIrOpLayer *)>::operator()(uint64_t a1, ZinIrOpLayerGraph **a2, uint64_t a3, ZinObjectNameFactory *a4)
{
  ZinIrOpLayerGraph *v4;
  _QWORD *v6;
  ZinIrOpLayer *v7;
  const ZinIrHalParameters *v8;
  ZinIrOpLayer *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  ZinIrOpLayer *v23;
  _QWORD *v24;
  ZinIrOpLayer *Alias;
  _QWORD *v26;
  uint64_t **v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  uint64_t **v32;
  _QWORD *v33;
  _QWORD *v35;
  void *__p;
  uint64_t v37;
  char *v38;
  _QWORD *v39;
  int64x2_t v40[2];
  void *v41[4];
  int64x2_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  void *v48[2];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  int v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  if (!v4)
    return 0;
  v6 = *(_QWORD **)(a1 + 32);
  v7 = ZinMirTensorTransform::NonResidentLinearizeToChannelInL2(**(uint64_t ****)(a1 + 8), v4, *(ZinIrOpLayer **)(a1 + 16), a4);
  v9 = ZinMirTensorTransform::TransposeChannelVectorToWidthFP16InL2(**(uint64_t ****)(a1 + 8), v7, *(ZinIrOpLayer **)(a1 + 16), ****(ZinObjectNameFactory *****)(a1 + 24), v8);
  v10 = (_QWORD *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v9 + 32))(v9, 0, 0);
  v11 = v10[10] * v10[6] * v10[7] * v10[8] * v10[9];
  v42 = vdupq_n_s64(1uLL);
  v43 = 1;
  v44 = v11;
  v45 = 1;
  v12 = *(_DWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v9 + 32))(v9, 0, 0) + 88);
  DimensionOrderHint::DimensionOrderHint(v41, 1);
  ZinIrTensor::CreateDefaultStride((const ZinTensorDimensions *)&v42, v12, 1, (uint64_t)v41, 16, 1, 1, v40);
  v13 = operator new();
  ZinIrTensor::MirInfo::MirInfo(v13, 1, 1, 1, v41, v40);
  v39 = (_QWORD *)v13;
  v14 = *((_QWORD *)v9 + 2);
  v15 = *(_QWORD *)(a1 + 16);
  (*(void (**)(void **__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v9 + 80))(v48, v9, 0, 0);
  v16 = operator new(0x78uLL);
  v37 = (uint64_t)(v16 + 30);
  v38 = (char *)(v16 + 30);
  v16[28] = v55;
  v17 = v54;
  v18 = v52;
  *((_OWORD *)v16 + 5) = v53;
  *((_OWORD *)v16 + 6) = v17;
  v19 = v49;
  *(_OWORD *)v16 = *(_OWORD *)v48;
  *((_OWORD *)v16 + 1) = v19;
  v20 = v51;
  *((_OWORD *)v16 + 2) = v50;
  *((_OWORD *)v16 + 3) = v20;
  *((_OWORD *)v16 + 4) = v18;
  __p = v16;
  v21 = *(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v9 + 32))(v9, 0, 0)
                  + 104);
  if (v21)
    v22 = *(_DWORD *)(v21 + 96);
  else
    v22 = 0;
  v24 = v39;
  v39 = 0;
  v35 = v24;
  Alias = (ZinIrOpLayer *)ZinBuilder::CreateAlias(v14, v15, (uint64_t)&__p, v22, (__int128 *)v42.i8, (uint64_t)&v35);
  v26 = v35;
  v35 = 0;
  if (v26)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v35, v26);
  if (__p)
  {
    v37 = (uint64_t)__p;
    operator delete(__p);
  }
  v27 = **(uint64_t ****)(a1 + 8);
  v47 = v6;
  __p = &v47;
  v37 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(v48, &__p);
  ZinIrOpLayerGraph::AddNode(v27, Alias, (ZinIrOpLayer ***)v48);
  v48[0] = &unk_24C02BB18;
  if (v48[1])
  {
    *(void **)&v49 = v48[1];
    operator delete(v48[1]);
  }
  ZinIrOpLayerGraph::AddEdge(**(_QWORD **)(a1 + 8), (uint64_t)v9, (uint64_t)Alias, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  v28 = *((_QWORD *)Alias + 2);
  v29 = *(_QWORD *)(a1 + 16);
  v30 = *(_DWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Alias + 32))(Alias, 0, 0)+ 88);
  v47 = 0;
  v23 = (ZinIrOpLayer *)ZinBuilder::CreateCopyLayer(v28, (uint64_t)Alias, v29, v30, &v47);
  v31 = v47;
  v47 = 0;
  if (v31)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v47, v31);
  v32 = **(uint64_t ****)(a1 + 8);
  v46 = v6;
  __p = &v46;
  v37 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(v48, &__p);
  ZinIrOpLayerGraph::AddNode(v32, v23, (ZinIrOpLayer ***)v48);
  v48[0] = &unk_24C02BB18;
  if (v48[1])
  {
    *(void **)&v49 = v48[1];
    operator delete(v48[1]);
  }
  ZinIrOpLayerGraph::AddEdge(**(_QWORD **)(a1 + 8), (uint64_t)Alias, (uint64_t)v23, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  v33 = v39;
  v39 = 0;
  if (v33)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v39, v33);
  if (v41[0])
  {
    v41[1] = v41[0];
    operator delete(v41[0]);
  }
  return v23;
}

void sub_206DA3F60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  uint64_t v33;
  _QWORD *v35;

  a31 = v33 + 16;
  if (__p)
  {
    a33 = (uint64_t)__p;
    operator delete(__p);
  }
  v35 = a13;
  a13 = 0;
  if (v35)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&a13, v35);
  if (a19)
  {
    a20 = (uint64_t)a19;
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinNEKernelRasterizerLayer::LowerEngine(ZinIrOpLayerGraph *,ZinTransformInfo *)::$_0::operator() const(ZinIrOpLayer *)::{lambda(ZinIrOpLayer *)#1},std::allocator<ZinNEKernelRasterizerLayer::LowerEngine(ZinIrOpLayerGraph *,ZinTransformInfo *)::$_0::operator() const(ZinIrOpLayer *)::{lambda(ZinIrOpLayer *)#1}>,ZinIrOpLayer * ()(ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEKernelRasterizerLayer::LowerEngine(ZinIrOpLayerGraph *,ZinTransformInfo *)::$_0::operator() const(ZinIrOpLayer *)::{lambda(ZinIrOpLayer *)#1},std::allocator<ZinNEKernelRasterizerLayer::LowerEngine(ZinIrOpLayerGraph *,ZinTransformInfo *)::$_0::operator() const(ZinIrOpLayer *)::{lambda(ZinIrOpLayer *)#1}>,ZinIrOpLayer * ()(ZinIrOpLayer *)>::target_type()
{
}

uint64_t *_ZNSt3__18for_eachB8ne180100INS_11__wrap_iterIPKmEEZ9ZinSelectIP12ZinIrOpLayermENS_6vectorIT_NS_9allocatorIS9_EEEERKSC_RKNS8_INS_9enable_ifIXsr3std11is_integralIT0_EE5valueESG_E4typeENSA_ISI_EEEEEUlmE_EESG_S9_S9_SG_(uint64_t *a1, uint64_t *a2, uint64_t *a3, void **a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;

  if (a1 != a2)
  {
    v7 = a1;
    do
    {
      v8 = *v7;
      v9 = *a3;
      if (*v7 < (unint64_t)((a3[1] - *a3) >> 3))
      {
        v11 = a4[1];
        v10 = (unint64_t)a4[2];
        if ((unint64_t)v11 >= v10)
        {
          v13 = ((char *)v11 - (_BYTE *)*a4) >> 3;
          if ((unint64_t)(v13 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v14 = v10 - (_QWORD)*a4;
          v15 = v14 >> 2;
          if (v14 >> 2 <= (unint64_t)(v13 + 1))
            v15 = v13 + 1;
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
            v16 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v16 = v15;
          if (v16)
            v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a4 + 2), v16);
          else
            v17 = 0;
          v18 = &v17[8 * v13];
          *(_QWORD *)v18 = *(_QWORD *)(v9 + 8 * v8);
          v12 = v18 + 8;
          v20 = (char *)*a4;
          v19 = (char *)a4[1];
          if (v19 != *a4)
          {
            do
            {
              v21 = *((_QWORD *)v19 - 1);
              v19 -= 8;
              *((_QWORD *)v18 - 1) = v21;
              v18 -= 8;
            }
            while (v19 != v20);
            v19 = (char *)*a4;
          }
          *a4 = v18;
          a4[1] = v12;
          a4[2] = &v17[8 * v16];
          if (v19)
            operator delete(v19);
        }
        else
        {
          *v11 = *(_QWORD *)(v9 + 8 * v8);
          v12 = v11 + 1;
        }
        a4[1] = v12;
      }
      ++v7;
    }
    while (v7 != a2);
  }
  return a3;
}

void std::__function::__func<ZinNEKernelRasterizerLayer::LowerEngine(ZinIrOpLayerGraph *,ZinTransformInfo *)::$_1,std::allocator<ZinNEKernelRasterizerLayer::LowerEngine(ZinIrOpLayerGraph *,ZinTransformInfo *)::$_1>,ZinIrOpLayer * ()(ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<ZinNEKernelRasterizerLayer::LowerEngine(ZinIrOpLayerGraph *,ZinTransformInfo *)::$_1,std::allocator<ZinNEKernelRasterizerLayer::LowerEngine(ZinIrOpLayerGraph *,ZinTransformInfo *)::$_1>,ZinIrOpLayer * ()(ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_24C059088;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<ZinNEKernelRasterizerLayer::LowerEngine(ZinIrOpLayerGraph *,ZinTransformInfo *)::$_1,std::allocator<ZinNEKernelRasterizerLayer::LowerEngine(ZinIrOpLayerGraph *,ZinTransformInfo *)::$_1>,ZinIrOpLayer * ()(ZinIrOpLayer *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24C059088;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

ZinIrOpLayer *std::__function::__func<ZinNEKernelRasterizerLayer::LowerEngine(ZinIrOpLayerGraph *,ZinTransformInfo *)::$_1,std::allocator<ZinNEKernelRasterizerLayer::LowerEngine(ZinIrOpLayerGraph *,ZinTransformInfo *)::$_1>,ZinIrOpLayer * ()(ZinIrOpLayer *)>::operator()(uint64_t a1, ZinIrOpLayerGraph **a2, uint64_t a3, ZinObjectNameFactory *a4)
{
  ZinIrOpLayer *v4;
  _QWORD *v6;
  ZinIrOpLayer **inserted;
  uint64_t v8;
  uint64_t v9;
  uint64_t Hal;
  uint64_t v11;
  const ZinIrHalParameters *v12;
  ZinObjectNameFactory *v13;
  unint64_t v14;
  unint64_t v15;
  ZinIrOpLayer *v16;
  ZinIrOpLayer *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  ZinIrOpLayer *v30;
  _QWORD *v31;
  uint64_t **v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _QWORD *v36;
  uint64_t **v37;
  _BOOL8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v48;
  void *__p;
  uint64_t v50;
  char *v51;
  _QWORD *v52;
  int64x2_t v53[2];
  void *v54[4];
  __int128 v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  int v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  if (*a2)
  {
    v6 = *(_QWORD **)(a1 + 48);
    inserted = (ZinIrOpLayer **)ZinMirTensorTransform::NonResidentLinearizeToChannelInL2(**(uint64_t ****)(a1 + 8), *a2, *(ZinIrOpLayer **)(a1 + 16), a4);
    v8 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 24) + 32))(**(_QWORD **)(a1 + 24), 0, 0);
    v9 = 2 * *(_QWORD *)(v8 + 72) * *(_QWORD *)(v8 + 64);
    Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(**(_QWORD **)(a1 + 32) + 160));
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
    v14 = (unint64_t)ZinAlignPower2(v9, *(_QWORD *)(v11 + 416)) >> 1;
    v15 = *(_QWORD *)(v8 + 64) * *(_QWORD *)(v8 + 72);
    if ((v14 == v15
       || (inserted = (ZinIrOpLayer **)ZinMirTensorTransform::ChannelVectorInsertPaddingInL2(**(uint64_t ****)(a1 + 8), inserted, v15, v14, *(_QWORD *)(a1 + 16), v13)) != 0)&& (v16 = ZinMirTensorTransform::TransposeChannelVectorToWidthFP16InL2(**(uint64_t ****)(a1 + 8), (ZinIrOpLayerGraph *)inserted, *(ZinIrOpLayer **)(a1 + 16), ****(ZinObjectNameFactory *****)(a1 + 40), v12)) != 0)
    {
      v17 = v16;
      v58 = 1;
      v56 = 1;
      *(_QWORD *)&v55 = 1;
      *((_QWORD *)&v55 + 1) = *(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0, 0)+ 56);
      v57 = v14;
      v58 = 1;
      DimensionOrderHint::DimensionOrderHint(v54, 1);
      v18 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0, 0);
      ZinIrTensor::CreateDefaultStride((const ZinTensorDimensions *)&v55, *(_DWORD *)(v18 + 88), 1, (uint64_t)v54, 16, 1, 1, v53);
      v19 = operator new();
      ZinIrTensor::MirInfo::MirInfo(v19, 1, 0, 0, v54, v53);
      v52 = (_QWORD *)v19;
      v20 = *((_QWORD *)v17 + 2);
      v21 = *(_QWORD *)(a1 + 16);
      (*(void (**)(__int128 *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v17 + 80))(&v61, v17, 0, 0);
      v22 = operator new(0x78uLL);
      v50 = (uint64_t)(v22 + 30);
      v51 = (char *)(v22 + 30);
      v22[28] = v68;
      v23 = v67;
      v24 = v65;
      *((_OWORD *)v22 + 5) = v66;
      *((_OWORD *)v22 + 6) = v23;
      v25 = v62;
      *(_OWORD *)v22 = v61;
      *((_OWORD *)v22 + 1) = v25;
      v26 = v64;
      *((_OWORD *)v22 + 2) = v63;
      *((_OWORD *)v22 + 3) = v26;
      *((_OWORD *)v22 + 4) = v24;
      __p = v22;
      v27 = *(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0, 0)+ 104);
      if (v27)
        v28 = *(_DWORD *)(v27 + 96);
      else
        v28 = 0;
      v29 = v52;
      v52 = 0;
      v48 = v29;
      v30 = (ZinIrOpLayer *)ZinBuilder::CreateAlias(v20, v21, (uint64_t)&__p, v28, &v55, (uint64_t)&v48);
      v31 = v48;
      v48 = 0;
      if (v31)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v48, v31);
      if (__p)
      {
        v50 = (uint64_t)__p;
        operator delete(__p);
      }
      v32 = **(uint64_t ****)(a1 + 8);
      v60 = v6;
      __p = &v60;
      v50 = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(&v61, &__p);
      ZinIrOpLayerGraph::AddNode(v32, v30, (ZinIrOpLayer ***)&v61);
      *(_QWORD *)&v61 = &unk_24C02BB18;
      if (*((_QWORD *)&v61 + 1))
      {
        *(_QWORD *)&v62 = *((_QWORD *)&v61 + 1);
        operator delete(*((void **)&v61 + 1));
      }
      ZinIrOpLayerGraph::AddEdge(**(_QWORD **)(a1 + 8), (uint64_t)v17, (uint64_t)v30, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      if (v30)
      {
        v33 = *((_QWORD *)v30 + 2);
        v34 = *(_QWORD *)(a1 + 16);
        v35 = *(_DWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0, 0)+ 88);
        v60 = 0;
        v4 = (ZinIrOpLayer *)ZinBuilder::CreateCopyLayer(v33, (uint64_t)v30, v34, v35, &v60);
        v36 = v60;
        v60 = 0;
        if (v36)
          std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v60, v36);
        v37 = **(uint64_t ****)(a1 + 8);
        v59 = v6;
        __p = &v59;
        v50 = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(&v61, &__p);
        ZinIrOpLayerGraph::AddNode(v37, v4, (ZinIrOpLayer ***)&v61);
        *(_QWORD *)&v61 = &unk_24C02BB18;
        if (*((_QWORD *)&v61 + 1))
        {
          *(_QWORD *)&v62 = *((_QWORD *)&v61 + 1);
          operator delete(*((void **)&v61 + 1));
        }
        ZinIrOpLayerGraph::AddEdge(**(_QWORD **)(a1 + 8), (uint64_t)v30, (uint64_t)v4, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      }
      else
      {
        v38 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v38)
          std::__function::__func<ZinNEKernelRasterizerLayer::LowerEngine(ZinIrOpLayerGraph *,ZinTransformInfo *)::$_1,std::allocator<ZinNEKernelRasterizerLayer::LowerEngine(ZinIrOpLayerGraph *,ZinTransformInfo *)::$_1>,ZinIrOpLayer * ()(ZinIrOpLayer *)>::operator()(v38, v39, v40, v41, v42, v43, v44, v45);
        v4 = 0;
      }
      v46 = v52;
      v52 = 0;
      if (v46)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v52, v46);
      if (v54[0])
      {
        v54[1] = v54[0];
        operator delete(v54[0]);
      }
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

void sub_206DA46B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  uint64_t v33;
  _QWORD *v35;

  a31 = v33 + 16;
  if (__p)
  {
    a33 = (uint64_t)__p;
    operator delete(__p);
  }
  v35 = a14;
  a14 = 0;
  if (v35)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&a14, v35);
  if (a20)
  {
    a21 = (uint64_t)a20;
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinNEKernelRasterizerLayer::LowerEngine(ZinIrOpLayerGraph *,ZinTransformInfo *)::$_1,std::allocator<ZinNEKernelRasterizerLayer::LowerEngine(ZinIrOpLayerGraph *,ZinTransformInfo *)::$_1>,ZinIrOpLayer * ()(ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEKernelRasterizerLayer::LowerEngine(ZinIrOpLayerGraph *,ZinTransformInfo *)::$_1,std::allocator<ZinNEKernelRasterizerLayer::LowerEngine(ZinIrOpLayerGraph *,ZinTransformInfo *)::$_1>,ZinIrOpLayer * ()(ZinIrOpLayer *)>::target_type()
{
}

void ZinNEKernelRasterizerLayer::LowerEngine(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Could not complete ZinNEKernelRasterizerLayer::Lower", a5, a6, a7, a8, 0);
}

void std::__function::__func<ZinNEKernelRasterizerLayer::LowerEngine(ZinIrOpLayerGraph *,ZinTransformInfo *)::$_1,std::allocator<ZinNEKernelRasterizerLayer::LowerEngine(ZinIrOpLayerGraph *,ZinTransformInfo *)::$_1>,ZinIrOpLayer * ()(ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Failed in ZinMirKernelRasterizer::Transform function.\n", a5, a6, a7, a8, 0);
}

uint64_t ZinIrRadiusSearchUnit::ZinIrRadiusSearchUnit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  __int128 v6;
  int v7;

  v5 = ZinIrUnit::ZinIrUnit((_QWORD *)a1, a3);
  *v5 = &off_24C0209A8;
  v5[7] = off_24C017CA0;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v5 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 8);
    v5[10] = *(_QWORD *)(a2 + 24);
    *((_OWORD *)v5 + 4) = v6;
  }
  v7 = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 88) = v7;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 96), *(__int128 **)(a2 + 40), *(__int128 **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = &unk_24C023670;
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 80);
  return a1;
}

void sub_206DA4934(_Unwind_Exception *a1)
{
  ZinIrUnit *v1;

  ZinIrUnit::~ZinIrUnit(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrRadiusSearchUnit::TensorDimensions(ZinIrRadiusSearchUnit *this, const ZinIrHalParameters *a2, ZinTensorDimensions *a3, ZinIrUnitStatus *a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (_QWORD *)*((_QWORD *)this + 1);
  v5 = v4[4];
  v6 = v4[19];
  *(_QWORD *)a3 = v4[1];
  *((_QWORD *)a3 + 1) = 1;
  *((_QWORD *)a3 + 2) = v6;
  *((_QWORD *)a3 + 3) = v5;
  *((_QWORD *)a3 + 4) = 1;
  return 0;
}

void ZinIrRadiusSearchUnit::CreateOpcode(ZinIrRadiusSearchUnit *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)this + 56;
  v5 = operator new();
  ZinIrRadiusSearchInfo::ZinIrRadiusSearchInfo(v5, (uint64_t)v4);
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = v5;
}

void sub_206DA49E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x1081C40FC6463CFLL);
  _Unwind_Resume(a1);
}

uint64_t ZinIrRadiusSearchUnit::CreateLayer(ZinIrRadiusSearchUnit *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  int v17;
  uint64_t v18;

  ZinIrRadiusSearchUnit::CreateOpcode(a1, (uint64_t)&v17);
  if (v17)
  {
    v5 = 0;
  }
  else
  {
    v6 = operator new();
    v5 = v6;
    v7 = (std::__shared_weak_count *)(*a3)[1];
    v15 = **a3;
    v16 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    ZinRadiusSearchLayer::ZinRadiusSearchLayer(v6, &v18, &v15, (char *)a1 + 64);
    v10 = v16;
    if (v16)
    {
      v11 = (unint64_t *)&v16->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    ZinIrOpLayer::ValidateSemantics(v5);
  }
  v13 = v18;
  v18 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return v5;
}

void sub_206DA4B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x20BD002F8](v12, 0x10B3C409D855DA1);
  v14 = a12;
  a12 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

void ZinIrRadiusSearchUnit::~ZinIrRadiusSearchUnit(void **this)
{
  *this = &off_24C0209A8;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 7);
  ZinIrUnit::~ZinIrUnit((ZinIrUnit *)this);
}

{
  *this = &off_24C0209A8;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 7);
  ZinIrUnit::~ZinIrUnit((ZinIrUnit *)this);
  JUMPOUT(0x20BD002F8);
}

__CFDictionary *ZinCreateInstanceNormUnit(const ZinIrInstanceNormUnitInfo *a1)
{
  __CFDictionary *Unit;
  const __CFAllocator *v3;
  __CFDictionary *Mutable;
  CFNumberRef v11;
  __CFArray *v12;
  uint64_t *i;
  const __CFString *v14;
  __int16 valuePtr;

  Unit = ZinCreateUnit(a1);
  v3 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  _S0 = *((float *)a1 + 30);
  if (_S0 != 1.0e-12)
  {
    __asm { FCVT            H0, S0 }
    valuePtr = _H0;
    v11 = CFNumberCreate(v3, kCFNumberSInt16Type, &valuePtr);
    CFDictionaryAddValue(Mutable, CFSTR("Epsilon"), v11);
    CFRelease(v11);
  }
  v12 = CFArrayCreateMutable(v3, 0, MEMORY[0x24BDBD690]);
  for (i = (uint64_t *)*((_QWORD *)a1 + 12); i; i = (uint64_t *)*i)
  {
    v14 = ZinIrCoordinateToCFString((_DWORD *)i + 4);
    CFArrayAppendValue(v12, v14);
  }
  CFDictionaryAddValue(Mutable, CFSTR("Dimension"), v12);
  CFRelease(v12);
  CFDictionaryAddValue(Unit, CFSTR("Params"), Mutable);
  CFRelease(Mutable);
  return Unit;
}

void ZinMirEwCopyOptimizer::ZinMirEwCopyOptimizer(ZinMirEwCopyOptimizer *this, uint64_t a2, uint64_t a3)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = (char *)this + 32;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = a2;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = a3;
}

_QWORD *ZinMirEwCopyOptimizer::Execute(ZinMirEwCopyOptimizer *this, ZinIrControlFlowGraph *a2)
{
  int v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24C0013F8;
  v5[1] = this;
  v6 = v5;
  v2 = ZinIrControlFlowGraph::TraverseForward(a2, (uint64_t)v5, 1);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v4 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
LABEL_6:
  if (v2)
    ZinAssertImpl("Error: ZinMirEwCopyOptimizer");
  return result;
}

void sub_206DA4DDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _Unwind_Resume(exception_object);
}

void ZinMirEwCopyOptimizer::FindTensorGroupAllocatedTogether(ZinMirEwCopyOptimizer *this, const ZinIrOpLayer ***a2)
{
  const ZinIrOpLayer **v2;
  const ZinIrOpLayer **v3;
  const ZinIrOpLayer *v5;
  ZinIrTensor *v6;
  ZinIrTensor *v7;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    do
    {
      v5 = *v2;
      v6 = 0;
      v7 = 0;
      if (ZinMirEwCopyOptimizer::IsQualifiedForGroupAllocation(this, v5, &v7, &v6))
        ZinMirEwCopyOptimizer::AddTensors(this, v7, v6);
      ++v2;
    }
    while (v2 != v3);
  }
}

BOOL ZinMirEwCopyOptimizer::IsQualifiedForGroupAllocation(ZinMirEwCopyOptimizer *this, const ZinIrOpLayer *a2, ZinIrTensor **a3, ZinIrTensor **a4)
{
  _QWORD *v4;
  uint64_t v8;
  ZinIrTensor *v9;
  ZinIrTensor *v10;
  ZinIrOpLayer *v11;
  int IsNoOp;
  ZinIrTensor *RootTensor;
  ZinIrOpLayer *v14;
  int v15;
  ZinIrTensor *v16;
  void *__p;
  void *v19;
  uint64_t v20;

  if (*(_DWORD *)(*((_QWORD *)a2 + 8) + 8) != 90)
    return 0;
  v4 = (_QWORD *)*((_QWORD *)a2 + 11);
  if (*((_QWORD *)a2 + 12) - (_QWORD)v4 != 16
    || (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 57) + 64) + 12) - 1) > 1)
  {
    return 0;
  }
  v8 = v4[1];
  v9 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v4 + 32))(*v4, 0, 0);
  v10 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0, 0);
  v11 = (ZinIrOpLayer *)*((_QWORD *)v9 + 12);
  __p = 0;
  v19 = 0;
  v20 = 0;
  IsNoOp = ZinIrOpLayer::IsNoOp(v11, (uint64_t *)&__p);
  RootTensor = v9;
  if (IsNoOp)
    RootTensor = ZinIrTensor::GetRootTensor(v9);
  *a3 = RootTensor;
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  v14 = (ZinIrOpLayer *)*((_QWORD *)v10 + 12);
  __p = 0;
  v19 = 0;
  v20 = 0;
  v15 = ZinIrOpLayer::IsNoOp(v14, (uint64_t *)&__p);
  v16 = v10;
  if (v15)
    v16 = ZinIrTensor::GetRootTensor(v10);
  *a4 = v16;
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  return ZinMirEwCopyOptimizer::IsQualifiedTensorsForGroups(this, v9, v10);
}

void sub_206DA4FC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinMirEwCopyOptimizer::AddTensors(ZinMirEwCopyOptimizer *this, ZinIrTensor *a2, ZinIrTensor *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t *v11[3];
  uint64_t v12[3];

  v12[2] = *MEMORY[0x24BDAC8D0];
  v11[0] = (uint64_t *)a2;
  v6 = std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)this, (uint64_t *)v11);
  v7 = v6;
  if ((_QWORD *)((char *)this + 8) == v6)
  {
    v11[0] = (uint64_t *)a3;
    v10 = std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)this, (uint64_t *)v11);
    if (v7 == v10)
    {
      v12[0] = (uint64_t)a2;
      v12[1] = (uint64_t)a3;
      std::set<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::set[abi:ne180100]((uint64_t)v11, v12, 2);
      ZinMirEwCopyOptimizer::CreateTensorGroup((uint64_t)this, v11);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v11, v11[1]);
    }
    else
    {
      ZinMirEwCopyOptimizer::AddTensorToGroup(this, a2, v10[5]);
    }
  }
  else
  {
    v8 = v6[5];
    v11[0] = (uint64_t *)a3;
    v9 = std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)this, (uint64_t *)v11);
    if ((uint64_t *)((char *)this + 8) == v9)
      ZinMirEwCopyOptimizer::AddTensorToGroup(this, a3, v8);
    else
      ZinMirEwCopyOptimizer::MergeTensorGroups(this, v8, v9[5]);
  }
}

void sub_206DA5108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void ZinMirEwCopyOptimizer::RemoveConcatAndCopies(ZinMirEwCopyOptimizer *this, ZinIrOpLayerGraph *a2, ZinNEElementWiseLayer *a3)
{
  uint64_t v5;
  ZinMirEwCopyOptimizer *v6;
  const ZinIrOpLayer **v7;
  const ZinIrOpLayer **v8;
  const ZinIrOpLayer *v9;
  uint64_t v10;
  void *__p;
  const ZinIrOpLayer **v12;
  uint64_t v13;

  v5 = **((_QWORD **)a3 + 11);
  __p = 0;
  v12 = 0;
  v13 = 0;
  v6 = (ZinMirEwCopyOptimizer *)std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&__p, *(const void **)(v5 + 88), *(_QWORD *)(v5 + 96), (uint64_t)(*(_QWORD *)(v5 + 96) - *(_QWORD *)(v5 + 88)) >> 3);
  v7 = (const ZinIrOpLayer **)__p;
  v8 = v12;
  while (v7 != v8)
  {
    v9 = *v7;
    if (ZinMirEwCopyOptimizer::IsCopyForConcat(v6, *v7))
    {
      v10 = **((_QWORD **)v9 + 11);
      ZinIrOpLayerGraph::RemoveNode(a2, v9, 0);
      v6 = (ZinMirEwCopyOptimizer *)ZinIrOpLayerGraph::AddEdge((uint64_t)a2, v10, (uint64_t)a3, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    }
    else
    {
      v6 = (ZinMirEwCopyOptimizer *)ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)v9, (uint64_t)a3, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    }
    ++v7;
  }
  ZinIrOpLayerGraph::RemoveNode(a2, (ZinIrOpLayer *)v5, 0);
  if (__p)
  {
    v12 = (const ZinIrOpLayer **)__p;
    operator delete(__p);
  }
}

void sub_206DA5224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL ZinMirEwCopyOptimizer::IsCopyForConcat(ZinMirEwCopyOptimizer *this, const ZinIrOpLayer *a2)
{
  _BOOL8 v3;
  uint64_t v4;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;

  if (!ZinIrOpLayer::IsANELayer(a2)
    || !(*(unsigned int (**)(const ZinIrOpLayer *))(*(_QWORD *)a2 + 536))(a2))
  {
    return 0;
  }
  v6 = 0;
  v7 = 0;
  v8 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v6, *((const void **)a2 + 14), *((_QWORD *)a2 + 15), (uint64_t)(*((_QWORD *)a2 + 15) - *((_QWORD *)a2 + 14)) >> 3);
  if (v7 - v6 == 8)
  {
    v3 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v6 + 64) + 8) == 7;
LABEL_7:
    v7 = v6;
    operator delete(v6);
    return v3;
  }
  v3 = 0;
  v4 = 0;
  if (v6)
    goto LABEL_7;
  return v4;
}

BOOL ZinMirEwCopyOptimizer::IsQualifiedTensorsForGroups(ZinMirEwCopyOptimizer *this, ZinIrTensor *a2, ZinIrTensor *a3)
{
  ZinIrTensor *v3;
  ZinIrTensor *RootTensor;
  _QWORD *v6;
  _BOOL4 v7;
  _BOOL8 result;
  ZinIrOpLayer *v9;
  uint64_t v10;
  ZinIrOpLayer *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t TensorInByte;
  _QWORD *v20;
  uint64_t TensorGroupInByte;
  uint64_t v22;
  void *__p;
  void *v24;
  uint64_t v25;

  v3 = a3;
  RootTensor = a2;
  v6 = (_QWORD *)((char *)a2 + 48);
  v7 = ZinTensorDimensionsEqual((_QWORD *)a2 + 6, (_QWORD *)a3 + 6);
  result = 0;
  if (v7 && *((_DWORD *)RootTensor + 22) == *((_DWORD *)v3 + 22))
  {
    if (*v6 != 1 || *((_QWORD *)RootTensor + 7) != 1)
      return 0;
    v9 = (ZinIrOpLayer *)*((_QWORD *)RootTensor + 12);
    __p = 0;
    v24 = 0;
    v25 = 0;
    if (ZinIrOpLayer::IsNoOp(v9, (uint64_t *)&__p))
      RootTensor = ZinIrTensor::GetRootTensor(RootTensor);
    if (__p)
    {
      v24 = __p;
      operator delete(__p);
    }
    v10 = *((_QWORD *)RootTensor + 13);
    if (v10)
    {
      if (*(_DWORD *)(v10 + 96) == 2)
        return 0;
    }
    v11 = (ZinIrOpLayer *)*((_QWORD *)v3 + 12);
    __p = 0;
    v24 = 0;
    v25 = 0;
    if (ZinIrOpLayer::IsNoOp(v11, (uint64_t *)&__p))
      v3 = ZinIrTensor::GetRootTensor(v3);
    if (__p)
    {
      v24 = __p;
      operator delete(__p);
    }
    v12 = *((_QWORD *)v3 + 13);
    if (v12)
    {
      if (*(_DWORD *)(v12 + 96) == 2)
        return 0;
    }
    __p = RootTensor;
    v13 = std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)this, (uint64_t *)&__p);
    v14 = v13;
    if ((_QWORD *)((char *)this + 8) == v13)
    {
      __p = v3;
      v20 = std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)this, (uint64_t *)&__p);
      if (v14 != v20)
      {
        TensorGroupInByte = ZinMirEwCopyOptimizer::GetTensorGroupInByte(this, v20[5]);
        v22 = ZinMirEwCopyOptimizer::GetTensorInByte(this, RootTensor) + TensorGroupInByte;
        return v22 < *((_QWORD *)this + 6);
      }
    }
    else
    {
      v15 = v13[5];
      __p = v3;
      v16 = std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)this, (uint64_t *)&__p);
      if ((_QWORD *)((char *)this + 8) == v16)
      {
        v18 = ZinMirEwCopyOptimizer::GetTensorGroupInByte(this, v15);
        TensorInByte = ZinMirEwCopyOptimizer::GetTensorInByte(this, v3);
        goto LABEL_27;
      }
      v17 = v16[5];
      if (v15 != v17)
      {
        v18 = ZinMirEwCopyOptimizer::GetTensorGroupInByte(this, v15);
        TensorInByte = ZinMirEwCopyOptimizer::GetTensorGroupInByte(this, v17);
LABEL_27:
        v22 = TensorInByte + v18;
        return v22 < *((_QWORD *)this + 6);
      }
    }
    return 1;
  }
  return result;
}

void sub_206DA54E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirEwCopyOptimizer::GetTensorGroupInByte(ZinMirEwCopyOptimizer *this, uint64_t a2)
{
  uint64_t TensorGroupInByte;
  uint64_t v5[3];
  uint64_t *v6;
  _QWORD *v7[2];

  v7[0] = 0;
  v7[1] = 0;
  v6 = (uint64_t *)v7;
  if ((ZinMirEwCopyOptimizer::GetTensorGroup((uint64_t)this, a2, &v6) & 1) != 0)
  {
    std::set<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::set[abi:ne180100](v5, (uint64_t)&v6);
    TensorGroupInByte = ZinMirEwCopyOptimizer::GetTensorGroupInByte(this, v5);
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v5, (_QWORD *)v5[1]);
  }
  else
  {
    TensorGroupInByte = 0;
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v6, v7[0]);
  return TensorGroupInByte;
}

void sub_206DA5584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, char a12, _QWORD *a13)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a9, a10);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

uint64_t ZinMirEwCopyOptimizer::GetTensorInByte(ZinMirEwCopyOptimizer *this, ZinIrTensor *a2)
{
  uint64_t v5;

  v5 = 0;
  ZinTensorFormatGetSize(*((_DWORD *)a2 + 22), &v5);
  return *((_QWORD *)a2 + 6)
       * ZinAlignPower2(v5 * *((_QWORD *)a2 + 9), *((_QWORD *)this + 8))
       * *((_QWORD *)a2 + 10)
       * *((_QWORD *)a2 + 7)
       * *((_QWORD *)a2 + 8);
}

BOOL ZinMirEwCopyOptimizer::IsQualifiedForCopyRemoval(ZinMirEwCopyOptimizer *this, const ZinNEElementWiseLayer *a2, ZinIrTensor **a3, ZinIrTensor **a4)
{
  _QWORD *v4;
  _QWORD *v5;
  const ZinIrOpLayer **v6;
  const ZinIrOpLayer *v10;
  const ZinIrOpLayer *v11;
  _BOOL8 IsCopyForConcat;
  _BOOL4 v13;
  _BOOL4 v14;
  _BOOL4 v15;
  ZinIrTensor *v17;
  ZinIrTensor *v18;
  ZinIrOpLayer *v19;
  int IsNoOp;
  ZinIrTensor *RootTensor;
  ZinIrOpLayer *v22;
  int v23;
  ZinIrTensor *v24;
  void *__p;
  void *v26;
  uint64_t v27;

  if (!a2)
    return 0;
  v4 = (_QWORD *)*((_QWORD *)a2 + 11);
  if (*((_QWORD *)a2 + 12) - (_QWORD)v4 != 8)
    return 0;
  v5 = (_QWORD *)*v4;
  if (*(_DWORD *)(v5[8] + 8) != 7)
    return 0;
  v6 = (const ZinIrOpLayer **)v5[11];
  if (v5[12] - (_QWORD)v6 != 16)
    return 0;
  if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 57) + 64) + 12) - 1) > 1)
    return 0;
  if (v5[15] - v5[14] != 8)
    return 0;
  v10 = *v6;
  v11 = v6[1];
  IsCopyForConcat = ZinMirEwCopyOptimizer::IsCopyForConcat(this, *v6);
  v13 = IsCopyForConcat;
  v14 = ZinMirEwCopyOptimizer::IsCopyForConcat((ZinMirEwCopyOptimizer *)IsCopyForConcat, v11);
  v15 = v14;
  if (!v13 && !v14)
    return 0;
  if (!v13 || v14)
  {
    if (v13 || !v14)
    {
      if (**((_QWORD **)v10 + 11) == **((_QWORD **)v11 + 11))
        return 0;
    }
    else if (v10 == **((const ZinIrOpLayer ***)v11 + 11))
    {
      return 0;
    }
  }
  else if (v11 == **((const ZinIrOpLayer ***)v10 + 11))
  {
    return 0;
  }
  if (v13)
    v10 = (const ZinIrOpLayer *)**((_QWORD **)v10 + 11);
  v17 = (ZinIrTensor *)(*(uint64_t (**)(const ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v10 + 32))(v10, 0, 0);
  if (v15)
    v11 = (const ZinIrOpLayer *)**((_QWORD **)v11 + 11);
  v18 = (ZinIrTensor *)(*(uint64_t (**)(const ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v11 + 32))(v11, 0, 0);
  v19 = (ZinIrOpLayer *)*((_QWORD *)v17 + 12);
  __p = 0;
  v26 = 0;
  v27 = 0;
  IsNoOp = ZinIrOpLayer::IsNoOp(v19, (uint64_t *)&__p);
  RootTensor = v17;
  if (IsNoOp)
    RootTensor = ZinIrTensor::GetRootTensor(v17);
  *a3 = RootTensor;
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  v22 = (ZinIrOpLayer *)*((_QWORD *)v18 + 12);
  __p = 0;
  v26 = 0;
  v27 = 0;
  v23 = ZinIrOpLayer::IsNoOp(v22, (uint64_t *)&__p);
  v24 = v18;
  if (v23)
    v24 = ZinIrTensor::GetRootTensor(v18);
  *a4 = v24;
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  return ZinMirEwCopyOptimizer::IsQualifiedTensorsForGroups(this, v17, v18);
}

void sub_206DA5818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

ZinIrTensor *ZinMirEwCopyOptimizer::AddToOptimizationGroup(ZinMirEwCopyOptimizer *this, ZinIrOpLayerGraph *a2, ZinNEElementWiseLayer *a3)
{
  uint64_t v6;
  ZinIrTensor *v7;
  ZinIrTensor *v8;
  std::string *v9;
  __int128 v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  __n128 v16;
  uint64_t v17;
  std::string::size_type v18;
  ZinIrOpLayer *v19;
  uint64_t v20;
  ZinIrOpLayer *v21;
  int inserted;
  void *__p[2];
  void *v25;
  ZinIrOpLayer *v26;
  std::string v27;
  _QWORD v28[3];
  char v29;
  void *v30;
  void *v31;
  uint64_t v32;
  ZinIrTensor *v33;
  ZinIrTensor *v34;
  ZinNEElementWiseLayer *v35;
  std::string v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v33 = 0;
  v34 = 0;
  if (!ZinMirEwCopyOptimizer::IsQualifiedForCopyRemoval(this, a3, &v34, &v33))
    return 0;
  v6 = **((_QWORD **)a3 + 11);
  v30 = 0;
  v31 = 0;
  v32 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v30, *(const void **)(v6 + 88), *(_QWORD *)(v6 + 96), (uint64_t)(*(_QWORD *)(v6 + 96) - *(_QWORD *)(v6 + 88)) >> 3);
  v7 = v33;
  v8 = v34;
  ZinMirEwCopyOptimizer::AddTensors(this, v34, v33);
  ZinMirEwCopyOptimizer::RemoveConcatAndCopies(this, a2, a3);
  std::string::basic_string[abi:ne180100]<0>(&v27, "fix_alloc_hint");
  v9 = std::string::append(&v27, "_xfm", 4uLL);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = *((char *)a3 + 47);
  if (v11 >= 0)
    v12 = (char *)a3 + 24;
  else
    v12 = (const std::string::value_type *)*((_QWORD *)a3 + 3);
  if (v11 >= 0)
    v13 = *((unsigned __int8 *)a3 + 47);
  else
    v13 = *((_QWORD *)a3 + 4);
  v14 = std::string::insert(&v36, 0, v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v25 = (void *)v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = ZinObjectNameFactory::ZinObjectNameFactory(v28, __p);
  if (SHIBYTE(v25) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  v17 = 0;
  v18 = *((_QWORD *)v7 + 12);
  v36.__r_.__value_.__r.__words[0] = *((_QWORD *)v8 + 12);
  v36.__r_.__value_.__l.__size_ = v18;
  LOBYTE(v7) = 1;
  do
  {
    v19 = *(ZinIrOpLayer **)((char *)&v36.__r_.__value_.__l.__data_ + v17);
    v26 = 0;
    v20 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD, __n128))(*(_QWORD *)v19 + 32))(v19, 0, 0, v16);
    v7 = (ZinIrTensor *)(v7 & (ZinMirTensorTransform::FixAllocation(v20, (uint64_t)v28, 1, (uint64_t *)&v26, 1, 0, 0) == 0));
    v21 = v26;
    if (v26)
    {
      v35 = a3;
      v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
      v27.__r_.__value_.__l.__size_ = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(__p, &v27);
      inserted = ZinIrOpLayerGraph::InsertNodeBetween((uint64_t **)a2, v21, v19, a3, (ZinIrOpLayer ***)__p);
      __p[0] = &unk_24C02BB18;
      if (__p[1])
      {
        v25 = __p[1];
        operator delete(__p[1]);
      }
      v7 = (ZinIrTensor *)(v7 & inserted);
    }
    v17 += 8;
  }
  while (v17 != 16);
  v28[0] = off_24C01FBB0;
  if (v29 < 0)
    operator delete((void *)v28[1]);
  if (v30)
  {
    v31 = v30;
    operator delete(v30);
  }
  return v7;
}

void sub_206DA5AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, void *a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33)
{
  uint64_t v33;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v33 - 105) < 0)
    operator delete(*(void **)(v33 - 128));
  if (a23 < 0)
    operator delete(a18);
  if (a32)
    operator delete(a32);
  _Unwind_Resume(exception_object);
}

void ZinMirEwCopyOptimizer::MergeTensorGroups(ZinMirEwCopyOptimizer *this, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17[2];
  uint64_t v18;
  uint64_t *v19;

  v18 = a3;
  if (a2 != a3)
  {
    v17[0] = 0;
    v17[1] = 0;
    v16 = (uint64_t *)v17;
    if ((ZinMirEwCopyOptimizer::GetTensorGroup((uint64_t)this, a3, &v16) & 1) != 0)
    {
      v5 = (_QWORD *)*((_QWORD *)this + 4);
      if (v5)
      {
        v6 = (_QWORD *)((char *)this + 32);
        do
        {
          v7 = v5[4];
          v8 = v7 < a2;
          if (v7 >= a2)
            v9 = v5;
          else
            v9 = v5 + 1;
          if (!v8)
            v6 = v5;
          v5 = (_QWORD *)*v9;
        }
        while (*v9);
        if (v6 != (_QWORD *)((char *)this + 32) && v6[4] <= a2)
        {
          v10 = v16;
          if (v16 != (uint64_t *)v17)
          {
            v11 = (uint64_t **)(v6 + 5);
            do
            {
              v15 = v10[4];
              std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>(v11, &v15, &v15);
              v19 = &v15;
              std::__tree<std::__value_type<ZinIrOpLayer *,long>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,long>,ZinIrIdComparator<ZinIrOpLayer *>,true>,std::allocator<std::__value_type<ZinIrOpLayer *,long>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>((uint64_t **)this, &v15, (uint64_t)&std::piecewise_construct, &v19)[5] = a2;
              v12 = (uint64_t *)v10[1];
              if (v12)
              {
                do
                {
                  v13 = v12;
                  v12 = (uint64_t *)*v12;
                }
                while (v12);
              }
              else
              {
                do
                {
                  v13 = (uint64_t *)v10[2];
                  v14 = *v13 == (_QWORD)v10;
                  v10 = v13;
                }
                while (!v14);
              }
              v10 = v13;
            }
            while (v13 != (uint64_t *)v17);
          }
          std::__tree<std::__value_type<long,std::set<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>>,std::__map_value_compare<long,std::__value_type<long,std::set<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::set<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>>>>::__erase_unique<long>((uint64_t)this + 24, &v18);
        }
      }
    }
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v16, v17[0]);
  }
}

void sub_206DA5CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

uint64_t ZinMirEwCopyOptimizer::GetTensorGroup(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  _QWORD *v9;

  v5 = *(_QWORD **)(a1 + 32);
  v3 = (_QWORD *)(a1 + 32);
  v4 = v5;
  if (!v5)
    return 0;
  v6 = v3;
  do
  {
    v7 = v4[4];
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = v4;
    else
      v9 = v4 + 1;
    if (!v8)
      v6 = v4;
    v4 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 == v3 || v6[4] > a2)
    return 0;
  if (v6 + 5 != a3)
    std::__tree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::__assign_multi<std::__tree_const_iterator<ZinIrTensor *,std::__tree_node<ZinIrTensor *,void *> *,long>>(a3, (_QWORD *)v6[5], v6 + 6);
  return 1;
}

uint64_t ZinMirEwCopyOptimizer::CreateTensorGroup(uint64_t a1, uint64_t **a2)
{
  _QWORD *v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  uint64_t v14;
  uint64_t *v15;

  v4 = (_QWORD *)(a1 + 56);
  v15 = (uint64_t *)(a1 + 56);
  v5 = (uint64_t **)(std::__tree<std::__value_type<long,std::set<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>>,std::__map_value_compare<long,std::__value_type<long,std::set<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::set<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>((uint64_t **)(a1 + 24), (uint64_t *)(a1 + 56), (uint64_t)&std::piecewise_construct, &v15)+ 5);
  if (v5 != a2)
    std::__tree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::__assign_multi<std::__tree_const_iterator<ZinIrTensor *,std::__tree_node<ZinIrTensor *,void *> *,long>>(v5, *a2, a2 + 1);
  v8 = *a2;
  v6 = (uint64_t *)(a2 + 1);
  v7 = v8;
  if (v8 != v6)
  {
    do
    {
      v14 = v7[4];
      v9 = *(_QWORD *)(a1 + 56);
      v15 = &v14;
      std::__tree<std::__value_type<ZinIrOpLayer *,long>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,long>,ZinIrIdComparator<ZinIrOpLayer *>,true>,std::allocator<std::__value_type<ZinIrOpLayer *,long>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>((uint64_t **)a1, &v14, (uint64_t)&std::piecewise_construct, &v15)[5] = v9;
      v10 = (uint64_t *)v7[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (uint64_t *)v7[2];
          v12 = *v11 == (_QWORD)v7;
          v7 = v11;
        }
        while (!v12);
      }
      v7 = v11;
    }
    while (v11 != v6);
  }
  return (*v4)++;
}

uint64_t *ZinMirEwCopyOptimizer::AddTensorToGroup(ZinMirEwCopyOptimizer *this, ZinIrTensor *a2, uint64_t a3)
{
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t *result;
  ZinIrTensor *v11;
  ZinIrTensor **v12;

  v11 = a2;
  v5 = (_QWORD *)*((_QWORD *)this + 4);
  if (!v5)
    goto LABEL_11;
  v6 = (char *)this + 32;
  do
  {
    v7 = v5[4];
    v8 = v7 < a3;
    if (v7 >= a3)
      v9 = v5;
    else
      v9 = v5 + 1;
    if (!v8)
      v6 = (char *)v5;
    v5 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 == (char *)this + 32 || *((_QWORD *)v6 + 4) > a3)
LABEL_11:
    v6 = (char *)this + 32;
  std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>((uint64_t **)v6 + 5, (uint64_t *)&v11, (uint64_t *)&v11);
  std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)this, (uint64_t *)&v11);
  v12 = &v11;
  result = std::__tree<std::__value_type<ZinIrOpLayer *,long>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,long>,ZinIrIdComparator<ZinIrOpLayer *>,true>,std::allocator<std::__value_type<ZinIrOpLayer *,long>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>((uint64_t **)this, (uint64_t *)&v11, (uint64_t)&std::piecewise_construct, (uint64_t **)&v12);
  result[5] = a3;
  return result;
}

uint64_t ZinMirEwCopyOptimizer::GetTensorGroupInByte(ZinMirEwCopyOptimizer *this, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t TensorInByte;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  v2 = a2 + 1;
  v3 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 == a2 + 1)
    return 0;
  v5 = 0;
  do
  {
    TensorInByte = ZinMirEwCopyOptimizer::GetTensorInByte(this, (ZinIrTensor *)v3[4]);
    v7 = (_QWORD *)v3[1];
    if (v7)
    {
      do
      {
        v8 = v7;
        v7 = (_QWORD *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        v8 = (_QWORD *)v3[2];
        v9 = *v8 == (_QWORD)v3;
        v3 = v8;
      }
      while (!v9);
    }
    v5 += TensorInByte;
    v3 = v8;
  }
  while (v8 != v2);
  return v5;
}

void ZinMirEwCopyOptimizer::GetTensorsForGroupAllocation(ZinMirEwCopyOptimizer *this@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  char *v3;
  char *v5;
  char *v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD *v9;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v2 = (char *)*((_QWORD *)this + 3);
  v3 = (char *)this + 32;
  if (v2 != (char *)this + 32)
  {
    do
    {
      std::set<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::set[abi:ne180100]((uint64_t *)&v8, (uint64_t)(v2 + 40));
      std::vector<ZinIrTensor *>::insert<std::__tree_const_iterator<ZinIrTensor *,std::__tree_node<ZinIrTensor *,void *> *,long>,0>(a2, *(char **)(a2 + 8), v8, &v9);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v8, v9);
      v5 = (char *)*((_QWORD *)v2 + 1);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (char *)*((_QWORD *)v2 + 2);
          v7 = *(_QWORD *)v6 == (_QWORD)v2;
          v2 = v6;
        }
        while (!v7);
      }
      v2 = v6;
    }
    while (v6 != v3);
  }
}

void sub_206DA6094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  uint64_t v11;
  uint64_t v12;
  void *v14;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v12, a11);
  v14 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<ZinMirEwCopyOptimizer::Execute(ZinIrControlFlowGraph *)::$_0,std::allocator<ZinMirEwCopyOptimizer::Execute(ZinIrControlFlowGraph *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinMirEwCopyOptimizer::Execute(ZinIrControlFlowGraph *)::$_0,std::allocator<ZinMirEwCopyOptimizer::Execute(ZinIrControlFlowGraph *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0013F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinMirEwCopyOptimizer::Execute(ZinIrControlFlowGraph *)::$_0,std::allocator<ZinMirEwCopyOptimizer::Execute(ZinIrControlFlowGraph *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0013F8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinMirEwCopyOptimizer::Execute(ZinIrControlFlowGraph *)::$_0,std::allocator<ZinMirEwCopyOptimizer::Execute(ZinIrControlFlowGraph *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, ZinIrOpLayerGraph **a2, ZinNEElementWiseLayer **a3)
{
  ZinNEElementWiseLayer *v3;

  v3 = *a3;
  if (*(_DWORD *)(*((_QWORD *)v3 + 8) + 8) == 90)
    ZinMirEwCopyOptimizer::AddToOptimizationGroup(*(ZinMirEwCopyOptimizer **)(a1 + 8), *a2, v3);
  return 0;
}

uint64_t std::__function::__func<ZinMirEwCopyOptimizer::Execute(ZinIrControlFlowGraph *)::$_0,std::allocator<ZinMirEwCopyOptimizer::Execute(ZinIrControlFlowGraph *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirEwCopyOptimizer::Execute(ZinIrControlFlowGraph *)::$_0,std::allocator<ZinMirEwCopyOptimizer::Execute(ZinIrControlFlowGraph *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

uint64_t std::__tree<std::__value_type<long,std::set<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>>,std::__map_value_compare<long,std::__value_type<long,std::set<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::set<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>>>>::__erase_unique<long>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  _QWORD *v7;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = v2[4];
    v6 = v5 < v3;
    if (v5 >= v3)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (!v6)
      v4 = (uint64_t)v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_QWORD *)(v4 + 32))
    return 0;
  std::__tree<std::__value_type<unsigned long,std::set<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::set<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::set<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>>>>::erase((uint64_t **)a1, v4);
  return 1;
}

uint64_t *std::__tree<std::__value_type<long,std::set<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>>,std::__map_value_compare<long,std::__value_type<long,std::set<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::set<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x40uLL);
    v12 = **a4;
    v11[7] = 0;
    v11[6] = 0;
    v11[4] = v12;
    v11[5] = (uint64_t)(v11 + 6);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t std::set<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::set[abi:ne180100](uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 8 * a3;
    do
    {
      std::__tree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::__emplace_hint_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>((uint64_t **)a1, v4, a2, a2);
      ++a2;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_206DA6338(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t SubgraphIdentification::PrintSubgraphInfo(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  const std::locale::facet *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  _QWORD *v22;
  uint64_t v23;
  std::locale::id *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  const std::locale::facet *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  const std::locale::facet *v37;
  _QWORD *v38;
  std::locale::id *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  const std::locale::facet *v49;
  _QWORD *v50;
  _QWORD *v51;
  std::locale *v52;
  uint64_t v53;
  std::locale v55;
  char v56;
  _QWORD v57[2];
  uint64_t v58;
  _QWORD v59[10];
  char v60;
  uint64_t v61;
  uint8_t buf[4];
  std::locale *v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v57);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)"INFO:: (SpatialSplit) Subgraph (size = ", 39);
  v3 = (_QWORD *)std::ostream::operator<<();
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)")", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v5 = std::locale::use_facet(&v55, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v55);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)"{ H: ", 5);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)" W: ", 4);
  v6 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" {", 2);
  v7 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v8 = 0;
    do
    {
      v9 = v7[4];
      v12 = *(_QWORD *)(v9 + 24);
      v10 = v9 + 24;
      v11 = v12;
      v13 = *(char *)(v10 + 23);
      if (v13 >= 0)
        v14 = v10;
      else
        v14 = v11;
      if (v13 >= 0)
        v15 = *(unsigned __int8 *)(v10 + 23);
      else
        v15 = *(_QWORD *)(v10 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, v14, v15);
      v16 = a2[2] - 1;
      if (v8 == v16)
        v17 = "},{";
      else
        v17 = ",";
      if (v8 == v16)
        v18 = 3;
      else
        v18 = 1;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)v17, v18);
      v19 = (_QWORD *)v7[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v7[2];
          v21 = *v20 == (_QWORD)v7;
          v7 = v20;
        }
        while (!v21);
      }
      ++v8;
      v7 = v20;
    }
    while (v20 != a2 + 1);
  }
  v22 = (_QWORD *)a2[3];
  if (v22 != a2 + 4)
  {
    v23 = 0;
    v24 = (std::locale::id *)MEMORY[0x24BEDB350];
    do
    {
      v25 = v22[4];
      v28 = *(_QWORD *)(v25 + 24);
      v26 = v25 + 24;
      v27 = v28;
      v29 = *(char *)(v26 + 23);
      if (v29 >= 0)
        v30 = v26;
      else
        v30 = v27;
      if (v29 >= 0)
        v31 = *(unsigned __int8 *)(v26 + 23);
      else
        v31 = *(_QWORD *)(v26 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, v30, v31);
      if (v23 == a2[5] - 1)
      {
        v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)"}}", 2);
        std::ios_base::getloc((const std::ios_base *)((char *)v32 + *(_QWORD *)(*v32 - 24)));
        v33 = std::locale::use_facet(&v55, v24);
        ((void (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
        std::locale::~locale(&v55);
        std::ostream::put();
        std::ostream::flush();
      }
      else
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)",", 1);
      }
      v34 = (_QWORD *)v22[1];
      if (v34)
      {
        do
        {
          v35 = v34;
          v34 = (_QWORD *)*v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          v35 = (_QWORD *)v22[2];
          v21 = *v35 == (_QWORD)v22;
          v22 = v35;
        }
        while (!v21);
      }
      ++v23;
      v22 = v35;
    }
    while (v35 != a2 + 4);
  }
  v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)"INFO:: (SpatialSplit) ---Reset layers---", 40);
  std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(_QWORD *)(*v36 - 24)));
  v37 = std::locale::use_facet(&v55, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
  std::locale::~locale(&v55);
  std::ostream::put();
  std::ostream::flush();
  v38 = (_QWORD *)a2[15];
  if (v38 != a2 + 16)
  {
    v39 = (std::locale::id *)MEMORY[0x24BEDB350];
    do
    {
      v40 = v38[4];
      v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)"\t", 1);
      v44 = *(_QWORD *)(v40 + 24);
      v43 = v40 + 24;
      v42 = v44;
      v45 = *(char *)(v43 + 23);
      if (v45 >= 0)
        v46 = v43;
      else
        v46 = v42;
      if (v45 >= 0)
        v47 = *(unsigned __int8 *)(v43 + 23);
      else
        v47 = *(_QWORD *)(v43 + 8);
      v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, v46, v47);
      std::ios_base::getloc((const std::ios_base *)((char *)v48 + *(_QWORD *)(*v48 - 24)));
      v49 = std::locale::use_facet(&v55, v39);
      ((void (*)(const std::locale::facet *, uint64_t))v49->__vftable[2].~facet_0)(v49, 10);
      std::locale::~locale(&v55);
      std::ostream::put();
      std::ostream::flush();
      v50 = (_QWORD *)v38[1];
      if (v50)
      {
        do
        {
          v51 = v50;
          v50 = (_QWORD *)*v50;
        }
        while (v50);
      }
      else
      {
        do
        {
          v51 = (_QWORD *)v38[2];
          v21 = *v51 == (_QWORD)v38;
          v38 = v51;
        }
        while (!v21);
      }
      v38 = v51;
    }
    while (v51 != a2 + 16);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v59, &v55);
    v52 = v56 >= 0 ? &v55 : (std::locale *)v55.__locale_;
    *(_DWORD *)buf = 136315138;
    v63 = v52;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s", buf, 0xCu);
    if (v56 < 0)
      operator delete(v55.__locale_);
  }
  v57[0] = *MEMORY[0x24BEDB7F0];
  v53 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v57 + *(_QWORD *)(v57[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v58 = v53;
  v59[0] = MEMORY[0x24BEDB848] + 16;
  if (v60 < 0)
    operator delete((void *)v59[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v61);
}

void sub_206DA6890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, char a13)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a13);
  _Unwind_Resume(a1);
}

BOOL ManualSubgraphIdentification::IsValidSubgraph(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 v6;
  _QWORD **v8;
  _QWORD *v9[2];
  _QWORD **v10;
  _QWORD *v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v9[1] = 0;
  v10 = v11;
  v8 = v9;
  v9[0] = 0;
  ZinIrOpLayerGraphUtil::GetLayersWithNames(a4, a2, (uint64_t)&v10);
  ZinIrOpLayerGraphUtil::GetLayersWithNames(a4, a3, (uint64_t)&v8);
  v6 = ZinIrNgraph<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>>::IsDominanceRelationship<std::set<ZinIrOpLayer *>>(a4, &v10, &v8);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v8, v9[0]);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v10, v11[0]);
  return v6;
}

void sub_206DA696C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, char a12, _QWORD *a13)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a9, a10);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

BOOL ZinIrNgraph<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>>::IsDominanceRelationship<std::set<ZinIrOpLayer *>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  BOOL v18;
  _QWORD *v19;
  uint64_t **v20;
  _QWORD *v21;
  uint64_t **v22;
  uint64_t ***v23;
  uint64_t **v24;
  uint64_t **v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t **v34;
  uint64_t **v35;
  uint64_t **v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t **v40;
  _BOOL8 v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t *v45;
  uint64_t *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t *v49;
  _QWORD *v50;
  uint64_t v51;
  _OWORD v52[2];
  int v53;
  uint64_t *v54;

  memset(v52, 0, sizeof(v52));
  v53 = 1065353216;
  v50 = 0;
  v51 = 0;
  v49 = (uint64_t *)&v50;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      v46 = v5 + 4;
      std::__tree<std::reference_wrapper<ZinIrOpLayer * const>,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<std::reference_wrapper<ZinIrOpLayer * const>>>::__emplace_unique_key_args<std::reference_wrapper<ZinIrOpLayer * const>,std::reference_wrapper<ZinIrOpLayer * const>>(&v49, &v46, (uint64_t *)&v46);
      v7 = (_QWORD *)v5[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v5[2];
          v9 = *v8 == (_QWORD)v5;
          v5 = v8;
        }
        while (!v9);
      }
      v5 = v8;
    }
    while (v8 != v4);
    if (v51)
    {
      v10 = a3 + 1;
      v11 = (_QWORD *)(a1 + 24);
      v12 = (_QWORD *)(a1 + 104);
      do
      {
        v47 = 0;
        v48 = 0;
        v46 = (uint64_t *)&v47;
        v13 = v49;
        if (v49 != (uint64_t *)&v50)
        {
          while (1)
          {
            v45 = (unint64_t *)v13[4];
            if (!std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>(v52, &v45))
            {
              v14 = (_QWORD *)*v10;
              if (!*v10)
                goto LABEL_23;
              v15 = *v45;
              v16 = a3 + 1;
              do
              {
                v17 = v14[4];
                v18 = v17 >= v15;
                if (v17 >= v15)
                  v19 = v14;
                else
                  v19 = v14 + 1;
                if (v18)
                  v16 = v14;
                v14 = (_QWORD *)*v19;
              }
              while (*v19);
              if (v16 == v10 || v15 < v16[4])
              {
LABEL_23:
                v54 = (uint64_t *)v45;
                v20 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>(v11, (unint64_t **)&v54);
                v21 = v20 + 3;
                if (!v20)
                  v21 = v12;
                if (v21[1] == *v21)
                {
                  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v46, v47);
                  v41 = 0;
                  goto LABEL_58;
                }
                v54 = (uint64_t *)v45;
                v22 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>(v11, (unint64_t **)&v54);
                v23 = (uint64_t ***)(v22 + 3);
                if (!v22)
                  v23 = (uint64_t ***)v12;
                v25 = *v23;
                v24 = v23[1];
                while (v25 != v24)
                {
                  v54 = *v25;
                  if (!std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>(v52, (unint64_t **)&v54))std::__tree<std::reference_wrapper<ZinIrOpLayer * const>,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<std::reference_wrapper<ZinIrOpLayer * const>>>::__emplace_unique_key_args<std::reference_wrapper<ZinIrOpLayer * const>,std::reference_wrapper<ZinIrOpLayer * const>>(&v46, &v54, (uint64_t *)&v54);
                  ++v25;
                }
              }
              std::__hash_table<std::reference_wrapper<ZinIrOpLayer * const>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::allocator<std::reference_wrapper<ZinIrOpLayer * const>>>::__emplace_unique_key_args<std::reference_wrapper<ZinIrOpLayer * const>,std::reference_wrapper<ZinIrOpLayer * const> const&>((uint64_t)v52, &v45, &v45);
            }
            v26 = (uint64_t *)v13[1];
            if (v26)
            {
              do
              {
                v27 = v26;
                v26 = (uint64_t *)*v26;
              }
              while (v26);
            }
            else
            {
              do
              {
                v27 = (uint64_t *)v13[2];
                v9 = *v27 == (_QWORD)v13;
                v13 = v27;
              }
              while (!v9);
            }
            v13 = v27;
            if (v27 == (uint64_t *)&v50)
            {
              v28 = v48;
              v29 = v49;
              v31 = v46;
              v30 = v47;
              goto LABEL_42;
            }
          }
        }
        v28 = 0;
        v30 = 0;
        v31 = (uint64_t *)&v47;
        v29 = (uint64_t *)&v50;
LABEL_42:
        v32 = v50;
        v33 = v51;
        v49 = v31;
        v50 = v30;
        v46 = v29;
        v47 = v32;
        v51 = v28;
        v48 = v33;
        v34 = (uint64_t **)(v30 + 2);
        v9 = v28 == 0;
        v35 = &v49;
        if (!v9)
          v35 = v34;
        *v35 = (uint64_t *)&v50;
        v36 = (uint64_t **)(v32 + 2);
        if (!v33)
          v36 = &v46;
        *v36 = (uint64_t *)&v47;
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v46, v32);
      }
      while (v51);
    }
  }
  v39 = (_QWORD *)*a3;
  v37 = a3 + 1;
  v38 = v39;
  if (v39 == v37)
  {
    v41 = 1;
  }
  else
  {
    do
    {
      v46 = v38 + 4;
      v40 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::vector<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>,std::__unordered_map_hasher<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::vector<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>,std::hash<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,std::equal_to<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,true>,std::__unordered_map_equal<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::vector<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>,std::equal_to<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,std::hash<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>,std::vector<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>>>>::find<std::reference_wrapper<std::shared_ptr<ZinIrHazardNode> const>>(v52, (unint64_t **)&v46);
      v41 = v40 != 0;
      if (!v40)
        break;
      v42 = (_QWORD *)v38[1];
      if (v42)
      {
        do
        {
          v43 = v42;
          v42 = (_QWORD *)*v42;
        }
        while (v42);
      }
      else
      {
        do
        {
          v43 = (_QWORD *)v38[2];
          v9 = *v43 == (_QWORD)v38;
          v38 = v43;
        }
        while (!v9);
      }
      v38 = v43;
    }
    while (v43 != v37);
  }
LABEL_58:
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v49, v50);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v52);
  return v41;
}

void sub_206DA6CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  _QWORD *v10;
  uint64_t v11;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD *);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD *);
  v11 = va_arg(va2, _QWORD);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)va, v6);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)va1, v10);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t ManualSubgraphIdentification::IdentifySubgraphs(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  const void ***v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL8 IsValidSubgraph;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v26;
  _QWORD **v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t **v31;
  _QWORD *v32[2];
  uint64_t *v33;
  _QWORD *v34[2];
  _QWORD v35[3];
  _QWORD **v36;
  _QWORD *v37[2];
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD **v41;
  _QWORD *v42[2];
  char v43;
  uint64_t *v44;
  uint64_t *v45;
  void *v46[5];
  void **v47[2];
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  const void **v53;
  int v54;
  const void **v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  ZinIrCompilerParameters::getSubgraph(*(ZinIrCompilerParameters **)(*(_QWORD *)(a1 + 16) + 8), &v44);
  v4 = (const void ***)v44;
  v26 = v45;
  if (v44 == v45)
  {
LABEL_29:
    v24 = 0;
  }
  else
  {
    v5 = v35;
    while (1)
    {
      v32[0] = 0;
      v32[1] = 0;
      v34[0] = 0;
      v34[1] = 0;
      v31 = v32;
      v33 = (uint64_t *)v34;
      v35[0] = v5;
      v35[1] = v5;
      v6 = v5;
      v37[0] = 0;
      v37[1] = 0;
      v35[2] = 0;
      v36 = v37;
      v39 = 0;
      v40 = 0;
      v38 = 0;
      v42[0] = 0;
      v42[1] = 0;
      v41 = v42;
      v43 = 0;
      LODWORD(v47[0]) = 0;
      v47[1] = (void **)v4[2];
      v48 = 1;
      v49 = 1;
      v50 = 2;
      v51 = 1;
      v52 = 3;
      v53 = *v4;
      v54 = 4;
      v55 = v4[1];
      std::map<ZinIrDimension,unsigned long>::map[abi:ne180100]((uint64_t)&v28, (int *)v47, 5);
      v7 = v39;
      if ((unint64_t)v39 >= v40)
      {
        v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v39 - v38) >> 3);
        v12 = v11 + 1;
        if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(v40 - v38) >> 3) > v12)
          v12 = 0x5555555555555556 * ((uint64_t)(v40 - v38) >> 3);
        v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - v38) >> 3) >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v12;
        v46[4] = &v40;
        v14 = v13
            ? (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v40, v13)
            : 0;
        v16 = &v14[24 * v11];
        v46[0] = v14;
        v46[1] = v16;
        v46[3] = &v14[24 * v13];
        *(_QWORD *)v16 = v28;
        v17 = v29;
        *((_QWORD *)v16 + 1) = v29;
        v18 = v16 + 8;
        v19 = v30;
        *((_QWORD *)v16 + 2) = v30;
        if (v19)
        {
          v17[2] = v18;
          v28 = &v29;
          v29 = 0;
          v30 = 0;
        }
        else
        {
          *(_QWORD *)v16 = v18;
        }
        v46[2] = v16 + 24;
        std::vector<std::map<ZinIrDimension,unsigned long>>::__swap_out_circular_buffer(&v38, v46);
        v15 = v39;
        std::__split_buffer<std::map<ZinIrDimension,unsigned long>>::~__split_buffer(v46);
      }
      else
      {
        *v39 = v28;
        v8 = v29;
        v7[1] = v29;
        v9 = v7 + 1;
        v10 = v30;
        v7[2] = v30;
        if (v10)
        {
          v8[2] = v9;
          v28 = &v29;
          v29 = 0;
          v30 = 0;
        }
        else
        {
          *v7 = v9;
        }
        v15 = v7 + 3;
      }
      v39 = v15;
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v28, v29);
      if (ManualSubgraphIdentification::IdentifySubgraphs(ZinIrOpLayerGraph *,std::vector<Subgraph> &,std::optional<std::reference_wrapper<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const>>)::$_0::operator()(a2, v4 + 3, (uint64_t **)&v31))break;
      v20 = ManualSubgraphIdentification::IdentifySubgraphs(ZinIrOpLayerGraph *,std::vector<Subgraph> &,std::optional<std::reference_wrapper<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const>>)::$_0::operator()(a2, v4 + 6, &v33);
      if ((_DWORD)v20)
        break;
      IsValidSubgraph = ManualSubgraphIdentification::IsValidSubgraph(v20, (uint64_t)(v4 + 3), (uint64_t)(v4 + 6), (uint64_t)a2);
      if (!IsValidSubgraph
        || SubgraphIdentification::ExtractSubgraph((SubgraphIdentification *)IsValidSubgraph, (Subgraph *)&v31) == 3)
      {
        break;
      }
      v22 = a3[1];
      if (v22 >= a3[2])
      {
        v23 = std::vector<Subgraph>::__push_back_slow_path<Subgraph const&>(a3, (const Subgraph *)&v31);
      }
      else
      {
        Subgraph::Subgraph((Subgraph *)a3[1], (const Subgraph *)&v31);
        v23 = v22 + 152;
        a3[1] = v22 + 152;
      }
      a3[1] = v23;
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v41, v42[0]);
      v47[0] = (void **)&v38;
      std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](v47);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v36, v37[0]);
      std::__list_imp<ZinIrSection *>::clear(v6);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v33, v34[0]);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v31, v32[0]);
      v5 = v6;
      v4 += 12;
      if (v4 == (const void ***)v26)
        goto LABEL_29;
    }
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v41, v42[0]);
    v47[0] = (void **)&v38;
    std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](v47);
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v36, v37[0]);
    std::__list_imp<ZinIrSection *>::clear(v6);
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v33, v34[0]);
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v31, v32[0]);
    v24 = 3;
  }
  v31 = &v44;
  std::vector<ZinIrCompilerParameters::SubGraphSpec>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  return v24;
}

void sub_206DA70D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  _Unwind_Resume(exception_object);
}

void ZinIrCompilerParameters::getSubgraph(ZinIrCompilerParameters *this@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  uint64_t *v4;
  void *__p[2];
  char v6;

  v3 = (char *)this + 584;
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_207AF6795);
  v4 = (uint64_t *)std::map<std::string,BOOL>::at((uint64_t)v3, __p);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<ZinIrCompilerParameters::SubGraphSpec>::__init_with_size[abi:ne180100]<ZinIrCompilerParameters::SubGraphSpec*,ZinIrCompilerParameters::SubGraphSpec*>(a2, *v4, v4[1], 0xAAAAAAAAAAAAAAABLL * ((v4[1] - *v4) >> 5));
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_206DA71B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ManualSubgraphIdentification::IdentifySubgraphs(ZinIrOpLayerGraph *,std::vector<Subgraph> &,std::optional<std::reference_wrapper<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const>>)::$_0::operator()(_QWORD *a1, const void ***a2, uint64_t **a3)
{
  const void **v3;
  const void **v4;
  _QWORD *v7;
  _QWORD *v8;
  const void *v9;
  uint64_t v10;
  const void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  const void *v18;
  size_t v19;
  BOOL v20;
  _QWORD *v21;
  _QWORD *v22;
  ZinIrOpLayer *v24;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 == v4)
    return 0;
  v7 = a1 + 1;
  while (1)
  {
    v8 = (_QWORD *)*a1;
    if ((_QWORD *)*a1 == v7)
      break;
    v9 = (const void *)*((unsigned __int8 *)v3 + 23);
    while (1)
    {
      v10 = v8[4];
      v24 = (ZinIrOpLayer *)v10;
      v11 = v9;
      v12 = v3;
      if ((v9 & 0x80) != 0)
      {
        v12 = *v3;
        v11 = v3[1];
      }
      v13 = v10 + 24;
      v14 = *(_QWORD *)(v10 + 24);
      v15 = *(unsigned __int8 *)(v10 + 47);
      v16 = *(_QWORD *)(v10 + 32);
      v17 = (const void *)((v15 & 0x80u) == 0 ? v15 : v16);
      v18 = (const void *)((v15 & 0x80u) == 0 ? v13 : v14);
      v19 = (size_t)(v17 >= v11 ? v11 : v17);
      v20 = !memcmp(v12, v18, v19) && v17 == v11;
      if (v20)
        break;
      v21 = (_QWORD *)v8[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v8[2];
          v20 = *v22 == (_QWORD)v8;
          v8 = v22;
        }
        while (!v20);
      }
      v8 = v22;
      if (v22 == v7)
        goto LABEL_29;
    }
    std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(a3, &v24, (uint64_t *)&v24);
    v3 += 3;
    if (v3 == v4)
      return 0;
  }
LABEL_29:
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    ManualSubgraphIdentification::IdentifySubgraphs(ZinIrOpLayerGraph *,std::vector<Subgraph> &,std::optional<std::reference_wrapper<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const>>)::$_0::operator()((uint64_t *)v3);
  return 3;
}

uint64_t SubgraphIdentification::ExtractSubgraph(SubgraphIdentification *this, Subgraph *a2)
{
  uint64_t v3;
  uint64_t **v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  ZinIrOpLayer **v13;
  ZinIrOpLayer **v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t **v20;
  uint64_t **v21;
  ZinIrOpLayer *v22;
  ZinIrOpLayer *v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  _OWORD v27[2];
  int v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;

  memset(v27, 0, sizeof(v27));
  v28 = 1065353216;
  std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100]((uint64_t *)&v24, (ZinIrOpLayer ***)a2);
  if (*((_QWORD *)a2 + 8) || *((_QWORD *)a2 + 11))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SubgraphIdentification::ExtractSubgraph();
    v3 = 3;
  }
  else
  {
    v5 = (uint64_t **)((char *)a2 + 72);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long>,std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long>,std::insert_iterator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>>(*(ZinIrOpLayer ***)a2, (ZinIrOpLayer **)a2 + 1, (uint64_t)a2 + 72, (uint64_t)a2 + 80, (uint64_t)&v29);
    v6 = v26;
    if (v26)
    {
      v7 = (char *)a2 + 24;
      v8 = (char *)a2 + 32;
      do
      {
        v30 = 0;
        v31 = 0;
        v29 = (uint64_t *)&v30;
        v9 = v24;
        if (v24 == (uint64_t *)&v25)
        {
          v18 = 0;
          v15 = 0;
          v16 = (uint64_t *)&v30;
          v17 = (uint64_t *)&v25;
        }
        else
        {
          do
          {
            v23 = (ZinIrOpLayer *)v9[4];
            if (!std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v27, &v23))
            {
              if (!std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)v7, &v23))
              {
                v13 = (ZinIrOpLayer **)*((_QWORD *)v23 + 14);
                v14 = (ZinIrOpLayer **)*((_QWORD *)v23 + 15);
                while (v13 != v14)
                {
                  v22 = 0;
                  v22 = *v13;
                  if (!std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v27, &v22))
                  {
                    if (v8 == (char *)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)v7, &v22))std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(&v29, &v22, (uint64_t *)&v22);
                    std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(v5, &v22, (uint64_t *)&v22);
                  }
                  ++v13;
                }
              }
              std::__hash_table<ZinIrTensor const*,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const* const&>((uint64_t)v27, &v23, &v23);
            }
            v10 = (uint64_t *)v9[1];
            if (v10)
            {
              do
              {
                v11 = v10;
                v10 = (uint64_t *)*v10;
              }
              while (v10);
            }
            else
            {
              do
              {
                v11 = (uint64_t *)v9[2];
                v12 = *v11 == (_QWORD)v9;
                v9 = v11;
              }
              while (!v12);
            }
            v9 = v11;
          }
          while (v11 != (uint64_t *)&v25);
          v16 = v29;
          v15 = v30;
          v17 = v24;
          v6 = v26;
          v18 = v31;
        }
        v19 = v25;
        v24 = v16;
        v25 = v15;
        v29 = v17;
        v30 = v19;
        v26 = v18;
        v31 = v6;
        v20 = (uint64_t **)(v15 + 2);
        if (!v18)
          v20 = &v24;
        *v20 = (uint64_t *)&v25;
        if (v6)
          v21 = (uint64_t **)(v19 + 2);
        else
          v21 = &v29;
        *v21 = (uint64_t *)&v30;
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v29, v19);
        v6 = v26;
      }
      while (v26);
    }
    v3 = 0;
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v24, v25);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v27);
  return v3;
}

void sub_206DA7554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  _QWORD *v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD *);
  v8 = va_arg(va1, _QWORD);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)va, v7);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)va1);
  _Unwind_Resume(a1);
}

double std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long>,std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long>,std::insert_iterator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>>@<D0>(ZinIrOpLayer **a1@<X1>, ZinIrOpLayer **a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  ZinIrOpLayer **v5;
  ZinIrOpLayer *v8;
  ZinIrOpLayer ***v9;
  BOOL v10;
  double result;
  __int128 v12;

  v5 = a1;
  *(_QWORD *)&v12 = a3;
  *((_QWORD *)&v12 + 1) = a4;
  if (a1 != a2)
  {
    do
    {
      std::insert_iterator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::operator=[abi:ne180100]((uint64_t)&v12, v5 + 4);
      v8 = v5[1];
      if (v8)
      {
        do
        {
          v9 = (ZinIrOpLayer ***)v8;
          v8 = *(ZinIrOpLayer **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (ZinIrOpLayer ***)v5[2];
          v10 = *v9 == v5;
          v5 = (ZinIrOpLayer **)v9;
        }
        while (!v10);
      }
      v5 = (ZinIrOpLayer **)v9;
    }
    while (v9 != (ZinIrOpLayer ***)a2);
    v5 = a2;
  }
  *(_QWORD *)a5 = v5;
  result = *(double *)&v12;
  *(_OWORD *)(a5 + 8) = v12;
  return result;
}

uint64_t std::insert_iterator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::operator=[abi:ne180100](uint64_t a1, ZinIrOpLayer **a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  BOOL v6;

  v3 = std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_hint_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(*(uint64_t ***)a1, *(uint64_t **)(a1 + 8), a2, (uint64_t *)a2);
  *(_QWORD *)(a1 + 8) = v3;
  v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      v5 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      v5 = (uint64_t *)v3[2];
      v6 = *v5 == (_QWORD)v3;
      v3 = v5;
    }
    while (!v6);
  }
  *(_QWORD *)(a1 + 8) = v5;
  return a1;
}

_QWORD *std::__hash_table<std::reference_wrapper<ZinIrOpLayer * const>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::allocator<std::reference_wrapper<ZinIrOpLayer * const>>>::__emplace_unique_key_args<std::reference_wrapper<ZinIrOpLayer * const>,std::reference_wrapper<ZinIrOpLayer * const> const&>(uint64_t a1, unint64_t **a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v6 = **a2;
  v7 = 0x9DDFEA08EB382D69 * (((8 * v6) + 8) ^ HIDWORD(v6));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(v6) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (*(_QWORD *)v13[2] == v6)
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v13 = operator new(0x18uLL);
  *v13 = 0;
  v13[1] = v9;
  v13[2] = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    v17 = 1;
    if (v10 >= 3)
      v17 = (v10 & (v10 - 1)) != 0;
    v18 = v17 | (2 * v10);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v20);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *v13 = *v22;
LABEL_38:
    *v22 = v13;
    goto LABEL_39;
  }
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v21 + 8 * v3) = a1 + 16;
  if (*v13)
  {
    v23 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10)
        v23 %= v10;
    }
    else
    {
      v23 &= v10 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_206DA78E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void ManualSubgraphIdentification::IdentifySubgraphs(ZinIrOpLayerGraph *,std::vector<Subgraph> &,std::optional<std::reference_wrapper<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>> const>>)::$_0::operator()(uint64_t *a1)
{
  int v1;
  uint64_t *v2;
  __int16 v3;
  int v4;
  __int16 v5;
  const char *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (*((char *)a1 + 23) < 0)
    a1 = (uint64_t *)*a1;
  v1 = 136315650;
  v2 = a1;
  v3 = 1024;
  v4 = 80;
  v5 = 2080;
  v6 = "/Library/Caches/com.apple.xbs/Sources/ANECompiler/libs/inference/compiler/ZinMirPrepare/src/ZinMirSubgraphIdentification.cpp";
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Can't find %s, line %d, file %s", (uint8_t *)&v1, 0x1Cu);
}

void SubgraphIdentification::ExtractSubgraph()
{
  _DWORD v0[2];
  __int16 v1;
  const char *v2;
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  v0[0] = 67109378;
  v0[1] = 127;
  v1 = 2080;
  v2 = "/Library/Caches/com.apple.xbs/Sources/ANECompiler/libs/inference/compiler/ZinMirPrepare/src/ZinMirSubgraphIdentification.cpp";
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Subgraph must be empty, line : %d, file : %s", (uint8_t *)v0, 0x12u);
}

uint64_t ZinIrOpt::LeakyReluDetection(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t i;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t j;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t k;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t m;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  void **v55[3];
  int v56;
  char *v57;
  uint64_t v58;
  char *v59;
  int v60;
  int v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  __int128 v65;
  _QWORD v66[3];
  int v67;
  char *v68;
  uint64_t v69;
  char *v70;
  int v71;
  int v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  __int128 v76;
  int v77;
  int v78;
  char *v79;
  uint64_t v80;
  char *v81;
  __int128 v82;
  _OWORD *v83;
  _OWORD *v84;
  _OWORD *v85;
  void ***v86;
  char v87;
  _QWORD v88[3];
  _QWORD *v89;
  _QWORD v90[3];
  _QWORD *v91;
  void *__p;
  char v93;
  char v94;
  _QWORD v95[3];
  _QWORD *v96;
  _BYTE v97[40];
  void *v98;
  char v99;
  char v100;
  _QWORD v101[3];
  _QWORD *v102;
  _BYTE v103[40];
  void *v104[2];
  char v105;
  _QWORD v106[3];
  _QWORD *v107;
  _BYTE v108[40];
  char *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115[4];
  _BYTE v116[24];
  _BYTE *v117;
  char **v118;
  char v119;
  uint64_t v120;
  uint64_t (**v121)(ZinLinearPattern *__hidden);
  uint64_t v122;
  uint64_t (**v123)(ZinLinearPattern *__hidden);
  uint64_t v124;
  _BYTE v125[24];
  _BYTE *v126;
  _QWORD v127[3];
  _QWORD *v128;
  void *v129[2];
  char v130;
  _QWORD v131[3];
  _QWORD *v132;
  _BYTE v133[40];
  void *v134[2];
  char v135;
  _QWORD v136[3];
  _QWORD *v137;
  _BYTE v138[40];
  void *v139[2];
  char v140;
  _QWORD v141[3];
  _QWORD *v142;
  _BYTE v143[40];
  char *v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  char *v149;
  uint64_t v150[4];
  _BYTE v151[24];
  _BYTE *v152;
  uint64_t (**v153)(ZinManyToOnePattern *__hidden);
  char v154;
  uint64_t v155;
  uint64_t (**v156)(ZinLinearPattern *__hidden);
  uint64_t v157;
  uint64_t (**v158)(ZinLinearPattern *__hidden);
  uint64_t v159;
  _BYTE v160[24];
  _BYTE *v161;
  _QWORD v162[3];
  _QWORD *v163;
  _QWORD v164[3];
  _QWORD v165[4];
  uint64_t v166;
  _QWORD v167[3];
  _QWORD v168[3];
  _QWORD *v169;
  _BYTE v170[40];
  _QWORD v171[23];
  uint64_t v172;
  _OWORD v173[3];
  uint64_t v174;

  v174 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v164, "goc");
  v165[0] = &off_24C0030C8;
  v165[3] = v165;
  v78 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v166, &v78, 1);
  std::string::basic_string[abi:ne180100]<0>(v167, "elementwise");
  v168[0] = &off_24C0031D0;
  v169 = v168;
  v77 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v170, &v77, 1);
  v79 = 0;
  v80 = 0;
  v81 = 0;
  v153 = (uint64_t (**)(ZinManyToOnePattern *__hidden))&v79;
  v154 = 0;
  v79 = (char *)operator new(0xC0uLL);
  v80 = (uint64_t)v79;
  v81 = v79 + 192;
  v80 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v81, (uint64_t)v164, (uint64_t)v171, (uint64_t)v79);
  v162[0] = &off_24C003228;
  v163 = v162;
  ZinLinearPattern::ZinLinearPattern(v171, &v79, a2, 0, v162, 0);
  std::allocate_shared[abi:ne180100]<ZinLinearPattern,std::allocator<ZinLinearPattern>,ZinLinearPattern,void>((uint64_t)v171, &v82);
  v173[0] = v82;
  v82 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(v139, "per_cout_bias_goc");
  v141[0] = &off_24C003178;
  v142 = v141;
  v72 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v143, &v72, 1);
  v145 = 0;
  v144 = 0;
  v146 = 0;
  v118 = &v144;
  v119 = 0;
  v144 = (char *)operator new(0x60uLL);
  v145 = (uint64_t)v144;
  v146 = v144 + 96;
  v145 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v146, (uint64_t)v139, (uint64_t)&v144, (uint64_t)v144);
  std::string::basic_string[abi:ne180100]<0>(v134, "singular_scale_goc");
  v136[0] = &off_24C003120;
  v137 = v136;
  v71 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v138, &v71, 1);
  v147 = 0;
  v148 = 0;
  v149 = 0;
  v118 = &v147;
  v119 = 0;
  v147 = (char *)operator new(0x60uLL);
  v148 = (uint64_t)v147;
  v149 = v147 + 96;
  v148 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v149, (uint64_t)v134, (uint64_t)v139, (uint64_t)v147);
  v74 = 0;
  v75 = 0;
  v73 = 0;
  v118 = (char **)&v73;
  v119 = 0;
  v73 = operator new(0x30uLL);
  v74 = v73;
  v75 = v73 + 6;
  v74 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<ZinLinearPattern::AtomItemDesc const>>,std::vector<ZinLinearPattern::AtomItemDesc const> const*,std::vector<ZinLinearPattern::AtomItemDesc const> const*,std::vector<ZinLinearPattern::AtomItemDesc const>*>((uint64_t)&v75, (uint64_t *)&v144, v150, v73);
  v150[0] = (uint64_t)&v73;
  v150[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v129, "elementwise");
  v131[0] = &off_24C0031D0;
  v132 = v131;
  v67 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v133, &v67, 1);
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v118 = &v68;
  v119 = 0;
  v68 = (char *)operator new(0x60uLL);
  v69 = (uint64_t)v68;
  v70 = v68 + 96;
  v69 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v70, (uint64_t)v129, (uint64_t)v134, (uint64_t)v68);
  memset(v66, 0, sizeof(v66));
  v150[2] = (uint64_t)&v68;
  v150[3] = (uint64_t)v66;
  v152 = 0;
  v127[0] = &off_24C003280;
  v128 = v127;
  ZinManyToOnePattern::ZinManyToOnePattern(&v153, v150, a2, 0, v127, 0);
  std::allocate_shared[abi:ne180100]<ZinManyToOnePattern,std::allocator<ZinManyToOnePattern>,ZinManyToOnePattern,void>((const ZinManyToOnePattern *)&v153, &v76);
  v173[1] = v76;
  v76 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(v104, "singular_scale_goc");
  v106[0] = &off_24C003120;
  v107 = v106;
  v61 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v108, &v61, 1);
  v110 = 0;
  v109 = 0;
  v111 = 0;
  v98 = &v109;
  v99 = 0;
  v109 = (char *)operator new(0x60uLL);
  v110 = (uint64_t)v109;
  v111 = v109 + 96;
  v110 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v111, (uint64_t)v104, (uint64_t)&v109, (uint64_t)v109);
  std::string::basic_string[abi:ne180100]<0>(&v98, "per_cout_bias_goc");
  v101[0] = &off_24C003178;
  v102 = v101;
  v60 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v103, &v60, 1);
  v112 = 0;
  v113 = 0;
  v114 = 0;
  __p = &v112;
  v93 = 0;
  v112 = (char *)operator new(0x60uLL);
  v113 = (uint64_t)v112;
  v114 = v112 + 96;
  v113 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v114, (uint64_t)&v98, (uint64_t)v104, (uint64_t)v112);
  v63 = 0;
  v64 = 0;
  v62 = 0;
  __p = &v62;
  v93 = 0;
  v62 = operator new(0x30uLL);
  v63 = v62;
  v64 = v62 + 6;
  v63 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<ZinLinearPattern::AtomItemDesc const>>,std::vector<ZinLinearPattern::AtomItemDesc const> const*,std::vector<ZinLinearPattern::AtomItemDesc const> const*,std::vector<ZinLinearPattern::AtomItemDesc const>*>((uint64_t)&v64, (uint64_t *)&v109, v115, v62);
  v115[0] = (uint64_t)&v62;
  v115[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "elementwise");
  v95[0] = &off_24C0031D0;
  v96 = v95;
  v56 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v97, &v56, 1);
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v57 = (char *)operator new(0x60uLL);
  v58 = (uint64_t)v57;
  v59 = v57 + 96;
  v58 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v59, (uint64_t)&__p, (uint64_t)&v98, (uint64_t)v57);
  memset(v55, 0, sizeof(v55));
  v115[2] = (uint64_t)&v57;
  v115[3] = (uint64_t)v55;
  v4 = v116;
  v117 = 0;
  v90[0] = &off_24C003280;
  v91 = v90;
  ZinManyToOnePattern::ZinManyToOnePattern(&v118, v115, a2, 0, v90, 0);
  std::allocate_shared[abi:ne180100]<ZinManyToOnePattern,std::allocator<ZinManyToOnePattern>,ZinManyToOnePattern,void>((const ZinManyToOnePattern *)&v118, &v65);
  v173[2] = v65;
  v65 = 0uLL;
  v84 = 0;
  v85 = 0;
  v83 = 0;
  v86 = (void ***)&v83;
  v87 = 0;
  v5 = operator new(0x30uLL);
  v6 = 0;
  v83 = v5;
  v84 = v5;
  v85 = v5 + 3;
  do
  {
    v7 = v173[v6];
    *v5 = v7;
    if (*((_QWORD *)&v7 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    ++v6;
    ++v5;
  }
  while (v6 != 3);
  v84 = v5;
  for (i = 2; i != -1; --i)
    std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v173[i]);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
  if (*((_QWORD *)&v65 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v118 = (char **)&off_24C01F100;
  v14 = v126;
  if (v126 == v125)
  {
    v15 = 4;
    v14 = v125;
  }
  else
  {
    if (!v126)
      goto LABEL_18;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_18:
  v123 = &off_24C01BCC8;
  v86 = (void ***)&v124;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v86);
  ZinPattern::~ZinPattern((ZinPattern *)&v123);
  v121 = &off_24C01BCC8;
  v86 = (void ***)&v122;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v86);
  ZinPattern::~ZinPattern((ZinPattern *)&v121);
  v86 = (void ***)&v120;
  std::vector<ZinLinearPattern>::__destroy_vector::operator()[abi:ne180100]((void ***)&v86);
  ZinPattern::~ZinPattern((ZinPattern *)&v118);
  v16 = v91;
  if (v91 == v90)
  {
    v17 = 4;
    v16 = v90;
  }
  else
  {
    if (!v91)
      goto LABEL_23;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_23:
  if (v117 == v116)
  {
    v18 = 4;
  }
  else
  {
    if (!v117)
      goto LABEL_28;
    v18 = 5;
    v4 = v117;
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v18))(v4);
LABEL_28:
  v86 = v55;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v86);
  v55[0] = (void **)&v57;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100](v55);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v97);
  v19 = v96;
  if (v96 == v95)
  {
    v20 = 4;
    v19 = v95;
  }
  else
  {
    if (!v96)
      goto LABEL_33;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_33:
  if (v94 < 0)
    operator delete(__p);
  __p = &v62;
  std::vector<std::vector<ZinLinearPattern::AtomItemDesc const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  for (j = 3; j != -3; j -= 3)
  {
    __p = &(&v109)[j];
    std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v103);
  v22 = v102;
  if (v102 == v101)
  {
    v23 = 4;
    v22 = v101;
  }
  else
  {
    if (!v102)
      goto LABEL_42;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_42:
  if (v100 < 0)
    operator delete(v98);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v108);
  v24 = v107;
  if (v107 == v106)
  {
    v25 = 4;
    v24 = v106;
  }
  else
  {
    if (!v107)
      goto LABEL_49;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_49:
  if (v105 < 0)
    operator delete(v104[0]);
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
  if (*((_QWORD *)&v76 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v153 = &off_24C01F100;
  v29 = v161;
  if (v161 == v160)
  {
    v30 = 4;
    v29 = v160;
  }
  else
  {
    if (!v161)
      goto LABEL_61;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_61:
  v158 = &off_24C01BCC8;
  v118 = (char **)&v159;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
  ZinPattern::~ZinPattern((ZinPattern *)&v158);
  v156 = &off_24C01BCC8;
  v118 = (char **)&v157;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
  ZinPattern::~ZinPattern((ZinPattern *)&v156);
  v118 = (char **)&v155;
  std::vector<ZinLinearPattern>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
  ZinPattern::~ZinPattern((ZinPattern *)&v153);
  v31 = v128;
  if (v128 == v127)
  {
    v33 = 4;
    v31 = v127;
    v32 = v151;
  }
  else
  {
    v32 = v151;
    if (!v128)
      goto LABEL_66;
    v33 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v33))();
LABEL_66:
  if (v152 == v151)
  {
    v34 = 4;
  }
  else
  {
    if (!v152)
      goto LABEL_71;
    v34 = 5;
    v32 = v152;
  }
  (*(void (**)(_QWORD *))(*v32 + 8 * v34))(v32);
LABEL_71:
  v118 = (char **)v66;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
  v118 = &v68;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v133);
  v35 = v132;
  if (v132 == v131)
  {
    v36 = 4;
    v35 = v131;
  }
  else
  {
    if (!v132)
      goto LABEL_76;
    v36 = 5;
  }
  (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_76:
  if (v130 < 0)
    operator delete(v129[0]);
  v118 = (char **)&v73;
  std::vector<std::vector<ZinLinearPattern::AtomItemDesc const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
  for (k = 3; k != -3; k -= 3)
  {
    v118 = &(&v144)[k];
    std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v138);
  v38 = v137;
  if (v137 == v136)
  {
    v39 = 4;
    v38 = v136;
  }
  else
  {
    if (!v137)
      goto LABEL_85;
    v39 = 5;
  }
  (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_85:
  if (v135 < 0)
    operator delete(v134[0]);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v143);
  v40 = v142;
  if (v142 == v141)
  {
    v41 = 4;
    v40 = v141;
  }
  else
  {
    if (!v142)
      goto LABEL_92;
    v41 = 5;
  }
  (*(void (**)(void))(*v40 + 8 * v41))();
LABEL_92:
  if (v140 < 0)
    operator delete(v139[0]);
  v42 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
  if (*((_QWORD *)&v82 + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v171[0] = &off_24C01BCC8;
  v153 = (uint64_t (**)(ZinManyToOnePattern *__hidden))&v172;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v153);
  ZinPattern::~ZinPattern((ZinPattern *)v171);
  v45 = v163;
  if (v163 == v162)
  {
    v46 = 4;
    v45 = v162;
    goto LABEL_103;
  }
  if (v163)
  {
    v46 = 5;
LABEL_103:
    (*(void (**)(void))(*v45 + 8 * v46))();
  }
  v153 = (uint64_t (**)(ZinManyToOnePattern *__hidden))&v79;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v153);
  for (m = 0; m != -24; m -= 12)
  {
    v48 = &v164[m];
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v170[m * 8]);
    v49 = *(_QWORD **)&v170[m * 8 - 8];
    if (&v168[m] == v49)
    {
      v49 = v48 + 15;
      v50 = 4;
    }
    else
    {
      if (!v49)
        goto LABEL_110;
      v50 = 5;
    }
    (*(void (**)(void))(*v49 + 8 * v50))();
LABEL_110:
    if (SHIBYTE(v167[m + 2]) < 0)
      operator delete((void *)v48[12]);
  }
  v88[0] = &off_24C0032D8;
  v88[1] = &v83;
  v89 = v88;
  v51 = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v88, 1);
  v52 = v89;
  if (v89 == v88)
  {
    v53 = 4;
    v52 = v88;
LABEL_117:
    (*(void (**)(void))(*v52 + 8 * v53))();
  }
  else if (v89)
  {
    v53 = 5;
    goto LABEL_117;
  }
  v153 = (uint64_t (**)(ZinManyToOnePattern *__hidden))&v83;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v153);
  return v51;
}

void sub_206DA87B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,char *a54)
{
  char *v54;
  char *v56;
  uint64_t v57;

  v56 = a54;
  if (a54 == v54)
  {
    v57 = 4;
    v56 = &a51;
  }
  else
  {
    if (!a54)
      goto LABEL_6;
    v57 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v56 + 8 * v57))();
LABEL_6:
  STACK[0x768] = (unint64_t)&a45;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x768]);
  _Unwind_Resume(a1);
}

void sub_206DA8C9C()
{
  JUMPOUT(0x206DA8C08);
}

void sub_206DA8CAC()
{
  JUMPOUT(0x206DA8C10);
}

void sub_206DA8CBC()
{
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x768]);
  JUMPOUT(0x206DA8C50);
}

void sub_206DA8CE0()
{
  ZinPatternAtomDesc *v0;

  ZinPatternAtomDesc::~ZinPatternAtomDesc(v0);
  ZinLinearPattern::AtomItemDesc::~AtomItemDesc((ZinLinearPattern::AtomItemDesc *)&STACK[0xA20]);
  JUMPOUT(0x206DA8C94);
}

void sub_206DA8D00()
{
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&STACK[0xA20]);
  JUMPOUT(0x206DA8C94);
}

void sub_206DA8D10()
{
  JUMPOUT(0x206DA8C94);
}

uint64_t ZinIrOpt::GocGocMaxtoGocMax(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t i;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int v22;
  int v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  char **v32;
  char v33;
  _QWORD v34[3];
  _QWORD *v35;
  _QWORD v36[3];
  _QWORD *v37;
  _QWORD v38[3];
  _QWORD v39[4];
  uint64_t v40;
  _QWORD v41[3];
  _QWORD v42[3];
  _QWORD *v43;
  _BYTE v44[40];
  void **v45[23];
  uint64_t v46;
  _QWORD v47[3];

  v47[2] = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v38, "goc");
  v39[0] = &off_24C002F10;
  v39[3] = v39;
  v23 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v40, &v23, 1);
  std::string::basic_string[abi:ne180100]<0>(v41, "elementwise");
  v42[0] = &off_24C002F68;
  v43 = v42;
  v22 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v44, &v22, 1);
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v32 = &v24;
  v33 = 0;
  v24 = (char *)operator new(0xC0uLL);
  v25 = (uint64_t)v24;
  v26 = v24 + 192;
  v25 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v26, (uint64_t)v38, (uint64_t)v45, (uint64_t)v24);
  v36[0] = &off_24C002FC0;
  v37 = v36;
  ZinLinearPattern::ZinLinearPattern(v45, &v24, a2, 0, v36, 0);
  std::allocate_shared[abi:ne180100]<ZinLinearPattern,std::allocator<ZinLinearPattern>,ZinLinearPattern,void>((uint64_t)v45, &v27);
  v5 = v27;
  v4 = v28;
  v47[0] = v27;
  v47[1] = v28;
  v27 = 0;
  v28 = 0;
  v30 = 0;
  v31 = 0;
  v29 = 0;
  v32 = (char **)&v29;
  v33 = 0;
  v6 = operator new(0x10uLL);
  v29 = v6;
  v31 = v6 + 2;
  *v6 = v5;
  v6[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v30 = v6 + 2;
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)v47);
  v9 = v28;
  if (v28)
  {
    v10 = (unint64_t *)&v28->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v45[0] = (void **)&off_24C01BCC8;
  v32 = (char **)&v46;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  ZinPattern::~ZinPattern((ZinPattern *)v45);
  v12 = v37;
  if (v37 == v36)
  {
    v13 = 4;
    v12 = v36;
    goto LABEL_13;
  }
  if (v37)
  {
    v13 = 5;
LABEL_13:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  v32 = &v24;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  for (i = 0; i != -24; i -= 12)
  {
    v15 = &v38[i];
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v44[i * 8]);
    v16 = *(_QWORD **)&v44[i * 8 - 8];
    if (&v42[i] == v16)
    {
      v16 = v15 + 15;
      v17 = 4;
    }
    else
    {
      if (!v16)
        goto LABEL_20;
      v17 = 5;
    }
    (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_20:
    if (SHIBYTE(v41[i + 2]) < 0)
      operator delete((void *)v15[12]);
  }
  v34[0] = &off_24C003018;
  v34[1] = &v29;
  v35 = v34;
  v18 = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v34, 1);
  v19 = v35;
  if (v35 == v34)
  {
    v20 = 4;
    v19 = v34;
LABEL_27:
    (*(void (**)(void))(*v19 + 8 * v20))();
  }
  else if (v35)
  {
    v20 = 5;
    goto LABEL_27;
  }
  v45[0] = (void **)&v29;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](v45);
  return v18;
}

void sub_206DA9058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void **a54)
{
  char *v54;
  char *v56;
  uint64_t v57;

  v56 = a25;
  if (a25 == v54)
  {
    v57 = 4;
    v56 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v57 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v56 + 8 * v57))();
LABEL_6:
  a54 = (void **)&a16;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&a54);
  _Unwind_Resume(a1);
}

void std::__function::__func<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C0030C8;
  return result;
}

void std::__function::__func<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C0030C8;
}

uint64_t std::__function::__func<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  ZinGOCLayer *v2;
  _BOOL4 v3;

  v2 = *(ZinGOCLayer **)(a2 + 8);
  v3 = *(_DWORD *)(*((_QWORD *)v2 + 8) + 8) == 2 && ZinGOCLayer::IsOnlyGlobalScale(v2);
  return v3 | 0x100u;
}

uint64_t std::__function::__func<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3,std::allocator<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3,std::allocator<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3>,MatchStatus ()(MatchParams const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C0031D0;
  return result;
}

void std::__function::__func<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3,std::allocator<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C0031D0;
}

uint64_t std::__function::__func<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3,std::allocator<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  _BOOL4 v7;
  _QWORD *v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = *(_DWORD *)(v3 + 8);
  if (v4 == 6)
  {
    v9 = v2 + 88;
    v8 = *(_QWORD **)(v2 + 88);
    if (*(_QWORD *)(v9 + 8) - (_QWORD)v8 == 16
      && *(_DWORD *)(v3 + 12) == 3
      && *(float *)(v3 + 16) == 1.0
      && *v8 != v8[1]
      && *(float *)(v3 + 24) == 0.0
      && !*(_BYTE *)(v3 + 28)
      && !*(_BYTE *)(v3 + 29))
    {
      v7 = 1;
      return v7 | 0x100u;
    }
    goto LABEL_9;
  }
  if (v4 != 5
    || (v6 = v2 + 88, v5 = *(_QWORD **)(v2 + 88), *(_QWORD *)(v6 + 8) - (_QWORD)v5 != 16)
    || *(_DWORD *)(v3 + 12) != 7)
  {
LABEL_9:
    v7 = 0;
    return v7 | 0x100u;
  }
  v7 = *v5 != v5[1];
  return v7 | 0x100u;
}

uint64_t std::__function::__func<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3,std::allocator<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3,std::allocator<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4,std::allocator<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4,std::allocator<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C003228;
  return result;
}

void std::__function::__func<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4,std::allocator<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C003228;
}

BOOL std::__function::__func<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4,std::allocator<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t SingleMatch;
  ZinIrOpLayer *v6;
  ZinIrOpLayer *v7;
  _BOOL8 result;
  uint64_t v9;
  _QWORD *v10;
  void *__p[2];
  char v12;

  v4 = *a4;
  std::string::basic_string[abi:ne180100]<0>(__p, "goc");
  SingleMatch = ZinPattern::GetSingleMatch(v4, (unsigned __int8 *)__p);
  v6 = (ZinIrOpLayer *)SingleMatch;
  if (v12 < 0)
  {
    operator delete(__p[0]);
    if (!v6)
      return 0;
  }
  else if (!SingleMatch)
  {
    return 0;
  }
  v7 = (ZinIrOpLayer *)**((_QWORD **)v6 + 14);
  if (*((_QWORD *)v7 + 12) - *((_QWORD *)v7 + 11) != 16)
    return 0;
  if (!ZinIrOpLayer::IsTensorFmtQuantized(v6) || (result = ZinIrOpLayer::IsTensorFmtQuantized(v7)))
  {
    v9 = **((_QWORD **)v6 + 11);
    v10 = (_QWORD *)*((_QWORD *)v7 + 11);
    return v9 == *v10 || v9 == v10[1];
  }
  return result;
}

void sub_206DA94B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4,std::allocator<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4,std::allocator<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,MatchStatus ()(MatchParams const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C003178;
  return result;
}

void std::__function::__func<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C003178;
}

uint64_t std::__function::__func<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  ZinGOCLayer *v2;
  _BOOL4 v3;

  v2 = *(ZinGOCLayer **)(a2 + 8);
  v3 = *(_DWORD *)(*((_QWORD *)v2 + 8) + 8) == 2 && ZinGOCLayer::IsOnlyPerCoutBias(v2);
  return v3 | 0x100u;
}

uint64_t std::__function::__func<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C003120;
  return result;
}

void std::__function::__func<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C003120;
}

uint64_t std::__function::__func<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  ZinGOCLayer *v2;
  _BOOL4 v3;

  v2 = *(ZinGOCLayer **)(a2 + 8);
  v3 = *(_DWORD *)(*((_QWORD *)v2 + 8) + 8) == 2 && ZinGOCLayer::IsSingularScaleAndPerCoutBias(v2);
  return v3 | 0x100u;
}

uint64_t std::__function::__func<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_5,std::allocator<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_5>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_5,std::allocator<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_5>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C003280;
  return result;
}

void std::__function::__func<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_5,std::allocator<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_5>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C003280;
}

BOOL std::__function::__func<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_5,std::allocator<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_5>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t SingleMatch;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  char v11;

  v4 = *a4;
  std::string::basic_string[abi:ne180100]<0>(__p, "singular_scale_goc");
  SingleMatch = ZinPattern::GetSingleMatch(v4, (unsigned __int8 *)__p);
  v6 = SingleMatch;
  if (v11 < 0)
  {
    operator delete(__p[0]);
    if (!v6)
      return 0;
  }
  else if (!SingleMatch)
  {
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "per_cout_bias_goc");
  v7 = ZinPattern::GetSingleMatch(v4, (unsigned __int8 *)__p);
  v8 = v7;
  if (v11 < 0)
  {
    operator delete(__p[0]);
    if (v8)
      return ZinIrVector::operator==(*(_QWORD *)(*(_QWORD *)(v6 + 136) + 576), *(_QWORD *)(*(_QWORD *)(v8 + 136) + 576));
  }
  else if (v7)
  {
    return ZinIrVector::operator==(*(_QWORD *)(*(_QWORD *)(v6 + 136) + 576), *(_QWORD *)(*(_QWORD *)(v8 + 136) + 576));
  }
  return 0;
}

void sub_206DA97C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_5,std::allocator<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_5>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_5,std::allocator<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_5>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_6,std::allocator<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_6>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_6,std::allocator<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_6>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0032D8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_6,std::allocator<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_6>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0032D8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_6,std::allocator<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_6>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, ZinIrOpLayerGraph **a2, uint64_t *a3)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;
  ZinIrOpLayerGraph *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t SingleMatch;
  std::string::size_type v10;
  ZinGOCLayer **v11;
  ZinGOCLayer *v12;
  ZinGOCLayer *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  BOOL v20;
  uint64_t v21;
  ZinGOCLayer *v22;
  uint64_t v23;
  uint64_t v24;
  int SingularScale;
  int v26;
  size_t v27;
  std::string *v28;
  const void *v29;
  std::string *v30;
  std::string *v31;
  __int128 v32;
  void **v33;
  std::string::size_type v34;
  std::string *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  ZinIrOpLayer *Activation;
  BOOL v42;
  char v43;
  size_t v44;
  std::string *v45;
  const void *v46;
  std::string *v47;
  __int128 v48;
  const std::string::value_type *v49;
  std::string::size_type v50;
  std::string *v51;
  __int128 v52;
  __n128 v53;
  uint64_t v54;
  ZinIrTensor *v55;
  uint64_t v56;
  ZinIrOpLayer *ConstScaleAndBiasGOC;
  BOOL v58;
  char v59;
  char v60;
  BOOL v61;
  char v62;
  _BOOL8 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  void *v73[2];
  void *v74;
  std::string v75;
  std::string v76;
  uint64_t v77;
  _OWORD v78[2];
  uint64_t v79;
  void *__p[2];
  std::string::size_type v81;
  _QWORD v82[3];
  char v83;
  float v84;
  __int128 v85;
  int64_t v86;
  std::string v87;
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  v3 = *(uint64_t ***)(a1 + 8);
  v5 = *v3;
  v4 = v3[1];
  if (*v3 == v4)
    return 0;
  v6 = *a2;
  v7 = *a3;
  v72 = v3[1];
  while (1)
  {
    if (!(*(unsigned int (**)(uint64_t, ZinIrOpLayerGraph *, uint64_t))(*(_QWORD *)*v5 + 8))(*v5, v6, v7))
      goto LABEL_92;
    v8 = *v5;
    std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
    SingleMatch = ZinPattern::GetSingleMatch(v8, (unsigned __int8 *)__p);
    v10 = SingleMatch;
    if (SHIBYTE(v81) < 0)
    {
      operator delete(__p[0]);
      if (!v10)
        goto LABEL_92;
    }
    else if (!SingleMatch)
    {
      goto LABEL_92;
    }
    v11 = *(ZinGOCLayer ***)(v10 + 88);
    v13 = *v11;
    v12 = v11[1];
    v15 = *((_QWORD *)*v11 + 14);
    v14 = *((_QWORD *)*v11 + 15);
    v17 = *((_QWORD *)v12 + 14);
    v16 = *((_QWORD *)v12 + 15);
    v84 = 0.0;
    v18 = *(_QWORD *)(v10 + 64);
    v19 = 1.0;
    if (*(_DWORD *)(v18 + 8) == 6)
      v19 = *(float *)(v18 + 20);
    if ((unint64_t)(v14 - v15) >= 9)
    {
      if (!ZinGOCLayer::GetOnlyGlobalScale(v12, &v84))
        goto LABEL_94;
      v20 = ZinIrOpLayerGraph::RemoveNode(v6, v12, 0);
      goto LABEL_27;
    }
    if ((unint64_t)(v16 - v17) < 9)
      break;
    if (!ZinGOCLayer::GetOnlyGlobalScale(v13, &v84))
      goto LABEL_94;
    v20 = ZinIrOpLayerGraph::RemoveNode(v6, v13, 0);
LABEL_27:
    if (!v20)
      goto LABEL_94;
    if (*(char *)(v10 + 47) >= 0)
      v27 = *(unsigned __int8 *)(v10 + 47);
    else
      v27 = *(_QWORD *)(v10 + 32);
    std::string::basic_string[abi:ne180100]((uint64_t)&v76, v27 + 1);
    if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = &v76;
    else
      v28 = (std::string *)v76.__r_.__value_.__r.__words[0];
    if (v27)
    {
      if (*(char *)(v10 + 47) >= 0)
        v29 = (const void *)(v10 + 24);
      else
        v29 = *(const void **)(v10 + 24);
      memmove(v28, v29, v27);
    }
    *(_WORD *)((char *)&v28->__r_.__value_.__l.__data_ + v27) = 95;
    v30 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v87, "leaky_relu_merge");
    v31 = std::string::append(v30, "_xfm", 4uLL);
    v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v74 = (void *)v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)v73 = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v74) >= 0)
      v33 = v73;
    else
      v33 = (void **)v73[0];
    if (SHIBYTE(v74) >= 0)
      v34 = HIBYTE(v74);
    else
      v34 = (std::string::size_type)v73[1];
    v35 = std::string::append(&v76, (const std::string::value_type *)v33, v34);
    v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v81 = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    ZinObjectNameFactory::ZinObjectNameFactory(v82, __p);
    if (SHIBYTE(v81) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v74) < 0)
      operator delete(v73[0]);
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v87.__r_.__value_.__l.__data_);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v76.__r_.__value_.__l.__data_);
    ZinIrActivationParams::ZinIrActivationParams((uint64_t)__p, 8);
    ZinIrActivationParams::SetLeakyReluParams((uint64_t)__p, 0.0, v84);
    v37 = *(_QWORD *)(v10 + 16);
    v38 = (*(uint64_t (**)(std::string::size_type, _QWORD, _QWORD))(*(_QWORD *)v10 + 32))(v10, 0, 0);
    v39 = *(_OWORD *)(v38 + 64);
    v78[0] = *(_OWORD *)(v38 + 48);
    v78[1] = v39;
    v79 = *(_QWORD *)(v38 + 80);
    v40 = (*(uint64_t (**)(std::string::size_type, _QWORD, _QWORD))(*(_QWORD *)v10 + 32))(v10, 0, 0);
    Activation = (ZinIrOpLayer *)ZinBuilder::CreateActivation(v37, (uint64_t)v82, (uint64_t)v78, *(_DWORD *)(v40 + 88), (uint64_t)__p);
    if (v19 == 1.0)
    {
      v76.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
      v77 = 0;
      *(_OWORD *)&v76.__r_.__value_.__r.__words[1] = 0uLL;
      v62 = ZinIrOpLayerGraph::ReplaceNode((uint64_t **)v6, (ZinIrOpLayer *)v10, Activation, (const Layer2TDMapper::SourceLayer *)&v76);
      v76.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
      if (v76.__r_.__value_.__l.__size_)
      {
        v76.__r_.__value_.__r.__words[2] = v76.__r_.__value_.__l.__size_;
        operator delete((void *)v76.__r_.__value_.__l.__size_);
      }
      v4 = v72;
    }
    else
    {
      v87.__r_.__value_.__r.__words[0] = v10;
      v73[0] = &v87;
      v73[1] = (void *)1;
      Layer2TDMapper::SourceLayer::SourceLayer(&v76, v73);
      v42 = ZinIrOpLayerGraph::AddNode((uint64_t **)v6, Activation, (ZinIrOpLayer ***)&v76);
      v76.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
      if (v76.__r_.__value_.__l.__size_)
      {
        v76.__r_.__value_.__r.__words[2] = v76.__r_.__value_.__l.__size_;
        operator delete((void *)v76.__r_.__value_.__l.__size_);
      }
      v43 = ZinIrOpLayerGraph::AddEdge((uint64_t)v6, (uint64_t)v13, (uint64_t)Activation, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      if (*(char *)(v10 + 47) >= 0)
        v44 = *(unsigned __int8 *)(v10 + 47);
      else
        v44 = *(_QWORD *)(v10 + 32);
      std::string::basic_string[abi:ne180100]((uint64_t)&v87, v44 + 1);
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v45 = &v87;
      else
        v45 = (std::string *)v87.__r_.__value_.__r.__words[0];
      if (v44)
      {
        if (*(char *)(v10 + 47) >= 0)
          v46 = (const void *)(v10 + 24);
        else
          v46 = *(const void **)(v10 + 24);
        memmove(v45, v46, v44);
      }
      *(_WORD *)((char *)&v45->__r_.__value_.__l.__data_ + v44) = 95;
      std::string::basic_string[abi:ne180100]<0>(&v75, "lrelu_goc");
      v47 = std::string::append(&v75, "_xfm", 4uLL);
      v4 = v72;
      v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
      v86 = v47->__r_.__value_.__r.__words[2];
      v85 = v48;
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      if (v86 >= 0)
        v49 = (const std::string::value_type *)&v85;
      else
        v49 = (const std::string::value_type *)v85;
      if (v86 >= 0)
        v50 = HIBYTE(v86);
      else
        v50 = *((_QWORD *)&v85 + 1);
      v51 = std::string::append(&v87, v49, v50);
      v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
      v74 = (void *)v51->__r_.__value_.__r.__words[2];
      *(_OWORD *)v73 = v52;
      v51->__r_.__value_.__l.__size_ = 0;
      v51->__r_.__value_.__r.__words[2] = 0;
      v51->__r_.__value_.__r.__words[0] = 0;
      v53 = ZinObjectNameFactory::ZinObjectNameFactory(&v76, v73);
      if (SHIBYTE(v74) < 0)
        operator delete(v73[0]);
      if (SHIBYTE(v86) < 0)
        operator delete((void *)v85);
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v75.__r_.__value_.__l.__data_);
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v87.__r_.__value_.__l.__data_);
      v54 = *(_QWORD *)(v10 + 16);
      v55 = (ZinIrTensor *)(*(uint64_t (**)(std::string::size_type, _QWORD, _QWORD, __n128))(*(_QWORD *)v10 + 32))(v10, 0, 0, v53);
      v56 = (*(uint64_t (**)(std::string::size_type, _QWORD, _QWORD))(*(_QWORD *)v10 + 32))(v10, 0, 0);
      ConstScaleAndBiasGOC = (ZinIrOpLayer *)ZinBuilder::CreateConstScaleAndBiasGOC(v54, (uint64_t)&v76, v55, *(_DWORD *)(v56 + 88), 0, 0, 1, v19, 0.0);
      *(_QWORD *)&v85 = v10;
      v87.__r_.__value_.__r.__words[0] = (std::string::size_type)&v85;
      v87.__r_.__value_.__l.__size_ = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(v73, &v87);
      v58 = ZinIrOpLayerGraph::AddNode((uint64_t **)v6, ConstScaleAndBiasGOC, (ZinIrOpLayer ***)v73);
      v73[0] = &unk_24C02BB18;
      if (v73[1])
      {
        v74 = v73[1];
        operator delete(v73[1]);
      }
      v59 = ZinIrOpLayerGraph::AddEdge((uint64_t)v6, (uint64_t)Activation, (uint64_t)ConstScaleAndBiasGOC, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      v60 = ZinIrOpLayerGraph::AddEdgesImplDst<std::vector<ZinIrOpLayer *>>((uint64_t)v6, (uint64_t)ConstScaleAndBiasGOC, (_QWORD *)(v10 + 112));
      v61 = ZinIrOpLayerGraph::RemoveNode(v6, (ZinIrOpLayer *)v10, 0);
      v76.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C01FBB0;
      if (SHIBYTE(v77) < 0)
        operator delete((void *)v76.__r_.__value_.__l.__size_);
      v62 = v42 & v43 & v58 & v59 & v60 & v61;
    }
    v82[0] = off_24C01FBB0;
    if (v83 < 0)
      operator delete((void *)v82[1]);
    if ((v62 & 1) == 0)
      goto LABEL_94;
LABEL_92:
    v5 += 2;
    if (v5 == v4)
      return 0;
  }
  v21 = *v5;
  std::string::basic_string[abi:ne180100]<0>(__p, "singular_scale_goc");
  v22 = (ZinGOCLayer *)ZinPattern::GetSingleMatch(v21, (unsigned __int8 *)__p);
  if (SHIBYTE(v81) < 0)
    operator delete(__p[0]);
  v23 = *v5;
  std::string::basic_string[abi:ne180100]<0>(__p, "per_cout_bias_goc");
  v24 = ZinPattern::GetSingleMatch(v23, (unsigned __int8 *)__p);
  if (SHIBYTE(v81) < 0)
    operator delete(__p[0]);
  if (v22 && v24)
  {
    LOBYTE(__p[0]) = 0;
    SingularScale = ZinGOCLayer::GetSingularScale(v22, &v84, (signed __int8 *)__p);
    v26 = LOBYTE(__p[0]) ? 0 : SingularScale;
    if (v26 == 1)
    {
      v20 = ZinIrOpLayerGraph::RemoveNode(v6, v22, 0);
      goto LABEL_27;
    }
  }
LABEL_94:
  v64 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v64)
    std::__function::__func<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_6,std::allocator<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_6>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(v64, v65, v66, v67, v68, v69, v70, v71);
  return 3;
}

void sub_206DA9FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_6,std::allocator<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_6>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_6,std::allocator<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_6>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C002F10;
  return result;
}

void std::__function::__func<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C002F10;
}

uint64_t std::__function::__func<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  ZinGOCLayer *v2;
  _BOOL4 v4;

  v2 = *(ZinGOCLayer **)(a2 + 8);
  v4 = *(_DWORD *)(*((_QWORD *)v2 + 8) + 8) == 2
    && ZinGOCLayer::IsOnlyGlobalScale(v2)
    && *(_QWORD *)(*(_QWORD *)(a2 + 8) + 120) - *(_QWORD *)(*(_QWORD *)(a2 + 8) + 112) == 8;
  return v4 | 0x100u;
}

uint64_t std::__function::__func<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C002F68;
  return result;
}

void std::__function::__func<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C002F68;
}

uint64_t std::__function::__func<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  ZinGOCLayer **v3;
  uint64_t v4;
  ZinGOCLayer *v5;
  ZinGOCLayer *v6;
  uint64_t v8;
  int v9;
  unsigned __int8 v10;

  v2 = *(_QWORD *)(a2 + 8);
  if ((*(_DWORD *)(*(_QWORD *)(v2 + 64) + 8) - 5) > 1
    || (v4 = v2 + 88, v3 = *(ZinGOCLayer ***)(v2 + 88), *(_QWORD *)(v4 + 8) - (_QWORD)v3 != 16)
    || (v5 = *v3, v6 = v3[1], *v3 == v6)
    || *(_DWORD *)(*((_QWORD *)v5 + 8) + 8) != 2
    || *(_DWORD *)(*((_QWORD *)v6 + 8) + 8) != 2
    || !ZinGOCLayer::IsOnlyGlobalScale(v5)
    || !ZinGOCLayer::IsOnlyGlobalScale(v6))
  {
LABEL_16:
    v10 = 0;
    return v10 | 0x100u;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 64);
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 == 6)
  {
    if (*(_DWORD *)(v8 + 12) == 3
      && *(float *)(v8 + 16) == 1.0
      && *(float *)(v8 + 20) == 1.0
      && *(float *)(v8 + 24) == 0.0
      && !*(_BYTE *)(v8 + 28))
    {
      v10 = *(_BYTE *)(v8 + 29) ^ 1;
      return v10 | 0x100u;
    }
    goto LABEL_16;
  }
  v10 = v9 != 5 || *(_DWORD *)(v8 + 12) == 7;
  return v10 | 0x100u;
}

uint64_t std::__function::__func<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C002FC0;
  return result;
}

void std::__function::__func<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C002FC0;
}

BOOL std::__function::__func<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t SingleMatch;
  uint64_t v6;
  ZinIrOpLayer *v7;
  ZinIrOpLayer **v8;
  ZinIrOpLayer *v9;
  ZinIrOpLayer *v10;
  _BOOL8 result;
  void *__p[2];
  char v13;

  v4 = *a4;
  std::string::basic_string[abi:ne180100]<0>(__p, "goc");
  SingleMatch = ZinPattern::GetSingleMatch(v4, (unsigned __int8 *)__p);
  v6 = SingleMatch;
  if (v13 < 0)
  {
    operator delete(__p[0]);
    if (!v6)
      return 0;
  }
  else if (!SingleMatch)
  {
    return 0;
  }
  v7 = **(ZinIrOpLayer ***)(v6 + 112);
  v8 = (ZinIrOpLayer **)*((_QWORD *)v7 + 11);
  if (*((_QWORD *)v7 + 12) - (_QWORD)v8 != 16)
    return 0;
  v9 = *v8;
  v10 = v8[1];
  if (**((_QWORD **)*v8 + 11) != **((_QWORD **)v10 + 11)
    || *((_QWORD *)v9 + 15) - *((_QWORD *)v9 + 14) != 8
    || *((_QWORD *)v10 + 15) - *((_QWORD *)v10 + 14) != 8)
  {
    return 0;
  }
  if (!ZinIrOpLayer::IsTensorFmtQuantized(v9) && !ZinIrOpLayer::IsTensorFmtQuantized(v10))
    return 1;
  result = ZinIrOpLayer::IsTensorFmtQuantized(v7);
  if (result)
    return 1;
  return result;
}

void sub_206DAA5A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3,std::allocator<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3,std::allocator<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C003018;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3,std::allocator<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C003018;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3,std::allocator<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t ***a2, uint64_t *a3)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t v7;
  unsigned __int8 *SingleMatch;
  _QWORD *v9;
  ZinIrOpLayer *v10;
  _QWORD *v11;
  uint64_t v12;
  _BOOL4 OnlyGlobalScale;
  char v14;
  float v15;
  float v16;
  size_t v17;
  std::string *v18;
  const void *v19;
  std::string *v20;
  std::string *v21;
  __int128 v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  __n128 v27;
  uint64_t v28;
  ZinIrTensor *v29;
  uint64_t v30;
  ZinIrOpLayer *ConstScaleAndBiasGOC;
  BOOL v32;
  size_t v33;
  void **v34;
  const void *v35;
  __n128 v36;
  uint64_t v37;
  _OWORD *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  ZinIrOpLayer *ScaledElementWise;
  _QWORD *v49;
  char v50;
  uint64_t *v51;
  char *v52;
  char *v53;
  char v54;
  char v55;
  char v56;
  BOOL v57;
  BOOL v58;
  BOOL v59;
  _BOOL8 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  ZinIrOpLayer *v69;
  BOOL v70;
  char v71;
  BOOL v72;
  uint64_t v73;
  std::string v74;
  char v75;
  _QWORD v76[3];
  char v77;
  float v78;
  float v79;
  void *v80;
  char *v81;
  uint64_t v82;
  void *__p[2];
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  _OWORD v96[2];
  void *v97[2];
  char v98;
  __int128 v99;
  _OWORD *v100;
  uint64_t v101;

  v101 = *MEMORY[0x24BDAC8D0];
  v3 = *(uint64_t ***)(a1 + 8);
  v4 = *v3;
  v5 = v3[1];
  if (*v3 == v5)
    return 0;
  v6 = *a2;
  v73 = *a3;
  while (1)
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t **, uint64_t))(*(_QWORD *)*v4 + 8))(*v4, v6, v73))
    {
      v7 = *v4;
      std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
      SingleMatch = (unsigned __int8 *)ZinPattern::GetSingleMatch(v7, (unsigned __int8 *)__p);
      if (SBYTE7(v84) < 0)
        operator delete(__p[0]);
      v9 = (_QWORD *)*((_QWORD *)SingleMatch + 11);
      v11 = (_QWORD *)*v9;
      v10 = (ZinIrOpLayer *)v9[1];
      v12 = **(_QWORD **)(*v9 + 88);
      v80 = 0;
      v81 = 0;
      v82 = 0;
      std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v80, *((const void **)SingleMatch + 14), *((_QWORD *)SingleMatch + 15), (uint64_t)(*((_QWORD *)SingleMatch + 15) - *((_QWORD *)SingleMatch + 14)) >> 3);
      v78 = 1.0;
      v79 = 1.0;
      OnlyGlobalScale = ZinGOCLayer::GetOnlyGlobalScale((ZinGOCLayer *)v11, &v79);
      if (OnlyGlobalScale == ZinGOCLayer::GetOnlyGlobalScale(v10, &v78))
      {
        if (v79 <= v78)
          v15 = v78;
        else
          v15 = v79;
        if (v79 >= v78)
          v16 = v78;
        else
          v16 = v79;
        if (*((char *)v11 + 47) >= 0)
          v17 = *((unsigned __int8 *)v11 + 47);
        else
          v17 = v11[4];
        std::string::basic_string[abi:ne180100]((uint64_t)&v74, v17 + 1);
        if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v18 = &v74;
        else
          v18 = (std::string *)v74.__r_.__value_.__r.__words[0];
        if (v17)
        {
          if (*((char *)v11 + 47) >= 0)
            v19 = v11 + 3;
          else
            v19 = (const void *)v11[3];
          memmove(v18, v19, v17);
        }
        *(_WORD *)((char *)&v18->__r_.__value_.__l.__data_ + v17) = 95;
        v20 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v97, "gocmax");
        v21 = std::string::append(v20, "_xfm", 4uLL);
        v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v100 = (_OWORD *)v21->__r_.__value_.__r.__words[2];
        v99 = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v100) >= 0)
          v23 = (const std::string::value_type *)&v99;
        else
          v23 = (const std::string::value_type *)v99;
        if (SHIBYTE(v100) >= 0)
          v24 = HIBYTE(v100);
        else
          v24 = *((_QWORD *)&v99 + 1);
        v25 = std::string::append(&v74, v23, v24);
        v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        *(_QWORD *)&v84 = *((_QWORD *)&v25->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        v27 = ZinObjectNameFactory::ZinObjectNameFactory(v76, __p);
        if (SBYTE7(v84) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v100) < 0)
          operator delete((void *)v99);
        if (v98 < 0)
          operator delete(v97[0]);
        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v74.__r_.__value_.__l.__data_);
        v28 = *((_QWORD *)SingleMatch + 2);
        v29 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, __n128))(*v11 + 32))(v11, 0, 0, v27);
        v30 = (*(uint64_t (**)(unsigned __int8 *, _QWORD, _QWORD))(*(_QWORD *)SingleMatch + 32))(SingleMatch, 0, 0);
        ConstScaleAndBiasGOC = (ZinIrOpLayer *)ZinBuilder::CreateConstScaleAndBiasGOC(v28, (uint64_t)v76, v29, *(_DWORD *)(v30 + 88), 0, 0, 1, v16 / v15, 0.0);
        *(_QWORD *)&v99 = SingleMatch;
        v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v99;
        v74.__r_.__value_.__l.__size_ = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(__p, &v74);
        v32 = ZinIrOpLayerGraph::AddNode(v6, ConstScaleAndBiasGOC, (ZinIrOpLayer ***)__p);
        __p[0] = &unk_24C02BB18;
        if (__p[1])
        {
          *(void **)&v84 = __p[1];
          operator delete(__p[1]);
        }
        v72 = v32;
        v71 = ZinIrOpLayerGraph::AddEdge((uint64_t)v6, v12, (uint64_t)ConstScaleAndBiasGOC, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        if ((SingleMatch[47] & 0x80u) == 0)
          v33 = SingleMatch[47];
        else
          v33 = *((_QWORD *)SingleMatch + 4);
        std::string::basic_string[abi:ne180100]((uint64_t)__p, v33 + 7);
        if ((SBYTE7(v84) & 0x80u) == 0)
          v34 = __p;
        else
          v34 = (void **)__p[0];
        if (v33)
        {
          if ((SingleMatch[47] & 0x80u) == 0)
            v35 = SingleMatch + 24;
          else
            v35 = (const void *)*((_QWORD *)SingleMatch + 3);
          memmove(v34, v35, v33);
        }
        strcpy((char *)v34 + v33, "_EW_MAX");
        v36 = ZinObjectNameFactory::ZinObjectNameFactory(&v74, __p);
        if (SBYTE7(v84) < 0)
          operator delete(__p[0]);
        v37 = *((_QWORD *)SingleMatch + 2);
        (*(void (**)(void **__return_ptr, uint64_t, _QWORD, _QWORD, __n128))(*(_QWORD *)v12 + 80))(__p, v12, 0, 0, v36);
        (*(void (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)ConstScaleAndBiasGOC + 80))(ConstScaleAndBiasGOC, 0, 0);
        v38 = operator new(0xF0uLL);
        v100 = v38 + 15;
        v39 = v96[0];
        v38[12] = v95;
        v38[13] = v39;
        *(_OWORD *)((char *)v38 + 220) = *(_OWORD *)((char *)v96 + 12);
        v40 = v92;
        v38[8] = v91;
        v38[9] = v40;
        v41 = v94;
        v38[10] = v93;
        v38[11] = v41;
        v42 = v88;
        v38[4] = v87;
        v38[5] = v42;
        v43 = v90;
        v38[6] = v89;
        v38[7] = v43;
        v44 = v84;
        *v38 = *(_OWORD *)__p;
        v38[1] = v44;
        v45 = v86;
        v38[2] = v85;
        v38[3] = v45;
        *(_QWORD *)&v99 = v38;
        *((_QWORD *)&v99 + 1) = v38 + 15;
        v46 = (*(uint64_t (**)(unsigned __int8 *, _QWORD, _QWORD))(*(_QWORD *)SingleMatch + 32))(SingleMatch, 0, 0);
        v47 = (*(uint64_t (**)(unsigned __int8 *, _QWORD, _QWORD))(*(_QWORD *)SingleMatch + 32))(SingleMatch, 0, 0);
        ScaledElementWise = (ZinIrOpLayer *)ZinBuilder::CreateScaledElementWise(v37, (uint64_t)&v74, 1.0, v15, 0.0, (uint64_t)&v99, (__int128 *)(v46 + 48), *(_DWORD *)(v47 + 88), 3, 0, 0);
        if ((_QWORD)v99)
        {
          *((_QWORD *)&v99 + 1) = v99;
          operator delete((void *)v99);
        }
        v97[0] = SingleMatch;
        *(_QWORD *)&v99 = v97;
        *((_QWORD *)&v99 + 1) = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(__p, &v99);
        v70 = ZinIrOpLayerGraph::AddNode(v6, ScaledElementWise, (ZinIrOpLayer ***)__p);
        __p[0] = &unk_24C02BB18;
        if (__p[1])
        {
          *(void **)&v84 = __p[1];
          operator delete(__p[1]);
        }
        v49 = operator new(0x10uLL);
        __p[1] = v49 + 2;
        *(_QWORD *)&v84 = v49 + 2;
        *v49 = v12;
        v49[1] = ConstScaleAndBiasGOC;
        __p[0] = v49;
        v50 = ZinIrOpLayerGraph::AddEdgesImplSrc<std::vector<ZinIrOpLayer *>>((uint64_t)v6, (uint64_t *)__p, (uint64_t)ScaledElementWise);
        v51 = v5;
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        v52 = v81;
        if (v80 == v81)
        {
          v55 = 1;
        }
        else
        {
          v69 = v10;
          v53 = (char *)v80 + 8;
          do
          {
            v54 = ZinIrOpLayerGraph::AddEdge((uint64_t)v6, (uint64_t)ScaledElementWise, *((_QWORD *)v53 - 1), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
            v55 = v54;
            if (v53 == v52)
              v56 = 0;
            else
              v56 = v54;
            v53 += 8;
          }
          while ((v56 & 1) != 0);
          v10 = v69;
        }
        v57 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)v6, (ZinIrOpLayer *)v11, 0);
        v5 = v51;
        v58 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)v6, v10, 0);
        v59 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)v6, (ZinIrOpLayer *)SingleMatch, 0);
        v74.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C01FBB0;
        if (v75 < 0)
          operator delete((void *)v74.__r_.__value_.__l.__size_);
        v76[0] = off_24C01FBB0;
        if (v77 < 0)
          operator delete((void *)v76[1]);
        v14 = v72 & v71 & v70 & v50 & v58 & v59 & v55 & v57;
      }
      else
      {
        v14 = 0;
      }
      if (v80)
      {
        v81 = (char *)v80;
        operator delete(v80);
      }
      if ((v14 & 1) == 0)
        break;
    }
    v4 += 2;
    if (v4 == v5)
      return 0;
  }
  v61 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v61)
    std::__function::__func<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3,std::allocator<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(v61, v62, v63, v64, v65, v66, v67, v68);
  return 3;
}

void sub_206DAAD4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42)
{
  if (__p)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a18);
  if (a34 < 0)
    operator delete(a29);
  if (a37)
    operator delete(a37);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3,std::allocator<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3,std::allocator<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_6,std::allocator<ZinIrOpt::LeakyReluDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_6>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Unable to fuse leaky relu\n", a5, a6, a7, a8, 0);
}

void std::__function::__func<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3,std::allocator<ZinIrOpt::GocGocMaxtoGocMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Unable to fuse GOC, GOC and EW_MAX\n", a5, a6, a7, a8, 0);
}

uint64_t ZinCodegen::SetSecondarySourceDMA<19u>(ZinIrTensor *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, char a8, char a9, char a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v16;
  uint64_t BarIdFromDynamicOffsetInfoOrSection;
  int v19;
  unint64_t v20;
  std::string *v21;
  __int128 v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BOOL8 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  _BOOL8 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int IsCompressed;
  uint64_t v82;
  uint64_t v83;
  uint64_t TileSrc;
  _BOOL8 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v95;
  __int128 __p;
  uint64_t v97;
  int v98;
  uint64_t v99;

  v99 = a2;
  v11 = *(_QWORD *)(a3 + 96 * a4 + 752);
  if (*(_DWORD *)(v11 + 156) != 1)
  {
    v23 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v23)
      ZinCodegen::SetResultDMA<7u>(v23, v24, v25, v26, v27, v28, v29, v30);
    return 0;
  }
  v16 = a2;
  BarIdFromDynamicOffsetInfoOrSection = ZinIrSymbol::GetBarIdFromDynamicOffsetInfoOrSection((ZinIrSymbol *)v11);
  v19 = *(_DWORD *)(v11 + 208);
  ZinAneTd<19u>::SetL2Src2DmaFormat(v16, v19);
  if (ZinIrSymbol::GetMemType((ZinIrSymbol *)v11)
    && ZinIrSymbol::GetMemType((ZinIrSymbol *)v11) != 1)
  {
    v39 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v39)
      ZinCodegen::SetPrimarySourceDMA<7u>(v39, v40, v41, v42, v43, v44, v45, v46);
    return 0;
  }
  if (*(_DWORD *)(v11 + 156) != 1)
  {
    v31 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v31)
      ZinCodegen::SetPrimarySourceDMA<7u>(v31, v32, v33, v34, v35, v36, v37, v38);
    return 0;
  }
  if (!ZinIrSection::HasValidBarId(*(ZinIrSection **)(v11 + 8)))
  {
    v47 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v47)
      ZinCodegen::SetUniversalCompressionForSecondarySource<7u>(v47, v48, v49, v50, v51, v52, v53, v54);
    return 0;
  }
  ZinAneRelocInfo::ZinAneRelocInfo(&v95, v11 + 160, 4938, BarIdFromDynamicOffsetInfoOrSection, 1, 1, 0, 0);
  v20 = *(_QWORD *)(v16 + 1440);
  if (v20 >= *(_QWORD *)(v16 + 1448))
  {
    v55 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>((uint64_t *)(v16 + 1432), (uint64_t)&v95);
  }
  else
  {
    *(_WORD *)v20 = v95;
    v21 = (std::string *)(v20 + 8);
    if (SHIBYTE(v97) < 0)
    {
      std::string::__init_copy_ctor_external(v21, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    }
    else
    {
      v22 = __p;
      *(_QWORD *)(v20 + 24) = v97;
      *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
    }
    *(_DWORD *)(v20 + 32) = v98;
    v55 = v20 + 40;
    *(_QWORD *)(v16 + 1440) = v20 + 40;
  }
  *(_QWORD *)(v16 + 1440) = v55;
  if (SHIBYTE(v97) < 0)
    operator delete((void *)__p);
  *(_DWORD *)(v16 + 620) = *(_DWORD *)(v16 + 620) & 0xFFFFFF0F | (16
                                                                * (ZinIrCacheHintTable::GetCacheHintRegisterValue(a5, 1, *(_DWORD *)(a3 + 1420)) & 0xF));
  *(_DWORD *)(v16 + 628) = *(_DWORD *)(v16 + 628) & 0xFFFFFFF0 | ZinIrCacheHintTable::GetCacheHintRegisterValue(a5, 2, *(_DWORD *)(a3 + 1424)) & 0xF;
  *(_DWORD *)(v16 + 628) = *(_DWORD *)(v16 + 628) & 0xFFFFFF0F | (16
                                                                * (ZinIrCacheHintTable::GetCacheHintRegisterValue(a5, 3, *(_DWORD *)(a3 + 1428)) & 0xF));
  switch(v19)
  {
    case 1:
      v56 = *(_DWORD *)(v16 + 724) & 0xFFFFCFFC | 0x1000;
      goto LABEL_40;
    case 2:
      v56 = *(_DWORD *)(v16 + 724) & 0xFFFFCFFC;
      goto LABEL_40;
    case 3:
      v57 = *(_DWORD *)(v16 + 724) & 0xFFFFCFCC;
      v58 = 8241;
      goto LABEL_39;
    case 4:
      v56 = *(_DWORD *)(v16 + 724) & 0xFFFFCECC | 1;
      goto LABEL_40;
    case 5:
      v57 = *(_DWORD *)(v16 + 724) & 0xFFFFCECC;
      v58 = 257;
      goto LABEL_39;
    case 6:
      v57 = *(_DWORD *)(v16 + 724) & 0xFFFFCECC;
      v58 = 17;
      goto LABEL_39;
    case 7:
      v57 = *(_DWORD *)(v16 + 724) & 0xFFFFCECC;
      v58 = 273;
      goto LABEL_39;
    case 8:
      v59 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v59)
        ZinCodegen::SetSecondarySourceDMA<7u>(v59, v60, v61, v62, v63, v64, v65, v66);
      return 0;
    case 9:
      v67 = *(_DWORD *)(v16 + 724) & 0xFFFFFECC | 0x131;
      *(_DWORD *)(v16 + 724) = v67;
      v68 = v67 & 0xFFFFCFFF;
      if (!a11 && !a10)
        goto LABEL_37;
      v56 = v68 | 0x1000;
      goto LABEL_40;
    case 10:
      v69 = *(_DWORD *)(v16 + 724) & 0xFFFFFECC | 0x131;
      *(_DWORD *)(v16 + 724) = v69;
      v68 = v69 & 0xFFFFCFFF;
      if (a11 || a10)
      {
        *(_DWORD *)(v16 + 724) = v68;
      }
      else
      {
LABEL_37:
        v56 = v68 | 0x2000;
LABEL_40:
        *(_DWORD *)(v16 + 724) = v56;
      }
      v70 = ZinTensorDescriptorDmaInterleave(v11 + 208);
      *(_DWORD *)(v16 + 724) = *(_DWORD *)(v16 + 724) & 0xF0FFFFFF | ((v70 & 0xF) << 24);
      if (!CheckRegValueRange(v70, (unsigned int *)(*(_QWORD *)(v16 + 1464) + 632)))
        return 0;
      v71 = *(_QWORD *)(a3 + 840);
      v72 = *(_QWORD *)(a3 + 832);
      v73 = *(_QWORD *)(a3 + 824);
      v74 = *(_QWORD *)(a3 + 816) / a6;
      *(_DWORD *)(v16 + 664) = *(_DWORD *)(v16 + 664) & 0x3F | ((_DWORD)v74 << 6);
      if (!CheckRegValueRange(v74, (unsigned int *)(*(_QWORD *)(v16 + 1464) + 480)))
        return 0;
      *(_DWORD *)(v16 + 668) = *(_DWORD *)(v16 + 668) & 0x3F | ((v73 / a6) << 6);
      if (!CheckRegValueRange(v73 / a6, (unsigned int *)(*(_QWORD *)(v16 + 1464) + 488)))
        return 0;
      *(_DWORD *)(v16 + 672) = *(_DWORD *)(v16 + 672) & 0x3F | ((v72 / a6) << 6);
      if (!CheckRegValueRange(v72 / a6, (unsigned int *)(*(_QWORD *)(v16 + 1464) + 496)))
        return 0;
      *(_DWORD *)(v16 + 676) = *(_DWORD *)(v16 + 676) & 0x3F | ((v71 / a6) << 6);
      if (!CheckRegValueRange(v71 / a6, (unsigned int *)(*(_QWORD *)(v16 + 1464) + 504)))
        return 0;
      v75 = *(_QWORD *)(a3 + 848);
      ZinCodegen::SetDmaWrap<19u>((uint64_t *)v16, v75);
      ZinIrSymbol::GetWrapInfo(v75, &v95);
      if (BYTE8(__p))
        ZinAneTd<19u>::SetTileDmaSrc2WrapCfg(v16, v95);
      if ((a8 & 1) != 0)
        goto LABEL_52;
      *(_DWORD *)(v16 + 620) |= 1u;
      if ((a9 & 1) != 0)
        goto LABEL_52;
      *(_DWORD *)(v16 + 964) = *(_DWORD *)(v16 + 964) & 0xFFFFF0FF | ((v70 & 0xF) << 8);
      if (!CheckRegValueRange(v70, (unsigned int *)(*(_QWORD *)(v16 + 1464) + 632)))
        return 0;
      ZinAneTd<19u>::SetTileDmaSrc2CropOffset(v16, *(_DWORD *)(v11 + 240), *(_DWORD *)(v11 + 232));
LABEL_52:
      if (!ZinMirDmaConfig::DramAccess::IsCompressed((ZinMirDmaConfig::DramAccess *)(a3 + 808)))
        goto LABEL_55;
      v76 = (char *)ZinIrTensor::GetRootTensor(a1) + 48;
      v77 = *(_DWORD *)(a3 + 888);
      v78 = *(_DWORD *)(a3 + 892);
      v79 = *(_DWORD *)(v11 + 232);
      v80 = *(_DWORD *)(a3 + 896);
      IsCompressed = ZinMirDmaConfig::DramAccess::IsCompressed((ZinMirDmaConfig::DramAccess *)(a3 + 808));
      if (!ZinCodegen::SetUniversalCompressionForSecondarySource<19u>((_QWORD *)a3, (uint64_t)v76, v77, v78, &v99, v80, IsCompressed, v79, a7))
      {
        v85 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v85)
          ZinCodegen::SetSecondarySourceDMA<19u>(v85, v86, v87, v88, v89, v90, v91, v92);
        return 0;
      }
      ZinAneTd<19u>::SetL2Src2CfgForCompression(v99, v78);
      ZinAneTd<19u>::SetL2Src2OffsetYlsbsFromCropOffsetY(v99);
      v16 = v99;
LABEL_55:
      v82 = a3 + 120;
      v83 = 1;
      TileSrc = ZinMirL2Config::GetTileSrc(v82, 1);
      ZinAneTd<19u>::SetTileDmaSrc2FIFOMode(v16, *(unsigned __int8 *)(TileSrc + 56));
      break;
    case 11:
      v57 = *(_DWORD *)(v16 + 724) & 0xFFFFFFCF;
      v58 = 12547;
LABEL_39:
      v56 = v57 | v58;
      goto LABEL_40;
    default:
      return 0;
  }
  return v83;
}

void sub_206DAB534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v18 + 1440) = v17;
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinCodegen::SetSecondarySourceDMA<19u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unable to set UC registers properly\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrDynamicSliceInfo::ZinIrDynamicSliceInfo(ZinIrDynamicSliceInfo *this, const ZinIrDynamicSliceUnitInfo *a2, const ZinTensorDimensions *a3)
{
  _QWORD *v6;
  __int128 v7;
  __int128 v8;

  v6 = (_QWORD *)ZinIrOpLayerOpCode::ZinIrOpLayerOpCode((uint64_t)this, 57);
  *v6 = &unk_24C020688;
  ZinIrTextureUnitInfo::ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)(v6 + 2), a2);
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 2) = &off_24C023500;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  std::vector<LayerAndUsageInfo>::__init_with_size[abi:ne180100]<LayerAndUsageInfo*,LayerAndUsageInfo*>((_QWORD *)this + 22, *((const void **)a2 + 20), *((_QWORD *)a2 + 21), (uint64_t)(*((_QWORD *)a2 + 21) - *((_QWORD *)a2 + 20)) >> 4);
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  std::vector<LayerAndUsageInfo>::__init_with_size[abi:ne180100]<LayerAndUsageInfo*,LayerAndUsageInfo*>((_QWORD *)this + 25, *((const void **)a2 + 23), *((_QWORD *)a2 + 24), (uint64_t)(*((_QWORD *)a2 + 24) - *((_QWORD *)a2 + 23)) >> 4);
  v7 = *(_OWORD *)a3;
  v8 = *((_OWORD *)a3 + 1);
  *((_QWORD *)this + 32) = *((_QWORD *)a3 + 4);
  *((_OWORD *)this + 14) = v7;
  *((_OWORD *)this + 15) = v8;
}

void sub_206DAB64C(_Unwind_Exception *a1)
{
  ZinIrHalH13g *v1;
  ZinIrTextureUnitInfo *v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *((_QWORD *)v1 + 23) = v5;
    operator delete(v5);
  }
  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo(v2);
  ZinIrHalH13g::~ZinIrHalH13g(v1);
  _Unwind_Resume(a1);
}

_QWORD *ZinSliceLayer::ZinSliceLayer(_QWORD *a1, uint64_t *a2, uint64_t *a3, __int128 *a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;

  v5 = *a2;
  *a2 = 0;
  v6 = a3[1];
  v14 = *a3;
  v15 = (std::__shared_weak_count *)v6;
  v16 = v5;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  ZinTextureLayer::ZinTextureLayer(a1, &v16, &v14, a4);
  v9 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v16;
  v16 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  *a1 = &off_24C0183D0;
  return a1;
}

void sub_206DAB74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  v13 = a12;
  a12 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

BOOL ZinSliceLayer::LowerSliceWithNormalizedNDC(ZinIrOpLayer ***this, ZinIrOpLayer *a2, uint64_t **a3)
{
  ZinSliceLayer *v3;
  ZinIrOpLayer *v4;
  size_t v5;
  void **v6;
  const void *v7;
  __n128 v8;
  uint64_t v9;
  int *v10;
  int *v11;
  int *v12;
  int *v13;
  unint64_t v14;
  ZinIrTensor *v15;
  uint64_t **v16;
  unint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *Transpose;
  _BOOL4 v66;
  int v67;
  ZinIrTensor *v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  int *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  BOOL v78;
  int v79;
  float v80;
  uint64_t v81;
  ZinSliceLayer *v82;
  _OWORD *v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  ZinIrOpLayer *SliceLayer;
  _BOOL4 v93;
  _QWORD *v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  unint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t *v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  char *v121;
  uint64_t *v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  uint64_t *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _BOOL4 v139;
  int v140;
  _DWORD *i;
  _DWORD *j;
  uint64_t v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  float v153;
  uint64_t v154;
  _OWORD *v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;
  ZinIrOpLayer *v164;
  _BOOL4 v165;
  _QWORD *v166;
  int v167;
  int v168;
  const char *v170;
  const char *v171;
  unint64_t v172;
  uint64_t v173;
  int v174;
  _OWORD v177[2];
  int v178;
  void *v179[2];
  __int128 v180;
  uint64_t v181;
  void **v182;
  uint64_t v183;
  uint64_t v184;
  ZinIrOpLayer **v185;
  void *v186;
  void *v187;
  uint64_t v188;
  int v189;
  __int128 v190;
  __int128 v191;
  uint64_t v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  _BYTE v196[26];
  void *v197[2];
  __int128 v198;
  __int128 v199;
  unsigned int v200;
  unsigned int v201;
  uint64_t *v202;
  _QWORD *v203;
  unint64_t v204;
  _QWORD v205[3];
  char v206;
  ZinSliceLayer *v207;
  void *__p[2];
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  void *v213[2];
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _OWORD v221[2];
  ZinSliceLayer *v222;
  uint64_t v223;
  _OWORD *v224;
  uint64_t v225;

  v3 = (ZinSliceLayer *)this;
  v225 = *MEMORY[0x24BDAC8D0];
  v4 = *this[11];
  if (*((char *)v4 + 47) >= 0)
    v5 = *((unsigned __int8 *)v4 + 47);
  else
    v5 = *((_QWORD *)v4 + 4);
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v5 + 16);
  if ((SBYTE7(v209) & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if (v5)
  {
    if (*((char *)v4 + 47) >= 0)
      v7 = (char *)v4 + 24;
    else
      v7 = (const void *)*((_QWORD *)v4 + 3);
    memmove(v6, v7, v5);
  }
  strcpy((char *)v6 + v5, "_slice_decompose");
  v8 = ZinObjectNameFactory::ZinObjectNameFactory(v205, __p);
  if (SBYTE7(v209) < 0)
    operator delete(__p[0]);
  v9 = *((_QWORD *)v3 + 8);
  v203 = 0;
  v204 = 0;
  v202 = (uint64_t *)&v203;
  v11 = *(int **)(v9 + 96);
  v10 = *(int **)(v9 + 104);
  while (v11 != v10)
  {
    if (v11[2])
    {
      if ((*v11 - 3) >= 2)
        std::__tree<ZinIrDimension>::__emplace_unique_key_args<ZinIrDimension,ZinIrDimension>(&v202, v11, v11);
    }
    v11 += 3;
  }
  v13 = *(int **)(v9 + 120);
  v12 = *(int **)(v9 + 128);
  while (v13 != v12)
  {
    if ((v13[1] - 5) <= 1 && (*v13 - 3) >= 2)
      std::__tree<ZinIrDimension>::__emplace_unique_key_args<ZinIrDimension,ZinIrDimension>(&v202, v13, v13);
    v13 += 2;
  }
  v14 = v204;
  if (v204)
  {
    v15 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD, __n128))(*(_QWORD *)a2 + 32))(a2, 0, 0, v8);
    v16 = a3;
    if (ZinIrTensor::SetAllocationHint(v15, 2, 1))
    {
      v171 = (char *)a2 + 24;
      if (*((char *)a2 + 47) < 0)
        v171 = *(const char **)v171;
      ZinAssertImpl("ANEC internal error: allocation hint set fails on %s", v171);
    }
    v172 = v14;
    v173 = v9 + 16;
    v17 = v204;
    if (v204)
    {
      v18 = 1;
      do
      {
        v19 = v202;
        v20 = *((unsigned int *)v202 + 7);
        v201 = *((_DWORD *)v202 + 7);
        if (v17 == 1)
        {
          v21 = v202;
        }
        else
        {
          v22 = (uint64_t *)v202[1];
          if (v22)
          {
            do
            {
              v21 = v22;
              v22 = (uint64_t *)*v22;
            }
            while (v22);
          }
          else
          {
            do
            {
              v21 = (uint64_t *)v19[2];
              v78 = *v21 == (_QWORD)v19;
              v19 = v21;
            }
            while (!v78);
          }
        }
        v200 = *((_DWORD *)v21 + 7);
        v179[0] = 0;
        v179[1] = 0;
        *(_QWORD *)&v180 = 0;
        v24 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v180, 1uLL);
        *v24 = v20 | 0x300000000;
        v25 = (char *)(v24 + 1);
        v27 = (char *)v179[0];
        v26 = (char *)v179[1];
        v28 = (char *)v24;
        if (v179[1] != v179[0])
        {
          do
          {
            v29 = *((_QWORD *)v26 - 1);
            v26 -= 8;
            *((_QWORD *)v28 - 1) = v29;
            v28 -= 8;
          }
          while (v26 != v27);
          v26 = (char *)v179[0];
        }
        v174 = v18;
        v30 = (char *)&v24[v23];
        v179[0] = v28;
        v179[1] = v24 + 1;
        *(_QWORD *)&v180 = v30;
        if (v26)
        {
          operator delete(v26);
          v30 = (char *)v180;
        }
        v179[1] = v24 + 1;
        v31 = v201;
        if (v25 >= v30)
        {
          v33 = (v25 - (char *)v179[0]) >> 3;
          if ((unint64_t)(v33 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v34 = v30 - (char *)v179[0];
          v35 = v34 >> 2;
          if (v34 >> 2 <= (unint64_t)(v33 + 1))
            v35 = v33 + 1;
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
            v36 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v36 = v35;
          if (v36)
            v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v180, v36);
          else
            v37 = 0;
          v38 = (uint64_t *)&v37[8 * v33];
          *v38 = (v31 << 32) | 3;
          v32 = v38 + 1;
          v40 = (char *)v179[0];
          v39 = (char *)v179[1];
          if (v179[1] == v179[0])
          {
            v16 = a3;
          }
          else
          {
            v16 = a3;
            do
            {
              v41 = *((_QWORD *)v39 - 1);
              v39 -= 8;
              *--v38 = v41;
            }
            while (v39 != v40);
            v39 = (char *)v179[0];
          }
          v179[0] = v38;
          v179[1] = v32;
          *(_QWORD *)&v180 = &v37[8 * v36];
          if (v39)
            operator delete(v39);
        }
        else
        {
          v24[1] = ((unint64_t)v201 << 32) | 3;
          v32 = v24 + 2;
        }
        v179[1] = v32;
        if (v204 >= 2)
        {
          v42 = v200;
          if ((unint64_t)v32 >= (unint64_t)v180)
          {
            v44 = ((char *)v32 - (char *)v179[0]) >> 3;
            if ((unint64_t)(v44 + 1) >> 61)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v45 = (uint64_t)(v180 - (unint64_t)v179[0]) >> 2;
            if (v45 <= v44 + 1)
              v45 = v44 + 1;
            if ((unint64_t)v180 - (unint64_t)v179[0] >= 0x7FFFFFFFFFFFFFF8)
              v46 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v46 = v45;
            if (v46)
              v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v180, v46);
            else
              v47 = 0;
            v48 = (uint64_t *)&v47[8 * v44];
            *v48 = v42 | 0x400000000;
            v43 = (unint64_t *)(v48 + 1);
            v50 = (char *)v179[0];
            v49 = (char *)v179[1];
            if (v179[1] == v179[0])
            {
              v16 = a3;
            }
            else
            {
              v16 = a3;
              do
              {
                v51 = *((_QWORD *)v49 - 1);
                v49 -= 8;
                *--v48 = v51;
              }
              while (v49 != v50);
              v49 = (char *)v179[0];
            }
            v179[0] = v48;
            v179[1] = v43;
            *(_QWORD *)&v180 = &v47[8 * v46];
            if (v49)
              operator delete(v49);
          }
          else
          {
            *v32 = v200 | 0x400000000;
            v43 = (unint64_t *)(v32 + 1);
          }
          v179[1] = v43;
          v52 = v200;
          if ((unint64_t)v43 >= (unint64_t)v180)
          {
            v54 = ((char *)v43 - (char *)v179[0]) >> 3;
            if ((unint64_t)(v54 + 1) >> 61)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v55 = (uint64_t)(v180 - (unint64_t)v179[0]) >> 2;
            if (v55 <= v54 + 1)
              v55 = v54 + 1;
            if ((unint64_t)v180 - (unint64_t)v179[0] >= 0x7FFFFFFFFFFFFFF8)
              v56 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v56 = v55;
            if (v56)
              v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v180, v56);
            else
              v57 = 0;
            v58 = (uint64_t *)&v57[8 * v54];
            *v58 = (v52 << 32) | 4;
            v53 = v58 + 1;
            v60 = (char *)v179[0];
            v59 = (char *)v179[1];
            if (v179[1] == v179[0])
            {
              v16 = a3;
            }
            else
            {
              v16 = a3;
              do
              {
                v61 = *((_QWORD *)v59 - 1);
                v59 -= 8;
                *--v58 = v61;
              }
              while (v59 != v60);
              v59 = (char *)v179[0];
            }
            v179[0] = v58;
            v179[1] = v53;
            *(_QWORD *)&v180 = &v57[8 * v56];
            if (v59)
              operator delete(v59);
          }
          else
          {
            *v43 = ((unint64_t)v200 << 32) | 4;
            v53 = v43 + 1;
          }
          v179[1] = v53;
        }
        ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)__p, (uint64_t)v179, *(_DWORD *)(v9 + 84));
        v62 = *((_QWORD *)v3 + 2);
        v63 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0, 0);
        v64 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0, 0);
        Transpose = (char *)ZinBuilder::CreateTranspose(v62, (uint64_t)v205, v63 + 48, *(_DWORD *)(v64 + 88), (uint64_t)v213);
        v222 = v3;
        v182 = (void **)&v222;
        v183 = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(&v185, &v182);
        v66 = ZinIrOpLayerGraph::AddNode(v16, (ZinIrOpLayer *)Transpose, &v185);
        v185 = (ZinIrOpLayer **)&unk_24C02BB18;
        if (v186)
        {
          v187 = v186;
          operator delete(v186);
        }
        v67 = ZinIrOpLayerGraph::AddEdge((uint64_t)v16, (uint64_t)v4, (uint64_t)Transpose, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        v68 = (ZinIrTensor *)(*(uint64_t (**)(char *, _QWORD, _QWORD))(*(_QWORD *)Transpose + 32))(Transpose, 0, 0);
        if (ZinIrTensor::SetAllocationHint(v68, 2, 1))
        {
          v170 = Transpose + 24;
          if (Transpose[47] < 0)
            v170 = *(const char **)v170;
          ZinAssertImpl("ANEC internal error: allocation hint set fails on %s", v170);
        }
        __p[0] = off_24C021A98;
        if (v213[0])
        {
          v213[1] = v213[0];
          operator delete(v213[0]);
        }
        ZinIrUnitInfo::~ZinIrUnitInfo(__p);
        if (v179[0])
        {
          v179[1] = v179[0];
          operator delete(v179[0]);
        }
        v186 = 0;
        v187 = 0;
        v189 = 0;
        v188 = 0;
        v190 = 0u;
        v191 = 0u;
        v193 = 0u;
        v194 = 0u;
        v195 = 0u;
        memset(v196, 0, sizeof(v196));
        v192 = -1;
        v185 = (ZinIrOpLayer **)&off_24C023500;
        *(_OWORD *)v197 = 0u;
        v198 = 0u;
        v199 = 0u;
        v183 = 0;
        v184 = 0;
        v182 = (void **)&v183;
        v69 = (*(uint64_t (**)(char *, _QWORD, _QWORD))(*(_QWORD *)Transpose + 32))(Transpose, 0, 0);
        v70 = *(_OWORD *)(v69 + 64);
        *(_OWORD *)v179 = *(_OWORD *)(v69 + 48);
        v180 = v70;
        v181 = *(_QWORD *)(v69 + 80);
        v72 = *(_QWORD *)(v9 + 200);
        v71 = *(_QWORD *)(v9 + 208);
        if (v71 != v72)
        {
          v73 = 0;
          do
          {
            v74 = (int *)(v72 + 16 * v73);
            v75 = *(_QWORD *)(v9 + 176);
            v76 = *(_QWORD *)(v9 + 184);
            if (v75 == v76)
            {
              v77 = *v74;
            }
            else
            {
              v77 = *v74;
              while (v77 != *(_DWORD *)v75)
              {
                v75 += 16;
                if (v75 == v76)
                {
                  v75 = *(_QWORD *)(v9 + 184);
                  break;
                }
              }
            }
            v78 = v77 == v201 || v77 == v200;
            if (v78)
            {
              if (v77 == v201)
                v79 = 3;
              else
                v79 = 4;
              if (SetValueAtDimension<ZinTensorDimensions>(v179, v79, *(_QWORD *)(v75 + 8)))
                ZinAssertImpl("ANEC internal error: Failed to infer decomposed slice output shape");
              std::__tree<ZinIrDimension>::__emplace_unique_key_args<ZinIrDimension,ZinIrDimension>((uint64_t **)&v182, v74, v74);
              v72 = *(_QWORD *)(v9 + 200);
              v71 = *(_QWORD *)(v9 + 208);
            }
            ++v73;
          }
          while (v73 < (v71 - v72) >> 4);
        }
        LODWORD(v80) = PopulateHeightWidthSliceInfo(v173, &v182, (uint64_t)&v185);
        v81 = *((_QWORD *)v3 + 2);
        (*(void (**)(void **__return_ptr, char *, _QWORD, _QWORD, float))(*(_QWORD *)Transpose + 80))(__p, Transpose, 0, 0, v80);
        (*(void (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 80))(a2, 0, 0);
        v82 = v3;
        v83 = operator new(0xF0uLL);
        v224 = v83 + 15;
        v84 = v221[0];
        v83[12] = v220;
        v83[13] = v84;
        *(_OWORD *)((char *)v83 + 220) = *(_OWORD *)((char *)v221 + 12);
        v85 = v217;
        v83[8] = v216;
        v83[9] = v85;
        v86 = v219;
        v83[10] = v218;
        v83[11] = v86;
        v87 = *(_OWORD *)v213;
        v83[4] = v212;
        v83[5] = v87;
        v88 = v215;
        v83[6] = v214;
        v83[7] = v88;
        v89 = v209;
        *v83 = *(_OWORD *)__p;
        v83[1] = v89;
        v90 = v211;
        v83[2] = v210;
        v83[3] = v90;
        v222 = (ZinSliceLayer *)v83;
        v223 = (uint64_t)(v83 + 15);
        v91 = (*(uint64_t (**)(char *, _QWORD, _QWORD))(*(_QWORD *)Transpose + 32))(Transpose, 0, 0);
        SliceLayer = (ZinIrOpLayer *)ZinBuilder::CreateSliceLayer(v81, (uint64_t)v205, (uint64_t *)&v222, (__int128 *)v179, *(_DWORD *)(v91 + 88), (const ZinIrDynamicSliceUnitInfo *)&v185);
        if (v222)
        {
          v223 = (uint64_t)v222;
          operator delete(v222);
        }
        v207 = v82;
        v222 = (ZinSliceLayer *)&v207;
        v223 = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(__p, &v222);
        v93 = ZinIrOpLayerGraph::AddNode(v16, SliceLayer, (ZinIrOpLayer ***)__p);
        __p[0] = &unk_24C02BB18;
        if (__p[1])
        {
          *(void **)&v209 = __p[1];
          operator delete(__p[1]);
        }
        v94 = operator new(0x10uLL);
        *(_QWORD *)&v209 = v94 + 2;
        *v94 = Transpose;
        v94[1] = a2;
        __p[0] = v94;
        __p[1] = v94 + 2;
        v95 = ZinIrOpLayerGraph::AddEdgesImplSrc<std::vector<ZinIrOpLayer *>>((uint64_t)v16, (uint64_t *)__p, (uint64_t)SliceLayer);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v182, (_QWORD *)v183);
        v185 = (ZinIrOpLayer **)&off_24C023500;
        if (*((_QWORD *)&v198 + 1))
        {
          *(_QWORD *)&v199 = *((_QWORD *)&v198 + 1);
          operator delete(*((void **)&v198 + 1));
        }
        if (v197[0])
        {
          v197[1] = v197[0];
          operator delete(v197[0]);
        }
        ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)&v185);
        v179[0] = 0;
        v179[1] = 0;
        *(_QWORD *)&v180 = 0;
        v96 = v201;
        v98 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v180, 1uLL);
        *v98 = (v96 << 32) | 3;
        v99 = (char *)(v98 + 1);
        v101 = (char *)v179[0];
        v100 = (char *)v179[1];
        v102 = (char *)v98;
        if (v179[1] != v179[0])
        {
          do
          {
            v103 = *((_QWORD *)v100 - 1);
            v100 -= 8;
            *((_QWORD *)v102 - 1) = v103;
            v102 -= 8;
          }
          while (v100 != v101);
          v100 = (char *)v179[0];
        }
        v104 = (char *)&v98[v97];
        v179[0] = v102;
        v179[1] = v98 + 1;
        *(_QWORD *)&v180 = v104;
        if (v100)
        {
          operator delete(v100);
          v104 = (char *)v180;
        }
        v179[1] = v98 + 1;
        v105 = v201;
        if (v99 >= v104)
        {
          v107 = (v99 - (char *)v179[0]) >> 3;
          if ((unint64_t)(v107 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v108 = v104 - (char *)v179[0];
          v109 = v108 >> 2;
          if (v108 >> 2 <= (unint64_t)(v107 + 1))
            v109 = v107 + 1;
          if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFF8)
            v110 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v110 = v109;
          if (v110)
            v111 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v180, v110);
          else
            v111 = 0;
          v112 = (uint64_t *)&v111[8 * v107];
          *v112 = v105 | 0x300000000;
          v106 = (unint64_t *)(v112 + 1);
          v114 = (char *)v179[0];
          v113 = (char *)v179[1];
          if (v179[1] == v179[0])
          {
            v16 = a3;
          }
          else
          {
            v16 = a3;
            do
            {
              v115 = *((_QWORD *)v113 - 1);
              v113 -= 8;
              *--v112 = v115;
            }
            while (v113 != v114);
            v113 = (char *)v179[0];
          }
          v179[0] = v112;
          v179[1] = v106;
          *(_QWORD *)&v180 = &v111[8 * v110];
          if (v113)
            operator delete(v113);
        }
        else
        {
          v98[1] = v201 | 0x300000000;
          v106 = v98 + 2;
          v16 = a3;
        }
        v179[1] = v106;
        if (v204 >= 2)
        {
          v116 = v200;
          if ((unint64_t)v106 >= (unint64_t)v180)
          {
            v118 = ((char *)v106 - (char *)v179[0]) >> 3;
            if ((unint64_t)(v118 + 1) >> 61)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v119 = (uint64_t)(v180 - (unint64_t)v179[0]) >> 2;
            if (v119 <= v118 + 1)
              v119 = v118 + 1;
            if ((unint64_t)v180 - (unint64_t)v179[0] >= 0x7FFFFFFFFFFFFFF8)
              v120 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v120 = v119;
            if (v120)
              v121 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v180, v120);
            else
              v121 = 0;
            v122 = (uint64_t *)&v121[8 * v118];
            *v122 = (v116 << 32) | 4;
            v117 = v122 + 1;
            v124 = (char *)v179[0];
            v123 = (char *)v179[1];
            if (v179[1] == v179[0])
            {
              v16 = a3;
            }
            else
            {
              v16 = a3;
              do
              {
                v125 = *((_QWORD *)v123 - 1);
                v123 -= 8;
                *--v122 = v125;
              }
              while (v123 != v124);
              v123 = (char *)v179[0];
            }
            v179[0] = v122;
            v179[1] = v117;
            *(_QWORD *)&v180 = &v121[8 * v120];
            if (v123)
              operator delete(v123);
          }
          else
          {
            *v106 = ((unint64_t)v200 << 32) | 4;
            v117 = (uint64_t *)(v106 + 1);
          }
          v179[1] = v117;
          v126 = v200;
          if ((unint64_t)v117 >= (unint64_t)v180)
          {
            v128 = ((char *)v117 - (char *)v179[0]) >> 3;
            if ((unint64_t)(v128 + 1) >> 61)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v129 = (uint64_t)(v180 - (unint64_t)v179[0]) >> 2;
            if (v129 <= v128 + 1)
              v129 = v128 + 1;
            if ((unint64_t)v180 - (unint64_t)v179[0] >= 0x7FFFFFFFFFFFFFF8)
              v130 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v130 = v129;
            if (v130)
              v131 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v180, v130);
            else
              v131 = 0;
            v132 = (uint64_t *)&v131[8 * v128];
            *v132 = v126 | 0x400000000;
            v127 = v132 + 1;
            v134 = (char *)v179[0];
            v133 = (char *)v179[1];
            if (v179[1] == v179[0])
            {
              v16 = a3;
            }
            else
            {
              v16 = a3;
              do
              {
                v135 = *((_QWORD *)v133 - 1);
                v133 -= 8;
                *--v132 = v135;
              }
              while (v133 != v134);
              v133 = (char *)v179[0];
            }
            v179[0] = v132;
            v179[1] = v127;
            *(_QWORD *)&v180 = &v131[8 * v130];
            if (v133)
              operator delete(v133);
          }
          else
          {
            *v117 = v200 | 0x400000000;
            v127 = v117 + 1;
          }
          v179[1] = v127;
        }
        ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)__p, (uint64_t)v179, *(_DWORD *)(v9 + 84));
        v136 = *((_QWORD *)v82 + 2);
        v137 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)SliceLayer + 32))(SliceLayer, 0, 0);
        v138 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)SliceLayer + 32))(SliceLayer, 0, 0);
        v4 = (ZinIrOpLayer *)ZinBuilder::CreateTranspose(v136, (uint64_t)v205, v137 + 48, *(_DWORD *)(v138 + 88), (uint64_t)v213);
        v222 = v82;
        v182 = (void **)&v222;
        v183 = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(&v185, &v182);
        v139 = ZinIrOpLayerGraph::AddNode(v16, v4, &v185);
        v185 = (ZinIrOpLayer **)&unk_24C02BB18;
        if (v186)
        {
          v187 = v186;
          operator delete(v186);
        }
        v140 = ZinIrOpLayerGraph::AddEdge((uint64_t)v16, (uint64_t)SliceLayer, (uint64_t)v4, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        __p[0] = off_24C021A98;
        if (v213[0])
        {
          v213[1] = v213[0];
          operator delete(v213[0]);
        }
        ZinIrUnitInfo::~ZinIrUnitInfo(__p);
        if (v179[0])
        {
          v179[1] = v179[0];
          operator delete(v179[0]);
        }
        std::__tree<std::__value_type<ZinIrDimension,ZinIrDimension>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,ZinIrDimension>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,ZinIrDimension>>>::__erase_unique<ZinIrDimension>((uint64_t)&v202, (int *)&v200);
        std::__tree<std::__value_type<ZinIrDimension,ZinIrDimension>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,ZinIrDimension>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,ZinIrDimension>>>::__erase_unique<ZinIrDimension>((uint64_t)&v202, (int *)&v201);
        v18 = v174 & v140 & v66 & v67 & v93 & v95 & v139;
        v17 = v204;
        v3 = v82;
      }
      while (v204);
    }
    else
    {
      v18 = 1;
    }
    for (i = *(_DWORD **)(v9 + 96); i != *(_DWORD **)(v9 + 104); i += 3)
    {
      if ((*i - 3) <= 1 && i[2] != 0)
      {
LABEL_220:
        v189 = 0;
        v187 = 0;
        v188 = 0;
        v190 = 0u;
        v191 = 0u;
        v192 = -1;
        v193 = 0u;
        v194 = 0u;
        v195 = 0u;
        memset(v196, 0, sizeof(v196));
        v185 = (ZinIrOpLayer **)&off_24C023500;
        v186 = 0;
        *(_OWORD *)v197 = 0u;
        v198 = 0u;
        v199 = 0u;
        v183 = 0;
        v184 = 0;
        v182 = (void **)&v183;
        v145 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0, 0);
        v146 = *(_OWORD *)(v145 + 64);
        *(_OWORD *)v179 = *(_OWORD *)(v145 + 48);
        v180 = v146;
        v181 = *(_QWORD *)(v145 + 80);
        v148 = *(_QWORD *)(v9 + 200);
        v147 = *(_QWORD *)(v9 + 208);
        if (v147 != v148)
        {
          v149 = 0;
          do
          {
            LODWORD(__p[0]) = 0;
            v150 = *(_DWORD *)(v148 + 16 * v149);
            LODWORD(__p[0]) = v150;
            v151 = *(_QWORD *)(v9 + 176);
            v152 = *(_QWORD *)(v9 + 184);
            if (v151 != v152)
            {
              while (v150 != *(_DWORD *)v151)
              {
                v151 += 16;
                if (v151 == v152)
                {
                  v151 = *(_QWORD *)(v9 + 184);
                  break;
                }
              }
            }
            if ((v150 - 3) <= 1)
            {
              if (SetValueAtDimension<ZinTensorDimensions>(v179, v150, *(_QWORD *)(v151 + 8)))
                ZinAssertImpl("ANEC internal error: Failed to infer decomposed slice output shape");
              std::__tree<ZinIrDimension>::__emplace_unique_key_args<ZinIrDimension,ZinIrDimension>((uint64_t **)&v182, (int *)__p, __p);
              v148 = *(_QWORD *)(v9 + 200);
              v147 = *(_QWORD *)(v9 + 208);
            }
            ++v149;
          }
          while (v149 < (v147 - v148) >> 4);
        }
        LODWORD(v153) = PopulateHeightWidthSliceInfo(v173, &v182, (uint64_t)&v185);
        v154 = *((_QWORD *)v3 + 2);
        (*(void (**)(void **__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD, float))(*(_QWORD *)v4 + 80))(__p, v4, 0, 0, v153);
        (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a2 + 80))((_QWORD *)&v215 + 1);
        v155 = operator new(0xF0uLL);
        v224 = v155 + 15;
        v156 = v221[0];
        v155[12] = v220;
        v155[13] = v156;
        *(_OWORD *)((char *)v155 + 220) = *(_OWORD *)((char *)v221 + 12);
        v157 = v217;
        v155[8] = v216;
        v155[9] = v157;
        v158 = v219;
        v155[10] = v218;
        v155[11] = v158;
        v159 = *(_OWORD *)v213;
        v155[4] = v212;
        v155[5] = v159;
        v160 = v215;
        v155[6] = v214;
        v155[7] = v160;
        v161 = v209;
        *v155 = *(_OWORD *)__p;
        v155[1] = v161;
        v162 = v211;
        v155[2] = v210;
        v155[3] = v162;
        v222 = (ZinSliceLayer *)v155;
        v223 = (uint64_t)(v155 + 15);
        v163 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0, 0);
        v164 = (ZinIrOpLayer *)ZinBuilder::CreateSliceLayer(v154, (uint64_t)v205, (uint64_t *)&v222, (__int128 *)v179, *(_DWORD *)(v163 + 88), (const ZinIrDynamicSliceUnitInfo *)&v185);
        if (v222)
        {
          v223 = (uint64_t)v222;
          operator delete(v222);
        }
        v207 = v3;
        v222 = (ZinSliceLayer *)&v207;
        v223 = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(__p, &v222);
        v165 = ZinIrOpLayerGraph::AddNode(a3, v164, (ZinIrOpLayer ***)__p);
        __p[0] = &unk_24C02BB18;
        if (__p[1])
        {
          *(void **)&v209 = __p[1];
          operator delete(__p[1]);
        }
        v166 = operator new(0x10uLL);
        *(_QWORD *)&v209 = v166 + 2;
        *v166 = v4;
        v166[1] = a2;
        __p[0] = v166;
        __p[1] = v166 + 2;
        v167 = ZinIrOpLayerGraph::AddEdgesImplSrc<std::vector<ZinIrOpLayer *>>((uint64_t)a3, (uint64_t *)__p, (uint64_t)v164);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v182, (_QWORD *)v183);
        v185 = (ZinIrOpLayer **)&off_24C023500;
        if (*((_QWORD *)&v198 + 1))
        {
          *(_QWORD *)&v199 = *((_QWORD *)&v198 + 1);
          operator delete(*((void **)&v198 + 1));
        }
        v18 &= v165 & v167;
        if (v197[0])
        {
          v197[1] = v197[0];
          operator delete(v197[0]);
        }
        ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)&v185);
        v16 = a3;
        goto LABEL_242;
      }
    }
    for (j = *(_DWORD **)(v9 + 120); j != *(_DWORD **)(v9 + 128); j += 2)
    {
      if ((*j - 3) <= 1 && (j[1] - 5) <= 1)
        goto LABEL_220;
    }
    v164 = v4;
LABEL_242:
    memset(v177, 0, sizeof(v177));
    v178 = 1065353216;
    v168 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)v16, (uint64_t **)v3, v164, v177);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v177);
    v14 = v172;
    if ((v18 & v168 & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)v16, v3, 0) & 1) == 0)
      ZinAssertImpl("ANEC internal error: graph manipulation failure");
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v202, v203);
  v205[0] = off_24C01FBB0;
  if (v206 < 0)
    operator delete((void *)v205[1]);
  return v14 != 0;
}

void sub_206DAC99C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a68;
  uint64_t a69;
  uint64_t a71;
  void *a72;
  void *v73;

  v73 = (void *)STACK[0x220];
  if (STACK[0x220])
  {
    STACK[0x228] = (unint64_t)v73;
    operator delete(v73);
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a38, (_QWORD *)a39);
  ZinIrDynamicSliceUnitInfo::~ZinIrDynamicSliceUnitInfo((ZinIrDynamicSliceUnitInfo *)&a41);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a68, (_QWORD *)a69);
  a71 = (uint64_t)off_24C01FBB0;
  if (SLOBYTE(STACK[0x20F]) < 0)
    operator delete(a72);
  _Unwind_Resume(a1);
}

__int16 PopulateHeightWidthSliceInfo@<H0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>)
{
  _QWORD *v5;
  char **v6;
  char v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  _DWORD *i;
  _DWORD *v40;
  int v41;
  int v42;
  unint64_t v43;
  char *v44;
  _DWORD *v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  int v55;
  _DWORD *v56;
  _DWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  _DWORD *v71;
  _DWORD *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  BOOL v88;
  char v89;
  __int16 result;
  _QWORD *v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char **v98;
  void **v99;
  void **v100;
  void **v101;

  v5 = (_QWORD *)*a2;
  v91 = a2 + 1;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v100 = (void **)(a3 + 184);
    v101 = (void **)(a3 + 160);
    v96 = a3 + 200;
    v97 = a3 + 176;
    v98 = (char **)(a3 + 128);
    v99 = (void **)(a3 + 80);
    v94 = a3 + 144;
    v95 = a3 + 96;
    v6 = (char **)(a3 + 104);
    v93 = a3 + 120;
    v7 = 1;
    v8 = 3;
    do
    {
      v92 = v7;
      v9 = *((_DWORD *)v5 + 7);
      if (v9 - 3 >= 2)
        v10 = v8;
      else
        v10 = v9;
      v11 = *(_QWORD *)(a1 + 160);
      v12 = *(_QWORD *)(a1 + 168);
      while (v11 != v12)
      {
        if (*((_DWORD *)v5 + 7) == *(_DWORD *)v11)
        {
          v13 = *(_QWORD *)(v11 + 8);
          v15 = *(char **)(a3 + 168);
          v14 = *(_QWORD *)(a3 + 176);
          if ((unint64_t)v15 >= v14)
          {
            v17 = (char *)*v101;
            v18 = (v15 - (_BYTE *)*v101) >> 4;
            v19 = v18 + 1;
            if ((unint64_t)(v18 + 1) >> 60)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v20 = v14 - (_QWORD)v17;
            if (v20 >> 3 > v19)
              v19 = v20 >> 3;
            if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
              v21 = 0xFFFFFFFFFFFFFFFLL;
            else
              v21 = v19;
            if (v21)
            {
              v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>(v97, v21);
              v17 = *(char **)(a3 + 160);
              v15 = *(char **)(a3 + 168);
            }
            else
            {
              v22 = 0;
            }
            v23 = &v22[16 * v18];
            *(_DWORD *)v23 = v10;
            *((_QWORD *)v23 + 1) = v13;
            v24 = v23;
            if (v15 != v17)
            {
              do
              {
                *((_OWORD *)v24 - 1) = *((_OWORD *)v15 - 1);
                v24 -= 16;
                v15 -= 16;
              }
              while (v15 != v17);
              v17 = (char *)*v101;
            }
            v16 = v23 + 16;
            *(_QWORD *)(a3 + 160) = v24;
            *(_QWORD *)(a3 + 168) = v23 + 16;
            *(_QWORD *)(a3 + 176) = &v22[16 * v21];
            if (v17)
              operator delete(v17);
          }
          else
          {
            *(_DWORD *)v15 = v10;
            *((_QWORD *)v15 + 1) = v13;
            v16 = v15 + 16;
          }
          *(_QWORD *)(a3 + 168) = v16;
        }
        v11 += 16;
      }
      v26 = *(_QWORD *)(a1 + 184);
      v25 = *(_QWORD *)(a1 + 192);
      if (v25 != v26)
      {
        v27 = 0;
        do
        {
          if (*((_DWORD *)v5 + 7) == *(_DWORD *)(v26 + 16 * v27))
          {
            v29 = *(char **)(a3 + 192);
            v28 = *(_QWORD *)(a3 + 200);
            if ((unint64_t)v29 >= v28)
            {
              v31 = (char *)*v100;
              v32 = (v29 - (_BYTE *)*v100) >> 4;
              v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 60)
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              v34 = v28 - (_QWORD)v31;
              if (v34 >> 3 > v33)
                v33 = v34 >> 3;
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
                v35 = 0xFFFFFFFFFFFFFFFLL;
              else
                v35 = v33;
              if (v35)
              {
                v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>(v96, v35);
                v31 = *(char **)(a3 + 184);
                v29 = *(char **)(a3 + 192);
              }
              else
              {
                v36 = 0;
              }
              v37 = &v36[16 * v32];
              *(_DWORD *)v37 = v10;
              *((_QWORD *)v37 + 1) = v27;
              v38 = v37;
              if (v29 != v31)
              {
                do
                {
                  *((_OWORD *)v38 - 1) = *((_OWORD *)v29 - 1);
                  v38 -= 16;
                  v29 -= 16;
                }
                while (v29 != v31);
                v31 = (char *)*v100;
              }
              v30 = v37 + 16;
              *(_QWORD *)(a3 + 184) = v38;
              *(_QWORD *)(a3 + 192) = v37 + 16;
              *(_QWORD *)(a3 + 200) = &v36[16 * v35];
              if (v31)
                operator delete(v31);
            }
            else
            {
              *(_DWORD *)v29 = v10;
              *((_QWORD *)v29 + 1) = v27;
              v30 = v29 + 16;
            }
            *(_QWORD *)(a3 + 192) = v30;
            v26 = *(_QWORD *)(a1 + 184);
            v25 = *(_QWORD *)(a1 + 192);
          }
          ++v27;
        }
        while (v27 < (v25 - v26) >> 4);
      }
      v40 = *(_DWORD **)(a1 + 80);
      for (i = *(_DWORD **)(a1 + 88); v40 != i; v40 += 3)
      {
        if (*((_DWORD *)v5 + 7) == *v40)
        {
          v42 = v40[1];
          v41 = v40[2];
          v44 = *(char **)(a3 + 88);
          v43 = *(_QWORD *)(a3 + 96);
          if ((unint64_t)v44 >= v43)
          {
            v46 = (char *)*v99;
            v47 = 0xAAAAAAAAAAAAAAABLL * ((v44 - (_BYTE *)*v99) >> 2);
            v48 = v47 + 1;
            if (v47 + 1 > 0x1555555555555555)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - (_QWORD)v46) >> 2);
            if (2 * v49 > v48)
              v48 = 2 * v49;
            if (v49 >= 0xAAAAAAAAAAAAAAALL)
              v50 = 0x1555555555555555;
            else
              v50 = v48;
            if (v50)
            {
              v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANEDebugInfo::DebugInfoInMem::Layer>>(v95, v50);
              v46 = *(char **)(a3 + 80);
              v44 = *(char **)(a3 + 88);
            }
            else
            {
              v51 = 0;
            }
            v52 = &v51[12 * v47];
            *(_DWORD *)v52 = v10;
            *((_DWORD *)v52 + 1) = v42;
            *((_DWORD *)v52 + 2) = v41;
            v53 = v52;
            if (v44 != v46)
            {
              do
              {
                v54 = *(_QWORD *)(v44 - 12);
                v44 -= 12;
                v55 = *((_DWORD *)v44 + 2);
                *(_QWORD *)(v53 - 12) = v54;
                v53 -= 12;
                *((_DWORD *)v53 + 2) = v55;
              }
              while (v44 != v46);
              v46 = (char *)*v99;
            }
            v45 = v52 + 12;
            *(_QWORD *)(a3 + 80) = v53;
            *(_QWORD *)(a3 + 88) = v52 + 12;
            *(_QWORD *)(a3 + 96) = &v51[12 * v50];
            if (v46)
              operator delete(v46);
          }
          else
          {
            *(_DWORD *)v44 = v10;
            *((_DWORD *)v44 + 1) = v42;
            v45 = v44 + 12;
            *((_DWORD *)v44 + 2) = v41;
          }
          *(_QWORD *)(a3 + 88) = v45;
        }
      }
      v56 = *(_DWORD **)(a1 + 128);
      v57 = *(_DWORD **)(a1 + 136);
      while (v56 != v57)
      {
        if (*((_DWORD *)v5 + 7) == *v56)
        {
          v58 = v56[1];
          v60 = *(uint64_t **)(a3 + 136);
          v59 = *(_QWORD *)(a3 + 144);
          if ((unint64_t)v60 >= v59)
          {
            v62 = ((char *)v60 - *v98) >> 3;
            if ((unint64_t)(v62 + 1) >> 61)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v63 = v59 - (_QWORD)*v98;
            v64 = v63 >> 2;
            if (v63 >> 2 <= (unint64_t)(v62 + 1))
              v64 = v62 + 1;
            if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
              v65 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v65 = v64;
            if (v65)
              v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v94, v65);
            else
              v66 = 0;
            v67 = &v66[8 * v62];
            *(_QWORD *)v67 = v10 | (v58 << 32);
            v61 = v67 + 8;
            v69 = *(char **)(a3 + 128);
            v68 = *(char **)(a3 + 136);
            if (v68 != v69)
            {
              do
              {
                v70 = *((_QWORD *)v68 - 1);
                v68 -= 8;
                *((_QWORD *)v67 - 1) = v70;
                v67 -= 8;
              }
              while (v68 != v69);
              v68 = *v98;
            }
            *(_QWORD *)(a3 + 128) = v67;
            *(_QWORD *)(a3 + 136) = v61;
            *(_QWORD *)(a3 + 144) = &v66[8 * v65];
            if (v68)
              operator delete(v68);
          }
          else
          {
            *v60 = v10 | (v58 << 32);
            v61 = v60 + 1;
          }
          *(_QWORD *)(a3 + 136) = v61;
        }
        v56 += 2;
      }
      v71 = *(_DWORD **)(a1 + 104);
      v72 = *(_DWORD **)(a1 + 112);
      while (v71 != v72)
      {
        if (*((_DWORD *)v5 + 7) == *v71)
        {
          v73 = v71[1];
          v75 = *(uint64_t **)(a3 + 112);
          v74 = *(_QWORD *)(a3 + 120);
          if ((unint64_t)v75 >= v74)
          {
            v77 = ((char *)v75 - *v6) >> 3;
            if ((unint64_t)(v77 + 1) >> 61)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v78 = v74 - (_QWORD)*v6;
            v79 = v78 >> 2;
            if (v78 >> 2 <= (unint64_t)(v77 + 1))
              v79 = v77 + 1;
            if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8)
              v80 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v80 = v79;
            if (v80)
              v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v93, v80);
            else
              v81 = 0;
            v82 = &v81[8 * v77];
            *(_QWORD *)v82 = v10 | (v73 << 32);
            v76 = v82 + 8;
            v84 = *(char **)(a3 + 104);
            v83 = *(char **)(a3 + 112);
            if (v83 != v84)
            {
              do
              {
                v85 = *((_QWORD *)v83 - 1);
                v83 -= 8;
                *((_QWORD *)v82 - 1) = v85;
                v82 -= 8;
              }
              while (v83 != v84);
              v83 = *v6;
            }
            *(_QWORD *)(a3 + 104) = v82;
            *(_QWORD *)(a3 + 112) = v76;
            *(_QWORD *)(a3 + 120) = &v81[8 * v80];
            if (v83)
              operator delete(v83);
          }
          else
          {
            *v75 = v10 | (v73 << 32);
            v76 = v75 + 1;
          }
          *(_QWORD *)(a3 + 112) = v76;
        }
        v71 += 2;
      }
      v86 = (_QWORD *)v5[1];
      if (v86)
      {
        do
        {
          v87 = v86;
          v86 = (_QWORD *)*v86;
        }
        while (v86);
      }
      else
      {
        do
        {
          v87 = (_QWORD *)v5[2];
          v88 = *v87 == (_QWORD)v5;
          v5 = v87;
        }
        while (!v88);
      }
      v89 = (v87 != v91) & v92;
      v8 = 4;
      v5 = v87;
      v7 = 0;
    }
    while ((v89 & 1) != 0);
  }
  result = *(_WORD *)(a1 + 152);
  *(_WORD *)(a3 + 152) = result;
  return result;
}

BOOL ZinSliceLayer::NeedsTypeCastToRead(uint64_t a1, int a2, uint64_t a3)
{
  _BOOL4 v5;
  _BOOL4 v6;

  v5 = !IsPrimaryFormat(a2);
  v6 = a2 != 13 && v5;
  if (a3)
    return v5;
  else
    return v6;
}

uint64_t ZinSliceLayer::SliceNeedsCropMode(uint64_t a1)
{
  _DWORD *v1;
  _DWORD *v2;
  BOOL v3;
  uint64_t result;

  v1 = *(_DWORD **)a1;
  v2 = *(_DWORD **)(a1 + 8);
  if (*(_DWORD **)a1 == v2)
    return 0;
  do
  {
    v3 = (*v1 - 3) >= 2 || (v1[1] - 5) >= 2;
    result = !v3;
    if (!v3)
      break;
    v1 += 2;
  }
  while (v1 != v2);
  return result;
}

uint64_t ZinSliceLayer::Lower(ZinSliceLayer *a1, uint64_t **a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v11;
  ZinIrOpLayer *v12;
  _QWORD *v13;
  ZinIrTensor *v14;
  int v15;
  uint64_t (*v16)(ZinIrOpLayer *, _QWORD, _QWORD);
  uint64_t *v17;
  ZinIrTensor *v18;
  unint64_t Interleave;
  char v20;
  _BOOL4 v21;
  int v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  const char *v26;
  uint64_t v27;
  int v28;
  _QWORD v29[4];
  int v30;
  _QWORD v31[2];
  void *__p;
  void *v33;
  void *v34;
  _QWORD *v35;
  void *v36[2];
  __int128 v37;
  uint64_t v38;
  _QWORD v39[2];

  v39[1] = *MEMORY[0x24BDAC8D0];
  v4 = *(uint64_t ***)(*((_QWORD *)a1 + 11) + 8);
  if (ZinTextureLayerUtils::IsInformationStoredInWidthDimension((uint64_t)a1, 0))
    v4 = (uint64_t **)ZinTextureLayerUtils::ReshapeIndexTensor(a1);
  if (ZinSliceLayer::CanBeConvertedToPEIndex(a1))
  {
    v5 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)a1 + 11) + 8) + 32))(*(_QWORD *)(*((_QWORD *)a1 + 11) + 8), 0, 0);
    *(int64x2_t *)v36 = vdupq_n_s64(1uLL);
    v37 = *(_OWORD *)v36;
    v38 = 1;
    if (!ZinTensorDimensionsEqual((_QWORD *)(v5 + 48), v36))
      ZinSliceLayer::LowerMultiDimensionSliceIntoMultipleSlices(a1, a2);
    return 0;
  }
  if (!ZinSliceLayer::LowerSliceWithNormalizedNDC((ZinIrOpLayer ***)a1, (ZinIrOpLayer *)v4, a2))
  {
    v7 = *((_QWORD *)a1 + 8);
    v8 = *(_DWORD **)(v7 + 120);
    v9 = *(_DWORD **)(v7 + 128);
    while (1)
    {
      if (v8 == v9)
        return 0;
      if ((*v8 - 3) <= 1 && (v8[1] - 5) <= 1)
        break;
      v8 += 2;
    }
    if (*(_DWORD *)(((uint64_t (*)(uint64_t **, _QWORD, _QWORD))(*v4)[4])(v4, 0, 0) + 88) != 3)
    {
      std::operator+<char>();
      ZinObjectNameFactory::ZinObjectNameFactory(v36, &__p);
      if (SHIBYTE(v34) < 0)
        operator delete(__p);
      v11 = *((_QWORD *)a1 + 2);
      v35 = 0;
      v12 = (ZinIrOpLayer *)ZinBuilder::CreateCopyLayer(v11, (uint64_t)v4, (uint64_t)v36, 3, &v35);
      v13 = v35;
      v35 = 0;
      if (v13)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v35, v13);
      v14 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0, 0);
      v15 = ZinIrTensor::SetAllocationHint(v14, 2, 1);
      v16 = *(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v12 + 32);
      if (v15)
      {
        v23 = v16(v12, 0, 0);
        v24 = (_QWORD *)(v23 + 24);
        v25 = *(char *)(v23 + 47);
        v26 = "ANEC internal error: allocation hint set fails in %s";
        if ((v25 & 0x80000000) == 0)
          goto LABEL_30;
      }
      else
      {
        v17 = (uint64_t *)v16(v12, 0, 0);
        v18 = (ZinIrTensor *)((uint64_t (*)(uint64_t **, _QWORD, _QWORD))(*v4)[4])(v4, 0, 0);
        Interleave = ZinIrTensor::GetInterleave(v18);
        if (!ZinIrTensor::SetInterleave(v17, Interleave, v20, 1))
        {
          v39[0] = a1;
          v31[0] = v39;
          v31[1] = 1;
          Layer2TDMapper::SourceLayer::SourceLayer(&__p, v31);
          v21 = ZinIrOpLayerGraph::AddNode(a2, v12, (ZinIrOpLayer ***)&__p);
          __p = &unk_24C02BB18;
          if (v33)
          {
            v34 = v33;
            operator delete(v33);
          }
          memset(v29, 0, sizeof(v29));
          v30 = 1065353216;
          v22 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, v4, v12, v29);
          std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v29);
          if ((v21 & v22 & ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)v4, (uint64_t)v12, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0) & 1) == 0)ZinAssertImpl("ANEC internal error: graph manipulation failure");
          v36[0] = off_24C01FBB0;
          if (SHIBYTE(v37) < 0)
            operator delete(v36[1]);
          return 0;
        }
        v27 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0, 0);
        v24 = (_QWORD *)(v27 + 24);
        v28 = *(char *)(v27 + 47);
        v26 = "ANEC internal error: interleave set fails in %s";
        if ((v28 & 0x80000000) == 0)
LABEL_30:
          ZinAssertImpl(v26, v24);
      }
      v24 = (_QWORD *)*v24;
      goto LABEL_30;
    }
  }
  return 0;
}

void sub_206DAD544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void (**a23)(ZinObjectNameFactory *__hidden this),void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a11);
  a23 = off_24C01FBB0;
  if (a29 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t ZinSliceLayer::CanBeConvertedToPEIndex(ZinSliceLayer *this)
{
  uint64_t Hal;
  _QWORD *v3;
  uint64_t i;
  _DWORD *v6;
  _DWORD *v7;

  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*((_QWORD *)this + 2) + 160));
  if (!*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal) + 1130))
    return 0;
  v3 = (_QWORD *)*((_QWORD *)this + 8);
  if (*(_DWORD *)(v3[12] + 8))
    return 0;
  for (i = v3[15]; i != v3[16]; i += 8)
  {
    if (*(_DWORD *)(i + 4) != 8)
      return 0;
  }
  v7 = (_DWORD *)v3[25];
  v6 = (_DWORD *)v3[26];
  if (v7 != v6)
  {
    while (*v7)
    {
      v7 += 4;
      if (v7 == v6)
        goto LABEL_13;
    }
  }
  if (v7 != v6)
    return 0;
LABEL_13:
  if (*(uint64_t *)((*(uint64_t (**)(ZinSliceLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0)+ 48) > 1)return 0;
  return ZinTextureLayerUtils::HasU16ConvertableIndex(this);
}

void ZinSliceLayer::LowerMultiDimensionSliceIntoMultipleSlices(ZinSliceLayer *this, uint64_t **a2)
{
  ZinIrOpLayer **v4;
  ZinIrOpLayer *v5;
  uint64_t v6;
  size_t v7;
  __int128 *p_p;
  char *v9;
  __n128 v10;
  uint64_t v11;
  ZinIrTensor *v12;
  uint64_t Interleave;
  char v14;
  char v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  ZinIrOpLayer *v21;
  _QWORD *v22;
  _BOOL4 v23;
  int v24;
  __int128 v25;
  _QWORD **v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  ZinIrOpLayer *ViewFromOffset;
  _BOOL4 v31;
  int v32;
  int v33;
  __int128 *v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  _DWORD *v39;
  _DWORD *v40;
  char *v41;
  uint64_t v42;
  int v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  int v69;
  _QWORD *v70;
  _QWORD *v71;
  char *v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  int v81;
  _QWORD *v82;
  char *v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  _OWORD *v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  ZinIrOpLayer *v101;
  uint64_t *v102;
  ZinIrTensor *v103;
  ZinIrTensor::MirInfo *v104;
  _BOOL4 v105;
  _QWORD *v106;
  int v107;
  _QWORD *v108;
  _QWORD **v109;
  int v110;
  uint64_t v111;
  int v112;
  int v113;
  int v114;
  _BOOL4 v115;
  uint64_t v116;
  ZinIrOpLayerGraph *v117;
  ZinSliceLayer *v118;
  _OWORD v119[2];
  int v120;
  ZinIrTensor::MirInfo *v121;
  __int128 *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  __int128 v130;
  _QWORD v131[8];
  __int128 v132;
  __int128 v133;
  __int128 v134;
  _QWORD *v135;
  _QWORD v136[3];
  char v137;
  _QWORD **v138;
  _QWORD *v139[2];
  ZinSliceLayer *v140;
  __int128 __p;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  _OWORD v154[2];
  ZinSliceLayer *v155;
  uint64_t v156;
  _OWORD *v157;
  __int128 v158;
  __int128 v159;
  _QWORD v160[4];

  v160[1] = *MEMORY[0x24BDAC8D0];
  v4 = (ZinIrOpLayer **)*((_QWORD *)this + 11);
  v5 = *v4;
  v6 = (uint64_t)v4[1];
  v111 = *((_QWORD *)this + 8);
  PackSliceInfo((const ZinIrDynamicSliceUnitInfo *)(v111 + 16), (uint64_t)&v138);
  v116 = *((_QWORD *)this + 2);
  v117 = (ZinIrOpLayerGraph *)a2;
  if (*((char *)this + 47) >= 0)
    v7 = *((unsigned __int8 *)this + 47);
  else
    v7 = *((_QWORD *)this + 4);
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v7 + 20);
  if ((SBYTE7(v142) & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = (__int128 *)__p;
  if (v7)
  {
    if (*((char *)this + 47) >= 0)
      v9 = (char *)this + 24;
    else
      v9 = (char *)*((_QWORD *)this + 3);
    memmove(p_p, v9, v7);
  }
  strcpy((char *)p_p + v7, "_slice_decomposition");
  v10 = ZinObjectNameFactory::ZinObjectNameFactory(v136, &__p);
  if (SBYTE7(v142) < 0)
    operator delete((void *)__p);
  v11 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD, __n128))(*(_QWORD *)v5 + 32))(v5, 0, 0, v10);
  v12 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0, 0);
  Interleave = ZinIrTensor::GetInterleave(v12);
  v15 = v14;
  v16 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0, 0) + 104);
  if (v16)
    LODWORD(v16) = *(_DWORD *)(v16 + 96);
  if (v15)
    v17 = Interleave == 1;
  else
    v17 = 1;
  v18 = !v17;
  if ((_DWORD)v16 == 2 || v18)
  {
    v20 = *(_DWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0, 0) + 88);
    v135 = 0;
    v21 = (ZinIrOpLayer *)ZinBuilder::CreateCopyLayer(v116, v6, (uint64_t)v136, v20, &v135);
    v22 = v135;
    v135 = 0;
    if (v22)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v135, v22);
    *(_QWORD *)&v158 = this;
    v122 = &v158;
    v123 = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&__p, &v122);
    v23 = ZinIrOpLayerGraph::AddNode(a2, v21, (ZinIrOpLayer ***)&__p);
    *(_QWORD *)&__p = &unk_24C02BB18;
    if (*((_QWORD *)&__p + 1))
    {
      *(_QWORD *)&v142 = *((_QWORD *)&__p + 1);
      operator delete(*((void **)&__p + 1));
    }
    v19 = v23 & ZinIrOpLayerGraph::AddEdge((uint64_t)a2, v6, (uint64_t)v21, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    v6 = (uint64_t)v21;
  }
  else
  {
    v19 = 1;
  }
  v118 = this;
  if (*(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0, 0) + 72) == 1)
    v24 = 2;
  else
    v24 = 4;
  v112 = v24;
  v25 = *(_OWORD *)(v11 + 64);
  v158 = *(_OWORD *)(v11 + 48);
  v159 = v25;
  v160[0] = *(_QWORD *)(v11 + 80);
  v26 = v138;
  if (v138 != v139)
  {
    while (2)
    {
      v27 = v26[8];
      v28 = v6;
      v29 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0, 0);
      ViewFromOffset = (ZinIrOpLayer *)ZinBuilder::CreateViewFromOffset(v116, (uint64_t)v136, v29, v112, (int)v27, 1);
      v155 = v118;
      v122 = (__int128 *)&v155;
      v123 = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(&__p, &v122);
      v31 = ZinIrOpLayerGraph::AddNode((uint64_t **)v117, ViewFromOffset, (ZinIrOpLayer ***)&__p);
      *(_QWORD *)&__p = &unk_24C02BB18;
      if (*((_QWORD *)&__p + 1))
      {
        *(_QWORD *)&v142 = *((_QWORD *)&__p + 1);
        operator delete(*((void **)&__p + 1));
      }
      v32 = ZinIrOpLayerGraph::AddEdge((uint64_t)v117, v28, (uint64_t)ViewFromOffset, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      v33 = 0;
      v34 = &v158;
      switch(*((_DWORD *)v26 + 8))
      {
        case 0:
          goto LABEL_41;
        case 1:
          v34 = (__int128 *)v160;
          goto LABEL_41;
        case 2:
          v34 = (__int128 *)((char *)&v158 + 8);
          goto LABEL_41;
        case 3:
          v34 = &v159;
          goto LABEL_41;
        case 4:
          v34 = (__int128 *)((char *)&v159 + 8);
LABEL_41:
          *(_QWORD *)v34 = v26[7];
          goto LABEL_42;
        case 5:
          goto LABEL_43;
        default:
LABEL_42:
          v33 = 1;
LABEL_43:
          v114 = v33;
          v115 = v31;
          v126 = 0;
          v123 = 0;
          v124 = 0;
          v125 = 0;
          v127 = 0u;
          v128 = 0u;
          v130 = 0u;
          memset(v131, 0, 58);
          v129 = -1;
          v122 = (__int128 *)&off_24C023500;
          v132 = 0u;
          v133 = 0u;
          v134 = 0u;
          v35 = *((_DWORD *)v26 + 8);
          v36 = v26[5];
          v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANEDebugInfo::DebugInfoInMem::Layer>>((uint64_t)v131, 1uLL);
          v40 = (_DWORD *)*((_QWORD *)&v130 + 1);
          v39 = (_DWORD *)v130;
          *(_DWORD *)v38 = v35;
          *(_QWORD *)(v38 + 4) = v36;
          v41 = v38;
          if (v40 != v39)
          {
            do
            {
              v42 = *(_QWORD *)(v40 - 3);
              v40 -= 3;
              v43 = v40[2];
              *(_QWORD *)(v41 - 12) = v42;
              v41 -= 12;
              *((_DWORD *)v41 + 2) = v43;
            }
            while (v40 != v39);
            v39 = (_DWORD *)v130;
          }
          v113 = v32;
          v44 = v38 + 12;
          *(_QWORD *)&v130 = v41;
          *((_QWORD *)&v130 + 1) = v38 + 12;
          v131[0] = &v38[12 * v37];
          if (v39)
            operator delete(v39);
          *((_QWORD *)&v130 + 1) = v44;
          v45 = *((unsigned int *)v26 + 8);
          v46 = *((unsigned int *)v26 + 12);
          v47 = v131[5];
          if (v131[5] >= v131[6])
          {
            v49 = (uint64_t)(v131[5] - v131[4]) >> 3;
            if ((unint64_t)(v49 + 1) >> 61)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v50 = (uint64_t)(v131[6] - v131[4]) >> 2;
            if (v50 <= v49 + 1)
              v50 = v49 + 1;
            if (v131[6] - v131[4] >= 0x7FFFFFFFFFFFFFF8uLL)
              v51 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v51 = v50;
            if (v51)
              v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v131[6], v51);
            else
              v52 = 0;
            v53 = &v52[8 * v49];
            *(_QWORD *)v53 = v45 | (v46 << 32);
            v48 = v53 + 8;
            v54 = (char *)v131[5];
            v55 = (char *)v131[4];
            if (v131[5] != v131[4])
            {
              do
              {
                v56 = *((_QWORD *)v54 - 1);
                v54 -= 8;
                *((_QWORD *)v53 - 1) = v56;
                v53 -= 8;
              }
              while (v54 != v55);
              v54 = (char *)v131[4];
            }
            v131[4] = v53;
            v131[5] = v48;
            v131[6] = &v52[8 * v51];
            if (v54)
              operator delete(v54);
          }
          else
          {
            *(_QWORD *)v131[5] = v45 | (v46 << 32);
            v48 = (_QWORD *)(v47 + 8);
          }
          v131[5] = v48;
          v57 = *((unsigned int *)v26 + 8);
          v58 = *((unsigned int *)v26 + 13);
          v59 = v131[2];
          if (v131[2] >= v131[3])
          {
            v61 = (uint64_t)(v131[2] - v131[1]) >> 3;
            if ((unint64_t)(v61 + 1) >> 61)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v62 = (uint64_t)(v131[3] - v131[1]) >> 2;
            if (v62 <= v61 + 1)
              v62 = v61 + 1;
            if (v131[3] - v131[1] >= 0x7FFFFFFFFFFFFFF8uLL)
              v63 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v63 = v62;
            if (v63)
              v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v131[3], v63);
            else
              v64 = 0;
            v65 = &v64[8 * v61];
            *(_QWORD *)v65 = v57 | (v58 << 32);
            v60 = v65 + 8;
            v67 = (char *)v131[1];
            v66 = (char *)v131[2];
            if (v131[2] != v131[1])
            {
              do
              {
                v68 = *((_QWORD *)v66 - 1);
                v66 -= 8;
                *((_QWORD *)v65 - 1) = v68;
                v65 -= 8;
              }
              while (v66 != v67);
              v66 = (char *)v131[1];
            }
            v131[1] = v65;
            v131[2] = v60;
            v131[3] = &v64[8 * v63];
            if (v66)
              operator delete(v66);
          }
          else
          {
            *(_QWORD *)v131[2] = v57 | (v58 << 32);
            v60 = (_QWORD *)(v59 + 8);
          }
          v131[2] = v60;
          LOWORD(v131[7]) = *(_WORD *)(v111 + 168);
          v69 = *((_DWORD *)v26 + 8);
          v70 = v26[7];
          v71 = (_QWORD *)*((_QWORD *)&v132 + 1);
          if (*((_QWORD *)&v132 + 1) >= (unint64_t)v133)
          {
            v73 = (_QWORD *)v132;
            v74 = (uint64_t)(*((_QWORD *)&v132 + 1) - v132) >> 4;
            v75 = v74 + 1;
            if ((unint64_t)(v74 + 1) >> 60)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v76 = v133 - v132;
            if ((uint64_t)(v133 - v132) >> 3 > v75)
              v75 = v76 >> 3;
            if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF0)
              v77 = 0xFFFFFFFFFFFFFFFLL;
            else
              v77 = v75;
            if (v77)
            {
              v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>((uint64_t)&v133, v77);
              v71 = (_QWORD *)*((_QWORD *)&v132 + 1);
              v73 = (_QWORD *)v132;
            }
            else
            {
              v78 = 0;
            }
            v79 = &v78[16 * v74];
            *(_DWORD *)v79 = v69;
            *((_QWORD *)v79 + 1) = v70;
            v80 = v79;
            if (v71 != v73)
            {
              do
              {
                *((_OWORD *)v80 - 1) = *((_OWORD *)v71 - 1);
                v80 -= 16;
                v71 -= 2;
              }
              while (v71 != v73);
              v73 = (_QWORD *)v132;
            }
            v72 = v79 + 16;
            *(_QWORD *)&v132 = v80;
            *((_QWORD *)&v132 + 1) = v79 + 16;
            *(_QWORD *)&v133 = &v78[16 * v77];
            if (v73)
              operator delete(v73);
          }
          else
          {
            **((_DWORD **)&v132 + 1) = v69;
            v71[1] = v70;
            v72 = (char *)(v71 + 2);
          }
          *((_QWORD *)&v132 + 1) = v72;
          v81 = *((_DWORD *)v26 + 8);
          v82 = (_QWORD *)v134;
          if ((unint64_t)v134 >= *((_QWORD *)&v134 + 1))
          {
            v84 = (_QWORD *)*((_QWORD *)&v133 + 1);
            v85 = (uint64_t)(v134 - *((_QWORD *)&v133 + 1)) >> 4;
            v86 = v85 + 1;
            if ((unint64_t)(v85 + 1) >> 60)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v87 = *((_QWORD *)&v134 + 1) - *((_QWORD *)&v133 + 1);
            if ((uint64_t)(*((_QWORD *)&v134 + 1) - *((_QWORD *)&v133 + 1)) >> 3 > v86)
              v86 = v87 >> 3;
            if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF0)
              v88 = 0xFFFFFFFFFFFFFFFLL;
            else
              v88 = v86;
            if (v88)
            {
              v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>((uint64_t)&v134 + 8, v88);
              v84 = (_QWORD *)*((_QWORD *)&v133 + 1);
              v82 = (_QWORD *)v134;
            }
            else
            {
              v89 = 0;
            }
            v90 = &v89[16 * v85];
            *(_DWORD *)v90 = v81;
            *((_QWORD *)v90 + 1) = 0;
            v91 = v90;
            if (v82 != v84)
            {
              do
              {
                *((_OWORD *)v91 - 1) = *((_OWORD *)v82 - 1);
                v91 -= 16;
                v82 -= 2;
              }
              while (v82 != v84);
              v84 = (_QWORD *)*((_QWORD *)&v133 + 1);
            }
            v83 = v90 + 16;
            *((_QWORD *)&v133 + 1) = v91;
            *(_QWORD *)&v134 = v90 + 16;
            *((_QWORD *)&v134 + 1) = &v89[16 * v88];
            if (v84)
              operator delete(v84);
          }
          else
          {
            *(_DWORD *)v134 = v81;
            v82[1] = 0;
            v83 = (char *)(v82 + 2);
          }
          *(_QWORD *)&v134 = v83;
          (*(void (**)(__int128 *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v5 + 80))(&__p, v5, 0, 0);
          (*(void (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)ViewFromOffset + 80))(ViewFromOffset, 0, 0);
          v92 = operator new(0xF0uLL);
          v157 = v92 + 15;
          v93 = v154[0];
          v92[12] = v153;
          v92[13] = v93;
          *(_OWORD *)((char *)v92 + 220) = *(_OWORD *)((char *)v154 + 12);
          v94 = v150;
          v92[8] = v149;
          v92[9] = v94;
          v95 = v152;
          v92[10] = v151;
          v92[11] = v95;
          v96 = v146;
          v92[4] = v145;
          v92[5] = v96;
          v97 = v148;
          v92[6] = v147;
          v92[7] = v97;
          v98 = v142;
          *v92 = __p;
          v92[1] = v98;
          v99 = v144;
          v92[2] = v143;
          v92[3] = v99;
          v155 = (ZinSliceLayer *)v92;
          v156 = (uint64_t)(v92 + 15);
          v100 = (*(uint64_t (**)(ZinSliceLayer *, _QWORD, _QWORD))(*(_QWORD *)v118 + 32))(v118, 0, 0);
          v101 = (ZinIrOpLayer *)ZinBuilder::CreateSliceLayer(v116, (uint64_t)v136, (uint64_t *)&v155, &v158, *(_DWORD *)(v100 + 88), (const ZinIrDynamicSliceUnitInfo *)&v122);
          if (v155)
          {
            v156 = (uint64_t)v155;
            operator delete(v155);
          }
          v102 = (uint64_t *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v101 + 32))(v101, 0, 0);
          v103 = (ZinIrTensor *)(*(uint64_t (**)(ZinSliceLayer *, _QWORD, _QWORD))(*(_QWORD *)v118 + 32))(v118, 0, 0);
          ZinIrTensor::CopyTensorMirInfo(v103, &v121);
          ZinIrTensor::SetTensorMirInfo(v102, &v121);
          v104 = v121;
          v121 = 0;
          if (v104)
            std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v121, v104);
          v140 = v118;
          v155 = (ZinSliceLayer *)&v140;
          v156 = 1;
          Layer2TDMapper::SourceLayer::SourceLayer(&__p, &v155);
          v105 = ZinIrOpLayerGraph::AddNode((uint64_t **)v117, v101, (ZinIrOpLayer ***)&__p);
          *(_QWORD *)&__p = &unk_24C02BB18;
          if (*((_QWORD *)&__p + 1))
          {
            *(_QWORD *)&v142 = *((_QWORD *)&__p + 1);
            operator delete(*((void **)&__p + 1));
          }
          v106 = operator new(0x10uLL);
          *(_QWORD *)&v142 = v106 + 2;
          *v106 = v5;
          v106[1] = ViewFromOffset;
          *(_QWORD *)&__p = v106;
          *((_QWORD *)&__p + 1) = v106 + 2;
          v107 = ZinIrOpLayerGraph::AddEdgesImplSrc<std::vector<ZinIrOpLayer *>>((uint64_t)v117, (uint64_t *)&__p, (uint64_t)v101);
          v6 = v28;
          if ((_QWORD)__p)
          {
            *((_QWORD *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          v122 = (__int128 *)&off_24C023500;
          if (*((_QWORD *)&v133 + 1))
          {
            *(_QWORD *)&v134 = *((_QWORD *)&v133 + 1);
            operator delete(*((void **)&v133 + 1));
          }
          if ((_QWORD)v132)
          {
            *((_QWORD *)&v132 + 1) = v132;
            operator delete((void *)v132);
          }
          ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)&v122);
          v108 = v26[1];
          if (v108)
          {
            do
            {
              v109 = (_QWORD **)v108;
              v108 = (_QWORD *)*v108;
            }
            while (v108);
          }
          else
          {
            do
            {
              v109 = (_QWORD **)v26[2];
              v17 = *v109 == v26;
              v26 = v109;
            }
            while (!v17);
          }
          v19 &= v115 & v113 & v114 & v105 & v107;
          v5 = v101;
          v26 = v109;
          if (v109 == v139)
            goto LABEL_132;
          continue;
      }
    }
  }
  v101 = v5;
LABEL_132:
  memset(v119, 0, sizeof(v119));
  v120 = 1065353216;
  v110 = ZinIrOpLayerGraph::MoveOutgoingEdges(v117, (uint64_t **)v118, v101, v119);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v119);
  if ((v19 & v110 & ZinIrOpLayerGraph::RemoveNode(v117, v118, 0) & 1) == 0)
    ZinAssertImpl("ANEC internal error: failed on graph manipulation when lower multi-dimension slices");
  v136[0] = off_24C01FBB0;
  if (v137 < 0)
    operator delete((void *)v136[1]);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v138, v139[0]);
}

void sub_206DAE228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a72;

  if (a72 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&STACK[0x208], (_QWORD *)STACK[0x210]);
  _Unwind_Resume(a1);
}

uint64_t ZinSliceLayer::LowerEngineTexture(ZinIrOpLayerGraph *a1, uint64_t **a2, ZinANELayer *this, uint64_t **a4)
{
  ZinIrOpLayer *TextureIndexInput;
  uint64_t v9;
  ZinANELayer *v10;

  TextureIndexInput = (ZinIrOpLayer *)ZinANELayer::GetTextureIndexInput(this);
  v9 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)TextureIndexInput + 32))(TextureIndexInput, 0, 0);
  if (!ZinTextureLayerUtils::EnforceIndexInterleave(a2, a1, TextureIndexInput, *(ZinIrOpLayer **)(v9 + 56), this, v10))
    ZinAssertImpl("Failed to enforce interleave for index");
  ZinTextureLayerUtils::InputFP16CopyCastIfNeeded(a2, a1, **a4, this);
  return 0;
}

void PackSliceInfo(const ZinIrDynamicSliceUnitInfo *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *i;
  uint64_t *v7;
  int *v8;
  int *j;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  uint64_t *v15;
  int v16;
  int v17;
  int *v18;
  int *k;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  int v26;
  int *v27;
  int *m;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  int v32;
  BOOL v33;
  uint64_t *v34;
  int v35;
  int *v36;
  int *n;
  uint64_t v38;
  int v39;
  _QWORD *v40;
  int v41;
  BOOL v42;
  uint64_t *v43;
  uint64_t *v44;
  void **v45;
  void **v46;
  void **v47;
  void **v48;
  void *__p[2];
  char v50;
  int *v51;

  *(_QWORD *)(a2 + 8) = 0;
  v4 = (_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v5 = (_QWORD *)*((_QWORD *)a1 + 23);
  for (i = (_QWORD *)*((_QWORD *)a1 + 24); v5 != i; v5 += 2)
  {
    v7 = (uint64_t *)v5[1];
    __p[0] = v5;
    std::__tree<std::__value_type<ZinIrDimension,SliceData>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,SliceData>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,SliceData>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>((uint64_t **)a2, (int *)v5, (uint64_t)&std::piecewise_construct, (_DWORD **)__p)[8] = v7;
  }
  v8 = (int *)*((_QWORD *)a1 + 10);
  for (j = (int *)*((_QWORD *)a1 + 11); v8 != j; v8 += 3)
  {
    ZinGetZinIrDimensionString(v8, __p);
    v10 = *v4;
    if (!*v4)
      goto LABEL_60;
    v11 = *v8;
    v12 = v4;
    do
    {
      v13 = *(_DWORD *)(v10 + 32);
      v14 = v13 < v11;
      if (v13 >= v11)
        v15 = (uint64_t *)v10;
      else
        v15 = (uint64_t *)(v10 + 8);
      if (!v14)
        v12 = (_QWORD *)v10;
      v10 = *v15;
    }
    while (*v15);
    if (v12 == v4 || v11 < *((_DWORD *)v12 + 8))
    {
LABEL_60:
      v45 = __p;
      if (v50 < 0)
        v45 = (void **)__p[0];
      ZinAssertImpl("Slice's CoordinateInfo specifies axis %s that's not in SliceAxis", (const char *)v45);
    }
    v16 = v8[1];
    v51 = v8;
    *((_DWORD *)std::__tree<std::__value_type<ZinIrDimension,SliceData>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,SliceData>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,SliceData>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>((uint64_t **)a2, v8, (uint64_t)&std::piecewise_construct, &v51)+ 10) = v16;
    v17 = v8[2];
    v51 = v8;
    *((_DWORD *)std::__tree<std::__value_type<ZinIrDimension,SliceData>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,SliceData>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,SliceData>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>((uint64_t **)a2, v8, (uint64_t)&std::piecewise_construct, &v51)+ 11) = v17;
    if (v50 < 0)
      operator delete(__p[0]);
  }
  v18 = (int *)*((_QWORD *)a1 + 13);
  for (k = (int *)*((_QWORD *)a1 + 14); v18 != k; v18 += 2)
  {
    ZinGetZinIrDimensionString(v18, __p);
    v20 = *v4;
    if (!*v4)
      goto LABEL_63;
    v21 = *v18;
    v22 = v4;
    do
    {
      v23 = *(_DWORD *)(v20 + 32);
      v24 = v23 < v21;
      if (v23 >= v21)
        v25 = (uint64_t *)v20;
      else
        v25 = (uint64_t *)(v20 + 8);
      if (!v24)
        v22 = (_QWORD *)v20;
      v20 = *v25;
    }
    while (*v25);
    if (v22 == v4 || v21 < *((_DWORD *)v22 + 8))
    {
LABEL_63:
      v46 = __p;
      if (v50 < 0)
        v46 = (void **)__p[0];
      ZinAssertImpl("Slice's PaddingInfo specifies axis %s that's not in SliceAxis", (const char *)v46);
    }
    v26 = v18[1];
    v51 = v18;
    *((_DWORD *)std::__tree<std::__value_type<ZinIrDimension,SliceData>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,SliceData>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,SliceData>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>((uint64_t **)a2, v18, (uint64_t)&std::piecewise_construct, &v51)+ 13) = v26;
    if (v50 < 0)
      operator delete(__p[0]);
  }
  v27 = (int *)*((_QWORD *)a1 + 16);
  for (m = (int *)*((_QWORD *)a1 + 17); v27 != m; v27 += 2)
  {
    ZinGetZinIrDimensionString(v27, __p);
    v29 = *v4;
    if (!*v4)
      goto LABEL_66;
    v30 = *v27;
    v31 = v4;
    do
    {
      v32 = *(_DWORD *)(v29 + 32);
      v33 = v32 < v30;
      if (v32 >= v30)
        v34 = (uint64_t *)v29;
      else
        v34 = (uint64_t *)(v29 + 8);
      if (!v33)
        v31 = (_QWORD *)v29;
      v29 = *v34;
    }
    while (*v34);
    if (v31 == v4 || v30 < *((_DWORD *)v31 + 8))
    {
LABEL_66:
      v47 = __p;
      if (v50 < 0)
        v47 = (void **)__p[0];
      ZinAssertImpl("Slice's SamplingInfo specifies axis %s that's not in SliceAxis", (const char *)v47);
    }
    v35 = v27[1];
    v51 = v27;
    *((_DWORD *)std::__tree<std::__value_type<ZinIrDimension,SliceData>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,SliceData>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,SliceData>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>((uint64_t **)a2, v27, (uint64_t)&std::piecewise_construct, &v51)+ 12) = v35;
    if (v50 < 0)
      operator delete(__p[0]);
  }
  v36 = (int *)*((_QWORD *)a1 + 20);
  for (n = (int *)*((_QWORD *)a1 + 21); v36 != n; v36 += 4)
  {
    ZinGetZinIrDimensionString(v36, __p);
    v38 = *v4;
    if (!*v4)
      goto LABEL_69;
    v39 = *v36;
    v40 = v4;
    do
    {
      v41 = *(_DWORD *)(v38 + 32);
      v42 = v41 < v39;
      if (v41 >= v39)
        v43 = (uint64_t *)v38;
      else
        v43 = (uint64_t *)(v38 + 8);
      if (!v42)
        v40 = (_QWORD *)v38;
      v38 = *v43;
    }
    while (*v43);
    if (v40 == v4 || v39 < *((_DWORD *)v40 + 8))
    {
LABEL_69:
      v48 = __p;
      if (v50 < 0)
        v48 = (void **)__p[0];
      ZinAssertImpl("Slice's SliceSize specifies axis %s that's not in SliceAxis", (const char *)v48);
    }
    v44 = (uint64_t *)*((_QWORD *)v36 + 1);
    v51 = v36;
    std::__tree<std::__value_type<ZinIrDimension,SliceData>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,SliceData>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,SliceData>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>((uint64_t **)a2, v36, (uint64_t)&std::piecewise_construct, &v51)[7] = v44;
    if (v50 < 0)
      operator delete(__p[0]);
  }
}

void sub_206DAE824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v15, *(_QWORD **)(v15 + 8));
  _Unwind_Resume(a1);
}

_QWORD *ZinSliceLayer::Clone(ZinIrOpLayer *a1, uint64_t *a2, __int128 *a3)
{
  _QWORD *v6;
  const ZinIrDynamicSliceInfo *v7;
  ZinIrDynamicSliceInfo *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *GroupId;
  uint64_t v17[2];
  ZinIrDynamicSliceInfo *v18;

  v6 = (_QWORD *)operator new();
  v7 = (const ZinIrDynamicSliceInfo *)*((_QWORD *)a1 + 8);
  v8 = (ZinIrDynamicSliceInfo *)operator new();
  ZinIrDynamicSliceInfo::ZinIrDynamicSliceInfo(v8, v7);
  v9 = *a2;
  v10 = (std::__shared_weak_count *)a2[1];
  v17[0] = v9;
  v17[1] = (uint64_t)v10;
  v18 = v8;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  ZinSliceLayer::ZinSliceLayer(v6, (uint64_t *)&v18, v17, a3);
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v18)
    (*(void (**)(ZinIrDynamicSliceInfo *))(*(_QWORD *)v18 + 8))(v18);
  GroupId = (uint64_t *)ZinIrOpLayer::GetGroupId(a1);
  ZinIrOpLayer::SetGroupId((uint64_t)v6, *GroupId);
  return v6;
}

void sub_206DAE998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  MEMORY[0x20BD002F8](v12, 0x10B3C4024B96488);
  _Unwind_Resume(a1);
}

uint64_t ZinSliceLayer::GetTextureUnitInfo(ZinSliceLayer *this)
{
  return *((_QWORD *)this + 8) + 16;
}

uint64_t ZinSliceLayer::CreateTELayer(ZinSliceLayer *this, const ZinIrHalParameters *a2)
{
  uint64_t v4;
  ZinIrTensor *v5;
  size_t v6;
  std::string *v7;
  char *v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  size_t v15;
  std::string *v16;
  char *v17;
  std::string *v18;
  __int128 v19;
  void **v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::string v29;
  void *v30[2];
  int64_t v31;
  std::string v32;
  void *__p[2];
  std::string::size_type v34;
  std::string v35;
  void *v36[2];
  int64_t v37;
  std::string v38;
  __int128 v39;
  std::string::size_type v40;
  uint64_t v41;
  std::__shared_weak_count *v42;

  v4 = *((_QWORD *)this + 8);
  v5 = (ZinIrTensor *)(*(uint64_t (**)(ZinSliceLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
  if (*((char *)this + 47) >= 0)
    v6 = *((unsigned __int8 *)this + 47);
  else
    v6 = *((_QWORD *)this + 4);
  v7 = &v38;
  std::string::basic_string[abi:ne180100]((uint64_t)&v38, v6 + 1);
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v38.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*((char *)this + 47) >= 0)
      v8 = (char *)this + 24;
    else
      v8 = (char *)*((_QWORD *)this + 3);
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 95;
  std::string::basic_string[abi:ne180100]<0>(&v35, "slice_dma");
  v9 = std::string::append(&v35, "_xfm", 4uLL);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v37 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)v36 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (v37 >= 0)
    v11 = v36;
  else
    v11 = (void **)v36[0];
  if (v37 >= 0)
    v12 = HIBYTE(v37);
  else
    v12 = (std::string::size_type)v36[1];
  v13 = std::string::append(&v38, (const std::string::value_type *)v11, v12);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v40 = v13->__r_.__value_.__r.__words[2];
  v39 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  ZinIrTensor::CreateTensor(v5, &v39, &v41);
  if (*((char *)this + 47) >= 0)
    v15 = *((unsigned __int8 *)this + 47);
  else
    v15 = *((_QWORD *)this + 4);
  v16 = &v32;
  std::string::basic_string[abi:ne180100]((uint64_t)&v32, v15 + 1);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v16 = (std::string *)v32.__r_.__value_.__r.__words[0];
  if (v15)
  {
    if (*((char *)this + 47) >= 0)
      v17 = (char *)this + 24;
    else
      v17 = (char *)*((_QWORD *)this + 3);
    memmove(v16, v17, v15);
  }
  *(_WORD *)((char *)&v16->__r_.__value_.__l.__data_ + v15) = 95;
  std::string::basic_string[abi:ne180100]<0>(&v29, "slice_te");
  v18 = std::string::append(&v29, "_xfm", 4uLL);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v31 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)v30 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (v31 >= 0)
    v20 = v30;
  else
    v20 = (void **)v30[0];
  if (v31 >= 0)
    v21 = HIBYTE(v31);
  else
    v21 = (std::string::size_type)v30[1];
  v22 = std::string::append(&v32, (const std::string::value_type *)v20, v21);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v34 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  v24 = ZinTESliceFactory::Create(v4, &v41, (uint64_t)__p, (uint64_t)a2);
  if (SHIBYTE(v34) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v31) < 0)
    operator delete(v30[0]);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  v25 = v42;
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if (SHIBYTE(v37) < 0)
    operator delete(v36[0]);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  return v24;
}

void sub_206DAED00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  if (a33 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v45 - 80);
  if (*(char *)(v45 - 89) < 0)
    operator delete(*(void **)(v45 - 112));
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
    operator delete(a34);
  if (*(char *)(v45 - 113) < 0)
    operator delete(*(void **)(v45 - 136));
  _Unwind_Resume(a1);
}

uint64_t ZinSliceLayer::CanBeFusedToPEIndex(ZinSliceLayer *this)
{
  uint64_t result;
  uint64_t v3;
  _OWORD v4[2];
  uint64_t v5;

  result = ZinSliceLayer::CanBeConvertedToPEIndex(this);
  if ((_DWORD)result)
  {
    v3 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)this + 11) + 8) + 32))(*(_QWORD *)(*((_QWORD *)this + 11) + 8), 0, 0);
    v4[0] = vdupq_n_s64(1uLL);
    v4[1] = v4[0];
    v5 = 1;
    return ZinTensorDimensionsEqual((_QWORD *)(v3 + 48), v4);
  }
  return result;
}

void ZinSliceLayer::CreatePEIndex(ZinSliceLayer *this@<X0>, const ZinBroadcastLayer *a2@<X2>, char a3@<W1>, uint64_t a4@<X8>)
{
  uint64_t v7;
  int v8;
  size_t v9;
  __int128 *p_p;
  char *v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t Broadcast;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  void *v44;
  std::__shared_weak_count *v45;
  char *v46;
  void *v47[2];
  __int128 v48;
  int v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  _QWORD *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  _QWORD v56[3];
  char v57;
  __int128 __p;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  int v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v7 = *((_QWORD *)this + 8);
  v8 = **(_DWORD **)(v7 + 200);
  if (ZinTextureLayerUtils::HasValidBroadcastWidthForPEIndexing(a2, v8))
  {
    if (*((char *)this + 47) >= 0)
      v9 = *((unsigned __int8 *)this + 47);
    else
      v9 = *((_QWORD *)this + 4);
    p_p = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v9 + 12);
    if (SBYTE7(v59) < 0)
      p_p = (__int128 *)__p;
    if (v9)
    {
      if (*((char *)this + 47) >= 0)
        v11 = (char *)this + 24;
      else
        v11 = (char *)*((_QWORD *)this + 3);
      memmove(p_p, v11, v9);
    }
    strcpy((char *)p_p + v9, "_pe_indexing");
    v12 = ZinObjectNameFactory::ZinObjectNameFactory(v56, &__p);
    if (SBYTE7(v59) < 0)
      operator delete((void *)__p);
    v13 = *(_QWORD *)(*(_QWORD *)(v7 + 176) + 8);
    v14 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, __n128))(***((_QWORD ***)this + 11) + 32))(**((_QWORD **)this + 11), 0, 0, v12);
    v15 = v14;
    switch(v8)
    {
      case 1:
        v16 = (uint64_t *)(v14 + 80);
        goto LABEL_23;
      case 2:
        v16 = (uint64_t *)(v14 + 56);
        goto LABEL_23;
      case 3:
        v16 = (uint64_t *)(v14 + 64);
        goto LABEL_23;
      case 4:
        v16 = (uint64_t *)(v14 + 72);
LABEL_23:
        v17 = *v16;
        v18 = operator new();
        ZinIrIndexInfo::ZinIrIndexInfo(v18, v8, v17 - v13, a3);
        v55 = v18;
        v19 = *((_QWORD *)this + 2);
        LODWORD(v18) = *(_DWORD *)((*(uint64_t (**)(ZinSliceLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0)+ 88);
        v20 = (*(uint64_t (**)(ZinSliceLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
        ZinObjectNameFactory::CreateName((uint64_t)v56, 0, (std::string *)v47);
        v52 = 0;
        v44 = 0;
        v45 = 0;
        LODWORD(__p) = 0;
        v59 = 0uLL;
        *((_QWORD *)&__p + 1) = 0;
        LODWORD(v60) = 0;
        ZinIrTensor::CreateTensor(v19, v18, (__int128 *)(v20 + 48), (__int128 *)v47, &v52, (uint64_t *)&v44, (unsigned int *)&__p, &v53);
        v21 = v45;
        if (v45)
        {
          p_shared_owners = (unint64_t *)&v45->__shared_owners_;
          do
            v23 = __ldaxr(p_shared_owners);
          while (__stlxr(v23 - 1, p_shared_owners));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        v24 = v52;
        v52 = 0;
        if (v24)
          std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v52, v24);
        if (SBYTE7(v48) < 0)
          operator delete(v47[0]);
        v25 = operator new();
        v50 = v53;
        v51 = v54;
        if (v54)
        {
          v26 = (unint64_t *)&v54->__shared_owners_;
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
        ZinObjectNameFactory::CreateName((uint64_t)v56, 1u, (std::string *)&__p);
        ZinIndexLayer::ZinIndexLayer(v25, &v55, &v50, &__p);
        if (SBYTE7(v59) < 0)
          operator delete((void *)__p);
        v28 = v51;
        if (v51)
        {
          v29 = (unint64_t *)&v51->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        *(_OWORD *)v47 = 0u;
        v48 = 0u;
        v49 = 1065353216;
        v31 = *(_QWORD *)(v15 + 56);
        if (v31 <= 1)
          v31 = 0;
        if (v8 == 2)
          v31 = v13;
        v32 = *(_QWORD *)(v15 + 80);
        if (v32 <= 1)
          v32 = 0;
        if (v8 == 1)
          v33 = v13;
        else
          v33 = v32;
        if (v31)
        {
          LODWORD(__p) = 2;
          *((_QWORD *)&__p + 1) = v31;
          std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::pair<ZinIrDimension const,unsigned long> const&>((uint64_t)v47, (int *)&__p, &__p);
        }
        if (v33)
        {
          LODWORD(__p) = 1;
          *((_QWORD *)&__p + 1) = v33;
          std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::pair<ZinIrDimension const,unsigned long> const&>((uint64_t)v47, (int *)&__p, &__p);
        }
        if (*((_QWORD *)&v48 + 1))
        {
          v34 = *((_QWORD *)this + 2);
          (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)this + 11)
                                                                                               + 8)
                                                                                 + 80))(&__p, *(_QWORD *)(*((_QWORD *)this + 11) + 8), 0, 0);
          v35 = operator new(0x78uLL);
          v45 = (std::__shared_weak_count *)((char *)v35 + 120);
          v46 = (char *)v35 + 120;
          v36 = v63;
          v35[4] = v62;
          v35[5] = v36;
          v35[6] = v64;
          *((_DWORD *)v35 + 28) = v65;
          v37 = v59;
          *v35 = __p;
          v35[1] = v37;
          v38 = v61;
          v35[2] = v60;
          v35[3] = v38;
          v44 = v35;
          Broadcast = ZinBuilder::CreateBroadcast(v34, (uint64_t)v56, (uint64_t *)&v44, (uint64_t)v47, 3);
          if (v44)
          {
            v45 = (std::__shared_weak_count *)v44;
            operator delete(v44);
          }
        }
        else
        {
          Broadcast = 0;
        }
        *(_QWORD *)a4 = v25;
        *(_QWORD *)(a4 + 8) = 0;
        *(_QWORD *)(a4 + 16) = Broadcast;
        *(_BYTE *)(a4 + 24) = 1;
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v47);
        v40 = v54;
        if (v54)
        {
          v41 = (unint64_t *)&v54->__shared_owners_;
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
        v43 = v55;
        v55 = 0;
        if (v43)
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
        break;
      default:
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinSliceLayer::CreatePEIndex();
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 24) = 0;
        break;
    }
    v56[0] = off_24C01FBB0;
    if (v57 < 0)
      operator delete((void *)v56[1]);
  }
  else
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 24) = 0;
  }
}

void sub_206DAF360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,void (**a27)(ZinObjectNameFactory *__hidden this),void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v41;

  if (__p)
    operator delete(__p);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a13);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  v41 = a26;
  a26 = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  a27 = off_24C01FBB0;
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(a1);
}

void ZinSliceLayer::CreatePEIndexIfPossible(ZinSliceLayer *this@<X0>, const ZinIrOpLayer *a2@<X1>, const ZinBroadcastLayer *a3@<X2>, _BYTE *a4@<X8>)
{
  char v8;

  if ((ZinSliceLayer::CanBeFusedToPEIndex(this) & 1) != 0
    && (ZinTextureLayerUtils::HasValidInputsForPEIndexing((uint64_t)this, (uint64_t)a2) & 1) != 0)
  {
    if (a2)
      v8 = *((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11) == 16;
    else
      v8 = 0;
    ZinSliceLayer::CreatePEIndex(this, a3, v8, (uint64_t)a4);
  }
  else
  {
    *a4 = 0;
    a4[24] = 0;
  }
}

uint64_t ZinSliceLayer::ComputeOutputDimensions(uint64_t a1, __int128 **a2, _QWORD *a3)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;

  v3 = *(_QWORD *)(a1 + 64);
  v4 = **a2;
  v5 = (*a2)[1];
  a3[4] = *((_QWORD *)*a2 + 4);
  *(_OWORD *)a3 = v4;
  *((_OWORD *)a3 + 1) = v5;
  v6 = *(_QWORD *)(v3 + 176);
  v7 = *(_QWORD *)(v3 + 184);
  if (v6 != v7)
  {
    result = 3;
    while (2)
    {
      v9 = a3;
      switch(*(_DWORD *)v6)
      {
        case 0:
          goto LABEL_8;
        case 1:
          v9 = a3 + 4;
          goto LABEL_8;
        case 2:
          v9 = a3 + 1;
          goto LABEL_8;
        case 3:
          v9 = a3 + 2;
          goto LABEL_8;
        case 4:
          v9 = a3 + 3;
LABEL_8:
          *v9 = *(_QWORD *)(v6 + 8);
          goto LABEL_9;
        case 5:
          return result;
        default:
LABEL_9:
          v6 += 16;
          if (v6 == v7)
            return 0;
          continue;
      }
    }
  }
  return 0;
}

BOOL ZinSliceLayer::CanBeUnquantized(uint64_t a1, int a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
  return ZinQuantizationUtils::TensorFormatCompatible(*(_DWORD *)(v3 + 88), a2);
}

BOOL ZinSliceLayer::IsSplitable(uint64_t a1, int a2)
{
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;

  if ((a2 - 2) < 3)
    return 0;
  if (a2 == 5)
    ZinAssertImpl("Invalid axis");
  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_DWORD **)(v3 + 176);
  v5 = *(_DWORD **)(v3 + 184);
  if (v4 != v5)
  {
    while (*v4 != a2)
    {
      v4 += 4;
      if (v4 == v5)
      {
        v4 = v5;
        return v4 == v5;
      }
    }
  }
  return v4 == v5;
}

uint64_t ZinSliceLayer::DebugDetailPrint@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  _QWORD v5[3];
  _QWORD v6[10];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v8);
}

void sub_206DAF714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ZinSliceLayer::GetPaddingMode(ZinSliceLayer *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*((_QWORD *)this + 8) + 120);
  if (*(_QWORD *)(*((_QWORD *)this + 8) + 128) == v1)
    return 8;
  else
    return *(unsigned int *)(v1 + 4);
}

uint64_t ZinSliceLayer::SetPaddingMode(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 64);
  v3 = *(_QWORD *)(v2 + 120);
  v4 = *(_QWORD *)(v2 + 128);
  while (v3 != v4)
  {
    *(_DWORD *)(v3 + 4) = a2;
    v3 += 8;
  }
  return result;
}

void ZinSliceLayer::ValidateSemantics_Impl(ZinIrOpLayer *a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD **v15;
  const char *v16;
  int v17;
  int v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  int v28;
  _QWORD *v29;
  _QWORD **v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  BOOL v35;
  _QWORD **v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v45;
  _QWORD **v46;
  void **v47;
  void *v48[2];
  char v49;
  void *__p;
  char *v51;
  char *v52;
  _QWORD **v53;
  _QWORD *v54[2];

  if (a2[1] - *a2 != 240)
    ZinAssertImpl("DynamicSlice should have 2 inputs");
  ZinIrOpLayer::ValidateSemantics_Impl(a1, a2, a3);
  v6 = *a2;
  v7 = (_QWORD *)*((_QWORD *)a1 + 8);
  for (i = v7[18]; i != v7[19]; i += 8)
  {
    if (!*(_DWORD *)(i + 4))
      ZinAssertImpl("Slice doesn't support bilinear sampling");
  }
  v9 = (uint64_t)(v7[26] - v7[25]) >> 4;
  v10 = v7[23] - v7[22];
  v12 = v7[12];
  v11 = v7[13];
  if (v9 != v10 >> 4)
  {
    v14 = v7[15];
    v13 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v12) >> 2);
    goto LABEL_90;
  }
  v13 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v12) >> 2);
  v14 = v7[15];
  if (v9 != v13 || v9 != (v7[16] - v14) >> 3)
LABEL_90:
    ZinAssertImpl("DynamicSlice must have same array size between offset_order=%ld, slice_size=%ld, coordinate_info=%ld, padding_info=%ld", v9, v10 >> 4, v13, (v7[16] - v14) >> 3);
  PackSliceInfo((const ZinIrDynamicSliceUnitInfo *)(v7 + 2), (uint64_t)&v53);
  if (v54[1] != (_QWORD *)((uint64_t)(v7[26] - v7[25]) >> 4))
    ZinAssertImpl(&byte_207AF6795);
  __p = 0;
  v51 = 0;
  v52 = 0;
  v15 = v53;
  if (v53 != v54)
  {
    v16 = "Normalized coordinate modes are not supported";
    do
    {
      if (*((_DWORD *)v15 + 11))
      {
        if (!a3[2069])
          goto LABEL_84;
        if (IsIntegerFormat<ZinTensorFormat>(*(_DWORD *)(v6 + 120)))
        {
          v16 = "Normalized coordinate modes doesn't support integer-typed indices";
LABEL_84:
          ZinAssertImpl(v16);
        }
        if (*((_DWORD *)v15 + 10) == 1)
          ZinAssertImpl("Coordinate mode range of MinusOneToOne is not supported");
        v17 = *((_DWORD *)v15 + 13);
        v18 = *((_DWORD *)v15 + 11);
        if (v17 == 5 && v18 == 2)
          ZinAssertImpl("padding mode %s not compatible with coordinate mode %s", "Symmetric", "Reflective");
        if (v17 == 6 && v18 == 1)
          ZinAssertImpl("padding mode %s not compatible with coordinate mode %s", "Reflective", "Symmetric");
      }
      else
      {
        v19 = v51;
        if (v51 >= v52)
        {
          v21 = (char *)__p;
          v22 = (v51 - (_BYTE *)__p) >> 2;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 62)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v24 = v52 - (_BYTE *)__p;
          if ((v52 - (_BYTE *)__p) >> 1 > v23)
            v23 = v24 >> 1;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
            v25 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v25 = v23;
          if (v25)
          {
            v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v52, v25);
            v21 = (char *)__p;
            v19 = v51;
          }
          else
          {
            v26 = 0;
          }
          v27 = &v26[4 * v22];
          *(_DWORD *)v27 = *((_DWORD *)v15 + 8);
          v20 = v27 + 4;
          while (v19 != v21)
          {
            v28 = *((_DWORD *)v19 - 1);
            v19 -= 4;
            *((_DWORD *)v27 - 1) = v28;
            v27 -= 4;
          }
          __p = v27;
          v51 = v20;
          v52 = &v26[4 * v25];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *(_DWORD *)v51 = *((_DWORD *)v15 + 8);
          v20 = v19 + 4;
        }
        v51 = v20;
      }
      v29 = v15[1];
      if (v29)
      {
        do
        {
          v30 = (_QWORD **)v29;
          v29 = (_QWORD *)*v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          v30 = (_QWORD **)v15[2];
          v34 = *v30 == v15;
          v15 = v30;
        }
        while (!v34);
      }
      v15 = v30;
    }
    while (v30 != v54);
  }
  v31 = (uint64_t *)(v6 + 8);
  ZinTextureLayerUtils::ValidateDataTensorDimensions((uint64_t *)(v6 + 8), (uint64_t)&__p, (int *)(v6 + 120), (uint64_t)a3);
  v32 = *(_QWORD *)(v6 + 128);
  v33 = *(_QWORD *)(v6 + 160);
  v34 = v32 == 1 && v33 == 1;
  v35 = v34 && *(_QWORD *)(v6 + 144) == 1;
  if (!v35 || *(_QWORD *)(v6 + 152) != 1 && *(_QWORD *)(v6 + 136) != 1)
    ZinAssertImpl("Invalid index input shape N%zdD%zdC%zdH%zdW%zd. Only Channel vector or Width vector allowed", v32, v33, *(_QWORD *)(v6 + 136), *(_QWORD *)(v6 + 144), *(_QWORD *)(v6 + 152));
  v36 = v53;
  if (v53 != v54)
  {
    v37 = (uint64_t *)(v6 + 32);
    v38 = (uint64_t *)(v6 + 24);
    v39 = (uint64_t *)(v6 + 16);
    v40 = (uint64_t *)(v6 + 40);
    do
    {
      v41 = v31;
      switch(*((_DWORD *)v36 + 8))
      {
        case 0:
          break;
        case 1:
          v41 = v40;
          break;
        case 2:
          v41 = v39;
          break;
        case 3:
          v41 = v38;
          break;
        case 4:
          v41 = v37;
          break;
        default:
          ZinAssertImpl("Unsupported dimension");
      }
      v42 = *v41;
      v43 = (uint64_t)v36[7];
      ZinGetZinIrDimensionString((_DWORD *)v36 + 8, v48);
      if (v43 < 1 || v43 > v42)
      {
        v47 = v48;
        if (v49 < 0)
          v47 = (void **)v48[0];
        ZinAssertImpl("Invalid slice size[%s]=%ld. Out of boundary [1,%ld]", (const char *)v47, v36[7], v42);
      }
      if (v49 < 0)
        operator delete(v48[0]);
      v45 = v36[1];
      if (v45)
      {
        do
        {
          v46 = (_QWORD **)v45;
          v45 = (_QWORD *)*v45;
        }
        while (v45);
      }
      else
      {
        do
        {
          v46 = (_QWORD **)v36[2];
          v34 = *v46 == v36;
          v36 = v46;
        }
        while (!v34);
      }
      v36 = v46;
    }
    while (v46 != v54);
  }
  if (__p)
  {
    v51 = (char *)__p;
    operator delete(__p);
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v53, v54[0]);
}

void sub_206DAFC28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,uint64_t a24,char a25,_QWORD *a26)
{
  if (__p)
    operator delete(__p);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a25, a26);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<ZinIrDimension,SliceData>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,SliceData>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,SliceData>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x48uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 5) = 0;
    *((_QWORD *)v11 + 6) = 0;
    v11[13] = 1;
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 8) = 0;
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void ZinSliceLayer::CreatePEIndex()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Error: Invalid indexing axis", v0, 2u);
}

uint64_t ZinValidationBacking::Valid(ZinValidationBacking *this)
{
  return 1;
}

uint64_t ZinValidationBacking::HasFileBacking(ZinValidationBacking *this)
{
  return 0;
}

void ZinValidationBacking::Allocate(ZinValidationBacking *this)
{
  ZinAssertImpl("Cannot perform file-backed allocation during validation");
}

uint64_t ZinIrLocalRegAlloc::ZinIrLocalRegAlloc(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v7;
  void *v8;
  ZinIrOpLayer **v9;
  ZinIrOpLayer **v10;
  ZinIrOpLayer **v11;
  ZinIrOpLayer *v12;
  char IsEngineLayer;
  uint64_t v15;
  uint64_t v16;
  void *__p;
  __int128 v18;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = *a4;
  *(_QWORD *)(a1 + 24) = a4[1];
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  v7 = a1 + 64;
  *(_DWORD *)(a1 + 96) = 1065353216;
  v15 = a1 + 104;
  std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__hash_table(a1 + 104, a3);
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 176) = 1065353216;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 216) = 1065353216;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_DWORD *)(a1 + 256) = 1065353216;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 296) = 1065353216;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 344) = a1 + 352;
  *(_QWORD *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_DWORD *)(a1 + 400) = 1065353216;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_DWORD *)(a1 + 440) = 1065353216;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_DWORD *)(a1 + 480) = 1065353216;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_DWORD *)(a1 + 520) = 1065353216;
  *(_DWORD *)(a1 + 560) = 1065353216;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  v16 = v7;
  std::map<BarIdType,unsigned char>::map[abi:ne180100]((uint64_t *)(a1 + 568), a5);
  std::map<std::string,ZinIOBarInfo>::map[abi:ne180100]((uint64_t *)(a1 + 592), a5 + 24);
  *(_QWORD *)(a1 + 624) = 0;
  *(_QWORD *)(a1 + 616) = 0;
  *(_QWORD *)(a1 + 632) = 0;
  std::vector<ZinDynamicOffsetCustomBarCmd>::__init_with_size[abi:ne180100]<ZinDynamicOffsetCustomBarCmd*,ZinDynamicOffsetCustomBarCmd*>((_QWORD *)(a1 + 616), *(_QWORD *)(a5 + 48), *(_QWORD *)(a5 + 56), (uint64_t)(*(_QWORD *)(a5 + 56) - *(_QWORD *)(a5 + 48)) >> 6);
  ZinIrScheduleUtil::GetOrderedLayers(*(char **)a1, &__p);
  v8 = *(void **)(a1 + 40);
  if (v8)
  {
    *(_QWORD *)(a1 + 48) = v8;
    operator delete(v8);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
  }
  v9 = (ZinIrOpLayer **)__p;
  *(_QWORD *)(a1 + 40) = __p;
  v10 = (ZinIrOpLayer **)v18;
  *(_OWORD *)(a1 + 48) = v18;
  v11 = v10;
  while (v9 != v11)
  {
    v12 = *v9;
    __p = 0;
    v18 = 0uLL;
    if ((ZinIrOpLayer::IsNoOp(v12, (uint64_t *)&__p) & 1) != 0)
      IsEngineLayer = 1;
    else
      IsEngineLayer = ZinIrOpLayer::IsEngineLayer(v12);
    if (__p)
    {
      *(_QWORD *)&v18 = __p;
      operator delete(__p);
    }
    if ((IsEngineLayer & 1) == 0)
      ZinAssertImpl("Scheduled layers should only consist of no-op and engine layers.", a1 + 568, a1 + 344, a1 + 304, a1 + 224, a1 + 184, v15, v16);
    ++v9;
  }
  ZinIrLocalRegAlloc::InitializeTensorAttributeCache((ZinIrLocalRegAlloc *)a1);
  ZinLiveRangeUtils<ZinIrOpLayer,ZinIrTensor>::ZinIrComputeLiveRanges((ZinIrOpLayer ***)(a1 + 40), (_QWORD *)(a1 + 144));
  return a1;
}

void sub_206DAFFE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD **v23;
  void *v25;

  ZinBarUsage::~ZinBarUsage(a9);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v21 + 384);
  std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table(v18);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v21 + 304);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v19);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v21 + 224);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(a10, *v23);
  std::__hash_table<std::__hash_value_type<ZinIrTensor const*,ZinIrLocalRegAlloc::TensorAttributeCache>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,ZinIrLocalRegAlloc::TensorAttributeCache>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,ZinIrLocalRegAlloc::TensorAttributeCache>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,ZinIrLocalRegAlloc::TensorAttributeCache>>>::~__hash_table(a11);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v22);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(a12);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(a13);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v21);
  std::__hash_table<std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>,std::__unordered_map_hasher<MemType,std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>,std::hash<MemType>,std::equal_to<MemType>,true>,std::__unordered_map_equal<MemType,std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>,std::equal_to<MemType>,std::hash<MemType>,true>,std::allocator<std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>>>::~__hash_table(a14);
  std::__hash_table<std::__hash_value_type<ZinIrDimension,std::set<long>>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,std::set<long>>>>::~__hash_table(a15);
  v25 = *v20;
  if (*v20)
  {
    *(_QWORD *)(v17 + 48) = v25;
    operator delete(v25);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::InitializeTileHeight(uint64_t this)
{
  ZinIrOpLayer **v1;
  ZinIrOpLayer **v2;
  ZinIrOpLayer *v3;
  uint64_t v4;

  v1 = *(ZinIrOpLayer ***)(this + 40);
  v2 = *(ZinIrOpLayer ***)(this + 48);
  while (v1 != v2)
  {
    v3 = *v1;
    this = ZinIrOpLayer::IsANELayer(*v1);
    if ((_DWORD)this)
    {
      v4 = *((_QWORD *)v3 + 33);
      if (!*(_BYTE *)(v4 + 233))
        this = ZinMirL2Config::ZinMirSetTileHeight((ZinMirL2Config *)(v4 + 120), v3, 1);
    }
    ++v1;
  }
  return this;
}

void ZinIrLocalRegAlloc::InitializeWorkUnitShape(ZinIrLocalRegAlloc *this)
{
  ZinIrOpLayer **v1;
  ZinIrOpLayer **v2;
  NSObject *v3;
  ZinIrOpLayer *v4;
  uint64_t v5;
  unsigned int v6;
  char v7;
  void *__p;
  _QWORD v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  v1 = (ZinIrOpLayer **)*((_QWORD *)this + 5);
  v2 = (ZinIrOpLayer **)*((_QWORD *)this + 6);
  if (v1 != v2)
  {
    v3 = MEMORY[0x24BDACB70];
    do
    {
      v4 = *v1;
      if (ZinIrOpLayer::IsANELayer(*v1))
      {
        v5 = *((_QWORD *)v4 + 33);
        if (ZinIrOpLayer::IsNELayer(v4))
        {
          v6 = *(_DWORD *)(ZinIrOpLayer::GetInputTensor(v4, 0) + 88);
          ZinIrOpLayer::GetInputTensorDimensions(v4, &__p);
          v7 = ZinMirL2Config::ZinMirSetWorkUnitShape(v5 + 120, v4, v6);
          if (__p)
          {
            v9[0] = __p;
            operator delete(__p);
          }
          if ((v7 & 1) == 0 && os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
          {
            __p = (void *)0x119804000202;
            LOWORD(v9[0]) = 2080;
            *(_QWORD *)((char *)v9 + 2) = "/Library/Caches/com.apple.xbs/Sources/ANECompiler/libs/inference/compiler/ZinI"
                                          "rRegAlloc/src/ZinIrLocalRegAlloc.cpp";
            _os_log_error_impl(&dword_2069AB000, v3, OS_LOG_TYPE_ERROR, "Error: failed workunit selection, line: %d, file: %s", (uint8_t *)&__p, 0x12u);
          }
        }
        else if (!*(_BYTE *)(v5 + 256))
        {
          *(_OWORD *)(v5 + 240) = xmmword_207A7E150;
          *(_BYTE *)(v5 + 256) = 0;
        }
      }
      ++v1;
    }
    while (v1 != v2);
  }
}

void sub_206DB02C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinIrLocalRegAlloc::UpdateScheduleToLayerMap(ZinIrLocalRegAlloc *this)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *i;
  uint64_t **v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)((char *)this + 64);
  std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,std::map<ZinIrOpLayer *,float,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<std::pair<ZinIrOpLayer * const,float>>>>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,std::map<ZinIrOpLayer *,float,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<std::pair<ZinIrOpLayer * const,float>>>>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,std::map<ZinIrOpLayer *,float,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<std::pair<ZinIrOpLayer * const,float>>>>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,std::map<ZinIrOpLayer *,float,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<std::pair<ZinIrOpLayer * const,float>>>>>>::clear((uint64_t)this + 64);
  v3 = (uint64_t *)*((_QWORD *)this + 5);
  for (i = (uint64_t *)*((_QWORD *)this + 6); v3 != i; ++v3)
  {
    v8 = *v3;
    v9 = *(unint64_t **)(v8 + 48);
    v5 = (uint64_t **)std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::find<long>(v2, (unint64_t *)&v9);
    if (v5)
    {
      std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>(v5 + 3, &v8, &v8);
    }
    else
    {
      v9 = &v7;
      v10 = v8;
      v7 = *(_QWORD *)(v8 + 48);
      v6 = (uint64_t **)std::__hash_table<std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::set<ZinNamedType<unsigned long,ScheduleTag>>>,std::__unordered_map_hasher<ZinNamedType<unsigned long,AneIndexTag>,std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::set<ZinNamedType<unsigned long,ScheduleTag>>>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,true>,std::__unordered_map_equal<ZinNamedType<unsigned long,AneIndexTag>,std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::set<ZinNamedType<unsigned long,ScheduleTag>>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,true>,std::allocator<std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::set<ZinNamedType<unsigned long,ScheduleTag>>>>>::__emplace_unique_key_args<ZinNamedType<unsigned long,AneIndexTag>,std::piecewise_construct_t const&,std::tuple<ZinNamedType<unsigned long,AneIndexTag> const&>,std::tuple<>>((uint64_t)v2, &v7, (uint64_t)&std::piecewise_construct, (uint64_t **)&v9);
      std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__assign_unique<ZinIrOpLayer * const*>(v6 + 3, &v10, &v11);
    }
  }
}

uint64_t ZinIrLocalRegAlloc::TrackLayersWithLockedWU(ZinIrLocalRegAlloc *this)
{
  char *v2;
  uint64_t result;
  ZinIrOpLayer **v4;
  ZinIrOpLayer **v5;
  ZinIrOpLayer *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD __dst[113];
  _BYTE v10[40];
  int v11;
  _BYTE v12[40];
  int v13;
  _BYTE v14[40];
  ZinIrOpLayer *v15;

  v2 = (char *)this + 408;
  std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::clear((_QWORD *)this + 51);
  result = (uint64_t)std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::clear((_QWORD *)this + 46);
  v4 = (ZinIrOpLayer **)*((_QWORD *)this + 5);
  v5 = (ZinIrOpLayer **)*((_QWORD *)this + 6);
  if (v4 != v5)
  {
    while (1)
    {
      v15 = *v4;
      v6 = v15;
      result = ZinIrOpLayer::IsPELayer(v15);
      if (!(_DWORD)result)
        break;
      v7 = (_DWORD *)*((_QWORD *)v15 + 33);
      if (v7)
      {
        memcpy(__dst, v7 + 30, sizeof(__dst));
        std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v10, (uint64_t)(v7 + 144));
        v11 = v7[154];
        std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v12, (uint64_t)(v7 + 156));
        v13 = v7[166];
        std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v14, (uint64_t)(v7 + 168));
        if (LOBYTE(__dst[34]))
          std::__hash_table<ZinIrTensor const*,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const* const&>((uint64_t)this + 368, &v15, &v15);
LABEL_10:
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v14);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v12);
        result = std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v10);
      }
LABEL_11:
      if (++v4 == v5)
        return result;
    }
    result = ZinIrOpLayer::IsNELayer(v6);
    if (!(_DWORD)result)
      goto LABEL_11;
    v8 = (_DWORD *)*((_QWORD *)v15 + 33);
    if (!v8)
      goto LABEL_11;
    memcpy(__dst, v8 + 30, sizeof(__dst));
    std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v10, (uint64_t)(v8 + 144));
    v11 = v8[154];
    std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v12, (uint64_t)(v8 + 156));
    v13 = v8[166];
    std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v14, (uint64_t)(v8 + 168));
    if (BYTE2(__dst[7]))
      std::__hash_table<ZinIrTensor const*,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const* const&>((uint64_t)v2, &v15, &v15);
    goto LABEL_10;
  }
  return result;
}

void sub_206DB0588(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ZinMirL2Config::~ZinMirL2Config((ZinMirL2Config *)va);
  _Unwind_Resume(a1);
}

void ZinIrLocalRegAlloc::~ZinIrLocalRegAlloc(char **this)
{
  char *v2;
  char *v3;
  void **v4;

  v2 = (char *)(this + 71);
  v4 = (void **)(this + 77);
  std::vector<ZinDynamicOffsetCustomBarCmd>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy((uint64_t)(this + 74), this[75]);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v2, this[72]);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)(this + 66));
  std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table((uint64_t)(this + 61));
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)(this + 56));
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)(this + 51));
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)(this + 46));
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)(this + 43), this[44]);
  std::__hash_table<std::__hash_value_type<ZinIrTensor const*,ZinIrLocalRegAlloc::TensorAttributeCache>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,ZinIrLocalRegAlloc::TensorAttributeCache>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,ZinIrLocalRegAlloc::TensorAttributeCache>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,ZinIrLocalRegAlloc::TensorAttributeCache>>>::~__hash_table((uint64_t)(this + 38));
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)(this + 33));
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)(this + 28));
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)(this + 23));
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)(this + 18));
  std::__hash_table<std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>,std::__unordered_map_hasher<MemType,std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>,std::hash<MemType>,std::equal_to<MemType>,true>,std::__unordered_map_equal<MemType,std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>,std::equal_to<MemType>,std::hash<MemType>,true>,std::allocator<std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>>>::~__hash_table((uint64_t)(this + 13));
  std::__hash_table<std::__hash_value_type<ZinIrDimension,std::set<long>>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,std::set<long>>>>::~__hash_table((uint64_t)(this + 8));
  v3 = this[5];
  if (v3)
  {
    this[6] = v3;
    operator delete(v3);
  }
}

uint64_t ZinIrLocalRegAlloc::ZinIrLocalRegAlloc(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v8;

  v8 = ZinIrLocalRegAlloc::ZinIrLocalRegAlloc(a1, a2, a3, a5, a6);
  *(_QWORD *)(v8 + 32) = a4;
  ZinIrLocalRegAlloc::InitializeTileHeight(v8);
  ZinIrLocalRegAlloc::InitializeWorkUnitShape((ZinIrLocalRegAlloc *)a1);
  ZinMirInterleaveInitializer::Run((uint64_t **)(a1 + 40), *(ZinIrTensor **)(a1 + 16), *(_BYTE *)(*(_QWORD *)(a1 + 24) + 156), (_QWORD *)(a1 + 184));
  if (ZinMirInputCropOffsetXLsbsInitializer::Run((ZinIrOpLayer ***)(a1 + 40), *(_QWORD *)(a1 + 16), a1 + 224))ZinAssertImpl("Failed to initialize crop offsets");
  ZinMirOutputCropOffsetXLsbsInitializer::Run((ZinIrOpLayer ***)(a1 + 40), *(_QWORD *)(a1 + 16), a1 + 264);
  ZinIrLocalRegAlloc::UpdateScheduleToLayerMap((ZinIrLocalRegAlloc *)a1);
  ZinIrLocalRegAlloc::TrackLayersWithLockedWU((ZinIrLocalRegAlloc *)a1);
  return a1;
}

void sub_206DB0734(_Unwind_Exception *a1)
{
  char **v1;

  ZinIrLocalRegAlloc::~ZinIrLocalRegAlloc(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::InitializeTensorAttributeCache(ZinIrLocalRegAlloc *this)
{
  _QWORD *v1;
  char *v2;
  _QWORD *v3;
  _QWORD *v4;
  ZinIrTensor *v5;
  ZinIrTensor **v6;
  ZinIrTensor **v7;
  ZinIrTensor **v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v17;
  _QWORD *i;
  int v19;
  void *__p;
  _BYTE *v21;
  int v22;
  ZinIrTensor **v23;
  ZinIrTensor **v24;
  ZinIrTensor *RootTensor;
  _OWORD v26[2];
  int v27;
  ZinIrTensor **v28;

  memset(v26, 0, sizeof(v26));
  v27 = 1065353216;
  v1 = **(_QWORD ***)this;
  v17 = *(_QWORD *)this + 8;
  if (v1 != (_QWORD *)v17)
  {
    v2 = (char *)this + 304;
    do
    {
      v4 = (_QWORD *)v1[5];
      v3 = (_QWORD *)v1[6];
      for (i = v3; v4 != v3; ++v4)
      {
        v5 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v4 + 32))(*v4, 0, 0);
        RootTensor = 0;
        RootTensor = ZinIrTensor::GetRootTensor(v5);
        if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v26, &RootTensor))
        {
          std::__hash_table<ZinIrTensor const*,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const* const&>((uint64_t)v26, &RootTensor, &RootTensor);
          ZinIrTensor::GetTensorFamily(RootTensor, (uint64_t)&v23);
          v6 = v23;
          v7 = v24;
          v8 = v23;
          if (v23 != v24)
          {
            while (1)
            {
              v9 = *((_QWORD *)*v8 + 13);
              if (v9)
              {
                v10 = *(_DWORD *)(v9 + 96);
                if (v10)
                  break;
              }
              if (++v8 == v24)
              {
                v10 = 0;
                break;
              }
            }
            if (v23 != v24)
            {
              do
              {
                v19 = v10;
                ZinIrTensor::GetDimensionOrderHint(*v6, (uint64_t)&__p);
                v28 = v6;
                v11 = std::__hash_table<std::__hash_value_type<ZinIrTensor const*,ZinIrLocalRegAlloc::TensorAttributeCache>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,ZinIrLocalRegAlloc::TensorAttributeCache>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,ZinIrLocalRegAlloc::TensorAttributeCache>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,ZinIrLocalRegAlloc::TensorAttributeCache>>>::__emplace_unique_key_args<ZinIrTensor const*,std::piecewise_construct_t const&,std::tuple<ZinIrTensor const* const&>,std::tuple<>>((uint64_t)v2, v6, (uint64_t)&std::piecewise_construct, &v28);
                v12 = v11;
                *((_DWORD *)v11 + 6) = v19;
                if (v11 + 3 != (_QWORD *)&v19)
                  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v11 + 32, (char *)__p, (uint64_t)v21, (v21 - (_BYTE *)__p) >> 2);
                *((_DWORD *)v12 + 14) = v22;
                if (__p)
                {
                  v21 = __p;
                  operator delete(__p);
                }
                ++v6;
              }
              while (v6 != v7);
              v6 = v23;
            }
          }
          if (v6)
          {
            v24 = v6;
            operator delete(v6);
          }
          v3 = i;
        }
      }
      v13 = (_QWORD *)v1[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v1[2];
          v15 = *v14 == (_QWORD)v1;
          v1 = v14;
        }
        while (!v15);
      }
      v1 = v14;
    }
    while (v14 != (_QWORD *)v17);
  }
  return std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v26);
}

void sub_206DB094C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::AllocateNonResidentSymbol(uint64_t a1, ZinIrMemoryPool *a2, ZinIrSection *a3, uint64_t a4, __int128 *a5, uint64_t a6, _OWORD *a7, _OWORD *a8)
{
  int v11;
  uint64_t v12;
  void *__p;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::string v19;
  _BYTE v20[304];
  uint64_t v21;
  std::string v22;
  _BYTE v23[304];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v17 = 0;
  ZinIrSymbol::Descriptor::Descriptor((uint64_t)&v21, 3, a5, a8, a6, a7);
  v18 = v21;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v19, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
  else
    v19 = v22;
  memcpy(v20, v23, sizeof(v20));
  __p = 0;
  v15 = 0;
  v16 = 0;
  v11 = ZinIrMemoryPool::AllocateMemory(a2, (uint64_t)&v18, a3, a4, &v17, (uint64_t)&__p);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  v12 = v17;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (v11)
    return 0;
  else
    return v12;
}

void sub_206DB0AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (a62 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::AllocateResidentSymbol(uint64_t a1, ZinIrMemoryPool *a2, ZinIrSection *a3, uint64_t a4, __int128 *a5, uint64_t a6, _OWORD *a7, _OWORD *a8, uint64_t a9)
{
  int v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  std::string __p;
  _BYTE v18[304];
  uint64_t v19;
  std::string v20;
  _BYTE v21[304];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v15 = 0;
  ZinIrSymbol::Descriptor::Descriptor((uint64_t)&v19, 2, a5, a8, a6, a7);
  v16 = v19;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
  else
    __p = v20;
  memcpy(v18, v21, sizeof(v18));
  v12 = ZinIrMemoryPool::AllocateMemory(a2, (uint64_t)&v16, a3, a4, &v15, a9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v13 = v15;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (v12)
    return 0;
  else
    return v13;
}

void sub_206DB0C50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (a61 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrLocalRegAlloc::GetSection(uint64_t a1, int a2, int a3)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD v7[3];

  LODWORD(v7[0]) = a2;
  v4 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>((_QWORD *)(a1 + 104), (int *)v7);
  if (v4)
    v4 = (uint64_t *)v4[3];
  ZinIrMemoryPool::GetSections((uint64_t)v4, a3, v7);
  v5 = *(_QWORD *)(v7[1] + 16);
  std::__list_imp<ZinIrSection *>::clear(v7);
  return v5;
}

void ZinIrLocalRegAlloc::ComputeL2BanksToAvoidForDualSrcPE(ZinIrLocalRegAlloc *this@<X0>, ZinIrTensor *a2@<X1>, char a3@<W2>, char **a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  ZinIrOpLayer **v9;
  ZinIrOpLayer **v10;
  ZinIrOpLayer *v11;
  ZinIrOpLayer **v12;
  ZinIrOpLayer **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  ZinIrOpLayer **v18;
  ZinIrOpLayer **v19;
  ZinIrOpLayer **v20;
  ZinIrOpLayer *v21;
  char *v22;
  ZinIrOpLayer **v23;
  uint64_t v24;
  ZinIrTensor *RootTensor;
  uint64_t v26;
  _BOOL4 v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t Hal;
  uint64_t v33;
  int v34;
  const ZinIrTensor *v35;
  int v36;
  const ZinIrTensor *v37;
  int v38;
  uint64_t v39;
  uint64_t L2RdSymbol;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  void *v58[4];
  int64x2_t __s2[2];
  void *__p[5];
  int64x2_t __s1[2];
  _QWORD v62[5];
  ZinIrTensor **v63;
  ZinIrTensor **v64;
  ZinIrOpLayer **v65;
  ZinIrOpLayer **v66;
  ZinIrOpLayer **v67;
  void *v68;
  void *v69;
  uint64_t v70;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a2 + 12);
    v68 = 0;
    v69 = 0;
    v70 = 0;
    std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v68, *(const void **)(v7 + 112), *(_QWORD *)(v7 + 120), (uint64_t)(*(_QWORD *)(v7 + 120) - *(_QWORD *)(v7 + 112)) >> 3);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    v65 = 0;
    v66 = 0;
    v67 = 0;
    v8 = *((_QWORD *)a2 + 12);
    v9 = *(ZinIrOpLayer ***)(v8 + 112);
    v10 = *(ZinIrOpLayer ***)(v8 + 120);
    if (v9 == v10)
    {
      v22 = 0;
      v23 = 0;
    }
    else
    {
      do
      {
        v11 = *v9;
        if (ZinIrOpLayer::IsPELayer(*v9)
          && (*(_DWORD *)(*((_QWORD *)v11 + 8) + 8) != 81
           || !*((_QWORD *)v11 + 57)
           || (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(v11, 1uLL) != a2)
          && (*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)v11 + 568))(v11)
          && !*((_QWORD *)v11 + 25))
        {
          v12 = v66;
          if (v66 >= v67)
          {
            v14 = v66 - v65;
            if ((unint64_t)(v14 + 1) >> 61)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v15 = ((char *)v67 - (char *)v65) >> 2;
            if (v15 <= v14 + 1)
              v15 = v14 + 1;
            if ((unint64_t)((char *)v67 - (char *)v65) >= 0x7FFFFFFFFFFFFFF8)
              v16 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v16 = v15;
            if (v16)
              v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v67, v16);
            else
              v17 = 0;
            v18 = (ZinIrOpLayer **)&v17[8 * v14];
            *v18 = v11;
            v13 = v18 + 1;
            v20 = v65;
            v19 = v66;
            if (v66 != v65)
            {
              do
              {
                v21 = *--v19;
                *--v18 = v21;
              }
              while (v19 != v20);
              v19 = v65;
            }
            v65 = v18;
            v66 = v13;
            v67 = (ZinIrOpLayer **)&v17[8 * v16];
            if (v19)
              operator delete(v19);
          }
          else
          {
            *v66 = v11;
            v13 = v12 + 1;
          }
          v66 = v13;
        }
        ++v9;
      }
      while (v9 != v10);
      v22 = (char *)v65;
      v23 = v66;
    }
    if ((char *)v23 - v22 == 8)
    {
      v24 = *(_QWORD *)v22;
      (*(void (**)(ZinIrTensor ***__return_ptr, _QWORD))(**(_QWORD **)v22 + 512))(&v63, *(_QWORD *)v22);
      RootTensor = ZinIrTensor::GetRootTensor(*v63);
      if (RootTensor != ZinIrTensor::GetRootTensor(v63[1]))
      {
        if (v64 == v63)
        {
          v29 = 0;
          v28 = 0;
          v27 = 0;
        }
        else
        {
          v26 = 0;
          v27 = 0;
          v28 = 0;
          v29 = 0;
          v30 = v64 - v63;
          if (v30 <= 1)
            v30 = 1;
          do
          {
            v31 = *((_QWORD *)v63[v26] + 12);
            if (v31 == v7)
              v29 = (_QWORD *)*((_QWORD *)v63[v26] + 12);
            else
              v28 = *((_QWORD *)v63[v26] + 12);
            if (v31 != v7)
              v27 = v26 != 0;
            ++v26;
          }
          while (v30 != v26);
        }
        Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(v29[2] + 160));
        v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
        (*(void (**)(_QWORD *__return_ptr, _QWORD *))(*v29 + 208))(v62, v29);
        v34 = *(_DWORD *)((*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v29 + 32))(v29, 0, 0) + 88);
        v35 = (const ZinIrTensor *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v29 + 32))(v29, 0, 0);
        ZinIrLocalRegAlloc::GetDimensionOrderHint(this, v35, (uint64_t)__p);
        ZinIrTensor::CreateDefaultStride((const ZinTensorDimensions *)v62, v34, 1, (uint64_t)__p, *(_QWORD *)(v33 + 416), 1, 1, __s1);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v28 + 208))(__p, v28);
        v36 = *(_DWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v28 + 32))(v28, 0, 0)
                        + 88);
        v37 = (const ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v28 + 32))(v28, 0, 0);
        ZinIrLocalRegAlloc::GetDimensionOrderHint(this, v37, (uint64_t)v58);
        ZinIrTensor::CreateDefaultStride((const ZinTensorDimensions *)__p, v36, 1, (uint64_t)v58, *(_QWORD *)(v33 + 416), 1, 1, __s2);
        if (v58[0])
        {
          v58[1] = v58[0];
          operator delete(v58[0]);
        }
        v38 = memcmp(__s1, __s2, 0x28uLL);
        v39 = *(_QWORD *)(v24 + 264);
        if (v39)
        {
          if (ZinEngineLayerMirInfo::GetL2RdSymbol(v39, v27))
          {
            L2RdSymbol = ZinEngineLayerMirInfo::GetL2RdSymbol(*(_QWORD *)(v24 + 264), v27);
            if (L2RdSymbol)
            {
              if (!v38)
              {
                v41 = *(_QWORD *)(L2RdSymbol + 24);
                LODWORD(v58[0]) = 2;
                v42 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>((_QWORD *)this + 13, (int *)v58);
                if (v42)
                  v42 = (uint64_t *)v42[3];
                ZinIrMemoryPool::ComputeBankInterval((ZinIrMemoryPool *)v42, v41, 0x40uLL);
                v45 = v43;
                v46 = v44;
                v48 = a4[1];
                v47 = (unint64_t)a4[2];
                if ((unint64_t)v48 >= v47)
                {
                  v50 = *a4;
                  v51 = (v48 - *a4) >> 4;
                  v52 = v51 + 1;
                  if ((unint64_t)(v51 + 1) >> 60)
                    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                  v53 = v47 - (_QWORD)v50;
                  if (v53 >> 3 > v52)
                    v52 = v53 >> 3;
                  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF0)
                    v54 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v54 = v52;
                  if (v54)
                  {
                    v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>((uint64_t)(a4 + 2), v54);
                    v50 = *a4;
                    v48 = a4[1];
                  }
                  else
                  {
                    v55 = 0;
                  }
                  v56 = &v55[16 * v51];
                  v57 = &v55[16 * v54];
                  *(_QWORD *)v56 = v45;
                  *((_QWORD *)v56 + 1) = v46;
                  v49 = v56 + 16;
                  if (v48 != v50)
                  {
                    do
                    {
                      *((_OWORD *)v56 - 1) = *((_OWORD *)v48 - 1);
                      v56 -= 16;
                      v48 -= 16;
                    }
                    while (v48 != v50);
                    v50 = *a4;
                  }
                  *a4 = v56;
                  a4[1] = v49;
                  a4[2] = v57;
                  if (v50)
                    operator delete(v50);
                }
                else
                {
                  *(_QWORD *)v48 = v43;
                  *((_QWORD *)v48 + 1) = v44;
                  v49 = v48 + 16;
                }
                a4[1] = v49;
              }
            }
          }
        }
      }
      if (v63)
      {
        v64 = v63;
        operator delete(v63);
      }
      v22 = (char *)v65;
    }
    if (v22)
    {
      v66 = (ZinIrOpLayer **)v22;
      operator delete(v22);
    }
    if (v68)
    {
      v69 = v68;
      operator delete(v68);
    }
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
}

void sub_206DB11F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  uint64_t v20;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  v22 = *(void **)(v20 - 160);
  if (v22)
  {
    *(_QWORD *)(v20 - 152) = v22;
    operator delete(v22);
  }
  v23 = *(void **)(v20 - 136);
  if (v23)
  {
    *(_QWORD *)(v20 - 128) = v23;
    operator delete(v23);
  }
  v24 = *(void **)v19;
  if (*(_QWORD *)v19)
  {
    *(_QWORD *)(v19 + 8) = v24;
    operator delete(v24);
  }
  v25 = *(void **)(v20 - 112);
  if (v25)
  {
    *(_QWORD *)(v20 - 104) = v25;
    operator delete(v25);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *ZinIrLocalRegAlloc::GetDimensionOrderHint@<X0>(ZinIrLocalRegAlloc *this@<X0>, const ZinIrTensor *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *result;
  ZinIrTensor *v7;

  v7 = a2;
  v4 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 38, &v7);
  if (!v4)
    return ZinIrTensor::GetDimensionOrderHint(v7, a3);
  v5 = v4;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>((_QWORD *)a3, (const void *)v4[4], v4[5], (uint64_t)(v4[5] - v4[4]) >> 2);
  *(_DWORD *)(a3 + 24) = *((_DWORD *)v5 + 14);
  return result;
}

uint64_t ZinIrLocalRegAlloc::AllocateResidentSymbol(const ZinIrTensor **this, ZinIrTensor *a2, int a3)
{
  _QWORD *v6;
  uint64_t v7;
  ZinIrSection *L2Section;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  ZinIrMemoryPool *v13;
  char v14;
  uint64_t L2Alignment;
  uint64_t v16;
  void *__p[2];
  __int128 v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  _QWORD v23[26];
  unsigned __int8 *v24;
  _BYTE v25[24];
  _BYTE *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v24 = (unsigned __int8 *)a2;
  ZinIrLocalRegAlloc::GetDimensionOrderHint((ZinIrLocalRegAlloc *)this, a2, (uint64_t)__p);
  v26 = 0;
  ZinIrTensor::InferDescriptor((unsigned __int8 *)a2, 1, (uint64_t)__p, 1, 1, (uint64_t)v25, (uint64_t)v23);
  v6 = v26;
  if (v26 == v25)
  {
    v7 = 4;
    v6 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  L2Section = (ZinIrSection *)ZinIrLocalRegAlloc::GetL2Section((ZinIrLocalRegAlloc *)this);
  __p[0] = &v24;
  v22 = *(_OWORD *)(std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)(this + 18), &v24, (uint64_t)&std::piecewise_construct, (_QWORD **)__p)+ 3);
  if (a3)
  {
    LOBYTE(__p[0]) = 0;
    v21 = 0;
    if ((ZinMirBankConflictOptimizer::IsQualifiedForBankConflictOpt((ZinIrTensor *)v24, 0, (ZinTensorFamilyUtil *)__p) & 1) != 0)
    {
      v9 = *((_DWORD *)this[3] + 78);
      std::__optional_destruct_base<ZinTensorFamilyUtil,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
      if (v9)
      {
        ZinMirBankConflictOptimizer::ComputeResidentSymbolStrides((ZinMirBankConflictOptimizer *)v24, this[2], (uint64_t)__p);
        *(_OWORD *)&v23[11] = *(_OWORD *)__p;
        *(_OWORD *)&v23[13] = v19;
        v23[15] = v20;
      }
    }
    else
    {
      std::__optional_destruct_base<ZinTensorFamilyUtil,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
    }
  }
  ZinIrTensor::GetTensorSizeInBytes(v24, v23);
  v11 = v10;
  LODWORD(__p[0]) = *((_DWORD *)L2Section + 3);
  v12 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(this + 13, (int *)__p);
  if (v12)
    v13 = (ZinIrMemoryPool *)v12[3];
  else
    v13 = 0;
  if (a3)
    v14 = *((_DWORD *)this[3] + 78) != 0;
  else
    v14 = 0;
  ZinIrLocalRegAlloc::ComputeL2BanksToAvoidForDualSrcPE((ZinIrLocalRegAlloc *)this, (ZinIrTensor *)v24, v14, (char **)__p);
  L2Alignment = GetL2Alignment((uint64_t)this[2], v23[0]);
  v16 = ZinIrLocalRegAlloc::AllocateResidentSymbol(L2Alignment, v13, L2Section, L2Alignment, (__int128 *)(v24 + 24), v11, v23, &v22, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v16;
}

void sub_206DB1544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  std::__optional_destruct_base<ZinTensorFamilyUtil,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::GetL2Section(ZinIrLocalRegAlloc *this)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD v4[3];

  LODWORD(v4[0]) = 2;
  v1 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>((_QWORD *)this + 13, (int *)v4);
  if (v1)
    v1 = (uint64_t *)v1[3];
  ZinIrMemoryPool::GetSections((uint64_t)v1, 4, v4);
  v2 = *(_QWORD *)(v4[1] + 16);
  std::__list_imp<ZinIrSection *>::clear(v4);
  return v2;
}

uint64_t GetL2Alignment(uint64_t a1, int a2)
{
  uint64_t v3;

  if (!*(_BYTE *)(a1 + 1242))
    return *(_QWORD *)(a1 + 416);
  v3 = 0;
  if (ZinTensorFormatGetSize(a2, &v3))
    ZinAssertImpl("ZinTensorFormatGetSize() failed");
  return v3;
}

uint64_t ZinIrLocalRegAlloc::AllocateResidentTensor(const ZinIrTensor **this, ZinIrTensor *a2, int a3)
{
  _QWORD *v5;
  uint64_t result;
  ZinIrTensor *v7;
  ZinIrTensor **v8;

  v7 = a2;
  v8 = &v7;
  v5 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)(this + 18), &v7, (uint64_t)&std::piecewise_construct, &v8);
  result = ZinIrLocalRegAlloc::AllocateResidentSymbol(this, v7, a3);
  if (result)
  {
    if (!ZinIrLocalRegAlloc::SetSymbolToLayerAndTensor((ZinIrLocalRegAlloc *)this, (ZinIrSymbol *)result, v7))
    {
      if ((ZinIrLocalRegAlloc::HasL2SpaceForConflictingDMAbuffers((ZinIrLocalRegAlloc *)this, (const ZinLiveRange *)(v5 + 3)) & 1) != 0)return 1;
      ZinIrLocalRegAlloc::RemoveSymbolFromLayerAndTensor((ZinIrLocalRegAlloc *)this, v7);
    }
    return 0;
  }
  return result;
}

uint64_t ZinIrLocalRegAlloc::SetSymbolToLayerAndTensor(ZinIrLocalRegAlloc *this, ZinIrSymbol *a2, ZinIrTensor *a3)
{
  uint64_t v6;
  ZinIrTensor **v7;
  ZinIrTensor **v8;
  _QWORD *v9;
  void *__p;
  ZinIrTensor **v12;
  ZinIrSymbol *v13;
  ZinIrSymbol **v14;

  v13 = a2;
  if (ZinIrTensor::HasParent(a3))
    ZinAssertImpl("It must be a root tensor");
  v6 = ZinIrLocalRegAlloc::SetSymbolToTensorFamily(this, a2, a3);
  if (!(_DWORD)v6)
  {
    ZinIrTensor::GetTensorFamily(a3, (uint64_t)&__p);
    v7 = (ZinIrTensor **)__p;
    v8 = v12;
    while (v7 != v8)
      ZinIrLocalRegAlloc::SetSymbolToLayers(this, *v7++);
    v9 = (_QWORD *)((char *)this + 448);
    if (std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v9, &v13))
    {
      ZinAssertImpl("Symbol is already associated with a tensor");
    }
    v14 = &v13;
    std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>((uint64_t)v9, &v13, (uint64_t)&std::piecewise_construct, &v14)[3] = a3;
    if (__p)
    {
      v12 = (ZinIrTensor **)__p;
      operator delete(__p);
    }
  }
  return v6;
}

void sub_206DB180C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrLocalRegAlloc::HasL2SpaceForConflictingDMAbuffers(ZinIrLocalRegAlloc *this, const ZinLiveRange *a2)
{
  unint64_t v3;
  uint64_t v4;
  ZinEngineLayerMirInfo ***v5;
  ZinEngineLayerMirInfo ***v6;
  ZinIrLocalRegAlloc *v7;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  ZinIrOpLayer *v12;
  unint64_t v13;
  ZinIrTensor *InputTensor;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int IsAllInputsResident;
  const ZinIrTensor **v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t Interleave;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *InputCropOffsetXLsbs;
  uint64_t *v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t **v48;
  uint64_t *v49;
  const ZinIrTensor *v50;
  uint64_t v51;
  _QWORD *OutputCropOffsetXLsbs;
  _QWORD *v53;
  unint64_t v54;
  _BOOL4 v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  _BYTE *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  ZinEngineLayerMirInfo ***v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  ZinEngineLayerMirInfo ***v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  BOOL v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v95;
  int64_t v96;
  _QWORD *v97;
  char v98;
  uint64_t v99;
  _QWORD *v100;
  int v101;
  int64x2_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int16 v115;
  __int128 v116;
  char v117;
  __int128 v118;
  _BYTE v119[25];
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  int v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  char v128;
  uint64_t v129;
  int v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  char v134;
  uint64_t v135;
  int v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  char v140;
  uint64_t v141;
  int v142;
  _BYTE v143[32];
  int v144;
  int v145;
  _BYTE v146[32];
  int v147;
  int v148;
  _BYTE v149[32];
  int v150;
  unint64_t v151;
  void *v152;
  void *v153;
  uint64_t v154;
  void *v155;
  char *v156;
  char *v157;
  void *__p;
  char *v159;
  char *v160;
  unint64_t __src[57];
  uint64_t *v162[4];
  int v163;
  int v164;
  uint64_t *v165[4];
  int v166;
  int v167;
  uint64_t *v168[4];
  int v169;
  void *v170;
  _BYTE *v171;
  uint64_t *__dst[57];
  uint64_t *v173[4];
  int v174;
  int v175;
  uint64_t *v176[4];
  int v177;
  int v178;
  uint64_t *v179[4];
  int v180;
  char *v181;
  ZinEngineLayerMirInfo ***v182;
  ZinEngineLayerMirInfo ***v183;
  char *v184;
  _BYTE *v185;
  _QWORD v186[2];

  if (!*(_BYTE *)(*((_QWORD *)this + 2) + 1105))
    return 1;
  v184 = 0;
  v185 = 0;
  v186[0] = 0;
  v181 = 0;
  v182 = 0;
  v183 = 0;
  v3 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 <= *((_QWORD *)a2 + 1))
  {
    v95 = (char *)this + 64;
    while (1)
    {
      v96 = v3;
      __src[0] = v3;
      __dst[0] = (uint64_t *)__src;
      v9 = std::__hash_table<std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::set<ZinNamedType<unsigned long,ScheduleTag>>>,std::__unordered_map_hasher<ZinNamedType<unsigned long,AneIndexTag>,std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::set<ZinNamedType<unsigned long,ScheduleTag>>>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,true>,std::__unordered_map_equal<ZinNamedType<unsigned long,AneIndexTag>,std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::set<ZinNamedType<unsigned long,ScheduleTag>>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,true>,std::allocator<std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::set<ZinNamedType<unsigned long,ScheduleTag>>>>>::__emplace_unique_key_args<ZinNamedType<unsigned long,AneIndexTag>,std::piecewise_construct_t const&,std::tuple<ZinNamedType<unsigned long,AneIndexTag> const&>,std::tuple<>>((uint64_t)v95, __src, (uint64_t)&std::piecewise_construct, __dst);
      v10 = (_QWORD *)v9[3];
      v11 = v9 + 4;
      if (v10 == v9 + 4)
        goto LABEL_169;
      v98 = 1;
      v97 = v9 + 4;
      do
      {
        v12 = (ZinIrOpLayer *)v10[4];
        if (!ZinIrOpLayer::IsANELayer(v12))
          goto LABEL_162;
        v99 = *((_QWORD *)v12 + 7);
        if (*((_QWORD *)v12 + 12) == *((_QWORD *)v12 + 11))
        {
LABEL_27:
          v101 = 0;
        }
        else
        {
          v13 = 0;
          while (1)
          {
            __dst[0] = 0;
            InputTensor = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(v12, v13);
            __dst[0] = (uint64_t *)ZinIrTensor::GetRootTensor(InputTensor);
            v15 = __dst[0][12];
            v16 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(*((_QWORD **)this + 4), __dst);
            v17 = v16;
            if (v16)
            {
              if (CpAllocUtils::IsChain(*((_DWORD *)v16 + 6))
                || CpAllocUtils::IsL2Dependent(*((_DWORD *)v17 + 6)))
              {
                v18 = __dst[0][13];
                if (!v18 || (v19 = *(_QWORD **)(v18 + 40), v19 == *(_QWORD **)(v18 + 48)) || !*v19)
                {
                  v20 = *((_QWORD *)v12 + 6);
                  if (v20 == *(_QWORD *)(v15 + 48))
                    break;
                }
              }
            }
            if (++v13 >= (uint64_t)(*((_QWORD *)v12 + 12) - *((_QWORD *)v12 + 11)) >> 3)
              goto LABEL_27;
          }
          *((_QWORD *)v12 + 6) = v20 + 1;
          *((_QWORD *)v12 + 7) = 0;
          v101 = 1;
        }
        v21 = *((_QWORD *)v12 + 33);
        IsAllInputsResident = ZinIrOpLayer::IsAllInputsResident(v12);
        ZinMirL2Config::ZinMirSetTileHeight((ZinMirL2Config *)(v21 + 120), v12, IsAllInputsResident);
        memcpy(__dst, (const void *)(v21 + 120), 0x1C4uLL);
        std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v173, v21 + 576);
        v175 = *(_DWORD *)(v21 + 616);
        std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v176, v21 + 624);
        v178 = *(_DWORD *)(v21 + 664);
        v100 = (_QWORD *)(v21 + 672);
        std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v179, v21 + 672);
        (*(void (**)(void **__return_ptr, ZinIrOpLayer *))(*(_QWORD *)v12 + 512))(&v170, v12);
        if (!*(_BYTE *)(v21 + 233))
        {
          memcpy(__src, (const void *)(v21 + 120), 0x1C4uLL);
          std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v162, v21 + 576);
          v164 = *(_DWORD *)(v21 + 616);
          std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v165, v21 + 624);
          v167 = *(_DWORD *)(v21 + 664);
          std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v168, (uint64_t)v100);
          *(_BYTE *)(v21 + 150) = 1;
          *(_BYTE *)(v21 + 256) = 1;
          v159 = 0;
          __p = 0;
          v160 = 0;
          std::vector<unsigned long>::reserve(&__p, (v171 - (_BYTE *)v170) >> 3);
          v156 = 0;
          v155 = 0;
          v157 = 0;
          std::vector<unsigned long>::reserve(&v155, (v171 - (_BYTE *)v170) >> 3);
          v23 = (const ZinIrTensor **)v170;
          if (v171 != v170)
          {
            v24 = 0;
            v25 = 0;
            do
            {
              Interleave = ZinIrLocalRegAlloc::GetInterleave(this, v23[v24]);
              v27 = Interleave;
              v28 = v159;
              if (v159 >= v160)
              {
                v30 = (char *)__p;
                v31 = (v159 - (_BYTE *)__p) >> 3;
                v32 = v31 + 1;
                if ((unint64_t)(v31 + 1) >> 61)
                  std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                v33 = v160 - (_BYTE *)__p;
                if ((v160 - (_BYTE *)__p) >> 2 > v32)
                  v32 = v33 >> 2;
                if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
                  v34 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v34 = v32;
                if (v34)
                {
                  v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v160, v34);
                  v28 = v159;
                  v30 = (char *)__p;
                }
                else
                {
                  v35 = 0;
                }
                v36 = (uint64_t *)&v35[8 * v31];
                *v36 = v27;
                v29 = (char *)(v36 + 1);
                while (v28 != v30)
                {
                  v37 = *((_QWORD *)v28 - 1);
                  v28 -= 8;
                  *--v36 = v37;
                }
                __p = v36;
                v159 = v29;
                v160 = &v35[8 * v34];
                if (v30)
                  operator delete(v30);
              }
              else
              {
                *(_QWORD *)v159 = Interleave;
                v29 = v28 + 8;
              }
              v159 = v29;
              InputCropOffsetXLsbs = ZinIrLocalRegAlloc::GetInputCropOffsetXLsbs((uint64_t)this, v12, v25 != 0, 0);
              v39 = InputCropOffsetXLsbs;
              v40 = v156;
              if (v156 >= v157)
              {
                v42 = (char *)v155;
                v43 = (v156 - (_BYTE *)v155) >> 3;
                v44 = v43 + 1;
                if ((unint64_t)(v43 + 1) >> 61)
                  std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                v45 = v157 - (_BYTE *)v155;
                if ((v157 - (_BYTE *)v155) >> 2 > v44)
                  v44 = v45 >> 2;
                if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
                  v46 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v46 = v44;
                if (v46)
                {
                  v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v157, v46);
                  v40 = v156;
                  v42 = (char *)v155;
                }
                else
                {
                  v47 = 0;
                }
                v48 = (uint64_t **)&v47[8 * v43];
                *v48 = v39;
                v41 = (char *)(v48 + 1);
                while (v40 != v42)
                {
                  v49 = (uint64_t *)*((_QWORD *)v40 - 1);
                  v40 -= 8;
                  *--v48 = v49;
                }
                v155 = v48;
                v156 = v41;
                v157 = &v47[8 * v46];
                if (v42)
                  operator delete(v42);
              }
              else
              {
                *(_QWORD *)v156 = InputCropOffsetXLsbs;
                v41 = v40 + 8;
              }
              v156 = v41;
              v23 = (const ZinIrTensor **)v170;
              v24 = ++v25;
            }
            while (v25 < (unint64_t)((v171 - (_BYTE *)v170) >> 3));
          }
          v50 = (const ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0, 0);
          v51 = ZinIrLocalRegAlloc::GetInterleave(this, v50);
          OutputCropOffsetXLsbs = ZinIrLocalRegAlloc::GetOutputCropOffsetXLsbs(this, v12);
          v153 = 0;
          v152 = 0;
          v154 = 0;
          v151 = 0;
          v102 = vdupq_n_s64(1uLL);
          v103 = 1;
          v109 = 0;
          v110 = 0;
          v106 = 0;
          v107 = 0;
          v108 = 0;
          v104 = 0;
          v105 = 0;
          v111 = 1;
          v113 = 0;
          v114 = 0;
          v112 = 0;
          v115 = 0;
          v116 = xmmword_207A7E150;
          v117 = 0;
          v124 = 0;
          v129 = 0;
          v125 = 0u;
          v126 = 0u;
          v127 = 0u;
          v128 = 0;
          v130 = 0;
          v135 = 0;
          v131 = 0u;
          v132 = 0u;
          v133 = 0u;
          v134 = 0;
          v136 = 0;
          v141 = 0;
          v137 = 0u;
          v138 = 0u;
          v139 = 0u;
          v140 = 0;
          v142 = 0;
          memset(v143, 0, sizeof(v143));
          v118 = 0u;
          memset(v119, 0, sizeof(v119));
          v120 = 0;
          v121 = 0;
          v123 = 0;
          v122 = 0;
          v144 = 1065353216;
          v145 = 0;
          memset(v146, 0, sizeof(v146));
          v147 = 1065353216;
          v148 = 0;
          memset(v149, 0, sizeof(v149));
          v150 = 1065353216;
          DMABuffer::CalculateMinimumSizes(v12, *((_QWORD *)this + 2), &__p, &v155, v51, (uint64_t)OutputCropOffsetXLsbs, (uint64_t)&v102, (unint64_t **)&v152, &v151, 0);
          memcpy((void *)(v21 + 120), __src, 0x1C0uLL);
          *(_DWORD *)(v21 + 568) = __src[56];
          if ((unint64_t *)(v21 + 120) == __src)
          {
            *(_DWORD *)(v21 + 616) = v164;
            *(_DWORD *)(v21 + 664) = v167;
          }
          else
          {
            *(_DWORD *)(v21 + 608) = v163;
            std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v21 + 576), v162[2], 0);
            *(_DWORD *)(v21 + 616) = v164;
            *(_DWORD *)(v21 + 656) = v166;
            std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v21 + 624), v165[2], 0);
            *(_DWORD *)(v21 + 664) = v167;
            *(_DWORD *)(v21 + 704) = v169;
            std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>(v100, v168[2], 0);
          }
          if (!*(_BYTE *)(v21 + 233))
            *(_QWORD *)(v21 + 200) = v111;
          std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v149);
          std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v146);
          std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v143);
          if (v152)
          {
            v153 = v152;
            operator delete(v152);
          }
          if (v155)
          {
            v156 = (char *)v155;
            operator delete(v155);
          }
          if (__p)
          {
            v159 = (char *)__p;
            operator delete(__p);
          }
          std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v168);
          std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v165);
          std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v162);
        }
        v53 = v170;
        if (v171 != v170)
        {
          v54 = 0;
          v11 = v97;
          while (1)
          {
            v55 = v54 != 0;
            v56 = *((_QWORD *)v12 + 33);
            if (!v56)
              goto LABEL_116;
            v57 = v53[v54];
            if (ZinEngineLayerMirInfo::GetL2RdSymbol(v56, v54 != 0)
              || ((*(uint64_t (**)(ZinIrOpLayer *, uint64_t))(*(_QWORD *)v12 + 200))(v12, v57) & 1) != 0)
            {
              goto LABEL_116;
            }
            if (ZinEngineLayerMirInfo::NeedInputDMACached(*((_QWORD *)v12 + 33), v54 != 0))
            {
              if ((ZinIrLocalRegAlloc::AllocateInputDMACachedBuffer(this, v12, v54 != 0) & 1) != 0)
              {
                v58 = v185;
                if ((unint64_t)v185 < v186[0])
                  goto LABEL_95;
                v59 = (v185 - v184) >> 4;
                v60 = v59 + 1;
                if ((unint64_t)(v59 + 1) >> 60)
                  std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                v61 = v186[0] - (_QWORD)v184;
                if ((uint64_t)(v186[0] - (_QWORD)v184) >> 3 > v60)
                  v60 = v61 >> 3;
                if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF0)
                  v62 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v62 = v60;
                if (v62)
                  v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>((uint64_t)v186, v62);
                else
                  v63 = 0;
                v68 = &v63[16 * v59];
                *(_QWORD *)v68 = v12;
                *((_DWORD *)v68 + 2) = v55;
                v70 = v184;
                v69 = v185;
                v71 = v68;
                if (v185 != v184)
                {
                  do
                  {
                    *((_OWORD *)v71 - 1) = *((_OWORD *)v69 - 1);
                    v71 -= 16;
                    v69 -= 16;
                  }
                  while (v69 != v70);
                  goto LABEL_112;
                }
                goto LABEL_113;
              }
            }
            else
            {
              __src[0] = *((_QWORD *)v12 + 6);
              __src[1] = __src[0];
              if ((ZinIrLocalRegAlloc::AllocateInputDMADefaultBuffer((uint64_t)this, (uint64_t)v12, v54 != 0, (uint64_t)__src, 1) & 1) != 0)
              {
                v58 = v185;
                if ((unint64_t)v185 < v186[0])
                {
LABEL_95:
                  *(_QWORD *)v58 = v12;
                  *((_DWORD *)v58 + 2) = v55;
                  v64 = v58 + 16;
LABEL_115:
                  v185 = v64;
                  goto LABEL_116;
                }
                v65 = (v185 - v184) >> 4;
                v66 = v65 + 1;
                if ((unint64_t)(v65 + 1) >> 60)
                  std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                v67 = v186[0] - (_QWORD)v184;
                if ((uint64_t)(v186[0] - (_QWORD)v184) >> 3 > v66)
                  v66 = v67 >> 3;
                if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF0)
                  v62 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v62 = v66;
                if (v62)
                  v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>((uint64_t)v186, v62);
                else
                  v63 = 0;
                v68 = &v63[16 * v65];
                *(_QWORD *)v68 = v12;
                *((_DWORD *)v68 + 2) = v55;
                v72 = v184;
                v69 = v185;
                v71 = v68;
                if (v185 != v184)
                {
                  do
                  {
                    *((_OWORD *)v71 - 1) = *((_OWORD *)v69 - 1);
                    v71 -= 16;
                    v69 -= 16;
                  }
                  while (v69 != v72);
LABEL_112:
                  v69 = v184;
                }
LABEL_113:
                v64 = v68 + 16;
                v184 = v71;
                v185 = v68 + 16;
                v186[0] = &v63[16 * v62];
                if (v69)
                  operator delete(v69);
                goto LABEL_115;
              }
            }
            v98 = 0;
LABEL_116:
            ++v54;
            v53 = v170;
            if (v54 >= (v171 - (_BYTE *)v170) >> 3)
              goto LABEL_119;
          }
        }
        v11 = v97;
LABEL_119:
        if (!ZinEngineLayerMirInfo::GetL2WrSymbol(*((ZinEngineLayerMirInfo **)v12 + 33)))
        {
          if (*(_BYTE *)(*((_QWORD *)v12 + 33) + 1642))
          {
            if ((ZinIrLocalRegAlloc::AllocateOutputDMACachedBuffer(this, v12) & 1) != 0)
            {
              v73 = v182;
              if (v182 < v183)
                goto LABEL_133;
              v74 = ((char *)v182 - v181) >> 3;
              if ((unint64_t)(v74 + 1) >> 61)
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              v75 = ((char *)v183 - v181) >> 2;
              if (v75 <= v74 + 1)
                v75 = v74 + 1;
              if ((unint64_t)((char *)v183 - v181) >= 0x7FFFFFFFFFFFFFF8)
                v76 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v76 = v75;
              if (v76)
                v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v183, v76);
              else
                v77 = 0;
              v81 = &v77[8 * v74];
              *(_QWORD *)v81 = v12;
              v78 = (ZinEngineLayerMirInfo ***)(v81 + 8);
              v83 = v181;
              v82 = v182;
              if (v182 != (ZinEngineLayerMirInfo ***)v181)
              {
                do
                {
                  v84 = (uint64_t)*--v82;
                  *((_QWORD *)v81 - 1) = v84;
                  v81 -= 8;
                }
                while (v82 != (ZinEngineLayerMirInfo ***)v83);
                goto LABEL_150;
              }
              goto LABEL_151;
            }
          }
          else
          {
            __src[0] = *((_QWORD *)v12 + 6);
            __src[1] = __src[0];
            if ((ZinIrLocalRegAlloc::AllocateOutputDMADefaultBuffer(this, v12, (const ZinLiveRange *)__src, 1) & 1) != 0)
            {
              v73 = v182;
              if (v182 < v183)
              {
LABEL_133:
                *v73 = v12;
                v78 = (ZinEngineLayerMirInfo ***)(v73 + 1);
LABEL_153:
                v182 = v78;
                goto LABEL_154;
              }
              v79 = ((char *)v182 - v181) >> 3;
              if ((unint64_t)(v79 + 1) >> 61)
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              v80 = ((char *)v183 - v181) >> 2;
              if (v80 <= v79 + 1)
                v80 = v79 + 1;
              if ((unint64_t)((char *)v183 - v181) >= 0x7FFFFFFFFFFFFFF8)
                v76 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v76 = v80;
              if (v76)
                v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v183, v76);
              else
                v77 = 0;
              v81 = &v77[8 * v79];
              *(_QWORD *)v81 = v12;
              v78 = (ZinEngineLayerMirInfo ***)(v81 + 8);
              v85 = v181;
              v82 = v182;
              if (v182 != (ZinEngineLayerMirInfo ***)v181)
              {
                do
                {
                  v86 = (uint64_t)*--v82;
                  *((_QWORD *)v81 - 1) = v86;
                  v81 -= 8;
                }
                while (v82 != (ZinEngineLayerMirInfo ***)v85);
LABEL_150:
                v82 = (ZinEngineLayerMirInfo ***)v181;
              }
LABEL_151:
              v181 = v81;
              v182 = v78;
              v183 = (ZinEngineLayerMirInfo ***)&v77[8 * v76];
              if (v82)
                operator delete(v82);
              goto LABEL_153;
            }
          }
          v98 = 0;
        }
LABEL_154:
        v87 = *((_QWORD *)v12 + 33);
        memcpy((void *)(v87 + 120), __dst, 0x1C0uLL);
        *(_DWORD *)(v87 + 568) = __dst[56];
        if ((uint64_t **)(v87 + 120) == __dst)
        {
          *(_DWORD *)(v87 + 616) = v175;
          *(_DWORD *)(v87 + 664) = v178;
        }
        else
        {
          *(_DWORD *)(v87 + 608) = v174;
          std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v87 + 576), v173[2], 0);
          *(_DWORD *)(v87 + 616) = v175;
          *(_DWORD *)(v87 + 656) = v177;
          std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v87 + 624), v176[2], 0);
          *(_DWORD *)(v87 + 664) = v178;
          *(_DWORD *)(v87 + 704) = v180;
          std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v87 + 672), v179[2], 0);
        }
        if (v101)
        {
          --*((_QWORD *)v12 + 6);
          *((_QWORD *)v12 + 7) = v99;
        }
        if (v170)
        {
          v171 = v170;
          operator delete(v170);
        }
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v179);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v176);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v173);
LABEL_162:
        v88 = (_QWORD *)v10[1];
        if (v88)
        {
          do
          {
            v89 = v88;
            v88 = (_QWORD *)*v88;
          }
          while (v88);
        }
        else
        {
          do
          {
            v89 = (_QWORD *)v10[2];
            v90 = *v89 == (_QWORD)v10;
            v10 = v89;
          }
          while (!v90);
        }
        v10 = v89;
      }
      while (v89 != v11);
      if ((v98 & 1) == 0)
      {
        v4 = 0;
LABEL_172:
        v91 = v184;
        v92 = v185;
        while (v91 != v92)
        {
          v93 = ZinIrLocalRegAlloc::FreeDMADefaultInputBuffer((uint64_t)this, *(_QWORD *)v91, *((_DWORD *)v91 + 2));
          ZinIrLocalRegAlloc::FreeCachedDMAInputBuffer(v93, *(_QWORD *)v91, *((_DWORD *)v91 + 2));
          v91 += 16;
        }
        goto LABEL_4;
      }
LABEL_169:
      v3 = v96 + 1;
      if (v96 >= *((_QWORD *)a2 + 1))
      {
        v4 = 1;
        goto LABEL_172;
      }
    }
  }
  v4 = 1;
LABEL_4:
  v5 = (ZinEngineLayerMirInfo ***)v181;
  v6 = v182;
  if (v181 != (char *)v182)
  {
    do
    {
      v7 = (ZinIrLocalRegAlloc *)ZinIrLocalRegAlloc::FreeDMADefaultOutputBuffer((uint64_t)this, *v5);
      ZinIrLocalRegAlloc::FreeCachedDMAOutputBuffer(v7, *v5++);
    }
    while (v5 != v6);
    v5 = (ZinEngineLayerMirInfo ***)v181;
  }
  if (v5)
  {
    v182 = v5;
    operator delete(v5);
  }
  if (v184)
  {
    v185 = v184;
    operator delete(v184);
  }
  return v4;
}

void sub_206DB2588(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;

  v3 = (void *)STACK[0x600];
  if (STACK[0x600])
  {
    STACK[0x608] = (unint64_t)v3;
    operator delete(v3);
  }
  ZinMirL2Config::~ZinMirL2Config((ZinMirL2Config *)&STACK[0x618]);
  v4 = *(void **)(v1 - 136);
  if (v4)
  {
    *(_QWORD *)(v1 - 128) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(v1 - 112);
  if (v5)
  {
    *(_QWORD *)(v1 - 104) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

void ZinIrLocalRegAlloc::RemoveSymbolFromLayerAndTensor(ZinIrLocalRegAlloc *this, ZinIrTensor *a2)
{
  uint64_t *v2;
  _QWORD *v3[2];

  v3[0] = 0;
  v3[1] = 0;
  v2 = (uint64_t *)v3;
  ZinIrLocalRegAlloc::RemoveSymbolFromLayerAndTensor(this, (uint64_t)a2, &v2);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v2, v3[0]);
}

void sub_206DB2720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::AllocateL2InplaceTensors(ZinIrLocalRegAlloc *this, ZinIrTensor *a2, BOOL *a3)
{
  ZinIrTensor **v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string::size_type *v11;
  std::string::size_type *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD **v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD **v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  ZinANELayer *v23;
  _QWORD **v24;
  _QWORD *v25;
  _QWORD **v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD *v32;
  ZinIrTensor **v33;
  ZinIrTensor **v34;
  ZinIrTensor *v35;
  int IsQualifiedForBankConflictOpt;
  char v37;
  uint64_t v38;
  ZinIrSymbol *ResidentSymbol;
  const ZinIrTensor *v40;
  int SymbolsForInplaceNonSeedTensors;
  _QWORD *v42;
  ZinIrTensor **v43;
  ZinIrTensor **v44;
  _QWORD *v45;
  ZinIrTensor **v46;
  ZinIrTensor **v47;
  std::string::size_type *v48;
  std::string::size_type *v49;
  _QWORD *v50;
  ZinANELayer *v51;
  ZinANELayer *v52;
  uint64_t *v53;
  uint64_t *v54;
  ZinIrTensor **v55;
  ZinIrTensor **i;
  std::string *v57;
  int v58;
  const std::string::value_type *v59;
  std::string::size_type size;
  uint64_t v62;
  uint64_t v63;
  BOOL *v64;
  char *v65;
  std::string v66;
  ZinANELayer *v67;
  void *__p;
  void *v69;
  uint64_t v70;
  ZinIrOpLayer *v71;
  std::string v72;
  uint64_t v73;
  char v74;
  unint64_t v75;
  ZinIrOpLayer *v76;
  ZinANELayer *v77;
  _QWORD **v78;
  _QWORD *v79[2];
  ZinIrTensor *v80;
  ZinIrTensor **v81;
  ZinIrTensor **v82;
  ZinIrTensor *v83;

  v83 = a2;
  *a3 = 0;
  ZinIrLocalRegAlloc::FindInplaceTensors((uint64_t)this, a2, 4, (void **)&v81);
  v6 = v82;
  if (v82 == v81)
  {
    v38 = 0;
    if (!v82)
      return v38;
    goto LABEL_90;
  }
  v80 = *v81;
  if (v80 != a2)
    ZinAssertImpl("wrong inplace tensors");
  v64 = a3;
  v7 = (char *)this + 144;
  v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v80;
  v8 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)this + 144, &v80, (uint64_t)&std::piecewise_construct, &v72);
  v9 = v8[3];
  v10 = v8[4];
  v79[0] = 0;
  v79[1] = 0;
  v78 = v79;
  v11 = (std::string::size_type *)v81;
  v12 = (std::string::size_type *)v82;
  v62 = v10;
  v63 = v9;
  v65 = (char *)this + 144;
  if (v81 != v82)
  {
    do
    {
      v66.__r_.__value_.__r.__words[0] = 0;
      v66.__r_.__value_.__r.__words[0] = *v11;
      v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v66;
      v13 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)v7, &v66, (uint64_t)&std::piecewise_construct, &v72);
      if (v13[3] < v9)
        v9 = v13[3];
      if (v10 <= v13[4])
        v10 = v13[4];
      v14 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(*((_QWORD **)this + 4), &v66);
      if (v14 && CpAllocUtils::IsL2Dependent(*((_DWORD *)v14 + 6)))
      {
        v76 = 0;
        v77 = 0;
        v75 = 0;
        v72.__r_.__value_.__s.__data_[0] = 0;
        v74 = 0;
        ZinIrRegAllocUtil::FindLastProducerFirstConsumer((ZinIrTensor *)v66.__r_.__value_.__l.__data_, &v76, (uint64_t *)&v77, &v75, (ZinTensorFamilyUtil *)&v72);
        std::__optional_destruct_base<ZinTensorFamilyUtil,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v72);
        v15 = v79[0];
        if (!v79[0])
          goto LABEL_20;
        v16 = v79;
        v17 = v79[0];
        do
        {
          v18 = v17;
          v19 = v16;
          v20 = v17[4];
          if (v20 >= (unint64_t)v77)
            v16 = (_QWORD **)v17;
          else
            ++v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
        if (v16 == v79)
          goto LABEL_20;
        if (v20 < (unint64_t)v77)
          v18 = v19;
        if ((unint64_t)v77 < v18[4])
        {
LABEL_20:
          v21 = *((_QWORD *)v77 + 33);
          v71 = v77;
          v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
          v22 = std::__tree<std::__value_type<ZinIrOpLayer *,ZinMirL2Config>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,ZinMirL2Config>,std::less<ZinIrOpLayer *>,true>,std::allocator<std::__value_type<ZinIrOpLayer *,ZinMirL2Config>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer *&&>,std::tuple<>>((uint64_t)&v78, (unint64_t *)&v71, (uint64_t)&std::piecewise_construct, &v72);
          memcpy(v22 + 5, (const void *)(v21 + 120), 0x1C4uLL);
          if (v22 + 5 == (uint64_t *)(v21 + 120))
          {
            *((_DWORD *)v22 + 134) = *(_DWORD *)(v21 + 616);
            *((_DWORD *)v22 + 146) = *(_DWORD *)(v21 + 664);
          }
          else
          {
            *((_DWORD *)v22 + 132) = *(_DWORD *)(v21 + 608);
            std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>(v22 + 62, *(uint64_t **)(v21 + 592), 0);
            *((_DWORD *)v22 + 134) = *(_DWORD *)(v21 + 616);
            *((_DWORD *)v22 + 144) = *(_DWORD *)(v21 + 656);
            std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>(v22 + 68, *(uint64_t **)(v21 + 640), 0);
            *((_DWORD *)v22 + 146) = *(_DWORD *)(v21 + 664);
            *((_DWORD *)v22 + 156) = *(_DWORD *)(v21 + 704);
            std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>(v22 + 74, *(uint64_t **)(v21 + 688), 0);
          }
          v15 = v79[0];
          v7 = (char *)this + 144;
        }
        v23 = v76;
        if (!v15)
          goto LABEL_34;
        v24 = v79;
        do
        {
          v25 = v15;
          v26 = v24;
          v27 = v15[4];
          v28 = v15 + 1;
          if (v27 >= (unint64_t)v76)
          {
            v28 = v25;
            v24 = (_QWORD **)v25;
          }
          v15 = (_QWORD *)*v28;
        }
        while (v15);
        if (v24 == v79 || (v27 >= (unint64_t)v76 ? (v29 = v25) : (v29 = v26), (unint64_t)v76 < v29[4]))
        {
LABEL_34:
          v30 = *((_QWORD *)v76 + 33);
          v71 = v76;
          v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
          v31 = std::__tree<std::__value_type<ZinIrOpLayer *,ZinMirL2Config>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,ZinMirL2Config>,std::less<ZinIrOpLayer *>,true>,std::allocator<std::__value_type<ZinIrOpLayer *,ZinMirL2Config>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer *&&>,std::tuple<>>((uint64_t)&v78, (unint64_t *)&v71, (uint64_t)&std::piecewise_construct, &v72);
          memcpy(v31 + 5, (const void *)(v30 + 120), 0x1C4uLL);
          if (v31 + 5 == (uint64_t *)(v30 + 120))
          {
            *((_DWORD *)v31 + 134) = *(_DWORD *)(v30 + 616);
            *((_DWORD *)v31 + 146) = *(_DWORD *)(v30 + 664);
          }
          else
          {
            *((_DWORD *)v31 + 132) = *(_DWORD *)(v30 + 608);
            std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>(v31 + 62, *(uint64_t **)(v30 + 592), 0);
            *((_DWORD *)v31 + 134) = *(_DWORD *)(v30 + 616);
            *((_DWORD *)v31 + 144) = *(_DWORD *)(v30 + 656);
            std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>(v31 + 68, *(uint64_t **)(v30 + 640), 0);
            *((_DWORD *)v31 + 146) = *(_DWORD *)(v30 + 664);
            *((_DWORD *)v31 + 156) = *(_DWORD *)(v30 + 704);
            std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>(v31 + 74, *(uint64_t **)(v30 + 688), 0);
          }
          v23 = v76;
          v7 = (char *)this + 144;
        }
        ZinIrLocalRegAlloc::SetL2DepPairWorkUnits(this, v23, v77);
      }
      ++v11;
    }
    while (v11 != v12);
  }
  v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v80;
  v32 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)v7, &v80, (uint64_t)&std::piecewise_construct, &v72);
  v32[3] = v9;
  v32[4] = v10;
  if (std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>((_QWORD *)this + 61, &v80)|| std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>((_QWORD *)this + 66, &v80))
  {
    ZinAssertImpl("invalid case: tensor is already registered as inplace seed tensor");
  }
  *(_OWORD *)&v72.__r_.__value_.__l.__data_ = (unint64_t)v80;
  v72.__r_.__value_.__r.__words[2] = 0;
  v73 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v72.__r_.__value_.__l.__size_, v81, (uint64_t)v82, v82 - v81);
  std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::__emplace_unique_key_args<ZinIrTensor *,std::pair<ZinIrTensor * const,std::vector<ZinIrTensor *>>>((uint64_t)this + 488, &v72, (uint64_t)&v72);
  if (v72.__r_.__value_.__l.__size_)
  {
    v72.__r_.__value_.__r.__words[2] = v72.__r_.__value_.__l.__size_;
    operator delete((void *)v72.__r_.__value_.__l.__size_);
  }
  v72.__r_.__value_.__r.__words[0] = (std::string::size_type)v80;
  v72.__r_.__value_.__l.__size_ = (std::string::size_type)v80;
  std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::pair<ZinIrOpLayer * const,ZinAneInstruction *> const&>((uint64_t)this + 528, &v72, &v72);
  v33 = v82;
  if (v81 == v82)
  {
    IsQualifiedForBankConflictOpt = 1;
  }
  else
  {
    v34 = v81 + 1;
    do
    {
      v35 = *(v34 - 1);
      v72.__r_.__value_.__s.__data_[0] = 0;
      v74 = 0;
      IsQualifiedForBankConflictOpt = ZinMirBankConflictOptimizer::IsQualifiedForBankConflictOpt(v35, 1, (ZinTensorFamilyUtil *)&v72);
      std::__optional_destruct_base<ZinTensorFamilyUtil,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v72);
      if (v34 == v33)
        v37 = 0;
      else
        v37 = IsQualifiedForBankConflictOpt;
      ++v34;
    }
    while ((v37 & 1) != 0);
  }
  ResidentSymbol = (ZinIrSymbol *)ZinIrLocalRegAlloc::AllocateResidentSymbol((const ZinIrTensor **)this, v80, IsQualifiedForBankConflictOpt);
  if (ResidentSymbol)
  {
    *v64 = 1;
    if (ZinIrLocalRegAlloc::SetSymbolToLayerAndTensor(this, ResidentSymbol, v80))
      goto LABEL_60;
  }
  if (!*v64)
    goto LABEL_68;
  v40 = v80;
  v69 = 0;
  v70 = 0;
  __p = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&__p, v81, (uint64_t)v82, v82 - v81);
  SymbolsForInplaceNonSeedTensors = ZinIrLocalRegAlloc::CreateSymbolsForInplaceNonSeedTensors(this, v40, (const ZinIrTensor ***)&__p, 1, 1);
  if (__p)
  {
    v69 = __p;
    operator delete(__p);
  }
  if (SymbolsForInplaceNonSeedTensors)
  {
LABEL_60:
    v38 = 3;
    goto LABEL_89;
  }
  v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v80;
  v42 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)v65, &v80, (uint64_t)&std::piecewise_construct, &v72);
  if ((ZinIrLocalRegAlloc::HasL2SpaceForConflictingDMAbuffers(this, (const ZinLiveRange *)(v42 + 3)) & 1) == 0)
  {
    v43 = v81;
    v44 = v82;
    while (v43 != v44)
      ZinIrLocalRegAlloc::RemoveSymbolFromLayerAndTensor(this, *v43++);
    *v64 = 0;
    goto LABEL_68;
  }
  if (!*v64)
  {
LABEL_68:
    v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v83;
    v45 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)v65, &v83, (uint64_t)&std::piecewise_construct, &v72);
    v45[3] = v63;
    v45[4] = v62;
    std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::__erase_unique<ZinIrTensor *>((_QWORD *)this + 61, &v80);
    v46 = v81;
    v47 = v82;
    if (v81 != v82)
    {
      do
        std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,long>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,long>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,long>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,long>>>::__erase_unique<ZinIrOpLayer *>((_QWORD *)this + 66, v46++);
      while (v46 != v47);
      v48 = (std::string::size_type *)v81;
      v49 = (std::string::size_type *)v82;
      if (v81 != v82)
      {
        do
        {
          v66.__r_.__value_.__r.__words[0] = 0;
          v66.__r_.__value_.__r.__words[0] = *v48;
          v50 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(*((_QWORD **)this + 4), &v66);
          if (v50 && CpAllocUtils::IsL2Dependent(*((_DWORD *)v50 + 6)))
          {
            v76 = 0;
            v77 = 0;
            v75 = 0;
            v72.__r_.__value_.__s.__data_[0] = 0;
            v74 = 0;
            ZinIrRegAllocUtil::FindLastProducerFirstConsumer((ZinIrTensor *)v66.__r_.__value_.__l.__data_, &v76, (uint64_t *)&v77, &v75, (ZinTensorFamilyUtil *)&v72);
            std::__optional_destruct_base<ZinTensorFamilyUtil,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v72);
            v51 = v76;
            v52 = v77;
            v71 = v76;
            v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
            v53 = std::__tree<std::__value_type<ZinIrOpLayer *,ZinMirL2Config>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,ZinMirL2Config>,std::less<ZinIrOpLayer *>,true>,std::allocator<std::__value_type<ZinIrOpLayer *,ZinMirL2Config>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer *&&>,std::tuple<>>((uint64_t)&v78, (unint64_t *)&v71, (uint64_t)&std::piecewise_construct, &v72);
            v67 = v77;
            v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
            v54 = std::__tree<std::__value_type<ZinIrOpLayer *,ZinMirL2Config>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,ZinMirL2Config>,std::less<ZinIrOpLayer *>,true>,std::allocator<std::__value_type<ZinIrOpLayer *,ZinMirL2Config>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer *&&>,std::tuple<>>((uint64_t)&v78, (unint64_t *)&v67, (uint64_t)&std::piecewise_construct, &v72);
            ZinIrLocalRegAlloc::RevertL2DependentConfiguration(this, v51, v52, (const ZinMirL2Config *)(v53 + 5), (const ZinMirL2Config *)(v54 + 5));
          }
          ++v48;
        }
        while (v48 != v49);
      }
    }
  }
  if ((*(_BYTE *)(*((_QWORD *)this + 3) + 96) & 0x10) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v72, "\n{");
    v55 = v81;
    for (i = v82; v55 != i; ++v55)
    {
      std::operator+<char>();
      v57 = std::string::append(&v66, "\n", 1uLL);
      v58 = SHIBYTE(v57->__r_.__value_.__r.__words[2]);
      if (v58 >= 0)
        v59 = (const std::string::value_type *)v57;
      else
        v59 = (const std::string::value_type *)v57->__r_.__value_.__r.__words[0];
      if (v58 >= 0)
        size = HIBYTE(v57->__r_.__value_.__r.__words[2]);
      else
        size = v57->__r_.__value_.__l.__size_;
      std::string::append(&v72, v59, size);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
    }
    std::string::append(&v72, "}", 1uLL);
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v72.__r_.__value_.__l.__data_);
  }
  v38 = 0;
LABEL_89:
  std::__tree<std::__value_type<ZinIrOpLayer *,ZinMirL2Config>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,ZinMirL2Config>,std::less<ZinIrOpLayer *>,true>,std::allocator<std::__value_type<ZinIrOpLayer *,ZinMirL2Config>>>::destroy((uint64_t)&v78, v79[0]);
  v6 = v81;
  if (v81)
  {
LABEL_90:
    v82 = v6;
    operator delete(v6);
  }
  return v38;
}

void sub_206DB2F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;
  void *v32;

  if (a30 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<ZinIrOpLayer *,ZinMirL2Config>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,ZinMirL2Config>,std::less<ZinIrOpLayer *>,true>,std::allocator<std::__value_type<ZinIrOpLayer *,ZinMirL2Config>>>::destroy(v30 - 160, *(_QWORD **)(v30 - 152));
  v32 = *(void **)(v30 - 128);
  if (v32)
  {
    *(_QWORD *)(v30 - 120) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(a1);
}

_QWORD *ZinIrLocalRegAlloc::FindInplaceTensors@<X0>(uint64_t a1@<X0>, ZinIrRegAllocUtil *a2@<X1>, int a3@<W2>, void **a4@<X8>)
{
  _BOOL4 IsL2Inplace;
  BOOL (*v8)(int);
  _QWORD *v9;
  ZinIrRegAllocUtil *v10;
  ZinIrRegAllocUtil **v11;
  const ZinIrTensor *v12;
  uint64_t LastConsumer;
  ZinIrTensor *v14;
  ZinIrTensor *RootTensor;
  unint64_t v16;
  ZinIrRegAllocUtil *v17;
  unint64_t v18;
  ZinIrTensor **v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  ZinIrRegAllocUtil **v25;
  char *v26;
  char *v27;
  ZinIrRegAllocUtil *v28;
  _QWORD *v29;
  _QWORD *result;
  uint64_t v31;
  ZinIrRegAllocUtil *v32;
  ZinIrRegAllocUtil *v33;
  int v34;
  _QWORD v35[3];
  _QWORD *v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v33 = a2;
  if (!CpAllocUtils::IsL2Inplace(a3) && !CpAllocUtils::IsDRAMInplace(a3))
    ZinAssertImpl("allocation type must be L2 inplace or DRAM inplace");
  IsL2Inplace = CpAllocUtils::IsL2Inplace(a3);
  v8 = CpAllocUtils::IsL2Inplace;
  if (!IsL2Inplace)
    v8 = CpAllocUtils::IsDRAMInplace;
  v35[0] = &unk_24BFFF038;
  v35[1] = v8;
  v36 = v35;
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 16) + 1115))
    goto LABEL_30;
  v9 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(*(_QWORD **)(a1 + 32), &v33);
  if (!v9)
    goto LABEL_30;
  LODWORD(v32) = *((_DWORD *)v9 + 6);
  if (!v36)
    std::__throw_bad_function_call[abi:ne180100]();
  if (((*(uint64_t (**)(_QWORD *, ZinIrRegAllocUtil **))(*v36 + 48))(v36, &v32) & 1) != 0)
  {
    v10 = v33;
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    v11 = (ZinIrRegAllocUtil **)operator new(8uLL);
    *a4 = v11;
    *v11++ = v10;
    a4[1] = v11;
    a4[2] = v11;
    LastConsumer = ZinIrRegAllocUtil::GetLastConsumer(v10, v12);
    do
    {
      v32 = 0;
      v14 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)LastConsumer + 32))(LastConsumer, 0, 0);
      RootTensor = ZinIrTensor::GetRootTensor(v14);
      v17 = RootTensor;
      v32 = RootTensor;
      v19 = (ZinIrTensor **)a4[1];
      v18 = (unint64_t)a4[2];
      if ((unint64_t)v19 >= v18)
      {
        v21 = ((char *)v19 - (_BYTE *)*a4) >> 3;
        if ((unint64_t)(v21 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v22 = v18 - (_QWORD)*a4;
        v23 = v22 >> 2;
        if (v22 >> 2 <= (unint64_t)(v21 + 1))
          v23 = v21 + 1;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v23;
        if (v16)
        {
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a4 + 2), v16);
          v17 = v32;
        }
        else
        {
          v24 = 0;
        }
        v25 = (ZinIrRegAllocUtil **)&v24[8 * v21];
        *v25 = v17;
        v20 = v25 + 1;
        v27 = (char *)*a4;
        v26 = (char *)a4[1];
        if (v26 != *a4)
        {
          do
          {
            v28 = (ZinIrRegAllocUtil *)*((_QWORD *)v26 - 1);
            v26 -= 8;
            *--v25 = v28;
          }
          while (v26 != v27);
          v26 = (char *)*a4;
        }
        *a4 = v25;
        a4[1] = v20;
        a4[2] = &v24[8 * v16];
        if (v26)
          operator delete(v26);
      }
      else
      {
        *v19 = RootTensor;
        v20 = v19 + 1;
      }
      a4[1] = v20;
      LastConsumer = ZinIrRegAllocUtil::GetLastConsumer(v32, (const ZinIrTensor *)v16);
      v29 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(*(_QWORD **)(a1 + 32), &v32);
      if (!v29)
        break;
      v34 = *((_DWORD *)v29 + 6);
      if (!v36)
        std::__throw_bad_function_call[abi:ne180100]();
    }
    while (((*(uint64_t (**)(_QWORD *, int *))(*v36 + 48))(v36, &v34) & 1) != 0);
  }
  else
  {
LABEL_30:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  result = v36;
  if (v36 == v35)
  {
    v31 = 4;
    result = v35;
  }
  else
  {
    if (!v36)
      return result;
    v31 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v31))();
}

void sub_206DB32E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v15;
  void *v17;
  char *v18;
  uint64_t v19;

  v17 = *(void **)v15;
  if (*(_QWORD *)v15)
  {
    *(_QWORD *)(v15 + 8) = v17;
    operator delete(v17);
  }
  v18 = a15;
  if (a15 == &a12)
  {
    v19 = 4;
    v18 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_8;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_8:
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirL2Config::operator=(uint64_t a1, uint64_t a2)
{
  memcpy((void *)a1, (const void *)a2, 0x1C0uLL);
  *(_DWORD *)(a1 + 448) = *(_DWORD *)(a2 + 448);
  if (a1 == a2)
  {
    *(_DWORD *)(a1 + 496) = *(_DWORD *)(a2 + 496);
    *(_DWORD *)(a1 + 544) = *(_DWORD *)(a2 + 544);
  }
  else
  {
    *(_DWORD *)(a1 + 488) = *(_DWORD *)(a2 + 488);
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(a1 + 456), *(uint64_t **)(a2 + 472), 0);
    *(_DWORD *)(a1 + 496) = *(_DWORD *)(a2 + 496);
    *(_DWORD *)(a1 + 536) = *(_DWORD *)(a2 + 536);
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(a1 + 504), *(uint64_t **)(a2 + 520), 0);
    *(_DWORD *)(a1 + 544) = *(_DWORD *)(a2 + 544);
    *(_DWORD *)(a1 + 584) = *(_DWORD *)(a2 + 584);
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(a1 + 552), *(uint64_t **)(a2 + 568), 0);
  }
  return a1;
}

uint64_t ZinIrLocalRegAlloc::SetL2DepPairWorkUnits(ZinIrLocalRegAlloc *this, ZinANELayer *a2, ZinANELayer *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const ZinIrTensor *v10;
  unint64_t AllocationGuidance;
  _BOOL4 v12;
  unsigned int v13;
  uint64_t v14;
  const ZinIrTensor *InputTensor;
  unint64_t v16;
  _BOOL4 v17;
  unsigned int v18;
  ZinANELayer *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *__p;
  void *v30;
  uint64_t v31;

  v6 = *((_QWORD *)a2 + 33);
  v7 = *((_QWORD *)a3 + 33);
  v8 = (*(uint64_t (**)(ZinANELayer *, uint64_t))(*(_QWORD *)a2 + 368))(a2, 3);
  if (!*(_BYTE *)(v6 + 233))
    *(_QWORD *)(v6 + 200) = v8;
  v9 = (*(uint64_t (**)(ZinANELayer *, uint64_t))(*(_QWORD *)a3 + 368))(a3, 3);
  if (!*(_BYTE *)(v7 + 233))
    *(_QWORD *)(v7 + 200) = v9;
  if (ZinIrOpLayer::IsTransposeEngineLayer(a2) || ZinIrOpLayer::IsTransposeEngineLayer(a3))
    ZinAssertImpl("Only NE and PE engine layers are supported\n");
  if (ZinIrOpLayer::IsNELayer(a3) && ZinIrOpLayer::IsPELayer(a2))
  {
    v10 = (const ZinIrTensor *)(*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)a3 + 32))(a3, 0, 0);
    AllocationGuidance = (unint64_t)ZinIrLocalRegAlloc::GetAllocationGuidance(this, v10);
    v12 = (AllocationGuidance & 0xFF00000000) != 0 && CpAllocUtils::IsResident(AllocationGuidance);
    v13 = *(_DWORD *)(ZinIrOpLayer::GetInputTensor(a3, 0) + 88);
    ZinIrOpLayer::GetInputTensorDimensions(a3, &__p);
    if (v12)
      v14 = 65793;
    else
      v14 = 65537;
    ZinMirL2Config::SetL2DependentBufferNEWorkUnit(v7 + 120, a3, v13, (uint64_t)__p, v14, 1);
    if (__p)
    {
      v30 = __p;
      operator delete(__p);
    }
    __p = 0;
    v30 = 0;
    v31 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v24 = 0;
    v25 = 0;
    ZinL2FootprintCalculator::GetInterleavesAndCropOffset((_QWORD *)this + 23, (_QWORD *)this + 28, (_QWORD *)this + 33, (uint64_t)a2, (uint64_t)&__p, (uint64_t)&v26, &v25, &v24);
    ZinMirL2Config::SetL2DependentBufferPEWorkUnit(v6 + 120, *((_QWORD *)this + 2), a2, a3, &__p, &v26, v25, v24, 1u, 1);
    if (v26)
    {
      v27 = v26;
      operator delete(v26);
    }
    if (__p)
    {
      v30 = __p;
      operator delete(__p);
    }
  }
  if (ZinIrOpLayer::IsNELayer(a2) && ZinIrOpLayer::IsPELayer(a3))
  {
    InputTensor = (const ZinIrTensor *)ZinIrOpLayer::GetInputTensor(a2, 0);
    v16 = (unint64_t)ZinIrLocalRegAlloc::GetAllocationGuidance(this, InputTensor);
    v17 = (v16 & 0xFF00000000) != 0 && CpAllocUtils::IsResident(v16);
    v18 = *(_DWORD *)(ZinIrOpLayer::GetInputTensor(a2, 0) + 88);
    ZinIrOpLayer::GetInputTensorDimensions(a2, &__p);
    ZinMirL2Config::SetL2DependentBufferNEWorkUnit(v6 + 120, a2, v18, (uint64_t)__p, v17 + 65792, 1);
    if (__p)
    {
      v30 = __p;
      operator delete(__p);
    }
    __p = 0;
    v30 = 0;
    v31 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v24 = 0;
    v25 = 0;
    ZinL2FootprintCalculator::GetInterleavesAndCropOffset((_QWORD *)this + 23, (_QWORD *)this + 28, (_QWORD *)this + 33, (uint64_t)a2, (uint64_t)&__p, (uint64_t)&v26, &v25, &v24);
    ZinMirL2Config::SetL2DependentBufferPEWorkUnit(v7 + 120, *((_QWORD *)this + 2), a2, a3, &__p, &v26, v25, v24, 1u, 1);
    if (v26)
    {
      v27 = v26;
      operator delete(v26);
    }
    if (__p)
    {
      v30 = __p;
      operator delete(__p);
    }
  }
  if (*(_BYTE *)(*((_QWORD *)this + 2) + 1117)
    && (!ZinIrOpLayer::IsNELayer(a2) ? (v19 = a3) : (v19 = a2),
        (v20 = *(_QWORD *)(*((_QWORD *)v19 + 33) + 128),
         v20 <= (*(uint64_t (**)(ZinANELayer *, uint64_t))(*(_QWORD *)a2 + 368))(a2, 3))
     && (v21 = *(_QWORD *)(*((_QWORD *)v19 + 33) + 128),
         v21 <= (*(uint64_t (**)(ZinANELayer *, uint64_t))(*(_QWORD *)a3 + 368))(a3, 3))))
  {
    result = *(_QWORD *)(*((_QWORD *)v19 + 33) + 128);
    if (!*(_BYTE *)(v6 + 233))
      *(_QWORD *)(v6 + 200) = result;
  }
  else
  {
    v22 = (*(uint64_t (**)(ZinANELayer *, uint64_t))(*(_QWORD *)a2 + 368))(a2, 3);
    if (!*(_BYTE *)(v6 + 233))
      *(_QWORD *)(v6 + 200) = v22;
    result = (*(uint64_t (**)(ZinANELayer *, uint64_t))(*(_QWORD *)a3 + 368))(a3, 3);
  }
  if (!*(_BYTE *)(v7 + 233))
    *(_QWORD *)(v7 + 200) = result;
  *(_BYTE *)(v6 + 233) = 1;
  *(_BYTE *)(v7 + 233) = 1;
  return result;
}

void sub_206DB37BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrLocalRegAlloc::CreateSymbolsForInplaceNonSeedTensors(ZinIrLocalRegAlloc *a1, const ZinIrTensor *a2, const ZinIrTensor ***a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  ZinIrSymbol **v10;
  ZinIrSymbol *v11;
  uint64_t v12;
  uint64_t *v13;
  const ZinIrTensor **v14;
  int v15;
  unint64_t i;
  const ZinIrTensor *v17;
  _QWORD *v18;
  uint64_t v19;
  ZinIrOpLayer *v20;
  unint64_t v21;
  ZinIrTensor *InputTensor;
  ZinIrTensor *RootTensor;
  const ZinIrTensor *v24;
  const ZinIrTensor **v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  int IsPreCropSupported;
  int SymbolAlias;
  int v32;
  const char *v34;
  char *__format;
  int v36;
  uint64_t v37;
  ZinIrSymbol *v38;
  int v39;
  __int128 v41;
  ZinIrSymbol *v42[26];
  ZinIrSymbol *v43;
  __int128 v44;
  const ZinIrTensor *v45;
  void *v46;
  std::string v47;
  _BYTE v48[304];
  void *__p;
  std::string __s;
  _QWORD v51[38];
  _BYTE v52[24];
  _BYTE *v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v45 = a2;
  v5 = (char *)a3[1] - (char *)*a3;
  if (!v5 || **a3 != a2)
    ZinAssertImpl("the first tensor in the inplace group must be the seed tensor");
  if (v5 != 8)
  {
    __p = &v45;
    v44 = *(_OWORD *)(std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)a1 + 144, &v45, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p)+ 3);
    v9 = *((_QWORD *)v45 + 13);
    if (!v9 || (v10 = *(ZinIrSymbol ***)(v9 + 40), v10 == *(ZinIrSymbol ***)(v9 + 48)) || (v11 = *v10) == 0)
      ZinAssertImpl("fail to allocate seed inplace tensor");
    v12 = *((_QWORD *)v11 + 23);
    v39 = *((_DWORD *)v11 + 38);
    v38 = *v10;
    LODWORD(__p) = ZinIrSymbol::GetMemType(v11);
    v13 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>((_QWORD *)a1 + 13, (int *)&__p);
    v37 = v13 ? v13[3] : 0;
    v14 = *a3;
    if ((unint64_t)((char *)a3[1] - (char *)*a3) >= 9)
    {
      if (a4)
        v15 = 1;
      else
        v15 = 2;
      v36 = v15;
      __format = "failed to create symbol for inplace tensor";
      for (i = 1; i < a3[1] - *a3; ++i)
      {
        v43 = 0;
        v17 = v14[i];
        if (v17 == v45)
          ZinAssertImpl("incorrect inplace tensor: expecting nonseed");
        ZinIrLocalRegAlloc::GetDimensionOrderHint(a1, v17, (uint64_t)&__p);
        v53 = 0;
        ZinIrTensor::InferDescriptor((unsigned __int8 *)v17, v36, (uint64_t)&__p, a5, 1, (uint64_t)v52, (uint64_t)v42);
        v18 = v53;
        if (v53 == v52)
        {
          v18 = v52;
          v19 = 4;
        }
        else
        {
          if (!v53)
            goto LABEL_21;
          v19 = 5;
        }
        (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_21:
        if (__p)
        {
          __s.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          operator delete(__p);
        }
        v20 = (ZinIrOpLayer *)*((_QWORD *)(*a3)[i] + 12);
        if (*((_QWORD *)v20 + 12) == *((_QWORD *)v20 + 11))
LABEL_47:
          ZinAssertImpl("Internal Error: Cannot find previous inplace tensor");
        v21 = 0;
        while (1)
        {
          InputTensor = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(v20, v21);
          RootTensor = ZinIrTensor::GetRootTensor(InputTensor);
          v25 = *a3;
          if (RootTensor == (*a3)[i - 1])
            break;
          if (++v21 >= (uint64_t)(*((_QWORD *)v20 + 12) - *((_QWORD *)v20 + 11)) >> 3)
            goto LABEL_47;
        }
        v26 = *((_QWORD *)InputTensor + 13);
        if (!v26 || (v27 = *(uint64_t **)(v26 + 40), v27 == *(uint64_t **)(v26 + 48)))
          v28 = 0;
        else
          v28 = *v27;
        v42[15] = *(ZinIrSymbol **)(v28 + 328);
        v29 = *(_OWORD *)(v28 + 312);
        *(_OWORD *)&v42[11] = *(_OWORD *)(v28 + 296);
        *(_OWORD *)&v42[13] = v29;
        IsPreCropSupported = ZinIrRegAllocUtil::IsPreCropSupported(v25[i], v24);
        ZinIrSymbol::Descriptor::Descriptor((uint64_t)&__p, v39, (__int128 *)((char *)(*a3)[i] + 24), &v44, v12, v42);
        v46 = __p;
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v47, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        else
          v47 = __s;
        memcpy(v48, v51, sizeof(v48));
        SymbolAlias = ZinIrMemoryPool::CreateSymbolAlias(v37, (uint64_t *)&v46, 0, 0, v38, IsPreCropSupported, (uint64_t *)&v43);
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v47.__r_.__value_.__l.__data_);
        if (SymbolAlias)
          goto LABEL_52;
        if (v51[0] != v12)
        {
          v34 = "nonseed symbol must have the same size as seed symbol.";
LABEL_51:
          __format = (char *)v34;
LABEL_52:
          ZinAssertImpl(__format);
        }
        if (std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>((_QWORD *)a1 + 66, &(*a3)[i]))
        {
          v34 = "invalid case of inplace allocation";
          goto LABEL_51;
        }
        *(_QWORD *)&v41 = (*a3)[i];
        *((_QWORD *)&v41 + 1) = v45;
        std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::pair<ZinIrOpLayer * const,ZinAneInstruction *> const&>((uint64_t)a1 + 528, &v41, &v41);
        v32 = ZinIrLocalRegAlloc::SetSymbolToLayerAndTensor(a1, v43, (*a3)[i]);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
        if (v32)
          return 3;
        v14 = *a3;
      }
    }
  }
  return 0;
}

void sub_206DB3C34(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x2CF]) < 0)
    operator delete((void *)STACK[0x2B8]);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::RevertL2DependentConfiguration(ZinIrLocalRegAlloc *this, ZinANELayer *a2, ZinANELayer *a3, const ZinMirL2Config *a4, const ZinMirL2Config *a5)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int IntermediateLayers;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *__p;
  uint64_t *v28;
  uint64_t v29;

  v7 = *((_QWORD *)a2 + 33);
  v8 = *((_QWORD *)a3 + 33);
  *(_BYTE *)(v7 + 233) = *((_BYTE *)a4 + 113);
  v9 = *((unsigned __int8 *)a5 + 113);
  *(_BYTE *)(v8 + 233) = v9;
  *(_BYTE *)(v7 + 256) = *((_BYTE *)a4 + 136);
  *(_BYTE *)(v7 + 150) = *((_BYTE *)a4 + 30);
  *(_BYTE *)(v8 + 256) = *((_BYTE *)a5 + 136);
  *(_BYTE *)(v8 + 150) = *((_BYTE *)a5 + 30);
  if (!*(_BYTE *)(v7 + 233))
  {
    *(_QWORD *)(v7 + 200) = *((_QWORD *)a4 + 10);
    if (v9)
      goto LABEL_3;
LABEL_6:
    *(_QWORD *)(v8 + 200) = *((_QWORD *)a5 + 10);
    goto LABEL_3;
  }
  if (!v9)
    goto LABEL_6;
LABEL_3:
  v10 = *((_QWORD *)a2 + 6);
  __p = 0;
  v28 = 0;
  v29 = 0;
  IntermediateLayers = ZinTensorFamilyUtil::GetIntermediateLayers((uint64_t)a2, a3, 0, 0, &__p);
  v12 = v10 + 1;
  if (IntermediateLayers || (v14 = (uint64_t *)__p, v15 = v28, __p == v28))
  {
    v13 = v10 + 1;
  }
  else
  {
    do
    {
      v16 = *v14++;
      v13 = v12 + 1;
      *(_QWORD *)(v16 + 48) = v12++;
    }
    while (v14 != v15);
  }
  if ((ZinIrLocalRegAlloc::ChangeEngineLayerSchedule(this, a3, v13, 0) & 1) != 0)
  {
    v17 = 0;
  }
  else
  {
    v18 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v18)
      ZinIrLocalRegAlloc::RevertL2DependentConfiguration(v18, v19, v20, v21, v22, v23, v24, v25);
    v17 = 3;
  }
  if (__p)
  {
    v28 = (uint64_t *)__p;
    operator delete(__p);
  }
  return v17;
}

void sub_206DB3DF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrLocalRegAlloc::AllocateDRAMInplaceTensors(ZinIrLocalRegAlloc *this, ZinIrTensor *a2, BOOL *a3)
{
  std::string::size_type *v6;
  std::string::size_type *v7;
  ZinIrTensor *v8;
  int IsFunctionallyValidForDartThrashingPadding;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  std::string::size_type *v14;
  std::string::size_type *v15;
  _QWORD *v16;
  _QWORD *v17;
  const ZinIrTensor **v18;
  const ZinIrTensor **v19;
  uint64_t PreAllocationInterleave;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t GreatestCommonDivisor;
  std::string::size_type *i;
  std::string::size_type *v34;
  _QWORD *v35;
  ZinIrTensor *v36;
  ZinIrSection *Section;
  _BOOL4 NonResidentTensor;
  const ZinIrTensor *v39;
  int SymbolsForInplaceNonSeedTensors;
  uint64_t v41;
  std::string::size_type *v42;
  std::string::size_type *j;
  std::string *v44;
  int v45;
  const std::string::value_type *v46;
  std::string::size_type size;
  _QWORD *v49;
  std::string::size_type *v50;
  std::string::size_type *v51;
  BOOL *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  std::string v56;
  std::string v57;
  void *v58;
  void *v59;
  uint64_t v60;
  __int128 __p;
  _QWORD v62[2];
  ZinIrTensor *v63;
  std::string::size_type *v64;
  std::string::size_type *v65;
  _QWORD v66[2];

  v66[0] = a2;
  *a3 = 0;
  ZinIrLocalRegAlloc::FindInplaceTensors((uint64_t)this, a2, 8, (void **)&v64);
  v6 = v65;
  if (v65 == v64)
  {
    v41 = 0;
    if (!v65)
      return v41;
    goto LABEL_70;
  }
  v63 = (ZinIrTensor *)*v64;
  if (v63 != a2)
    ZinAssertImpl("wrong inplace tensors");
  v7 = v64 + 1;
  do
  {
    v8 = (ZinIrTensor *)*(v7 - 1);
    ZinIrTensor::GetTensorFamily(v8, (uint64_t)&__p);
    IsFunctionallyValidForDartThrashingPadding = ZinMirDartThrashingOptimizer::IsFunctionallyValidForDartThrashingPadding((ZinOpLayerUtils **)v8, (uint64_t *)&__p);
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    if (v7 == v6)
      v10 = 0;
    else
      v10 = IsFunctionallyValidForDartThrashingPadding;
    ++v7;
  }
  while ((v10 & 1) != 0);
  *(_QWORD *)&__p = &v63;
  v11 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)this + 144, &v63, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p);
  v13 = v11[3];
  v12 = v11[4];
  v14 = v64;
  v15 = v65;
  v53 = v12;
  v54 = v13;
  if (v64 != v65)
  {
    v12 = v11[4];
    v13 = v11[3];
    do
    {
      v57.__r_.__value_.__r.__words[0] = 0;
      v57.__r_.__value_.__r.__words[0] = *v14;
      *(_QWORD *)&__p = &v57;
      v16 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)this + 144, &v57, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p);
      if (v16[3] < v13)
        v13 = v16[3];
      if (v12 <= v16[4])
        v12 = v16[4];
      ++v14;
    }
    while (v14 != v15);
  }
  *(_QWORD *)&__p = &v63;
  v17 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)this + 144, &v63, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p);
  v17[3] = v13;
  v17[4] = v12;
  v55 = (_QWORD *)((char *)this + 488);
  if (std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>((_QWORD *)this + 61, &v63)|| std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>((_QWORD *)this + 66, &v63))
  {
    ZinAssertImpl("invalid case: tensor is already registered as inplace seed tensor");
  }
  __p = (unint64_t)v63;
  v62[0] = 0;
  v62[1] = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((_QWORD *)&__p + 1, v64, (uint64_t)v65, v65 - v64);
  std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::__emplace_unique_key_args<ZinIrTensor *,std::pair<ZinIrTensor * const,std::vector<ZinIrTensor *>>>((uint64_t)v55, &__p, (uint64_t)&__p);
  if (*((_QWORD *)&__p + 1))
  {
    v62[0] = *((_QWORD *)&__p + 1);
    operator delete(*((void **)&__p + 1));
  }
  v52 = a3;
  *(_QWORD *)&__p = v63;
  *((_QWORD *)&__p + 1) = v63;
  std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::pair<ZinIrOpLayer * const,ZinAneInstruction *> const&>((uint64_t)this + 528, &__p, &__p);
  __p = 0uLL;
  v62[0] = 0;
  v18 = (const ZinIrTensor **)v64;
  v19 = (const ZinIrTensor **)v65;
  if (v64 != v65)
  {
    do
    {
      PreAllocationInterleave = ZinIrLocalRegAlloc::GetPreAllocationInterleave(this, *v18);
      v21 = PreAllocationInterleave;
      v22 = (char *)*((_QWORD *)&__p + 1);
      if (*((_QWORD *)&__p + 1) >= v62[0])
      {
        v24 = (char *)__p;
        v25 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3;
        v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v27 = v62[0] - __p;
        if ((uint64_t)(v62[0] - __p) >> 2 > v26)
          v26 = v27 >> 2;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
          v28 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
        {
          v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v62, v28);
          v22 = (char *)*((_QWORD *)&__p + 1);
          v24 = (char *)__p;
        }
        else
        {
          v29 = 0;
        }
        v30 = (uint64_t *)&v29[8 * v25];
        *v30 = v21;
        v23 = v30 + 1;
        while (v22 != v24)
        {
          v31 = *((_QWORD *)v22 - 1);
          v22 -= 8;
          *--v30 = v31;
        }
        *(_QWORD *)&__p = v30;
        *((_QWORD *)&__p + 1) = v23;
        v62[0] = &v29[8 * v28];
        if (v24)
          operator delete(v24);
      }
      else
      {
        **((_QWORD **)&__p + 1) = PreAllocationInterleave;
        v23 = v22 + 8;
      }
      *((_QWORD *)&__p + 1) = v23;
      ++v18;
    }
    while (v18 != v19);
  }
  GreatestCommonDivisor = FindGreatestCommonDivisor((uint64_t)&__p);
  if (GreatestCommonDivisor <= 0)
    ZinAssertImpl("wrong GCD for inplace interleave");
  v34 = v64;
  for (i = v65; v34 != i; ++v34)
  {
    v35 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>((_QWORD *)this + 23, v34);
    if (v35)
    {
      v35[3] = GreatestCommonDivisor;
    }
    else
    {
      v57.__r_.__value_.__r.__words[0] = *v34;
      v57.__r_.__value_.__l.__size_ = GreatestCommonDivisor;
      std::__hash_table<std::__hash_value_type<ZinIrTensor const*,long>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,long>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,long>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,long>>>::__emplace_unique_impl<std::pair<ZinIrTensor*,long>>((_QWORD *)this + 23, (unint64_t *)&v57);
    }
  }
  v36 = v63;
  Section = (ZinIrSection *)ZinIrLocalRegAlloc::GetSection((uint64_t)this, 0, 4);
  NonResidentTensor = ZinIrLocalRegAlloc::AllocateNonResidentTensor(this, v36, Section, IsFunctionallyValidForDartThrashingPadding);
  *v52 = NonResidentTensor;
  if (!NonResidentTensor)
    goto LABEL_72;
  v39 = v63;
  v59 = 0;
  v60 = 0;
  v58 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v58, v64, (uint64_t)v65, v65 - v64);
  SymbolsForInplaceNonSeedTensors = ZinIrLocalRegAlloc::CreateSymbolsForInplaceNonSeedTensors(this, v39, (const ZinIrTensor ***)&v58, 0, GreatestCommonDivisor);
  if (v58)
  {
    v59 = v58;
    operator delete(v58);
  }
  if (SymbolsForInplaceNonSeedTensors)
  {
    v41 = 3;
    goto LABEL_67;
  }
  if (!*v52)
  {
LABEL_72:
    v57.__r_.__value_.__r.__words[0] = (std::string::size_type)v66;
    v49 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)this + 144, v66, (uint64_t)&std::piecewise_construct, &v57);
    v49[3] = v54;
    v49[4] = v53;
    std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::__erase_unique<ZinIrTensor *>(v55, &v63);
    v50 = v64;
    v51 = v65;
    while (v50 != v51)
      std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,long>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,long>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,long>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,long>>>::__erase_unique<ZinIrOpLayer *>((_QWORD *)this + 66, v50++);
  }
  if ((*(_BYTE *)(*((_QWORD *)this + 3) + 96) & 0x10) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v57, "\n{");
    v42 = v64;
    for (j = v65; v42 != j; ++v42)
    {
      std::operator+<char>();
      v44 = std::string::append(&v56, "\n", 1uLL);
      v45 = SHIBYTE(v44->__r_.__value_.__r.__words[2]);
      if (v45 >= 0)
        v46 = (const std::string::value_type *)v44;
      else
        v46 = (const std::string::value_type *)v44->__r_.__value_.__r.__words[0];
      if (v45 >= 0)
        size = HIBYTE(v44->__r_.__value_.__r.__words[2]);
      else
        size = v44->__r_.__value_.__l.__size_;
      std::string::append(&v57, v46, size);
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v56.__r_.__value_.__l.__data_);
    }
    std::string::append(&v57, "}", 1uLL);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
  }
  v41 = 0;
LABEL_67:
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  v6 = v64;
  if (v64)
  {
LABEL_70:
    v65 = v6;
    operator delete(v6);
  }
  return v41;
}

void sub_206DB436C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  void *v33;

  if (a25 < 0)
    operator delete(__p);
  if (a29)
    operator delete(a29);
  v33 = *(void **)(v31 - 120);
  if (v33)
  {
    *(_QWORD *)(v31 - 112) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrLocalRegAlloc::GetPreAllocationInterleave(ZinIrLocalRegAlloc *this, const ZinIrTensor *a2)
{
  uint64_t v2;
  _QWORD *v4;
  const ZinIrTensor *v5;

  v5 = a2;
  if (*(_DWORD *)(*((_QWORD *)a2 + 2) + 84) == 2 && (v2 = *((_QWORD *)a2 + 13)) != 0)
  {
    if (*(_BYTE *)(v2 + 144))
      return *(_QWORD *)(v2 + 136);
  }
  else
  {
    v4 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 23, &v5);
    if (v4)
      return v4[3];
  }
  return 1;
}

BOOL ZinIrLocalRegAlloc::AllocateNonResidentTensor(ZinIrLocalRegAlloc *this, ZinIrTensor *a2, ZinIrSection *a3, int a4)
{
  char v7;
  const ZinIrTensor *PreAllocationInterleave;
  ZinIrTensor *RootTensor;
  void **v10;
  void **v11;
  uint64_t DynamicWrapAxis;
  unsigned __int8 *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int IsQualifiedForPaddingForDartThrashingOpt;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  ZinIrMemoryPool *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  _OWORD *v26;
  _BOOL8 result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD v35[13];
  void *__p[4];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  int64x2_t v40;
  int64x2_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int64x2_t v49;
  _BYTE v50[48];
  int64x2_t v51;
  int64x2_t v52;
  _BYTE v53[48];
  int64x2_t v54;
  int64x2_t v55;
  int64x2_t v56;
  int64x2_t v57;
  int64x2_t v58;
  _BYTE v59[25];
  _BYTE v60[25];
  __int128 v61;
  unsigned __int8 *v62;
  _BYTE v63[24];
  _BYTE *v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v62 = (unsigned __int8 *)a2;
  *(_QWORD *)v50 = &v62;
  v61 = *(_OWORD *)(std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)this + 144, &v62, (uint64_t)&std::piecewise_construct, (_QWORD **)v50)+ 3);
  ZinIrTensor::GetStaticWrapInfo((ZinIrTensor *)v62, (uint64_t)v60);
  v59[0] = 0;
  v59[24] = 0;
  if (v60[24]
    || (RootTensor = ZinIrTensor::GetRootTensor((ZinIrTensor *)v62),
        v10 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)this + 592, (void **)RootTensor + 3), v11 = v10, (void **)((char *)this + 600) == v10))
  {
    v7 = 1;
  }
  else
  {
    v7 = 1;
    if (*((_BYTE *)v10 + 64))
    {
      *(_DWORD *)&v59[20] = 0;
      *(_DWORD *)&v59[17] = 0;
      *(_DWORD *)&v59[4] = 0;
      v59[24] = 1;
      DynamicWrapAxis = ZinIrTensor::GetDynamicWrapAxis((ZinIrTensor *)v62);
      if ((DynamicWrapAxis & 0xFF00000000) == 0)
        ZinAssertImpl("Dynamic wrap axis must be present for the start offset / wrap index BAR");
      *(_DWORD *)v59 = DynamicWrapAxis;
      *(_QWORD *)&v59[8] = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)RootTensor + 6, DynamicWrapAxis);
      if (!*((_BYTE *)v11 + 64))
        std::__throw_bad_optional_access[abi:ne180100]();
      v7 = 0;
      v59[16] = *((_BYTE *)v11 + 63);
    }
  }
  PreAllocationInterleave = (const ZinIrTensor *)ZinIrLocalRegAlloc::GetPreAllocationInterleave(this, (const ZinIrTensor *)v62);
  *(_DWORD *)v50 = 0;
  memset(&v50[8], 0, 40);
  v51 = vdupq_n_s64(1uLL);
  v52 = v51;
  *(int64x2_t *)v53 = v51;
  *(int64x2_t *)&v53[16] = v51;
  *(int64x2_t *)&v53[32] = v51;
  v54 = v51;
  v55 = v51;
  v56 = v51;
  v57 = v51;
  v58 = v51;
  if (v60[24])
  {
    ZinIrLocalRegAlloc::InferCircularTensorDescriptor(this, (uint64_t)v62, (uint64_t)v60, 2, (uint64_t)v50);
    goto LABEL_19;
  }
  if ((v7 & 1) == 0)
  {
    ZinIrLocalRegAlloc::InferCircularTensorDescriptor(this, (uint64_t)v62, (uint64_t)v59, 2, (uint64_t)v50);
    goto LABEL_19;
  }
  v13 = v62;
  ZinIrLocalRegAlloc::GetDimensionOrderHint(this, (const ZinIrTensor *)v62, (uint64_t)__p);
  v64 = 0;
  ZinIrTensor::InferDescriptor(v13, 2, (uint64_t)__p, (uint64_t)PreAllocationInterleave, 1, (uint64_t)v63, (uint64_t)&v37);
  v56 = v47;
  v57 = v48;
  v58 = v49;
  *(_OWORD *)&v53[16] = v43;
  *(_OWORD *)&v53[32] = v44;
  v54 = v45;
  v55 = v46;
  *(_OWORD *)&v50[32] = v39;
  v51 = v40;
  v52 = v41;
  *(_OWORD *)v53 = v42;
  *(_OWORD *)v50 = v37;
  *(_OWORD *)&v50[16] = v38;
  v14 = v64;
  if (v64 == v63)
  {
    v15 = 4;
    v14 = v63;
  }
  else
  {
    if (!v64)
      goto LABEL_17;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_17:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_19:
  if (a4)
  {
    v35[10] = v56;
    v35[11] = v57;
    v35[12] = v58;
    v35[6] = *(_OWORD *)&v53[16];
    v35[7] = *(_OWORD *)&v53[32];
    v35[8] = v54;
    v35[9] = v55;
    v35[2] = *(_OWORD *)&v50[32];
    v35[3] = v51;
    v35[4] = v52;
    v35[5] = *(_OWORD *)v53;
    v35[0] = *(_OWORD *)v50;
    v35[1] = *(_OWORD *)&v50[16];
    v16 = *((_QWORD *)this + 2);
    v17 = *((_QWORD *)this + 3);
    LOBYTE(v37) = 0;
    BYTE8(v43) = 0;
    IsQualifiedForPaddingForDartThrashingOpt = ZinMirDartThrashingOptimizer::IsQualifiedForPaddingForDartThrashingOpt((ZinIrTensor *)v62, (uint64_t)v35, v16, v17, (ZinTensorFamilyUtil *)&v37);
    std::__optional_destruct_base<ZinTensorFamilyUtil,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v37);
    if (IsQualifiedForPaddingForDartThrashingOpt)
    {
      ZinMirDartThrashingOptimizer::ComputeOptimizedStridesForDartThrashingOpt((ZinMirDartThrashingOptimizer *)v62, PreAllocationInterleave, *((_QWORD *)this + 2), (uint64_t)&v37);
      *(_OWORD *)&v53[8] = v37;
      *(_OWORD *)&v53[24] = v38;
      *(_QWORD *)&v53[40] = v39;
    }
  }
  ZinIrTensor::GetTensorSizeInBytes(v62, v50);
  v20 = v19;
  LODWORD(v37) = *((_DWORD *)a3 + 3);
  v21 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>((_QWORD *)this + 13, (int *)&v37);
  if (v21)
    v22 = (ZinIrMemoryPool *)v21[3];
  else
    v22 = 0;
  v23 = (uint64_t *)*((_QWORD *)this + 2);
  if ((*((_DWORD *)a3 + 2) & 0xFFFFFFFE) == 2)
  {
    v24 = v23 + 64;
  }
  else
  {
    v25 = v23 + 66;
    v24 = v23 + 70;
    if (!v62[164])
      v24 = v25;
  }
  v26 = (_OWORD *)ZinIrLocalRegAlloc::AllocateNonResidentSymbol((uint64_t)v21, v22, a3, *v24, (__int128 *)(v62 + 24), v20, v50, &v61);
  if (v26)
  {
    v26[2] = *(_OWORD *)v60;
    *(_OWORD *)((char *)v26 + 41) = *(_OWORD *)&v60[9];
    v26[4] = *(_OWORD *)v59;
    *(_OWORD *)((char *)v26 + 73) = *(_OWORD *)&v59[9];
    return ZinIrLocalRegAlloc::SetSymbolToLayerAndTensor(this, (ZinIrSymbol *)v26, (ZinIrTensor *)v62) == 0;
  }
  else
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      ZinIrLocalRegAlloc::AllocateNonResidentTensor(result, v28, v29, v30, v31, v32, v33, v34);
      return 0;
    }
  }
  return result;
}

void sub_206DB48A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v42;
  uint64_t v43;

  v42 = *(_QWORD **)(v40 - 80);
  if (v42 == v39)
  {
    v43 = 4;
    v42 = (_QWORD *)(v40 - 104);
  }
  else
  {
    if (!v42)
      goto LABEL_6;
    v43 = 5;
  }
  (*(void (**)(void))(*v42 + 8 * v43))();
LABEL_6:
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinIrLocalRegAlloc::InferCircularTensorDescriptor(ZinIrLocalRegAlloc *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  __int128 v9;
  size_t v10;
  std::string *v11;
  const void *v12;
  std::string *v13;
  std::string::size_type size;
  std::string *v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  _QWORD *v22;
  uint64_t PreAllocationInterleave;
  unsigned __int8 *v24;
  _QWORD *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::string v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  _QWORD *v35;
  std::string v36;
  void *__p[2];
  std::string::size_type v38;
  __int128 v39[2];
  uint64_t v40;
  _BYTE v41[24];
  _BYTE *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v9 = *(_OWORD *)(a2 + 64);
  v39[0] = *(_OWORD *)(a2 + 48);
  v39[1] = v9;
  v40 = *(_QWORD *)(a2 + 80);
  SetValueAtDimension<ZinTensorDimensions>(v39, *(_DWORD *)a3, *(_QWORD *)(a3 + 8));
  if (*(char *)(a2 + 47) >= 0)
    v10 = *(unsigned __int8 *)(a2 + 47);
  else
    v10 = *(_QWORD *)(a2 + 32);
  v11 = &v30;
  std::string::basic_string[abi:ne180100]((uint64_t)&v30, v10 + 16);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v11 = (std::string *)v30.__r_.__value_.__r.__words[0];
  if (v10)
  {
    if (*(char *)(a2 + 47) >= 0)
      v12 = (const void *)(a2 + 24);
    else
      v12 = *(const void **)(a2 + 24);
    memmove(v11, v12, v10);
  }
  strcpy((char *)v11 + v10, "_circular_buffer");
  std::to_string(&v36, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 152));
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v36;
  else
    v13 = (std::string *)v36.__r_.__value_.__r.__words[0];
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
  else
    size = v36.__r_.__value_.__l.__size_;
  v15 = std::string::append(&v30, (const std::string::value_type *)v13, size);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v38 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  v17 = *(_QWORD *)(a2 + 16);
  v18 = *(_DWORD *)(a2 + 88);
  v34 = 0;
  v35 = 0;
  v33 = 0;
  LODWORD(v30.__r_.__value_.__l.__data_) = 0;
  v31 = 0;
  *(_OWORD *)&v30.__r_.__value_.__r.__words[1] = 0uLL;
  v32 = 0;
  ZinIrTensor::CreateTensor(v17, v18, v39, (__int128 *)__p, &v35, &v33, (unsigned int *)&v30, (uint64_t *)&v36);
  v19 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v35;
  v35 = 0;
  if (v22)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v35, v22);
  if (a4 == 2)
    PreAllocationInterleave = ZinIrLocalRegAlloc::GetPreAllocationInterleave(a1, (const ZinIrTensor *)a2);
  else
    PreAllocationInterleave = 1;
  v24 = (unsigned __int8 *)v36.__r_.__value_.__r.__words[0];
  ZinIrLocalRegAlloc::GetDimensionOrderHint(a1, (const ZinIrTensor *)a2, (uint64_t)&v30);
  v42 = 0;
  ZinIrTensor::InferDescriptor(v24, a4, (uint64_t)&v30, PreAllocationInterleave, 1, (uint64_t)v41, a5);
  v25 = v42;
  if (v42 == v41)
  {
    v26 = 4;
    v25 = v41;
  }
  else
  {
    if (!v42)
      goto LABEL_36;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_36:
  if (v30.__r_.__value_.__r.__words[0])
  {
    v30.__r_.__value_.__l.__size_ = v30.__r_.__value_.__r.__words[0];
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  v27 = (std::__shared_weak_count *)v36.__r_.__value_.__l.__size_;
  if (v36.__r_.__value_.__l.__size_)
  {
    v28 = (unint64_t *)(v36.__r_.__value_.__l.__size_ + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (SHIBYTE(v38) < 0)
    operator delete(__p[0]);
}

void sub_206DB4BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  if (a32 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL ZinIrLocalRegAlloc::AllocateNonResidentTensorCompressedMetadata(ZinIrLocalRegAlloc *this, const void **a2, ZinIrSection *a3)
{
  _QWORD *Size;
  uint64_t *v6;
  ZinIrMemoryPool *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t NameForCompressedMetadata;
  uint64_t v11;
  ZinIrSymbol *v12;
  ZinIrTensor **v13;
  ZinIrTensor **v14;
  ZinIrTensor *v15;
  int v16;
  _BOOL8 v17;
  void *__p[2];
  char v20;
  _OWORD v21[13];
  __int128 v22;
  const void **v23;

  v23 = a2;
  *(_QWORD *)&v21[0] = &v23;
  v22 = *(_OWORD *)(std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)this + 144, &v23, (uint64_t)&std::piecewise_construct, (_QWORD **)v21)+ 3);
  ZinIrTensor::InferMetadataDescriptorForCompressedTensor((ZinIrTensor *)v23, *(_QWORD *)(*((_QWORD *)this + 2) + 560), (uint64_t)v21);
  Size = ZinTensorDescriptorGetSize(v21);
  LODWORD(__p[0]) = *((_DWORD *)a3 + 3);
  v6 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>((_QWORD *)this + 13, (int *)__p);
  if (v6)
    v7 = (ZinIrMemoryPool *)v6[3];
  else
    v7 = 0;
  v8 = 560;
  if ((*((_DWORD *)a3 + 2) & 0xFFFFFFFE) == 2)
    v8 = 512;
  v9 = *(_QWORD *)(*((_QWORD *)this + 2) + v8);
  NameForCompressedMetadata = GetNameForCompressedMetadata(v23 + 3, (uint64_t)__p);
  v11 = ZinIrLocalRegAlloc::AllocateNonResidentSymbol(NameForCompressedMetadata, v7, a3, v9, (__int128 *)__p, (uint64_t)Size, v21, &v22);
  v12 = (ZinIrSymbol *)v11;
  if ((v20 & 0x80000000) == 0)
  {
    if (v11)
      goto LABEL_8;
    return 0;
  }
  operator delete(__p[0]);
  if (!v12)
    return 0;
LABEL_8:
  ZinIrTensor::GetTensorFamily((ZinIrTensor *)v23, (uint64_t)__p);
  v13 = (ZinIrTensor **)__p[0];
  v14 = (ZinIrTensor **)__p[1];
  if (__p[0] == __p[1])
  {
    v17 = 1;
    if (!__p[0])
      return v17;
LABEL_16:
    __p[1] = v13;
    operator delete(v13);
    return v17;
  }
  do
  {
    v15 = *v13;
    v16 = ZinIrTensor::SetCompressedMetadataSymbol(*v13, v12);
    v17 = v16 == 0;
    if (v16)
      break;
    ZinIrLocalRegAlloc::SetNonResidentCompressedMetadataSymbolToLayers(this, v15);
    ++v13;
  }
  while (v13 != v14);
  v13 = (ZinIrTensor **)__p[0];
  if (__p[0])
    goto LABEL_16;
  return v17;
}

void sub_206DB4E38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrLocalRegAlloc::SetNonResidentCompressedMetadataSymbolToLayers(ZinIrLocalRegAlloc *this, ZinIrTensor *a2)
{
  uint64_t v4;
  uint64_t v5;
  ZinIrOpLayer *v6;
  uint64_t result;
  ZinIrOpLayer **v8;
  ZinIrOpLayer **i;
  ZinIrOpLayer *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  uint64_t v15;

  v4 = *((_QWORD *)a2 + 13);
  if (v4)
    v5 = *(_QWORD *)(v4 + 64);
  else
    v5 = 0;
  v6 = (ZinIrOpLayer *)*((_QWORD *)a2 + 12);
  result = ZinIrOpLayer::IsANELayer(v6);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(ZinIrOpLayer *, uint64_t))(*(_QWORD *)v6 + 488))(v6, v5);
    *(_QWORD *)(*((_QWORD *)v6 + 33) + 1256) = v5;
  }
  v8 = (ZinIrOpLayer **)*((_QWORD *)v6 + 14);
  for (i = (ZinIrOpLayer **)*((_QWORD *)v6 + 15); v8 != i; ++v8)
  {
    v10 = *v8;
    result = ZinIrOpLayer::IsANELayer(*v8);
    if ((_DWORD)result)
    {
      if (*((_QWORD *)v10 + 12) != *((_QWORD *)v10 + 11))
      {
        v11 = 0;
        do
        {
          if ((ZinIrTensor *)ZinIrOpLayer::GetInputTensor(v10, v11) == a2)
          {
            v12 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0, 0);
            if (((*(uint64_t (**)(ZinIrOpLayer *, uint64_t))(*(_QWORD *)v10 + 200))(v10, v12) & 1) == 0)
            {
              v15 = 0;
              if (!ZinMemSourceIndexTranslator::GetDMASrcIndex(v10, (const ZinANELayer *)v11, &v15, v13))
              {
                if (*(_BYTE *)(*((_QWORD *)this + 2) + 1251))
                  v14 = (_QWORD *)(*((_QWORD *)v10 + 33) + 8 * v15 + 1240);
                else
                  v14 = (_QWORD *)(*((_QWORD *)v10 + 33) + 96 * (v15 == 0) + 752);
                *v14 = v5;
                (*(void (**)(ZinIrOpLayer *))(*(_QWORD *)v10 + 472))(v10);
              }
            }
          }
          ++v11;
        }
        while (v11 < (uint64_t)(*((_QWORD *)v10 + 12) - *((_QWORD *)v10 + 11)) >> 3);
      }
      result = ZinIrOpLayer::IsPELayer(v10);
    }
  }
  return result;
}

uint64_t ZinIrLocalRegAlloc::AllocateStaticCircularTensor(const ZinIrTensor **this, ZinIrTensor *a2, uint64_t a3, StaticWrapInfo *a4)
{
  ZinIrSection *L2Section;
  uint64_t *v6;
  ZinIrMemoryPool *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *Size;
  uint64_t v12;
  uint64_t v13;
  ZinIrTensor *v14;
  _QWORD *v16;
  void *__p[2];
  __int128 v18;
  uint64_t v19;
  char v20;
  _QWORD v21[26];
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  ZinIrTensor *v25;
  uint8_t buf[4];
  _QWORD *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v24 = 0;
  v25 = a2;
  LODWORD(v23) = 5;
  *((_QWORD *)&v23 + 1) = 0;
  if (!ZinIrCircularBufferUtil::QualifyForCircularBuffer(a2, this[2], (const ZinIrHalParameters *)&v23, a4))return 0;
  v21[0] = &v25;
  v22 = *(_OWORD *)(std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)(this + 18), &v25, (uint64_t)&std::piecewise_construct, (_QWORD **)v21)+ 3);
  L2Section = (ZinIrSection *)ZinIrLocalRegAlloc::GetL2Section((ZinIrLocalRegAlloc *)this);
  LODWORD(v21[0]) = *((_DWORD *)L2Section + 3);
  v6 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(this + 13, (int *)v21);
  if (v6)
    v7 = (ZinIrMemoryPool *)v6[3];
  else
    v7 = 0;
  v9 = *((_QWORD *)this[2] + 52);
  ZinIrLocalRegAlloc::InferCircularTensorDescriptor((ZinIrLocalRegAlloc *)this, (uint64_t)v25, (uint64_t)&v23, 1, (uint64_t)v21);
  if ((_DWORD)v23 == 3)
  {
    LOBYTE(__p[0]) = 0;
    v20 = 0;
    if ((ZinMirBankConflictOptimizer::IsQualifiedForBankConflictOpt(v25, 0, (ZinTensorFamilyUtil *)__p) & 1) != 0)
    {
      v10 = *((_DWORD *)this[3] + 78);
      std::__optional_destruct_base<ZinTensorFamilyUtil,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
      if (v10)
      {
        ZinMirBankConflictOptimizer::ComputeResidentSymbolStrides(v25, this[2], (uint64_t)__p);
        *(_OWORD *)&v21[11] = *(_OWORD *)__p;
        *(_OWORD *)&v21[13] = v18;
        v21[15] = v19;
      }
    }
    else
    {
      std::__optional_destruct_base<ZinTensorFamilyUtil,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
    }
  }
  Size = ZinTensorDescriptorGetSize(v21);
  ZinIrLocalRegAlloc::ComputeL2BanksToAvoidForDualSrcPE((ZinIrLocalRegAlloc *)this, v25, *((_DWORD *)this[3] + 78) != 0, (char **)__p);
  v13 = ZinIrLocalRegAlloc::AllocateResidentSymbol(v12, v7, L2Section, v9, (__int128 *)((char *)v25 + 24), (uint64_t)Size, v21, &v22, (uint64_t)__p);
  if (v13)
  {
    *(_OWORD *)(v13 + 32) = v23;
    v14 = v25;
    *(_QWORD *)(v13 + 48) = v24;
    *(_BYTE *)(v13 + 56) = 1;
    if (!ZinIrLocalRegAlloc::SetSymbolToLayerAndTensor((ZinIrLocalRegAlloc *)this, (ZinIrSymbol *)v13, v14))
    {
      if ((ZinIrLocalRegAlloc::HasL2SpaceForConflictingDMAbuffers((ZinIrLocalRegAlloc *)this, (const ZinLiveRange *)&v22) & 1) != 0)
      {
        if ((*((_BYTE *)this[3] + 96) & 0x10) != 0)
        {
          v8 = 1;
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
          {
            v16 = (_QWORD *)((char *)v25 + 24);
            if (*((char *)v25 + 47) < 0)
              v16 = (_QWORD *)*v16;
            *(_DWORD *)buf = 136315138;
            v27 = v16;
            _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Circular buffer is allocated for tensor: %s", buf, 0xCu);
          }
        }
        else
        {
          v8 = 1;
        }
        goto LABEL_18;
      }
      ZinIrLocalRegAlloc::RemoveSymbolFromLayerAndTensor((ZinIrLocalRegAlloc *)this, v25);
    }
  }
  v8 = 0;
LABEL_18:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v8;
}

void sub_206DB52AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrLocalRegAlloc::AllocateResidentSymbolsToBuffers(uint64_t *a1, _QWORD *a2, uint64_t **a3)
{
  _QWORD **v5;
  ZinIrSection *L2Section;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD **v12;
  uint64_t L2Alignment;
  uint64_t v14;
  size_t v15;
  std::string *v16;
  const void *v17;
  std::string *v18;
  std::string::size_type size;
  std::string *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  BOOL v37;
  uint64_t *v38;
  uint64_t *v39;
  _QWORD *v40;
  unint64_t v41;
  _QWORD **v42;
  _QWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t **v47;
  uint64_t **v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v62;
  _QWORD *v64;
  int64x2_t v65;
  ZinIrMemoryPool *v66;
  uint64_t *v67;
  uint64_t *v68;
  int __val;
  std::string v70;
  std::string v71;
  uint64_t v72;
  void *__p;
  void *v74;
  uint64_t v75;
  __int128 v76;
  _BYTE v77[48];
  int64x2_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t v86;
  int64x2_t v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t *v91;
  _QWORD *v92[2];
  _BYTE buf[24];
  uint64_t v94;

  v94 = *MEMORY[0x24BDAC8D0];
  v92[0] = 0;
  v92[1] = 0;
  v5 = v92;
  v91 = (uint64_t *)v92;
  L2Section = (ZinIrSection *)ZinIrLocalRegAlloc::GetL2Section((ZinIrLocalRegAlloc *)a1);
  *(_DWORD *)v77 = *((_DWORD *)L2Section + 3);
  v7 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(a1 + 13, (int *)v77);
  if (v7)
    v66 = (ZinIrMemoryPool *)v7[3];
  else
    v66 = 0;
  v8 = (_QWORD *)*a2;
  v64 = a2 + 1;
  if ((_QWORD *)*a2 == a2 + 1)
  {
LABEL_71:
    if (v8 != v64)
    {
      do
      {
        if ((ZinIrOpLayer::IsEngineLayer((ZinIrOpLayer *)v8[4]) & 1) == 0)
        {
          memset(v77, 0, 24);
          v38 = (uint64_t *)v8[5];
          v39 = (uint64_t *)v8[6];
          while (v38 != v39)
          {
            v40 = v92[0];
            if (!v92[0])
              goto LABEL_111;
            v41 = *v38;
            v42 = v5;
            do
            {
              v43 = v40;
              v44 = v42;
              v45 = v40[4];
              v46 = v40 + 1;
              if (v45 >= v41)
              {
                v46 = v43;
                v42 = (_QWORD **)v43;
              }
              v40 = (_QWORD *)*v46;
            }
            while (v40);
            if (v42 == v5)
              goto LABEL_111;
            if (v45 < v41)
              v43 = v44;
            if (v41 < v43[4])
LABEL_111:
              ZinAssertImpl("symbol should exist");
            v88 = v38;
            v47 = std::__tree<std::__value_type<std::shared_ptr<ZinBufferDescriptor>,ZinIrSymbol *>,std::__map_value_compare<std::shared_ptr<ZinBufferDescriptor>,std::__value_type<std::shared_ptr<ZinBufferDescriptor>,ZinIrSymbol *>,std::less<std::shared_ptr<ZinBufferDescriptor>>,true>,std::allocator<std::__value_type<std::shared_ptr<ZinBufferDescriptor>,ZinIrSymbol *>>>::__emplace_unique_key_args<std::shared_ptr<ZinBufferDescriptor>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<ZinBufferDescriptor> const&>,std::tuple<>>(&v91, (unint64_t *)v38, (uint64_t)&std::piecewise_construct, &v88);
            v48 = v47;
            v49 = *(_QWORD *)&v77[8];
            if (*(_QWORD *)&v77[8] >= *(_QWORD *)&v77[16])
            {
              v51 = (uint64_t)(*(_QWORD *)&v77[8] - *(_QWORD *)v77) >> 3;
              if ((unint64_t)(v51 + 1) >> 61)
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              v52 = (uint64_t)(*(_QWORD *)&v77[16] - *(_QWORD *)v77) >> 2;
              if (v52 <= v51 + 1)
                v52 = v51 + 1;
              if (*(_QWORD *)&v77[16] - *(_QWORD *)v77 >= 0x7FFFFFFFFFFFFFF8uLL)
                v53 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v53 = v52;
              if (v53)
                v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v77[16], v53);
              else
                v54 = 0;
              v55 = &v54[8 * v51];
              *(_QWORD *)v55 = v48[6];
              v50 = v55 + 8;
              v57 = *(char **)v77;
              v56 = *(char **)&v77[8];
              if (*(_QWORD *)&v77[8] != *(_QWORD *)v77)
              {
                do
                {
                  v58 = *((_QWORD *)v56 - 1);
                  v56 -= 8;
                  *((_QWORD *)v55 - 1) = v58;
                  v55 -= 8;
                }
                while (v56 != v57);
                v56 = *(char **)v77;
              }
              *(_QWORD *)v77 = v55;
              *(_QWORD *)&v77[8] = v50;
              *(_QWORD *)&v77[16] = &v54[8 * v53];
              if (v56)
                operator delete(v56);
            }
            else
            {
              **(_QWORD **)&v77[8] = v47[6];
              v50 = (_QWORD *)(v49 + 8);
            }
            *(_QWORD *)&v77[8] = v50;
            v38 += 2;
          }
          std::__tree<std::__value_type<ZinIrOpLayer const*,std::vector<ZinIrSymbol *>>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,std::vector<ZinIrSymbol *>>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,std::vector<ZinIrSymbol *>>>>::__emplace_unique_key_args<ZinIrOpLayer const*,ZinIrOpLayer const* const&,std::vector<ZinIrSymbol *>>(a3, v8 + 4, v8 + 4, (uint64_t)v77);
          if (*(_QWORD *)v77)
          {
            *(_QWORD *)&v77[8] = *(_QWORD *)v77;
            operator delete(*(void **)v77);
          }
        }
        v59 = (_QWORD *)v8[1];
        if (v59)
        {
          do
          {
            v60 = v59;
            v59 = (_QWORD *)*v59;
          }
          while (v59);
        }
        else
        {
          do
          {
            v60 = (_QWORD *)v8[2];
            v37 = *v60 == (_QWORD)v8;
            v8 = v60;
          }
          while (!v37);
        }
        v8 = v60;
      }
      while (v60 != v64);
    }
    v34 = 1;
  }
  else
  {
    v62 = a2;
    v65 = vdupq_n_s64(1uLL);
    while (1)
    {
      v68 = v8 + 4;
      if (ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)v8[4]))
      {
        v88 = 0;
        v89 = 0;
        v90 = 0;
        v9 = (uint64_t *)v8[5];
        v67 = (uint64_t *)v8[6];
        if (v9 == v67)
        {
LABEL_58:
          if (v89 - v88 != (uint64_t)(v8[6] - v8[5]) >> 4)
            ZinAssertImpl("Symbol count must be the same as descriptor count");
          std::__tree<std::__value_type<ZinIrOpLayer const*,std::vector<ZinIrSymbol *>>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,std::vector<ZinIrSymbol *>>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,std::vector<ZinIrSymbol *>>>>::__emplace_unique_key_args<ZinIrOpLayer const*,ZinIrOpLayer const* const&,std::vector<ZinIrSymbol *>>(a3, v68, v68, (uint64_t)&v88);
          v34 = 1;
        }
        else
        {
          __val = 0;
          while (1)
          {
            *(_DWORD *)v77 = 0;
            memset(&v77[8], 0, 40);
            v78 = v65;
            v79 = v65;
            v80 = v65;
            v81 = v65;
            v82 = v65;
            v83 = v65;
            v84 = v65;
            v85 = v65;
            v86 = v65;
            v87 = v65;
            ZinBufferDescriptor::GetMACIBufferSize(*v9, a1[2], *v68, (uint64_t)v77);
            v11 = v10;
            v12 = v5;
            v76 = *(_OWORD *)(*v9 + 24);
            __p = 0;
            v74 = 0;
            v75 = 0;
            L2Alignment = GetL2Alignment(a1[2], *(int *)v77);
            v72 = 0;
            v14 = *v68;
            if (*(char *)(*v68 + 47) >= 0)
              v15 = *(unsigned __int8 *)(*v68 + 47);
            else
              v15 = *(_QWORD *)(*v68 + 32);
            std::string::basic_string[abi:ne180100]((uint64_t)&v71, v15 + 1);
            if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v16 = &v71;
            else
              v16 = (std::string *)v71.__r_.__value_.__r.__words[0];
            if (v15)
            {
              if (*(char *)(v14 + 47) >= 0)
                v17 = (const void *)(v14 + 24);
              else
                v17 = *(const void **)(v14 + 24);
              memmove(v16, v17, v15);
            }
            *(_WORD *)((char *)&v16->__r_.__value_.__l.__data_ + v15) = 95;
            std::to_string(&v70, __val);
            if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v18 = &v70;
            else
              v18 = (std::string *)v70.__r_.__value_.__r.__words[0];
            if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v70.__r_.__value_.__r.__words[2]);
            else
              size = v70.__r_.__value_.__l.__size_;
            v20 = std::string::append(&v71, (const std::string::value_type *)v18, size);
            v5 = v12;
            v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
            *(_QWORD *)&buf[16] = *((_QWORD *)&v20->__r_.__value_.__l + 2);
            *(_OWORD *)buf = v21;
            v20->__r_.__value_.__l.__size_ = 0;
            v20->__r_.__value_.__r.__words[2] = 0;
            v20->__r_.__value_.__r.__words[0] = 0;
            v22 = ZinIrLocalRegAlloc::AllocateResidentSymbol((uint64_t)v20, v66, L2Section, L2Alignment, (__int128 *)buf, v11, v77, &v76, (uint64_t)&__p);
            if ((buf[23] & 0x80000000) != 0)
              operator delete(*(void **)buf);
            if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v70.__r_.__value_.__l.__data_);
            if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v71.__r_.__value_.__l.__data_);
            v72 = v22;
            if (v22)
            {
              std::__tree<std::__value_type<std::shared_ptr<ZinBufferDescriptor>,ZinIrSymbol *>,std::__map_value_compare<std::shared_ptr<ZinBufferDescriptor>,std::__value_type<std::shared_ptr<ZinBufferDescriptor>,ZinIrSymbol *>,std::less<std::shared_ptr<ZinBufferDescriptor>>,true>,std::allocator<std::__value_type<std::shared_ptr<ZinBufferDescriptor>,ZinIrSymbol *>>>::__emplace_unique_key_args<std::shared_ptr<ZinBufferDescriptor>,std::shared_ptr<ZinBufferDescriptor> const&,ZinIrSymbol *&>(&v91, (unint64_t *)v9, v9, &v72);
              v23 = v89;
              if (v89 >= v90)
              {
                v26 = v89 - v88;
                if ((unint64_t)(v26 + 1) >> 61)
                  std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                v27 = ((char *)v90 - (char *)v88) >> 2;
                if (v27 <= v26 + 1)
                  v27 = v26 + 1;
                if ((unint64_t)((char *)v90 - (char *)v88) >= 0x7FFFFFFFFFFFFFF8)
                  v28 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v28 = v27;
                if (v28)
                  v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v90, v28);
                else
                  v29 = 0;
                v30 = (uint64_t *)&v29[8 * v26];
                *v30 = v72;
                v24 = v30 + 1;
                v32 = v88;
                v31 = v89;
                if (v89 != v88)
                {
                  do
                  {
                    v33 = *--v31;
                    *--v30 = v33;
                  }
                  while (v31 != v32);
                  v31 = v88;
                }
                v88 = v30;
                v89 = v24;
                v90 = (uint64_t *)&v29[8 * v28];
                if (v31)
                  operator delete(v31);
              }
              else
              {
                *v89 = v72;
                v24 = v23 + 1;
              }
              v89 = v24;
              ++__val;
            }
            else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            {
              v25 = (_QWORD *)(*v68 + 24);
              if (*(char *)(*v68 + 47) < 0)
                v25 = (_QWORD *)*v25;
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = v25;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = __val;
              _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "[AllocateResidentSymbolsToBuffers] Symbol allocation failed for layer %s with buffer id %d\n", buf, 0x12u);
            }
            if (__p)
            {
              v74 = __p;
              operator delete(__p);
            }
            if (!v22)
              break;
            v9 += 2;
            if (v9 == v67)
              goto LABEL_58;
          }
          v34 = 0;
        }
        if (v88)
        {
          v89 = v88;
          operator delete(v88);
        }
        if (!(_DWORD)v34)
          break;
      }
      v35 = (_QWORD *)v8[1];
      if (v35)
      {
        do
        {
          v36 = v35;
          v35 = (_QWORD *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          v36 = (_QWORD *)v8[2];
          v37 = *v36 == (_QWORD)v8;
          v8 = v36;
        }
        while (!v37);
      }
      v8 = v36;
      if (v36 == v64)
      {
        v8 = (_QWORD *)*v62;
        goto LABEL_71;
      }
    }
  }
  std::__tree<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>::destroy((uint64_t)&v91, v92[0]);
  return v34;
}

void sub_206DB59B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44)
{
  uint64_t v44;

  std::__tree<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>::destroy(v44 - 152, *(_QWORD **)(v44 - 144));
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::AllocateMultipleSymbolsToTensor(const ZinIrTensor **this, ZinIrTensor *a2, uint64_t a3, StaticWrapInfo *a4)
{
  uint64_t WrapAxis;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  ZinIrTensor *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v31;
  _QWORD *v32[2];
  char **v33;
  char *v34[2];
  int v35;
  uint64_t v36;
  uint64_t v37;

  v35 = 5;
  v36 = 0;
  v37 = 0;
  if (!ZinIrCircularBufferUtil::QualifyForCircularBuffer(a2, this[2], (const ZinIrHalParameters *)&v35, a4))return 0;
  WrapAxis = ZinIrCircularBufferUtil::GetWrapAxis(*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 12) + 64) + 12));
  if ((_DWORD)WrapAxis == 5)
    return 0;
  v34[0] = 0;
  v34[1] = 0;
  v33 = v34;
  if ((ZinIrCircularBufferUtil::ExtractNonOverlappingBufferDescriptors((uint64_t)a2, WrapAxis, (uint64_t)this[2], (uint64_t)&v33) & 1) != 0)
  {
    v32[0] = 0;
    v32[1] = 0;
    v31 = (uint64_t *)v32;
    v7 = ZinIrLocalRegAlloc::AllocateResidentSymbolsToBuffers((uint64_t *)this, &v33, &v31);
    if ((v7 & 1) != 0)
    {
      v8 = v31;
      if (v31 != (uint64_t *)v32)
      {
        do
        {
          v9 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8[4] + 32))(v8[4], 0, 0);
          ZinIrTensor::SetMirAndSymbols(v9, (uint64_t)(v8 + 5), (uint64_t)this[2]);
          v10 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8[4] + 32))(v8[4], 0, 0);
          ZinIrLocalRegAlloc::SetResidentSymbolToLayers((ZinIrLocalRegAlloc *)this, v10);
          v11 = (uint64_t *)v8[1];
          if (v11)
          {
            do
            {
              v12 = v11;
              v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              v12 = (uint64_t *)v8[2];
              v13 = *v12 == (_QWORD)v8;
              v8 = v12;
            }
            while (!v13);
          }
          v8 = v12;
        }
        while (v12 != (uint64_t *)v32);
      }
    }
    else
    {
      v22 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v22)
        ZinIrLocalRegAlloc::AllocateMultipleSymbolsToTensor(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)&v31, v32[0]);
  }
  else
  {
    v14 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v14)
      ZinIrLocalRegAlloc::AllocateMultipleSymbolsToTensor(v14, v15, v16, v17, v18, v19, v20, v21);
    v7 = 0;
  }
  std::__tree<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>>>::destroy((uint64_t)&v33, v34[0]);
  return v7;
}

void sub_206DB5C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, char a13, char *a14)
{
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)&a10, a11);
  std::__tree<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>>>::destroy((uint64_t)&a13, a14);
  _Unwind_Resume(a1);
}

void ZinIrLocalRegAlloc::SetResidentSymbolToLayers(ZinIrLocalRegAlloc *this, ZinIrTensor *a2)
{
  uint64_t v4;
  _QWORD *v5;
  NSObject *v6;
  ZinIrOpLayer *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD **v10;
  BOOL v11;
  int v12;
  _QWORD **v13;
  _QWORD *v14[2];
  void *__p;
  uint64_t *v16;
  uint64_t v17;
  void *v18[9];

  v18[8] = *(void **)MEMORY[0x24BDAC8D0];
  ZinIrTensor::GetSymbols(a2, v18);
  v4 = *((_QWORD *)a2 + 12);
  if (ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)v4))
  {
    if ((ZinEngineLayerMirInfo::SetL2WrSymbols(*(_QWORD *)(v4 + 264), (const ZinIrSymbol ***)v18, 3) & 1) == 0
      && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      ZinIrLocalRegAlloc::SetResidentSymbolToLayers();
    }
    ZinANELayer::SetL2DstStrides((ZinANELayer *)v4, (const ZinTensorDimensions *)(*(_QWORD *)v18[0] + 296), *(_QWORD *)(*((_QWORD *)this + 2) + 416), *(unsigned __int8 *)(*((_QWORD *)this + 2) + 1237));
  }
  __p = 0;
  v16 = 0;
  v17 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&__p, *(const void **)(v4 + 112), *(_QWORD *)(v4 + 120), (uint64_t)(*(_QWORD *)(v4 + 120) - *(_QWORD *)(v4 + 112)) >> 3);
  std::set<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100]<std::__wrap_iter<ZinIrOpLayer **>>((uint64_t)&v13, (uint64_t *)__p, v16);
  v5 = v13;
  if (v13 != v14)
  {
    v6 = MEMORY[0x24BDACB70];
    do
    {
      v7 = (ZinIrOpLayer *)v5[4];
      if (ZinIrOpLayer::IsANELayer(v7) && *((_QWORD *)v7 + 12) != *((_QWORD *)v7 + 11))
      {
        v8 = 0;
        do
        {
          if ((ZinIrTensor *)ZinIrOpLayer::GetInputTensor(v7, v8) == a2)
          {
            v12 = 0;
            if (ZinMemSourceIndexTranslator::GetL2SrcType(v7, v8, &v12)
              && os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
            {
              ZinIrLocalRegAlloc::SetResidentSymbolToLayers();
            }
            if ((ZinEngineLayerMirInfo::SetL2RdSymbols(*((_QWORD *)v7 + 33), (const ZinIrSymbol ***)v18, v12, 3) & 1) == 0
              && os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
            {
              ZinIrLocalRegAlloc::SetResidentSymbolToLayers();
            }
            (*(void (**)(ZinIrOpLayer *, unint64_t, uint64_t, _QWORD))(*(_QWORD *)v7 + 464))(v7, v8, *(_QWORD *)v18[0] + 296, *(_QWORD *)(*((_QWORD *)this + 2) + 416));
            ZinMirL2Config::SetTileSrcL2InputCropOffsetXLsbs((_OWORD *)(*((_QWORD *)v7 + 33) + 120), v7, v8, *(_QWORD *)v18[0] + 216, 1);
          }
          ++v8;
        }
        while (v8 < (uint64_t)(*((_QWORD *)v7 + 12) - *((_QWORD *)v7 + 11)) >> 3);
      }
      v9 = (_QWORD *)v5[1];
      if (v9)
      {
        do
        {
          v10 = (_QWORD **)v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD **)v5[2];
          v11 = *v10 == v5;
          v5 = v10;
        }
        while (!v11);
      }
      v5 = v10;
    }
    while (v10 != v14);
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v13, v14[0]);
  if (__p)
  {
    v16 = (uint64_t *)__p;
    operator delete(__p);
  }
  if (v18[0])
  {
    v18[1] = v18[0];
    operator delete(v18[0]);
  }
}

void sub_206DB5F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrLocalRegAlloc::AllocateNonResidentDynamicCircularTensor(uint64_t a1, ZinIrTensor *a2, uint64_t a3, ZinIrSection *a4)
{
  uint64_t *v7;
  ZinIrMemoryPool *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *Size;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  _QWORD *v17;
  int v18[52];
  __int128 v19;
  ZinIrTensor *v20;
  _BYTE buf[24];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v20 = a2;
  *(_QWORD *)v18 = &v20;
  v19 = *(_OWORD *)(std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>(a1 + 144, &v20, (uint64_t)&std::piecewise_construct, (_QWORD **)v18)+ 3);
  v18[0] = *((_DWORD *)a4 + 3);
  v7 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>((_QWORD *)(a1 + 104), v18);
  if (v7)
    v8 = (ZinIrMemoryPool *)v7[3];
  else
    v8 = 0;
  v9 = 528;
  if ((*((_DWORD *)a4 + 2) & 0xFFFFFFFE) == 2)
    v9 = 512;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + v9);
  ZinIrLocalRegAlloc::InferCircularTensorDescriptor((ZinIrLocalRegAlloc *)a1, (uint64_t)v20, a3, 2, (uint64_t)v18);
  Size = ZinTensorDescriptorGetSize(v18);
  v12 = ZinIrLocalRegAlloc::AllocateNonResidentSymbol((uint64_t)Size, v8, a4, v10, (__int128 *)((char *)v20 + 24), (uint64_t)Size, v18, &v19);
  if (!v12)
    return 0;
  v13 = v12;
  *(_QWORD *)buf = (char *)v20 + 24;
  *(_BYTE *)(a3 + 16) = *((_BYTE *)std::__tree<std::__value_type<std::string,ZinIOBarInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIOBarInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIOBarInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 592), (void **)v20 + 3, (uint64_t)&std::piecewise_construct, (__int128 **)buf)+ 63);
  v14 = *(_OWORD *)a3;
  *(_QWORD *)(v13 + 80) = *(_QWORD *)(a3 + 16);
  *(_OWORD *)(v13 + 64) = v14;
  *(_BYTE *)(v13 + 88) = 1;
  if (ZinIrLocalRegAlloc::SetSymbolToLayerAndTensor((ZinIrLocalRegAlloc *)a1, (ZinIrSymbol *)v13, v20))
    return 0;
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 24) + 96) & 0x10) == 0)
    return 1;
  v15 = 1;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v17 = (_QWORD *)((char *)v20 + 24);
    if (*((char *)v20 + 47) < 0)
      v17 = (_QWORD *)*v17;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v17;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Circular buffer is allocated for tensor: %s", buf, 0xCu);
  }
  return v15;
}

uint64_t ZinIrLocalRegAlloc::CalculateSymbolOffsetAndSizeFromWrappedParent(uint64_t a1, ZinIrRegAllocUtil *this, ZinIrSymbol *a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8, uint64_t a9, _QWORD *a10)
{
  int MemType;
  uint64_t v17;
  uint64_t v18;
  uint64_t ValueAt;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  unint64_t v29;
  int v30;

  if (ZinIrRegAllocUtil::IsPreCropSupported(this, this))
    ZinAssertImpl("Pre-crop coordinate space is not supported.");
  *a8 = *((_QWORD *)a3 + 3) - *((_QWORD *)a3 + 2);
  MemType = ZinIrSymbol::GetMemType(a3);
  v17 = 0;
  v18 = 416;
  if (MemType != 2)
    v18 = 528;
  v29 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + v18);
  do
  {
    ValueAt = GetValueAtDimension<ZinTensorPosition>((uint64_t *)(a4 + 8), v17);
    if (!ValueAt)
      goto LABEL_18;
    v20 = ValueAt;
    if (*(_BYTE *)(a5 + 24))
    {
      if ((_DWORD)v17 == *(_DWORD *)a5)
      {
        *(_QWORD *)(a5 + 16) = (*(_QWORD *)(a5 + 16) + ValueAt) % *(_QWORD *)(a5 + 8);
        if (MemType == 2 || (_DWORD)v17 != 4)
          goto LABEL_15;
        v30 = 0;
        if (GetHWDMAFormatMode(*(_DWORD *)a4, &v30))
          ZinAssertImpl("Invalid DMA format");
        v21 = ZinIrRegAllocUtil::CalculateLinearDmaGranularityInX(v29, v30, *(_DWORD *)(a4 + 176));
        v22 = *(_QWORD *)(a5 + 16);
        v23 = v22 % v21;
        if (!(v22 % v21))
          goto LABEL_15;
        *(_QWORD *)(a5 + 16) = v22 - v23;
        v24 = *a8 + *(_QWORD *)(a4 + 112) * v23;
      }
      else
      {
        v24 = *a8 + GetValueAtDimension<ZinTensorDimensions>((uint64_t *)(a4 + 88), v17) * ValueAt;
      }
      *a8 = v24;
    }
LABEL_15:
    if (*(_BYTE *)(a6 + 24))
    {
      if ((_DWORD)v17 == *(_DWORD *)a6)
        ZinAssertImpl("Unsupported configuration");
      *a8 += GetValueAtDimension<ZinTensorDimensions>((uint64_t *)(a4 + 88), v17) * v20;
    }
LABEL_18:
    ++v17;
  }
  while (v17 != 5);
  result = ZinLastAlignPower2(*a8, v29);
  *a7 = result;
  *a10 = *((_QWORD *)a3 + 3) + *((_QWORD *)a3 + 23) - (*((_QWORD *)a3 + 2) + *a8);
  *(_QWORD *)(a9 + 32) = 0;
  *(_OWORD *)a9 = 0u;
  *(_OWORD *)(a9 + 16) = 0u;
  v26 = *a8 - *a7;
  v27 = *(_QWORD *)(a4 + 112);
  if (v26 % v27)
    ZinAssertImpl("Offset Calculation Error");
  *(_QWORD *)(a9 + 24) = v26 / v27;
  return result;
}

_OWORD *ZinIrLocalRegAlloc::CreateSymbolAliasFromParent(ZinIrLocalRegAlloc *this, ZinIrTensor *a2, ZinLiveRange *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  int MemType;
  uint64_t PreAllocationInterleave;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  const ZinTensorDimensions *v41;
  ZinIrTensor *RootTensor;
  uint64_t v43;
  _BOOL4 v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int HasNegativeStride;
  char v58;
  const ZinIrTensor *v59;
  int v60;
  int IsPreCropSupported;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  int v66;
  _QWORD *v67;
  _OWORD *v68;
  _BYTE v69[32];
  _BYTE v70[32];
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  char v80;
  unint64_t v81;
  unint64_t v82;
  std::string v83;
  int v84;
  __int16 v85;
  char v86;
  char v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  __int128 v91[7];
  void *v92;
  std::string v93;
  _BYTE v94[304];
  void *__p[4];
  _OWORD v96[19];
  _BYTE v97[24];
  _BYTE *v98;
  _BYTE v99[24];
  _BYTE *v100;
  uint64_t v101;

  v101 = *MEMORY[0x24BDAC8D0];
  ZinIrTensor::GetParentTensor(a2, __p);
  v6 = *((_QWORD *)__p[0] + 13);
  if (!v6 || (v7 = *(uint64_t **)(v6 + 40), v7 == *(uint64_t **)(v6 + 48)))
    v8 = 0;
  else
    v8 = *v7;
  v9 = (std::__shared_weak_count *)__p[1];
  if (!__p[1])
    goto LABEL_9;
  v10 = (unint64_t *)((char *)__p[1] + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_9:
    if (v8)
      goto LABEL_10;
LABEL_16:
    v22 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v22)
      ZinIrLocalRegAlloc::CreateSymbolAliasFromParent(v22, v23, v24, v25, v26, v27, v28, v29);
    return 0;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!v8)
    goto LABEL_16;
LABEL_10:
  if (*(_DWORD *)(v8 + 156) != 1)
  {
    v14 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v14)
      ZinIrLocalRegAlloc::CreateSymbolAliasFromParent(v14, v15, v16, v17, v18, v19, v20, v21);
    return 0;
  }
  LODWORD(__p[0]) = ZinIrSymbol::GetMemType((ZinIrSymbol *)v8);
  v12 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>((_QWORD *)this + 13, (int *)__p);
  if (v12)
    v13 = v12[3];
  else
    v13 = 0;
  MemType = ZinIrSymbol::GetMemType((ZinIrSymbol *)v8);
  if (MemType == 2)
  {
    ZinIrLocalRegAlloc::GetDimensionOrderHint(this, a2, (uint64_t)__p);
    v100 = 0;
    ZinIrTensor::InferDescriptor((unsigned __int8 *)a2, 1, (uint64_t)__p, 1, 1, (uint64_t)v99, (uint64_t)&v87);
    v33 = v100;
    if (v100 == v99)
    {
      v34 = 4;
      v33 = v99;
      goto LABEL_27;
    }
  }
  else
  {
    ZinIrLocalRegAlloc::GetDimensionOrderHint(this, a2, (uint64_t)__p);
    PreAllocationInterleave = ZinIrLocalRegAlloc::GetPreAllocationInterleave(this, a2);
    v98 = 0;
    ZinIrTensor::InferDescriptor((unsigned __int8 *)a2, 2, (uint64_t)__p, PreAllocationInterleave, 1, (uint64_t)v97, (uint64_t)&v87);
    v33 = v98;
    if (v98 == v97)
    {
      v34 = 4;
      v33 = v97;
      goto LABEL_27;
    }
  }
  if (!v33)
    goto LABEL_28;
  v34 = 5;
LABEL_27:
  (*(void (**)(void))(*(_QWORD *)v33 + 8 * v34))();
LABEL_28:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  ZinIrTensor::GetParentTensor(a2, __p);
  v35 = *((_QWORD *)__p[0] + 13);
  if (!v35 || (v36 = *(uint64_t **)(v35 + 40), v36 == *(uint64_t **)(v35 + 48)))
    v37 = 0;
  else
    v37 = *v36;
  v38 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v39 = (unint64_t *)((char *)__p[1] + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (!v37)
    ZinAssertImpl("Parent symbol must be present when the child symbol is being created.");
  std::__optional_copy_base<ZinIrSymbol::DynamicOffsetInfo,false>::__optional_copy_base[abi:ne180100]((uint64_t)&v83, v37 + 96);
  if (!v86)
  {
    RootTensor = ZinIrTensor::GetRootTensor(a2);
    ZinIrTensor::GetParentTensor(a2, __p);
    v43 = v13;
    if (ZinIrTensor::IsRingBufferWriter((ZinIrTensor *)__p[0]))
    {
      ZinIrTensor::GetParentTensor(a2, &v77);
      v44 = ZinIrOpLayer::GetInputTensor(*(ZinIrOpLayer **)(v77 + 96), 1uLL) == (_QWORD)a2;
      v45 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
      if (*((_QWORD *)&v77 + 1))
      {
        v46 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
    }
    else
    {
      v44 = 0;
    }
    v48 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v49 = (unint64_t *)((char *)__p[1] + 8);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    if (v44)
    {
      ZinIrTensor::GetParentTensor(a2, __p);
      v51 = (std::__shared_weak_count *)__p[1];
      v52 = *((_QWORD *)__p[0] + 12);
      if (__p[1])
      {
        v53 = (unint64_t *)((char *)__p[1] + 8);
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v55 = *(_QWORD *)(v52 + 64);
      v13 = v43;
      if (!*(_QWORD *)(v55 + 120))
        goto LABEL_66;
      v96[0] = 0u;
      memset(__p, 0, sizeof(__p));
      LODWORD(v96[0]) = 1065353216;
      std::optional<ZinIrSymbol::DynamicOffsetInfo>::operator=[abi:ne180100]<ZinIrSymbol::DynamicOffsetInfo,void>((uint64_t)&v83, (uint64_t)__p);
      std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::~__hash_table((uint64_t)__p);
      v13 = v43;
      if ((std::string *)(v55 + 96) == &v83)
        goto LABEL_66;
    }
    else
    {
      v13 = v43;
      if (!ZinIrTensor::IsRingBufferReader(a2)
        || (v55 = *(_QWORD *)(*((_QWORD *)a2 + 12) + 64), !*(_QWORD *)(v55 + 120))
        || (v96[0] = 0u,
            memset(__p, 0, sizeof(__p)),
            LODWORD(v96[0]) = 1065353216,
            std::optional<ZinIrSymbol::DynamicOffsetInfo>::operator=[abi:ne180100]<ZinIrSymbol::DynamicOffsetInfo,void>((uint64_t)&v83, (uint64_t)__p), std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::~__hash_table((uint64_t)__p), v13 = v43, (std::string *)(v55 + 96) == &v83))
      {
LABEL_66:
        if (v86)
        {
          if (*(_BYTE *)(v37 + 88))
            v56 = *(unsigned int *)(v37 + 64) | 0x100000000;
          else
            v56 = 0;
          ZinIrRegAllocUtil::GetNonWrapDynamicOffsets(&v83, v56, (uint64_t)&v77);
          if (*((_QWORD *)&v78 + 1))
          {
            ZinBarUsage::GetCustomBarCmd((uint64_t)this + 568, (uint64_t)RootTensor, (uint64_t)&v77, (uint64_t)__p);
            if (!LOBYTE(v96[2]))
              ZinAssertImpl("there should be a created custom bar command with bar_id assigned.");
            v85 = ZinDynamicOffsetCustomBarCmd::GetBarId((ZinDynamicOffsetCustomBarCmd *)__p) | 0x100;
            if (LOBYTE(v96[2]))
              std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>>>::~__hash_table((uint64_t)&__p[1]);
          }
          std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::~__hash_table((uint64_t)&v77);
        }
        goto LABEL_75;
      }
    }
    v84 = *(_DWORD *)(v55 + 128);
    std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,void *> *>>(&v83, *(uint64_t **)(v55 + 112), 0);
    goto LABEL_66;
  }
LABEL_75:
  HasNegativeStride = ZinIrTensor::HasNegativeStride((ZinIrTensor *)v91, v41);
  v58 = HasNegativeStride ^ 1;
  if (MemType == 2)
    v58 = 1;
  if ((v58 & 1) == 0 && *(_DWORD *)(*(_QWORD *)(v8 + 8) + 8) == 4)
    ZinAssertImpl("Negative strides for intermediate DRAM symbol is not supported");
  v81 = 0;
  v82 = 0;
  LOBYTE(v77) = 0;
  v80 = 0;
  LOBYTE(v75) = 0;
  v76 = 0;
  ZinIrLocalRegAlloc::SetPostCropChildOriginWrtRootAndOffsetWrtParent(HasNegativeStride, a2, (uint64_t)&v77, (uint64_t)&v75, (uint64_t *)&v81);
  if (v60)
    goto LABEL_80;
  if (v76)
    v82 = v75;
  v74 = 0;
  v73 = 0;
  v71 = 0u;
  v72 = 0u;
  IsPreCropSupported = ZinIrRegAllocUtil::IsPreCropSupported(a2, v59);
  v63 = *(_OWORD *)(v8 + 48);
  *(_OWORD *)v70 = *(_OWORD *)(v8 + 32);
  *(_OWORD *)&v70[16] = v63;
  v64 = *(_OWORD *)(v8 + 80);
  *(_OWORD *)v69 = *(_OWORD *)(v8 + 64);
  *(_OWORD *)&v69[16] = v64;
  if (*((_BYTE *)a2 + 164) || ZinIrTensor::IsTensorLayoutMACI(a2))
  {
    ZinIrTensor::GetTensorSizeInBytes(a2);
    v74 = v65;
  }
  else if (*(_BYTE *)(v8 + 56) || *(_BYTE *)(v8 + 88))
  {
    ZinIrLocalRegAlloc::CalculateSymbolOffsetAndSizeFromWrappedParent((uint64_t)this, a2, (ZinIrSymbol *)v8, (uint64_t)&v87, (uint64_t)v70, (uint64_t)v69, &v82, (uint64_t *)&v81, (uint64_t)&v77, &v74);
  }
  else
  {
    ZinIrTensor::GetParentTensor(a2, __p);
    v67 = __p[0];
    std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    if (ZinIrTensor::IsView(a2) && ZinTensorDimensions::operator!=(v67 + 6, (_QWORD *)a2 + 6))
    {
      ZinViewLayerUtils::ComputeViewSpanSpaceRanges(a2, (_QWORD *)(v8 + 208), v91, 1, __p);
      v74 = *((_QWORD *)__p[1] - 2) - *(_QWORD *)__p[0];
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    else
    {
      v74 = *(_QWORD *)(v8 + 184);
    }
  }
  v68 = 0;
  if (!IsPreCropSupported)
  {
    v88 = v77;
    v89 = v78;
    v90 = v79;
    goto LABEL_93;
  }
  SetCumulativeOriginWrtRoot((uint64_t)a2, (uint64_t)&v71);
  if (!v66)
  {
    v88 = v71;
    v89 = v72;
    v90 = v73;
    v82 = 0;
LABEL_93:
    ZinIrSymbol::Descriptor::Descriptor((uint64_t)__p, *(_DWORD *)(v8 + 152), (__int128 *)((char *)a2 + 24), a3, v74, &v87);
    v92 = __p[0];
    if (SHIBYTE(__p[3]) < 0)
      std::string::__init_copy_ctor_external(&v93, (const std::string::value_type *)__p[1], (std::string::size_type)__p[2]);
    else
      v93 = *(std::string *)&__p[1];
    memcpy(v94, v96, sizeof(v94));
    ZinIrMemoryPool::CreateSymbolAlias(v13, (uint64_t *)&v92, v82, v81, (ZinIrSymbol *)v8, IsPreCropSupported, (uint64_t *)&v68);
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v93.__r_.__value_.__l.__data_);
    v30 = v68;
    if (v70[24])
    {
      v68[2] = *(_OWORD *)v70;
      *(_OWORD *)((char *)v30 + 41) = *(_OWORD *)&v70[9];
    }
    if (v69[24])
    {
      v30[4] = *(_OWORD *)v69;
      *(_OWORD *)((char *)v30 + 73) = *(_OWORD *)&v69[9];
    }
    if (v86)
    {
      std::__optional_storage_base<ZinIrSymbol::DynamicOffsetInfo,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<ZinIrSymbol::DynamicOffsetInfo,false> const&>((uint64_t)(v30 + 6), (uint64_t)&v83);
      v30 = v68;
    }
    if (SHIBYTE(__p[3]) < 0)
      operator delete(__p[1]);
    goto LABEL_81;
  }
LABEL_80:
  v30 = 0;
LABEL_81:
  if (v86)
    std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::~__hash_table((uint64_t)&v83);
  return v30;
}

void sub_206DB6C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  if (a44)
    std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::~__hash_table((uint64_t)&a38);
  _Unwind_Resume(a1);
}

void ZinIrLocalRegAlloc::SetPostCropChildOriginWrtRootAndOffsetWrtParent(int a1, ZinIrTensor *this, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  const ZinIrTensor *v16;
  int MemType;
  unint64_t PostAllocationInterleave;
  _BOOL8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  _BOOL8 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t InterchangeDescriptor;
  unint64_t MacroblockSize;
  char v54;
  uint64_t Hal;
  uint64_t v56;
  const ZinIrTensor *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  _BOOL8 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  _BOOL8 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  _OWORD v85[2];
  uint64_t v86;

  *a5 = 0;
  if (*((_BYTE *)this + 164) && !ZinIrTensor::IsOutputView(this))
  {
    if (!*(_BYTE *)(a4 + 8))
      *(_BYTE *)(a4 + 8) = 1;
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    if (!*(_BYTE *)(a3 + 40))
      goto LABEL_25;
    return;
  }
  ZinIrTensor::GetParentTensor(this, v85);
  v9 = v85[0];
  if (*((_QWORD *)&v85[0] + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v85[0] + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v9 + 1) + 16))(*((_QWORD *)&v9 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v9 + 1));
      if ((_QWORD)v9)
        goto LABEL_8;
LABEL_22:
      v27 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v27)
        ZinIrLocalRegAlloc::SetPostCropChildOriginWrtRootAndOffsetWrtParent(v27, v28, v29, v30, v31, v32, v33, v34);
      return;
    }
  }
  if (!(_QWORD)v9)
    goto LABEL_22;
LABEL_8:
  v12 = *(_QWORD *)(v9 + 104);
  if (v12 && (v13 = *(uint64_t **)(v12 + 40), v13 != *(uint64_t **)(v12 + 48)) && (v14 = *v13) != 0)
  {
    if (*(_DWORD *)(v14 + 156) == 1)
    {
      v86 = 0;
      memset(v85, 0, sizeof(v85));
      SetCumulativeOriginWrtRoot((uint64_t)this, (uint64_t)v85);
      if (v15)
        return;
      MemType = ZinIrSymbol::GetMemType((ZinIrSymbol *)v14);
      if (MemType == 2)
        PostAllocationInterleave = 1;
      else
        PostAllocationInterleave = ZinIrRegAllocUtil::GetPostAllocationInterleave((ZinIrRegAllocUtil *)v9, v16);
      v84 = *(_QWORD *)(v14 + 328);
      v43 = *(_OWORD *)(v14 + 312);
      v82 = *(_OWORD *)(v14 + 296);
      v83 = v43;
      if (ZinIrTensor::IsReinterpretCast(this)
        && ZinTensorFormatGetSize(*((_DWORD *)this + 22), (_QWORD *)&v83 + 1))
      {
        v44 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v44)
          ZinIrLocalRegAlloc::SetPostCropChildOriginWrtRootAndOffsetWrtParent(v44, v45, v46, v47, v48, v49, v50, v51);
        return;
      }
      if (*((_BYTE *)this + 164))
      {
        InterchangeDescriptor = ZinIrTensor::GetInterchangeDescriptor(this);
        MacroblockSize = GetMacroblockSize(SHIDWORD(InterchangeDescriptor));
        v54 = 1;
      }
      else
      {
        MacroblockSize = 0;
        v54 = 0;
      }
      *a5 = ZinIrRegAllocUtil::ComputeOffset(&v82, v85, PostAllocationInterleave, MacroblockSize, v54);
      Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*((_QWORD *)this + 2) + 160));
      v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
      if (!(*(unsigned __int8 *)(v56 + 1327) | *(unsigned __int8 *)(v56 + 1331)))
      {
        *(_QWORD *)a4 = *a5;
        *(_BYTE *)(a4 + 8) = 1;
        *(_QWORD *)(a3 + 32) = 0;
        *(_OWORD *)a3 = 0u;
        *(_OWORD *)(a3 + 16) = 0u;
        if (*(_BYTE *)(a3 + 40))
          return;
LABEL_25:
        *(_BYTE *)(a3 + 40) = 1;
        return;
      }
      v58 = v56;
      if ((ZinIrRegAllocUtil::IsPreCropSupported(this, v57) & 1) != 0)
        return;
      v59 = (uint64_t *)(v58 + 416);
      if (MemType != 2)
        v59 = (uint64_t *)(v58 + 528);
      v60 = *v59;
      v61 = *a5;
      *(_QWORD *)a4 = *a5;
      *(_BYTE *)(a4 + 8) = 1;
      v62 = v61 % v60;
      if (ZinIrTensor::IsOutputView(this) && v62 && (MemType == 2 || !*(_BYTE *)(v58 + 1331)))
      {
        v74 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v74)
          ZinIrLocalRegAlloc::SetPostCropChildOriginWrtRootAndOffsetWrtParent(v74, v75, v76, v77, v78, v79, v80, v81);
      }
      else
      {
        if (v62)
          v63 = *((_QWORD *)&v83 + 1) == 0;
        else
          v63 = 1;
        if (v63)
        {
          v64 = 0;
        }
        else
        {
          v64 = v62 / *((_QWORD *)&v83 + 1);
          if (v62 % *((_QWORD *)&v83 + 1))
          {
            v65 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v65)
              ZinIrLocalRegAlloc::SetPostCropChildOriginWrtRootAndOffsetWrtParent(v65, v66, v67, v68, v69, v70, v71, v72);
            return;
          }
        }
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        v73 = *(unsigned __int8 *)(a3 + 40);
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = v64;
        *(_QWORD *)(a3 + 32) = 0;
        if (!v73)
          *(_BYTE *)(a3 + 40) = 1;
        *(_QWORD *)a4 -= v62;
      }
    }
    else
    {
      v35 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v35)
        ZinIrLocalRegAlloc::SetPostCropChildOriginWrtRootAndOffsetWrtParent(v35, v36, v37, v38, v39, v40, v41, v42);
    }
  }
  else
  {
    v19 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v19)
      ZinIrLocalRegAlloc::SetPostCropChildOriginWrtRootAndOffsetWrtParent(v19, v20, v21, v22, v23, v24, v25, v26);
  }
}

double SetCumulativeOriginWrtRoot(uint64_t a1, uint64_t a2)
{
  double result;
  __int128 v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  __int128 v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t InputTensor;
  _BOOL8 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64x2_t v47;
  int64x2_t v48[2];
  uint64_t v49;
  uint64_t v50;
  _BYTE v51[40];
  uint64_t v52;
  _QWORD v53[4];

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  ZinIrTensor::GetParentTensor((ZinIrTensor *)a1, v51);
  v5 = *(_OWORD *)v51;
  if (!*(_QWORD *)&v51[8])
    goto LABEL_5;
  v6 = (unint64_t *)(*(_QWORD *)&v51[8] + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)&v5 + 1) + 16))(*((_QWORD *)&v5 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v5 + 1));
    if (!(_QWORD)v5)
      return result;
  }
  else
  {
LABEL_5:
    if (!(_QWORD)v5)
      return result;
  }
  ZinIrTensor::GetMemorySharingInfo((ZinIrTensor *)a1, (uint64_t)v51);
  v8 = *(_OWORD *)&v51[24];
  *(_OWORD *)a2 = *(_OWORD *)&v51[8];
  *(_OWORD *)(a2 + 16) = v8;
  v9 = (_QWORD *)v53[1];
  *(_QWORD *)(a2 + 32) = v52;
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v53, v9);
  if (!ZinIrTensor::HasParent((ZinIrTensor *)v5))
    return result;
  v10 = *(_QWORD *)(v5 + 104);
  if (!v10 || (v11 = *(uint64_t **)(v10 + 40), v11 == *(uint64_t **)(v10 + 48)) || (v12 = *v11) == 0)
  {
    v22 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v22)
      SetCumulativeOriginWrtRoot(v22, v23, v24, v25, v26, v27, v28, v29);
    return result;
  }
  if (*(_DWORD *)(v12 + 156) != 1)
  {
    v30 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v30)
      ZinIrLocalRegAlloc::SetPostCropChildOriginWrtRootAndOffsetWrtParent(v30, v31, v32, v33, v34, v35, v36, v37);
    return result;
  }
  v13 = *(_OWORD *)(v12 + 232);
  *(_OWORD *)v51 = *(_OWORD *)(v12 + 216);
  *(_OWORD *)&v51[16] = v13;
  *(_QWORD *)&v51[32] = *(_QWORD *)(v12 + 248);
  if (!ZinIrTensor::IsReinterpretCast((ZinIrTensor *)a1))
    goto LABEL_30;
  v48[0].i64[0] = 0;
  v50 = 0;
  if (!ZinTensorFormatGetSize(*(_DWORD *)(a1 + 88), v48))
  {
    InputTensor = ZinIrOpLayer::GetInputTensor(*(ZinIrOpLayer **)(a1 + 96), 0);
    if (ZinTensorFormatGetSize(*(_DWORD *)(InputTensor + 88), &v50))
    {
      v14 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v14)
        goto LABEL_14;
      return result;
    }
    if (!v48[0].i64[0] || v50 * *(_QWORD *)&v51[24] % v48[0].i64[0])
    {
      v39 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v39)
        SetCumulativeOriginWrtRoot(v39, v40, v41, v42, v43, v44, v45, v46);
      return result;
    }
    *(_QWORD *)&v51[24] = v50 * *(_QWORD *)&v51[24] / v48[0].i64[0];
LABEL_30:
    ZinTensorPosition::operator+((int64x2_t *)a2, (int64x2_t *)v51, v48);
    result = *(double *)v48[0].i64;
    v47 = v48[1];
    *(int64x2_t *)a2 = v48[0];
    *(int64x2_t *)(a2 + 16) = v47;
    *(_QWORD *)(a2 + 32) = v49;
    return result;
  }
  v14 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v14)
LABEL_14:
    SetCumulativeOriginWrtRoot(v14, v15, v16, v17, v18, v19, v20, v21);
  return result;
}

uint64_t ZinIrLocalRegAlloc::SetSymbolToTensorFamily(ZinIrLocalRegAlloc *this, ZinIrSymbol *a2, ZinIrTensor *a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD **v8;
  ZinIrTensor *v9;
  _QWORD *v10;
  ZinIrSymbol *SymbolAliasFromParent;
  _QWORD *v12;
  _QWORD **v13;
  BOOL v14;
  ZinIrTensor *v16;
  _QWORD **v17;
  _QWORD *v18[2];
  void *__p;
  _QWORD *v20;
  _QWORD *v21;
  ZinIrTensor **v22;

  v6 = operator new(8uLL);
  __p = v6;
  *v6 = a2;
  v20 = v6 + 1;
  v21 = v6 + 1;
  ZinIrTensor::SetMirAndSymbols((uint64_t)a3, (uint64_t)&__p, *((_QWORD *)this + 2));
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  ZinIrTensor::GetChildren(a3, (uint64_t)&__p);
  if (*((_DWORD *)a2 + 38) == 1)
  {
    if (v21)
      ZinAssertImpl("Child tensor is not yet supported for L2 cached tensor");
    v7 = 0;
  }
  else
  {
    ZinIrTensor::GetChildren(a3, (uint64_t)&v17);
    v8 = v17;
    if (v17 == v18)
    {
LABEL_15:
      v7 = 0;
    }
    else
    {
      while (1)
      {
        v16 = (ZinIrTensor *)v8[4];
        v9 = v16;
        v22 = &v16;
        v10 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)this + 144, &v16, (uint64_t)&std::piecewise_construct, &v22);
        SymbolAliasFromParent = (ZinIrSymbol *)ZinIrLocalRegAlloc::CreateSymbolAliasFromParent(this, v9, (ZinLiveRange *)(v10 + 3));
        if (!SymbolAliasFromParent)
          break;
        v7 = ZinIrLocalRegAlloc::SetSymbolToTensorFamily(this, SymbolAliasFromParent, (ZinIrTensor *)v8[4]);
        if ((_DWORD)v7)
          goto LABEL_17;
        v12 = v8[1];
        if (v12)
        {
          do
          {
            v13 = (_QWORD **)v12;
            v12 = (_QWORD *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v13 = (_QWORD **)v8[2];
            v14 = *v13 == v8;
            v8 = v13;
          }
          while (!v14);
        }
        v8 = v13;
        if (v13 == v18)
          goto LABEL_15;
      }
      v7 = 3;
    }
LABEL_17:
    std::__tree<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>::destroy((uint64_t)&v17, v18[0]);
  }
  std::__tree<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>::destroy((uint64_t)&__p, v20);
  return v7;
}

void sub_206DB74A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, _QWORD *a15)
{
  std::__tree<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>::destroy((uint64_t)&__p, a15);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::RemoveSymbolFromTensorFamily(ZinIrLocalRegAlloc *this, ZinIrTensor *a2)
{
  _QWORD **v4;
  uint64_t ***v5;
  _QWORD *v6;
  _QWORD **v7;
  BOOL v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD **v13;
  _QWORD *v14[2];

  ZinIrTensor::GetChildren(a2, (uint64_t)&v13);
  v4 = v13;
  if (v13 != v14)
  {
    do
    {
      v5 = (uint64_t ***)ZinIrLocalRegAlloc::RemoveSymbolFromTensorFamily(this, (ZinIrTensor *)v4[4]);
      ZinIrSection::DeleteSymbol(v5[1], (ZinIrSymbol *)v5);
      v6 = v4[1];
      if (v6)
      {
        do
        {
          v7 = (_QWORD **)v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD **)v4[2];
          v8 = *v7 == v4;
          v4 = v7;
        }
        while (!v8);
      }
      v4 = v7;
    }
    while (v7 != v14);
  }
  std::__tree<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>::destroy((uint64_t)&v13, v14[0]);
  v9 = *((_QWORD *)a2 + 13);
  if (!v9 || (v10 = *(uint64_t **)(v9 + 40), v10 == *(uint64_t **)(v9 + 48)))
    v11 = 0;
  else
    v11 = *v10;
  ZinIrTensor::DeleteSymbols((uint64_t)a2);
  return v11;
}

void sub_206DB75CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t ZinIrSection::DeleteSymbol(uint64_t **this, ZinIrSymbol *a2)
{
  uint64_t v3;
  ZinIrSymbol *v5;

  ZinIrSymbolTable::RemoveSymbol(this + 8, a2);
  v3 = *((_QWORD *)a2 + 64);
  if (v3)
  {
    v5 = a2;
    std::__tree<ZinIrSymbol const*,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol const*>>::__erase_unique<ZinIrSymbol const*>((uint64_t **)(v3 + 488), (uint64_t *)&v5);
    *((_QWORD *)a2 + 64) = 0;
  }
  return (*(uint64_t (**)(ZinIrSymbol *))(*(_QWORD *)a2 + 8))(a2);
}

uint64_t ZinIrLocalRegAlloc::NeedInputDMADefaultBuffer(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  ZinIrTensor *v7;
  ZinIrTensor *RootTensor;
  uint64_t v9;
  _BOOL4 v10;
  void *v11;
  void *v12;

  if (ZinIrLocalRegAlloc::NeedInputDMACachedBuffer(a1, a2, a3))
    return 0;
  if (a3 >= 2)
    ZinAssertImpl("Allocation Internal Error");
  v6 = (*(uint64_t (**)(uint64_t *, uint64_t))(*a2 + 504))(a2, a3);
  v7 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0, 0);
  RootTensor = ZinIrTensor::GetRootTensor(v7);
  v9 = a2[33];
  if (v9)
  {
    ZinEngineLayerMirInfo::GetL2RdSymbols(v9, a3, &v11);
    v10 = v12 == v11;
    if (v11)
    {
      v12 = v11;
      operator delete(v11);
    }
  }
  else
  {
    v10 = 1;
  }
  return v10 & ZinIrTensor::HasDramSymbol(RootTensor);
}

BOOL ZinIrLocalRegAlloc::NeedInputDMACachedBuffer(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  int HasDramSymbol;
  _BOOL8 result;
  uint64_t v12;
  uint64_t v13;
  ZinIrTensor *RootTensor;
  ZinIrTensor *v15;

  if (a3 >= 2)
    ZinAssertImpl("Allocation internal Error");
  v3 = a3;
  v6 = (*(uint64_t (**)(uint64_t *, uint64_t))(*a2 + 504))(a2, a3);
  v7 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0, 0);
  v8 = a2[33];
  if (v8)
  {
    ZinEngineLayerMirInfo::GetL2RdSymbols(v8, v3, &RootTensor);
    v9 = v15 == RootTensor;
    if (RootTensor)
    {
      v15 = RootTensor;
      operator delete(RootTensor);
    }
  }
  else
  {
    v9 = 1;
  }
  HasDramSymbol = ZinIrTensor::HasDramSymbol((ZinIrTensor *)v7);
  result = 0;
  if (v9 && HasDramSymbol)
  {
    v12 = **(_QWORD **)(*(_QWORD *)(v7 + 104) + 40);
    if (*(_DWORD *)(v12 + 156) != 1)
      goto LABEL_21;
    RootTensor = 0;
    ZinTensorFormatGetSize(*(_DWORD *)(v7 + 88), &RootTensor);
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 528) / (uint64_t)RootTensor;
    if (v13 <= 1)
      v13 = 1;
    if (*(_QWORD *)(v12 + 240) % v13)
    {
      return 0;
    }
    else
    {
LABEL_21:
      if (ZinEngineLayerMirInfo::NeedInputDMACached(a2[33], v3) || !*(_BYTE *)(*(_QWORD *)(a1 + 16) + 1105))
      {
        return 1;
      }
      else
      {
        RootTensor = ZinIrTensor::GetRootTensor((ZinIrTensor *)v7);
        return std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>(a1 + 344, (uint64_t *)&RootTensor) != 0;
      }
    }
  }
  return result;
}

uint64_t ZinIrLocalRegAlloc::NeedOutputDMADefaultBuffer(ZinIrLocalRegAlloc *this, ZinEngineLayerMirInfo **a2)
{
  ZinIrTensor *v4;
  ZinEngineLayerMirInfo *v6;
  _BOOL4 v7;
  void *v8;
  void *v9;

  v4 = (ZinIrTensor *)(*((uint64_t (**)(ZinEngineLayerMirInfo **, _QWORD, _QWORD))*a2 + 4))(a2, 0, 0);
  if (ZinIrLocalRegAlloc::NeedOutputDMACachedBuffer(this, (const ZinANELayer *)a2))
    return 0;
  v6 = a2[33];
  if (v6)
  {
    ZinEngineLayerMirInfo::GetL2WrSymbols(v6, &v8);
    v7 = v9 == v8;
    if (v8)
    {
      v9 = v8;
      operator delete(v8);
    }
  }
  else
  {
    v7 = 1;
  }
  return v7 & ZinIrTensor::HasDramSymbol(v4);
}

BOOL ZinIrLocalRegAlloc::NeedOutputDMACachedBuffer(ZinIrLocalRegAlloc *this, const ZinANELayer *a2)
{
  ZinEngineLayerMirInfo *v4;
  _BOOL4 v5;
  ZinIrTensor *v6;
  int HasDramSymbol;
  _BOOL8 result;
  int v9;
  _QWORD *OutputCropOffsetXLsbs;
  ZinIrTensor *v11;
  ZinIrTensor *RootTensor;
  ZinIrTensor *v13;

  v4 = (ZinEngineLayerMirInfo *)*((_QWORD *)a2 + 33);
  if (v4)
  {
    ZinEngineLayerMirInfo::GetL2WrSymbols(v4, &RootTensor);
    v5 = v13 == RootTensor;
    if (RootTensor)
    {
      v13 = RootTensor;
      operator delete(RootTensor);
    }
  }
  else
  {
    v5 = 1;
  }
  v6 = (ZinIrTensor *)(*(uint64_t (**)(const ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  HasDramSymbol = ZinIrTensor::HasDramSymbol(v6);
  result = 0;
  if (v5 && HasDramSymbol)
  {
    v9 = *(_DWORD *)((*(uint64_t (**)(const ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0)+ 88);
    OutputCropOffsetXLsbs = ZinIrLocalRegAlloc::GetOutputCropOffsetXLsbs(this, a2);
    if (ZinCropOffsetUtil::HasUnalignedOutputCropX(v9, (uint64_t)OutputCropOffsetXLsbs, *((_QWORD *)this + 2)))
    {
      return 0;
    }
    else if (*(_BYTE *)(*((_QWORD *)a2 + 33) + 1642) || !*(_BYTE *)(*((_QWORD *)this + 2) + 1105))
    {
      return 1;
    }
    else
    {
      v11 = (ZinIrTensor *)(*(uint64_t (**)(const ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
      RootTensor = ZinIrTensor::GetRootTensor(v11);
      return std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)this + 344, (uint64_t *)&RootTensor) != 0;
    }
  }
  return result;
}

uint64_t ZinIrLocalRegAlloc::AllocateChainSymbol(ZinIrLocalRegAlloc *this, ZinIrTensor *a2)
{
  uint64_t v4;
  ZinIrOpLayer *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t TileSrc;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  int IsQualifiedForBankConflictOpt;
  const ZinIrHalParameters *v13;
  uint64_t v14;
  ZinIrSection *L2Section;
  uint64_t *v16;
  _BOOL8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t HasL2SpaceForConflictingDMAbuffers;
  _QWORD *v27;
  uint64_t v28;
  size_t v29;
  void **v30;
  const ZinLiveRange *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  ZinIrMemoryPool *v37;
  ZinIrMemoryPool *v38;
  _QWORD **__src;
  _DWORD v40[113];
  uint64_t *v41[4];
  int v42;
  int v43;
  uint64_t *v44[4];
  int v45;
  int v46;
  uint64_t *v47[4];
  int v48;
  _QWORD *__dst[57];
  uint64_t *v50[4];
  int v51;
  int v52;
  uint64_t *v53[4];
  int v54;
  int v55;
  uint64_t *v56[4];
  int v57;
  ZinIrSymbol *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  void *v62[2];
  char v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  int v69;
  ZinMirBankConflictOptimizer *v70;
  uint64_t v71;
  std::string __p;
  _BYTE v73[304];
  uint64_t v74;
  std::string __s;
  _BYTE v76[304];
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  v70 = a2;
  v4 = *((_QWORD *)a2 + 12);
  v5 = **(ZinIrOpLayer ***)(v4 + 112);
  v69 = 0;
  if (!ZinIrRegAllocUtil::GetChainedOperandL2SrcType(*(ZinIrOpLayerGraph **)(v4 + 152), v5, (const ZinIrOpLayer *)v4, &v69))
  {
    v17 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v17)
      ZinIrLocalRegAlloc::AllocateChainSymbol(v17, v18, v19, v20, v21, v22, v23, v24);
    return 0;
  }
  v6 = *(_QWORD *)(v4 + 264);
  v7 = *((_QWORD *)v5 + 33);
  __src = (_QWORD **)(v6 + 120);
  ZinMirL2Config::CalculateChainDstBufferStride(v6 + 120, (uint64_t)a2, v69, *((_QWORD *)this + 2));
  ZinMirL2Config::CalculateChainSrcBufferStride(v7 + 120, (uint64_t)v70, v69, *((_QWORD *)this + 2));
  TileSrc = ZinMirL2Config::GetTileSrc(v7 + 120, v69);
  v10 = *(_OWORD *)(TileSrc + 32);
  v9 = *(_OWORD *)(TileSrc + 48);
  v11 = *(_QWORD *)(TileSrc + 64);
  v65 = *(_OWORD *)(TileSrc + 16);
  v64 = *(_OWORD *)TileSrc;
  v68 = v11;
  v66 = v10;
  v67 = v9;
  if (*(_BYTE *)(*((_QWORD *)this + 2) + 1118)
    && *(_QWORD *)(*((_QWORD *)this + 2) + 416) * (_QWORD)v65 >= *(_QWORD *)(*((_QWORD *)this + 2) + 464))
  {
    return 0;
  }
  if (*(_DWORD *)(*((_QWORD *)this + 3) + 312))
  {
    LOBYTE(__dst[0]) = 0;
    LOBYTE(__dst[13]) = 0;
    IsQualifiedForBankConflictOpt = ZinMirBankConflictOptimizer::IsQualifiedForBankConflictOpt(v70, 0, (ZinTensorFamilyUtil *)__dst);
    std::__optional_destruct_base<ZinTensorFamilyUtil,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__dst);
    if (IsQualifiedForBankConflictOpt)
    {
      v14 = ZinMirBankConflictOptimizer::ComputeChainSymbolRowStride(v70, *((const ZinIrTensor **)this + 2), v13);
      *(_QWORD *)(v6 + 272) = v14;
      *((_QWORD *)&v64 + 1) = v14;
      ZinMirL2Config::SetTileSrc(v7 + 120, (uint64_t)&v64, v69);
    }
  }
  L2Section = (ZinIrSection *)ZinIrLocalRegAlloc::GetL2Section(this);
  LODWORD(__dst[0]) = *((_DWORD *)L2Section + 3);
  v16 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>((_QWORD *)this + 13, (int *)__dst);
  if (v16)
    v37 = (ZinIrMemoryPool *)v16[3];
  else
    v37 = 0;
  __dst[0] = &v70;
  v27 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)this + 144, &v70, (uint64_t)&std::piecewise_construct, __dst);
  ZinMirL2Config::CalculateChainSrcBufferSize(v7 + 120, (uint64_t)v70, v69, *((_QWORD *)this + 2));
  v28 = ZinMirL2Config::CalculateChainDstBufferSize((uint64_t)__src, (uint64_t)v70, v69, *((_QWORD *)this + 2));
  if (*(char *)(v4 + 47) >= 0)
    v29 = *(unsigned __int8 *)(v4 + 47);
  else
    v29 = *(_QWORD *)(v4 + 32);
  v30 = v62;
  std::string::basic_string[abi:ne180100]((uint64_t)v62, v29 + 10);
  v31 = (const ZinLiveRange *)(v27 + 3);
  if (v63 < 0)
    v30 = (void **)v62[0];
  if (v29)
  {
    v34 = *(char **)(v4 + 24);
    v33 = (char *)(v4 + 24);
    v32 = v34;
    if (v33[23] >= 0)
      v35 = v33;
    else
      v35 = v32;
    memmove(v30, v35, v29);
  }
  strcpy((char *)v30 + v29, "/chain_buf");
  v60 = 0;
  v59 = 0;
  v61 = 0;
  v58 = 0;
  ZinIrSymbol::Descriptor::Descriptor(&v74, 4, v62, v31, v28);
  v71 = v74;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    __p = __s;
  memcpy(v73, v76, sizeof(v73));
  ZinIrMemoryPool::AllocateMemory(v37, (uint64_t)&v71, L2Section, *(_QWORD *)(*((_QWORD *)this + 2) + 416), (uint64_t *)&v58, (uint64_t)&v59);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v58 && !ZinIrLocalRegAlloc::SetSymbolToLayerAndTensor(this, v58, v70))
  {
    memcpy(__dst, (const void *)(v6 + 120), 0x1C4uLL);
    v38 = (ZinIrMemoryPool *)std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v50, v6 + 576);
    v52 = *(_DWORD *)(v6 + 616);
    std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v53, v6 + 624);
    v55 = *(_DWORD *)(v6 + 664);
    std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v56, v6 + 672);
    memcpy(v40, (const void *)(v7 + 120), sizeof(v40));
    std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v41, v7 + 576);
    v43 = *(_DWORD *)(v7 + 616);
    v36 = std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v44, v7 + 624);
    v46 = *(_DWORD *)(v7 + 664);
    std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v47, v7 + 672);
    *(_BYTE *)(v6 + 233) = 1;
    *(_BYTE *)(v6 + 150) = 1;
    *(_BYTE *)(v6 + 256) = 1;
    *(_BYTE *)(v7 + 233) = 1;
    *(_BYTE *)(v7 + 150) = 1;
    *(_BYTE *)(v7 + 256) = 1;
    HasL2SpaceForConflictingDMAbuffers = ZinIrLocalRegAlloc::HasL2SpaceForConflictingDMAbuffers(this, v31);
    memcpy(__src, __dst, 0x1C0uLL);
    *(_DWORD *)(v6 + 568) = __dst[56];
    if (__src == __dst)
    {
      *(_DWORD *)(v6 + 616) = v52;
      *(_DWORD *)(v6 + 664) = v55;
    }
    else
    {
      *(_DWORD *)(v6 + 608) = v51;
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v6 + 576), v50[2], 0);
      *(_DWORD *)(v6 + 616) = v52;
      *(_DWORD *)(v6 + 656) = v54;
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v6 + 624), v53[2], 0);
      *(_DWORD *)(v6 + 664) = v55;
      *(_DWORD *)(v6 + 704) = v57;
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v6 + 672), v56[2], 0);
    }
    memcpy((void *)(v7 + 120), v40, 0x1C0uLL);
    *(_DWORD *)(v7 + 568) = v40[112];
    if ((_DWORD *)(v7 + 120) == v40)
    {
      *(_DWORD *)(v7 + 616) = v43;
      *(_DWORD *)(v7 + 664) = v46;
      if ((HasL2SpaceForConflictingDMAbuffers & 1) != 0)
      {
LABEL_40:
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v47);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v36);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v41);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v56);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v53);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v38);
        goto LABEL_41;
      }
    }
    else
    {
      *(_DWORD *)(v7 + 608) = v42;
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v7 + 576), v41[2], 0);
      *(_DWORD *)(v7 + 616) = v43;
      *(_DWORD *)(v7 + 656) = v45;
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v7 + 624), v44[2], 0);
      *(_DWORD *)(v7 + 664) = v46;
      *(_DWORD *)(v7 + 704) = v48;
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v7 + 672), v47[2], 0);
      if ((HasL2SpaceForConflictingDMAbuffers & 1) != 0)
        goto LABEL_40;
    }
    ZinIrLocalRegAlloc::RemoveSymbolFromLayerAndTensor(this, v70);
    goto LABEL_40;
  }
  HasL2SpaceForConflictingDMAbuffers = 0;
LABEL_41:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  if (v59)
  {
    v60 = v59;
    operator delete(v59);
  }
  if (v63 < 0)
    operator delete(v62[0]);
  return HasL2SpaceForConflictingDMAbuffers;
}

void sub_206DB8064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  void *v18;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(a16);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(a17);
  ZinMirL2Config::~ZinMirL2Config((ZinMirL2Config *)&STACK[0x2A8]);
  if (SLOBYTE(STACK[0x6F7]) < 0)
    operator delete((void *)STACK[0x6E0]);
  v18 = (void *)STACK[0x500];
  if (STACK[0x500])
  {
    STACK[0x508] = (unint64_t)v18;
    operator delete(v18);
  }
  if (SLOBYTE(STACK[0x52F]) < 0)
    operator delete((void *)STACK[0x518]);
  _Unwind_Resume(a1);
}

void ZinMirL2Config::ZinMirL2Config(ZinMirL2Config *this, const ZinMirL2Config *a2)
{
  memcpy(this, a2, 0x1C0uLL);
  *((_DWORD *)this + 112) = *((_DWORD *)a2 + 112);
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)this + 456, (uint64_t)a2 + 456);
  *((_DWORD *)this + 124) = *((_DWORD *)a2 + 124);
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)this + 504, (uint64_t)a2 + 504);
  *((_DWORD *)this + 136) = *((_DWORD *)a2 + 136);
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)this + 552, (uint64_t)a2 + 552);
}

void sub_206DB81B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v2);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::AllocateInputDMADefaultBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10;
  ZinIrRegAllocUtil *v11;
  uint64_t *v12;
  ZinIrMemoryPool *v13;
  const ZinIrTensor *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t PostAllocationInterleave;
  l2a *v18;
  unsigned int InputCropOffsetXLsbs;
  int v20;
  unint64_t v21;
  uint64_t TileSrc;
  uint64_t v23;
  size_t v24;
  std::string *v25;
  const void *v26;
  std::string *v27;
  std::string::size_type size;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  ZinIrSection *v38;
  std::string v39;
  std::string v40;
  std::string v41;
  void *__p[2];
  _QWORD *v43;
  void *v44[3];
  uint64_t v45;
  uint64_t v46;
  std::string v47;
  _BYTE v48[304];
  uint64_t v49;
  std::string v50;
  _BYTE v51[304];
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  if (a3 >= 2)
    ZinAssertImpl("Allocation Internal Error");
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 504))(a2, a3);
  v11 = (ZinIrRegAllocUtil *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v10 + 32))(v10, 0, 0);
  LODWORD(v49) = 2;
  v12 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>((_QWORD *)(a1 + 104), (int *)&v49);
  if (v12)
    v13 = (ZinIrMemoryPool *)v12[3];
  else
    v13 = 0;
  ZinIrMemoryPool::GetSections((uint64_t)v13, 4, &v49);
  v38 = *(ZinIrSection **)(v50.__r_.__value_.__r.__words[0] + 16);
  std::__list_imp<ZinIrSection *>::clear(&v49);
  v15 = *((_QWORD *)v11 + 13);
  if (v15 && (v16 = *(_QWORD **)(v15 + 40), v16 != *(_QWORD **)(v15 + 48)) && *v16)
    PostAllocationInterleave = ZinIrRegAllocUtil::GetPostAllocationInterleave(v11, v14);
  else
    PostAllocationInterleave = ZinIrLocalRegAlloc::GetPreAllocationInterleave((ZinIrLocalRegAlloc *)a1, v11);
  v18 = (l2a *)PostAllocationInterleave;
  if (!*(_DWORD *)(*(_QWORD *)(a1 + 24) + 312))
    a5 = 0;
  InputCropOffsetXLsbs = ZinIrLocalRegAlloc::GetInputCropOffsetXLsbs(a1, (ZinANELayer *)a2, a3, 0);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 24) + 312))
    v20 = a5;
  else
    v20 = 0;
  v21 = ZinMirL2Config::CalculateDMASrcBufferSizeAndStrides(*(_QWORD *)(a2 + 264) + 120, a2, a3, v18, InputCropOffsetXLsbs, v20, *(unsigned __int8 **)(a1 + 16));
  TileSrc = ZinMirL2Config::GetTileSrc(*(_QWORD *)(a2 + 264) + 120, a3);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 16) + 1118)
    && *(_QWORD *)(*(_QWORD *)(a1 + 16) + 416) * *(_QWORD *)(TileSrc + 16) >= *(_QWORD *)(*(_QWORD *)(a1 + 16) + 464))
  {
    return 0;
  }
  v45 = 0;
  ZinIrLocalRegAlloc::ComputeL2BanksToAvoidForDualSrcPE((ZinIrLocalRegAlloc *)a1, v11, v20, (char **)v44);
  if (*(char *)(a2 + 47) >= 0)
    v24 = *(unsigned __int8 *)(a2 + 47);
  else
    v24 = *(_QWORD *)(a2 + 32);
  std::string::basic_string[abi:ne180100]((uint64_t)&v40, v24 + 1);
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = &v40;
  else
    v25 = (std::string *)v40.__r_.__value_.__r.__words[0];
  if (v24)
  {
    if (*(char *)(a2 + 47) >= 0)
      v26 = (const void *)(a2 + 24);
    else
      v26 = *(const void **)(a2 + 24);
    memmove(v25, v26, v24);
  }
  *(_WORD *)((char *)&v25->__r_.__value_.__l.__data_ + v24) = 95;
  std::to_string(&v39, (_DWORD)a3 != 0);
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v27 = &v39;
  else
    v27 = (std::string *)v39.__r_.__value_.__r.__words[0];
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  else
    size = v39.__r_.__value_.__l.__size_;
  v29 = std::string::append(&v40, (const std::string::value_type *)v27, size);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  v31 = std::string::append(&v41, "/tile_src_l2_buf", 0x10uLL);
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v43 = (_QWORD *)v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  ZinIrSymbol::Descriptor::Descriptor(&v49, 0, __p, a4, v21);
  if (SHIBYTE(v43) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  v46 = v49;
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v47, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
  else
    v47 = v50;
  memcpy(v48, v51, sizeof(v48));
  v33 = ZinIrMemoryPool::AllocateMemory(v13, (uint64_t)&v46, v38, *(_QWORD *)(*(_QWORD *)(a1 + 16) + 416), &v45, (uint64_t)v44);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  v23 = 0;
  if (!v33)
  {
    v34 = v45;
    if (v45)
    {
      v35 = *(_QWORD *)(a2 + 264);
      v36 = operator new(8uLL);
      __p[0] = v36;
      *v36 = v34;
      __p[1] = v36 + 1;
      v43 = v36 + 1;
      v23 = ZinEngineLayerMirInfo::SetL2RdSymbols(v35, (const ZinIrSymbol ***)__p, a3, 1);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (v44[0])
  {
    v44[1] = v44[0];
    operator delete(v44[0]);
  }
  return v23;
}

void sub_206DB8604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;

  if (SLOBYTE(STACK[0x20F]) < 0)
    operator delete(__p);
  if (a25)
    operator delete(a25);
  _Unwind_Resume(a1);
}

uint64_t *ZinIrLocalRegAlloc::GetInputCropOffsetXLsbs(uint64_t a1, ZinANELayer *a2, unsigned int a3, unsigned int a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t TextureIndexInput;
  uint64_t v11;
  _QWORD *v12;
  _BOOL4 v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *result;
  ZinANELayer *v17;
  char *v18;

  if (a3 >= 2)
    ZinAssertImpl("Internal Reg Alloc Error");
  v8 = a3 != 0;
  (*(void (**)(ZinANELayer **__return_ptr, ZinANELayer *))(*(_QWORD *)a2 + 512))(&v17, a2);
  if (v8 >= (v18 - (char *)v17) >> 3)
    std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
  v9 = *((_QWORD *)v17 + v8);
  v18 = (char *)v17;
  operator delete(v17);
  if (*((_QWORD *)a2 + 25) && (*(unsigned int (**)(ZinANELayer *))(*(_QWORD *)a2 + 496))(a2))
  {
    TextureIndexInput = ZinANELayer::GetTextureIndexInput(a2);
    v11 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)TextureIndexInput + 32))(TextureIndexInput, 0, 0)+ 104);
    v13 = v11 && (v12 = *(_QWORD **)(v11 + 40), v12 != *(_QWORD **)(v11 + 48)) && *v12 != 0;
  }
  else
  {
    v13 = 1;
  }
  v14 = *(_QWORD *)(v9 + 104);
  if (v14)
  {
    v15 = *(_QWORD **)(v14 + 40);
    if (v15 != *(_QWORD **)(v14 + 48))
    {
      if (!*v15)
        v13 = 0;
      if (v13)
        return (uint64_t *)ZinCropOffsetUtil::GetPostAllocationInputCropOffsetXLsbs(a2, a3);
    }
  }
  v17 = a2;
  v18 = (char *)__PAIR64__(a4, a3);
  result = std::__hash_table<std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>,std::__unordered_map_hasher<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>,ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKeyHasher,std::equal_to<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey>,true>,std::__unordered_map_equal<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>,std::equal_to<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey>,ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKeyHasher,true>,std::allocator<std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>>>::find<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey>((_QWORD *)(a1 + 224), (int *)&v17);
  if (result)
    return (uint64_t *)result[4];
  return result;
}

void sub_206DB8820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrLocalRegAlloc::AllocateOutputDMADefaultBuffer(ZinIrLocalRegAlloc *this, ZinANELayer *a2, const ZinLiveRange *a3, int a4)
{
  uint64_t *v8;
  ZinIrMemoryPool *v9;
  ZinIrSection *v10;
  const ZinIrTensor *v11;
  uint64_t Interleave;
  _QWORD *OutputCropOffsetXLsbs;
  char *v14;
  int v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  void *p_p;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  void *__p;
  void *v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  std::string v40;
  _BYTE v41[304];
  uint64_t v42;
  std::string v43;
  _BYTE v44[304];
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  LODWORD(v42) = 2;
  v8 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>((_QWORD *)this + 13, (int *)&v42);
  if (v8)
    v9 = (ZinIrMemoryPool *)v8[3];
  else
    v9 = 0;
  ZinIrMemoryPool::GetSections((uint64_t)v9, 4, &v42);
  v10 = *(ZinIrSection **)(v43.__r_.__value_.__r.__words[0] + 16);
  std::__list_imp<ZinIrSection *>::clear(&v42);
  v11 = (const ZinIrTensor *)(*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  Interleave = ZinIrLocalRegAlloc::GetInterleave(this, v11);
  OutputCropOffsetXLsbs = ZinIrLocalRegAlloc::GetOutputCropOffsetXLsbs(this, a2);
  v38 = 0;
  v14 = (char *)this + 16;
  if (*(_DWORD *)(*((_QWORD *)this + 3) + 312))
    v15 = a4;
  else
    v15 = 0;
  ZinMirL2Config::CalculateDMADstBufferStride((ZinMirL2Config *)(*((_QWORD *)a2 + 33) + 120), (ZinEngineLayerMirInfo **)a2, Interleave, (uint64_t)OutputCropOffsetXLsbs, v15, *((const ZinIrHalParameters **)this + 2));
  v16 = *((_QWORD *)a2 + 33);
  if (*(_BYTE *)(*(_QWORD *)v14 + 1118)
    && *(_QWORD *)(*(_QWORD *)v14 + 416) * *(_QWORD *)(v16 + 280) >= *(_QWORD *)(*(_QWORD *)v14 + 464))
  {
    v17 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v17)
      ZinIrLocalRegAlloc::AllocateOutputDMADefaultBuffer(v17, v18, v19, v20, v21, v22, v23, v24);
    return 0;
  }
  else
  {
    ZinMirL2Config::ZinMirGetL2WriteFootprint((ZinMirL2Config *)(v16 + 120), a2, Interleave, &v38);
    v37 = 0;
    if (*((char *)a2 + 47) >= 0)
      v26 = *((unsigned __int8 *)a2 + 47);
    else
      v26 = *((_QWORD *)a2 + 4);
    p_p = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v26 + 16);
    if (SHIBYTE(v36) < 0)
      p_p = __p;
    if (v26)
    {
      if (*((char *)a2 + 47) >= 0)
        v28 = (char *)a2 + 24;
      else
        v28 = (char *)*((_QWORD *)a2 + 3);
      memmove(p_p, v28, v26);
    }
    strcpy((char *)p_p + v26, "/conv_res_l2_buf");
    ZinIrSymbol::Descriptor::Descriptor(&v42, 0, &__p, a3, v38);
    if (SHIBYTE(v36) < 0)
      operator delete(__p);
    v39 = v42;
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v40, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
    else
      v40 = v43;
    memcpy(v41, v44, sizeof(v41));
    v29 = *(_QWORD *)(*((_QWORD *)this + 2) + 416);
    __p = 0;
    v35 = 0;
    v36 = 0;
    ZinIrMemoryPool::AllocateMemory(v9, (uint64_t)&v39, v10, v29, &v37, (uint64_t)&__p);
    if (__p)
    {
      v35 = __p;
      operator delete(__p);
    }
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    v30 = v37;
    if (v37)
    {
      v31 = *((_QWORD *)a2 + 33);
      v32 = operator new(8uLL);
      __p = v32;
      *v32 = v30;
      v35 = v32 + 1;
      v36 = v32 + 1;
      v25 = ZinEngineLayerMirInfo::SetL2WrSymbols(v31, (const ZinIrSymbol ***)&__p, 1);
      if (__p)
      {
        v35 = __p;
        operator delete(__p);
      }
    }
    else
    {
      v25 = 0;
    }
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
  }
  return v25;
}

void sub_206DB8B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;

  if (a64 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::GetInterleave(ZinIrLocalRegAlloc *this, const ZinIrTensor *a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = *((_QWORD *)a2 + 13);
  if (v2 && (v3 = *(_QWORD **)(v2 + 40), v3 != *(_QWORD **)(v2 + 48)) && *v3)
    return ZinIrRegAllocUtil::GetPostAllocationInterleave(a2, a2);
  else
    return ZinIrLocalRegAlloc::GetPreAllocationInterleave(this, a2);
}

_QWORD *ZinIrLocalRegAlloc::GetOutputCropOffsetXLsbs(ZinIrLocalRegAlloc *this, const ZinANELayer *a2)
{
  const ZinANELayer *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  const ZinANELayer *v8;

  v5 = *(_QWORD *)((*(uint64_t (**)(const ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0)
                 + 104);
  if (v5)
  {
    v6 = *(_QWORD **)(v5 + 40);
    if (v6 != *(_QWORD **)(v5 + 48))
    {
      if (*v6)
        return (_QWORD *)ZinCropOffsetUtil::GetPostAllocationOutputCropOffsetXLsbs(a2, v4);
    }
  }
  v8 = a2;
  result = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 33, &v8);
  if (result)
    return (_QWORD *)result[3];
  return result;
}

uint64_t ZinIrLocalRegAlloc::AllocateDMABuffers(ZinIrLocalRegAlloc *this, ZinANELayer *a2, int a3, int a4)
{
  _QWORD *v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  char InputDMADefaultBuffer;
  uint64_t v13;
  char OutputDMADefaultBuffer;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  void *__p;
  _BYTE *v20;

  (*(void (**)(void **__return_ptr, ZinANELayer *))(*(_QWORD *)a2 + 512))(&__p, a2);
  v8 = __p;
  if (v20 == __p)
  {
LABEL_14:
    if (ZinIrLocalRegAlloc::NeedOutputDMADefaultBuffer(this, (ZinEngineLayerMirInfo **)a2))
    {
      if (a4)
      {
        v13 = *((_QWORD *)a2 + 7) + *((_QWORD *)a2 + 6);
        v17 = *((_QWORD *)a2 + 6);
        v18 = v13;
      }
      else
      {
        v17 = *((_QWORD *)a2 + 6);
        v18 = v17;
      }
      OutputDMADefaultBuffer = ZinIrLocalRegAlloc::AllocateOutputDMADefaultBuffer(this, a2, (const ZinLiveRange *)&v17, a3);
    }
    else
    {
      if (!ZinIrLocalRegAlloc::NeedOutputDMACachedBuffer(this, a2))
      {
LABEL_22:
        v15 = 1;
        goto LABEL_24;
      }
      OutputDMADefaultBuffer = ZinIrLocalRegAlloc::AllocateOutputDMACachedBuffer(this, a2);
    }
    if ((OutputDMADefaultBuffer & 1) == 0)
      goto LABEL_23;
    goto LABEL_22;
  }
  v9 = 0;
  v10 = 1;
  do
  {
    if (((*(uint64_t (**)(ZinANELayer *, _QWORD))(*(_QWORD *)a2 + 200))(a2, v8[v9]) & 1) != 0)
      goto LABEL_12;
    if (ZinIrLocalRegAlloc::NeedInputDMADefaultBuffer((uint64_t)this, (uint64_t *)a2, v9 != 0))
    {
      if (a4)
      {
        v11 = *((_QWORD *)a2 + 7) + *((_QWORD *)a2 + 6);
        v17 = *((_QWORD *)a2 + 6);
        v18 = v11;
      }
      else
      {
        v17 = *((_QWORD *)a2 + 6);
        v18 = v17;
      }
      InputDMADefaultBuffer = ZinIrLocalRegAlloc::AllocateInputDMADefaultBuffer((uint64_t)this, (uint64_t)a2, v9 != 0, (uint64_t)&v17, a3);
    }
    else
    {
      if (!ZinIrLocalRegAlloc::NeedInputDMACachedBuffer((uint64_t)this, (uint64_t *)a2, v9 != 0))
        goto LABEL_12;
      InputDMADefaultBuffer = ZinIrLocalRegAlloc::AllocateInputDMACachedBuffer(this, a2, v9 != 0);
    }
    v10 &= InputDMADefaultBuffer;
LABEL_12:
    ++v9;
    v8 = __p;
  }
  while (v9 < (v20 - (_BYTE *)__p) >> 3);
  if ((v10 & 1) != 0)
    goto LABEL_14;
LABEL_23:
  ZinIrLocalRegAlloc::FreeDMADefaultBuffers((uint64_t)this, a2);
  ZinIrLocalRegAlloc::FreeDMACachedBuffers(this, a2);
  v15 = 0;
LABEL_24:
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  return v15;
}

void sub_206DB8E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrLocalRegAlloc::AllocateInputDMACachedBuffer(ZinIrLocalRegAlloc *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v6;
  ZinIrMemoryPool *v7;
  ZinIrSection *L2Section;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *__p;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  std::string v21;
  _BYTE v22[304];
  uint64_t v23;
  std::string v24;
  _BYTE v25[304];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)ZinANELayer::GetCachedSrcTensor((uint64_t)a2, a3))
    ZinAssertImpl("L2 cached tensor and DMA Cached buffer is mutually exclusive");
  ZinIrLocalRegAlloc::CreateReadL2CacheSymbolDescriptor(a1, a2, a3, (uint64_t)&v23);
  v19 = 0;
  LODWORD(__p) = 2;
  v6 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>((_QWORD *)a1 + 13, (int *)&__p);
  if (v6)
    v7 = (ZinIrMemoryPool *)v6[3];
  else
    v7 = 0;
  v20 = v23;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v21, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
  else
    v21 = v24;
  memcpy(v22, v25, sizeof(v22));
  L2Section = (ZinIrSection *)ZinIrLocalRegAlloc::GetL2Section(a1);
  v9 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 416);
  __p = 0;
  v17 = 0;
  v18 = 0;
  v10 = ZinIrMemoryPool::AllocateMemory(v7, (uint64_t)&v20, L2Section, v9, &v19, (uint64_t)&__p);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v21.__r_.__value_.__l.__data_);
    if (v10)
      goto LABEL_12;
  }
  else if (v10)
  {
LABEL_12:
    v11 = 0;
    goto LABEL_16;
  }
  v12 = a2[33];
  v13 = v19;
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v17 = v14 + 1;
  v18 = v14 + 1;
  v11 = ZinEngineLayerMirInfo::SetL2RdSymbols(v12, (const ZinIrSymbol ***)&__p, a3, 2);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
LABEL_16:
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  return v11;
}

void sub_206DB9068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (__p)
    operator delete(__p);
  if (a62 < 0)
    operator delete(a57);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::AllocateOutputDMACachedBuffer(ZinIrLocalRegAlloc *this, ZinANELayer *a2)
{
  uint64_t *v4;
  ZinIrMemoryPool *v5;
  ZinIrSection *L2Section;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *__p;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  std::string v19;
  _BYTE v20[304];
  uint64_t v21;
  std::string v22;
  _BYTE v23[304];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  ZinIrLocalRegAlloc::CreateWriteL2CacheSymbolDescriptor(this, a2, (uint64_t)&v21);
  v17 = 0;
  LODWORD(__p) = 2;
  v4 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>((_QWORD *)this + 13, (int *)&__p);
  if (v4)
    v5 = (ZinIrMemoryPool *)v4[3];
  else
    v5 = 0;
  v18 = v21;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v19, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
  else
    v19 = v22;
  memcpy(v20, v23, sizeof(v20));
  L2Section = (ZinIrSection *)ZinIrLocalRegAlloc::GetL2Section(this);
  v7 = *(_QWORD *)(*((_QWORD *)this + 2) + 416);
  __p = 0;
  v15 = 0;
  v16 = 0;
  v8 = ZinIrMemoryPool::AllocateMemory(v5, (uint64_t)&v18, L2Section, v7, &v17, (uint64_t)&__p);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v19.__r_.__value_.__l.__data_);
    if (v8)
      goto LABEL_11;
  }
  else if (v8)
  {
LABEL_11:
    v9 = 0;
    goto LABEL_15;
  }
  v10 = *((_QWORD *)a2 + 33);
  v11 = v17;
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v15 = v12 + 1;
  v16 = v12 + 1;
  v9 = ZinEngineLayerMirInfo::SetL2WrSymbols(v10, (const ZinIrSymbol ***)&__p, 2);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
LABEL_15:
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  return v9;
}

void sub_206DB9268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (__p)
    operator delete(__p);
  if (a62 < 0)
    operator delete(a57);
  _Unwind_Resume(a1);
}

void ZinIrLocalRegAlloc::FreeDMABuffers(ZinIrLocalRegAlloc *this, ZinANELayer *a2)
{
  ZinIrLocalRegAlloc::FreeDMADefaultBuffers((uint64_t)this, a2);
  ZinIrLocalRegAlloc::FreeDMACachedBuffers(this, a2);
}

uint64_t ZinIrLocalRegAlloc::AllocateFullSizeBufferInTmem(ZinIrLocalRegAlloc *this)
{
  ZinIrOpLayer **v1;
  ZinIrOpLayer **i;
  ZinIrOpLayer *v4;
  _QWORD *v5;
  unint64_t v6;
  int v7;
  const char *v9;
  void *__p;
  _BYTE *v11;

  v1 = (ZinIrOpLayer **)*((_QWORD *)this + 5);
  for (i = (ZinIrOpLayer **)*((_QWORD *)this + 6); v1 != i; ++v1)
  {
    v4 = *v1;
    if (ZinIrOpLayer::IsANELayer(*v1)
      && ZinIrLocalRegAlloc::NeedAnyDMABuffer(this, (ZinEngineLayerMirInfo **)v4))
    {
      (*(void (**)(void **__return_ptr, ZinIrOpLayer *))(*(_QWORD *)v4 + 512))(&__p, v4);
      v5 = __p;
      if (v11 == __p)
      {
        v7 = 1;
      }
      else
      {
        v6 = 0;
        v7 = 1;
        do
        {
          if (((*(uint64_t (**)(ZinIrOpLayer *, _QWORD))(*(_QWORD *)v4 + 200))(v4, v5[v6]) & 1) == 0
            && ZinIrLocalRegAlloc::NeedInputDMACachedBuffer((uint64_t)this, (uint64_t *)v4, v6 != 0))
          {
            v7 &= ZinIrLocalRegAlloc::AllocateInputDMACachedBuffer(this, v4, v6 != 0);
          }
          ++v6;
          v5 = __p;
        }
        while (v6 < (v11 - (_BYTE *)__p) >> 3);
      }
      if (ZinIrLocalRegAlloc::NeedOutputDMACachedBuffer(this, v4))
      {
        if ((v7 & ZinIrLocalRegAlloc::AllocateOutputDMACachedBuffer(this, v4) & 1) == 0)
          goto LABEL_20;
      }
      else if ((v7 & 1) == 0)
      {
LABEL_20:
        ZinIrLocalRegAlloc::FreeDMACachedBuffers(this, v4);
        v9 = (char *)v4 + 24;
        if (*((char *)v4 + 47) < 0)
          v9 = *(const char **)v9;
        ZinAssertImpl("Allocation failure in Tmem. Layer=%s", v9);
      }
      if (__p)
      {
        v11 = __p;
        operator delete(__p);
      }
    }
  }
  return 0;
}

void sub_206DB9470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrLocalRegAlloc::NeedAnyDMABuffer(ZinIrLocalRegAlloc *this, ZinEngineLayerMirInfo **a2)
{
  uint64_t v4;
  void *v6;
  unint64_t v7;
  void *__p;
  void *v9;

  if ((ZinIrLocalRegAlloc::NeedOutputDMADefaultBuffer(this, a2) & 1) != 0
    || ZinIrLocalRegAlloc::NeedOutputDMACachedBuffer(this, (const ZinANELayer *)a2))
  {
    return 1;
  }
  (*((void (**)(void **__return_ptr, ZinEngineLayerMirInfo **))*a2 + 64))(&__p, a2);
  v6 = v9;
  if (v9 == __p)
  {
    v4 = 0;
    if (!v9)
      return v4;
    goto LABEL_19;
  }
  v7 = 0;
  while (1)
  {
    if (ZinIrLocalRegAlloc::NeedInputDMADefaultBuffer((uint64_t)this, (uint64_t *)a2, v7 != 0))
    {
      if (v7 >= ((_BYTE *)v9 - (_BYTE *)__p) >> 3)
        goto LABEL_20;
      if (((*((uint64_t (**)(ZinEngineLayerMirInfo **, _QWORD))*a2 + 25))(a2, *((_QWORD *)__p + v7)) & 1) == 0)
        break;
    }
    if (ZinIrLocalRegAlloc::NeedInputDMACachedBuffer((uint64_t)this, (uint64_t *)a2, v7 != 0))
    {
      if (v7 >= ((_BYTE *)v9 - (_BYTE *)__p) >> 3)
LABEL_20:
        std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
      if (!(*((unsigned int (**)(ZinEngineLayerMirInfo **, _QWORD))*a2 + 25))(a2, *((_QWORD *)__p + v7)))
        break;
    }
    if (++v7 >= ((_BYTE *)v9 - (_BYTE *)__p) >> 3)
    {
      v4 = 0;
      goto LABEL_18;
    }
  }
  v4 = 1;
LABEL_18:
  v6 = __p;
  if (__p)
  {
LABEL_19:
    v9 = v6;
    operator delete(v6);
  }
  return v4;
}

void sub_206DB95D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinIrLocalRegAlloc::FreeDMACachedBuffers(ZinIrLocalRegAlloc *this, ZinANELayer *a2)
{
  unint64_t v3;
  int v4;

  if (*((_QWORD *)a2 + 12) != *((_QWORD *)a2 + 11))
  {
    v3 = 0;
    do
    {
      v4 = 0;
      this = (ZinIrLocalRegAlloc *)ZinMemSourceIndexTranslator::GetL2SrcType(a2, v3, &v4);
      if (!(_DWORD)this)
        ZinIrLocalRegAlloc::FreeCachedDMAInputBuffer((uint64_t)this, (uint64_t)a2, v4);
      ++v3;
    }
    while (v3 < (uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 3);
  }
  ZinIrLocalRegAlloc::FreeCachedDMAOutputBuffer(this, (ZinEngineLayerMirInfo **)a2);
}

uint64_t ZinIrLocalRegAlloc::AllocateAneDMABuffers(ZinIrOpLayer ***this)
{
  ZinIrOpLayer **v2;
  ZinIrOpLayer **v3;
  ZinIrOpLayer *v4;
  ZinIrOpLayer **v5;
  ZinIrOpLayer *v6;
  uint64_t v7;
  ZinIrOpLayer *v8;
  const ZinANELayer *v9;
  uint64_t v10;
  ZinIrOpLayer *FirstConsumer;
  ZinIrOpLayer *v12;
  const char *v14;
  const char *v15;

  if (*((_BYTE *)this[3] + 536))
    ZinIrLocalRegAlloc::AllocateL2CachedBuffers((ZinIrLocalRegAlloc *)this);
  v3 = this[5];
  v2 = this[6];
  if (v3 == v2)
  {
    v5 = this[5];
  }
  else
  {
    do
    {
      v4 = *v3;
      if ((ZinIrLocalRegAlloc::AllocateOptimizedDMABuffer((ZinIrLocalRegAlloc *)this, *v3) & 1) == 0)
      {
        v14 = (char *)v4 + 24;
        if (*((char *)v4 + 47) < 0)
          v14 = *(const char **)v14;
        ZinAssertImpl("Allocation failure. Layer=%s", v14);
      }
      ++v3;
    }
    while (v3 != v2);
    v5 = this[5];
    v3 = this[6];
  }
  if (*((_BYTE *)this[2] + 1114))
  {
    if (v5 == v3)
      return 0;
    do
    {
      v6 = *v5;
      if (ZinIrOpLayer::IsANELayer(*v5))
      {
        v7 = *((_QWORD *)v6 + 33);
        if (v7)
        {
          if (*(_DWORD *)(v7 + 1632) == 4)
            ZinIrLocalRegAlloc::OptimizeChainPairDMABuffer((ZinIrLocalRegAlloc *)this, v6, **((ZinANELayer ***)v6 + 14));
        }
      }
      ++v5;
    }
    while (v5 != v3);
    v5 = this[5];
    v3 = this[6];
  }
  while (v5 != v3)
  {
    v8 = *v5;
    if (ZinIrOpLayer::IsANELayer(*v5))
    {
      v10 = *((_QWORD *)v8 + 33);
      if (v10)
      {
        if (*(_DWORD *)(v10 + 1632) == 3)
        {
          FirstConsumer = ZinIrRegAllocUtil::GetFirstConsumer(v8, v9);
          if (FirstConsumer)
          {
            v12 = FirstConsumer;
            if (*((_QWORD *)v8 + 6) == *((_QWORD *)FirstConsumer + 6)
              && ((ZinIrLocalRegAlloc::OptimizeL2DependentPairDMABufferPatchWidth((const ZinIrHalParameters **)this, v8, FirstConsumer) & 1) == 0|| *((_BYTE *)this[2] + 1117)&& *(_QWORD *)(*((_QWORD *)v8 + 33) + 200) == *(_QWORD *)(*((_QWORD *)v12 + 33) + 200)&& (ZinIrLocalRegAlloc::OptimizeL2DependentPairDMABufferTileHeight((ZinIrLocalRegAlloc *)this, v8, v12) & 1) == 0))
            {
              v15 = (char *)v8 + 24;
              if (*((char *)v8 + 47) < 0)
                v15 = *(const char **)v15;
              ZinAssertImpl("Allocation failure for layer=%s", v15);
            }
          }
        }
      }
    }
    ++v5;
  }
  return 0;
}

uint64_t ZinIrLocalRegAlloc::AllocateL2CachedBuffers(ZinIrLocalRegAlloc *this)
{
  uint64_t v2;
  uint64_t v3;
  ZinIrOpLayer **v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  void *__p;
  char *v15;
  uint64_t *v16;
  _QWORD *v17[2];
  uint64_t v18;
  uint64_t *v19;
  _OWORD v20[2];
  uint64_t v21;
  int v22;
  void **v23;

  v18 = (uint64_t)&v18;
  v19 = &v18;
  memset(v20, 0, sizeof(v20));
  v21 = 0;
  v22 = 1065353216;
  ZinIrLocalRegAlloc::FindCandidateTensorsForL2CachedTensor(this, &v18);
  ZinIrLocalRegAlloc::ZinIrSortTensors((uint64_t)this, (uint64_t)&v18, 1, 1);
  v2 = *(_QWORD *)&v20[0];
  if (*(_QWORD *)&v20[0])
  {
    v3 = 0;
    do
    {
      v4 = (ZinIrOpLayer **)v19[2];
      ZinIrScheduleUtil::ZinOrderedSet<ZinIrOpLayer *>::PopFront(&v18);
      v17[0] = 0;
      v17[1] = 0;
      v16 = (uint64_t *)v17;
      FindQualifiedConsumersForL2CacheCandidateTensor(v4, &v16);
      std::vector<ZinIrSymbol *>::vector<std::__tree_const_iterator<ZinIrSymbol *,std::__tree_node<ZinIrSymbol *,void *> *,long>,0>(&__p, v16, v17);
      v5 = 126 - 2 * __clz((v15 - (_BYTE *)__p) >> 3);
      if (v15 == __p)
        v6 = 0;
      else
        v6 = v5;
      std::__introsort<std::_ClassicAlgPolicy,ZinIrLocalRegAlloc::AllocateL2CachedBuffers(void)::$_0 &,ZinANELayer **,false>((uint64_t)__p, (uint64_t *)v15, v6, 1);
      if ((unint64_t)(v15 - (_BYTE *)__p) <= 8)
        ZinAssertImpl("invalid candidate for L2 Cached buffer");
      v11 = 0;
      v12 = 0;
      v13 = 0;
      ZinIrLocalRegAlloc::GroupL2CacheConsumers(this, (int64x2_t *)v4, &__p, (uint64_t *)&v11);
      v8 = v11;
      v9 = v12;
      while (v8 != v9)
      {
        if (v8[1] - *v8 >= 0x10uLL)
          ZinIrLocalRegAlloc::AllocateL2CacheForConsumersGroup(this, (uint64_t)v8, (ZinIrOpLayerGraphUtil *)v4, v7);
        v8 += 3;
      }
      v23 = (void **)&v11;
      std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100](&v23);
      if (__p)
      {
        v15 = (char *)__p;
        operator delete(__p);
      }
      ++v3;
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v16, v17[0]);
    }
    while (v3 != v2);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v20 + 8);
  std::__list_imp<ZinIrSection *>::clear(&v18);
  return 0;
}

void sub_206DB99DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a21);
  std::__list_imp<ZinIrSection *>::clear(&a18);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::AllocateOptimizedDMABuffer(ZinIrLocalRegAlloc *this, ZinIrOpLayer *a2)
{
  char v4;
  void *__p;
  void *v7;
  uint64_t v8;

  if (!*(_BYTE *)(*((_QWORD *)this + 2) + 1105))
    return 1;
  __p = 0;
  v7 = 0;
  v8 = 0;
  if ((ZinIrOpLayer::IsNoOp(a2, (uint64_t *)&__p) & 1) != 0)
  {
    if (__p)
    {
      v7 = __p;
      operator delete(__p);
    }
    return 1;
  }
  v4 = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)a2 + 112))(a2);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
  if ((v4 & 1) != 0 || !ZinIrLocalRegAlloc::NeedAnyDMABuffer(this, (ZinEngineLayerMirInfo **)a2))
    return 1;
  if (ZinIrOpLayer::IsPELayer(a2))
    return ZinIrLocalRegAlloc::OptimizePERasterizationParamsAllocateDMABuffer(this, a2);
  else
    return ZinIrLocalRegAlloc::OptimizeNERasterizationParamsAllocateDMABuffer(this, a2);
}

void sub_206DB9B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrLocalRegAlloc::OptimizeChainPairDMABuffer(ZinIrLocalRegAlloc *this, ZinANELayer *a2, ZinANELayer *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  _BOOL4 IsPELayer;
  _BOOL4 v9;
  _QWORD *v10;
  int *v11;
  _BYTE *v12;
  int *v13;
  _BYTE *v14;
  int *v15;
  _BYTE *v16;
  ZinANELayer *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _QWORD v23[56];
  int v24;
  _DWORD v25[12];
  _DWORD v26[12];
  _BYTE v27[40];
  _QWORD v28[57];
  _BYTE v29[40];
  int v30;
  _BYTE v31[40];
  int v32;
  _BYTE v33[40];
  _DWORD __dst[114];
  _BYTE v35[40];
  int v36;
  _BYTE v37[40];
  int v38;
  _BYTE v39[48];

  v6 = (_DWORD *)*((_QWORD *)a2 + 33);
  memcpy(__dst, v6 + 30, 0x1C4uLL);
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v35, (uint64_t)(v6 + 144));
  v36 = v6[154];
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v37, (uint64_t)(v6 + 156));
  v38 = v6[166];
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v39, (uint64_t)(v6 + 168));
  v7 = (_DWORD *)*((_QWORD *)a3 + 33);
  memcpy(v28, v7 + 30, 0x1C4uLL);
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v29, (uint64_t)(v7 + 144));
  v30 = v7[154];
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v31, (uint64_t)(v7 + 156));
  v32 = v7[166];
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v33, (uint64_t)(v7 + 168));
  v22 = *((_QWORD *)a3 + 33);
  IsPELayer = ZinIrOpLayer::IsPELayer(a2);
  v9 = IsPELayer;
  if (IsPELayer)
    v10 = __dst;
  else
    v10 = v28;
  if (IsPELayer)
    v11 = &__dst[112];
  else
    v11 = (int *)&v28[56];
  if (IsPELayer)
    v12 = v35;
  else
    v12 = v29;
  memcpy(v23, v10, sizeof(v23));
  v24 = *v11;
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v25, (uint64_t)v12);
  v13 = &v36;
  if (!v9)
    v13 = &v30;
  v25[10] = *v13;
  if (v9)
    v14 = v37;
  else
    v14 = v31;
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v26, (uint64_t)v14);
  v15 = &v38;
  if (!v9)
    v15 = &v32;
  v26[10] = *v15;
  if (v9)
    v16 = v39;
  else
    v16 = v33;
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v27, (uint64_t)v16);
  if (ZinIrOpLayer::IsPELayer(a2))
    v17 = a2;
  else
    v17 = a3;
  v18 = *((_QWORD *)v17 + 33);
  if ((ZinIrLocalRegAlloc::OptimizeChainPairDMABufferTileHeight(this, a2, a3) & 1) == 0)
    ZinAssertImpl("Failed allocation for a pair (TID=%zi->TID=%zi)", *((_QWORD *)a2 + 45), *((_QWORD *)a3 + 45));
  if (!ZinIrLocalRegAlloc::OptimizeChainPairDMABufferPatchWidth((const ZinIrHalParameters **)this, a2, a3))
    ZinAssertImpl("Failed allocation for a pair (TID=%zi->TID=%zi)", *((_QWORD *)a2 + 45), *((_QWORD *)a3 + 45));
  v19 = v28[10];
  v20 = *(_QWORD *)(v22 + 200);
  if (v20 < v28[10] || (v20 = *(_QWORD *)(v18 + 240), v19 = v23[15], v20 < v23[15]))
    ZinAssertImpl("Unsucessful optimization: TH=%zi->TH=%zi (TID=%zi->TID=%zi)", v19, v20, *((_QWORD *)a2 + 45), *((_QWORD *)a3 + 45));
  if ((ZinIrLocalRegAlloc::AllocateChainAndDMABuffers(this, a2, a3) & 1) == 0)
    ZinAssertImpl("Unsucessful optimization");
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v27);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v26);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v25);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v33);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v31);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v29);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v39);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v37);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v35);
  return 1;
}

void sub_206DB9E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  ZinMirL2Config::~ZinMirL2Config((ZinMirL2Config *)va);
  ZinMirL2Config::~ZinMirL2Config((ZinMirL2Config *)&STACK[0x2A8]);
  ZinMirL2Config::~ZinMirL2Config((ZinMirL2Config *)&STACK[0x4F8]);
  _Unwind_Resume(a1);
}

void sub_206DB9EDC()
{
  JUMPOUT(0x206DB9EC4);
}

uint64_t ZinIrLocalRegAlloc::OptimizeL2DependentPairDMABufferPatchWidth(const ZinIrHalParameters **this, ZinANELayer *a2, ZinANELayer *a3)
{
  ZinANELayer *v6;
  uint64_t DMABuffers;
  uint64_t v9;
  uint64_t v10;
  const ZinIrOpLayer *v11;
  BOOL IsPEPool;
  uint64_t v13;
  unint64_t v14;
  ZinANELayer *v15;
  unint64_t v16;
  ZinANELayer *v17;
  _QWORD v18[3];
  _DWORD __dst[113];
  _DWORD v20[12];
  _DWORD v21[12];
  _BYTE v22[40];
  ZinANELayer *v23;
  BOOL v24;

  v24 = 0;
  NEDominatesPerf(a2, a3, this[2], this[3], &v24);
  if (v24)
    return 1;
  if (ZinIrOpLayer::IsNELayer(a2))
    v6 = a3;
  else
    v6 = a2;
  v23 = v6;
  if (ZinIrOpLayer::IsTransposeEngineLayer(a2) || ZinIrOpLayer::IsTransposeEngineLayer(a3))
    ZinAssertImpl("Only NE and PE engine layers are supported\n");
  if (std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(this + 46, &v23)|| (ZinIrLocalRegAlloc::NeedAnyDMABuffer((ZinIrLocalRegAlloc *)this, (ZinEngineLayerMirInfo **)a2) & 1) == 0&& !ZinIrLocalRegAlloc::NeedAnyDMABuffer((ZinIrLocalRegAlloc *)this, (ZinEngineLayerMirInfo **)a3))
  {
    return 1;
  }
  v9 = *((_QWORD *)v23 + 33);
  memcpy(__dst, (const void *)(v9 + 120), sizeof(__dst));
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v20, v9 + 576);
  v20[10] = *(_DWORD *)(v9 + 616);
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v21, v9 + 624);
  v21[10] = *(_DWORD *)(v9 + 664);
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v22, v9 + 672);
  v10 = *(_QWORD *)(v9 + 240);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v23 + 328))(v18);
  IsPEPool = ZinOpLayerUtils::IsPEPool(v23, v11);
  v13 = 992;
  if (IsPEPool && v18[1] > 3)
    v13 = 968;
  v14 = *(_QWORD *)((char *)this[2] + v13);
  do
  {
    v15 = v23;
    ZinIrLocalRegAlloc::FreeDMADefaultBuffers((uint64_t)this, v23);
    ZinIrLocalRegAlloc::FreeDMACachedBuffers((ZinIrLocalRegAlloc *)this, v15);
    *(_BYTE *)(v9 + 256) = 0;
    v16 = *(_QWORD *)(v9 + 240) + 1;
    *(_QWORD *)(v9 + 240) = v16;
    if (v16 >= v14)
      break;
    if (!ZinIrLocalRegAlloc::AllocateDMABuffers((ZinIrLocalRegAlloc *)this, v23, 1, 0))
      break;
    v10 = *(_QWORD *)(v9 + 240);
  }
  while ((*(uint64_t (**)(ZinANELayer *, uint64_t))(*(_QWORD *)v23 + 368))(v23, 4) > 1 << v10);
  v17 = v23;
  ZinIrLocalRegAlloc::FreeDMADefaultBuffers((uint64_t)this, v23);
  ZinIrLocalRegAlloc::FreeDMACachedBuffers((ZinIrLocalRegAlloc *)this, v17);
  if (!*(_BYTE *)(v9 + 256))
    *(_QWORD *)(v9 + 240) = v10;
  *(_BYTE *)(v9 + 256) = __dst[34];
  DMABuffers = ZinIrLocalRegAlloc::AllocateDMABuffers((ZinIrLocalRegAlloc *)this, v23, 1, 0);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v22);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v21);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v20);
  return DMABuffers;
}

void sub_206DBA140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  ZinMirL2Config::~ZinMirL2Config((ZinMirL2Config *)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::OptimizeL2DependentPairDMABufferTileHeight(ZinIrLocalRegAlloc *this, ZinANELayer *a2, ZinANELayer *a3)
{
  ZinANELayer *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  ZinANELayer *v23;
  ZinANELayer *v24;
  unint64_t v25;
  ZinANELayer *v26;
  ZinANELayer *v27;
  char DMABuffers;
  ZinANELayer *v29;
  ZinANELayer *v30;
  char v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  ZinANELayer *v35;
  ZinANELayer *v36;

  v35 = a3;
  v36 = a2;
  if (ZinIrOpLayer::IsTransposeEngineLayer(a2) || ZinIrOpLayer::IsTransposeEngineLayer(a3))
    ZinAssertImpl("Only NE and PE engine layers are supported\n");
  if (ZinIrOpLayer::IsNELayer(a2))
    v6 = a2;
  else
    v6 = a3;
  v7 = *((_QWORD *)v6 + 33);
  v8 = *((_QWORD *)a2 + 33);
  v9 = *((_QWORD *)a3 + 33);
  v10 = (*(uint64_t (**)(ZinANELayer *, uint64_t))(*(_QWORD *)a2 + 368))(a2, 3);
  if (*(_QWORD *)(v8 + 200) == v10)
    return 1;
  v11 = v10;
  if (std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 46, &v35)|| std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 46, &v36))
  {
    return 1;
  }
  v31 = *(_BYTE *)(v8 + 233);
  v32 = *(_BYTE *)(v9 + 233);
  v14 = *(_QWORD *)(v7 + 128);
  *(_BYTE *)(v8 + 233) = 0;
  *(_BYTE *)(v9 + 233) = 0;
  v15 = *(_QWORD *)(v8 + 200);
  v16 = *(_QWORD *)(v9 + 200);
  v17 = (*(uint64_t (**)(ZinANELayer *, uint64_t))(*(_QWORD *)v35 + 368))(v35, 3);
  v18 = v17;
  if (v11 <= v17)
    v19 = v17;
  else
    v19 = v11;
  v20 = 2 * v14;
  v33 = v14;
  v34 = v19 + v14;
  do
  {
    if (v20 >= v34)
    {
      *(_BYTE *)(v8 + 233) = v31;
      *(_BYTE *)(v9 + 233) = v32;
      return 1;
    }
    v21 = v15;
    v22 = v16;
    v23 = v36;
    ZinIrLocalRegAlloc::FreeDMADefaultBuffers((uint64_t)this, v36);
    ZinIrLocalRegAlloc::FreeDMACachedBuffers(this, v23);
    v24 = v35;
    ZinIrLocalRegAlloc::FreeDMADefaultBuffers((uint64_t)this, v35);
    ZinIrLocalRegAlloc::FreeDMACachedBuffers(this, v24);
    if (v11 >= v20)
      v15 = v20;
    else
      v15 = v11;
    if (v15 >= v18)
      v25 = v18;
    else
      v25 = v15;
    if (v25 >= v20)
      v16 = v20;
    else
      v16 = v25;
    if (!*(_BYTE *)(v8 + 233))
      *(_QWORD *)(v8 + 200) = v15;
    if (!*(_BYTE *)(v9 + 233))
      *(_QWORD *)(v9 + 200) = v16;
    if (!ZinIrLocalRegAlloc::AllocateDMABuffers(this, v35, 1, 0))
      break;
    v20 += v33;
  }
  while ((ZinIrLocalRegAlloc::AllocateDMABuffers(this, v36, 1, 0) & 1) != 0);
  v26 = v36;
  ZinIrLocalRegAlloc::FreeDMADefaultBuffers((uint64_t)this, v36);
  ZinIrLocalRegAlloc::FreeDMACachedBuffers(this, v26);
  v27 = v35;
  ZinIrLocalRegAlloc::FreeDMADefaultBuffers((uint64_t)this, v35);
  ZinIrLocalRegAlloc::FreeDMACachedBuffers(this, v27);
  if (!*(_BYTE *)(v8 + 233))
    *(_QWORD *)(v8 + 200) = v21;
  if (!*(_BYTE *)(v9 + 233))
    *(_QWORD *)(v9 + 200) = v22;
  if ((ZinIrLocalRegAlloc::AllocateDMABuffers(this, v35, 1, 0) & 1) != 0)
  {
    v12 = 1;
    DMABuffers = ZinIrLocalRegAlloc::AllocateDMABuffers(this, v36, 1, 0);
    *(_BYTE *)(v8 + 233) = v31;
    *(_BYTE *)(v9 + 233) = v32;
    if ((DMABuffers & 1) != 0)
      return v12;
  }
  else
  {
    *(_BYTE *)(v8 + 233) = v31;
    *(_BYTE *)(v9 + 233) = v32;
  }
  v29 = v36;
  ZinIrLocalRegAlloc::FreeDMADefaultBuffers((uint64_t)this, v36);
  ZinIrLocalRegAlloc::FreeDMACachedBuffers(this, v29);
  v30 = v35;
  ZinIrLocalRegAlloc::FreeDMADefaultBuffers((uint64_t)this, v35);
  ZinIrLocalRegAlloc::FreeDMACachedBuffers(this, v30);
  v12 = 0;
  if (ZinIrLocalRegAlloc::AllocateDMABuffers(this, v36, 1, 0))
    return ZinIrLocalRegAlloc::AllocateDMABuffers(this, v35, 1, 0);
  return v12;
}

uint64_t ZinIrLocalRegAlloc::FreeDMADefaultBuffers(uint64_t this, ZinANELayer *a2)
{
  uint64_t v3;
  unint64_t v4;
  NSObject *v5;
  uint64_t InputTensor;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(*(_QWORD *)(this + 16) + 1105))
  {
    v3 = this;
    if (*((_QWORD *)a2 + 12) != *((_QWORD *)a2 + 11))
    {
      v4 = 0;
      v5 = MEMORY[0x24BDACB70];
      do
      {
        InputTensor = ZinIrOpLayer::GetInputTensor(a2, v4);
        if (((*(uint64_t (**)(ZinANELayer *, uint64_t))(*(_QWORD *)a2 + 200))(a2, InputTensor) & 1) == 0)
        {
          v7 = 0;
          if (ZinMemSourceIndexTranslator::GetL2SrcType(a2, v4, &v7))
          {
            if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
              ZinIrLocalRegAlloc::SetResidentSymbolToLayers();
          }
          ZinIrLocalRegAlloc::FreeDMADefaultInputBuffer(v3, (uint64_t)a2, v7);
        }
        ++v4;
      }
      while (v4 < (uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 3);
    }
    return ZinIrLocalRegAlloc::FreeDMADefaultOutputBuffer(v3, (ZinEngineLayerMirInfo **)a2);
  }
  return this;
}

uint64_t ZinIrLocalRegAlloc::FreeDMADefaultInputBuffer(uint64_t result, uint64_t a2, int a3)
{
  uint64_t ***v5;

  if (*(_BYTE *)(*(_QWORD *)(result + 16) + 1105))
  {
    result = ZinEngineLayerMirInfo::GetL2RdSymbol(*(_QWORD *)(a2 + 264), a3);
    if (result)
    {
      v5 = (uint64_t ***)result;
      result = ZinEngineLayerMirInfo::GetL2RdMode(*(_QWORD *)(a2 + 264), a3);
      if ((_DWORD)result == 1)
      {
        ZinIrSection::DeleteSymbol(v5[1], (ZinIrSymbol *)v5);
        return ZinEngineLayerMirInfo::RemoveL2RdSymbol(*(_QWORD *)(a2 + 264), a3);
      }
    }
  }
  return result;
}

uint64_t ZinIrLocalRegAlloc::FreeDMADefaultOutputBuffer(uint64_t this, ZinEngineLayerMirInfo **a2)
{
  if (*(_BYTE *)(*(_QWORD *)(this + 16) + 1105))
  {
    this = ZinEngineLayerMirInfo::GetL2WrSymbol(a2[33]);
    if (this)
    {
      if (*((_DWORD *)a2[33] + 408) == 1)
      {
        ZinIrSection::DeleteSymbol(*(uint64_t ***)(this + 8), (ZinIrSymbol *)this);
        return ZinL2Access::RemoveSymbol((uint64_t)a2[33] + 1608);
      }
    }
  }
  return this;
}

void ZinIrLocalRegAlloc::FreeCachedDMAInputBuffer(uint64_t a1, uint64_t a2, int a3)
{
  ZinIrSymbol **v5;
  ZinIrSymbol **v6;
  void *__p;
  ZinIrSymbol **v8;

  if (!*(_QWORD *)ZinANELayer::GetCachedSrcTensor(a2, a3))
  {
    ZinEngineLayerMirInfo::GetL2RdSymbols(*(_QWORD *)(a2 + 264), a3, &__p);
    if (ZinEngineLayerMirInfo::GetL2RdMode(*(_QWORD *)(a2 + 264), a3) == 2)
    {
      v5 = (ZinIrSymbol **)__p;
      v6 = v8;
      while (v5 != v6)
      {
        ZinIrSection::DeleteSymbol(*((uint64_t ***)*v5 + 1), *v5);
        ++v5;
      }
      ZinEngineLayerMirInfo::RemoveL2RdSymbol(*(_QWORD *)(a2 + 264), a3);
    }
    if (__p)
    {
      v8 = (ZinIrSymbol **)__p;
      operator delete(__p);
    }
  }
}

void sub_206DBA750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinIrLocalRegAlloc::FreeCachedDMAOutputBuffer(ZinIrLocalRegAlloc *this, ZinEngineLayerMirInfo **a2)
{
  ZinEngineLayerMirInfo *v3;
  ZinIrSymbol **v4;
  ZinIrSymbol **v5;
  void *__p;
  ZinIrSymbol **v7;

  ZinEngineLayerMirInfo::GetL2WrSymbols(a2[33], &__p);
  v3 = a2[33];
  if (*((_DWORD *)v3 + 408) == 2)
  {
    v4 = (ZinIrSymbol **)__p;
    v5 = v7;
    if (__p != v7)
    {
      do
      {
        ZinIrSection::DeleteSymbol(*((uint64_t ***)*v4 + 1), *v4);
        ++v4;
      }
      while (v4 != v5);
      v3 = a2[33];
    }
    ZinL2Access::RemoveSymbol((uint64_t)v3 + 1608);
  }
  if (__p)
  {
    v7 = (ZinIrSymbol **)__p;
    operator delete(__p);
  }
}

void sub_206DBA7F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinIrLocalRegAlloc::SetSymbolToLayers(ZinIrLocalRegAlloc *this, ZinIrTensor *a2)
{
  int v2;

  v2 = *(_DWORD *)(**(_QWORD **)(*((_QWORD *)a2 + 13) + 40) + 152);
  switch(v2)
  {
    case 1:
      ZinIrLocalRegAlloc::SetL2CachedSymbolToConsumers(this, a2);
      break;
    case 4:
      ZinIrLocalRegAlloc::SetChainSymbolToLayers(this, a2);
      break;
    case 2:
      ZinIrLocalRegAlloc::SetResidentSymbolToLayers(this, a2);
      break;
    default:
      ZinIrLocalRegAlloc::SetNonResidentSymbolToLayers(this, a2);
      break;
  }
}

void ZinIrLocalRegAlloc::SetChainSymbolToLayers(ZinIrLocalRegAlloc *this, ZinIrTensor *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  ZinIrOpLayer *v6;
  unint64_t IndexOfMatchedIncomingLayer;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  int v14;
  void *__p;
  void *v16;
  _QWORD *v17;

  v2 = *((_QWORD *)a2 + 13);
  if (!v2 || (v3 = *(uint64_t **)(v2 + 40), v3 == *(uint64_t **)(v2 + 48)))
    v4 = 0;
  else
    v4 = *v3;
  v5 = *((_QWORD *)a2 + 12);
  v6 = **(ZinIrOpLayer ***)(v5 + 112);
  IndexOfMatchedIncomingLayer = ZinIrOpLayerGraph::GetIndexOfMatchedIncomingLayer(*(ZinIrOpLayerGraph **)(v5 + 152), v6, (const ZinIrOpLayer *)v5);
  v8 = *(_QWORD *)(v5 + 264);
  v9 = operator new(8uLL);
  __p = v9;
  *v9 = v4;
  v16 = v9 + 1;
  v17 = v9 + 1;
  v10 = ZinEngineLayerMirInfo::SetL2WrSymbols(v8, (const ZinIrSymbol ***)&__p, 4);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  if ((v10 & 1) == 0 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    ZinIrLocalRegAlloc::SetResidentSymbolToLayers();
  v14 = 0;
  if (ZinMemSourceIndexTranslator::GetL2SrcType(v6, IndexOfMatchedIncomingLayer, &v14)
    && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    ZinIrLocalRegAlloc::SetChainSymbolToLayers();
  }
  if (v14 == 2 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    ZinIrLocalRegAlloc::SetChainSymbolToLayers();
  v11 = *((_QWORD *)v6 + 33);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v4;
  v16 = v12 + 1;
  v17 = v12 + 1;
  v13 = ZinEngineLayerMirInfo::SetL2RdSymbols(v11, (const ZinIrSymbol ***)&__p, v14, 4);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  if ((v13 & 1) == 0 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    ZinIrLocalRegAlloc::SetChainSymbolToLayers();
}

void sub_206DBA9E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinIrLocalRegAlloc::SetL2CachedSymbolToConsumers(ZinIrLocalRegAlloc *this, ZinIrTensor *a2)
{
  ZinIrSymbol **v4;
  ZinIrSymbol **v5;
  ZinIrOpLayer *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  BOOL v11;
  int v12;
  ZinIrOpLayer **v13;
  char *v14;
  NSObject *v15;
  ZinIrOpLayer *v16;
  unint64_t v17;
  int v18;
  char *v19;
  char *v20;
  void *__p;
  ZinIrSymbol **v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  ZinIrTensor::GetSymbols(a2, &__p);
  v4 = (ZinIrSymbol **)__p;
  v5 = v22;
  while (v4 != v5)
  {
    if (*v4)
    {
      if (ZinIrSymbol::GetMemType(*v4) != 2)
        ZinAssertImpl("cached tensor must be in L2");
    }
    ++v4;
  }
  v6 = (ZinIrOpLayer *)*((_QWORD *)a2 + 12);
  v7 = (_QWORD *)*((_QWORD *)v6 + 19);
  if (!ZinIrOpLayer::IsANELayer(v6))
    ZinAssertImpl("producer of cached tensor must be engine layer");
  v8 = (*(uint64_t (**)(ZinIrOpLayer *, ZinIrTensor *))(*(_QWORD *)v6 + 56))(v6, a2);
  v9 = v8;
  if (v10)
    v11 = v8 == 0;
  else
    v11 = 1;
  if (v11)
    ZinAssertImpl("wrong output port");
  if (v8 == 1)
  {
    v12 = 0;
  }
  else
  {
    if (v8 != 2)
      ZinAssertImpl("does not support Cached DMADst buffer yet.");
    v12 = 1;
  }
  if ((ZinEngineLayerMirInfo::SetL2RdSymbols(*((_QWORD *)v6 + 33), (const ZinIrSymbol ***)&__p, v12, 2) & 1) == 0)
    ZinAssertImpl("error when setting symbol");
  ZinIrOpLayerGraph::GetOutgoingLayersFromPort(v6, v7, v9, &v19);
  v13 = (ZinIrOpLayer **)v19;
  v14 = v20;
  if (v19 != v20)
  {
    v15 = MEMORY[0x24BDACB70];
    do
    {
      if (!ZinIrOpLayer::IsANELayer(*v13))
        ZinAssertImpl("L2 cache consumer must be engine layer");
      v16 = *v13;
      if (*((_QWORD *)*v13 + 12) != *((_QWORD *)*v13 + 11))
      {
        v17 = 0;
        do
        {
          if ((ZinIrTensor *)ZinIrOpLayer::GetInputTensor(v16, v17) == a2)
          {
            v18 = 0;
            if (ZinMemSourceIndexTranslator::GetL2SrcType(v16, v17, &v18)
              && os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
            {
              ZinIrLocalRegAlloc::SetL2CachedSymbolToConsumers();
            }
            if ((ZinEngineLayerMirInfo::SetL2RdSymbols(*((_QWORD *)v16 + 33), (const ZinIrSymbol ***)&__p, v18, 3) & 1) == 0
              && os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
            {
              ZinIrLocalRegAlloc::SetL2CachedSymbolToConsumers();
            }
            (*(void (**)(ZinIrOpLayer *, unint64_t, uint64_t, _QWORD))(*(_QWORD *)v16 + 464))(v16, v17, *(_QWORD *)__p + 296, *(_QWORD *)(*((_QWORD *)this + 2) + 416));
            ZinMirL2Config::SetTileSrcL2InputCropOffsetXLsbs((_OWORD *)(*((_QWORD *)v16 + 33) + 120), v16, v17, *(_QWORD *)__p + 216, 1);
          }
          ++v17;
        }
        while (v17 < (uint64_t)(*((_QWORD *)v16 + 12) - *((_QWORD *)v16 + 11)) >> 3);
      }
      ++v13;
    }
    while (v13 != (ZinIrOpLayer **)v14);
    v13 = (ZinIrOpLayer **)v19;
  }
  if (v13)
  {
    v20 = (char *)v13;
    operator delete(v13);
  }
  if (__p)
  {
    v22 = (ZinIrSymbol **)__p;
    operator delete(__p);
  }
}

void sub_206DBACE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinIrLocalRegAlloc::SetNonResidentSymbolToLayers(ZinIrLocalRegAlloc *this, ZinIrTensor *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  ZinIrOpLayer *v7;
  ZinIrOpLayer **v8;
  ZinIrOpLayer **i;
  ZinIrOpLayer *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *((_QWORD *)a2 + 13);
  if (!v4 || (v5 = *(uint64_t **)(v4 + 40), v5 == *(uint64_t **)(v4 + 48)))
    v6 = 0;
  else
    v6 = *v5;
  v7 = (ZinIrOpLayer *)*((_QWORD *)a2 + 12);
  if (ZinIrOpLayer::IsANELayer(v7))
  {
    (*(void (**)(ZinIrOpLayer *, uint64_t))(*(_QWORD *)v7 + 480))(v7, v6);
    ZinMirL2Config::SetTileDstL2OutputCropOffsetXLsbs(*((_QWORD *)v7 + 33) + 120, (uint64_t)v7, v6 + 216);
  }
  v8 = (ZinIrOpLayer **)*((_QWORD *)v7 + 14);
  for (i = (ZinIrOpLayer **)*((_QWORD *)v7 + 15); v8 != i; ++v8)
  {
    v10 = *v8;
    if (ZinIrOpLayer::IsANELayer(*v8) && *((_QWORD *)v10 + 12) != *((_QWORD *)v10 + 11))
    {
      v11 = 0;
      do
      {
        if ((ZinIrTensor *)ZinIrOpLayer::GetInputTensor(v10, v11) == a2)
        {
          v12 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v7 + 32))(v7, 0, 0);
          if (((*(uint64_t (**)(ZinIrOpLayer *, uint64_t))(*(_QWORD *)v10 + 200))(v10, v12) & 1) == 0)
          {
            v15 = 0;
            if (!ZinMemSourceIndexTranslator::GetDMASrcIndex(v10, (const ZinANELayer *)v11, &v15, v13))
            {
              (*(void (**)(ZinIrOpLayer *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v10 + 456))(v10, v15, v6, *((_QWORD *)this + 2));
              v14 = *((_QWORD *)v10 + 25);
              if (!v14
                || *((_QWORD *)v10 + 24) != v15
                || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 304))(v14)
                && ZinANELayer::GetTextureIndexInput(v10) == *((_QWORD *)a2 + 12))
              {
                ZinMirL2Config::SetTileSrcL2InputCropOffsetXLsbs((_OWORD *)(*((_QWORD *)v10 + 33) + 120), v10, v11, v6 + 216, 0);
              }
            }
          }
        }
        ++v11;
      }
      while (v11 < (uint64_t)(*((_QWORD *)v10 + 12) - *((_QWORD *)v10 + 11)) >> 3);
    }
  }
}

void ZinIrLocalRegAlloc::RemoveSymbolFromLayers(ZinIrLocalRegAlloc *this, ZinIrTensor *a2)
{
  uint64_t v3;
  ZinIrSymbol **v4;
  ZinIrSymbol *v5;
  ZinIrLocalRegAlloc *MemType;

  v3 = *((_QWORD *)a2 + 13);
  if (!v3 || (v4 = *(ZinIrSymbol ***)(v3 + 40), v4 == *(ZinIrSymbol ***)(v3 + 48)))
    v5 = 0;
  else
    v5 = *v4;
  MemType = (ZinIrLocalRegAlloc *)ZinIrSymbol::GetMemType(v5);
  if ((_DWORD)MemType == 2)
    ZinIrLocalRegAlloc::RemoveResidentSymbolFromLayers(MemType, a2);
  else
    ZinIrLocalRegAlloc::RemoveNonResidentSymbolFromLayers(MemType, a2);
}

void ZinIrLocalRegAlloc::RemoveResidentSymbolFromLayers(ZinIrLocalRegAlloc *this, ZinIrTensor *a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  ZinIrOpLayer **v10;
  char *v11;
  ZinIrOpLayer *v12;
  unint64_t v13;
  int v14;
  char *v15;
  char *v16;

  v3 = *((_QWORD *)a2 + 12);
  v4 = *(_QWORD **)(v3 + 152);
  if (!ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)v3))
  {
LABEL_11:
    v7 = 0;
    goto LABEL_12;
  }
  v5 = (*(uint64_t (**)(uint64_t, ZinIrTensor *))(*(_QWORD *)v3 + 56))(v3, a2);
  if (!v6)
    std::__throw_bad_optional_access[abi:ne180100]();
  v7 = v5;
  if (!v5)
  {
    if (ZinEngineLayerMirInfo::GetL2WrSymbol(*(ZinEngineLayerMirInfo **)(v3 + 264)))
      ZinL2Access::RemoveSymbol(*(_QWORD *)(v3 + 264) + 1608);
    goto LABEL_11;
  }
  if (v5 >= 3)
    ZinAssertImpl("unsupported port");
  v8 = *((_QWORD *)a2 + 13);
  if (v8)
  {
    v9 = *(_QWORD **)(v8 + 40);
    if (v9 != *(_QWORD **)(v8 + 48))
    {
      if (*v9)
        ZinEngineLayerMirInfo::RemoveL2RdSymbol(*(_QWORD *)(v3 + 264), v5 != 1);
    }
  }
LABEL_12:
  ZinIrOpLayerGraph::GetOutgoingLayersFromPort((ZinIrOpLayer *)v3, v4, v7, &v15);
  v10 = (ZinIrOpLayer **)v15;
  v11 = v16;
  if (v15 != v16)
  {
    do
    {
      v12 = *v10;
      if (ZinIrOpLayer::IsANELayer(*v10) && *((_QWORD *)v12 + 12) != *((_QWORD *)v12 + 11))
      {
        v13 = 0;
        do
        {
          if ((ZinIrTensor *)ZinIrOpLayer::GetInputTensor(v12, v13) == a2)
          {
            v14 = 0;
            if (!ZinMemSourceIndexTranslator::GetL2SrcType(v12, v13, &v14))
            {
              if (ZinEngineLayerMirInfo::GetL2RdSymbol(*((_QWORD *)v12 + 33), v14))
                ZinEngineLayerMirInfo::RemoveL2RdSymbol(*((_QWORD *)v12 + 33), v14);
            }
          }
          ++v13;
        }
        while (v13 < (uint64_t)(*((_QWORD *)v12 + 12) - *((_QWORD *)v12 + 11)) >> 3);
      }
      ++v10;
    }
    while (v10 != (ZinIrOpLayer **)v11);
    v10 = (ZinIrOpLayer **)v15;
  }
  if (v10)
  {
    v16 = (char *)v10;
    operator delete(v10);
  }
}

void sub_206DBB0EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrLocalRegAlloc::RemoveNonResidentSymbolFromLayers(ZinIrLocalRegAlloc *this, ZinIrTensor *a2)
{
  ZinIrOpLayer *v3;
  uint64_t result;
  ZinIrOpLayer **v5;
  ZinIrOpLayer **i;
  ZinIrOpLayer *v7;
  unint64_t v8;
  unint64_t *v9;
  uint64_t v10;

  v3 = (ZinIrOpLayer *)*((_QWORD *)a2 + 12);
  result = ZinIrOpLayer::IsANELayer(v3);
  if ((_DWORD)result)
    *(_QWORD *)(*((_QWORD *)v3 + 33) + 944) = 0;
  v5 = (ZinIrOpLayer **)*((_QWORD *)v3 + 14);
  for (i = (ZinIrOpLayer **)*((_QWORD *)v3 + 15); v5 != i; ++v5)
  {
    v7 = *v5;
    result = ZinIrOpLayer::IsANELayer(*v5);
    if ((_DWORD)result && *((_QWORD *)v7 + 12) != *((_QWORD *)v7 + 11))
    {
      v8 = 0;
      do
      {
        result = ZinIrOpLayer::GetInputTensor(v7, v8);
        if ((ZinIrTensor *)result == a2)
        {
          v10 = 0;
          result = ZinMemSourceIndexTranslator::GetDMASrcIndex(v7, (const ZinANELayer *)v8, &v10, v9);
          if (!(_DWORD)result)
            *(_QWORD *)(*((_QWORD *)v7 + 33) + 96 * v10 + 752) = 0;
        }
        ++v8;
      }
      while (v8 < (uint64_t)(*((_QWORD *)v7 + 12) - *((_QWORD *)v7 + 11)) >> 3);
    }
  }
  return result;
}

void ZinIrLocalRegAlloc::ConstructLiveRangeWithInplaceAllocation(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  ZinIrRegAllocUtil *v10;
  _QWORD **v11;
  _QWORD **v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD **v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v23;
  _QWORD **v24;
  _QWORD **v25;
  _QWORD *v26;

  v7 = (_QWORD *)(a1 + 144);
  std::unordered_map<ZinIrTensor *,ZinLiveRange>::unordered_map(a4, a1 + 144);
  v8 = *(_QWORD *)(a2 + 8);
  if (v8 != a2)
  {
    v9 = 0;
    v20 = a2;
    do
    {
      v10 = *(ZinIrRegAllocUtil **)(v8 + 16);
      if (ZinIrTensor::GetRootTensor(v10) == v10)
      {
        ZinIrLocalRegAlloc::FindInplaceTensors(a1, v10, a3, (void **)&v24);
        v12 = v24;
        v11 = v25;
        if (v24 != v25)
        {
          v13 = 0;
          v14 = 0;
          do
          {
            v26 = 0;
            v26 = *v12;
            v15 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v7, &v26);
            if (v15)
            {
              v16 = v15[3];
              if (v14)
              {
                if ((uint64_t)v16 >= (uint64_t)(v13 | (v9 << 8)))
                  v16 = v13 | (v9 << 8);
                if (v4 <= v15[4])
                  v4 = v15[4];
                v13 = v16;
                v9 = v16 >> 8;
              }
              else
              {
                v13 = v15[3];
                v9 = v16 >> 8;
                v4 = v15[4];
                v14 = 1;
              }
            }
            ++v12;
          }
          while (v12 != v11);
          v12 = v24;
          v17 = v25;
          if (v24 != v25)
          {
            v18 = v13 | (v9 << 8);
            do
            {
              v23 = 0;
              v23 = *v12;
              v26 = &v23;
              v19 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>(a4, &v23, (uint64_t)&std::piecewise_construct, &v26);
              v19[3] = v18;
              v19[4] = v4;
              ++v12;
            }
            while (v12 != v17);
            v12 = v24;
          }
          a2 = v20;
        }
        if (v12)
        {
          v25 = v12;
          operator delete(v12);
        }
      }
      v8 = *(_QWORD *)(v8 + 8);
    }
    while (v8 != a2);
  }
}

void sub_206DBB378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  uint64_t v15;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v15);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::IsNonSeedInplaceTensor(uint64_t a1, uint64_t a2, int a3)
{
  ZinIrOpLayer *v3;
  unint64_t v6;
  ZinIrRegAllocUtil *InputTensor;
  const ZinIrTensor *v8;
  uint64_t LastConsumer;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  _BOOL4 v13;
  ZinIrTensor *RootTensor;

  v3 = *(ZinIrOpLayer **)(a2 + 96);
  if (*(_DWORD *)(*((_QWORD *)v3 + 8) + 8) == 7 || *((_QWORD *)v3 + 12) == *((_QWORD *)v3 + 11))
    return 0;
  v6 = 0;
  while (1)
  {
    InputTensor = (ZinIrRegAllocUtil *)ZinIrOpLayer::GetInputTensor(v3, v6);
    LastConsumer = ZinIrRegAllocUtil::GetLastConsumer(InputTensor, v8);
    v10 = *(_QWORD **)(a1 + 32);
    RootTensor = ZinIrTensor::GetRootTensor(InputTensor);
    v11 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v10, &RootTensor);
    if (v11)
    {
      v12 = *((_DWORD *)v11 + 6);
      v13 = a3 == 1 ? CpAllocUtils::IsL2Inplace(v12) : CpAllocUtils::IsDRAMInplace(v12);
      if (v13 && LastConsumer == (_QWORD)v3)
        break;
    }
    if (++v6 >= (uint64_t)(*((_QWORD *)v3 + 12) - *((_QWORD *)v3 + 11)) >> 3)
      return 0;
  }
  return 1;
}

BOOL ZinIrLocalRegAlloc::IsInplaced(ZinIrLocalRegAlloc *this, ZinIrTensor *a2)
{
  _QWORD *v2;
  ZinIrTensor *RootTensor;

  v2 = (_QWORD *)((char *)this + 528);
  RootTensor = ZinIrTensor::GetRootTensor(a2);
  return std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v2, &RootTensor) != 0;
}

uint64_t ZinIrLocalRegAlloc::GetFirstEngineLayerTID(uint64_t a1, int64_t *a2)
{
  int64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  ZinIrOpLayer *v8;
  ZinIrOpLayer *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  int64_t v15;

  v2 = *a2;
  if (*a2 > a2[1])
    return -1;
  v4 = (_QWORD *)(a1 + 64);
  while (1)
  {
    v15 = v2;
    if (std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(v4, (unint64_t *)&v15))
    {
      v15 = v2;
      v5 = std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(v4, (unint64_t *)&v15);
      if (!v5)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v6 = (_QWORD *)v5[3];
      v7 = v5 + 4;
      if (v6 != v5 + 4)
      {
        v8 = 0;
        do
        {
          v9 = (ZinIrOpLayer *)v6[4];
          if (ZinIrOpLayer::IsANELayer(v9) && (!v8 || *((_QWORD *)v8 + 45) > *((_QWORD *)v9 + 45)))
            v8 = v9;
          v10 = (_QWORD *)v6[1];
          if (v10)
          {
            do
            {
              v11 = v10;
              v10 = (_QWORD *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              v11 = (_QWORD *)v6[2];
              v12 = *v11 == (_QWORD)v6;
              v6 = v11;
            }
            while (!v12);
          }
          v6 = v11;
        }
        while (v11 != v7);
        if (v8)
          break;
      }
    }
    if (v2++ >= a2[1])
      return -1;
  }
  return *((_QWORD *)v8 + 45);
}

uint64_t ZinIrLocalRegAlloc::GetLastEngineLayerTID(uint64_t a1, int64_t *a2)
{
  int64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  ZinIrOpLayer *v8;
  ZinIrOpLayer *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  int64_t v15;

  v2 = a2[1];
  if (v2 < *a2)
    return -1;
  v4 = (_QWORD *)(a1 + 64);
  while (1)
  {
    v15 = v2;
    if (std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(v4, (unint64_t *)&v15))
    {
      v15 = v2;
      v5 = std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(v4, (unint64_t *)&v15);
      if (!v5)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v6 = (_QWORD *)v5[3];
      v7 = v5 + 4;
      if (v6 != v5 + 4)
      {
        v8 = 0;
        do
        {
          v9 = (ZinIrOpLayer *)v6[4];
          if (ZinIrOpLayer::IsANELayer(v9) && (!v8 || *((_QWORD *)v8 + 45) < *((_QWORD *)v9 + 45)))
            v8 = v9;
          v10 = (_QWORD *)v6[1];
          if (v10)
          {
            do
            {
              v11 = v10;
              v10 = (_QWORD *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              v11 = (_QWORD *)v6[2];
              v12 = *v11 == (_QWORD)v6;
              v6 = v11;
            }
            while (!v12);
          }
          v6 = v11;
        }
        while (v11 != v7);
        if (v8)
          break;
      }
    }
    if (v2-- <= *a2)
      return -1;
  }
  return *((_QWORD *)v8 + 45);
}

uint64_t ZinIrLocalRegAlloc::ZinIrSortTensors(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t *v4;
  void **v6;
  void **v7;
  uint64_t v8;
  int v9;
  ZinIrOpLayer **v10;
  ZinIrOpLayer **v11;
  float i;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD **v17;
  _QWORD *v18;
  _QWORD **v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int64_t *v27;
  uint64_t FirstEngineLayerTID;
  uint64_t LastEngineLayerTID;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD **v35;
  _QWORD *v36;
  _QWORD **v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  __int128 *p_p;
  BOOL v42;
  uint64_t v43;
  ZinIrTensor *v44;
  ZinIrTensor *RootTensor;
  unint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD **v50;
  ZinIrTensor *v51;
  uint64_t v52;
  void **v53;
  uint64_t v54;
  _QWORD *v55;
  void *v56;
  _QWORD *v57;
  void **v58;
  void **v59;
  BOOL v60;
  uint64_t v61;
  ZinIrOpLayer **v62;
  ZinIrOpLayer **v63;
  uint64_t v64;
  ZinIrOpLayer **v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  float v70;
  int IsNoOp;
  ZinIrOpLayer *v72;
  std::__shared_weak_count *v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  float v84;
  float v85;
  BOOL v86;
  uint64_t v87;
  _QWORD *v88;
  StaticWrapInfo *v89;
  uint64_t v90;
  uint64_t v91;
  int64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t *v97;
  uint64_t *j;
  uint64_t v99;
  _BOOL8 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v111;
  ZinIrLocalRegAlloc *v113;
  uint64_t *v114;
  _QWORD *v115;
  uint64_t v116;
  void *v117[2];
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  ZinIrTensor *v130;
  std::__shared_weak_count *v131;
  uint64_t v132;
  __int128 __p;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  ZinIrTensor *v146;
  uint64_t v147;
  ZinIrTensor *v148;
  uint64_t *v149;
  _QWORD *v150[2];
  _QWORD v151[5];
  uint64_t *v152;
  _QWORD *v153[2];
  uint64_t v154;
  uint64_t *v155;
  unint64_t v156;
  _BYTE v157[24];
  _BYTE *v158;
  uint64_t v159;

  v4 = (uint64_t *)a2;
  v159 = *MEMORY[0x24BDAC8D0];
  std::list<ZinIrTensor *>::list<std::__list_const_iterator<ZinIrTensor *,void *>>(&v154, *(_QWORD *)(a2 + 8), a2);
  v153[0] = 0;
  v153[1] = 0;
  v152 = (uint64_t *)v153;
  v117[0] = 0;
  *(_QWORD *)&__p = v117;
  std::__tree<std::__value_type<unsigned long,ZinIrOpLayer *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,ZinIrOpLayer *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,ZinIrOpLayer *>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v152, (unint64_t *)v117, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p)[5] = 0;
  v6 = *(void ***)(a1 + 40);
  v7 = *(void ***)(a1 + 48);
  if (v6 != v7)
  {
    v8 = 1;
    do
    {
      v117[0] = 0;
      v117[0] = *v6;
      *(_QWORD *)&__p = v117;
      std::__tree<std::__value_type<unsigned long,ZinIrOpLayer *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,ZinIrOpLayer *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,ZinIrOpLayer *>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v152, (unint64_t *)v117, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p)[5] = v8++;
      ++v6;
    }
    while (v6 != v7);
  }
  if (a4 == 1)
    v9 = 4;
  else
    v9 = 8;
  ZinIrLocalRegAlloc::ConstructLiveRangeWithInplaceAllocation(a1, (uint64_t)&v154, v9, (uint64_t)v151);
  v10 = *(ZinIrOpLayer ***)(a1 + 40);
  v11 = *(ZinIrOpLayer ***)(a1 + 48);
  for (i = 0.0; v10 != v11; ++v10)
  {
    if (ZinIrOpLayer::IsEngineLayer(*v10))
      i = i + 1.0;
  }
  v150[1] = 0;
  v150[0] = 0;
  v149 = (uint64_t *)v150;
  v13 = v155;
  if (v155 == &v154)
  {
    v97 = &v154;
  }
  else
  {
    v109 = v4;
    v113 = (ZinIrLocalRegAlloc *)a1;
    v115 = (_QWORD *)(a1 + 144);
    while (2)
    {
      v14 = v13[2];
      v148 = (ZinIrTensor *)v14;
      v114 = v13;
      switch(a3)
      {
        case 0:
          v15 = v153[0];
          if (!v153[0])
            goto LABEL_24;
          v16 = *(_QWORD *)(v14 + 96);
          v17 = v153;
          do
          {
            v18 = v15;
            v19 = v17;
            v20 = v15[4];
            if (v20 >= v16)
              v17 = (_QWORD **)v15;
            else
              ++v15;
            v15 = (_QWORD *)*v15;
          }
          while (v15);
          if (v17 == v153)
            goto LABEL_24;
          if (v20 < v16)
            v18 = v19;
          if (v16 < v18[4])
LABEL_24:
            v17 = v153;
          v21 = ~(unint64_t)v17[5];
          goto LABEL_130;
        case 1:
          v33 = v153[0];
          if (!v153[0])
            goto LABEL_46;
          v34 = *(_QWORD *)(v14 + 96);
          v35 = v153;
          do
          {
            v36 = v33;
            v37 = v35;
            v38 = v33[4];
            if (v38 >= v34)
              v35 = (_QWORD **)v33;
            else
              ++v33;
            v33 = (_QWORD *)*v33;
          }
          while (v33);
          if (v35 == v153)
            goto LABEL_46;
          if (v38 < v34)
            v36 = v37;
          if (v34 < v36[4])
LABEL_46:
            v35 = v153;
          v39 = *((_DWORD *)v35 + 10);
          v147 = 0;
          ZinTensorFormatGetSize(*(_DWORD *)(v14 + 88), &v147);
          ZinIrCompilerParameters::getSpatialSplitMode(*((ZinIrCompilerParameters **)v113 + 3), &__p);
          v40 = BYTE7(v134);
          if (SBYTE7(v134) < 0)
            v40 = *((_QWORD *)&__p + 1);
          if (v40 != 8)
          {
            v42 = 0;
            if ((SBYTE7(v134) & 0x80000000) == 0)
              goto LABEL_56;
LABEL_55:
            operator delete((void *)__p);
            goto LABEL_56;
          }
          p_p = (__int128 *)__p;
          if ((SBYTE7(v134) & 0x80u) == 0)
            p_p = &__p;
          v42 = *(_QWORD *)p_p == 0x64656C6261736964;
          if (SBYTE7(v134) < 0)
            goto LABEL_55;
LABEL_56:
          v43 = ~v39 & 0xFFFFFFLL;
          v44 = v148;
          if (!v42 && *((_BYTE *)v148 + 144) && *((_DWORD *)v148 + 33) == 2)
          {
            RootTensor = ZinIrTensor::GetRootTensor(v148);
            v46 = *((_QWORD *)RootTensor + 8)
                * ZinAlignPower2(v147 * *((_QWORD *)RootTensor + 9), *(_QWORD *)(*((_QWORD *)v113 + 2) + 416))
                * *((_QWORD *)RootTensor + 7);
            if (v46 >= 0xFFFFFF)
              v46 = 0xFFFFFFLL;
            v21 = ((unint64_t)*((unsigned __int16 *)v44 + 64) << 47) | (v46 << 24) | v43 | 0x8000000000000000;
          }
          else
          {
            v111 = v43;
            *(_QWORD *)&__p = &__p;
            *((_QWORD *)&__p + 1) = &__p;
            *(_QWORD *)&v134 = 0;
            v47 = operator new(0x18uLL);
            v48 = 0;
            v47[1] = &__p;
            v47[2] = v44;
            *v47 = &__p;
            v49 = 1;
            *(_QWORD *)&__p = v47;
            *((_QWORD *)&__p + 1) = v47;
            do
            {
              v50 = (_QWORD **)__p;
              v51 = *(ZinIrTensor **)(__p + 16);
              v52 = *(_QWORD *)__p;
              *(_QWORD *)(v52 + 8) = *(_QWORD *)(__p + 8);
              *v50[1] = v52;
              *(_QWORD *)&v134 = v49 - 1;
              operator delete(v50);
              ZinIrTensor::GetChildren(v51, (uint64_t)v117);
              v53 = (void **)v117[0];
              if (v117[0] != &v117[1])
              {
                v55 = (_QWORD *)*((_QWORD *)&__p + 1);
                v54 = v134;
                do
                {
                  v56 = v53[4];
                  v57 = operator new(0x18uLL);
                  v57[1] = v55;
                  v57[2] = v56;
                  *v57 = &__p;
                  *v55 = v57;
                  ++v54;
                  *((_QWORD *)&__p + 1) = v57;
                  *(_QWORD *)&v134 = v54;
                  v58 = (void **)v53[1];
                  if (v58)
                  {
                    do
                    {
                      v59 = v58;
                      v58 = (void **)*v58;
                    }
                    while (v58);
                  }
                  else
                  {
                    do
                    {
                      v59 = (void **)v53[2];
                      v60 = *v59 == v53;
                      v53 = v59;
                    }
                    while (!v60);
                  }
                  v53 = v59;
                  v55 = v57;
                }
                while (v59 != &v117[1]);
              }
              std::__tree<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>::destroy((uint64_t)v117, (_QWORD *)v117[1]);
              v61 = *((_QWORD *)v51 + 12);
              v62 = *(ZinIrOpLayer ***)(v61 + 112);
              v63 = *(ZinIrOpLayer ***)(v61 + 120);
              if (v62 == v63)
              {
                v64 = 0;
              }
              else
              {
                v64 = 0;
                v65 = *(ZinIrOpLayer ***)(v61 + 112);
                do
                {
                  v66 = (uint64_t)*v65++;
                  if (*(_DWORD *)(*(_QWORD *)(v66 + 64) + 8) != 36)
                    ++v64;
                }
                while (v65 != v63);
              }
              v68 = *((_QWORD *)v51 + 8);
              v67 = *((_QWORD *)v51 + 9);
              v69 = *((_QWORD *)v51 + 7);
              v116 = v147;
              v70 = 1.0;
              while (v62 != v63)
              {
                if (ZinIrOpLayer::IsANELayer(*v62))
                  v70 = v70 * 1.1;
                ++v62;
              }
              ZinIrTensor::GetParentTensor(v51, &v130);
              if (v130)
              {
                IsNoOp = 1;
              }
              else
              {
                v72 = (ZinIrOpLayer *)*((_QWORD *)v51 + 12);
                v117[0] = 0;
                v117[1] = 0;
                *(_QWORD *)&v118 = 0;
                IsNoOp = ZinIrOpLayer::IsNoOp(v72, (uint64_t *)v117);
                if (v117[0])
                {
                  v117[1] = v117[0];
                  operator delete(v117[0]);
                }
              }
              v73 = v131;
              if (v131)
              {
                p_shared_owners = (unint64_t *)&v131->__shared_owners_;
                do
                  v75 = __ldaxr(p_shared_owners);
                while (__stlxr(v75 - 1, p_shared_owners));
                if (!v75)
                {
                  ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                  std::__shared_weak_count::__release_weak(v73);
                }
              }
              if (IsNoOp)
                v70 = v70 / 1.1;
              v146 = 0;
              ZinIrTensor::GetParentTensor(v51, v117);
              if (v117[0])
              {
                ZinIrTensor::GetParentTensor(v51, &v130);
                v51 = v130;
                v76 = v131;
                if (v131)
                {
                  v77 = (unint64_t *)&v131->__shared_owners_;
                  do
                    v78 = __ldaxr(v77);
                  while (__stlxr(v78 - 1, v77));
                  if (!v78)
                  {
                    ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                    std::__shared_weak_count::__release_weak(v76);
                  }
                }
              }
              v79 = (std::__shared_weak_count *)v117[1];
              if (v117[1])
              {
                v80 = (unint64_t *)((char *)v117[1] + 8);
                do
                  v81 = __ldaxr(v80);
                while (__stlxr(v81 - 1, v80));
                if (!v81)
                {
                  ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                  std::__shared_weak_count::__release_weak(v79);
                }
              }
              v146 = v51;
              v82 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v115, &v146);
              v83 = v82[4] - v82[3];
              if (v83 <= 1)
                v83 = 1;
              v84 = sqrt((double)v83);
              v85 = (float)(v70 * (float)(unint64_t)(v67 * v64 * v68 * v69 * v116)) / v84;
              if (v85 > 1.8447e19 || (v86 = __CFADD__(v48, (unint64_t)v85), v48 += (unint64_t)v85, v86))
              {
                v87 = 0xFFFFFFFFFFLL;
                goto LABEL_114;
              }
              v49 = v134;
            }
            while ((_QWORD)v134);
            v87 = 0xFFFFFFFFFFLL;
            if (v48 < 0xFFFFFFFFFFLL)
              v87 = v48;
LABEL_114:
            v21 = v111 | (v87 << 24);
            std::__list_imp<ZinIrSection *>::clear(&__p);
          }
LABEL_130:
          *(_QWORD *)&__p = &v148;
          std::__tree<std::__value_type<unsigned long,ZinIrOpLayer *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,ZinIrOpLayer *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,ZinIrOpLayer *>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v149, (unint64_t *)&v148, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p)[5] = v21;
          v13 = (uint64_t *)v114[1];
          if (v13 != &v154)
            continue;
          v97 = v155;
          v4 = v109;
          break;
        case 2:
          v22 = *(_QWORD *)(v14 + 48);
          v23 = *(_QWORD *)(v14 + 56);
          v25 = *(_QWORD *)(v14 + 64);
          v24 = *(_QWORD *)(v14 + 72);
          *(_QWORD *)&__p = 0;
          ZinTensorFormatGetSize(*(_DWORD *)(v14 + 88), &__p);
          v26 = __p;
          v27 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v151, &v148)+ 3;
          FirstEngineLayerTID = ZinIrLocalRegAlloc::GetFirstEngineLayerTID((uint64_t)v113, v27);
          LastEngineLayerTID = ZinIrLocalRegAlloc::GetLastEngineLayerTID((uint64_t)v113, v27);
          if (FirstEngineLayerTID < 0 || LastEngineLayerTID < 0 || LastEngineLayerTID < FirstEngineLayerTID)
            ZinAssertImpl("Tensor has no corresponding engine layer", v109);
          if ((LastEngineLayerTID - FirstEngineLayerTID + 1) > 1)
            v30 = (LastEngineLayerTID - FirstEngineLayerTID + 1);
          else
            v30 = 1;
          v21 = ((unint64_t)(v22 * v23 * v25 * v24 * v26) << 32) | v30;
          goto LABEL_130;
        case 3:
          ZinIrLocalRegAlloc::GetDimensionOrderHint(v113, (const ZinIrTensor *)v14, (uint64_t)v117);
          v158 = 0;
          ZinIrTensor::InferDescriptor((unsigned __int8 *)v14, a4, (uint64_t)v117, 1, 1, (uint64_t)v157, (uint64_t)&__p);
          v31 = v158;
          if (v158 == v157)
          {
            v31 = v157;
            v32 = 4;
          }
          else
          {
            if (!v158)
              goto LABEL_117;
            v32 = 5;
          }
          (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_117:
          if (v117[0])
          {
            v117[1] = v117[0];
            operator delete(v117[0]);
          }
          v88 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(*((_QWORD **)v113 + 4), &v148);
          if (v88)
          {
            if (CpAllocUtils::IsL2Circular(*((_DWORD *)v88 + 6)))
            {
              LODWORD(v130) = 5;
              v131 = 0;
              v132 = 0;
              if (ZinIrCircularBufferUtil::QualifyForCircularBuffer(v148, *((const ZinIrTensor **)v113 + 2), (const ZinIrHalParameters *)&v130, v89))
              {
                ZinIrLocalRegAlloc::InferCircularTensorDescriptor(v113, (uint64_t)v148, (uint64_t)&v130, 1, (uint64_t)v117);
                v143 = v127;
                v144 = v128;
                v145 = v129;
                v139 = v123;
                v140 = v124;
                v141 = v125;
                v142 = v126;
                v135 = v119;
                v136 = v120;
                v137 = v121;
                v138 = v122;
                __p = *(_OWORD *)v117;
                v134 = v118;
              }
            }
          }
          ZinIrTensor::GetTensorSizeInBytes((unsigned __int8 *)v148, &__p);
          v91 = v90;
          v92 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v151, &v148)+ 3;
          v93 = ZinIrLocalRegAlloc::GetFirstEngineLayerTID((uint64_t)v113, v92);
          v94 = ZinIrLocalRegAlloc::GetLastEngineLayerTID((uint64_t)v113, v92);
          if (v93 < 0 || v94 < 0 || (v95 = v94 - v93, v94 < v93))
            ZinAssertImpl("Tensor has no corresponding engine layer", v109);
          if ((unint64_t)(v95 + 1) > 1)
            v96 = v95 + 1;
          else
            v96 = 1;
          v21 = (v96 * v91) << (4 * ((float)((float)v96 / i) > 0.8));
          goto LABEL_130;
        default:
          v101 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v101)
            ZinIrLocalRegAlloc::ZinIrSortTensors(v101, v102, v103, v104, v105, v106, v107, v108);
          v99 = 3;
          goto LABEL_136;
      }
      break;
    }
  }
  *(_QWORD *)&__p = &v149;
  std::list<ZinIrTensor *>::__sort<ZinIrLocalRegAlloc::ZinIrSortTensors(ZinIrScheduleUtil::ZinOrderedSet<ZinIrTensor *> &,ZinIrLocalRegAlloc::ZinIrTensorPriorityAssignmentPolicy,ZinIrTensor::AllocationHint)::$_1>(v97, &v154, v156, &__p);
  std::__list_imp<ZinIrSection *>::clear(v4);
  std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::clear(v4 + 3);
  for (j = v155; j != &v154; j = (uint64_t *)j[1])
    ZinIrScheduleUtil::ZinOrderedSet<ZinIrOpLayer *>::PushBack(v4, j[2]);
  v99 = 0;
LABEL_136:
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v149, v150[0]);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v151);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v152, v153[0]);
  std::__list_imp<ZinIrSection *>::clear(&v154);
  return v99;
}

void sub_206DBC120(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&STACK[0x228], (_QWORD *)STACK[0x230]);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v1 - 256);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1 - 216, *(_QWORD **)(v1 - 208));
  std::__list_imp<ZinIrSection *>::clear((_QWORD *)(v1 - 192));
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::AllocateConstTensors(ZinIrLocalRegAlloc *this)
{
  _QWORD *v1;
  _QWORD *v2;
  ZinIrTensor *v4;
  ZinIrSection *Section;

  v1 = (_QWORD *)*((_QWORD *)this + 5);
  v2 = (_QWORD *)*((_QWORD *)this + 6);
  if (v1 == v2)
    return 0;
  while (1)
  {
    if (*(_DWORD *)(*(_QWORD *)(*v1 + 64) + 8) == 29)
    {
      v4 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v1 + 32))(*v1, 0, 0);
      Section = (ZinIrSection *)ZinIrLocalRegAlloc::GetSection((uint64_t)this, 0, 0);
      if (!ZinIrLocalRegAlloc::AllocateNonResidentTensor(this, v4, Section, 1))
        break;
    }
    if (++v1 == v2)
      return 0;
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    ZinIrLocalRegAlloc::AllocateConstTensors((char *)v4);
  return 5;
}

BOOL ZinIrLocalRegAlloc::OptimizeChainPairDMABufferPatchWidth(const ZinIrHalParameters **this, ZinANELayer *a2, ZinANELayer *a3)
{
  ZinANELayer *v6;
  _BOOL8 v7;
  uint64_t v9;
  ZinIrTensor *v10;
  unint64_t v11;
  const ZinIrHalParameters *v12;
  unint64_t MaxPatchShapeWidth;
  _QWORD __dst[57];
  _DWORD v15[12];
  _DWORD v16[12];
  _BYTE v17[47];
  BOOL v18;
  ZinMirL2Config *v19;

  if (ZinIrOpLayer::IsNELayer(a2))
    v6 = a3;
  else
    v6 = a2;
  v19 = v6;
  if (ZinIrOpLayer::IsTransposeEngineLayer(a2) || ZinIrOpLayer::IsTransposeEngineLayer(a3))
    ZinAssertImpl("Only NE and PE engine layers are supported\n");
  if ((ZinEngineLayerMirInfo::HasDmaRead(*((ZinEngineLayerMirInfo **)v6 + 33)) & 1) == 0
    && (*(_DWORD *)(*((_QWORD *)v6 + 33) + 1632) - 1) > 1)
  {
    return 1;
  }
  v18 = 0;
  NEDominatesPerf(a2, a3, this[2], this[3], &v18);
  if (v18
    || std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(this + 46, &v19))
  {
    return 1;
  }
  v9 = *((_QWORD *)v19 + 33);
  memcpy(__dst, (const void *)(v9 + 120), 0x1C4uLL);
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v15, v9 + 576);
  v15[10] = *(_DWORD *)(v9 + 616);
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v16, v9 + 624);
  v16[10] = *(_DWORD *)(v9 + 664);
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v17, v9 + 672);
  v10 = (ZinIrTensor *)(*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  v11 = *(_QWORD *)(v9 + 240);
  MaxPatchShapeWidth = ZinMirL2Config::GetMaxPatchShapeWidth(v19, this[2], v12);
  do
  {
    ZinIrLocalRegAlloc::FreeDMADefaultBuffers((uint64_t)this, a2);
    ZinIrLocalRegAlloc::FreeDMACachedBuffers((ZinIrLocalRegAlloc *)this, a2);
    ZinIrLocalRegAlloc::FreeDMADefaultBuffers((uint64_t)this, a3);
    ZinIrLocalRegAlloc::FreeDMACachedBuffers((ZinIrLocalRegAlloc *)this, a3);
    ZinIrLocalRegAlloc::RemoveSymbolFromLayerAndTensor((ZinIrLocalRegAlloc *)this, v10);
    *(_BYTE *)(v9 + 256) = 0;
    ++*(_QWORD *)(v9 + 240);
    if (!ZinIrLocalRegAlloc::AllocateChainSymbol((ZinIrLocalRegAlloc *)this, v10)
      || !ZinIrLocalRegAlloc::AllocateDMABuffers((ZinIrLocalRegAlloc *)this, a2, 1, 0)
      || (ZinIrLocalRegAlloc::AllocateDMABuffers((ZinIrLocalRegAlloc *)this, a3, 1, 0) & 1) == 0)
    {
      ZinIrLocalRegAlloc::FreeDMADefaultBuffers((uint64_t)this, a2);
      ZinIrLocalRegAlloc::FreeDMACachedBuffers((ZinIrLocalRegAlloc *)this, a2);
      ZinIrLocalRegAlloc::FreeDMADefaultBuffers((uint64_t)this, a3);
      ZinIrLocalRegAlloc::FreeDMACachedBuffers((ZinIrLocalRegAlloc *)this, a3);
      ZinIrLocalRegAlloc::RemoveSymbolFromLayerAndTensor((ZinIrLocalRegAlloc *)this, v10);
      if (!ZinIrLocalRegAlloc::AllocateDMABuffers((ZinIrLocalRegAlloc *)this, a3, 1, 0)
        || !ZinIrLocalRegAlloc::AllocateDMABuffers((ZinIrLocalRegAlloc *)this, a2, 1, 0)
        || !ZinIrLocalRegAlloc::AllocateChainSymbol((ZinIrLocalRegAlloc *)this, v10))
      {
        break;
      }
    }
    v11 = *(_QWORD *)(v9 + 240);
    if ((*(uint64_t (**)(ZinMirL2Config *, uint64_t))(*(_QWORD *)v19 + 368))(v19, 4) <= 1 << v11)
      break;
  }
  while (*(_QWORD *)(v9 + 240) < MaxPatchShapeWidth);
  ZinIrLocalRegAlloc::FreeDMADefaultBuffers((uint64_t)this, a2);
  ZinIrLocalRegAlloc::FreeDMACachedBuffers((ZinIrLocalRegAlloc *)this, a2);
  ZinIrLocalRegAlloc::FreeDMADefaultBuffers((uint64_t)this, a3);
  ZinIrLocalRegAlloc::FreeDMACachedBuffers((ZinIrLocalRegAlloc *)this, a3);
  ZinIrLocalRegAlloc::RemoveSymbolFromLayerAndTensor((ZinIrLocalRegAlloc *)this, v10);
  *(_QWORD *)(v9 + 240) = v11;
  *(_BYTE *)(v9 + 256) = __dst[17];
  v7 = v11 >= __dst[15];
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v17);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v16);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v15);
  return v7;
}

void sub_206DBC648(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ZinMirL2Config::~ZinMirL2Config((ZinMirL2Config *)va);
  _Unwind_Resume(a1);
}

void NEDominatesPerf(const ZinANELayer *a1, const ZinANELayer *a2, const ZinIrHalParameters *a3, const ZinIrCompilerParameters *a4, BOOL *a5)
{
  _BOOL4 IsNELayer;
  ZinANELayer *v11;
  ZinANELayer *v12;
  _QWORD *v13;
  _BOOL8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _BOOL8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  _OWORD v37[2];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  void *__p;
  void *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  _OWORD v61[2];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  void *v73;
  void *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  _BYTE v85[872];
  __int128 v86[2];

  IsNELayer = ZinIrOpLayer::IsNELayer(a1);
  if (IsNELayer)
    v11 = a1;
  else
    v11 = a2;
  if (IsNELayer)
    v12 = a2;
  else
    v12 = a1;
  if (ZinIrOpLayer::IsTransposeEngineLayer(a1) || ZinIrOpLayer::IsTransposeEngineLayer(a2))
    ZinAssertImpl("Only NE and PE engine layers are supported\n");
  ZinIrHalParameters::GetOperationCondition(a3, *((double *)a4 + 13), *((_DWORD *)a4 + 28), *((_DWORD *)a4 + 29), (uint64_t)v86);
  LOWORD(v61[0]) = 257;
  BYTE2(v61[0]) = 1;
  *(_DWORD *)((char *)v61 + 3) = 0;
  *(_DWORD *)((char *)v61 + 6) = 0;
  BYTE10(v61[0]) = 1;
  *(_DWORD *)((char *)v61 + 11) = 0;
  ZinIrPerf::ZinIrPerf((uint64_t)v85, (uint64_t)a3, v86, (uint64_t *)v61);
  v72 = 0;
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  memset(v61, 0, sizeof(v61));
  v13 = operator new(8uLL);
  v73 = v13;
  *v13 = 0;
  v75 = v13 + 1;
  v74 = v13 + 1;
  v77 = 0;
  v76 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v78 = _Q0;
  v79 = _Q0;
  v80 = _Q0;
  v81 = _Q0;
  v36 = _Q0;
  v82 = 0;
  v83 = 0;
  v84 = 0;
  if (ZinANELayer::CalculatePerf(v11, (ZinIrPerf *)v85, (ZinPerfDescriptor *)v61))
  {
    v19 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v19)
      NEDominatesPerf(v19, v20, v21, v22, v23, v24, v25, v26);
  }
  else
  {
    v48 = 0;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    memset(v37, 0, sizeof(v37));
    v27 = operator new(8uLL);
    __p = v27;
    *v27 = 0;
    v50 = v27 + 1;
    v51 = v27 + 1;
    v52 = 0;
    v53 = 0;
    v54 = v36;
    v55 = v36;
    v56 = v36;
    v57 = v36;
    v58 = 0;
    v59 = 0;
    v60 = 0;
    if (ZinANELayer::CalculatePerf(v12, (ZinIrPerf *)v85, (ZinPerfDescriptor *)v37))
    {
      v28 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v28)
        NEDominatesPerf(v28, v29, v30, v31, v32, v33, v34, v35);
    }
    else
    {
      *a5 = *((double *)&v62 + 1) > *((double *)&v38 + 1);
    }
    if (__p)
    {
      v50 = __p;
      operator delete(__p);
    }
  }
  if (v73)
  {
    v74 = v73;
    operator delete(v73);
  }
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)v85);
}

void sub_206DBC8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p)
{
  void *v37;

  if (__p)
    operator delete(__p);
  v37 = (void *)STACK[0x228];
  if (STACK[0x228])
  {
    STACK[0x230] = (unint64_t)v37;
    operator delete(v37);
  }
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)&STACK[0x2B0]);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::TryChainPairDMABufferTileHeight(ZinIrLocalRegAlloc *this, ZinANELayer *a2, ZinANELayer *a3, uint64_t a4, uint64_t a5)
{
  ZinIrTensor *v10;
  uint64_t v11;
  ZinMirL2Config *v12;

  v10 = (ZinIrTensor *)(*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  v11 = *((_QWORD *)a2 + 33);
  v12 = (ZinMirL2Config *)(*((_QWORD *)a3 + 33) + 120);
  ZinIrLocalRegAlloc::FreeDMADefaultBuffers((uint64_t)this, a2);
  ZinIrLocalRegAlloc::FreeDMACachedBuffers(this, a2);
  ZinIrLocalRegAlloc::FreeDMADefaultBuffers((uint64_t)this, a3);
  ZinIrLocalRegAlloc::FreeDMACachedBuffers(this, a3);
  ZinIrLocalRegAlloc::RemoveSymbolFromLayerAndTensor(this, v10);
  if (ZinMirL2Config::SetChainConsumerTileHeight(v12, a2, a3, 0, a4)
    && ZinMirL2Config::SetChainProducerTileHeight((ZinMirL2Config *)(v11 + 120), a3, a5, 0)
    && ZinIrLocalRegAlloc::AllocateChainSymbol(this, v10)
    && ZinIrLocalRegAlloc::AllocateDMABuffers(this, a2, 1, 0))
  {
    return ZinIrLocalRegAlloc::AllocateDMABuffers(this, a3, 1, 0);
  }
  else
  {
    return 0;
  }
}

uint64_t ZinIrLocalRegAlloc::OptimizeChainPairDMABufferTileHeight(ZinIrLocalRegAlloc *this, ZinANELayer *a2, ZinANELayer *a3)
{
  ZinIrOpLayerGraph *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  ZinIrTensor *v11;
  _DWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  ZinMirL2Config *v32;
  ZinIrTensor *v33;
  ZinMirL2Config *v34;
  int v35;
  _QWORD __src[57];
  uint64_t *v37[4];
  int v38;
  int v39;
  uint64_t *v40[4];
  int v41;
  int v42;
  uint64_t *v43[4];
  int v44;
  _DWORD __dst[113];
  uint64_t *v46[4];
  int v47;
  int v48;
  uint64_t *v49[4];
  int v50;
  int v51;
  uint64_t *v52[4];
  int v53;

  v6 = (ZinIrOpLayerGraph *)*((_QWORD *)a2 + 19);
  v7 = (*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  v8 = *((_QWORD *)a2 + 33);
  v9 = *((_QWORD *)a3 + 33);
  *(_BYTE *)(v8 + 233) = 0;
  *(_BYTE *)(v9 + 233) = 0;
  if ((*(_DWORD *)(v8 + 144) - 3) >= 2)
  {
    v11 = (ZinIrTensor *)v7;
    v34 = (ZinMirL2Config *)(v8 + 120);
    memcpy(__dst, (const void *)(v8 + 120), sizeof(__dst));
    std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v46, v8 + 576);
    v48 = *(_DWORD *)(v8 + 616);
    std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v49, v8 + 624);
    v51 = *(_DWORD *)(v8 + 664);
    std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v52, v8 + 672);
    v12 = (_DWORD *)*((_QWORD *)a3 + 33);
    memcpy(__src, v12 + 30, 0x1C4uLL);
    std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v37, (uint64_t)(v12 + 144));
    v39 = v12[154];
    std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v40, (uint64_t)(v12 + 156));
    v42 = v12[166];
    std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v43, (uint64_t)(v12 + 168));
    v13 = __src[10];
    v14 = (*(uint64_t (**)(ZinANELayer *, uint64_t))(*(_QWORD *)a3 + 368))(a3, 3);
    if (ZinIrOpLayer::IsPELayer(a3))
    {
      v35 = 0;
      if (!ZinIrRegAllocUtil::GetChainedOperandL2SrcType(v6, a3, a2, &v35))
      {
        v22 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v22)
          ZinIrLocalRegAlloc::OptimizeChainPairDMABufferTileHeight(v22, v23, v24, v25, v26, v27, v28, v29);
        v10 = 0;
        goto LABEL_34;
      }
      v33 = v11;
      v15 = v35 != 0;
    }
    else
    {
      v33 = v11;
      v15 = 0;
    }
    v16 = vcvtps_u32_f32((float)v13 * 0.0625);
    v31 = v16;
    v32 = (ZinMirL2Config *)(v9 + 120);
    v17 = vcvtps_u32_f32((float)v14 * 0.0625);
    v18 = v16;
    do
    {
      if (*(_BYTE *)(v8 + 233) || *(_BYTE *)(v9 + 233))
        ZinAssertImpl("Configs should be unlocked for optimization");
      v19 = v17 - v18;
      if (v17 < v18)
        ++v19;
      v20 = v18 + (v19 >> 1);
      v21 = ZinIrLocalRegAlloc::TryChainPairDMABufferTileHeight(this, a2, a3, v20, v15);
      if (v21)
        v18 = v20 + 1;
      else
        v17 = v20 - 1;
      if (v21)
        v16 = v20;
    }
    while (v18 <= v17);
    ZinIrLocalRegAlloc::FreeDMADefaultBuffers((uint64_t)this, a2);
    ZinIrLocalRegAlloc::FreeDMACachedBuffers(this, a2);
    ZinIrLocalRegAlloc::FreeDMADefaultBuffers((uint64_t)this, a3);
    ZinIrLocalRegAlloc::FreeDMACachedBuffers(this, a3);
    ZinIrLocalRegAlloc::RemoveSymbolFromLayerAndTensor(this, v33);
    if (v16 == v31 || v16 == __src[10])
    {
      memcpy(v32, __src, 0x1C0uLL);
      *(_DWORD *)(v9 + 568) = __src[56];
      if (v32 == (ZinMirL2Config *)__src)
      {
        *(_DWORD *)(v9 + 616) = v39;
        *(_DWORD *)(v9 + 664) = v42;
      }
      else
      {
        *(_DWORD *)(v9 + 608) = v38;
        std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v9 + 576), v37[2], 0);
        *(_DWORD *)(v9 + 616) = v39;
        *(_DWORD *)(v9 + 656) = v41;
        std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v9 + 624), v40[2], 0);
        *(_DWORD *)(v9 + 664) = v42;
        *(_DWORD *)(v9 + 704) = v44;
        std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v9 + 672), v43[2], 0);
      }
      memcpy(v34, __dst, 0x1C0uLL);
      *(_DWORD *)(v8 + 568) = __dst[112];
      if (v34 == (ZinMirL2Config *)__dst)
      {
        *(_DWORD *)(v8 + 616) = v48;
        *(_DWORD *)(v8 + 664) = v51;
      }
      else
      {
        *(_DWORD *)(v8 + 608) = v47;
        std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v8 + 576), v46[2], 0);
        *(_DWORD *)(v8 + 616) = v48;
        *(_DWORD *)(v8 + 656) = v50;
        std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v8 + 624), v49[2], 0);
        *(_DWORD *)(v8 + 664) = v51;
        *(_DWORD *)(v8 + 704) = v53;
        std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v8 + 672), v52[2], 0);
      }
      v10 = 1;
    }
    else if (ZinMirL2Config::SetChainConsumerTileHeight(v32, a2, a3, 0, v16))
    {
      v10 = ZinMirL2Config::SetChainProducerTileHeight(v34, a3, v15, 0);
    }
    else
    {
      v10 = 0;
    }
    *(_BYTE *)(v8 + 256) = __dst[34];
    *(_BYTE *)(v9 + 256) = __src[17];
    *(_BYTE *)(v8 + 233) = 1;
    *(_BYTE *)(v9 + 233) = 1;
LABEL_34:
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v43);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v40);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v37);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v52);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v49);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v46);
    return v10;
  }
  return 1;
}

void sub_206DBCEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  ZinMirL2Config::~ZinMirL2Config((ZinMirL2Config *)va);
  ZinMirL2Config::~ZinMirL2Config((ZinMirL2Config *)&STACK[0x2C8]);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::AllocateChainAndDMABuffers(ZinIrLocalRegAlloc *this, ZinANELayer *a2, ZinANELayer *a3)
{
  ZinIrTensor *v6;
  uint64_t v7;

  v6 = (ZinIrTensor *)(*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  if (ZinIrLocalRegAlloc::AllocateChainSymbol(this, v6))
  {
    if (ZinIrLocalRegAlloc::AllocateDMABuffers(this, a2, 1, 0))
    {
      v7 = 1;
      if ((ZinIrLocalRegAlloc::AllocateDMABuffers(this, a3, 1, 0) & 1) != 0)
        return v7;
    }
  }
  ZinIrLocalRegAlloc::FreeDMADefaultBuffers((uint64_t)this, a2);
  ZinIrLocalRegAlloc::FreeDMACachedBuffers(this, a2);
  ZinIrLocalRegAlloc::FreeDMADefaultBuffers((uint64_t)this, a3);
  ZinIrLocalRegAlloc::FreeDMACachedBuffers(this, a3);
  ZinIrLocalRegAlloc::RemoveSymbolFromLayerAndTensor(this, v6);
  v7 = 0;
  if (!ZinIrLocalRegAlloc::AllocateDMABuffers(this, a3, 1, 0))
    return v7;
  v7 = 0;
  if (!ZinIrLocalRegAlloc::AllocateDMABuffers(this, a2, 1, 0))
    return v7;
  else
    return ZinIrLocalRegAlloc::AllocateChainSymbol(this, v6);
}

uint64_t ZinIrLocalRegAlloc::OptimizePERasterizationParamsAllocateDMABuffer(ZinIrLocalRegAlloc *this, ZinPELayer *a2)
{
  uint64_t v4;
  uint64_t v6;
  int IsAllInputsResident;
  ZinIrTensor *v8;
  uint64_t InterchangeDescriptor;
  unint64_t MacroblockSize;
  void *v11;
  unint64_t v12;
  int v13;
  ZinIrTensor *InputTensor;
  _BOOL4 IsResident;
  ZinIrTensor *v16;
  int v17;
  int v18;
  char DMABuffers;
  char v20;
  _BYTE v21[24];
  char v22;
  void *__p;
  __int128 v24;

  if (!*(_BYTE *)(*((_QWORD *)this + 2) + 1105))
    return 1;
  v4 = *((_QWORD *)a2 + 33);
  if (*(_BYTE *)(v4 + 256) || *(_BYTE *)(v4 + 233))
    return ZinIrLocalRegAlloc::AllocateDMABuffers(this, a2, 1, 0);
  IsAllInputsResident = ZinIrOpLayer::IsAllInputsResident(a2);
  ZinMirL2Config::ZinMirSetTileHeight((ZinMirL2Config *)(v4 + 120), a2, IsAllInputsResident);
  if (*(_BYTE *)((*(uint64_t (**)(ZinPELayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0) + 164))
  {
    v8 = (ZinIrTensor *)(*(uint64_t (**)(ZinPELayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
    InterchangeDescriptor = ZinIrTensor::GetInterchangeDescriptor(v8);
    MacroblockSize = GetMacroblockSize(SHIDWORD(InterchangeDescriptor));
  }
  else
  {
    MacroblockSize = 1;
  }
  EnumerateTilePatchShapeCandidates(a2, *(_QWORD *)(v4 + 200), MacroblockSize, (uint64_t)&__p);
  if ((ZinIrOpLayer::IsAllInputsResident(a2) & 1) == 0)
  {
    ZinMirL2Config::ZinMirSetTileHeight((ZinMirL2Config *)(v4 + 120), a2, 1);
    if (ZinMirL2Config::EnumeratePatchShapeCandidates(v4 + 120, a2, *(_QWORD *)(v4 + 200), &__p))
      ZinAssertImpl("Patch shape enumeration failed.");
  }
  ZinIrLocalRegAlloc::BailoutPatchShapeCandidatesConflictingDMABuffer(this, a2, (__int128 **)&__p, (char **)v21);
  if (__p)
  {
    *(_QWORD *)&v24 = __p;
    operator delete(__p);
  }
  v11 = *(void **)v21;
  __p = *(void **)v21;
  v24 = *(_OWORD *)&v21[8];
  if (*(_QWORD *)v21 == *(_QWORD *)&v21[8])
  {
    v6 = 0;
  }
  else
  {
    if (*((_QWORD *)a2 + 12) == *((_QWORD *)a2 + 11))
      goto LABEL_20;
    v12 = 0;
    v13 = 0;
    do
    {
      InputTensor = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(a2, v12);
      v13 |= ZinIrTensor::IsResident(InputTensor);
      ++v12;
    }
    while (v12 < (uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 3);
    if ((v13 & 1) == 0)
    {
LABEL_20:
      v16 = (ZinIrTensor *)(*(uint64_t (**)(ZinPELayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
      IsResident = ZinIrTensor::IsResident(v16);
    }
    else
    {
      IsResident = 1;
    }
    memset(v21, 0, sizeof(v21));
    v22 = 1;
    v17 = ZinMirL2Config::EvaluateComputeCostForPatchShapeCandidates(v4 + 120, (__int128 **)&__p, a2, v21, IsResident);
    if (*(unsigned __int8 *)(v4 + 256) | *(unsigned __int8 *)(v4 + 233))
      ZinAssertImpl("PE rasterization params are locked");
    v18 = v17;
    *(_OWORD *)(v4 + 240) = *(_OWORD *)v21;
    *(_QWORD *)(v4 + 200) = *(_QWORD *)&v21[16];
    DMABuffers = ZinIrLocalRegAlloc::AllocateDMABuffers(this, a2, 1, 0);
    if (v18)
      v20 = 0;
    else
      v20 = DMABuffers;
    if ((v20 & 1) != 0)
      v6 = 1;
    else
      v6 = ZinIrLocalRegAlloc::AllocateDMABuffers(this, a2, 0, 0);
    v11 = __p;
  }
  if (v11)
  {
    *(_QWORD *)&v24 = v11;
    operator delete(v11);
  }
  return v6;
}

void sub_206DBD2E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t EnumerateTilePatchShapeCandidates@<X0>(const ZinPELayer *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _DWORD __dst[113];
  uint64_t *v11[4];
  int v12;
  int v13;
  uint64_t *v14[4];
  int v15;
  int v16;
  uint64_t *v17[4];
  int v18;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v8 = *((_QWORD *)a1 + 33);
  memcpy(__dst, (const void *)(v8 + 120), sizeof(__dst));
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v11, v8 + 576);
  v13 = *(_DWORD *)(v8 + 616);
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v14, v8 + 624);
  v16 = *(_DWORD *)(v8 + 664);
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v17, v8 + 672);
  while (a3 < a2)
  {
    if (!*(_BYTE *)(v8 + 233))
      *(_QWORD *)(v8 + 200) = a3;
    if (ZinMirL2Config::EnumeratePatchShapeCandidates(v8 + 120, a1, a3, (void **)a4))
      ZinAssertImpl("Patch shape enumeration failed.");
    a3 *= 2;
  }
  if (!*(_BYTE *)(v8 + 233))
    *(_QWORD *)(v8 + 200) = a2;
  if (ZinMirL2Config::EnumeratePatchShapeCandidates(v8 + 120, a1, a2, (void **)a4))
    ZinAssertImpl("Patch shape enumeration failed.");
  memcpy((void *)(v8 + 120), __dst, 0x1C0uLL);
  *(_DWORD *)(v8 + 568) = __dst[112];
  if ((_DWORD *)(v8 + 120) == __dst)
  {
    *(_DWORD *)(v8 + 616) = v13;
    *(_DWORD *)(v8 + 664) = v16;
  }
  else
  {
    *(_DWORD *)(v8 + 608) = v12;
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v8 + 576), v11[2], 0);
    *(_DWORD *)(v8 + 616) = v13;
    *(_DWORD *)(v8 + 656) = v15;
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v8 + 624), v14[2], 0);
    *(_DWORD *)(v8 + 664) = v16;
    *(_DWORD *)(v8 + 704) = v18;
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v8 + 672), v17[2], 0);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v17);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v14);
  return std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v11);
}

void sub_206DBD500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(a10);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(a11);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::BailoutPatchShapeCandidatesConflictingDMABuffer@<X0>(ZinIrLocalRegAlloc *a1@<X0>, ZinANELayer *a2@<X1>, __int128 **a3@<X2>, char **a4@<X8>)
{
  uint64_t v8;
  __int128 *v9;
  __int128 *v10;
  unint64_t v11;
  char *v12;
  __int128 v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  __int128 v29;
  char *v30;
  char *v31;
  __int128 v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  __int128 v38;
  _DWORD *v40;
  _BYTE v41[7];
  __int128 v42;
  uint64_t v43;
  _DWORD __dst[113];
  uint64_t *v45[4];
  int v46;
  int v47;
  uint64_t *v48[4];
  int v49;
  int v50;
  uint64_t *v51[4];
  int v52;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  std::vector<ZinMirL2Config::PatchCandidate>::reserve((void **)a4, ((char *)a3[1] - (char *)*a3) >> 5);
  v8 = *((_QWORD *)a2 + 33);
  memcpy(__dst, (const void *)(v8 + 120), sizeof(__dst));
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v45, v8 + 576);
  v47 = *(_DWORD *)(v8 + 616);
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v48, v8 + 624);
  v40 = (_DWORD *)(v8 + 120);
  v50 = *(_DWORD *)(v8 + 664);
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v51, v8 + 672);
  v9 = *a3;
  v10 = a3[1];
  if (*a3 != v10)
  {
    while (1)
    {
      if (!*(_BYTE *)(v8 + 256))
        *(_OWORD *)(v8 + 240) = *v9;
      if (!*(_BYTE *)(v8 + 233))
        *(_QWORD *)(v8 + 200) = *((_QWORD *)v9 + 2);
      if (ZinIrLocalRegAlloc::AllocateDMABuffers(a1, a2, 1, 0))
        break;
      if (ZinIrLocalRegAlloc::AllocateDMABuffers(a1, a2, 0, 0))
      {
        v42 = *v9;
        v43 = *((_QWORD *)v9 + 2);
        *(_DWORD *)v41 = *(_DWORD *)((char *)v9 + 25);
        *(_DWORD *)&v41[3] = *((_DWORD *)v9 + 7);
        v15 = (unint64_t)a4[1];
        v16 = (unint64_t)a4[2];
        if (v15 < v16)
        {
          v17 = *v9;
          *(_QWORD *)(v15 + 16) = *((_QWORD *)v9 + 2);
          *(_OWORD *)v15 = v17;
          *(_BYTE *)(v15 + 24) = 0;
          *(_DWORD *)(v15 + 25) = *(_DWORD *)v41;
          *(_DWORD *)(v15 + 28) = *(_DWORD *)&v41[3];
          v14 = (char *)(v15 + 32);
          goto LABEL_43;
        }
        v24 = (uint64_t)(v15 - (_QWORD)*a4) >> 5;
        v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 59)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v26 = v16 - (_QWORD)*a4;
        if (v26 >> 4 > v25)
          v25 = v26 >> 4;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFE0)
          v27 = 0x7FFFFFFFFFFFFFFLL;
        else
          v27 = v25;
        if (v27)
          v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ControlEdgeInfo>>((uint64_t)(a4 + 2), v27);
        else
          v28 = 0;
        v34 = &v28[32 * v24];
        *((_QWORD *)v34 + 2) = v43;
        *(_OWORD *)v34 = v42;
        v34[24] = 0;
        *(_DWORD *)(v34 + 25) = *(_DWORD *)v41;
        *((_DWORD *)v34 + 7) = *(_DWORD *)&v41[3];
        v36 = *a4;
        v35 = a4[1];
        v37 = v34;
        if (v35 != *a4)
        {
          do
          {
            v38 = *((_OWORD *)v35 - 2);
            *(_OWORD *)(v37 - 23) = *(_OWORD *)(v35 - 23);
            *((_OWORD *)v37 - 2) = v38;
            v37 -= 32;
            v35 -= 32;
          }
          while (v35 != v36);
          v35 = v36;
        }
        v14 = v34 + 32;
        *a4 = v37;
        a4[1] = v34 + 32;
        a4[2] = &v28[32 * v27];
        if (!v35)
          goto LABEL_43;
        v18 = v35;
LABEL_42:
        operator delete(v18);
        goto LABEL_43;
      }
LABEL_44:
      ZinIrLocalRegAlloc::FreeDMADefaultBuffers((uint64_t)a1, a2);
      ZinIrLocalRegAlloc::FreeDMACachedBuffers(a1, a2);
      v9 += 2;
      if (v9 == v10)
        goto LABEL_45;
    }
    v12 = a4[1];
    v11 = (unint64_t)a4[2];
    if ((unint64_t)v12 < v11)
    {
      v13 = v9[1];
      *(_OWORD *)v12 = *v9;
      *((_OWORD *)v12 + 1) = v13;
      v14 = v12 + 32;
LABEL_43:
      a4[1] = v14;
      goto LABEL_44;
    }
    v18 = *a4;
    v19 = (v12 - *a4) >> 5;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 59)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v21 = v11 - (_QWORD)v18;
    if (v21 >> 4 > v20)
      v20 = v21 >> 4;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFE0)
      v22 = 0x7FFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ControlEdgeInfo>>((uint64_t)(a4 + 2), v22);
      v18 = *a4;
      v12 = a4[1];
    }
    else
    {
      v23 = 0;
    }
    v29 = v9[1];
    v30 = &v23[32 * v19];
    *(_OWORD *)v30 = *v9;
    *((_OWORD *)v30 + 1) = v29;
    if (v12 == v18)
    {
      v33 = &v23[32 * v19];
    }
    else
    {
      v31 = &v23[32 * v19];
      do
      {
        v32 = *((_OWORD *)v12 - 2);
        v33 = v31 - 32;
        *(_OWORD *)(v31 - 23) = *(_OWORD *)(v12 - 23);
        *((_OWORD *)v31 - 2) = v32;
        v12 -= 32;
        v31 -= 32;
      }
      while (v12 != v18);
    }
    v14 = v30 + 32;
    *a4 = v33;
    a4[1] = v30 + 32;
    a4[2] = &v23[32 * v22];
    if (!v18)
      goto LABEL_43;
    goto LABEL_42;
  }
LABEL_45:
  memcpy(v40, __dst, 0x1C0uLL);
  *(_DWORD *)(v8 + 568) = __dst[112];
  if (v40 == __dst)
  {
    *(_DWORD *)(v8 + 616) = v47;
    *(_DWORD *)(v8 + 664) = v50;
  }
  else
  {
    *(_DWORD *)(v8 + 608) = v46;
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v8 + 576), v45[2], 0);
    *(_DWORD *)(v8 + 616) = v47;
    *(_DWORD *)(v8 + 656) = v49;
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v8 + 624), v48[2], 0);
    *(_DWORD *)(v8 + 664) = v50;
    *(_DWORD *)(v8 + 704) = v52;
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v8 + 672), v51[2], 0);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v51);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v48);
  return std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v45);
}

void sub_206DBD970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  void *v17;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(a14);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(a15);
  v17 = *(void **)v15;
  if (*(_QWORD *)v15)
  {
    *(_QWORD *)(v15 + 8) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::DecreaseTileHeightWithPerfHeuristic(ZinIrHalParameters **this, ZinNELayer *a2, unint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v12;
  unint64_t Pow2;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  unint64_t *v25;
  char *v26;
  unint64_t v27;
  double *v28;
  int v29;
  double v30;
  uint64_t v31;
  double v32;
  char *v33;
  int v34;
  int v36;
  double *v37;
  int v38;
  double v39;
  int v40;
  BOOL v41;
  int v42;
  uint64_t DMABuffers;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  char *v50;
  uint64_t __dst[57];
  uint64_t *v52[4];
  int v53;
  int v54;
  uint64_t *v55[4];
  int v56;
  int v57;
  uint64_t *v58[4];
  int v59;
  _OWORD v60[2];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  void *__p;
  void *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  _BYTE v84[872];
  __int128 v85[3];

  ZinIrHalParameters::GetOperationCondition(this[2], *((double *)this[3] + 13), *((_DWORD *)this[3] + 28), *((_DWORD *)this[3] + 29), (uint64_t)v85);
  v6 = (uint64_t)this[2];
  LOWORD(__dst[0]) = 257;
  BYTE2(__dst[0]) = 1;
  *(_DWORD *)((char *)__dst + 3) = 0;
  *(_DWORD *)((char *)__dst + 6) = 0;
  BYTE2(__dst[1]) = 1;
  *(_DWORD *)((char *)&__dst[1] + 3) = 0;
  ZinIrPerf::ZinIrPerf((uint64_t)v84, v6, v85, __dst);
  v71 = 0;
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  memset(v60, 0, sizeof(v60));
  v7 = operator new(8uLL);
  __p = v7;
  *v7 = 0;
  v74 = v7 + 1;
  v73 = v7 + 1;
  v76 = 0;
  v75 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v77 = _Q0;
  v78 = _Q0;
  v79 = _Q0;
  v80 = _Q0;
  v81 = 0;
  v82 = 0;
  v12 = *((_QWORD *)a2 + 33);
  v83 = 0;
  memcpy(__dst, (const void *)(v12 + 120), 0x1C4uLL);
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v52, v12 + 576);
  v54 = *(_DWORD *)(v12 + 616);
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v55, v12 + 624);
  v57 = *(_DWORD *)(v12 + 664);
  v46 = (_QWORD *)(v12 + 624);
  v47 = (_QWORD *)(v12 + 576);
  v45 = (_QWORD *)(v12 + 672);
  v48 = (uint64_t *)(v12 + 120);
  v49 = std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v58, v12 + 672);
  Pow2 = ZinRoundDownToNextPow2(*(_QWORD *)(v12 + 200) - 1);
  v14 = 0;
  v15 = 0;
  v50 = 0;
  if (Pow2 <= a3)
    v16 = a3;
  else
    v16 = Pow2;
  while (v16 >= a3)
  {
    if (!*(_BYTE *)(v12 + 233))
      *(_QWORD *)(v12 + 200) = v16;
    if ((ZinIrLocalRegAlloc::AllocateDMABuffers((ZinIrLocalRegAlloc *)this, a2, 1, 0) & 1) != 0)
    {
      ZinIrLocalRegAlloc::FreeDMADefaultBuffers((uint64_t)this, a2);
      ZinIrLocalRegAlloc::FreeDMACachedBuffers((ZinIrLocalRegAlloc *)this, a2);
      if (ZinANELayer::CalculatePerf(a2, (ZinIrPerf *)v84, (ZinPerfDescriptor *)v60))
        goto LABEL_71;
      v17 = *((_QWORD *)&v61 + 1);
      if (v14 >= v50)
      {
        v19 = v12;
        v20 = a3;
        v21 = (v14 - v15) >> 4;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 60)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        if ((v50 - v15) >> 3 > v22)
          v22 = (v50 - v15) >> 3;
        if ((unint64_t)(v50 - v15) >= 0x7FFFFFFFFFFFFFF0)
          v23 = 0xFFFFFFFFFFFFFFFLL;
        else
          v23 = v22;
        if (v23)
        {
          if (v23 >> 60)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v24 = (char *)operator new(16 * v23);
        }
        else
        {
          v24 = 0;
        }
        v25 = (unint64_t *)&v24[16 * v21];
        *v25 = v16;
        v25[1] = v17;
        if (v14 == v15)
        {
          v15 = &v24[16 * v21];
          a3 = v20;
        }
        else
        {
          v26 = &v24[16 * v21];
          a3 = v20;
          do
          {
            *((_OWORD *)v26 - 1) = *((_OWORD *)v14 - 1);
            v26 -= 16;
            v14 -= 16;
          }
          while (v14 != v15);
          v14 = v15;
          v15 = v26;
        }
        v12 = v19;
        v50 = &v24[16 * v23];
        v18 = (char *)(v25 + 2);
        if (v14)
          operator delete(v14);
      }
      else
      {
        *(_QWORD *)v14 = v16;
        *((_QWORD *)v14 + 1) = v17;
        v18 = v14 + 16;
      }
      if (v18 - v15 >= 17)
      {
        v27 = (((unint64_t)(v18 - v15) >> 4) - 2) >> 1;
        v28 = (double *)&v15[16 * v27];
        v29 = *(_DWORD *)v28;
        v30 = v28[1];
        v31 = *((_QWORD *)v18 - 2);
        v32 = *((double *)v18 - 1);
        v33 = v18 - 16;
        if (v30 == v32)
          v34 = 0;
        else
          v34 = -127;
        if (v30 > v32)
          v34 = 1;
        if (v30 < v32)
          v34 = -1;
        _ZF = (_DWORD)v31 == v29;
        if ((int)v31 < v29)
          v36 = -1;
        else
          v36 = 1;
        if (_ZF)
          v36 = 0;
        if (v34)
          v36 = v34;
        if (v36 >= 1)
        {
          do
          {
            v37 = v28;
            *(_OWORD *)v33 = *(_OWORD *)v28;
            if (!v27)
              break;
            v27 = (v27 - 1) >> 1;
            v28 = (double *)&v15[16 * v27];
            v38 = *(_DWORD *)v28;
            v39 = v28[1];
            if (v39 == v32)
              v40 = 0;
            else
              v40 = -127;
            if (v39 > v32)
              v40 = 1;
            if (v39 < v32)
              v40 = -1;
            v41 = (_DWORD)v31 == v38;
            if ((int)v31 < v38)
              v42 = -1;
            else
              v42 = 1;
            if (v41)
              v42 = 0;
            if (!v40)
              v40 = v42;
            v33 = (char *)v37;
          }
          while (v40 > 0);
          *(_QWORD *)v37 = v31;
          v37[1] = v32;
        }
      }
    }
    else
    {
      v18 = v14;
    }
    v16 = ZinRoundDownToNextPow2(v16 - 1);
    v14 = v18;
  }
  if (v15 == v14)
  {
    memcpy(v48, __dst, 0x1C0uLL);
    *(_DWORD *)(v12 + 568) = __dst[56];
    if (v48 != __dst)
    {
      *(_DWORD *)(v12 + 608) = v53;
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>(v47, v52[2], 0);
      *(_DWORD *)(v12 + 616) = v54;
      *(_DWORD *)(v12 + 656) = v56;
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>(v46, v55[2], 0);
      *(_DWORD *)(v12 + 664) = v57;
      *(_DWORD *)(v12 + 704) = v59;
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>(v45, v58[2], 0);
LABEL_71:
      DMABuffers = 0;
      goto LABEL_72;
    }
    DMABuffers = 0;
    *(_DWORD *)(v12 + 616) = v54;
    *(_DWORD *)(v12 + 664) = v57;
  }
  else
  {
    if (!*(_BYTE *)(v12 + 233))
      *(_QWORD *)(v12 + 200) = *(_QWORD *)v15;
    if ((*(_DWORD *)(v12 + 144) - 1) <= 1)
      ZinMirL2Config::NE::SetSmallSourceMode((uint64_t)v48, 0);
    DMABuffers = ZinIrLocalRegAlloc::AllocateDMABuffers((ZinIrLocalRegAlloc *)this, a2, 1, 0);
  }
LABEL_72:
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v49);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v55);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v52);
  if (v15)
    operator delete(v15);
  if (__p)
  {
    v73 = __p;
    operator delete(__p);
  }
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)v84);
  return DMABuffers;
}

void sub_206DBDEBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v11;
  va_list va;

  va_start(va, a9);
  ZinMirL2Config::~ZinMirL2Config((ZinMirL2Config *)va);
  if (v9)
    operator delete(v9);
  v11 = (void *)STACK[0x358];
  if (STACK[0x358])
  {
    STACK[0x360] = (unint64_t)v11;
    operator delete(v11);
  }
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)&STACK[0x3D8]);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::AllocateMinimumDMABuffer(ZinIrLocalRegAlloc *this, ZinANELayer *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t DMABuffers;
  uint64_t *v14;
  uint64_t *v15;
  BOOL v16;
  __int128 v18;
  __int128 v19;
  uint64_t *v20;
  _QWORD *v21[2];

  v21[0] = 0;
  v21[1] = 0;
  v20 = (uint64_t *)v21;
  v7 = *a4;
  v8 = a4[1];
  if (*a4 != v8)
  {
    do
    {
      v9 = *(_OWORD *)(v7 + 48);
      v19 = *(_OWORD *)(v7 + 64);
      *((_QWORD *)&v18 + 1) = *((_QWORD *)&v9 + 1);
      if ((_QWORD)v19 == a3)
        std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>(&v20, (unint64_t *)&v18 + 1, (uint64_t *)&v18 + 1);
      v7 += 80;
    }
    while (v7 != v8);
  }
  v10 = *((_QWORD *)a2 + 33);
  if (!*(_BYTE *)(v10 + 233))
    *(_QWORD *)(v10 + 200) = a3;
  v11 = v20;
  if (v20 == (uint64_t *)v21)
  {
    DMABuffers = 0;
  }
  else
  {
    while (1)
    {
      if (!*(_BYTE *)(v10 + 150))
      {
        v12 = v11[4];
        *(_QWORD *)(v10 + 120) = v12;
        *(_QWORD *)(v10 + 128) = v12;
        *(_QWORD *)(v10 + 136) = v12;
      }
      DMABuffers = ZinIrLocalRegAlloc::AllocateDMABuffers(this, a2, 1, 0);
      if ((DMABuffers & 1) != 0)
        break;
      v14 = (uint64_t *)v11[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (uint64_t *)v11[2];
          v16 = *v15 == (_QWORD)v11;
          v11 = v15;
        }
        while (!v16);
      }
      v11 = v15;
      if (v15 == (uint64_t *)v21)
        goto LABEL_20;
    }
    DMABuffers = 1;
  }
LABEL_20:
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v20, v21[0]);
  return DMABuffers;
}

void sub_206DBE090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,_QWORD *a21)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a20, a21);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::OptimizeNERasterizationParamsAllocateDMABuffer(ZinIrLocalRegAlloc *this, ZinNELayer *a2)
{
  uint64_t v4;
  ZinMirL2Config *v5;
  uint64_t v6;
  unint64_t Pow2;
  ZinIrTensor *v9;
  uint64_t InterchangeDescriptor;
  uint64_t MacroblockSize;
  unint64_t v12;
  unint64_t v13;
  int L2RdMode;
  int v15;
  _BOOL4 v17;
  int v18;
  unint64_t MaxTileHeight;
  unint64_t v20;
  unint64_t v21;
  ZinIrOpLayer **v22;
  ZinIrOpLayer **v23;
  unint64_t v24;
  const ZinIrTensor *v25;
  int v26;
  int v27;
  uint64_t MinimumDMABuffer;
  void *__p[3];
  __int128 *v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  _BYTE v35[26];
  __int16 v36;
  __int16 v37;
  char v38;
  __int128 *v39;
  __int128 v40;

  if (!*(_BYTE *)(*((_QWORD *)this + 2) + 1105))
    return 1;
  v4 = *((_QWORD *)a2 + 33);
  v5 = (ZinMirL2Config *)(v4 + 120);
  if (!*(_BYTE *)(v4 + 150) || !*(_BYTE *)(v4 + 233))
  {
    *(_BYTE *)(v4 + 150) = 0;
    *(_BYTE *)(v4 + 233) = 0;
    Pow2 = ZinRoundUpToNextPow2(*(_QWORD *)(v4 + 136));
    if (*(_BYTE *)((*(uint64_t (**)(ZinNELayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0) + 164))
    {
      v9 = (ZinIrTensor *)(*(uint64_t (**)(ZinNELayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
      InterchangeDescriptor = ZinIrTensor::GetInterchangeDescriptor(v9);
      MacroblockSize = GetMacroblockSize(SHIDWORD(InterchangeDescriptor));
      Pow2 = ZinAlign(Pow2, MacroblockSize);
    }
    else
    {
      MacroblockSize = 1;
    }
    v12 = (*(uint64_t (**)(ZinNELayer *, uint64_t))(*(_QWORD *)a2 + 368))(a2, 3);
    if (v12 / Pow2 >= 0x7D1)
      return ZinIrLocalRegAlloc::DecreaseTileHeightWithPerfHeuristic((ZinIrHalParameters **)this, a2, MacroblockSize);
    v13 = v12;
    L2RdMode = ZinEngineLayerMirInfo::GetL2RdMode(*((_QWORD *)a2 + 33), 0);
    v15 = *(_DWORD *)(*((_QWORD *)a2 + 33) + 1632);
    v17 = L2RdMode == 3 && v15 == 3;
    v18 = *(unsigned __int8 *)((*(uint64_t (**)(ZinNELayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0)+ 164);
    MaxTileHeight = ZinIrLocalRegAlloc::GetMaxTileHeight(this, a2);
    v20 = MaxTileHeight;
    if (v18)
    {
      v21 = ZinAlign(MaxTileHeight, Pow2);
      if (v21 >= v13)
        v20 = v13;
      else
        v20 = v21;
    }
    ZinIrLocalRegAlloc::EnumerateWorkunitCandidatesWithMulticast(this, a2, MacroblockSize, v20, Pow2, v17, (uint64_t)&v39);
    v22 = (ZinIrOpLayer **)*((_QWORD *)this + 5);
    v23 = (ZinIrOpLayer **)*((_QWORD *)this + 6);
    if (v22 != v23)
    {
      v24 = 0;
      do
        v24 += ZinIrOpLayer::IsNELayer(*v22++);
      while (v22 != v23);
      if (v24 >> 4 > 0x270)
        goto LABEL_33;
    }
    ZinIrLocalRegAlloc::RemoveWorkUnitCandidatesConflictingWithDMABuffer((FifoMode **)this, (ZinEngineLayerMirInfo **)a2, &v39, (uint64_t)&v30);
    if (v39)
    {
      *(_QWORD *)&v40 = v39;
      operator delete(v39);
    }
    v39 = v30;
    v40 = v31;
    if (v30 == (__int128 *)v31)
    {
      MinimumDMABuffer = ZinIrLocalRegAlloc::DecreaseTileHeightWithPerfHeuristic((ZinIrHalParameters **)this, a2, MacroblockSize);
    }
    else
    {
LABEL_33:
      ZinMirL2Config::ZinMirSetTileHeight(v5, a2, L2RdMode == 3);
      v36 = (L2RdMode == 3) | ((v15 == 3) << 8);
      v37 = 1;
      v38 = 1;
      v32 = 0;
      v33 = 0;
      v30 = 0;
      *(_QWORD *)&v31 = 0;
      BYTE8(v31) = 0;
      v34 = 0u;
      memset(v35, 0, 21);
      v35[21] = 1;
      ZinIrOpLayer::GetInputTensor(a2, 0);
      ZinIrOpLayer::GetInputTensorDimensions(a2, __p);
      v25 = (const ZinIrTensor *)(*(uint64_t (**)(ZinNELayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
      ZinIrLocalRegAlloc::GetInterleave(this, v25);
      ZinIrLocalRegAlloc::GetOutputCropOffsetXLsbs(this, a2);
      v26 = ZinMirNERastParamsOpt::EvaluateComputeCostForTileHeightCandidates();
      v27 = (int)__p[0];
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v26)
      {
        v6 = 0;
        goto LABEL_43;
      }
      ZinIrLocalRegAlloc::UpdateNERasterizationParams(v27, v5, (MirInfoChannelAssignment *)&v30);
      if ((ZinIrLocalRegAlloc::AllocateDMABuffers(this, a2, 1, 0) & 1) != 0
        || (ZinIrLocalRegAlloc::AllocateDMABuffers(this, a2, 0, 0) & 1) != 0
        || (ZinIrLocalRegAlloc::DecreaseTileHeightWithPerfHeuristic((ZinIrHalParameters **)this, a2, MacroblockSize) & 1) != 0)
      {
        v6 = 1;
        goto LABEL_43;
      }
      MinimumDMABuffer = ZinIrLocalRegAlloc::AllocateMinimumDMABuffer(this, a2, MacroblockSize, (uint64_t *)&v39);
    }
    v6 = MinimumDMABuffer;
LABEL_43:
    if (v39)
    {
      *(_QWORD *)&v40 = v39;
      operator delete(v39);
    }
    return v6;
  }
  v6 = 1;
  if ((ZinIrLocalRegAlloc::AllocateDMABuffers(this, a2, 1, 0) & 1) != 0
    || (ZinIrLocalRegAlloc::AllocateDMABuffers(this, a2, 0, 0) & 1) != 0)
  {
    return v6;
  }
  if (!*(_BYTE *)(v4 + 233))
  {
    *(_QWORD *)(v4 + 200) = 1;
    if ((*(_DWORD *)(v4 + 144) - 1) <= 1)
      ZinMirL2Config::NE::SetSmallSourceMode(v4 + 120, 0);
  }
  return ZinIrLocalRegAlloc::AllocateDMABuffers(this, a2, 0, 0);
}

void sub_206DBE4F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  v13 = *(void **)(v11 - 104);
  if (v13)
  {
    *(_QWORD *)(v11 - 96) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrLocalRegAlloc::ZinIrCreateKernelTensorSymbols(ZinIrLocalRegAlloc *this, ZinEngineLayerMirInfo **a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  ZinIrTensor *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  ZinIrSymbol **v15;
  ZinIrSymbol *v16;
  uint64_t *v17;
  _BOOL8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  MirInfoChannelAssignment *ChannelAssignment;
  uint64_t NumNeededNEs;
  unint64_t v29;
  _QWORD *v30;
  uint64_t i;
  _QWORD *v32;
  ZinIrSymbol *SymbolByName;
  ZinEngineLayerMirInfo *v34;
  unint64_t *v35;
  unint64_t v36;
  int v37;
  _BOOL8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  std::string v48;
  ZinIrSymbol *v49;
  ZinIrTensor *v50;
  uint64_t v51;
  std::string __p;
  _BYTE v53[304];
  uint64_t v54;
  std::string v55;
  _BYTE v56[304];
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if (!(*((unsigned int (**)(ZinEngineLayerMirInfo **))*a2 + 15))(a2))
    goto LABEL_23;
  (*((void (**)(uint64_t *__return_ptr, ZinEngineLayerMirInfo **))*a2 + 16))(&v54, a2);
  v4 = *(_QWORD *)(v54 + 104);
  if (!v4 || (v5 = *(uint64_t **)(v4 + 40), v5 == *(uint64_t **)(v4 + 48)))
    v6 = 0;
  else
    v6 = *v5;
  v7 = (std::__shared_weak_count *)v55.__r_.__value_.__r.__words[0];
  if (!v55.__r_.__value_.__r.__words[0])
    goto LABEL_10;
  v8 = (unint64_t *)(v55.__r_.__value_.__r.__words[0] + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
  {
LABEL_10:
    if (v6)
      goto LABEL_11;
LABEL_23:
    v18 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v18)
      ZinIrLocalRegAlloc::ZinIrCreateKernelTensorSymbols(v18, v19, v20, v21, v22, v23, v24, v25);
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinIrLocalRegAlloc::ZinIrCreateKernelTensorSymbols();
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinIrLocalRegAlloc::ZinIrCreateKernelTensorSymbols((uint64_t)a2);
    return 3;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if (!v6)
    goto LABEL_23;
LABEL_11:
  v50 = 0;
  (*((void (**)(uint64_t *__return_ptr, ZinEngineLayerMirInfo **))*a2 + 16))(&v54, a2);
  v11 = (ZinIrTensor *)v54;
  v10 = (std::__shared_weak_count *)v55.__r_.__value_.__r.__words[0];
  if (v55.__r_.__value_.__r.__words[0])
  {
    v12 = (unint64_t *)(v55.__r_.__value_.__r.__words[0] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v50 = v11;
  v14 = *((_QWORD *)v11 + 13);
  if (!v14 || (v15 = *(ZinIrSymbol ***)(v14 + 40), v15 == *(ZinIrSymbol ***)(v14 + 48)))
    v16 = 0;
  else
    v16 = *v15;
  LODWORD(v54) = ZinIrSymbol::GetMemType(v16);
  v17 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>((_QWORD *)this + 13, (int *)&v54);
  if (v17)
    v46 = v17[3];
  else
    v46 = 0;
  ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(a2[33]);
  NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs(ChannelAssignment);
  if (!NumNeededNEs)
    return 0;
  v29 = 0;
  v30 = (_QWORD *)((char *)this + 144);
  v47 = *((_QWORD *)a2[17] + 98);
  for (i = 40; ; i += 56)
  {
    v49 = 0;
    v32 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v30, &v50);
    GetTensorKernelSymbolName((uint64_t)(a2 + 17), v29, &v48);
    SymbolByName = (ZinIrSymbol *)ZinIrSymbolTable::GetSymbolByName(*((_QWORD *)v16 + 1) + 64, (void **)&v48.__r_.__value_.__l.__data_);
    v49 = SymbolByName;
    if (!SymbolByName)
    {
      ZinIrSymbol::Descriptor::Descriptor((uint64_t)&v54, (__int128 *)&v48, v32 + 3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v47 + 40) + 32) + i), (char *)a2[17] + 176);
      v34 = a2[33];
      if (*((_BYTE *)v34 + 2))
        v35 = (unint64_t *)(*((_QWORD *)v34 + 7) + 8 * v29);
      else
        v35 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v47 + 40) + 32) + i - 40);
      v36 = *v35;
      v51 = v54;
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
      else
        __p = v55;
      memcpy(v53, v56, sizeof(v53));
      v37 = ZinIrMemoryPool::CreateSymbolAlias(v46, &v51, v36, v36, v16, 0, (uint64_t *)&v49);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55.__r_.__value_.__l.__data_);
      if (v37)
        goto LABEL_54;
      SymbolByName = v49;
    }
    if (ZinIrTensor::AddTensorKernelNESymbol(v50, SymbolByName))
      break;
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    if (NumNeededNEs == ++v29)
      return 0;
  }
  v38 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v38)
    ZinIrLocalRegAlloc::ZinIrCreateKernelTensorSymbols(v38, v39, v40, v41, v42, v43, v44, v45);
LABEL_54:
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  return 3;
}

void sub_206DBE910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a70;

  if (a70 < 0)
    operator delete(__p);
  if (a19 < 0)
    operator delete(a14);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::GetDramSortingPolicy(uint64_t a1, const void **a2)
{
  int v2;
  const void *v3;
  const void **v4;
  const void *v5;
  const void *v6;
  int v7;
  BOOL v8;
  const void *v10;
  uint64_t result;
  const void *v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *((char *)a2 + 23);
  if (v2 >= 0)
    v3 = (const void *)*((unsigned __int8 *)a2 + 23);
  else
    v3 = a2[1];
  if (v3 == (const void *)11)
  {
    if (v2 >= 0)
      v10 = a2;
    else
      v10 = *a2;
    if (!memcmp(v10, "costofreads", 0xBuLL))
      return 1;
LABEL_29:
    v13 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v13)
      ZinIrLocalRegAlloc::GetDramSortingPolicy(v13, v14, v15, v16, v17, v18, v19, v20);
    return 2;
  }
  if (v3 != (const void *)15)
  {
    if (v3 == (const void *)17)
    {
      v4 = v2 >= 0 ? a2 : (const void **)*a2;
      v5 = *v4;
      v6 = v4[1];
      v7 = *((unsigned __int8 *)v4 + 16);
      v8 = v5 == (const void *)0x6E656874657A6973 && v6 == (const void *)0x676E61726576696CLL;
      if (v8 && v7 == 101)
        return 2;
    }
    goto LABEL_29;
  }
  if (v2 >= 0)
    v12 = a2;
  else
    v12 = *a2;
  result = memcmp(v12, "orderofcreation", 0xFuLL);
  if ((_DWORD)result)
  {
    if (!memcmp(v12, "sizebyliverange", 0xFuLL))
      return 3;
    goto LABEL_29;
  }
  return result;
}

uint64_t ZinIrLocalRegAlloc::AllocateFixedL2Tensors(ZinIrLocalRegAlloc *this, ZinIrNetworkStatus *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  const ZinIrOpLayer ***v12;
  ZinIrTensor *v13;
  ZinIrTensor *v14;
  char *v15;
  char *v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  ZinIrTensor *v21;
  char *v22;
  ZinIrTensor *v23;
  uint64_t v24;
  const ZinIrOpLayer **v25;
  const ZinIrOpLayer ****v26;
  BOOL v27;
  ZinIrTensor **v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;
  StaticWrapInfo *v32;
  _DWORD *v33;
  uint64_t v34;
  char MultipleSymbolsToTensor;
  _QWORD *v36;
  uint64_t v38;
  ZinIrTensor *v39;
  ZinIrTensor *v40;
  _QWORD v41[3];
  _QWORD *v42[6];
  ZinIrTensor *v43;
  ZinIrTensor *v44;
  unint64_t v45;
  uint64_t *v46;
  _QWORD *v47[3];

  v47[0] = 0;
  v47[1] = 0;
  v46 = (uint64_t *)v47;
  v3 = (uint64_t *)*((_QWORD *)this + 5);
  v4 = (uint64_t *)*((_QWORD *)this + 6);
  while (v3 != v4)
  {
    v5 = *v3;
    v43 = 0;
    v43 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0, 0);
    if (!ZinIrTensor::HasParent(v43))
    {
      v6 = *((_QWORD *)v43 + 13);
      if (!v6 || (v7 = *(_QWORD **)(v6 + 40), v7 == *(_QWORD **)(v6 + 48)) || !*v7)
      {
        v41[0] = v43;
        v8 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 38, v41);
        if (v8)
        {
          v9 = v8 + 3;
          goto LABEL_10;
        }
        v10 = *(_QWORD *)(v41[0] + 104);
        if (v10)
        {
          v9 = (_DWORD *)(v10 + 96);
LABEL_10:
          if (*v9 == 1)
            std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>(&v46, (uint64_t *)&v43, (uint64_t *)&v43);
        }
      }
    }
    ++v3;
  }
  v43 = 0;
  v44 = 0;
  v45 = 0;
  if (ZinIrCompilerParameters::getSingleChannelEWOpCopyRemoval(*((ZinIrCompilerParameters **)this + 3)))
  {
    v11 = *(_QWORD *)this + 8;
    v12 = **(const ZinIrOpLayer *****)this;
    if (v12 != (const ZinIrOpLayer ***)v11)
    {
      do
      {
        ZinMirEwCopyOptimizer::ZinMirEwCopyOptimizer((ZinMirEwCopyOptimizer *)v41, *(_QWORD *)(*((_QWORD *)this + 2) + 456), *(_QWORD *)(*((_QWORD *)this + 2) + 416));
        ZinMirEwCopyOptimizer::FindTensorGroupAllocatedTogether((ZinMirEwCopyOptimizer *)v41, v12 + 5);
        ZinMirEwCopyOptimizer::GetTensorsForGroupAllocation((ZinMirEwCopyOptimizer *)v41, (uint64_t)&v39);
        v13 = v39;
        v14 = v40;
        if (v39 != v40)
        {
          do
          {
            v38 = 0;
            v38 = *(_QWORD *)v13;
            if (std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)&v46, &v38))
            {
              v15 = (char *)v44;
              if ((unint64_t)v44 >= v45)
              {
                v17 = (v44 - v43) >> 3;
                if ((unint64_t)(v17 + 1) >> 61)
                  std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                v18 = (uint64_t)(v45 - (_QWORD)v43) >> 2;
                if (v18 <= v17 + 1)
                  v18 = v17 + 1;
                if (v45 - (unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
                  v19 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v19 = v18;
                if (v19)
                  v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v45, v19);
                else
                  v20 = 0;
                v21 = (ZinIrTensor *)&v20[8 * v17];
                *(_QWORD *)v21 = v38;
                v16 = (char *)v21 + 8;
                v23 = v43;
                v22 = (char *)v44;
                if (v44 != v43)
                {
                  do
                  {
                    v24 = *((_QWORD *)v22 - 1);
                    v22 -= 8;
                    *((_QWORD *)v21 - 1) = v24;
                    v21 = (ZinIrTensor *)((char *)v21 - 8);
                  }
                  while (v22 != (char *)v23);
                  v22 = (char *)v43;
                }
                v43 = v21;
                v44 = (ZinIrTensor *)v16;
                v45 = (unint64_t)&v20[8 * v19];
                if (v22)
                  operator delete(v22);
              }
              else
              {
                *(_QWORD *)v44 = v38;
                v16 = v15 + 8;
              }
              v44 = (ZinIrTensor *)v16;
              std::__tree<std::__value_type<ZinIrOpLayer *,float>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,float>,ZinIrIdComparator<ZinIrOpLayer *>,true>,std::allocator<std::__value_type<ZinIrOpLayer *,float>>>::__erase_unique<ZinIrOpLayer *>(&v46, &v38);
            }
            v13 = (ZinIrTensor *)((char *)v13 + 8);
          }
          while (v13 != v14);
          v13 = v39;
        }
        if (v13)
        {
          v40 = v13;
          operator delete(v13);
        }
        std::__tree<std::__value_type<int,std::set<ZinIrInitInfo const*>>,std::__map_value_compare<int,std::__value_type<int,std::set<ZinIrInitInfo const*>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<ZinIrInitInfo const*>>>>::destroy((uint64_t)v42, v42[1]);
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v41, (_QWORD *)v41[1]);
        v25 = v12[1];
        if (v25)
        {
          do
          {
            v26 = (const ZinIrOpLayer ****)v25;
            v25 = (const ZinIrOpLayer **)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (const ZinIrOpLayer ****)v12[2];
            v27 = *v26 == v12;
            v12 = (const ZinIrOpLayer ***)v26;
          }
          while (!v27);
        }
        v12 = (const ZinIrOpLayer ***)v26;
      }
      while (v26 != (const ZinIrOpLayer ****)v11);
    }
  }
  std::vector<ZinIrTensor *>::insert<std::__tree_const_iterator<ZinIrTensor *,std::__tree_node<ZinIrTensor *,void *> *,long>,0>((uint64_t)&v43, (char *)v44, v46, v47);
  v28 = (ZinIrTensor **)v43;
  v29 = (char *)v44;
  if (v43 != v44)
  {
    do
    {
      v39 = *v28;
      v41[0] = v39;
      v30 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 38, v41);
      if (v30)
      {
        v33 = v30 + 3;
      }
      else
      {
        v34 = *(_QWORD *)(v41[0] + 104);
        if (!v34)
          goto LABEL_63;
        v33 = (_DWORD *)(v34 + 96);
      }
      if (*v33 != 1)
LABEL_63:
        ZinAssertImpl("all tensors should have L2 allocation hint.");
      if (*(_BYTE *)(*((_QWORD *)this + 2) + 1239))
        MultipleSymbolsToTensor = ZinIrLocalRegAlloc::AllocateMultipleSymbolsToTensor((const ZinIrTensor **)this, v39, v31, v32);
      else
        MultipleSymbolsToTensor = ZinIrLocalRegAlloc::AllocateStaticCircularTensor((const ZinIrTensor **)this, v39, v31, v32);
      if ((MultipleSymbolsToTensor & 1) == 0)
      {
        v36 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(*((_QWORD **)this + 4), &v39);
        if (!v36 || !*((_DWORD *)v36 + 6))
          ZinIrLocalRegAlloc::AllocateResidentTensor((const ZinIrTensor **)this, v39, 1);
      }
      ++v28;
    }
    while (v28 != (ZinIrTensor **)v29);
    v28 = (ZinIrTensor **)v43;
  }
  if (v28)
  {
    v44 = (ZinIrTensor *)v28;
    operator delete(v28);
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v46, v47[0]);
  return 0;
}

void sub_206DBEE50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  uint64_t v25;

  if (__p)
    operator delete(__p);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v25 - 112, *(_QWORD **)(v25 - 104));
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::GetAllocationHint(ZinIrLocalRegAlloc *this, const ZinIrTensor *a2)
{
  _QWORD *v2;
  unsigned int *v3;
  uint64_t v4;
  const ZinIrTensor *v6;

  v6 = a2;
  v2 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 38, &v6);
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 3);
  }
  else
  {
    v4 = *((_QWORD *)v6 + 13);
    if (!v4)
      return 0;
    v3 = (unsigned int *)(v4 + 96);
  }
  return *v3;
}

BOOL ZinIrCompilerParameters::getSingleChannelEWOpCopyRemoval(ZinIrCompilerParameters *this)
{
  char *v1;
  int v2;
  void *__p[2];
  char v5;

  v1 = (char *)this + 680;
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_207AF6795);
  v2 = *(unsigned __int8 *)std::map<std::string,BOOL>::at((uint64_t)v1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2 != 0;
}

void sub_206DBEF74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinMirEwCopyOptimizer::~ZinMirEwCopyOptimizer(ZinMirEwCopyOptimizer *this)
{
  std::__tree<std::__value_type<int,std::set<ZinIrInitInfo const*>>,std::__map_value_compare<int,std::__value_type<int,std::set<ZinIrInitInfo const*>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<ZinIrInitInfo const*>>>>::destroy((uint64_t)this + 24, *((_QWORD **)this + 4));
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this, *((_QWORD **)this + 1));
}

uint64_t ZinIrLocalRegAlloc::AllocateGuidedResidentTensors(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  NSObject *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  uint64_t v12;
  StaticWrapInfo *v13;
  _QWORD *v14;
  BOOL StaticCircularTensor;
  ZinIrTensor *v16;
  uint8_t buf[4];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v2 = a2[2];
  if (!v2)
    return 0;
  v5 = MEMORY[0x24BDACB70];
  while (1)
  {
    v16 = *(ZinIrTensor **)(a2[1] + 16);
    ZinIrScheduleUtil::ZinOrderedSet<ZinIrOpLayer *>::PopFront(a2);
    if (ZinIrLocalRegAlloc::IsNonSeedInplaceTensor(a1, (uint64_t)v16, 1))
      goto LABEL_26;
    v6 = *((_QWORD *)v16 + 13);
    if (v6)
    {
      v7 = *(_QWORD **)(v6 + 40);
      if (v7 != *(_QWORD **)(v6 + 48))
      {
        if (*v7)
          break;
      }
    }
    StaticCircularTensor = 0;
    v8 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(*(_QWORD **)(a1 + 32), &v16);
    if (v8)
    {
      v9 = v8;
      v10 = *((_DWORD *)v8 + 6);
      if (!v10)
      {
        if (!ZinIrLocalRegAlloc::AllocateResidentTensor((const ZinIrTensor **)a1, v16, 1))
          goto LABEL_25;
        goto LABEL_26;
      }
      if (CpAllocUtils::IsL2Inplace(v10))
      {
        result = ZinIrLocalRegAlloc::AllocateL2InplaceTensors((ZinIrLocalRegAlloc *)a1, v16, &StaticCircularTensor);
        if ((_DWORD)result)
          return result;
      }
      else if (CpAllocUtils::IsL2Dependent(*((_DWORD *)v9 + 6)))
      {
        result = ZinIrLocalRegAlloc::AllocateL2DependentTensor((ZinIrLocalRegAlloc *)a1, v16, &StaticCircularTensor);
        if ((_DWORD)result)
          return result;
      }
      else if (*((_DWORD *)v9 + 6) == 6)
      {
        StaticCircularTensor = ZinIrLocalRegAlloc::AllocateStaticCircularTensor((const ZinIrTensor **)a1, v16, v12, v13);
        if (StaticCircularTensor)
          goto LABEL_26;
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 24) + 96) & 0x10) != 0 && os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
        {
          v14 = (_QWORD *)((char *)v16 + 24);
          if (*((char *)v16 + 47) < 0)
            v14 = (_QWORD *)*v14;
          *(_DWORD *)buf = 136315138;
          v18 = v14;
          _os_log_impl(&dword_2069AB000, v5, OS_LOG_TYPE_INFO, "Unable to allocate %s in L2 Circular buffer. It will be allocated by AllocateFlexibleTensors() \n", buf, 0xCu);
        }
      }
    }
    if (!StaticCircularTensor)
LABEL_25:
      ZinIrScheduleUtil::ZinOrderedSet<ZinIrOpLayer *>::PushBack(a2, (uint64_t)v16);
LABEL_26:
    if (!--v2)
      return 0;
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    ZinIrLocalRegAlloc::AllocateGuidedResidentTensors();
  return 3;
}

uint64_t ZinIrLocalRegAlloc::AllocateL2DependentTensor(ZinIrLocalRegAlloc *this, ZinIrTensor *a2, BOOL *a3)
{
  const ZinIrTensor *v6;
  char IsL2Dependentable;
  uint64_t v8;
  StaticWrapInfo *v9;
  char *v10;
  char *v11;
  ZinANELayer *v12;
  ZinANELayer *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  char *v20;
  uint64_t v21;
  int ResidentTensor;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void **v28;
  _DWORD *v29;
  unint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  unint64_t v33;
  char v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void ***v38;

  v35 = 0;
  v36 = 0;
  v37 = 0;
  *a3 = 0;
  v6 = (const ZinIrTensor *)*((_QWORD *)this + 2);
  LOBYTE(v31) = 0;
  v34 = 0;
  IsL2Dependentable = ZinIrRegAllocUtil::IsL2Dependentable(a2, v6, &v35, (ZinTensorFamilyUtil *)&v31);
  std::__optional_destruct_base<ZinTensorFamilyUtil,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v31);
  if ((IsL2Dependentable & 1) != 0)
  {
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v10 = v35;
    v11 = v36;
    if (v35 == v36)
    {
      v20 = v35;
LABEL_16:
      if ((unint64_t)(v20 - v10) < 0x11)
        ResidentTensor = ZinIrLocalRegAlloc::AllocateResidentTensor((const ZinIrTensor **)this, a2, 1);
      else
        ResidentTensor = ZinIrLocalRegAlloc::AllocateStaticCircularTensor((const ZinIrTensor **)this, a2, v8, v9);
      if (ResidentTensor)
      {
        v21 = 0;
        *a3 = 1;
      }
      else
      {
        *a3 = 0;
        v23 = v35;
        if (v36 == v35)
        {
LABEL_25:
          v21 = 0;
        }
        else
        {
          v24 = 0;
          v25 = 0;
          v26 = 0;
          while (!ZinIrLocalRegAlloc::RevertL2DependentConfiguration(this, *(ZinANELayer **)&v23[v25], *(ZinANELayer **)&v23[v25 + 8], (const ZinMirL2Config *)(v31 + v24 * 8), (const ZinMirL2Config *)&v28[v24]))
          {
            ++v26;
            v23 = v35;
            v25 += 16;
            v24 += 74;
            if (v26 >= (v36 - v35) >> 4)
              goto LABEL_25;
          }
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            ZinIrLocalRegAlloc::AllocateL2DependentTensor();
          v21 = 3;
        }
      }
    }
    else
    {
      while (1)
      {
        v12 = *(ZinANELayer **)v10;
        v13 = (ZinANELayer *)*((_QWORD *)v10 + 1);
        if (*(_QWORD *)(*(_QWORD *)v10 + 48) != *((_QWORD *)v13 + 6))
          break;
        v14 = (_DWORD *)(*((_QWORD *)v12 + 33) + 120);
        v15 = v32;
        if ((unint64_t)v32 >= v33)
        {
          v16 = (_DWORD *)std::vector<ZinMirL2Config>::__push_back_slow_path<ZinMirL2Config const&>(&v31, v14);
        }
        else
        {
          std::construct_at[abi:ne180100]<ZinMirL2Config,ZinMirL2Config const&,ZinMirL2Config*>(v32, v14);
          v16 = v15 + 148;
        }
        v32 = v16;
        v17 = (_DWORD *)(*((_QWORD *)v13 + 33) + 120);
        v18 = v29;
        if ((unint64_t)v29 >= v30)
        {
          v19 = (_DWORD *)std::vector<ZinMirL2Config>::__push_back_slow_path<ZinMirL2Config const&>((uint64_t *)&v28, v17);
        }
        else
        {
          std::construct_at[abi:ne180100]<ZinMirL2Config,ZinMirL2Config const&,ZinMirL2Config*>(v29, v17);
          v19 = v18 + 148;
        }
        v29 = v19;
        ZinIrLocalRegAlloc::SetL2DepPairWorkUnits(this, v12, v13);
        v10 += 16;
        if (v10 == v11)
        {
          v10 = v35;
          v20 = v36;
          goto LABEL_16;
        }
      }
      v21 = 0;
      *a3 = 0;
    }
    v38 = &v28;
    std::vector<ZinMirL2Config>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
    v28 = (void **)&v31;
    std::vector<ZinMirL2Config>::__destroy_vector::operator()[abi:ne180100](&v28);
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinIrLocalRegAlloc::AllocateL2DependentTensor();
    v21 = 3;
  }
  if (v35)
  {
    v36 = v35;
    operator delete(v35);
  }
  return v21;
}

void sub_206DBF444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  void *v15;

  *(_QWORD *)(v13 - 88) = &a10;
  std::vector<ZinMirL2Config>::__destroy_vector::operator()[abi:ne180100]((void ***)(v13 - 88));
  a10 = (void **)&a13;
  std::vector<ZinMirL2Config>::__destroy_vector::operator()[abi:ne180100](&a10);
  v15 = *(void **)(v13 - 112);
  if (v15)
  {
    *(_QWORD *)(v13 - 104) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(a1);
}

_QWORD *ZinIrLocalRegAlloc::GetAllocationGuidance(ZinIrLocalRegAlloc *this, const ZinIrTensor *a2)
{
  _QWORD *result;
  _QWORD *v4;
  const ZinIrTensor *v5;

  v5 = a2;
  result = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(*((_QWORD **)this + 4), &v5);
  if (result)
  {
    v4 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(*((_QWORD **)this + 4), &v5);
    if (!v4)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    return (_QWORD *)(*((unsigned int *)v4 + 6) | 0x100000000);
  }
  return result;
}

uint64_t ZinIrLocalRegAlloc::ChangeEngineLayerSchedule(ZinIrLocalRegAlloc *this, ZinANELayer *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t i;
  unint64_t v9;
  ZinIrTensor *InputTensor;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  void **v14;
  void *v15;
  ZinIrTensor *v16;
  uint64_t **v17;
  uint64_t **v18;
  uint64_t v19;
  void **v20;
  void *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t **v24;
  char *v25;
  void *v26;
  int64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t **v39;
  char *v40;
  void *v41;
  int64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t **v54;
  uint64_t v55;
  void **v56;
  uint64_t v57;
  unint64_t **v58;
  uint64_t v59;
  unint64_t *v60;
  uint64_t v61;
  unint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  ZinIrSection **v67;
  ZinIrSection **v68;
  uint64_t *v69;
  ZinIrSection *v70;
  uint64_t *v71;
  uint64_t *v72;
  BOOL v73;
  uint64_t **v74;
  uint64_t **v75;
  unint64_t v76;
  uint64_t *v77;
  unint64_t v78;
  _QWORD *v79;
  uint64_t *v80;
  uint64_t *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t *v91;
  unint64_t j;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t *p_j;
  unint64_t **v97;
  void *v98;
  void **v99;
  uint64_t v100;
  unint64_t *v101;
  unint64_t **v102;
  void *__p;
  void *__src;
  unint64_t v105;
  uint64_t *v106;
  _QWORD *v107[2];
  uint64_t *v108;
  _QWORD *v109[2];
  unint64_t v110[2];

  v110[0] = a3;
  v7 = *((_QWORD *)a2 + 19);
  for (i = *((_QWORD *)a2 + 11); i != *((_QWORD *)a2 + 12); i += 8)
  {
    if (*(_QWORD *)(*(_QWORD *)i + 48) > a3)
      return 0;
  }
  if (*((_QWORD *)a2 + 6) != a3)
  {
    ZinEngineLayerMirInfo::GetAllValidL2Symbols(*((ZinEngineLayerMirInfo **)a2 + 33), (uint64_t)&v108);
    v107[0] = 0;
    v107[1] = 0;
    v106 = (uint64_t *)v107;
    if (*((_QWORD *)a2 + 12) != *((_QWORD *)a2 + 11))
    {
      v9 = 0;
      do
      {
        InputTensor = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(a2, v9);
        ZinIrTensor::GetTensorFamily(InputTensor, (uint64_t)&__p);
        v11 = (uint64_t **)__p;
        v12 = (uint64_t **)__src;
        if (__p != __src)
        {
          do
          {
            v101 = 0;
            v101 = (unint64_t *)*v11;
            v13 = v101[13];
            if (!v13 || (v14 = *(void ***)(v13 + 40), v14 == *(void ***)(v13 + 48)))
              v15 = 0;
            else
              v15 = *v14;
            v98 = v15;
            std::__tree<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::__emplace_unique_key_args<ZinIrSymbol *,ZinIrSymbol * const&>(&v108, (uint64_t *)&v98, (uint64_t *)&v98);
            std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>(&v106, (uint64_t *)&v101, (uint64_t *)&v101);
            ++v11;
          }
          while (v11 != v12);
          v11 = (uint64_t **)__p;
        }
        if (v11)
        {
          __src = v11;
          operator delete(v11);
        }
        ++v9;
      }
      while (v9 < (uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 3);
    }
    v16 = (ZinIrTensor *)(*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
    ZinIrTensor::GetTensorFamily(v16, (uint64_t)&__p);
    v17 = (uint64_t **)__p;
    v18 = (uint64_t **)__src;
    if (__p != __src)
    {
      do
      {
        v101 = 0;
        v101 = (unint64_t *)*v17;
        v19 = v101[13];
        if (!v19 || (v20 = *(void ***)(v19 + 40), v20 == *(void ***)(v19 + 48)))
          v21 = 0;
        else
          v21 = *v20;
        v98 = v21;
        std::__tree<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::__emplace_unique_key_args<ZinIrSymbol *,ZinIrSymbol * const&>(&v108, (uint64_t *)&v98, (uint64_t *)&v98);
        std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>(&v106, (uint64_t *)&v101, (uint64_t *)&v101);
        ++v17;
      }
      while (v17 != v18);
      v17 = (uint64_t **)__p;
    }
    if (v17)
    {
      __src = v17;
      operator delete(v17);
    }
    __p = 0;
    std::__tree<ZinIrSymbol const*,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol const*>>::__erase_unique<ZinIrSymbol const*>(&v108, (uint64_t *)&__p);
    __p = 0;
    __src = 0;
    v105 = 0;
    LODWORD(v101) = 2;
    v22 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>((_QWORD *)this + 13, (int *)&v101);
    if (v22)
    {
      v23 = v22[3];
      if (v23)
      {
        ZinIrMemoryPool::GetSections(v23, 4, &v101);
        v24 = v102;
        v25 = (char *)__src;
        if ((unint64_t)__src >= v105)
        {
          v28 = ((_BYTE *)__src - (_BYTE *)__p) >> 3;
          if ((unint64_t)(v28 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v29 = (uint64_t)(v105 - (_QWORD)__p) >> 2;
          if (v29 <= v28 + 1)
            v29 = v28 + 1;
          if (v105 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
            v30 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v30 = v29;
          if (v30)
            v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v105, v30);
          else
            v31 = 0;
          v32 = &v31[8 * v28];
          v33 = &v31[8 * v30];
          *(_QWORD *)v32 = v24[2];
          v26 = v32 + 8;
          v35 = (char *)__p;
          v34 = (char *)__src;
          if (__src != __p)
          {
            do
            {
              v36 = *((_QWORD *)v34 - 1);
              v34 -= 8;
              *((_QWORD *)v32 - 1) = v36;
              v32 -= 8;
            }
            while (v34 != v35);
            v34 = (char *)__p;
          }
          __p = v32;
          __src = v26;
          v105 = (unint64_t)v33;
          if (v34)
            operator delete(v34);
        }
        else
        {
          *(_QWORD *)__src = v102[2];
          v26 = v25 + 8;
        }
        __src = v26;
        std::__list_imp<ZinIrSection *>::clear(&v101);
      }
    }
    LODWORD(v101) = 1;
    v37 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>((_QWORD *)this + 13, (int *)&v101);
    if (v37)
    {
      v38 = v37[3];
      if (v38)
      {
        ZinIrMemoryPool::GetSections(v38, 4, &v101);
        v39 = v102;
        v40 = (char *)__src;
        if ((unint64_t)__src >= v105)
        {
          v42 = ((_BYTE *)__src - (_BYTE *)__p) >> 3;
          if ((unint64_t)(v42 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v43 = (uint64_t)(v105 - (_QWORD)__p) >> 2;
          if (v43 <= v42 + 1)
            v43 = v42 + 1;
          if (v105 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
            v44 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v44 = v43;
          if (v44)
            v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v105, v44);
          else
            v45 = 0;
          v46 = &v45[8 * v42];
          v47 = &v45[8 * v44];
          *(_QWORD *)v46 = v39[2];
          v41 = v46 + 8;
          v49 = (char *)__p;
          v48 = (char *)__src;
          if (__src != __p)
          {
            do
            {
              v50 = *((_QWORD *)v48 - 1);
              v48 -= 8;
              *((_QWORD *)v46 - 1) = v50;
              v46 -= 8;
            }
            while (v48 != v49);
            v48 = (char *)__p;
          }
          __p = v46;
          __src = v41;
          v105 = (unint64_t)v47;
          if (v48)
            operator delete(v48);
        }
        else
        {
          *(_QWORD *)__src = v102[2];
          v41 = v40 + 8;
        }
        __src = v41;
        std::__list_imp<ZinIrSection *>::clear(&v101);
      }
    }
    LODWORD(v101) = 0;
    v51 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>((_QWORD *)this + 13, (int *)&v101);
    if (v51)
    {
      v52 = v51[3];
      if (v52)
      {
        ZinIrMemoryPool::GetSections(v51[3], 2, &v101);
        if (v102 == &v101)
        {
          v53 = 0;
        }
        else
        {
          v53 = 0;
          v54 = v102;
          do
          {
            ++v53;
            v54 = (unint64_t **)v54[1];
          }
          while (v54 != &v101);
        }
        std::vector<ZinIrOpLayer *>::__insert_with_size[abi:ne180100]<std::__list_iterator<ZinIrOpLayer *,void *>,std::__list_iterator<ZinIrOpLayer *,void *>>((uint64_t)&__p, (char *)__src, v102, &v101, v53);
        ZinIrMemoryPool::GetSections(v52, 3, &v98);
        if (v99 == &v98)
        {
          v55 = 0;
        }
        else
        {
          v55 = 0;
          v56 = v99;
          do
          {
            ++v55;
            v56 = (void **)v56[1];
          }
          while (v56 != &v98);
        }
        std::vector<ZinIrOpLayer *>::__insert_with_size[abi:ne180100]<std::__list_iterator<ZinIrOpLayer *,void *>,std::__list_iterator<ZinIrOpLayer *,void *>>((uint64_t)&__p, (char *)__src, v99, &v98, v55);
        ZinIrMemoryPool::GetSections(v52, 7, &p_j);
        if (v97 == &p_j)
        {
          v57 = 0;
        }
        else
        {
          v57 = 0;
          v58 = v97;
          do
          {
            ++v57;
            v58 = (unint64_t **)v58[1];
          }
          while (v58 != &p_j);
        }
        std::vector<ZinIrOpLayer *>::__insert_with_size[abi:ne180100]<std::__list_iterator<ZinIrOpLayer *,void *>,std::__list_iterator<ZinIrOpLayer *,void *>>((uint64_t)&__p, (char *)__src, v97, &p_j, v57);
        ZinIrMemoryPool::GetSections(v52, 4, &v94);
        if (v95 == &v94)
        {
          v59 = 0;
        }
        else
        {
          v59 = 0;
          v60 = v95;
          do
          {
            ++v59;
            v60 = (unint64_t *)v60[1];
          }
          while (v60 != &v94);
        }
        std::vector<ZinIrOpLayer *>::__insert_with_size[abi:ne180100]<std::__list_iterator<ZinIrOpLayer *,void *>,std::__list_iterator<ZinIrOpLayer *,void *>>((uint64_t)&__p, (char *)__src, v95, &v94, v59);
        ZinIrMemoryPool::GetSections(v52, 0, &j);
        if (v93 == &j)
        {
          v61 = 0;
        }
        else
        {
          v61 = 0;
          v62 = v93;
          do
          {
            ++v61;
            v62 = (unint64_t *)v62[1];
          }
          while (v62 != &j);
        }
        std::vector<ZinIrOpLayer *>::__insert_with_size[abi:ne180100]<std::__list_iterator<ZinIrOpLayer *,void *>,std::__list_iterator<ZinIrOpLayer *,void *>>((uint64_t)&__p, (char *)__src, v93, &j, v61);
        ZinIrMemoryPool::GetSections(v52, 8, &v90);
        if (v91 == &v90)
        {
          v63 = 0;
        }
        else
        {
          v63 = 0;
          v64 = v91;
          do
          {
            ++v63;
            v64 = (uint64_t *)v64[1];
          }
          while (v64 != &v90);
        }
        std::vector<ZinIrOpLayer *>::__insert_with_size[abi:ne180100]<std::__list_iterator<ZinIrOpLayer *,void *>,std::__list_iterator<ZinIrOpLayer *,void *>>((uint64_t)&__p, (char *)__src, v91, &v90, v63);
        ZinIrMemoryPool::GetSections(v52, 5, &v88);
        if (v89 == &v88)
        {
          v65 = 0;
        }
        else
        {
          v65 = 0;
          v66 = v89;
          do
          {
            ++v65;
            v66 = (uint64_t *)v66[1];
          }
          while (v66 != &v88);
        }
        std::vector<ZinIrOpLayer *>::__insert_with_size[abi:ne180100]<std::__list_iterator<ZinIrOpLayer *,void *>,std::__list_iterator<ZinIrOpLayer *,void *>>((uint64_t)&__p, (char *)__src, v89, &v88, v65);
        std::__list_imp<ZinIrSection *>::clear(&v88);
        std::__list_imp<ZinIrSection *>::clear(&v90);
        std::__list_imp<ZinIrSection *>::clear(&j);
        std::__list_imp<ZinIrSection *>::clear(&v94);
        std::__list_imp<ZinIrSection *>::clear(&p_j);
        std::__list_imp<ZinIrSection *>::clear(&v98);
        std::__list_imp<ZinIrSection *>::clear(&v101);
      }
    }
    v94 = *((_QWORD *)a2 + 6);
    v67 = (ZinIrSection **)__p;
    v68 = (ZinIrSection **)__src;
    if (__p != __src)
    {
      do
      {
        v69 = v108;
        if (v108 != (uint64_t *)v109)
        {
          v70 = *v67;
          do
          {
            ZinIrSection::UpdateSchedule(v70, (ZinIrSymbol *)v69[4], v94, v110[0]);
            v71 = (uint64_t *)v69[1];
            if (v71)
            {
              do
              {
                v72 = v71;
                v71 = (uint64_t *)*v71;
              }
              while (v71);
            }
            else
            {
              do
              {
                v72 = (uint64_t *)v69[2];
                v73 = *v72 == (_QWORD)v69;
                v69 = v72;
              }
              while (!v73);
            }
            v69 = v72;
          }
          while (v72 != (uint64_t *)v109);
        }
        ++v67;
      }
      while (v67 != v68);
    }
    *((_QWORD *)a2 + 6) = v110[0];
    *((_QWORD *)a2 + 7) = a4;
    v101 = &v94;
    v74 = (uint64_t **)std::__hash_table<std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::set<ZinNamedType<unsigned long,ScheduleTag>>>,std::__unordered_map_hasher<ZinNamedType<unsigned long,AneIndexTag>,std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::set<ZinNamedType<unsigned long,ScheduleTag>>>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,true>,std::__unordered_map_equal<ZinNamedType<unsigned long,AneIndexTag>,std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::set<ZinNamedType<unsigned long,ScheduleTag>>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,true>,std::allocator<std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::set<ZinNamedType<unsigned long,ScheduleTag>>>>>::__emplace_unique_key_args<ZinNamedType<unsigned long,AneIndexTag>,std::piecewise_construct_t const&,std::tuple<ZinNamedType<unsigned long,AneIndexTag> const&>,std::tuple<>>((uint64_t)this + 64, &v94, (uint64_t)&std::piecewise_construct, (uint64_t **)&v101);
    v101 = (unint64_t *)a2;
    std::__tree<std::__value_type<ZinIrOpLayer *,float>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,float>,ZinIrIdComparator<ZinIrOpLayer *>,true>,std::allocator<std::__value_type<ZinIrOpLayer *,float>>>::__erase_unique<ZinIrOpLayer *>(v74 + 3, (uint64_t *)&v101);
    v101 = v110;
    v75 = (uint64_t **)std::__hash_table<std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::set<ZinNamedType<unsigned long,ScheduleTag>>>,std::__unordered_map_hasher<ZinNamedType<unsigned long,AneIndexTag>,std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::set<ZinNamedType<unsigned long,ScheduleTag>>>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,true>,std::__unordered_map_equal<ZinNamedType<unsigned long,AneIndexTag>,std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::set<ZinNamedType<unsigned long,ScheduleTag>>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,true>,std::allocator<std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::set<ZinNamedType<unsigned long,ScheduleTag>>>>>::__emplace_unique_key_args<ZinNamedType<unsigned long,AneIndexTag>,std::piecewise_construct_t const&,std::tuple<ZinNamedType<unsigned long,AneIndexTag> const&>,std::tuple<>>((uint64_t)this + 64, v110, (uint64_t)&std::piecewise_construct, (uint64_t **)&v101);
    v101 = (unint64_t *)a2;
    std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>(v75 + 3, (uint64_t *)&v101, (uint64_t *)&v101);
    std::set<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100]((uint64_t *)&v101, v7);
    v76 = *((_QWORD *)this + 11);
    v77 = v106;
    if (v106 == (uint64_t *)v107)
    {
      v78 = 0;
    }
    else
    {
      v78 = 0;
      do
      {
        v98 = (void *)v77[4];
        v79 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>((_QWORD *)this + 18, &v98);
        if (!v79)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        if (v79[3] < v76)
          v76 = v79[3];
        if (v78 <= v79[4])
          v78 = v79[4];
        std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,long>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,long>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,long>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,long>>>::__erase_unique<ZinIrOpLayer *>((_QWORD *)this + 18, &v98);
        v80 = (uint64_t *)v77[1];
        if (v80)
        {
          do
          {
            v81 = v80;
            v80 = (uint64_t *)*v80;
          }
          while (v80);
        }
        else
        {
          do
          {
            v81 = (uint64_t *)v77[2];
            v73 = *v81 == (_QWORD)v77;
            v77 = v81;
          }
          while (!v73);
        }
        v77 = v81;
      }
      while (v81 != (uint64_t *)v107);
      if (v78 > *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 6) - 8) + 48))
        ZinAssertImpl("invalid schedule range");
    }
    v98 = 0;
    v99 = 0;
    v100 = 0;
    for (j = v76; j <= v78; ++j)
    {
      if (std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>((_QWORD *)this + 8, &j))
      {
        p_j = &j;
        v82 = (_QWORD *)std::__hash_table<std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::set<ZinNamedType<unsigned long,ScheduleTag>>>,std::__unordered_map_hasher<ZinNamedType<unsigned long,AneIndexTag>,std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::set<ZinNamedType<unsigned long,ScheduleTag>>>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,true>,std::__unordered_map_equal<ZinNamedType<unsigned long,AneIndexTag>,std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::set<ZinNamedType<unsigned long,ScheduleTag>>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,true>,std::allocator<std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::set<ZinNamedType<unsigned long,ScheduleTag>>>>>::__emplace_unique_key_args<ZinNamedType<unsigned long,AneIndexTag>,std::piecewise_construct_t const&,std::tuple<ZinNamedType<unsigned long,AneIndexTag> const&>,std::tuple<>>((uint64_t)this + 64, &j, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_j)[3];
        p_j = &j;
        v83 = std::__hash_table<std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::set<ZinNamedType<unsigned long,ScheduleTag>>>,std::__unordered_map_hasher<ZinNamedType<unsigned long,AneIndexTag>,std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::set<ZinNamedType<unsigned long,ScheduleTag>>>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,true>,std::__unordered_map_equal<ZinNamedType<unsigned long,AneIndexTag>,std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::set<ZinNamedType<unsigned long,ScheduleTag>>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,true>,std::allocator<std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::set<ZinNamedType<unsigned long,ScheduleTag>>>>>::__emplace_unique_key_args<ZinNamedType<unsigned long,AneIndexTag>,std::piecewise_construct_t const&,std::tuple<ZinNamedType<unsigned long,AneIndexTag> const&>,std::tuple<>>((uint64_t)this + 64, &j, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_j);
        std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long>,std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long>,std::back_insert_iterator<std::vector<ZinIrOpLayer *>>>((uint64_t)&p_j, v82, v83 + 4, &v98);
      }
    }
    v84 = (_QWORD *)((char *)this + 144);
    ZinLiveRangeUtils<ZinIrOpLayer,ZinIrTensor>::ZinIrComputeLiveRanges((ZinIrOpLayer ***)&v98, v84);
    v85 = v106;
    if (v106 != (uint64_t *)v107)
    {
      do
      {
        p_j = (unint64_t *)v85[4];
        if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v84, &p_j))ZinAssertImpl("Liverange for associated tensors should be computed");
        v86 = (uint64_t *)v85[1];
        if (v86)
        {
          do
          {
            v87 = v86;
            v86 = (uint64_t *)*v86;
          }
          while (v86);
        }
        else
        {
          do
          {
            v87 = (uint64_t *)v85[2];
            v73 = *v87 == (_QWORD)v85;
            v85 = v87;
          }
          while (!v73);
        }
        v85 = v87;
      }
      while (v87 != (uint64_t *)v107);
    }
    if (v98)
    {
      v99 = (void **)v98;
      operator delete(v98);
    }
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v101, v102);
    if (__p)
    {
      __src = __p;
      operator delete(__p);
    }
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v106, v107[0]);
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v108, v109[0]);
  }
  return 1;
}

void sub_206DBFEC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  uint64_t v31;

  std::__list_imp<ZinIrSection *>::clear(&a27);
  if (__p)
  {
    a31 = (uint64_t)__p;
    operator delete(__p);
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v31 - 144, *(_QWORD **)(v31 - 136));
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v31 - 120, *(_QWORD **)(v31 - 112));
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::AllocateGuidedChainTensors(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t result;
  BOOL v10;
  ZinIrTensor *v11;

  v2 = a2[2];
  if (!v2)
    return 0;
  v5 = 0;
  while (1)
  {
    v11 = *(ZinIrTensor **)(a2[1] + 16);
    ZinIrScheduleUtil::ZinOrderedSet<ZinIrOpLayer *>::PopFront(a2);
    v6 = *((_QWORD *)v11 + 13);
    if (v6)
    {
      v7 = *(_QWORD **)(v6 + 40);
      if (v7 != *(_QWORD **)(v6 + 48))
      {
        if (*v7)
          break;
      }
    }
    v8 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(*(_QWORD **)(a1 + 32), &v11);
    if (v8 && *((_DWORD *)v8 + 6) == 2)
    {
      v10 = 0;
      result = ZinIrLocalRegAlloc::AllocateChainBuffer((const ZinIrTensor **)a1, v11, (const ZinIrHalParameters *)&v10);
      if ((_DWORD)result)
        return result;
      v5 += ZinIrLocalRegAlloc::UpdateAllocationCandidateAfterChainAllocation(result, a2, v10, (uint64_t)v11);
    }
    if (++v5 >= v2)
      return 0;
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    ZinIrLocalRegAlloc::AllocateGuidedChainTensors();
  return 3;
}

uint64_t ZinIrLocalRegAlloc::AllocateChainBuffer(const ZinIrTensor **this, ZinIrTensor *a2, const ZinIrHalParameters *a3)
{
  uint64_t v6;
  ZinIrOpLayerGraph *v7;
  ZinANELayer *v8;
  char v9;
  uint64_t result;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t IndexOfMatchedIncomingLayer;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint8_t buf[4];
  _QWORD *v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  if ((ZinIrRegAllocUtil::IsChainable(a2, this[2], a3) & 1) == 0)
  {
    result = 0;
    *(_BYTE *)a3 = 0;
    return result;
  }
  v6 = *((_QWORD *)a2 + 12);
  v7 = *(ZinIrOpLayerGraph **)(v6 + 152);
  v8 = **(ZinANELayer ***)(v6 + 112);
  if (ZinIrLocalRegAlloc::HasL2FailedTensor((ZinIrLocalRegAlloc *)this, (ZinANELayer *)v6)
    || ZinIrLocalRegAlloc::HasL2FailedTensor((ZinIrLocalRegAlloc *)this, v8))
  {
    *(_BYTE *)a3 = 0;
    v9 = ZinIrLocalRegAlloc::ChangeEngineLayerSchedule((ZinIrLocalRegAlloc *)this, v8, *(_QWORD *)(v6 + 48) + 1, 0);
    result = 0;
    if ((v9 & 1) == 0)
    {
      v11 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v11)
        ZinIrLocalRegAlloc::RevertL2DependentConfiguration(v11, v12, v13, v14, v15, v16, v17, v18);
      return 3;
    }
  }
  else
  {
    v32 = 1;
    if (ZinIrOpLayer::IsPELayer((ZinIrOpLayer *)v6))
    {
      result = ZinIrLocalRegAlloc::AllocateP2NChainBuffer((ZinIrLocalRegAlloc *)this, a2, &v32);
      if ((_DWORD)result)
        return result;
    }
    else
    {
      *(_DWORD *)buf = 0;
      if (!ZinIrRegAllocUtil::GetChainedOperandL2SrcType(v7, v8, (const ZinIrOpLayer *)v6, (int *)buf))
      {
        v20 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v20)
          ZinIrLocalRegAlloc::AllocateChainBuffer(v20, v21, v22, v23, v24, v25, v26, v27);
        return 3;
      }
      result = ZinIrLocalRegAlloc::AllocateN2PChainBuffer((ZinIrLocalRegAlloc *)this, a2, *(_DWORD *)buf != 0, &v32);
      if ((_DWORD)result)
        return result;
    }
    v19 = v32;
    if (v32 && (*((_BYTE *)this[3] + 96) & 0x10) != 0)
    {
      IndexOfMatchedIncomingLayer = ZinIrOpLayerGraph::GetIndexOfMatchedIncomingLayer(v7, v8, (const ZinIrOpLayer *)v6);
      if (ZinIrRegAllocUtil::HasResidentSymbolAlias((ZinIrRegAllocUtil *)v6, v8, *((const ZinANELayer **)this[2] + 51), IndexOfMatchedIncomingLayer))
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinIrLocalRegAlloc::AllocateChainBuffer();
        return 3;
      }
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
      {
        v29 = (_QWORD *)((char *)a2 + 24);
        if (*((char *)a2 + 47) < 0)
          v29 = (_QWORD *)*v29;
        v30 = *(_QWORD *)(v6 + 360);
        v31 = *((_QWORD *)v8 + 45);
        *(_DWORD *)buf = 136315650;
        v34 = v29;
        v35 = 2048;
        v36 = v30;
        v37 = 2048;
        v38 = v31;
        _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Chaining is enabled in %s (TID=%zi->TID=%zi)", buf, 0x20u);
      }
    }
    result = 0;
    *(_BYTE *)a3 = v19;
  }
  return result;
}

uint64_t ZinIrLocalRegAlloc::UpdateAllocationCandidateAfterChainAllocation(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v5;
  ZinIrOpLayer *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  uint64_t v11;
  ZinIrOpLayer *v12;
  unint64_t v13;
  uint64_t InputTensor;
  uint64_t v15;
  _QWORD *v16;

  if (!a3)
  {
    ZinIrScheduleUtil::ZinOrderedSet<ZinIrOpLayer *>::PushBack(a2, a4);
    return 0;
  }
  v5 = *(_QWORD *)(a4 + 96);
  v6 = **(ZinIrOpLayer ***)(v5 + 112);
  if (ZinIrOpLayer::IsPELayer((ZinIrOpLayer *)v5))
  {
    if (*(_QWORD *)(v5 + 96) - *(_QWORD *)(v5 + 88) <= 8uLL)
      v7 = 0;
    else
      v7 = v5;
    if (!ZinIrOpLayer::IsPELayer(v6))
    {
      if (!v7)
        return 0;
      goto LABEL_15;
    }
  }
  else
  {
    v7 = 0;
    v8 = 0;
    if (!ZinIrOpLayer::IsPELayer(v6))
      return v8;
  }
  if (*((_QWORD *)v6 + 12) - *((_QWORD *)v6 + 11) <= 0xFuLL && v7 == 0)
    return 0;
LABEL_15:
  v10 = operator new(0x10uLL);
  v8 = 0;
  v11 = 0;
  *v10 = v5;
  v10[1] = v6;
  do
  {
    v12 = (ZinIrOpLayer *)v10[v11];
    if (*((_QWORD *)v12 + 12) != *((_QWORD *)v12 + 11))
    {
      v13 = 0;
      do
      {
        InputTensor = ZinIrOpLayer::GetInputTensor(v12, v13);
        v15 = *(_QWORD *)(InputTensor + 104);
        if (v15)
        {
          v16 = *(_QWORD **)(v15 + 40);
          if (v16 != *(_QWORD **)(v15 + 48))
          {
            if (*v16)
              v8 += ZinIrScheduleUtil::ZinOrderedSet<ZinIrTensor *>::Remove((uint64_t)a2, InputTensor);
          }
        }
        ++v13;
      }
      while (v13 < (uint64_t)(*((_QWORD *)v12 + 12) - *((_QWORD *)v12 + 11)) >> 3);
    }
    ++v11;
  }
  while (v11 != 2);
  operator delete(v10);
  return v8;
}

void sub_206DC04B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::AllocateGuidedTensors(ZinIrLocalRegAlloc *this, ZinIrNetworkStatus *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  ZinIrTensor *v5;
  ZinIrTensor *RootTensor;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t GuidedResidentTensors;
  uint64_t v12[7];
  int v13;

  if (!*(_QWORD *)(*((_QWORD *)this + 4) + 24))
    return 0;
  v12[0] = (uint64_t)v12;
  v12[1] = (uint64_t)v12;
  memset(&v12[2], 0, 40);
  v13 = 1065353216;
  v3 = (_QWORD *)*((_QWORD *)this + 5);
  v4 = (_QWORD *)*((_QWORD *)this + 6);
  while (v3 != v4)
  {
    v5 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 0, 0);
    RootTensor = ZinIrTensor::GetRootTensor(v5);
    if (!ZinIrTensor::HasParent(RootTensor))
    {
      v7 = *((_QWORD *)RootTensor + 13);
      if (!v7 || (v8 = *(_QWORD **)(v7 + 40), v8 == *(_QWORD **)(v7 + 48)) || !*v8)
        ZinIrScheduleUtil::ZinOrderedSet<ZinIrOpLayer *>::PushBack(v12, (uint64_t)RootTensor);
    }
    ++v3;
  }
  if (*(_BYTE *)(*((_QWORD *)this + 2) + 1113))
    v9 = 3;
  else
    v9 = 1;
  ZinIrLocalRegAlloc::ZinIrSortTensors((uint64_t)this, (uint64_t)v12, v9, 1);
  GuidedResidentTensors = ZinIrLocalRegAlloc::AllocateGuidedResidentTensors((uint64_t)this, v12);
  if (!(_DWORD)GuidedResidentTensors)
    GuidedResidentTensors = ZinIrLocalRegAlloc::AllocateGuidedChainTensors((uint64_t)this, v12);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v12[3]);
  std::__list_imp<ZinIrSection *>::clear(v12);
  return GuidedResidentTensors;
}

void sub_206DC05EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a12);
  std::__list_imp<ZinIrSection *>::clear(&a9);
  _Unwind_Resume(a1);
}

BOOL ZinIrScheduleUtil::ZinOrderedSet<ZinIrTensor *>::Remove(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t *v9;

  v8 = a2;
  v3 = (_QWORD *)(a1 + 24);
  v4 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)(a1 + 24), &v8);
  if (v4)
  {
    v9 = &v8;
    v5 = (uint64_t *)std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>((uint64_t)v3, &v8, (uint64_t)&std::piecewise_construct, &v9)[3];
    v6 = *v5;
    *(_QWORD *)(v6 + 8) = v5[1];
    *(_QWORD *)v5[1] = v6;
    --*(_QWORD *)(a1 + 16);
    operator delete(v5);
    std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,long>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,long>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,long>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,long>>>::__erase_unique<ZinIrOpLayer *>(v3, &v8);
  }
  return v4 != 0;
}

uint64_t ZinIrLocalRegAlloc::AllocateFlexibleTensorsToL2(ZinIrLocalRegAlloc *this, ZinIrNetworkStatus *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  ZinIrTensor *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  StaticWrapInfo *v22;
  char StaticCircularTensor;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  ZinIrTensor *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v41;
  unint64_t v42;
  ZinIrTensor *v43;
  uint64_t ChainBuffer;
  uint64_t v45;
  uint64_t *v46;
  uint64_t j;
  ZinIrTensor *v48;
  ZinIrSection *Section;
  ZinIrTensor *v51;
  uint64_t v52;
  uint64_t *v53;
  _OWORD v54[2];
  uint64_t v55;
  int v56;

  v52 = (uint64_t)&v52;
  v53 = &v52;
  memset(v54, 0, sizeof(v54));
  v55 = 0;
  v56 = 1065353216;
  v3 = (uint64_t *)*((_QWORD *)this + 5);
  v4 = (uint64_t *)*((_QWORD *)this + 6);
  while (v3 != v4)
  {
    v5 = *v3;
    v51 = 0;
    v6 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0, 0);
    v51 = v6;
    v7 = *((_QWORD *)v6 + 13);
    if (!v7 || (v8 = *(_QWORD **)(v7 + 40), v8 == *(_QWORD **)(v7 + 48)) || !*v8)
    {
      if (!ZinIrTensor::HasParent(v6))
      {
        v9 = *((_QWORD *)v51 + 13);
        if (!v9 || !*(_DWORD *)(v9 + 96))
        {
          v10 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(*((_QWORD **)this + 4), &v51);
          if (!v10
            || !CpAllocUtils::IsDRAMInplace(*((_DWORD *)v10 + 6))
            && (ZinIrLocalRegAlloc::IsNonSeedInplaceTensor((uint64_t)this, (uint64_t)v51, 2) & 1) == 0)
          {
            ZinIrScheduleUtil::ZinOrderedSet<ZinIrOpLayer *>::PushBack(&v52, (uint64_t)v51);
          }
        }
      }
    }
    ++v3;
  }
  v11 = *((_QWORD *)this + 3);
  v12 = *(unsigned __int8 *)(v11 + 239);
  v13 = v12;
  v14 = *(_QWORD *)(v11 + 224);
  if ((v12 & 0x80u) == 0)
    v15 = *(unsigned __int8 *)(v11 + 239);
  else
    v15 = *(_QWORD *)(v11 + 224);
  if (v15 != 11)
    goto LABEL_24;
  v16 = (uint64_t *)(v11 + 216);
  if ((v12 & 0x80u) != 0)
    v16 = *(uint64_t **)(v11 + 216);
  v17 = *v16;
  v18 = *(uint64_t *)((char *)v16 + 3);
  if (v17 != 0x64697365726E6F6ELL || v18 != 0x746E656469736572)
  {
LABEL_24:
    v20 = *(_QWORD *)&v54[0];
    if (*(_QWORD *)&v54[0])
    {
      do
      {
        v51 = (ZinIrTensor *)v53[2];
        ZinIrScheduleUtil::ZinOrderedSet<ZinIrOpLayer *>::PopFront(&v52);
        if (std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(*((_QWORD **)this + 4), &v51)|| (!*(_BYTE *)(*((_QWORD *)this + 2) + 1239)? (StaticCircularTensor = ZinIrLocalRegAlloc::AllocateStaticCircularTensor((const ZinIrTensor **)this, v51, v21, v22)): (StaticCircularTensor = ZinIrLocalRegAlloc::AllocateMultipleSymbolsToTensor((const ZinIrTensor **)this, v51, v21, v22)), (StaticCircularTensor & 1) == 0))
        {
          ZinIrScheduleUtil::ZinOrderedSet<ZinIrOpLayer *>::PushBack(&v52, (uint64_t)v51);
        }
        --v20;
      }
      while (v20);
      v11 = *((_QWORD *)this + 3);
      v12 = *(unsigned __int8 *)(v11 + 239);
      v14 = *(_QWORD *)(v11 + 224);
      v13 = *(_BYTE *)(v11 + 239);
    }
  }
  if (v13 < 0)
    v12 = v14;
  if (v12 != 11)
    goto LABEL_42;
  v26 = *(uint64_t **)(v11 + 216);
  v24 = (uint64_t *)(v11 + 216);
  v25 = v26;
  if (v13 < 0)
    v24 = v25;
  v27 = *v24;
  v28 = *(uint64_t *)((char *)v24 + 3);
  if (v27 != 0x64697365726E6F6ELL || v28 != 0x746E656469736572)
  {
LABEL_42:
    ZinIrLocalRegAlloc::ZinIrSortTensors((uint64_t)this, (uint64_t)&v52, 1, 1);
    for (i = *(_QWORD *)&v54[0]; i; --i)
    {
      v31 = (ZinIrTensor *)v53[2];
      ZinIrScheduleUtil::ZinOrderedSet<ZinIrOpLayer *>::PopFront(&v52);
      if ((ZinIrLocalRegAlloc::AllocateResidentTensor((const ZinIrTensor **)this, v31, 1) & 1) == 0)
        ZinIrScheduleUtil::ZinOrderedSet<ZinIrOpLayer *>::PushBack(&v52, (uint64_t)v31);
    }
  }
  v32 = *((_QWORD *)this + 3);
  v33 = *(unsigned __int8 *)(v32 + 239);
  v34 = (char)v33;
  if ((v33 & 0x80u) != 0)
    v33 = *(_QWORD *)(v32 + 224);
  if (v33 == 11)
  {
    v37 = *(uint64_t **)(v32 + 216);
    v35 = (uint64_t *)(v32 + 216);
    v36 = v37;
    if (v34 < 0)
      v35 = v36;
    v38 = *v35;
    v39 = *(uint64_t *)((char *)v35 + 3);
    if (v38 == 0x64697365726E6F6ELL && v39 == 0x746E656469736572)
      goto LABEL_59;
  }
  v41 = *(_QWORD *)&v54[0];
  if (!*(_QWORD *)&v54[0])
  {
LABEL_59:
    LODWORD(v51) = 1;
    v46 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>((_QWORD *)this + 13, (int *)&v51);
    if (v46)
    {
      if (v46[3])
      {
        ZinIrLocalRegAlloc::ZinIrSortTensors((uint64_t)this, (uint64_t)&v52, 0, 2);
        for (j = *(_QWORD *)&v54[0]; j; --j)
        {
          v48 = (ZinIrTensor *)v53[2];
          ZinIrScheduleUtil::ZinOrderedSet<ZinIrOpLayer *>::PopFront(&v52);
          Section = (ZinIrSection *)ZinIrLocalRegAlloc::GetSection((uint64_t)this, 1, 4);
          if (!ZinIrLocalRegAlloc::AllocateNonResidentTensor(this, v48, Section, 1))
            ZinIrScheduleUtil::ZinOrderedSet<ZinIrOpLayer *>::PushBack(&v52, (uint64_t)v48);
        }
      }
    }
    v45 = ZinIrLocalRegAlloc::TryAggressiveChainBufferAllocation(this);
  }
  else
  {
    v42 = 0;
    while (1)
    {
      v43 = (ZinIrTensor *)v53[2];
      ZinIrScheduleUtil::ZinOrderedSet<ZinIrOpLayer *>::PopFront(&v52);
      LOBYTE(v51) = 0;
      ChainBuffer = ZinIrLocalRegAlloc::AllocateChainBuffer((const ZinIrTensor **)this, v43, (const ZinIrHalParameters *)&v51);
      v45 = ChainBuffer;
      if ((_DWORD)ChainBuffer)
        break;
      v42 += ZinIrLocalRegAlloc::UpdateAllocationCandidateAfterChainAllocation(ChainBuffer, &v52, v51, (uint64_t)v43)+ 1;
      if (v42 >= v41)
        goto LABEL_59;
    }
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v54 + 8);
  std::__list_imp<ZinIrSection *>::clear(&v52);
  return v45;
}

void sub_206DC0A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)va1);
  std::__list_imp<ZinIrSection *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::TryAggressiveChainBufferAllocation(ZinIrLocalRegAlloc *this)
{
  uint64_t v1;
  ZinIrOpLayer **v4;
  ZinIrOpLayer **v5;
  ZinIrOpLayer *v6;
  _DWORD *v7;
  const ZinIrHalParameters *v8;
  int IsChainable;
  const ZinIrHalParameters *v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  ZinIrOpLayer *v17;
  ZinIrTensor *v18;
  uint64_t v19;
  _QWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  int ResidentTensor;
  uint64_t ChainBuffer;
  _QWORD *v26;
  int v27;
  ZinIrSection *Section;
  uint64_t v29;
  _QWORD *v30;
  uint8_t v31;
  _BYTE v32[6];
  BOOL v33;
  void *__p[3];
  uint8_t buf[24];
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(*((_QWORD *)this + 4) + 24))
  {
    v5 = (ZinIrOpLayer **)*((_QWORD *)this + 5);
    v4 = (ZinIrOpLayer **)*((_QWORD *)this + 6);
    if (v5 != v4)
    {
      v30 = (_QWORD *)((char *)this + 304);
      while (1)
      {
        v6 = *v5;
        if (!ZinIrOpLayer::IsPELayer(*v5))
          goto LABEL_30;
        if (!(*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)v6 + 568))(v6))
          goto LABEL_30;
        v7 = (_DWORD *)*((_QWORD *)v6 + 33);
        if (v7[408] == 4)
          goto LABEL_30;
        LODWORD(__p[0]) = 0;
        if ((ZinEngineLayerMirInfo::HasChainRead(v7, (int *)__p) & 1) != 0)
          goto LABEL_30;
        (*(void (**)(void **__return_ptr, ZinIrOpLayer *))(*(_QWORD *)v6 + 512))(__p, v6);
        IsChainable = ZinIrRegAllocUtil::IsChainable(*(ZinIrRegAllocUtil **)__p[0], *((const ZinIrTensor **)this + 2), v8);
        if ((ZinIrRegAllocUtil::IsChainable(*((ZinIrRegAllocUtil **)__p[0] + 1), *((const ZinIrTensor **)this + 2), v10) & 1) != 0)
        {
          v11 = 0;
          v12 = 0;
          v13 = 1;
          v14 = 1;
        }
        else
        {
          if (!IsChainable)
            goto LABEL_25;
          v13 = 0;
          v14 = 0;
          v11 = 1;
          v12 = 1;
        }
        v15 = *(_QWORD *)(*((_QWORD *)__p[0] + v14) + 96);
        v16 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0, 0);
        v17 = *(ZinIrOpLayer **)(*((_QWORD *)__p[0] + v12) + 96);
        v18 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0, 0);
        if (ZinEngineLayerMirInfo::GetL2RdMode(*((_QWORD *)v6 + 33), v13) != 3
          || ZinEngineLayerMirInfo::GetL2RdMode(*((_QWORD *)v6 + 33), v11) == 3
          || (v19 = *(_QWORD *)(v16 + 104)) != 0 && *(_DWORD *)(v19 + 96))
        {
LABEL_25:
          v23 = 3;
          goto LABEL_26;
        }
        *(_QWORD *)buf = v18;
        v20 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v30, buf);
        if (v20)
          break;
        v22 = *(_QWORD *)(*(_QWORD *)buf + 104);
        if (v22)
        {
          v21 = (_DWORD *)(v22 + 96);
LABEL_22:
          if (*v21 == 2)
            goto LABEL_25;
        }
        if (!ZinIrOpLayer::IsANELayer(v17) || ZinIrTensor::HasParent(v18))
          goto LABEL_25;
        ZinIrLocalRegAlloc::RemoveSymbolFromLayerAndTensor(this, (ZinIrTensor *)v16);
        ZinIrLocalRegAlloc::RemoveSymbolFromLayerAndTensor(this, v18);
        ResidentTensor = ZinIrLocalRegAlloc::AllocateResidentTensor((const ZinIrTensor **)this, v18, 1);
        v33 = ResidentTensor;
        if (!ResidentTensor)
          goto LABEL_49;
        ChainBuffer = ZinIrLocalRegAlloc::AllocateChainBuffer((const ZinIrTensor **)this, (ZinIrTensor *)v16, (const ZinIrHalParameters *)&v33);
        if ((_DWORD)ChainBuffer)
          goto LABEL_45;
        if (!v33)
        {
LABEL_49:
          if ((*(_BYTE *)(*((_QWORD *)this + 3) + 96) & 0x10) != 0
            && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
          {
            v26 = (_QWORD *)(v16 + 24);
            if (*(char *)(v16 + 47) < 0)
              v26 = (_QWORD *)*v26;
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v26;
            _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "The aggressive chaining effort is NOT materialized in %s. The chaining is NOT enabled. \n", buf, 0xCu);
          }
          ZinIrLocalRegAlloc::RemoveSymbolFromLayerAndTensor(this, (ZinIrTensor *)v16);
          ZinIrLocalRegAlloc::RemoveSymbolFromLayerAndTensor(this, v18);
          v27 = ZinIrLocalRegAlloc::AllocateResidentTensor((const ZinIrTensor **)this, (ZinIrTensor *)v16, 1);
          Section = (ZinIrSection *)ZinIrLocalRegAlloc::GetSection((uint64_t)this, 0, 4);
          if ((v27 & ZinIrLocalRegAlloc::AllocateNonResidentTensor(this, v18, Section, 1) & 1) == 0)
          {
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              ZinIrLocalRegAlloc::TryAggressiveChainBufferAllocation(&v31, v32, v29);
            ChainBuffer = 3;
LABEL_45:
            v23 = 1;
            goto LABEL_46;
          }
        }
        v23 = 0;
        ChainBuffer = v1;
LABEL_46:
        v1 = ChainBuffer;
LABEL_26:
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (v23 != 3 && v23)
          return v1;
LABEL_30:
        if (++v5 == v4)
          return 0;
      }
      v21 = v20 + 3;
      goto LABEL_22;
    }
  }
  return 0;
}

void sub_206DC0E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrLocalRegAlloc::AllocateTensorsToL2(ZinIrLocalRegAlloc *this, ZinIrNetworkStatus *a2)
{
  ZinIrNetworkStatus *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  ZinIrLocalRegAlloc::AllocateFixedL2Tensors(this, a2);
  v4 = *((_QWORD *)this + 3);
  v5 = *(unsigned __int8 *)(v4 + 239);
  v6 = (char)v5;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(v4 + 224);
  if (v5 == 11)
  {
    v9 = *(uint64_t **)(v4 + 216);
    v7 = (uint64_t *)(v4 + 216);
    v8 = v9;
    if (v6 < 0)
      v7 = v8;
    v10 = *v7;
    v11 = *(uint64_t *)((char *)v7 + 3);
    if (v10 == 0x64697365726E6F6ELL && v11 == 0x746E656469736572)
      return ZinIrLocalRegAlloc::AllocateFlexibleTensorsToL2(this, v3);
  }
  result = ZinIrLocalRegAlloc::AllocateGuidedTensors(this, v3);
  if (!(_DWORD)result)
    return ZinIrLocalRegAlloc::AllocateFlexibleTensorsToL2(this, v3);
  return result;
}

uint64_t ZinIrLocalRegAlloc::AllocateTensorsToDRAM(uint64_t this, CFArrayRef *a2)
{
  ZinIrLocalRegAlloc *v3;
  _QWORD *v4;
  _QWORD *v5;
  ZinIrTensor *v6;
  uint64_t v7;
  int v8;
  int DramSortingPolicy;
  uint64_t v10;
  _QWORD *v11;
  _BOOL4 NonResidentTensor;
  ZinIrTensor *v13;
  ZinIrSection *Section;
  const void **v15;
  ZinIrSection *v16;
  uint64_t v17;
  BOOL v19;
  void *__p;
  ZinIrLocalRegAlloc *v21;
  uint64_t v22;
  uint64_t *v23;
  _OWORD v24[2];
  uint64_t v25;
  int v26;

  v3 = (ZinIrLocalRegAlloc *)this;
  v22 = (uint64_t)&v22;
  v23 = &v22;
  memset(v24, 0, sizeof(v24));
  v25 = 0;
  v26 = 1065353216;
  v4 = *(_QWORD **)(this + 40);
  v5 = *(_QWORD **)(this + 48);
  while (v4 != v5)
  {
    v6 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v4 + 32))(*v4, 0, 0);
    ZinIrTensor::GetSymbols(v6, &__p);
    this = (uint64_t)__p;
    if (v21 != __p)
    {
      if (!__p)
        goto LABEL_18;
LABEL_5:
      v21 = (ZinIrLocalRegAlloc *)this;
      operator delete((void *)this);
      goto LABEL_18;
    }
    if (ZinIrTensor::HasParent(v6))
    {
      this = (uint64_t)__p;
      if (__p)
        goto LABEL_5;
    }
    else
    {
      v7 = *((_QWORD *)v6 + 13);
      if (!v7 || (v8 = *(_DWORD *)(v7 + 96)) == 0)
      {
        if (__p)
        {
          v21 = (ZinIrLocalRegAlloc *)__p;
          operator delete(__p);
        }
LABEL_17:
        this = ZinIrScheduleUtil::ZinOrderedSet<ZinIrOpLayer *>::PushBack(&v22, (uint64_t)v6);
        goto LABEL_18;
      }
      this = (uint64_t)__p;
      if (__p)
      {
        v21 = (ZinIrLocalRegAlloc *)__p;
        operator delete(__p);
      }
      if (v8 == 2)
        goto LABEL_17;
    }
LABEL_18:
    ++v4;
  }
  DramSortingPolicy = ZinIrLocalRegAlloc::GetDramSortingPolicy(this, (const void **)(*((_QWORD *)v3 + 3) + 184));
  ZinIrLocalRegAlloc::ZinIrSortTensors((uint64_t)v3, (uint64_t)&v22, DramSortingPolicy, 2);
  v10 = *(_QWORD *)&v24[0];
  if (!*(_QWORD *)&v24[0])
  {
LABEL_31:
    v17 = 0;
    goto LABEL_37;
  }
  while (2)
  {
    __p = (void *)v23[2];
    ZinIrScheduleUtil::ZinOrderedSet<ZinIrOpLayer *>::PopFront(&v22);
    if (ZinIrLocalRegAlloc::IsNonSeedInplaceTensor((uint64_t)v3, (uint64_t)__p, 2))
    {
LABEL_30:
      if (!--v10)
        goto LABEL_31;
      continue;
    }
    break;
  }
  if (ZinIrLocalRegAlloc::IsCandidateForIntermediateCompression(v3, (ZinIrOpLayer **)__p))
    ZinIrLocalRegAlloc::ConfigureUniversalCompression(v3, (ZinIrTensor *)__p);
  v11 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(*((_QWORD **)v3 + 4), &__p);
  v19 = 0;
  if (v11 && CpAllocUtils::IsDRAMInplace(*((_DWORD *)v11 + 6)))
  {
    ZinIrLocalRegAlloc::AllocateDRAMInplaceTensors(v3, (ZinIrTensor *)__p, &v19);
    NonResidentTensor = v19;
  }
  else
  {
    v13 = (ZinIrTensor *)__p;
    Section = (ZinIrSection *)ZinIrLocalRegAlloc::GetSection((uint64_t)v3, 0, 4);
    NonResidentTensor = ZinIrLocalRegAlloc::AllocateNonResidentTensor(v3, v13, Section, 1);
  }
  if (NonResidentTensor)
  {
    v15 = (const void **)__p;
    if (*((_BYTE *)__p + 164))
    {
      v16 = (ZinIrSection *)ZinIrLocalRegAlloc::GetSection((uint64_t)v3, 0, 4);
      if (!ZinIrLocalRegAlloc::AllocateNonResidentTensorCompressedMetadata(v3, v15, v16))
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinIrLocalRegAlloc::AllocateTensorsToDRAM();
        goto LABEL_36;
      }
    }
    goto LABEL_30;
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    ZinIrLocalRegAlloc::AllocateTensorsToDRAM();
LABEL_36:
  ZinIrNetworkStatus::SetError(a2, CFSTR("DRAMAllocationFailure"));
  v17 = 5;
LABEL_37:
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v24 + 8);
  std::__list_imp<ZinIrSection *>::clear(&v22);
  return v17;
}

void sub_206DC119C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a16);
  std::__list_imp<ZinIrSection *>::clear(&a13);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::IsCandidateForIntermediateCompression(ZinIrLocalRegAlloc *this, ZinIrOpLayer **a2)
{
  ZinIrOpLayer *v4;
  uint64_t result;
  uint64_t Interleave;
  char v7;
  const ZinIrHalParameters *v8;
  const ZinIrTensor *v9;
  unint64_t v10;
  const ZinIrTensor *v11;
  char IsL2Dependentable;
  ZinIrOpLayer **v13;
  ZinIrOpLayer **v14;
  ZinIrOpLayer *v15;
  char v16;
  ZinIrOpLayer *v17;
  unint64_t v18;
  int v19;
  _QWORD *OutputCropOffsetXLsbs;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  void *__p;
  void *v26;
  uint64_t v27;
  char v28;
  ZinIrTensor *v29;

  v29 = (ZinIrTensor *)a2;
  if (!*(_BYTE *)(*((_QWORD *)this + 3) + 493) || !*(_BYTE *)(*((_QWORD *)this + 2) + 1332))
    return 0;
  v4 = a2[12];
  result = ZinIrOpLayer::IsANELayer(v4);
  if (!(_DWORD)result)
    return result;
  if ((*((_DWORD *)a2 + 22) - 1) > 2)
    return 0;
  Interleave = ZinIrTensor::GetInterleave((ZinIrTensor *)a2);
  if (v7)
  {
    if (Interleave != 1 && Interleave != 2 && Interleave != 4)
      return 0;
  }
  if (ZinIrLocalRegAlloc::GetPreAllocationInterleave(this, (const ZinIrTensor *)a2) == 3)
    return 0;
  ZinIrTensor::GetTensorSizeInBytes((ZinIrTensor *)a2);
  v9 = (const ZinIrTensor *)*((_QWORD *)this + 2);
  if (v10 < *((_QWORD *)v9 + 51))
    return 0;
  if ((ZinIrRegAllocUtil::IsChainable((ZinIrRegAllocUtil *)a2, v9, v8) & 1) != 0)
    return 0;
  v11 = (const ZinIrTensor *)*((_QWORD *)this + 2);
  LOBYTE(__p) = 0;
  v28 = 0;
  IsL2Dependentable = ZinIrRegAllocUtil::IsL2Dependentable((ZinIrTensor *)a2, v11, (ZinTensorFamilyUtil *)&__p);
  std::__optional_destruct_base<ZinTensorFamilyUtil,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__p);
  if ((IsL2Dependentable & 1) != 0 || *(_BYTE *)(*((_QWORD *)v4 + 33) + 233))
    return 0;
  v13 = (ZinIrOpLayer **)*((_QWORD *)v4 + 14);
  v14 = (ZinIrOpLayer **)*((_QWORD *)v4 + 15);
  while (v13 != v14)
  {
    v15 = *v13;
    __p = 0;
    v26 = 0;
    v27 = 0;
    if ((ZinIrOpLayer::IsNoOp(v15, (uint64_t *)&__p) & 1) != 0)
    {
      if (__p)
      {
        v26 = __p;
        operator delete(__p);
      }
      return 0;
    }
    v16 = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)*v13 + 112))(*v13);
    if (__p)
    {
      v26 = __p;
      operator delete(__p);
    }
    if ((v16 & 1) != 0)
      return 0;
    v17 = *v13;
    if (*((_QWORD *)*v13 + 12) != *((_QWORD *)*v13 + 11))
    {
      v18 = 0;
      while (!*(_BYTE *)(ZinIrOpLayer::GetInputTensor(v17, v18) + 164))
      {
        ++v18;
        v17 = *v13;
        if (v18 >= (uint64_t)(*((_QWORD *)*v13 + 12) - *((_QWORD *)*v13 + 11)) >> 3)
          goto LABEL_26;
      }
      return 0;
    }
LABEL_26:
    ++v13;
  }
  v19 = *(_DWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0, 0) + 88);
  OutputCropOffsetXLsbs = ZinIrLocalRegAlloc::GetOutputCropOffsetXLsbs(this, v4);
  if (ZinCropOffsetUtil::HasUnalignedOutputCropX(v19, (uint64_t)OutputCropOffsetXLsbs, *((_QWORD *)this + 2)))
    return 0;
  if ((v21 & 1) == 0
  {
    ZinIrLocalRegAlloc::IsCandidateForIntermediateCompression(ZinIrTensor *)::minimum_imb_size = GetMacroblockSize(2);
  }
  v22 = *((_QWORD *)v4 + 33);
  v23 = *(_QWORD *)(v22 + 200);
  if (!*(_BYTE *)(v22 + 233))
    *(_QWORD *)(v22 + 200) = ZinIrLocalRegAlloc::IsCandidateForIntermediateCompression(ZinIrTensor *)::minimum_imb_size;
  *(_BYTE *)(v22 + 233) = 1;
  __p = &v29;
  v24 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)this + 144, &v29, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p);
  result = ZinIrLocalRegAlloc::HasL2SpaceForConflictingDMAbuffers(this, (const ZinLiveRange *)(v24 + 3));
  *(_BYTE *)(v22 + 233) = 0;
  *(_QWORD *)(v22 + 200) = v23;
  return result;
}

void sub_206DC147C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::ConfigureUniversalCompression(ZinIrLocalRegAlloc *this, ZinIrTensor *a2)
{
  int v4;
  uint64_t PreAllocationInterleave;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;
  _BYTE v10[40];
  uint8_t v11[47];
  uint8_t buf[16];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)buf = xmmword_207A9E190;
  v13 = unk_207A9E1A0;
  v14 = xmmword_207A9E1B0;
  v15 = unk_207A9E1C0;
  std::unordered_map<unsigned long,ZinInterchangePackingFormat>::unordered_map((uint64_t)v11, (unint64_t *)buf, 4);
  *(_OWORD *)buf = xmmword_207A9E1D0;
  v13 = unk_207A9E1E0;
  v14 = xmmword_207A9E1F0;
  v15 = unk_207A9E200;
  std::unordered_map<unsigned long,ZinInterchangePackingFormat>::unordered_map((uint64_t)v10, (unint64_t *)buf, 4);
  v4 = *((_DWORD *)a2 + 22);
  PreAllocationInterleave = ZinIrLocalRegAlloc::GetPreAllocationInterleave(this, a2);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 3)
    {
LABEL_9:
      v7 = 0;
      goto LABEL_10;
    }
    v9 = PreAllocationInterleave;
    *(_QWORD *)buf = &v9;
    v6 = std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>((uint64_t)v10, (unint64_t *)&v9, (uint64_t)&std::piecewise_construct, (_QWORD **)buf);
  }
  else
  {
    v9 = PreAllocationInterleave;
    *(_QWORD *)buf = &v9;
    v6 = std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>((uint64_t)v11, (unint64_t *)&v9, (uint64_t)&std::piecewise_construct, (_QWORD **)buf);
  }
  if (!ZinIrTensor::SetInterchangeDescriptor((uint64_t)a2, *((unsigned int *)v6 + 6) | 0x200000000, 0x100000000))goto LABEL_9;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Unable to set interchange descriptor.\n", buf, 2u);
  }
  v7 = 3;
LABEL_10:
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v10);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v11);
  return v7;
}

void sub_206DC165C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)va);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::OptimizePoolActiveNEs(ZinIrLocalRegAlloc *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  ZinIrOpLayer **v11;
  ZinIrOpLayer **v12;
  ZinNELayer *v13;
  uint64_t result;

  v2 = *((_QWORD *)this + 3);
  v3 = *(unsigned __int8 *)(v2 + 239);
  v4 = (char)v3;
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(v2 + 224);
  if (v3 != 11)
    goto LABEL_10;
  v7 = *(uint64_t **)(v2 + 216);
  v5 = (uint64_t *)(v2 + 216);
  v6 = v7;
  if (v4 < 0)
    v5 = v6;
  v8 = *v5;
  v9 = *(uint64_t *)((char *)v5 + 3);
  if (v8 != 0x64697365726E6F6ELL || v9 != 0x746E656469736572)
  {
LABEL_10:
    v11 = (ZinIrOpLayer **)*((_QWORD *)this + 5);
    v12 = (ZinIrOpLayer **)*((_QWORD *)this + 6);
    while (v11 != v12)
    {
      v13 = *v11;
      if (ZinIrOpLayer::IsNELayer(*v11))
      {
        result = ZinIrLocalRegAlloc::ZinIrOptimizePoolActiveNEs(this, v13);
        if ((_DWORD)result)
          return result;
      }
      ++v11;
    }
  }
  return 0;
}

uint64_t ZinIrLocalRegAlloc::ZinIrOptimizePoolActiveNEs(ZinIrLocalRegAlloc *this, ZinNELayer *a2)
{
  uint64_t result;
  uint64_t v5;
  ZinIrKernel *v6;
  _QWORD *InputTensor;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  MirInfoChannelAssignment *ChannelAssignment;
  unint64_t NumNeededNEs;
  unint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *__p;
  uint64_t *v28;
  void *v29;
  _QWORD *v30;

  if (*(_DWORD *)(*((_QWORD *)a2 + 8) + 8) != 89)
    return 0;
  if (*((_QWORD *)a2 + 25))
    return 0;
  v5 = *((_QWORD *)a2 + 49);
  if (v5)
  {
    if (*(_DWORD *)(v5 + 192) > 1u)
      return 0;
  }
  v6 = (ZinIrKernel *)*((_QWORD *)a2 + 17);
  if (v6)
  {
    if ((ZinIrKernel::HasBias(v6) & 1) != 0 || (ZinIrKernel::HasScale(*((ZinIrKernel **)a2 + 17)) & 1) != 0)
      return 0;
  }
  if (!*((_QWORD *)a2 + 33))
    return 0;
  if (*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11) == 8)
  {
    InputTensor = (_QWORD *)ZinIrOpLayer::GetInputTensor(a2, 0);
    result = (*(uint64_t (**)(ZinNELayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
    if (result)
    {
      v8 = (_QWORD *)result;
      ZinIrTensor::GetSymbols(InputTensor, &v29);
      ZinIrTensor::GetSymbols(v8, &__p);
      v9 = (uint64_t *)v29;
      if (v29 != v30)
      {
        v10 = (uint64_t *)__p;
        if (__p == v28)
        {
LABEL_31:
          if (v10)
          {
            v28 = v10;
            operator delete(v10);
          }
          if (v29)
          {
            v30 = v29;
            operator delete(v29);
          }
          return 0;
        }
        LOBYTE(v11) = 1;
        do
        {
          v12 = *v9++;
          v11 = v11 & (*(_DWORD *)(*(_QWORD *)(v12 + 8) + 12) == 0);
        }
        while (v9 != v30);
        LOBYTE(v13) = 1;
        do
        {
          v14 = *v10++;
          v13 = v13 & (*(_DWORD *)(*(_QWORD *)(v14 + 8) + 12) == 0);
        }
        while (v10 != v28);
        if (((v11 | v13) & 1) == 0
          && ((*(uint64_t (**)(ZinNELayer *))(*(_QWORD *)a2 + 408))(a2) & 1) == 0
          && (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 54) + 64) + 104) - 4) >= 8)
        {
          v15 = InputTensor[7];
          ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(*((ZinEngineLayerMirInfo **)a2 + 33));
          NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs(ChannelAssignment);
          v18 = *(int *)(*((_QWORD *)this + 2) + 8);
          if (NumNeededNEs < v18)
          {
            while (v15 % v18)
            {
              if (--v18 <= NumNeededNEs)
                goto LABEL_30;
            }
            ZinEngineLayerMirInfo::SetChannelAssignmentLock(*((ZinEngineLayerMirInfo **)a2 + 33), 0);
            ZinEngineLayerMirInfo::SetNumNeededNEs(*((ZinEngineLayerMirInfo **)a2 + 33), v18);
            ZinEngineLayerMirInfo::SetChannelAssignmentLock(*((ZinEngineLayerMirInfo **)a2 + 33), 1);
          }
        }
      }
LABEL_30:
      v10 = (uint64_t *)__p;
      goto LABEL_31;
    }
  }
  else
  {
    v19 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v19)
      ZinIrLocalRegAlloc::ZinIrOptimizePoolActiveNEs(v19, v20, v21, v22, v23, v24, v25, v26);
    return 3;
  }
  return result;
}

void sub_206DC1968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void std::vector<ZinMirL2Config::PatchCandidate>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 5)
  {
    if (a2 >> 59)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ControlEdgeInfo>>(v3, a2);
    v7 = &v6[v5];
    v9 = &v6[32 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 2);
        *(_OWORD *)(v12 - 23) = *(_OWORD *)(v10 - 23);
        *((_OWORD *)v12 - 2) = v13;
        v12 -= 32;
        v10 -= 32;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t ZinIrLocalRegAlloc::SearchTallestDMAAllocatableTileHeight(ZinIrLocalRegAlloc *this, ZinNELayer *a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *TileSrc;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int DMABuffers;
  int v20;
  int v21;
  unint64_t v22;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _DWORD __dst[113];
  uint64_t *v29[4];
  int v30;
  int v31;
  uint64_t *v32[4];
  int v33;
  int v34;
  uint64_t *v35[4];
  int v36;

  if (a4 < a3)
    return 1;
  v9 = *((_QWORD *)a2 + 33);
  memcpy(__dst, (const void *)(v9 + 120), sizeof(__dst));
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v29, v9 + 576);
  v31 = *(_DWORD *)(v9 + 616);
  v26 = a3;
  v25 = std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v32, v9 + 624);
  v34 = *(_DWORD *)(v9 + 664);
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v35, v9 + 672);
  v10 = 664;
  if (!*(_BYTE *)(v9 + 149))
    v10 = 656;
  v11 = *(_QWORD *)(*((_QWORD *)this + 2) + v10);
  v27 = 0;
  TileSrc = (int *)ZinMirL2Config::GetTileSrc(*((_QWORD *)a2 + 33) + 120, 0);
  ZinTensorFormatGetSize(*TileSrc, &v27);
  v13 = *(_QWORD *)(*((_QWORD *)this + 2) + 592);
  v14 = v27;
  v15 = operator new(0x10uLL);
  v16 = 0;
  v24 = a4;
  v17 = (a4 + v26) >> 1;
  *v15 = v11;
  v15[1] = (v13 >> 6) / v14;
  do
  {
    if (!*(_BYTE *)(v9 + 150))
    {
      v18 = v15[v16];
      *(_QWORD *)(v9 + 120) = v18;
      *(_QWORD *)(v9 + 128) = v18;
      *(_QWORD *)(v9 + 136) = v18;
    }
    if (!*(_BYTE *)(v9 + 233))
      *(_QWORD *)(v9 + 200) = v17;
    DMABuffers = ZinIrLocalRegAlloc::AllocateDMABuffers(this, a2, 1, 0);
    v20 = DMABuffers;
    if (v16 == 1)
      v21 = 1;
    else
      v21 = DMABuffers;
    ++v16;
  }
  while (v21 != 1);
  operator delete(v15);
  memcpy((void *)(v9 + 120), __dst, 0x1C0uLL);
  *(_DWORD *)(v9 + 568) = __dst[112];
  if ((_DWORD *)(v9 + 120) == __dst)
  {
    *(_DWORD *)(v9 + 616) = v31;
    *(_DWORD *)(v9 + 664) = v34;
  }
  else
  {
    *(_DWORD *)(v9 + 608) = v30;
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v9 + 576), v29[2], 0);
    *(_DWORD *)(v9 + 616) = v31;
    *(_DWORD *)(v9 + 656) = v33;
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v9 + 624), v32[2], 0);
    *(_DWORD *)(v9 + 664) = v34;
    *(_DWORD *)(v9 + 704) = v36;
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v9 + 672), v35[2], 0);
  }
  ZinIrLocalRegAlloc::FreeDMADefaultBuffers((uint64_t)this, a2);
  ZinIrLocalRegAlloc::FreeDMACachedBuffers(this, a2);
  if (v20)
  {
    v22 = ZinIrLocalRegAlloc::SearchTallestDMAAllocatableTileHeight(this, a2, v17 + 1, v24);
    if (v17 <= v22)
      v4 = v22;
    else
      v4 = v17;
  }
  else
  {
    v4 = ZinIrLocalRegAlloc::SearchTallestDMAAllocatableTileHeight(this, a2, v26, v17 - 1);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v35);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v25);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v29);
  return v4;
}

void sub_206DC1CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  ZinMirL2Config::~ZinMirL2Config((ZinMirL2Config *)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::RemoveWorkUnitCandidatesConflictingWithDMABuffer@<X0>(FifoMode **a1@<X0>, ZinEngineLayerMirInfo **a2@<X1>, __int128 **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t ChannelAssignment;
  __int128 v9;
  __int128 v10;
  ZinEngineLayerMirInfo *v11;
  ZinMirL2Config::NE *v12;
  ZinIrTensor *v13;
  ZinIrSymbol *RootTensor;
  uint64_t v15;
  ZinIrSymbol **v16;
  uint64_t v17;
  __int128 *v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _QWORD *OutputCropOffsetXLsbs;
  unint64_t v26;
  char FatTileEnable;
  int DMABuffers;
  unint64_t v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD *v34;
  uint64_t v35;
  unint64_t v36;
  ZinIrSymbol *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _OWORD *v41;
  _OWORD *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  char *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  char *v62;
  char *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  char *v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  char *v71;
  double v72;
  uint64_t v73;
  ZinIrRegAllocUtil *v75;
  const ZinIrTensor *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  char v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t *v90;
  _QWORD *v91[2];
  uint64_t *v92;
  _QWORD *v93[2];
  _DWORD __dst[113];
  uint64_t *v95[4];
  int v96;
  int v97;
  uint64_t *v98[4];
  int v99;
  int v100;
  uint64_t *v101[4];
  int v102;
  _OWORD v103[2];
  uint64_t v104;
  _OWORD *v105[2];

  if ((ZinIrLocalRegAlloc::NeedAnyDMABuffer((ZinIrLocalRegAlloc *)a1, a2) & 1) == 0)
    ZinAssertImpl("Layer must need DMA buffer");
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  std::vector<ZinMirWorkUnitShapeCandidate>::reserve((void **)a4, 0xCCCCCCCCCCCCCCCDLL * (a3[1] - *a3));
  ChannelAssignment = ZinEngineLayerMirInfo::GetChannelAssignment(a2[33]);
  v9 = *(_OWORD *)ChannelAssignment;
  v10 = *(_OWORD *)(ChannelAssignment + 16);
  v104 = *(_QWORD *)(ChannelAssignment + 32);
  v103[0] = v9;
  v103[1] = v10;
  v11 = a2[33];
  v12 = (ZinEngineLayerMirInfo *)((char *)v11 + 120);
  memcpy(__dst, (char *)v11 + 120, sizeof(__dst));
  v79 = (_QWORD *)((char *)v11 + 576);
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v95, (uint64_t)v11 + 576);
  v97 = *((_DWORD *)v11 + 154);
  v78 = (_QWORD *)((char *)v11 + 624);
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v98, (uint64_t)v11 + 624);
  v100 = *((_DWORD *)v11 + 166);
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v101, (uint64_t)v11 + 672);
  v93[0] = 0;
  v93[1] = 0;
  v91[1] = 0;
  v92 = (uint64_t *)v93;
  v90 = (uint64_t *)v91;
  v91[0] = 0;
  FifoMode::GetFifoModeUtil(a1[2], &v89);
  v13 = (ZinIrTensor *)(*((uint64_t (**)(ZinEngineLayerMirInfo **, _QWORD, _QWORD))*a2 + 4))(a2, 0, 0);
  RootTensor = ZinIrTensor::GetRootTensor(v13);
  v15 = *((_QWORD *)RootTensor + 13);
  v77 = (_QWORD *)((char *)v11 + 672);
  if (v15
    && (v16 = *(ZinIrSymbol ***)(v15 + 40), v16 != *(ZinIrSymbol ***)(v15 + 48))
    && (RootTensor = *v16) != 0
    && (LODWORD(RootTensor) = ZinIrSymbol::GetMemType(RootTensor), !(_DWORD)RootTensor))
  {
    v75 = (ZinIrRegAllocUtil *)(*((uint64_t (**)(ZinEngineLayerMirInfo **, _QWORD, _QWORD))*a2 + 4))(a2, 0, 0);
    RootTensor = (ZinIrSymbol *)ZinIrRegAllocUtil::GetPostAllocationInterleave(v75, v76);
    v17 = (uint64_t)RootTensor;
  }
  else
  {
    v17 = 1;
  }
  v18 = *a3;
  v19 = a3[1];
  if (v18 != v19)
  {
    v80 = a4 + 16;
    while (1)
    {
      v20 = v18[1];
      v21 = v18[2];
      v22 = v18[3];
      v88 = v18[4];
      v23 = *v18;
      v86 = v21;
      v87 = v22;
      v84 = v23;
      v85 = v20;
      BYTE13(v88) = 0;
      ZinIrLocalRegAlloc::UpdateNERasterizationParams((int)RootTensor, v12, (MirInfoChannelAssignment *)&v84);
      v24 = v89;
      OutputCropOffsetXLsbs = ZinIrLocalRegAlloc::GetOutputCropOffsetXLsbs((ZinIrLocalRegAlloc *)a1, (const ZinANELayer *)a2);
      LOBYTE(v24) = (*(uint64_t (**)(uint64_t, ZinEngineLayerMirInfo **, uint64_t, _QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v24 + 24))(v24, a2, v17, OutputCropOffsetXLsbs, v87, *((_QWORD *)&v87 + 1), *((_QWORD *)&v86 + 1), DWORD2(v88), BYTE12(v88), v77, v78, v79);
      v26 = v88;
      FatTileEnable = MirInfoChannelAssignment::GetFatTileEnable((MirInfoChannelAssignment *)&v84);
      v81 = v26;
      v82 = v24;
      v83 = FatTileEnable;
      RootTensor = (ZinIrSymbol *)std::__tree<std::__value_type<ZinIrLocalRegAlloc::WorkUnitPruningKey,unsigned long>,std::__map_value_compare<ZinIrLocalRegAlloc::WorkUnitPruningKey,std::__value_type<ZinIrLocalRegAlloc::WorkUnitPruningKey,unsigned long>,std::less<ZinIrLocalRegAlloc::WorkUnitPruningKey>,true>,std::allocator<std::__value_type<ZinIrLocalRegAlloc::WorkUnitPruningKey,unsigned long>>>::find<ZinIrLocalRegAlloc::WorkUnitPruningKey>((uint64_t)&v92, &v81);
      if (v93 != (_QWORD **)RootTensor && (unint64_t)v87 <= *((_QWORD *)RootTensor + 6))
        goto LABEL_60;
      RootTensor = (ZinIrSymbol *)std::__tree<std::__value_type<ZinIrLocalRegAlloc::WorkUnitPruningKey,unsigned long>,std::__map_value_compare<ZinIrLocalRegAlloc::WorkUnitPruningKey,std::__value_type<ZinIrLocalRegAlloc::WorkUnitPruningKey,unsigned long>,std::less<ZinIrLocalRegAlloc::WorkUnitPruningKey>,true>,std::allocator<std::__value_type<ZinIrLocalRegAlloc::WorkUnitPruningKey,unsigned long>>>::find<ZinIrLocalRegAlloc::WorkUnitPruningKey>((uint64_t)&v90, &v81);
      if (v91 != (_QWORD **)RootTensor && (unint64_t)v87 >= *((_QWORD *)RootTensor + 6))
      {
        v37 = *(ZinIrSymbol **)(a4 + 8);
        v36 = *(_QWORD *)(a4 + 16);
        if ((unint64_t)v37 >= v36)
        {
          RootTensor = *(ZinIrSymbol **)a4;
          v48 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v37 - *(_QWORD *)a4) >> 4);
          v49 = v48 + 1;
          if (v48 + 1 > 0x333333333333333)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v50 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v36 - (_QWORD)RootTensor) >> 4);
          if (2 * v50 > v49)
            v49 = 2 * v50;
          if (v50 >= 0x199999999999999)
            v51 = 0x333333333333333;
          else
            v51 = v49;
          if (v51)
          {
            v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>(v80, v51);
            RootTensor = *(ZinIrSymbol **)a4;
            v37 = *(ZinIrSymbol **)(a4 + 8);
          }
          else
          {
            v52 = 0;
          }
          v63 = &v52[80 * v48];
          *(_OWORD *)v63 = v84;
          v64 = v85;
          v65 = v86;
          v66 = v88;
          *((_OWORD *)v63 + 3) = v87;
          *((_OWORD *)v63 + 4) = v66;
          *((_OWORD *)v63 + 1) = v64;
          *((_OWORD *)v63 + 2) = v65;
          if (v37 == RootTensor)
          {
            v71 = &v52[80 * v48];
          }
          else
          {
            v67 = &v52[80 * v48];
            do
            {
              *((_OWORD *)v67 - 5) = *((_OWORD *)v37 - 5);
              v68 = *((_OWORD *)v37 - 4);
              v69 = *((_OWORD *)v37 - 3);
              v70 = *((_OWORD *)v37 - 2);
              v71 = v67 - 80;
              *(_OWORD *)(v67 - 18) = *(_OWORD *)((char *)v37 - 18);
              *((_OWORD *)v67 - 3) = v69;
              *((_OWORD *)v67 - 2) = v70;
              *((_OWORD *)v67 - 4) = v68;
              v37 = (ZinIrSymbol *)((char *)v37 - 80);
              v67 -= 80;
            }
            while (v37 != RootTensor);
          }
          v41 = v63 + 80;
          *(_QWORD *)a4 = v71;
          *(_QWORD *)(a4 + 8) = v63 + 80;
          *(_QWORD *)(a4 + 16) = &v52[80 * v51];
          if (RootTensor)
            operator delete(RootTensor);
        }
        else
        {
          *(_OWORD *)v37 = v84;
          v38 = v85;
          v39 = v86;
          v40 = v88;
          *((_OWORD *)v37 + 3) = v87;
          *((_OWORD *)v37 + 4) = v40;
          *((_OWORD *)v37 + 1) = v38;
          *((_OWORD *)v37 + 2) = v39;
          v41 = (_OWORD *)((char *)v37 + 80);
        }
        *(_QWORD *)(a4 + 8) = v41;
        goto LABEL_60;
      }
      DMABuffers = ZinIrLocalRegAlloc::AllocateDMABuffers((ZinIrLocalRegAlloc *)a1, (ZinANELayer *)a2, 0, 0);
      ZinIrLocalRegAlloc::FreeDMADefaultBuffers((uint64_t)a1, (ZinANELayer *)a2);
      ZinIrLocalRegAlloc::FreeDMACachedBuffers((ZinIrLocalRegAlloc *)a1, (ZinANELayer *)a2);
      if (!DMABuffers)
        break;
      v30 = *(_OWORD **)(a4 + 8);
      v29 = *(_QWORD *)(a4 + 16);
      if ((unint64_t)v30 >= v29)
      {
        v42 = *(_OWORD **)a4;
        v43 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v30 - *(_QWORD *)a4) >> 4);
        v44 = v43 + 1;
        if (v43 + 1 > 0x333333333333333)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v45 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v29 - (_QWORD)v42) >> 4);
        if (2 * v45 > v44)
          v44 = 2 * v45;
        if (v45 >= 0x199999999999999)
          v46 = 0x333333333333333;
        else
          v46 = v44;
        if (v46)
        {
          v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>(v80, v46);
          v42 = *(_OWORD **)a4;
          v30 = *(_OWORD **)(a4 + 8);
        }
        else
        {
          v47 = 0;
        }
        v54 = &v47[80 * v43];
        *(_OWORD *)v54 = v84;
        v55 = v85;
        v56 = v86;
        v57 = v88;
        *((_OWORD *)v54 + 3) = v87;
        *((_OWORD *)v54 + 4) = v57;
        *((_OWORD *)v54 + 1) = v55;
        *((_OWORD *)v54 + 2) = v56;
        if (v30 == v42)
        {
          v62 = &v47[80 * v43];
        }
        else
        {
          v58 = &v47[80 * v43];
          do
          {
            *((_OWORD *)v58 - 5) = *(v30 - 5);
            v59 = *(v30 - 4);
            v60 = *(v30 - 3);
            v61 = *(v30 - 2);
            v62 = v58 - 80;
            *(_OWORD *)(v58 - 18) = *(_OWORD *)((char *)v30 - 18);
            *((_OWORD *)v58 - 3) = v60;
            *((_OWORD *)v58 - 2) = v61;
            *((_OWORD *)v58 - 4) = v59;
            v30 -= 5;
            v58 -= 80;
          }
          while (v30 != v42);
        }
        v34 = v54 + 80;
        *(_QWORD *)a4 = v62;
        *(_QWORD *)(a4 + 8) = v54 + 80;
        *(_QWORD *)(a4 + 16) = &v47[80 * v46];
        if (v42)
          operator delete(v42);
      }
      else
      {
        *v30 = v84;
        v31 = v85;
        v32 = v86;
        v33 = v88;
        v30[3] = v87;
        v30[4] = v33;
        v30[1] = v31;
        v30[2] = v32;
        v34 = v30 + 5;
      }
      *(_QWORD *)(a4 + 8) = v34;
      RootTensor = (ZinIrSymbol *)std::__tree<std::__value_type<ZinIrLocalRegAlloc::WorkUnitPruningKey,unsigned long>,std::__map_value_compare<ZinIrLocalRegAlloc::WorkUnitPruningKey,std::__value_type<ZinIrLocalRegAlloc::WorkUnitPruningKey,unsigned long>,std::less<ZinIrLocalRegAlloc::WorkUnitPruningKey>,true>,std::allocator<std::__value_type<ZinIrLocalRegAlloc::WorkUnitPruningKey,unsigned long>>>::find<ZinIrLocalRegAlloc::WorkUnitPruningKey>((uint64_t)&v90, &v81);
      if (v91 == (_QWORD **)RootTensor)
      {
        v53 = v87;
        v105[0] = &v81;
        RootTensor = (ZinIrSymbol *)std::__tree<std::__value_type<ZinIrLocalRegAlloc::WorkUnitPruningKey,unsigned long>,std::__map_value_compare<ZinIrLocalRegAlloc::WorkUnitPruningKey,std::__value_type<ZinIrLocalRegAlloc::WorkUnitPruningKey,unsigned long>,std::less<ZinIrLocalRegAlloc::WorkUnitPruningKey>,true>,std::allocator<std::__value_type<ZinIrLocalRegAlloc::WorkUnitPruningKey,unsigned long>>>::__emplace_unique_key_args<ZinIrLocalRegAlloc::WorkUnitPruningKey,std::piecewise_construct_t const&,std::tuple<ZinIrLocalRegAlloc::WorkUnitPruningKey const&>,std::tuple<>>(&v90, &v81, (uint64_t)&std::piecewise_construct, v105);
        goto LABEL_50;
      }
      v35 = v87;
      if ((unint64_t)v87 < *((_QWORD *)RootTensor + 6))
        goto LABEL_48;
LABEL_60:
      v18 += 5;
      if (v18 == v19)
        goto LABEL_61;
    }
    RootTensor = (ZinIrSymbol *)std::__tree<std::__value_type<ZinIrLocalRegAlloc::WorkUnitPruningKey,unsigned long>,std::__map_value_compare<ZinIrLocalRegAlloc::WorkUnitPruningKey,std::__value_type<ZinIrLocalRegAlloc::WorkUnitPruningKey,unsigned long>,std::less<ZinIrLocalRegAlloc::WorkUnitPruningKey>,true>,std::allocator<std::__value_type<ZinIrLocalRegAlloc::WorkUnitPruningKey,unsigned long>>>::find<ZinIrLocalRegAlloc::WorkUnitPruningKey>((uint64_t)&v92, &v81);
    if (v93 == (_QWORD **)RootTensor)
    {
      v53 = v87;
      v105[0] = &v81;
      RootTensor = (ZinIrSymbol *)std::__tree<std::__value_type<ZinIrLocalRegAlloc::WorkUnitPruningKey,unsigned long>,std::__map_value_compare<ZinIrLocalRegAlloc::WorkUnitPruningKey,std::__value_type<ZinIrLocalRegAlloc::WorkUnitPruningKey,unsigned long>,std::less<ZinIrLocalRegAlloc::WorkUnitPruningKey>,true>,std::allocator<std::__value_type<ZinIrLocalRegAlloc::WorkUnitPruningKey,unsigned long>>>::__emplace_unique_key_args<ZinIrLocalRegAlloc::WorkUnitPruningKey,std::piecewise_construct_t const&,std::tuple<ZinIrLocalRegAlloc::WorkUnitPruningKey const&>,std::tuple<>>(&v92, &v81, (uint64_t)&std::piecewise_construct, v105);
LABEL_50:
      *((_QWORD *)RootTensor + 6) = v53;
      goto LABEL_60;
    }
    v35 = v87;
    if ((unint64_t)v87 <= *((_QWORD *)RootTensor + 6))
      goto LABEL_60;
LABEL_48:
    *((_QWORD *)RootTensor + 6) = v35;
    goto LABEL_60;
  }
LABEL_61:
  memcpy(v12, __dst, 0x1C0uLL);
  *((_DWORD *)v11 + 142) = __dst[112];
  if (v12 == (ZinMirL2Config::NE *)__dst)
  {
    *((_DWORD *)v11 + 154) = v97;
    *((_DWORD *)v11 + 166) = v100;
  }
  else
  {
    *((_DWORD *)v11 + 152) = v96;
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>(v79, v95[2], 0);
    *((_DWORD *)v11 + 154) = v97;
    *((_DWORD *)v11 + 164) = v99;
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>(v78, v98[2], 0);
    *((_DWORD *)v11 + 166) = v100;
    *((_DWORD *)v11 + 176) = v102;
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>(v77, v101[2], 0);
  }
  v72 = ZinEngineLayerMirInfo::SetChannelAssignment(a2[33], (const MirInfoChannelAssignment *)v103);
  v73 = v89;
  v89 = 0;
  if (v73)
    (*(void (**)(uint64_t, double))(*(_QWORD *)v73 + 8))(v73, v72);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v90, v91[0]);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v92, v93[0]);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v101);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v98);
  return std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v95);
}

void sub_206DC241C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,_QWORD *a34,uint64_t a35,char a36,_QWORD *a37,uint64_t a38,char a39)
{
  uint64_t v39;
  void *v41;

  if (a32)
    (*(void (**)(uint64_t))(*(_QWORD *)a32 + 8))(a32);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a33, a34);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a36, a37);
  ZinMirL2Config::~ZinMirL2Config((ZinMirL2Config *)&a39);
  v41 = *(void **)v39;
  if (*(_QWORD *)v39)
  {
    *(_QWORD *)(v39 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::UpdateNERasterizationParams(int a1, ZinMirL2Config::NE *this, MirInfoChannelAssignment *a3)
{
  uint64_t result;

  if (*((_BYTE *)this + 30) || *((_BYTE *)this + 113))
    ZinAssertImpl("NE rasterization params are locked");
  ZinMirL2Config::NE::SetChannelAssignment(this, a3);
  if (!*((_BYTE *)this + 30))
  {
    *(_OWORD *)this = *((_OWORD *)a3 + 3);
    *((_QWORD *)this + 2) = *((_QWORD *)a3 + 5);
  }
  result = ZinMirL2Config::NE::SetSmallSourceMode((uint64_t)this, *((_DWORD *)a3 + 18));
  if (!*((_BYTE *)this + 113))
    *((_QWORD *)this + 10) = *((_QWORD *)a3 + 8);
  *((_BYTE *)this + 29) = *((_BYTE *)a3 + 76);
  return result;
}

unint64_t ZinIrLocalRegAlloc::GetMaxTileHeight(ZinIrLocalRegAlloc *this, ZinNELayer *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *((_QWORD *)a2 + 33);
  v5 = (*(uint64_t (**)(ZinNELayer *, uint64_t))(*(_QWORD *)a2 + 368))(a2, 3);
  if (!ZinIrLocalRegAlloc::NeedAnyDMABuffer(this, (ZinEngineLayerMirInfo **)a2))
    return v5;
  if (ZinIrLocalRegAlloc::NeedOutputDMADefaultBuffer(this, (ZinEngineLayerMirInfo **)a2)
    && (*(unsigned int (**)(ZinNELayer *))(*(_QWORD *)a2 + 408))(a2))
  {
    v6 = 16;
    if (v5 < 0x10)
      v6 = v5;
    if (!*(_BYTE *)(v4 + 312))
      v5 = v6;
  }
  return ZinIrLocalRegAlloc::SearchTallestDMAAllocatableTileHeight(this, a2, 1uLL, v5);
}

uint64_t ZinIrLocalRegAlloc::EnumerateWorkunitCandidatesWithMulticast@<X0>(ZinIrLocalRegAlloc *this@<X0>, const ZinNELayer *a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  ZinEngineLayerMirInfo **v17;
  char v18;
  __int128 v19;
  uint64_t ChannelAssignment;
  __int128 v21;
  __int128 v22;
  const MirInfoChannelAssignment *v23;
  const MirInfoChannelAssignment *v24;
  unsigned int v25;
  int v27;
  int v28;
  void *v29[5];
  void *__p;
  _OWORD *v31;
  void *v32;
  const MirInfoChannelAssignment *v33;
  uint64_t v34;
  void *v35;
  _BYTE *v36;
  ZinEngineLayerMirInfo **v37;
  __int128 __src;
  __int128 v39;
  uint64_t v40;
  uint64_t v41[3];

  v41[0] = *MEMORY[0x24BDAC8D0];
  v14 = *((_QWORD *)this + 2);
  v13 = *((_QWORD *)this + 3);
  v27 = *(unsigned __int8 *)(v13 + 499);
  if (*(_BYTE *)(v13 + 499))
    v15 = 1;
  else
    v15 = 2;
  v28 = v15;
  v16 = *((_QWORD *)a2 + 33);
  v17 = (ZinEngineLayerMirInfo **)operator new();
  ZinMirComputeChannelAssignmentParams::ZinMirComputeChannelAssignmentParams((uint64_t)v17, v14, v13, a2, v16, v28);
  v37 = v17;
  ZinMirComputeChannelAssignmentParams::FindSortedCandidates(v17, (uint64_t)&v35);
  v32 = 0;
  v33 = 0;
  v34 = 0;
  if (v27)
  {
    std::vector<MirInfoChannelAssignment>::__assign_with_size[abi:ne180100]<MirInfoChannelAssignment const*,MirInfoChannelAssignment const*>((char *)&v32, (char *)v35, (uint64_t)v36, 0xCCCCCCCCCCCCCCCDLL * ((v36 - (_BYTE *)v35) >> 3));
  }
  else
  {
    v18 = *((_BYTE *)v35 + 32);
    v19 = *((_OWORD *)v35 + 1);
    __src = *(_OWORD *)v35;
    v39 = v19;
    LOBYTE(v40) = v18;
    std::vector<MirInfoChannelAssignment>::__assign_with_size[abi:ne180100]<MirInfoChannelAssignment const*,MirInfoChannelAssignment const*>((char *)&v32, (char *)&__src, (uint64_t)v41, 1uLL);
  }
  ChannelAssignment = ZinEngineLayerMirInfo::GetChannelAssignment(*((ZinEngineLayerMirInfo **)a2 + 33));
  v21 = *(_OWORD *)ChannelAssignment;
  v22 = *(_OWORD *)(ChannelAssignment + 16);
  v40 = *(_QWORD *)(ChannelAssignment + 32);
  v39 = v22;
  __src = v21;
  *(_QWORD *)(a7 + 8) = 0;
  *(_QWORD *)(a7 + 16) = 0;
  *(_QWORD *)a7 = 0;
  v24 = (const MirInfoChannelAssignment *)v32;
  v23 = v33;
  while (v24 != v23)
  {
    ZinEngineLayerMirInfo::SetChannelAssignment(*((ZinEngineLayerMirInfo **)a2 + 33), v24);
    v25 = *(_DWORD *)(ZinIrOpLayer::GetInputTensor(a2, 0) + 88);
    (*(void (**)(void **__return_ptr, const ZinNELayer *))(*(_QWORD *)a2 + 376))(v29, a2);
    ZinMirNERastParamsOpt::EnumerateTileWorkUnitCandidates(a2, v25, (uint64_t)v29, a3, a4, a5, a6, &__p);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<ZinMirWorkUnitShapeCandidate const*>,std::__wrap_iter<ZinMirWorkUnitShapeCandidate const*>,std::back_insert_iterator<std::vector<ZinMirWorkUnitShapeCandidate>>,0>(__p, v31, (void **)a7);
    if (__p)
    {
      v31 = __p;
      operator delete(__p);
    }
    v24 = (const MirInfoChannelAssignment *)((char *)v24 + 40);
  }
  ZinEngineLayerMirInfo::SetChannelAssignment(*((ZinEngineLayerMirInfo **)a2 + 33), (const MirInfoChannelAssignment *)&__src);
  if (v32)
  {
    v33 = (const MirInfoChannelAssignment *)v32;
    operator delete(v32);
  }
  if (v35)
  {
    v36 = v35;
    operator delete(v35);
  }
  ZinMirComputeChannelAssignmentParams::~ZinMirComputeChannelAssignmentParams((ZinMirComputeChannelAssignmentParams *)v17);
  return MEMORY[0x20BD002F8]();
}

void sub_206DC2854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,ZinMirComputeChannelAssignmentParams *a24)
{
  if (__p)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  std::unique_ptr<ZinMirComputeChannelAssignmentParams>::reset[abi:ne180100](&a24, 0);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::OptimizeRasterizationParamsForNEResidentLayer(ZinIrLocalRegAlloc *this, ZinNELayer *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t Pow2;
  unint64_t v8;
  int v9;
  int v10;
  void *__p[3];
  _QWORD v12[2];
  char v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  _BYTE v17[26];
  int v18;
  char v19;
  void *v20[3];

  if (!*(_BYTE *)(*((_QWORD *)this + 2) + 1105))
    return 0;
  if (!ZinIrRegAllocUtil::AreAllActivationTensorsResidentOrDMACached(a2, a2))
    return 0;
  v4 = *((_QWORD *)a2 + 33);
  if (*(_BYTE *)(v4 + 150))
  {
    if (*(_BYTE *)(v4 + 233))
      return 0;
  }
  *(_BYTE *)(v4 + 150) = 0;
  *(_BYTE *)(v4 + 233) = 0;
  Pow2 = ZinRoundUpToNextPow2(*(_QWORD *)(v4 + 136));
  v5 = 0;
  if ((*(uint64_t (**)(ZinNELayer *, uint64_t))(*(_QWORD *)a2 + 368))(a2, 3) / Pow2 <= 0x7D0)
  {
    v8 = (*(uint64_t (**)(ZinNELayer *, uint64_t))(*(_QWORD *)a2 + 368))(a2, 3);
    ZinIrLocalRegAlloc::EnumerateWorkunitCandidatesWithMulticast(this, a2, 1uLL, v8, Pow2, 1, (uint64_t)v20);
    ZinMirL2Config::ZinMirSetTileHeight((ZinMirL2Config *)(v4 + 120), a2, 1);
    v18 = 65793;
    v19 = 1;
    v14 = 0;
    v15 = 0;
    v12[0] = 0;
    v12[1] = 0;
    v13 = 0;
    v16 = 0u;
    memset(v17, 0, 21);
    v17[21] = 1;
    ZinIrOpLayer::GetInputTensor(a2, 0);
    ZinIrOpLayer::GetInputTensorDimensions(a2, __p);
    v9 = ZinMirNERastParamsOpt::EvaluateComputeCostForTileHeightCandidates();
    v10 = (int)__p[0];
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v9)
    {
      v5 = 3;
    }
    else
    {
      ZinIrLocalRegAlloc::UpdateNERasterizationParams(v10, (ZinMirL2Config::NE *)(v4 + 120), (MirInfoChannelAssignment *)v12);
      v5 = 0;
    }
    if (v20[0])
    {
      v20[1] = v20[0];
      operator delete(v20[0]);
    }
  }
  return v5;
}

void sub_206DC2AA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  if (__p)
    operator delete(__p);
  v13 = *(void **)(v11 - 72);
  if (v13)
  {
    *(_QWORD *)(v11 - 64) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrLocalRegAlloc::OptimizeRasterizationParamsForPEResidentLayer(ZinIrLocalRegAlloc *this, ZinPELayer *a2)
{
  uint64_t v3;
  uint64_t v4;
  int IsAllInputsResident;
  __int128 v7;
  uint64_t v8;
  char v9;
  void *__p[3];

  if (!ZinIrRegAllocUtil::AreAllActivationTensorsResidentOrDMACached(a2, a2))
    return 0;
  v3 = *((_QWORD *)a2 + 33);
  if (*(_BYTE *)(v3 + 256) || *(_BYTE *)(v3 + 233))
    return 0;
  IsAllInputsResident = ZinIrOpLayer::IsAllInputsResident(a2);
  ZinMirL2Config::ZinMirSetTileHeight((ZinMirL2Config *)(v3 + 120), a2, IsAllInputsResident);
  EnumerateTilePatchShapeCandidates(a2, *(_QWORD *)(v3 + 200), 1uLL, (uint64_t)__p);
  v7 = 0uLL;
  v8 = 0;
  v9 = 1;
  if (ZinMirL2Config::EvaluateComputeCostForPatchShapeCandidates(v3 + 120, (__int128 **)__p, a2, &v7, 1))
  {
    v4 = 3;
  }
  else
  {
    if (*(unsigned __int8 *)(v3 + 256) | *(unsigned __int8 *)(v3 + 233))
      ZinAssertImpl("PE rasterization params are locked");
    v4 = 0;
    *(_OWORD *)(v3 + 240) = v7;
    *(_QWORD *)(v3 + 200) = v8;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v4;
}

void sub_206DC2BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrLocalRegAlloc::OptimizeRasterizationParamsForResidentLayers(ZinIrLocalRegAlloc *this)
{
  ZinIrOpLayer **v1;
  ZinIrOpLayer **v2;
  ZinIrOpLayer *v4;
  _BOOL8 IsPELayer;

  v1 = (ZinIrOpLayer **)*((_QWORD *)this + 5);
  v2 = (ZinIrOpLayer **)*((_QWORD *)this + 6);
  if (v1 == v2)
    return 0;
  while (1)
  {
    v4 = *v1;
    if (!ZinIrOpLayer::IsANELayer(*v1))
      goto LABEL_7;
    IsPELayer = ZinIrOpLayer::IsPELayer(v4);
    if (!IsPELayer)
      break;
    if (ZinIrLocalRegAlloc::OptimizeRasterizationParamsForPEResidentLayer((ZinIrLocalRegAlloc *)IsPELayer, v4))return 3;
LABEL_7:
    if (++v1 == v2)
      return 0;
  }
  if (!ZinIrLocalRegAlloc::OptimizeRasterizationParamsForNEResidentLayer(this, v4))
    goto LABEL_7;
  return 3;
}

uint64_t ZinIrLocalRegAlloc::AllocateIntermediateTensors(ZinEngineLayerMirInfo ****this, ZinIrNetworkStatus *a2)
{
  uint64_t result;
  ZinEngineLayerMirInfo ***v5;
  ZinEngineLayerMirInfo ***v6;
  ZinEngineLayerMirInfo **v7;

  result = ZinIrLocalRegAlloc::AllocateTensorsToL2((ZinIrLocalRegAlloc *)this, a2);
  if (!(_DWORD)result)
  {
    result = ZinIrLocalRegAlloc::AllocateTensorsToDRAM((uint64_t)this, (CFArrayRef *)a2);
    if (!(_DWORD)result)
    {
      if (*((_BYTE *)this[2] + 1105))
        ZinIrLocalRegAlloc::AllocateAneDMABuffers((ZinIrOpLayer ***)this);
      else
        ZinIrLocalRegAlloc::AllocateFullSizeBufferInTmem((ZinIrLocalRegAlloc *)this);
      result = ZinIrLocalRegAlloc::OptimizeRasterizationParamsForResidentLayers((ZinIrLocalRegAlloc *)this);
      if (!(_DWORD)result)
      {
        result = ZinIrLocalRegAlloc::ExploreParallelExecutionOpportunity((ZinIrOpLayer *****)this);
        if (!(_DWORD)result)
        {
          result = ZinIrLocalRegAlloc::LowerKernelAfterChannelAssignmentParamUpdate((ZinIrLocalRegAlloc *)this, a2);
          if (!(_DWORD)result)
          {
            v5 = this[5];
            v6 = this[6];
            if (v5 == v6)
            {
              return 0;
            }
            else
            {
              do
              {
                v7 = *v5;
                if ((*((unsigned int (**)(ZinEngineLayerMirInfo **))**v5 + 15))(*v5))
                {
                  result = ZinIrLocalRegAlloc::ZinIrCreateKernelTensorSymbols((ZinIrLocalRegAlloc *)this, v7);
                  if ((_DWORD)result)
                    break;
                }
                result = 0;
                ++v5;
              }
              while (v5 != v6);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t ZinIrLocalRegAlloc::ExploreParallelExecutionOpportunity(ZinIrOpLayer *****this)
{
  ZinIrOpLayer ***v2;
  ZinIrOpLayer *v3;
  ZinIrOpLayer **v4;
  ZinIrOpLayer **v5;
  ZinIrOpLayer *v6;
  unsigned int ReallocationTensorForParallelExecution;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  ZinIrOpLayer **v12;
  ZinIrOpLayer ****v13;
  BOOL v14;
  uint64_t v15;
  ZinIrOpLayer ***v16;
  ZinIrOpLayer **v17;
  ZinIrOpLayer **v18;
  ZinIrOpLayer *v19;
  ZinIrOpLayer **v20;
  ZinIrOpLayer ****v21;
  uint64_t v23;
  unsigned int v24;
  _QWORD v25[3];
  char v26;
  uint8_t v27;
  char v28[15];
  void *__p;
  _QWORD *v30;
  uint64_t v31;
  _QWORD **v32;
  _QWORD *v33[2];

  if (*((_BYTE *)this[2] + 1113))
  {
    v2 = **this;
    v23 = (uint64_t)(*this + 1);
    if (v2 != (ZinIrOpLayer ***)v23)
    {
      v3 = 0;
      while (1)
      {
        v5 = v2[5];
        v4 = v2[6];
        if (v5 != v4)
          break;
LABEL_23:
        v12 = v2[1];
        if (v12)
        {
          do
          {
            v13 = (ZinIrOpLayer ****)v12;
            v12 = (ZinIrOpLayer **)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v13 = (ZinIrOpLayer ****)v2[2];
            v14 = *v13 == v2;
            v2 = (ZinIrOpLayer ***)v13;
          }
          while (!v14);
        }
        v2 = (ZinIrOpLayer ***)v13;
        if (v13 == (ZinIrOpLayer ****)v23)
          goto LABEL_29;
      }
      v6 = v3;
      while (1)
      {
        v3 = *v5;
        if (ZinIrOpLayer::IsANELayer(*v5))
          break;
        v3 = v6;
LABEL_16:
        ++v5;
        v6 = v3;
        if (v5 == v4)
          goto LABEL_23;
      }
      v33[0] = 0;
      v33[1] = 0;
      v31 = 0;
      v32 = v33;
      __p = 0;
      v30 = 0;
      ReallocationTensorForParallelExecution = ZinIrLocalRegAlloc::FindReallocationTensorForParallelExecution((uint64_t)this, v6, v3, v2 + 5, (uint64_t)&v32, (uint64_t)&__p);
      if (ReallocationTensorForParallelExecution)
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinIrLocalRegAlloc::ExploreParallelExecutionOpportunity(&v27, v28, v8);
      }
      else
      {
        v10 = __p;
        if (v30 == __p)
        {
          v9 = 1;
          if (!__p)
          {
LABEL_13:
            std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v32, v33[0]);
            if (!v9)
              return v24;
            goto LABEL_16;
          }
LABEL_12:
          v30 = v10;
          operator delete(v10);
          goto LABEL_13;
        }
        v26 = 0;
        v11 = operator new(8uLL);
        *v11 = v6;
        v25[1] = v11 + 1;
        v25[2] = v11 + 1;
        v25[0] = v11;
        ReallocationTensorForParallelExecution = ZinIrLocalRegAlloc::AllocateResidentTensorForParallelExecution((ZinIrLocalRegAlloc *)this, &v32, (uint64_t)v25, (ZinANELayer ***)&__p, &v26);
        operator delete(v11);
        if (!ReallocationTensorForParallelExecution)
        {
          v6 = (ZinIrOpLayer *)*(v30 - 1);
          v9 = 1;
          ReallocationTensorForParallelExecution = v24;
LABEL_11:
          v10 = __p;
          v3 = v6;
          v24 = ReallocationTensorForParallelExecution;
          if (!__p)
            goto LABEL_13;
          goto LABEL_12;
        }
      }
      v9 = 0;
      goto LABEL_11;
    }
LABEL_29:
    v15 = (uint64_t)(*this + 1);
    v16 = **this;
    if (v16 != (ZinIrOpLayer ***)v15)
    {
      do
      {
        v17 = v16[5];
        v18 = v16[6];
        while (v17 != v18)
        {
          v19 = *v17;
          if (ZinIrOpLayer::IsEngineLayer(*v17))
          {
            if (*((_QWORD *)v19 + 7))
            {
              if (*(_BYTE *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v19 + 32))(v19, 0, 0)+ 144))
              {
                ZinIrLocalRegAlloc::FreeDMADefaultBuffers((uint64_t)this, v19);
                ZinIrLocalRegAlloc::FreeDMACachedBuffers((ZinIrLocalRegAlloc *)this, v19);
                if ((ZinIrLocalRegAlloc::AllocateDMABuffers((ZinIrLocalRegAlloc *)this, v19, 1, 1) & 1) == 0
                  && (ZinIrLocalRegAlloc::AllocateDMABuffers((ZinIrLocalRegAlloc *)this, v19, 1, 0) & 1) == 0
                  && (ZinIrLocalRegAlloc::AllocateDMABuffers((ZinIrLocalRegAlloc *)this, v19, 0, 0) & 1) == 0)
                {
                  ZinAssertImpl("DMA buffer must be allocated back");
                }
              }
            }
          }
          ++v17;
        }
        v20 = v16[1];
        if (v20)
        {
          do
          {
            v21 = (ZinIrOpLayer ****)v20;
            v20 = (ZinIrOpLayer **)*v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            v21 = (ZinIrOpLayer ****)v16[2];
            v14 = *v21 == v16;
            v16 = (ZinIrOpLayer ***)v21;
          }
          while (!v14);
        }
        v16 = (ZinIrOpLayer ***)v21;
      }
      while (v21 != (ZinIrOpLayer ****)v15);
    }
  }
  return 0;
}

void sub_206DC3048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22,_QWORD *a23)
{
  void *v23;

  operator delete(v23);
  if (__p)
    operator delete(__p);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a22, a23);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::LowerKernelAfterChannelAssignmentParamUpdate(ZinIrLocalRegAlloc *this, ZinIrNetworkStatus *a2)
{
  ZinIrOpLayer **v3;
  ZinIrOpLayer **v4;
  ZinIrOpLayer *v6;
  MirInfoChannelAssignment *ChannelAssignment;
  uint64_t v8;
  uint64_t v9;
  MirInfoChannelAssignment *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (!*(_BYTE *)(*((_QWORD *)this + 2) + 1585))
    return 0;
  v3 = (ZinIrOpLayer **)*((_QWORD *)this + 5);
  v4 = (ZinIrOpLayer **)*((_QWORD *)this + 6);
  if (v3 == v4)
    return 0;
  while (1)
  {
    v6 = *v3;
    if (ZinIrOpLayer::IsNELayer(*v3))
    {
      ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(*((ZinEngineLayerMirInfo **)v6
                                                                                                  + 33));
      v8 = *((_QWORD *)v6 + 17);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 784);
        if (v9)
        {
          v10 = ChannelAssignment;
          v11 = *(_QWORD *)(*(_QWORD *)(v9 + 40) + 24);
          if (v11 != MirInfoChannelAssignment::GetNumClusters(ChannelAssignment)
            || (v12 = 0x6DB6DB6DB6DB6DB7
                    * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(v9 + 40) + 40) - *(_QWORD *)(*(_QWORD *)(v9 + 40) + 32)) >> 3),
                v12 != MirInfoChannelAssignment::GetNumNeededNEs(v10))
            || (v13 = *(int *)(*(_QWORD *)(v9 + 40) + 4), MirInfoChannelAssignment::GetOCGSize(v10) != v13))
          {
            if (ZinNELayer::LowerKernel(v6, *(_BYTE *)(*((_QWORD *)this + 2) + 1208), a2))
              break;
          }
        }
      }
    }
    if (++v3 == v4)
      return 0;
  }
  v15 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v15)
    ZinIrLocalRegAlloc::LowerKernelAfterChannelAssignmentParamUpdate(v15, v16, v17, v18, v19, v20, v21, v22);
  return 3;
}

uint64_t ZinIrLocalRegAlloc::IsQualifiedForReallocationToEnableParallelExecutions(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  ZinIrTensor *RootTensor;

  v3 = a2 + 1;
  v4 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 == a2 + 1)
  {
LABEL_10:
    if (v4 == v3)
      return 1;
    while (1)
    {
      RootTensor = (ZinIrTensor *)v4[4];
      v9 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(*(_QWORD **)(a1 + 32), &RootTensor);
      if (v9)
      {
        if ((CpAllocUtils::IsL2Dependent(*((_DWORD *)v9 + 6)) & 1) != 0)
          break;
      }
      v10 = (_QWORD *)v4[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v4[2];
          v8 = *v11 == (_QWORD)v4;
          v4 = v11;
        }
        while (!v8);
      }
      v4 = v11;
      if (v11 == v3)
        return 1;
    }
  }
  else
  {
    while (1)
    {
      RootTensor = ZinIrTensor::GetRootTensor((ZinIrTensor *)v4[4]);
      if (std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)(a1 + 528), &RootTensor))
      {
        break;
      }
      v6 = (_QWORD *)v4[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v4[2];
          v8 = *v7 == (_QWORD)v4;
          v4 = v7;
        }
        while (!v8);
      }
      v4 = v7;
      if (v7 == v3)
      {
        v4 = (_QWORD *)*a2;
        goto LABEL_10;
      }
    }
  }
  return 0;
}

uint64_t ZinIrLocalRegAlloc::FindReallocationTensorForParallelExecution(uint64_t a1, ZinIrOpLayer *a2, ZinIrOpLayer *a3, ZinIrOpLayer ***a4, uint64_t a5, uint64_t a6)
{
  ZinIrTensor *v11;
  unint64_t v12;
  ZinIrTensor *InputTensor;
  uint64_t v14;
  char v15;
  BOOL v16;
  ZinIrTensor *v17;
  unint64_t v18;
  ZinIrTensor *v19;
  uint64_t v20;
  char v21;
  BOOL v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  const ZinIrSymbol **v26;
  const ZinIrSymbol *v27;
  uint64_t *v28;
  uint64_t v30;
  uint64_t v31;
  ZinIrSymbol **v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  int v37;
  unint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  _QWORD *v43;
  unint64_t v44;
  ZinIrTensor *RootTensor;
  _QWORD *v46[2];
  uint64_t *v47;
  _QWORD *v48[2];
  ZinIrTensor *v49;
  _QWORD *v50[3];

  v50[2] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  if (ZinIrRegAllocUtil::IsQualifiedForParallelExecution(a2, a3, a4, *(_QWORD *)(a1 + 8), (void **)a6))
  {
    v48[0] = 0;
    v48[1] = 0;
    v47 = (uint64_t *)v48;
    if (*(_DWORD *)(*((_QWORD *)a2 + 33) + 1632) == 3)
    {
      v11 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
      RootTensor = ZinIrTensor::GetRootTensor(v11);
      std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>(&v47, (uint64_t *)&RootTensor, (uint64_t *)&RootTensor);
    }
    if (*((_QWORD *)a2 + 12) != *((_QWORD *)a2 + 11))
    {
      v12 = 0;
      while (1)
      {
        LODWORD(v49) = 0;
        if (ZinMemSourceIndexTranslator::GetL2SrcType(a2, v12, (int *)&v49))
          break;
        if ((ZinEngineLayerMirInfo::HasDmaRead(*((_QWORD *)a2 + 33), (int)v49) & 1) == 0)
        {
          RootTensor = 0;
          InputTensor = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(a2, v12);
          RootTensor = ZinIrTensor::GetRootTensor(InputTensor);
          v14 = (*(uint64_t (**)(uint64_t))(**((_QWORD **)RootTensor + 12) + 56))(*((_QWORD *)RootTensor + 12));
          v16 = v15 && v14 == 0;
          if (v16)
            std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>(&v47, (uint64_t *)&RootTensor, (uint64_t *)&RootTensor);
        }
        if (++v12 >= (uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 3)
          goto LABEL_15;
      }
      v23 = 3;
      goto LABEL_67;
    }
LABEL_15:
    v17 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a3 + 32))(a3, 0, 0);
    v49 = ZinIrTensor::GetRootTensor(v17);
    std::set<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::set[abi:ne180100]((uint64_t)&RootTensor, (uint64_t *)&v49, 1);
    if (*((_QWORD *)a3 + 12) != *((_QWORD *)a3 + 11))
    {
      v18 = 0;
      do
      {
        v49 = 0;
        v19 = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(a3, v18);
        v49 = ZinIrTensor::GetRootTensor(v19);
        v20 = (*(uint64_t (**)(uint64_t))(**((_QWORD **)v49 + 12) + 56))(*((_QWORD *)v49 + 12));
        if (v21)
          v22 = v20 == 0;
        else
          v22 = 0;
        if (v22)
          std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>((uint64_t **)&RootTensor, (uint64_t *)&v49, (uint64_t *)&v49);
        ++v18;
      }
      while (v18 < (uint64_t)(*((_QWORD *)a3 + 12) - *((_QWORD *)a3 + 11)) >> 3);
    }
    if (*(_QWORD *)(a6 + 8) - *(_QWORD *)a6 > 8uLL)
    {
      if (&v47 != (uint64_t **)a5)
        std::__tree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::__assign_multi<std::__tree_const_iterator<ZinIrTensor *,std::__tree_node<ZinIrTensor *,void *> *,long>>((uint64_t **)a5, v47, v48);
      goto LABEL_66;
    }
    v50[0] = 0;
    v50[1] = 0;
    v49 = (ZinIrTensor *)v50;
    v43 = 0;
    v44 = 0;
    v42 = (uint64_t *)&v43;
    v24 = v47;
    if (v47 != (uint64_t *)v48)
    {
      do
      {
        v41 = v24[4];
        v25 = *(_QWORD *)(v41 + 104);
        if (v25)
        {
          v26 = *(const ZinIrSymbol ***)(v25 + 40);
          if (v26 != *(const ZinIrSymbol ***)(v25 + 48))
          {
            v27 = *v26;
            v28 = (uint64_t *)RootTensor;
            if (*v26 && RootTensor != (ZinIrTensor *)v46)
            {
              do
              {
                v30 = v28[4];
                v40 = v30;
                if (v41 != v30)
                {
                  v31 = *(_QWORD *)(v30 + 104);
                  if (v31)
                  {
                    v32 = *(ZinIrSymbol ***)(v31 + 40);
                    if (v32 != *(ZinIrSymbol ***)(v31 + 48)
                      && *v32
                      && ZinIrSymbol::HasSpaceIntersect(*v32, v27))
                    {
                      std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>((uint64_t **)&v49, &v41, &v41);
                      std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>(&v42, &v40, &v40);
                    }
                  }
                }
                v33 = (uint64_t *)v28[1];
                if (v33)
                {
                  do
                  {
                    v34 = v33;
                    v33 = (uint64_t *)*v33;
                  }
                  while (v33);
                }
                else
                {
                  do
                  {
                    v34 = (uint64_t *)v28[2];
                    v16 = *v34 == (_QWORD)v28;
                    v28 = v34;
                  }
                  while (!v16);
                }
                v28 = v34;
              }
              while (v34 != (uint64_t *)v46);
            }
          }
        }
        v35 = (uint64_t *)v24[1];
        if (v35)
        {
          do
          {
            v36 = v35;
            v35 = (uint64_t *)*v35;
          }
          while (v35);
        }
        else
        {
          do
          {
            v36 = (uint64_t *)v24[2];
            v16 = *v36 == (_QWORD)v24;
            v24 = v36;
          }
          while (!v16);
        }
        v24 = v36;
      }
      while (v36 != (uint64_t *)v48);
    }
    v37 = ZinIrLocalRegAlloc::IsQualifiedForReallocationToEnableParallelExecutions(a1, &v49) ^ 1;
    if (&v49 == (ZinIrTensor **)a5)
      LOBYTE(v37) = 1;
    if ((v37 & 1) == 0)
      std::__tree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::__assign_multi<std::__tree_const_iterator<ZinIrTensor *,std::__tree_node<ZinIrTensor *,void *> *,long>>((uint64_t **)a5, v49, v50);
    if (ZinIrLocalRegAlloc::IsQualifiedForReallocationToEnableParallelExecutions(a1, &v42))
    {
      v38 = *(_QWORD *)(a5 + 16);
      if (v38)
      {
        if (&v42 == (uint64_t **)a5 || v44 >= v38)
          goto LABEL_65;
        goto LABEL_64;
      }
      if (&v42 != (uint64_t **)a5)
LABEL_64:
        std::__tree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::__assign_multi<std::__tree_const_iterator<ZinIrTensor *,std::__tree_node<ZinIrTensor *,void *> *,long>>((uint64_t **)a5, v42, &v43);
    }
LABEL_65:
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v42, v43);
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v49, v50[0]);
LABEL_66:
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&RootTensor, v46[0]);
    v23 = 0;
LABEL_67:
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v47, v48[0]);
    return v23;
  }
  return 0;
}

void sub_206DC371C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, _QWORD *a16, uint64_t a17, char a18, _QWORD *a19)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a15, a16);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a18, a19);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::AllocateResidentTensorForParallelExecution(ZinIrLocalRegAlloc *this, _QWORD *a2, uint64_t a3, ZinANELayer ***a4, char *a5)
{
  uint64_t v5;
  ZinANELayer **v6;
  ZinANELayer **v7;
  uint64_t v8;
  unint64_t *v12;
  _BYTE *v13;
  uint64_t v14;
  ZinANELayer *v15;
  ZinANELayer *v16;
  ZinIrTensor *v17;
  _QWORD *v18;
  ZinIrTensor *v19;
  _QWORD *v20;
  int64_t v21;
  int v22;
  unsigned int v23;
  _BYTE *v24;
  void *v25;
  int v26;
  int InputDMADefaultBuffer;
  ZinANELayer *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  BOOL v37;
  _BOOL8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  _BOOL8 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BOOL8 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  ZinIrTensor *RootTensor;
  ZinIrTensor *v65;
  void *__p;
  _BYTE *v67;

  v5 = *(_QWORD *)(a3 + 8);
  if (v5 == *(_QWORD *)a3)
    return 0;
  v6 = *a4;
  v7 = a4[1];
  if (v7 == *a4 || (unint64_t)(v5 - *(_QWORD *)a3) > 8)
    return 0;
  v12 = **(unint64_t ***)a3;
  if ((unint64_t)((char *)v7 - (char *)*a4) >= 9)
  {
    v13 = 0;
    v14 = 0x7FFFFFFFLL;
    do
    {
      v16 = *v6++;
      v15 = v16;
      v17 = (ZinIrTensor *)(*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)v16 + 32))(v16, 0, 0);
      RootTensor = ZinIrTensor::GetRootTensor(v17);
      __p = &RootTensor;
      v18 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)this + 144, &RootTensor, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p);
      if (v18[3] < v14)
        v14 = v18[3];
      v19 = (ZinIrTensor *)(*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0, 0);
      RootTensor = ZinIrTensor::GetRootTensor(v19);
      __p = &RootTensor;
      v20 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)this + 144, &RootTensor, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p);
      if ((uint64_t)v13 <= v20[4])
        v13 = (_BYTE *)v20[4];
    }
    while (v6 != v7);
    if ((ZinEngineLayerMirInfo::HasDmaRead((ZinEngineLayerMirInfo *)v12[33]) & 1) == 0)
      ZinAssertImpl("Only supports that first layer reads from DMA.");
    (*(void (**)(void **__return_ptr, unint64_t *))(*v12 + 512))(&__p, v12);
    v21 = v67 - (_BYTE *)__p;
    if (__p)
    {
      v67 = __p;
      operator delete(__p);
    }
    if (v21 != 8)
      ZinAssertImpl("Only supports that first layer has single data input.");
    v22 = ZinEngineLayerMirInfo::HasDmaRead((ZinEngineLayerMirInfo *)v12[33]);
    v23 = *(_DWORD *)(v12[33] + 1632) - 1;
    if ((v22 & 1) == 0 && v23 > 1)
      return 0;
    ZinIrLocalRegAlloc::FreeDMADefaultBuffers((uint64_t)this, (ZinANELayer *)v12);
    ZinIrLocalRegAlloc::FreeDMACachedBuffers(this, (ZinANELayer *)v12);
    v24 = (_BYTE *)v12[6];
    if (v14 >= (uint64_t)v24)
      v25 = (void *)v12[6];
    else
      v25 = (void *)v14;
    if ((uint64_t)v24 <= (uint64_t)v13)
      v24 = v13;
    __p = v25;
    v67 = v24;
    v26 = *(_DWORD *)(*((_QWORD *)this + 3) + 312);
    if (v22)
    {
      InputDMADefaultBuffer = ZinIrLocalRegAlloc::AllocateInputDMADefaultBuffer((uint64_t)this, (uint64_t)v12, 0, (uint64_t)&__p, v26 != 0);
      if (InputDMADefaultBuffer && v23 < 2)
        LOBYTE(InputDMADefaultBuffer) = ZinIrLocalRegAlloc::AllocateOutputDMADefaultBuffer(this, (ZinANELayer *)v12, (const ZinLiveRange *)&__p, v26 != 0);
      if ((InputDMADefaultBuffer & 1) == 0)
      {
        RootTensor = (ZinIrTensor *)v12[6];
        v65 = RootTensor;
        if ((ZinIrLocalRegAlloc::AllocateInputDMADefaultBuffer((uint64_t)this, (uint64_t)v12, 0, (uint64_t)&RootTensor, v26 != 0) & 1) == 0)return 3;
        if (v23 > 1)
          goto LABEL_63;
LABEL_62:
        RootTensor = (ZinIrTensor *)v12[6];
        v65 = RootTensor;
        if ((ZinIrLocalRegAlloc::AllocateOutputDMADefaultBuffer(this, (ZinANELayer *)v12, (const ZinLiveRange *)&RootTensor, v26 != 0) & 1) != 0)
        {
LABEL_63:
          v46 = 0;
          goto LABEL_64;
        }
        return 3;
      }
    }
    else if (v23 < 2
           && (ZinIrLocalRegAlloc::AllocateOutputDMADefaultBuffer(this, (ZinANELayer *)v12, (const ZinLiveRange *)&__p, v26 != 0) & 1) == 0)
    {
      goto LABEL_62;
    }
    v46 = 1;
LABEL_64:
    v8 = 0;
    *a5 = v46;
    return v8;
  }
  if (!a2[2])
    return 0;
  v29 = *v6;
  v30 = *((_QWORD *)*v6 + 6);
  v31 = *((_QWORD *)*v6 + 11);
  v32 = *((_QWORD *)*v6 + 12);
  if (v31 != v32)
  {
    while (*(_QWORD *)(*(_QWORD *)v31 + 48) <= (int64_t)v12[6])
    {
      v31 += 8;
      if (v31 == v32)
        goto LABEL_36;
    }
    return 0;
  }
LABEL_36:
  v33 = a2 + 1;
  v34 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      ZinIrLocalRegAlloc::RemoveSymbolFromLayerAndTensor(this, (ZinIrTensor *)v34[4]);
      v35 = (_QWORD *)v34[1];
      if (v35)
      {
        do
        {
          v36 = v35;
          v35 = (_QWORD *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          v36 = (_QWORD *)v34[2];
          v37 = *v36 == (_QWORD)v34;
          v34 = v36;
        }
        while (!v37);
      }
      v34 = v36;
    }
    while (v36 != v33);
    v34 = (_QWORD *)*a2;
  }
  std::vector<ZinIrSymbol *>::vector<std::__tree_const_iterator<ZinIrSymbol *,std::__tree_node<ZinIrSymbol *,void *> *,long>,0>(&__p, v34, a2 + 1);
  if ((ZinIrLocalRegAlloc::ChangeEngineLayerSchedule(this, v29, v12[6], 1) & 1) == 0)
  {
    if ((ZinIrLocalRegAlloc::AllocateResidentTensorsWithPermutation(this, (unint64_t *)&__p) & 1) == 0)
    {
      v47 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v47)
        ZinIrLocalRegAlloc::AllocateResidentTensorForParallelExecution(v47, v48, v49, v50, v51, v52, v53, v54);
      goto LABEL_59;
    }
    goto LABEL_54;
  }
  *a5 = ZinIrLocalRegAlloc::AllocateResidentTensorsWithPermutation(this, (unint64_t *)&__p);
  if ((ZinIrLocalRegAlloc::ChangeEngineLayerSchedule(this, v29, v30, 0) & 1) == 0)
  {
    v55 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v55)
      ZinIrLocalRegAlloc::AllocateResidentTensorForParallelExecution(v55, v56, v57, v58, v59, v60, v61, v62);
    goto LABEL_59;
  }
  if (*a5 || (ZinIrLocalRegAlloc::AllocateResidentTensorsWithPermutation(this, (unint64_t *)&__p) & 1) != 0)
  {
LABEL_54:
    v8 = 0;
    goto LABEL_60;
  }
  v38 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v38)
    ZinIrLocalRegAlloc::AllocateResidentTensorForParallelExecution(v38, v39, v40, v41, v42, v43, v44, v45);
LABEL_59:
  v8 = 3;
LABEL_60:
  if (__p)
  {
    v67 = __p;
    operator delete(__p);
  }
  return v8;
}

void sub_206DC3BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrLocalRegAlloc::AllocateResidentTensorsWithPermutation(ZinIrLocalRegAlloc *a1, unint64_t *a2)
{
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  ZinIrTensor **v9;
  ZinIrTensor **v10;
  ZinIrTensor *v11;
  uint64_t v12;
  StaticWrapInfo *v13;
  ZinIrTensor **v14;
  ZinIrTensor **v15;
  ZinIrTensor *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  _QWORD *v31;
  uint64_t v32;

  v4 = *a2;
  v5 = (uint64_t *)a2[1];
  v6 = 126 - 2 * __clz((uint64_t)((uint64_t)v5 - v4) >> 3);
  if (v5 == (uint64_t *)v4)
    v7 = 0;
  else
    v7 = v6;
  v8 = 1;
  std::__introsort<std::_ClassicAlgPolicy,ZinIrLocalRegAlloc::AllocateResidentTensorsWithPermutation(std::vector<ZinIrTensor *> &)::$_0 &,ZinIrTensor **,false>(v4, v5, v7, 1);
  v9 = (ZinIrTensor **)*a2;
  v10 = (ZinIrTensor **)a2[1];
  while (v9 != v10)
  {
    do
    {
      v11 = *v9++;
      ZinIrLocalRegAlloc::RemoveSymbolFromLayerAndTensor(a1, v11);
    }
    while (v9 != v10);
    v14 = (ZinIrTensor **)*a2;
    v15 = (ZinIrTensor **)a2[1];
    v8 = *a2 == (_QWORD)v15;
    if ((ZinIrTensor **)*a2 == v15)
      return 1;
    while (1)
    {
      v16 = *v14;
      if ((ZinIrLocalRegAlloc::AllocateStaticCircularTensor((const ZinIrTensor **)a1, *v14, v12, v13) & 1) == 0
        && (ZinIrLocalRegAlloc::AllocateResidentTensor((const ZinIrTensor **)a1, v16, 1) & 1) == 0
        && !ZinIrLocalRegAlloc::AllocateResidentTensor((const ZinIrTensor **)a1, v16, 0))
      {
        break;
      }
      if (++v14 == v15)
        return 1;
    }
    v18 = (_QWORD *)*a2;
    v17 = (_QWORD *)a2[1];
    if (v17 == (_QWORD *)*a2)
      return v8;
    v19 = v17 - 1;
    if (v17 - 1 == v18)
      return v8;
    v20 = 0;
    v21 = *(_QWORD *)(*v19 + 8);
    v22 = a2[1];
    v23 = v17 - 1;
    while (1)
    {
      v24 = *(v23 - 1);
      v25 = *(_QWORD *)(v24 + 8);
      if (v25 > v21)
        break;
      --v23;
      ++v20;
      v22 -= 8;
      v21 = *(_QWORD *)(v24 + 8);
      if (v23 == v18)
      {
        if (v19 <= v18)
          return 0;
        v31 = v18 + 1;
        do
        {
          v8 = 0;
          v32 = *(v31 - 1);
          *(v31 - 1) = *v19;
          *v19-- = v32;
          v29 = v31++ >= v19;
        }
        while (!v29);
        return v8;
      }
    }
    do
    {
      v27 = *--v17;
      v26 = v27;
    }
    while (v25 <= *(_QWORD *)(v27 + 8));
    *(v23 - 1) = v26;
    *v17 = v24;
    if (v20)
    {
      do
      {
        v28 = *(_QWORD *)(v22 - 8);
        *(_QWORD *)(v22 - 8) = *v19;
        *v19-- = v28;
        v29 = v22 >= (unint64_t)v19;
        v22 += 8;
      }
      while (!v29);
    }
    v9 = (ZinIrTensor **)*a2;
    v10 = (ZinIrTensor **)a2[1];
    v8 = 1;
  }
  return v8;
}

BOOL ZinIrLocalRegAlloc::HasValidAllocationForDualInputPELayers(ZinIrLocalRegAlloc *this)
{
  _BOOL8 result;
  ZinIrOpLayer **v2;
  ZinIrOpLayer **v3;
  ZinIrOpLayer *v4;
  uint64_t InputTensor;
  uint64_t v6;
  uint64_t v7;
  ZinIrSymbol **v8;
  ZinIrSymbol *v9;
  int MemType;
  uint64_t v11;
  ZinIrSymbol **v12;
  ZinIrSymbol *v13;
  int v14;
  _BOOL4 v15;
  int v16;
  int v17;
  const ZinIrTensor *v18;
  uint64_t PostAllocationInterleave;
  const ZinIrTensor *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  const ZinIrTensor *v24;
  const char *v25;
  const char *v26;
  const ZinIrTensor *v27;
  int v28;
  _QWORD *v29;
  __int16 v30;
  _QWORD *v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(*((_QWORD *)this + 2) + 1252))
  {
    v2 = (ZinIrOpLayer **)*((_QWORD *)this + 5);
    v3 = (ZinIrOpLayer **)*((_QWORD *)this + 6);
    while (v2 != v3)
    {
      v4 = *v2;
      if (ZinIrOpLayer::IsPELayer(*v2)
        && *((_QWORD *)v4 + 12) - *((_QWORD *)v4 + 11) >= 9uLL
        && (!*((_QWORD *)v4 + 25) || *((_QWORD *)v4 + 24) >= 2uLL))
      {
        InputTensor = ZinIrOpLayer::GetInputTensor(v4, 0);
        v6 = ZinIrOpLayer::GetInputTensor(v4, 1uLL);
        if (((*(uint64_t (**)(ZinIrOpLayer *, uint64_t))(*(_QWORD *)v4 + 200))(v4, v6) & 1) == 0)
        {
          v7 = *(_QWORD *)(InputTensor + 104);
          if (!v7 || (v8 = *(ZinIrSymbol ***)(v7 + 40), v8 == *(ZinIrSymbol ***)(v7 + 48)))
            v9 = 0;
          else
            v9 = *v8;
          MemType = ZinIrSymbol::GetMemType(v9);
          v11 = *(_QWORD *)(v6 + 104);
          if (!v11 || (v12 = *(ZinIrSymbol ***)(v11 + 40), v12 == *(ZinIrSymbol ***)(v11 + 48)))
            v13 = 0;
          else
            v13 = *v12;
          v14 = ZinIrSymbol::GetMemType(v13);
          if (MemType != 2 && v14 != 2)
          {
            v15 = ZinTensorDimensionsEqual((_QWORD *)(InputTensor + 48), (_QWORD *)(v6 + 48));
            v16 = *(_DWORD *)(InputTensor + 88);
            v17 = *(_DWORD *)(v6 + 88);
            PostAllocationInterleave = ZinIrRegAllocUtil::GetPostAllocationInterleave((ZinIrRegAllocUtil *)InputTensor, v18);
            v21 = ZinIrRegAllocUtil::GetPostAllocationInterleave((ZinIrRegAllocUtil *)v6, v20);
            if (!v15 || v16 != v17 || PostAllocationInterleave != v21)
            {
              result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (result)
              {
                v22 = (_QWORD *)(InputTensor + 24);
                if (*(char *)(InputTensor + 47) < 0)
                  v22 = (_QWORD *)*v22;
                v23 = (_QWORD *)(v6 + 24);
                if (*(char *)(v6 + 47) < 0)
                  v23 = (_QWORD *)*v23;
                if (ZinTensorDimensionsEqual((_QWORD *)(InputTensor + 48), (_QWORD *)(v6 + 48)))
                  v25 = "true";
                else
                  v25 = "false";
                if (*(_DWORD *)(InputTensor + 88) == *(_DWORD *)(v6 + 88))
                  v26 = "true";
                else
                  v26 = "false";
                v28 = 136316418;
                v29 = v22;
                v30 = 2080;
                v31 = v23;
                v32 = 2080;
                v33 = v25;
                v34 = 2080;
                v35 = v26;
                v36 = 2048;
                v37 = ZinIrRegAllocUtil::GetPostAllocationInterleave((ZinIrRegAllocUtil *)InputTensor, v24);
                v38 = 2048;
                v39 = ZinIrRegAllocUtil::GetPostAllocationInterleave((ZinIrRegAllocUtil *)v6, v27);
                _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "DualSrc PE EW: %s != %s (dim = %s, fmt = %s, interleave = (%zu == %zu))\n", (uint8_t *)&v28, 0x3Eu);
                return 0;
              }
              return result;
            }
          }
        }
      }
      ++v2;
    }
  }
  return 1;
}

uint64_t ZinIrLocalRegAlloc::Run(ZinIrLocalRegAlloc *a1, ZinIrNetworkStatus *a2, uint64_t *a3)
{
  uint64_t LiveIOs;
  uint64_t v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ConstTensors;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t IntermediateTensors;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t active;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;

  LiveIOs = ZinIrLocalRegAlloc::AllocateLiveIOs((uint64_t)a1, a3);
  if ((_DWORD)LiveIOs)
  {
    v6 = LiveIOs;
    v7 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v7)
      ZinIrLocalRegAlloc::Run(v7, v8, v9);
    return v6;
  }
  ConstTensors = ZinIrLocalRegAlloc::AllocateConstTensors(a1);
  if ((_DWORD)ConstTensors)
  {
    v6 = ConstTensors;
    v11 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v11)
      ZinIrLocalRegAlloc::Run(v11, v12, v13);
    return v6;
  }
  IntermediateTensors = ZinIrLocalRegAlloc::AllocateIntermediateTensors((ZinEngineLayerMirInfo ****)a1, a2);
  if ((_DWORD)IntermediateTensors)
  {
    v6 = IntermediateTensors;
    v15 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v15)
      ZinIrLocalRegAlloc::Run(v15, v16, v17);
    return v6;
  }
  v18 = ZinIrLocalRegAlloc::CopyTensorInfoToOpLayerMirInfo(a1);
  if ((_DWORD)v18)
  {
    v6 = v18;
    v19 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v19)
      ZinIrLocalRegAlloc::Run(v19, v20, v21);
    return v6;
  }
  active = ZinIrLocalRegAlloc::OptimizePoolActiveNEs(a1);
  if ((_DWORD)active)
  {
    v6 = active;
    v23 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v23)
      ZinIrLocalRegAlloc::Run(v23, v24, v25);
    return v6;
  }
  return ZinIrLocalRegAlloc::Verify(a1, (CFArrayRef *)a2);
}

uint64_t ZinIrLocalRegAlloc::AllocateLiveIOs(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v6[3];

  ZinIrLocalRegAlloc::CreateLiveIOSectionsFromBarUsage((ZinIrLocalRegAlloc *)a1, (const ZinBarUsage *)(a1 + 568), (uint64_t)v6);
  if (ZinIrLocalRegAlloc::AllocateUncompressedLiveIOs((ZinIrLocalRegAlloc *)a1, a2, v6))
  {
    v4 = 3;
  }
  else if (ZinIrLocalRegAlloc::AllocateCompressedLiveIOs((ZinIrLocalRegAlloc *)a1, (uint64_t)a2, v6))
  {
    v4 = 3;
  }
  else
  {
    v4 = 0;
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v6, v6[1]);
  return v4;
}

void sub_206DC41DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::CopyTensorInfoToOpLayerMirInfo(ZinIrLocalRegAlloc *this)
{
  ZinIrOpLayer **v1;
  ZinIrOpLayer **i;
  ZinIrOpLayer *v3;
  unint64_t v4;
  uint64_t InputTensor;
  unint64_t *v6;
  ZinIrTensor *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t InterchangeDescriptor;
  uint64_t v11;
  char v12;
  int v13;
  ZinIrTensor *v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;

  v1 = (ZinIrOpLayer **)*((_QWORD *)this + 5);
  for (i = (ZinIrOpLayer **)*((_QWORD *)this + 6); v1 != i; ++v1)
  {
    v3 = *v1;
    if (ZinIrOpLayer::IsANELayer(*v1))
    {
      if (ZinEngineLayerMirInfo::HasDmaRead(*((ZinEngineLayerMirInfo **)v3 + 33))
        && *((_QWORD *)v3 + 12) != *((_QWORD *)v3 + 11))
      {
        v4 = 0;
        do
        {
          InputTensor = ZinIrOpLayer::GetInputTensor(v3, v4);
          if (*(_BYTE *)(InputTensor + 164))
          {
            v7 = (ZinIrTensor *)InputTensor;
            v18 = 0;
            result = ZinMemSourceIndexTranslator::GetDMASrcIndex(v3, (const ZinANELayer *)v4, &v18, v6);
            if ((_DWORD)result)
              return result;
            v9 = *((_QWORD *)v3 + 33);
            InterchangeDescriptor = ZinIrTensor::GetInterchangeDescriptor(v7);
            v11 = v9 + 96 * v18;
            *(_QWORD *)(v11 + 792) = InterchangeDescriptor;
            *(_BYTE *)(v11 + 804) = v12;
            *(_DWORD *)(v11 + 800) = v13;
          }
          ++v4;
        }
        while (v4 < (uint64_t)(*((_QWORD *)v3 + 12) - *((_QWORD *)v3 + 11)) >> 3);
      }
      if ((*(_DWORD *)(*((_QWORD *)v3 + 33) + 1632) - 1) <= 1)
      {
        v14 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v3 + 32))(v3, 0, 0);
        if (*((_BYTE *)v14 + 164))
        {
          v15 = *((_QWORD *)v3 + 33);
          *(_QWORD *)(v15 + 984) = ZinIrTensor::GetInterchangeDescriptor(v14);
          *(_DWORD *)(v15 + 992) = v16;
          *(_BYTE *)(v15 + 996) = v17;
        }
      }
    }
  }
  return 0;
}

uint64_t ZinIrLocalRegAlloc::Verify(ZinIrLocalRegAlloc *this, CFArrayRef *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[3];
  _QWORD v31[3];
  int v32;

  v4 = *((_QWORD *)this + 3);
  if ((*(_BYTE *)(v4 + 96) & 0x40) != 0)
  {
    v5 = *(_QWORD **)this;
    LODWORD(v30[0]) = 2;
    v6 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>((_QWORD *)this + 13, (int *)v30);
    if (v6)
      v6 = (uint64_t *)v6[3];
    ZinIrMemoryPool::GetSections((uint64_t)v6, 4, v31);
    v7 = *(_QWORD **)(v31[1] + 16);
    v32 = 0;
    v8 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>((_QWORD *)this + 13, &v32);
    if (v8)
      v8 = (uint64_t *)v8[3];
    ZinIrMemoryPool::GetSections((uint64_t)v8, 4, v30);
    ZinIrDebugAllocations(v4, v5, v7, *(_QWORD **)(v30[1] + 16));
    std::__list_imp<ZinIrSection *>::clear(v30);
    std::__list_imp<ZinIrSection *>::clear(v31);
  }
  ZinIrLocalRegAlloc::GatherTensorsWithFailedL2Allocation(this);
  if (*((_QWORD *)this + 45))
    return 4;
  v10 = ZinIrLocalRegAlloc::VerifyTileHeight(this);
  if ((_DWORD)v10)
  {
    v9 = v10;
    v11 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v11)
      ZinIrLocalRegAlloc::Verify(v11, v12, v13);
  }
  else
  {
    v14 = ZinIrLocalRegAlloc::VerifyL2Symbols(this);
    if ((_DWORD)v14)
    {
      v9 = v14;
      v15 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v15)
        ZinIrLocalRegAlloc::Verify(v15, v16, v17);
    }
    else if (ZinIrLocalRegAlloc::HasValidAllocationForDualInputPELayers(this))
    {
      v9 = ZinIrLocalRegAlloc::VerifyDMABuffers(this);
      if ((_DWORD)v9)
      {
        v18 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v18)
          ZinIrLocalRegAlloc::Verify(v18, v19, v20);
      }
    }
    else
    {
      v21 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v21)
        ZinIrLocalRegAlloc::Verify(v21, v22, v23, v24, v25, v26, v27, v28);
      ZinIrNetworkStatus::SetError(a2, CFSTR("L2AllocationFailure"));
      return 3;
    }
  }
  return v9;
}

void sub_206DC44D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::__list_imp<ZinIrSection *>::clear((uint64_t *)va);
  std::__list_imp<ZinIrSection *>::clear((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void ZinIrLocalRegAlloc::GroupL2CacheConsumers(ZinIrLocalRegAlloc *a1, int64x2_t *a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  void *v14;
  unint64_t *v15;
  uint64_t *v16;
  ZinIrMemoryPool *v17;
  ZinIrSection *L2Section;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  ZinIrSymbol *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  _QWORD v41[2];
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int64x2_t v49;
  int64x2_t v50;
  int64x2_t v51;
  int64x2_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t v55;
  void *v56;
  char *v57;
  char *v58;
  void *v59;
  std::string v60;
  _BYTE v61[304];
  void *__p;
  std::string __s;
  _BYTE v64[304];
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(*(_QWORD *)*a3 + 360);
  v56 = 0;
  v57 = 0;
  v58 = 0;
  LODWORD(v42) = 0;
  v43 = 0u;
  v44 = 0u;
  v45 = 0;
  v46 = vdupq_n_s64(1uLL);
  v47 = v46;
  v48 = v46;
  v49 = v46;
  v50 = v46;
  v51 = v46;
  v52 = v46;
  v53 = v46;
  v54 = v46;
  v55 = v46;
  DimensionOrderHint::DimensionOrderHint(&__p, 1);
  ZinIrTensor::MirInfo::InferDescriptorFromLogicalParams(a2, 1, (uint64_t)&__p, 1, 1, (uint64_t)&v42);
  if (__p)
  {
    __s.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    operator delete(__p);
  }
  ZinIrTensor::GetTensorSizeInBytes((unsigned __int8 *)a2, &v42);
  v36 = v9;
  v10 = *a3;
  if (a3[1] != *a3)
  {
    v11 = 0;
    do
    {
      v12 = *(_QWORD *)(v10 + 8 * v11);
      v41[0] = *(_QWORD *)(v12 + 48);
      v41[1] = v41[0];
      if (a2[2].i8[15] >= 0)
        v13 = a2[2].u8[15];
      else
        v13 = a2[2].u64[0];
      std::string::basic_string[abi:ne180100]((uint64_t)&v38, v13 + 13);
      if (v40 >= 0)
        v14 = &v38;
      else
        v14 = v38;
      if (v13)
      {
        if (a2[2].i8[15] >= 0)
          v15 = &a2[1].u64[1];
        else
          v15 = (unint64_t *)a2[1].i64[1];
        memmove(v14, v15, v13);
      }
      strcpy((char *)v14 + v13, "_for_grouping");
      ZinIrSymbol::Descriptor::Descriptor(&__p, 1, &v38, v41, v36);
      if (SHIBYTE(v40) < 0)
        operator delete(v38);
      v37 = 0;
      LODWORD(v38) = 2;
      v16 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>((_QWORD *)a1 + 13, (int *)&v38);
      if (v16)
        v17 = (ZinIrMemoryPool *)v16[3];
      else
        v17 = 0;
      v59 = __p;
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v60, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
      else
        v60 = __s;
      memcpy(v61, v64, sizeof(v61));
      L2Section = (ZinIrSection *)ZinIrLocalRegAlloc::GetL2Section(a1);
      v19 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 416);
      v38 = 0;
      v39 = 0;
      v40 = 0;
      ZinIrMemoryPool::AllocateMemory(v17, (uint64_t)&v59, L2Section, v19, (uint64_t *)&v37, (uint64_t)&v38);
      if (v38)
      {
        v39 = v38;
        operator delete(v38);
      }
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v60.__r_.__value_.__l.__data_);
      if (v37)
      {
        ZinIrSection::DeleteSymbol(*((uint64_t ***)v37 + 1), v37);
        v20 = v57;
        if ((unint64_t)(*(_QWORD *)(v12 + 360) - v8) >= 0x65 && v57 != v56)
        {
          v21 = a4[1];
          if (v21 >= a4[2])
          {
            v22 = std::vector<std::vector<ZinANELayer *>>::__push_back_slow_path<std::vector<ZinANELayer *> const&>(a4, (uint64_t)&v56);
          }
          else
          {
            std::vector<std::vector<DimensionMapping>>::__construct_one_at_end[abi:ne180100]<std::vector<DimensionMapping> const&>((uint64_t)a4, (uint64_t)&v56);
            v22 = v21 + 24;
          }
          a4[1] = v22;
          v20 = (char *)v56;
          v57 = (char *)v56;
        }
        if (v20 >= v58)
        {
          v26 = (v20 - (_BYTE *)v56) >> 3;
          if ((unint64_t)(v26 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v27 = (v58 - (_BYTE *)v56) >> 2;
          if (v27 <= v26 + 1)
            v27 = v26 + 1;
          if ((unint64_t)(v58 - (_BYTE *)v56) >= 0x7FFFFFFFFFFFFFF8)
            v28 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v28 = v27;
          if (v28)
            v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v58, v28);
          else
            v29 = 0;
          v30 = &v29[8 * v26];
          *(_QWORD *)v30 = v12;
          v25 = v30 + 8;
          v32 = (char *)v56;
          v31 = v57;
          if (v57 != v56)
          {
            do
            {
              v33 = *((_QWORD *)v31 - 1);
              v31 -= 8;
              *((_QWORD *)v30 - 1) = v33;
              v30 -= 8;
            }
            while (v31 != v32);
            v31 = (char *)v56;
          }
          v56 = v30;
          v57 = v25;
          v58 = &v29[8 * v28];
          if (v31)
            operator delete(v31);
        }
        else
        {
          *(_QWORD *)v20 = v12;
          v25 = v20 + 8;
        }
        v57 = v25;
        v8 = *(_QWORD *)(v12 + 360);
      }
      else
      {
        v8 = *(_QWORD *)(v12 + 360);
        if (v57 != v56)
        {
          v23 = a4[1];
          if (v23 >= a4[2])
          {
            v24 = std::vector<std::vector<ZinANELayer *>>::__push_back_slow_path<std::vector<ZinANELayer *> const&>(a4, (uint64_t)&v56);
          }
          else
          {
            std::vector<std::vector<DimensionMapping>>::__construct_one_at_end[abi:ne180100]<std::vector<DimensionMapping> const&>((uint64_t)a4, (uint64_t)&v56);
            v24 = v23 + 24;
          }
          a4[1] = v24;
          v57 = (char *)v56;
        }
      }
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
      ++v11;
      v10 = *a3;
    }
    while (v11 < (uint64_t)(a3[1] - *a3) >> 3);
  }
  v34 = a4[1];
  if (v34 >= a4[2])
  {
    v35 = std::vector<std::vector<ZinANELayer *>>::__push_back_slow_path<std::vector<ZinANELayer *> const&>(a4, (uint64_t)&v56);
  }
  else
  {
    std::vector<std::vector<DimensionMapping>>::__construct_one_at_end[abi:ne180100]<std::vector<DimensionMapping> const&>((uint64_t)a4, (uint64_t)&v56);
    v35 = v34 + 24;
  }
  a4[1] = v35;
  if (v56)
  {
    v57 = (char *)v56;
    operator delete(v56);
  }
}

void sub_206DC49A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48)
{
  void *v49;

  v49 = (void *)STACK[0x2A0];
  if (STACK[0x2A0])
  {
    STACK[0x2A8] = (unint64_t)v49;
    operator delete(v49);
  }
  if (a48)
    operator delete(a48);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::PrepareForL2CacheAllocation(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  ZinIrOpLayer *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  uint64_t result;
  unint64_t *v24;
  ZinIrOpLayer **v25;
  ZinIrOpLayerGraph **v26;
  unint64_t v27;
  const ZinIrTensor *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  int v34[2];

  v7 = **(ZinIrOpLayer ***)a2;
  v8 = *((_QWORD *)v7 + 19);
  v9 = *((_QWORD *)v7 + 6);
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) - 8) + 48);
  v33 = *a3;
  *(_QWORD *)v34 = &v33;
  v11 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>(a1 + 144, &v33, (uint64_t)&std::piecewise_construct, (_QWORD **)v34);
  v11[3] = v9;
  v11[4] = v10;
  LODWORD(v33) = 0;
  if (ZinMemSourceIndexTranslator::GetL2SrcType(v7, a4, (int *)&v33))
    ZinAssertImpl("fail to get L2 src type");
  if ((_DWORD)v33)
    v12 = 2;
  else
    v12 = 1;
  if ((_DWORD)v33)
  {
    v13 = (std::__shared_weak_count *)a3[1];
    v29 = *a3;
    v30 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    ZinANELayer::SetCachedSrc2Tensor((uint64_t)v7, &v29);
    v16 = v30;
    if (v30)
    {
      v17 = (unint64_t *)&v30->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      goto LABEL_19;
    }
  }
  else
  {
    v19 = (std::__shared_weak_count *)a3[1];
    v31 = *a3;
    v32 = v19;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    ZinANELayer::SetCachedSrc1Tensor((uint64_t)v7, &v31);
    v16 = v32;
    if (v32)
    {
      v22 = (unint64_t *)&v32->__shared_owners_;
      do
        v18 = __ldaxr(v22);
      while (__stlxr(v18 - 1, v22));
LABEL_19:
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  ZinEngineLayerMirInfo::SetNeedInputDMACached(*((_QWORD *)v7 + 33), v33, 1);
  result = ZinIrOpLayer::GetInputTensor(v7, a4);
  v25 = *(ZinIrOpLayer ***)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 >= 9uLL)
  {
    v26 = (ZinIrOpLayerGraph **)result;
    v27 = 1;
    do
    {
      v28 = v25[v27];
      *(_QWORD *)v34 = 0;
      if ((ZinIrOpLayerGraphUtil::GetIncomingIndex((ZinIrOpLayerGraphUtil *)v26, v28, (const ZinIrOpLayer *)v34, v24) & 1) == 0)
        ZinAssertImpl("can't find incoming index");
      result = ZinIrOpLayerGraph::SwapEdgeSource(v8, v26[12], v7, (uint64_t)v28, 0xFFFFFFFFFFFFFFFFLL, *(unint64_t *)v34, 0xFFFFFFFFFFFFFFFFLL, *(unint64_t *)v34, v12, 0);
      if ((result & 1) == 0)
        ZinAssertImpl("fail to swap edges");
      ++v27;
      v25 = *(ZinIrOpLayer ***)a2;
    }
    while (v27 < (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  }
  return result;
}

void sub_206DC4C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ZinIrLocalRegAlloc::RemoveInputL2CachedTensor(ZinIrLocalRegAlloc *a1, uint64_t a2, ZinIrTensor **a3, unint64_t a4)
{
  ZinIrOpLayer *v4;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t InputTensor;
  unint64_t *v13;
  ZinIrOpLayer **v14;
  uint64_t v15;
  unint64_t v16;
  const ZinIrTensor *v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  ZinANELayer *v31;
  int v32;

  v4 = **(ZinIrOpLayer ***)a2;
  if (*((ZinIrOpLayer **)*a3 + 12) != v4)
    ZinAssertImpl("L2 cached tensor and its producer does not match in RemoveInputL2CachedTensor");
  v9 = *((_QWORD *)v4 + 19);
  v32 = 0;
  if (ZinMemSourceIndexTranslator::GetL2SrcType(v4, a4, &v32))
    ZinAssertImpl("fail to get L2 src type");
  v10 = v32;
  if (v32)
    v11 = 2;
  else
    v11 = 1;
  ZinIrLocalRegAlloc::RemoveSymbolFromLayerAndTensor(a1, *a3);
  v31 = *a3;
  std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,long>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,long>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,long>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,long>>>::__erase_unique<ZinIrOpLayer *>((_QWORD *)a1 + 18, &v31);
  InputTensor = ZinIrOpLayer::GetInputTensor(v4, a4);
  v14 = *(ZinIrOpLayer ***)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 >= 9uLL)
  {
    v15 = InputTensor;
    v16 = 1;
    do
    {
      v17 = v14[v16];
      v31 = 0;
      if ((ZinIrOpLayerGraphUtil::GetIncomingIndex(*a3, v17, (const ZinIrOpLayer *)&v31, v13) & 1) == 0)
        ZinAssertImpl("can't find incoming index");
      if ((ZinIrOpLayerGraph::SwapEdgeSource(v9, v4, *(ZinIrOpLayer **)(v15 + 96), (uint64_t)v17, 0xFFFFFFFFFFFFFFFFLL, (unint64_t)v31, 0xFFFFFFFFFFFFFFFFLL, (unint64_t)v31, 0, v11) & 1) == 0)ZinAssertImpl("fail to swap edges in reverting");
      v30 = 0;
      if (ZinMemSourceIndexTranslator::GetDMASrcIndex(v17, v31, &v30, v18))
        ZinAssertImpl("fail to get dma index");
      v19 = *(_QWORD *)(v15 + 104);
      if (!v19 || (v20 = *(uint64_t **)(v19 + 40), v20 == *(uint64_t **)(v19 + 48)))
        v21 = 0;
      else
        v21 = *v20;
      *(_QWORD *)(*((_QWORD *)v17 + 33) + 96 * v30 + 752) = v21;
      ++v16;
      v14 = *(ZinIrOpLayer ***)a2;
    }
    while (v16 < (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  }
  if (v10)
  {
    v26 = 0;
    v27 = 0;
    ZinANELayer::SetCachedSrc2Tensor((uint64_t)v4, &v26);
    v22 = v27;
    if (!v27)
      goto LABEL_26;
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
  }
  else
  {
    v28 = 0;
    v29 = 0;
    ZinANELayer::SetCachedSrc1Tensor((uint64_t)v4, &v28);
    v22 = v29;
    if (!v29)
      goto LABEL_26;
    v25 = (unint64_t *)&v29->__shared_owners_;
    do
      v24 = __ldaxr(v25);
    while (__stlxr(v24 - 1, v25));
  }
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
LABEL_26:
  ZinEngineLayerMirInfo::SetNeedInputDMACached(*((_QWORD *)v4 + 33), v32, 0);
}

void sub_206DC4EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ZinIrLocalRegAlloc::AllocateL2CacheForConsumersGroup(ZinIrLocalRegAlloc *a1, uint64_t a2, ZinIrOpLayerGraphUtil *this, unint64_t *a4)
{
  const void **v7;
  char *v8;
  uint64_t v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  const void ***v20;
  int InputL2CachedTensor;
  unint64_t v22;
  BOOL v23;
  const void ***v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  _QWORD *v36;
  void *__p[2];
  char v38;
  ZinIrTensor *v39;
  std::__shared_weak_count *v40;
  void *v41[2];
  char v42;
  int v43;
  unint64_t v44;

  v7 = **(const void ****)a2;
  v44 = 0;
  if ((ZinIrOpLayerGraphUtil::GetIncomingIndex(this, (const ZinIrTensor *)v7, (const ZinIrOpLayer *)&v44, a4) & 1) == 0)
    ZinAssertImpl("can't find incoming index");
  v43 = 0;
  if (ZinMemSourceIndexTranslator::GetL2SrcType(v7, v44, &v43))
    ZinAssertImpl("fail to get L2 src type");
  if (v43)
    v8 = "_Src2_Cached";
  else
    v8 = "_Src1_Cached";
  std::string::basic_string[abi:ne180100]<0>(v41, v8);
  v9 = *((_QWORD *)this + 2);
  v10 = *((_DWORD *)this + 22);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7 + 3, (const void **)v41, (uint64_t)__p);
  v35 = 0;
  v36 = 0;
  v34 = 0;
  LODWORD(v29) = 0;
  v31 = 0;
  v32 = 0;
  v30 = 0;
  v33 = 0;
  ZinIrTensor::CreateTensor(v9, v10, (__int128 *)this + 3, (__int128 *)__p, &v36, &v34, (unsigned int *)&v29, (uint64_t *)&v39);
  v11 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v36;
  v36 = 0;
  if (v14)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v36, v14);
  if (v38 < 0)
    operator delete(__p[0]);
  if (ZinIrTensor::SetAllocationHint(v39, 1, 1))
    ZinAssertImpl("fail to set allocation hint");
  v15 = 0;
  v16 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3;
  v17 = v16 - 1;
  v18 = v16 >> 1;
  v19 = -1;
  do
  {
    if (!v18)
      break;
    v20 = *(const void ****)a2;
    if (v18 >= (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3)
      ZinAssertImpl("out of bound");
    v29 = 0;
    v30 = 0;
    v31 = 0;
    std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v29, v20, (uint64_t)&v20[v18 + 1], (uint64_t)(8 * v18 + 8) >> 3);
    InputL2CachedTensor = ZinIrLocalRegAlloc::AllocateInputL2CachedTensor(a1, (uint64_t)&v29, (uint64_t *)&v39, v44);
    ZinIrLocalRegAlloc::RemoveInputL2CachedTensor(a1, (uint64_t)&v29, &v39, v44);
    if (v18 == v17)
      v22 = v15;
    else
      v22 = v18;
    if (InputL2CachedTensor)
      v15 = v18;
    else
      v17 = v22;
    if (InputL2CachedTensor)
      v19 = v18;
    if (v29)
    {
      v30 = v29;
      operator delete(v29);
    }
    v23 = (v17 + v15 + 1) >> 1 == v18;
    v18 = (v17 + v15 + 1) >> 1;
  }
  while (!v23);
  if (v19 != -1)
  {
    v24 = *(const void ****)a2;
    v25 = *(_QWORD *)a2 + 8 * v19 + 8;
    v30 = 0;
    v31 = 0;
    v29 = 0;
    std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v29, v24, v25, (v25 - (uint64_t)v24) >> 3);
    if ((ZinIrLocalRegAlloc::AllocateInputL2CachedTensor(a1, (uint64_t)&v29, (uint64_t *)&v39, v44) & 1) == 0)
      ZinAssertImpl("L2 cache buffer allocation is expected to succeed");
    if (v29)
    {
      v30 = v29;
      operator delete(v29);
    }
  }
  v26 = v40;
  if (v40)
  {
    v27 = (unint64_t *)&v40->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v42 < 0)
    operator delete(v41[0]);
}

void sub_206DC51E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  if (a30 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::AllocateInputL2CachedTensor(ZinIrLocalRegAlloc *a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  _QWORD *v8;
  uint64_t *v9;
  ZinIrMemoryPool *v10;
  ZinIrSection *L2Section;
  uint64_t v12;
  int Memory;
  uint64_t v14;
  ZinIrSymbol *v15;
  _QWORD *v16;
  char v17;
  char v18;
  _QWORD *v19;
  unint64_t *v20;
  _QWORD **v21;
  unint64_t v22;
  const char *v23;
  const ZinIrTensor *v24;
  unint64_t *v25;
  uint64_t v26;
  void *__p;
  void *v29;
  _QWORD *v30;
  ZinIrSymbol *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  std::string v35;
  _BYTE v36[304];
  uint64_t v37;
  std::string v38;
  _BYTE v39[304];
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  ZinIrLocalRegAlloc::PrepareForL2CacheAllocation((uint64_t)a1, a2, a3, a4);
  v8 = **(_QWORD ***)a2;
  v32 = 0;
  if (ZinMemSourceIndexTranslator::GetL2SrcType(v8, a4, (int *)&v32))
    ZinAssertImpl("fail to get L2 src type");
  ZinIrLocalRegAlloc::CreateReadL2CacheSymbolDescriptor(a1, v8, v32, (uint64_t)&v37);
  v31 = 0;
  LODWORD(__p) = 2;
  v9 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>((_QWORD *)a1 + 13, (int *)&__p);
  if (v9)
    v10 = (ZinIrMemoryPool *)v9[3];
  else
    v10 = 0;
  v34 = v37;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v35, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
  else
    v35 = v38;
  memcpy(v36, v39, sizeof(v36));
  L2Section = (ZinIrSection *)ZinIrLocalRegAlloc::GetL2Section(a1);
  v12 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 416);
  __p = 0;
  v29 = 0;
  v30 = 0;
  Memory = ZinIrMemoryPool::AllocateMemory(v10, (uint64_t)&v34, L2Section, v12, (uint64_t *)&v31, (uint64_t)&__p);
  if (__p)
  {
    v29 = __p;
    operator delete(__p);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v35.__r_.__value_.__l.__data_);
    if (!Memory)
      goto LABEL_14;
LABEL_28:
    v26 = 0;
    goto LABEL_29;
  }
  if (Memory)
    goto LABEL_28;
LABEL_14:
  v14 = v8[33];
  v15 = v31;
  v16 = operator new(8uLL);
  __p = v16;
  *v16 = v15;
  v29 = v16 + 1;
  v30 = v16 + 1;
  v17 = ZinEngineLayerMirInfo::SetL2RdSymbols(v14, (const ZinIrSymbol ***)&__p, v32, 2);
  if (__p)
  {
    v29 = __p;
    operator delete(__p);
  }
  if (ZinIrLocalRegAlloc::SetSymbolToLayerAndTensor(a1, v31, (ZinIrTensor *)*a3))
    v18 = 0;
  else
    v18 = v17;
  if ((v18 & 1) == 0)
    goto LABEL_28;
  __p = (void *)*a3;
  v19 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>((_QWORD *)a1 + 18, &__p);
  if (!v19)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (!ZinIrLocalRegAlloc::HasL2SpaceForConflictingDMAbuffers(a1, (const ZinLiveRange *)(v19 + 3)))
    goto LABEL_28;
  v21 = *(_QWORD ***)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 >= 9uLL)
  {
    v22 = 1;
    v23 = "can't find incoming index";
    while (1)
    {
      v24 = (const ZinIrTensor *)v21[v22];
      __p = 0;
      if ((ZinIrOpLayerGraphUtil::GetIncomingIndex((ZinIrOpLayerGraphUtil *)*a3, v24, (const ZinIrOpLayer *)&__p, v20) & 1) == 0)
        goto LABEL_33;
      v33 = 0;
      if (ZinMemSourceIndexTranslator::GetDMASrcIndex(v24, (const ZinANELayer *)__p, &v33, v25))
        break;
      *(_QWORD *)(*((_QWORD *)v24 + 33) + 96 * v33 + 752) = 0;
      ++v22;
      v21 = *(_QWORD ***)a2;
      if (v22 >= (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3)
        goto LABEL_27;
    }
    v23 = "fail to get dma index";
LABEL_33:
    ZinAssertImpl(v23);
  }
LABEL_27:
  v26 = 1;
LABEL_29:
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  return v26;
}

void sub_206DC5548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;

  if (__p)
    operator delete(__p);
  if (a64 < 0)
    operator delete(a59);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::FindCandidateTensorsForL2CachedTensor(ZinIrLocalRegAlloc *a1, uint64_t *a2)
{
  _QWORD *v2;
  _QWORD *i;
  const ZinIrTensor *v6;
  unint64_t v7;
  uint64_t *v9;
  _QWORD *v10;
  unint64_t v11;
  void *__p[4];
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;

  v2 = (_QWORD *)*((_QWORD *)a1 + 5);
  for (i = (_QWORD *)*((_QWORD *)a1 + 6); v2 != i; ++v2)
  {
    v6 = (const ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v2 + 32))(*v2, 0, 0);
    if (!ZinIrTensor::IsResident(v6))
    {
      LODWORD(v13) = 0;
      v14 = 0u;
      v15 = 0u;
      v16 = 0;
      v17 = vdupq_n_s64(1uLL);
      v18 = v17;
      v19 = v17;
      v20 = v17;
      v21 = v17;
      v22 = v17;
      v23 = v17;
      v24 = v17;
      v25 = v17;
      v26 = v17;
      ZinIrLocalRegAlloc::GetDimensionOrderHint(a1, v6, (uint64_t)__p);
      ZinIrTensor::MirInfo::InferDescriptorFromLogicalParams((int64x2_t *)v6, 1, (uint64_t)__p, 1, 1, (uint64_t)&v13);
      ZinIrTensor::GetTensorSizeInBytes((unsigned __int8 *)v6, &v13);
      if (v7 < *(_QWORD *)(*((_QWORD *)a1 + 2) + 408))
      {
        v10 = 0;
        v11 = 0;
        v9 = (uint64_t *)&v10;
        FindQualifiedConsumersForL2CacheCandidateTensor((ZinIrOpLayer **)v6, &v9);
        if (v11 >= 2)
          ZinIrScheduleUtil::ZinOrderedSet<ZinIrOpLayer *>::PushBack(a2, (uint64_t)v6);
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v9, v10);
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_206DC5714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a10, a11);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void FindQualifiedConsumersForL2CacheCandidateTensor(ZinIrOpLayer **a1, uint64_t **a2)
{
  const ZinIrTensor *v4;
  ZinIrRegAllocUtil **v5;
  char *v6;
  ZinIrOpLayer *v7;
  ZinIrOpLayer *v8;
  char *v9;
  char *v10;

  ZinIrOpLayerGraph::GetOutgoingLayersFromPort(a1[12], *((_QWORD **)a1[12] + 19), 0, &v9);
  v5 = (ZinIrRegAllocUtil **)v9;
  v6 = v10;
  if (v9 != v10)
  {
    do
    {
      v7 = *v5;
      if (ZinIrRegAllocUtil::IsQualifiedForL2CacheRead(*v5, (const ZinIrOpLayer *)a1, v4))
      {
        if (!ZinIrOpLayer::IsANELayer(v7))
          ZinAssertImpl("Only support engine layer as consumers of L2 cache tensors");
        v8 = v7;
        std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(a2, &v8, (uint64_t *)&v8);
      }
      ++v5;
    }
    while (v5 != (ZinIrRegAllocUtil **)v6);
    v5 = (ZinIrRegAllocUtil **)v9;
  }
  if (v5)
  {
    v10 = (char *)v5;
    operator delete(v5);
  }
}

void sub_206DC5804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *ZinIrLocalRegAlloc::GatherTensorsWithFailedL2Allocation(_QWORD *this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t **v3;
  uint64_t v4;
  ZinIrTensor *v5;
  uint64_t v6;
  ZinIrSymbol **v7;
  _QWORD *v8;

  v1 = (uint64_t *)this[5];
  v2 = (uint64_t *)this[6];
  if (v1 != v2)
  {
    v3 = (uint64_t **)(this + 43);
    do
    {
      v4 = *v1;
      v8 = 0;
      v5 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0, 0);
      this = ZinIrTensor::GetRootTensor(v5);
      v8 = this;
      v6 = this[13];
      if (v6)
      {
        if (*(_DWORD *)(v6 + 96) == 1)
        {
          v7 = *(ZinIrSymbol ***)(v6 + 40);
          if (v7 == *(ZinIrSymbol ***)(v6 + 48)
            || !*v7
            || (this = (_QWORD *)ZinIrSymbol::GetMemType(*v7), (_DWORD)this != 2))
          {
            this = std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>(v3, (uint64_t *)&v8, (uint64_t *)&v8);
          }
        }
      }
      ++v1;
    }
    while (v1 != v2);
  }
  return this;
}

uint64_t ZinIrLocalRegAlloc::VerifyTileHeight(ZinIrLocalRegAlloc *this)
{
  uint64_t v1;
  _QWORD *v2;
  ZinIrOpLayer **v3;
  ZinIrOpLayer **v4;
  ZinIrOpLayer *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  BOOL v12;
  const ZinIrOpLayer *v13;
  BOOL v14;
  ZinIrTensor *v15;
  uint64_t InterchangeDescriptor;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;

  v1 = *(_QWORD *)this + 8;
  v2 = **(_QWORD ***)this;
  if (v2 != (_QWORD *)v1)
  {
    do
    {
      v3 = (ZinIrOpLayer **)v2[5];
      v4 = (ZinIrOpLayer **)v2[6];
      while (v3 != v4)
      {
        v5 = *v3;
        if (ZinIrOpLayer::IsANELayer(*v3))
        {
          v6 = *((_QWORD *)v5 + 33);
          v7 = *(_QWORD *)(v6 + 200);
          v8 = (*(uint64_t (**)(ZinIrOpLayer *, uint64_t))(*(_QWORD *)v5 + 368))(v5, 3);
          v9 = v8;
          v10 = *(_DWORD *)(v6 + 144);
          if (v10 == 1)
          {
            if (v7 < v8)
              goto LABEL_38;
          }
          else if (v10 == 2 && v7 < v8)
          {
LABEL_38:
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              ZinIrLocalRegAlloc::VerifyTileHeight();
            return 3;
          }
          if (!v7)
          {
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              ZinIrLocalRegAlloc::VerifyTileHeight();
            return 3;
          }
          if (*(_DWORD *)(*((_QWORD *)v5 + 8) + 8) == 93)
          {
            v12 = v7 == 8 || (v7 & 0xF) == 0;
            if (!v12)
            {
              if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                ZinIrLocalRegAlloc::VerifyTileHeight();
              return 3;
            }
          }
          else
          {
            if (*(_BYTE *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0, 0)+ 164))v14 = v7 >= v9;
            else
              v14 = 1;
            if (!v14 && !ZinOpLayerUtils::HasReductionLayer(v5, v13))
            {
              v15 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0, 0);
              InterchangeDescriptor = ZinIrTensor::GetInterchangeDescriptor(v15);
              if ((v17 & 0xFF00000000) == 0)
                std::__throw_bad_optional_access[abi:ne180100]();
              if (v7 % GetMacroblockSize(SHIDWORD(InterchangeDescriptor)))
              {
                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                  ZinIrLocalRegAlloc::VerifyTileHeight();
                return 3;
              }
            }
            if (v7 > v9)
            {
              if (!ZinANELayer::IsChainedProducer(v5))
              {
                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                  ZinIrLocalRegAlloc::VerifyTileHeight();
                return 3;
              }
              if (v7 > *(_QWORD *)(v6 + 208) + *(_QWORD *)(v6 + 224) + v9)
              {
                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                  ZinIrLocalRegAlloc::VerifyTileHeight();
                return 3;
              }
            }
          }
        }
        ++v3;
      }
      v18 = (_QWORD *)v2[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v2[2];
          v12 = *v19 == (_QWORD)v2;
          v2 = v19;
        }
        while (!v12);
      }
      v2 = v19;
    }
    while (v19 != (_QWORD *)v1);
  }
  return 0;
}

uint64_t ZinIrLocalRegAlloc::VerifyL2Symbols(ZinIrLocalRegAlloc *this)
{
  uint64_t v1;
  _QWORD *v2;
  ZinIrOpLayer **v3;
  ZinIrOpLayer **v4;
  ZinIrOpLayer *v5;
  unint64_t v6;
  uint64_t InputTensor;
  void *v8;
  void *v9;
  void *v10;
  _BOOL4 v11;
  char *v12;
  void *v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v19;
  void *v20;
  void *v21;
  int v22;
  uint8_t buf[4];
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)this + 8;
  v2 = **(_QWORD ***)this;
  if (v2 == (_QWORD *)v1)
    return 0;
LABEL_2:
  v4 = (ZinIrOpLayer **)v2[5];
  v3 = (ZinIrOpLayer **)v2[6];
  while (1)
  {
    if (v4 == v3)
    {
      v15 = (_QWORD *)v2[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v2[2];
          v17 = *v16 == (_QWORD)v2;
          v2 = v16;
        }
        while (!v17);
      }
      v2 = v16;
      if (v16 == (_QWORD *)v1)
        return 0;
      goto LABEL_2;
    }
    v5 = *v4;
    if (ZinIrOpLayer::IsANELayer(*v4))
      break;
LABEL_23:
    ++v4;
  }
  if (*((_QWORD *)v5 + 12) == *((_QWORD *)v5 + 11))
  {
LABEL_20:
    ZinEngineLayerMirInfo::GetL2WrSymbols(*((ZinEngineLayerMirInfo **)v5 + 33), &v20);
    v14 = v20;
    v13 = v21;
    if (v20)
    {
      v21 = v20;
      operator delete(v20);
    }
    if (v13 == v14)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinIrLocalRegAlloc::VerifyL2Symbols();
      return 3;
    }
    goto LABEL_23;
  }
  v6 = 0;
  while (1)
  {
    InputTensor = ZinIrOpLayer::GetInputTensor(v5, v6);
    if (((*(uint64_t (**)(ZinIrOpLayer *, uint64_t))(*(_QWORD *)v5 + 200))(v5, InputTensor) & 1) == 0)
      break;
LABEL_14:
    if (++v6 >= (uint64_t)(*((_QWORD *)v5 + 12) - *((_QWORD *)v5 + 11)) >> 3)
      goto LABEL_20;
  }
  v22 = 0;
  if (!ZinMemSourceIndexTranslator::GetL2SrcType(v5, v6, &v22))
  {
    ZinEngineLayerMirInfo::GetL2RdSymbols(*((_QWORD *)v5 + 33), v22, &v20);
    v8 = v20;
    v9 = v21;
    v10 = v20;
    if (v21 == v20 && (v11 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR), v10 = v9, v11))
    {
      v12 = (char *)v5 + 24;
      if (*((char *)v5 + 47) < 0)
        v12 = (char *)*((_QWORD *)v5 + 3);
      *(_DWORD *)buf = 136315138;
      v24 = v12;
      _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Error: L2 read symbol does not exist in %s", buf, 0xCu);
      v10 = v20;
      if (v20)
      {
LABEL_12:
        v21 = v10;
        operator delete(v10);
      }
    }
    else if (v10)
    {
      goto LABEL_12;
    }
    if (v9 == v8)
      return 3;
    goto LABEL_14;
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    ZinIrLocalRegAlloc::VerifyL2Symbols((char *)v5 + 47, (_QWORD *)v5 + 3, v19);
  return 3;
}

uint64_t ZinIrLocalRegAlloc::VerifyDMABuffers(ZinIrLocalRegAlloc *this)
{
  _QWORD *v1;
  _QWORD *v3;
  ZinIrOpLayer **v4;
  ZinIrOpLayer **v5;
  uint64_t *v6;
  _QWORD *v7;
  unint64_t v8;
  int *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t PostAllocationInputCropOffsetXLsbs;
  uint64_t Interleave;
  const ZinIrTensor *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  ZinIrTensor *v20;
  int v21;
  _QWORD *v22;
  const ZinANELayer *v23;
  uint64_t v24;
  uint64_t PostAllocationOutputCropOffsetXLsbs;
  int *v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  ZinIrRegAllocUtil *v34;
  const ZinIrTensor *v35;
  int IsPreCropSupported;
  int v37;
  _QWORD *v38;
  _QWORD *v39;
  BOOL v40;
  uint64_t v42;
  _QWORD *v43;
  ZinIrOpLayer **v44;
  void *__p;
  _BYTE *v46;
  uint64_t *v47;
  _BOOL4 v48;
  int v49;
  _BYTE v50[44];

  *(_QWORD *)&v50[28] = *MEMORY[0x24BDAC8D0];
  v1 = **(_QWORD ***)this;
  v42 = *(_QWORD *)this + 8;
  if (v1 == (_QWORD *)v42)
    return 0;
  v3 = (_QWORD *)((char *)this + 224);
  v43 = (_QWORD *)((char *)this + 264);
  while (1)
  {
    v4 = (ZinIrOpLayer **)v1[5];
    v5 = (ZinIrOpLayer **)v1[6];
    if (v4 != v5)
      break;
LABEL_66:
    v38 = (_QWORD *)v1[1];
    if (v38)
    {
      do
      {
        v39 = v38;
        v38 = (_QWORD *)*v38;
      }
      while (v38);
    }
    else
    {
      do
      {
        v39 = (_QWORD *)v1[2];
        v40 = *v39 == (_QWORD)v1;
        v1 = v39;
      }
      while (!v40);
    }
    v1 = v39;
    if (v39 == (_QWORD *)v42)
      return 0;
  }
  v44 = (ZinIrOpLayer **)v1[6];
  while (1)
  {
    v6 = (uint64_t *)*v4;
    if (ZinIrOpLayer::IsANELayer(*v4))
      break;
LABEL_65:
    if (++v4 == v5)
      goto LABEL_66;
  }
  (*(void (**)(void **__return_ptr, uint64_t *))(*v6 + 512))(&__p, v6);
  v7 = __p;
  if (v46 != __p)
  {
    v8 = 0;
    while (1)
    {
      v9 = (int *)v7[v8];
      if (!ZinIrTensor::IsResident((ZinIrTensor *)v9) && !ZinEngineLayerMirInfo::NeedInputDMACached(v6[33], v8 != 0))
      {
        v47 = v6;
        v48 = v8 != 0;
        v49 = 0;
        v10 = std::__hash_table<std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>,std::__unordered_map_hasher<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>,ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKeyHasher,std::equal_to<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey>,true>,std::__unordered_map_equal<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>,std::equal_to<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey>,ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKeyHasher,true>,std::allocator<std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>>>::find<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey>(v3, (int *)&v47);
        if (v10)
          v11 = v10[4];
        else
          v11 = 0;
        PostAllocationInputCropOffsetXLsbs = ZinCropOffsetUtil::GetPostAllocationInputCropOffsetXLsbs((ZinANELayer *)v6, v8 != 0);
        if (PostAllocationInputCropOffsetXLsbs != *(_QWORD *)(ZinMirL2Config::GetTileSrc(v6[33] + 120, v8 != 0) + 48))
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            goto LABEL_53;
          goto LABEL_55;
        }
        v47 = 0;
        if (ZinTensorFormatGetSize(v9[22], &v47))
          goto LABEL_74;
        Interleave = ZinIrTensor::GetInterleave((ZinIrTensor *)v9);
        v15 = (_BYTE)v14 ? Interleave : 1;
        if ((unint64_t)(v15 * v11 * (_QWORD)v47) % *(_QWORD *)(*((_QWORD *)this + 2) + 528))
          goto LABEL_28;
        v47 = 0;
        if (ZinTensorFormatGetSize(v9[22], &v47))
LABEL_74:
          ZinAssertImpl("Invalid format", v50);
        v16 = ZinIrTensor::GetInterleave((ZinIrTensor *)v9);
        v17 = (_BYTE)v14 ? v16 : 1;
        if ((unint64_t)(v17 * PostAllocationInputCropOffsetXLsbs * (_QWORD)v47)
           % *(_QWORD *)(*((_QWORD *)this + 2) + 528))
        {
LABEL_28:
          if (ZinIrRegAllocUtil::IsPreCropSupported((ZinIrRegAllocUtil *)v9, v14))
          {
            v18 = (*(uint64_t (**)(uint64_t *))(*v6 + 496))(v6);
            v19 = v11 == PostAllocationInputCropOffsetXLsbs ? 1 : v18;
            if ((v19 & 1) == 0)
              break;
          }
        }
      }
      ++v8;
      v7 = __p;
      if (v8 >= (v46 - (_BYTE *)__p) >> 3)
        goto LABEL_30;
    }
    v5 = v44;
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      goto LABEL_60;
    goto LABEL_59;
  }
LABEL_30:
  v20 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t *, _QWORD, _QWORD))(*v6 + 32))(v6, 0, 0);
  if (ZinIrTensor::IsResident(v20))
    goto LABEL_31;
  v47 = v6;
  v22 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v43, &v47);
  if (v22)
    v24 = v22[3];
  else
    v24 = 0;
  PostAllocationOutputCropOffsetXLsbs = ZinCropOffsetUtil::GetPostAllocationOutputCropOffsetXLsbs((ZinCropOffsetUtil *)v6, v23);
  if (PostAllocationOutputCropOffsetXLsbs == *(_QWORD *)(v6[33] + 320))
  {
    v26 = (int *)(*(uint64_t (**)(uint64_t *, _QWORD, _QWORD))(*v6 + 32))(v6, 0, 0);
    v47 = 0;
    if (ZinTensorFormatGetSize(v26[22], &v47))
      goto LABEL_75;
    v27 = ZinIrTensor::GetInterleave((ZinIrTensor *)v26);
    if (v28)
      v29 = v27;
    else
      v29 = 1;
    if (!((unint64_t)(v29 * v24 * (_QWORD)v47) % *(_QWORD *)(*((_QWORD *)this + 2) + 528)))
    {
      v30 = (int *)(*(uint64_t (**)(uint64_t *, _QWORD, _QWORD))(*v6 + 32))(v6, 0, 0);
      v47 = 0;
      if (ZinTensorFormatGetSize(v30[22], &v47))
LABEL_75:
        ZinAssertImpl("Invalid format", v50);
      v31 = ZinIrTensor::GetInterleave((ZinIrTensor *)v30);
      v33 = v32 ? v31 : 1;
      if (!((unint64_t)(v33 * PostAllocationOutputCropOffsetXLsbs * (_QWORD)v47)
           % *(_QWORD *)(*((_QWORD *)this + 2) + 528)))
      {
LABEL_31:
        v21 = 5;
LABEL_57:
        v5 = v44;
        goto LABEL_61;
      }
    }
    v34 = (ZinIrRegAllocUtil *)(*(uint64_t (**)(uint64_t *, _QWORD, _QWORD))(*v6 + 32))(v6, 0, 0);
    IsPreCropSupported = ZinIrRegAllocUtil::IsPreCropSupported(v34, v35);
    if (v24 == PostAllocationOutputCropOffsetXLsbs)
      v37 = 0;
    else
      v37 = IsPreCropSupported;
    if (v37 != 1)
    {
      v21 = 0;
      goto LABEL_57;
    }
    v5 = v44;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
LABEL_59:
      ZinIrLocalRegAlloc::VerifyDMABuffers();
  }
  else
  {
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
LABEL_55:
      v21 = 1;
      goto LABEL_57;
    }
LABEL_53:
    ZinIrLocalRegAlloc::VerifyDMABuffers();
    v5 = v44;
  }
LABEL_60:
  v21 = 1;
LABEL_61:
  if (__p)
  {
    v46 = __p;
    operator delete(__p);
  }
  if (v21 == 5 || !v21)
    goto LABEL_65;
  return 3;
}

void sub_206DC62B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrLocalRegAlloc::AllocateUncompressedLiveIOs(ZinIrLocalRegAlloc *a1, uint64_t *a2, uint64_t **a3)
{
  __int128 *v3;
  uint64_t v6;
  void **v7;
  uint64_t *LiveIOInfoMap;
  void **v9;
  int v10;
  void ***v11;
  void ***v12;
  void **RootTensor;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void **v17;
  ZinIrSection *v18;
  char v19;
  int v20;
  __int128 *v21;
  __int128 *v22;
  BOOL v23;
  uint64_t v25;
  unsigned __int8 v27;
  unsigned __int8 *v28;
  std::__shared_weak_count *v29;
  _DWORD v30[2];
  void *v31;
  char v32;
  _BYTE v33[7];
  char v34;
  std::string v35;
  int v36;
  void *__p;
  void ***v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v3 = *(__int128 **)(*a2 + 72);
  v25 = *a2 + 80;
  if (v3 == (__int128 *)v25)
    return 0;
  v6 = (uint64_t)a1 + 592;
  v7 = (void **)((char *)a1 + 600);
  while (1)
  {
    std::pair<std::string const,std::pair<IOType,std::vector<ZinIrTensor *>>>::pair[abi:ne180100](&v35, v3 + 2);
    LiveIOInfoMap = ZinIrBindings::GetLiveIOInfoMap(*a2, v36);
    v9 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)LiveIOInfoMap, (void **)&v35.__r_.__value_.__l.__data_);
    if (LiveIOInfoMap + 1 == (uint64_t *)v9)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinIrLocalRegAlloc::AllocateUncompressedLiveIOs();
LABEL_25:
      v20 = 1;
    }
    else
    {
      LOBYTE(v30[0]) = 0;
      v34 = 0;
      v10 = *((_DWORD *)v9 + 72);
      if (v10 != 5)
      {
        memset(v33, 0, sizeof(v33));
        v32 = -1;
        v34 = 1;
        v30[0] = v10;
        v30[1] = 0;
        v31 = v9[37];
      }
      v11 = (void ***)__p;
      v12 = v38;
      while (v11 != v12)
      {
        RootTensor = *v11;
        if (*v11)
        {
          if (v36 == 1)
          {
            ZinIrTensor::GetParentTensor((ZinIrTensor *)RootTensor, &v28);
            v14 = v29;
            if (v29)
            {
              p_shared_owners = (unint64_t *)&v29->__shared_owners_;
              do
                v16 = __ldaxr(p_shared_owners);
              while (__stlxr(v16 - 1, p_shared_owners));
              if (!v16)
              {
                ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
                std::__shared_weak_count::__release_weak(v14);
              }
            }
            RootTensor = (void **)ZinIrTensor::GetRootTensor((ZinIrTensor *)RootTensor);
          }
          v17 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(v6, RootTensor + 3);
          if (v7 == v17)
            ZinAssertImpl("No bar id for tensor");
          v27 = *((_BYTE *)v17 + 60);
          v28 = &v27;
          v18 = (ZinIrSection *)std::__tree<std::__value_type<unsigned char,ZinIrSection *>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,ZinIrSection *>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,ZinIrSection *>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a3, &v27, (uint64_t)&std::piecewise_construct, &v28)[5];
          v19 = v34
              ? ZinIrLocalRegAlloc::AllocateNonResidentDynamicCircularTensor((uint64_t)a1, (ZinIrTensor *)RootTensor, (uint64_t)v30, v18): ZinIrLocalRegAlloc::AllocateNonResidentTensor(a1, (ZinIrTensor *)RootTensor, v18, 1);
          if ((v19 & 1) == 0)
            goto LABEL_25;
        }
        ++v11;
      }
      v20 = 0;
    }
    if (__p)
    {
      v38 = (void ***)__p;
      operator delete(__p);
    }
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    if (v20)
      return 3;
    v21 = (__int128 *)*((_QWORD *)v3 + 1);
    if (v21)
    {
      do
      {
        v22 = v21;
        v21 = *(__int128 **)v21;
      }
      while (v21);
    }
    else
    {
      do
      {
        v22 = (__int128 *)*((_QWORD *)v3 + 2);
        v23 = *(_QWORD *)v22 == (_QWORD)v3;
        v3 = v22;
      }
      while (!v23);
    }
    v3 = v22;
    if (v22 == (__int128 *)v25)
      return 0;
  }
}

void sub_206DC65C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  std::pair<std::string const,std::pair<IOType,std::vector<ZinIrTensor *>>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::AllocateCompressedLiveIOs(ZinIrLocalRegAlloc *a1, uint64_t a2, uint64_t **a3)
{
  __int128 *v3;
  uint64_t v6;
  void ***v7;
  void ***v8;
  void **RootTensor;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void **v13;
  ZinIrSection *v14;
  ZinIrSection *v15;
  int v16;
  __int128 *v17;
  __int128 *v18;
  BOOL v19;
  uint64_t v21;
  void **v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 *v25;
  std::__shared_weak_count *v26;
  std::string __p;
  int v28;
  void ***v29;
  void ***v30;

  v3 = *(__int128 **)(*(_QWORD *)a2 + 48);
  v21 = *(_QWORD *)a2 + 56;
  if (v3 == (__int128 *)v21)
    return 0;
  v6 = (uint64_t)a1 + 592;
  v22 = (void **)((char *)a1 + 600);
  while (1)
  {
    std::pair<std::string const,std::pair<IOType,std::vector<ZinIrTensor *>>>::pair[abi:ne180100](&__p, v3 + 2);
    v7 = v29;
    v8 = v30;
    if (v29 == v30)
    {
      v16 = 1;
      if (v29)
        goto LABEL_21;
    }
    else
    {
      while (1)
      {
        RootTensor = *v7;
        if (*v7)
        {
          if (v28 == 1)
          {
            ZinIrTensor::GetParentTensor((ZinIrTensor *)RootTensor, &v25);
            v10 = v26;
            if (v26)
            {
              p_shared_owners = (unint64_t *)&v26->__shared_owners_;
              do
                v12 = __ldaxr(p_shared_owners);
              while (__stlxr(v12 - 1, p_shared_owners));
              if (!v12)
              {
                ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
                std::__shared_weak_count::__release_weak(v10);
              }
            }
            RootTensor = (void **)ZinIrTensor::GetRootTensor((ZinIrTensor *)RootTensor);
          }
          v13 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(v6, RootTensor + 3);
          if (v22 == v13)
            ZinAssertImpl("No bar id for tensor");
          v24 = *((_BYTE *)v13 + 60);
          v23 = *((_BYTE *)v13 + 61);
          v25 = &v24;
          v14 = (ZinIrSection *)std::__tree<std::__value_type<unsigned char,ZinIrSection *>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,ZinIrSection *>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,ZinIrSection *>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a3, &v24, (uint64_t)&std::piecewise_construct, &v25)[5];
          v25 = &v23;
          v15 = (ZinIrSection *)std::__tree<std::__value_type<unsigned char,ZinIrSection *>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,ZinIrSection *>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,ZinIrSection *>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a3, &v23, (uint64_t)&std::piecewise_construct, &v25)[5];
          if (!ZinIrLocalRegAlloc::AllocateNonResidentTensor(a1, (ZinIrTensor *)RootTensor, v14, 1)
            || !ZinIrLocalRegAlloc::AllocateNonResidentTensorCompressedMetadata(a1, (const void **)RootTensor, v15))
          {
            break;
          }
        }
        if (++v7 == v8)
        {
          v16 = 1;
          goto LABEL_20;
        }
      }
      v16 = 0;
LABEL_20:
      v7 = v29;
      if (v29)
      {
LABEL_21:
        v30 = v7;
        operator delete(v7);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (!v16)
      return 3;
    v17 = (__int128 *)*((_QWORD *)v3 + 1);
    if (v17)
    {
      do
      {
        v18 = v17;
        v17 = *(__int128 **)v17;
      }
      while (v17);
    }
    else
    {
      do
      {
        v18 = (__int128 *)*((_QWORD *)v3 + 2);
        v19 = *(_QWORD *)v18 == (_QWORD)v3;
        v3 = v18;
      }
      while (!v19);
    }
    v3 = v18;
    if (v18 == (__int128 *)v21)
      return 0;
  }
}

void sub_206DC6828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::pair<std::string const,std::pair<IOType,std::vector<ZinIrTensor *>>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void ZinIrLocalRegAlloc::CreateLiveIOSectionsFromBarUsage(ZinIrLocalRegAlloc *this@<X0>, const ZinBarUsage *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t **v7;
  _QWORD *v8;
  char *v9;
  int v10;
  uint64_t *i;
  unsigned int v12;
  uint64_t *j;
  unsigned int v14;
  char *v15;
  char *v16;
  BOOL v17;
  __int128 v18;
  uint64_t v19;
  std::string v20;
  uint64_t v21;
  int v22;

  LODWORD(v20.__r_.__value_.__l.__data_) = 0;
  v5 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>((_QWORD *)this + 13, (int *)&v20);
  if (v5)
    v6 = v5[3];
  else
    v6 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v7 = (uint64_t **)(a3 + 8);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = a3 + 8;
  v8 = (_QWORD *)*((_QWORD *)a2 + 3);
  v9 = (char *)a2 + 32;
  if (v8 != (_QWORD *)((char *)a2 + 32))
  {
    while (1)
    {
      if (*((char *)v8 + 55) < 0)
        std::string::__init_copy_ctor_external(&v20, (const std::string::value_type *)v8[4], v8[5]);
      else
        v20 = *(std::string *)(v8 + 4);
      v21 = v8[7];
      v22 = *((_DWORD *)v8 + 16);
      if (v21 >= 3)
        ZinAssertImpl("Invalid io type");
      v10 = dword_207A9E464[(int)v21];
      v19 = 0;
      for (i = *v7; i; i = (uint64_t *)*i)
      {
        v12 = *((unsigned __int8 *)i + 32);
        if (BYTE4(v21) >= v12)
        {
          if (v12 >= BYTE4(v21))
            goto LABEL_16;
          ++i;
        }
      }
      if (ZinIrMemoryPool::AddSection(v6, v10, SBYTE4(v21), &v19))
        break;
      LOBYTE(v18) = BYTE4(v21);
      *((_QWORD *)&v18 + 1) = v19;
      std::__tree<std::__value_type<unsigned char,ZinIrSection *>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,ZinIrSection *>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,ZinIrSection *>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,ZinIrSection *>>((uint64_t **)a3, (unsigned __int8 *)&v18, &v18);
LABEL_16:
      if (BYTE6(v21))
      {
        for (j = *v7; j; j = (uint64_t *)*j)
        {
          v14 = *((unsigned __int8 *)j + 32);
          if (BYTE5(v21) >= v14)
          {
            if (v14 >= BYTE5(v21))
              goto LABEL_24;
            ++j;
          }
        }
        if (ZinIrMemoryPool::AddSection(v6, v10, SBYTE5(v21), &v19))
          break;
        LOBYTE(v18) = BYTE5(v21);
        *((_QWORD *)&v18 + 1) = v19;
        std::__tree<std::__value_type<unsigned char,ZinIrSection *>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,ZinIrSection *>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,ZinIrSection *>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,ZinIrSection *>>((uint64_t **)a3, (unsigned __int8 *)&v18, &v18);
      }
LABEL_24:
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      v15 = (char *)v8[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = *(char **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (char *)v8[2];
          v17 = *(_QWORD *)v16 == (_QWORD)v8;
          v8 = v16;
        }
        while (!v17);
      }
      v8 = v16;
      if (v16 == v9)
        return;
    }
    ZinAssertImpl("Failed adding section");
  }
}

void sub_206DC6A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v18, *(_QWORD **)(v18 + 8));
  _Unwind_Resume(a1);
}

void ZinIrLocalRegAlloc::RemoveSymbolFromLayerAndTensor(_QWORD *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  ZinIrTensor **v16;
  char *v17;
  char *v18;
  uint64_t v19;
  ZinIrTensor **v20;
  uint64_t v21;
  uint64_t ****v22;
  uint64_t ***v23;
  ZinIrTensor **v24;
  ZinIrTensor *v25;
  ZinIrTensor **v26;
  ZinIrTensor **v27;
  uint64_t v28;
  ZinIrSymbol **v29;
  ZinIrSymbol *v30;
  void **v31;
  void **v32;
  ZinIrSymbol *v33;
  void *v34;
  ZinIrTensor **v35;
  uint64_t v36;
  void *__p;
  ZinIrTensor **v38;
  char *v39;
  uint64_t v40;

  v40 = a2;
  v3 = *(_QWORD *)(a2 + 104);
  if (v3)
  {
    v4 = *(_QWORD **)(v3 + 40);
    if (v4 != *(_QWORD **)(v3 + 48))
    {
      if (*v4)
      {
        __p = 0;
        v38 = 0;
        v7 = a1 + 66;
        v39 = 0;
        if (std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(a1 + 66, &v40))
        {
          v34 = 0;
          v8 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v7, &v40);
          if (!v8
            || (v34 = (void *)v8[3],
                (v9 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(a1 + 61, &v34)) == 0))
          {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
          if (&__p != v9 + 3)
            std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)&__p, (char *)v9[3], v9[4], (uint64_t)(v9[4] - v9[3]) >> 3);
        }
        else
        {
          v10 = ((char *)v38 - (_BYTE *)__p) >> 3;
          if ((unint64_t)(v10 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v11 = (v39 - (_BYTE *)__p) >> 2;
          if (v11 <= v10 + 1)
            v11 = v10 + 1;
          if ((unint64_t)(v39 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
            v12 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v12 = v11;
          if (v12)
            v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v39, v12);
          else
            v13 = 0;
          v14 = &v13[8 * v10];
          v15 = &v13[8 * v12];
          *(_QWORD *)v14 = v40;
          v16 = (ZinIrTensor **)(v14 + 8);
          v18 = (char *)__p;
          v17 = (char *)v38;
          if (v38 != __p)
          {
            do
            {
              v19 = *((_QWORD *)v17 - 1);
              v17 -= 8;
              *((_QWORD *)v14 - 1) = v19;
              v14 -= 8;
            }
            while (v17 != v18);
            v17 = (char *)__p;
          }
          __p = v14;
          v38 = v16;
          v39 = v15;
          if (v17)
            operator delete(v17);
          v38 = v16;
        }
        v20 = (ZinIrTensor **)__p;
        v36 = *(_QWORD *)__p;
        v21 = *(_QWORD *)(v36 + 104);
        if (!v21 || (v22 = *(uint64_t *****)(v21 + 40), v22 == *(uint64_t *****)(v21 + 48)))
          v23 = 0;
        else
          v23 = *v22;
        v24 = v38;
        if (__p != v38)
        {
          do
          {
            v25 = *v20;
            ZinIrTensor::GetTensorFamily(*v20, (uint64_t)&v34);
            v26 = (ZinIrTensor **)v34;
            v27 = v35;
            while (v26 != v27)
            {
              ZinIrLocalRegAlloc::RemoveSymbolFromLayers((ZinIrLocalRegAlloc *)a1, *v26);
              std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>(a3, (uint64_t *)v26, (uint64_t *)v26);
              ++v26;
            }
            v33 = 0;
            v28 = *((_QWORD *)v25 + 13);
            if (!v28 || (v29 = *(ZinIrSymbol ***)(v28 + 40), v29 == *(ZinIrSymbol ***)(v28 + 48)))
              v30 = 0;
            else
              v30 = *v29;
            v33 = v30;
            ZinIrLocalRegAlloc::RemoveSymbolFromTensorFamily((ZinIrLocalRegAlloc *)a1, v25);
            std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,long>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,long>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,long>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,long>>>::__erase_unique<ZinIrOpLayer *>(a1 + 56, &v33);
            if (v33 != (ZinIrSymbol *)v23)
              ZinIrSection::DeleteSymbol(*((uint64_t ***)v33 + 1), v33);
            if (v34)
            {
              v35 = (ZinIrTensor **)v34;
              operator delete(v34);
            }
            ++v20;
          }
          while (v20 != v24);
        }
        ZinIrSection::DeleteSymbol(v23[1], (ZinIrSymbol *)v23);
        if (std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v7, &v40))
        {
          v31 = (void **)__p;
          v32 = (void **)v38;
          while (v31 != v32)
          {
            v34 = *v31;
            std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,long>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,long>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,long>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,long>>>::__erase_unique<ZinIrOpLayer *>(v7, &v34);
            ++v31;
          }
          std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::__erase_unique<ZinIrTensor *>(a1 + 61, &v36);
        }
        if (__p)
        {
          v38 = (ZinIrTensor **)__p;
          operator delete(__p);
        }
      }
    }
  }
}

void sub_206DC6D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinIrLocalRegAlloc::CreateWriteL2CacheSymbolDescriptor(ZinIrLocalRegAlloc *this@<X0>, ZinANELayer *a2@<X1>, uint64_t a3@<X8>)
{
  const ZinIrTensor *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  MirInfoChannelAssignment *ChannelAssignment;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  void **v17;
  char *v18;
  __int128 v19;
  void *__p[2];
  char v21;
  void *v22[4];
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;

  v6 = (const ZinIrTensor *)(*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  v7 = *(_QWORD *)(*((_QWORD *)this + 2) + 416);
  LODWORD(v23) = 0;
  v24 = 0u;
  v25 = 0u;
  v26 = 0;
  v27 = vdupq_n_s64(1uLL);
  v28 = v27;
  v29 = v27;
  v30 = v27;
  v31 = v27;
  v32 = v27;
  v33 = v27;
  v34 = v27;
  v35 = v27;
  v36 = v27;
  ZinIrLocalRegAlloc::GetDimensionOrderHint(this, v6, (uint64_t)v22);
  ZinIrTensor::MirInfo::InferDescriptorFromLogicalParams((int64x2_t *)v6, 1, (uint64_t)v22, 1, 1, (uint64_t)&v23);
  ZinIrTensor::GetTensorSizeInBytes((unsigned __int8 *)v6, &v23);
  v9 = v8;
  v10 = *((_QWORD *)a2 + 33);
  v11 = *(_QWORD *)(v10 + 104);
  v12 = v30.i64[0] / v7;
  *(_QWORD *)(v10 + 272) = v30.i64[1] / v7;
  *(_QWORD *)(v10 + 280) = v12;
  *(_QWORD *)(v10 + 296) = v31.i64[1] / v7;
  if (*(_BYTE *)(*((_QWORD *)this + 2) + 1237))
  {
    ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment((ZinEngineLayerMirInfo *)v10);
    v14 = MirInfoChannelAssignment::GetOCGSize(ChannelAssignment) * v12;
    v10 = *((_QWORD *)a2 + 33);
    *(_QWORD *)(v10 + 304) = v14;
  }
  *(_BYTE *)(v10 + 312) = 0;
  if (v11 == 1)
    v15 = v29.i64[1] / v7;
  else
    v15 = *((_QWORD *)v6 + 7) * *(_QWORD *)(v10 + 280) / v11;
  *(_QWORD *)(v10 + 288) = v15;
  if (*((char *)a2 + 47) >= 0)
    v16 = *((unsigned __int8 *)a2 + 47);
  else
    v16 = *((_QWORD *)a2 + 4);
  v17 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v16 + 16);
  if (v21 < 0)
    v17 = (void **)__p[0];
  if (v16)
  {
    if (*((char *)a2 + 47) >= 0)
      v18 = (char *)a2 + 24;
    else
      v18 = (char *)*((_QWORD *)a2 + 3);
    memmove(v17, v18, v16);
  }
  strcpy((char *)v17 + v16, "/conv_res_l2_buf");
  *(_QWORD *)&v19 = *((_QWORD *)a2 + 6);
  *((_QWORD *)&v19 + 1) = v19;
  ZinIrSymbol::Descriptor::Descriptor(a3, 1, (__int128 *)__p, &v19, v9, &v23);
  if (v21 < 0)
    operator delete(__p[0]);
  if (v22[0])
  {
    v22[1] = v22[0];
    operator delete(v22[0]);
  }
}

void sub_206DC6FEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19)
{
  if (a17 < 0)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void ZinIrLocalRegAlloc::CreateReadL2CacheSymbolDescriptor(ZinIrLocalRegAlloc *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  uint64_t v8;
  const ZinIrTensor *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t TileSrc;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  std::string::size_type *CachedSrcTensor;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t CachedSrcPort;
  char v29;
  ZinIrOpLayer **v30;
  ZinIrOpLayer **v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  size_t v35;
  std::string *v36;
  const void *v37;
  std::string *v38;
  std::string::size_type size;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  __int128 v43;
  std::string v44;
  std::string v45;
  std::string v46;
  void *__p[2];
  std::string::size_type v48;
  __int128 v49;
  _QWORD v50[2];
  __int128 v51;
  unint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  void *v56[4];
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t v70;

  if (a3 >= 2)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinIrLocalRegAlloc::CreateReadL2CacheSymbolDescriptor();
    ZinAssertImpl("Internal Register Allocation Failure");
  }
  v5 = a3;
  v8 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 504))(a2, a3);
  v9 = (const ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0, 0);
  if (a2[25])
  {
    v10 = a2[24];
    if (v5)
    {
      if (v10 != 1)
        goto LABEL_9;
    }
    else if (v10)
    {
      goto LABEL_9;
    }
    v11 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a2 + 32))(a2, 0, 0);
    if (v11 != (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)a2[25] + 32))(a2[25], 0, 0))
      v9 = (const ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)a2[25] + 32))(a2[25], 0, 0);
  }
LABEL_9:
  v12 = v5 != 0;
  v13 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 416);
  LODWORD(v57) = 0;
  v58 = 0u;
  v59 = 0u;
  v60 = 0;
  v61 = vdupq_n_s64(1uLL);
  v62 = v61;
  v63 = v61;
  v64 = v61;
  v65 = v61;
  v66 = v61;
  v67 = v61;
  v68 = v61;
  v69 = v61;
  v70 = v61;
  ZinIrLocalRegAlloc::GetDimensionOrderHint(a1, v9, (uint64_t)v56);
  ZinIrTensor::MirInfo::InferDescriptorFromLogicalParams((int64x2_t *)v9, 1, (uint64_t)v56, 1, 1, (uint64_t)&v57);
  ZinIrTensor::GetTensorSizeInBytes((unsigned __int8 *)v9, &v57);
  v15 = v14;
  v16 = a2[33];
  v17 = *(_QWORD *)(v16 + 104);
  TileSrc = ZinMirL2Config::GetTileSrc(v16 + 120, v5);
  v20 = *(_OWORD *)(TileSrc + 32);
  v19 = *(_OWORD *)(TileSrc + 48);
  v21 = *(_QWORD *)(TileSrc + 64);
  v51 = *(_OWORD *)(TileSrc + 16);
  v50[0] = *(_QWORD *)TileSrc;
  v50[1] = v64.i64[1] / v13;
  *(_QWORD *)&v51 = v64.i64[0] / v13;
  *((_QWORD *)&v51 + 1) = v65.i64[1] / v13;
  v53 = *((_QWORD *)&v20 + 1);
  v54 = v19;
  v55 = v21;
  v52 = v63.i64[1] / v13;
  if (v17 >= 2 && *(_QWORD *)(ZinIrOpLayer::GetInputTensor((ZinIrOpLayer *)a2, v5 != 0) + 48) == 1)
  {
    if (*(uint64_t *)((*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a2 + 32))(a2, 0, 0) + 48) <= 1)
      v22 = *((_QWORD *)v9 + 7) * (_QWORD)v51 / v17;
    else
      v22 = 0;
    v52 = v22;
  }
  ZinMirL2Config::SetTileSrc(a2[33] + 120, (uint64_t)v50, v5);
  *(_QWORD *)&v49 = -1;
  *((_QWORD *)&v49 + 1) = -1;
  if (ZinANELayer::HasCachedSrcTensor((uint64_t)a2, v5))
  {
    v23 = (_QWORD *)a2[19];
    CachedSrcTensor = (std::string::size_type *)ZinANELayer::GetCachedSrcTensor((uint64_t)a2, v5);
    v25 = (std::__shared_weak_count *)CachedSrcTensor[1];
    v46.__r_.__value_.__r.__words[0] = *CachedSrcTensor;
    v46.__r_.__value_.__l.__size_ = (std::string::size_type)v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(p_shared_owners);
      while (__stxr(v27 + 1, p_shared_owners));
    }
    CachedSrcPort = ZinANELayer::GetCachedSrcPort((uint64_t)a2, v5);
    if (!v29)
      std::__throw_bad_optional_access[abi:ne180100]();
    ZinIrOpLayerGraph::GetOutgoingLayersFromPort((ZinIrOpLayer *)a2, v23, CachedSrcPort, (char **)__p);
    v30 = (ZinIrOpLayer **)__p[0];
    v31 = (ZinIrOpLayer **)__p[1];
    v32 = -1;
    while (v30 != v31)
    {
      if (ZinIrOpLayer::IsANELayer(*v30) && v32 <= *((_QWORD *)*v30 + 6))
        v32 = *((_QWORD *)*v30 + 6);
      ++v30;
    }
    if (v32 <= a2[6])
      ZinAssertImpl("invalid endpoint for liverange of L2 cached tensor");
    *(_QWORD *)&v49 = a2[6];
    *((_QWORD *)&v49 + 1) = v32;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v25)
    {
      v33 = (unint64_t *)&v25->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
  else
  {
    *(_QWORD *)&v49 = a2[6];
    *((_QWORD *)&v49 + 1) = v49;
  }
  if (*((char *)a2 + 47) >= 0)
    v35 = *((unsigned __int8 *)a2 + 47);
  else
    v35 = a2[4];
  v36 = &v45;
  std::string::basic_string[abi:ne180100]((uint64_t)&v45, v35 + 1);
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v36 = (std::string *)v45.__r_.__value_.__r.__words[0];
  if (v35)
  {
    if (*((char *)a2 + 47) >= 0)
      v37 = a2 + 3;
    else
      v37 = (const void *)a2[3];
    memmove(v36, v37, v35);
  }
  *(_WORD *)((char *)&v36->__r_.__value_.__l.__data_ + v35) = 95;
  std::to_string(&v44, v12);
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v38 = &v44;
  else
    v38 = (std::string *)v44.__r_.__value_.__r.__words[0];
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  else
    size = v44.__r_.__value_.__l.__size_;
  v40 = std::string::append(&v45, (const std::string::value_type *)v38, size);
  v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  v42 = std::string::append(&v46, "/tile_src_l2_buf", 0x10uLL);
  v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  v48 = v42->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  ZinIrSymbol::Descriptor::Descriptor(a4, 1, (__int128 *)__p, &v49, v15, &v57);
  if (SHIBYTE(v48) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (v56[0])
  {
    v56[1] = v56[0];
    operator delete(v56[0]);
  }
}

void sub_206DC7500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48)
{
  if (__p)
  {
    a29 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  if (a47)
  {
    a48 = (uint64_t)a47;
    operator delete(a47);
  }
  _Unwind_Resume(a1);
}

uint64_t *ZinIrLocalRegAlloc::FindSortedConflictResidentSymbols@<X0>(ZinIrLocalRegAlloc *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t L2Section;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a3 = a3;
  *(_QWORD *)(a3 + 8) = a3;
  *(_QWORD *)(a3 + 16) = 0;
  L2Section = ZinIrLocalRegAlloc::GetL2Section(a1);
  v10[0] = &off_24C001088;
  v10[1] = a1;
  v10[2] = a3;
  v11 = v10;
  ZinIntervalTree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,ZinLiveRange>::TraverseIntersectNodeVisitor(*(_QWORD *)(L2Section + 112), **(_QWORD **)(L2Section + 112), a2, (uint64_t)v10);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return std::list<ZinIrSymbol *>::__sort<ZinIrLocalRegAlloc::FindSortedConflictResidentSymbols(ZinLiveRange const&)::$_1>(*(uint64_t **)(a3 + 8), (uint64_t *)a3, *(_QWORD *)(a3 + 16));
}

void sub_206DC768C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  _QWORD *v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  std::__list_imp<ZinIrSection *>::clear(v13);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::AllocateReadL2CacheCopyTensor(ZinIrLocalRegAlloc *this, ZinNEBypassLayer *a2, ZinPELayer *a3, const ZinANELayer *a4)
{
  int64x2_t *v8;
  const ZinIrTensor *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  __int128 *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  ZinIrMemoryPool *v23;
  ZinIrSection *L2Section;
  uint64_t v25;
  int Memory;
  ZinIrSymbol *v27;
  ZinIrTensor *v28;
  unint64_t *v29;
  uint64_t v30;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  void *v49;
  std::string v50;
  _BYTE v51[304];
  void *__p;
  std::string __s;
  _BYTE v54[304];
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  LODWORD(v35) = 0;
  v36 = 0u;
  v37 = 0u;
  v38 = 0;
  v39 = vdupq_n_s64(1uLL);
  v40 = v39;
  v41 = v39;
  v42 = v39;
  v43 = v39;
  v44 = v39;
  v45 = v39;
  v46 = v39;
  v47 = v39;
  v48 = v39;
  v8 = (int64x2_t *)(*(uint64_t (**)(ZinNEBypassLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  v9 = (const ZinIrTensor *)(*(uint64_t (**)(ZinNEBypassLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  ZinIrLocalRegAlloc::GetDimensionOrderHint(this, v9, (uint64_t)&__p);
  ZinIrTensor::MirInfo::InferDescriptorFromLogicalParams(v8, 1, (uint64_t)&__p, 1, 1, (uint64_t)&v35);
  if (__p)
  {
    __s.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    operator delete(__p);
  }
  v10 = (unsigned __int8 *)(*(uint64_t (**)(ZinNEBypassLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  ZinIrTensor::GetTensorSizeInBytes(v10, &v35);
  v12 = v11;
  v13 = (*(uint64_t (**)(ZinNEBypassLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  v14 = v13;
  if (*(char *)(v13 + 47) >= 0)
    v15 = *(unsigned __int8 *)(v13 + 47);
  else
    v15 = *(_QWORD *)(v13 + 32);
  v16 = &v33;
  std::string::basic_string[abi:ne180100]((uint64_t)&v33, v15 + 15);
  if (v34 < 0)
    v16 = (__int128 *)v33;
  if (v15)
  {
    v19 = *(char **)(v14 + 24);
    v18 = (char *)(v14 + 24);
    v17 = v19;
    if (v18[23] >= 0)
      v20 = v18;
    else
      v20 = v17;
    memmove(v16, v20, v15);
  }
  strcpy((char *)v16 + v15, "/_copy_L2_cache");
  v21 = *((_QWORD *)a3 + 6);
  *(_QWORD *)&v32 = *((_QWORD *)a2 + 6);
  *((_QWORD *)&v32 + 1) = v21;
  ZinIrSymbol::Descriptor::Descriptor((uint64_t)&__p, 2, &v33, &v32, v12, &v35);
  if (SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  *(_QWORD *)&v32 = 0;
  LODWORD(v33) = 2;
  v22 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>((_QWORD *)this + 13, (int *)&v33);
  if (v22)
    v23 = (ZinIrMemoryPool *)v22[3];
  else
    v23 = 0;
  v49 = __p;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v50, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v50 = __s;
  memcpy(v51, v54, sizeof(v51));
  L2Section = (ZinIrSection *)ZinIrLocalRegAlloc::GetL2Section(this);
  v25 = *(_QWORD *)(*((_QWORD *)this + 2) + 416);
  v33 = 0uLL;
  v34 = 0;
  Memory = ZinIrMemoryPool::AllocateMemory(v23, (uint64_t)&v49, L2Section, v25, (uint64_t *)&v32, (uint64_t)&v33);
  if ((_QWORD)v33)
  {
    *((_QWORD *)&v33 + 1) = v33;
    operator delete((void *)v33);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v50.__r_.__value_.__l.__data_);
    if (!Memory)
      goto LABEL_27;
LABEL_28:
    v30 = 0;
    goto LABEL_29;
  }
  if (Memory)
    goto LABEL_28;
LABEL_27:
  v27 = (ZinIrSymbol *)v32;
  v28 = (ZinIrTensor *)(*(uint64_t (**)(ZinNEBypassLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  if (ZinIrLocalRegAlloc::SetSymbolToLayerAndTensor(this, v27, v28))
    goto LABEL_28;
  if (!*((_QWORD *)a3 + 25) || *((_QWORD *)a3 + 24) >= 2uLL)
  {
    *(_QWORD *)&v33 = 0;
    if (!ZinMemSourceIndexTranslator::GetDMASrcIndex(a3, a4, (uint64_t *)&v33, v29))
      *(_QWORD *)(*((_QWORD *)a3 + 33) + 96 * v33 + 752) = 0;
  }
  v30 = 1;
LABEL_29:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  return v30;
}

void sub_206DC7A54(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x267]) < 0)
    operator delete((void *)STACK[0x250]);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::FreeL2Symbol(ZinIrLocalRegAlloc *a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t v5;
  _QWORD **v6;
  ZinIrSymbol *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  void *__p;
  uint64_t v13;

  ZinIrLocalRegAlloc::FindSortedConflictResidentSymbols(a1, a2, (uint64_t)&v11);
  v5 = v13;
  if (v13)
  {
    v6 = (_QWORD **)__p;
    v7 = (ZinIrSymbol *)*((_QWORD *)__p + 2);
    v8 = *(_QWORD *)__p;
    *(_QWORD *)(v8 + 8) = *((_QWORD *)__p + 1);
    *v6[1] = v8;
    v13 = v5 - 1;
    operator delete(v6);
    v9 = ZinIrLocalRegAlloc::FreeL2Symbol(a1, v7, a3);
  }
  else
  {
    v9 = 0;
  }
  std::__list_imp<ZinIrSection *>::clear(&v11);
  return v9;
}

void sub_206DC7B60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__list_imp<ZinIrSection *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::FreeL2Symbol(ZinIrLocalRegAlloc *a1, ZinIrSymbol *this, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  ZinANELayer *v7;
  _BYTE *v8;
  _BYTE *v9;
  ZinIrSymbol **v11;
  _QWORD *v12[2];
  ZinIrSymbol *v13;

  v13 = this;
  if (this && ZinIrSymbol::GetMemType(this) == 2)
  {
    v11 = &v13;
    v5 = std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>((uint64_t)a1 + 448, &v13, (uint64_t)&std::piecewise_construct, &v11)[3];
    if (*((_DWORD *)v13 + 38) == 4)
    {
      v6 = *(_QWORD *)(v5 + 96);
      v7 = **(ZinANELayer ***)(v6 + 112);
      v8 = *(_BYTE **)(v6 + 264);
      v8[256] = 0;
      v8[150] = 0;
      v8[233] = 0;
      v9 = (_BYTE *)*((_QWORD *)v7 + 33);
      v9[256] = 0;
      v9[150] = 0;
      v9[233] = 0;
      if (!ZinIrLocalRegAlloc::ChangeEngineLayerSchedule(a1, v7, *((_QWORD *)v7 + 6) + 1, 0))
        return 3;
    }
    v12[0] = 0;
    v12[1] = 0;
    v11 = (ZinIrSymbol **)v12;
    ZinIrLocalRegAlloc::RemoveSymbolFromLayerAndTensor(a1, v5, (uint64_t **)&v11);
    std::vector<ZinIrTensor *>::assign<std::__tree_const_iterator<ZinIrTensor *,std::__tree_node<ZinIrTensor *,void *> *,long>,0>(a3, v11, v12);
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v11, v12[0]);
  }
  return 0;
}

void sub_206DC7C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<ZinIrTensor *>::assign<std::__tree_const_iterator<ZinIrTensor *,std::__tree_node<ZinIrTensor *,void *> *,long>,0>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  if (a2 == a3)
  {
    v3 = 0;
  }
  else
  {
    v3 = 0;
    v4 = a2;
    do
    {
      v5 = (_QWORD *)v4[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v4[2];
          v7 = *v6 == (_QWORD)v4;
          v4 = v6;
        }
        while (!v7);
      }
      ++v3;
      v4 = v6;
    }
    while (v6 != a3);
  }
  return std::vector<ZinIrTensor *>::__assign_with_size[abi:ne180100]<std::__tree_const_iterator<ZinIrTensor *,std::__tree_node<ZinIrTensor *,void *> *,long>,std::__tree_const_iterator<ZinIrTensor *,std::__tree_node<ZinIrTensor *,void *> *,long>>(a1, a2, a3, v3);
}

uint64_t ZinIrLocalRegAlloc::LegalizeTileHeight(ZinIrLocalRegAlloc *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v11;
  ZinIrOpLayer *v12;
  unint64_t v13;
  const char *v15;
  const char *v16;

  v1 = *((_QWORD *)this + 6) - *((_QWORD *)this + 5);
  if (v1 >= 1)
  {
    v3 = ((unint64_t)v1 >> 3) - 1;
    do
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v3);
      if (ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)v4))
      {
        v5 = *(_QWORD *)(v4 + 264);
        v6 = (unint64_t *)(v5 + 200);
        v7 = *(_QWORD *)(v5 + 200);
        v8 = *(unsigned __int8 *)(v5 + 233);
        v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 368))(v4, 3);
        if (v7 > v9)
        {
          if (*(_DWORD *)(*(_QWORD *)(v4 + 64) + 8) == 93)
          {
            if (v7 != 8 && (v7 & 0xF) != 0)
            {
              v15 = (const char *)(v4 + 24);
              if (*(char *)(v4 + 47) < 0)
                v15 = *(const char **)v15;
              ZinAssertImpl("RCAS tile height %zd is invalid. It should have been updated by earlier optimization passes or JIT transfrom handling for %s", v7, v15);
            }
          }
          else
          {
            v11 = v9;
            if (ZinANELayer::IsChainedProducer((ZinANELayer *)v4))
            {
              v12 = **(ZinIrOpLayer ***)(v4 + 112);
              if (!ZinIrOpLayer::IsANELayer(v12))
                ZinAssertImpl("Chained consumer is not an ANE layer");
              if (!*(_BYTE *)(*((_QWORD *)this + 2) + 1268)
                || v7 > *(_QWORD *)(v5 + 208) + *(_QWORD *)(v5 + 224) + v11)
              {
                if (v8)
                  goto LABEL_27;
                if ((ZinMirL2Config::ComputeChainProducerTileHeight(v5 + 120, (_QWORD *)v4, v12, *(_QWORD *)(*((_QWORD *)v12 + 33) + 200), (uint64_t)v6) & 1) == 0)ZinAssertImpl("Failed to compute tile height params of the chained producer");
              }
            }
            else
            {
              if (*(_QWORD *)(v5 + 216))
                ZinAssertImpl("Overlap should be zero on all layers but chained producer");
              if (v8)
              {
LABEL_27:
                v16 = (const char *)(v4 + 24);
                if (*(char *)(v4 + 47) < 0)
                  v16 = *(const char **)v16;
                ZinAssertImpl("A locked tile has tile_height %zd which violates HW constraints. It should have been updated by earlier optimization passes or JIT transfrom handling for %s", v7, v16);
              }
              if (!*(_BYTE *)(v5 + 233))
                *v6 = v11;
            }
          }
        }
      }
      v13 = v3-- + 1;
    }
    while (v13 > 1);
  }
  return 0;
}

void ZinIrLocalRegAlloc::UpdateSymbolLiveRangeWithCacheCopy(ZinIrLocalRegAlloc *this, ZinIrOpLayer *a2, unint64_t a3)
{
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  ZinIrSection **v122;
  ZinIrSection **v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *__p;
  char *v131;
  unint64_t v132;
  ZinIrOpLayer *v133;

  v133 = a2;
  __p = 0;
  v131 = 0;
  v132 = 0;
  v5 = (_QWORD *)((char *)this + 104);
  LODWORD(v127) = 2;
  v6 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>((_QWORD *)this + 13, (int *)&v127);
  if (v6)
  {
    v7 = v6[3];
    if (v7)
    {
      ZinIrMemoryPool::GetSections(v7, 4, &v127);
      v8 = v128;
      v9 = v131;
      if ((unint64_t)v131 >= v132)
      {
        v11 = (v131 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v12 = (uint64_t)(v132 - (_QWORD)__p) >> 2;
        if (v12 <= v11 + 1)
          v12 = v11 + 1;
        if (v132 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13)
          v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v132, v13);
        else
          v14 = 0;
        v15 = &v14[8 * v11];
        v16 = &v14[8 * v13];
        *(_QWORD *)v15 = *(_QWORD *)(v8 + 16);
        v10 = v15 + 8;
        v18 = (char *)__p;
        v17 = v131;
        if (v131 != __p)
        {
          do
          {
            v19 = *((_QWORD *)v17 - 1);
            v17 -= 8;
            *((_QWORD *)v15 - 1) = v19;
            v15 -= 8;
          }
          while (v17 != v18);
          v17 = (char *)__p;
        }
        __p = v15;
        v131 = v10;
        v132 = (unint64_t)v16;
        if (v17)
          operator delete(v17);
      }
      else
      {
        *(_QWORD *)v131 = *(_QWORD *)(v128 + 16);
        v10 = v9 + 8;
      }
      v131 = v10;
      std::__list_imp<ZinIrSection *>::clear(&v127);
    }
  }
  LODWORD(v127) = 1;
  v20 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(v5, (int *)&v127);
  if (v20)
  {
    v21 = v20[3];
    if (v21)
    {
      ZinIrMemoryPool::GetSections(v21, 4, &v127);
      v22 = v128;
      v23 = v131;
      if ((unint64_t)v131 >= v132)
      {
        v25 = (v131 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v25 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v26 = (uint64_t)(v132 - (_QWORD)__p) >> 2;
        if (v26 <= v25 + 1)
          v26 = v25 + 1;
        if (v132 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
          v27 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v27 = v26;
        if (v27)
          v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v132, v27);
        else
          v28 = 0;
        v29 = &v28[8 * v25];
        v30 = &v28[8 * v27];
        *(_QWORD *)v29 = *(_QWORD *)(v22 + 16);
        v24 = v29 + 8;
        v32 = (char *)__p;
        v31 = v131;
        if (v131 != __p)
        {
          do
          {
            v33 = *((_QWORD *)v31 - 1);
            v31 -= 8;
            *((_QWORD *)v29 - 1) = v33;
            v29 -= 8;
          }
          while (v31 != v32);
          v31 = (char *)__p;
        }
        __p = v29;
        v131 = v24;
        v132 = (unint64_t)v30;
        if (v31)
          operator delete(v31);
      }
      else
      {
        *(_QWORD *)v131 = *(_QWORD *)(v128 + 16);
        v24 = v23 + 8;
      }
      v131 = v24;
      std::__list_imp<ZinIrSection *>::clear(&v127);
    }
  }
  LODWORD(v127) = 0;
  v34 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(v5, (int *)&v127);
  if (v34)
  {
    v35 = v34[3];
    if (v35)
    {
      ZinIrMemoryPool::GetSections(v34[3], 2, &v127);
      v36 = v128;
      v37 = v131;
      if ((unint64_t)v131 >= v132)
      {
        v39 = (v131 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v39 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v40 = (uint64_t)(v132 - (_QWORD)__p) >> 2;
        if (v40 <= v39 + 1)
          v40 = v39 + 1;
        if (v132 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
          v41 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v41 = v40;
        if (v41)
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v132, v41);
        else
          v42 = 0;
        v43 = &v42[8 * v39];
        v44 = &v42[8 * v41];
        *(_QWORD *)v43 = *(_QWORD *)(v36 + 16);
        v38 = v43 + 8;
        v46 = (char *)__p;
        v45 = v131;
        if (v131 != __p)
        {
          do
          {
            v47 = *((_QWORD *)v45 - 1);
            v45 -= 8;
            *((_QWORD *)v43 - 1) = v47;
            v43 -= 8;
          }
          while (v45 != v46);
          v45 = (char *)__p;
        }
        __p = v43;
        v131 = v38;
        v132 = (unint64_t)v44;
        if (v45)
          operator delete(v45);
      }
      else
      {
        *(_QWORD *)v131 = *(_QWORD *)(v128 + 16);
        v38 = v37 + 8;
      }
      v131 = v38;
      std::__list_imp<ZinIrSection *>::clear(&v127);
      ZinIrMemoryPool::GetSections(v35, 3, &v127);
      v48 = v128;
      v49 = v131;
      if ((unint64_t)v131 >= v132)
      {
        v51 = (v131 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v51 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v52 = (uint64_t)(v132 - (_QWORD)__p) >> 2;
        if (v52 <= v51 + 1)
          v52 = v51 + 1;
        if (v132 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
          v53 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v53 = v52;
        if (v53)
          v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v132, v53);
        else
          v54 = 0;
        v55 = &v54[8 * v51];
        v56 = &v54[8 * v53];
        *(_QWORD *)v55 = *(_QWORD *)(v48 + 16);
        v50 = v55 + 8;
        v58 = (char *)__p;
        v57 = v131;
        if (v131 != __p)
        {
          do
          {
            v59 = *((_QWORD *)v57 - 1);
            v57 -= 8;
            *((_QWORD *)v55 - 1) = v59;
            v55 -= 8;
          }
          while (v57 != v58);
          v57 = (char *)__p;
        }
        __p = v55;
        v131 = v50;
        v132 = (unint64_t)v56;
        if (v57)
          operator delete(v57);
      }
      else
      {
        *(_QWORD *)v131 = *(_QWORD *)(v128 + 16);
        v50 = v49 + 8;
      }
      v131 = v50;
      std::__list_imp<ZinIrSection *>::clear(&v127);
      ZinIrMemoryPool::GetSections(v35, 7, &v127);
      if (v129 && *(_QWORD *)(v128 + 16))
      {
        ZinIrMemoryPool::GetSections(v35, 7, &v124);
        v60 = v125;
        v61 = v131;
        if ((unint64_t)v131 >= v132)
        {
          v63 = (v131 - (_BYTE *)__p) >> 3;
          if ((unint64_t)(v63 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v64 = (uint64_t)(v132 - (_QWORD)__p) >> 2;
          if (v64 <= v63 + 1)
            v64 = v63 + 1;
          if (v132 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
            v65 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v65 = v64;
          if (v65)
            v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v132, v65);
          else
            v66 = 0;
          v67 = &v66[8 * v63];
          v68 = &v66[8 * v65];
          *(_QWORD *)v67 = *(_QWORD *)(v60 + 16);
          v62 = v67 + 8;
          v70 = (char *)__p;
          v69 = v131;
          if (v131 != __p)
          {
            do
            {
              v71 = *((_QWORD *)v69 - 1);
              v69 -= 8;
              *((_QWORD *)v67 - 1) = v71;
              v67 -= 8;
            }
            while (v69 != v70);
            v69 = (char *)__p;
          }
          __p = v67;
          v131 = v62;
          v132 = (unint64_t)v68;
          if (v69)
            operator delete(v69);
        }
        else
        {
          *(_QWORD *)v131 = *(_QWORD *)(v125 + 16);
          v62 = v61 + 8;
        }
        v131 = v62;
        std::__list_imp<ZinIrSection *>::clear(&v124);
      }
      ZinIrMemoryPool::GetSections(v35, 4, &v124);
      v72 = v125;
      v73 = v131;
      if ((unint64_t)v131 >= v132)
      {
        v75 = (v131 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v75 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v76 = (uint64_t)(v132 - (_QWORD)__p) >> 2;
        if (v76 <= v75 + 1)
          v76 = v75 + 1;
        if (v132 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
          v77 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v77 = v76;
        if (v77)
          v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v132, v77);
        else
          v78 = 0;
        v79 = &v78[8 * v75];
        v80 = &v78[8 * v77];
        *(_QWORD *)v79 = *(_QWORD *)(v72 + 16);
        v74 = v79 + 8;
        v82 = (char *)__p;
        v81 = v131;
        if (v131 != __p)
        {
          do
          {
            v83 = *((_QWORD *)v81 - 1);
            v81 -= 8;
            *((_QWORD *)v79 - 1) = v83;
            v79 -= 8;
          }
          while (v81 != v82);
          v81 = (char *)__p;
        }
        __p = v79;
        v131 = v74;
        v132 = (unint64_t)v80;
        if (v81)
          operator delete(v81);
      }
      else
      {
        *(_QWORD *)v131 = *(_QWORD *)(v125 + 16);
        v74 = v73 + 8;
      }
      v131 = v74;
      std::__list_imp<ZinIrSection *>::clear(&v124);
      ZinIrMemoryPool::GetSections(v35, 0, &v124);
      v84 = v125;
      v85 = v131;
      if ((unint64_t)v131 >= v132)
      {
        v87 = (v131 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v87 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v88 = (uint64_t)(v132 - (_QWORD)__p) >> 2;
        if (v88 <= v87 + 1)
          v88 = v87 + 1;
        if (v132 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
          v89 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v89 = v88;
        if (v89)
          v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v132, v89);
        else
          v90 = 0;
        v91 = &v90[8 * v87];
        v92 = &v90[8 * v89];
        *(_QWORD *)v91 = *(_QWORD *)(v84 + 16);
        v86 = v91 + 8;
        v94 = (char *)__p;
        v93 = v131;
        if (v131 != __p)
        {
          do
          {
            v95 = *((_QWORD *)v93 - 1);
            v93 -= 8;
            *((_QWORD *)v91 - 1) = v95;
            v91 -= 8;
          }
          while (v93 != v94);
          v93 = (char *)__p;
        }
        __p = v91;
        v131 = v86;
        v132 = (unint64_t)v92;
        if (v93)
          operator delete(v93);
      }
      else
      {
        *(_QWORD *)v131 = *(_QWORD *)(v125 + 16);
        v86 = v85 + 8;
      }
      v131 = v86;
      std::__list_imp<ZinIrSection *>::clear(&v124);
      ZinIrMemoryPool::GetSections(v35, 8, &v124);
      v96 = v126;
      std::__list_imp<ZinIrSection *>::clear(&v124);
      if (v96)
      {
        ZinIrMemoryPool::GetSections(v35, 8, &v124);
        v97 = v125;
        v98 = v131;
        if ((unint64_t)v131 >= v132)
        {
          v100 = (v131 - (_BYTE *)__p) >> 3;
          if ((unint64_t)(v100 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v101 = (uint64_t)(v132 - (_QWORD)__p) >> 2;
          if (v101 <= v100 + 1)
            v101 = v100 + 1;
          if (v132 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
            v102 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v102 = v101;
          if (v102)
            v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v132, v102);
          else
            v103 = 0;
          v104 = &v103[8 * v100];
          v105 = &v103[8 * v102];
          *(_QWORD *)v104 = *(_QWORD *)(v97 + 16);
          v99 = v104 + 8;
          v107 = (char *)__p;
          v106 = v131;
          if (v131 != __p)
          {
            do
            {
              v108 = *((_QWORD *)v106 - 1);
              v106 -= 8;
              *((_QWORD *)v104 - 1) = v108;
              v104 -= 8;
            }
            while (v106 != v107);
            v106 = (char *)__p;
          }
          __p = v104;
          v131 = v99;
          v132 = (unint64_t)v105;
          if (v106)
            operator delete(v106);
        }
        else
        {
          *(_QWORD *)v131 = *(_QWORD *)(v125 + 16);
          v99 = v98 + 8;
        }
        v131 = v99;
        std::__list_imp<ZinIrSection *>::clear(&v124);
      }
      ZinIrMemoryPool::GetSections(v35, 5, &v124);
      v109 = v126;
      std::__list_imp<ZinIrSection *>::clear(&v124);
      if (v109)
      {
        ZinIrMemoryPool::GetSections(v35, 5, &v124);
        v110 = v125;
        v111 = v131;
        if ((unint64_t)v131 >= v132)
        {
          v113 = (v131 - (_BYTE *)__p) >> 3;
          if ((unint64_t)(v113 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v114 = (uint64_t)(v132 - (_QWORD)__p) >> 2;
          if (v114 <= v113 + 1)
            v114 = v113 + 1;
          if (v132 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
            v115 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v115 = v114;
          if (v115)
            v116 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v132, v115);
          else
            v116 = 0;
          v117 = &v116[8 * v113];
          v118 = &v116[8 * v115];
          *(_QWORD *)v117 = *(_QWORD *)(v110 + 16);
          v112 = v117 + 8;
          v120 = (char *)__p;
          v119 = v131;
          if (v131 != __p)
          {
            do
            {
              v121 = *((_QWORD *)v119 - 1);
              v119 -= 8;
              *((_QWORD *)v117 - 1) = v121;
              v117 -= 8;
            }
            while (v119 != v120);
            v119 = (char *)__p;
          }
          __p = v117;
          v131 = v112;
          v132 = (unint64_t)v118;
          if (v119)
            operator delete(v119);
        }
        else
        {
          *(_QWORD *)v131 = *(_QWORD *)(v125 + 16);
          v112 = v111 + 8;
        }
        v131 = v112;
        std::__list_imp<ZinIrSection *>::clear(&v124);
      }
      std::__list_imp<ZinIrSection *>::clear(&v127);
    }
  }
  v122 = (ZinIrSection **)__p;
  v123 = (ZinIrSection **)v131;
  while (v122 != v123)
    ZinIrSection::IncrementScheduleFrom(*v122++, a3);
  std::vector<ZinIrOpLayer *>::insert((uint64_t)this + 40, (char *)(*((_QWORD *)this + 5) + 8 * a3), (char *)&v133);
  std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::clear((_QWORD *)this + 18);
  ZinLiveRangeUtils<ZinIrOpLayer,ZinIrTensor>::ZinIrComputeLiveRanges((ZinIrOpLayer ***)this + 5, (_QWORD *)this + 18);
  ZinIrLocalRegAlloc::UpdateScheduleToLayerMap(this);
  ZinIrLocalRegAlloc::TrackLayersWithLockedWU(this);
  if (__p)
  {
    v131 = (char *)__p;
    operator delete(__p);
  }
}

void sub_206DC87AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  std::__list_imp<ZinIrSection *>::clear(&a9);
  std::__list_imp<ZinIrSection *>::clear(&a12);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::AllocateInputDMAbufferForL2CacheCopy(ZinIrLocalRegAlloc *this, ZinNEBypassLayer *a2)
{
  uint64_t InputDMADefaultBuffer;
  ZinIrTensor *InputTensor;
  uint64_t Interleave;
  char v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int64x2_t v15;
  __int128 v16;
  void *__p;
  void *v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  _QWORD *v23;
  unint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  int64x2_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  __int128 v38;
  char v39;
  __int128 v40;
  _BYTE v41[25];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  int v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  char v50;
  uint64_t v51;
  int v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char v56;
  uint64_t v57;
  int v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  char v62;
  uint64_t v63;
  int v64;
  _BYTE v65[32];
  int v66;
  int v67;
  _BYTE v68[32];
  int v69;
  int v70;
  _BYTE v71[32];
  int v72;

  v28.i64[0] = *((_QWORD *)a2 + 6);
  v28.i64[1] = v28.i64[0];
  if ((ZinIrLocalRegAlloc::AllocateInputDMADefaultBuffer((uint64_t)this, (uint64_t)a2, 0, (uint64_t)&v28, 0) & 1) != 0)
    return 1;
  InputTensor = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(a2, 0);
  Interleave = ZinIrTensor::GetInterleave(InputTensor);
  v28 = (int64x2_t)(unint64_t)a2;
  if (v7)
    v8 = Interleave;
  else
    v8 = 1;
  v9 = std::__hash_table<std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>,std::__unordered_map_hasher<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>,ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKeyHasher,std::equal_to<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey>,true>,std::__unordered_map_equal<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>,std::equal_to<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey>,ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKeyHasher,true>,std::allocator<std::__hash_value_type<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey,unsigned long>>>::find<ZinMirInputCropOffsetXLsbsInitializer::InputCropOffsetXLsbsKey>((_QWORD *)this + 28, v28.i32);
  if (v9)
    v10 = v9[4];
  else
    v10 = 0;
  v28 = vdupq_n_s64(1uLL);
  *(_QWORD *)&v32 = 0;
  BYTE8(v32) = 0;
  *((_QWORD *)&v30 + 1) = 0;
  *(_QWORD *)&v31 = 0;
  BYTE8(v31) = 0;
  v29 = 1uLL;
  LOBYTE(v30) = 0;
  v33 = 1;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = xmmword_207A7E150;
  v39 = 0;
  v46 = 0;
  v51 = 0;
  v50 = 0;
  v48 = 0u;
  v49 = 0u;
  v47 = 0u;
  v52 = 0;
  v57 = 0;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = 0;
  v58 = 0;
  v63 = 0;
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v62 = 0;
  v64 = 0;
  memset(v65, 0, sizeof(v65));
  v40 = 0u;
  memset(v41, 0, sizeof(v41));
  v42 = 0;
  v43 = 0;
  v45 = 0;
  v44 = 0;
  v66 = 1065353216;
  v67 = 0;
  memset(v68, 0, sizeof(v68));
  v69 = 1065353216;
  v70 = 0;
  memset(v71, 0, sizeof(v71));
  v72 = 1065353216;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v24 = 0;
  v11 = *((_QWORD *)this + 2);
  v12 = operator new(8uLL);
  v21 = v12;
  *v12 = v8;
  v22 = v12 + 1;
  v23 = v12 + 1;
  v13 = operator new(8uLL);
  __p = v13;
  *v13 = v10;
  v19 = v13 + 1;
  v20 = v13 + 1;
  DMABuffer::CalculateMinimumSizes(a2, v11, &v21, &__p, 1, 0, (uint64_t)&v28, (unint64_t **)&v25, &v24, 0);
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  v14 = *((_QWORD *)a2 + 33);
  if (!*(_BYTE *)(v14 + 233))
    *(_QWORD *)(v14 + 200) = v33;
  v15 = v28;
  *(_OWORD *)(v14 + 136) = v29;
  v16 = v31;
  *(_OWORD *)(v14 + 152) = v30;
  *(_OWORD *)(v14 + 168) = v16;
  *(_OWORD *)(v14 + 184) = v32;
  *(int64x2_t *)(v14 + 120) = v15;
  v21 = (void *)*((_QWORD *)a2 + 6);
  v22 = v21;
  InputDMADefaultBuffer = ZinIrLocalRegAlloc::AllocateInputDMADefaultBuffer((uint64_t)this, (uint64_t)a2, 0, (uint64_t)&v21, 0);
  if (v25)
  {
    v26 = v25;
    operator delete(v25);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v71);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v68);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v65);
  return InputDMADefaultBuffer;
}

void sub_206DC8AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21)
{
  if (__p)
    operator delete(__p);
  ZinMirL2Config::~ZinMirL2Config((ZinMirL2Config *)&a21);
  _Unwind_Resume(a1);
}

uint64_t ***ZinIrLocalRegAlloc::FreeInputDMABufferForL2CacheCopy(ZinIrLocalRegAlloc *this, ZinNEBypassLayer *a2)
{
  uint64_t ***result;
  uint64_t ***v4;

  result = (uint64_t ***)ZinEngineLayerMirInfo::GetL2RdSymbol(*((_QWORD *)a2 + 33), 0);
  if (result)
  {
    v4 = result;
    result = (uint64_t ***)ZinEngineLayerMirInfo::GetL2RdMode(*((_QWORD *)a2 + 33), 0);
    if ((_DWORD)result == 1)
    {
      ZinIrSection::DeleteSymbol(v4[1], (ZinIrSymbol *)v4);
      return (uint64_t ***)ZinEngineLayerMirInfo::RemoveL2RdSymbol(*((_QWORD *)a2 + 33), 0);
    }
  }
  return result;
}

BOOL ZinIrLocalRegAlloc::HasL2FailedTensor(ZinIrLocalRegAlloc *this, ZinANELayer *a2)
{
  unint64_t v4;
  ZinIrTensor *InputTensor;
  ZinIrTensor *v6;
  ZinIrTensor *RootTensor;

  if (*((_QWORD *)a2 + 12) == *((_QWORD *)a2 + 11))
  {
LABEL_5:
    v6 = (ZinIrTensor *)(*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
    RootTensor = ZinIrTensor::GetRootTensor(v6);
    return std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)this + 344, (uint64_t *)&RootTensor) != 0;
  }
  else
  {
    v4 = 0;
    while (1)
    {
      RootTensor = 0;
      InputTensor = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(a2, v4);
      RootTensor = ZinIrTensor::GetRootTensor(InputTensor);
      if (std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)this + 344, (uint64_t *)&RootTensor))
      {
        return 1;
      }
      if (++v4 >= (uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 3)
        goto LABEL_5;
    }
  }
}

uint64_t ZinIrLocalRegAlloc::AllocateP2NChainBuffer(ZinIrLocalRegAlloc *this, ZinIrTensor *a2, BOOL *a3)
{
  unint64_t *v6;
  ZinIrOpLayerGraph *v7;
  unint64_t v8;
  unint64_t v9;
  ZinANELayer *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  const ZinANELayer *v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  ZinIrTensor *v22;
  unint64_t IndexOfMatchedIncomingLayer;
  int HasResidentSymbolAlias;
  void *v25;
  char *v26;
  BOOL *v27;
  _BOOL8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BOOL8 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v50;
  int v51;
  int v52;
  int v53;
  ZinIrTensor *v54;
  ZinIrTensor *RootTensor;
  _BOOL4 v56;
  _QWORD *v57;
  ZinIrTensor *v58;
  _QWORD *v59;
  _BOOL4 IsL2Circular;
  ZinIrTensor *v61;
  ZinMirBankConflictOptimizer *v62;
  ZinMirBankConflictOptimizer *v63;
  int ResidentTensor;
  BOOL *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  ZinIrOpLayerGraph *v71;
  void *v72;
  ZinMirL2Config *v73;
  ZinMirL2Config *v74;
  _QWORD v75[5];
  ZinIrOpLayer **v76[5];
  void *__p[2];
  uint64_t v78;
  char v79;
  unint64_t v80;
  __int128 v81;
  uint64_t v82;
  int v83[2];
  int v84[2];
  void *v85;
  void *v86;
  uint64_t v87;
  void *v88;
  void *v89;
  uint64_t v90;
  _DWORD __dst[114];
  _DWORD v92[12];
  _DWORD v93[12];
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;

  v6 = (unint64_t *)*((_QWORD *)a2 + 12);
  v7 = (ZinIrOpLayerGraph *)v6[19];
  v8 = v6[33];
  v9 = v6[14];
  v10 = *(ZinANELayer **)v9;
  v11 = *(_QWORD *)(*(_QWORD *)v9 + 264);
  *a3 = 0;
  v12 = 0;
  if (!ZinIrLocalRegAlloc::ChangeEngineLayerSchedule(this, v10, v6[6], 1))
    return v12;
  v71 = v7;
  v13 = *(_OWORD *)(v8 + 216);
  v104 = *(_OWORD *)(v8 + 200);
  v105 = v13;
  v106 = *(_QWORD *)(v8 + 232);
  v102 = *(_OWORD *)(v8 + 240);
  v103 = *(_QWORD *)(v8 + 256);
  v14 = *(_OWORD *)(v11 + 216);
  v99 = *(_OWORD *)(v11 + 200);
  v100 = v14;
  v101 = *(_QWORD *)(v11 + 232);
  v15 = *(_QWORD *)(v11 + 136);
  v67 = *(_QWORD *)(v11 + 120);
  v68 = *(_QWORD *)(v11 + 128);
  v16 = *(_OWORD *)(v11 + 160);
  v95 = *(_OWORD *)(v11 + 144);
  v96 = v16;
  v97 = *(_OWORD *)(v11 + 176);
  v98 = *(_QWORD *)(v11 + 192);
  v74 = (ZinMirL2Config *)(v11 + 120);
  memcpy(__dst, (const void *)(v11 + 120), 0x1C4uLL);
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v92, v11 + 576);
  v92[10] = *(_DWORD *)(v11 + 616);
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v93, v11 + 624);
  v93[10] = *(_DWORD *)(v11 + 664);
  v69 = std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)&v94, v11 + 672);
  v18 = ZinL2FootprintCalculator::CalculateResidentBufferSumOfEnginePair((ZinL2FootprintCalculator *)v6, v10, v17);
  v65 = a3;
  v66 = v15;
  v70 = ZinMirL2Config::SetChainConsumerTileHeight((ZinMirL2Config *)(v11 + 120), (const ZinANELayer *)v6, v10, *(_BYTE *)(v11 + 233), 1);
  v73 = (ZinMirL2Config *)(v8 + 120);
  v19 = ZinMirL2Config::SetChainProducerTileHeight((ZinMirL2Config *)(v8 + 120), v10, 0, *(_BYTE *)(v8 + 233));
  v20 = *((_QWORD *)this + 2);
  LODWORD(v15) = *(_DWORD *)(ZinIrOpLayer::GetInputTensor(v10, 0) + 88);
  ZinIrOpLayer::GetInputTensorDimensions(v10, __p);
  v21 = ZinMirL2Config::SetChainBufferNEWorkUnit(v11 + 120, v20, v10, v15, (uint64_t)__p[0], v18, *(_BYTE *)(v11 + 150));
  v22 = a2;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v89 = 0;
  v88 = 0;
  v90 = 0;
  v86 = 0;
  v85 = 0;
  v87 = 0;
  *(_QWORD *)v84 = 0;
  *(_QWORD *)v83 = 0;
  ZinL2FootprintCalculator::GetInterleavesAndCropOffset((_QWORD *)this + 23, (_QWORD *)this + 28, (_QWORD *)this + 33, (uint64_t)v6, (uint64_t)&v88, (uint64_t)&v85, v84, v83);
  if ((v70 & v19 & v21 & ZinMirL2Config::SetChainBufferPEWorkUnit((uint64_t)v73, *((_QWORD *)this + 2), (ZinIrOpLayer *)v6, v10, &v88, &v85, *(unint64_t *)v84, *(uint64_t *)v83, 1u, *(_BYTE *)(v8 + 256)) & 1) == 0)
  {
    v12 = 0;
    goto LABEL_21;
  }
  IndexOfMatchedIncomingLayer = ZinIrOpLayerGraph::GetIndexOfMatchedIncomingLayer(v71, v10, (const ZinIrOpLayer *)v6);
  HasResidentSymbolAlias = ZinIrRegAllocUtil::HasResidentSymbolAlias((ZinIrRegAllocUtil *)v6, v10, *(const ZinANELayer **)(*((_QWORD *)this + 2) + 408), IndexOfMatchedIncomingLayer);
  v25 = 0;
  v81 = 0uLL;
  v82 = 0;
  if (!HasResidentSymbolAlias)
    goto LABEL_7;
  v26 = (char *)operator new(0x10uLL);
  v76[1] = (ZinIrOpLayer **)(v26 + 16);
  v76[2] = (ZinIrOpLayer **)(v26 + 16);
  *(_QWORD *)v26 = v6;
  *((_QWORD *)v26 + 1) = v10;
  v76[0] = (ZinIrOpLayer **)v26;
  ZinIrLocalRegAlloc::ClearResidentSymbols(this, v76, __p);
  v72 = __p[0];
  v81 = *(_OWORD *)__p;
  v82 = v78;
  __p[1] = 0;
  v78 = 0;
  __p[0] = 0;
  operator delete(v26);
  v25 = v72;
  if (ZinIrLocalRegAlloc::AllocateResidentTensorsWithPermutation(this, (unint64_t *)&v81))
  {
LABEL_7:
    if ((ZinIrLocalRegAlloc::AllocateChainSymbol(this, v22) & 1) != 0)
    {
      v80 = 1;
      v79 = 0;
      if (ZinIrRegAllocUtil::NeedChainTileHeightIncrease((ZinIrRegAllocUtil *)v6, v10, *((const ZinANELayer **)this + 2), *((const ZinIrHalParameters **)this + 3), (const ZinIrCompilerParameters *)&v79, v27))
      {
        v28 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v28)
          ZinIrLocalRegAlloc::AllocateP2NChainBuffer(v28, v29, v30, v31, v32, v33, v34, v35);
        goto LABEL_19;
      }
      if (v79)
      {
        ZinIrLocalRegAlloc::OptimizeChainBufferTileHeight(this, (ZinANELayer *)v6, v10, &v80);
        v50 = v80;
      }
      else
      {
        v50 = 1;
      }
      v51 = ZinMirL2Config::SetChainConsumerTileHeight(v74, (const ZinANELayer *)v6, v10, 1, v50);
      v52 = ZinMirL2Config::SetChainProducerTileHeight(v73, v10, 0, 1);
      *(_BYTE *)(v11 + 150) = 1;
      *(_BYTE *)(v8 + 256) = 1;
      ZinIrLocalRegAlloc::RemoveSymbolFromLayerAndTensor(this, v22);
      v53 = v51 & v52 & ZinIrLocalRegAlloc::AllocateChainSymbol(this, v22);
      *v65 = v53;
      v54 = (ZinIrTensor *)(*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)v10 + 32))(v10, 0, 0);
      RootTensor = ZinIrTensor::GetRootTensor(v54);
      v56 = v68 != *(_QWORD *)(v11 + 128) || v67 != *(_QWORD *)v74 || v66 != *(_QWORD *)(v11 + 136);
      v57 = (_QWORD *)*((_QWORD *)this + 4);
      v58 = (ZinIrTensor *)(*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)v10 + 32))(v10, 0, 0);
      __p[0] = ZinIrTensor::GetRootTensor(v58);
      v59 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v57, __p);
      if (v59)
      {
        IsL2Circular = CpAllocUtils::IsL2Circular(*((_DWORD *)v59 + 6));
        if (!v56)
          goto LABEL_49;
      }
      else
      {
        IsL2Circular = 0;
        if (!v56)
          goto LABEL_49;
      }
      if (*(_DWORD *)(*((_QWORD *)v10 + 33) + 1632) != 3
        || (v61 = (ZinIrTensor *)(*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)v10 + 32))(v10, 0, 0), ZinIrLocalRegAlloc::IsInplaced(this, v61) || IsL2Circular))
      {
LABEL_49:
        v12 = 0;
        if (!v25)
          goto LABEL_21;
        goto LABEL_20;
      }
      ZinMirL2Config::ZinMirL2Config((ZinMirL2Config *)__p, v74);
      ZinMirL2Config::operator=(*((_QWORD *)v10 + 33) + 120, (uint64_t)__dst);
      v62 = (ZinMirBankConflictOptimizer *)(*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)v10 + 32))(v10, 0, 0);
      ZinMirBankConflictOptimizer::ComputeResidentSymbolStrides(v62, *((const ZinIrTensor **)this + 2), (uint64_t)v76);
      ZinMirL2Config::operator=(*((_QWORD *)v10 + 33) + 120, (uint64_t)__p);
      v63 = (ZinMirBankConflictOptimizer *)(*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)v10 + 32))(v10, 0, 0);
      ZinMirBankConflictOptimizer::ComputeResidentSymbolStrides(v63, *((const ZinIrTensor **)this + 2), (uint64_t)v75);
      if (ZinTensorDimensions::operator!=(v76, v75))
      {
        ZinIrLocalRegAlloc::RemoveSymbolFromLayerAndTensor(this, RootTensor);
        if ((ZinIrLocalRegAlloc::AllocateResidentTensor((const ZinIrTensor **)this, RootTensor, 1) & 1) != 0)
        {
          if ((v53 & 1) != 0)
            goto LABEL_48;
LABEL_47:
          ZinIrLocalRegAlloc::RemoveSymbolFromLayerAndTensor(this, v22);
          ResidentTensor = ZinIrLocalRegAlloc::AllocateResidentTensor((const ZinIrTensor **)this, RootTensor, 0);
          if ((ResidentTensor & ZinIrLocalRegAlloc::AllocateChainSymbol(this, v22)) != 1)
          {
            ZinMirL2Config::~ZinMirL2Config((ZinMirL2Config *)__p);
            goto LABEL_19;
          }
          goto LABEL_48;
        }
        if ((ZinIrLocalRegAlloc::AllocateResidentTensor((const ZinIrTensor **)this, RootTensor, 0) & v53 & 1) == 0)
          goto LABEL_47;
      }
LABEL_48:
      ZinMirL2Config::~ZinMirL2Config((ZinMirL2Config *)__p);
      goto LABEL_49;
    }
  }
  *(_OWORD *)(v8 + 240) = v102;
  *(_BYTE *)(v8 + 256) = v103;
  v36 = v105;
  *(_OWORD *)(v8 + 200) = v104;
  *(_OWORD *)(v8 + 216) = v36;
  *(_WORD *)(v8 + 232) = v106;
  *(_QWORD *)(v11 + 120) = v67;
  *(_QWORD *)(v11 + 128) = v68;
  *(_QWORD *)(v11 + 136) = v66;
  *(_QWORD *)(v11 + 192) = v98;
  v37 = v97;
  v38 = v95;
  *(_OWORD *)(v11 + 160) = v96;
  *(_OWORD *)(v11 + 176) = v37;
  *(_OWORD *)(v11 + 144) = v38;
  v39 = v99;
  v40 = v100;
  *(_WORD *)(v11 + 232) = v101;
  *(_OWORD *)(v11 + 200) = v39;
  *(_OWORD *)(v11 + 216) = v40;
  if ((ZinIrLocalRegAlloc::ChangeEngineLayerSchedule(this, v10, v6[6] + 1, 0) & 1) != 0)
  {
    if (!HasResidentSymbolAlias
      || (ZinIrLocalRegAlloc::AllocateResidentTensorsWithPermutation(this, (unint64_t *)&v81) & 1) != 0)
    {
      ZinIrLocalRegAlloc::RemoveSymbolFromLayerAndTensor(this, v22);
      v12 = 0;
      *v65 = 0;
      if (!v25)
        goto LABEL_21;
      goto LABEL_20;
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinIrLocalRegAlloc::AllocateP2NChainBuffer();
  }
  else
  {
    v41 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v41)
      ZinIrLocalRegAlloc::RevertL2DependentConfiguration(v41, v42, v43, v44, v45, v46, v47, v48);
  }
LABEL_19:
  v12 = 3;
  if (v25)
  {
LABEL_20:
    *((_QWORD *)&v81 + 1) = v25;
    operator delete(v25);
  }
LABEL_21:
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
  if (v88)
  {
    v89 = v88;
    operator delete(v88);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v69);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v93);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v92);
  return v12;
}

void sub_206DC93B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  void *v33;
  void *v35;
  void *v36;

  ZinMirL2Config::~ZinMirL2Config((ZinMirL2Config *)&a33);
  if (v33)
  {
    STACK[0x328] = (unint64_t)v33;
    operator delete(v33);
  }
  v35 = (void *)STACK[0x350];
  if (STACK[0x350])
  {
    STACK[0x358] = (unint64_t)v35;
    operator delete(v35);
  }
  v36 = (void *)STACK[0x368];
  if (STACK[0x368])
  {
    STACK[0x370] = (unint64_t)v36;
    operator delete(v36);
  }
  ZinMirL2Config::~ZinMirL2Config((ZinMirL2Config *)&STACK[0x380]);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLocalRegAlloc::AllocateN2PChainBuffer(ZinIrLocalRegAlloc *this, ZinIrTensor *a2, uint64_t a3, BOOL *a4)
{
  unint64_t *v6;
  ZinIrOpLayerGraph *v7;
  unint64_t v8;
  unint64_t v9;
  ZinANELayer *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  const ZinANELayer *v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  ZinIrTensor *v23;
  int v24;
  unint64_t IndexOfMatchedIncomingLayer;
  const ZinANELayer **v26;
  int HasResidentSymbolAlias;
  char *v28;
  BOOL *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  ZinIrTensor *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _DWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  _DWORD *v44;
  uint64_t v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char ResidentTensor;
  _BOOL8 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  int v61;
  int v62;
  ZinIrTensor *v63;
  ZinIrTensor *v64;
  ZinIrTensor *v65;
  void *v66;
  ZinMirBankConflictOptimizer *v67;
  ZinMirBankConflictOptimizer *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  _BOOL8 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  ZinIrTensor *RootTensor;
  int v86;
  char v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  ZinIrTensor *v91;
  ZinMirL2Config *v93;
  uint64_t *v95;
  _QWORD v96[5];
  ZinIrOpLayer **v97[5];
  void *__p[2];
  uint64_t v99;
  char v100;
  unint64_t v101;
  __int128 v102;
  uint64_t v103;
  int v104[2];
  int v105[2];
  void *v106;
  void *v107;
  uint64_t v108;
  void *v109;
  void *v110;
  uint64_t v111;
  _DWORD __dst[114];
  _DWORD v113[12];
  _DWORD v114[12];
  _BYTE v115[40];
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;

  v6 = (unint64_t *)*((_QWORD *)a2 + 12);
  v7 = (ZinIrOpLayerGraph *)v6[19];
  v8 = v6[33];
  v9 = v6[14];
  v10 = *(ZinANELayer **)v9;
  v11 = *(_QWORD *)(*(_QWORD *)v9 + 264);
  *a4 = 0;
  v12 = 0;
  if (!ZinIrLocalRegAlloc::ChangeEngineLayerSchedule(this, v10, v6[6], 1))
    return v12;
  v95 = (uint64_t *)this;
  v13 = *(_OWORD *)(v8 + 216);
  v124 = *(_OWORD *)(v8 + 200);
  v125 = v13;
  v126 = *(_QWORD *)(v8 + 232);
  v14 = *(_OWORD *)(v8 + 168);
  v121 = *(_OWORD *)(v8 + 152);
  v122 = v14;
  v123 = *(_OWORD *)(v8 + 184);
  v15 = *(_OWORD *)(v8 + 136);
  v119 = *(_OWORD *)(v8 + 120);
  v120 = v15;
  v16 = *(_OWORD *)(v11 + 216);
  v116 = *(_OWORD *)(v11 + 200);
  v117 = v16;
  v90 = *(_QWORD *)(v11 + 240);
  v118 = *(_QWORD *)(v11 + 232);
  v88 = *(_QWORD *)(v11 + 248);
  v87 = *(_BYTE *)(v11 + 256);
  v93 = (ZinMirL2Config *)(v11 + 120);
  memcpy(__dst, (const void *)(v11 + 120), 0x1C4uLL);
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v113, v11 + 576);
  v113[10] = *(_DWORD *)(v11 + 616);
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v114, v11 + 624);
  v114[10] = *(_DWORD *)(v11 + 664);
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v115, v11 + 672);
  v18 = ZinL2FootprintCalculator::CalculateResidentBufferSumOfEnginePair((ZinL2FootprintCalculator *)v6, v10, v17);
  v91 = a2;
  v19 = ZinMirL2Config::SetChainConsumerTileHeight((ZinMirL2Config *)(v11 + 120), (const ZinANELayer *)v6, v10, *(_BYTE *)(v11 + 233), 1);
  v20 = *((_QWORD *)this + 2);
  v21 = *(_DWORD *)(ZinIrOpLayer::GetInputTensor((ZinIrOpLayer *)v6, 0) + 88);
  ZinIrOpLayer::GetInputTensorDimensions((ZinIrOpLayer *)v6, __p);
  v22 = ZinMirL2Config::SetChainBufferNEWorkUnit(v8 + 120, v20, v6, v21, (uint64_t)__p[0], v18, *(_BYTE *)(v8 + 150));
  v23 = v91;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v110 = 0;
  v109 = 0;
  v111 = 0;
  v107 = 0;
  v106 = 0;
  v108 = 0;
  *(_QWORD *)v105 = 0;
  *(_QWORD *)v104 = 0;
  ZinL2FootprintCalculator::GetInterleavesAndCropOffset(v95 + 23, v95 + 28, v95 + 33, (uint64_t)v10, (uint64_t)&v109, (uint64_t)&v106, v105, v104);
  v24 = ZinMirL2Config::SetChainBufferPEWorkUnit((uint64_t)v93, v95[2], (ZinIrOpLayer *)v6, v10, &v109, &v106, *(unint64_t *)v105, *(uint64_t *)v104, 1u, *(_BYTE *)(v11 + 256));
  if ((v19 & v22 & v24 & ZinMirL2Config::SetChainProducerTileHeight((ZinMirL2Config *)(v8 + 120), v10, a3, *(_BYTE *)(v8 + 233)) & 1) == 0)
  {
    v12 = 0;
    goto LABEL_65;
  }
  IndexOfMatchedIncomingLayer = ZinIrOpLayerGraph::GetIndexOfMatchedIncomingLayer(v7, v10, (const ZinIrOpLayer *)v6);
  v26 = (const ZinANELayer **)v95;
  HasResidentSymbolAlias = ZinIrRegAllocUtil::HasResidentSymbolAlias((ZinIrRegAllocUtil *)v6, v10, *(const ZinANELayer **)(v95[2] + 408), IndexOfMatchedIncomingLayer);
  v89 = 0;
  v102 = 0uLL;
  v103 = 0;
  v86 = HasResidentSymbolAlias;
  if (HasResidentSymbolAlias)
  {
    v28 = (char *)operator new(0x10uLL);
    v97[1] = (ZinIrOpLayer **)(v28 + 16);
    v97[2] = (ZinIrOpLayer **)(v28 + 16);
    *(_QWORD *)v28 = v6;
    *((_QWORD *)v28 + 1) = v10;
    v97[0] = (ZinIrOpLayer **)v28;
    ZinIrLocalRegAlloc::ClearResidentSymbols((ZinIrLocalRegAlloc *)v95, v97, __p);
    v89 = __p[0];
    v102 = *(_OWORD *)__p;
    v103 = v99;
    __p[1] = 0;
    v99 = 0;
    __p[0] = 0;
    operator delete(v28);
    if (!ZinIrLocalRegAlloc::AllocateResidentTensorsWithPermutation((ZinIrLocalRegAlloc *)v95, (unint64_t *)&v102))goto LABEL_59;
  }
  if (!ZinIrLocalRegAlloc::AllocateChainSymbol((ZinIrLocalRegAlloc *)v95, v91))
  {
LABEL_59:
    v69 = v123;
    v70 = v121;
    *(_OWORD *)(v8 + 168) = v122;
    *(_OWORD *)(v8 + 184) = v69;
    v71 = v120;
    *(_OWORD *)(v8 + 120) = v119;
    *(_OWORD *)(v8 + 136) = v71;
    *(_OWORD *)(v8 + 152) = v70;
    v72 = v125;
    *(_OWORD *)(v8 + 200) = v124;
    *(_OWORD *)(v8 + 216) = v72;
    *(_WORD *)(v8 + 232) = v126;
    *(_QWORD *)(v11 + 240) = v90;
    *(_QWORD *)(v11 + 248) = v88;
    *(_BYTE *)(v11 + 256) = v87;
    *(_WORD *)(v11 + 232) = v118;
    v73 = v117;
    *(_OWORD *)(v11 + 200) = v116;
    *(_OWORD *)(v11 + 216) = v73;
    if ((ZinIrLocalRegAlloc::ChangeEngineLayerSchedule((ZinIrLocalRegAlloc *)v26, v10, v6[6] + 1, 0) & 1) != 0)
    {
      v66 = v89;
      if (!v86
        || (ZinIrLocalRegAlloc::AllocateResidentTensorsWithPermutation((ZinIrLocalRegAlloc *)v26, (unint64_t *)&v102) & 1) != 0)
      {
        ZinIrLocalRegAlloc::RemoveSymbolFromLayerAndTensor((ZinIrLocalRegAlloc *)v26, v23);
        v12 = 0;
        *a4 = 0;
        goto LABEL_63;
      }
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinIrLocalRegAlloc::AllocateP2NChainBuffer();
    }
    else
    {
      v75 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v66 = v89;
      if (v75)
        ZinIrLocalRegAlloc::RevertL2DependentConfiguration(v75, v76, v77, v78, v79, v80, v81, v82);
    }
LABEL_73:
    v12 = 3;
    if (!v66)
      goto LABEL_65;
    goto LABEL_64;
  }
  if ((*(unsigned int (**)(ZinANELayer *))(*(_QWORD *)v10 + 568))(v10))
  {
    (*(void (**)(void **__return_ptr, unint64_t *))(*v6 + 512))(__p, v6);
    RootTensor = ZinIrTensor::GetRootTensor(*(ZinIrTensor **)__p[0]);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v30 = *((_QWORD *)RootTensor + 13);
    if (!v30 || (v31 = *(uint64_t **)(v30 + 40), v31 == *(uint64_t **)(v30 + 48)))
      v32 = 0;
    else
      v32 = *v31;
    (*(void (**)(void **__return_ptr, ZinANELayer *))(*(_QWORD *)v10 + 512))(__p, v10);
    v33 = ZinIrTensor::GetRootTensor(*((ZinIrTensor **)__p[0] + (a3 == 0)));
    v26 = (const ZinANELayer **)v95;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v34 = *((_QWORD *)v33 + 13);
    if (!v34 || (v35 = *(uint64_t **)(v34 + 40), v35 == *(uint64_t **)(v34 + 48)))
      v36 = 0;
    else
      v36 = *v35;
    if ((!v32 || *(_DWORD *)(v32 + 152) != 2) && (!v36 || *(_DWORD *)(v36 + 152) != 2))
    {
      ZinIrTensor::GetTensorSizeInBytes(RootTensor);
      v84 = v37;
      ZinIrTensor::GetTensorSizeInBytes(v33);
      v39 = v38;
      __p[0] = RootTensor;
      v40 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v95 + 38, __p);
      if (v40)
      {
        v41 = v40 + 3;
      }
      else
      {
        v42 = *((_QWORD *)__p[0] + 13);
        if (!v42)
        {
LABEL_31:
          if (!ZinIrLocalRegAlloc::GetAllocationHint((ZinIrLocalRegAlloc *)v95, v33))
          {
            if (v84 < v39)
              v33 = RootTensor;
            goto LABEL_41;
          }
LABEL_32:
          __p[0] = v33;
          v43 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v95 + 38, __p);
          if (v43)
          {
            v44 = v43 + 3;
LABEL_36:
            if (*v44 == 2)
            {
              v33 = RootTensor;
              if (ZinIrLocalRegAlloc::GetAllocationHint((ZinIrLocalRegAlloc *)v95, RootTensor) == 2)
                goto LABEL_59;
            }
            goto LABEL_41;
          }
          v45 = *((_QWORD *)__p[0] + 13);
          if (v45)
          {
            v44 = (_DWORD *)(v45 + 96);
            goto LABEL_36;
          }
LABEL_41:
          v46 = *(_BYTE *)(v8 + 233);
          v47 = *(_BYTE *)(v8 + 150);
          v48 = *(_BYTE *)(v11 + 233);
          v49 = *(_BYTE *)(v11 + 256);
          *(_BYTE *)(v8 + 233) = 1;
          *(_BYTE *)(v8 + 150) = 1;
          *(_BYTE *)(v11 + 233) = 1;
          *(_BYTE *)(v11 + 256) = 1;
          ResidentTensor = ZinIrLocalRegAlloc::AllocateResidentTensor((const ZinIrTensor **)v95, v33, 1);
          *(_BYTE *)(v8 + 233) = v46;
          *(_BYTE *)(v8 + 150) = v47;
          *(_BYTE *)(v11 + 233) = v48;
          *(_BYTE *)(v11 + 256) = v49;
          v23 = v91;
          v26 = (const ZinANELayer **)v95;
          if ((ResidentTensor & 1) == 0)
          {
            ZinIrLocalRegAlloc::RemoveSymbolFromLayerAndTensor((ZinIrLocalRegAlloc *)v95, v91);
            v23 = v91;
            v26 = (const ZinANELayer **)v95;
            goto LABEL_59;
          }
          goto LABEL_42;
        }
        v41 = (_DWORD *)(v42 + 96);
      }
      if (*v41)
        goto LABEL_32;
      goto LABEL_31;
    }
  }
LABEL_42:
  v101 = 1;
  v100 = 0;
  if (!ZinIrRegAllocUtil::NeedChainTileHeightIncrease((ZinIrRegAllocUtil *)v6, v10, v26[2], v26[3], (const ZinIrCompilerParameters *)&v100, v29))
  {
    if (v100)
    {
      ZinIrLocalRegAlloc::OptimizeChainBufferTileHeight((ZinIrLocalRegAlloc *)v95, (ZinANELayer *)v6, v10, &v101);
      v59 = v101;
    }
    else
    {
      v59 = 1;
    }
    v60 = ZinMirL2Config::SetChainConsumerTileHeight(v93, (const ZinANELayer *)v6, v10, 1, v59);
    v61 = ZinMirL2Config::SetChainProducerTileHeight((ZinMirL2Config *)(v8 + 120), v10, a3, 1);
    *(_BYTE *)(v8 + 150) = 1;
    *(_BYTE *)(v11 + 256) = 1;
    ZinIrLocalRegAlloc::RemoveSymbolFromLayerAndTensor((ZinIrLocalRegAlloc *)v95, v23);
    v62 = v60 & v61 & ZinIrLocalRegAlloc::AllocateChainSymbol((ZinIrLocalRegAlloc *)v95, v23);
    *a4 = v62;
    v63 = (ZinIrTensor *)(*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)v10 + 32))(v10, 0, 0);
    v64 = ZinIrTensor::GetRootTensor(v63);
    if (v90 == *(_QWORD *)(v11 + 240) && v88 == *(_QWORD *)(v11 + 248)
      || *(_DWORD *)(*((_QWORD *)v10 + 33) + 1632) != 3)
    {
      v12 = 0;
      goto LABEL_63;
    }
    v65 = (ZinIrTensor *)(*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)v10 + 32))(v10, 0, 0);
    v66 = v89;
    if (ZinIrLocalRegAlloc::IsInplaced((ZinIrLocalRegAlloc *)v95, v65))
    {
LABEL_80:
      v12 = 0;
      if (!v89)
        goto LABEL_65;
      goto LABEL_64;
    }
    ZinMirL2Config::ZinMirL2Config((ZinMirL2Config *)__p, v93);
    ZinMirL2Config::operator=(*((_QWORD *)v10 + 33) + 120, (uint64_t)__dst);
    v67 = (ZinMirBankConflictOptimizer *)(*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)v10 + 32))(v10, 0, 0);
    ZinMirBankConflictOptimizer::ComputeResidentSymbolStrides(v67, (const ZinIrTensor *)v95[2], (uint64_t)v97);
    ZinMirL2Config::operator=(*((_QWORD *)v10 + 33) + 120, (uint64_t)__p);
    v68 = (ZinMirBankConflictOptimizer *)(*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)v10 + 32))(v10, 0, 0);
    ZinMirBankConflictOptimizer::ComputeResidentSymbolStrides(v68, (const ZinIrTensor *)v95[2], (uint64_t)v96);
    if (ZinTensorDimensions::operator!=(v97, v96))
    {
      ZinIrLocalRegAlloc::RemoveSymbolFromLayerAndTensor((ZinIrLocalRegAlloc *)v95, v64);
      if ((ZinIrLocalRegAlloc::AllocateResidentTensor((const ZinIrTensor **)v95, v64, 1) & 1) != 0)
      {
        if ((v62 & 1) != 0)
          goto LABEL_79;
LABEL_78:
        ZinIrLocalRegAlloc::RemoveSymbolFromLayerAndTensor((ZinIrLocalRegAlloc *)v95, v23);
        v83 = ZinIrLocalRegAlloc::AllocateResidentTensor((const ZinIrTensor **)v95, v64, 0);
        if ((v83 & ZinIrLocalRegAlloc::AllocateChainSymbol((ZinIrLocalRegAlloc *)v95, v23)) != 1)
        {
          ZinMirL2Config::~ZinMirL2Config((ZinMirL2Config *)__p);
          goto LABEL_73;
        }
        goto LABEL_79;
      }
      if ((ZinIrLocalRegAlloc::AllocateResidentTensor((const ZinIrTensor **)v95, v64, 0) & v62 & 1) == 0)
        goto LABEL_78;
    }
LABEL_79:
    ZinMirL2Config::~ZinMirL2Config((ZinMirL2Config *)__p);
    goto LABEL_80;
  }
  v51 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v51)
    ZinIrLocalRegAlloc::AllocateP2NChainBuffer(v51, v52, v53, v54, v55, v56, v57, v58);
  v12 = 3;
LABEL_63:
  v66 = v89;
  if (v89)
  {
LABEL_64:
    *((_QWORD *)&v102 + 1) = v66;
    operator delete(v66);
  }
LABEL_65:
  if (v106)
  {
    v107 = v106;
    operator delete(v106);
  }
  if (v109)
  {
    v110 = v109;
    operator delete(v109);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v115);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v114);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v113);
  return v12;
}

void sub_206DC9DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37)
{
  void *v38;
  void *v39;

  ZinMirL2Config::~ZinMirL2Config((ZinMirL2Config *)&a37);
  if (__p)
  {
    STACK[0x348] = (unint64_t)__p;
    operator delete(__p);
  }
  v38 = (void *)STACK[0x370];
  if (STACK[0x370])
  {
    STACK[0x378] = (unint64_t)v38;
    operator delete(v38);
  }
  v39 = (void *)STACK[0x388];
  if (STACK[0x388])
  {
    STACK[0x390] = (unint64_t)v39;
    operator delete(v39);
  }
  ZinMirL2Config::~ZinMirL2Config((ZinMirL2Config *)&STACK[0x3A0]);
  _Unwind_Resume(a1);
}

BOOL ZinIrLocalRegAlloc::OptimizeChainBufferTileHeight(ZinIrLocalRegAlloc *this, ZinANELayer *a2, ZinANELayer *a3, unint64_t *a4)
{
  unint64_t v8;
  ZinIrOpLayerGraph *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  unint64_t v13;
  ZinMirL2Config *v14;
  ZinMirL2Config *v15;
  ZinIrTensor *v16;
  int v17;
  int v18;
  ZinIrTensor *v19;
  int ChainSymbol;
  _BOOL8 result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;

  v8 = (*(uint64_t (**)(ZinANELayer *, uint64_t))(*(_QWORD *)a3 + 368))(a3, 3);
  v9 = (ZinIrOpLayerGraph *)*((_QWORD *)a2 + 19);
  *a4 = 1;
  v10 = *((_QWORD *)a2 + 33);
  v11 = *((_QWORD *)a3 + 33);
  v29 = 0;
  if (!ZinIrRegAllocUtil::GetChainedOperandL2SrcType(v9, a3, a2, &v29))
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    ZinIrLocalRegAlloc::OptimizeChainPairDMABufferTileHeight(result, v22, v23, v24, v25, v26, v27, v28);
    return 0;
  }
  v12 = v29 != 0;
  v13 = vcvtps_u32_f32((float)v8 / (float)*(unint64_t *)(*((_QWORD *)a3 + 33) + 200));
  if (v13 < 2)
    return 0;
  v14 = (ZinMirL2Config *)(v10 + 120);
  v15 = (ZinMirL2Config *)(v11 + 120);
  while (1)
  {
    v16 = (ZinIrTensor *)(*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
    ZinIrLocalRegAlloc::RemoveSymbolFromLayerAndTensor(this, v16);
    v17 = ZinMirL2Config::SetChainConsumerTileHeight(v15, a2, a3, 0, v13);
    v18 = ZinMirL2Config::SetChainProducerTileHeight(v14, a3, v12, 0);
    v19 = (ZinIrTensor *)(*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
    ChainSymbol = ZinIrLocalRegAlloc::AllocateChainSymbol(this, v19);
    if (v17)
    {
      if (v18 && ChainSymbol)
        break;
    }
    if (--v13 <= 1)
      return 0;
  }
  *a4 = v13;
  return 1;
}

void ZinIrLocalRegAlloc::ClearResidentSymbols(ZinIrLocalRegAlloc *a1@<X0>, ZinIrOpLayer ***a2@<X1>, void **a3@<X8>)
{
  ZinIrOpLayer **v4;
  ZinIrOpLayer *v6;
  unint64_t v7;
  ZinIrTensor *InputTensor;
  ZinIrTensor *RootTensor;
  unint64_t v10;
  ZinIrTensor **v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  ZinIrTensor **v18;
  char *v19;
  char *v20;
  ZinIrTensor *v21;
  ZinIrTensor *v22;
  ZinIrTensor *v23;
  unint64_t v24;
  ZinIrTensor **v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  ZinIrTensor **v32;
  char *v33;
  char *v34;
  ZinIrTensor *v35;
  ZinIrOpLayer **v36;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *a2;
  v36 = a2[1];
  if (*a2 != v36)
  {
    do
    {
      v6 = *v4;
      if (*((_QWORD *)*v4 + 12) != *((_QWORD *)*v4 + 11))
      {
        v7 = 0;
        do
        {
          if (ZinEngineLayerMirInfo::GetL2RdMode(*((_QWORD *)v6 + 33), v7 != 0) == 3)
          {
            InputTensor = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(v6, v7);
            RootTensor = ZinIrTensor::GetRootTensor(InputTensor);
            ZinIrLocalRegAlloc::RemoveSymbolFromLayerAndTensor(a1, RootTensor);
            v11 = (ZinIrTensor **)a3[1];
            v10 = (unint64_t)a3[2];
            if ((unint64_t)v11 >= v10)
            {
              v13 = ((char *)v11 - (_BYTE *)*a3) >> 3;
              if ((unint64_t)(v13 + 1) >> 61)
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              v14 = v10 - (_QWORD)*a3;
              v15 = v14 >> 2;
              if (v14 >> 2 <= (unint64_t)(v13 + 1))
                v15 = v13 + 1;
              if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
                v16 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v16 = v15;
              if (v16)
                v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a3 + 2), v16);
              else
                v17 = 0;
              v18 = (ZinIrTensor **)&v17[8 * v13];
              *v18 = RootTensor;
              v12 = v18 + 1;
              v20 = (char *)*a3;
              v19 = (char *)a3[1];
              if (v19 != *a3)
              {
                do
                {
                  v21 = (ZinIrTensor *)*((_QWORD *)v19 - 1);
                  v19 -= 8;
                  *--v18 = v21;
                }
                while (v19 != v20);
                v19 = (char *)*a3;
              }
              *a3 = v18;
              a3[1] = v12;
              a3[2] = &v17[8 * v16];
              if (v19)
                operator delete(v19);
            }
            else
            {
              *v11 = RootTensor;
              v12 = v11 + 1;
            }
            a3[1] = v12;
          }
          ++v7;
        }
        while (v7 < (uint64_t)(*((_QWORD *)v6 + 12) - *((_QWORD *)v6 + 11)) >> 3);
      }
      if (*(_DWORD *)(*((_QWORD *)v6 + 33) + 1632) == 3)
      {
        v22 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0, 0);
        v23 = ZinIrTensor::GetRootTensor(v22);
        ZinIrLocalRegAlloc::RemoveSymbolFromLayerAndTensor(a1, v23);
        v25 = (ZinIrTensor **)a3[1];
        v24 = (unint64_t)a3[2];
        if ((unint64_t)v25 >= v24)
        {
          v27 = ((char *)v25 - (_BYTE *)*a3) >> 3;
          if ((unint64_t)(v27 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v28 = v24 - (_QWORD)*a3;
          v29 = v28 >> 2;
          if (v28 >> 2 <= (unint64_t)(v27 + 1))
            v29 = v27 + 1;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
            v30 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v30 = v29;
          if (v30)
            v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a3 + 2), v30);
          else
            v31 = 0;
          v32 = (ZinIrTensor **)&v31[8 * v27];
          *v32 = v23;
          v26 = v32 + 1;
          v34 = (char *)*a3;
          v33 = (char *)a3[1];
          if (v33 != *a3)
          {
            do
            {
              v35 = (ZinIrTensor *)*((_QWORD *)v33 - 1);
              v33 -= 8;
              *--v32 = v35;
            }
            while (v33 != v34);
            v33 = (char *)*a3;
          }
          *a3 = v32;
          a3[1] = v26;
          a3[2] = &v31[8 * v30];
          if (v33)
            operator delete(v33);
        }
        else
        {
          *v25 = v23;
          v26 = v25 + 1;
        }
        a3[1] = v26;
      }
      ++v4;
    }
    while (v4 != v36);
  }
}

void sub_206DCA2B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL ZinIrLocalRegAlloc::HasLockedPEWorkUnit(ZinIrLocalRegAlloc *this, ZinANELayer *a2)
{
  ZinANELayer *v3;

  v3 = a2;
  return std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 46, &v3) != 0;
}

BOOL ZinIrLocalRegAlloc::HasLockedNEWorkUnit(ZinIrLocalRegAlloc *this, ZinANELayer *a2)
{
  ZinANELayer *v3;

  v3 = a2;
  return std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 51, &v3) != 0;
}

uint64_t *std::map<BarIdType,unsigned char>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<BarIdType,unsigned char>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<BarIdType,unsigned char>,std::__tree_node<std::__value_type<BarIdType,unsigned char>,void *> *,long>>>(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_206DCA378(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<BarIdType,unsigned char>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<BarIdType,unsigned char>,std::__tree_node<std::__value_type<BarIdType,unsigned char>,void *> *,long>>>(uint64_t *result, int *a2, int *a3)
{
  int *v4;
  uint64_t **v5;
  uint64_t *v6;
  int *v7;
  int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<ZinIrNonLinearMode,unsigned int>,std::__map_value_compare<ZinIrNonLinearMode,std::__value_type<ZinIrNonLinearMode,unsigned int>,std::less<ZinIrNonLinearMode>,true>,std::allocator<std::__value_type<ZinIrNonLinearMode,unsigned int>>>::__emplace_hint_unique_key_args<ZinIrNonLinearMode,std::pair<ZinIrNonLinearMode const,unsigned int> const&>(v5, v6, v4 + 7, (uint64_t *)(v4 + 7));
      v7 = (int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::map<std::string,ZinIOBarInfo>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,ZinIOBarInfo>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,ZinIOBarInfo>,std::__tree_node<std::__value_type<std::string,ZinIOBarInfo>,void *> *,long>>>(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_206DCA450(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,ZinIOBarInfo>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,ZinIOBarInfo>,std::__tree_node<std::__value_type<std::string,ZinIOBarInfo>,void *> *,long>>>(uint64_t *result, void **a2, void **a3)
{
  void **v4;
  uint64_t **v5;
  uint64_t v6;
  void **v7;
  void **v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (uint64_t)(result + 1);
    do
    {
      result = std::__tree<std::__value_type<std::string,ZinIOBarInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIOBarInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIOBarInfo>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,ZinIOBarInfo> const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (void **)v4[2];
          v9 = *v8 == v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,ZinIOBarInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIOBarInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIOBarInfo>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,ZinIOBarInfo> const&>(uint64_t **a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  void **v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,ZinIOBarInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIOBarInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIOBarInfo>>>::__construct_node<std::pair<std::string const,ZinIOBarInfo>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

_QWORD *std::vector<ZinDynamicOffsetCustomBarCmd>::__init_with_size[abi:ne180100]<ZinDynamicOffsetCustomBarCmd*,ZinDynamicOffsetCustomBarCmd*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<ZinDynamicOffsetCustomBarCmd>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinDynamicOffsetCustomBarCmd>,ZinDynamicOffsetCustomBarCmd*,ZinDynamicOffsetCustomBarCmd*,ZinDynamicOffsetCustomBarCmd*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_206DCA5D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<ZinDynamicOffsetCustomBarCmd>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<ZinDynamicOffsetCustomBarCmd>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 58)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinDynamicOffsetCustomBarCmd>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[64 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinDynamicOffsetCustomBarCmd>,ZinDynamicOffsetCustomBarCmd*,ZinDynamicOffsetCustomBarCmd*,ZinDynamicOffsetCustomBarCmd*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = a4 + v7;
      v9 = a2 + v7;
      *(_QWORD *)(a4 + v7) = *(_QWORD *)(a2 + v7);
      std::unordered_map<ZinIrDimension,ZinLiveInputParamDescriptor>::unordered_map(a4 + v7 + 8, a2 + v7 + 8);
      v10 = *(_QWORD *)(a2 + v7 + 48);
      *(_BYTE *)(v8 + 56) = *(_BYTE *)(a2 + v7 + 56);
      *(_QWORD *)(v8 + 48) = v10;
      v7 += 64;
    }
    while (v9 + 64 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_206DCA6B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 56;
    do
    {
      std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>>>::~__hash_table(v4 + v2);
      v2 -= 64;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::optional<ZinIrSymbol::DynamicOffsetInfo>::operator=[abi:ne180100]<ZinIrSymbol::DynamicOffsetInfo,void>(uint64_t a1, uint64_t a2)
{
  __int16 v4;

  if (*(_BYTE *)(a1 + 48))
  {
    std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::__move_assign(a1, (uint64_t *)a2);
    v4 = *(_WORD *)(a2 + 40);
  }
  else
  {
    std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__hash_table(a1, (uint64_t *)a2);
    v4 = *(_WORD *)(a2 + 40);
    *(_BYTE *)(a1 + 48) = 1;
  }
  *(_WORD *)(a1 + 40) = v4;
  return a1;
}

uint64_t std::__optional_copy_base<ZinIrSymbol::DynamicOffsetInfo,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    std::unordered_map<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>::unordered_map(a1, a2);
    *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
    *(_BYTE *)(a1 + 48) = 1;
  }
  return a1;
}

void sub_206DCA780(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 48))
    std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::~__hash_table(v1);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::clear(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::__optional_storage_base<ZinIrSymbol::DynamicOffsetInfo,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<ZinIrSymbol::DynamicOffsetInfo,false> const&>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
  {
    if (*(_BYTE *)(a1 + 48))
    {
      if (a1 != a2)
      {
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
        std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,void *> *>>((_QWORD *)a1, *(uint64_t **)(a2 + 16), 0);
      }
      *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
    }
  }
  else if (*(_BYTE *)(a1 + 48))
  {
    std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::~__hash_table(a1);
    *(_BYTE *)(a1 + 48) = 0;
  }
  else
  {
    std::unordered_map<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>::unordered_map(a1, a2);
    *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
    *(_BYTE *)(a1 + 48) = 1;
  }
}

uint64_t std::__tree<ZinIrSymbol const*,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol const*>>::__erase_unique<ZinIrSymbol const*>(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = std::__tree<ZinIrSymbol const*,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol const*>>::find<ZinIrSymbol const*>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  std::__tree<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,std::__map_value_compare<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,HazardEdgeCompare,true>,std::allocator<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>>>::__remove_node_pointer(a1, v3);
  operator delete(v4);
  return 1;
}

_QWORD *std::__tree<ZinIrSymbol const*,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol const*>>::find<ZinIrSymbol const*>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v10;

  v3 = (_QWORD *)(a1 + 8);
  v4 = std::__tree<ZinIrSymbol const*,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol const*>>::__lower_bound<ZinIrSymbol const*>(a1, a2, *(_QWORD **)(a1 + 8), (_QWORD *)(a1 + 8));
  if (v3 == v4)
    return v3;
  v5 = v4;
  v6 = *a2;
  v7 = v4[4];
  if (*a2)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
  {
    if (v6 && !v7)
      return v3;
  }
  else
  {
    v10 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(v6 + 160), (void **)(v7 + 160));
    if (v10 < 0)
      return v3;
  }
  return v5;
}

_QWORD *std::__tree<ZinIrSymbol const*,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol const*>>::__lower_bound<ZinIrSymbol const*>(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  _BOOL4 v11;
  BOOL v12;
  _QWORD *v13;

  if (a3)
  {
    v5 = a3;
    do
    {
      v7 = v5[4];
      v8 = *a2;
      if (v7)
        v9 = v8 == 0;
      else
        v9 = 1;
      if (v9)
      {
        if (v7)
          v10 = v8 == 0;
        else
          v10 = 0;
        v11 = v10;
      }
      else
      {
        v11 = (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(v7 + 160), (void **)(v8 + 160)) & 0x80u) != 0;
      }
      v12 = !v11;
      if (v11)
        v13 = v5 + 1;
      else
        v13 = v5;
      if (v12)
        a4 = v5;
      v5 = (_QWORD *)*v13;
    }
    while (*v13);
  }
  return a4;
}

uint64_t std::vector<ZinMirL2Config>::__push_back_slow_path<ZinMirL2Config const&>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  _DWORD *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x14C1BACF914C1BADLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x6EB3E45306EB3ELL)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x14C1BACF914C1BADLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x3759F22983759FLL)
    v9 = 0x6EB3E45306EB3ELL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANECGOCLayerDescAlternate>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[592 * v4];
  v16 = &v10[592 * v9];
  std::construct_at[abi:ne180100]<ZinMirL2Config,ZinMirL2Config const&,ZinMirL2Config*>(v14, a2);
  v15 = v14 + 592;
  std::vector<ZinMirL2Config>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<ZinMirL2Config>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_206DCAB74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ZinMirL2Config>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ZinMirL2Config>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinMirL2Config>,std::reverse_iterator<ZinMirL2Config*>,std::reverse_iterator<ZinMirL2Config*>,std::reverse_iterator<ZinMirL2Config*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinMirL2Config>,std::reverse_iterator<ZinMirL2Config*>,std::reverse_iterator<ZinMirL2Config*>,std::reverse_iterator<ZinMirL2Config*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 592;
      std::construct_at[abi:ne180100]<ZinMirL2Config,ZinMirL2Config,ZinMirL2Config*>((_DWORD *)(v7 - 592), v9);
      v7 = *((_QWORD *)&v15 + 1) - 592;
      *((_QWORD *)&v15 + 1) -= 592;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ZinMirL2Config>,std::reverse_iterator<ZinMirL2Config*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

_DWORD *std::construct_at[abi:ne180100]<ZinMirL2Config,ZinMirL2Config,ZinMirL2Config*>(_DWORD *a1, uint64_t a2)
{
  memcpy(a1, (const void *)a2, 0x1C0uLL);
  a1[112] = *(_DWORD *)(a2 + 448);
  std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__hash_table((uint64_t)(a1 + 114), (uint64_t *)(a2 + 456));
  a1[124] = *(_DWORD *)(a2 + 496);
  std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__hash_table((uint64_t)(a1 + 126), (uint64_t *)(a2 + 504));
  a1[136] = *(_DWORD *)(a2 + 544);
  std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__hash_table((uint64_t)(a1 + 138), (uint64_t *)(a2 + 552));
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ZinMirL2Config>,std::reverse_iterator<ZinMirL2Config*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<ZinMirL2Config>,std::reverse_iterator<ZinMirL2Config*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<ZinMirL2Config>,std::reverse_iterator<ZinMirL2Config*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v15 = v3;
  v16 = v2;
  v17 = v3;
  v18 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v10 = v7;
  v11 = v6;
  v12 = v7;
  v13 = v6;
  return std::__allocator_destroy[abi:ne180100]<std::allocator<ZinMirL2Config>,std::reverse_iterator<std::reverse_iterator<ZinMirL2Config*>>,std::reverse_iterator<std::reverse_iterator<ZinMirL2Config*>>>(v4, (uint64_t)v14, (uint64_t)v9);
}

uint64_t std::__allocator_destroy[abi:ne180100]<std::allocator<ZinMirL2Config>,std::reverse_iterator<std::reverse_iterator<ZinMirL2Config*>>,std::reverse_iterator<std::reverse_iterator<ZinMirL2Config*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t result;

  for (i = *(_QWORD *)(a2 + 32); i != *(_QWORD *)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(i + 552);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(i + 504);
    result = std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(i + 456);
    i = *(_QWORD *)(a2 + 32) + 592;
  }
  return result;
}

uint64_t std::__split_buffer<ZinMirL2Config>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<ZinMirL2Config>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__split_buffer<ZinMirL2Config>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      *(_QWORD *)(v4 + 16) = v2 - 592;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v2 - 40);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v2 - 88);
      result = std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v2 - 136);
      v2 = *(_QWORD *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

void std::vector<ZinMirL2Config>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<ZinMirL2Config>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

uint64_t std::vector<ZinMirL2Config>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;

  v3 = result;
  for (i = *(_QWORD *)(result + 8); i != a2; i -= 592)
  {
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(i - 40);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(i - 88);
    result = std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(i - 136);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t std::vector<std::vector<ZinANELayer *>>::__push_back_slow_path<std::vector<ZinANELayer *> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v15 += 24;
  std::vector<std::vector<ZinANELayer *>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<ZinIrOpLayer *>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_206DCB04C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<ZinIrOpLayer *>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,ZinIrLocalRegAlloc::AllocateL2CachedBuffers(void)::$_0 &,ZinANELayer **,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  BOOL v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v38 = *(a2 - 1);
        v39 = *v8;
        if (*(_QWORD *)(v38 + 360) < *(_QWORD *)(*v8 + 360))
        {
          *v8 = v38;
          *(a2 - 1) = v39;
        }
        return result;
      case 3uLL:
        return (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrRegAllocUtil::FindSortedConsumersAndProducers(ZinIrTensor const*,std::vector<ZinANELayer *> &,std::vector<ZinANELayer *> &,std::optional<ZinTensorFamilyUtil> const&)::$_0 &,ZinANELayer **>(v8, v8 + 1, a2 - 1);
      case 4uLL:
        return (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrRegAllocUtil::FindSortedConsumersAndProducers(ZinIrTensor const*,std::vector<ZinANELayer *> &,std::vector<ZinANELayer *> &,std::optional<ZinTensorFamilyUtil> const&)::$_0 &,ZinANELayer **>(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5uLL:
        v40 = v8 + 1;
        v41 = v8 + 2;
        v42 = v8 + 3;
        result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrRegAllocUtil::FindSortedConsumersAndProducers(ZinIrTensor const*,std::vector<ZinANELayer *> &,std::vector<ZinANELayer *> &,std::optional<ZinTensorFamilyUtil> const&)::$_0 &,ZinANELayer **>(v8, v8 + 1, v8 + 2, v8 + 3);
        v43 = *(a2 - 1);
        v44 = v8[3];
        if (*(_QWORD *)(v43 + 360) < *(_QWORD *)(v44 + 360))
        {
          *v42 = v43;
          *(a2 - 1) = v44;
          v45 = *v42;
          v46 = *v41;
          v47 = *(_QWORD *)(*v42 + 360);
          if (v47 < *(_QWORD *)(*v41 + 360))
          {
            *v41 = v45;
            *v42 = v46;
            v48 = *v40;
            if (v47 < *(_QWORD *)(*v40 + 360))
            {
              v8[1] = v45;
              v8[2] = v48;
              v49 = *v8;
              if (v47 < *(_QWORD *)(*v8 + 360))
              {
                *v8 = v45;
                v8[1] = v49;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v50 = v8 + 1;
          v52 = v8 == a2 || v50 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v52)
            {
              v53 = 0;
              v54 = v8;
              do
              {
                v56 = *v54;
                v55 = v54[1];
                v54 = v50;
                v57 = *(_QWORD *)(v55 + 360);
                if (v57 < *(_QWORD *)(v56 + 360))
                {
                  v58 = v53;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v58 + 8) = v56;
                    if (!v58)
                      break;
                    v56 = *(uint64_t *)((char *)v8 + v58 - 8);
                    v58 -= 8;
                    if (v57 >= *(_QWORD *)(v56 + 360))
                    {
                      v59 = (uint64_t *)((char *)v8 + v58 + 8);
                      goto LABEL_80;
                    }
                  }
                  v59 = v8;
LABEL_80:
                  *v59 = v55;
                }
                v50 = v54 + 1;
                v53 += 8;
              }
              while (v54 + 1 != a2);
            }
          }
          else if (!v52)
          {
            do
            {
              v90 = *v7;
              v89 = v7[1];
              v7 = v50;
              v91 = *(_QWORD *)(v89 + 360);
              if (v91 < *(_QWORD *)(v90 + 360))
              {
                do
                {
                  *v50 = v90;
                  v90 = *(v50 - 2);
                  --v50;
                }
                while (v91 < *(_QWORD *)(v90 + 360));
                *v50 = v89;
              }
              v50 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v60 = (v10 - 2) >> 1;
            v61 = v60;
            do
            {
              v62 = v61;
              if (v60 >= v61)
              {
                v63 = (2 * v61) | 1;
                v64 = &v8[v63];
                v65 = *v64;
                if (2 * v62 + 2 < (uint64_t)v10)
                {
                  result = *(_QWORD *)(v65 + 360);
                  if (result < *(_QWORD *)(v64[1] + 360))
                  {
                    v65 = v64[1];
                    ++v64;
                    v63 = 2 * v62 + 2;
                  }
                }
                v66 = &v8[v62];
                v67 = *v66;
                v68 = *(_QWORD *)(*v66 + 360);
                if (*(_QWORD *)(v65 + 360) >= v68)
                {
                  do
                  {
                    v69 = v64;
                    *v66 = v65;
                    if (v60 < v63)
                      break;
                    result = (2 * v63) | 1;
                    v64 = &v8[result];
                    v70 = 2 * v63 + 2;
                    v65 = *v64;
                    if (v70 < (uint64_t)v10 && *(_QWORD *)(v65 + 360) < *(_QWORD *)(v64[1] + 360))
                    {
                      v65 = v64[1];
                      ++v64;
                      result = v70;
                    }
                    v66 = v69;
                    v63 = result;
                  }
                  while (*(_QWORD *)(v65 + 360) >= v68);
                  *v69 = v67;
                }
              }
              v61 = v62 - 1;
            }
            while (v62);
            v71 = (unint64_t)v9 >> 3;
            do
            {
              v72 = 0;
              v73 = *v8;
              v74 = v8;
              do
              {
                v75 = &v74[v72];
                v78 = v75[1];
                v76 = v75 + 1;
                v77 = v78;
                v79 = (2 * v72) | 1;
                v80 = 2 * v72 + 2;
                if (v80 < v71)
                {
                  result = *(_QWORD *)(v77 + 360);
                  if (result < *(_QWORD *)(v76[1] + 360))
                  {
                    v77 = v76[1];
                    ++v76;
                    v79 = v80;
                  }
                }
                *v74 = v77;
                v74 = v76;
                v72 = v79;
              }
              while (v79 <= (uint64_t)((unint64_t)(v71 - 2) >> 1));
              if (v76 == --a2)
              {
                *v76 = v73;
              }
              else
              {
                *v76 = *a2;
                *a2 = v73;
                v81 = (char *)v76 - (char *)v8 + 8;
                if (v81 >= 9)
                {
                  v82 = (((unint64_t)v81 >> 3) - 2) >> 1;
                  v83 = &v8[v82];
                  v84 = *v83;
                  v85 = *v76;
                  v86 = *(_QWORD *)(*v76 + 360);
                  if (*(_QWORD *)(*v83 + 360) < v86)
                  {
                    do
                    {
                      v87 = v83;
                      *v76 = v84;
                      if (!v82)
                        break;
                      v82 = (v82 - 1) >> 1;
                      v83 = &v8[v82];
                      v84 = *v83;
                      v76 = v87;
                    }
                    while (*(_QWORD *)(*v83 + 360) < v86);
                    *v87 = v85;
                  }
                }
              }
            }
            while (v71-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrRegAllocUtil::FindSortedConsumersAndProducers(ZinIrTensor const*,std::vector<ZinANELayer *> &,std::vector<ZinANELayer *> &,std::optional<ZinTensorFamilyUtil> const&)::$_0 &,ZinANELayer **>(&v7[v10 >> 1], v7, a2 - 1);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrRegAllocUtil::FindSortedConsumersAndProducers(ZinIrTensor const*,std::vector<ZinANELayer *> &,std::vector<ZinANELayer *> &,std::optional<ZinTensorFamilyUtil> const&)::$_0 &,ZinANELayer **>(v7, &v7[v10 >> 1], a2 - 1);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrRegAllocUtil::FindSortedConsumersAndProducers(ZinIrTensor const*,std::vector<ZinANELayer *> &,std::vector<ZinANELayer *> &,std::optional<ZinTensorFamilyUtil> const&)::$_0 &,ZinANELayer **>(v7 + 1, v12 - 1, a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrRegAllocUtil::FindSortedConsumersAndProducers(ZinIrTensor const*,std::vector<ZinANELayer *> &,std::vector<ZinANELayer *> &,std::optional<ZinTensorFamilyUtil> const&)::$_0 &,ZinANELayer **>(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrRegAllocUtil::FindSortedConsumersAndProducers(ZinIrTensor const*,std::vector<ZinANELayer *> &,std::vector<ZinANELayer *> &,std::optional<ZinTensorFamilyUtil> const&)::$_0 &,ZinANELayer **>(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0)
        {
          v15 = *(_QWORD *)(v14 + 360);
          if (*(_QWORD *)(*(v7 - 1) + 360) < v15)
            goto LABEL_12;
          if (v15 >= *(_QWORD *)(*(a2 - 1) + 360))
          {
            v30 = v7 + 1;
            do
            {
              v8 = v30;
              if (v30 >= a2)
                break;
              ++v30;
            }
            while (v15 >= *(_QWORD *)(*v8 + 360));
          }
          else
          {
            v8 = v7;
            do
            {
              v29 = v8[1];
              ++v8;
            }
            while (v15 >= *(_QWORD *)(v29 + 360));
          }
          v31 = a2;
          if (v8 < a2)
          {
            v31 = a2;
            do
              v32 = *--v31;
            while (v15 < *(_QWORD *)(v32 + 360));
          }
          if (v8 < v31)
          {
            v33 = *v8;
            v34 = *v31;
            do
            {
              *v8 = v34;
              *v31 = v33;
              do
              {
                v35 = v8[1];
                ++v8;
                v33 = v35;
              }
              while (v15 >= *(_QWORD *)(v35 + 360));
              do
              {
                v36 = *--v31;
                v34 = v36;
              }
              while (v15 < *(_QWORD *)(v36 + 360));
            }
            while (v8 < v31);
          }
          v37 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v37;
          a4 = 0;
          *v37 = v14;
          continue;
        }
        v15 = *(_QWORD *)(v14 + 360);
LABEL_12:
        v16 = 0;
        do
          v17 = v7[++v16];
        while (*(_QWORD *)(v17 + 360) < v15);
        v18 = &v7[v16];
        v19 = a2;
        if (v16 == 1)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *--v19;
          }
          while (*(_QWORD *)(v21 + 360) >= v15);
        }
        else
        {
          do
            v20 = *--v19;
          while (*(_QWORD *)(v20 + 360) >= v15);
        }
        if (v18 >= v19)
        {
          v27 = v18 - 1;
        }
        else
        {
          v22 = *v19;
          v23 = &v7[v16];
          v24 = v19;
          do
          {
            *v23 = v22;
            *v24 = v17;
            do
            {
              v25 = v23[1];
              ++v23;
              v17 = v25;
            }
            while (*(_QWORD *)(v25 + 360) < v15);
            do
            {
              v26 = *--v24;
              v22 = v26;
            }
            while (*(_QWORD *)(v26 + 360) >= v15);
          }
          while (v23 < v24);
          v27 = v23 - 1;
        }
        if (v27 != v7)
          *v7 = *v27;
        *v27 = v14;
        if (v18 < v19)
        {
LABEL_33:
          result = std::__introsort<std::_ClassicAlgPolicy,ZinIrLocalRegAlloc::AllocateL2CachedBuffers(void)::$_0 &,ZinANELayer **,false>(v7, v27, a3, a4 & 1);
          a4 = 0;
          v8 = v27 + 1;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrLocalRegAlloc::AllocateL2CachedBuffers(void)::$_0 &,ZinANELayer **>(v7, v27);
        v8 = v27 + 1;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrLocalRegAlloc::AllocateL2CachedBuffers(void)::$_0 &,ZinANELayer **>(v27 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_33;
        }
        a2 = v27;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrLocalRegAlloc::AllocateL2CachedBuffers(void)::$_0 &,ZinANELayer **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*(_QWORD *)(v6 + 360) < *(_QWORD *)(*a1 + 360))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrRegAllocUtil::FindSortedConsumersAndProducers(ZinIrTensor const*,std::vector<ZinANELayer *> &,std::vector<ZinANELayer *> &,std::optional<ZinTensorFamilyUtil> const&)::$_0 &,ZinANELayer **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrRegAllocUtil::FindSortedConsumersAndProducers(ZinIrTensor const*,std::vector<ZinANELayer *> &,std::vector<ZinANELayer *> &,std::optional<ZinTensorFamilyUtil> const&)::$_0 &,ZinANELayer **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v18 = a1 + 1;
      v19 = a1 + 2;
      v20 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrRegAllocUtil::FindSortedConsumersAndProducers(ZinIrTensor const*,std::vector<ZinANELayer *> &,std::vector<ZinANELayer *> &,std::optional<ZinTensorFamilyUtil> const&)::$_0 &,ZinANELayer **>(a1, a1 + 1, a1 + 2, a1 + 3);
      v21 = *(a2 - 1);
      v22 = a1[3];
      if (*(_QWORD *)(v21 + 360) < *(_QWORD *)(v22 + 360))
      {
        *v20 = v21;
        *(a2 - 1) = v22;
        v23 = *v20;
        v24 = *v19;
        v25 = *(_QWORD *)(*v20 + 360);
        if (v25 < *(_QWORD *)(*v19 + 360))
        {
          *v19 = v23;
          *v20 = v24;
          v26 = *v18;
          if (v25 < *(_QWORD *)(*v18 + 360))
          {
            a1[1] = v23;
            a1[2] = v26;
            v27 = *a1;
            if (v25 < *(_QWORD *)(*a1 + 360))
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrRegAllocUtil::FindSortedConsumersAndProducers(ZinIrTensor const*,std::vector<ZinANELayer *> &,std::vector<ZinANELayer *> &,std::optional<ZinTensorFamilyUtil> const&)::$_0 &,ZinANELayer **>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    v14 = *(_QWORD *)(*v9 + 360);
    if (v14 < *(_QWORD *)(*v8 + 360))
    {
      v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        v16 = v15 - 8;
        if (v15 == 8)
          break;
        v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *(_QWORD *)(v13 + 360))
        {
          v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

_QWORD *std::vector<ZinIrTensor *>::__assign_with_size[abi:ne180100]<std::__tree_const_iterator<ZinIrTensor *,std::__tree_node<ZinIrTensor *,void *> *,long>,std::__tree_const_iterator<ZinIrTensor *,std::__tree_node<ZinIrTensor *,void *> *,long>>(_QWORD *a1, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = a1[2];
  v9 = (_QWORD *)*a1;
  if (a4 <= (v8 - *a1) >> 3)
  {
    v13 = (uint64_t)(a1[1] - (_QWORD)v9) >> 3;
    if (v13 >= a4)
    {
      result = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__tree_const_iterator<ZinIrTensor *,std::__tree_node<ZinIrTensor *,void *> *,long>,std::__tree_const_iterator<ZinIrTensor *,std::__tree_node<ZinIrTensor *,void *> *,long>,ZinIrTensor **,0>(a2, a3, v9);
      a1[1] = v15;
    }
    else
    {
      v16 = a2;
      std::__advance[abi:ne180100]<std::__tree_const_iterator<std::shared_ptr<ZinIrTensor>,std::__tree_node<std::shared_ptr<ZinIrTensor>,void *> *,long>>(&v16, v13);
      v14 = v16;
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__tree_const_iterator<ZinIrTensor *,std::__tree_node<ZinIrTensor *,void *> *,long>,std::__tree_const_iterator<ZinIrTensor *,std::__tree_node<ZinIrTensor *,void *> *,long>,ZinIrTensor **,0>(a2, v16, (_QWORD *)*a1);
      return (_QWORD *)std::vector<ZinIrSymbol *>::__construct_at_end<std::__tree_const_iterator<ZinIrSymbol *,std::__tree_node<ZinIrSymbol *,void *> *,long>,std::__tree_const_iterator<ZinIrSymbol *,std::__tree_node<ZinIrSymbol *,void *> *,long>>((uint64_t)a1, v14, a3);
    }
  }
  else
  {
    if (v9)
    {
      a1[1] = v9;
      operator delete(v9);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 61)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    std::vector<double>::__vallocate[abi:ne180100](a1, v11);
    return (_QWORD *)std::vector<ZinIrSymbol *>::__construct_at_end<std::__tree_const_iterator<ZinIrSymbol *,std::__tree_node<ZinIrSymbol *,void *> *,long>,std::__tree_const_iterator<ZinIrSymbol *,std::__tree_node<ZinIrSymbol *,void *> *,long>>((uint64_t)a1, a2, a3);
  }
  return result;
}

_QWORD *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long>,std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long>,std::back_insert_iterator<std::vector<ZinIrOpLayer *>>>(uint64_t a1, _QWORD *a2, _QWORD *a3, void **a4)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  void **v10;

  v4 = a2;
  v10 = a4;
  if (a2 == a3)
    return a2;
  v5 = a3;
  do
  {
    std::back_insert_iterator<std::vector<ZinIrOpLayer *>>::operator=[abi:ne180100](&v10, v4 + 4);
    v6 = (_QWORD *)v4[1];
    if (v6)
    {
      do
      {
        v7 = v6;
        v6 = (_QWORD *)*v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        v7 = (_QWORD *)v4[2];
        v8 = *v7 == (_QWORD)v4;
        v4 = v7;
      }
      while (!v8);
    }
    v4 = v7;
  }
  while (v7 != v5);
  return v5;
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,ZinIrLocalRegAlloc::AllocateResidentTensorsWithPermutation(std::vector<ZinIrTensor *> &)::$_0 &,ZinIrTensor **,false>(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  BOOL v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t *v87;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v38 = *(a2 - 1);
        v39 = *v8;
        if (*(_QWORD *)(v38 + 8) > *(_QWORD *)(*v8 + 8))
        {
          *v8 = v38;
          *(a2 - 1) = v39;
        }
        return result;
      case 3uLL:
        return (unint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrLocalRegAlloc::AllocateResidentTensorsWithPermutation(std::vector<ZinIrTensor *> &)::$_0 &,ZinIrTensor **>(v8, v8 + 1, a2 - 1);
      case 4uLL:
        return (unint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrLocalRegAlloc::AllocateResidentTensorsWithPermutation(std::vector<ZinIrTensor *> &)::$_0 &,ZinIrTensor **>(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5uLL:
        v40 = v8 + 1;
        v41 = v8 + 2;
        v42 = v8 + 3;
        result = (unint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrLocalRegAlloc::AllocateResidentTensorsWithPermutation(std::vector<ZinIrTensor *> &)::$_0 &,ZinIrTensor **>(v8, v8 + 1, v8 + 2, v8 + 3);
        v43 = *(a2 - 1);
        v44 = v8[3];
        if (*(_QWORD *)(v43 + 8) > *(_QWORD *)(v44 + 8))
        {
          *v42 = v43;
          *(a2 - 1) = v44;
          v45 = *v42;
          v46 = *v41;
          v47 = *(_QWORD *)(*v42 + 8);
          if (v47 > *(_QWORD *)(*v41 + 8))
          {
            *v41 = v45;
            *v42 = v46;
            v48 = *v40;
            if (v47 > *(_QWORD *)(*v40 + 8))
            {
              v8[1] = v45;
              v8[2] = v48;
              v49 = *v8;
              if (v47 > *(_QWORD *)(*v8 + 8))
              {
                *v8 = v45;
                v8[1] = v49;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v50 = v8 + 1;
          v52 = v8 == a2 || v50 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v52)
            {
              v53 = 0;
              v54 = v8;
              do
              {
                v56 = *v54;
                v55 = v54[1];
                v54 = v50;
                v57 = *(_QWORD *)(v55 + 8);
                if (v57 > *(_QWORD *)(v56 + 8))
                {
                  v58 = v53;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v58 + 8) = v56;
                    if (!v58)
                      break;
                    v56 = *(uint64_t *)((char *)v8 + v58 - 8);
                    v58 -= 8;
                    if (v57 <= *(_QWORD *)(v56 + 8))
                    {
                      v59 = (uint64_t *)((char *)v8 + v58 + 8);
                      goto LABEL_80;
                    }
                  }
                  v59 = v8;
LABEL_80:
                  *v59 = v55;
                }
                v50 = v54 + 1;
                v53 += 8;
              }
              while (v54 + 1 != a2);
            }
          }
          else if (!v52)
          {
            do
            {
              v90 = *v7;
              v89 = v7[1];
              v7 = v50;
              v91 = *(_QWORD *)(v89 + 8);
              if (v91 > *(_QWORD *)(v90 + 8))
              {
                do
                {
                  *v50 = v90;
                  v90 = *(v50 - 2);
                  --v50;
                }
                while (v91 > *(_QWORD *)(v90 + 8));
                *v50 = v89;
              }
              v50 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v60 = (v10 - 2) >> 1;
            v61 = v60;
            do
            {
              v62 = v61;
              if (v60 >= v61)
              {
                v63 = (2 * v61) | 1;
                v64 = &v8[v63];
                v65 = *v64;
                if (2 * v62 + 2 < (uint64_t)v10)
                {
                  result = *(_QWORD *)(v65 + 8);
                  if (result > *(_QWORD *)(v64[1] + 8))
                  {
                    v65 = v64[1];
                    ++v64;
                    v63 = 2 * v62 + 2;
                  }
                }
                v66 = &v8[v62];
                v67 = *v66;
                v68 = *(_QWORD *)(*v66 + 8);
                if (*(_QWORD *)(v65 + 8) <= v68)
                {
                  do
                  {
                    v69 = v64;
                    *v66 = v65;
                    if (v60 < v63)
                      break;
                    result = (2 * v63) | 1;
                    v64 = &v8[result];
                    v70 = 2 * v63 + 2;
                    v65 = *v64;
                    if (v70 < (uint64_t)v10 && *(_QWORD *)(v65 + 8) > *(_QWORD *)(v64[1] + 8))
                    {
                      v65 = v64[1];
                      ++v64;
                      result = v70;
                    }
                    v66 = v69;
                    v63 = result;
                  }
                  while (*(_QWORD *)(v65 + 8) <= v68);
                  *v69 = v67;
                }
              }
              v61 = v62 - 1;
            }
            while (v62);
            v71 = (unint64_t)v9 >> 3;
            do
            {
              v72 = 0;
              v73 = *v8;
              v74 = v8;
              do
              {
                v75 = &v74[v72];
                v78 = v75[1];
                v76 = v75 + 1;
                v77 = v78;
                v79 = (2 * v72) | 1;
                v80 = 2 * v72 + 2;
                if (v80 < v71)
                {
                  result = *(_QWORD *)(v77 + 8);
                  if (result > *(_QWORD *)(v76[1] + 8))
                  {
                    v77 = v76[1];
                    ++v76;
                    v79 = v80;
                  }
                }
                *v74 = v77;
                v74 = v76;
                v72 = v79;
              }
              while (v79 <= (uint64_t)((unint64_t)(v71 - 2) >> 1));
              if (v76 == --a2)
              {
                *v76 = v73;
              }
              else
              {
                *v76 = *a2;
                *a2 = v73;
                v81 = (char *)v76 - (char *)v8 + 8;
                if (v81 >= 9)
                {
                  v82 = (((unint64_t)v81 >> 3) - 2) >> 1;
                  v83 = &v8[v82];
                  v84 = *v83;
                  v85 = *v76;
                  v86 = *(_QWORD *)(*v76 + 8);
                  if (*(_QWORD *)(*v83 + 8) > v86)
                  {
                    do
                    {
                      v87 = v83;
                      *v76 = v84;
                      if (!v82)
                        break;
                      v82 = (v82 - 1) >> 1;
                      v83 = &v8[v82];
                      v84 = *v83;
                      v76 = v87;
                    }
                    while (*(_QWORD *)(*v83 + 8) > v86);
                    *v87 = v85;
                  }
                }
              }
            }
            while (v71-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = (unint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrLocalRegAlloc::AllocateResidentTensorsWithPermutation(std::vector<ZinIrTensor *> &)::$_0 &,ZinIrTensor **>(&v7[v10 >> 1], v7, a2 - 1);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrLocalRegAlloc::AllocateResidentTensorsWithPermutation(std::vector<ZinIrTensor *> &)::$_0 &,ZinIrTensor **>(v7, &v7[v10 >> 1], a2 - 1);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrLocalRegAlloc::AllocateResidentTensorsWithPermutation(std::vector<ZinIrTensor *> &)::$_0 &,ZinIrTensor **>(v7 + 1, v12 - 1, a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrLocalRegAlloc::AllocateResidentTensorsWithPermutation(std::vector<ZinIrTensor *> &)::$_0 &,ZinIrTensor **>(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = (unint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrLocalRegAlloc::AllocateResidentTensorsWithPermutation(std::vector<ZinIrTensor *> &)::$_0 &,ZinIrTensor **>(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0)
        {
          v15 = *(_QWORD *)(v14 + 8);
          if (*(_QWORD *)(*(v7 - 1) + 8) > v15)
            goto LABEL_12;
          if (v15 <= *(_QWORD *)(*(a2 - 1) + 8))
          {
            v30 = v7 + 1;
            do
            {
              v8 = v30;
              if (v30 >= a2)
                break;
              ++v30;
            }
            while (v15 <= *(_QWORD *)(*v8 + 8));
          }
          else
          {
            v8 = v7;
            do
            {
              v29 = v8[1];
              ++v8;
            }
            while (v15 <= *(_QWORD *)(v29 + 8));
          }
          v31 = a2;
          if (v8 < a2)
          {
            v31 = a2;
            do
              v32 = *--v31;
            while (v15 > *(_QWORD *)(v32 + 8));
          }
          if (v8 < v31)
          {
            v33 = *v8;
            v34 = *v31;
            do
            {
              *v8 = v34;
              *v31 = v33;
              do
              {
                v35 = v8[1];
                ++v8;
                v33 = v35;
              }
              while (v15 <= *(_QWORD *)(v35 + 8));
              do
              {
                v36 = *--v31;
                v34 = v36;
              }
              while (v15 > *(_QWORD *)(v36 + 8));
            }
            while (v8 < v31);
          }
          v37 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v37;
          a4 = 0;
          *v37 = v14;
          continue;
        }
        v15 = *(_QWORD *)(v14 + 8);
LABEL_12:
        v16 = 0;
        do
          v17 = v7[++v16];
        while (*(_QWORD *)(v17 + 8) > v15);
        v18 = &v7[v16];
        v19 = a2;
        if (v16 == 1)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *--v19;
          }
          while (*(_QWORD *)(v21 + 8) <= v15);
        }
        else
        {
          do
            v20 = *--v19;
          while (*(_QWORD *)(v20 + 8) <= v15);
        }
        if (v18 >= v19)
        {
          v27 = v18 - 1;
        }
        else
        {
          v22 = *v19;
          v23 = &v7[v16];
          v24 = v19;
          do
          {
            *v23 = v22;
            *v24 = v17;
            do
            {
              v25 = v23[1];
              ++v23;
              v17 = v25;
            }
            while (*(_QWORD *)(v25 + 8) > v15);
            do
            {
              v26 = *--v24;
              v22 = v26;
            }
            while (*(_QWORD *)(v26 + 8) <= v15);
          }
          while (v23 < v24);
          v27 = v23 - 1;
        }
        if (v27 != v7)
          *v7 = *v27;
        *v27 = v14;
        if (v18 < v19)
        {
LABEL_33:
          result = std::__introsort<std::_ClassicAlgPolicy,ZinIrLocalRegAlloc::AllocateResidentTensorsWithPermutation(std::vector<ZinIrTensor *> &)::$_0 &,ZinIrTensor **,false>(v7, v27, a3, a4 & 1);
          a4 = 0;
          v8 = v27 + 1;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrLocalRegAlloc::AllocateResidentTensorsWithPermutation(std::vector<ZinIrTensor *> &)::$_0 &,ZinIrTensor **>(v7, v27);
        v8 = v27 + 1;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrLocalRegAlloc::AllocateResidentTensorsWithPermutation(std::vector<ZinIrTensor *> &)::$_0 &,ZinIrTensor **>(v27 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_33;
        }
        a2 = v27;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrLocalRegAlloc::AllocateResidentTensorsWithPermutation(std::vector<ZinIrTensor *> &)::$_0 &,ZinIrTensor **>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v3 = *a2;
  v4 = *result;
  v5 = *(_QWORD *)(*a2 + 8);
  v6 = *(_QWORD *)(*result + 8);
  v7 = *a3;
  v8 = *(_QWORD *)(*a3 + 8);
  if (v5 <= v6)
  {
    if (v8 > v5)
    {
      *a2 = v7;
      *a3 = v3;
      v9 = *result;
      if (*(_QWORD *)(*a2 + 8) > *(_QWORD *)(*result + 8))
      {
        *result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 <= v5)
    {
      *result = v3;
      *a2 = v4;
      if (*(_QWORD *)(*a3 + 8) <= v6)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v7;
    }
    *a3 = v4;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrLocalRegAlloc::AllocateResidentTensorsWithPermutation(std::vector<ZinIrTensor *> &)::$_0 &,ZinIrTensor **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*(_QWORD *)(v6 + 8) > *(_QWORD *)(*a1 + 8))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrLocalRegAlloc::AllocateResidentTensorsWithPermutation(std::vector<ZinIrTensor *> &)::$_0 &,ZinIrTensor **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrLocalRegAlloc::AllocateResidentTensorsWithPermutation(std::vector<ZinIrTensor *> &)::$_0 &,ZinIrTensor **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v18 = a1 + 1;
      v19 = a1 + 2;
      v20 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrLocalRegAlloc::AllocateResidentTensorsWithPermutation(std::vector<ZinIrTensor *> &)::$_0 &,ZinIrTensor **>(a1, a1 + 1, a1 + 2, a1 + 3);
      v21 = *(a2 - 1);
      v22 = a1[3];
      if (*(_QWORD *)(v21 + 8) > *(_QWORD *)(v22 + 8))
      {
        *v20 = v21;
        *(a2 - 1) = v22;
        v23 = *v20;
        v24 = *v19;
        v25 = *(_QWORD *)(*v20 + 8);
        if (v25 > *(_QWORD *)(*v19 + 8))
        {
          *v19 = v23;
          *v20 = v24;
          v26 = *v18;
          if (v25 > *(_QWORD *)(*v18 + 8))
          {
            a1[1] = v23;
            a1[2] = v26;
            v27 = *a1;
            if (v25 > *(_QWORD *)(*a1 + 8))
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrLocalRegAlloc::AllocateResidentTensorsWithPermutation(std::vector<ZinIrTensor *> &)::$_0 &,ZinIrTensor **>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    v14 = *(_QWORD *)(*v9 + 8);
    if (v14 > *(_QWORD *)(*v8 + 8))
    {
      v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        v16 = v15 - 8;
        if (v15 == 8)
          break;
        v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 <= *(_QWORD *)(v13 + 8))
        {
          v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrLocalRegAlloc::AllocateResidentTensorsWithPermutation(std::vector<ZinIrTensor *> &)::$_0 &,ZinIrTensor **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrLocalRegAlloc::AllocateResidentTensorsWithPermutation(std::vector<ZinIrTensor *> &)::$_0 &,ZinIrTensor **>(a1, a2, a3);
  v9 = *a3;
  if (*(_QWORD *)(*a4 + 8) > *(_QWORD *)(*a3 + 8))
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*(_QWORD *)(*a3 + 8) > *(_QWORD *)(*a2 + 8))
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*(_QWORD *)(*a2 + 8) > *(_QWORD *)(*a1 + 8))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

char *std::vector<MirInfoChannelAssignment>::__assign_with_size[abi:ne180100]<MirInfoChannelAssignment const*,MirInfoChannelAssignment const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  uint64_t v17;
  size_t v18;
  void *v19;
  char *v20;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *(_QWORD *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x666666666666666)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x333333333333333)
      v12 = 0x666666666666666;
    else
      v12 = v11;
    result = std::vector<ZinMirInterchangeInfo>::__vallocate[abi:ne180100](v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v17 - 7;
      v19 = v9;
      v20 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0xCCCCCCCCCCCCCCCDLL * ((v15 - v9) >> 3) >= a4)
    goto LABEL_16;
  v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9 - 7);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v17 - 7;
    v19 = v9;
    v20 = v16;
LABEL_18:
    result = (char *)memmove(v19, v20, v18);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

_OWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<ZinMirWorkUnitShapeCandidate const*>,std::__wrap_iter<ZinMirWorkUnitShapeCandidate const*>,std::back_insert_iterator<std::vector<ZinMirWorkUnitShapeCandidate>>,0>(_OWORD *a1, _OWORD *a2, void **a3)
{
  _OWORD *v3;
  _OWORD *v4;
  void **v6;

  v3 = a1;
  v6 = a3;
  if (a1 == a2)
    return a1;
  v4 = a2;
  do
  {
    std::back_insert_iterator<std::vector<ZinMirWorkUnitShapeCandidate>>::operator=[abi:ne180100](&v6, v3);
    v3 += 5;
  }
  while (v3 != v4);
  return v4;
}

void ***std::back_insert_iterator<std::vector<ZinMirWorkUnitShapeCandidate>>::operator=[abi:ne180100](void ***a1, _OWORD *a2)
{
  void **v4;
  _OWORD *v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v4 = *a1;
  v5 = (*a1)[1];
  v6 = *a1;
  v9 = (unint64_t)v6[2];
  v7 = (uint64_t)(v6 + 2);
  v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    v14 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v5 - (_BYTE *)*v4) >> 4);
    v15 = v14 + 1;
    if (v14 + 1 > 0x333333333333333)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 - (_QWORD)*v4) >> 4);
    if (2 * v16 > v15)
      v15 = 2 * v16;
    if (v16 >= 0x199999999999999)
      v17 = 0x333333333333333;
    else
      v17 = v15;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>(v7, v17);
    else
      v18 = 0;
    v19 = &v18[80 * v14];
    v20 = &v18[80 * v17];
    *(_OWORD *)v19 = *a2;
    v21 = a2[1];
    v22 = a2[2];
    v23 = a2[4];
    *((_OWORD *)v19 + 3) = a2[3];
    *((_OWORD *)v19 + 4) = v23;
    *((_OWORD *)v19 + 1) = v21;
    *((_OWORD *)v19 + 2) = v22;
    v13 = v19 + 80;
    v25 = (char *)*v4;
    v24 = (char *)v4[1];
    if (v24 != *v4)
    {
      do
      {
        *((_OWORD *)v19 - 5) = *((_OWORD *)v24 - 5);
        v26 = *((_OWORD *)v24 - 4);
        v27 = *((_OWORD *)v24 - 3);
        v28 = *((_OWORD *)v24 - 2);
        *(_OWORD *)(v19 - 18) = *(_OWORD *)(v24 - 18);
        *((_OWORD *)v19 - 3) = v27;
        *((_OWORD *)v19 - 2) = v28;
        *((_OWORD *)v19 - 4) = v26;
        v19 -= 80;
        v24 -= 80;
      }
      while (v24 != v25);
      v24 = (char *)*v4;
    }
    *v4 = v19;
    v4[1] = v13;
    v4[2] = v20;
    if (v24)
      operator delete(v24);
  }
  else
  {
    *v5 = *a2;
    v10 = a2[1];
    v11 = a2[2];
    v12 = a2[4];
    v5[3] = a2[3];
    v5[4] = v12;
    v5[1] = v10;
    v5[2] = v11;
    v13 = v5 + 5;
  }
  v4[1] = v13;
  return a1;
}

uint64_t std::__tuple_compare_three_way[abi:ne180100]<unsigned long const&,BOOL const&,BOOL const&,unsigned long const&,BOOL const&,BOOL const&,0ul,1ul,2ul>(unint64_t **a1, unint64_t **a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;

  v2 = **a1;
  v3 = **a2;
  v4 = v2 == v3;
  if (v2 < v3)
    v5 = 0xFFFFFFFFLL;
  else
    v5 = 1;
  if (v4)
  {
    v6 = *(unsigned __int8 *)a1[1];
    v7 = *(unsigned __int8 *)a2[1];
    v8 = v6 == v7;
    v5 = v6 < v7 ? 0xFFFFFFFFLL : 1;
    if (v8)
    {
      v9 = *(unsigned __int8 *)a1[2];
      v10 = *(unsigned __int8 *)a2[2];
      v11 = v9 == v10;
      if (v9 < v10)
        LODWORD(v5) = -1;
      else
        LODWORD(v5) = 1;
      if (v11)
        return 0;
      else
        return v5;
    }
  }
  return v5;
}

uint64_t std::__hash_table<std::__hash_value_type<ZinIrTensor const*,ZinIrLocalRegAlloc::TensorAttributeCache>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,ZinIrLocalRegAlloc::TensorAttributeCache>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,ZinIrLocalRegAlloc::TensorAttributeCache>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,ZinIrLocalRegAlloc::TensorAttributeCache>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<ZinIrTensor const*,ZinIrLocalRegAlloc::TensorAttributeCache>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,ZinIrLocalRegAlloc::TensorAttributeCache>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,ZinIrLocalRegAlloc::TensorAttributeCache>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,ZinIrLocalRegAlloc::TensorAttributeCache>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<ZinIrTensor const*,ZinIrLocalRegAlloc::TensorAttributeCache>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,ZinIrLocalRegAlloc::TensorAttributeCache>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,ZinIrLocalRegAlloc::TensorAttributeCache>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,ZinIrLocalRegAlloc::TensorAttributeCache>>>::__deallocate_node(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[4];
      if (v4)
      {
        v2[5] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__tree<std::__value_type<ZinIrOpLayer *,ZinMirL2Config>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,ZinMirL2Config>,std::less<ZinIrOpLayer *>,true>,std::allocator<std::__value_type<ZinIrOpLayer *,ZinMirL2Config>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<ZinIrOpLayer *,ZinMirL2Config>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,ZinMirL2Config>,std::less<ZinIrOpLayer *>,true>,std::allocator<std::__value_type<ZinIrOpLayer *,ZinMirL2Config>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<ZinIrOpLayer *,ZinMirL2Config>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,ZinMirL2Config>,std::less<ZinIrOpLayer *>,true>,std::allocator<std::__value_type<ZinIrOpLayer *,ZinMirL2Config>>>::destroy(a1, a2[1]);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)(a2 + 74));
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)(a2 + 68));
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)(a2 + 62));
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<ZinIrOpLayer *,ZinMirL2Config>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,ZinMirL2Config>,std::less<ZinIrOpLayer *>,true>,std::allocator<std::__value_type<ZinIrOpLayer *,ZinMirL2Config>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer *&&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v11;

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = (uint64_t **)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<ZinIrOpLayer *,ZinMirL2Config>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,ZinMirL2Config>,std::less<ZinIrOpLayer *>,true>,std::allocator<std::__value_type<ZinIrOpLayer *,ZinMirL2Config>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer *&&>,std::tuple<>>(a1, a4, (uint64_t)&v11);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v6, v11);
    return v11;
  }
  return (uint64_t *)v8;
}

double std::__tree<std::__value_type<ZinIrOpLayer *,ZinMirL2Config>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,ZinMirL2Config>,std::less<ZinIrOpLayer *>,true>,std::allocator<std::__value_type<ZinIrOpLayer *,ZinMirL2Config>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer *&&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, _QWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  double result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x278uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *((_QWORD *)v6 + 4) = **a2;
  bzero(v6 + 72, 0x230uLL);
  *(int64x2_t *)(v6 + 40) = vdupq_n_s64(1uLL);
  *((_QWORD *)v6 + 10) = 0;
  *((_QWORD *)v6 + 11) = 0;
  v6[96] = 0;
  v6[72] = 0;
  *((_QWORD *)v6 + 7) = 1;
  *((_QWORD *)v6 + 8) = 0;
  *((_QWORD *)v6 + 15) = 1;
  *((_QWORD *)v6 + 16) = 0;
  *((_QWORD *)v6 + 17) = 0;
  *((_QWORD *)v6 + 18) = 0;
  *((_WORD *)v6 + 76) = 0;
  *((_QWORD *)v6 + 20) = 4;
  result = 0.0;
  *(_OWORD *)(v6 + 280) = 0u;
  *(_OWORD *)(v6 + 296) = 0u;
  *(_OWORD *)(v6 + 312) = 0u;
  v6[328] = 0;
  v6[400] = 0;
  *((_OWORD *)v6 + 24) = 0u;
  *((_OWORD *)v6 + 23) = 0u;
  *((_OWORD *)v6 + 22) = 0u;
  v6[472] = 0;
  *(_OWORD *)(v6 + 440) = 0u;
  *(_OWORD *)(v6 + 456) = 0u;
  *(_OWORD *)(v6 + 424) = 0u;
  *((_OWORD *)v6 + 31) = 0u;
  *((_OWORD *)v6 + 32) = 0u;
  *((_OWORD *)v6 + 12) = 0u;
  *((_OWORD *)v6 + 13) = 0u;
  *(_OWORD *)(v6 + 217) = 0u;
  *((_QWORD *)v6 + 31) = 0;
  *((_QWORD *)v6 + 32) = 0;
  *((_QWORD *)v6 + 30) = 0;
  v6[264] = 0;
  *((_DWORD *)v6 + 132) = 1065353216;
  *((_OWORD *)v6 + 34) = 0u;
  *((_OWORD *)v6 + 35) = 0u;
  *((_DWORD *)v6 + 144) = 1065353216;
  *((_OWORD *)v6 + 38) = 0u;
  *((_OWORD *)v6 + 37) = 0u;
  *((_DWORD *)v6 + 156) = 1065353216;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::__erase_unique<ZinIrTensor *>(_QWORD *a1, _QWORD *a2)
{
  uint64_t *result;

  result = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinMirUnit> const>,std::vector<std::reference_wrapper<std::shared_ptr<ZinMirUnit> const>>>,std::__unordered_map_hasher<std::reference_wrapper<std::shared_ptr<ZinMirUnit> const>,std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinMirUnit> const>,std::vector<std::reference_wrapper<std::shared_ptr<ZinMirUnit> const>>>,std::hash<std::reference_wrapper<std::shared_ptr<ZinMirUnit> const>>,std::equal_to<std::reference_wrapper<std::shared_ptr<ZinMirUnit> const>>,true>,std::__unordered_map_equal<std::reference_wrapper<std::shared_ptr<ZinMirUnit> const>,std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinMirUnit> const>,std::vector<std::reference_wrapper<std::shared_ptr<ZinMirUnit> const>>>,std::equal_to<std::reference_wrapper<std::shared_ptr<ZinMirUnit> const>>,std::hash<std::reference_wrapper<std::shared_ptr<ZinMirUnit> const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::shared_ptr<ZinMirUnit> const>,std::vector<std::reference_wrapper<std::shared_ptr<ZinMirUnit> const>>>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<ZinIrTensor const*,long>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,long>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,long>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,long>>>::__emplace_unique_impl<std::pair<ZinIrTensor*,long>>(_QWORD *a1, unint64_t *a2)
{
  _QWORD *inserted;
  char v4;
  void *v5;
  void *__p;

  std::__hash_table<std::__hash_value_type<ZinIrTensor const*,long>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,long>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,long>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,long>>>::__construct_node<std::pair<ZinIrTensor*,long>>((uint64_t)a1, a2, (uint64_t)&__p);
  inserted = std::__hash_table<ZinIrOpLayer *,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__node_insert_unique(a1, __p);
  if ((v4 & 1) == 0)
  {
    v5 = __p;
    __p = 0;
    if (v5)
      operator delete(v5);
  }
  return inserted;
}

void sub_206DCCB80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<ZinIrTensor const*,long>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,long>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,long>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,long>>>::__construct_node<std::pair<ZinIrTensor*,long>>@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v5 = a1 + 16;
  result = operator new(0x20uLL);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v5;
  v7 = *a2;
  v8 = a2[1];
  result[2] = *a2;
  result[3] = v8;
  *(_BYTE *)(a3 + 16) = 1;
  v9 = HIDWORD(v7);
  v10 = 0x9DDFEA08EB382D69 * (((8 * v7) + 8) ^ HIDWORD(v7));
  *result = 0;
  result[1] = 0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) ^ ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) >> 47));
  return result;
}

uint64_t **std::__tree<std::__value_type<std::shared_ptr<ZinBufferDescriptor>,ZinIrSymbol *>,std::__map_value_compare<std::shared_ptr<ZinBufferDescriptor>,std::__value_type<std::shared_ptr<ZinBufferDescriptor>,ZinIrSymbol *>,std::less<std::shared_ptr<ZinBufferDescriptor>>,true>,std::allocator<std::__value_type<std::shared_ptr<ZinBufferDescriptor>,ZinIrSymbol *>>>::__emplace_unique_key_args<std::shared_ptr<ZinBufferDescriptor>,std::shared_ptr<ZinBufferDescriptor> const&,ZinIrSymbol *&>(uint64_t **a1, unint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t **v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD v19[2];
  char v20;

  v8 = a1 + 1;
  v7 = a1[1];
  v9 = a1 + 1;
  v10 = a1 + 1;
  if (v7)
  {
    v11 = *a2;
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v7;
        v12 = v7[4];
        if (v11 >= v12)
          break;
        v7 = *v10;
        v9 = v10;
        if (!*v10)
          goto LABEL_9;
      }
      if (v12 >= v11)
        return v10;
      v7 = v10[1];
      if (!v7)
      {
        v9 = v10 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v13 = (uint64_t *)operator new(0x38uLL);
    v14 = v13;
    v19[1] = v8;
    v15 = a3[1];
    v13[4] = *a3;
    v13[5] = v15;
    if (v15)
    {
      v16 = (unint64_t *)(v15 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v13[6] = *a4;
    v20 = 1;
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, (uint64_t)v10, v9, v13);
    v19[0] = 0;
    std::unique_ptr<std::__tree_node<std::shared_ptr<ZinIrTensor>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<ZinIrTensor>,void *>>>>::reset[abi:ne180100]((uint64_t)v19, 0);
  }
  return (uint64_t **)v14;
}

char *std::__tree<std::__value_type<ZinIrOpLayer const*,std::vector<ZinIrSymbol *>>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,std::vector<ZinIrSymbol *>>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,std::vector<ZinIrSymbol *>>>>::__emplace_unique_key_args<ZinIrOpLayer const*,ZinIrOpLayer const* const&,std::vector<ZinIrSymbol *>>(uint64_t **a1, uint64_t *a2, _QWORD *a3, uint64_t a4)
{
  void **v7;
  char *v8;
  uint64_t **v9;
  uint64_t v11;

  v7 = (void **)std::__tree<std::__value_type<ZinIrOpLayer const*,std::vector<ZinIrSymbol *>>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,std::vector<ZinIrSymbol *>>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,std::vector<ZinIrSymbol *>>>>::__find_equal<ZinIrOpLayer const*>((uint64_t)a1, &v11, a2);
  v8 = (char *)*v7;
  if (!*v7)
  {
    v9 = (uint64_t **)v7;
    v8 = (char *)operator new(0x40uLL);
    *((_QWORD *)v8 + 4) = *a3;
    *(_OWORD *)(v8 + 40) = *(_OWORD *)a4;
    *((_QWORD *)v8 + 7) = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)a4 = 0;
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v11, v9, (uint64_t *)v8);
  }
  return v8;
}

_QWORD *std::__tree<std::__value_type<ZinIrOpLayer const*,std::vector<ZinIrSymbol *>>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,std::vector<ZinIrSymbol *>>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,std::vector<ZinIrSymbol *>>>>::__find_equal<ZinIrOpLayer const*>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = v4;
        if (!ZinIrCircularBufferUtil::ZinLayerScheduleComp::operator()(v7, *a3, v4[4]))
          break;
        v4 = (_QWORD *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!ZinIrCircularBufferUtil::ZinLayerScheduleComp::operator()(v7, v8[4], *a3))
        break;
      v5 = v8 + 1;
      v4 = (_QWORD *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t **std::__tree<std::__value_type<std::shared_ptr<ZinBufferDescriptor>,ZinIrSymbol *>,std::__map_value_compare<std::shared_ptr<ZinBufferDescriptor>,std::__value_type<std::shared_ptr<ZinBufferDescriptor>,ZinIrSymbol *>,std::less<std::shared_ptr<ZinBufferDescriptor>>,true>,std::allocator<std::__value_type<std::shared_ptr<ZinBufferDescriptor>,ZinIrSymbol *>>>::__emplace_unique_key_args<std::shared_ptr<ZinBufferDescriptor>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<ZinBufferDescriptor> const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD v19[2];
  char v20;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = v6[4];
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        return v9;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = (uint64_t *)operator new(0x38uLL);
    v13 = v12;
    v19[1] = v7;
    v14 = *a4;
    v12[4] = **a4;
    v15 = v14[1];
    v12[5] = v15;
    if (v15)
    {
      v16 = (unint64_t *)(v15 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v12[6] = 0;
    v20 = 1;
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, (uint64_t)v9, v8, v12);
    v19[0] = 0;
    std::unique_ptr<std::__tree_node<std::shared_ptr<ZinIrTensor>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<ZinIrTensor>,void *>>>>::reset[abi:ne180100]((uint64_t)v19, 0);
  }
  return (uint64_t **)v13;
}

void std::__tree<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>>>::destroy(uint64_t a1, char *a2)
{
  void **v4;

  if (a2)
  {
    std::__tree<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>>>::destroy(a1, *((_QWORD *)a2 + 1));
    v4 = (void **)(a2 + 40);
    std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v4);
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,ZinIOBarInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIOBarInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIOBarInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,ZinIOBarInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIOBarInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIOBarInfo>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,ZinIOBarInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIOBarInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIOBarInfo>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((_DWORD *)v6 + 16) = 0;
  *((_QWORD *)v6 + 7) = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_206DCD0E0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,SpatialSplitMode>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::set<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100]<std::__wrap_iter<ZinIrOpLayer **>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v4;
  uint64_t *v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::__emplace_hint_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>((uint64_t **)a1, v4, v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_206DCD164(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<ZinIrTensor *,ZinLiveRange>::unordered_map(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::pair<ZinIrTensor * const,ZinLiveRange> const&>(a1, i + 2, (uint64_t)(i + 2));
  return a1;
}

void sub_206DCD1D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::pair<ZinIrTensor * const,ZinLiveRange> const&>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x28uLL);
  *i = 0;
  i[1] = v8;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  i[4] = *(_QWORD *)(a3 + 16);
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_206DCD434(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::list<ZinIrTensor *>::list<std::__list_const_iterator<ZinIrTensor *,void *>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  if (a2 != a3)
  {
    v5 = a2;
    v6 = 1;
    v7 = a1;
    do
    {
      v8 = operator new(0x18uLL);
      v9 = *(_QWORD *)(v5 + 16);
      v8[1] = a1;
      v8[2] = v9;
      *v8 = v7;
      v7[1] = v8;
      *a1 = v8;
      a1[2] = v6;
      v5 = *(_QWORD *)(v5 + 8);
      ++v6;
      v7 = v8;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_206DCD4CC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<ZinIrSection *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::list<ZinIrTensor *>::__sort<ZinIrLocalRegAlloc::ZinIrSortTensors(ZinIrScheduleUtil::ZinOrderedSet<ZinIrTensor *> &,ZinIrLocalRegAlloc::ZinIrTensorPriorityAssignmentPolicy,ZinIrTensor::AllocationHint)::$_1>(uint64_t *result, uint64_t *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  BOOL v20;
  _QWORD *v21;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  BOOL v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  BOOL v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t *i;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  BOOL v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  BOOL v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  unint64_t v58;
  BOOL v59;
  _QWORD *v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  unint64_t v64;
  BOOL v65;
  _QWORD *v66;
  unint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  unint64_t v70;
  BOOL v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  unint64_t v75;
  BOOL v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  unint64_t v80;
  BOOL v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  unint64_t v85;
  BOOL v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  unint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  unint64_t v95;
  BOOL v96;
  _QWORD *v97;
  unint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  unint64_t v101;
  BOOL v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  unint64_t v106;
  BOOL v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  unint64_t v111;
  BOOL v112;
  _QWORD *v113;
  uint64_t *j;
  unint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  unint64_t v118;
  BOOL v119;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  unint64_t v123;
  BOOL v124;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  unint64_t v128;
  BOOL v129;
  _QWORD *v130;
  _QWORD *v131;
  _QWORD *v132;
  unint64_t v133;
  BOOL v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;

  if (a3 < 2)
    return result;
  if (a3 == 2)
  {
    v6 = (uint64_t *)*a2;
    v7 = *(_QWORD *)(*a2 + 16);
    v8 = (_QWORD *)(*a4 + 8);
    v9 = (_QWORD *)*v8;
    if (!*v8)
      goto LABEL_15;
    v10 = (_QWORD *)(*a4 + 8);
    v11 = (_QWORD *)*v10;
    do
    {
      v12 = v11[4];
      v13 = v12 >= v7;
      if (v12 >= v7)
        v14 = v11;
      else
        v14 = v11 + 1;
      if (v13)
        v10 = v11;
      v11 = (_QWORD *)*v14;
    }
    while (*v14);
    if (v10 == v8 || v10[4] > v7)
LABEL_15:
      v10 = (_QWORD *)(*a4 + 8);
    v15 = result[2];
    v16 = v10[5];
    if (!v9)
      goto LABEL_27;
    v17 = (_QWORD *)(*a4 + 8);
    v18 = (_QWORD *)*v17;
    do
    {
      v19 = v18[4];
      v20 = v19 >= v15;
      if (v19 >= v15)
        v21 = v18;
      else
        v21 = v18 + 1;
      if (v20)
        v17 = v18;
      v18 = (_QWORD *)*v21;
    }
    while (*v21);
    if (v17 == v8 || v17[4] > v15)
LABEL_27:
      v17 = (_QWORD *)(*a4 + 8);
    if (v16 == v17[5])
    {
      if (*(_QWORD *)(*(_QWORD *)(v7 + 96) + 48) >= *(_QWORD *)(*(_QWORD *)(v15 + 96) + 48))
        return result;
    }
    else
    {
      if (!v9)
        goto LABEL_70;
      v44 = (_QWORD *)(*a4 + 8);
      v45 = (_QWORD *)*v44;
      do
      {
        v46 = v45[4];
        v47 = v46 >= v7;
        if (v46 >= v7)
          v48 = v45;
        else
          v48 = v45 + 1;
        if (v47)
          v44 = v45;
        v45 = (_QWORD *)*v48;
      }
      while (*v48);
      if (v44 == v8 || v44[4] > v7)
LABEL_70:
        v44 = (_QWORD *)(*a4 + 8);
      v49 = v44[5];
      if (!v9)
        goto LABEL_82;
      v50 = *a4 + 8;
      do
      {
        v51 = v9[4];
        v52 = v51 >= v15;
        if (v51 >= v15)
          v53 = v9;
        else
          v53 = v9 + 1;
        if (v52)
          v50 = (uint64_t)v9;
        v9 = (_QWORD *)*v53;
      }
      while (*v53);
      if ((_QWORD *)v50 == v8 || *(_QWORD *)(v50 + 32) > v15)
LABEL_82:
        v50 = *a4 + 8;
      if (v49 <= *(_QWORD *)(v50 + 40))
        return result;
    }
    v54 = *v6;
    *(_QWORD *)(v54 + 8) = v6[1];
    *(_QWORD *)v6[1] = v54;
    v55 = *result;
    *(_QWORD *)(v55 + 8) = v6;
    *v6 = v55;
    *result = (uint64_t)v6;
    v6[1] = (uint64_t)result;
    return v6;
  }
  v23 = a3 >> 1;
  v24 = (a3 >> 1) + 1;
  v25 = result;
  do
  {
    v25 = (uint64_t *)v25[1];
    --v24;
  }
  while (v24 > 1);
  v26 = (uint64_t *)std::list<ZinIrTensor *>::__sort<ZinIrLocalRegAlloc::ZinIrSortTensors(ZinIrScheduleUtil::ZinOrderedSet<ZinIrTensor *> &,ZinIrLocalRegAlloc::ZinIrTensorPriorityAssignmentPolicy,ZinIrTensor::AllocationHint)::$_1>(result, v25, a3 >> 1, a4);
  result = (uint64_t *)std::list<ZinIrTensor *>::__sort<ZinIrLocalRegAlloc::ZinIrSortTensors(ZinIrScheduleUtil::ZinOrderedSet<ZinIrTensor *> &,ZinIrLocalRegAlloc::ZinIrTensorPriorityAssignmentPolicy,ZinIrTensor::AllocationHint)::$_1>(v25, a2, a3 - v23, a4);
  v27 = result[2];
  v28 = (_QWORD *)(*a4 + 8);
  v29 = (_QWORD *)*v28;
  if (!*v28)
    goto LABEL_43;
  v30 = (_QWORD *)(*a4 + 8);
  v31 = (_QWORD *)*v30;
  do
  {
    v32 = v31[4];
    v33 = v32 >= v27;
    if (v32 >= v27)
      v34 = v31;
    else
      v34 = v31 + 1;
    if (v33)
      v30 = v31;
    v31 = (_QWORD *)*v34;
  }
  while (*v34);
  if (v30 == v28 || v30[4] > v27)
LABEL_43:
    v30 = (_QWORD *)(*a4 + 8);
  v35 = v26[2];
  v36 = v30[5];
  if (!v29)
    goto LABEL_55;
  v37 = (_QWORD *)(*a4 + 8);
  v38 = (_QWORD *)*v37;
  do
  {
    v39 = v38[4];
    v40 = v39 >= v35;
    if (v39 >= v35)
      v41 = v38;
    else
      v41 = v38 + 1;
    if (v40)
      v37 = v38;
    v38 = (_QWORD *)*v41;
  }
  while (*v41);
  if (v37 == v28 || v37[4] > v35)
LABEL_55:
    v37 = (_QWORD *)(*a4 + 8);
  if (v36 == v37[5])
  {
    if (*(_QWORD *)(*(_QWORD *)(v27 + 96) + 48) >= *(_QWORD *)(*(_QWORD *)(v35 + 96) + 48))
    {
LABEL_58:
      v42 = (uint64_t *)v26[1];
      i = result;
      result = v26;
      goto LABEL_167;
    }
  }
  else
  {
    if (!v29)
      goto LABEL_96;
    v56 = (_QWORD *)(*a4 + 8);
    v57 = (_QWORD *)*v56;
    do
    {
      v58 = v57[4];
      v59 = v58 >= v27;
      if (v58 >= v27)
        v60 = v57;
      else
        v60 = v57 + 1;
      if (v59)
        v56 = v57;
      v57 = (_QWORD *)*v60;
    }
    while (*v60);
    if (v56 == v28 || v56[4] > v27)
LABEL_96:
      v56 = (_QWORD *)(*a4 + 8);
    v61 = v56[5];
    if (!v29)
      goto LABEL_108;
    v62 = (_QWORD *)(*a4 + 8);
    v63 = (_QWORD *)*v62;
    do
    {
      v64 = v63[4];
      v65 = v64 >= v35;
      if (v64 >= v35)
        v66 = v63;
      else
        v66 = v63 + 1;
      if (v65)
        v62 = v63;
      v63 = (_QWORD *)*v66;
    }
    while (*v66);
    if (v62 == v28 || v62[4] > v35)
LABEL_108:
      v62 = (_QWORD *)(*a4 + 8);
    if (v61 <= v62[5])
      goto LABEL_58;
  }
  for (i = (uint64_t *)result[1]; i != a2; i = (uint64_t *)i[1])
  {
    v67 = i[2];
    if (!v29)
      goto LABEL_123;
    v68 = (_QWORD *)(*a4 + 8);
    v69 = (_QWORD *)*v68;
    do
    {
      v70 = v69[4];
      v71 = v70 >= v67;
      if (v70 >= v67)
        v72 = v69;
      else
        v72 = v69 + 1;
      if (v71)
        v68 = v69;
      v69 = (_QWORD *)*v72;
    }
    while (*v72);
    if (v68 == v28 || v68[4] > v67)
LABEL_123:
      v68 = (_QWORD *)(*a4 + 8);
    if (!v29)
      goto LABEL_135;
    v73 = (_QWORD *)(*a4 + 8);
    v74 = (_QWORD *)*v73;
    do
    {
      v75 = v74[4];
      v76 = v75 >= v35;
      if (v75 >= v35)
        v77 = v74;
      else
        v77 = v74 + 1;
      if (v76)
        v73 = v74;
      v74 = (_QWORD *)*v77;
    }
    while (*v77);
    if (v73 == v28 || v73[4] > v35)
LABEL_135:
      v73 = (_QWORD *)(*a4 + 8);
    if (v68[5] == v73[5])
    {
      if (*(_QWORD *)(*(_QWORD *)(v67 + 96) + 48) >= *(_QWORD *)(*(_QWORD *)(v35 + 96) + 48))
        goto LABEL_166;
    }
    else
    {
      if (!v29)
        goto LABEL_150;
      v78 = (_QWORD *)(*a4 + 8);
      v79 = (_QWORD *)*v78;
      do
      {
        v80 = v79[4];
        v81 = v80 >= v67;
        if (v80 >= v67)
          v82 = v79;
        else
          v82 = v79 + 1;
        if (v81)
          v78 = v79;
        v79 = (_QWORD *)*v82;
      }
      while (*v82);
      if (v78 == v28 || v78[4] > v67)
LABEL_150:
        v78 = (_QWORD *)(*a4 + 8);
      if (!v29)
        goto LABEL_162;
      v83 = (_QWORD *)(*a4 + 8);
      v84 = (_QWORD *)*v83;
      do
      {
        v85 = v84[4];
        v86 = v85 >= v35;
        if (v85 >= v35)
          v87 = v84;
        else
          v87 = v84 + 1;
        if (v86)
          v83 = v84;
        v84 = (_QWORD *)*v87;
      }
      while (*v87);
      if (v83 == v28 || v83[4] > v35)
LABEL_162:
        v83 = (_QWORD *)(*a4 + 8);
      if (v78[5] <= v83[5])
        goto LABEL_166;
    }
  }
  i = a2;
LABEL_166:
  v88 = *i;
  v89 = *result;
  *(_QWORD *)(v89 + 8) = *(_QWORD *)(*i + 8);
  **(_QWORD **)(v88 + 8) = v89;
  v90 = *v26;
  v42 = (uint64_t *)v26[1];
  *(_QWORD *)(v90 + 8) = result;
  *result = v90;
  *v26 = v88;
  *(_QWORD *)(v88 + 8) = v26;
LABEL_167:
  if (v42 != i && i != a2)
  {
    v91 = i;
    do
    {
      v92 = i[2];
      if (!v29)
        goto LABEL_181;
      v93 = v28;
      v94 = v29;
      do
      {
        v95 = v94[4];
        v96 = v95 >= v92;
        if (v95 >= v92)
          v97 = v94;
        else
          v97 = v94 + 1;
        if (v96)
          v93 = v94;
        v94 = (_QWORD *)*v97;
      }
      while (*v97);
      if (v93 == v28 || v93[4] > v92)
LABEL_181:
        v93 = v28;
      v98 = v42[2];
      if (!v29)
        goto LABEL_193;
      v99 = v28;
      v100 = v29;
      do
      {
        v101 = v100[4];
        v102 = v101 >= v98;
        if (v101 >= v98)
          v103 = v100;
        else
          v103 = v100 + 1;
        if (v102)
          v99 = v100;
        v100 = (_QWORD *)*v103;
      }
      while (*v103);
      if (v99 == v28 || v99[4] > v98)
LABEL_193:
        v99 = v28;
      if (v93[5] == v99[5])
      {
        if (*(_QWORD *)(*(_QWORD *)(v92 + 96) + 48) < *(_QWORD *)(*(_QWORD *)(v98 + 96) + 48))
          goto LABEL_222;
      }
      else
      {
        if (!v29)
          goto LABEL_208;
        v104 = v28;
        v105 = v29;
        do
        {
          v106 = v105[4];
          v107 = v106 >= v92;
          if (v106 >= v92)
            v108 = v105;
          else
            v108 = v105 + 1;
          if (v107)
            v104 = v105;
          v105 = (_QWORD *)*v108;
        }
        while (*v108);
        if (v104 == v28 || v104[4] > v92)
LABEL_208:
          v104 = v28;
        if (!v29)
          goto LABEL_220;
        v109 = v28;
        v110 = v29;
        do
        {
          v111 = v110[4];
          v112 = v111 >= v98;
          if (v111 >= v98)
            v113 = v110;
          else
            v113 = v110 + 1;
          if (v112)
            v109 = v110;
          v110 = (_QWORD *)*v113;
        }
        while (*v113);
        if (v109 == v28 || v109[4] > v98)
LABEL_220:
          v109 = v28;
        if (v104[5] > v109[5])
        {
LABEL_222:
          for (j = (uint64_t *)i[1]; j != a2; j = (uint64_t *)j[1])
          {
            v115 = j[2];
            if (!v29)
              goto LABEL_235;
            v116 = v28;
            v117 = v29;
            do
            {
              v118 = v117[4];
              v119 = v118 >= v115;
              if (v118 >= v115)
                v120 = v117;
              else
                v120 = v117 + 1;
              if (v119)
                v116 = v117;
              v117 = (_QWORD *)*v120;
            }
            while (*v120);
            if (v116 == v28 || v116[4] > v115)
LABEL_235:
              v116 = v28;
            if (!v29)
              goto LABEL_247;
            v121 = v28;
            v122 = v29;
            do
            {
              v123 = v122[4];
              v124 = v123 >= v98;
              if (v123 >= v98)
                v125 = v122;
              else
                v125 = v122 + 1;
              if (v124)
                v121 = v122;
              v122 = (_QWORD *)*v125;
            }
            while (*v125);
            if (v121 == v28 || v121[4] > v98)
LABEL_247:
              v121 = v28;
            if (v116[5] == v121[5])
            {
              if (*(_QWORD *)(*(_QWORD *)(v115 + 96) + 48) >= *(_QWORD *)(*(_QWORD *)(v98 + 96) + 48))
                goto LABEL_278;
            }
            else
            {
              if (!v29)
                goto LABEL_262;
              v126 = v28;
              v127 = v29;
              do
              {
                v128 = v127[4];
                v129 = v128 >= v115;
                if (v128 >= v115)
                  v130 = v127;
                else
                  v130 = v127 + 1;
                if (v129)
                  v126 = v127;
                v127 = (_QWORD *)*v130;
              }
              while (*v130);
              if (v126 == v28 || v126[4] > v115)
LABEL_262:
                v126 = v28;
              if (!v29)
                goto LABEL_274;
              v131 = v28;
              v132 = v29;
              do
              {
                v133 = v132[4];
                v134 = v133 >= v98;
                if (v133 >= v98)
                  v135 = v132;
                else
                  v135 = v132 + 1;
                if (v134)
                  v131 = v132;
                v132 = (_QWORD *)*v135;
              }
              while (*v135);
              if (v131 == v28 || v131[4] > v98)
LABEL_274:
                v131 = v28;
              if (v126[5] <= v131[5])
                goto LABEL_278;
            }
          }
          j = a2;
LABEL_278:
          v136 = *j;
          v137 = *i;
          *(_QWORD *)(v137 + 8) = *(_QWORD *)(*j + 8);
          **(_QWORD **)(v136 + 8) = v137;
          if (v91 == i)
            v91 = j;
          v139 = *v42;
          v138 = (uint64_t *)v42[1];
          *(_QWORD *)(v139 + 8) = i;
          *i = v139;
          *v42 = v136;
          *(_QWORD *)(v136 + 8) = v42;
          v42 = v138;
          i = j;
          continue;
        }
      }
      v42 = (uint64_t *)v42[1];
    }
    while (v42 != v91 && i != a2);
  }
  return result;
}

_QWORD *std::__function::__func<BOOL (*)(CpAllocUtils::AllocationType),std::allocator<BOOL (*)(CpAllocUtils::AllocationType)>,BOOL ()(CpAllocUtils::AllocationType)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24BFFF038;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(CpAllocUtils::AllocationType),std::allocator<BOOL (*)(CpAllocUtils::AllocationType)>,BOOL ()(CpAllocUtils::AllocationType)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_24BFFF038;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(CpAllocUtils::AllocationType),std::allocator<BOOL (*)(CpAllocUtils::AllocationType)>,BOOL ()(CpAllocUtils::AllocationType)>::operator()(uint64_t a1, unsigned int *a2)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*a2);
}

uint64_t std::__function::__func<BOOL (*)(CpAllocUtils::AllocationType),std::allocator<BOOL (*)(CpAllocUtils::AllocationType)>,BOOL ()(CpAllocUtils::AllocationType)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<BOOL (*)(CpAllocUtils::AllocationType),std::allocator<BOOL (*)(CpAllocUtils::AllocationType)>,BOOL ()(CpAllocUtils::AllocationType)>::target_type()
{
}

unint64_t *std::__tree<std::__value_type<ZinIrLocalRegAlloc::WorkUnitPruningKey,unsigned long>,std::__map_value_compare<ZinIrLocalRegAlloc::WorkUnitPruningKey,std::__value_type<ZinIrLocalRegAlloc::WorkUnitPruningKey,unsigned long>,std::less<ZinIrLocalRegAlloc::WorkUnitPruningKey>,true>,std::allocator<std::__value_type<ZinIrLocalRegAlloc::WorkUnitPruningKey,unsigned long>>>::find<ZinIrLocalRegAlloc::WorkUnitPruningKey>(uint64_t a1, unint64_t *a2)
{
  unint64_t *v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t *v7[3];
  unint64_t *v8[3];

  v3 = (unint64_t *)(a1 + 8);
  v4 = std::__tree<std::__value_type<ZinIrLocalRegAlloc::WorkUnitPruningKey,unsigned long>,std::__map_value_compare<ZinIrLocalRegAlloc::WorkUnitPruningKey,std::__value_type<ZinIrLocalRegAlloc::WorkUnitPruningKey,unsigned long>,std::less<ZinIrLocalRegAlloc::WorkUnitPruningKey>,true>,std::allocator<std::__value_type<ZinIrLocalRegAlloc::WorkUnitPruningKey,unsigned long>>>::__lower_bound<ZinIrLocalRegAlloc::WorkUnitPruningKey>(a1, a2, *(unint64_t **)(a1 + 8), (unint64_t *)(a1 + 8));
  if (v3 == v4)
    return v3;
  v5 = v4;
  v8[0] = a2;
  v8[1] = a2 + 1;
  v8[2] = (unint64_t *)((char *)a2 + 9);
  v7[0] = v4 + 4;
  v7[1] = v4 + 5;
  v7[2] = (unint64_t *)((char *)v4 + 41);
  if ((std::__tuple_compare_three_way[abi:ne180100]<unsigned long const&,BOOL const&,BOOL const&,unsigned long const&,BOOL const&,BOOL const&,0ul,1ul,2ul>(v8, v7) & 0x80) != 0)return v3;
  return v5;
}

unint64_t *std::__tree<std::__value_type<ZinIrLocalRegAlloc::WorkUnitPruningKey,unsigned long>,std::__map_value_compare<ZinIrLocalRegAlloc::WorkUnitPruningKey,std::__value_type<ZinIrLocalRegAlloc::WorkUnitPruningKey,unsigned long>,std::less<ZinIrLocalRegAlloc::WorkUnitPruningKey>,true>,std::allocator<std::__value_type<ZinIrLocalRegAlloc::WorkUnitPruningKey,unsigned long>>>::__lower_bound<ZinIrLocalRegAlloc::WorkUnitPruningKey>(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t *v5;
  unint64_t *v7;
  unint64_t *v8;
  char v9;
  unint64_t *v10;
  unint64_t *v12[3];
  unint64_t *v13[3];

  if (a3)
  {
    v5 = a3;
    v7 = a2 + 1;
    v8 = (unint64_t *)((char *)a2 + 9);
    do
    {
      v13[0] = v5 + 4;
      v13[1] = v5 + 5;
      v13[2] = (unint64_t *)((char *)v5 + 41);
      v12[0] = a2;
      v12[1] = v7;
      v12[2] = v8;
      v9 = std::__tuple_compare_three_way[abi:ne180100]<unsigned long const&,BOOL const&,BOOL const&,unsigned long const&,BOOL const&,BOOL const&,0ul,1ul,2ul>(v13, v12);
      if (v9 >= 0)
        v10 = v5;
      else
        v10 = v5 + 1;
      if (v9 >= 0)
        a4 = v5;
      v5 = (unint64_t *)*v10;
    }
    while (*v10);
  }
  return a4;
}

_OWORD *std::__tree<std::__value_type<ZinIrLocalRegAlloc::WorkUnitPruningKey,unsigned long>,std::__map_value_compare<ZinIrLocalRegAlloc::WorkUnitPruningKey,std::__value_type<ZinIrLocalRegAlloc::WorkUnitPruningKey,unsigned long>,std::less<ZinIrLocalRegAlloc::WorkUnitPruningKey>,true>,std::allocator<std::__value_type<ZinIrLocalRegAlloc::WorkUnitPruningKey,unsigned long>>>::__emplace_unique_key_args<ZinIrLocalRegAlloc::WorkUnitPruningKey,std::piecewise_construct_t const&,std::tuple<ZinIrLocalRegAlloc::WorkUnitPruningKey const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = (void **)std::__tree<std::__value_type<ZinIrLocalRegAlloc::WorkUnitPruningKey,unsigned long>,std::__map_value_compare<ZinIrLocalRegAlloc::WorkUnitPruningKey,std::__value_type<ZinIrLocalRegAlloc::WorkUnitPruningKey,unsigned long>,std::less<ZinIrLocalRegAlloc::WorkUnitPruningKey>,true>,std::allocator<std::__value_type<ZinIrLocalRegAlloc::WorkUnitPruningKey,unsigned long>>>::__find_equal<ZinIrLocalRegAlloc::WorkUnitPruningKey>((uint64_t)a1, &v10, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x38uLL);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = 0;
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<ZinIrLocalRegAlloc::WorkUnitPruningKey,unsigned long>,std::__map_value_compare<ZinIrLocalRegAlloc::WorkUnitPruningKey,std::__value_type<ZinIrLocalRegAlloc::WorkUnitPruningKey,unsigned long>,std::less<ZinIrLocalRegAlloc::WorkUnitPruningKey>,true>,std::allocator<std::__value_type<ZinIrLocalRegAlloc::WorkUnitPruningKey,unsigned long>>>::__find_equal<ZinIrLocalRegAlloc::WorkUnitPruningKey>(uint64_t a1, _QWORD *a2, unint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t *v7;
  char *v8;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t *v11;
  char *v12;
  unint64_t *v14;
  unint64_t *v15;
  char *v16;
  unint64_t *v17;
  unint64_t *v18;
  char *v19;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = a3 + 1;
    v8 = (char *)a3 + 9;
    do
    {
      while (1)
      {
        v9 = v4;
        v10 = v4 + 4;
        v17 = a3;
        v18 = v7;
        v19 = v8;
        v11 = v4 + 5;
        v12 = (char *)v4 + 41;
        v14 = v4 + 4;
        v15 = v4 + 5;
        v16 = (char *)v4 + 41;
        if ((std::__tuple_compare_three_way[abi:ne180100]<unsigned long const&,BOOL const&,BOOL const&,unsigned long const&,BOOL const&,BOOL const&,0ul,1ul,2ul>(&v17, &v14) & 0x80) == 0)break;
        v4 = (_QWORD *)*v9;
        v5 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      v17 = v10;
      v18 = v11;
      v19 = v12;
      v14 = a3;
      v15 = v7;
      v16 = v8;
      if ((std::__tuple_compare_three_way[abi:ne180100]<unsigned long const&,BOOL const&,BOOL const&,unsigned long const&,BOOL const&,BOOL const&,0ul,1ul,2ul>(&v17, &v14) & 0x80) == 0)break;
      v5 = v9 + 1;
      v4 = (_QWORD *)v9[1];
    }
    while (v4);
  }
  else
  {
    v9 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v9;
  return v5;
}

uint64_t **std::__tree<std::__value_type<unsigned char,ZinIrSection *>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,ZinIrSection *>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,ZinIrSection *>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, _BYTE **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _BYTE *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((unsigned __int8 *)v6 + 32);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[32] = **a4;
    *((_QWORD *)v11 + 5) = 0;
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t **std::__tree<std::__value_type<unsigned char,ZinIrSection *>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,ZinIrSection *>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,ZinIrSection *>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,ZinIrSection *>>(uint64_t **a1, unsigned __int8 *a2, _OWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((unsigned __int8 *)v5 + 32);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v10 + 2) = *a3;
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void std::__function::__func<ZinIrLocalRegAlloc::FindSortedConflictResidentSymbols(ZinLiveRange const&)::$_0,std::allocator<ZinIrLocalRegAlloc::FindSortedConflictResidentSymbols(ZinLiveRange const&)::$_0>,BOOL ()(ZinIntervalTreeNode<ZinIrSymbol *,ZinLiveRange> const*)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<ZinIrLocalRegAlloc::FindSortedConflictResidentSymbols(ZinLiveRange const&)::$_0,std::allocator<ZinIrLocalRegAlloc::FindSortedConflictResidentSymbols(ZinLiveRange const&)::$_0>,BOOL ()(ZinIntervalTreeNode<ZinIrSymbol *,ZinLiveRange> const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C001088;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ZinIrLocalRegAlloc::FindSortedConflictResidentSymbols(ZinLiveRange const&)::$_0,std::allocator<ZinIrLocalRegAlloc::FindSortedConflictResidentSymbols(ZinLiveRange const&)::$_0>,BOOL ()(ZinIntervalTreeNode<ZinIrSymbol *,ZinLiveRange> const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C001088;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<ZinIrLocalRegAlloc::FindSortedConflictResidentSymbols(ZinLiveRange const&)::$_0,std::allocator<ZinIrLocalRegAlloc::FindSortedConflictResidentSymbols(ZinLiveRange const&)::$_0>,BOOL ()(ZinIntervalTreeNode<ZinIrSymbol *,ZinLiveRange> const*)>::operator()(uint64_t a1, _QWORD **a2)
{
  _QWORD *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = *a2;
  if (std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)(*(_QWORD *)(a1 + 8) + 448), *a2))
  {
    v4 = *(uint64_t **)(a1 + 16);
    v5 = operator new(0x18uLL);
    v5[2] = *v3;
    v6 = *v4;
    *v5 = *v4;
    v5[1] = v4;
    *(_QWORD *)(v6 + 8) = v5;
    *v4 = (uint64_t)v5;
    ++v4[2];
  }
  return 1;
}

uint64_t std::__function::__func<ZinIrLocalRegAlloc::FindSortedConflictResidentSymbols(ZinLiveRange const&)::$_0,std::allocator<ZinIrLocalRegAlloc::FindSortedConflictResidentSymbols(ZinLiveRange const&)::$_0>,BOOL ()(ZinIntervalTreeNode<ZinIrSymbol *,ZinLiveRange> const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrLocalRegAlloc::FindSortedConflictResidentSymbols(ZinLiveRange const&)::$_0,std::allocator<ZinIrLocalRegAlloc::FindSortedConflictResidentSymbols(ZinLiveRange const&)::$_0>,BOOL ()(ZinIntervalTreeNode<ZinIrSymbol *,ZinLiveRange> const*)>::target_type()
{
}

uint64_t *std::list<ZinIrSymbol *>::__sort<ZinIrLocalRegAlloc::FindSortedConflictResidentSymbols(ZinLiveRange const&)::$_1>(uint64_t *result, uint64_t *a2, unint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *i;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *j;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      v4 = (uint64_t *)*a2;
      if (*(_QWORD *)(*(_QWORD *)(*a2 + 16) + 184) > *(_QWORD *)(result[2] + 184))
      {
        v5 = *v4;
        *(_QWORD *)(v5 + 8) = v4[1];
        *(_QWORD *)v4[1] = v5;
        v6 = *result;
        *(_QWORD *)(v6 + 8) = v4;
        *v4 = v6;
        *result = (uint64_t)v4;
        v4[1] = (uint64_t)result;
        return v4;
      }
    }
    else
    {
      v8 = a3 >> 1;
      v9 = (a3 >> 1) + 1;
      v10 = result;
      do
      {
        v10 = (uint64_t *)v10[1];
        --v9;
      }
      while (v9 > 1);
      v11 = (uint64_t *)std::list<ZinIrSymbol *>::__sort<ZinIrLocalRegAlloc::FindSortedConflictResidentSymbols(ZinLiveRange const&)::$_1>(result, v10, a3 >> 1);
      result = (uint64_t *)std::list<ZinIrSymbol *>::__sort<ZinIrLocalRegAlloc::FindSortedConflictResidentSymbols(ZinLiveRange const&)::$_1>(v10, a2, a3 - v8);
      v12 = *(_QWORD *)(v11[2] + 184);
      if (*(_QWORD *)(result[2] + 184) <= v12)
      {
        v14 = (uint64_t *)v11[1];
        i = result;
        result = v11;
      }
      else
      {
        for (i = (uint64_t *)result[1]; i != a2; i = (uint64_t *)i[1])
        {
          if (*(_QWORD *)(i[2] + 184) <= v12)
            goto LABEL_14;
        }
        i = a2;
LABEL_14:
        v15 = *i;
        v16 = *result;
        *(_QWORD *)(v16 + 8) = *(_QWORD *)(*i + 8);
        **(_QWORD **)(v15 + 8) = v16;
        v17 = *v11;
        v14 = (uint64_t *)v11[1];
        *(_QWORD *)(v17 + 8) = result;
        *result = v17;
        *v11 = v15;
        *(_QWORD *)(v15 + 8) = v11;
      }
      if (v14 != i && i != a2)
      {
        v18 = i;
        do
        {
          v19 = *(_QWORD *)(v14[2] + 184);
          if (*(_QWORD *)(i[2] + 184) <= v19)
          {
            v14 = (uint64_t *)v14[1];
          }
          else
          {
            for (j = (uint64_t *)i[1]; j != a2; j = (uint64_t *)j[1])
            {
              if (*(_QWORD *)(j[2] + 184) <= v19)
                goto LABEL_25;
            }
            j = a2;
LABEL_25:
            v21 = *j;
            v22 = *i;
            *(_QWORD *)(v22 + 8) = *(_QWORD *)(*j + 8);
            **(_QWORD **)(v21 + 8) = v22;
            if (v18 == i)
              v18 = j;
            v24 = *v14;
            v23 = (uint64_t *)v14[1];
            *(_QWORD *)(v24 + 8) = i;
            *i = v24;
            *v14 = v21;
            *(_QWORD *)(v21 + 8) = v14;
            v14 = v23;
            i = j;
          }
        }
        while (v14 != v18 && i != a2);
      }
    }
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<ZinIrTensor const*,ZinIrLocalRegAlloc::TensorAttributeCache>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,ZinIrLocalRegAlloc::TensorAttributeCache>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,ZinIrLocalRegAlloc::TensorAttributeCache>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,ZinIrLocalRegAlloc::TensorAttributeCache>>>::__emplace_unique_key_args<ZinIrTensor const*,std::piecewise_construct_t const&,std::tuple<ZinIrTensor const* const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *result;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      result = (_QWORD *)*v11;
      if (*v11)
      {
        do
        {
          v13 = result[1];
          if (v13 == v8)
          {
            if (result[2] == *a2)
              return result;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<ZinIrTensor const*,ZinIrLocalRegAlloc::TensorAttributeCache>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,ZinIrLocalRegAlloc::TensorAttributeCache>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,ZinIrLocalRegAlloc::TensorAttributeCache>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,ZinIrLocalRegAlloc::TensorAttributeCache>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<ZinIrTensor const* const&>,std::tuple<>>(a1, v8, a4, (uint64_t)&v22);
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v22 = *v20;
    *v20 = v22;
  }
  else
  {
    *v22 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v22;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v22)
    {
      v21 = *(_QWORD *)(*v22 + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v21 >= v9)
          v21 %= v9;
      }
      else
      {
        v21 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = v22;
    }
  }
  result = v22;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_206DCE69C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *__p, uint64_t a11)
{
  if (__p)
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::vector<ZinIrOpLayer *>,ZinConcatLayer *>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<ZinIrTensor const*,ZinIrLocalRegAlloc::TensorAttributeCache>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,ZinIrLocalRegAlloc::TensorAttributeCache>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,ZinIrLocalRegAlloc::TensorAttributeCache>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,ZinIrLocalRegAlloc::TensorAttributeCache>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<ZinIrTensor const* const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  uint64_t result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x40uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  *((_QWORD *)v8 + 2) = **a3;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *((_QWORD *)v8 + 7) = 0;
  result = DimensionOrderHint::DimensionOrderHint(v8 + 32, 0);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_206DCE748(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::vector<ZinIrOpLayer *>,ZinConcatLayer *>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned long,ZinInterchangePackingFormat>::unordered_map(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 16 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<unsigned long,ZinIrOpLayer *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,ZinIrOpLayer *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,ZinIrOpLayer *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,ZinIrOpLayer *>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,ZinIrOpLayer *> const&>(a1, a2, a2);
      a2 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  return a1;
}

void sub_206DCE7C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

ZinMirComputeChannelAssignmentParams *std::unique_ptr<ZinMirComputeChannelAssignmentParams>::reset[abi:ne180100](ZinMirComputeChannelAssignmentParams **a1, ZinMirComputeChannelAssignmentParams *a2)
{
  ZinMirComputeChannelAssignmentParams *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    ZinMirComputeChannelAssignmentParams::~ZinMirComputeChannelAssignmentParams(result);
    JUMPOUT(0x20BD002F8);
  }
  return result;
}

void OUTLINED_FUNCTION_13(_QWORD *a1@<X2>, float *a2@<X4>, uint64_t a3@<X8>, float a4@<S0>)
{
  *a2 = a4;
  *a1 = a3;
}

void OUTLINED_FUNCTION_19(float a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, float *a6)
{
  *a6 = a1;
  *a5 = a4;
}

void ZinIrLocalRegAlloc::AllocateResidentSymbol(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
}

void ZinIrLocalRegAlloc::RevertL2DependentConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Schedule change needs to be done succesfully.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrLocalRegAlloc::AllocateNonResidentTensor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Failed to allocate symbol.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrLocalRegAlloc::AllocateMultipleSymbolsToTensor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Could not allocate symbols to buffers\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "ExtractNonOverlappingBufferDescriptors() failed\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrLocalRegAlloc::SetResidentSymbolToLayers()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  float *v4;
  int v5;
  uint64_t v6;
  uint8_t *v7;

  OUTLINED_FUNCTION_14();
  if (v5 < 0)
    v2 = (_QWORD *)*v2;
  OUTLINED_FUNCTION_19(4.8149e-34, v0, v1, (uint64_t)v2, v3, v4);
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], v6, "Error: Failed to set L2 read symbol of %s\n", v7);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  float *v4;
  int v5;
  uint64_t v6;
  uint8_t *v7;

  OUTLINED_FUNCTION_14();
  if (v5 < 0)
    v2 = (_QWORD *)*v2;
  OUTLINED_FUNCTION_19(4.8149e-34, v0, v1, (uint64_t)v2, v3, v4);
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], v6, "Error: Engine layer %s has invalid L2 source type", v7);
}

{
  uint64_t v0;
  uint8_t v1[24];

  OUTLINED_FUNCTION_5(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Error: Failed to set L2 write symbol for %s.\n", v1);
  OUTLINED_FUNCTION_4();
}

void ZinIrLocalRegAlloc::CreateSymbolAliasFromParent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "You need to have a valid parent symbol in order to create a child symbol.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "CreateSymbolAliasFromParent should be called only for TensorSymbolType.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrLocalRegAlloc::SetPostCropChildOriginWrtRootAndOffsetWrtParent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "A valid parent tensor is required to set child's origin_wrt_root and offset_wrt_parent.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "A valid parent symbol is required to set child's origin_wrt_root and offset_wrt_parent.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unaligned output crop is not allowed.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unaligned byte offset should be divisible by width stride.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Call to ZinTensorFormatGetSize API failed.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Parent's symbol should be a tensor symbol.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void SetCumulativeOriginWrtRoot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Parent's symbol should be allocated to figure out child's cumulative origin wrt root.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Reinterpret cast layer is incorrectly created.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "ZinTensorFormatGetSize API call was unsuccessful.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrLocalRegAlloc::AllocateChainSymbol(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Attempting to allocate chain symbol on invalid L2 source type", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrLocalRegAlloc::AllocateOutputDMADefaultBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Channel stride exceeds maximum allowed", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrLocalRegAlloc::SetChainSymbolToLayers()
{
  uint64_t v0;
  uint8_t v1[24];

  OUTLINED_FUNCTION_5(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Error: Failed to set L2 read symbol for %s.\n", v1);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint8_t v1[24];

  OUTLINED_FUNCTION_5(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Error: Attempting to set chain symbol for the SrcIdx of %s, SrcIdx should be resident", v1);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint8_t v1[24];

  OUTLINED_FUNCTION_5(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Error: Engine layer %s has invalid L2 source type", v1);
  OUTLINED_FUNCTION_4();
}

void ZinIrLocalRegAlloc::SetL2CachedSymbolToConsumers()
{
  _QWORD *v0;
  float *v1;
  _QWORD *v2;
  int v3;
  uint64_t v4;
  uint8_t *v5;

  OUTLINED_FUNCTION_17();
  if (v3 < 0)
    v2 = (_QWORD *)*v2;
  OUTLINED_FUNCTION_13(v0, v1, (uint64_t)v2, 4.8149e-34);
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], v4, "Error: Failed to set L2 read symbol of %s\n", v5);
}

{
  _QWORD *v0;
  float *v1;
  _QWORD *v2;
  int v3;
  uint64_t v4;
  uint8_t *v5;

  OUTLINED_FUNCTION_17();
  if (v3 < 0)
    v2 = (_QWORD *)*v2;
  OUTLINED_FUNCTION_13(v0, v1, (uint64_t)v2, 4.8149e-34);
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], v4, "Error: Engine layer %s has invalid L2 source type", v5);
}

void ZinIrLocalRegAlloc::ZinIrSortTensors(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "unknown policy\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrLocalRegAlloc::AllocateConstTensors(char *a1)
{
  _QWORD *v1;
  uint64_t v2;
  int v3;
  _QWORD *v4;
  __int16 v5;
  uint64_t v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v1 = a1 + 24;
  if (a1[47] < 0)
    v1 = (_QWORD *)*v1;
  ZinIrTensor::GetTensorSizeInBytes((ZinIrTensor *)a1);
  v3 = 136315906;
  v4 = v1;
  v5 = 2048;
  v6 = v2;
  v7 = 2080;
  v8 = "/Library/Caches/com.apple.xbs/Sources/ANECompiler/libs/inference/compiler/ZinIrRegAlloc/src/ZinIrLocalRegAlloc.cpp";
  v9 = 1024;
  v10 = 2874;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Error: Failed to allocate %s (size = %zd Bytes) in DRAM (file %s, line %d)\n", (uint8_t *)&v3, 0x26u);
  OUTLINED_FUNCTION_20();
}

void NEDominatesPerf(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_2_2(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "ERROR: Performance model call isn't successful, line: %d, file: %s", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_2_2(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "ERROR: Performance model call isn't successful, line: %d, file: %s", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinIrLocalRegAlloc::OptimizeChainPairDMABufferTileHeight(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Attempting to optimize chain buffer on invalid L2 source type", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrLocalRegAlloc::ZinIrCreateKernelTensorSymbols(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  int v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 128))(&v7);
  OUTLINED_FUNCTION_17();
  if (v3 < 0)
    v2 = (_QWORD *)*v2;
  v9 = 136315138;
  v10 = v2;
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], v1, "tensor: %s\n", (uint8_t *)&v9);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  OUTLINED_FUNCTION_20();
}

void ZinIrLocalRegAlloc::ZinIrCreateKernelTensorSymbols()
{
  uint64_t v0;
  uint8_t v1[24];

  OUTLINED_FUNCTION_5(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "layer: %s\n", v1);
  OUTLINED_FUNCTION_4();
}

void ZinIrLocalRegAlloc::ZinIrCreateKernelTensorSymbols(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Invalid kernel tensor.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Failed to add kernel symbol per NE to tensor mirinfo\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrLocalRegAlloc::GetDramSortingPolicy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "undefined priority", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrLocalRegAlloc::AllocateGuidedResidentTensors()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_2_2(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Tensor should not be allocated yet in chain allocation step.  %s:%d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void ZinIrLocalRegAlloc::AllocateL2DependentTensor()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_2_2(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "RA optimization failed.  %s:%d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_2_2(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Unable to find last producer or first consumer for tensor. %s:%d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void ZinIrLocalRegAlloc::AllocateGuidedChainTensors()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_2_2(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Tensor should not be allocated.  %s:%d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void ZinIrLocalRegAlloc::AllocateChainBuffer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Chaining is incorrectly enabled for TD pair (TID=%zi->TID=%zi) with L2 alias", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void ZinIrLocalRegAlloc::AllocateChainBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Attempting to allocate chain buffer on invalid L2 source type", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrLocalRegAlloc::TryAggressiveChainBufferAllocation(uint8_t *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = 0;
  *a2 = 0;
  OUTLINED_FUNCTION_0_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Failing in reverting back to the original allocation in the aggressive chaining.\n", a1);
}

void ZinIrLocalRegAlloc::AllocateTensorsToDRAM()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "DRAM allocation should always succeed, Failed Tensor : %s, %s:%ud", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_18();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Metadata DRAM allocation should always succeed, Failed Tensor : %s, %s:%ud", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_10();
}

void ZinIrLocalRegAlloc::ZinIrOptimizePoolActiveNEs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "expected one and only one input\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrLocalRegAlloc::ExploreParallelExecutionOpportunity(uint8_t *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = 0;
  *a2 = 0;
  OUTLINED_FUNCTION_0_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Fail finding the parallel execution layers.", a1);
}

void ZinIrLocalRegAlloc::LowerKernelAfterChannelAssignmentParamUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error kernel lowering in RA", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrLocalRegAlloc::AllocateResidentTensorForParallelExecution(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Failed to revert allocation", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Failed to revert schedule", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Failed to change schedule then revert allocation", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrLocalRegAlloc::Run(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v3 = 136315138;
  v4 = "RegAlloc: failed to optimize pool active NEs";
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", (uint8_t *)&v3);
  OUTLINED_FUNCTION_4();
}

{
  int v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v3 = 136315138;
  v4 = "RegAlloc: failed to copy tensor info to mir info.";
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", (uint8_t *)&v3);
  OUTLINED_FUNCTION_4();
}

{
  int v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v3 = 136315138;
  v4 = "RegAlloc: failed to allocate intermediate tensors.";
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", (uint8_t *)&v3);
  OUTLINED_FUNCTION_4();
}

{
  int v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v3 = 136315138;
  v4 = "RegAlloc: failed to allocate const tensors.";
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", (uint8_t *)&v3);
  OUTLINED_FUNCTION_4();
}

{
  int v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v3 = 136315138;
  v4 = "RegAlloc: failed to allocate live IOs.";
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", (uint8_t *)&v3);
  OUTLINED_FUNCTION_4();
}

void ZinIrLocalRegAlloc::Verify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v3 = 136315138;
  v4 = "RegAlloc: failed to verify DMA buffers";
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", (uint8_t *)&v3);
  OUTLINED_FUNCTION_4();
}

{
  int v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v3 = 136315138;
  v4 = "RegAlloc: failed to verify l2 symbols";
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", (uint8_t *)&v3);
  OUTLINED_FUNCTION_4();
}

{
  int v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v3 = 136315138;
  v4 = "RegAlloc: failed to verify tile height.";
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", (uint8_t *)&v3);
  OUTLINED_FUNCTION_4();
}

void ZinIrLocalRegAlloc::Verify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "RegAlloc: dual input tensors does not meet the hardware constraint. \n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrLocalRegAlloc::VerifyTileHeight()
{
  uint64_t v0;
  uint8_t v1[24];

  OUTLINED_FUNCTION_5(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Invalid tile height for SSM for %s", v1);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint8_t v1[24];

  OUTLINED_FUNCTION_5(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Invalid zero tile height for %s", v1);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_5(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_8(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "RCAS tile height %zd is invalid for %s", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_5(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_7_4();
  OUTLINED_FUNCTION_7(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Tile height %zu is greater than hout %zu plus overlap pad for chained producer %s", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_5(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_7_4();
  OUTLINED_FUNCTION_7(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Tile height %zu is greater than hout %zu for %s", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_5(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_7_4();
  OUTLINED_FUNCTION_7(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Tile height %zu must be a multiple of macroblock size %zu on compressed tensor layer %s", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

void ZinIrLocalRegAlloc::VerifyL2Symbols()
{
  uint64_t v0;
  uint8_t v1[24];

  OUTLINED_FUNCTION_5(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Error: L2 write symbol does not exist in %s", v1);
  OUTLINED_FUNCTION_4();
}

void ZinIrLocalRegAlloc::VerifyL2Symbols(char *a1, _QWORD *a2, uint64_t a3)
{
  int v3;
  _QWORD *v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (*a1 < 0)
    a2 = (_QWORD *)*a2;
  v3 = 136315138;
  v4 = a2;
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Engine layer %s has invalid L2 source", (uint8_t *)&v3);
  OUTLINED_FUNCTION_4();
}

void ZinIrLocalRegAlloc::VerifyDMABuffers()
{
  _QWORD *v0;
  float *v1;
  _QWORD *v2;
  int v3;
  uint64_t v4;
  uint8_t *v5;

  OUTLINED_FUNCTION_11_0();
  if (v3 < 0)
    v2 = (_QWORD *)*v2;
  OUTLINED_FUNCTION_13(v0, v1, (uint64_t)v2, 4.8149e-34);
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], v4, "Error: Invalid DMA Buffer internal register in %s", v5);
}

void ZinIrLocalRegAlloc::AllocateUncompressedLiveIOs()
{
  _DWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint8_t *v3;
  int v4;
  _QWORD *v5;

  OUTLINED_FUNCTION_14();
  if (v4 >= 0)
    v5 = v1;
  else
    v5 = (_QWORD *)*v1;
  *v0 = 136315138;
  *v2 = v5;
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], (uint64_t)v1, "Missing IO name in IO map %s", v3);
}

void ZinIrLocalRegAlloc::CreateReadL2CacheSymbolDescriptor()
{
  uint64_t v0;
  uint8_t v1[24];

  OUTLINED_FUNCTION_5(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Error: Attempting to set L2 cache symbol for SrcIdx of %s, SrcIdx should be resident", v1);
  OUTLINED_FUNCTION_4();
}

void ZinIrLocalRegAlloc::AllocateP2NChainBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: ZinIrRegAllocUtil::NeedChainTileHeightIncrease.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrLocalRegAlloc::AllocateP2NChainBuffer()
{
  uint64_t v0;
  uint8_t v1[24];

  OUTLINED_FUNCTION_5(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failing in reverting back to L2 symbols after the chain buffer allocation in %s.", v1);
  OUTLINED_FUNCTION_4();
}

void ZinIrQuantUnit::ZinIrQuantUnit(ZinIrQuantUnit *this, const ZinIrQuantUnitInfo *a2)
{
  __int128 v4;
  int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  void *__p;
  void *v10;
  uint64_t v11;

  __p = 0;
  v10 = 0;
  v11 = 0;
  ZinIrUnit::ZinIrUnit(this, (uint64_t)&__p);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  *(_QWORD *)this = &off_24C018BD0;
  *((_QWORD *)this + 7) = off_24C017CA0;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 64), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 10) = *((_QWORD *)a2 + 3);
    *((_OWORD *)this + 4) = v4;
  }
  v5 = *((_DWORD *)a2 + 8);
  *((_QWORD *)this + 12) = 0;
  *((_DWORD *)this + 22) = v5;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 4, *((__int128 **)a2 + 5), *((__int128 **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3));
  *(_OWORD *)((char *)this + 120) = *((_OWORD *)a2 + 4);
  *((_QWORD *)this + 7) = off_24C01E0C0;
  v6 = *((_OWORD *)a2 + 5);
  v7 = *((_OWORD *)a2 + 6);
  v8 = *((_OWORD *)a2 + 7);
  *(_OWORD *)((char *)this + 184) = *((_OWORD *)a2 + 8);
  *(_OWORD *)((char *)this + 168) = v8;
  *(_OWORD *)((char *)this + 152) = v7;
  *(_OWORD *)((char *)this + 136) = v6;
}

void sub_206DD02A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  ZinIrUnit *v11;

  ZinIrUnit::~ZinIrUnit(v11);
  _Unwind_Resume(a1);
}

void ZinIrQuantUnit::CreateOpcode(uint64_t a1@<X8>)
{
  ZinIrQuantInfo *v4;

  v4 = (ZinIrQuantInfo *)operator new();
  ZinIrQuantInfo::ZinIrQuantInfo(v4);
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_206DD0330(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x1081C409227ACB4);
  _Unwind_Resume(a1);
}

uint64_t ZinIrQuantUnit::CreateKernel(uint64_t a1, int a2, uint64_t **a3, uint64_t a4, int a5, ZinIrKernel **a6, CFArrayRef *this)
{
  uint64_t v10;
  size_t v11;
  std::string *p_p;
  const void *v13;
  std::string *v14;
  std::string *v15;
  __int128 v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  __int128 v21;
  ZinIrKernel *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::string __p;
  __int16 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  void *v53[2];
  char v54;
  __int128 v55;
  int64_t v56;
  __int128 v57;
  std::string::size_type v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v60 = 0;
  v61 = 0;
  v59 = 0;
  v10 = ZinQuantizationUtils::CreateQuantizationScaleAndZeroPoint(a3, a1 + 136, a4, &v60, &v59, this);
  if ((_DWORD)v10)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinIrQuantUnit::CreateKernel();
    ZinIrUnitStatus::SetError(this, CFSTR("InvalidQuantizationParams"));
  }
  else
  {
    if (*(char *)(a1 + 87) >= 0)
      v11 = *(unsigned __int8 *)(a1 + 87);
    else
      v11 = *(_QWORD *)(a1 + 72);
    p_p = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v11 + 1);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v11)
    {
      if (*(char *)(a1 + 87) >= 0)
        v13 = (const void *)(a1 + 64);
      else
        v13 = *(const void **)(a1 + 64);
      memmove(p_p, v13, v11);
    }
    *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v11) = 95;
    v14 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v53, "quant_kernel");
    v15 = std::string::append(v14, "_xfm", 4uLL);
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v56 = v15->__r_.__value_.__r.__words[2];
    v55 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (v56 >= 0)
      v17 = (const std::string::value_type *)&v55;
    else
      v17 = (const std::string::value_type *)v55;
    if (v56 >= 0)
      v18 = HIBYTE(v56);
    else
      v18 = *((_QWORD *)&v55 + 1);
    v19 = std::string::append(&__p, v17, v18);
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v58 = v19->__r_.__value_.__r.__words[2];
    v57 = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v56) < 0)
      operator delete((void *)v55);
    if (v54 < 0)
      operator delete(v53[0]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    HIDWORD(__p.__r_.__value_.__r.__words[1]) = 0;
    LOWORD(__p.__r_.__value_.__r.__words[2]) = 0;
    HIDWORD(__p.__r_.__value_.__r.__words[2]) = 0;
    v30 = 0;
    __p.__r_.__value_.__r.__words[0] = 0;
    LOWORD(__p.__r_.__value_.__r.__words[1]) = 0;
    v31 = 0u;
    v32 = 0u;
    v33 = 0;
    v34 = vdupq_n_s64(1uLL);
    v35 = v34;
    v36 = v34;
    v37 = v34;
    v38 = v34;
    *(_QWORD *)&v21 = 0x100000001;
    *((_QWORD *)&v21 + 1) = 0x100000001;
    v39 = v21;
    v40 = 0x100000001;
    v42 = 0;
    v43 = 0;
    v41 = 0;
    v44 = xmmword_207A85790;
    v45 = 1;
    v46 = 1;
    v47 = 0;
    v52 = 0;
    v48 = 1;
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v22 = (ZinIrKernel *)operator new();
    *(_QWORD *)&v55 = 0;
    v53[0] = 0;
    ZinIrKernel::ZinIrKernel(v22, &v57, &__p, &v55, &v60, v53, &v59, 2);
    v23 = v53[0];
    v53[0] = 0;
    if (v23)
      std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)v53, (uint64_t)v23);
    v24 = v55;
    *(_QWORD *)&v55 = 0;
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
    std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](a6, v22);
    if (SHIBYTE(v58) < 0)
      operator delete((void *)v57);
  }
  v25 = v59;
  v59 = 0;
  if (v25)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v59, v25);
  v26 = v60;
  v60 = 0;
  if (v26)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v60, v26);
  v27 = v61;
  v61 = 0;
  if (v27)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v61, v27);
  return v10;
}

void sub_206DD0644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v17 = *(_QWORD *)(v15 - 152);
  *(_QWORD *)(v15 - 152) = 0;
  if (v17)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100](v15 - 152, v17);
  MirOpt::MergeGOCsToConvs(v15 - 152, (uint64_t *)(v15 - 128), v14);
  if (*(char *)(v15 - 73) < 0)
    operator delete(*(void **)(v15 - 96));
  v18 = *(_QWORD *)(v15 - 72);
  *(_QWORD *)(v15 - 72) = 0;
  if (v18)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100](v15 - 72, v18);
  v19 = *(_QWORD *)(v15 - 64);
  *(_QWORD *)(v15 - 64) = 0;
  if (v19)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100](v15 - 64, v19);
  v20 = *(_QWORD *)(v15 - 56);
  *(_QWORD *)(v15 - 56) = 0;
  if (v20)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100](v15 - 56, v20);
  _Unwind_Resume(a1);
}

uint64_t ZinIrQuantUnit::CreateLayer(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 *v15;
  _OWORD *v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  int v26;
  void *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  int v30;
  uint64_t v31;

  ZinIrQuantUnit::CreateOpcode((uint64_t)&v30);
  if (v30)
  {
    v7 = 0;
  }
  else
  {
    v8 = operator new();
    v7 = v8;
    v9 = (std::__shared_weak_count *)(*a3)[1];
    v28 = **a3;
    v29 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    ZinQuantLayer::ZinQuantLayer(v8, &v31, &v28, a1 + 64, a4);
    v12 = v29;
    if (v29)
    {
      v13 = (unint64_t *)&v29->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = *(__int128 **)(a1 + 8);
    v23 = v15[4];
    v24 = v15[5];
    v25 = v15[6];
    v26 = *((_DWORD *)v15 + 28);
    v19 = *v15;
    v20 = v15[1];
    v21 = v15[2];
    v22 = v15[3];
    v16 = operator new(0x78uLL);
    v16[4] = v23;
    v16[5] = v24;
    v16[6] = v25;
    *((_DWORD *)v16 + 28) = v26;
    *v16 = v19;
    v16[1] = v20;
    v16[2] = v21;
    v16[3] = v22;
    v27 = v16;
    ZinIrOpLayer::ValidateSemantics(v7);
    if (v27)
      operator delete(v27);
  }
  v17 = v31;
  v31 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  return v7;
}

void sub_206DD08A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;

  v3 = *(void **)(v1 - 104);
  if (v3)
  {
    *(_QWORD *)(v1 - 96) = v3;
    operator delete(v3);
  }
  v4 = *(_QWORD *)(v1 - 56);
  *(_QWORD *)(v1 - 56) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(exception_object);
}

void ZinIrQuantUnit::~ZinIrQuantUnit(void **this)
{
  *this = &off_24C018BD0;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 7);
  ZinIrUnit::~ZinIrUnit((ZinIrUnit *)this);
}

{
  *this = &off_24C018BD0;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 7);
  ZinIrUnit::~ZinIrUnit((ZinIrUnit *)this);
  JUMPOUT(0x20BD002F8);
}

void ZinIrQuantUnit::CreateKernel()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Failed to extract quantization parameter; failed to create kernel.\n",
    v0,
    2u);
}

void ZinIrTransformHistory::ZinIrTransformHistory(ZinIrTransformHistory *this)
{
  int64x2_t v1;

  *((_DWORD *)this + 16) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  v1 = vdupq_n_s64(1uLL);
  *(int64x2_t *)((char *)this + 72) = v1;
  *(int64x2_t *)((char *)this + 88) = v1;
  *((_QWORD *)this + 13) = 1;
  std::vector<std::shared_ptr<ZinIrConstData>>::__assign_with_size[abi:ne180100]<std::shared_ptr<ZinIrConstData> const*,std::shared_ptr<ZinIrConstData> const*>((uint64_t)this, 0, 0, 0);
}

void sub_206DD0A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  if (*(char *)(v10 + 47) < 0)
    operator delete(*(void **)(v10 + 24));
  a10 = (void **)v10;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t ZinIrTransformHistory::Size(ZinIrTransformHistory *this)
{
  return (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4;
}

uint64_t ZinIrTransformHistory::Init(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4, int a5)
{
  __int128 v10;
  uint64_t v11;
  __int128 v12;

  std::string::operator=((std::string *)(a1 + 24), (const std::string *)a2);
  v10 = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = v10;
  v11 = *(_QWORD *)(a4 + 32);
  v12 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a4;
  *(_OWORD *)(a1 + 88) = v12;
  *(_QWORD *)(a1 + 104) = v11;
  *(_DWORD *)(a1 + 112) = a5;
  if ((uint64_t **)a1 != a3)
    std::vector<std::shared_ptr<ZinIrConstData>>::__assign_with_size[abi:ne180100]<std::shared_ptr<ZinIrConstData> const*,std::shared_ptr<ZinIrConstData> const*>(a1, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  return 0;
}

uint64_t ZinIrTransformHistory::Append(uint64_t a1, __int128 **a2)
{
  __int128 *v2;
  __int128 *v3;

  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)a1)
    return 3;
  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    do
      std::vector<std::shared_ptr<ZinIrConstData>>::push_back[abi:ne180100]((char **)a1, v2++);
    while (v2 != v3);
  }
  return 0;
}

uint64_t ZinIrTransformHistory::GetSourceFileInfo(ZinIrTransformHistory *this)
{
  return (uint64_t)this + 24;
}

uint64_t ZinIrTransformHistory::GetDims(ZinIrTransformHistory *this)
{
  return (uint64_t)this + 72;
}

uint64_t ZinIrTransformHistory::GetFormat(ZinIrTransformHistory *this)
{
  return *((unsigned int *)this + 28);
}

uint64_t ZinIrConvUnit::ZinIrConvUnit(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v5 = ZinIrUnit::ZinIrUnit((_QWORD *)a1, a3);
  *v5 = &off_24C0177C8;
  ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinIrKernelUnitInfo *)(v5 + 7), (const ZinIrKernelUnitInfo *)a2);
  *(_QWORD *)(a1 + 56) = off_24C01CAD8;
  v6 = a2[16];
  *(_OWORD *)(a1 + 296) = a2[15];
  *(_OWORD *)(a1 + 312) = v6;
  v7 = a2[17];
  v8 = a2[18];
  v9 = a2[19];
  *(_OWORD *)(a1 + 372) = *(_OWORD *)((char *)a2 + 316);
  *(_OWORD *)(a1 + 344) = v8;
  *(_OWORD *)(a1 + 360) = v9;
  *(_OWORD *)(a1 + 328) = v7;
  *(_QWORD *)(a1 + 392) = 1;
  *(_QWORD *)&v8 = 0x100000001;
  *((_QWORD *)&v8 + 1) = 0x100000001;
  *(int64x2_t *)(a1 + 400) = vdupq_n_s64(1uLL);
  *(_OWORD *)(a1 + 416) = v8;
  *(_QWORD *)(a1 + 432) = 0x100000001;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_OWORD *)(a1 + 464) = v8;
  *(_QWORD *)(a1 + 480) = 1;
  *(_WORD *)(a1 + 488) = 0;
  *(_DWORD *)(a1 + 492) = 0;
  return a1;
}

void sub_206DD0C14(_Unwind_Exception *a1)
{
  ZinIrUnit *v1;

  ZinIrUnit::~ZinIrUnit(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrConvUnit::SetBottoms(ZinIrConvUnit *a1, __n128 *a2)
{
  ZinIrUnit::SetBottoms((uint64_t)a1, a2);
  ZinIrConvUnit::InferInputFormatAndCreateConvInfo(a1);
  return 0;
}

uint64_t ZinIrConvUnit::InferInputFormatAndCreateConvInfo(ZinIrConvUnit *this)
{
  unsigned int v2;
  BOOL v3;
  int v4;
  uint64_t result;

  v2 = *((_DWORD *)this + 74);
  v3 = v2 > 6;
  v4 = (1 << v2) & 0x54;
  if (!v3 && v4 != 0)
    *((_QWORD *)this + 38) = *(_QWORD *)(*((_QWORD *)this + 1) + 16);
  ZinIrUnit::InferInputTensorFormat((uint64_t)this, (int *)this + 30);
  result = ZinIrConvUnit::CreateConvInfo((uint64_t)this + 56, (uint64_t)this + 392);
  if ((_DWORD)result)
    ZinAssertImpl("Error: failed to create the conv info");
  return result;
}

uint64_t ZinIrConvUnit::CreateConvInfo(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v4;
  BOOL v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  char v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  uint64_t v19;

  if (!*(_DWORD *)(a1 + 64))
    return 3;
  result = 0;
  v4 = *(_DWORD *)(a1 + 292);
  v5 = (*(_DWORD *)(a1 + 240) - 3) < 2;
  v6 = *(_DWORD *)(a1 + 296);
  v7 = *(_DWORD *)(a1 + 300);
  if ((*(_DWORD *)(a1 + 240) - 3) >= 2)
    v8 = 1;
  else
    v8 = *(_DWORD *)(a1 + 292);
  if ((*(_DWORD *)(a1 + 240) - 3) >= 2)
    v9 = 1;
  else
    v9 = *(_DWORD *)(a1 + 296);
  if ((*(_DWORD *)(a1 + 240) - 3) >= 2)
    v10 = 1;
  else
    v10 = *(_DWORD *)(a1 + 300);
  if ((*(_DWORD *)(a1 + 240) - 3) < 2)
  {
    v4 = 1;
    v6 = 1;
    v7 = 1;
  }
  v18 = *(_OWORD *)(a1 + 304);
  v19 = *(_QWORD *)(a1 + 320);
  v11 = *(_QWORD *)(a1 + 272);
  v16 = *(_QWORD *)(a1 + 280);
  v17 = *(_DWORD *)(a1 + 288);
  v12 = *(_DWORD *)(a1 + 328);
  v13 = *(_QWORD *)(a1 + 248);
  v14 = *(_OWORD *)(a1 + 256);
  v15 = *(_BYTE *)(a1 + 244);
  *(_OWORD *)a2 = v14;
  *(_QWORD *)(a2 + 16) = v11;
  *(_DWORD *)(a2 + 24) = v4;
  *(_DWORD *)(a2 + 28) = v6;
  *(_DWORD *)(a2 + 32) = v7;
  *(_DWORD *)(a2 + 36) = v8;
  *(_DWORD *)(a2 + 40) = v9;
  *(_DWORD *)(a2 + 44) = v10;
  *(_OWORD *)(a2 + 48) = v18;
  *(_QWORD *)(a2 + 64) = v19;
  *(_QWORD *)(a2 + 72) = v16;
  *(_DWORD *)(a2 + 80) = v17;
  *(_DWORD *)(a2 + 84) = v12;
  *(_QWORD *)(a2 + 88) = v13;
  *(_BYTE *)(a2 + 96) = v15;
  *(_BYTE *)(a2 + 97) = v5;
  *(_DWORD *)(a2 + 100) = 0;
  return result;
}

uint64_t ZinIrConvUnit::ValidateWeightFileInfos(ZinIrConvUnit *this, unint64_t a2, unint64_t a3)
{
  return ValidateWeightFileInfosHelper((ZinIrConvUnit *)((char *)this + 56), a2, a3);
}

void ZinIrConvUnit::CreateOpcode(uint64_t a1@<X8>)
{
  ZinIrConvolutionInfo *v4;

  v4 = (ZinIrConvolutionInfo *)operator new();
  ZinIrConvolutionInfo::ZinIrConvolutionInfo(v4);
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_206DD0E18(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x1081C409227ACB4);
  _Unwind_Resume(a1);
}

uint64_t ZinIrConvUnit::TensorDimensions(ZinIrConvUnit *this, const ZinIrHalParameters *a2, ZinTensorDimensions *a3, ZinIrUnitStatus *a4)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[2];
  uint64_t v12;
  unsigned int v13[3];
  unsigned int v14[3];
  _OWORD v15[2];
  uint64_t v16;

  v6 = *((_QWORD *)this + 1);
  v7 = *(_OWORD *)(v6 + 8);
  v8 = *(_OWORD *)(v6 + 24);
  v16 = *(_QWORD *)(v6 + 40);
  v15[0] = v7;
  v15[1] = v8;
  GetLogicalInputAndOutputSteps((uint64_t)this + 56, (uint64_t)v13);
  ZinGetOutputTensorDimension((uint64_t)v15, (_QWORD *)this + 39, v13, v14, (int *)this + 90, *((_QWORD *)this + 16), (int *)this + 84, (uint64_t)v11);
  v9 = v11[1];
  *(_OWORD *)a3 = v11[0];
  *((_OWORD *)a3 + 1) = v9;
  *((_QWORD *)a3 + 4) = v12;
  if (ZinTensorDimensions::IsValid(a3))
    return 0;
  else
    return 3;
}

uint64_t ZinIrConvUnit::CreateKernel(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4, uint64_t a5, ZinIrKernel **a6, CFArrayRef *a7)
{
  uint64_t v12;
  std::string *v13;
  __int128 v14;
  uint64_t Kernel;
  std::string v17;
  void *__p[2];
  std::string::size_type v19;
  _BYTE v20[280];

  v12 = a1 + 56;
  ZinIrKernelCreationUtils::CreateKernelDescriptor(a1 + 56, a1 + 8, (uint64_t)v20);
  std::string::basic_string[abi:ne180100]<0>(&v17, "conv_kernel");
  v13 = std::string::append(&v17, "_xfm", 4uLL);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v19 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  Kernel = ZinIrKernelCreationUtils::CreateKernel(v12, (uint64_t)v20, a2, a3, a4, a6, (uint64_t)__p, a7);
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
  return Kernel;
}

void sub_206DD0FC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinIrConvUnit::CreateDummyKernel(uint64_t a1, uint64_t a2, ZinIrKernel **a3)
{
  uint64_t v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string v10;
  std::string v11;
  void *__p[2];
  std::string::size_type v13;
  _BYTE v14[280];

  v5 = a1 + 56;
  ZinIrKernelCreationUtils::CreateKernelDescriptor(a1 + 56, a1 + 8, (uint64_t)v14);
  std::string::basic_string[abi:ne180100]<0>(&v10, "conv_kernel");
  v6 = std::string::append(&v10, "_xfm", 4uLL);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v11.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v11, "_dummy", 6uLL);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v13 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  ZinIrKernelCreationUtils::CreateDummyKernel(v5, (uint64_t)v14, a2, a3, (uint64_t)__p);
  if (SHIBYTE(v13) < 0)
    operator delete(__p[0]);
}

void sub_206DD10E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrConvUnit::CreateLayer(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  int v19;
  uint64_t v20;

  ZinIrConvUnit::CreateOpcode((uint64_t)&v19);
  if (v19)
  {
    v7 = 0;
  }
  else
  {
    v8 = operator new();
    v7 = v8;
    v9 = (std::__shared_weak_count *)(*a3)[1];
    v17 = **a3;
    v18 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    ZinConvLayer::ZinConvLayer(v8, &v20, &v17, a1 + 64, a4);
    v12 = v18;
    if (v18)
    {
      v13 = (unint64_t *)&v18->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    ZinIrOpLayer::ValidateSemantics(v7);
  }
  v15 = v20;
  v20 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  return v7;
}

void sub_206DD1248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x20BD002F8](v12, 0x10B3C4024B96488);
  v14 = a12;
  a12 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

uint64_t ZinIrConvUnit::IsMutable(ZinIrConvUnit *this)
{
  return *((unsigned __int8 *)this + 236);
}

uint64_t ZinIrConvUnit::ValidateForDynamicShapes(ZinIrConvUnit *this, CFArrayRef *a2)
{
  _DWORD *v2;

  v2 = (_DWORD *)*((_QWORD *)this + 1);
  if (v2[24] != 1 && v2[25] != 1 && v2[26] != 1)
    return 0;
  ZinIrUnitStatus::SetError(a2, CFSTR("InvalidUnit"));
  return 3;
}

void ZinIrConvUnit::~ZinIrConvUnit(ZinIrConvUnit *this)
{
  ZinIrConvUnit::~ZinIrConvUnit(this);
  JUMPOUT(0x20BD002F8);
}

{
  void **v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_24C0177C8;
  *((_QWORD *)this + 7) = off_24C01ED88;
  v2 = (void **)((char *)this + 56);
  v3 = (void *)*((_QWORD *)this + 26);
  if (v3)
  {
    *((_QWORD *)this + 27) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 23);
  if (v4)
  {
    *((_QWORD *)this + 24) = v4;
    operator delete(v4);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(v2);
  ZinIrUnit::~ZinIrUnit(this);
}

__CFDictionary *ZinCreateNEConvUnit(void (***a1)(ZinIrKernelUnitInfo *__hidden this))
{
  __CFDictionary *Unit;
  __int128 v3;
  __int128 v4;
  size_t v5;
  std::string *v6;
  void (**v7)(ZinIrKernelUnitInfo *__hidden);
  __CFDictionary *ConvUnit;
  std::string *p_p;
  CFStringRef v10;
  std::string v12;
  void (**v13)(ZinIrKernelUnitInfo *__hidden);
  std::string __p;
  std::vector<std::string> v15;
  void (**v16)(ZinIrKernelUnitInfo *__hidden);
  void (**v17)(ZinIrKernelUnitInfo *__hidden);
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[2];
  std::string *v27;
  char v28;
  std::string v29;
  __int128 v30;

  *(_QWORD *)&v30 = *MEMORY[0x24BDAC8D0];
  Unit = ZinCreateUnit((const ZinIrUnitInfo *)a1);
  ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinIrKernelUnitInfo *)&v13, (const ZinIrKernelUnitInfo *)(a1 + 46));
  v13 = off_24C01CAD8;
  *(_OWORD *)((char *)v26 + 12) = *(_OWORD *)((char *)a1 + 684);
  v3 = *((_OWORD *)a1 + 41);
  v24 = *((_OWORD *)a1 + 40);
  v25 = v3;
  v26[0] = *((_OWORD *)a1 + 42);
  v4 = *((_OWORD *)a1 + 39);
  v22 = *((_OWORD *)a1 + 38);
  v23 = v4;
  if (*((char *)a1 + 31) >= 0)
    v5 = *((unsigned __int8 *)a1 + 31);
  else
    v5 = (size_t)a1[2];
  v6 = &v12;
  std::string::basic_string[abi:ne180100]((uint64_t)&v12, v5 + 5);
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v6 = (std::string *)v12.__r_.__value_.__r.__words[0];
  if (v5)
  {
    if (*((char *)a1 + 31) >= 0)
      v7 = (void (**)(ZinIrKernelUnitInfo *__hidden))(a1 + 1);
    else
      v7 = a1[1];
    memmove(v6, v7, v5);
  }
  strcpy((char *)v6 + v5, ".conv");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v12;
  v16 = a1[8];
  v17 = a1[9];
  if (&v13 != a1)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v15, (std::string *)a1[5], (__int128 *)a1[6], 0xAAAAAAAAAAAAAAABLL * (a1[6] - a1[5]));
  ConvUnit = ZinCreateConvUnit((const ZinIrConvUnitInfo *)&v13);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v10 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], (const char *)p_p, 0x8000100u);
  CFDictionaryAddValue(Unit, v10, ConvUnit);
  CFRelease(v10);
  CFRelease(ConvUnit);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v29, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v29 = __p;
  memset(&v12, 0, sizeof(v12));
  v27 = &v12;
  v28 = 0;
  v12.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v12.__r_.__value_.__l.__size_ = v12.__r_.__value_.__r.__words[0];
  v12.__r_.__value_.__r.__words[2] = v12.__r_.__value_.__r.__words[0] + 24;
  v12.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v12.__r_.__value_.__r.__words[2], (__int128 *)&v29, &v30, (std::string *)v12.__r_.__value_.__l.__data_);
  ZinCreateNEUnit((uint64_t)a1, (__int128 **)&v12, Unit);
  v27 = &v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  v13 = off_24C01ED88;
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v13);
  return Unit;
}

void sub_206DD164C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  ZinIrConvUnitInfo::~ZinIrConvUnitInfo((ZinIrConvUnitInfo *)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrResizeUnit::CreateLayer(ZinIrResizeUnit *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  int v17;
  uint64_t v18;

  ZinIrResizeUnit::CreateOpcode(a1, (uint64_t)&v17);
  if (v17)
  {
    v5 = 0;
  }
  else
  {
    v6 = operator new();
    v5 = v6;
    v7 = (std::__shared_weak_count *)(*a3)[1];
    v15 = **a3;
    v16 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    ZinResizeLayer::ZinResizeLayer(v6, &v18, &v15, (char *)a1 + 64);
    v10 = v16;
    if (v16)
    {
      v11 = (unint64_t *)&v16->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    ZinIrOpLayer::ValidateSemantics(v5);
  }
  v13 = v18;
  v18 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return v5;
}

void sub_206DD17C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x20BD002F8](v12, 0x10B3C4024B96488);
  v14 = a12;
  a12 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

uint64_t ZinIrResizeUnit::ValidateForDynamicShapes(ZinIrResizeUnit *this, CFArrayRef *a2)
{
  _DWORD *v2;
  int v3;
  int v4;
  int v5;
  _BOOL4 v7;
  float v8;
  _BOOL4 v9;
  int v10;
  uint64_t i;
  uint64_t j;
  BOOL v13;

  v2 = (_DWORD *)*((_QWORD *)this + 1);
  v4 = v2[27];
  v3 = v2[28];
  v5 = v2[25] | v2[24] | v2[26];
  v7 = v4 == v3 && v5 == 0;
  v8 = *((float *)this + 55);
  if (*((float *)this + 56) != v8)
    v7 = 0;
  v9 = v8 == 2.0;
  if (v8 == 4.0)
    v9 = 1;
  v10 = v9 && v7;
  for (i = *((_QWORD *)this + 29); i != *((_QWORD *)this + 30); i += 8)
    v10 = v10 & (*(_DWORD *)(i + 4) == 1);
  for (j = *((_QWORD *)this + 23); j != *((_QWORD *)this + 24); j += 8)
    v10 = v10 & (*(_DWORD *)(j + 4) < 2u);
  if (v10)
    v13 = *((_QWORD *)this + 17) == *((_QWORD *)this + 18);
  else
    v13 = 0;
  if (v13 && *((_QWORD *)this + 20) == *((_QWORD *)this + 21))
    return 0;
  ZinIrUnitStatus::SetError(a2, CFSTR("UnsupportedForDynamicShapes"));
  return 3;
}

void ZinAneSequentialCommand_v7minus::ZinAneSequentialCommand_v7minus(ZinAneSequentialCommand_v7minus *this, const unsigned int *a2)
{
  *(_QWORD *)this = &off_24BFFE178;
  *((_DWORD *)this + 2) = *a2;
  *((_QWORD *)this + 2) = a2;
}

uint64_t ZinAneSequentialCommand_v7minus::SizeInWords(ZinAneSequentialCommand_v7minus *this)
{
  return ((*((_DWORD *)this + 2) >> 26) + 2);
}

void ZinAneSequentialCommand_v7minus::GetRegistersSpecified(ZinAneSequentialCommand_v7minus *this@<X0>, std::vector<int> *a2@<X8>)
{
  int v4;
  unsigned int v5;
  std::__compressed_pair<int *> *p_end_cap;
  std::vector<int>::pointer end;
  int v8;
  int *v9;
  std::vector<int>::pointer begin;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  int *v16;
  int v17;
  BOOL v18;

  a2->__begin_ = 0;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  v4 = (*(uint64_t (**)(ZinAneSequentialCommand_v7minus *))(*(_QWORD *)this + 64))(this);
  std::vector<unsigned int>::reserve(a2, ((unint64_t)*((unsigned int *)this + 2) >> 26) + 1);
  v5 = 0;
  p_end_cap = &a2->__end_cap_;
  end = a2->__end_;
  do
  {
    v8 = v4 + 4 * v5;
    if (end >= p_end_cap->__value_)
    {
      begin = a2->__begin_;
      v11 = end - a2->__begin_;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 62)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v13 = (char *)p_end_cap->__value_ - (char *)begin;
      if (v13 >> 1 > v12)
        v12 = v13 >> 1;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
        v14 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&a2->__end_cap_, v14);
        begin = a2->__begin_;
        end = a2->__end_;
      }
      else
      {
        v15 = 0;
      }
      v16 = (int *)&v15[4 * v11];
      *v16 = v8;
      v9 = v16 + 1;
      while (end != begin)
      {
        v17 = *--end;
        *--v16 = v17;
      }
      a2->__begin_ = v16;
      a2->__end_ = v9;
      a2->__end_cap_.__value_ = (int *)&v15[4 * v14];
      if (begin)
        operator delete(begin);
    }
    else
    {
      *end = v8;
      v9 = end + 1;
    }
    a2->__end_ = v9;
    v18 = v5++ >= *((_DWORD *)this + 2) >> 26;
    end = v9;
  }
  while (!v18);
}

void sub_206DD1A7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneSequentialCommand_v7minus::GetNthRegisterAddress(ZinAneSequentialCommand_v7minus *this, int a2)
{
  return (*(unsigned int (**)(ZinAneSequentialCommand_v7minus *))(*(_QWORD *)this + 64))(this) + 4 * a2;
}

uint64_t ZinAneSequentialCommand_v7minus::GetNthRegisterValue(ZinAneSequentialCommand_v7minus *this, int a2)
{
  return *(unsigned int *)(*((_QWORD *)this + 2) + 4 * (a2 + 1));
}

uint64_t ZinAneSequentialCommand_v7minus::CommandHeaderToRawString@<X0>(ZinAneSequentialCommand_v7minus *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  uint64_t v9;
  _QWORD v10[10];
  char v11;
  uint64_t v12;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v8);
  *(_DWORD *)((char *)v10 + *(_QWORD *)(v9 - 24)) = *(_DWORD *)((_BYTE *)v10 + *(_QWORD *)(v9 - 24)) & 0xFFFFFFB5 | 8;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"Raw: 0x", 7);
  std::ostream::operator<<();
  v4 = 0;
  v5 = *((_BYTE *)this + 11) & 0xFC;
  while (v5 != v4)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)" 0x", 3);
    v4 += 4;
    std::ostream::operator<<();
  }
  std::ostream::put();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v10, a2);
  v8[0] = *MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v9 = v6;
  v10[0] = MEMORY[0x24BEDB848] + 16;
  if (v11 < 0)
    operator delete((void *)v10[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v12);
}

void sub_206DD1C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ZinAneSequentialCommand_v7minus::CommandHeaderToString@<X0>(ZinAneSequentialCommand_v7minus *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[2];
  uint64_t v9;
  _QWORD v10[10];
  char v11;
  uint64_t v12;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"Command Header: Address ", 24);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"0x", 2);
  *(_DWORD *)((char *)v4 + *(_QWORD *)(*v4 - 24) + 8) = *(_DWORD *)((_BYTE *)v4 + *(_QWORD *)(*v4 - 24) + 8) & 0xFFFFFFB5 | 8;
  (*(void (**)(ZinAneSequentialCommand_v7minus *))(*(_QWORD *)this + 64))(this);
  std::ostream::operator<<();
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)" Count: ", 8);
  *(_DWORD *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v5 + *(_QWORD *)(*v5 - 24) + 8) & 0xFFFFFFB5 | 2;
  std::ostream::operator<<();
  std::ostream::put();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v10, a2);
  v8[0] = *MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v9 = v6;
  v10[0] = MEMORY[0x24BEDB848] + 16;
  if (v11 < 0)
    operator delete((void *)v10[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v12);
}

void sub_206DD1DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ZinAneSequentialCommand_v7minus::GetAddress(ZinAneSequentialCommand_v7minus *this)
{
  return *((_DWORD *)this + 2) & 0x3FFFFFF;
}

uint64_t ZinAneSequentialCommand_v7minus::SetAddress(uint64_t this, int a2)
{
  *(_DWORD *)(this + 8) = *(_DWORD *)(this + 8) & 0xFC000000 | a2 & 0x3FFFFFF;
  return this;
}

BOOL CpAllocUtils::IsResident(int a1)
{
  return a1 != 1 && a1 != 8;
}

BOOL CpAllocUtils::IsNonResident(int a1)
{
  return a1 == 1 || a1 == 8;
}

uint64_t CpAllocUtils::IsNonChainResident(unsigned int a1)
{
  return (a1 > 8) | (0xF9u >> a1) & 1;
}

BOOL CpAllocUtils::IsChain(int a1)
{
  return a1 == 2;
}

BOOL CpAllocUtils::IsL2Inplace(int a1)
{
  return (a1 & 0xFFFFFFFE) == 4;
}

uint64_t CpAllocUtils::IsL2Dependent(unsigned int a1)
{
  return (a1 < 8) & (0xA8u >> a1);
}

BOOL CpAllocUtils::IsDRAMInplace(int a1)
{
  return a1 == 8;
}

BOOL CpAllocUtils::IsL2Circular(int a1)
{
  return (a1 & 0xFFFFFFFE) == 6;
}

uint64_t ZinIrMinMaxNormInfo::ZinIrMinMaxNormInfo(uint64_t a1, uint64_t a2, float a3)
{
  _QWORD *v6;

  v6 = (_QWORD *)ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(a1, 45);
  *v6 = &unk_24C01EED0;
  std::unordered_set<ZinIrDimension>::unordered_set((uint64_t)(v6 + 2), a2);
  *(float *)(a1 + 56) = a3;
  return a1;
}

void sub_206DD1ECC(_Unwind_Exception *a1)
{
  ZinIrHalH13g *v1;

  ZinIrHalH13g::~ZinIrHalH13g(v1);
  _Unwind_Resume(a1);
}

_QWORD *ZinMinMaxNormLayer::ZinMinMaxNormLayer(_QWORD *a1, uint64_t *a2, uint64_t *a3, __int128 *a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  ZinIrKernel *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  ZinIrKernel *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;

  v6 = *a2;
  *a2 = 0;
  v7 = a3[1];
  v18 = *a3;
  v19 = (std::__shared_weak_count *)v7;
  v20 = v6;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v17 = 0;
  ZinIrOpLayer::ZinIrOpLayer((uint64_t)a1, &v20, &v18, a4, &v17);
  v10 = v17;
  v17 = 0;
  if (v10)
  {
    ZinIrKernel::~ZinIrKernel(v10);
    MEMORY[0x20BD002F8](v11, 0x1032C40DEE44497);
  }
  v12 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v20;
  v20 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  *a1 = off_24C01E4C8;
  ZinObjectNameFactory::ZinObjectNameFactory(a1 + 24, a4);
  return a1;
}

void sub_206DD1FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  ZinIrOpLayer *v12;

  ZinIrOpLayer::~ZinIrOpLayer(v12);
  _Unwind_Resume(a1);
}

uint64_t ZinMinMaxNormLayer::Lower(uint64_t *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t ***v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t ReductionDimensions;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  ZinIrOpLayer *Reduction;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  ZinIrOpLayer *Broadcast;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  ZinIrOpLayer *v32;
  _QWORD *v33;
  uint64_t v34;
  _DWORD *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  ZinIrOpLayer *v40;
  _BOOL4 v41;
  int v42;
  BOOL v43;
  uint64_t *v44;
  int v45;
  BOOL v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  char *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  ZinIrOpLayer *TernaryDynamicGOCLayer;
  _BOOL4 v61;
  int v62;
  int v63;
  int v64;
  _BOOL4 v65;
  uint64_t *v66;
  uint64_t v67;
  _OWORD *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  ZinIrOpLayer *v72;
  _BOOL4 v73;
  int v74;
  _OWORD *v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _BOOL4 v83;
  _QWORD *v84;
  int v85;
  int v86;
  _OWORD *v87;
  int v88;
  float v89;
  uint64_t v90;
  ZinIrTensor *v91;
  uint64_t v92;
  ZinIrOpLayer *ConstScaleAndBiasGOC;
  _BOOL4 v94;
  int v95;
  _BOOL4 v97;
  int v98;
  int v99;
  _BOOL4 v100;
  _BOOL4 v101;
  int v102;
  int v103;
  _BOOL4 v104;
  uint64_t v105;
  _OWORD v106[2];
  int v107;
  _OWORD v108[2];
  int v109;
  void *__p[2];
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  int v117;
  _BYTE v118[44];
  void *v119;
  void *v120;
  _OWORD *v121;
  _BYTE v122[40];
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  _BYTE v126[120];
  _BYTE v127[120];
  void *v128;
  void *v129;
  char *v130;
  _BYTE v131[23];
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  _OWORD v145[2];
  uint64_t v146;

  v146 = *MEMORY[0x24BDAC8D0];
  __p[0] = a1;
  *(_QWORD *)&v132 = __p;
  v4 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((_QWORD *)(a2 + 64), (unint64_t **)&v132);
  v5 = (uint64_t ***)(a2 + 104);
  v105 = a1[8];
  if (v4)
    v5 = (uint64_t ***)(v4 + 3);
  v6 = ***v5;
  v7 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0, 0);
  v8 = *(_OWORD *)(v7 + 64);
  v123 = *(_OWORD *)(v7 + 48);
  v124 = v8;
  v125 = *(_QWORD *)(v7 + 80);
  ReductionDimensions = NormalizationUtils::GetReductionDimensions(a1[8] + 16);
  v10 = a1[2];
  (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 80))(&v132, v6, 0, 0);
  v11 = operator new(0x78uLL);
  __p[0] = v11;
  *(_QWORD *)&v111 = (char *)v11 + 120;
  v12 = v137;
  v11[4] = v136;
  v11[5] = v12;
  v11[6] = v138;
  *((_DWORD *)v11 + 28) = v139;
  v13 = v133;
  *v11 = v132;
  v11[1] = v13;
  v14 = v135;
  v11[2] = v134;
  v11[3] = v14;
  __p[1] = (char *)v11 + 120;
  Reduction = (ZinIrOpLayer *)ZinBuilder::CreateReduction(v10, (uint64_t)(a1 + 24), (uint64_t *)__p, 3, 1, ReductionDimensions, 0, 0, 1.0, 0.0, 0, 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_QWORD *)v127 = a1;
  __p[0] = v127;
  __p[1] = (void *)1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v132, __p);
  v16 = ZinIrOpLayerGraph::AddNode((uint64_t **)a2, Reduction, (ZinIrOpLayer ***)&v132);
  *(_QWORD *)&v132 = &unk_24C02BB18;
  if (*((_QWORD *)&v132 + 1))
  {
    *(_QWORD *)&v133 = *((_QWORD *)&v132 + 1);
    operator delete(*((void **)&v132 + 1));
  }
  v17 = ZinIrOpLayerGraph::AddEdge(a2, v6, (uint64_t)Reduction, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  NormalizationUtils::GetBroadcastMap((_QWORD *)(a1[8] + 16), &v123, (uint64_t)v122);
  v18 = a1[2];
  (*(void (**)(__int128 *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Reduction + 80))(&v132, Reduction, 0, 0);
  v19 = operator new(0x78uLL);
  __p[1] = (char *)v19 + 120;
  *(_QWORD *)&v111 = (char *)v19 + 120;
  v20 = v137;
  v19[4] = v136;
  v19[5] = v20;
  v19[6] = v138;
  *((_DWORD *)v19 + 28) = v139;
  v21 = v133;
  *v19 = v132;
  v19[1] = v21;
  v22 = v135;
  v19[2] = v134;
  v19[3] = v22;
  __p[0] = v19;
  Broadcast = (ZinIrOpLayer *)ZinBuilder::CreateBroadcast(v18, (uint64_t)(a1 + 24), (uint64_t *)__p, (uint64_t)v122, 3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_QWORD *)v127 = a1;
  __p[0] = v127;
  __p[1] = (void *)1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v132, __p);
  v104 = ZinIrOpLayerGraph::AddNode((uint64_t **)a2, Broadcast, (ZinIrOpLayer ***)&v132);
  *(_QWORD *)&v132 = &unk_24C02BB18;
  if (*((_QWORD *)&v132 + 1))
  {
    *(_QWORD *)&v133 = *((_QWORD *)&v132 + 1);
    operator delete(*((void **)&v132 + 1));
  }
  v103 = v17;
  v102 = ZinIrOpLayerGraph::AddEdge(a2, (uint64_t)Reduction, (uint64_t)Broadcast, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 80))(&v132, v6, 0, 0);
  (*(void (**)(_QWORD *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Broadcast + 80))((_QWORD *)&v139 + 1, Broadcast, 0, 0);
  v24 = operator new(0xF0uLL);
  v121 = v24 + 15;
  v25 = v143;
  v26 = v145[0];
  v24[12] = v144;
  v24[13] = v26;
  *(_OWORD *)((char *)v24 + 220) = *(_OWORD *)((char *)v145 + 12);
  v27 = v139;
  v28 = v141;
  v24[8] = v140;
  v24[9] = v28;
  v24[10] = v142;
  v24[11] = v25;
  v29 = v135;
  v30 = v137;
  v24[4] = v136;
  v24[5] = v30;
  v24[6] = v138;
  v24[7] = v27;
  v31 = v133;
  *v24 = v132;
  v24[1] = v31;
  v24[2] = v134;
  v24[3] = v29;
  v119 = v24;
  v120 = v24 + 15;
  v32 = (ZinIrOpLayer *)ZinBuilder::CreateScaledElementWise(a1[2], (uint64_t)(a1 + 24), 1.0, 1.0, 0.0, (uint64_t)&v119, &v123, 3, 0, 0, 1);
  *(_QWORD *)v127 = a1;
  __p[0] = v127;
  __p[1] = (void *)1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v132, __p);
  v100 = ZinIrOpLayerGraph::AddNode((uint64_t **)a2, v32, (ZinIrOpLayer ***)&v132);
  *(_QWORD *)&v132 = &unk_24C02BB18;
  if (*((_QWORD *)&v132 + 1))
  {
    *(_QWORD *)&v133 = *((_QWORD *)&v132 + 1);
    operator delete(*((void **)&v132 + 1));
  }
  v33 = operator new(0x10uLL);
  *(_QWORD *)&v133 = v33 + 2;
  *v33 = v6;
  v33[1] = Broadcast;
  *(_QWORD *)&v132 = v33;
  *((_QWORD *)&v132 + 1) = v33 + 2;
  v99 = ZinIrOpLayerGraph::AddEdgesImplSrc<std::vector<ZinIrOpLayer *>>(a2, (uint64_t *)&v132, (uint64_t)v32);
  if ((_QWORD)v132)
  {
    *((_QWORD *)&v132 + 1) = v132;
    operator delete((void *)v132);
  }
  v34 = a1[2];
  (*(void (**)(__int128 *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v32 + 80))(&v132, v32, 0, 0);
  v101 = v16;
  v35 = operator new(0x78uLL);
  __p[1] = v35 + 30;
  *(_QWORD *)&v111 = v35 + 30;
  v35[28] = v139;
  v36 = v138;
  v37 = v136;
  *((_OWORD *)v35 + 5) = v137;
  *((_OWORD *)v35 + 6) = v36;
  v38 = v133;
  *(_OWORD *)v35 = v132;
  *((_OWORD *)v35 + 1) = v38;
  v39 = v135;
  *((_OWORD *)v35 + 2) = v134;
  *((_OWORD *)v35 + 3) = v39;
  *((_OWORD *)v35 + 4) = v37;
  __p[0] = v35;
  v40 = (ZinIrOpLayer *)ZinBuilder::CreateReduction(v34, (uint64_t)(a1 + 24), (uint64_t *)__p, 3, 2, ReductionDimensions, 1, 0, 1.0, *(float *)(v105 + 56), 0, 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_QWORD *)v127 = a1;
  __p[0] = v127;
  __p[1] = (void *)1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v132, __p);
  v41 = ZinIrOpLayerGraph::AddNode((uint64_t **)a2, v40, (ZinIrOpLayer ***)&v132);
  *(_QWORD *)&v132 = &unk_24C02BB18;
  if (*((_QWORD *)&v132 + 1))
  {
    *(_QWORD *)&v133 = *((_QWORD *)&v132 + 1);
    operator delete(*((void **)&v132 + 1));
  }
  v42 = ZinIrOpLayerGraph::AddEdge(a2, (uint64_t)v32, (uint64_t)v40, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  if ((_QWORD)v124 == 1)
  {
    v43 = 0;
  }
  else
  {
    v44 = *(uint64_t **)(v105 + 32);
    if (v44)
    {
      do
      {
        v45 = *((_DWORD *)v44 + 4);
        v46 = v45 == 3;
        v43 = v45 != 3;
        if (v46)
          break;
        v44 = (uint64_t *)*v44;
      }
      while (v44);
    }
    else
    {
      v43 = 1;
    }
  }
  v97 = v41;
  v98 = v42;
  if (*((_QWORD *)&v124 + 1) != 1)
  {
    v66 = *(uint64_t **)(v105 + 32);
    if (!v66)
      goto LABEL_36;
    while (*((_DWORD *)v66 + 4) != 4)
    {
      v66 = (uint64_t *)*v66;
      if (!v66)
        goto LABEL_36;
    }
  }
  if (!v43)
  {
    v47 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0, 0);
    v48 = *(_OWORD *)(v47 + 64);
    *(_OWORD *)&v118[4] = *(_OWORD *)(v47 + 48);
    *(_OWORD *)&v118[20] = v48;
    *(_QWORD *)&v118[36] = *(_QWORD *)(v47 + 80);
    memset(&v131[3], 0, 20);
    (*(void (**)(__int128 *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v40 + 80))(&v132, v40, 0, 0);
    (*(void (**)(void **__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Reduction + 80))(__p, Reduction, 0, 0);
    *(_OWORD *)&v127[68] = v136;
    *(_OWORD *)&v127[84] = v137;
    *(_OWORD *)&v127[100] = v138;
    *(_OWORD *)&v127[4] = v132;
    *(_OWORD *)&v127[20] = v133;
    *(_OWORD *)&v127[36] = v134;
    *(_OWORD *)&v127[52] = v135;
    *(_OWORD *)&v126[52] = v113;
    *(_OWORD *)&v126[36] = v112;
    *(_OWORD *)&v126[20] = v111;
    *(_OWORD *)&v126[4] = *(_OWORD *)__p;
    *(_OWORD *)&v126[100] = v116;
    *(_OWORD *)&v126[84] = v115;
    v49 = a1[2];
    *(_DWORD *)&v127[116] = v139;
    *(_DWORD *)&v126[116] = v117;
    *(_OWORD *)&v126[68] = v114;
    v50 = (char *)operator new(0x168uLL);
    v130 = v50 + 360;
    *(_DWORD *)v50 = 3;
    *(_OWORD *)(v50 + 4) = *(_OWORD *)v118;
    *(_OWORD *)(v50 + 20) = *(_OWORD *)&v118[16];
    *((_OWORD *)v50 + 2) = *(_OWORD *)&v118[28];
    *((_WORD *)v50 + 24) = 0;
    *(int64x2_t *)(v50 + 56) = vdupq_n_s64(1uLL);
    v50[72] = 0;
    v50[92] = 0;
    *(_OWORD *)(v50 + 93) = *(_OWORD *)v131;
    *(_QWORD *)(v50 + 108) = *(_QWORD *)&v131[15];
    v51 = *(_OWORD *)&v127[80];
    *(_OWORD *)(v50 + 180) = *(_OWORD *)&v127[64];
    *(_OWORD *)(v50 + 196) = v51;
    *(_OWORD *)(v50 + 212) = *(_OWORD *)&v127[96];
    *(_QWORD *)(v50 + 228) = *(_QWORD *)&v127[112];
    v52 = *(_OWORD *)&v127[16];
    *(_OWORD *)(v50 + 116) = *(_OWORD *)v127;
    *(_OWORD *)(v50 + 132) = v52;
    v53 = *(_OWORD *)&v127[48];
    *(_OWORD *)(v50 + 148) = *(_OWORD *)&v127[32];
    *(_OWORD *)(v50 + 164) = v53;
    v54 = *(_OWORD *)v126;
    v55 = *(_OWORD *)&v126[16];
    v56 = *(_OWORD *)&v126[48];
    *(_OWORD *)(v50 + 268) = *(_OWORD *)&v126[32];
    *(_OWORD *)(v50 + 284) = v56;
    *(_OWORD *)(v50 + 252) = v55;
    *(_OWORD *)(v50 + 236) = v54;
    v57 = *(_OWORD *)&v126[64];
    v58 = *(_OWORD *)&v126[80];
    v59 = *(_OWORD *)&v126[96];
    *(_QWORD *)(v50 + 348) = *(_QWORD *)&v126[112];
    *(_OWORD *)(v50 + 316) = v58;
    *(_OWORD *)(v50 + 332) = v59;
    *(_OWORD *)(v50 + 300) = v57;
    v128 = v50;
    v129 = v50 + 360;
    TernaryDynamicGOCLayer = (ZinIrOpLayer *)ZinBuilder::CreateTernaryDynamicGOCLayer(v49, (uint64_t)(a1 + 24), 0, 1, (uint64_t)v122, 0, (uint64_t *)&v128, 0, 1.0, 0);
    if (v128)
    {
      v129 = v128;
      operator delete(v128);
    }
    v128 = a1;
    *(_QWORD *)v126 = &v128;
    *(_QWORD *)&v126[8] = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(v127, v126);
    v61 = ZinIrOpLayerGraph::AddNode((uint64_t **)a2, TernaryDynamicGOCLayer, (ZinIrOpLayer ***)v127);
    *(_QWORD *)v127 = &unk_24C02BB18;
    if (*(_QWORD *)&v127[8])
    {
      *(_QWORD *)&v127[16] = *(_QWORD *)&v127[8];
      operator delete(*(void **)&v127[8]);
    }
    v62 = ZinIrOpLayerGraph::AddEdge(a2, v6, (uint64_t)TernaryDynamicGOCLayer, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    v63 = ZinIrOpLayerGraph::AddEdge(a2, (uint64_t)v40, (uint64_t)TernaryDynamicGOCLayer, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    v64 = v61 & v62 & v63 & ZinIrOpLayerGraph::AddEdge(a2, (uint64_t)Reduction, (uint64_t)TernaryDynamicGOCLayer, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    v65 = v101;
    goto LABEL_46;
  }
LABEL_36:
  v67 = a1[2];
  (*(void (**)(__int128 *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v40 + 80))(&v132, v40, 0, 0);
  v68 = operator new(0x78uLL);
  __p[1] = (char *)v68 + 120;
  *(_QWORD *)&v111 = (char *)v68 + 120;
  v69 = v137;
  v68[4] = v136;
  v68[5] = v69;
  v68[6] = v138;
  *((_DWORD *)v68 + 28) = v139;
  v70 = v133;
  *v68 = v132;
  v68[1] = v70;
  v71 = v135;
  v68[2] = v134;
  v68[3] = v71;
  __p[0] = v68;
  v72 = (ZinIrOpLayer *)ZinBuilder::CreateBroadcast(v67, (uint64_t)(a1 + 24), (uint64_t *)__p, (uint64_t)v122, 3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_QWORD *)v127 = a1;
  __p[0] = v127;
  __p[1] = (void *)1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v132, __p);
  v73 = ZinIrOpLayerGraph::AddNode((uint64_t **)a2, v72, (ZinIrOpLayer ***)&v132);
  *(_QWORD *)&v132 = &unk_24C02BB18;
  if (*((_QWORD *)&v132 + 1))
  {
    *(_QWORD *)&v133 = *((_QWORD *)&v132 + 1);
    operator delete(*((void **)&v132 + 1));
  }
  v74 = ZinIrOpLayerGraph::AddEdge(a2, (uint64_t)v40, (uint64_t)v72, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  (*(void (**)(__int128 *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v32 + 80))(&v132, v32, 0, 0);
  (*(void (**)(_QWORD *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v72 + 80))((_QWORD *)&v139 + 1, v72, 0, 0);
  v75 = operator new(0xF0uLL);
  *(_QWORD *)&v111 = v75 + 15;
  v76 = v143;
  v77 = v145[0];
  v75[12] = v144;
  v75[13] = v77;
  *(_OWORD *)((char *)v75 + 220) = *(_OWORD *)((char *)v145 + 12);
  v78 = v139;
  v79 = v141;
  v75[8] = v140;
  v75[9] = v79;
  v75[10] = v142;
  v75[11] = v76;
  v80 = v135;
  v81 = v137;
  v75[4] = v136;
  v75[5] = v81;
  v75[6] = v138;
  v75[7] = v78;
  v82 = v133;
  *v75 = v132;
  v75[1] = v82;
  v75[2] = v134;
  v75[3] = v80;
  __p[0] = v75;
  __p[1] = v75 + 15;
  TernaryDynamicGOCLayer = (ZinIrOpLayer *)ZinBuilder::CreateScaledElementWise(a1[2], (uint64_t)(a1 + 24), 1.0, 1.0, 0.0, (uint64_t)__p, &v123, 3, 1, 0, 0);
  *(_QWORD *)v126 = a1;
  *(_QWORD *)v127 = v126;
  *(_QWORD *)&v127[8] = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v132, v127);
  v83 = ZinIrOpLayerGraph::AddNode((uint64_t **)a2, TernaryDynamicGOCLayer, (ZinIrOpLayer ***)&v132);
  *(_QWORD *)&v132 = &unk_24C02BB18;
  if (*((_QWORD *)&v132 + 1))
  {
    *(_QWORD *)&v133 = *((_QWORD *)&v132 + 1);
    operator delete(*((void **)&v132 + 1));
  }
  v84 = operator new(0x10uLL);
  *(_QWORD *)&v133 = v84 + 2;
  *v84 = v32;
  v84[1] = v72;
  *(_QWORD *)&v132 = v84;
  *((_QWORD *)&v132 + 1) = v84 + 2;
  v85 = ZinIrOpLayerGraph::AddEdgesImplSrc<std::vector<ZinIrOpLayer *>>(a2, (uint64_t *)&v132, (uint64_t)TernaryDynamicGOCLayer);
  v86 = v73 & v74 & v83;
  if ((_QWORD)v132)
  {
    *((_QWORD *)&v132 + 1) = v132;
    operator delete((void *)v132);
  }
  v64 = v86 & v85;
  v65 = v101;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_46:
  if (*(_DWORD *)((*(uint64_t (**)(uint64_t *, _QWORD, _QWORD))(*a1 + 32))(a1, 0, 0) + 88) == 3)
  {
    memset(v106, 0, sizeof(v106));
    v107 = 1065353216;
    v87 = v106;
    v88 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, (uint64_t **)a1, TernaryDynamicGOCLayer, v106);
  }
  else
  {
    if (*(_DWORD *)((*(uint64_t (**)(uint64_t *, _QWORD, _QWORD))(*a1 + 32))(a1, 0, 0) + 88) == 1)
      v89 = 127.0;
    else
      v89 = 255.0;
    v90 = a1[2];
    v91 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)TernaryDynamicGOCLayer
                                                                                   + 32))(TernaryDynamicGOCLayer, 0, 0);
    v92 = (*(uint64_t (**)(uint64_t *, _QWORD, _QWORD))(*a1 + 32))(a1, 0, 0);
    ConstScaleAndBiasGOC = (ZinIrOpLayer *)ZinBuilder::CreateConstScaleAndBiasGOC(v90, (uint64_t)(a1 + 24), v91, *(_DWORD *)(v92 + 88), 0, 0, 1, v89, 0.0);
    *(_QWORD *)v127 = a1;
    __p[0] = v127;
    __p[1] = (void *)1;
    Layer2TDMapper::SourceLayer::SourceLayer(&v132, __p);
    v94 = ZinIrOpLayerGraph::AddNode((uint64_t **)a2, ConstScaleAndBiasGOC, (ZinIrOpLayer ***)&v132);
    *(_QWORD *)&v132 = &unk_24C02BB18;
    if (*((_QWORD *)&v132 + 1))
    {
      *(_QWORD *)&v133 = *((_QWORD *)&v132 + 1);
      operator delete(*((void **)&v132 + 1));
    }
    v95 = ZinIrOpLayerGraph::AddEdge(a2, (uint64_t)TernaryDynamicGOCLayer, (uint64_t)ConstScaleAndBiasGOC, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    memset(v108, 0, sizeof(v108));
    v109 = 1065353216;
    v88 = v94 & v95 & ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, (uint64_t **)a1, ConstScaleAndBiasGOC, v108);
    v87 = v108;
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v87);
  if ((v65 & v103 & v104 & v102 & v100 & v99 & v97 & v98 & v64 & v88 & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, (ZinIrOpLayer *)a1, 0) & 1) == 0)ZinAssertImpl("ANE internal failure: Min/max norm layer graph manipulation error");
  if (v119)
  {
    v120 = v119;
    operator delete(v119);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v122);
  return 0;
}

void sub_206DD2DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,char a50)
{
  void *v51;

  STACK[0x210] = (unint64_t)&unk_24C02BB18;
  v51 = (void *)STACK[0x218];
  if (STACK[0x218])
  {
    STACK[0x220] = (unint64_t)v51;
    operator delete(v51);
  }
  if (a47)
    operator delete(a47);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a50);
  _Unwind_Resume(a1);
}

void sub_206DD2FEC()
{
  JUMPOUT(0x206DD2FE4);
}

_QWORD *ZinMinMaxNormLayer::Clone(ZinIrOpLayer *a1, uint64_t *a2, __int128 *a3)
{
  _QWORD *v6;
  const ZinIrOpLayerOpCode *v7;
  ZinIrOpLayerOpCode *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *GroupId;
  uint64_t v17[2];
  ZinIrOpLayerOpCode *v18;

  v6 = (_QWORD *)operator new();
  v7 = (const ZinIrOpLayerOpCode *)*((_QWORD *)a1 + 8);
  v8 = (ZinIrOpLayerOpCode *)operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(v8, v7);
  *(_QWORD *)v8 = &unk_24C01EED0;
  std::unordered_set<ZinIrDimension>::unordered_set((uint64_t)v8 + 16, (uint64_t)v7 + 16);
  *((_DWORD *)v8 + 14) = *((_DWORD *)v7 + 14);
  v9 = *a2;
  v10 = (std::__shared_weak_count *)a2[1];
  v17[0] = v9;
  v17[1] = (uint64_t)v10;
  v18 = v8;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  ZinMinMaxNormLayer::ZinMinMaxNormLayer(v6, (uint64_t *)&v18, v17, a3);
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v18)
    (*(void (**)(ZinIrOpLayerOpCode *))(*(_QWORD *)v18 + 8))(v18);
  GroupId = (uint64_t *)ZinIrOpLayer::GetGroupId(a1);
  ZinIrOpLayer::SetGroupId((uint64_t)v6, *GroupId);
  return v6;
}

void sub_206DD3130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  MEMORY[0x20BD002F8](v12, 0x10B3C409D855DA1);
  _Unwind_Resume(a1);
}

_QWORD *ZinMinMaxNormLayer::OpCodeKindToString@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "MINMAX_NORM");
}

uint64_t ZinMinMaxNormLayer::DebugDetailPrint@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  _QWORD v5[3];
  _QWORD v6[10];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v8);
}

void sub_206DD3260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ZinMinMaxNormLayer::ValidateSemantics_Impl(ZinIrOpLayer *a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v5;
  int v6;
  int v7;

  if (a2[1] - *a2 != 120)
    ZinAssertImpl("Error: Min/max norm layer can only have one bottom");
  ZinIrOpLayer::ValidateSemantics_Impl(a1, a2, a3);
  if (!a3[1888])
    ZinAssertImpl("Error: Min/max norm layer is not supported on this arch");
  v5 = *((_QWORD *)a1 + 8);
  if (!*(_QWORD *)(v5 + 40))
    ZinAssertImpl("Error: no axis is specified for Min/max norm layer");
  v7 = 0;
  if (std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>((_QWORD *)(v5 + 16), &v7))
  {
    ZinAssertImpl("Error: Min/max norm layer does not support batch axis");
  }
  v6 = 2;
  if (std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>((_QWORD *)(v5 + 16), &v6))
  {
    ZinAssertImpl("Error: Min/max norm layer does not support channel axis");
  }
  ZinF16CheckInBounds(*(float *)(v5 + 56));
}

void ZinMinMaxNormLayer::~ZinMinMaxNormLayer(ZinMinMaxNormLayer *this)
{
  *(_QWORD *)this = off_24C01E4C8;
  *((_QWORD *)this + 24) = off_24C01FBB0;
  if (*((char *)this + 223) < 0)
    operator delete(*((void **)this + 25));
  ZinIrOpLayer::~ZinIrOpLayer(this);
}

{
  *(_QWORD *)this = off_24C01E4C8;
  *((_QWORD *)this + 24) = off_24C01FBB0;
  if (*((char *)this + 223) < 0)
    operator delete(*((void **)this + 25));
  ZinIrOpLayer::~ZinIrOpLayer(this);
  JUMPOUT(0x20BD002F8);
}

void ZinIrMinMaxNormInfo::~ZinIrMinMaxNormInfo(ZinIrMinMaxNormInfo *this)
{
  *(_QWORD *)this = &unk_24C01EED0;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 16);
  ZinIrHalH13g::~ZinIrHalH13g(this);
}

{
  *(_QWORD *)this = &unk_24C01EED0;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 16);
  ZinIrHalH13g::~ZinIrHalH13g(this);
  JUMPOUT(0x20BD002F8);
}

BOOL NeedsUpcastingFrom3bitPaletteTo4bitPalette(uint64_t a1, int a2)
{
  int v2;
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;

  if ((a2 - 15) > 3)
    return 0;
  if ((a2 - 15) >= 4)
    v2 = 0;
  else
    v2 = a2 + 4;
  v3 = *(_DWORD **)(a1 + 1816);
  v4 = *(_DWORD **)(a1 + 1824);
  if (v3 != v4)
  {
    v5 = *(_DWORD **)(a1 + 1816);
    while (*v5 != a2)
    {
      if (++v5 == v4)
      {
        v5 = *(_DWORD **)(a1 + 1824);
        break;
      }
    }
    if (v5 != v4)
      return 0;
    while (*v3 != v2)
    {
      if (++v3 == v4)
      {
        v3 = *(_DWORD **)(a1 + 1824);
        return v3 != v4;
      }
    }
  }
  return v3 != v4;
}

BOOL Is3bitPaletteKernelFormat(int a1)
{
  return (a1 - 15) < 4;
}

uint64_t GetUpcasted4bitPaletteFormatFrom3bitPaletteFormat(int a1)
{
  if ((a1 - 15) >= 4)
    return 0;
  else
    return (a1 + 4);
}

uint64_t ZinMirTransposeEngineFusion::FuseCWTransposeToEngineLayer(ZinMirTransposeEngineFusion *this, uint64_t **a2, size_t *a3)
{
  ZinIrOpLayer *v5;
  uint64_t v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  size_t v11;
  void *p_p;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  void *__p;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;

  v5 = (ZinIrOpLayer *)operator new();
  v6 = operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(v6, 94);
  v26 = v6;
  v7 = (uint64_t *)(*(uint64_t (**)(size_t *, _QWORD, _QWORD))(*a3 + 40))(a3, 0, 0);
  v8 = (std::__shared_weak_count *)v7[1];
  v24 = *v7;
  v25 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (*((char *)a3 + 47) >= 0)
    v11 = *((unsigned __int8 *)a3 + 47);
  else
    v11 = a3[4];
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v11 + 16);
  if (SHIBYTE(v22) < 0)
    p_p = __p;
  if (v11)
  {
    if (*((char *)a3 + 47) >= 0)
      v13 = (char *)(a3 + 3);
    else
      v13 = (char *)a3[3];
    memmove(p_p, v13, v11);
  }
  strcpy((char *)p_p + v11, "_transposeengine");
  ZinTransposeEngineLayer::ZinTransposeEngineLayer(v5, &v26, &v24, a3, 0, &__p);
  if (SHIBYTE(v22) < 0)
    operator delete(__p);
  v14 = v25;
  if (v25)
  {
    v15 = (unint64_t *)&v25->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v26;
  v26 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  __p = &unk_24C02BB18;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v18 = ZinIrOpLayerGraph::ReplaceNode(a2, (ZinIrOpLayer *)a3, v5, (const Layer2TDMapper::SourceLayer *)&__p);
  __p = &unk_24C02BB18;
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  if (v18)
    return 0;
  else
    return 3;
}

void sub_206DD36F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirTransposeEngineFusion::Execute(ZinMirTransposeEngineFusion *this, ZinIrControlFlowGraph *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6[0] = &off_24C001B30;
  v6[1] = this;
  v7 = v6;
  v2 = ZinIrControlFlowGraph::TraverseForward(a2, (uint64_t)v6, 1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_206DD3850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ZinMirTransposeEngineFusion::Execute(ZinIrControlFlowGraph *)::$_0,std::allocator<ZinMirTransposeEngineFusion::Execute(ZinIrControlFlowGraph *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinMirTransposeEngineFusion::Execute(ZinIrControlFlowGraph *)::$_0,std::allocator<ZinMirTransposeEngineFusion::Execute(ZinIrControlFlowGraph *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C001B30;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinMirTransposeEngineFusion::Execute(ZinIrControlFlowGraph *)::$_0,std::allocator<ZinMirTransposeEngineFusion::Execute(ZinIrControlFlowGraph *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C001B30;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinMirTransposeEngineFusion::Execute(ZinIrControlFlowGraph *)::$_0,std::allocator<ZinMirTransposeEngineFusion::Execute(ZinIrControlFlowGraph *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t ***a2, ZinIrOpLayer **a3)
{
  uint64_t **v3;
  ZinIrOpLayer *v4;
  _BOOL8 IsCWTranspose;
  uint64_t result;

  v3 = *a2;
  v4 = *a3;
  if (ZinIrOpLayer::IsANELayer(*a3))
    return 0;
  if (*(_DWORD *)(*((_QWORD *)v4 + 8) + 8) != 37)
    return 0;
  IsCWTranspose = ZinTransposeLayer::IsCWTranspose(v4);
  if (!IsCWTranspose)
    return 0;
  result = ZinMirTransposeEngineFusion::FuseCWTransposeToEngineLayer((ZinMirTransposeEngineFusion *)IsCWTranspose, v3, (size_t *)v4);
  if (!(_DWORD)result)
    return 0;
  return result;
}

uint64_t std::__function::__func<ZinMirTransposeEngineFusion::Execute(ZinIrControlFlowGraph *)::$_0,std::allocator<ZinMirTransposeEngineFusion::Execute(ZinIrControlFlowGraph *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirTransposeEngineFusion::Execute(ZinIrControlFlowGraph *)::$_0,std::allocator<ZinMirTransposeEngineFusion::Execute(ZinIrControlFlowGraph *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

_QWORD *ZinReinterpretCastLayer::ZinReinterpretCastLayer(_QWORD *a1, uint64_t *a2, uint64_t *a3, __int128 *a4)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  ZinIrKernel *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  ZinIrKernel *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v5 = a3[1];
  v14 = *a3;
  v15 = (std::__shared_weak_count *)v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v13 = 0;
  ZinIrOpLayer::ZinIrOpLayer((uint64_t)a1, a2, &v14, a4, &v13);
  v8 = v13;
  v13 = 0;
  if (v8)
  {
    ZinIrKernel::~ZinIrKernel(v8);
    MEMORY[0x20BD002F8]();
  }
  v9 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *a1 = &off_24C022598;
  return a1;
}

void sub_206DD3A58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  ZinIrKernel *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, ZinIrKernel *);
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)va, 0);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t ZinReinterpretCastLayer::Lower()
{
  return 0;
}

_QWORD *ZinReinterpretCastLayer::Clone(ZinIrOpLayer *a1, uint64_t *a2, __int128 *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *GroupId;
  uint64_t v17[2];
  uint64_t v18;

  v6 = (_QWORD *)operator new();
  v7 = operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(v7, 34);
  v8 = *a2;
  v9 = (std::__shared_weak_count *)a2[1];
  v17[0] = v8;
  v17[1] = (uint64_t)v9;
  v18 = v7;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  ZinReinterpretCastLayer::ZinReinterpretCastLayer(v6, &v18, v17, a3);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = v18;
  v18 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  GroupId = (uint64_t *)ZinIrOpLayer::GetGroupId(a1);
  ZinIrOpLayer::SetGroupId((uint64_t)v6, *GroupId);
  return v6;
}

void sub_206DD3B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  v14 = a12;
  a12 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  MEMORY[0x20BD002F8](v12, 0x10B3C4024B96488);
  _Unwind_Resume(a1);
}

_QWORD *ZinReinterpretCastLayer::OpCodeKindToString@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "REINTERPRET_CAST");
}

uint64_t ZinReinterpretCastLayer::DebugDetailPrint(ZinReinterpretCastLayer *this)
{
  return (*(uint64_t (**)(ZinReinterpretCastLayer *))(*(_QWORD *)this + 184))(this);
}

uint64_t ZinMirNETransposeFusion::Execute(ZinMirNETransposeFusion *this, ZinIrControlFlowGraph *a2, ZinIrNetworkStatus *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v7[0] = &off_24C001768;
  v7[1] = this;
  v8 = v7;
  v3 = ZinIrControlFlowGraph::TraverseForward(a2, (uint64_t)v7, 1);
  v4 = v8;
  if (v8 == v7)
  {
    v5 = 4;
    v4 = v7;
    goto LABEL_5;
  }
  if (v8)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return v3;
}

void sub_206DD3CCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirNETransposeFusion::FuseToSingleEngine(int ***this, uint64_t **a2, ZinANELayer *a3, ZinTransposeLayer *a4)
{
  ZinIrOpLayer *v8;
  uint64_t result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BOOL8 v15;
  int *v16;
  ZinEngineLayerMirInfo *v17;
  ZinEngineLayerMirInfo *v18;
  uint64_t *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  size_t v23;
  std::string *v24;
  const void *v25;
  std::string *v26;
  __int128 v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  ZinIrOpLayer *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  ZinIrKernel *v36;
  uint64_t *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _BOOL4 v44;
  int v45;
  int v46;
  _BOOL4 v47;
  int v48;
  _OWORD v49[2];
  int v50;
  _OWORD v51[2];
  int v52;
  void *__p[2];
  void *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  std::string v57;
  std::string v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  __int128 v61;
  int64_t v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v8 = (ZinIrOpLayer *)**((_QWORD **)a3 + 11);
  result = ZinIrOpLayer::IsNELayer(v8);
  if (!(_DWORD)result)
    return result;
  if (*((_QWORD *)v8 + 15) - *((_QWORD *)v8 + 14) > 8uLL)
    return 0;
  v10 = (_QWORD *)**((_QWORD **)a3 + 11);
  if (((*(uint64_t (**)(_QWORD *))(*v10 + 408))(v10) & 1) != 0)
    return 0;
  if (v10[33])
  {
    v11 = (*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)a3 + 32))(a3, 0, 0) + 48;
    v12 = *(unsigned int *)((*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)a3 + 32))(a3, 0, 0)+ 88);
    v15 = (*(uint64_t (**)(_QWORD *))(*v10 + 344))(v10) != 0x100000001 || v13 != 1;
    if (((*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD *, int *, _BOOL8))(*v10 + 600))(v10, v11, v12, v10 + 33, **this, v15) & 1) == 0)return 0;
    goto LABEL_16;
  }
  v16 = **this;
  v17 = (ZinEngineLayerMirInfo *)operator new();
  ZinEngineLayerMirInfo::ZinEngineLayerMirInfo(v17, v16[2]);
  __p[0] = v17;
  ZinNELayer::FindValidMirInfoForOutputTranspose((ZinANELayer *)v10, **this, (uint64_t)(*this)[1], (ZinEngineLayerMirInfo **)__p);
  if (!__p[0])
    return 0;
  ZinMirL2Config::ZinMirSetFormats((ZinMirL2Config *)((char *)__p[0] + 120), (const ZinIrOpLayer *)v10);
  ZinANELayer::SetMirInfo((uint64_t)v10, (int **)__p);
  v18 = (ZinEngineLayerMirInfo *)__p[0];
  __p[0] = 0;
  if (v18)
  {
    ZinEngineLayerMirInfo::~ZinEngineLayerMirInfo(v18);
    MEMORY[0x20BD002F8]();
  }
LABEL_16:
  v19 = (uint64_t *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v10 + 40))(v10, 0, 0);
  v20 = (std::__shared_weak_count *)v19[1];
  v59 = *v19;
  v60 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  if (*((char *)v10 + 47) >= 0)
    v23 = *((unsigned __int8 *)v10 + 47);
  else
    v23 = v10[4];
  v24 = &v58;
  std::string::basic_string[abi:ne180100]((uint64_t)&v58, v23 + 1);
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v24 = (std::string *)v58.__r_.__value_.__r.__words[0];
  if (v23)
  {
    if (*((char *)v10 + 47) >= 0)
      v25 = v10 + 3;
    else
      v25 = (const void *)v10[3];
    memmove(v24, v25, v23);
  }
  *(_WORD *)((char *)&v24->__r_.__value_.__l.__data_ + v23) = 95;
  std::string::basic_string[abi:ne180100]<0>(&v57, "fuse_to_single");
  v26 = std::string::append(&v57, "_xfm", 4uLL);
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v62 = v26->__r_.__value_.__r.__words[2];
  v61 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (v62 >= 0)
    v28 = (const std::string::value_type *)&v61;
  else
    v28 = (const std::string::value_type *)v61;
  if (v62 >= 0)
    v29 = HIBYTE(v62);
  else
    v29 = *((_QWORD *)&v61 + 1);
  v30 = std::string::append(&v58, v28, v29);
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v54 = (void *)v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  v32 = (ZinIrOpLayer *)(*(uint64_t (**)(_QWORD *, uint64_t *, void **))(*v10 + 176))(v10, &v59, __p);
  if (SHIBYTE(v54) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v62) < 0)
    operator delete((void *)v61);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  v33 = v60;
  if (v60)
  {
    v34 = (unint64_t *)&v60->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = (ZinIrKernel *)v10[17];
  if (v36)
  {
    v10[17] = 0;
    std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)v32 + 17, v36);
  }
  *((_QWORD *)v32 + 50) = a4;
  v37 = (uint64_t *)(*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)a3 + 40))(a3, 0, 0);
  v38 = (std::__shared_weak_count *)v37[1];
  v55 = *v37;
  v56 = v38;
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  (*(void (**)(ZinIrOpLayer *, uint64_t *))(*(_QWORD *)v32 + 24))(v32, &v55);
  v41 = v56;
  if (v56)
  {
    v42 = (unint64_t *)&v56->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  *(_QWORD *)&v61 = v10;
  *((_QWORD *)&v61 + 1) = a3;
  v58.__r_.__value_.__r.__words[0] = (std::string::size_type)&v61;
  v58.__r_.__value_.__l.__size_ = 2;
  Layer2TDMapper::SourceLayer::SourceLayer(__p, &v58);
  v44 = ZinIrOpLayerGraph::AddNode(a2, v32, (ZinIrOpLayer ***)__p);
  __p[0] = &unk_24C02BB18;
  if (__p[1])
  {
    v54 = __p[1];
    operator delete(__p[1]);
  }
  v45 = ZinIrOpLayerGraph::MoveIncomingEdges((ZinIrOpLayerGraph *)a2, (ZinIrOpLayer *)v10, v32);
  memset(v51, 0, sizeof(v51));
  v52 = 1065353216;
  v46 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, (uint64_t **)v10, v32, v51);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v51);
  v47 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, (ZinIrOpLayer *)v10, 0);
  memset(v49, 0, sizeof(v49));
  v50 = 1065353216;
  v48 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, (uint64_t **)a3, v32, v49);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v49);
  if ((v44 & v45 & v46 & v47 & v48 & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, a3, 0)) != 0)
    return 0;
  else
    return 3;
}

void sub_206DD4228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *__p,uint64_t a23,uint64_t a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  MEMORY[0x20BD002F8](v32, 0x10B0C40CB92D005);
  _Unwind_Resume(a1);
}

uint64_t ZinMirNETransposeFusion::ConcatHandler::IsFusableConcat(ZinMirNETransposeFusion::ConcatHandler *this, ZinConcatLayer *a2)
{
  _QWORD *v3;
  _QWORD *i;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  char *v23;
  uint64_t v24;
  ZinIrOpLayer **v25;
  ZinIrOpLayer **v26;
  ZinANELayer *v27;
  char IsFusableConcat;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  _BOOL8 v38;
  ZinEngineLayerMirInfo *v39;
  char v40;
  ZinEngineLayerMirInfo *v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v46;
  ZinEngineLayerMirInfo *v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  void *__p;
  char *v53;
  char *v54;

  if (*((_QWORD *)a2 + 15) - *((_QWORD *)a2 + 14) != 8 || (*(_DWORD *)(*((_QWORD *)a2 + 8) + 12) | 2) != 2)
    return 0;
  v46 = **(_QWORD **)this;
  v44 = *(_QWORD *)(*(_QWORD *)this + 8);
  __p = 0;
  v53 = 0;
  v54 = 0;
  v3 = (_QWORD *)*((_QWORD *)a2 + 11);
  for (i = (_QWORD *)*((_QWORD *)a2 + 12); v3 != i; ++v3)
  {
    v5 = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 0, 0);
    v6 = v5[6];
    v7 = v5[8];
    v8 = v5[10];
    v9 = *(_DWORD *)(*((_QWORD *)a2 + 8) + 12);
    if (v9)
      v10 = v5[7];
    else
      v10 = v5[9];
    if (v9)
      v11 = v5[9];
    else
      v11 = v5[7];
    v12 = v53;
    if (v53 >= v54)
    {
      v14 = (char *)__p;
      v15 = 0xCCCCCCCCCCCCCCCDLL * ((v53 - (_BYTE *)__p) >> 3);
      v16 = v15 + 1;
      if (v15 + 1 > 0x666666666666666)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      if (0x999999999999999ALL * ((v54 - (_BYTE *)__p) >> 3) > v16)
        v16 = 0x999999999999999ALL * ((v54 - (_BYTE *)__p) >> 3);
      if (0xCCCCCCCCCCCCCCCDLL * ((v54 - (_BYTE *)__p) >> 3) >= 0x333333333333333)
        v17 = 0x666666666666666;
      else
        v17 = v16;
      if (v17)
      {
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)&v54, v17);
        v14 = (char *)__p;
        v12 = v53;
      }
      else
      {
        v18 = 0;
      }
      v19 = &v18[8 * ((v53 - (_BYTE *)__p) >> 3)];
      *(_QWORD *)v19 = v6;
      *((_QWORD *)v19 + 1) = v10;
      *((_QWORD *)v19 + 2) = v7;
      *((_QWORD *)v19 + 3) = v11;
      *((_QWORD *)v19 + 4) = v8;
      if (v12 == v14)
      {
        v23 = &v18[40 * v15];
      }
      else
      {
        v20 = &v18[40 * v15];
        do
        {
          v21 = *(_OWORD *)(v12 - 40);
          v22 = *(_OWORD *)(v12 - 24);
          v23 = v20 - 40;
          *((_QWORD *)v20 - 1) = *((_QWORD *)v12 - 1);
          *(_OWORD *)(v20 - 24) = v22;
          *(_OWORD *)(v20 - 40) = v21;
          v12 -= 40;
          v20 -= 40;
        }
        while (v12 != v14);
      }
      v13 = v19 + 40;
      __p = v23;
      v53 = v19 + 40;
      v54 = &v18[40 * v17];
      if (v14)
        operator delete(v14);
    }
    else
    {
      *(_QWORD *)v53 = v6;
      *((_QWORD *)v12 + 1) = v10;
      *((_QWORD *)v12 + 2) = v7;
      *((_QWORD *)v12 + 3) = v11;
      v13 = v12 + 40;
      *((_QWORD *)v12 + 4) = v8;
    }
    v53 = v13;
  }
  v24 = (*(uint64_t (**)(ZinConcatLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  if (ZinConcatLayerUtils::IsWidthAlign(&__p, *(_DWORD *)(v24 + 88), *(_QWORD *)(v46 + 528)))
  {
    v26 = (ZinIrOpLayer **)*((_QWORD *)a2 + 11);
    v25 = (ZinIrOpLayer **)*((_QWORD *)a2 + 12);
    if (v26 != v25)
    {
      while (1)
      {
        v27 = *v26;
        if (*(_DWORD *)(*((_QWORD *)*v26 + 8) + 8) == 7)
          break;
        if (!ZinIrOpLayer::IsNELayer(*v26)
          || ((*(uint64_t (**)(ZinANELayer *))(*(_QWORD *)v27 + 408))(v27) & 1) != 0)
        {
          goto LABEL_51;
        }
        v29 = (*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)v27 + 32))(v27, 0, 0);
        v30 = *(_OWORD *)(v29 + 64);
        v49 = *(_OWORD *)(v29 + 48);
        v50 = v30;
        v51 = *(_QWORD *)(v29 + 80);
        v48 = 0;
        v31 = (*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)v27 + 32))(v27, 0, 0);
        v32 = *(unsigned int *)(v31 + 88);
        ZinTensorFormatGetSize(*(_DWORD *)(v31 + 88), &v48);
        v33 = *((_QWORD *)&v50 + 1);
        if (!*(_DWORD *)(*((_QWORD *)a2 + 8) + 12))
        {
          v34 = *((_QWORD *)&v49 + 1);
          *((_QWORD *)&v49 + 1) = *((_QWORD *)&v50 + 1);
          *((_QWORD *)&v50 + 1) = v34;
          v33 = v34;
        }
        if ((unint64_t)(v48 * v33) % *(_QWORD *)(v46 + 528))
          goto LABEL_51;
        v35 = (*(uint64_t (**)(ZinANELayer *))(*(_QWORD *)v27 + 344))(v27);
        v36 = (*(uint64_t (**)(ZinANELayer *))(*(_QWORD *)v27 + 344))(v27);
        (*(void (**)(ZinANELayer *))(*(_QWORD *)v27 + 344))(v27);
        v38 = 1;
        if (v35 == 1)
          v38 = (v36 & 0xFFFFFFFF00000000) != 0x100000000 || v37 != 1;
        if (*((_QWORD *)v27 + 33))
        {
          IsFusableConcat = (*(uint64_t (**)(ZinANELayer *, __int128 *, uint64_t, uint64_t, uint64_t, _BOOL8))(*(_QWORD *)v27 + 600))(v27, &v49, v32, (uint64_t)v27 + 264, v46, v38);
LABEL_44:
          if ((IsFusableConcat & 1) == 0)
            goto LABEL_51;
          goto LABEL_45;
        }
        v39 = (ZinEngineLayerMirInfo *)operator new();
        ZinEngineLayerMirInfo::ZinEngineLayerMirInfo(v39, *(int *)(v46 + 8));
        v47 = v39;
        ZinNELayer::FindValidMirInfoForOutputTranspose(v27, (int *)v46, v44, &v47);
        if (!v47)
          goto LABEL_51;
        v40 = (*(uint64_t (**)(ZinANELayer *, __int128 *, uint64_t, ZinEngineLayerMirInfo **, uint64_t, _BOOL8))(*(_QWORD *)v27 + 600))(v27, &v49, v32, &v47, v46, v38);
        v41 = v47;
        v47 = 0;
        if (v41)
        {
          ZinEngineLayerMirInfo::~ZinEngineLayerMirInfo(v41);
          MEMORY[0x20BD002F8]();
        }
        if ((v40 & 1) == 0)
          goto LABEL_51;
LABEL_45:
        if (++v26 == v25)
          goto LABEL_53;
      }
      IsFusableConcat = ZinMirNETransposeFusion::ConcatHandler::IsFusableConcat(this, *v26);
      goto LABEL_44;
    }
LABEL_53:
    v42 = 1;
  }
  else
  {
LABEL_51:
    v42 = 0;
  }
  if (__p)
  {
    v53 = (char *)__p;
    operator delete(__p);
  }
  return v42;
}

void sub_206DD4788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  uint64_t v21;

  MEMORY[0x20BD002F8](v21, 0x10B0C40CB92D005);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t ZinMirNETransposeFusion::ConcatHandler::NEIncomingHandler(ZinMirNETransposeFusion::ConcatHandler *this, uint64_t **a2, ZinObjectNameFactory *a3, ZinNELayer *a4, ZinTransposeLayer *a5)
{
  uint64_t *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  ZinIrOpLayer *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  ZinIrKernel *v17;
  uint64_t *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  void *v29;
  int v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  int v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v49;
  std::__shared_weak_count *v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  _QWORD *v58;
  void *v59[2];
  char v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  void *__p[2];
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;

  v9 = (uint64_t *)(*(uint64_t (**)(ZinNELayer *, _QWORD, _QWORD))(*(_QWORD *)a4 + 40))(a4, 0, 0);
  v10 = (std::__shared_weak_count *)v9[1];
  v68 = *v9;
  v69 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  (*(void (**)(void **__return_ptr, ZinObjectNameFactory *, uint64_t))(*(_QWORD *)a3 + 16))(__p, a3, 1);
  v13 = (ZinIrOpLayer *)(*(uint64_t (**)(ZinNELayer *, uint64_t *, void **))(*(_QWORD *)a4 + 176))(a4, &v68, __p);
  if (SBYTE7(v64) < 0)
    operator delete(__p[0]);
  v14 = v69;
  if (v69)
  {
    v15 = (unint64_t *)&v69->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (ZinIrKernel *)*((_QWORD *)a4 + 17);
  if (v17)
  {
    *((_QWORD *)a4 + 17) = 0;
    std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)v13 + 17, v17);
  }
  v18 = (uint64_t *)(*(uint64_t (**)(ZinTransposeLayer *, _QWORD, _QWORD))(*(_QWORD *)a5 + 40))(a5, 0, 0);
  v19 = (std::__shared_weak_count *)v18[1];
  v66 = *v18;
  v67 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  (*(void (**)(void **__return_ptr, ZinObjectNameFactory *, uint64_t))(*(_QWORD *)a3 + 16))(__p, a3, 1);
  v22 = (*(uint64_t (**)(ZinTransposeLayer *, uint64_t *, void **))(*(_QWORD *)a5 + 176))(a5, &v66, __p);
  if (SBYTE7(v64) < 0)
    operator delete(__p[0]);
  v23 = v67;
  if (v67)
  {
    v24 = (unint64_t *)&v67->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  *((_QWORD *)v13 + 50) = v22;
  v26 = (*(uint64_t (**)(ZinNELayer *, _QWORD, _QWORD))(*(_QWORD *)a4 + 32))(a4, 0, 0);
  v27 = *(_OWORD *)(v26 + 64);
  *(_OWORD *)__p = *(_OWORD *)(v26 + 48);
  v64 = v27;
  v28 = *(_QWORD *)(v26 + 80);
  v29 = __p[1];
  __p[1] = *((void **)&v27 + 1);
  *((_QWORD *)&v64 + 1) = v29;
  v65 = v28;
  v30 = *(_DWORD *)((*(uint64_t (**)(ZinNELayer *, _QWORD, _QWORD))(*(_QWORD *)a4 + 32))(a4, 0, 0) + 88);
  v31 = *((_QWORD *)a4 + 2);
  (*(void (**)(void **__return_ptr, ZinObjectNameFactory *, _QWORD))(*(_QWORD *)a3 + 16))(v59, a3, 0);
  v57 = 0;
  v58 = 0;
  v56 = 0;
  LODWORD(v51) = 0;
  v53 = 0;
  v54 = 0;
  v52 = 0;
  v55 = 0;
  ZinIrTensor::CreateTensor(v31, v30, (__int128 *)__p, (__int128 *)v59, &v58, &v56, (unsigned int *)&v51, &v61);
  v32 = v57;
  if (v57)
  {
    v33 = (unint64_t *)&v57->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v58;
  v58 = 0;
  if (v35)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v58, v35);
  if (v60 < 0)
    operator delete(v59[0]);
  if (*(_BYTE *)((*(uint64_t (**)(ZinNELayer *, _QWORD, _QWORD))(*(_QWORD *)a4 + 32))(a4, 0, 0) + 144))
  {
    v36 = v61;
    v37 = (*(uint64_t (**)(ZinNELayer *, _QWORD, _QWORD))(*(_QWORD *)a4 + 32))(a4, 0, 0);
    if (!*(_BYTE *)(v37 + 144))
      std::__throw_bad_optional_access[abi:ne180100]();
    v38 = *(unsigned __int8 *)(v36 + 144);
    *(_OWORD *)(v36 + 128) = *(_OWORD *)(v37 + 128);
    if (!v38)
      *(_BYTE *)(v36 + 144) = 1;
  }
  v49 = v61;
  v50 = v62;
  if (v62)
  {
    v39 = (unint64_t *)&v62->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  (*(void (**)(ZinIrOpLayer *, uint64_t *))(*(_QWORD *)v13 + 24))(v13, &v49);
  v41 = v50;
  if (v50)
  {
    v42 = (unint64_t *)&v50->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v51 = &unk_24C02BB18;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v44 = ZinIrOpLayerGraph::ReplaceNode(a2, a4, v13, (const Layer2TDMapper::SourceLayer *)&v51);
  v51 = &unk_24C02BB18;
  if (v52)
  {
    v53 = v52;
    operator delete(v52);
  }
  v45 = v62;
  if (v62)
  {
    v46 = (unint64_t *)&v62->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v44)
    return 0;
  else
    return 3;
}

void sub_206DD4C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (__p)
    operator delete(__p);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t ZinMirNETransposeFusion::ConcatHandler::BuildNewConcat(ZinMirNETransposeFusion::ConcatHandler *this, ZinIrOpLayerGraph *a2, ZinObjectNameFactory *a3, ZinConcatLayer *a4, ZinANELayer *a5)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *i8;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  int64x2_t *v21;
  int64x2_t v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  ZinANELayer *v38;
  ZinIrTensor *v39;
  uint64_t v40;
  ZinIrTensor::MirInfo *v41;
  ZinIrTensor::MirInfo *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *i;
  uint64_t v46;
  int v47;
  uint64_t v48;
  ZinIrTensor::MirInfo *v49;
  _QWORD **v51;
  int64x2_t v54;
  __int128 v55;
  ZinIrTensor::MirInfo *v56;
  _QWORD *v57;
  _QWORD *v58;
  ZinIrTensor::MirInfo *v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;

  v63 = 0;
  v64 = 0;
  v65 = 0;
  v6 = (_QWORD *)*((_QWORD *)a4 + 11);
  v51 = (_QWORD **)((char *)a4 + 88);
  v7 = (_QWORD *)*((_QWORD *)a4 + 12);
  if (v6 != v7)
  {
    v8 = 0;
    v54 = vdupq_n_s64(1uLL);
    do
    {
      v9 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v6 + 32))(*v6, 0, 0);
      v10 = *(_DWORD *)(*((_QWORD *)a4 + 8) + 12);
      if (v10 == 2)
      {
        v13 = 0;
        v12 = (uint64_t *)(v9 + 64);
        v11 = v8;
      }
      else
      {
        if (v10)
        {
          v48 = 0;
          goto LABEL_47;
        }
        v11 = 0;
        v12 = (uint64_t *)(v9 + 72);
        v13 = v8;
      }
      v14 = *v12;
      v15 = v64;
      if (v64 >= v65)
      {
        v17 = 0xCCCCCCCCCCCCCCCDLL * ((v64 - v63) >> 4);
        v18 = v17 + 1;
        if (v17 + 1 > 0x333333333333333)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((v65 - v63) >> 4) > v18)
          v18 = 0x999999999999999ALL * ((v65 - v63) >> 4);
        if (0xCCCCCCCCCCCCCCCDLL * ((v65 - v63) >> 4) >= 0x199999999999999)
          v19 = 0x333333333333333;
        else
          v19 = v18;
        if (v19)
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)&v65, v19);
        else
          v20 = 0;
        v21 = (int64x2_t *)&v20[16 * ((v64 - v63) >> 4)];
        v21->i64[0] = 0;
        v21->i64[1] = 0;
        v21[1].i64[0] = v11;
        v21[1].i64[1] = v13;
        v22 = vdupq_n_s64(1uLL);
        v21[2] = (int64x2_t)xmmword_207A80930;
        v21[3] = v22;
        v21[4] = v22;
        v24 = v63;
        v23 = v64;
        v25 = &v20[80 * v17];
        if (v64 != v63)
        {
          do
          {
            *((_OWORD *)v25 - 5) = *((_OWORD *)v23 - 5);
            v26 = *((_OWORD *)v23 - 4);
            v27 = *((_OWORD *)v23 - 3);
            v28 = *((_OWORD *)v23 - 1);
            *((_OWORD *)v25 - 2) = *((_OWORD *)v23 - 2);
            *((_OWORD *)v25 - 1) = v28;
            *((_OWORD *)v25 - 4) = v26;
            *((_OWORD *)v25 - 3) = v27;
            v25 -= 80;
            v23 -= 80;
          }
          while (v23 != v24);
          v23 = v24;
        }
        i8 = v21[5].i8;
        v63 = v25;
        v64 = v21[5].i8;
        v65 = &v20[80 * v19];
        if (v23)
          operator delete(v23);
      }
      else
      {
        *(_QWORD *)v64 = 0;
        *((_QWORD *)v15 + 1) = 0;
        *((_QWORD *)v15 + 2) = v11;
        *((_QWORD *)v15 + 3) = v13;
        *((_OWORD *)v15 + 2) = xmmword_207A80930;
        *((int64x2_t *)v15 + 3) = v54;
        i8 = v15 + 80;
        *((int64x2_t *)v15 + 4) = v54;
      }
      v8 += v14;
      v64 = i8;
      ++v6;
    }
    while (v6 != v7);
  }
  v29 = *((_QWORD *)a4 + 8);
  v31 = *(_DWORD *)(v29 + 8);
  v30 = *(_DWORD *)(v29 + 12);
  if (v30)
    v32 = 0;
  else
    v32 = v31 == 7;
  if (v32)
    v33 = 3;
  else
    v33 = v30;
  v34 = (*(uint64_t (**)(ZinConcatLayer *, _QWORD, _QWORD))(*(_QWORD *)a4 + 32))(a4, 0, 0);
  v35 = *(_OWORD *)(v34 + 64);
  v60 = *(_OWORD *)(v34 + 48);
  v61 = v35;
  v36 = *(_QWORD *)(v34 + 80);
  v37 = *((_QWORD *)&v60 + 1);
  *((_QWORD *)&v60 + 1) = *((_QWORD *)&v35 + 1);
  *((_QWORD *)&v61 + 1) = v37;
  v62 = v36;
  if (**((ZinANELayer ***)a4 + 14) == a5)
    v38 = a5;
  else
    v38 = a4;
  v39 = (ZinIrTensor *)(*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)v38 + 32))(v38, 0, 0);
  ZinIrTensor::CopyTensorMirInfo(v39, &v59);
  v40 = *((_QWORD *)a4 + 2);
  v41 = v59;
  v59 = 0;
  v56 = v41;
  ZinBuilder::CreateConcat(v40, (uint64_t)a3, &v60, v51, (uint64_t)&v63, v33, 1, &v56, (void **)&v57, 0);
  v42 = v56;
  v56 = 0;
  if (v42)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v56, v42);
  if (*(_BYTE *)((*(uint64_t (**)(ZinConcatLayer *, _QWORD, _QWORD))(*(_QWORD *)a4 + 32))(a4, 0, 0)
                + 144))
  {
    v43 = (*(uint64_t (**)(ZinConcatLayer *, _QWORD, _QWORD))(*(_QWORD *)a4 + 32))(a4, 0, 0);
    if (!*(_BYTE *)(v43 + 144))
      std::__throw_bad_optional_access[abi:ne180100]();
    v55 = *(_OWORD *)(v43 + 128);
    v44 = v57;
    for (i = v58; v44 != i; ++v44)
    {
      if (*v44)
      {
        v46 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v44 + 32))(*v44, 0, 0);
        v47 = *(unsigned __int8 *)(v46 + 144);
        *(_OWORD *)(v46 + 128) = v55;
        if (!v47)
          *(_BYTE *)(v46 + 144) = 1;
      }
    }
  }
  v48 = *(v58 - 1);
  if (v57)
  {
    v58 = v57;
    operator delete(v57);
  }
  v49 = v59;
  v59 = 0;
  if (v49)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v59, v49);
LABEL_47:
  if (v63)
  {
    v64 = v63;
    operator delete(v63);
  }
  return v48;
}

void sub_206DD5084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,_QWORD *a26)
{
  uint64_t v26;
  _QWORD *v28;
  void *v29;

  if (__p)
    operator delete(__p);
  v28 = a26;
  a26 = 0;
  if (v28)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&a26, v28);
  v29 = *(void **)(v26 - 112);
  if (v29)
  {
    *(_QWORD *)(v26 - 104) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirNETransposeFusion::ConcatHandler::UpdateFusedNELayerMirInfo(int ***this, ZinConcatLayer *a2)
{
  ZinIrTensor *v3;
  char *v4;
  char *v5;
  int **v6;
  int *v7;
  uint64_t v8;
  NSObject *v9;
  ZinIrOpLayer *v10;
  char IsNoOp;
  ZinIrOpLayer *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  ZinEngineLayerMirInfo *v18;
  ZinEngineLayerMirInfo *v19;
  uint64_t v20;
  ZinEngineLayerMirInfo *v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t v27;
  char v28[7];
  ZinEngineLayerMirInfo *v29;
  void *__p[2];
  __int128 v31;
  uint64_t v32;
  char *v33;
  char *v34;

  v3 = (ZinIrTensor *)(*(uint64_t (**)(ZinConcatLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  ZinIrTensor::GetTensorFamily(v3, (uint64_t)&v33);
  v4 = v33;
  v5 = v34;
  if (v33 == v34)
  {
    v22 = 0;
    if (v33)
      goto LABEL_26;
    return v22;
  }
  v6 = *this;
  v7 = **this;
  v8 = (uint64_t)v6[1];
  v9 = MEMORY[0x24BDACB70];
  while (1)
  {
    v10 = *(ZinIrOpLayer **)(*(_QWORD *)v4 + 96);
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)&v31 = 0;
    IsNoOp = ZinIrOpLayer::IsNoOp(v10, (uint64_t *)__p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if ((IsNoOp & 1) != 0)
      goto LABEL_18;
    v12 = *(ZinIrOpLayer **)(*(_QWORD *)v4 + 96);
    if (!ZinIrOpLayer::IsNELayer(v12))
      break;
    v13 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0, 0);
    v14 = *(_OWORD *)(v13 + 64);
    *(_OWORD *)__p = *(_OWORD *)(v13 + 48);
    v31 = v14;
    v15 = *(_QWORD *)(v13 + 80);
    v16 = __p[1];
    __p[1] = *((void **)&v14 + 1);
    *((_QWORD *)&v31 + 1) = v16;
    v32 = v15;
    if (((*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)v12 + 408))(v12) & 1) != 0)
      goto LABEL_19;
    if (*((_QWORD *)v12 + 33))
    {
      v17 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0, 0);
      if (((*(uint64_t (**)(ZinIrOpLayer *, void **, _QWORD, _QWORD *, int *, _QWORD))(*(_QWORD *)v12 + 600))(v12, __p, *(unsigned int *)(v17 + 88), (_QWORD *)v12 + 33, v7, 0) & 1) == 0)goto LABEL_19;
    }
    else
    {
      v18 = (ZinEngineLayerMirInfo *)operator new();
      ZinEngineLayerMirInfo::ZinEngineLayerMirInfo(v18, v7[2]);
      v29 = v18;
      ZinNELayer::FindValidMirInfoForOutputTranspose(v12, v7, v8, &v29);
      v19 = v29;
      if (v29)
      {
        ZinMirL2Config::ZinMirSetFormats((ZinEngineLayerMirInfo *)((char *)v29 + 120), v12);
        ZinANELayer::SetMirInfo((uint64_t)v12, (int **)&v29);
      }
      else
      {
        if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          goto LABEL_24;
        ZinMirNETransposeFusion::ConcatHandler::UpdateFusedNELayerMirInfo(&v27, v28, v20);
      }
      v21 = v29;
      v29 = 0;
      if (v21)
      {
        ZinEngineLayerMirInfo::~ZinEngineLayerMirInfo(v21);
        MEMORY[0x20BD002F8]();
      }
      if (!v19)
        goto LABEL_24;
    }
LABEL_18:
    v4 += 8;
    if (v4 == v5)
    {
LABEL_19:
      v22 = 0;
      goto LABEL_25;
    }
  }
  v23 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v23)
    ZinMirNETransposeFusion::ConcatHandler::UpdateFusedNELayerMirInfo(v23, v24, v25);
LABEL_24:
  v22 = 3;
LABEL_25:
  v4 = v33;
  if (v33)
  {
LABEL_26:
    v34 = v4;
    operator delete(v4);
  }
  return v22;
}

void sub_206DD5354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v17;

  MEMORY[0x20BD002F8](v17, 0x10B0C40CB92D005);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_206DD53B0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  JUMPOUT(0x206DD5398);
}

void ZinMirNETransposeFusion::ConcatHandler::SearchCandidate(uint64_t a1, ZinIrOpLayer *a2, uint64_t a3)
{
  ZinIrOpLayer **v6;
  ZinIrOpLayer **v7;
  unint64_t v8;
  ZinIrOpLayer **v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  ZinIrOpLayer **v19;
  char *v20;
  ZinIrOpLayer **v21;
  ZinIrOpLayer **v22;
  ZinIrOpLayer *v23;

  v7 = *(ZinIrOpLayer ***)a3;
  v6 = *(ZinIrOpLayer ***)(a3 + 8);
  if (*(ZinIrOpLayer ***)a3 != v6)
  {
    while (*v7 != a2)
    {
      if (++v7 == v6)
      {
        v7 = *(ZinIrOpLayer ***)(a3 + 8);
        break;
      }
    }
  }
  if (v7 == v6)
  {
    if (!ZinIrOpLayer::IsNELayer(a2))
    {
      v11 = (uint64_t *)*((_QWORD *)a2 + 11);
      v12 = (uint64_t *)*((_QWORD *)a2 + 12);
      while (v11 != v12)
      {
        v13 = *v11++;
        ZinMirNETransposeFusion::ConcatHandler::SearchCandidate(a1, v13, a3);
      }
    }
    v8 = *(_QWORD *)(a3 + 16);
    v9 = *(ZinIrOpLayer ***)(a3 + 8);
    if ((unint64_t)v9 >= v8)
    {
      v14 = ((uint64_t)v9 - *(_QWORD *)a3) >> 3;
      if ((unint64_t)(v14 + 1) >> 61)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v15 = v8 - *(_QWORD *)a3;
      v16 = v15 >> 2;
      if (v15 >> 2 <= (unint64_t)(v14 + 1))
        v16 = v14 + 1;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      if (v17)
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a3 + 16, v17);
      else
        v18 = 0;
      v19 = (ZinIrOpLayer **)&v18[8 * v14];
      v20 = &v18[8 * v17];
      *v19 = a2;
      v10 = v19 + 1;
      v22 = *(ZinIrOpLayer ***)a3;
      v21 = *(ZinIrOpLayer ***)(a3 + 8);
      if (v21 != *(ZinIrOpLayer ***)a3)
      {
        do
        {
          v23 = *--v21;
          *--v19 = v23;
        }
        while (v21 != v22);
        v21 = *(ZinIrOpLayer ***)a3;
      }
      *(_QWORD *)a3 = v19;
      *(_QWORD *)(a3 + 8) = v10;
      *(_QWORD *)(a3 + 16) = v20;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *v9 = a2;
      v10 = v9 + 1;
    }
    *(_QWORD *)(a3 + 8) = v10;
  }
}

uint64_t ZinMirNETransposeFusion::ConcatHandler::Execute(ZinMirNETransposeFusion::ConcatHandler *this, ZinIrOpLayerGraph *a2, ZinConcatLayer *a3, ZinANELayer *a4, ZinTransposeLayer *a5)
{
  ZinANELayer *v5;
  char *v9;
  char *v10;
  ZinConcatLayer *v11;
  ZinIrOpLayer **v12;
  ZinIrOpLayer **v13;
  _BOOL8 IsNELayer;
  ZinIrOpLayer *v15;
  ZinMirNETransposeFusion::ConcatHandler *updated;
  ZinIrOpLayerGraph *v17;
  ZinANELayer *v18;
  ZinIrOpLayer *v19;
  char v20;
  ZinConcatLayer *v21;
  int v22;
  const char *v24;
  const char *v25;
  const char *v26;
  const char *v27;
  ZinConcatLayer *v29;
  _QWORD v30[4];
  int v31;
  void *v32;
  void *__p;
  void *v34;
  uint64_t v35;
  void *v36;
  ZinIrOpLayer **v37;
  uint64_t v38;
  _QWORD v39[3];
  char v40;

  v5 = a4;
  v27 = (char *)a4 + 24;
  ZinObjectNameFactory::ZinObjectNameFactory(v39, (char *)a4 + 24);
  v36 = 0;
  v37 = 0;
  v38 = 0;
  ZinMirNETransposeFusion::ConcatHandler::SearchCandidate((uint64_t)this, a3, (uint64_t)&v36);
  v9 = (char *)v36;
  v10 = (char *)v37;
  if (v36 == v37)
  {
LABEL_21:
    v29 = a3;
LABEL_22:
    memset(v30, 0, sizeof(v30));
    v31 = 1065353216;
    v22 = ZinIrOpLayerGraph::MoveOutgoingEdges(a2, (uint64_t **)v5, v29, v30);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v30);
    if ((v22 & ZinIrOpLayerGraph::RemoveNode(a2, v5, 0) & 1) == 0)
    {
      if (*((char *)v5 + 47) < 0)
        v27 = *(const char **)v27;
      ZinAssertImpl("ANEC internal error: NE Transpose fusion fails at graph manipulation %s", v27);
    }
  }
  else
  {
    while (1)
    {
      v11 = *(ZinConcatLayer **)v9;
      if (*(_QWORD *)(*(_QWORD *)v9 + 120) - *(_QWORD *)(*(_QWORD *)v9 + 112) > 8uLL
        || *(_DWORD *)(*((_QWORD *)v11 + 8) + 8) == 7
        && !ZinMirNETransposeFusion::ConcatHandler::IsFusableConcat(this, v11))
      {
        break;
      }
      v9 += 8;
      if (v9 == v10)
      {
        v12 = (ZinIrOpLayer **)v36;
        v13 = v37;
        if (v36 == v37)
          goto LABEL_21;
        v29 = a3;
        do
        {
          IsNELayer = ZinIrOpLayer::IsNELayer(*v12);
          v15 = *v12;
          if (IsNELayer)
          {
            if (ZinMirNETransposeFusion::ConcatHandler::NEIncomingHandler((ZinMirNETransposeFusion::ConcatHandler *)IsNELayer, (uint64_t **)a2, (ZinObjectNameFactory *)v39, *v12, a5))
            {
              v24 = (char *)*v12 + 24;
              if (*((char *)*v12 + 47) < 0)
                v24 = *(const char **)v24;
              ZinAssertImpl("ANEC internal error: failed to handle NE transpose fusion %s.", v24);
            }
          }
          else if (*(_DWORD *)(*((_QWORD *)v15 + 8) + 8) == 7)
          {
            updated = (ZinMirNETransposeFusion::ConcatHandler *)ZinMirNETransposeFusion::ConcatHandler::UpdateFusedNELayerMirInfo((int ***)this, *v12);
            if ((_DWORD)updated)
            {
              v25 = (char *)v15 + 24;
              if (*((char *)v15 + 47) < 0)
                v25 = *(const char **)v25;
              ZinAssertImpl("ANEC internal error: failed to update fused concat mir info %s", v25);
            }
            v18 = v5;
            v19 = (ZinIrOpLayer *)ZinMirNETransposeFusion::ConcatHandler::BuildNewConcat(updated, v17, (ZinObjectNameFactory *)v39, v15, v5);
            v32 = &unk_24C02BB18;
            v34 = 0;
            v35 = 0;
            __p = 0;
            v20 = ZinIrOpLayerGraph::ReplaceNode((uint64_t **)a2, v15, v19, (const Layer2TDMapper::SourceLayer *)&v32);
            v32 = &unk_24C02BB18;
            if (__p)
            {
              v34 = __p;
              operator delete(__p);
            }
            if ((v20 & 1) == 0)
            {
              v26 = (char *)v15 + 24;
              if (*((char *)v15 + 47) < 0)
                v26 = *(const char **)v26;
              ZinAssertImpl("ANEC internal error: failed to handle NE transpose fusion %s.", v26);
            }
            v21 = v29;
            if (v15 == a3)
              v21 = v19;
            v29 = v21;
            v5 = v18;
          }
          ++v12;
        }
        while (v12 != v13);
        goto LABEL_22;
      }
    }
  }
  if (v36)
  {
    v37 = (ZinIrOpLayer **)v36;
    operator delete(v36);
  }
  v39[0] = off_24C01FBB0;
  if (v40 < 0)
    operator delete((void *)v39[1]);
  return 0;
}

void sub_206DD57E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  uint64_t v25;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a15);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  *(_QWORD *)(v25 - 128) = off_24C01FBB0;
  if (*(char *)(v25 - 97) < 0)
    operator delete(*(void **)(v25 - 120));
  _Unwind_Resume(a1);
}

BOOL ZinMirNETransposeFusion::IsFusableBasedOnFormatOCGSizeAndActiveNE(unsigned int a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, char a6)
{
  char v7;
  BOOL v8;
  int v9;
  char v10;
  BOOL v12;

  v7 = a3 * a2;
  v8 = a3 * a2 >= a4;
  if (a3 * a2 >= a4 && (a6 & 1) == 0)
    v8 = *(_BYTE *)(a5 + 1270) != 0;
  if (IsFormatDMAConvertibleToFP16(a1))
    v9 = 3;
  else
    v9 = a1;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 3)
    {
      v12 = !v8;
      if ((v7 & 7) == 0)
        v12 = 0;
      return !v12;
    }
    if (v9 != 12)
      return 0;
  }
  v10 = (v7 & 0xF) == 0 || v8;
  return (v10 & 1) != 0;
}

void std::__function::__func<ZinMirNETransposeFusion::Execute(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirNETransposeFusion::Execute(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinMirNETransposeFusion::Execute(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirNETransposeFusion::Execute(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C001768;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinMirNETransposeFusion::Execute(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirNETransposeFusion::Execute(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C001768;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinMirNETransposeFusion::Execute(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirNETransposeFusion::Execute(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t ***a2, ZinIrOpLayer **a3)
{
  uint64_t **v3;
  ZinIrOpLayer *v4;
  int ***v5;
  uint64_t result;
  ZinTransposeLayer *v7;
  ZinConcatLayer *v8;
  int **v9;

  v3 = *a2;
  v4 = *a3;
  v5 = *(int ****)(a1 + 8);
  result = ZinIrOpLayer::IsANELayer(*a3);
  if ((_DWORD)result)
  {
    result = ZinANELayer::GetStandaloneCWTranspose(v4);
    if (result)
    {
      v7 = (ZinTransposeLayer *)result;
      v8 = (ZinConcatLayer *)**((_QWORD **)v4 + 11);
      if (ZinIrOpLayer::IsNELayer(v8))
      {
        result = ZinMirNETransposeFusion::FuseToSingleEngine(v5, v3, v4, v7);
        if ((_DWORD)result)
          return result;
      }
      else if (*(_DWORD *)(*((_QWORD *)v8 + 8) + 8) == 7)
      {
        v9 = *v5;
        result = ZinMirNETransposeFusion::ConcatHandler::IsFusableConcat((ZinMirNETransposeFusion::ConcatHandler *)&v9, v8);
        if (!(_DWORD)result)
          return result;
        ZinMirNETransposeFusion::ConcatHandler::Execute((ZinMirNETransposeFusion::ConcatHandler *)&v9, (ZinIrOpLayerGraph *)v3, v8, v4, v7);
      }
      return 0;
    }
  }
  return result;
}

uint64_t std::__function::__func<ZinMirNETransposeFusion::Execute(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirNETransposeFusion::Execute(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirNETransposeFusion::Execute(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirNETransposeFusion::Execute(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

void ZinMirNETransposeFusion::ConcatHandler::UpdateFusedNELayerMirInfo(uint8_t *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = 0;
  *a2 = 0;
  OUTLINED_FUNCTION_0_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "IsFusableConcat() did not evaluate a concat properly.", a1);
}

void ZinMirNETransposeFusion::ConcatHandler::UpdateFusedNELayerMirInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint8_t v3[16];

  *(_WORD *)v3 = 0;
  OUTLINED_FUNCTION_0_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "IsFusableConcat() did not evaluate a concat properly.", v3);
}

uint64_t MirOpt::MergeNEArgMinMax(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  char v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = 0;
  v7[0] = &off_24C001F98;
  v7[1] = a2;
  v7[2] = &v6;
  v8 = v7;
  v2 = ZinIrControlFlowGraph::Traverse(a1, (uint64_t)v7, &v6, 1, 0);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_206DD5BB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<MirOpt::MergeNEArgMinMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<MirOpt::MergeNEArgMinMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<MirOpt::MergeNEArgMinMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<MirOpt::MergeNEArgMinMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C001F98;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<MirOpt::MergeNEArgMinMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<MirOpt::MergeNEArgMinMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C001F98;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<MirOpt::MergeNEArgMinMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<MirOpt::MergeNEArgMinMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t ***a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t **v6;
  _BOOL8 result;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t j;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  _BYTE *v26;
  const void *v27;
  __int128 *v28;
  uint64_t v29;
  int v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  const std::string::value_type *v36;
  _OWORD *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  int v44;
  _DWORD *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t Pool;
  std::string *v51;
  __int128 v52;
  ZinIrOpLayer *v53;
  unint64_t *p_shared_owners;
  unint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  const std::string::value_type *v60;
  unint64_t v61;
  ZinIrOpLayer *View;
  uint64_t v63;
  int v64;
  std::__shared_weak_count *size;
  unint64_t *v66;
  unint64_t v67;
  ZinIrTensor::MirInfo *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  int v74;
  _QWORD *v75;
  _QWORD *v76;
  _BOOL8 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  const std::string::value_type *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  ZinIrTensor::MirInfo *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  int v102;
  _QWORD *v103;
  std::string::size_type v104;
  _BOOL8 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  _BYTE v123[32];
  int v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  ZinIrTensor::MirInfo *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  void *v130[2];
  __int128 v131;
  uint64_t v132;
  int64x2_t v133;
  int64x2_t v134;
  uint64_t v135;
  std::string v136;
  __int128 v137;
  ZinIrTensor::MirInfo *v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  void *v141[2];
  std::string::size_type v142;
  void *__p[2];
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  std::string v150;
  _QWORD *v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  __int128 v154[2];
  uint64_t v155;
  _QWORD v156[3];
  char v157;
  _QWORD v158[2];
  std::__shared_weak_count *v159;
  ZinIrOpLayer *v160;
  std::string v161;
  void *v162[2];
  __int128 v163;
  int v164;
  _BYTE v165[32];
  _BYTE v166[48];
  __int128 v167;
  __int128 v168;
  int v169;
  uint64_t v170;

  v170 = *MEMORY[0x24BDAC8D0];
  v3 = *a3;
  if (*(_DWORD *)(*(_QWORD *)(*a3 + 64) + 8) != 89)
    return 0;
  v4 = **(_QWORD **)(v3 + 88);
  if (*(_QWORD *)(v4 + 120) - *(_QWORD *)(v4 + 112) < 0x10uLL)
    return 0;
  if (*(_QWORD *)(v3 + 392))
    return 0;
  if (*(_QWORD *)(v3 + 384))
    return 0;
  v6 = *a2;
  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v3 + 408))(*a3) & 1) != 0)
    return 0;
  v8 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 432) + 64) + 104);
  if (v8 == 7)
  {
    v9 = *(_QWORD *)(v4 + 112);
    v10 = *(_QWORD *)(v4 + 120);
    if (v9 == v10)
      return 0;
    while (1)
    {
      v11 = *(_QWORD **)v9;
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 64) + 8) == 89
        && *(_DWORD *)(*(_QWORD *)(v11[54] + 64) + 104) == 5)
      {
        break;
      }
      result = 0;
      v9 += 8;
      if (v9 == v10)
        return result;
    }
  }
  else
  {
    if (v8 != 9)
      return 0;
    v12 = *(_QWORD *)(v4 + 112);
    v13 = *(_QWORD *)(v4 + 120);
    if (v12 == v13)
      return 0;
    while (1)
    {
      v11 = *(_QWORD **)v12;
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 64) + 8) == 89
        && *(_DWORD *)(*(_QWORD *)(v11[54] + 64) + 104) == 4)
      {
        break;
      }
      result = 0;
      v12 += 8;
      if (v12 == v13)
        return result;
    }
  }
  if (v11[49])
    return 0;
  if (v11[48])
    return 0;
  if (((*(uint64_t (**)(_QWORD *))(*v11 + 408))(v11) & 1) != 0)
    return 0;
  v14 = *(_DWORD *)((*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v11 + 32))(v11, 0, 0) + 88);
  if (v14 != *(_DWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v3 + 32))(v3, 0, 0) + 88))
    return 0;
  v15 = *(_QWORD *)(v3 + 376);
  v16 = v11[47];
  if (v15 && v16)
  {
    v17 = *(_QWORD *)(v3 + 376);
    if (!ZinIrActivationParams::operator==(v15 + 192, v16 + 192))
      return 0;
  }
  else
  {
    v17 = *(_QWORD *)(v3 + 376);
    if (v15 | v16)
      return 0;
  }
  for (i = *(_QWORD *)(v3 + 112); i != *(_QWORD *)(v3 + 120); i += 8)
  {
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)i + 64) + 8) == 7)
      return 0;
  }
  for (j = v11[14]; j != v11[15]; j += 8)
  {
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)j + 64) + 8) == 7)
      return 0;
  }
  v20 = *(_QWORD *)(*(_QWORD *)(v3 + 432) + 64);
  v21 = *(_QWORD *)(v11[54] + 64);
  result = ZinKernelInfo::operator==(v20 + 16, v21 + 16);
  if (result)
  {
    if (*(unsigned __int8 *)(v20 + 108) == *(unsigned __int8 *)(v21 + 108)
      && *(float *)(v21 + 112) == *(float *)(v20 + 112)
      && (*(_BYTE *)(v21 + 116) == 0) != (*(_BYTE *)(v20 + 116) != 0)
      && *(_QWORD *)(v3 + 408) == v11[51])
    {
      v122 = *(_QWORD *)(v3 + 16);
      v22 = *(_QWORD *)(a1 + 8);
      v159 = 0;
      v158[0] = v22;
      v158[1] = 0;
      v23 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v3 + 32))(v3, 0, 0);
      v24 = v23;
      if (*(char *)(v23 + 47) >= 0)
        v25 = *(unsigned __int8 *)(v23 + 47);
      else
        v25 = *(_QWORD *)(v23 + 32);
      v26 = v165;
      std::string::basic_string[abi:ne180100]((uint64_t)v165, v25 + 17);
      if (v165[23] < 0)
        v26 = *(_BYTE **)v165;
      if (v25)
      {
        if (*(char *)(v24 + 47) >= 0)
          v27 = (const void *)(v24 + 24);
        else
          v27 = *(const void **)(v24 + 24);
        memmove(v26, v27, v25);
      }
      strcpy(&v26[v25], "_merged_argminmax");
      ZinObjectNameFactory::ZinObjectNameFactory(v156, v165);
      if ((v165[23] & 0x80000000) != 0)
        operator delete(*(void **)v165);
      v28 = (__int128 *)(v24 + 48);
      v29 = 2 * *(_QWORD *)(v24 + 56);
      *(_QWORD *)&v154[0] = *(_QWORD *)(v24 + 48);
      *((_QWORD *)&v154[0] + 1) = v29;
      v154[1] = *(_OWORD *)(v24 + 64);
      v155 = *(_QWORD *)(v24 + 80);
      v30 = *(_DWORD *)(v24 + 88);
      ZinObjectNameFactory::CreateName((uint64_t)v156, 0, (std::string *)__p);
      v151 = 0;
      v130[0] = 0;
      v130[1] = 0;
      *(_DWORD *)v165 = 0;
      memset(&v165[8], 0, 24);
      *(_DWORD *)v166 = 0;
      ZinIrTensor::CreateTensor(v122, v30, v154, (__int128 *)__p, &v151, (uint64_t *)v130, (unsigned int *)v165, &v152);
      v31 = (std::__shared_weak_count *)v130[1];
      if (v130[1])
      {
        v32 = (unint64_t *)((char *)v130[1] + 8);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v34 = v151;
      v151 = 0;
      if (v34)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v151, v34);
      if (SBYTE7(v144) < 0)
        operator delete(__p[0]);
      v35 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(v3 + 88) + 32))(**(_QWORD **)(v3 + 88), 0, 0);
      ZinObjectNameFactory::CreateName((uint64_t)v156, 1u, &v150);
      if (v8 == 7)
        v36 = "min_argmin";
      else
        v36 = "max_argmax";
      std::string::append(&v150, v36, 0xAuLL);
      v37 = *(_OWORD **)(*(_QWORD *)(v3 + 432) + 64);
      v38 = v37[4];
      v39 = v37[5];
      v40 = v37[7];
      v148 = v37[6];
      v41 = v37[1];
      v42 = v37[2];
      v43 = v37[3];
      v149 = v40;
      v146 = v38;
      v147 = v39;
      v144 = v42;
      v145 = v43;
      *(_OWORD *)__p = v41;
      if (v8 == 7)
        v44 = 11;
      else
        v44 = 10;
      DWORD2(v148) = v44;
      (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(v3 + 88) + 80))(v165, **(_QWORD **)(v3 + 88), 0, 0);
      v45 = operator new(0x78uLL);
      v130[1] = v45 + 30;
      *(_QWORD *)&v131 = v45 + 30;
      v45[28] = v169;
      v46 = v168;
      v47 = *(_OWORD *)&v166[32];
      *((_OWORD *)v45 + 5) = v167;
      *((_OWORD *)v45 + 6) = v46;
      v48 = *(_OWORD *)&v165[16];
      *(_OWORD *)v45 = *(_OWORD *)v165;
      *((_OWORD *)v45 + 1) = v48;
      v49 = *(_OWORD *)&v166[16];
      *((_OWORD *)v45 + 2) = *(_OWORD *)v166;
      *((_OWORD *)v45 + 3) = v49;
      *((_OWORD *)v45 + 4) = v47;
      v130[0] = v45;
      Pool = ZinBuilder::CreatePool(v122, (uint64_t)v156, (uint64_t *)v130, (uint64_t)__p, *(_DWORD *)(v35 + 88));
      if (v130[0])
      {
        v130[1] = v130[0];
        operator delete(v130[0]);
      }
      ZinObjectNameFactory::CreateName((uint64_t)v156, 1u, (std::string *)v165);
      v51 = std::string::append((std::string *)v165, "input_relu", 0xAuLL);
      v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
      v142 = v51->__r_.__value_.__r.__words[2];
      *(_OWORD *)v141 = v52;
      v51->__r_.__value_.__l.__size_ = 0;
      v51->__r_.__value_.__r.__words[2] = 0;
      v51->__r_.__value_.__r.__words[0] = 0;
      if ((v165[23] & 0x80000000) != 0)
        operator delete(*(void **)v165);
      v53 = (ZinIrOpLayer *)operator new();
      v139 = v152;
      v140 = v153;
      if (v153)
      {
        p_shared_owners = (unint64_t *)&v153->__shared_owners_;
        do
          v55 = __ldxr(p_shared_owners);
        while (__stxr(v55 + 1, p_shared_owners));
      }
      v56 = ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v122, v17, (const void **)v141);
      ZinNEPoolLayer::ZinNEPoolLayer(v53, &v139, (__int128 *)&v150, v56, Pool, 0, 0, 0, *(_QWORD *)(v3 + 408));
      v57 = v140;
      if (v140)
      {
        v58 = (unint64_t *)&v140->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      v162[0] = (void *)v3;
      v162[1] = v11;
      v130[0] = v162;
      v130[1] = (void *)2;
      Layer2TDMapper::SourceLayer::SourceLayer(v165, v130);
      ZinIrOpLayerGraph::AddNode(v6, v53, (ZinIrOpLayer ***)v165);
      *(_QWORD *)v165 = &unk_24C02BB18;
      if (*(_QWORD *)&v165[8])
      {
        *(_QWORD *)&v165[16] = *(_QWORD *)&v165[8];
        operator delete(*(void **)&v165[8]);
      }
      ZinIrOpLayerGraph::AddEdge((uint64_t)v6, **(_QWORD **)(v3 + 88), (uint64_t)v53, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      ZinObjectNameFactory::CreateName((uint64_t)v156, 0, (std::string *)v123);
      if (v8 == 7)
        v60 = "channelargmin";
      else
        v60 = "channelargmax";
      std::string::append((std::string *)v123, v60, 0xDuLL);
      *(_QWORD *)&v165[24] = 0;
      v61 = *(_QWORD *)(v24 + 56);
      *(_QWORD *)v165 = 0;
      *(_OWORD *)&v165[8] = v61;
      *(int64x2_t *)&v166[8] = vdupq_n_s64(1uLL);
      *(_OWORD *)&v166[24] = *(_OWORD *)&v166[8];
      *(_QWORD *)v166 = 0;
      *(_QWORD *)&v166[40] = 1;
      View = (ZinIrOpLayer *)ZinBuilder::CreateView(v122, (uint64_t)v123, v152, (__int128 *)(v24 + 48), (uint64_t)v165);
      v63 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v3 + 32))(v3, 0, 0);
      v64 = *(_DWORD *)(v63 + 88);
      ZinObjectNameFactory::CreateName((uint64_t)v156, 0, (std::string *)v162);
      ZinIrTensor::CopyTensorMirInfo((ZinIrTensor *)v63, &v138);
      *(_OWORD *)&v161.__r_.__value_.__l.__data_ = 0uLL;
      LODWORD(v130[0]) = 0;
      v131 = 0uLL;
      v130[1] = 0;
      LODWORD(v132) = 0;
      ZinIrTensor::CreateTensor(v122, v64, (__int128 *)(v63 + 48), (__int128 *)v162, &v138, (uint64_t *)&v161, (unsigned int *)v130, (uint64_t *)&v136);
      size = (std::__shared_weak_count *)v161.__r_.__value_.__l.__size_;
      if (v161.__r_.__value_.__l.__size_)
      {
        v66 = (unint64_t *)(v161.__r_.__value_.__l.__size_ + 8);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v68 = v138;
      v138 = 0;
      if (v68)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v138, v68);
      if (SBYTE7(v163) < 0)
        operator delete(v162[0]);
      v137 = *(_OWORD *)&v136.__r_.__value_.__l.__data_;
      if (v136.__r_.__value_.__l.__size_)
      {
        v69 = (unint64_t *)(v136.__r_.__value_.__l.__size_ + 8);
        do
          v70 = __ldxr(v69);
        while (__stxr(v70 + 1, v69));
      }
      (*(void (**)(ZinIrOpLayer *, __int128 *))(*(_QWORD *)View + 24))(View, &v137);
      v71 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
      if (*((_QWORD *)&v137 + 1))
      {
        v72 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      v161.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
      v162[0] = &v161;
      v162[1] = (void *)1;
      Layer2TDMapper::SourceLayer::SourceLayer(v130, v162);
      ZinIrOpLayerGraph::AddNode(v6, View, (ZinIrOpLayer ***)v130);
      v130[0] = &unk_24C02BB18;
      if (v130[1])
      {
        *(void **)&v131 = v130[1];
        operator delete(v130[1]);
      }
      ZinIrOpLayerGraph::AddEdge((uint64_t)v6, (uint64_t)v53, (uint64_t)View, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      *(_OWORD *)v162 = 0u;
      v163 = 0u;
      v164 = 1065353216;
      v74 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)v6, (uint64_t **)v3, View, v162);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v162);
      if ((v74 & 1) != 0)
      {
        ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)v6, (ZinIrOpLayer *)v3, 0);
        v75 = (_QWORD *)*((_QWORD *)View + 14);
        v76 = (_QWORD *)*((_QWORD *)View + 15);
        while (v75 != v76)
        {
          if (*(_DWORD *)(*(_QWORD *)(*v75 + 64) + 8) == 31)
            (*(void (**)(_QWORD, uint64_t **, _QWORD *))(*(_QWORD *)*v75 + 168))(*v75, v6, v158);
          ++v75;
        }
        v85 = 0;
      }
      else
      {
        v77 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v77)
          ZinFlattenCompositeLayer::MakeFlattenCompositeLayer(v77, v78, v79, v80, v81, v82, v83, v84);
        v85 = 3;
      }
      v86 = (std::__shared_weak_count *)v136.__r_.__value_.__l.__size_;
      if (v136.__r_.__value_.__l.__size_)
      {
        v87 = (unint64_t *)(v136.__r_.__value_.__l.__size_ + 8);
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
          std::__shared_weak_count::__release_weak(v86);
        }
      }
      if ((v123[23] & 0x80000000) != 0)
        operator delete(*(void **)v123);
      if (v74)
      {
        ZinObjectNameFactory::CreateName((uint64_t)v156, 0, &v136);
        if (v8 == 7)
          v89 = "channelmin";
        else
          v89 = "channelmax";
        std::string::append(&v136, v89, 0xAuLL);
        *(_OWORD *)v130 = 0u;
        v131 = 0u;
        v132 = 0;
        v133 = vdupq_n_s64(1uLL);
        v134 = v133;
        v135 = 1;
        v90 = ZinBuilder::CreateView(v122, (uint64_t)&v136, v152, v28, (uint64_t)v130);
        v91 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v11 + 32))(v11, 0, 0);
        v92 = *(_DWORD *)(v91 + 88);
        ZinObjectNameFactory::CreateName((uint64_t)v156, 0, &v161);
        ZinIrTensor::CopyTensorMirInfo((ZinIrTensor *)v91, &v127);
        v125 = 0;
        v126 = 0;
        *(_DWORD *)v123 = 0;
        memset(&v123[8], 0, 24);
        v124 = 0;
        ZinIrTensor::CreateTensor(v122, v92, (__int128 *)(v91 + 48), (__int128 *)&v161, &v127, &v125, (unsigned int *)v123, &v128);
        v93 = v126;
        if (v126)
        {
          v94 = (unint64_t *)&v126->__shared_owners_;
          do
            v95 = __ldaxr(v94);
          while (__stlxr(v95 - 1, v94));
          if (!v95)
          {
            ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
            std::__shared_weak_count::__release_weak(v93);
          }
        }
        v96 = v127;
        v127 = 0;
        if (v96)
          std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v127, v96);
        if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v161.__r_.__value_.__l.__data_);
        v125 = v128;
        v126 = v129;
        if (v129)
        {
          v97 = (unint64_t *)&v129->__shared_owners_;
          do
            v98 = __ldxr(v97);
          while (__stxr(v98 + 1, v97));
        }
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v90 + 24))(v90, &v125);
        v99 = v126;
        if (v126)
        {
          v100 = (unint64_t *)&v126->__shared_owners_;
          do
            v101 = __ldaxr(v100);
          while (__stlxr(v101 - 1, v100));
          if (!v101)
          {
            ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
            std::__shared_weak_count::__release_weak(v99);
          }
        }
        v160 = v53;
        v161.__r_.__value_.__r.__words[0] = (std::string::size_type)&v160;
        v161.__r_.__value_.__l.__size_ = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(v123, &v161);
        ZinIrOpLayerGraph::AddNode(v6, (ZinIrOpLayer *)v90, (ZinIrOpLayer ***)v123);
        *(_QWORD *)v123 = &unk_24C02BB18;
        if (*(_QWORD *)&v123[8])
        {
          *(_QWORD *)&v123[16] = *(_QWORD *)&v123[8];
          operator delete(*(void **)&v123[8]);
        }
        ZinIrOpLayerGraph::AddEdge((uint64_t)v6, (uint64_t)v53, v90, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        memset(v123, 0, sizeof(v123));
        v124 = 1065353216;
        v102 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)v6, (uint64_t **)v11, (ZinIrOpLayer *)v90, v123);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v123);
        if ((v102 & 1) != 0)
        {
          ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)v6, (ZinIrOpLayer *)v11, 0);
          memset(&v161, 0, sizeof(v161));
          std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v161, *(const void **)(v90 + 112), *(_QWORD *)(v90 + 120), (uint64_t)(*(_QWORD *)(v90 + 120) - *(_QWORD *)(v90 + 112)) >> 3);
          v104 = v161.__r_.__value_.__l.__size_;
          v103 = (_QWORD *)v161.__r_.__value_.__r.__words[0];
          if (v161.__r_.__value_.__r.__words[0] != v161.__r_.__value_.__l.__size_)
          {
            do
            {
              if (*(_DWORD *)(*(_QWORD *)(*v103 + 64) + 8) == 31)
                (*(void (**)(_QWORD, uint64_t **, _QWORD *))(*(_QWORD *)*v103 + 168))(*v103, v6, v158);
              ++v103;
            }
            while (v103 != (_QWORD *)v104);
            v103 = (_QWORD *)v161.__r_.__value_.__r.__words[0];
          }
          if (v103)
          {
            v161.__r_.__value_.__l.__size_ = (std::string::size_type)v103;
            operator delete(v103);
          }
        }
        else
        {
          v105 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v105)
            ZinFlattenCompositeLayer::MakeFlattenCompositeLayer(v105, v106, v107, v108, v109, v110, v111, v112);
          v85 = 3;
        }
        v113 = v129;
        if (v129)
        {
          v114 = (unint64_t *)&v129->__shared_owners_;
          do
            v115 = __ldaxr(v114);
          while (__stlxr(v115 - 1, v114));
          if (!v115)
          {
            ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
            std::__shared_weak_count::__release_weak(v113);
          }
        }
        if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v136.__r_.__value_.__l.__data_);
        if (v102)
        {
          v85 = 0;
          **(_BYTE **)(a1 + 16) = 1;
        }
      }
      if (SHIBYTE(v142) < 0)
        operator delete(v141[0]);
      if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v150.__r_.__value_.__l.__data_);
      v116 = v153;
      if (v153)
      {
        v117 = (unint64_t *)&v153->__shared_owners_;
        do
          v118 = __ldaxr(v117);
        while (__stlxr(v118 - 1, v117));
        if (!v118)
        {
          ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
          std::__shared_weak_count::__release_weak(v116);
        }
      }
      v156[0] = off_24C01FBB0;
      if (v157 < 0)
        operator delete((void *)v156[1]);
      v119 = v159;
      if (v159)
      {
        v120 = (unint64_t *)&v159->__shared_owners_;
        do
          v121 = __ldaxr(v120);
        while (__stlxr(v121 - 1, v120));
        if (!v121)
        {
          ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
          std::__shared_weak_count::__release_weak(v119);
        }
      }
      return v85;
    }
    return 0;
  }
  return result;
}

void sub_206DD6A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  char a69;
  std::__shared_weak_count *a72;
  void *a73;
  char a74;
  unint64_t *p_shared_owners;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;

  if (a20)
  {
    p_shared_owners = (unint64_t *)&a20->__shared_owners_;
    do
      v76 = __ldaxr(p_shared_owners);
    while (__stlxr(v76 - 1, p_shared_owners));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))a20->__on_zero_shared)(a20);
      std::__shared_weak_count::__release_weak(a20);
    }
  }
  if (a36 < 0)
    operator delete(__p);
  if (a47 < 0)
    operator delete(a42);
  if (a69 < 0)
    operator delete(a64);
  if (a72)
  {
    v77 = (unint64_t *)&a72->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))a72->__on_zero_shared)(a72);
      std::__shared_weak_count::__release_weak(a72);
    }
  }
  if (a74 < 0)
    operator delete(a73);
  v79 = (std::__shared_weak_count *)STACK[0x218];
  if (STACK[0x218])
  {
    v80 = (unint64_t *)&v79->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<MirOpt::MergeNEArgMinMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<MirOpt::MergeNEArgMinMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MirOpt::MergeNEArgMinMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<MirOpt::MergeNEArgMinMax(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

BOOL ZinKernelInfo::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  if (*(_QWORD *)a1 != *(_QWORD *)a2
    || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8)
    || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16)
    || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)
    || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)
    || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)
    || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)
    || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)
    || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44))
  {
    return 0;
  }
  result = ZinIrPadding::operator==((_DWORD *)(a1 + 48), (_DWORD *)(a2 + 48));
  if (!result)
    return result;
  return *(_DWORD *)(a1 + 72) == *(_DWORD *)(a2 + 72)
      && *(_DWORD *)(a1 + 76) == *(_DWORD *)(a2 + 76)
      && *(_DWORD *)(a1 + 80) == *(_DWORD *)(a2 + 80)
      && *(_DWORD *)(a1 + 84) == *(_DWORD *)(a2 + 84);
}

BOOL ZinIrPadding::operator==(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3] && a1[4] == a2[4] && a1[5] == a2[5];
}

uint64_t BatchOrChannelSplitPressureBasedSubgraphIdentification::BatchOrChannelSplitPressureBasedSubgraphIdentification(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(_QWORD *)PressureBasedSubgraphIdentification::PressureBasedSubgraphIdentification(a1, a2, a3, a4, a5, a6, a7, 0) = off_24BFFE2B0;
  if ((*(_BYTE *)(a5 + 3) == 0) == (*(_BYTE *)(a5 + 4) == 0))
    ZinAssertImpl("Must be either batch or channel splitting, and not both");
  return a1;
}

void sub_206DD70A0(_Unwind_Exception *a1)
{
  ZinMirSpatialSplitLatencyCostModel **v1;

  PressureBasedSubgraphIdentification::~PressureBasedSubgraphIdentification(v1);
  _Unwind_Resume(a1);
}

uint64_t BatchOrChannelSplitPressureBasedSubgraphIdentification::IsKernelDominant(BatchOrChannelSplitPressureBasedSubgraphIdentification *this, const ZinIrOpLayer *a2)
{
  _BOOL4 IsKernelDominant;
  double WeightDimensions;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int WeightFormat;
  uint64_t v13;
  _BOOL4 v14;
  ZinIrKernel *v15;
  ZinTensorDimensions *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ElementCount;
  uint64_t v21;
  _QWORD v22[5];
  ZinIrKernel *v23;

  IsKernelDominant = PressureBasedSubgraphIdentification::IsKernelDominant(this, a2);
  if (*(_BYTE *)(*((_QWORD *)this + 8) + 3) && *(_DWORD *)(*((_QWORD *)a2 + 8) + 8) == 85 && *((_QWORD *)a2 + 54))
  {
    (*(void (**)(ZinIrKernel **__return_ptr, const ZinIrOpLayer *, uint64_t))(*(_QWORD *)a2 + 568))(&v23, a2, 1);
    WeightDimensions = ZinIrKernel::GetWeightDimensions(v23, (uint64_t)v22);
    v6 = v22[0];
    v7 = v22[1];
    v8 = v22[2];
    v9 = v22[3];
    v10 = v22[4];
    v11 = (*(uint64_t (**)(const ZinIrOpLayer *, _QWORD, _QWORD, double))(*(_QWORD *)a2 + 32))(a2, 0, 0, WeightDimensions);
    v21 = 0;
    v22[0] = 0;
    WeightFormat = ZinIrKernel::GetWeightFormat(v23);
    if (ZinKernelFormatGetBitDepth(WeightFormat, v22)
      || (v13 = (*(uint64_t (**)(const ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0),
          ZinTensorFormatGetSize(*(_DWORD *)(v13 + 88), &v21)))
    {
      v14 = 1;
    }
    else
    {
      v17 = (ZinTensorDimensions *)(v11 + 48);
      v18 = *(_QWORD *)(v11 + 48);
      v19 = v22[0];
      ElementCount = ZinTensorDimensions::GetElementCount(v17);
      v14 = v7 * v6 * v8 * v9 * v10 * v18 * v19 >= (unint64_t)(8 * ElementCount * v21);
    }
    v15 = v23;
    v23 = 0;
    if (v15)
    {
      ZinIrKernel::~ZinIrKernel(v15);
      MEMORY[0x20BD002F8]();
    }
  }
  else
  {
    v14 = 0;
  }
  return v14 | IsKernelDominant;
}

void sub_206DD7220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ZinIrKernel *a16)
{
  if (a16)
  {
    ZinIrKernel::~ZinIrKernel(a16);
    MEMORY[0x20BD002F8]();
  }
  _Unwind_Resume(exception_object);
}

uint64_t BatchOrChannelSplitPressureBasedSubgraphIdentification::IsClusterBoundary(PressureBasedSubgraphIdentification *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, _QWORD **a7, uint64_t a8, char a9)
{
  uint64_t result;
  ZinIrOpLayer *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  ZinIrOpLayer *v17;

  result = 1;
  if (a9)
  {
    if ((a5 & 1) == 0)
    {
      result = (*(uint64_t (**)(PressureBasedSubgraphIdentification *, _QWORD **))(*(_QWORD *)a1 + 48))(a1, a7);
      if ((_DWORD)result)
      {
        v17 = 0;
        if ((*(unsigned int (**)(PressureBasedSubgraphIdentification *, _QWORD **))(*(_QWORD *)a1 + 24))(a1, a7))
        {
          v13 = (ZinIrOpLayer *)*a7[14];
          v17 = v13;
          if (!v13)
            return 1;
        }
        else
        {
          if ((*(unsigned int (**)(PressureBasedSubgraphIdentification *, _QWORD **, ZinIrOpLayer **))(*(_QWORD *)a1 + 40))(a1, a7, &v17)&& a2 + 8 == std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>(a2, &v17)&& !PressureBasedSubgraphIdentification::NeedKernelSplitting(a1, v17))
          {
            return 1;
          }
          v13 = v17;
          if (!v17)
            return 1;
        }
        v14 = *((_QWORD *)a1 + 8);
        if (*(_BYTE *)(v14 + 3))
        {
          v15 = *(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v13 + 32))(v13, 0, 0)+ 48);
          if (v15 != *(_QWORD *)(((uint64_t (*)(_QWORD **, _QWORD, _QWORD))(*a7)[4])(a7, 0, 0) + 48)
            || *(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0, 0)+ 48) == 1)
          {
            return 1;
          }
          v14 = *((_QWORD *)a1 + 8);
        }
        if (!*(_BYTE *)(v14 + 4))
          return 0;
        v16 = *(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0, 0)+ 56);
        return v16 != *(_QWORD *)(((uint64_t (*)(_QWORD **, _QWORD, _QWORD))(*a7)[4])(a7, 0, 0) + 56)
            || *(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0, 0)+ 56) == 1;
      }
    }
  }
  return result;
}

uint64_t BatchOrChannelSplitPressureBasedSubgraphIdentification::IsLayerSplittable(ZinIrOpLayer *a1, int a2, char a3, int a4, int a5, uint64_t a6)
{
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  ZinIrTensor *v16;
  uint64_t v17;
  const ZinIrTensor *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  int64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  int v39;
  BOOL v40;
  unint64_t PreOpsPreScaleIndex;
  uint64_t v42;
  uint64_t v43;
  uint64_t ReshapeInfo;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  int v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v59;
  uint64_t **v60;
  uint64_t **v61;
  uint64_t **v62;
  uint64_t **v63;
  int v64;
  uint64_t *v65;
  _QWORD *v66;
  int v67;
  void *__p;
  char *v69;
  unint64_t v70;
  void *v71;
  __int128 v72;
  int *v73;

  v67 = a4;
  v11 = (uint64_t)(*((_QWORD *)a1 + 12) - *((_QWORD *)a1 + 11)) >> 3;
  LOBYTE(__p) = 0;
  std::vector<BOOL>::vector(&v71, v11, (unsigned __int8 *)&__p);
  if (*(_QWORD *)a6)
  {
    operator delete(*(void **)a6);
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_QWORD *)(a6 + 16) = 0;
  }
  *(_QWORD *)a6 = v71;
  *(_OWORD *)(a6 + 8) = v72;
  if (a2 && a5)
    ZinAssertImpl("Internal Splitting Error");
  if ((v67 & 0xFFFFFFFD) != 0)
    ZinAssertImpl("Split dim must be batch or channel");
  if (*((_QWORD *)a1 + 12) == *((_QWORD *)a1 + 11) || *((_QWORD *)a1 + 15) == *((_QWORD *)a1 + 14))
    return 0;
  v12 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
  v13 = 56;
  if (!v67)
    v13 = 48;
  if (*(uint64_t *)(v12 + v13) < 2)
    return 0;
  if ((a3 & 1) == 0)
  {
    v16 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
    if ((ZinIrTensor::IsUsedAsKernelTensor(v16, v17, v18) & 1) != 0)
      return 0;
  }
  if (!ZinIrOpLayer::IsANELayer(a1))
    goto LABEL_64;
  v19 = *((_QWORD *)a1 + 25);
  if (v19)
  {
    if (*((_QWORD *)a1 + 24) <= 1uLL
      && !(*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 344))(v19, v67))
    {
      return 0;
    }
  }
  if (!ZinIrOpLayer::IsNELayer(a1))
  {
    v64 = v67;
    if (!ZinIrOpLayer::IsPELayer(a1))
      ZinAssertImpl("must be PE layer");
    (*(void (**)(void **__return_ptr, ZinIrOpLayer *))(*(_QWORD *)a1 + 512))(&v71, a1);
    __p = 0;
    v69 = 0;
    v70 = 0;
    v21 = v71;
    v22 = (_QWORD *)v72;
    if (v71 != (void *)v72)
    {
      do
      {
        v23 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD))(*(_QWORD *)a1 + 152))(a1, *v21);
        v24 = v23;
        v25 = v69;
        if ((unint64_t)v69 >= v70)
        {
          v27 = (char *)__p;
          v28 = (v69 - (_BYTE *)__p) >> 3;
          v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v30 = v70 - (_QWORD)__p;
          if ((uint64_t)(v70 - (_QWORD)__p) >> 2 > v29)
            v29 = v30 >> 2;
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
            v31 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v31 = v29;
          if (v31)
          {
            v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v70, v31);
            v27 = (char *)__p;
            v25 = v69;
          }
          else
          {
            v32 = 0;
          }
          v33 = &v32[8 * v28];
          *(_QWORD *)v33 = v24;
          v26 = v33 + 8;
          while (v25 != v27)
          {
            v34 = *((_QWORD *)v25 - 1);
            v25 -= 8;
            *((_QWORD *)v33 - 1) = v34;
            v33 -= 8;
          }
          __p = v33;
          v69 = v26;
          v70 = (unint64_t)&v32[8 * v31];
          if (v27)
            operator delete(v27);
        }
        else
        {
          *(_QWORD *)v69 = v23;
          v26 = v25 + 8;
        }
        v69 = v26;
        ++v21;
      }
      while (v21 != v22);
    }
    if ((*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)a1 + 656))(a1))
    {
      v35 = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)a1 + 696))(a1);
      if (ZinIrBroadcastInfo::HasDimension(*(_QWORD *)(v35 + 64), v64))
      {
        if (a5)
        {
          *(_QWORD *)(*(_QWORD *)a6 + ((*(_QWORD *)__p >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(_QWORD *)__p;
        }
        else if ((a2 & 1) != 0)
        {
          goto LABEL_55;
        }
      }
    }
    if (!(*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)a1 + 664))(a1))
      goto LABEL_56;
    v36 = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)a1 + 832))(a1);
    if (!ZinIrBroadcastInfo::HasDimension(v36, v64))
      goto LABEL_56;
    if (a5)
    {
      *(_QWORD *)(*(_QWORD *)a6 + ((*((_QWORD *)__p + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *((_QWORD *)__p + 1);
LABEL_56:
      v37 = 1;
LABEL_57:
      if (__p)
      {
        v69 = (char *)__p;
        operator delete(__p);
      }
      if (v71)
      {
        *(_QWORD *)&v72 = v71;
        operator delete(v71);
      }
      if ((v37 & 1) == 0)
        return 0;
      goto LABEL_62;
    }
    if ((a2 & 1) == 0)
      goto LABEL_56;
LABEL_55:
    v37 = 0;
    goto LABEL_57;
  }
  v20 = *((_QWORD *)a1 + 46);
  if (v20 && ZinIrBroadcastInfo::HasDimension(*(_QWORD *)(v20 + 64), v67))
  {
    if (a5)
    {
      **(_QWORD **)a6 |= 1uLL;
      goto LABEL_62;
    }
    if ((a2 & 1) == 0)
      goto LABEL_62;
    return 0;
  }
LABEL_62:
  if (v67 == 2 && !IsANELayerChannelSplittable(a1))
    return 0;
LABEL_64:
  v38 = *((_QWORD *)a1 + 8);
  v39 = *(_DWORD *)(v38 + 8);
  v14 = 1;
  switch(v39)
  {
    case ' ':
      return ((*(_QWORD *)(v38 + 24) >> v67) & 1) == 0;
    case '!':
    case '"':
      return v14;
    case '#':
      v42 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)a1 + 11) + 32))(**((_QWORD **)a1 + 11), 0, 0);
      v43 = 56;
      if (!v67)
        v43 = 48;
      if (*(_QWORD *)(v42 + v43) == 1)
        return 0;
      ReshapeInfo = ZinReshapeLayer::GetReshapeInfo(a1);
      DimensionOrderHint::GetOrder((DimensionOrderHint *)(ReshapeInfo + 16), &v71);
      v45 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
      v46 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)a1 + 11) + 32))(**((_QWORD **)a1 + 11), 0, 0);
      ZinReshapeLayerUtils::TraceReshapeDimension(v45, v46, &v71, (uint64_t)&__p);
      v47 = v69;
      if (!v69)
        goto LABEL_82;
      break;
    case '$':
      return ZinViewLayer::IsSplittable((uint64_t)a1, v67);
    case '%':
      v54 = ZinReshapeLayer::GetReshapeInfo(a1);
      v56 = *(_QWORD *)(v54 + 16);
      v55 = *(_QWORD *)(v54 + 24);
      if (v56 == v55)
        return 1;
      v57 = v56 + 8;
      do
      {
        v14 = *(_DWORD *)(v57 - 4) != v67 && *(_DWORD *)(v57 - 8) != v67;
        v59 = !v14 || v57 == v55;
        v57 += 8;
      }
      while (!v59);
      return v14;
    case '&':
    case '\'':
      v40 = v67 == 0;
      return !v40;
    case '(':
    case ')':
      v40 = v67 == 2;
      return !v40;
    default:
      if (v39 == 7)
      {
        return ZinConcatLayer::IsSplittable((uint64_t)a1, v67);
      }
      else if (v39 == 83)
      {
        if (ZinPEPoolLayer::GetPreOpsPreScaleIndex(a1) == -1)
        {
          return 1;
        }
        else
        {
          PreOpsPreScaleIndex = ZinPEPoolLayer::GetPreOpsPreScaleIndex(a1);
          v14 = 1;
          *(_QWORD *)(*(_QWORD *)a6 + ((PreOpsPreScaleIndex >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << PreOpsPreScaleIndex;
        }
      }
      return v14;
  }
  while (1)
  {
    v48 = *((_DWORD *)v47 + 8);
    if (v67 >= v48)
      break;
LABEL_81:
    v47 = *(char **)v47;
    if (!v47)
      goto LABEL_82;
  }
  if (v48 < v67)
  {
    v47 += 8;
    goto LABEL_81;
  }
  v65 = (uint64_t *)&v67;
  v60 = std::__tree<std::__value_type<ZinIrDimension,std::vector<ZinIrDimension>>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,std::vector<ZinIrDimension>>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,std::vector<ZinIrDimension>>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>((uint64_t **)&__p, &v67, (uint64_t)&std::piecewise_construct, (_DWORD **)&v65);
  if (v60[5] != v60[6])
  {
    v65 = (uint64_t *)&v67;
    v61 = std::__tree<std::__value_type<ZinIrDimension,std::vector<ZinIrDimension>>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,std::vector<ZinIrDimension>>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,std::vector<ZinIrDimension>>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>((uint64_t **)&__p, &v67, (uint64_t)&std::piecewise_construct, (_DWORD **)&v65);
    if (*((_DWORD *)v61[6] - 1) != v67)
    {
      v14 = 0;
      goto LABEL_89;
    }
  }
LABEL_82:
  v49 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)a1 + 11) + 32))(**((_QWORD **)a1 + 11), 0, 0);
  v50 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
  ZinReshapeLayerUtils::TraceReshapeDimension(v49, v50, &v71, (uint64_t)&v65);
  v51 = v66;
  if (!v66)
  {
LABEL_87:
    v14 = 1;
    goto LABEL_88;
  }
  while (2)
  {
    v52 = *((_DWORD *)v51 + 8);
    if (v67 < v52)
      goto LABEL_86;
    if (v52 < v67)
    {
      ++v51;
LABEL_86:
      v51 = (_QWORD *)*v51;
      if (!v51)
        goto LABEL_87;
      continue;
    }
    break;
  }
  v73 = &v67;
  v62 = std::__tree<std::__value_type<ZinIrDimension,std::vector<ZinIrDimension>>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,std::vector<ZinIrDimension>>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,std::vector<ZinIrDimension>>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>(&v65, &v67, (uint64_t)&std::piecewise_construct, &v73);
  if (v62[5] == v62[6])
    goto LABEL_87;
  v73 = &v67;
  v63 = std::__tree<std::__value_type<ZinIrDimension,std::vector<ZinIrDimension>>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,std::vector<ZinIrDimension>>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,std::vector<ZinIrDimension>>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>(&v65, &v67, (uint64_t)&std::piecewise_construct, &v73);
  if (*((_DWORD *)v63[6] - 1) == v67)
    goto LABEL_87;
  v14 = 0;
LABEL_88:
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)&v65, v66);
LABEL_89:
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)&__p, v69);
  if (v71)
  {
    *(_QWORD *)&v72 = v71;
    operator delete(v71);
  }
  return v14;
}

void sub_206DD7B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12, uint64_t a13, uint64_t a14, void *a15, _QWORD *a16, uint64_t a17, void *__p, uint64_t a19)
{
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)&a11, a12);
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)&a15, a16);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t IsANELayerChannelSplittable(ZinANELayer *a1)
{
  int v2;
  BOOL IsChannelWiseConv;
  uint64_t result;
  unint64_t v5;
  int HasInputTranspose;

  if (ZinIrOpLayer::IsNELayer(a1))
  {
    if (((*(uint64_t (**)(ZinANELayer *))(*(_QWORD *)a1 + 408))(a1) & 1) != 0)
      return 0;
    v2 = *(_DWORD *)(*((_QWORD *)a1 + 8) + 8);
    if (v2 != 90)
    {
      if (v2 == 85)
      {
        IsChannelWiseConv = ZinNEConvLayer::IsChannelWiseConv(a1);
        result = 1;
        if (IsChannelWiseConv)
          return result;
        return 0;
      }
      if (v2 != 92)
        return 0;
    }
    return 1;
  }
  if (!ZinIrOpLayer::IsPELayer(a1))
    ZinAssertImpl("must be a PE layer");
  if (((*(uint64_t (**)(ZinANELayer *))(*(_QWORD *)a1 + 408))(a1) & 1) != 0)
    return 0;
  if (*((_QWORD *)a1 + 12) == *((_QWORD *)a1 + 11))
    return 1;
  v5 = 0;
  do
  {
    HasInputTranspose = ZinPELayer::HasInputTranspose(a1, v5);
    if (HasInputTranspose)
      break;
    ++v5;
  }
  while (v5 < (uint64_t)(*((_QWORD *)a1 + 12) - *((_QWORD *)a1 + 11)) >> 3);
  return HasInputTranspose ^ 1u;
}

uint64_t BatchOrChannelSplitPressureBasedSubgraphIdentification::ShouldLegalizeToSingleDimension()
{
  return 0;
}

void BatchOrChannelSplitPressureBasedSubgraphIdentification::LegalizeToSingleDimensional()
{
  ZinAssertImpl("Internal Splitting Error");
}

uint64_t **BatchOrChannelSplitPressureBasedSubgraphIdentification::IsLayerSplittable@<X0>(uint64_t a1@<X0>, ZinIrOpLayer *a2@<X1>, int a3@<W3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t **result;
  _BYTE *v11;
  int v12;
  _BOOL4 v13;
  int v14;

  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)a5 = a5 + 8;
  result = (uint64_t **)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  if (!*((_BYTE *)result + 144))
  {
    v11 = *(_BYTE **)(a1 + 64);
    if (v11[3])
    {
      v12 = 0;
    }
    else if (v11[4])
    {
      v12 = 2;
    }
    else
    {
      v12 = 5;
    }
    v14 = v12;
    if (v11[2])
      v13 = 0;
    else
      v13 = v11[8] == 0;
    result = (uint64_t **)BatchOrChannelSplitPressureBasedSubgraphIdentification::IsLayerSplittable(a2, v13, v11[2] != 0, v12, a3, a4);
    if ((_DWORD)result)
      return std::__tree<ZinIrDimension>::__emplace_unique_key_args<ZinIrDimension,ZinIrDimension>((uint64_t **)a5, &v14, &v14);
  }
  return result;
}

void sub_206DD7DD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

BOOL BatchOrChannelSplitPressureBasedSubgraphIdentification::ValidateDimensionalConstraints(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;

  if (!a2[11])
    return 0;
  v2 = (_QWORD *)a2[9];
  v3 = a2 + 10;
  if (v2 == a2 + 10)
    return 1;
  do
  {
    v5 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 64) + 3);
    v6 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)v2[4] + 32))(v2[4], 0, 0);
    if (v5)
      v7 = 48;
    else
      v7 = 56;
    v8 = *(_QWORD *)(v6 + v7);
    result = v8 != 1;
    if (v8 == 1)
      break;
    v10 = (_QWORD *)v2[1];
    if (v10)
    {
      do
      {
        v11 = v10;
        v10 = (_QWORD *)*v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        v11 = (_QWORD *)v2[2];
        v12 = *v11 == (_QWORD)v2;
        v2 = v11;
      }
      while (!v12);
    }
    v2 = v11;
  }
  while (v11 != v3);
  return result;
}

unint64_t BatchOrChannelSplitPressureBasedSubgraphIdentification::RoundExactTileSize(uint64_t a1, uint64_t a2, float a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 64) + 3);
  v5 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  v6 = 48;
  if (!v4)
    v6 = 56;
  return vcvtms_u32_f32((float)*(uint64_t *)(v5 + v6) / a3);
}

void BatchOrChannelSplitPressureBasedSubgraphIdentification::SetPossibleTileCounts(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD **v32;
  _QWORD *v33;
  uint64_t v34;
  void *v35;
  char *v36;
  _QWORD *v37;
  char *v38;
  uint64_t *v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v5 = *(_DWORD *)(a4 + 24);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 64) + 3))
  {
    if (v5)
      ZinAssertImpl("Batch Splitter must only split in batch");
    v40 = 0;
    v41 = a3;
    v42 = 1;
    v43 = 1;
    v44 = 2;
    v45 = 1;
    v46 = 3;
    v47 = 1;
    v48 = 4;
    v49 = 1;
    std::map<ZinIrDimension,unsigned long>::map[abi:ne180100]((uint64_t)&v32, &v40, 5);
    v6 = a2[14];
    v7 = (_QWORD *)a2[13];
    if ((unint64_t)v7 >= v6)
    {
      v8 = a2[12];
      v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v8) >> 3);
      v10 = v9 + 1;
      if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v8) >> 3);
      if (2 * v11 > v10)
        v10 = 2 * v11;
      if (v11 >= 0x555555555555555)
        v12 = 0xAAAAAAAAAAAAAAALL;
      else
        v12 = v10;
      v39 = a2 + 14;
      if (v12)
        v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a2 + 14), v12);
      else
        v13 = 0;
      v25 = &v13[24 * v9];
      v35 = v13;
      v36 = v25;
      v38 = &v13[24 * v12];
      *(_QWORD *)v25 = v32;
      v26 = v33;
      *((_QWORD *)v25 + 1) = v33;
      v27 = v25 + 8;
      v28 = v34;
      *((_QWORD *)v25 + 2) = v34;
      if (v28)
      {
        v26[2] = v27;
        v32 = &v33;
        v33 = 0;
        v34 = 0;
      }
      else
      {
        *(_QWORD *)v25 = v27;
      }
LABEL_34:
      v37 = v25 + 24;
      std::vector<std::map<ZinIrDimension,unsigned long>>::__swap_out_circular_buffer(a2 + 12, &v35);
      v24 = (_QWORD *)a2[13];
      std::__split_buffer<std::map<ZinIrDimension,unsigned long>>::~__split_buffer(&v35);
      goto LABEL_35;
    }
  }
  else
  {
    if (v5 != 2)
      ZinAssertImpl("Channel Splitter must only split in channel");
    v40 = 0;
    v41 = 1;
    v42 = 1;
    v43 = 1;
    v44 = 2;
    v45 = a3;
    v46 = 3;
    v47 = 1;
    v48 = 4;
    v49 = 1;
    std::map<ZinIrDimension,unsigned long>::map[abi:ne180100]((uint64_t)&v32, &v40, 5);
    v14 = a2[14];
    v7 = (_QWORD *)a2[13];
    if ((unint64_t)v7 >= v14)
    {
      v18 = a2[12];
      v19 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v18) >> 3);
      v20 = v19 + 1;
      if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - v18) >> 3);
      if (2 * v21 > v20)
        v20 = 2 * v21;
      if (v21 >= 0x555555555555555)
        v22 = 0xAAAAAAAAAAAAAAALL;
      else
        v22 = v20;
      v39 = a2 + 14;
      if (v22)
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a2 + 14), v22);
      else
        v23 = 0;
      v25 = &v23[24 * v19];
      v35 = v23;
      v36 = v25;
      v38 = &v23[24 * v22];
      *(_QWORD *)v25 = v32;
      v29 = v33;
      *((_QWORD *)v25 + 1) = v33;
      v30 = v25 + 8;
      v31 = v34;
      *((_QWORD *)v25 + 2) = v34;
      if (v31)
      {
        v29[2] = v30;
        v32 = &v33;
        v33 = 0;
        v34 = 0;
      }
      else
      {
        *(_QWORD *)v25 = v30;
      }
      goto LABEL_34;
    }
  }
  *v7 = v32;
  v15 = v33;
  v7[1] = v33;
  v16 = v7 + 1;
  v17 = v34;
  v7[2] = v34;
  if (v17)
  {
    v15[2] = v16;
    v32 = &v33;
    v33 = 0;
    v34 = 0;
  }
  else
  {
    *v7 = v16;
  }
  v24 = v7 + 3;
LABEL_35:
  a2[13] = (uint64_t)v24;
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v32, v33);
}

void sub_206DD8290(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  _QWORD *v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD *);
  v6 = va_arg(va1, _QWORD);
  std::__split_buffer<std::map<ZinIrDimension,unsigned long>>::~__split_buffer((void **)va1);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)va, v5);
  _Unwind_Resume(a1);
}

uint64_t BatchOrChannelSplitPressureBasedSubgraphIdentification::CountOverComputedSpaceForSubgraph(uint64_t a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)(a1 + 88);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(a1 + 80, *(_QWORD **)(a1 + 88));
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
  return 0;
}

uint64_t BatchOrChannelSplitPressureBasedSubgraphIdentification::DetermineInputTileCountParams(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 24) = 2 * (*(_BYTE *)(*(_QWORD *)(a1 + 64) + 3) == 0);
  return 1;
}

uint64_t BatchOrChannelSplitPressureBasedSubgraphIdentification::CheckWorkUnitUtilizationLoss()
{
  return 0;
}

_QWORD *BatchOrChannelSplitPressureBasedSubgraphIdentification::GetSplitTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Bsplit_");
}

void ZinMirPEGOCUnit::ZinMirPEGOCUnit(ZinMirPEGOCUnit *this, ZinMirUnit::CommonUnitInfo *a2)
{
  uint64_t v2;

  v2 = ZinMirPEUnit::ZinMirPEUnit((uint64_t)this, 84, (__int128 *)a2);
  *(_QWORD *)v2 = &off_24C01B170;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
}

void ZinMirPEGOCUnit::~ZinMirPEGOCUnit(ZinMirPEGOCUnit *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)this = &off_24C01B170;
  v2 = *((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v3)
    MEMORY[0x20BD002F8](v3, 0x1000C4097E74013);
  v4 = *((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v4)
    MEMORY[0x20BD002F8](v4, 0x1000C4097E74013);
  v5 = *((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v5)
    MEMORY[0x20BD002F8](v5, 0x1000C4097E74013);
  v6 = *((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v8)
    MEMORY[0x20BD002F8](v8, 0x1000C4097E74013);
  v9 = *((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v9)
    MEMORY[0x20BD002F8](v9, 0x1000C4097E74013);
  v10 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v12)
    MEMORY[0x20BD002F8](v12, 0x1000C4097E74013);
  v13 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v13)
    MEMORY[0x20BD002F8](v13, 0x1000C4097E74013);
  ZinMirUnit::~ZinMirUnit(this);
}

{
  ZinMirPEGOCUnit::~ZinMirPEGOCUnit(this);
  JUMPOUT(0x20BD002F8);
}

uint64_t ZinMirPEGOCUnit::SetPreOps(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = *a2;
  *a2 = 0;
  v8 = a1[40];
  a1[40] = v7;
  if (v8)
    MEMORY[0x20BD002F8](v8, 0x1000C4097E74013);
  v9 = *a3;
  *a3 = 0;
  v10 = a1[41];
  a1[41] = v9;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *a4;
  *a4 = 0;
  v12 = a1[42];
  a1[42] = v11;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  return 0;
}

uint64_t ZinMirPEGOCUnit::SetReLUForBiasScale(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  *a2 = 0;
  v4 = *(_QWORD *)(a1 + 352);
  *(_QWORD *)(a1 + 352) = v3;
  if (v4)
    MEMORY[0x20BD002F8](v4, 0x1000C4097E74013);
  return 0;
}

uint64_t ZinMirPEGOCUnit::DynamicShapeOutputTensorDimensions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v3;
  __int128 v7;
  __int128 v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  ZinIrTransposeInfo *v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  ZinIrTransposeInfo *v16;
  __int128 v17;
  void *__p;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v3 = *(_OWORD **)a2;
  if (*(_QWORD *)(a2 + 8) == *(_QWORD *)a2)
    ZinAssertImpl("MirPEGOCUnit insufficient number of inputs");
  v7 = *v3;
  v8 = v3[1];
  v25 = *((_QWORD *)v3 + 4);
  v23 = v7;
  v24 = v8;
  v9 = *(_QWORD **)(a1 + 336);
  if (v9)
  {
    ZinIrBroadcastInfo::ExtractDimensionsNotEqualToOne(v9, (uint64_t)&__p);
    v10 = v22;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&__p);
    if (v10)
      ZinAssertImpl("MirPEGOCUnit with data tensor broadcast");
  }
  v11 = *(_QWORD *)(a1 + 96);
  if (v11 && (*(unsigned int (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v11 + 16))(v11, a2, &v23))
    ZinAssertImpl("MirPEGOCUnit texture shape propagation failed");
  v12 = *(ZinIrTransposeInfo **)(a1 + 328);
  if (v12 && ZinIrTransposeInfo::TensorDimensions(v12, (ZinTensorDimensions *)&v23))
    ZinAssertImpl("MirPEGOCUnit input transpose shape propagation failed");
  if (*(_QWORD *)(a1 + 360))
  {
    __p = 0;
    v20 = 0;
    v21 = 0;
    std::vector<ZinTensorDimensions>::__init_with_size[abi:ne180100]<std::__wrap_iter<ZinTensorDimensions const*>,std::__wrap_iter<ZinTensorDimensions const*>>(&__p, *(const void **)a2, *(_QWORD *)(a2 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    v13 = __p;
    v14 = v23;
    v15 = v24;
    *((_QWORD *)__p + 4) = v25;
    *v13 = v14;
    v13[1] = v15;
    if (ZinIrDynamicGOCInfo::TensorDimensions(*(_BYTE **)(a1 + 360), (uint64_t)&__p))
      ZinAssertImpl("MirPEGOCUnit input transpose shape propagation failed");
    if (__p)
    {
      v20 = __p;
      operator delete(__p);
    }
  }
  v16 = *(ZinIrTransposeInfo **)(a1 + 400);
  if (v16 && ZinIrTransposeInfo::TensorDimensions(v16, (ZinTensorDimensions *)&v23))
    ZinAssertImpl("MirPEGOCUnit output transpose shape propagation failed");
  v17 = v24;
  *(_OWORD *)a3 = v23;
  *(_OWORD *)(a3 + 16) = v17;
  *(_QWORD *)(a3 + 32) = v25;
  return 0;
}

void sub_206DD8778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

ZinIrOpLayer *ZinMirPEGOCUnit::CreateLayer(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  ZinIrKernel *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  void *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  ZinIrOpLayer *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  size_t v99;
  void **v100;
  const void *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v106;
  char v107;
  uint64_t v108;
  char v109;
  void *__p[2];
  char v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  __int128 v140;

  v139 = 0u;
  v140 = 0u;
  v137 = 0;
  v138 = 0;
  v135 = 0u;
  v136 = 0u;
  v134 = 0u;
  if (*(_QWORD *)(a1 + 320))
  {
    v4 = (void *)operator new();
    ZinIrOpLayerOpCode::ZinIrOpLayerOpCode((uint64_t)v4, 4);
    __p[0] = v4;
    v5 = operator new();
    v6 = v5;
    v7 = *(std::__shared_weak_count **)(a2 + 16);
    v132 = *(_QWORD *)(a2 + 8);
    v133 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    ZinActivationLayer::ZinActivationLayer(v5, __p, &v132, a1 + 8, *(_QWORD *)(a1 + 320));
    *((_QWORD *)&v139 + 1) = v6;
    v10 = v133;
    if (v133)
    {
      v11 = (unint64_t *)&v133->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = __p[0];
    __p[0] = 0;
    if (v13)
      (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  }
  if (*(_QWORD *)(a1 + 328))
  {
    v14 = operator new();
    v15 = v14;
    v16 = *(std::__shared_weak_count **)(a2 + 16);
    v130 = *(_QWORD *)(a2 + 8);
    v131 = v16;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    ZinTransposeLayer::ZinTransposeLayer(v14, a1 + 328, &v130, a1 + 8);
    *(_QWORD *)&v140 = v15;
    v19 = v131;
    if (v131)
    {
      v20 = (unint64_t *)&v131->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  if (*(_QWORD *)(a1 + 336))
  {
    v22 = operator new();
    v23 = v22;
    v24 = *(std::__shared_weak_count **)(a2 + 16);
    v128 = *(_QWORD *)(a2 + 8);
    v129 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    ZinBroadcastLayer::ZinBroadcastLayer(v22, a1 + 336, &v128, a1 + 8);
    *((_QWORD *)&v140 + 1) = v23;
    v27 = v129;
    if (v129)
    {
      v28 = (unint64_t *)&v129->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
  if (*(_QWORD *)(a1 + 352))
  {
    v30 = (void *)operator new();
    ZinIrOpLayerOpCode::ZinIrOpLayerOpCode((uint64_t)v30, 4);
    __p[0] = v30;
    v31 = operator new();
    v32 = v31;
    v33 = *(std::__shared_weak_count **)(a2 + 16);
    v126 = *(_QWORD *)(a2 + 8);
    v127 = v33;
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    ZinActivationLayer::ZinActivationLayer(v31, __p, &v126, a1 + 8, *(_QWORD *)(a1 + 352));
    v138 = v32;
    v36 = v127;
    if (v127)
    {
      v37 = (unint64_t *)&v127->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v39 = __p[0];
    __p[0] = 0;
    if (v39)
      (*(void (**)(void *))(*(_QWORD *)v39 + 8))(v39);
  }
  if (*(_QWORD *)(a1 + 360))
  {
    v40 = operator new();
    v41 = v40;
    v42 = *(std::__shared_weak_count **)(a2 + 16);
    v124 = *(_QWORD *)(a2 + 8);
    v125 = v42;
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    ZinTernaryDynamicGOCLayer::ZinTernaryDynamicGOCLayer(v40, a1 + 360, &v124, a1 + 8);
    v45 = v125;
    if (v125)
    {
      v46 = (unint64_t *)&v125->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
  }
  else
  {
    v41 = 0;
  }
  if (*(_QWORD *)(a1 + 368))
  {
    v48 = operator new();
    v49 = v48;
    v50 = *(std::__shared_weak_count **)(a2 + 16);
    v122 = *(_QWORD *)(a2 + 8);
    v123 = v50;
    if (v50)
    {
      v51 = (unint64_t *)&v50->__shared_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    __p[0] = 0;
    ZinElementWiseLayer::ZinElementWiseLayer(v48, a1 + 368, &v122, a1 + 8, __p);
    *(_QWORD *)&v134 = v49;
    v53 = (ZinIrKernel *)__p[0];
    __p[0] = 0;
    if (v53)
    {
      ZinIrKernel::~ZinIrKernel(v53);
      MEMORY[0x20BD002F8]();
    }
    v54 = v123;
    if (v123)
    {
      v55 = (unint64_t *)&v123->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
  }
  if (*(_QWORD *)(a1 + 376))
  {
    v57 = (void *)operator new();
    ZinIrOpLayerOpCode::ZinIrOpLayerOpCode((uint64_t)v57, 4);
    __p[0] = v57;
    v58 = operator new();
    v59 = v58;
    v60 = *(std::__shared_weak_count **)(a2 + 16);
    v120 = *(_QWORD *)(a2 + 8);
    v121 = v60;
    if (v60)
    {
      v61 = (unint64_t *)&v60->__shared_owners_;
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
    }
    ZinActivationLayer::ZinActivationLayer(v58, __p, &v120, a1 + 8, *(_QWORD *)(a1 + 376));
    *((_QWORD *)&v134 + 1) = v59;
    v63 = v121;
    if (v121)
    {
      v64 = (unint64_t *)&v121->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    v66 = __p[0];
    __p[0] = 0;
    if (v66)
      (*(void (**)(void *))(*(_QWORD *)v66 + 8))(v66);
  }
  if (*(_QWORD *)(a1 + 384))
  {
    v67 = (void *)operator new();
    ZinIrOpLayerOpCode::ZinIrOpLayerOpCode((uint64_t)v67, 4);
    __p[0] = v67;
    v68 = operator new();
    v69 = v68;
    v70 = *(std::__shared_weak_count **)(a2 + 16);
    v118 = *(_QWORD *)(a2 + 8);
    v119 = v70;
    if (v70)
    {
      v71 = (unint64_t *)&v70->__shared_owners_;
      do
        v72 = __ldxr(v71);
      while (__stxr(v72 + 1, v71));
    }
    ZinActivationLayer::ZinActivationLayer(v68, __p, &v118, a1 + 8, *(_QWORD *)(a1 + 384));
    *(_QWORD *)&v135 = v69;
    v73 = v119;
    if (v119)
    {
      v74 = (unint64_t *)&v119->__shared_owners_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
    v76 = __p[0];
    __p[0] = 0;
    if (v76)
      (*(void (**)(void *))(*(_QWORD *)v76 + 8))(v76);
  }
  if (*(_QWORD *)(a1 + 312))
    ZinAssertImpl("ZinMirPEGOCUnit::CreateLayer  dequant not supported yet");
  if (*(_QWORD *)(a1 + 344))
    ZinAssertImpl("ZinMirPEGOCUnit::CreateLayer dequant not supported yet");
  if (*(_QWORD *)(a1 + 392))
  {
    v77 = (void *)operator new();
    ZinIrOpLayerOpCode::ZinIrOpLayerOpCode((uint64_t)v77, 4);
    __p[0] = v77;
    v78 = operator new();
    v79 = v78;
    v80 = *(std::__shared_weak_count **)(a2 + 16);
    v116 = *(_QWORD *)(a2 + 8);
    v117 = v80;
    if (v80)
    {
      v81 = (unint64_t *)&v80->__shared_owners_;
      do
        v82 = __ldxr(v81);
      while (__stxr(v82 + 1, v81));
    }
    ZinActivationLayer::ZinActivationLayer(v78, __p, &v116, a1 + 8, *(_QWORD *)(a1 + 392));
    *((_QWORD *)&v135 + 1) = v79;
    v83 = v117;
    if (v117)
    {
      v84 = (unint64_t *)&v117->__shared_owners_;
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
    }
    v86 = __p[0];
    __p[0] = 0;
    if (v86)
      (*(void (**)(void *))(*(_QWORD *)v86 + 8))(v86);
  }
  if (*(_QWORD *)(a1 + 400))
  {
    v87 = operator new();
    v88 = v87;
    v89 = *(std::__shared_weak_count **)(a2 + 16);
    v114 = *(_QWORD *)(a2 + 8);
    v115 = v89;
    if (v89)
    {
      v90 = (unint64_t *)&v89->__shared_owners_;
      do
        v91 = __ldxr(v90);
      while (__stxr(v91 + 1, v90));
    }
    ZinTransposeLayer::ZinTransposeLayer(v87, a1 + 400, &v114, a1 + 8);
    *(_QWORD *)&v136 = v88;
    v92 = v115;
    if (v115)
    {
      v93 = (unint64_t *)&v115->__shared_owners_;
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
  }
  v95 = (ZinIrOpLayer *)operator new();
  v96 = *(std::__shared_weak_count **)(a2 + 16);
  v112 = *(_QWORD *)(a2 + 8);
  v113 = v96;
  if (v96)
  {
    v97 = (unint64_t *)&v96->__shared_owners_;
    do
      v98 = __ldxr(v97);
    while (__stxr(v98 + 1, v97));
  }
  if (*(char *)(a1 + 31) >= 0)
    v99 = *(unsigned __int8 *)(a1 + 31);
  else
    v99 = *(_QWORD *)(a1 + 16);
  v100 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v99 + 14);
  if (v111 < 0)
    v100 = (void **)__p[0];
  if (v99)
  {
    if (*(char *)(a1 + 31) >= 0)
      v101 = (const void *)(a1 + 8);
    else
      v101 = *(const void **)(a1 + 8);
    memmove(v100, v101, v99);
  }
  strcpy((char *)v100 + v99, "_dynamic_layer");
  v106 = *(_QWORD *)(a1 + 288);
  v107 = *(_BYTE *)(a1 + 296);
  v108 = *(_QWORD *)(a1 + 300);
  v109 = *(_BYTE *)(a1 + 308);
  ZinPEGOCLayer::ZinPEGOCLayer(v95, &v112, __p, &v139, &v137, v41, &v134, &v106);
  if (v111 < 0)
    operator delete(__p[0]);
  v102 = v113;
  if (v113)
  {
    v103 = (unint64_t *)&v113->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  if (ZinMirUnit::InitializeEngineLayer(a1, v95, *(uint64_t **)(a2 + 24), *(uint64_t **)(a2 + 32)))
    ZinAssertImpl("Error in initializing PEGOC Engine Layer.");
  return v95;
}

void sub_206DD90DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36)
{
  uint64_t v36;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  MEMORY[0x20BD002F8](v36, 0x10B3C4024B96488);
  _Unwind_Resume(a1);
}

BOOL ZinMirPEGOCUnit::IsValid(ZinMirPEGOCUnit *this, ZinMirUnitValidationContext *a2)
{
  return *((_QWORD *)this + 13) && ZinMirUnit::IsValid(this, a2);
}

_QWORD *ZinIrRingBufferReaderUnit::ZinIrRingBufferReaderUnit(_QWORD *a1, const ZinIrRingBufferUnitInfo *a2, uint64_t a3)
{
  _QWORD *v5;

  v5 = ZinIrUnit::ZinIrUnit(a1, a3);
  *v5 = &off_24C0236B0;
  ZinIrRingBufferUnitInfo::ZinIrRingBufferUnitInfo((ZinIrRingBufferUnitInfo *)(v5 + 7), a2);
  a1[7] = &unk_24C024F58;
  std::unordered_map<ZinIrDimension,long>::unordered_map((uint64_t)(a1 + 27), (uint64_t)a2 + 160);
  return a1;
}

void sub_206DD92C4(_Unwind_Exception *a1)
{
  ZinIrUnit *v1;
  void **v2;

  *((_QWORD *)v1 + 7) = &unk_24C022308;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v1 + 176);
  std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::~__hash_table((uint64_t)v1 + 136);
  ZinIrUnitInfo::~ZinIrUnitInfo(v2);
  ZinIrUnit::~ZinIrUnit(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrRingBufferReaderUnit::TensorDimensions(ZinIrRingBufferReaderUnit *this, const ZinIrHalParameters *a2, ZinTensorDimensions *a3, ZinIrUnitStatus *a4)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t *i;

  v4 = *((_QWORD *)this + 1);
  v5 = *(_OWORD *)(v4 + 8);
  v6 = *(_OWORD *)(v4 + 24);
  *((_QWORD *)a3 + 4) = *(_QWORD *)(v4 + 40);
  *(_OWORD *)a3 = v5;
  *((_OWORD *)a3 + 1) = v6;
  for (i = (uint64_t *)*((_QWORD *)this + 29); i; i = (uint64_t *)*i)
    ZinTensorDimensions::SetDimension(a3, *((_DWORD *)i + 4), i[3]);
  return 0;
}

ZinIrRingBufferReaderInfo *ZinIrRingBufferReaderUnit::CreateOpcode@<X0>(ZinIrRingBufferReaderUnit *this@<X0>, uint64_t a2@<X8>)
{
  const ZinIrRingBufferReaderUnitInfo *v4;
  ZinIrRingBufferReaderInfo *v5;
  ZinIrRingBufferReaderInfo *result;

  v4 = (ZinIrRingBufferReaderUnit *)((char *)this + 56);
  v5 = (ZinIrRingBufferReaderInfo *)operator new();
  result = ZinIrRingBufferReaderInfo::ZinIrRingBufferReaderInfo(v5, v4);
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = v5;
  return result;
}

void sub_206DD93B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x10B3C409D57A31ALL);
  _Unwind_Resume(a1);
}

uint64_t ZinIrRingBufferReaderUnit::CreateLayer(ZinIrRingBufferReaderUnit *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  int v17;
  uint64_t v18;

  ZinIrRingBufferReaderUnit::CreateOpcode(a1, (uint64_t)&v17);
  if (v17)
  {
    v5 = 0;
  }
  else
  {
    v6 = operator new();
    v5 = v6;
    v7 = (std::__shared_weak_count *)(*a3)[1];
    v15 = **a3;
    v16 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    ZinRingBufferReaderLayer::ZinRingBufferReaderLayer(v6, &v18, &v15, (char *)a1 + 64);
    v10 = v16;
    if (v16)
    {
      v11 = (unint64_t *)&v16->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    ZinIrOpLayer::ValidateSemantics(v5);
  }
  v13 = v18;
  v18 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return v5;
}

void sub_206DD94EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x20BD002F8](v12, 0x10B3C4024B96488);
  v14 = a12;
  a12 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

void ZinIrRingBufferReaderUnit::~ZinIrRingBufferReaderUnit(ZinIrRingBufferReaderUnit *this)
{
  ZinIrRingBufferReaderUnit::~ZinIrRingBufferReaderUnit(this);
  JUMPOUT(0x20BD002F8);
}

{
  _QWORD *v2;

  *(_QWORD *)this = &off_24C0236B0;
  *((_QWORD *)this + 7) = &unk_24C024F58;
  v2 = (_QWORD *)((char *)this + 56);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 216);
  *v2 = &unk_24C022308;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 176);
  std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::~__hash_table((uint64_t)this + 136);
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)this + 7);
  ZinIrUnit::~ZinIrUnit(this);
}

uint64_t std::unordered_map<ZinIrDimension,long>::unordered_map(uint64_t a1, uint64_t a2)
{
  int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(int **)(a2 + 16); i; i = *(int **)i)
    std::__hash_table<std::__hash_value_type<ZinDependencyOffsetDim,long>,std::__unordered_map_hasher<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::hash<ZinDependencyOffsetDim>,std::equal_to<ZinDependencyOffsetDim>,true>,std::__unordered_map_equal<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::equal_to<ZinDependencyOffsetDim>,std::hash<ZinDependencyOffsetDim>,true>,std::allocator<std::__hash_value_type<ZinDependencyOffsetDim,long>>>::__emplace_unique_key_args<ZinDependencyOffsetDim,std::pair<ZinDependencyOffsetDim const,long> const&>(a1, i + 4, (_OWORD *)i + 1);
  return a1;
}

void sub_206DD95BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrTopKInfo::ComputeOutputDimensions(ZinIrTopKInfo *this, const ZinTensorDimensions *a2, ZinTensorDimensions *a3)
{
  ZinIrTopKInfo::ComputeOutputDimensionsUtil((uint64_t)a2, (uint64_t)a3, *((_QWORD *)this + 2), *((_DWORD *)this + 6), *((_DWORD *)this + 7), *((unsigned __int8 *)this + 56));
  return 0;
}

uint64_t ZinIrTopKInfo::ComputeOutputDimensionsUtil(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  const char *v12;
  _QWORD v13[2];
  char v14;
  int v15;

  v8 = (_QWORD *)a2;
  v15 = a5;
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 32) = v9;
  if (a5 != 5 && a6 && SetValueAtDimension<ZinTensorDimensions>((_QWORD *)a2, a5, 1))
  {
    ZinGetZinIrDimensionString(&v15, v13);
    if (v14 >= 0)
      v12 = (const char *)v13;
    else
      v12 = (const char *)v13[0];
    ZinAssertImpl("Cannot set value at vector_dimension:%s", v12);
  }
  switch(a4)
  {
    case 0:
      goto LABEL_9;
    case 1:
      v8 += 4;
      goto LABEL_9;
    case 2:
      ++v8;
      goto LABEL_9;
    case 3:
      v8 += 2;
      goto LABEL_9;
    case 4:
      v8 += 3;
LABEL_9:
      *v8 = a3;
      break;
    case 5:
      ZinAssertImpl("Error: Invalid dimension");
    default:
      return 0;
  }
  return 0;
}

void sub_206DD9760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinTopKLayer::Lower(uint64_t a1, ZinIrOpLayerGraph *a2)
{
  uint64_t InputTensor;
  ZinIrOpLayerGraph *v5;
  ZinIrOpLayer *v6;
  int v7;
  uint64_t v8;
  _BOOL4 v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  std::string::size_type v13;
  float v14;
  std::string::size_type v15;
  std::string::size_type v16;
  uint64_t v17;
  double v18;
  int Pow2Log2;
  uint64_t v20;
  int v21;
  int v22;
  ZinIrOpLayerOpCode *v23;
  ZinIrOpLayerOpCode *v24;
  uint64_t v25;
  int v26;
  ZinIrOpLayerOpCode *v27;
  ZinIrOpLayerOpCode *v28;
  ZinIrOpLayer *updated;
  const ZinIrOpLayerOpCode *v31;
  ZinIrOpLayerOpCode *v32;
  unint64_t v33;
  char v34;
  void *__p;
  void *v36;
  _QWORD *v37;
  char v38;
  int64x2_t v39[2];
  uint64_t v40;
  int v41;
  void *v42;
  void *v43;
  uint64_t v44;
  _QWORD v45[4];
  int v46;
  _QWORD v47[6];
  _QWORD *v48[4];
  void **v49[6];
  _QWORD *v50[5];

  InputTensor = ZinIrOpLayer::GetInputTensor((ZinIrOpLayer *)a1, 0);
  if (GetValueAtDimension<ZinTensorDimensions>((uint64_t *)(InputTensor + 48), *(_DWORD *)(*(_QWORD *)(a1 + 64) + 24)) == 1)
  {
    v6 = **(ZinIrOpLayer ***)(a1 + 88);
    memset(v45, 0, sizeof(v45));
    v46 = 1065353216;
    v7 = ZinIrOpLayerGraph::MoveOutgoingEdges(a2, (uint64_t **)a1, v6, v45);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v45);
    v8 = **(_QWORD **)(a1 + 88);
    v9 = ZinIrOpLayerGraph::RemoveNode(a2, (ZinIrOpLayer *)a1, 0);
    v10 = operator new(8uLL);
    __p = v10;
    *v10 = a1;
    v36 = v10 + 1;
    v37 = v10 + 1;
    v11 = v7 & v9 & ZinIrOptUtils::FixLiveInOutConnection((uint64_t **)a2, v8, (uint64_t **)&__p);
    if (__p)
    {
      v36 = __p;
      operator delete(__p);
    }
    if (v11)
      return 0;
    else
      return 3;
  }
  else
  {
    v12 = ZinRCASDecompositionUtils::AddDeinterleaveCopyIfNeeded((ZinRCASDecompositionUtils *)a1, (uint64_t **)a2, v5);
    if (!(_DWORD)v12)
    {
      v42 = 0;
      v43 = 0;
      v44 = 0;
      v41 = 0;
      v13 = ZinRCASDecompositionUtils::MergeValuesAndIndices((uint64_t **)a2, a1, &v41, (uint64_t)&v42);
      v39[0] = (int64x2_t)xmmword_207A80930;
      v39[1] = vdupq_n_s64(1uLL);
      v40 = 1;
      LOBYTE(__p) = 0;
      v38 = 0;
      v34 = 0;
      v14 = -INFINITY;
      if (*(_DWORD *)(*(_QWORD *)(a1 + 64) + 12) == 1)
        v14 = INFINITY;
      v15 = ZinRCASDecompositionUtils::PreProcessRCASLayer((uint64_t **)a2, v13, v41, (BOOL *)&v34, (uint64_t)v39, (uint64_t)&__p, v14);
      v16 = v15;
      if (!v15 || *(_DWORD *)(*(_QWORD *)(v15 + 64) + 8) != 66)
        ZinAssertImpl("TopK layer lowering failed");
      v17 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(v15 + 88) + 32))(**(_QWORD **)(v15 + 88), 0, 0);
      v18 = log2((double)*(uint64_t *)(v17 + 56));
      Pow2Log2 = ZinRoundUpToNextPow2Log2(*(_QWORD *)(*(_QWORD *)(v16 + 64) + 16));
      v20 = (uint64_t)v18;
      v31 = 0;
      v32 = 0;
      v33 = 0;
      std::vector<ZinIrRCASInfo>::reserve((uint64_t *)&v31, (2 * (uint64_t)v18 - Pow2Log2 + (2 * (uint64_t)v18 - Pow2Log2) * Pow2Log2) / 2);
      v21 = ZinIrTopKTypeToZinIrRCASDirection(*(_DWORD *)(*(_QWORD *)(v16 + 64) + 12));
      ZinRCASDecompositionUtils::CreatePartialSortDecomposition((uint64_t *)&v31, Pow2Log2, v21, *(_QWORD *)(v16 + 64) + 32);
      if ((uint64_t)v18 > Pow2Log2)
      {
        do
        {
          v22 = ZinIrTopKTypeToZinIrRCASDirection(*(_DWORD *)(*(_QWORD *)(v16 + 64) + 12));
          ZinIrRCASInfo::ZinIrRCASInfo((uint64_t)v49, 2, v22, 2, --v20, Pow2Log2, Pow2Log2, *(_QWORD *)(v16 + 64) + 32, 0);
          v23 = v32;
          if ((unint64_t)v32 >= v33)
          {
            v24 = (ZinIrOpLayerOpCode *)std::vector<ZinIrRCASInfo>::__push_back_slow_path<ZinIrRCASInfo const&>((uint64_t *)&v31, (uint64_t)v49);
          }
          else
          {
            std::construct_at[abi:ne180100]<ZinIrRCASInfo,ZinIrRCASInfo const&,ZinIrRCASInfo*>(v32, (uint64_t)v49);
            v24 = (ZinIrOpLayerOpCode *)((char *)v23 + 80);
          }
          v32 = v24;
          v25 = Pow2Log2 + 1;
          if (Pow2Log2 >= 1)
          {
            do
            {
              v26 = ZinIrTopKTypeToZinIrRCASDirection(*(_DWORD *)(*(_QWORD *)(v16 + 64) + 12));
              ZinIrRCASInfo::ZinIrRCASInfo((uint64_t)v47, 1, v26, 2, Pow2Log2, v25 - 2, v25 - 2, *(_QWORD *)(v16 + 64) + 32, 0);
              v27 = v32;
              if ((unint64_t)v32 >= v33)
              {
                v28 = (ZinIrOpLayerOpCode *)std::vector<ZinIrRCASInfo>::__push_back_slow_path<ZinIrRCASInfo const&>((uint64_t *)&v31, (uint64_t)v47);
              }
              else
              {
                std::construct_at[abi:ne180100]<ZinIrRCASInfo,ZinIrRCASInfo const&,ZinIrRCASInfo*>(v32, (uint64_t)v47);
                v28 = (ZinIrOpLayerOpCode *)((char *)v27 + 80);
              }
              v32 = v28;
              v47[0] = &unk_24C017970;
              std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v48, v48[1]);
              ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v47);
              --v25;
            }
            while (v25 > 1);
          }
          v49[0] = (void **)&unk_24C017970;
          std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v50, v50[1]);
          ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v49);
        }
        while (v20 > Pow2Log2);
      }
      updated = ZinRCASDecompositionUtils::UpdateGraphWithDecomposedLayers((uint64_t **)a2, v16, &v31, v34);
      if (!updated)
        ZinAssertImpl("TopK layer lowering failed");
      v12 = ZinRCASDecompositionUtils::PostProcessRCASLayer((uint64_t **)a2, (uint64_t)updated, v16, *(_DWORD *)(*(_QWORD *)(v16 + 64) + 24), *(_DWORD *)(*(_QWORD *)(v16 + 64) + 28), v39, (uint64_t)&__p, v41, (uint64_t)&v42);
      v49[0] = (void **)&v31;
      std::vector<ZinIrRCASInfo>::__destroy_vector::operator()[abi:ne180100](v49);
      if (v42)
      {
        v43 = v42;
        operator delete(v42);
      }
    }
  }
  return v12;
}

void sub_206DD9BB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *ZinTopKLayer::Clone(ZinIrOpLayer *a1, uint64_t *a2, __int128 *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t *GroupId;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;

  v6 = (_QWORD *)operator new();
  v7 = *((_QWORD *)a1 + 8);
  v8 = operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode((ZinIrOpLayerOpCode *)v8, (const ZinIrOpLayerOpCode *)v7);
  *(_QWORD *)v8 = &unk_24C017BD0;
  v9 = *(_OWORD *)(v7 + 12);
  *(_DWORD *)(v8 + 28) = *(_DWORD *)(v7 + 28);
  *(_OWORD *)(v8 + 12) = v9;
  std::set<unsigned long>::set[abi:ne180100]((uint64_t *)(v8 + 32), v7 + 32);
  *(_BYTE *)(v8 + 56) = *(_BYTE *)(v7 + 56);
  v10 = a2[1];
  v19 = *a2;
  v20 = (std::__shared_weak_count *)v10;
  v21 = v8;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  ZinTopKLayer::ZinTopKLayer(v6, &v21, &v19, a3);
  v13 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v21;
  v21 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  GroupId = (uint64_t *)ZinIrOpLayer::GetGroupId(a1);
  ZinIrOpLayer::SetGroupId((uint64_t)v6, *GroupId);
  return v6;
}

void sub_206DD9DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  v14 = a12;
  a12 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  MEMORY[0x20BD002F8](v12, 0x10B3C4024B96488);
  _Unwind_Resume(a1);
}

uint64_t ZinTopKLayer::ComputeOutputDimensions(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  ZinIrTopKInfo::ComputeOutputDimensionsUtil(*a2, a3, *(_QWORD *)(*(_QWORD *)(a1 + 64) + 16), *(_DWORD *)(*(_QWORD *)(a1 + 64) + 24), *(_DWORD *)(*(_QWORD *)(a1 + 64) + 28), *(unsigned __int8 *)(*(_QWORD *)(a1 + 64) + 56));
  return 0;
}

_QWORD *ZinTopKLayer::OpCodeKindToString@<X0>(ZinTopKLayer *this@<X0>, _QWORD *a2@<X8>)
{
  return ZinIrTopKTypeToString(*(_DWORD *)(*((_QWORD *)this + 8) + 12), a2);
}

uint64_t ZinTopKLayer::DebugDetailPrint@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  _QWORD v5[3];
  _QWORD v6[10];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v8);
}

void sub_206DD9F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL ZinTopKLayer::NeedsTypeCastToWrite(uint64_t a1, int a2)
{
  return a2 != 10 && !IsPrimaryFormat(a2);
}

uint64_t ZinTopKLayer::ValidateSemantics_Impl(ZinIrOpLayer *a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v4;
  int v5;
  int v6;
  unint64_t ValueAt;
  int v10;
  uint64_t result;
  int v12;
  BOOL v13;
  char v14;
  unint64_t v15;
  const char *v16;
  _QWORD v17[2];
  char v18;

  if (a2[1] - *a2 != 120)
    ZinAssertImpl("TopK layer must has one bottom");
  v4 = *((_QWORD *)a1 + 8);
  if (!*(_DWORD *)(v4 + 12))
    ZinAssertImpl("Invalid TopK type");
  v5 = *(_DWORD *)(v4 + 24);
  v6 = *(_DWORD *)(v4 + 28);
  if (v5 == v6)
    ZinAssertImpl("Sort and Vector dimension cannot be same");
  ValueAt = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)(*a2 + 8), *(_DWORD *)(v4 + 24));
  if (*(_QWORD *)(v4 + 16) - 1 >= ValueAt)
  {
    v15 = ValueAt;
    DimensionToString(v5, v17);
    if (v18 >= 0)
      v16 = (const char *)v17;
    else
      v16 = (const char *)v17[0];
    ZinAssertImpl("TopK k value must within [1, %ld] along sort_dimension %s, but %ld is provided", v15, v16, *(_QWORD *)(v4 + 16));
  }
  ZinIrOpLayer::ValidateSemantics_Impl(a1, a2, a3);
  v10 = *(unsigned __int8 *)(v4 + 56);
  ZinRCASValidationUtils::ValidateCommonInput(*a2, (uint64_t)a3, v5, v6, v10);
  ZinRCASValidationUtils::ValidateCommonParams(*a2, v5, v6, (_QWORD *)(v4 + 32), v10);
  result = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
  v12 = *(_DWORD *)(result + 88);
  if (v10)
    v13 = v12 == 10;
  else
    v13 = 0;
  v14 = v13;
  if (v12 != 3 && (v14 & 1) == 0)
    ZinAssertImpl("TopK unit output format must be FP16 or Uint16");
  return result;
}

void sub_206DDA0C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirPETransposeFusionWithSinglePatchReduction::Execute(ZinMirPETransposeFusionWithSinglePatchReduction *this, ZinIrControlFlowGraph *a2, ZinIrNetworkStatus *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v7[0] = &off_24C001D40;
  v7[1] = this;
  v8 = v7;
  v3 = ZinIrControlFlowGraph::TraverseForward(a2, (uint64_t)v7, 0);
  v4 = v8;
  if (v8 == v7)
  {
    v5 = 4;
    v4 = v7;
    goto LABEL_5;
  }
  if (v8)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return v3;
}

void sub_206DDA18C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirPETransposeFusionWithSinglePatchReduction::IsSinglePatchReductionWithNoOutputTranspose(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;

  if (!a2)
    return 0;
  if (*(_DWORD *)(a2[8] + 8) == 81)
  {
    if (a2[63])
    {
      v3 = a2[33];
      if (*(_BYTE *)(v3 + 256))
      {
        v4 = *(_QWORD *)(v3 + 240);
        v5 = 1 << *(_DWORD *)(v3 + 248);
        if ((*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 368))(a2, 3) <= v5
          && (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 368))(a2, 4) <= 1 << v4
          && (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 368))(a2, 1) == 1
          && a2[15] - a2[14] <= 8uLL)
        {
          return (*(unsigned int (**)(_QWORD *))(*a2 + 408))(a2) ^ 1;
        }
      }
    }
  }
  return 0;
}

uint64_t ZinMirPETransposeFusionWithSinglePatchReduction::SinglePatchReduction(const ZinPELayer **this, uint64_t **a2, ZinPELayer **a3)
{
  uint64_t v3;
  ZinTransposeLayer **v7;
  ZinTransposeLayer *v8;
  ZinTransposeLayer *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v16;
  std::string::size_type size;
  std::string *v18;
  __int128 v19;
  ZinTransposeLayer *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *PostOps;
  uint64_t IndexOps;
  uint64_t OutputScale;
  std::string::size_type v30;
  uint64_t OutputBias;
  std::string::size_type v32;
  int v33;
  int v34;
  int v35;
  _OWORD *PreOps;
  ZinIrOpLayer *v37;
  _OWORD v38[2];
  int v39;
  std::string __p;
  uint64_t v41;
  uint64_t v42[2];
  std::string v43;
  std::string v44;
  std::string v45;
  _QWORD v46[3];
  char v47;

  v3 = (uint64_t)*a3;
  if (!*a3 || *(_QWORD *)(v3 + 200) || *(_DWORD *)(*(_QWORD *)(v3 + 64) + 8) != 81 || !*(_QWORD *)(v3 + 504))
    return 0;
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v3 + 408))(*a3)
    || (v7 = *(ZinTransposeLayer ***)(v3 + 88), *(_QWORD *)(v3 + 96) - (_QWORD)v7 >= 9uLL))
  {
    if ((unint64_t)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 368))(v3, 2) > *((_QWORD *)*this + 120))
      ZinMirPETransposeFusionWithSinglePatchReduction::SetSinglePEPatch(this, (ZinPEElementWiseLayer *)v3);
    return 0;
  }
  v8 = *v7;
  if (*(_DWORD *)(*((_QWORD *)*v7 + 8) + 8) == 37
    && (v9 = **(ZinTransposeLayer ***)(v3 + 112), *(_DWORD *)(*((_QWORD *)v9 + 8) + 8) == 37))
  {
    if (!ZinTransposeLayer::IsCNTranspose(v8)
      || !ZinTransposeLayer::IsCNTranspose(v9)
      || *((_QWORD *)v8 + 15) - *((_QWORD *)v8 + 14) > 8uLL)
    {
      return 0;
    }
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v10 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 368))(*a3, 3);
  if (v10 > 1 << *((_DWORD *)*this + 250))
    return 0;
  v11 = v10;
  v12 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 368))(*a3, 4);
  if (v12 > 1 << *((_DWORD *)*this + 248))
    return 0;
  v13 = *((_QWORD *)*this + 123);
  if (v13)
  {
    if (v12 + v11 > 1 << v13)
      return 0;
  }
  if ((*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 368))(*a3, 1) != 1
    || *(_DWORD *)(*(_QWORD *)(**(_QWORD **)(v3 + 88) + 64) + 8) != 37
    && *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v3 + 32))(v3, 0, 0) + 56) <= *((_QWORD *)*this + 120)
    || (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 368))(v3, 3) > 32)
  {
    return 0;
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_", (const void **)(v3 + 24), (void **)&v45.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v43, "reduce_single_patch");
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_xfm", &v43, &v44);
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &v44;
  else
    v16 = (std::string *)v44.__r_.__value_.__r.__words[0];
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  else
    size = v44.__r_.__value_.__l.__size_;
  v18 = std::string::append(&v45, (const std::string::value_type *)v16, size);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  ZinObjectNameFactory::ZinObjectNameFactory(v46, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  v37 = (ZinIrOpLayer *)operator new();
  if (v9)
    v20 = v9;
  else
    v20 = (ZinTransposeLayer *)v3;
  v21 = (uint64_t *)(*(uint64_t (**)(ZinTransposeLayer *, _QWORD, _QWORD))(*(_QWORD *)v20 + 40))(v20, 0, 0);
  v22 = v21[1];
  v42[0] = *v21;
  v42[1] = v22;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  ZinObjectNameFactory::CreateName((uint64_t)v46, 1u, &__p);
  PreOps = (_OWORD *)ZinPEElementWiseLayer::GetPreOps((ZinPEElementWiseLayer *)v3);
  v25 = ZinPEElementWiseLayer::GetPreOps((ZinPEElementWiseLayer *)v3);
  v26 = *(_QWORD *)(v3 + 480);
  PostOps = (_OWORD *)ZinPEElementWiseLayer::GetPostOps((ZinPEElementWiseLayer *)v3);
  IndexOps = ZinPEElementWiseLayer::GetIndexOps((ZinPEElementWiseLayer *)v3);
  OutputScale = ZinPELayer::GetOutputScale((ZinPELayer *)v3);
  v30 = *(_QWORD *)OutputScale;
  v45.__r_.__value_.__s.__data_[8] = *(_BYTE *)(OutputScale + 8);
  v45.__r_.__value_.__r.__words[0] = v30;
  OutputBias = ZinPELayer::GetOutputBias((ZinPELayer *)v3);
  v32 = *(_QWORD *)OutputBias;
  v45.__r_.__value_.__s.__data_[20] = *(_BYTE *)(OutputBias + 8);
  *(std::string::size_type *)((char *)&v45.__r_.__value_.__r.__words[1] + 4) = v32;
  ZinPEElementWiseLayer::ZinPEElementWiseLayer((uint64_t)v37, v42, (__int128 *)&__p, PreOps, (_OWORD *)(v25 + 32), v26, PostOps, IndexOps, (__int128 *)&v45);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)v42);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  v41 = 0;
  v33 = ZinIrOpLayerGraph::ReplaceNode(a2, (ZinIrOpLayer *)v3, v37, (const Layer2TDMapper::SourceLayer *)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
  if (__p.__r_.__value_.__l.__size_)
  {
    __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  }
  if (v8)
  {
    v34 = ZinIrOpLayerGraph::MoveIncomingEdges((ZinIrOpLayerGraph *)a2, v8, v37);
    v33 &= v34 & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, v8, 0);
  }
  if (v9)
  {
    memset(v38, 0, sizeof(v38));
    v39 = 1065353216;
    v35 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, (uint64_t **)v9, v37, v38);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v38);
    v33 &= v35 & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, v9, 0);
  }
  ZinMirPETransposeFusionWithSinglePatchReduction::SetSinglePEPatch(this, v37);
  *a3 = v37;
  if (v33)
    v14 = 0;
  else
    v14 = 3;
  v46[0] = off_24C01FBB0;
  if (v47 < 0)
    operator delete((void *)v46[1]);
  return v14;
}

void sub_206DDA79C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a13);
  *(_QWORD *)(v37 - 128) = off_24C01FBB0;
  if (*(char *)(v37 - 97) < 0)
    operator delete(*(void **)(v37 - 120));
  _Unwind_Resume(a1);
}

ZinEngineLayerMirInfo *ZinMirPETransposeFusionWithSinglePatchReduction::SetSinglePEPatch(const ZinPELayer **this, ZinPEElementWiseLayer *a2)
{
  uint64_t v4;
  const ZinPELayer *v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  ZinEngineLayerMirInfo *result;
  const ZinPELayer *v14;
  ZinEngineLayerMirInfo *v15;
  uint64_t v16;
  ZinEngineLayerMirInfo *v17;
  const ZinPELayer *v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  ZinEngineLayerMirInfo *v24;
  uint64_t v25;
  ZinEngineLayerMirInfo *v26;

  if (!ZinMirPETransposeFusionWithSinglePatchReduction::IsQualifiedForSinglePEPatch(this, a2))
    ZinAssertImpl("The visited PE reduction is not qualified to set a single patch. This should have been splitted in ZinPEElementWiseLayer:LowerEngineCore().");
  v4 = *((_QWORD *)a2 + 33);
  if (v4)
  {
    v5 = *this;
    v6 = (*(uint64_t (**)(ZinPEElementWiseLayer *, uint64_t))(*(_QWORD *)a2 + 368))(a2, 4);
    v7 = ZinCeilLog2(v6);
    if (!*(_BYTE *)(v4 + 256))
    {
      v8 = v7;
      if (*((_QWORD *)v5 + 122) > (unint64_t)v7)
        v8 = *((_QWORD *)v5 + 122);
      *(_QWORD *)(v4 + 240) = v8;
    }
    v9 = *((_QWORD *)a2 + 33);
    v10 = (*(uint64_t (**)(ZinPEElementWiseLayer *, uint64_t))(*(_QWORD *)a2 + 368))(a2, 3);
    v11 = ZinCeilLog2(v10);
    if (!*(_BYTE *)(v9 + 256))
      *(_QWORD *)(v9 + 248) = v11;
    v12 = *((_QWORD *)a2 + 33);
    *(_BYTE *)(v12 + 256) = 1;
    result = (ZinEngineLayerMirInfo *)(*(uint64_t (**)(ZinPEElementWiseLayer *, uint64_t))(*(_QWORD *)a2 + 368))(a2, 3);
    if (!*(_BYTE *)(v12 + 233))
      *(_QWORD *)(v12 + 200) = result;
    *(_BYTE *)(*((_QWORD *)a2 + 33) + 233) = 1;
  }
  else
  {
    v14 = *this;
    v15 = (ZinEngineLayerMirInfo *)operator new();
    ZinEngineLayerMirInfo::ZinEngineLayerMirInfo(v15, *((int *)v14 + 2));
    v26 = v15;
    *((_QWORD *)v15 + 13) = *(_QWORD *)((*(uint64_t (**)(ZinPEElementWiseLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0)+ 48);
    *((_QWORD *)v26 + 10) = (*(uint64_t (**)(ZinPEElementWiseLayer *, uint64_t))(*(_QWORD *)a2 + 360))(a2, 2);
    v16 = (*(uint64_t (**)(ZinPEElementWiseLayer *, uint64_t))(*(_QWORD *)a2 + 368))(a2, 2);
    v17 = v26;
    *((_QWORD *)v26 + 11) = v16;
    ZinMirL2Config::ZinMirSetFormats((ZinEngineLayerMirInfo *)((char *)v17 + 120), a2);
    v18 = *this;
    v19 = (*(uint64_t (**)(ZinPEElementWiseLayer *, uint64_t))(*(_QWORD *)a2 + 368))(a2, 4);
    v20 = ZinCeilLog2(v19);
    if (!*((_BYTE *)v26 + 256))
    {
      v21 = v20;
      if (*((_QWORD *)v18 + 122) > (unint64_t)v20)
        v21 = *((_QWORD *)v18 + 122);
      *((_QWORD *)v26 + 30) = v21;
    }
    v22 = (*(uint64_t (**)(ZinPEElementWiseLayer *, uint64_t))(*(_QWORD *)a2 + 368))(a2, 3);
    v23 = ZinCeilLog2(v22);
    if (!*((_BYTE *)v26 + 256))
      *((_QWORD *)v26 + 31) = v23;
    v24 = v26;
    *((_BYTE *)v26 + 256) = 1;
    v25 = (*(uint64_t (**)(ZinPEElementWiseLayer *, uint64_t))(*(_QWORD *)a2 + 368))(a2, 3);
    if (!*((_BYTE *)v24 + 233))
      *((_QWORD *)v24 + 25) = v25;
    *((_BYTE *)v26 + 233) = 1;
    ZinANELayer::SetMirInfo((uint64_t)a2, (int **)&v26);
    result = v26;
    v26 = 0;
    if (result)
    {
      ZinEngineLayerMirInfo::~ZinEngineLayerMirInfo(result);
      return (ZinEngineLayerMirInfo *)MEMORY[0x20BD002F8]();
    }
  }
  return result;
}

void sub_206DDAAEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x10B0C40CB92D005);
  _Unwind_Resume(a1);
}

BOOL ZinMirPETransposeFusionWithSinglePatchReduction::IsQualifiedForSinglePEPatch(const ZinPELayer **this, const ZinPELayer *a2)
{
  uint64_t v4;
  const ZinIrHalParameters *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v4 = (*(uint64_t (**)(const ZinPELayer *, uint64_t))(*(_QWORD *)a2 + 368))(a2, 4);
  if (v4 > 1 << ZinMirL2Config::GetMaxPatchShapeWidth(a2, *this, v5))
    return 0;
  v6 = (*(uint64_t (**)(const ZinPELayer *, uint64_t))(*(_QWORD *)a2 + 368))(a2, 3);
  v7 = ZinCeilLog2(v4);
  if (v6 > 1 << ZinMirL2Config::GetMaxPatchShapeHeight((uint64_t)*this, v7))
    return 0;
  v8 = *((_QWORD *)*this + 123);
  return (!v8 || v6 * v4 <= 1 << v8)
      && (*(uint64_t (**)(const ZinPELayer *, uint64_t))(*(_QWORD *)a2 + 368))(a2, 1) == 1;
}

uint64_t ZinMirPETransposeFusionWithSinglePatchReduction::FusePEReductionWithCWOutputTranspose(ZinMirPETransposeFusionWithSinglePatchReduction *this, uint64_t **a2, ZinPELayer *a3)
{
  ZinIrOpLayer *v5;
  int v6;
  uint64_t *v7;
  size_t v8;
  std::string *v9;
  char *v10;
  std::string *v11;
  std::string *v12;
  __int128 v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  const ZinIrOpLayer *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _OWORD *PreOps;
  uint64_t v22;
  uint64_t v23;
  uint64_t IndexOps;
  uint64_t OutputScale;
  uint64_t v26;
  uint64_t OutputBias;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  ZinEngineLayerMirInfo *v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _OWORD v41[2];
  int v42;
  std::string v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  void *__p[2];
  std::string::size_type v47;
  int v48;
  char v49;
  int v50;
  char v51;
  int v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _BYTE v56[24];
  _QWORD v57[3];
  char v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  void *v62[2];
  char v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return 0;
  if (!ZinMirPETransposeFusionWithSinglePatchReduction::IsSinglePatchReductionWithNoOutputTranspose((uint64_t)this, a3))return 0;
  v5 = (ZinIrOpLayer *)**((_QWORD **)a3 + 14);
  v6 = *(_DWORD *)(*((_QWORD *)v5 + 8) + 8);
  if (v6 != 92 && v6 != 81)
    return 0;
  v60 = 0;
  v61 = 0;
  v59 = 0;
  if (!ZinIrOpLayer::IsANELayer(v5))
    goto LABEL_8;
  if (((*(uint64_t (**)(ZinIrOpLayer *, uint64_t *))(*(_QWORD *)v5 + 552))(v5, &v61) & 1) != 0)
  {
    v7 = (uint64_t *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v5 + 40))(v5, 0, 0);
    std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100](&v59, v7);
LABEL_8:
    if (!v61 || !v59)
      ZinAssertImpl("transpose and tensor cannot be nullptr");
    if (*((char *)a3 + 47) >= 0)
      v8 = *((unsigned __int8 *)a3 + 47);
    else
      v8 = *((_QWORD *)a3 + 4);
    v9 = &v43;
    std::string::basic_string[abi:ne180100]((uint64_t)&v43, v8 + 1);
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)v43.__r_.__value_.__r.__words[0];
    if (v8)
    {
      if (*((char *)a3 + 47) >= 0)
        v10 = (char *)a3 + 24;
      else
        v10 = (char *)*((_QWORD *)a3 + 3);
      memmove(v9, v10, v8);
    }
    *(_WORD *)((char *)&v9->__r_.__value_.__l.__data_ + v8) = 95;
    v11 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v62, "fuse_pe_red_cw");
    v12 = std::string::append(v11, "_xfm", 4uLL);
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    *(_QWORD *)&v56[16] = *((_QWORD *)&v12->__r_.__value_.__l + 2);
    *(_OWORD *)v56 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if (v56[23] >= 0)
      v14 = v56;
    else
      v14 = *(const std::string::value_type **)v56;
    if (v56[23] >= 0)
      v15 = v56[23];
    else
      v15 = *(_QWORD *)&v56[8];
    v16 = std::string::append(&v43, v14, v15);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v47 = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    ZinObjectNameFactory::ZinObjectNameFactory(v57, __p);
    if (SHIBYTE(v47) < 0)
      operator delete(__p[0]);
    if ((v56[23] & 0x80000000) != 0)
      operator delete(*(void **)v56);
    if (v63 < 0)
      operator delete(v62[0]);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    __p[0] = 0;
    __p[1] = 0;
    v54 = 0u;
    v55 = 0u;
    v53 = 0u;
    *(_QWORD *)&v55 = v61;
    v47 = *((_QWORD *)a3 + 63);
    v48 = *((_DWORD *)a3 + 128);
    v49 = *((_BYTE *)a3 + 516);
    v50 = *((_DWORD *)a3 + 130);
    v51 = *((_BYTE *)a3 + 524);
    v52 = *((_DWORD *)a3 + 132);
    *(_QWORD *)&v54 = (*(uint64_t (**)(ZinPELayer *))(*(_QWORD *)a3 + 776))(a3);
    v18 = (const ZinIrOpLayer *)operator new();
    v44 = v59;
    v45 = v60;
    if (v60)
    {
      p_shared_owners = (unint64_t *)&v60->__shared_owners_;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
    }
    ZinObjectNameFactory::CreateName((uint64_t)v57, 1u, &v43);
    PreOps = (_OWORD *)ZinPEElementWiseLayer::GetPreOps(a3);
    v22 = ZinPEElementWiseLayer::GetPreOps(a3);
    v23 = *((_QWORD *)a3 + 60);
    IndexOps = ZinPEElementWiseLayer::GetIndexOps(a3);
    OutputScale = ZinPELayer::GetOutputScale(a3);
    v26 = *(_QWORD *)OutputScale;
    v56[8] = *(_BYTE *)(OutputScale + 8);
    *(_QWORD *)v56 = v26;
    OutputBias = ZinPELayer::GetOutputBias(a3);
    v28 = *(_QWORD *)OutputBias;
    v56[20] = *(_BYTE *)(OutputBias + 8);
    *(_QWORD *)&v56[12] = v28;
    ZinPEElementWiseLayer::ZinPEElementWiseLayer((uint64_t)v18, &v44, (__int128 *)&v43, PreOps, (_OWORD *)(v22 + 32), v23, __p, IndexOps, (__int128 *)v56);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    v29 = v45;
    if (v45)
    {
      v30 = (unint64_t *)&v45->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    ZinANELayer::CopyMirInfo(a3, (ZinEngineLayerMirInfo **)&v43);
    ZinANELayer::SetMirInfo((uint64_t)v18, (int **)&v43);
    v32 = (ZinEngineLayerMirInfo *)v43.__r_.__value_.__r.__words[0];
    v43.__r_.__value_.__r.__words[0] = 0;
    if (v32)
    {
      ZinEngineLayerMirInfo::~ZinEngineLayerMirInfo(v32);
      MEMORY[0x20BD002F8]();
    }
    v33 = *((_QWORD *)v18 + 33);
    if (v33)
      ZinMirL2Config::ZinMirSetFormats((ZinMirL2Config *)(v33 + 120), v18);
    v62[0] = v5;
    *(_QWORD *)v56 = v62;
    *(_QWORD *)&v56[8] = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&v43, v56);
    v34 = ZinIrOpLayerGraph::ReplaceNode(a2, a3, v18, (const Layer2TDMapper::SourceLayer *)&v43);
    v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
    if (v43.__r_.__value_.__l.__size_)
    {
      v43.__r_.__value_.__r.__words[2] = v43.__r_.__value_.__l.__size_;
      operator delete((void *)v43.__r_.__value_.__l.__size_);
    }
    memset(v41, 0, sizeof(v41));
    v42 = 1065353216;
    v35 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, (uint64_t **)v5, v18, v41);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v41);
    if ((v34 & v35 & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, v5, 0)) != 0)
      v36 = 0;
    else
      v36 = 3;
    v57[0] = off_24C01FBB0;
    if (v58 < 0)
      operator delete((void *)v57[1]);
    goto LABEL_58;
  }
  v36 = 0;
LABEL_58:
  v38 = v60;
  if (v60)
  {
    v39 = (unint64_t *)&v60->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  return v36;
}

void sub_206DDB118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *__p, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;

  *(_QWORD *)(v43 - 176) = off_24C01FBB0;
  if (*(char *)(v43 - 145) < 0)
    operator delete(*(void **)(v43 - 168));
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v43 - 136);
  _Unwind_Resume(a1);
}

void std::__function::__func<ZinMirPETransposeFusionWithSinglePatchReduction::Execute(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirPETransposeFusionWithSinglePatchReduction::Execute(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinMirPETransposeFusionWithSinglePatchReduction::Execute(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirPETransposeFusionWithSinglePatchReduction::Execute(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C001D40;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinMirPETransposeFusionWithSinglePatchReduction::Execute(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirPETransposeFusionWithSinglePatchReduction::Execute(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C001D40;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinMirPETransposeFusionWithSinglePatchReduction::Execute(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirPETransposeFusionWithSinglePatchReduction::Execute(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t ***a2, ZinIrOpLayer **a3)
{
  uint64_t **v3;
  ZinPELayer *v4;
  const ZinPELayer **v5;
  uint64_t result;
  ZinPELayer *v7;

  v3 = *a2;
  v4 = *a3;
  v5 = *(const ZinPELayer ***)(a1 + 8);
  result = ZinIrOpLayer::IsPELayer(*a3);
  if ((_DWORD)result)
  {
    v7 = v4;
    result = ZinMirPETransposeFusionWithSinglePatchReduction::SinglePatchReduction(v5, v3, &v7);
    if (!(_DWORD)result)
      return ZinMirPETransposeFusionWithSinglePatchReduction::FusePEReductionWithCWOutputTranspose((ZinMirPETransposeFusionWithSinglePatchReduction *)result, v3, v7);
  }
  return result;
}

uint64_t std::__function::__func<ZinMirPETransposeFusionWithSinglePatchReduction::Execute(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirPETransposeFusionWithSinglePatchReduction::Execute(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirPETransposeFusionWithSinglePatchReduction::Execute(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirPETransposeFusionWithSinglePatchReduction::Execute(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

uint64_t ZinShapeDependentTransform::AppendMetaData()
{
  return 0;
}

uint64_t ZinShapeDependentTransform::PopulateDependencyMap()
{
  return 0;
}

void ZinMirViewUnit::ZinMirViewUnit(ZinMirViewUnit *this, ZinMirUnit::CommonUnitInfo *a2)
{
  _QWORD *v2;

  v2 = (_QWORD *)ZinMirUnit::ZinMirUnit((uint64_t)this, 36, (__int128 *)a2);
  *v2 = off_24C0192B8;
  v2[37] = 0;
  v2[38] = 0;
  v2[36] = 0;
}

void ZinMirViewUnit::~ZinMirViewUnit(ZinMirViewUnit *this)
{
  void **v2;

  *(_QWORD *)this = off_24C0192B8;
  v2 = (void **)((char *)this + 288);
  std::vector<std::unique_ptr<ZinRtOperation>>::__destroy_vector::operator()[abi:ne180100](&v2);
  ZinMirUnit::~ZinMirUnit(this);
}

{
  void **v2;

  *(_QWORD *)this = off_24C0192B8;
  v2 = (void **)((char *)this + 288);
  std::vector<std::unique_ptr<ZinRtOperation>>::__destroy_vector::operator()[abi:ne180100](&v2);
  ZinMirUnit::~ZinMirUnit(this);
  MEMORY[0x20BD002F8]();
}

uint64_t ZinMirViewUnit::AddView(int64x2_t *a1, uint64_t *a2)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  int64x2_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i64;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  int64x2_t v22;
  char *v23;
  uint64_t v25;
  int64x2_t v26;
  char *v27;
  int64x2_t *v28;

  v5 = (_QWORD *)a1[18].i64[1];
  v4 = a1[19].u64[0];
  if ((unint64_t)v5 >= v4)
  {
    v8 = a1 + 18;
    v9 = a1[18].i64[0];
    v10 = ((uint64_t)v5 - v9) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    i64 = (uint64_t)a1[19].i64;
    v12 = v4 - v9;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v10 + 1))
      v13 = v10 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v28 = a1 + 19;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(i64, v14);
    else
      v15 = 0;
    v16 = &v15[8 * v10];
    v17 = &v15[8 * v14];
    v27 = v17;
    v18 = *a2;
    *a2 = 0;
    *(_QWORD *)v16 = v18;
    v7 = v16 + 8;
    v26.i64[1] = (uint64_t)(v16 + 8);
    v20 = (_QWORD *)a1[18].i64[0];
    v19 = (_QWORD *)a1[18].i64[1];
    if (v19 == v20)
    {
      v22 = vdupq_n_s64((unint64_t)v19);
    }
    else
    {
      do
      {
        v21 = *--v19;
        *v19 = 0;
        *((_QWORD *)v16 - 1) = v21;
        v16 -= 8;
      }
      while (v19 != v20);
      v22 = *v8;
      v7 = (_QWORD *)v26.i64[1];
      v17 = v27;
    }
    a1[18].i64[0] = (uint64_t)v16;
    a1[18].i64[1] = (uint64_t)v7;
    v26 = v22;
    v23 = (char *)a1[19].i64[0];
    a1[19].i64[0] = (uint64_t)v17;
    v27 = v23;
    v25 = v22.i64[0];
    std::__split_buffer<std::unique_ptr<ZinIrUnit>>::~__split_buffer((uint64_t)&v25);
  }
  else
  {
    v6 = *a2;
    *a2 = 0;
    *v5 = v6;
    v7 = v5 + 1;
  }
  a1[18].i64[1] = (uint64_t)v7;
  return 0;
}

uint64_t ZinMirViewUnit::DynamicShapeOutputTensorDimensions(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t result;

  v3 = *(uint64_t **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 40)
    return 3;
  if (a1[12])
    ZinAssertImpl("Texture should not exist on MIR View");
  v4 = *v3;
  v5 = v3[1];
  v6 = v3[2];
  v7 = v3[3];
  v8 = v3[4];
  v9 = a1[36];
  v10 = a1[37];
  if (v9 != v10)
  {
    v11 = v8;
    v12 = v4;
    v13 = v5;
    v14 = v6;
    v15 = v7;
    while (2)
    {
      v16 = *(_DWORD **)v9;
      switch(*(_DWORD *)(*(_QWORD *)v9 + 92))
      {
        case 0:
          v17 = v16[20];
          if (v17 < 0)
            return 3;
          v12 = (int)v16[21];
          if (v4 <= v17 + ((int)v12 - 1) * v16[22])
            return 3;
          goto LABEL_20;
        case 1:
          v18 = v16[20];
          if (v18 < 0)
            return 3;
          v11 = (int)v16[21];
          if (v8 <= v18 + ((int)v11 - 1) * v16[22])
            return 3;
          goto LABEL_20;
        case 2:
          v19 = v16[20];
          if (v19 < 0)
            return 3;
          v13 = (int)v16[21];
          if (v5 <= v19 + ((int)v13 - 1) * v16[22])
            return 3;
          goto LABEL_20;
        case 3:
          v20 = v16[20];
          if (v20 < 0)
            return 3;
          v14 = (int)v16[21];
          if (v6 <= v20 + ((int)v14 - 1) * v16[22])
            return 3;
          goto LABEL_20;
        case 4:
          v21 = v16[20];
          if ((v21 & 0x80000000) == 0)
          {
            v15 = (int)v16[21];
            if (v7 > v21 + ((int)v15 - 1) * v16[22])
              goto LABEL_20;
          }
          return 3;
        case 5:
          ZinAssertImpl("Invalid MIR view unit", v13, a3, v12);
        default:
LABEL_20:
          v9 += 8;
          if (v9 == v10)
            goto LABEL_24;
          continue;
      }
    }
  }
  v15 = v7;
  v14 = v6;
  v13 = v5;
  v12 = v4;
  v11 = v8;
LABEL_24:
  result = 0;
  *a3 = v12;
  a3[1] = v13;
  a3[2] = v14;
  a3[3] = v15;
  a3[4] = v11;
  return result;
}

uint64_t ZinMirViewUnit::CreateLayer(ZinDynamicOffsetCustomBarCmd *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t DynamicOffsetInfo;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;
  std::__shared_weak_count *v29;
  _QWORD v30[10];
  uint64_t v31;

  if (!*(_QWORD *)(a2 + 8))
    ZinAssertImpl("Invalid params when creating layer");
  if (*((_QWORD *)a1 + 13))
    ZinAssertImpl("View layer should not have MIR info");
  v4 = (uint64_t *)*((_QWORD *)a1 + 36);
  v5 = (uint64_t *)*((_QWORD *)a1 + 37);
  if (v4 == v5)
  {
    v10 = 0;
    v9 = 0;
    v8 = 0;
    v7 = 0;
    v6 = 0;
    v15 = 1;
    v14 = 1;
    v13 = 1;
    v12 = 1;
    v11 = 1;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 1;
    v12 = 1;
    v13 = 1;
    v14 = 1;
    v15 = 1;
    do
    {
      v16 = *v4;
      switch(*(_DWORD *)(*v4 + 92))
      {
        case 0:
          v8 = *(int *)(v16 + 80);
          v11 = *(int *)(v16 + 88);
          break;
        case 1:
          v6 = *(int *)(v16 + 80);
          v15 = *(int *)(v16 + 88);
          break;
        case 2:
          v9 = *(int *)(v16 + 80);
          v12 = *(int *)(v16 + 88);
          break;
        case 3:
          v10 = *(int *)(v16 + 80);
          v13 = *(int *)(v16 + 88);
          break;
        case 4:
          v7 = *(int *)(v16 + 80);
          v14 = *(int *)(v16 + 88);
          break;
        case 5:
          ZinAssertImpl("Invalid MIR view unit");
        default:
          break;
      }
      ++v4;
    }
    while (v4 != v5);
  }
  v30[0] = v8;
  v30[1] = v9;
  v30[2] = v10;
  v30[3] = v7;
  v30[4] = v6;
  v30[5] = v11;
  v30[6] = v12;
  v30[7] = v13;
  v30[8] = v14;
  v30[9] = v15;
  v17 = operator new();
  ZinIrViewInfo::ZinIrViewInfo(v17, (uint64_t)v30);
  v31 = v17;
  v18 = operator new();
  v19 = *(std::__shared_weak_count **)(a2 + 16);
  v28 = *(_QWORD *)(a2 + 8);
  v29 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  DynamicOffsetInfo = ZinDynamicOffsetCustomBarCmd::GetDynamicOffsetInfo(a1);
  ZinViewLayer::ZinViewLayer(v18, &v31, &v28, DynamicOffsetInfo);
  v23 = v29;
  if (v29)
  {
    v24 = (unint64_t *)&v29->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v31;
  v31 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  return v18;
}

void sub_206DDB908(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 40) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL ZinMirViewUnit::IsValid(ZinMirViewUnit *this, ZinMirUnitValidationContext *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)*((_QWORD *)this + 36);
  v2 = (uint64_t *)*((_QWORD *)this + 37);
  if (v2 != v3)
  {
    while (1)
    {
      v4 = *v3;
      if (*(_DWORD *)(*v3 + 92) == 5 || (*(_DWORD *)(v4 + 80) & 0x80000000) != 0 || *(int *)(v4 + 84) <= 0)
        break;
      if (++v3 == v2)
      {
        if (*((_QWORD *)this + 13))
          return 0;
        return ZinMirUnit::IsValid(this, a2);
      }
    }
  }
  return 0;
}

_QWORD *SpatialSplitModeToString@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, off_24C05FCC0[a1]);
}

uint64_t CFStringRefToSpatialSplitMode(__CFString *a1)
{
  CFIndex Length;
  CFIndex v3;
  CFIndex v4;
  CFIndex v5;
  CFIndex v6;
  CFIndex v7;
  CFStringRef v9;
  __CFString *v10;
  CFRange v11;
  CFRange v12;
  CFRange v13;
  CFRange v14;
  CFRange v15;
  CFRange v16;

  v10 = a1;
  Length = CFStringGetLength(a1);
  if (Length == CFStringGetLength(CFSTR("Memory")))
  {
    v11.length = CFStringGetLength(a1);
    v11.location = 0;
    if (CFStringCompareWithOptions(a1, CFSTR("Memory"), v11, 1uLL) == kCFCompareEqualTo)
      return 2;
  }
  v3 = CFStringGetLength(a1);
  if (v3 == CFStringGetLength(CFSTR("Auto")))
  {
    v12.length = CFStringGetLength(a1);
    v12.location = 0;
    if (CFStringCompareWithOptions(a1, CFSTR("Auto"), v12, 1uLL) == kCFCompareEqualTo)
      return 3;
  }
  v4 = CFStringGetLength(a1);
  if (v4 == CFStringGetLength(CFSTR("Manual")))
  {
    v13.length = CFStringGetLength(a1);
    v13.location = 0;
    if (CFStringCompareWithOptions(a1, CFSTR("Manual"), v13, 1uLL) == kCFCompareEqualTo)
      return 4;
  }
  v5 = CFStringGetLength(a1);
  if (v5 == CFStringGetLength(CFSTR("GenericDAG")))
  {
    v14.length = CFStringGetLength(a1);
    v14.location = 0;
    if (CFStringCompareWithOptions(a1, CFSTR("GenericDAG"), v14, 1uLL) == kCFCompareEqualTo)
      return 5;
  }
  v6 = CFStringGetLength(a1);
  if (v6 == CFStringGetLength(CFSTR("GenericDAGExperimental")))
  {
    v15.length = CFStringGetLength(a1);
    v15.location = 0;
    if (CFStringCompareWithOptions(a1, CFSTR("GenericDAGExperimental"), v15, 1uLL) == kCFCompareEqualTo)
      return 6;
  }
  v7 = CFStringGetLength(a1);
  if (v7 == CFStringGetLength(CFSTR("GenericDAGMemory")))
  {
    v16.length = CFStringGetLength(a1);
    v16.location = 0;
    if (CFStringCompareWithOptions(a1, CFSTR("GenericDAGMemory"), v16, 1uLL) == kCFCompareEqualTo)
      return 7;
  }
  v9 = CFSTR("Test");
  return ZinCompareCFStringRef((CFStringRef *)&v10, &v9);
}

BOOL ZinCompareCFStringRef(CFStringRef *a1, CFStringRef *a2)
{
  CFIndex Length;
  const __CFString *v5;
  const __CFString *v6;
  CFRange v8;

  Length = CFStringGetLength(*a1);
  if (Length != CFStringGetLength(*a2))
    return 0;
  v5 = *a1;
  v6 = *a2;
  v8.length = CFStringGetLength(v5);
  v8.location = 0;
  return CFStringCompareWithOptions(v5, v6, v8, 1uLL) == kCFCompareEqualTo;
}

uint64_t StringToSpatialSplitMode(uint64_t a1)
{
  std::string::size_type v2;
  std::string::size_type size;
  std::string *v4;
  const char *v5;
  std::string *v6;
  std::string *v7;
  _BOOL4 v8;
  char v9;
  char v10;
  std::string::size_type v11;
  std::string *v12;
  uint64_t v13;
  std::string *v14;
  std::string *v15;
  void *__p[2];
  char v18;
  std::string v19;
  std::string v20;
  char v21;

  v2 = std::string::find((const std::string *)a1, 58, 0);
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v20 = *(std::string *)a1;
  if (v2 == -1)
  {
    std::string::operator=(&v20, (const std::string *)a1);
  }
  else
  {
    std::string::basic_string(&v19, (const std::string *)a1, 0, v2, (std::allocator<char> *)&v21);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    v20 = v19;
  }
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
  else
    size = v20.__r_.__value_.__l.__size_;
  switch(size)
  {
    case 4uLL:
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v4 = &v20;
      else
        v4 = (std::string *)v20.__r_.__value_.__r.__words[0];
      if (!memcmp(v4, "test", size))
        goto LABEL_34;
      v5 = "auto";
      goto LABEL_23;
    case 6uLL:
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v4 = &v20;
      else
        v4 = (std::string *)v20.__r_.__value_.__r.__words[0];
      if (!memcmp(v4, "memory", size))
        goto LABEL_34;
      v5 = "manual";
LABEL_23:
      v6 = v4;
LABEL_32:
      if (!memcmp(v6, v5, size))
        goto LABEL_34;
LABEL_33:
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v20.__r_.__value_.__l.__data_, "generic-dag-exp"))
      {
LABEL_34:
        v8 = 1;
      }
      else
      {
        v8 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v20.__r_.__value_.__l.__data_, "generic-dag-memory");
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Error: Invalid option to fspatial-split. Supported values are \"disabled\", \"test\", \"memory\", \"auto\", \"manual\", \"generic-dag\", \"generic-dag-exp\", \"generic-dag-memory\"");
      v9 = assertWithMessage(v8, (uint64_t *)__p);
      v10 = v9;
      if (v18 < 0)
      {
        operator delete(__p[0]);
        if ((v10 & 1) != 0)
        {
LABEL_49:
          v13 = 0;
          goto LABEL_71;
        }
      }
      else if ((v9 & 1) != 0)
      {
        goto LABEL_49;
      }
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = HIBYTE(v20.__r_.__value_.__r.__words[2]);
      else
        v11 = v20.__r_.__value_.__l.__size_;
      switch(v11)
      {
        case 4uLL:
          if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v14 = &v20;
          else
            v14 = (std::string *)v20.__r_.__value_.__r.__words[0];
          if (!memcmp(v14, "test", 4uLL))
          {
            v13 = 1;
            goto LABEL_71;
          }
          if (!memcmp(v14, "auto", 4uLL))
          {
            v13 = 3;
            goto LABEL_71;
          }
          break;
        case 6uLL:
          if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v15 = &v20;
          else
            v15 = (std::string *)v20.__r_.__value_.__r.__words[0];
          if (!memcmp(v15, "memory", 6uLL))
          {
            v13 = 2;
            goto LABEL_71;
          }
          if (!memcmp(v15, "manual", 6uLL))
          {
            v13 = 4;
            goto LABEL_71;
          }
          break;
        case 8uLL:
          v12 = &v20;
          if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v12 = (std::string *)v20.__r_.__value_.__r.__words[0];
          if (v12->__r_.__value_.__r.__words[0] == 0x64656C6261736964)
            goto LABEL_49;
          break;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v20.__r_.__value_.__l.__data_, "generic-dag"))
      {
        v13 = 5;
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v20.__r_.__value_.__l.__data_, "generic-dag-exp"))
      {
        v13 = 6;
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v20.__r_.__value_.__l.__data_, "generic-dag-memory"))
      {
        v13 = 7;
      }
      else
      {
        v13 = 0;
      }
LABEL_71:
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      return v13;
    case 8uLL:
      v7 = &v20;
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v7 = (std::string *)v20.__r_.__value_.__r.__words[0];
      if (v7->__r_.__value_.__r.__words[0] == 0x64656C6261736964)
        goto LABEL_34;
      goto LABEL_33;
    case 0xBuLL:
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v6 = &v20;
      else
        v6 = (std::string *)v20.__r_.__value_.__r.__words[0];
      v5 = "generic-dag";
      goto LABEL_32;
    default:
      goto LABEL_33;
  }
}

void sub_206DDBFF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t assertWithMessage(int a1, uint64_t *a2)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if ((a1 & 1) == 0 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    if (*((char *)a2 + 23) < 0)
      a2 = (uint64_t *)*a2;
    v5 = 136315138;
    v6 = a2;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "\n\n\t %s \n\n", (uint8_t *)&v5, 0xCu);
  }
  return a1 ^ 1u;
}

void ZinIrCompilerParameters::SubGraphSpec::~SubGraphSpec(ZinIrCompilerParameters::SubGraphSpec *this)
{
  void *v2;
  void **v3;

  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void ZinIrCompilerParameters::ProcedureSpecific::GetSpecializedProcedures(_QWORD *a1, uint64_t **a2)
{
  uint64_t **v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  std::string __p;
  uint64_t **v27;
  uint64_t **v28;

  v4 = a2 + 1;
  v5 = (_QWORD *)a1[6];
  v6 = a1 + 7;
  v27 = a2;
  v28 = a2 + 1;
  if (v5 != a1 + 7)
  {
    do
    {
      if (*((char *)v5 + 55) < 0)
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v5[4], v5[5]);
      else
        __p = *(std::string *)(v5 + 4);
      std::insert_iterator<std::set<std::string>>::operator=[abi:ne180100]((uint64_t)&v27, (void **)&__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v7 = (_QWORD *)v5[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v5[2];
          v9 = *v8 == (_QWORD)v5;
          v5 = v8;
        }
        while (!v9);
      }
      v5 = v8;
    }
    while (v8 != v6);
  }
  v10 = (_QWORD *)*a1;
  v27 = a2;
  v28 = v4;
  if (v10 != a1 + 1)
  {
    do
    {
      if (*((char *)v10 + 55) < 0)
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v10[4], v10[5]);
      else
        __p = *(std::string *)(v10 + 4);
      std::insert_iterator<std::set<std::string>>::operator=[abi:ne180100]((uint64_t)&v27, (void **)&__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v11 = (_QWORD *)v10[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v10[2];
          v9 = *v12 == (_QWORD)v10;
          v10 = v12;
        }
        while (!v9);
      }
      v10 = v12;
    }
    while (v12 != a1 + 1);
  }
  v13 = (_QWORD *)a1[9];
  v27 = a2;
  v28 = v4;
  if (v13 != a1 + 10)
  {
    do
    {
      if (*((char *)v13 + 55) < 0)
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v13[4], v13[5]);
      else
        __p = *(std::string *)(v13 + 4);
      std::insert_iterator<std::set<std::string>>::operator=[abi:ne180100]((uint64_t)&v27, (void **)&__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v14 = (_QWORD *)v13[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v13[2];
          v9 = *v15 == (_QWORD)v13;
          v13 = v15;
        }
        while (!v9);
      }
      v13 = v15;
    }
    while (v15 != a1 + 10);
  }
  v16 = (_QWORD *)a1[12];
  v27 = a2;
  v28 = v4;
  if (v16 != a1 + 13)
  {
    do
    {
      if (*((char *)v16 + 55) < 0)
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v16[4], v16[5]);
      else
        __p = *(std::string *)(v16 + 4);
      std::insert_iterator<std::set<std::string>>::operator=[abi:ne180100]((uint64_t)&v27, (void **)&__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v17 = (_QWORD *)v16[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v16[2];
          v9 = *v18 == (_QWORD)v16;
          v16 = v18;
        }
        while (!v9);
      }
      v16 = v18;
    }
    while (v18 != a1 + 13);
  }
  v19 = (_QWORD *)a1[15];
  v27 = a2;
  v28 = v4;
  if (v19 != a1 + 16)
  {
    do
    {
      if (*((char *)v19 + 55) < 0)
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v19[4], v19[5]);
      else
        __p = *(std::string *)(v19 + 4);
      std::insert_iterator<std::set<std::string>>::operator=[abi:ne180100]((uint64_t)&v27, (void **)&__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v20 = (_QWORD *)v19[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v19[2];
          v9 = *v21 == (_QWORD)v19;
          v19 = v21;
        }
        while (!v9);
      }
      v19 = v21;
    }
    while (v21 != a1 + 16);
  }
  v22 = (_QWORD *)a1[18];
  v23 = a1 + 19;
  v27 = a2;
  v28 = v4;
  if (v22 != v23)
  {
    do
    {
      if (*((char *)v22 + 55) < 0)
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v22[4], v22[5]);
      else
        __p = *(std::string *)(v22 + 4);
      std::insert_iterator<std::set<std::string>>::operator=[abi:ne180100]((uint64_t)&v27, (void **)&__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v24 = (_QWORD *)v22[1];
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = (_QWORD *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (_QWORD *)v22[2];
          v9 = *v25 == (_QWORD)v22;
          v22 = v25;
        }
        while (!v9);
      }
      v22 = v25;
    }
    while (v25 != v23);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, &byte_207AF6795);
  std::__tree<std::string>::__erase_unique<std::string>(a2, (void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_206DDC4FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrCompilerParameters::setCompileForDebugging(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 100) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setGenerateStaticPerfAnalytics(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 101) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setGenerateAnalyticsBuffer(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 102) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setNeFrequency(ZinIrCompilerParameters *this, double a2)
{
  double v3;
  uint64_t result;

  v3 = *((double *)this + 13);
  if (v3 == a2)
    return 0;
  if (v3 != -1.0 || !ZinIrCompilerParameters::isValidNeFreq(this, a2))
    return 6;
  result = 0;
  *((double *)this + 13) = a2;
  return result;
}

BOOL ZinIrCompilerParameters::isValidNeFreq(ZinIrCompilerParameters *this, double a2)
{
  double *v3;
  double *v4;
  double *v5;
  double *v7;
  double *v8;
  uint8_t buf[4];
  double v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  getValidFrequencies((uint64_t)this + 72, (uint64_t)&v7);
  v3 = v7;
  v4 = v8;
  v5 = v7;
  if (v7 != v8)
  {
    while (*v5 != a2)
    {
      if (++v5 == v8)
      {
        v5 = v8;
        break;
      }
    }
  }
  if (v5 == v8 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    v10 = a2;
    _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Compiler param has wrong value. %fu\n", buf, 0xCu);
    v3 = v7;
    if (!v7)
      return v5 != v4;
    goto LABEL_8;
  }
  if (v3)
  {
LABEL_8:
    v8 = v3;
    operator delete(v3);
  }
  return v5 != v4;
}

uint64_t ZinIrCompilerParameters::setPstateDCSLevel(ZinIrCompilerParameters *this, uint64_t a2)
{
  int v2;
  uint64_t result;
  int v4;

  v2 = *((_DWORD *)this + 28);
  if (v2 == (_DWORD)a2)
    return 0;
  if (v2 != -1)
    return 6;
  v4 = a2;
  if (!ZinIrCompilerParameters::isValidPstateDCSLevel((const void **)this, a2))
    return 6;
  result = 0;
  *((_DWORD *)this + 28) = v4;
  return result;
}

uint64_t ZinIrCompilerParameters::isValidPstateDCSLevel(const void **this, uint64_t a2)
{
  unint64_t PstateDCSLevels;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  PstateDCSLevels = getPstateDCSLevels(this + 9);
  v4 = (int)PstateDCSLevels > (int)a2 || SHIDWORD(PstateDCSLevels) < (int)a2;
  v5 = !v4;
  if (v4 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    ZinIrCompilerParameters::isValidPstateDCSLevel(a2, v6, v7, v8, v9, v10, v11, v12);
  return v5;
}

uint64_t ZinIrCompilerParameters::setPstateSOCLevel(ZinIrCompilerParameters *this, uint64_t a2)
{
  int v2;
  uint64_t result;
  int v4;

  v2 = *((_DWORD *)this + 29);
  if (v2 == (_DWORD)a2)
    return 0;
  if (v2 != -1)
    return 6;
  v4 = a2;
  if (!ZinIrCompilerParameters::isValidPstateSOCLevel((const void **)this, a2))
    return 6;
  result = 0;
  *((_DWORD *)this + 29) = v4;
  return result;
}

uint64_t ZinIrCompilerParameters::isValidPstateSOCLevel(const void **this, uint64_t a2)
{
  unint64_t PstateSOCLevels;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  PstateSOCLevels = getPstateSOCLevels(this + 9);
  v4 = (int)PstateSOCLevels > (int)a2 || SHIDWORD(PstateSOCLevels) < (int)a2;
  v5 = !v4;
  if (v4 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    ZinIrCompilerParameters::isValidPstateDCSLevel(a2, v6, v7, v8, v9, v10, v11, v12);
  return v5;
}

uint64_t ZinIrCompilerParameters::setDumpFusionBoundaryInfo(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 121) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setAbortOnLayerTrackerError(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 120) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setCustomConfigforN1(uint64_t a1, const void **a2)
{
  uint64_t v4;
  double v5;
  BOOL v6;
  unint64_t PstateSOCLevels;
  int v8;
  uint64_t result;
  int v10;
  int v11;
  int v12;
  void *__p[3];

  *(_BYTE *)(a1 + 728) = 1;
  if (*(float *)(a1 + 732) < 0.0)
    *(_DWORD *)(a1 + 732) = 1148846080;
  if (*(float *)(a1 + 388) < 0.0)
    *(_DWORD *)(a1 + 388) = 1148846080;
  getValidFrequencies((uint64_t)a2, (uint64_t)__p);
  v4 = *(_QWORD *)__p[0];
  v5 = *(double *)(a1 + 104);
  v6 = v5 != *(double *)__p[0] && v5 == -1.0;
  if (v6 && ZinIrCompilerParameters::isValidNeFreq((ZinIrCompilerParameters *)a1, *(double *)__p[0]))
    *(_QWORD *)(a1 + 104) = v4;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  PstateSOCLevels = getPstateSOCLevels(a2);
  if (*(_DWORD *)(a1 + 116) == -1)
  {
    v8 = (HIDWORD(PstateSOCLevels) - (int)PstateSOCLevels) >> 1;
    if (v8 != -1)
    {
      if (ZinIrCompilerParameters::isValidPstateSOCLevel((const void **)a1, ((HIDWORD(PstateSOCLevels) - (int)PstateSOCLevels) >> 1)))*(_DWORD *)(a1 + 116) = v8;
    }
  }
  result = getPstateDCSLevels(a2);
  v10 = HIDWORD(result) + result;
  if (HIDWORD(result) + (int)result < 0 != __OFADD__(HIDWORD(result), (_DWORD)result))
    v11 = v10 + 1;
  else
    v11 = HIDWORD(result) + result;
  if (*(_DWORD *)(a1 + 112) == -1 && (v10 + 1) <= 0xFFFFFFFD)
  {
    v12 = v11 >> 1;
    result = ZinIrCompilerParameters::isValidPstateDCSLevel((const void **)a1, (v11 >> 1));
    if ((_DWORD)result)
      *(_DWORD *)(a1 + 112) = v12;
  }
  *(_BYTE *)(a1 + 472) = 1;
  *(_DWORD *)(a1 + 380) = -1;
  *(_BYTE *)(a1 + 378) = 0;
  return result;
}

void sub_206DDC98C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrCompilerParameters::setMaxTDLatency(ZinIrCompilerParameters *this, float a2)
{
  if (*((float *)this + 97) < 0.0)
    *((float *)this + 97) = a2;
  return 0;
}

char *getValidFrequencies@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  _WORD *v6;
  char *result;
  _BYTE *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v4 = *(char *)(a1 + 23);
  if (v4 >= 0)
    v5 = *(unsigned __int8 *)(a1 + 23);
  else
    v5 = *(_QWORD *)(a1 + 8);
  if (v5 != 3)
  {
    if (v5 != 2)
      goto LABEL_22;
    if (v4 >= 0)
      v6 = (_WORD *)a1;
    else
      v6 = *(_WORD **)a1;
    if (*v6 != 14701)
    {
      if (!memcmp(v6, "t0", 2uLL))
      {
        *(_QWORD *)&v10 = 0x4089000000000000;
        return std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)a2, (char *)&v10, (uint64_t)&v10 + 8, 1uLL);
      }
      if (*v6 == 12660)
      {
LABEL_12:
        v12 = xmmword_207A9EB88;
        v13 = unk_207A9EB98;
        v14 = xmmword_207A9EBA8;
        v10 = xmmword_207A9EB68;
        v11 = unk_207A9EB78;
        return std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)a2, (char *)&v10, (uint64_t)&v15, 0xAuLL);
      }
      goto LABEL_22;
    }
LABEL_25:
    *(_QWORD *)&v10 = 0x4079000000000000;
    return std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)a2, (char *)&v10, (uint64_t)&v10 + 8, 1uLL);
  }
  if (v4 >= 0)
    v8 = (_BYTE *)a1;
  else
    v8 = *(_BYTE **)a1;
  if (!memcmp(v8, "m10", 3uLL))
    goto LABEL_25;
  if (!memcmp(v8, "h11", 3uLL))
  {
    v10 = xmmword_207A9EAF8;
    v11 = unk_207A9EB08;
    v12 = xmmword_207A9EB18;
    return std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)a2, (char *)&v10, (uint64_t)&v13, 6uLL);
  }
  if (*(_WORD *)v8 == 12648 && v8[2] == 50)
  {
    v10 = xmmword_207A9EB28;
    v11 = unk_207A9EB38;
    v12 = xmmword_207A9EB48;
    v13 = unk_207A9EB58;
    return std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)a2, (char *)&v10, (uint64_t)&v14, 8uLL);
  }
LABEL_22:
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "h13"))
    goto LABEL_12;
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "h13g"))
  {
    v12 = xmmword_207A9EBD8;
    v13 = unk_207A9EBE8;
    v14 = xmmword_207A9EBF8;
    v15 = unk_207A9EC08;
    v10 = xmmword_207A9EBB8;
    v11 = unk_207A9EBC8;
    return std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)a2, (char *)&v10, (uint64_t)&v16, 0xCuLL);
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "h14"))
  {
    v12 = xmmword_207A9EC38;
    v13 = unk_207A9EC48;
    *(_QWORD *)&v14 = 0x409E480000000000;
    v10 = xmmword_207A9EC18;
    v11 = unk_207A9EC28;
    return std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)a2, (char *)&v10, (uint64_t)&v14 + 8, 9uLL);
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "h14g"))
    goto LABEL_32;
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "h14c"))
  {
    v10 = xmmword_207A9EC60;
    v11 = unk_207A9EC70;
    v12 = xmmword_207A9EC80;
    *(_QWORD *)&v13 = 0x40A0680000000000;
    return std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)a2, (char *)&v10, (uint64_t)&v13 + 8, 7uLL);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "h15"))
  {
    v16 = xmmword_207A9ECF8;
    v17 = unk_207A9ED08;
    v18 = xmmword_207A9ED18;
    v19 = unk_207A9ED28;
    v12 = xmmword_207A9ECB8;
    v13 = unk_207A9ECC8;
    v14 = xmmword_207A9ECD8;
    v15 = unk_207A9ECE8;
    v10 = xmmword_207A9EC98;
    v11 = unk_207A9ECA8;
    return std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)a2, (char *)&v10, (uint64_t)&v20, 0x14uLL);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "h15g"))
  {
    v18 = xmmword_207A9EDB8;
    v19 = unk_207A9EDC8;
    *(_QWORD *)&v20 = 0x40A20C0000000000;
    v14 = xmmword_207A9ED78;
    v15 = unk_207A9ED88;
    v16 = xmmword_207A9ED98;
    v17 = unk_207A9EDA8;
    v10 = xmmword_207A9ED38;
    v11 = unk_207A9ED48;
    v12 = xmmword_207A9ED58;
    v13 = unk_207A9ED68;
    return std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)a2, (char *)&v10, (uint64_t)&v20 + 8, 0x15uLL);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "h15c"))
  {
    v10 = xmmword_207A9EDE0;
    v11 = unk_207A9EDF0;
    v12 = xmmword_207A9EE00;
    *(_QWORD *)&v13 = 0x40A2780000000000;
    return std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)a2, (char *)&v10, (uint64_t)&v13 + 8, 7uLL);
  }
  else
  {
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "h14g.n301"))
    {
LABEL_32:
      v18 = xmmword_207A9EE98;
      v19 = unk_207A9EEA8;
      *(_QWORD *)&v20 = 0x40A0680000000000;
      v14 = xmmword_207A9EE58;
      v15 = unk_207A9EE68;
      v16 = xmmword_207A9EE78;
      v17 = unk_207A9EE88;
      v10 = xmmword_207A9EE18;
      v11 = unk_207A9EE28;
      v12 = xmmword_207A9EE38;
      v13 = unk_207A9EE48;
      return std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)a2, (char *)&v10, (uint64_t)&v20 + 8, 0x15uLL);
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "m11"))
    {
      *(_QWORD *)&v10 = 0x407F400000000000;
      return std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)a2, (char *)&v10, (uint64_t)&v10 + 8, 1uLL);
    }
    else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "h16"))
    {
      v22 = xmmword_207A9EF80;
      v23 = unk_207A9EF90;
      *(_QWORD *)&v24 = 0x40A0E00000000000;
      v18 = xmmword_207A9EF40;
      v19 = unk_207A9EF50;
      v20 = xmmword_207A9EF60;
      v21 = unk_207A9EF70;
      v14 = xmmword_207A9EF00;
      v15 = unk_207A9EF10;
      v16 = xmmword_207A9EF20;
      v17 = unk_207A9EF30;
      v10 = xmmword_207A9EEC0;
      v11 = unk_207A9EED0;
      v12 = xmmword_207A9EEE0;
      v13 = unk_207A9EEF0;
      return std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)a2, (char *)&v10, (uint64_t)&v24 + 8, 0x1DuLL);
    }
    else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "h16g"))
    {
      v20 = xmmword_207A9F048;
      v21 = unk_207A9F058;
      v22 = xmmword_207A9F068;
      *(_QWORD *)&v23 = 0x40A2780000000000;
      v16 = xmmword_207A9F008;
      v17 = unk_207A9F018;
      v18 = xmmword_207A9F028;
      v19 = unk_207A9F038;
      v12 = xmmword_207A9EFC8;
      v13 = unk_207A9EFD8;
      v14 = xmmword_207A9EFE8;
      v15 = unk_207A9EFF8;
      v10 = xmmword_207A9EFA8;
      v11 = unk_207A9EFB8;
      return std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)a2, (char *)&v10, (uint64_t)&v23 + 8, 0x1BuLL);
    }
    else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "h16s"))
    {
      v20 = xmmword_207A9F120;
      v21 = unk_207A9F130;
      *(_QWORD *)&v22 = 0x40A2780000000000;
      v16 = xmmword_207A9F0E0;
      v17 = unk_207A9F0F0;
      v18 = xmmword_207A9F100;
      v19 = unk_207A9F110;
      v12 = xmmword_207A9F0A0;
      v13 = unk_207A9F0B0;
      v14 = xmmword_207A9F0C0;
      v15 = unk_207A9F0D0;
      v10 = xmmword_207A9F080;
      v11 = unk_207A9F090;
      return std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)a2, (char *)&v10, (uint64_t)&v22 + 8, 0x19uLL);
    }
    else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "h17")
           || (result = (char *)std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "h17a"), (_DWORD)result))
    {
      v22 = xmmword_207A9F208;
      v23 = unk_207A9F218;
      v24 = xmmword_207A9F228;
      v18 = xmmword_207A9F1C8;
      v19 = unk_207A9F1D8;
      v20 = xmmword_207A9F1E8;
      v21 = unk_207A9F1F8;
      v14 = xmmword_207A9F188;
      v15 = unk_207A9F198;
      v16 = xmmword_207A9F1A8;
      v17 = unk_207A9F1B8;
      v10 = xmmword_207A9F148;
      v11 = unk_207A9F158;
      v12 = xmmword_207A9F168;
      v13 = unk_207A9F178;
      return std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)a2, (char *)&v10, (uint64_t)v25, 0x1EuLL);
    }
  }
  return result;
}

void sub_206DDD1AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t getPstateSOCLevels(const void **a1)
{
  const void **v1;
  int v2;
  const void *v3;
  _BYTE *v4;
  uint64_t v6;
  unint64_t v7;
  _BOOL4 v9;

  v1 = a1;
  v2 = *((char *)a1 + 23);
  if (v2 >= 0)
    v3 = (const void *)*((unsigned __int8 *)a1 + 23);
  else
    v3 = a1[1];
  if (v3 == (const void *)3)
  {
    if (v2 >= 0)
      v4 = a1;
    else
      v4 = *a1;
    if (memcmp(v4, "m10", 3uLL))
    {
      if (!memcmp(v4, "h11", 3uLL))
        goto LABEL_33;
      if (*(_WORD *)v4 == 12648 && v4[2] == 50)
        goto LABEL_33;
      goto LABEL_21;
    }
LABEL_34:
    v6 = 0;
    v7 = 0;
    return v7 | v6;
  }
  if (v3 != (const void *)2)
    goto LABEL_21;
  if (v2 < 0)
    a1 = (const void **)*a1;
  if (*(_WORD *)a1 == 14701 || *(_WORD *)a1 == 12404)
    goto LABEL_34;
  if (!memcmp(a1, "t1", 2uLL))
  {
LABEL_33:
    v6 = 0;
    v7 = 0x200000000;
    return v7 | v6;
  }
LABEL_21:
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "h13")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "h13g")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "h14")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "h14g")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "h14c")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "h15")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "h15g")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "h15c")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "h14g.n301")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "m11")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "h16")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "h16g"))
  {
    goto LABEL_33;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "h16s"))
  {
    v6 = 0;
    v7 = 0x300000000;
  }
  else
  {
    v7 = 0x200000000;
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "h17"))
    {
      v6 = 0;
    }
    else
    {
      v9 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "h17a");
      if (!v9)
        v7 = 0xFFFFFFFF00000000;
      v6 = 0xFFFFFFFFLL;
      if (v9)
        v6 = 0;
    }
  }
  return v7 | v6;
}

unint64_t getPstateDCSLevels(const void **a1)
{
  const void **v1;
  int v2;
  const void *v3;
  _BYTE *v4;
  uint64_t v6;
  unint64_t v7;
  _BOOL4 v9;

  v1 = a1;
  v2 = *((char *)a1 + 23);
  if (v2 >= 0)
    v3 = (const void *)*((unsigned __int8 *)a1 + 23);
  else
    v3 = a1[1];
  if (v3 == (const void *)3)
  {
    if (v2 >= 0)
      v4 = a1;
    else
      v4 = *a1;
    if (!memcmp(v4, "m10", 3uLL))
      goto LABEL_25;
    if (!memcmp(v4, "h11", 3uLL))
      goto LABEL_24;
    if (*(_WORD *)v4 == 12648 && v4[2] == 50)
      goto LABEL_24;
  }
  else if (v3 == (const void *)2)
  {
    if (v2 < 0)
      a1 = (const void **)*a1;
    if (*(_WORD *)a1 != 14701 && *(_WORD *)a1 != 12404)
    {
      if (!memcmp(a1, "t1", 2uLL))
        goto LABEL_24;
      goto LABEL_21;
    }
LABEL_25:
    v6 = 0;
    v7 = 0;
    return v7 | v6;
  }
LABEL_21:
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "h13")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "h13g")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "h14"))
  {
    goto LABEL_24;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "h14g")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "h14c")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "h15")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "h15g")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "h15c")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "h14g.n301"))
  {
    goto LABEL_35;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "m11"))
  {
LABEL_24:
    v6 = 0;
    v7 = 0x200000000;
    return v7 | v6;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "h16"))
  {
LABEL_35:
    v6 = 0;
    v7 = 0x400000000;
    return v7 | v6;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "h16g")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "h16s"))
  {
    v6 = 0;
    v7 = 0x500000000;
  }
  else
  {
    v7 = 0x400000000;
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "h17"))
    {
      v6 = 0;
    }
    else
    {
      v9 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "h17a");
      if (!v9)
        v7 = 0xFFFFFFFF00000000;
      v6 = 0xFFFFFFFFLL;
      if (v9)
        v6 = 0;
    }
  }
  return v7 | v6;
}

uint64_t ZinIrCompilerParameters::setEnableContextSwitchEvents(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 472) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setDramAllocator(uint64_t a1, const std::string *a2)
{
  int *v3;
  uint64_t v4;
  int v5;
  int *v6;
  BOOL v7;
  BOOL v8;
  int v9;
  int v10;
  _BOOL4 v12;
  int v13;
  void *__p[2];
  char v16;

  v3 = (int *)(a1 + 160);
  std::string::operator=((std::string *)(a1 + 160), a2);
  v4 = *(unsigned __int8 *)(a1 + 183);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a1 + 168);
  if (v4 == 7)
  {
    if (v5 >= 0)
      v6 = v3;
    else
      v6 = *(int **)v3;
    v7 = *v6 == 1701998446 && *(int *)((char *)v6 + 3) == 1702065509;
    if (v7 || (*v6 == 1701996134 ? (v8 = *(int *)((char *)v6 + 3) == 1702065509) : (v8 = 0), v8))
    {
      v12 = 1;
    }
    else
    {
      v9 = *v6;
      v10 = *(int *)((char *)v6 + 3);
      v12 = v9 == 1701996130 && v10 == 1702065509;
    }
  }
  else
  {
    v12 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Error: Invalid option to fdram-allocator. Supported values are \"noreuse\", \"ffreuse\", \"bfreuse\"");
  v13 = assertWithMessage(v12, (uint64_t *)__p);
  if (v16 < 0)
    operator delete(__p[0]);
  if (v13)
    return 12;
  else
    return 0;
}

uint64_t ZinIrCompilerParameters::setDramTensorPriority(uint64_t a1, const std::string *a2)
{
  const void **v3;
  int v4;
  size_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  const void *v10;
  const char *v11;
  int v12;
  int v13;
  void *__p[2];
  char v16;

  v3 = (const void **)(a1 + 184);
  std::string::operator=((std::string *)(a1 + 184), a2);
  v4 = *(char *)(a1 + 207);
  if (v4 >= 0)
    v5 = *(unsigned __int8 *)(a1 + 207);
  else
    v5 = *(_QWORD *)(a1 + 192);
  switch(v5)
  {
    case 0x11uLL:
      if (v4 >= 0)
        v10 = v3;
      else
        v10 = *v3;
      v11 = "sizethenliverange";
      break;
    case 0xFuLL:
      if (v4 < 0)
        v3 = (const void **)*v3;
      if (!memcmp(v3, "orderofcreation", 0xFuLL))
      {
        v12 = 1;
        goto LABEL_27;
      }
      v11 = "sizebyliverange";
      v10 = v3;
      break;
    case 0xBuLL:
      if (v4 >= 0)
        v6 = (uint64_t *)v3;
      else
        v6 = (uint64_t *)*v3;
      v7 = *v6;
      v8 = *(uint64_t *)((char *)v6 + 3);
      v9 = v7 == 0x6572666F74736F63 && v8 == 0x7364616572666F74;
      goto LABEL_22;
    default:
      v12 = 0;
      goto LABEL_27;
  }
  v9 = memcmp(v10, v11, v5) == 0;
LABEL_22:
  v12 = v9;
LABEL_27:
  std::string::basic_string[abi:ne180100]<0>(__p, "Error: Invalid option to fdram-placemnt. Supported values are \"costofreads\", \"orderofcreation\", \"sizethenliverange\", \"sizebyliverange\"");
  v13 = assertWithMessage(v12, (uint64_t *)__p);
  if (v16 < 0)
    operator delete(__p[0]);
  if (v13)
    return 13;
  else
    return 0;
}

uint64_t ZinIrCompilerParameters::setDramFragmentationFactor(ZinIrCompilerParameters *this, int a2)
{
  uint64_t result;

  if (*((_DWORD *)this + 52) == a2)
    return 0;
  if ((a2 - 1) > 0x63)
    return 6;
  result = 0;
  *((_DWORD *)this + 52) = a2;
  return result;
}

BOOL ZinIrCompilerParameters::isValidDramFragmentationFactor(ZinIrCompilerParameters *this, int a2)
{
  return (a2 - 1) < 0x64;
}

uint64_t ZinIrCompilerParameters::setL2Allocator(uint64_t a1, const std::string *a2)
{
  int *v3;
  uint64_t v4;
  int v5;
  int *v6;
  int v8;
  int v9;
  _BOOL4 v11;
  int v12;
  void *__p[2];
  char v15;

  v3 = (int *)(a1 + 240);
  std::string::operator=((std::string *)(a1 + 240), a2);
  v4 = *(unsigned __int8 *)(a1 + 263);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a1 + 248);
  if (v4 == 7)
  {
    if (v5 >= 0)
      v6 = v3;
    else
      v6 = *(int **)v3;
    if (*v6 == 1701996134 && *(int *)((char *)v6 + 3) == 1702065509)
    {
      v11 = 1;
    }
    else
    {
      v8 = *v6;
      v9 = *(int *)((char *)v6 + 3);
      v11 = v8 == 1701996130 && v9 == 1702065509;
    }
  }
  else
  {
    v11 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Error: Invalid option to fl2-allocator. Supported values are \"ffreuse\", \"bfreuse\"");
  v12 = assertWithMessage(v11, (uint64_t *)__p);
  if (v15 < 0)
    operator delete(__p[0]);
  if (v12)
    return 14;
  else
    return 0;
}

uint64_t ZinIrCompilerParameters::setL3Allocator(uint64_t a1, const std::string *a2)
{
  int *v3;
  uint64_t v4;
  int v5;
  int *v6;
  BOOL v7;
  BOOL v8;
  int v9;
  int v10;
  _BOOL4 v12;
  int v13;
  void *__p[2];
  char v16;

  v3 = (int *)(a1 + 272);
  std::string::operator=((std::string *)(a1 + 272), a2);
  v4 = *(unsigned __int8 *)(a1 + 295);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a1 + 280);
  if (v4 == 7)
  {
    if (v5 >= 0)
      v6 = v3;
    else
      v6 = *(int **)v3;
    v7 = *v6 == 1701998446 && *(int *)((char *)v6 + 3) == 1702065509;
    if (v7 || (*v6 == 1701996134 ? (v8 = *(int *)((char *)v6 + 3) == 1702065509) : (v8 = 0), v8))
    {
      v12 = 1;
    }
    else
    {
      v9 = *v6;
      v10 = *(int *)((char *)v6 + 3);
      v12 = v9 == 1701996130 && v10 == 1702065509;
    }
  }
  else
  {
    v12 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Error: Invalid option to fl3-allocator. Supported values are \"noreuse\", \"ffreuse\", \"bfreuse\"");
  v13 = assertWithMessage(v12, (uint64_t *)__p);
  if (v16 < 0)
    operator delete(__p[0]);
  if (v13)
    return 15;
  else
    return 0;
}

uint64_t ZinIrCompilerParameters::setL2Size(ZinIrCompilerParameters *this, uint64_t a2)
{
  char v4;
  char v5;
  uint64_t result;
  void *__p[2];
  char v8;

  std::string::basic_string[abi:ne180100]<0>(__p, "Error: Invalid option to fl2-size. Size must be >= 0kB");
  v4 = assertWithMessage(a2 >= 0, (uint64_t *)__p);
  v5 = v4;
  if (v8 < 0)
  {
    operator delete(__p[0]);
    if ((v5 & 1) != 0)
      return 25;
  }
  else if ((v4 & 1) != 0)
  {
    return 25;
  }
  result = 0;
  *((_QWORD *)this + 37) = a2;
  return result;
}

uint64_t ZinIrCompilerParameters::setL3Size(ZinIrCompilerParameters *this, uint64_t a2)
{
  char v4;
  char v5;
  uint64_t result;
  void *__p[2];
  char v8;

  std::string::basic_string[abi:ne180100]<0>(__p, "Error: Invalid option to fl3-size. Size must be >= 0MB");
  v4 = assertWithMessage(a2 >= 0, (uint64_t *)__p);
  v5 = v4;
  if (v8 < 0)
  {
    operator delete(__p[0]);
    if ((v5 & 1) != 0)
      return 16;
  }
  else if ((v4 & 1) != 0)
  {
    return 16;
  }
  result = 0;
  *((_QWORD *)this + 38) = a2;
  return result;
}

uint64_t ZinIrCompilerParameters::setOptimizationLevel(ZinIrCompilerParameters *this, int __val)
{
  int v2;
  uint64_t v3;
  int v4;
  std::string *v5;
  __int128 v6;
  std::string v8;
  void *__p[2];
  std::string::size_type v10;

  v2 = *((_DWORD *)this + 82);
  if (v2 == -1)
    goto LABEL_4;
  if (v2 < 0)
  {
    v4 = 0;
    v3 = 24;
    goto LABEL_8;
  }
  if (v2 > __val)
  {
LABEL_4:
    v3 = 0;
    *((_DWORD *)this + 82) = __val;
  }
  else
  {
    v3 = 0;
  }
  v4 = 1;
LABEL_8:
  std::to_string(&v8, __val);
  v5 = std::string::insert(&v8, 0, "Error: Invalid optimization level: ", 0x23uLL);
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v10 = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  assertWithMessage(v4, (uint64_t *)__p);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  return v3;
}

void sub_206DDDCF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrCompilerParameters::setDisableMergeScaleBias(uint64_t a1, char a2, __int128 *a3)
{
  __int128 *v4;

  v4 = a3;
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 656), (void **)a3, (uint64_t)&std::piecewise_construct, &v4)+ 56) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setDisableMergeActivation(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 153) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setDisableDeadCodeElimination(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 154) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setDisableStrideUnitarization(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 155) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setDisableAdjustInterleaveFactor(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 156) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setDisableCompression(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 157) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setDisableBondedNetworks(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 158) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setEnableKernelRewind(uint64_t a1, char a2, __int128 *a3)
{
  __int128 *v4;

  v4 = a3;
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 608), (void **)a3, (uint64_t)&std::piecewise_construct, &v4)+ 56) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setL2Wraparound(ZinIrCompilerParameters *this, int a2)
{
  *((_DWORD *)this + 66) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setFoldScale(ZinIrCompilerParameters *this, int a2)
{
  *((_DWORD *)this + 31) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setDisableContextSwitching(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 128) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::debugContextSwitchingDma(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 129) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setIsSecureNetwork(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 130) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setDisableMergeConstants(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 132) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setForceHazardStallsBegin(ZinIrCompilerParameters *this, uint64_t a2)
{
  *((_QWORD *)this + 17) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setForceHazardStallsEnd(ZinIrCompilerParameters *this, uint64_t a2)
{
  *((_QWORD *)this + 18) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setProduceRelocatableObject(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 152) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setUseNewMachoMagicNumber(ZinIrCompilerParameters *this, int a2)
{
  *((_DWORD *)this + 83) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setCreateFvmlibsForUndefinedSymbols(ZinIrCompilerParameters *this, int a2)
{
  *((_DWORD *)this + 79) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setForceCoalescedSections(ZinIrCompilerParameters *this, int a2)
{
  *((_DWORD *)this + 80) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setDisableInputCoalesce(ZinIrCompilerParameters *this, int a2)
{
  *((_DWORD *)this + 81) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setL2CacheMode(std::string *a1, const std::string *a2)
{
  std::string::operator=(a1 + 9, a2);
  return 0;
}

uint64_t ZinIrCompilerParameters::setScanWeightsForCompression(uint64_t a1, char a2, __int128 *a3)
{
  __int128 *v4;

  v4 = a3;
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 632), (void **)a3, (uint64_t)&std::piecewise_construct, &v4)+ 56) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setDisableOnTheFlySparseEncoding(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 495) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setDisableWinograd(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 496) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setEnableDramLogEventsOnly(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 498) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setEnableMulticastBruteforceSearch(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 499) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setPerfTracer1Config(uint64_t a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;

  v3 = (int *)(a1 + 500);
  v4 = 6;
  if (ZinIrCompilerParamsUtils::StringToPerfTracerConfig(a2, (_DWORD *)(a1 + 500)))
  {
    if (ZinIrCompilerParamsUtils::HasValidPerfTracerConfigs(v3, (int *)(a1 + 512)))
      return 0;
    else
      return 6;
  }
  return v4;
}

uint64_t ZinIrCompilerParameters::setPerfTracer2Config(uint64_t a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;

  v3 = (int *)(a1 + 512);
  v4 = 6;
  if (ZinIrCompilerParamsUtils::StringToPerfTracerConfig(a2, (_DWORD *)(a1 + 512)))
  {
    if (ZinIrCompilerParamsUtils::HasValidPerfTracerConfigs((int *)(a1 + 500), v3))
      return 0;
    else
      return 6;
  }
  return v4;
}

uint64_t ZinIrCompilerParameters::setDisableDRAMInputFIFO(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 524) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setAggressiveScaleFusion(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 525) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setEnableTaskSchedulerExp(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 526) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setEnableAggressiveNETransposeFusion(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 527) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setEnableControlFlowOps(uint64_t this, char a2)
{
  *(_BYTE *)(this + 528) = a2;
  return this;
}

uint64_t ZinIrCompilerParameters::setDisableDartThrashingOptimizer(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 529) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setEnableDramInplaceAllocation(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 530) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setEnableGlobalChannelSplitting(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 531) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setUseExtendedMachoFormat(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 532) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setEnableAdvancedKernelRefinement(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 533) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setEnableL2BatchSplitting(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 534) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setEnableGlobalCWOptimization(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 535) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setEnableL2CachedBuffer(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 536) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setSignature(uint64_t a1, const void **a2)
{
  int v3;
  const void *v4;
  const void **v5;
  char v6;
  const void *v7;
  int v8;
  uint64_t v9;
  void *__p;
  char v12;

  v3 = *((char *)a2 + 23);
  if (v3 >= 0)
    v4 = (const void *)*((unsigned __int8 *)a2 + 23);
  else
    v4 = a2[1];
  if (v4 == (const void *)5)
  {
    if (v3 >= 0)
      v7 = a2;
    else
      v7 = *a2;
    if (!memcmp(v7, "ident", 5uLL))
    {
      v6 = 0;
      goto LABEL_17;
    }
LABEL_15:
    v8 = 0;
    v9 = 6;
    goto LABEL_18;
  }
  if (v4 != (const void *)8)
    goto LABEL_15;
  v5 = v3 >= 0 ? a2 : (const void **)*a2;
  if (*v5 != (const void *)0x64656C6261736964)
    goto LABEL_15;
  v6 = 1;
LABEL_17:
  v9 = 0;
  *(_BYTE *)(a1 + 131) = v6;
  v8 = 1;
LABEL_18:
  std::operator+<char>();
  assertWithMessage(v8, (uint64_t *)&__p);
  if (v12 < 0)
    operator delete(__p);
  return v9;
}

uint64_t ZinIrCompilerParameters::setL2BankConflictOpt(ZinIrCompilerParameters *this, int a2)
{
  uint64_t v2;
  int v3;
  _WORD *v4;

  *((_DWORD *)this + 78) = a2;
  v2 = *((unsigned __int8 *)this + 95);
  v3 = (char)v2;
  if ((v2 & 0x80u) != 0)
    v2 = *((_QWORD *)this + 10);
  if (v2 == 2)
  {
    if (v3 >= 0)
      v4 = (_WORD *)((char *)this + 72);
    else
      v4 = (_WORD *)*((_QWORD *)this + 9);
    if (*v4 == 12661)
      *((_DWORD *)this + 78) = 0;
  }
  return 0;
}

uint64_t ZinIrCompilerParameters::setInputAndConstantCaching(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 364) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setSingleChannelElementwiseOpCopyRemoval(uint64_t a1, char a2, __int128 *a3)
{
  __int128 *v4;

  v4 = a3;
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 680), (void **)a3, (uint64_t)&std::piecewise_construct, &v4)+ 56) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setAggressiveTensorCaching(uint64_t a1, char a2, __int128 *a3)
{
  __int128 *v4;

  v4 = a3;
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 704), (void **)a3, (uint64_t)&std::piecewise_construct, &v4)+ 56) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setMemCacheStrategy(std::string *a1, const std::string *a2)
{
  std::string::operator=(a1 + 14, a2);
  return 0;
}

uint64_t ZinIrCompilerParameters::setMemCacheSize(ZinIrCompilerParameters *this, int a2)
{
  *((_DWORD *)this + 90) = a2;
  return 0;
}

double ZinIrCompilerParameters::setOptionsFile(uint64_t a1, uint64_t a2)
{
  int v4;
  double result;
  char v6;
  void **v7;
  uint64_t v8;
  std::string v9[17];
  _QWORD v10[20];

  v10[19] = *MEMORY[0x24BDAC8D0];
  std::ifstream::basic_ifstream(&v8);
  v4 = *(_DWORD *)((char *)&v9[1].__r_.__value_.__l.__data_ + *(_QWORD *)(v8 - 24));
  v8 = *MEMORY[0x24BEDB7E0];
  *(uint64_t *)((char *)&v8 + *(_QWORD *)(v8 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x20BCFFEB4](&v9[0].__r_.__value_.__r.__words[1]);
  std::istream::~istream();
  MEMORY[0x20BD0022C](v10);
  if (!v4)
  {
    LOBYTE(v8) = 1;
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      v6 = v8;
    }
    else
    {
      v9[0] = *(std::string *)a2;
      v6 = 1;
    }
    *(_BYTE *)(a1 + 736) = v6;
    v7 = (void **)(a1 + 744);
    if (*(char *)(a1 + 767) < 0)
      operator delete(*v7);
    result = *(double *)&v9[0].__r_.__value_.__l.__data_;
    *(_OWORD *)v7 = *(_OWORD *)&v9[0].__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 760) = *((_QWORD *)&v9[0].__r_.__value_.__l + 2);
  }
  return result;
}

void sub_206DDE49C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x20BD0022C](v1 + 424);
  _Unwind_Resume(a1);
}

uint64_t ZinIrCompilerParameters::setSpatialSplitMode(uint64_t a1, unsigned int a2, __int128 *a3)
{
  int v4;
  void *__p[2];
  char v7;
  __int128 *v8;

  v8 = a3;
  *((_DWORD *)std::__tree<std::__value_type<std::string,ZinIrPaddingMode>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrPaddingMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrPaddingMode>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 560), (void **)a3, (uint64_t)&std::piecewise_construct, &v8)+ 14) = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "Error: Invalid option to fspatial-split. Supported values are \"disabled\", \"test\", \"memory\", \"auto\", \"manual\", \"generic-dag\", \"generic-dag-exp\", \"generic-dag-memory\"");
  v4 = assertWithMessage(a2 < 8, (uint64_t *)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v4)
    return 20;
  else
    return 0;
}

uint64_t ZinIrCompilerParameters::setEnableCircularBufferInSpatialSplit(ZinIrCompilerParameters *this, uint64_t a2)
{
  *((_QWORD *)this + 60) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setSpatialSplitSubGraphs(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t *v4;
  __int128 *v6;

  v6 = a3;
  v4 = std::__tree<std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 584), (void **)a3, (uint64_t)&std::piecewise_construct, &v6)+ 7;
  if (v4 != a2)
    std::vector<ZinIrCompilerParameters::SubGraphSpec>::__assign_with_size[abi:ne180100]<ZinIrCompilerParameters::SubGraphSpec*,ZinIrCompilerParameters::SubGraphSpec*>((uint64_t)v4, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 5));
  return 0;
}

uint64_t ZinIrCompilerParameters::setDisableRegisterPacking(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 366) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setDisableCpAllocation(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 367) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::dumpStatusDictionaryToFile(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 370) = a2;
  return 0;
}

BOOL ZinIrCompilerParameters::getEnforcedTdLatency(ZinIrCompilerParameters *this, float *a2)
{
  int v2;

  v2 = *((unsigned __int8 *)this + 728);
  if (*((_BYTE *)this + 728))
    *a2 = *((float *)this + 183);
  return v2 != 0;
}

uint64_t ZinIrCompilerParameters::setBSSLimit(ZinIrCompilerParameters *this, uint64_t a2)
{
  *((_QWORD *)this + 49) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setOptimizeNEUtilization(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 371) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setDisableCachePrefetchMask(ZinIrCompilerParameters *this, __int16 a2)
{
  *((_WORD *)this + 186) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setDisablePerCoutGOCToSingularGOC(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 374) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setOptimizationMode(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 400), a2);
  return 0;
}

uint64_t ZinIrCompilerParameters::setDisableSSM(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 375) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setOptimizeKernelCoalescing(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 376) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setOptimizeMutableKernelSection(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 377) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setEnableSummaryPerformanceStats(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 387) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setSplitKernelSection(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 378) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setMaxKernelSectionSize(ZinIrCompilerParameters *this, int a2)
{
  *((_DWORD *)this + 95) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setDisableKernelStreaming(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 384) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setCompilerMultithreading(ZinIrCompilerParameters *this, __int16 a2)
{
  *(_WORD *)((char *)this + 385) = a2 | 0x100;
  return 0;
}

uint64_t ZinIrCompilerParameters::setProcedureName(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 424), a2);
  return 0;
}

uint64_t ZinIrCompilerParameters::setSeedEncoding(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 448), a2);
  return 0;
}

uint64_t ZinIrCompilerParameters::setDisableNEWidthSlicing(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 488) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setDisableHardSwishOpt(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 489) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setDisableHighPrecisionSigmoid(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 490) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setDisableLayernormOpt(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 491) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setEnableDynamicShapes(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 492) = a2;
  ZinIrCompilerParameters::doLegalization(this);
  return 0;
}

uint64_t ZinIrCompilerParameters::setEnableStrictValidationForDynamicShapes(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 537) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setEnableIntermediateCompression(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 493) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setEnableSpatialSplitInX(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 494) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setPreserveTextureFraction(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 497) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setMaxTdCount(ZinIrCompilerParameters *this, int a2)
{
  *((_DWORD *)this + 135) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setMaxSegmentSize(ZinIrCompilerParameters *this, int a2)
{
  *((_DWORD *)this + 136) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setForceDynamicShapesMIL(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 538) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setE4M3Overflow(uint64_t a1, const void **a2)
{
  int v3;
  const void *v4;
  const void **v5;
  int v6;
  int v7;
  int v9;
  const void *v10;
  uint64_t result;

  v3 = *((char *)a2 + 23);
  if (v3 >= 0)
    v4 = (const void *)*((unsigned __int8 *)a2 + 23);
  else
    v4 = a2[1];
  if (v4 == (const void *)8)
  {
    if (v3 >= 0)
      v10 = a2;
    else
      v10 = *a2;
    if (memcmp(v10, "Saturate", 8uLL))
      return 6;
    v9 = 1;
  }
  else
  {
    if (v4 != (const void *)3)
      return 6;
    v5 = v3 >= 0 ? a2 : (const void **)*a2;
    v6 = *(unsigned __int16 *)v5;
    v7 = *((unsigned __int8 *)v5 + 2);
    if (v6 != 24910 || v7 != 110)
      return 6;
    v9 = 0;
  }
  result = 0;
  *(_DWORD *)(a1 + 548) = v9;
  *(_BYTE *)(a1 + 552) = 1;
  return result;
}

uint64_t ZinIrCompilerParameters::setGlobalRefinementInSpatialSplit(ZinIrCompilerParameters *this, __int16 a2)
{
  *((_WORD *)this + 278) = a2 | 0x100;
  return 0;
}

uint64_t ZinIrCompilerParameters::getGlobalRefinementInSpatialSplit(ZinIrCompilerParameters *this)
{
  return *((unsigned __int16 *)this + 278);
}

uint64_t ZinIrCompilerParameters::setEnableSegmentAwareKernelSectionSplit(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 558) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setEnableMILConstantCoalescing(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 559) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::setEnableLowEffortCPAllocation(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 368) = a2;
  return 0;
}

uint64_t ZinIrCompilerParameters::log(ZinIrCompilerParameters *this)
{
  ZinIrCompilerParameters *v2;
  _QWORD *v3;
  _QWORD *v4;
  char v5;
  _QWORD *v6;
  int v7;
  _BOOL4 v8;
  const char *v9;
  const char *v10;
  const char *v11;
  NSObject *v12;
  const char *v13;
  uint32_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  _BOOL4 DisableMergeScaleBias;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  _QWORD *v37;
  BOOL v38;
  _QWORD *v39;
  int v40;
  int v41;
  NSObject *v42;
  const char *v43;
  uint32_t v44;
  _QWORD *v45;
  _BOOL4 ScanWeightsForCompression;
  int v47;
  int v48;
  _BOOL4 EnableKernelRewind;
  _BYTE *v50;
  int v51;
  int v52;
  _BOOL4 v53;
  NSObject *v54;
  const char *v55;
  int v56;
  _BOOL4 SingleChannelEWOpCopyRemoval;
  _BOOL4 AggressiveTensorCaching;
  _QWORD *v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  float v65;
  _BOOL4 v66;
  NSObject *v67;
  const char *v68;
  uint32_t v69;
  uint64_t v70;
  _BOOL4 v71;
  NSObject *v72;
  const char *v73;
  uint32_t v74;
  int v75;
  int v76;
  int v77;
  int v78;
  _QWORD *v79;
  _QWORD *v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  _BYTE __p[12];
  char v110;
  uint8_t buf[4];
  _BYTE *v112;
  uint64_t v113;

  v113 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__p = 136315138;
    *(_QWORD *)&__p[4] = "===================== Compiler configuration ====================== ";
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "\n %s\n", __p, 0xCu);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v2 = this;
    if (*((char *)this + 23) < 0)
      v2 = *(ZinIrCompilerParameters **)this;
    *(_DWORD *)__p = 136315138;
    *(_QWORD *)&__p[4] = v2;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Input file name:  %s\n", __p, 0xCu);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v3 = (_QWORD *)((char *)this + 24);
    if (*((char *)this + 47) < 0)
      v3 = (_QWORD *)*v3;
    *(_DWORD *)__p = 136315138;
    *(_QWORD *)&__p[4] = v3;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Output file name: %s\n", __p, 0xCu);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v4 = (_QWORD *)((char *)this + 72);
    if (*((char *)this + 95) < 0)
      v4 = (_QWORD *)*v4;
    *(_DWORD *)__p = 136315138;
    *(_QWORD *)&__p[4] = v4;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Target: %s\n", __p, 0xCu);
  }
  v5 = *((_BYTE *)this + 447);
  if (v5 < 0)
  {
    if (!*((_QWORD *)this + 54))
      goto LABEL_23;
  }
  else if (!*((_BYTE *)this + 447))
  {
    goto LABEL_23;
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v6 = (_QWORD *)((char *)this + 424);
    if (v5 < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)__p = 136315138;
    *(_QWORD *)&__p[4] = v6;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Procedure name: %s\n", __p, 0xCu);
  }
LABEL_23:
  v7 = *((unsigned __int8 *)this + 100);
  v8 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO);
  if (!v7)
  {
    if (!v8)
      goto LABEL_44;
    *(_WORD *)__p = 0;
    v12 = MEMORY[0x24BDACB70];
    v13 = "Debug Mode: NO\n";
    v14 = 2;
    goto LABEL_43;
  }
  if (v8)
  {
    *(_WORD *)__p = 0;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Debug Mode: YES\n", __p, 2u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    if (*((_BYTE *)this + 101))
      v9 = "true";
    else
      v9 = "false";
    *(_DWORD *)__p = 136315138;
    *(_QWORD *)&__p[4] = v9;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Sub-option: 'generate-static-perf-analytics: %s\n", __p, 0xCu);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    if (*((_BYTE *)this + 102))
      v10 = "true";
    else
      v10 = "false";
    *(_DWORD *)__p = 136315138;
    *(_QWORD *)&__p[4] = v10;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Sub-option: 'generate-analytics-buffer: %s\n", __p, 0xCu);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    if (*((_BYTE *)this + 120))
      v11 = "true";
    else
      v11 = "false";
    *(_DWORD *)__p = 136315138;
    *(_QWORD *)&__p[4] = v11;
    v12 = MEMORY[0x24BDACB70];
    v13 = "Sub-option: 'abort-on-layer-tracker-error: %s\n";
    v14 = 12;
LABEL_43:
    _os_log_impl(&dword_2069AB000, v12, OS_LOG_TYPE_INFO, v13, __p, v14);
  }
LABEL_44:
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v15 = *((_QWORD *)this + 13);
    *(_DWORD *)__p = 134217984;
    *(_QWORD *)&__p[4] = v15;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "NE Frequency: %f\n", __p, 0xCu);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v16 = *((_DWORD *)this + 28);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v16;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Pstate DCS level: %d", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v17 = *((_DWORD *)this + 29);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v17;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Pstate SOC level: %d", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v18 = *((_DWORD *)this + 24);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v18;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Debug Mask: %d\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v19 = *((_DWORD *)this + 31);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v19;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Fold Scale: %d\n", __p, 8u);
  }
  v20 = *((_DWORD *)this + 82);
  if (v20 != -1 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v20;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Optimization Level: %d\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v21 = *((unsigned __int8 *)this + 128);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v21;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Disable Context Switch: %d\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v22 = *((unsigned __int8 *)this + 132);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v22;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Disable Merge Constants: %d\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    DisableMergeScaleBias = ZinIrCompilerParameters::getDisableMergeScaleBias(this);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = DisableMergeScaleBias;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Disable Merge Scale and Bias: %d\n", __p, 8u);
  }
  ZinIrCompilerParameters::logProcedureSpecific<BOOL,0>((uint64_t)this, (_QWORD *)this + 82);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v24 = *((unsigned __int8 *)this + 153);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v24;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Disable Merge Activation: %d\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v25 = *((unsigned __int8 *)this + 154);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v25;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Disable Dead Code Elimination: %d\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v26 = *((unsigned __int8 *)this + 155);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v26;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Disable Stride Unitarization: %d\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v27 = *((unsigned __int8 *)this + 156);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v27;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Disable Adjust Interleave Factor: %d\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v28 = *((unsigned __int8 *)this + 157);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v28;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Disable Compression: %d\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v29 = *((unsigned __int8 *)this + 158);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v29;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Disable Bonded Networks: %d\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v30 = *((_QWORD *)this + 17);
    *(_DWORD *)__p = 134217984;
    *(_QWORD *)&__p[4] = v30;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Disable Reallocation Begin Boundary: %lld\n", __p, 0xCu);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v31 = *((_QWORD *)this + 18);
    *(_DWORD *)__p = 134217984;
    *(_QWORD *)&__p[4] = v31;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Disable Reallocation End Boundary: %lld\n", __p, 0xCu);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v32 = (_QWORD *)((char *)this + 160);
    if (*((char *)this + 183) < 0)
      v32 = (_QWORD *)*v32;
    *(_DWORD *)__p = 136315138;
    *(_QWORD *)&__p[4] = v32;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Dram Allocator: %s\n", __p, 0xCu);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v33 = *((_DWORD *)this + 52);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v33;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Dram Fragmentation Factor: %d\n", __p, 8u);
  }
  v34 = (_QWORD *)((char *)this + 216);
  v35 = *((unsigned __int8 *)this + 239);
  v36 = (char)v35;
  if ((v35 & 0x80u) != 0)
    v35 = *((_QWORD *)this + 28);
  if (v35 == 11
    && (v36 >= 0 ? (v37 = (_QWORD *)((char *)this + 216)) : (v37 = (_QWORD *)*v34),
        *v37 == 0x64697365726E6F6ELL ? (v38 = *(_QWORD *)((char *)v37 + 3) == 0x746E656469736572) : (v38 = 0),
        v38))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v37;
      _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "L2 Cache Mode: %s\n", __p, 0xCu);
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      *(_WORD *)__p = 0;
      _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "L2 Allocator: N/A \n", __p, 2u);
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      *(_WORD *)__p = 0;
      _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "L2 Wraparound: N/A \n", __p, 2u);
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      *(_WORD *)__p = 0;
      v42 = MEMORY[0x24BDACB70];
      v43 = "L2 Bank Conflict Opt: N/A \n";
      v44 = 2;
      goto LABEL_107;
    }
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      if (v36 < 0)
        v34 = (_QWORD *)*v34;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v34;
      _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "L2 Cache Mode: %s\n", __p, 0xCu);
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      v39 = (_QWORD *)((char *)this + 240);
      if (*((char *)this + 263) < 0)
        v39 = (_QWORD *)*v39;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v39;
      _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "L2 Allocator: %s\n", __p, 0xCu);
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      v40 = *((_DWORD *)this + 66);
      *(_DWORD *)__p = 67109120;
      *(_DWORD *)&__p[4] = v40;
      _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "L2 Wraparound: %d\n", __p, 8u);
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      v41 = *((_DWORD *)this + 78);
      *(_DWORD *)__p = 67109120;
      *(_DWORD *)&__p[4] = v41;
      v42 = MEMORY[0x24BDACB70];
      v43 = "L2 Bank Conflict Opt: %d\n";
      v44 = 8;
LABEL_107:
      _os_log_impl(&dword_2069AB000, v42, OS_LOG_TYPE_INFO, v43, __p, v44);
    }
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v45 = (_QWORD *)((char *)this + 272);
    if (*((char *)this + 295) < 0)
      v45 = (_QWORD *)*v45;
    *(_DWORD *)__p = 136315138;
    *(_QWORD *)&__p[4] = v45;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "L3 Allocator: %s\n", __p, 0xCu);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    ScanWeightsForCompression = ZinIrCompilerParameters::getScanWeightsForCompression(this);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = ScanWeightsForCompression;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Scan Weights for Compression: %d\n", __p, 8u);
  }
  ZinIrCompilerParameters::logProcedureSpecific<BOOL,0>((uint64_t)this, (_QWORD *)this + 79);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v47 = *((unsigned __int8 *)this + 495);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v47;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Disable On-The-Fly Sparse Encoding: %d\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v48 = *((unsigned __int8 *)this + 496);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v48;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Disable 1D Winograd Mode: %d\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    EnableKernelRewind = ZinIrCompilerParameters::getEnableKernelRewind(this);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = EnableKernelRewind;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Rewind kernels: %d\n", __p, 8u);
  }
  ZinIrCompilerParameters::logProcedureSpecific<BOOL,0>((uint64_t)this, (_QWORD *)this + 76);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    ZinIrCompilerParameters::getSpatialSplitMode(this, __p);
    v50 = v110 >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136315138;
    v112 = v50;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Spatial splitting mode: %s\n", buf, 0xCu);
    if (v110 < 0)
      operator delete(*(void **)__p);
  }
  ZinIrCompilerParameters::logProcedureSpecific<SpatialSplitMode,0>((uint64_t)this, (_QWORD *)this + 70);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v51 = *((_DWORD *)this + 79);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v51;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Create Fvmlib for undefined symbols: %d\n", __p, 8u);
  }
  v52 = *((unsigned __int8 *)this + 131);
  v53 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO);
  if (v52)
  {
    if (!v53)
      goto LABEL_134;
    *(_WORD *)__p = 0;
    v54 = MEMORY[0x24BDACB70];
    v55 = "Signature: disabled\n";
  }
  else
  {
    if (!v53)
      goto LABEL_134;
    *(_WORD *)__p = 0;
    v54 = MEMORY[0x24BDACB70];
    v55 = "Signature: ident\n";
  }
  _os_log_impl(&dword_2069AB000, v54, OS_LOG_TYPE_INFO, v55, __p, 2u);
LABEL_134:
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v56 = *((unsigned __int8 *)this + 364);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v56;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Input and Constant caching: %d\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    SingleChannelEWOpCopyRemoval = ZinIrCompilerParameters::getSingleChannelEWOpCopyRemoval(this);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = SingleChannelEWOpCopyRemoval;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Single channel elementwise op copy removal: %d\n", __p, 8u);
  }
  ZinIrCompilerParameters::logProcedureSpecific<BOOL,0>((uint64_t)this, (_QWORD *)this + 85);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    AggressiveTensorCaching = ZinIrCompilerParameters::getAggressiveTensorCaching(this);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = AggressiveTensorCaching;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Aggressive tensor caching: %d\n", __p, 8u);
  }
  ZinIrCompilerParameters::logProcedureSpecific<BOOL,0>((uint64_t)this, (_QWORD *)this + 88);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v59 = (_QWORD *)((char *)this + 336);
    if (*((char *)this + 359) < 0)
      v59 = (_QWORD *)*v59;
    *(_DWORD *)__p = 136315138;
    *(_QWORD *)&__p[4] = v59;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "MemCache Strategy: %s\n", __p, 0xCu);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v60 = *((_DWORD *)this + 90);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v60;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "MemCache Size: %d\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v61 = *((unsigned __int8 *)this + 365);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v61;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Use wide work units: %d\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v62 = *((unsigned __int8 *)this + 366);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v62;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Disable Register Packing: %d\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v63 = *((unsigned __int8 *)this + 367);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v63;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Disable CP allocation: %d\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v64 = *((unsigned __int8 *)this + 369);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v64;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Disable Network Imbalance Analysis: %d\n", __p, 8u);
  }
  v65 = *((float *)this + 97);
  v66 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO);
  if (v65 <= 0.0)
  {
    if (!v66)
      goto LABEL_160;
    *(_WORD *)__p = 0;
    v67 = MEMORY[0x24BDACB70];
    v68 = "Max TD Latency Requested (micro-seconds): Not Specified";
    v69 = 2;
  }
  else
  {
    if (!v66)
      goto LABEL_160;
    *(_DWORD *)__p = 134217984;
    *(double *)&__p[4] = v65;
    v67 = MEMORY[0x24BDACB70];
    v68 = "Max TD Latency Requested (micro-seconds): %f\n";
    v69 = 12;
  }
  _os_log_impl(&dword_2069AB000, v67, OS_LOG_TYPE_INFO, v68, __p, v69);
LABEL_160:
  v70 = *((_QWORD *)this + 49);
  v71 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO);
  if (v70 < 0)
  {
    if (!v71)
      goto LABEL_166;
    *(_WORD *)__p = 0;
    v72 = MEMORY[0x24BDACB70];
    v73 = "Requested BSS Limit (Bytes): Not Specified";
    v74 = 2;
  }
  else
  {
    if (!v71)
      goto LABEL_166;
    *(_DWORD *)__p = 134217984;
    *(_QWORD *)&__p[4] = v70;
    v72 = MEMORY[0x24BDACB70];
    v73 = "Requested BSS Limit (Bytes): %llu\n";
    v74 = 12;
  }
  _os_log_impl(&dword_2069AB000, v72, OS_LOG_TYPE_INFO, v73, __p, v74);
LABEL_166:
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v75 = *((unsigned __int8 *)this + 371);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v75;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Optimize NE Utilization: %d\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v76 = *((__int16 *)this + 186);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v76;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Disable Cache Prefetch Mask: %d\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v77 = *((unsigned __int8 *)this + 121);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v77;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Dump Fusion Boundary Info: %d\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v78 = *((unsigned __int8 *)this + 374);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v78;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Disable PerCout GOCs to Singular GOCs: %d\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v79 = (_QWORD *)((char *)this + 400);
    if (*((char *)this + 423) < 0)
      v79 = (_QWORD *)*v79;
    *(_DWORD *)__p = 136315138;
    *(_QWORD *)&__p[4] = v79;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Optimization mode: %s\n", __p, 0xCu);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v80 = (_QWORD *)((char *)this + 448);
    if (*((char *)this + 471) < 0)
      v80 = (_QWORD *)*v80;
    *(_DWORD *)__p = 136315138;
    *(_QWORD *)&__p[4] = v80;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Seed Encoding: %s\n", __p, 0xCu);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v81 = *((unsigned __int8 *)this + 472);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v81;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Enable Context Switch Debug Events: %d\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v82 = *((unsigned __int8 *)this + 488);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v82;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Disable Unaligned Width Slicing on NE: %d\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v83 = *((unsigned __int8 *)this + 490);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v83;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Disable High Precision Sigmoid: %d\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v84 = *((unsigned __int8 *)this + 491);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v84;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Disable HW Layernorm Lowering to TernaryGOC: %d\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v85 = *((unsigned __int8 *)this + 498);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v85;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Enable Dram Log Events Only: %d\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v86 = *((unsigned __int8 *)this + 499);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v86;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Enable Multicast bruteforce search: %d\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v87 = *((unsigned __int8 *)this + 528);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v87;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Enable Control Flow operations: %d\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v88 = *((unsigned __int8 *)this + 524);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v88;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Disable DRAM Input FIFO: %d\n", __p, 8u);
  }
  if (*((_BYTE *)this + 386) && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v89 = *((unsigned __int8 *)this + 385);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v89;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Compiler multithreading: %d\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v90 = *((unsigned __int8 *)this + 525);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v90;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Aggressive scale fusion: %d\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v91 = *((unsigned __int8 *)this + 526);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v91;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Enable experimental scheduler: %d\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v92 = *((_DWORD *)this + 135);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v92;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Max TD Count: %d'\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v93 = *((_DWORD *)this + 136);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v93;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Max segment size: %d'\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v94 = *((unsigned __int8 *)this + 538);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v94;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Force Dynamic Shapes MIL: %d\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v95 = *((unsigned __int8 *)this + 527);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v95;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Aggressive NE transpose fusion: %d\n", __p, 8u);
  }
  if (*((_BYTE *)this + 557) && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v96 = *((unsigned __int8 *)this + 556);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v96;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Global refinement in sptial-split: %d'\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v97 = *((unsigned __int8 *)this + 558);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v97;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "EnableSegmentAwareKernelSectionSplit: %d\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v98 = *((unsigned __int8 *)this + 529);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v98;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Disable DART thrashing optimizer: %d\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v99 = *((unsigned __int8 *)this + 530);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v99;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Enable DRAM inplace allocation: %d\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v100 = *((unsigned __int8 *)this + 531);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v100;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Enable global channel splitting: %d\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v101 = *((unsigned __int8 *)this + 559);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v101;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Enable constant coalescing: %d\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v102 = *((unsigned __int8 *)this + 532);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v102;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Extended Macho format: %d\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v103 = *((unsigned __int8 *)this + 533);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v103;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Advanced kernel refinement: %d\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v104 = *((unsigned __int8 *)this + 534);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v104;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Enable L2 batch splitting: %d\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v105 = *((unsigned __int8 *)this + 535);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v105;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Enable global CW optimization: %d\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v106 = *((unsigned __int8 *)this + 536);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v106;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Enable L2 cached buffer: %d\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v107 = *((unsigned __int8 *)this + 368);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v107;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Enable low effort CP allocation: %d\n", __p, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_WORD *)__p = 0;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "====================================================================== \n\n", __p, 2u);
  }
  return 0;
}

BOOL ZinIrCompilerParameters::getDisableMergeScaleBias(ZinIrCompilerParameters *this)
{
  char *v1;
  int v2;
  void *__p[2];
  char v5;

  v1 = (char *)this + 656;
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_207AF6795);
  v2 = *(unsigned __int8 *)std::map<std::string,BOOL>::at((uint64_t)v1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2 != 0;
}

void sub_206DE077C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinIrCompilerParameters::logProcedureSpecific<BOOL,0>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void **v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  void *__p[2];
  char v20;
  _QWORD v21[2];
  uint64_t v22;
  _QWORD v23[10];
  char v24;
  uint64_t v25;
  uint8_t buf[4];
  void **v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v2 = a2 + 1;
  v3 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v4 = *MEMORY[0x24BEDB7F0];
    v5 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v7 = MEMORY[0x24BDACB70];
    v8 = MEMORY[0x24BEDB848] + 16;
    do
    {
      v9 = *((unsigned __int8 *)v3 + 55);
      if ((v9 & 0x80u) != 0)
        v9 = v3[5];
      if (v9)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v21);
        v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"\tproc ", 6);
        v11 = *((char *)v3 + 55);
        if (v11 >= 0)
          v12 = (uint64_t)(v3 + 4);
        else
          v12 = v3[4];
        if (v11 >= 0)
          v13 = *((unsigned __int8 *)v3 + 55);
        else
          v13 = v3[5];
        v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)": ", 2);
        std::ostream::operator<<();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v23, __p);
          v15 = __p;
          if (v20 < 0)
            v15 = (void **)__p[0];
          *(_DWORD *)buf = 136315138;
          v27 = v15;
          _os_log_impl(&dword_2069AB000, v7, OS_LOG_TYPE_INFO, "%s\n", buf, 0xCu);
          if (v20 < 0)
            operator delete(__p[0]);
        }
        v21[0] = v4;
        *(_QWORD *)((char *)v21 + *(_QWORD *)(v4 - 24)) = v5;
        v22 = v6;
        v23[0] = v8;
        if (v24 < 0)
          operator delete((void *)v23[8]);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x20BD0022C](&v25);
      }
      v16 = (_QWORD *)v3[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v3[2];
          v18 = *v17 == (_QWORD)v3;
          v3 = v17;
        }
        while (!v18);
      }
      v3 = v17;
    }
    while (v17 != v2);
  }
}

void sub_206DE09B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void ZinIrCompilerParameters::logProcedureSpecific<SpatialSplitMode,0>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void **v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  void *__p[2];
  unsigned __int8 v22;
  _QWORD v23[2];
  uint64_t v24;
  _QWORD v25[10];
  char v26;
  uint64_t v27;
  uint8_t buf[4];
  void **v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v2 = a2 + 1;
  v3 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v4 = *MEMORY[0x24BEDB7F0];
    v5 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v7 = MEMORY[0x24BEDB848] + 16;
    do
    {
      v8 = *((unsigned __int8 *)v3 + 55);
      if ((v8 & 0x80u) != 0)
        v8 = v3[5];
      if (v8)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v23);
        v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"\tproc ", 6);
        v10 = *((char *)v3 + 55);
        if (v10 >= 0)
          v11 = (uint64_t)(v3 + 4);
        else
          v11 = v3[4];
        if (v10 >= 0)
          v12 = *((unsigned __int8 *)v3 + 55);
        else
          v12 = v3[5];
        v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
        v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
        SpatialSplitModeToString(*((_DWORD *)v3 + 14), __p);
        if ((v22 & 0x80u) == 0)
          v15 = __p;
        else
          v15 = (void **)__p[0];
        if ((v22 & 0x80u) == 0)
          v16 = v22;
        else
          v16 = (uint64_t)__p[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
        if ((char)v22 < 0)
          operator delete(__p[0]);
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
        {
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v25, __p);
          v17 = __p;
          if ((v22 & 0x80u) != 0)
            v17 = (void **)__p[0];
          *(_DWORD *)buf = 136315138;
          v29 = v17;
          _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s\n", buf, 0xCu);
          if ((char)v22 < 0)
            operator delete(__p[0]);
        }
        v23[0] = v4;
        *(_QWORD *)((char *)v23 + *(_QWORD *)(v4 - 24)) = v5;
        v24 = v6;
        v25[0] = v7;
        if (v26 < 0)
          operator delete((void *)v25[8]);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x20BD0022C](&v27);
      }
      v18 = (_QWORD *)v3[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v3[2];
          v20 = *v19 == (_QWORD)v3;
          v3 = v19;
        }
        while (!v20);
      }
      v3 = v19;
    }
    while (v19 != v2);
  }
}

void sub_206DE0C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a18);
  _Unwind_Resume(a1);
}

BOOL ZinIrCompilerParameters::getAggressiveTensorCaching(ZinIrCompilerParameters *this)
{
  char *v1;
  int v2;
  void *__p[2];
  char v5;

  v1 = (char *)this + 704;
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_207AF6795);
  v2 = *(unsigned __int8 *)std::map<std::string,BOOL>::at((uint64_t)v1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2 != 0;
}

void sub_206DE0CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinIrCompilerParameters::toString(ZinIrCompilerParameters *this@<X0>, std::string *a2@<X8>)
{
  std::string *v3;
  std::string *v4;
  __int128 v5;
  std::string *p_p;
  std::string::size_type size;
  uint64_t v8;
  const std::string::value_type *v9;
  std::string *v10;
  std::string::size_type v11;
  int v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  int v23;
  std::string *v24;
  std::string::size_type v25;
  int v26;
  std::string *v27;
  std::string::size_type v28;
  std::string::size_type v29;
  std::string *v30;
  std::string *v31;
  std::string *v32;
  std::string::size_type v33;
  const std::string::value_type *v34;
  const std::string::value_type *v35;
  const std::string::value_type *v36;
  std::string *v37;
  std::string::size_type v38;
  const std::string::value_type *v39;
  const std::string::value_type *v40;
  uint64_t v41;
  const std::string::value_type *v42;
  const std::string::value_type *v43;
  std::string::size_type v44;
  std::string::size_type v45;
  std::string::size_type v46;
  std::string *v47;
  std::string::size_type v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  std::string *v54;
  __int128 v55;
  std::string *v56;
  __int128 v57;
  std::string *v58;
  std::string::size_type v59;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  std::string::size_type v63;
  int v64;
  std::string *v65;
  std::string::size_type v66;
  int v67;
  std::string *v68;
  std::string::size_type v69;
  std::string::size_type v70;
  std::string *v71;
  std::string *v72;
  int v73;
  const std::string::value_type *v74;
  const std::string::value_type *v75;
  _BOOL4 DisableMergeScaleBias;
  uint64_t v77;
  uint64_t v78;
  const std::string::value_type *v79;
  uint64_t v80;
  const std::string::value_type *v81;
  int v82;
  std::string *v83;
  std::string::size_type v84;
  const std::string::value_type *v85;
  _BOOL4 ScanWeightsForCompression;
  uint64_t v87;
  const std::string::value_type *v88;
  const std::string::value_type *v89;
  _BOOL4 AggressiveTensorCaching;
  _BOOL4 SingleChannelEWOpCopyRemoval;
  const std::string::value_type *v92;
  int v93;
  int v94;
  const std::string::value_type *v95;
  const std::string::value_type *v96;
  const std::string::value_type *v97;
  uint64_t v98;
  int v99;
  char *v100;
  int v101;
  int v102;
  BOOL v103;
  int v104;
  const std::string::value_type *v105;
  void *v106;
  std::string *v107;
  __int128 v108;
  std::string *v109;
  std::string::size_type v110;
  std::string *v111;
  __int128 v112;
  std::string *v113;
  std::string::size_type v114;
  uint64_t v115;
  std::string *v116;
  __int128 v117;
  std::string *v118;
  std::string::size_type v119;
  std::string *v120;
  __int128 v121;
  std::string *v122;
  std::string::size_type v123;
  std::string::size_type v124;
  std::string *v125;
  __int128 v126;
  std::string *v127;
  std::string::size_type v128;
  void **v129;
  const std::string::value_type *v130;
  std::string *v131;
  std::string::size_type v132;
  unsigned __int8 *v133;
  std::string *v134;
  std::string::size_type v135;
  int *v136;
  std::string *v137;
  std::string::size_type v138;
  void **v139;
  const std::string::value_type *v140;
  std::string *v141;
  std::string::size_type v142;
  void **v143;
  const std::string::value_type *v144;
  std::string *v145;
  std::string::size_type v146;
  void **v147;
  const std::string::value_type *v148;
  std::string *v149;
  std::string::size_type v150;
  std::string *v151;
  std::string *v152;
  std::string v154;
  char v155;
  std::string v156;
  std::string v157;
  std::string __p;
  char v159;
  std::string v160;
  std::string v161;

  v3 = a2;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::operator+<char>();
  v4 = std::string::append(&v154, "\n", 1uLL);
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::string::append(v3, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v154.__r_.__value_.__l.__data_);
  v8 = 0;
  memset(&v161, 0, sizeof(v161));
  while (2)
  {
    switch((int)v8)
    {
      case 0:
        if (*((_DWORD *)this + 31))
          v9 = "true";
        else
          v9 = "false";
        std::string::__assign_external(&v161, v9);
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(0, 1, (uint64_t)&v161, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 1:
        v77 = *((_QWORD *)this + 17);
        std::to_string(&v154, v77);
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(1, v77 > -2, (uint64_t)&v154, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = &__p;
        else
          v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v38 = __p.__r_.__value_.__l.__size_;
        goto LABEL_837;
      case 2:
        v80 = *((_QWORD *)this + 18);
        std::to_string(&v154, v80);
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(2, v80 > -2, (uint64_t)&v154, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = &__p;
        else
          v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v38 = __p.__r_.__value_.__l.__size_;
        goto LABEL_837;
      case 3:
        if (!*((_BYTE *)this + 152))
          goto LABEL_865;
        v74 = "\t-c \n";
        goto LABEL_531;
      case 4:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(4, *((unsigned __int8 *)this + 128), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 5:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(5, *((unsigned __int8 *)this + 129), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 6:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(6, *((unsigned __int8 *)this + 130), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 7:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(7, *((unsigned __int8 *)this + 132), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 8:
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(8, 1, (uint64_t)this + 160, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 9:
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(9, 1, (uint64_t)this + 184, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 10:
        v73 = *((_DWORD *)this + 52);
        std::to_string(&v154, v73);
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(10, v73 != 88, (uint64_t)&v154, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = &__p;
        else
          v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v38 = __p.__r_.__value_.__l.__size_;
        goto LABEL_837;
      case 11:
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(11, 1, (uint64_t)this + 240, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 12:
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(12, 1, (uint64_t)this + 272, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 13:
        v51 = *((_QWORD *)this + 37);
        std::to_string(&v154, v51);
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(13, v51 > 0, (uint64_t)&v154, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = &__p;
        else
          v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v38 = __p.__r_.__value_.__l.__size_;
        goto LABEL_837;
      case 14:
        v78 = *((_QWORD *)this + 38);
        std::to_string(&v154, v78);
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(14, v78 != -1, (uint64_t)&v154, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = &__p;
        else
          v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v38 = __p.__r_.__value_.__l.__size_;
        goto LABEL_837;
      case 15:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(15, *((_DWORD *)this + 82) == 0, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 16:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(16, *((_DWORD *)this + 82) == 1, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 17:
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(17, 1, (uint64_t)this + 216, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 18:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(18, *((_DWORD *)this + 66) == 0, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 19:
        goto LABEL_865;
      case 20:
        if (!*((_BYTE *)this + 100))
          goto LABEL_865;
        v74 = "\t-g \n";
LABEL_531:
        std::string::append(v3, v74, 5uLL);
        goto LABEL_865;
      case 21:
        ScanWeightsForCompression = ZinIrCompilerParameters::getScanWeightsForCompression(this);
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(21, ScanWeightsForCompression, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 22:
        if (*((_BYTE *)this + 131))
          v89 = "disabled";
        else
          v89 = "ident";
        std::string::__assign_external(&v161, v89);
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(22, 1, (uint64_t)&v161, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 23:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(23, *((_DWORD *)this + 78) == 0, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 24:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(24, *((_DWORD *)this + 83) != 0, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 25:
        DisableMergeScaleBias = ZinIrCompilerParameters::getDisableMergeScaleBias(this);
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(25, DisableMergeScaleBias, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 26:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(26, *((unsigned __int8 *)this + 153), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 27:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(27, *((unsigned __int8 *)this + 154), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 28:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(28, *((unsigned __int8 *)this + 155), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 29:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(29, *((unsigned __int8 *)this + 156), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 30:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(30, *((unsigned __int8 *)this + 157), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 31:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(31, *((unsigned __int8 *)this + 158), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 32:
        v87 = *((unsigned __int8 *)this + 359);
        if ((v87 & 0x80u) != 0)
          v87 = *((_QWORD *)this + 43);
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(32, v87 != 0, (uint64_t)this + 336, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 33:
        std::to_string(&v154, *((_DWORD *)this + 90));
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(33, 1, (uint64_t)&v154, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = &__p;
        else
          v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v38 = __p.__r_.__value_.__l.__size_;
        goto LABEL_837;
      case 34:
        ZinIrCompilerParameters::getSpatialSplitMode(this, &v154);
        v44 = HIBYTE(v154.__r_.__value_.__r.__words[2]);
        v45 = v154.__r_.__value_.__l.__size_;
        ZinIrCompilerParameters::getSpatialSplitMode(this, &v160);
        if ((v44 & 0x80u) == 0)
          v46 = v44;
        else
          v46 = v45;
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(34, v46 != 0, (uint64_t)&v160, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v47 = &__p;
        else
          v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v48 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v48 = __p.__r_.__value_.__l.__size_;
        std::string::append(v3, (const std::string::value_type *)v47, v48);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v160.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_840;
        v49 = (void *)v160.__r_.__value_.__r.__words[0];
        goto LABEL_839;
      case 35:
        v41 = *((_QWORD *)this + 60);
        std::to_string(&v154, v41);
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(35, v41 > -2, (uint64_t)&v154, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = &__p;
        else
          v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v38 = __p.__r_.__value_.__l.__size_;
        goto LABEL_837;
      case 36:
        if (ZinIrCompilerParameters::getEnableKernelRewind(this))
          v42 = "enabled";
        else
          v42 = "disabled";
        std::string::__assign_external(&v161, v42);
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(36, 1, (uint64_t)&v161, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 37:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(37, *((_BYTE *)this + 364) == 0, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 38:
        SingleChannelEWOpCopyRemoval = ZinIrCompilerParameters::getSingleChannelEWOpCopyRemoval(this);
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(38, SingleChannelEWOpCopyRemoval, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 39:
        AggressiveTensorCaching = ZinIrCompilerParameters::getAggressiveTensorCaching(this);
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(39, AggressiveTensorCaching, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 40:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(40, *((unsigned __int8 *)this + 365), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 41:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(41, *((unsigned __int8 *)this + 366), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 42:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(42, *((unsigned __int8 *)this + 367), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 43:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(43, *((_DWORD *)this + 81) != 0, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 44:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(44, *((unsigned __int8 *)this + 369), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 45:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(45, *((unsigned __int8 *)this + 370), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 46:
        std::to_string(&v154, *((float *)this + 97));
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(46, 1, (uint64_t)&v154, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = &__p;
        else
          v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v38 = __p.__r_.__value_.__l.__size_;
        goto LABEL_837;
      case 47:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(47, *((unsigned __int8 *)this + 101), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 48:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(48, *((unsigned __int8 *)this + 102), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 49:
        std::to_string(&v154, *((double *)this + 13));
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(49, 1, (uint64_t)&v154, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = &__p;
        else
          v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v38 = __p.__r_.__value_.__l.__size_;
        goto LABEL_837;
      case 50:
        std::to_string(&v154, *((_DWORD *)this + 28));
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(50, 1, (uint64_t)&v154, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = &__p;
        else
          v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v38 = __p.__r_.__value_.__l.__size_;
        goto LABEL_837;
      case 51:
        std::to_string(&v154, *((_DWORD *)this + 29));
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(51, 1, (uint64_t)&v154, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = &__p;
        else
          v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v38 = __p.__r_.__value_.__l.__size_;
        goto LABEL_837;
      case 52:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(52, *((unsigned __int8 *)this + 120), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 53:
        std::to_string(&v154, *((_QWORD *)this + 49));
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(53, 1, (uint64_t)&v154, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = &__p;
        else
          v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v38 = __p.__r_.__value_.__l.__size_;
        goto LABEL_837;
      case 54:
        if (*((_BYTE *)this + 371))
          v92 = "true";
        else
          v92 = "false";
        std::string::__assign_external(&v161, v92);
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(54, 1, (uint64_t)&v161, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 55:
        std::to_string(&v154, *((__int16 *)this + 186));
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(55, 1, (uint64_t)&v154, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = &__p;
        else
          v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v38 = __p.__r_.__value_.__l.__size_;
        goto LABEL_837;
      case 56:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(56, *((unsigned __int8 *)this + 121), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 57:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(57, *((unsigned __int8 *)this + 374), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 58:
        v52 = *((unsigned __int8 *)this + 423);
        if ((v52 & 0x80u) != 0)
          v52 = *((_QWORD *)this + 51);
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(58, v52 != 0, (uint64_t)this + 400, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 59:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(59, *((unsigned __int8 *)this + 375), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 60:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(60, *((unsigned __int8 *)this + 384), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 61:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(61, *((unsigned __int8 *)this + 376), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v83 = &__p;
        else
          v83 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v84 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v84 = __p.__r_.__value_.__l.__size_;
        std::string::append(v3, (const std::string::value_type *)v83, v84);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(60, *((unsigned __int8 *)this + 384), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 62:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(61, *((unsigned __int8 *)this + 376), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 63:
        if (*((_BYTE *)this + 377))
          v79 = "true";
        else
          v79 = "false";
        std::string::__assign_external(&v161, v79);
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(63, 1, (uint64_t)&v161, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 64:
        if (*((_BYTE *)this + 387))
          v75 = "true";
        else
          v75 = "false";
        std::string::__assign_external(&v161, v75);
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(64, 1, (uint64_t)&v161, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 65:
        if (*((_BYTE *)this + 378))
          v85 = "true";
        else
          v85 = "false";
        std::string::__assign_external(&v161, v85);
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(65, 1, (uint64_t)&v161, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 66:
        std::to_string(&v154, *((_DWORD *)this + 95));
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(66, 1, (uint64_t)&v154, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = &__p;
        else
          v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v38 = __p.__r_.__value_.__l.__size_;
        goto LABEL_837;
      case 67:
        v50 = *((unsigned __int8 *)this + 447);
        if ((v50 & 0x80u) != 0)
          v50 = *((_QWORD *)this + 54);
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(67, v50 != 0, (uint64_t)this + 424, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 68:
        v98 = *((unsigned __int8 *)this + 471);
        v99 = (char)v98;
        if ((v98 & 0x80u) != 0)
          v98 = *((_QWORD *)this + 57);
        if (v98 == 6)
        {
          if (v99 >= 0)
            v100 = (char *)this + 448;
          else
            v100 = (char *)*((_QWORD *)this + 56);
          v101 = *(_DWORD *)v100;
          v102 = *((unsigned __int16 *)v100 + 2);
          v103 = v101 == 1952543827 && v102 == 25449;
          v104 = v103;
        }
        else
        {
          v104 = 0;
        }
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(68, v104 ^ 1, (uint64_t)this + 448, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 69:
        if (*((_BYTE *)this + 472))
          v43 = "true";
        else
          v43 = "false";
        std::string::__assign_external(&v161, v43);
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(69, 1, (uint64_t)&v161, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 70:
        if (*((_BYTE *)this + 488))
          v35 = "true";
        else
          v35 = "false";
        std::string::__assign_external(&v161, v35);
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(70, 1, (uint64_t)&v161, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 71:
        if (*((_BYTE *)this + 489))
          v40 = "true";
        else
          v40 = "false";
        std::string::__assign_external(&v161, v40);
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(71, 1, (uint64_t)&v161, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 72:
        v93 = *((unsigned __int8 *)this + 490);
        std::string::basic_string[abi:ne180100]<0>(&v154, "true");
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(72, v93 != 0, (uint64_t)&v154, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = &__p;
        else
          v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v38 = __p.__r_.__value_.__l.__size_;
        goto LABEL_837;
      case 73:
        v94 = *((unsigned __int8 *)this + 491);
        std::string::basic_string[abi:ne180100]<0>(&v154, "true");
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(73, v94 != 0, (uint64_t)&v154, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = &__p;
        else
          v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v38 = __p.__r_.__value_.__l.__size_;
        goto LABEL_837;
      case 74:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(74, *((unsigned __int8 *)this + 492), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 75:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(75, *((unsigned __int8 *)this + 493), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 76:
        v82 = *((unsigned __int8 *)this + 494);
        std::string::basic_string[abi:ne180100]<0>(&v154, "true");
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(76, v82 != 0, (uint64_t)&v154, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = &__p;
        else
          v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v38 = __p.__r_.__value_.__l.__size_;
        goto LABEL_837;
      case 77:
        if (*((_BYTE *)this + 497))
          v36 = "true";
        else
          v36 = "false";
        std::string::__assign_external(&v161, v36);
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(77, 1, (uint64_t)&v161, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 78:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(78, *((unsigned __int8 *)this + 495), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 79:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(79, *((unsigned __int8 *)this + 496), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 80:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(80, *((unsigned __int8 *)this + 498), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 81:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(81, *((unsigned __int8 *)this + 499), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 82:
        v53 = *((_DWORD *)this + 125);
        if (!v53)
          goto LABEL_865;
        ZinIrCompilerParamsUtils::PerfTracerCategoryToString(v53, &__p);
        if (!v159)
          ZinAssertImpl("Invalid perf tracer metric.");
        std::string::basic_string[abi:ne180100]<0>(&v156, ANEC_options[v8]);
        v54 = std::string::insert(&v156, 0, "\t--", 3uLL);
        v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
        v157.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v55;
        v54->__r_.__value_.__l.__size_ = 0;
        v54->__r_.__value_.__r.__words[2] = 0;
        v54->__r_.__value_.__r.__words[0] = 0;
        v56 = std::string::append(&v157, " ", 1uLL);
        v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
        v160.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v160.__r_.__value_.__l.__data_ = v57;
        v56->__r_.__value_.__l.__size_ = 0;
        v56->__r_.__value_.__r.__words[2] = 0;
        v56->__r_.__value_.__r.__words[0] = 0;
        if (!v159)
          std::__throw_bad_optional_access[abi:ne180100]();
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v58 = &__p;
        else
          v58 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v59 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v59 = __p.__r_.__value_.__l.__size_;
        v60 = std::string::append(&v160, (const std::string::value_type *)v58, v59);
        v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
        v154.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v61;
        v60->__r_.__value_.__l.__size_ = 0;
        v60->__r_.__value_.__r.__words[2] = 0;
        v60->__r_.__value_.__r.__words[0] = 0;
        if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v62 = &v154;
        else
          v62 = (std::string *)v154.__r_.__value_.__r.__words[0];
        if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v63 = HIBYTE(v154.__r_.__value_.__r.__words[2]);
        else
          v63 = v154.__r_.__value_.__l.__size_;
        std::string::append(v3, (const std::string::value_type *)v62, v63);
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v154.__r_.__value_.__l.__data_);
        if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v160.__r_.__value_.__l.__data_);
        if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v157.__r_.__value_.__l.__data_);
        if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v156.__r_.__value_.__l.__data_);
        memset(&v160, 0, sizeof(v160));
        v64 = *((_DWORD *)this + 126);
        if (v64)
        {
          ZinIrCompilerParamsUtils::PerfTracerMetricToString(v64, &v154);
          if (!v155)
            ZinAssertImpl("Invalid perf tracer metric.");
          std::operator+<char>();
          if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v65 = &v157;
          else
            v65 = (std::string *)v157.__r_.__value_.__r.__words[0];
          if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v66 = HIBYTE(v157.__r_.__value_.__r.__words[2]);
          else
            v66 = v157.__r_.__value_.__l.__size_;
          std::string::append(&v160, (const std::string::value_type *)v65, v66);
          if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v157.__r_.__value_.__l.__data_);
          if (v155 && SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v154.__r_.__value_.__l.__data_);
        }
        v67 = *((_DWORD *)this + 127);
        if (v67)
        {
          ZinIrCompilerParamsUtils::PerfTracerMetricToString(v67, &v154);
          if (!v155)
            ZinAssertImpl("Invalid perf tracer metric.");
          std::operator+<char>();
          if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v68 = &v157;
          else
            v68 = (std::string *)v157.__r_.__value_.__r.__words[0];
          if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v69 = HIBYTE(v157.__r_.__value_.__r.__words[2]);
          else
            v69 = v157.__r_.__value_.__l.__size_;
          std::string::append(&v160, (const std::string::value_type *)v68, v69);
          if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v157.__r_.__value_.__l.__data_);
          if (v155 && SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v154.__r_.__value_.__l.__data_);
        }
        if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v70 = HIBYTE(v160.__r_.__value_.__r.__words[2]);
        else
          v70 = v160.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&v154, v70 + 1);
        if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v71 = &v154;
        else
          v71 = (std::string *)v154.__r_.__value_.__r.__words[0];
        if (v70)
        {
          if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v72 = &v160;
          else
            v72 = (std::string *)v160.__r_.__value_.__r.__words[0];
          memmove(v71, v72, v70);
        }
        *(_WORD *)((char *)&v71->__r_.__value_.__l.__data_ + v70) = 10;
        if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v32 = &v154;
        else
          v32 = (std::string *)v154.__r_.__value_.__r.__words[0];
        if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v33 = HIBYTE(v154.__r_.__value_.__r.__words[2]);
        else
          v33 = v154.__r_.__value_.__l.__size_;
        goto LABEL_379;
      case 83:
        v12 = *((_DWORD *)this + 128);
        if (!v12)
          goto LABEL_865;
        ZinIrCompilerParamsUtils::PerfTracerCategoryToString(v12, &__p);
        if (!v159)
          ZinAssertImpl("Invalid perf tracer metric.");
        std::string::basic_string[abi:ne180100]<0>(&v156, ANEC_options[v8]);
        v13 = std::string::insert(&v156, 0, "\t--", 3uLL);
        v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v157.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        v15 = std::string::append(&v157, " ", 1uLL);
        v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        v160.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v160.__r_.__value_.__l.__data_ = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        if (!v159)
          std::__throw_bad_optional_access[abi:ne180100]();
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v17 = &__p;
        else
          v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v18 = __p.__r_.__value_.__l.__size_;
        v19 = std::string::append(&v160, (const std::string::value_type *)v17, v18);
        v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        v154.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v21 = &v154;
        else
          v21 = (std::string *)v154.__r_.__value_.__r.__words[0];
        if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v22 = HIBYTE(v154.__r_.__value_.__r.__words[2]);
        else
          v22 = v154.__r_.__value_.__l.__size_;
        std::string::append(v3, (const std::string::value_type *)v21, v22);
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v154.__r_.__value_.__l.__data_);
        if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v160.__r_.__value_.__l.__data_);
        if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v157.__r_.__value_.__l.__data_);
        if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v156.__r_.__value_.__l.__data_);
        memset(&v160, 0, sizeof(v160));
        v23 = *((_DWORD *)this + 129);
        if (v23)
        {
          ZinIrCompilerParamsUtils::PerfTracerMetricToString(v23, &v154);
          if (!v155)
            ZinAssertImpl("Invalid perf tracer metric.");
          std::operator+<char>();
          if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v24 = &v157;
          else
            v24 = (std::string *)v157.__r_.__value_.__r.__words[0];
          if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v25 = HIBYTE(v157.__r_.__value_.__r.__words[2]);
          else
            v25 = v157.__r_.__value_.__l.__size_;
          std::string::append(&v160, (const std::string::value_type *)v24, v25);
          if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v157.__r_.__value_.__l.__data_);
          if (v155 && SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v154.__r_.__value_.__l.__data_);
        }
        v26 = *((_DWORD *)this + 130);
        if (v26)
        {
          ZinIrCompilerParamsUtils::PerfTracerMetricToString(v26, &v154);
          if (!v155)
            ZinAssertImpl("Invalid perf tracer metric.");
          std::operator+<char>();
          if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v27 = &v157;
          else
            v27 = (std::string *)v157.__r_.__value_.__r.__words[0];
          if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v28 = HIBYTE(v157.__r_.__value_.__r.__words[2]);
          else
            v28 = v157.__r_.__value_.__l.__size_;
          std::string::append(&v160, (const std::string::value_type *)v27, v28);
          if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v157.__r_.__value_.__l.__data_);
          if (v155 && SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v154.__r_.__value_.__l.__data_);
        }
        if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v29 = HIBYTE(v160.__r_.__value_.__r.__words[2]);
        else
          v29 = v160.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&v154, v29 + 1);
        if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v30 = &v154;
        else
          v30 = (std::string *)v154.__r_.__value_.__r.__words[0];
        if (v29)
        {
          if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v31 = &v160;
          else
            v31 = (std::string *)v160.__r_.__value_.__r.__words[0];
          memmove(v30, v31, v29);
        }
        *(_WORD *)((char *)&v30->__r_.__value_.__l.__data_ + v29) = 10;
        if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v32 = &v154;
        else
          v32 = (std::string *)v154.__r_.__value_.__r.__words[0];
        if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v33 = HIBYTE(v154.__r_.__value_.__r.__words[2]);
        else
          v33 = v154.__r_.__value_.__l.__size_;
LABEL_379:
        v3 = a2;
        std::string::append(a2, (const std::string::value_type *)v32, v33);
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v154.__r_.__value_.__l.__data_);
        if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v160.__r_.__value_.__l.__data_);
        if (!v159)
          goto LABEL_865;
        goto LABEL_862;
      case 84:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(84, *((unsigned __int8 *)this + 524), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 85:
        if (!*((_BYTE *)this + 386))
          goto LABEL_865;
        if (*((_BYTE *)this + 385))
          v88 = "true";
        else
          v88 = "false";
        std::string::__assign_external(&v161, v88);
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(85, 1, (uint64_t)&v161, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 86:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(86, *((unsigned __int8 *)this + 525), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 87:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(87, *((unsigned __int8 *)this + 526), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 88:
        std::to_string(&v154, *((_DWORD *)this + 135));
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(88, 1, (uint64_t)&v154, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = &__p;
        else
          v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v38 = __p.__r_.__value_.__l.__size_;
        goto LABEL_837;
      case 89:
        std::to_string(&v154, *((_DWORD *)this + 136));
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(89, 1, (uint64_t)&v154, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = &__p;
        else
          v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v38 = __p.__r_.__value_.__l.__size_;
        goto LABEL_837;
      case 90:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(90, *((unsigned __int8 *)this + 538), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 91:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(91, *((unsigned __int8 *)this + 527), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 92:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(92, *((unsigned __int8 *)this + 528), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 93:
        if (!*((_BYTE *)this + 552))
          goto LABEL_865;
        E4M3OverflowToString(*((_DWORD *)this + 137), &v154);
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(93, 1, (uint64_t)&v154, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = &__p;
        else
          v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v38 = __p.__r_.__value_.__l.__size_;
LABEL_837:
        std::string::append(v3, (const std::string::value_type *)v37, v38);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          v49 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_839:
          operator delete(v49);
        }
LABEL_840:
        if ((SHIBYTE(v154.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_865;
        v106 = (void *)v154.__r_.__value_.__r.__words[0];
        goto LABEL_864;
      case 94:
        if (!*((_BYTE *)this + 557))
          goto LABEL_865;
        if (*((_BYTE *)this + 556))
          v81 = "true";
        else
          v81 = "false";
        std::string::__assign_external(&v161, v81);
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(94, 1, (uint64_t)&v161, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
LABEL_861:
        std::string::append(v3, (const std::string::value_type *)v10, v11);
LABEL_862:
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_865;
        v106 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_864:
        operator delete(v106);
LABEL_865:
        if (++v8 != 106)
          continue;
        if (*((_DWORD *)this + 80))
          std::string::append(v3, "\t--Wl-force-coalesce-externs\n", 0x1DuLL);
        if (*((_DWORD *)this + 79))
          std::string::append(v3, "\t--Wl-undefined=fvmlib\n", 0x17uLL);
        if (*((_BYTE *)this + 736))
        {
          std::operator+<char>();
          v107 = std::string::append(&v154, "\n", 1uLL);
          v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v108;
          v107->__r_.__value_.__l.__size_ = 0;
          v107->__r_.__value_.__r.__words[2] = 0;
          v107->__r_.__value_.__r.__words[0] = 0;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v109 = &__p;
          else
            v109 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v110 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v110 = __p.__r_.__value_.__l.__size_;
          std::string::append(v3, (const std::string::value_type *)v109, v110);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v154.__r_.__value_.__l.__data_);
        }
        std::operator+<char>();
        v111 = std::string::append(&v154, "\n", 1uLL);
        v112 = *(_OWORD *)&v111->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v111->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v112;
        v111->__r_.__value_.__l.__size_ = 0;
        v111->__r_.__value_.__r.__words[2] = 0;
        v111->__r_.__value_.__r.__words[0] = 0;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v113 = &__p;
        else
          v113 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v114 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v114 = __p.__r_.__value_.__l.__size_;
        std::string::append(v3, (const std::string::value_type *)v113, v114);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v154.__r_.__value_.__l.__data_);
        v115 = *((unsigned __int8 *)this + 71);
        if ((v115 & 0x80u) != 0)
          v115 = *((_QWORD *)this + 7);
        if (v115)
        {
          std::operator+<char>();
          v116 = std::string::append(&v154, "\n", 1uLL);
          v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v117;
          v116->__r_.__value_.__l.__size_ = 0;
          v116->__r_.__value_.__r.__words[2] = 0;
          v116->__r_.__value_.__r.__words[0] = 0;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v118 = &__p;
          else
            v118 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v119 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v119 = __p.__r_.__value_.__l.__size_;
          std::string::append(v3, (const std::string::value_type *)v118, v119);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v154.__r_.__value_.__l.__data_);
        }
        std::operator+<char>();
        v120 = std::string::append(&v154, "\n", 1uLL);
        v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v120->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v121;
        v120->__r_.__value_.__l.__size_ = 0;
        v120->__r_.__value_.__r.__words[2] = 0;
        v120->__r_.__value_.__r.__words[0] = 0;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v122 = &__p;
        else
          v122 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v123 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v123 = __p.__r_.__value_.__l.__size_;
        std::string::append(v3, (const std::string::value_type *)v122, v123);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v154.__r_.__value_.__l.__data_);
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
        ZinIrCompilerParameters::ProcedureSpecific::GetSpecializedProcedures((_QWORD *)this + 70, (uint64_t **)&__p);
        v124 = __p.__r_.__value_.__r.__words[0];
        if ((std::string::size_type *)__p.__r_.__value_.__l.__data_ != &__p.__r_.__value_.__r.__words[1])
        {
          do
          {
            std::operator+<char>();
            v125 = std::string::append(&v160, ":\n", 2uLL);
            v126 = *(_OWORD *)&v125->__r_.__value_.__l.__data_;
            v154.__r_.__value_.__r.__words[2] = v125->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v126;
            v125->__r_.__value_.__l.__size_ = 0;
            v125->__r_.__value_.__r.__words[2] = 0;
            v125->__r_.__value_.__r.__words[0] = 0;
            if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v127 = &v154;
            else
              v127 = (std::string *)v154.__r_.__value_.__r.__words[0];
            if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v128 = HIBYTE(v154.__r_.__value_.__r.__words[2]);
            else
              v128 = v154.__r_.__value_.__l.__size_;
            std::string::append(a2, (const std::string::value_type *)v127, v128);
            if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v154.__r_.__value_.__l.__data_);
            if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v160.__r_.__value_.__l.__data_);
            v129 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)this + 608, (void **)(v124 + 32));
            if ((void **)((char *)this + 616) != v129)
            {
              v130 = *((_BYTE *)v129 + 56) ? "true" : "false";
              std::string::__assign_external(&v161, v130);
              ZinIrCompilerParameters::toString(void)const::$_0::operator()(36, 1, (uint64_t)&v161, &v154);
              v131 = (v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                   ? &v154
                   : (std::string *)v154.__r_.__value_.__r.__words[0];
              v132 = (v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                   ? HIBYTE(v154.__r_.__value_.__r.__words[2])
                   : v154.__r_.__value_.__l.__size_;
              std::string::append(a2, (const std::string::value_type *)v131, v132);
              if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v154.__r_.__value_.__l.__data_);
            }
            v133 = (unsigned __int8 *)std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)this + 632, (void **)(v124 + 32));
            if ((unsigned __int8 *)((char *)this + 640) != v133)
            {
              ZinIrCompilerParameters::toString(void)const::$_1::operator()(21, v133[56], &v154);
              v134 = (v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                   ? &v154
                   : (std::string *)v154.__r_.__value_.__r.__words[0];
              v135 = (v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                   ? HIBYTE(v154.__r_.__value_.__r.__words[2])
                   : v154.__r_.__value_.__l.__size_;
              std::string::append(a2, (const std::string::value_type *)v134, v135);
              if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v154.__r_.__value_.__l.__data_);
            }
            v136 = (int *)std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)this + 560, (void **)(v124 + 32));
            if ((int *)((char *)this + 568) != v136)
            {
              SpatialSplitModeToString(v136[14], &v160);
              ZinIrCompilerParameters::toString(void)const::$_0::operator()(34, 1, (uint64_t)&v160, &v154);
              if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v137 = &v154;
              else
                v137 = (std::string *)v154.__r_.__value_.__r.__words[0];
              if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v138 = HIBYTE(v154.__r_.__value_.__r.__words[2]);
              else
                v138 = v154.__r_.__value_.__l.__size_;
              std::string::append(a2, (const std::string::value_type *)v137, v138);
              if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v154.__r_.__value_.__l.__data_);
              if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v160.__r_.__value_.__l.__data_);
            }
            v139 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)this + 656, (void **)(v124 + 32));
            if ((void **)((char *)this + 664) != v139)
            {
              v140 = *((_BYTE *)v139 + 56) ? "true" : "false";
              std::string::__assign_external(&v161, v140);
              ZinIrCompilerParameters::toString(void)const::$_0::operator()(25, 1, (uint64_t)&v161, &v154);
              v141 = (v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                   ? &v154
                   : (std::string *)v154.__r_.__value_.__r.__words[0];
              v142 = (v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                   ? HIBYTE(v154.__r_.__value_.__r.__words[2])
                   : v154.__r_.__value_.__l.__size_;
              std::string::append(a2, (const std::string::value_type *)v141, v142);
              if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v154.__r_.__value_.__l.__data_);
            }
            v143 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)this + 680, (void **)(v124 + 32));
            if ((void **)((char *)this + 688) != v143)
            {
              v144 = *((_BYTE *)v143 + 56) ? "true" : "false";
              std::string::__assign_external(&v161, v144);
              ZinIrCompilerParameters::toString(void)const::$_0::operator()(38, 1, (uint64_t)&v161, &v154);
              v145 = (v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                   ? &v154
                   : (std::string *)v154.__r_.__value_.__r.__words[0];
              v146 = (v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                   ? HIBYTE(v154.__r_.__value_.__r.__words[2])
                   : v154.__r_.__value_.__l.__size_;
              std::string::append(a2, (const std::string::value_type *)v145, v146);
              if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v154.__r_.__value_.__l.__data_);
            }
            v147 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)this + 704, (void **)(v124 + 32));
            if ((void **)((char *)this + 712) != v147)
            {
              v148 = *((_BYTE *)v147 + 56) ? "true" : "false";
              std::string::__assign_external(&v161, v148);
              ZinIrCompilerParameters::toString(void)const::$_0::operator()(39, 1, (uint64_t)&v161, &v154);
              v149 = (v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                   ? &v154
                   : (std::string *)v154.__r_.__value_.__r.__words[0];
              v150 = (v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                   ? HIBYTE(v154.__r_.__value_.__r.__words[2])
                   : v154.__r_.__value_.__l.__size_;
              std::string::append(a2, (const std::string::value_type *)v149, v150);
              if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v154.__r_.__value_.__l.__data_);
            }
            v151 = *(std::string **)(v124 + 8);
            if (v151)
            {
              do
              {
                v152 = v151;
                v151 = (std::string *)v151->__r_.__value_.__r.__words[0];
              }
              while (v151);
            }
            else
            {
              do
              {
                v152 = *(std::string **)(v124 + 16);
                v103 = v152->__r_.__value_.__r.__words[0] == v124;
                v124 = (std::string::size_type)v152;
              }
              while (!v103);
            }
            v124 = (std::string::size_type)v152;
          }
          while (v152 != (std::string *)&__p.__r_.__value_.__r.__words[1]);
        }
        std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy((uint64_t)&__p, (char *)__p.__r_.__value_.__l.__size_);
        if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v161.__r_.__value_.__l.__data_);
        return;
      case 95:
        if (*((_BYTE *)this + 558))
          v105 = "true";
        else
          v105 = "false";
        std::string::__assign_external(&v161, v105);
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(95, *((unsigned __int8 *)this + 558), (uint64_t)&v161, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 96:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(96, *((unsigned __int8 *)this + 529), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 97:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(97, *((unsigned __int8 *)this + 530), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 98:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(98, *((unsigned __int8 *)this + 531), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 99:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(99, *((unsigned __int8 *)this + 532), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 100:
        ZinIrCompilerParameters::toString(void)const::$_1::operator()(100, *((unsigned __int8 *)this + 533), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 101:
        if (*((_BYTE *)this + 559))
          v97 = "true";
        else
          v97 = "false";
        std::string::__assign_external(&v161, v97);
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(101, *((unsigned __int8 *)this + 559), (uint64_t)&v161, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 102:
        if (*((_BYTE *)this + 534))
          v39 = "true";
        else
          v39 = "false";
        std::string::__assign_external(&v161, v39);
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(102, 1, (uint64_t)&v161, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 103:
        if (*((_BYTE *)this + 535))
          v96 = "true";
        else
          v96 = "false";
        std::string::__assign_external(&v161, v96);
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(103, 1, (uint64_t)&v161, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 104:
        if (*((_BYTE *)this + 536))
          v95 = "true";
        else
          v95 = "false";
        std::string::__assign_external(&v161, v95);
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(104, 1, (uint64_t)&v161, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      case 105:
        if (*((_BYTE *)this + 368))
          v34 = "true";
        else
          v34 = "false";
        std::string::__assign_external(&v161, v34);
        ZinIrCompilerParameters::toString(void)const::$_0::operator()(105, 1, (uint64_t)&v161, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &__p;
        else
          v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v11 = __p.__r_.__value_.__l.__size_;
        goto LABEL_861;
      default:
        ZinAssertImpl("Missing handling of options in ZinIrCompilerParameters");
    }
  }
}

void sub_206DE3748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46)
{
  uint64_t v46;

  if (*(char *)(v46 - 89) < 0)
    operator delete(*(void **)(v46 - 112));
  if (*(char *)(a18 + 23) < 0)
    operator delete(*(void **)a18);
  _Unwind_Resume(exception_object);
}

void ZinIrCompilerParameters::toString(void)const::$_0::operator()(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;

  if (a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v17, ANEC_options[a1]);
    v6 = std::string::insert(&v17, 0, "\t--", 3uLL);
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    v8 = std::string::append(&v18, "=", 1uLL);
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = *(char *)(a3 + 23);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)a3;
    else
      v11 = *(const std::string::value_type **)a3;
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(a3 + 23);
    else
      v12 = *(_QWORD *)(a3 + 8);
    v13 = std::string::append(&v19, v11, v12);
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v20, "\n", 1uLL);
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    a4[2] = *((_QWORD *)&v15->__r_.__value_.__l + 2);
    *(_OWORD *)a4 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a4, &byte_207AF6795);
  }
}

void sub_206DE3EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 25) < 0)
    operator delete(*(void **)(v28 - 48));
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void ZinIrCompilerParameters::toString(void)const::$_1::operator()(int a1@<W0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  std::string v8;
  std::string v9;

  if (a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, ANEC_options[a1]);
    v4 = std::string::insert(&v8, 0, "\t--", 3uLL);
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v9.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    v6 = std::string::append(&v9, "\n", 1uLL);
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    a3[2] = *((_QWORD *)&v6->__r_.__value_.__l + 2);
    *(_OWORD *)a3 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v8.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a3, &byte_207AF6795);
  }
}

void sub_206DE4030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrCompilerParameters::parseFromString(const std::string *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  const char *v10;
  size_t v11;
  const char *v12;
  size_t v13;
  __int128 v14;
  std::string *v15;
  _QWORD *v16;
  std::string *v17;
  std::string::size_type v18;
  __int128 v19;
  std::string *v20;
  _QWORD *v21;
  std::string *v22;
  std::string::size_type v23;
  std::string __p;
  std::string v26;
  std::string *__str;
  std::string *v28;
  unint64_t v29;
  _QWORD v30[13];
  char v31;
  uint64_t v32;
  _QWORD v33[13];
  char v34;
  uint64_t v35;
  char *v36;
  size_t v37;
  unsigned __int8 v38;
  char *v39;
  size_t v40;
  unsigned __int8 v41;
  __int128 v42;
  std::string::size_type v43;
  std::string v44;

  memset(&v44, 0, sizeof(v44));
  v42 = 0uLL;
  v43 = 0;
  *(_DWORD *)(a2 + 316) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v39, "\t--");
  std::string::basic_string[abi:ne180100]<0>(&v36, "\t-");
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v33, a1, 24);
  v4 = *MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v7 = MEMORY[0x24BEDB848] + 16;
  while (1)
  {
    v8 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v33, (uint64_t)&v44, 0xAu);
    if ((*((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 32) & 5) != 0)
      break;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v30, &v44, 24);
    __str = 0;
    v28 = 0;
    v29 = 0;
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v44;
    else
      v9 = (std::string *)v44.__r_.__value_.__r.__words[0];
    if ((v41 & 0x80u) == 0)
      v10 = (const char *)&v39;
    else
      v10 = v39;
    if ((v41 & 0x80u) == 0)
      v11 = v41;
    else
      v11 = v40;
    if (!strncmp((const char *)v9, v10, v11))
    {
      while (1)
      {
        v16 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v30, (uint64_t)&v42, 0x3Du);
        v17 = v28;
        if ((*((_BYTE *)v16 + *(_QWORD *)(*v16 - 24) + 32) & 5) != 0)
          break;
        if ((unint64_t)v28 >= v29)
        {
          v15 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t)&__str, (uint64_t)&v42);
        }
        else
        {
          if (SHIBYTE(v43) < 0)
          {
            std::string::__init_copy_ctor_external(v28, (const std::string::value_type *)v42, *((std::string::size_type *)&v42 + 1));
          }
          else
          {
            v14 = v42;
            v28->__r_.__value_.__r.__words[2] = v43;
            *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v14;
          }
          v15 = v17 + 1;
        }
        v28 = v15;
      }
      if (v28 == __str)
LABEL_71:
        ZinAssertImpl("Invalid option line", *(_OWORD *)&__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__r.__words[2]);
      if ((v41 & 0x80u) == 0)
        v18 = v41;
      else
        v18 = v40;
      std::string::basic_string(&v26, __str, v18, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__p);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (char *)__str) >> 3) < 2)
        goto LABEL_51;
      if (SHIBYTE(__str[1].__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_52;
      __p = __str[1];
    }
    else
    {
      if ((v38 & 0x80u) == 0)
        v12 = (const char *)&v36;
      else
        v12 = v36;
      if ((v38 & 0x80u) == 0)
        v13 = v38;
      else
        v13 = v37;
      if (strncmp((const char *)v9, v12, v13))
        goto LABEL_57;
      while (1)
      {
        v21 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v30, (uint64_t)&v42, 0x20u);
        v22 = v28;
        if ((*((_BYTE *)v21 + *(_QWORD *)(*v21 - 24) + 32) & 5) != 0)
          break;
        if ((unint64_t)v28 >= v29)
        {
          v20 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t)&__str, (uint64_t)&v42);
        }
        else
        {
          if (SHIBYTE(v43) < 0)
          {
            std::string::__init_copy_ctor_external(v28, (const std::string::value_type *)v42, *((std::string::size_type *)&v42 + 1));
          }
          else
          {
            v19 = v42;
            v28->__r_.__value_.__r.__words[2] = v43;
            *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v19;
          }
          v20 = v22 + 1;
        }
        v28 = v20;
      }
      if (v28 == __str)
        goto LABEL_71;
      if ((v38 & 0x80u) == 0)
        v23 = v38;
      else
        v23 = v37;
      std::string::basic_string(&v26, __str, v23, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__p);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (char *)__str) >> 3) < 2)
      {
LABEL_51:
        std::string::basic_string[abi:ne180100]<0>(&__p, &byte_207AF6795);
        goto LABEL_53;
      }
      if (SHIBYTE(__str[1].__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_52:
        std::string::__init_copy_ctor_external(&__p, __str[1].__r_.__value_.__l.__data_, __str[1].__r_.__value_.__l.__size_);
        goto LABEL_53;
      }
      __p = __str[1];
    }
LABEL_53:
    parseANECOptionFromString((unsigned __int8 *)&v26, &__p, a2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
LABEL_57:
    v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
    v30[0] = v4;
    *(_QWORD *)((char *)v30 + *(_QWORD *)(v4 - 24)) = v6;
    v30[2] = v5;
    v30[3] = v7;
    if (v31 < 0)
      operator delete((void *)v30[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD0022C](&v32);
  }
  v33[0] = v4;
  *(_QWORD *)((char *)v33 + *(_QWORD *)(v4 - 24)) = v6;
  v33[2] = v5;
  v33[3] = MEMORY[0x24BEDB848] + 16;
  if (v34 < 0)
    operator delete((void *)v33[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD0022C](&v35);
  if ((char)v38 < 0)
    operator delete(v36);
  if ((char)v41 < 0)
    operator delete(v39);
  if (SHIBYTE(v43) < 0)
    operator delete((void *)v42);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  return 0;
}

void sub_206DE4514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  uint64_t v59;

  if (*(char *)(v59 - 161) < 0)
    operator delete(*(void **)(v59 - 184));
  if (*(char *)(v59 - 137) < 0)
    operator delete(*(void **)(v59 - 160));
  if (*(char *)(v59 - 113) < 0)
    operator delete(*(void **)(v59 - 136));
  if (*(char *)(v59 - 89) < 0)
    operator delete(*(void **)(v59 - 112));
  _Unwind_Resume(exception_object);
}

_QWORD *std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](_QWORD *a1, const std::string *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::ios_base *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = MEMORY[0x24BEDB858];
  v6 = MEMORY[0x24BEDB858] + 104;
  a1[16] = MEMORY[0x24BEDB858] + 104;
  a1[2] = v5 + 64;
  v7 = a1 + 2;
  v8 = (uint64_t)(a1 + 3);
  v9 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v11 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *a1 = v10;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v10 - 24)) = v11;
  a1[1] = 0;
  v12 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v12, a1 + 3);
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  v13 = v9[4];
  v14 = v9[5];
  a1[2] = v13;
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v13 - 24)) = v14;
  v15 = v9[1];
  *a1 = v15;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v15 - 24)) = v9[6];
  *a1 = v5 + 24;
  a1[16] = v6;
  a1[2] = v5 + 64;
  std::stringbuf::basic_stringbuf[abi:ne180100](v8, a2, a3);
  return a1;
}

void sub_206DE46F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x20BD0022C](v1);
  _Unwind_Resume(a1);
}

void parseANECOptionFromString(unsigned __int8 *a1, std::string *__str, uint64_t a3)
{
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  int v9;
  std::string *v10;
  uint64_t *v11;
  unsigned int v12;
  uint64_t **v13;
  void *__p[2];
  char v15;
  void **v16;

  v6 = a1[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a1 + 1);
  if (v6 == 1)
  {
    if (v7 >= 0)
      v8 = a1;
    else
      v8 = *(unsigned __int8 **)a1;
    v9 = *v8;
    if (v9 > 110)
    {
      switch(v9)
      {
        case 'o':
          v10 = (std::string *)(a3 + 24);
          goto LABEL_18;
        case 'p':
          ZinIrCompilerParameters::setOptionsFile(a3, (uint64_t)__str);
          return;
        case 's':
          v10 = (std::string *)(a3 + 48);
          goto LABEL_18;
      }
    }
    else
    {
      switch(v9)
      {
        case 'c':
          *(_BYTE *)(a3 + 152) = 1;
          return;
        case 'g':
          *(_BYTE *)(a3 + 100) = 1;
          return;
        case 'i':
          v10 = (std::string *)a3;
LABEL_18:
          std::string::operator=(v10, __str);
          return;
      }
    }
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "t"))
  {
    v10 = (std::string *)(a3 + 72);
    goto LABEL_18;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "Wl-force-coalesce-externs"))
  {
    *(_DWORD *)(a3 + 320) = 1;
    return;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "Wl-undefined")&& std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "fvmlib"))
  {
    *(_DWORD *)(a3 + 316) = 1;
    return;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, ANEC_options[0]))
  {
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "true")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "false"))
    {
      *(_DWORD *)(a3 + 124) = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "true");
      return;
    }
LABEL_283:
    ZinAssertImpl("Invalid option argument");
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518B58[0]))
  {
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, &byte_207AF6795))
    {
      goto LABEL_283;
    }
    *(_QWORD *)(a3 + 136) = std::stoi(__str, 0, 10);
    return;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518B60[0]))
  {
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, &byte_207AF6795))
    {
      goto LABEL_283;
    }
    *(_QWORD *)(a3 + 144) = std::stoi(__str, 0, 10);
    return;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518B70[0]))
  {
    *(_BYTE *)(a3 + 128) = 1;
    return;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518B78[0]))
  {
    *(_BYTE *)(a3 + 129) = 1;
    return;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518B80[0]))
  {
    *(_BYTE *)(a3 + 130) = 1;
    return;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518B88[0]))
  {
    *(_BYTE *)(a3 + 132) = 1;
    return;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518B90[0]))
  {
    if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, &byte_207AF6795))
    {
      v10 = (std::string *)(a3 + 160);
      goto LABEL_18;
    }
    goto LABEL_283;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518B98[0]))
  {
    if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, &byte_207AF6795))
    {
      v10 = (std::string *)(a3 + 184);
      goto LABEL_18;
    }
    goto LABEL_283;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518BA0[0]))
  {
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, &byte_207AF6795))
    {
      goto LABEL_283;
    }
    *(_DWORD *)(a3 + 208) = std::stoi(__str, 0, 10);
    return;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518BA8[0]))
  {
    if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, &byte_207AF6795))
    {
      v10 = (std::string *)(a3 + 240);
      goto LABEL_18;
    }
    goto LABEL_283;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518BB0[0]))
  {
    if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, &byte_207AF6795))
    {
      v10 = (std::string *)(a3 + 272);
      goto LABEL_18;
    }
    goto LABEL_283;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518BB8[0]))
  {
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, &byte_207AF6795))
    {
      goto LABEL_283;
    }
    *(_QWORD *)(a3 + 296) = std::stoi(__str, 0, 10);
    return;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518BC0[0]))
  {
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, &byte_207AF6795))
    {
      goto LABEL_283;
    }
    *(_QWORD *)(a3 + 304) = std::stoi(__str, 0, 10);
    return;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518BC8[0]))
  {
    *(_DWORD *)(a3 + 328) = 0;
    return;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518BD0[0]))
  {
    *(_DWORD *)(a3 + 328) = 1;
    return;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518BD8[0]))
  {
    if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, &byte_207AF6795))
    {
      v10 = (std::string *)(a3 + 216);
      goto LABEL_18;
    }
    goto LABEL_283;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518BE0[0]))
  {
    *(_DWORD *)(a3 + 264) = 0;
    return;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518BF8[0]))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_207AF6795);
    v16 = __p;
    v11 = std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a3 + 632), __p, (uint64_t)&std::piecewise_construct, (__int128 **)&v16);
    goto LABEL_79;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518C00[0]))
  {
    if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "disabled")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "ident"))
    {
      goto LABEL_283;
    }
    *(_BYTE *)(a3 + 131) = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "disabled");
  }
  else
  {
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518C08[0]))
    {
      *(_DWORD *)(a3 + 312) = 0;
      return;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518C10[0]))
    {
      *(_DWORD *)(a3 + 332) = 1;
      return;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518C18[0]))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, &byte_207AF6795);
      v16 = __p;
      v11 = std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a3 + 656), __p, (uint64_t)&std::piecewise_construct, (__int128 **)&v16);
      goto LABEL_79;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518C20[0]))
    {
      *(_BYTE *)(a3 + 153) = 1;
      return;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518C28[0]))
    {
      *(_BYTE *)(a3 + 154) = 1;
      return;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518C30[0]))
    {
      *(_BYTE *)(a3 + 155) = 1;
      return;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518C38[0]))
    {
      *(_BYTE *)(a3 + 156) = 1;
      return;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518C40[0]))
    {
      *(_BYTE *)(a3 + 157) = 1;
      return;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518C48[0]))
    {
      *(_BYTE *)(a3 + 158) = 1;
      return;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518C50[0]))
    {
      v10 = (std::string *)(a3 + 336);
      goto LABEL_18;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518C58[0]))
    {
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, &byte_207AF6795))
      {
        goto LABEL_283;
      }
      *(_DWORD *)(a3 + 360) = std::stoi(__str, 0, 10);
    }
    else
    {
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518C60[0]))
      {
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, &byte_207AF6795))
        {
          goto LABEL_283;
        }
        v12 = StringToSpatialSplitMode((uint64_t)__str);
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_207AF6795);
        ZinIrCompilerParameters::setSpatialSplitMode(a3, v12, (__int128 *)__p);
        goto LABEL_80;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518C68[0]))
      {
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, &byte_207AF6795))
        {
          goto LABEL_283;
        }
        *(_QWORD *)(a3 + 480) = std::stoi(__str, 0, 10);
      }
      else
      {
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518C70[0]))
        {
          if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "enabled")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "disabled"))
          {
            goto LABEL_283;
          }
          v13 = (uint64_t **)(a3 + 608);
          if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "enabled"))
          {
            std::string::basic_string[abi:ne180100]<0>(__p, &byte_207AF6795);
            v16 = __p;
            *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v13, __p, (uint64_t)&std::piecewise_construct, (__int128 **)&v16)+ 56) = 0;
LABEL_80:
            if (v15 < 0)
              operator delete(__p[0]);
            return;
          }
          std::string::basic_string[abi:ne180100]<0>(__p, &byte_207AF6795);
          v16 = __p;
          v11 = std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v13, __p, (uint64_t)&std::piecewise_construct, (__int128 **)&v16);
LABEL_79:
          *((_BYTE *)v11 + 56) = 1;
          goto LABEL_80;
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518C78[0]))
        {
          *(_BYTE *)(a3 + 364) = 0;
          return;
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518C80[0]))
        {
          std::string::basic_string[abi:ne180100]<0>(__p, &byte_207AF6795);
          v16 = __p;
          v11 = std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a3 + 680), __p, (uint64_t)&std::piecewise_construct, (__int128 **)&v16);
          goto LABEL_79;
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518C88[0]))
        {
          std::string::basic_string[abi:ne180100]<0>(__p, &byte_207AF6795);
          v16 = __p;
          v11 = std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a3 + 704), __p, (uint64_t)&std::piecewise_construct, (__int128 **)&v16);
          goto LABEL_79;
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518C90[0]))
        {
          *(_BYTE *)(a3 + 365) = 1;
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518C98[0]))
        {
          *(_BYTE *)(a3 + 366) = 1;
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518CA0[0]))
        {
          *(_BYTE *)(a3 + 367) = 1;
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518CA8[0]))
        {
          *(_DWORD *)(a3 + 324) = 1;
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518CB0[0]))
        {
          *(_BYTE *)(a3 + 369) = 1;
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518CB8[0]))
        {
          *(_BYTE *)(a3 + 370) = 1;
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518CC0[0]))
        {
          if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, &byte_207AF6795))
          {
            goto LABEL_283;
          }
          *(float *)(a3 + 388) = std::stof(__str, 0);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518CC8[0]))
        {
          *(_BYTE *)(a3 + 101) = 1;
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518CD0[0]))
        {
          *(_BYTE *)(a3 + 102) = 1;
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518CD8[0]))
        {
          if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, &byte_207AF6795))
          {
            goto LABEL_283;
          }
          *(double *)(a3 + 104) = std::stod(__str, 0);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518CE0[0]))
        {
          if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, &byte_207AF6795))
          {
            goto LABEL_283;
          }
          *(_DWORD *)(a3 + 112) = std::stoi(__str, 0, 10);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518CE8[0]))
        {
          if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, &byte_207AF6795))
          {
            goto LABEL_283;
          }
          *(_DWORD *)(a3 + 116) = std::stoi(__str, 0, 10);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518CF0[0]))
        {
          *(_BYTE *)(a3 + 120) = 1;
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518CF8[0]))
        {
          if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, &byte_207AF6795))
          {
            goto LABEL_283;
          }
          *(_QWORD *)(a3 + 392) = std::stol(__str, 0, 10);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518D00[0]))
        {
          if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "true")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "false"))
          {
            goto LABEL_283;
          }
          *(_BYTE *)(a3 + 371) = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "true");
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518D08[0]))
        {
          if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, &byte_207AF6795))
          {
            ZinAssertImpl("Invalue option argument");
          }
          *(_WORD *)(a3 + 372) = std::stoi(__str, 0, 10);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518D10[0]))
        {
          *(_BYTE *)(a3 + 121) = 1;
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518D18[0]))
        {
          *(_BYTE *)(a3 + 374) = 1;
        }
        else
        {
          if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518D20[0]))
          {
            if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, &byte_207AF6795))
            {
              v10 = (std::string *)(a3 + 400);
              goto LABEL_18;
            }
            goto LABEL_283;
          }
          if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518D48[0]))
          {
            if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "true")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "false"))
            {
              goto LABEL_283;
            }
            *(_BYTE *)(a3 + 377) = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "true");
          }
          else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518D58[0]))
          {
            if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "true")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "false"))
            {
              goto LABEL_283;
            }
            *(_BYTE *)(a3 + 378) = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "true");
          }
          else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518D60[0]))
          {
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, &byte_207AF6795))
            {
              goto LABEL_283;
            }
            *(_DWORD *)(a3 + 380) = std::stoi(__str, 0, 10);
          }
          else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518D28[0]))
          {
            *(_BYTE *)(a3 + 375) = 1;
          }
          else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518D30[0]))
          {
            *(_BYTE *)(a3 + 384) = 1;
          }
          else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518DF8[0]))
          {
            *(_WORD *)(a3 + 385) = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "true") | 0x100;
          }
          else
          {
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518D68[0]))
            {
              if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, &byte_207AF6795))
              {
                v10 = (std::string *)(a3 + 424);
                goto LABEL_18;
              }
              goto LABEL_283;
            }
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518D70[0]))
            {
              if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, &byte_207AF6795))
              {
                v10 = (std::string *)(a3 + 448);
                goto LABEL_18;
              }
              goto LABEL_283;
            }
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518D78[0]))
            {
              if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "true")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "false"))
              {
                goto LABEL_283;
              }
              *(_BYTE *)(a3 + 472) = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "true");
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518D80[0]))
            {
              if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "true")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "false"))
              {
                goto LABEL_283;
              }
              *(_BYTE *)(a3 + 488) = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "true");
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518D88[0]))
            {
              if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "true")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "false"))
              {
                goto LABEL_283;
              }
              *(_BYTE *)(a3 + 489) = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "true");
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518D90[0]))
            {
              if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "true"))goto LABEL_283;
              *(_BYTE *)(a3 + 490) = 1;
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518D98[0]))
            {
              if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "true"))goto LABEL_283;
              *(_BYTE *)(a3 + 491) = 1;
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518DA0[0]))
            {
              *(_BYTE *)(a3 + 492) = 1;
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518DA8[0]))
            {
              *(_BYTE *)(a3 + 493) = 1;
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518DB0[0]))
            {
              if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "true"))goto LABEL_283;
              *(_BYTE *)(a3 + 494) = 1;
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518DC0[0]))
            {
              *(_BYTE *)(a3 + 495) = 1;
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518DB8[0]))
            {
              if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "true")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "false"))
              {
                goto LABEL_283;
              }
              *(_BYTE *)(a3 + 497) = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "true");
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518DC8[0]))
            {
              *(_BYTE *)(a3 + 496) = 1;
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518DD0[0]))
            {
              *(_BYTE *)(a3 + 498) = 1;
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518DD8[0]))
            {
              *(_BYTE *)(a3 + 499) = 1;
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518E10[0]))
            {
              if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, &byte_207AF6795))
              {
                goto LABEL_283;
              }
              *(_DWORD *)(a3 + 540) = std::stoi(__str, 0, 10);
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518E18[0]))
            {
              if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, &byte_207AF6795))
              {
                goto LABEL_283;
              }
              *(_DWORD *)(a3 + 544) = std::stoi(__str, 0, 10);
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518E20[0]))
            {
              *(_BYTE *)(a3 + 538) = 1;
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518E28[0]))
            {
              *(_BYTE *)(a3 + 527) = 1;
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518E30[0]))
            {
              if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "true")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "false"))
              {
                goto LABEL_283;
              }
              *(_BYTE *)(a3 + 528) = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "true");
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518E40[0]))
            {
              if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "true")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "false"))
              {
                goto LABEL_283;
              }
              *(_WORD *)(a3 + 556) = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "true") | 0x100;
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518E48[0]))
            {
              *(_BYTE *)(a3 + 558) = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "true");
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518E50[0]))
            {
              *(_BYTE *)(a3 + 529) = 1;
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518D50[0]))
            {
              if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "true")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "false"))
              {
                goto LABEL_283;
              }
              *(_BYTE *)(a3 + 387) = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "true");
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518E58[0]))
            {
              *(_BYTE *)(a3 + 530) = 1;
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518E60[0]))
            {
              *(_BYTE *)(a3 + 531) = 1;
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518E68[0]))
            {
              *(_BYTE *)(a3 + 532) = 1;
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518E78[0]))
            {
              *(_BYTE *)(a3 + 559) = 1;
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518E70[0]))
            {
              *(_BYTE *)(a3 + 533) = 1;
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518E80[0]))
            {
              if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "true")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "false"))
              {
                goto LABEL_283;
              }
              *(_BYTE *)(a3 + 534) = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "true");
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518E88[0]))
            {
              if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "true")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "false"))
              {
                goto LABEL_283;
              }
              *(_BYTE *)(a3 + 535) = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "true");
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, off_254518E90[0]))
            {
              if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "true")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "false"))
              {
                goto LABEL_283;
              }
              *(_BYTE *)(a3 + 536) = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str->__r_.__value_.__l.__data_, "true");
            }
          }
        }
      }
    }
  }
}

void sub_206DE5A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void **std::vector<std::vector<std::string>>::~vector[abi:ne180100](void **a1)
{
  void **v3;

  v3 = a1;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t ZinIrCompilerParameters::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  std::string::operator=((std::string *)a1, (const std::string *)a2);
  std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
  std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a2 + 48));
  std::string::operator=((std::string *)(a1 + 72), (const std::string *)(a2 + 72));
  v5 = *(_OWORD *)(a2 + 112);
  v4 = *(_OWORD *)(a2 + 128);
  v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 143) = *(_OWORD *)(a2 + 143);
  *(_OWORD *)(a1 + 112) = v5;
  *(_OWORD *)(a1 + 128) = v4;
  *(_OWORD *)(a1 + 96) = v6;
  std::string::operator=((std::string *)(a1 + 160), (const std::string *)(a2 + 160));
  std::string::operator=((std::string *)(a1 + 184), (const std::string *)(a2 + 184));
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  std::string::operator=((std::string *)(a1 + 216), (const std::string *)(a2 + 216));
  std::string::operator=((std::string *)(a1 + 240), (const std::string *)(a2 + 240));
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
  std::string::operator=((std::string *)(a1 + 272), (const std::string *)(a2 + 272));
  v7 = *(_QWORD *)(a2 + 328);
  v8 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 312) = v8;
  *(_QWORD *)(a1 + 328) = v7;
  std::string::operator=((std::string *)(a1 + 336), (const std::string *)(a2 + 336));
  v9 = *(_QWORD *)(a2 + 392);
  v10 = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 376) = v10;
  *(_QWORD *)(a1 + 392) = v9;
  std::string::operator=((std::string *)(a1 + 400), (const std::string *)(a2 + 400));
  std::string::operator=((std::string *)(a1 + 424), (const std::string *)(a2 + 424));
  std::string::operator=((std::string *)(a1 + 448), (const std::string *)(a2 + 448));
  v11 = *(_OWORD *)(a2 + 488);
  *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 488) = v11;
  v13 = *(_OWORD *)(a2 + 520);
  v12 = *(_OWORD *)(a2 + 536);
  v14 = *(_OWORD *)(a2 + 504);
  *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
  *(_OWORD *)(a1 + 520) = v13;
  *(_OWORD *)(a1 + 536) = v12;
  *(_OWORD *)(a1 + 504) = v14;
  if (a1 != a2)
  {
    std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,SpatialSplitMode>,std::__tree_node<std::__value_type<std::string,SpatialSplitMode>,void *> *,long>>((uint64_t **)(a1 + 560), *(_QWORD **)(a2 + 560), (_QWORD *)(a2 + 568));
    std::__tree<std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>,std::__tree_node<std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>,void *> *,long>>((uint64_t **)(a1 + 584), *(__int128 **)(a2 + 584), (__int128 *)(a2 + 592));
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,BOOL>,std::__tree_node<std::__value_type<std::string,BOOL>,void *> *,long>>((uint64_t **)(a1 + 608), *(_QWORD **)(a2 + 608), (_QWORD *)(a2 + 616));
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,BOOL>,std::__tree_node<std::__value_type<std::string,BOOL>,void *> *,long>>((uint64_t **)(a1 + 632), *(_QWORD **)(a2 + 632), (_QWORD *)(a2 + 640));
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,BOOL>,std::__tree_node<std::__value_type<std::string,BOOL>,void *> *,long>>((uint64_t **)(a1 + 656), *(_QWORD **)(a2 + 656), (_QWORD *)(a2 + 664));
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,BOOL>,std::__tree_node<std::__value_type<std::string,BOOL>,void *> *,long>>((uint64_t **)(a1 + 680), *(_QWORD **)(a2 + 680), (_QWORD *)(a2 + 688));
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,BOOL>,std::__tree_node<std::__value_type<std::string,BOOL>,void *> *,long>>((uint64_t **)(a1 + 704), *(_QWORD **)(a2 + 704), (_QWORD *)(a2 + 712));
  }
  *(_QWORD *)(a1 + 728) = *(_QWORD *)(a2 + 728);
  *(_BYTE *)(a1 + 736) = *(_BYTE *)(a2 + 736);
  std::string::operator=((std::string *)(a1 + 744), (const std::string *)(a2 + 744));
  return a1;
}

uint64_t ZinIrCompilerParameters::setUseWideWorkUnits(ZinIrCompilerParameters *this, char a2)
{
  *((_BYTE *)this + 365) = a2;
  return 0;
}

BOOL ZinIrCompilerParameters::isValidBSSLimit(ZinIrCompilerParameters *this, uint64_t a2)
{
  return a2 >= 0;
}

uint64_t std::vector<ZinIrCompilerParameters::SubGraphSpec>::__push_back_slow_path<ZinIrCompilerParameters::SubGraphSpec const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x155555555555555)
    v9 = 0x2AAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItem const>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[96 * v4];
  v16 = &v10[96 * v9];
  std::construct_at[abi:ne180100]<ZinIrCompilerParameters::SubGraphSpec,ZinIrCompilerParameters::SubGraphSpec const&,ZinIrCompilerParameters::SubGraphSpec*>((uint64_t)v14, a2);
  v15 = v14 + 96;
  std::vector<ZinIrCompilerParameters::SubGraphSpec>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<ZinIrCompilerParameters::SubGraphSpec>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_206DE5DA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ZinIrCompilerParameters::SubGraphSpec>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompilerParameters::SubGraphSpec,ZinIrCompilerParameters::SubGraphSpec const&,ZinIrCompilerParameters::SubGraphSpec*>(uint64_t a1, __int128 *a2)
{
  __int128 v4;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 24), *((__int128 **)a2 + 3), *((__int128 **)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3));
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 48), *((__int128 **)a2 + 6), *((__int128 **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3));
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((_QWORD *)(a1 + 72), *((const void **)a2 + 9), *((_QWORD *)a2 + 10), (uint64_t)(*((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 9)) >> 3);
  return a1;
}

void sub_206DE5E74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::vector<ZinIrCompilerParameters::SubGraphSpec>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 96;
    v4 -= 96;
    std::construct_at[abi:ne180100]<ZinIrCompilerParameters::SubGraphSpec,ZinIrCompilerParameters::SubGraphSpec,ZinIrCompilerParameters::SubGraphSpec*>(v6, v4);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

__n128 std::construct_at[abi:ne180100]<ZinIrCompilerParameters::SubGraphSpec,ZinIrCompilerParameters::SubGraphSpec,ZinIrCompilerParameters::SubGraphSpec*>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __n128 result;

  v2 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  result = *(__n128 *)(a2 + 72);
  *(__n128 *)(a1 + 72) = result;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  return result;
}

uint64_t std::__split_buffer<ZinIrCompilerParameters::SubGraphSpec>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 96;
    std::__destroy_at[abi:ne180100]<ZinIrCompilerParameters::SubGraphSpec,0>(i - 96);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::insert_iterator<std::set<std::string>>::operator=[abi:ne180100](uint64_t a1, void **a2)
{
  _OWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;

  v3 = std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string>(*(uint64_t ***)a1, *(_QWORD *)(a1 + 8), a2, (uint64_t)a2);
  *(_QWORD *)(a1 + 8) = v3;
  v4 = (_QWORD *)*((_QWORD *)v3 + 1);
  if (v4)
  {
    do
    {
      v5 = v4;
      v4 = (_QWORD *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      v5 = (_QWORD *)*((_QWORD *)v3 + 2);
      v6 = *v5 == (_QWORD)v3;
      v3 = v5;
    }
    while (!v6);
  }
  *(_QWORD *)(a1 + 8) = v5;
  return a1;
}

_OWORD *std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string>(uint64_t **a1, uint64_t a2, void **a3, uint64_t a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;
  void **v11;

  v6 = std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::__find_equal<std::string>(a1, a2, &v11, &v10, a3);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x38uLL);
    v7[2] = *(_OWORD *)a4;
    *((_QWORD *)v7 + 6) = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }
  return v7;
}

void std::vector<ZinIrCompilerParameters::SubGraphSpec>::__assign_with_size[abi:ne180100]<ZinIrCompilerParameters::SubGraphSpec*,ZinIrCompilerParameters::SubGraphSpec*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5) < a4)
  {
    std::vector<ZinIrCompilerParameters::SubGraphSpec>::__vdeallocate((void **)a1);
    if (a4 > 0x2AAAAAAAAAAAAAALL)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5) >= 0x155555555555555)
      v11 = 0x2AAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<ZinLinearPattern::AtomItem const>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinIrCompilerParameters::SubGraphSpec>,ZinIrCompilerParameters::SubGraphSpec*,ZinIrCompilerParameters::SubGraphSpec*,ZinIrCompilerParameters::SubGraphSpec*>(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 5) < a4)
  {
    v13 = a2 + 32 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 5);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ZinIrCompilerParameters::SubGraphSpec *,ZinIrCompilerParameters::SubGraphSpec *,ZinIrCompilerParameters::SubGraphSpec *>((uint64_t)&v17, a2, v13, (uint64_t)v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinIrCompilerParameters::SubGraphSpec>,ZinIrCompilerParameters::SubGraphSpec*,ZinIrCompilerParameters::SubGraphSpec*,ZinIrCompilerParameters::SubGraphSpec*>(v8, v13, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ZinIrCompilerParameters::SubGraphSpec *,ZinIrCompilerParameters::SubGraphSpec *,ZinIrCompilerParameters::SubGraphSpec *>((uint64_t)&v18, a2, a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 96;
      std::__destroy_at[abi:ne180100]<ZinIrCompilerParameters::SubGraphSpec,0>(v16);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_206DE6254(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_206DE625C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<ZinIrCompilerParameters::SubGraphSpec>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 96;
        std::__destroy_at[abi:ne180100]<ZinIrCompilerParameters::SubGraphSpec,0>(v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ZinIrCompilerParameters::SubGraphSpec *,ZinIrCompilerParameters::SubGraphSpec *,ZinIrCompilerParameters::SubGraphSpec *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  if (a2 == a3)
    return a2;
  v6 = a3;
  v7 = 0;
  do
  {
    v8 = a4 + v7;
    v9 = a2 + v7;
    v10 = *(_OWORD *)(a2 + v7);
    *(_QWORD *)(v8 + 16) = *(_QWORD *)(a2 + v7 + 16);
    *(_OWORD *)v8 = v10;
    if (a2 != a4)
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(v8 + 24), *(std::string **)(v9 + 24), *(__int128 **)(v9 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v9 + 32) - *(_QWORD *)(v9 + 24)) >> 3));
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(v8 + 48), *(std::string **)(v9 + 48), *(__int128 **)(v9 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v9 + 56) - *(_QWORD *)(v9 + 48)) >> 3));
      std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)(v8 + 72), *(char **)(v9 + 72), *(_QWORD *)(v9 + 80), (uint64_t)(*(_QWORD *)(v9 + 80) - *(_QWORD *)(v9 + 72)) >> 3);
    }
    v7 += 96;
  }
  while (a2 + v7 != v6);
  return v6;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::string>>,std::vector<std::string> const*,std::vector<std::string> const*,std::vector<std::string>*>(uint64_t a1, __int128 **a2, __int128 **a3, std::string *a4)
{
  std::string *v4;
  __int128 **v6;
  _QWORD v8[3];
  char v9;
  std::string *v10;
  std::string *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v4->__r_.__value_.__r.__words[0] = 0;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v4, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v6[1] - (char *)*v6) >> 3));
      v4 = ++v11;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::vector<std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_206DE6448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::vector<std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::vector<std::string>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::vector<std::string>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::vector<std::string>*>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = **(void ****)(a1 + 16);
  v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    v3 = v1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

uint64_t **std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,SpatialSplitMode>,std::__tree_node<std::__value_type<std::string,SpatialSplitMode>,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t **leaf_high;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = v8;
    if (v8)
    {
      v16 = std::__tree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          *((_DWORD *)v8 + 14) = *((_DWORD *)v9 + 14);
          leaf_high = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(v5, v18, leaf_high, v17);
          v17 = v16;
          if (v16)
            v16 = std::__tree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (_QWORD *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v12 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::__emplace_multi<std::pair<std::string const,SpatialSplitMode> const&>(v5, (uint64_t)(a2 + 4));
      v13 = (_QWORD *)a2[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)a2[2];
          v12 = *v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_206DE664C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::__emplace_multi<std::pair<std::string const,SpatialSplitMode> const&>(uint64_t **a1, uint64_t a2)
{
  uint64_t **leaf_high;
  uint64_t v5;
  uint64_t *v6;

  std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::__construct_node<std::pair<std::string const,SpatialSplitMode> const&>((uint64_t)a1, a2, (uint64_t)&v6);
  leaf_high = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)a1, &v5, v6 + 4);
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v5, leaf_high, v6);
  return v6;
}

void sub_206DE66B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,SpatialSplitMode>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>,std::__tree_node<std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>,void *> *,long>>(uint64_t **result, __int128 *a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t **leaf_high;
  __int128 *v11;
  BOOL v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18[2];

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = v8;
    if (v8)
    {
      v16 = std::__tree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          v18[0] = (uint64_t)(v8 + 4);
          v18[1] = (uint64_t)(v8 + 7);
          std::pair<std::string &,std::vector<ZinIrCompilerParameters::SubGraphSpec> &>::operator=[abi:ne180100]<std::string const,std::vector<ZinIrCompilerParameters::SubGraphSpec>,(void *)0>((uint64_t)v18, (const std::string *)(v9 + 2));
          leaf_high = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)v5, v18, v17 + 4);
          std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(v5, v18[0], leaf_high, v17);
          v17 = v16;
          if (v16)
            v16 = std::__tree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (__int128 *)*((_QWORD *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = *(__int128 **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v9 + 2);
              v12 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>>>::__emplace_multi<std::pair<std::string const,std::vector<ZinIrCompilerParameters::SubGraphSpec>> const&>(v5, a2 + 2);
      v13 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(__int128 **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (__int128 *)*((_QWORD *)a2 + 2);
          v12 = *(_QWORD *)v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_206DE6850(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string &,std::vector<ZinIrCompilerParameters::SubGraphSpec> &>::operator=[abi:ne180100]<std::string const,std::vector<ZinIrCompilerParameters::SubGraphSpec>,(void *)0>(uint64_t a1, const std::string *a2)
{
  uint64_t v4;

  std::string::operator=(*(std::string **)a1, a2);
  v4 = *(_QWORD *)(a1 + 8);
  if ((const std::string *)v4 != &a2[1])
    std::vector<ZinIrCompilerParameters::SubGraphSpec>::__assign_with_size[abi:ne180100]<ZinIrCompilerParameters::SubGraphSpec*,ZinIrCompilerParameters::SubGraphSpec*>(v4, (uint64_t)a2[1].__r_.__value_.__l.__data_, a2[1].__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1].__r_.__value_.__l.__size_ - a2[1].__r_.__value_.__r.__words[0]) >> 5));
  return a1;
}

uint64_t std::__tree<std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>>>::__emplace_multi<std::pair<std::string const,std::vector<ZinIrCompilerParameters::SubGraphSpec>> const&>(uint64_t **a1, __int128 *a2)
{
  uint64_t **leaf_high;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7[3];

  std::__tree<std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>>>::__construct_node<std::pair<std::string const,std::vector<ZinIrCompilerParameters::SubGraphSpec>> const&>((uint64_t)a1, a2, (uint64_t)v7);
  leaf_high = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)a1, &v6, v7[0] + 4);
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_206DE6978(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,BOOL>,std::__tree_node<std::__value_type<std::string,BOOL>,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t **leaf_high;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = v8;
    if (v8)
    {
      v16 = std::__tree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          *((_BYTE *)v8 + 56) = *((_BYTE *)v9 + 56);
          leaf_high = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(v5, v18, leaf_high, v17);
          v17 = v16;
          if (v16)
            v16 = std::__tree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (_QWORD *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v12 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_multi<std::pair<std::string const,BOOL> const&>(v5, (uint64_t)(a2 + 4));
      v13 = (_QWORD *)a2[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)a2[2];
          v12 = *v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_206DE6B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_multi<std::pair<std::string const,BOOL> const&>(uint64_t **a1, uint64_t a2)
{
  uint64_t **leaf_high;
  uint64_t v5;
  uint64_t *v6;

  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__construct_node<std::pair<std::string const,BOOL> const&>((uint64_t)a1, a2, (uint64_t)&v6);
  leaf_high = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)a1, &v5, v6 + 4);
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v5, leaf_high, v6);
  return v6;
}

void sub_206DE6B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,SpatialSplitMode>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6;

  v6 = std::streambuf::basic_streambuf();
  *(_QWORD *)v6 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
  return a1;
}

void sub_206DE6BFC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  std::string *v2;
  char v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(a1 + 88) = 0;
  v2 = (std::string *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    v4 = *(std::string **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v4 = v2;
    v5 = *(unsigned __int8 *)(a1 + 87);
  }
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    v7 = v3 < 0 ? (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    v8 = *(char *)(a1 + 87) < 0 ? *(_QWORD *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        v5 = v5 - v10 - 0x7FFFFFFF;
        *(_QWORD *)(a1 + 48) = v4;
      }
      if (v5)
        *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
    }
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_206DE6E54(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<ZinIrCompilerParameters::SubGraphSpec>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void ZinIrCompilerParameters::isValidPstateDCSLevel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_2_9(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Compiler param has wrong value. %d\n", a5, a6, a7, a8, 0);
}

uint64_t ZinResizeLayerUtils::InputCopyCast(ZinTextureLayerUtils *a1, const ZinIrTextureUnitInfo *a2, uint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;
  _BYTE v7[16];
  int v8;
  char v9;
  _QWORD v10[43];

  v10[42] = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)a2 + 1253) && ZinTextureLayerUtils::NeedPreserveFraction(a1, a2))
  {
    ZinIrCopyInfo::ZinIrCopyInfo((ZinIrCopyInfo *)v7);
    v9 = 1;
    v8 = 0;
    ZinIrOpLayerOpCode::ZinIrOpLayerOpCode((ZinIrOpLayerOpCode *)v10, (const ZinIrOpLayerOpCode *)v7);
    v10[0] = &unk_24C017878;
    v4 = a3[1];
    if (v4 >= a3[2])
    {
      v5 = std::vector<ZinResizeLayerUtils::ResizeDecomposedDesc>::__push_back_slow_path<ZinResizeLayerUtils::ResizeDecomposedDesc const&>(a3, (const ZinResizeLayerUtils::ResizeDecomposedDesc *)&v8);
    }
    else
    {
      ZinResizeLayerUtils::ResizeDecomposedDesc::ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)a3[1], (const ZinResizeLayerUtils::ResizeDecomposedDesc *)&v8);
      v5 = v4 + 344;
      a3[1] = v4 + 344;
    }
    a3[1] = v5;
    ZinResizeLayerUtils::ResizeDecomposedDesc::~ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)&v8);
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v7);
  }
  return 1;
}

void sub_206DE6FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  ZinResizeLayerUtils::ResizeDecomposedDesc::~ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)&a11);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&a9);
  _Unwind_Resume(a1);
}

BOOL ZinResizeLayerUtils::QualifiesForDeconv(_QWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  _BOOL8 result;
  uint64_t i;
  uint64_t j;

  result = !ZinResizeLayerUtils::IsUpsampleBy4x(a2, (uint64_t)a1)
        || (unint64_t)ZinIrHalParameters::GetMaxSmallKernelWidth(a4, a3) > 7;
  for (i = a1[22]; i != a1[23]; i += 8)
  {
    if (*(_DWORD *)(i + 4) != 1)
      return 0;
  }
  for (j = a1[16]; j != a1[17]; j += 8)
  {
    if (*(_DWORD *)(j + 4))
      return 0;
  }
  return result;
}

uint64_t ZinResizeLayerUtils::DecomposeResizeViaTransposeAndConvolution(_QWORD *a1, uint64_t a2, int *a3, uint64_t *a4, void **a5, int a6)
{
  uint64_t result;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v21;
  uint64_t v22;
  int64x2_t *v23;
  int64x2_t *v24;
  int64x2_t v25;
  int64x2_t v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  int64x2_t v35;
  int64x2_t v36;
  char *v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  int v42;
  __int128 v43;
  __int128 v44;
  _OWORD *v45;
  __int128 v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  __int128 v66;
  __int128 v67;
  int v68;
  unint64_t v69;
  uint64_t v70;
  int64x2_t *v71;
  int64x2_t *v72;
  int64x2_t v73;
  int64x2_t v74;
  char *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  int64x2_t v83;
  int64x2_t v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  int *v89;
  int v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  int64x2_t *v95;
  int64x2_t *v96;
  int64x2_t v97;
  int64x2_t v98;
  char *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  int64x2_t v107;
  int64x2_t v108;
  char *v109;
  char *v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  _OWORD *v116;
  __int128 v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  char *v133;
  char *v134;
  char *v135;
  __int128 v136;
  __int128 v137;
  unint64_t v138;
  uint64_t v139;
  int64x2_t *v140;
  int64x2_t *v141;
  int64x2_t v142;
  int64x2_t v143;
  char *v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  char *v149;
  char *v150;
  char *v151;
  int64x2_t v152;
  int64x2_t v153;
  char *v154;
  char *v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  int v159;
  _QWORD *v160;
  int v161;
  void *v162[8];
  int v163;
  void *__p;
  void *v165;
  void (**v166)(ZinIrKernelUnitInfo *__hidden);
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  __int128 v171;
  __int128 v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  uint64_t v182;
  int v183;
  char v184;
  __int16 v185;
  int v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  _BYTE v192[32];
  _BYTE v193[32];
  _BYTE v194[28];
  int64x2_t v195;
  int64x2_t v196;
  uint64_t v197;
  void *v198[8];
  int v199;
  void *v200;
  void *v201;
  int64x2_t v202;
  int64x2_t v203;
  uint64_t v204;
  __int128 v205;
  __int128 v206;
  uint64_t v207;

  v207 = *MEMORY[0x24BDAC8D0];
  result = ZinResizeLayerUtils::IsDecomposableViaTransposeAndConvolution((_QWORD *)a2);
  if ((_DWORD)result)
  {
    v13 = *a3;
    v14 = *a3 - 1;
    v15 = *(_DWORD *)(a2 + 68);
    if (v14 <= 2 && (v15 - 4) >= 0xFFFFFFFD)
    {
      if (v15 == v13)
      {
        v17 = a1[3];
        v18 = *(unsigned int *)(a2 + 160);
        v19 = 2;
      }
      else
      {
        v18 = *(unsigned int *)(a2 + 160);
        v17 = a1[3];
        if (v17 == v18)
        {
          v19 = 1;
          v17 = *(unsigned int *)(a2 + 160);
        }
        else
        {
          v19 = v14 > 1 && a1[2] != *(_DWORD *)(a2 + 156);
        }
      }
      if (v17 != v18 || a6)
      {
        ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)v198, 2u, 4u, v13);
        v161 = v19;
        v199 = *a3;
        ZinResizeLayerUtils::ResizeDecomposedDesc::ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)&v202, (ZinIrTransposeUnitInfo *)v198);
        v21 = a4[1];
        if (v21 >= a4[2])
        {
          v22 = std::vector<ZinResizeLayerUtils::ResizeDecomposedDesc>::__push_back_slow_path<ZinResizeLayerUtils::ResizeDecomposedDesc const&>(a4, (const ZinResizeLayerUtils::ResizeDecomposedDesc *)&v202);
        }
        else
        {
          ZinResizeLayerUtils::ResizeDecomposedDesc::ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)a4[1], (const ZinResizeLayerUtils::ResizeDecomposedDesc *)&v202);
          v22 = v21 + 344;
          a4[1] = v21 + 344;
        }
        a4[1] = v22;
        ZinResizeLayerUtils::ResizeDecomposedDesc::~ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)&v202);
        v195 = vdupq_n_s64(1uLL);
        v196 = v195;
        v197 = 1;
        v160 = a1;
        ZinIrTransposeUnitInfo::TransposeDimensions<ZinTensorDimensions>(a1, (uint64_t)&v200, &v195);
        v23 = (int64x2_t *)a5[2];
        v158 = (uint64_t)(a5 + 2);
        v24 = (int64x2_t *)a5[1];
        v159 = a6;
        if (v24 >= v23)
        {
          v28 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v24 - (_BYTE *)*a5) >> 3);
          v29 = v28 + 1;
          if (v28 + 1 > 0x666666666666666)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v30 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v23 - (_BYTE *)*a5) >> 3);
          if (2 * v30 > v29)
            v29 = 2 * v30;
          if (v30 >= 0x333333333333333)
            v31 = 0x666666666666666;
          else
            v31 = v29;
          if (v31)
            v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>(v158, v31);
          else
            v32 = 0;
          v33 = &v32[40 * v28];
          v34 = &v32[40 * v31];
          v35 = v195;
          v36 = v196;
          *((_QWORD *)v33 + 4) = v197;
          *(int64x2_t *)v33 = v35;
          *((int64x2_t *)v33 + 1) = v36;
          v27 = v33 + 40;
          v38 = (char *)*a5;
          v37 = (char *)a5[1];
          if (v37 != *a5)
          {
            do
            {
              v39 = *(_OWORD *)(v37 - 40);
              v40 = *(_OWORD *)(v37 - 24);
              *((_QWORD *)v33 - 1) = *((_QWORD *)v37 - 1);
              *(_OWORD *)(v33 - 24) = v40;
              *(_OWORD *)(v33 - 40) = v39;
              v33 -= 40;
              v37 -= 40;
            }
            while (v37 != v38);
            v37 = (char *)*a5;
          }
          *a5 = v33;
          a5[1] = v27;
          a5[2] = v34;
          if (v37)
            operator delete(v37);
        }
        else
        {
          v25 = v195;
          v26 = v196;
          v24[2].i64[0] = v197;
          *v24 = v25;
          v24[1] = v26;
          v27 = &v24[2].i8[8];
        }
        a5[1] = v27;
        v168 = 0;
        v169 = 0;
        v171 = 0u;
        v172 = 0u;
        v175 = -1;
        v176 = -1;
        v177 = -1;
        v179 = 0u;
        v180 = 0u;
        v181 = 0u;
        v178 = -1;
        v182 = 0;
        v183 = 1;
        v184 = 0;
        v185 = 0;
        v186 = -1;
        v187 = -1;
        v188 = -1;
        v189 = -1;
        v190 = 0x3F80000000000006;
        v166 = off_24C01CAD8;
        v167 = 0;
        v192[4] = 0;
        *(int64x2_t *)&v192[8] = vdupq_n_s64(1uLL);
        *(_QWORD *)&v192[24] = 1;
        *(_QWORD *)v193 = 1;
        *(_QWORD *)&v41 = 0x100000001;
        *((_QWORD *)&v41 + 1) = 0x100000001;
        *(_OWORD *)&v193[8] = v41;
        *(_QWORD *)&v193[24] = 0x100000001;
        memset(v194, 0, 24);
        *(_DWORD *)&v194[24] = 1;
        v191 = 0;
        *(_DWORD *)v192 = 1;
        v174 = 0x400000001;
        v173 = *(unsigned int *)(a2 + 160);
        v42 = *a3;
        v170 = 0;
        DWORD2(v172) = v42;
        if (!v161)
          v42 = *(_DWORD *)(a2 + 68);
        HIDWORD(v172) = v42;
        v202.i8[4] = 0;
        v202.i32[0] = 1;
        ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinIrKernelUnitInfo *)&v202.u64[1], (const ZinIrKernelUnitInfo *)&v166);
        v43 = *(_OWORD *)v193;
        v44 = *(_OWORD *)v194;
        v45[18] = *(_OWORD *)&v193[16];
        v45[19] = v44;
        v206 = *(_OWORD *)&v194[12];
        v46 = *(_OWORD *)v192;
        v45[16] = *(_OWORD *)&v192[16];
        v45[17] = v43;
        v202.i64[1] = (uint64_t)off_24C01CAD8;
        v205 = v46;
        v47 = a4[1];
        if (v47 >= a4[2])
        {
          v49 = std::vector<ZinResizeLayerUtils::ResizeDecomposedDesc>::__push_back_slow_path<ZinResizeLayerUtils::ResizeDecomposedDesc const&>(a4, (const ZinResizeLayerUtils::ResizeDecomposedDesc *)&v202);
          v48 = v160;
        }
        else
        {
          ZinResizeLayerUtils::ResizeDecomposedDesc::ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)a4[1], (const ZinResizeLayerUtils::ResizeDecomposedDesc *)&v202);
          v48 = v160;
          v49 = v47 + 344;
          a4[1] = v47 + 344;
        }
        a4[1] = v49;
        ZinResizeLayerUtils::ResizeDecomposedDesc::~ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)&v202);
        v51 = a5[1];
        v50 = (unint64_t)a5[2];
        v52 = *(v51 - 5);
        v53 = *(unsigned int *)(a2 + 160);
        v54 = *(v51 - 3);
        v55 = *(v51 - 2);
        v56 = v48[4];
        if ((unint64_t)v51 >= v50)
        {
          v58 = *a5;
          v59 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v51 - (_BYTE *)*a5) >> 3);
          v60 = v59 + 1;
          if (v59 + 1 > 0x666666666666666)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v61 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v50 - (_QWORD)v58) >> 3);
          if (2 * v61 > v60)
            v60 = 2 * v61;
          if (v61 >= 0x333333333333333)
            v62 = 0x666666666666666;
          else
            v62 = v60;
          if (v62)
          {
            v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>(v158, v62);
            v58 = *a5;
            v51 = a5[1];
          }
          else
          {
            v63 = 0;
          }
          v64 = &v63[40 * v59];
          *(_QWORD *)v64 = v52;
          *((_QWORD *)v64 + 1) = v53;
          v65 = &v63[40 * v62];
          *((_QWORD *)v64 + 2) = v54;
          *((_QWORD *)v64 + 3) = v55;
          *((_QWORD *)v64 + 4) = v56;
          v57 = v64 + 40;
          if (v51 == v58)
          {
            v19 = v161;
          }
          else
          {
            v19 = v161;
            do
            {
              v66 = *(_OWORD *)(v51 - 5);
              v67 = *(_OWORD *)(v51 - 3);
              *((_QWORD *)v64 - 1) = *(v51 - 1);
              *(_OWORD *)(v64 - 24) = v67;
              *(_OWORD *)(v64 - 40) = v66;
              v64 -= 40;
              v51 -= 5;
            }
            while (v51 != v58);
            v58 = *a5;
          }
          *a5 = v64;
          a5[1] = v57;
          a5[2] = v65;
          if (v58)
            operator delete(v58);
        }
        else
        {
          *v51 = v52;
          v51[1] = v53;
          v51[2] = v54;
          v51[3] = v55;
          v57 = v51 + 5;
          v51[4] = v56;
          v19 = v161;
        }
        a5[1] = v57;
        v68 = HIDWORD(v172);
        ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)v162, 2u, 4u, SHIDWORD(v172));
        v163 = v68;
        ZinResizeLayerUtils::ResizeDecomposedDesc::ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)&v202, (ZinIrTransposeUnitInfo *)v162);
        v69 = a4[1];
        if (v69 >= a4[2])
        {
          v70 = std::vector<ZinResizeLayerUtils::ResizeDecomposedDesc>::__push_back_slow_path<ZinResizeLayerUtils::ResizeDecomposedDesc const&>(a4, (const ZinResizeLayerUtils::ResizeDecomposedDesc *)&v202);
        }
        else
        {
          ZinResizeLayerUtils::ResizeDecomposedDesc::ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)a4[1], (const ZinResizeLayerUtils::ResizeDecomposedDesc *)&v202);
          v70 = v69 + 344;
          a4[1] = v69 + 344;
        }
        a4[1] = v70;
        ZinResizeLayerUtils::ResizeDecomposedDesc::~ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)&v202);
        v202 = vdupq_n_s64(1uLL);
        v203 = v202;
        v204 = 1;
        ZinIrTransposeUnitInfo::TransposeDimensions<ZinTensorDimensions>((_QWORD *)a5[1] - 5, (uint64_t)&__p, &v202);
        v71 = (int64x2_t *)a5[1];
        v72 = (int64x2_t *)a5[2];
        if (v71 >= v72)
        {
          v76 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v71 - (_BYTE *)*a5) >> 3);
          v77 = v76 + 1;
          if (v76 + 1 > 0x666666666666666)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v78 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v72 - (_BYTE *)*a5) >> 3);
          if (2 * v78 > v77)
            v77 = 2 * v78;
          if (v78 >= 0x333333333333333)
            v79 = 0x666666666666666;
          else
            v79 = v77;
          if (v79)
            v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>(v158, v79);
          else
            v80 = 0;
          v81 = &v80[40 * v76];
          v82 = &v80[40 * v79];
          v83 = v202;
          v84 = v203;
          *((_QWORD *)v81 + 4) = v204;
          *(int64x2_t *)v81 = v83;
          *((int64x2_t *)v81 + 1) = v84;
          v75 = v81 + 40;
          v86 = (char *)*a5;
          v85 = (char *)a5[1];
          if (v85 != *a5)
          {
            do
            {
              v87 = *(_OWORD *)(v85 - 40);
              v88 = *(_OWORD *)(v85 - 24);
              *((_QWORD *)v81 - 1) = *((_QWORD *)v85 - 1);
              *(_OWORD *)(v81 - 24) = v88;
              *(_OWORD *)(v81 - 40) = v87;
              v81 -= 40;
              v85 -= 40;
            }
            while (v85 != v86);
            v85 = (char *)*a5;
          }
          *a5 = v81;
          a5[1] = v75;
          a5[2] = v82;
          if (v85)
            operator delete(v85);
        }
        else
        {
          v73 = v202;
          v74 = v203;
          v71[2].i64[0] = v204;
          *v71 = v73;
          v71[1] = v74;
          v75 = &v71[2].i8[8];
        }
        a5[1] = v75;
        v162[0] = off_24C021A98;
        if (__p)
        {
          v165 = __p;
          operator delete(__p);
        }
        ZinIrUnitInfo::~ZinIrUnitInfo(v162);
        v166 = off_24C01ED88;
        a6 = v159;
        if ((_QWORD)v181)
        {
          *((_QWORD *)&v181 + 1) = v181;
          operator delete((void *)v181);
        }
        if (*((_QWORD *)&v179 + 1))
        {
          *(_QWORD *)&v180 = *((_QWORD *)&v179 + 1);
          operator delete(*((void **)&v179 + 1));
        }
        ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v166);
        v198[0] = off_24C021A98;
        if (v200)
        {
          v201 = v200;
          operator delete(v200);
        }
        ZinIrUnitInfo::~ZinIrUnitInfo(v198);
        a1 = v160;
      }
      if (a1[2] != *(_DWORD *)(a2 + 156) || a6)
      {
        v89 = (int *)(a2 + 68);
        if (v19 == 1)
          v89 = a3;
        v90 = *v89;
        ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)v198, 2u, 3u, *v89);
        v199 = v90;
        ZinResizeLayerUtils::ResizeDecomposedDesc::ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)&v202, (ZinIrTransposeUnitInfo *)v198);
        v91 = a4[1];
        if (v91 >= a4[2])
        {
          v92 = std::vector<ZinResizeLayerUtils::ResizeDecomposedDesc>::__push_back_slow_path<ZinResizeLayerUtils::ResizeDecomposedDesc const&>(a4, (const ZinResizeLayerUtils::ResizeDecomposedDesc *)&v202);
        }
        else
        {
          ZinResizeLayerUtils::ResizeDecomposedDesc::ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)a4[1], (const ZinResizeLayerUtils::ResizeDecomposedDesc *)&v202);
          v92 = v91 + 344;
          a4[1] = v91 + 344;
        }
        a4[1] = v92;
        ZinResizeLayerUtils::ResizeDecomposedDesc::~ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)&v202);
        v195 = vdupq_n_s64(1uLL);
        v196 = v195;
        v197 = 1;
        v93 = (char *)a5[1];
        if (v93 == *a5)
          v94 = (char *)a1;
        else
          v94 = v93 - 40;
        ZinIrTransposeUnitInfo::TransposeDimensions<ZinTensorDimensions>(v94, (uint64_t)&v200, &v195);
        v95 = (int64x2_t *)a5[1];
        v96 = (int64x2_t *)a5[2];
        if (v95 >= v96)
        {
          v100 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v95 - (_BYTE *)*a5) >> 3);
          v101 = v100 + 1;
          if (v100 + 1 > 0x666666666666666)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v102 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v96 - (_BYTE *)*a5) >> 3);
          if (2 * v102 > v101)
            v101 = 2 * v102;
          if (v102 >= 0x333333333333333)
            v103 = 0x666666666666666;
          else
            v103 = v101;
          if (v103)
            v104 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)(a5 + 2), v103);
          else
            v104 = 0;
          v105 = &v104[40 * v100];
          v106 = &v104[40 * v103];
          v107 = v195;
          v108 = v196;
          *((_QWORD *)v105 + 4) = v197;
          *(int64x2_t *)v105 = v107;
          *((int64x2_t *)v105 + 1) = v108;
          v99 = v105 + 40;
          v110 = (char *)*a5;
          v109 = (char *)a5[1];
          if (v109 != *a5)
          {
            do
            {
              v111 = *(_OWORD *)(v109 - 40);
              v112 = *(_OWORD *)(v109 - 24);
              *((_QWORD *)v105 - 1) = *((_QWORD *)v109 - 1);
              *(_OWORD *)(v105 - 24) = v112;
              *(_OWORD *)(v105 - 40) = v111;
              v105 -= 40;
              v109 -= 40;
            }
            while (v109 != v110);
            v109 = (char *)*a5;
          }
          *a5 = v105;
          a5[1] = v99;
          a5[2] = v106;
          if (v109)
            operator delete(v109);
        }
        else
        {
          v97 = v195;
          v98 = v196;
          v95[2].i64[0] = v197;
          *v95 = v97;
          v95[1] = v98;
          v99 = &v95[2].i8[8];
        }
        a5[1] = v99;
        v170 = 0;
        v168 = 0;
        v169 = 0;
        *(_QWORD *)&v172 = 0;
        v171 = 0uLL;
        v175 = -1;
        v176 = -1;
        v177 = -1;
        v179 = 0u;
        v180 = 0u;
        v181 = 0u;
        v178 = -1;
        v182 = 0;
        v183 = 1;
        v184 = 0;
        v185 = 0;
        v186 = -1;
        v187 = -1;
        v188 = -1;
        v189 = -1;
        v190 = 0x3F80000000000006;
        v166 = off_24C01CAD8;
        v167 = 0;
        v192[4] = 0;
        *(int64x2_t *)&v192[8] = vdupq_n_s64(1uLL);
        *(_QWORD *)&v192[24] = 1;
        *(_QWORD *)v193 = 1;
        *(_QWORD *)&v113 = 0x100000001;
        *((_QWORD *)&v113 + 1) = 0x100000001;
        *(_OWORD *)&v193[8] = v113;
        *(_QWORD *)&v193[24] = 0x100000001;
        memset(v194, 0, 24);
        *(_DWORD *)&v194[24] = 1;
        v191 = 0;
        *(_DWORD *)v192 = 1;
        v174 = 0x400000001;
        v173 = *(unsigned int *)(a2 + 156);
        *((_QWORD *)&v172 + 1) = __PAIR64__(*(_DWORD *)(a2 + 68), v90);
        v202.i8[4] = 0;
        v202.i32[0] = 1;
        ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinIrKernelUnitInfo *)&v202.u64[1], (const ZinIrKernelUnitInfo *)&v166);
        v114 = *(_OWORD *)v193;
        v115 = *(_OWORD *)v194;
        v116[18] = *(_OWORD *)&v193[16];
        v116[19] = v115;
        v206 = *(_OWORD *)&v194[12];
        v117 = *(_OWORD *)v192;
        v116[16] = *(_OWORD *)&v192[16];
        v116[17] = v114;
        v202.i64[1] = (uint64_t)off_24C01CAD8;
        v205 = v117;
        v118 = a4[1];
        if (v118 >= a4[2])
        {
          v119 = std::vector<ZinResizeLayerUtils::ResizeDecomposedDesc>::__push_back_slow_path<ZinResizeLayerUtils::ResizeDecomposedDesc const&>(a4, (const ZinResizeLayerUtils::ResizeDecomposedDesc *)&v202);
        }
        else
        {
          ZinResizeLayerUtils::ResizeDecomposedDesc::ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)a4[1], (const ZinResizeLayerUtils::ResizeDecomposedDesc *)&v202);
          v119 = v118 + 344;
          a4[1] = v118 + 344;
        }
        a4[1] = v119;
        ZinResizeLayerUtils::ResizeDecomposedDesc::~ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)&v202);
        v121 = a5[1];
        v120 = (unint64_t)a5[2];
        v122 = *(v121 - 5);
        v123 = *(unsigned int *)(a2 + 156);
        v125 = *(v121 - 3);
        v124 = *(v121 - 2);
        v126 = *(v121 - 1);
        if ((unint64_t)v121 >= v120)
        {
          v128 = *a5;
          v129 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v121 - (_BYTE *)*a5) >> 3);
          v130 = v129 + 1;
          if (v129 + 1 > 0x666666666666666)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v131 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v120 - (_QWORD)v128) >> 3);
          if (2 * v131 > v130)
            v130 = 2 * v131;
          if (v131 >= 0x333333333333333)
            v132 = 0x666666666666666;
          else
            v132 = v130;
          if (v132)
          {
            v133 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)(a5 + 2), v132);
            v128 = *a5;
            v121 = a5[1];
          }
          else
          {
            v133 = 0;
          }
          v134 = &v133[40 * v129];
          *(_QWORD *)v134 = v122;
          *((_QWORD *)v134 + 1) = v123;
          v135 = &v133[40 * v132];
          *((_QWORD *)v134 + 2) = v125;
          *((_QWORD *)v134 + 3) = v124;
          *((_QWORD *)v134 + 4) = v126;
          v127 = v134 + 40;
          if (v121 != v128)
          {
            do
            {
              v136 = *(_OWORD *)(v121 - 5);
              v137 = *(_OWORD *)(v121 - 3);
              *((_QWORD *)v134 - 1) = *(v121 - 1);
              *(_OWORD *)(v134 - 24) = v137;
              *(_OWORD *)(v134 - 40) = v136;
              v134 -= 40;
              v121 -= 5;
            }
            while (v121 != v128);
            v128 = *a5;
          }
          *a5 = v134;
          a5[1] = v127;
          a5[2] = v135;
          if (v128)
            operator delete(v128);
        }
        else
        {
          *v121 = v122;
          v121[1] = v123;
          v121[2] = v125;
          v121[3] = v124;
          v127 = v121 + 5;
          v121[4] = v126;
        }
        a5[1] = v127;
        ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)v162, 2u, 3u, *(_DWORD *)(a2 + 68));
        v163 = *(_DWORD *)(a2 + 68);
        ZinResizeLayerUtils::ResizeDecomposedDesc::ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)&v202, (ZinIrTransposeUnitInfo *)v162);
        v138 = a4[1];
        if (v138 >= a4[2])
        {
          v139 = std::vector<ZinResizeLayerUtils::ResizeDecomposedDesc>::__push_back_slow_path<ZinResizeLayerUtils::ResizeDecomposedDesc const&>(a4, (const ZinResizeLayerUtils::ResizeDecomposedDesc *)&v202);
        }
        else
        {
          ZinResizeLayerUtils::ResizeDecomposedDesc::ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)a4[1], (const ZinResizeLayerUtils::ResizeDecomposedDesc *)&v202);
          v139 = v138 + 344;
          a4[1] = v138 + 344;
        }
        a4[1] = v139;
        ZinResizeLayerUtils::ResizeDecomposedDesc::~ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)&v202);
        v202 = vdupq_n_s64(1uLL);
        v203 = v202;
        v204 = 1;
        ZinIrTransposeUnitInfo::TransposeDimensions<ZinTensorDimensions>((_QWORD *)a5[1] - 5, (uint64_t)&__p, &v202);
        v140 = (int64x2_t *)a5[1];
        v141 = (int64x2_t *)a5[2];
        if (v140 >= v141)
        {
          v145 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v140 - (_BYTE *)*a5) >> 3);
          v146 = v145 + 1;
          if (v145 + 1 > 0x666666666666666)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v147 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v141 - (_BYTE *)*a5) >> 3);
          if (2 * v147 > v146)
            v146 = 2 * v147;
          if (v147 >= 0x333333333333333)
            v148 = 0x666666666666666;
          else
            v148 = v146;
          if (v148)
            v149 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)(a5 + 2), v148);
          else
            v149 = 0;
          v150 = &v149[40 * v145];
          v151 = &v149[40 * v148];
          v152 = v202;
          v153 = v203;
          *((_QWORD *)v150 + 4) = v204;
          *(int64x2_t *)v150 = v152;
          *((int64x2_t *)v150 + 1) = v153;
          v144 = v150 + 40;
          v155 = (char *)*a5;
          v154 = (char *)a5[1];
          if (v154 != *a5)
          {
            do
            {
              v156 = *(_OWORD *)(v154 - 40);
              v157 = *(_OWORD *)(v154 - 24);
              *((_QWORD *)v150 - 1) = *((_QWORD *)v154 - 1);
              *(_OWORD *)(v150 - 24) = v157;
              *(_OWORD *)(v150 - 40) = v156;
              v150 -= 40;
              v154 -= 40;
            }
            while (v154 != v155);
            v154 = (char *)*a5;
          }
          *a5 = v150;
          a5[1] = v144;
          a5[2] = v151;
          if (v154)
            operator delete(v154);
        }
        else
        {
          v142 = v202;
          v143 = v203;
          v140[2].i64[0] = v204;
          *v140 = v142;
          v140[1] = v143;
          v144 = &v140[2].i8[8];
        }
        a5[1] = v144;
        v162[0] = off_24C021A98;
        if (__p)
        {
          v165 = __p;
          operator delete(__p);
        }
        ZinIrUnitInfo::~ZinIrUnitInfo(v162);
        v166 = off_24C01ED88;
        if ((_QWORD)v181)
        {
          *((_QWORD *)&v181 + 1) = v181;
          operator delete((void *)v181);
        }
        if (*((_QWORD *)&v179 + 1))
        {
          *(_QWORD *)&v180 = *((_QWORD *)&v179 + 1);
          operator delete(*((void **)&v179 + 1));
        }
        ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v166);
        v198[0] = off_24C021A98;
        if (v200)
        {
          v201 = v200;
          operator delete(v200);
        }
        ZinIrUnitInfo::~ZinIrUnitInfo(v198);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_206DE7E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  ZinResizeLayerUtils::ResizeDecomposedDesc::~ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)&STACK[0x270]);
  ZinIrTransposeUnitInfo::~ZinIrTransposeUnitInfo((ZinIrTransposeUnitInfo *)&a14);
  ZinIrConvUnitInfo::~ZinIrConvUnitInfo((ZinIrConvUnitInfo *)&a27);
  ZinIrTransposeUnitInfo::~ZinIrTransposeUnitInfo((ZinIrTransposeUnitInfo *)&STACK[0x208]);
  _Unwind_Resume(a1);
}

void sub_206DE7F4C()
{
  JUMPOUT(0x206DE7F44);
}

uint64_t ZinResizeLayerUtils::IsDecomposableViaTransposeAndConvolution(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  BOOL v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  BOOL v12;
  uint64_t v13;
  _BOOL4 v14;
  BOOL v15;
  int v16;

  v1 = a1[16];
  v2 = a1[17];
  if (v1 != v2)
  {
    v3 = v1 + 8;
    do
    {
      v4 = *(_DWORD *)(v3 - 4);
      v5 = v4 == 0;
      if (v4)
        v6 = 1;
      else
        v6 = v3 == v2;
      v3 += 8;
    }
    while (!v6);
    while (*(_DWORD *)(v1 + 4) == 1)
    {
      v1 += 8;
      if (v1 == v2)
        goto LABEL_14;
    }
    if (v4)
      return 0;
  }
  v5 = 1;
LABEL_14:
  v8 = a1[22];
  v9 = a1[23];
  if (v8 == v9)
  {
    v14 = 1;
    v11 = 1;
    if (v5)
      return 1;
  }
  else
  {
    v10 = v8 + 8;
    do
    {
      v11 = *(_DWORD *)(v10 - 4) == 3;
      v12 = *(_DWORD *)(v10 - 4) != 3 || v10 == v9;
      v10 += 8;
    }
    while (!v12);
    v13 = v8 + 8;
    do
    {
      v14 = *(_DWORD *)(v13 - 4) == 1;
      v15 = *(_DWORD *)(v13 - 4) != 1 || v13 == v9;
      v13 += 8;
    }
    while (!v15);
    while (1)
    {
      v16 = *(_DWORD *)(v8 + 4);
      if (v16 != 6 && v16 != 0)
        break;
      v8 += 8;
      if (v8 == v9)
      {
        if (!v5)
          return v11 | v14;
        return 1;
      }
    }
  }
  return v11 | v14;
}

BOOL ZinResizeLayerUtils::DecomposeUpsampleWithUnalignedCorners(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t *a4, void **a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v15;
  _BOOL4 v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _DWORD *v24;
  _DWORD *v25;
  int v26;
  __int128 v27;
  __int128 v28;
  _OWORD *v29;
  __int128 v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  _DWORD *v50;
  _DWORD *v51;
  unint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _OWORD *v57;
  __int128 v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  __int128 v73;
  __int128 v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  __int128 v89;
  __int128 v90;
  uint64_t v92;
  uint64_t v93;
  void (**v94)(ZinIrEWUnitInfo *__hidden);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  void *v105[2];
  __int128 v106;
  __int128 __p;
  uint64_t v108;
  int v109;
  char v110;
  __int16 v111;
  int v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  _BYTE v118[32];
  _BYTE v119[32];
  _BYTE v120[28];
  __int128 v121;
  __int128 v122;
  int v123;
  __int128 v124;
  void *v125[4];
  int v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  int v139;
  char v140;
  __int16 v141;
  int v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  _BYTE v152[28];
  _QWORD v153[43];
  int v154;
  char v155;
  void (**v156)(ZinIrConvUnitInfo *__hidden);
  __int128 v157;
  __int128 v158;
  uint64_t v159;

  v159 = *MEMORY[0x24BDAC8D0];
  v11 = *((_QWORD *)a1 + 2);
  v10 = *((_QWORD *)a1 + 3);
  v12 = *(unsigned int *)(a2 + 156);
  v13 = *(unsigned int *)(a2 + 160);
  v15 = v13 == 2 * v10 || 3 * v10 == v13 || v13 == 4 * v10;
  if (v12 == 2 * v11 || 3 * v11 == v12)
  {
    v17 = 1;
  }
  else
  {
    v17 = v12 == 4 * v11;
    v18 = v12 == 4 * v11 || v15;
    if ((v18 & 1) == 0)
      ZinAssertImpl("The Upsample resize factor is not multiple of 2, 3, or 4 when the sampling grid mode is UnalignedCorners");
  }
  v19 = v13 / v10;
  v20 = v12 / v11;
  if ((v13 / v10) == (v12 / v11))
  {
    v126 = 0;
    v127 = 0u;
    v128 = 0u;
    v131 = -1;
    v132 = -1;
    v133 = -1;
    v135 = 0u;
    v136 = 0u;
    v137 = 0u;
    v134 = -1;
    v138 = 0;
    v139 = 1;
    v140 = 0;
    v141 = 0;
    v142 = -1;
    v143 = -1;
    v144 = -1;
    v145 = -1;
    v146 = 0x3F80000000000006;
    v125[0] = off_24C01CAD8;
    memset(&v125[1], 0, 24);
    BYTE4(v148) = 0;
    *((_QWORD *)&v150 + 1) = 0x100000001;
    LODWORD(v151) = 1;
    *(_DWORD *)&v152[24] = 1;
    v147 = 0;
    LODWORD(v148) = 4;
    if (v15)
      v21 = 2 * (int)v19;
    else
      v21 = 1;
    if (v17)
      v22 = 2 * (int)v19;
    else
      v22 = 1;
    *((_QWORD *)&v149 + 1) = v22;
    *(_QWORD *)&v150 = 1;
    DWORD1(v151) = v13 / v10;
    *((_QWORD *)&v151 + 1) = v19 | 0x100000000;
    v23 = (int)(float)((float)((float)(int)v19 * 0.5) + -0.5);
    *(_DWORD *)v152 = v23 + v19;
    *(_DWORD *)&v152[4] = ~v23 + v19;
    *(_QWORD *)&v152[8] = __PAIR64__(*(unsigned int *)&v152[4], v23 + (int)v19);
    *(_QWORD *)&v152[16] = 0;
    v130 = *(_QWORD *)"";
    v129 = *((_QWORD *)a1 + 1);
    *(_QWORD *)&v149 = v21;
    *((_QWORD *)&v148 + 1) = v129;
    v24 = *(_DWORD **)(a3 + 1464);
    v25 = *(_DWORD **)(a3 + 1472);
    if (v24 != v25)
    {
      while (*v24 != 3)
      {
        if (++v24 == v25)
        {
          v24 = *(_DWORD **)(a3 + 1472);
          break;
        }
      }
    }
    if (v24 == v25)
      v26 = 1;
    else
      v26 = 3;
    *(_DWORD *)&v152[24] = v26;
    BYTE4(v148) = 1;
    v155 = 0;
    v154 = 1;
    ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinIrKernelUnitInfo *)&v156, (const ZinIrKernelUnitInfo *)v125);
    v27 = v150;
    v28 = *(_OWORD *)v152;
    v29[18] = v151;
    v29[19] = v28;
    v158 = *(_OWORD *)&v152[12];
    v30 = v148;
    v29[16] = v149;
    v29[17] = v27;
    v156 = off_24C01CAD8;
    v157 = v30;
    v31 = a4[1];
    if (v31 >= a4[2])
    {
      v32 = std::vector<ZinResizeLayerUtils::ResizeDecomposedDesc>::__push_back_slow_path<ZinResizeLayerUtils::ResizeDecomposedDesc const&>(a4, (const ZinResizeLayerUtils::ResizeDecomposedDesc *)&v154);
    }
    else
    {
      ZinResizeLayerUtils::ResizeDecomposedDesc::ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)a4[1], (const ZinResizeLayerUtils::ResizeDecomposedDesc *)&v154);
      v32 = v31 + 344;
      a4[1] = v31 + 344;
    }
    a4[1] = v32;
    v124 = *a1;
    v33 = *((_QWORD *)a1 + 4);
    v35 = *(unsigned int *)(a2 + 156);
    v34 = *(unsigned int *)(a2 + 160);
    v36 = (char *)a5[2];
    v37 = (char *)a5[1];
    v92 = v34;
    v93 = v33;
    if (v37 >= v36)
    {
      v39 = 0xCCCCCCCCCCCCCCCDLL * ((v37 - (_BYTE *)*a5) >> 3);
      v40 = v39 + 1;
      if (v39 + 1 > 0x666666666666666)
        goto LABEL_110;
      v41 = 0xCCCCCCCCCCCCCCCDLL * ((v36 - (_BYTE *)*a5) >> 3);
      if (2 * v41 > v40)
        v40 = 2 * v41;
      if (v41 >= 0x333333333333333)
        v42 = 0x666666666666666;
      else
        v42 = v40;
      if (v42)
        v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)(a5 + 2), v42);
      else
        v43 = 0;
      v44 = &v43[40 * v39];
      v45 = &v43[40 * v42];
      *(_OWORD *)v44 = v124;
      *((_QWORD *)v44 + 2) = v35;
      *((_QWORD *)v44 + 3) = v92;
      *((_QWORD *)v44 + 4) = v93;
      v38 = v44 + 40;
      v47 = (char *)*a5;
      v46 = (char *)a5[1];
      if (v46 != *a5)
      {
        do
        {
          v48 = *(_OWORD *)(v46 - 40);
          v49 = *(_OWORD *)(v46 - 24);
          *((_QWORD *)v44 - 1) = *((_QWORD *)v46 - 1);
          *(_OWORD *)(v44 - 24) = v49;
          *(_OWORD *)(v44 - 40) = v48;
          v44 -= 40;
          v46 -= 40;
        }
        while (v46 != v47);
        v46 = (char *)*a5;
      }
      *a5 = v44;
      a5[1] = v38;
      a5[2] = v45;
      if (v46)
        operator delete(v46);
    }
    else
    {
      *(_OWORD *)v37 = *a1;
      *((_QWORD *)v37 + 2) = v35;
      *((_QWORD *)v37 + 3) = v34;
      *((_QWORD *)v37 + 4) = v33;
      v38 = v37 + 40;
    }
    a5[1] = v38;
    v50 = *(_DWORD **)(a3 + 1464);
    v51 = *(_DWORD **)(a3 + 1472);
    if (v50 != v51)
    {
      while (*v50 != 3)
      {
        if (++v50 == v51)
        {
          v50 = *(_DWORD **)(a3 + 1472);
          break;
        }
      }
    }
    if (v50 != v51)
      goto LABEL_103;
    if (*(_BYTE *)(a3 + 1882))
    {
      v98 = 0;
      v96 = 0;
      v97 = 0;
      v99 = 0u;
      v100 = 0u;
      v101 = -1;
      v94 = off_24C021950;
      v95 = 0;
      v102 = 0u;
      v103 = 0u;
      LODWORD(v104) = 1065353216;
      v121 = 0u;
      v122 = 0u;
      v123 = 1065353216;
      LODWORD(v153[0]) = 2;
      v153[1] = *((_QWORD *)a1 + 1);
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::pair<ZinIrDimension const,unsigned long> const&>((uint64_t)&v121, (int *)v153, v153);
      LODWORD(v104) = v123;
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>(&v102, (uint64_t *)v122, 0);
      ZinResizeLayerUtils::ResizeDecomposedDesc::ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)v153, (ZinIrBroadcastUnitInfo *)&v94);
      v52 = a4[1];
      if (v52 >= a4[2])
      {
        v53 = std::vector<ZinResizeLayerUtils::ResizeDecomposedDesc>::__push_back_slow_path<ZinResizeLayerUtils::ResizeDecomposedDesc const&>(a4, (const ZinResizeLayerUtils::ResizeDecomposedDesc *)v153);
      }
      else
      {
        ZinResizeLayerUtils::ResizeDecomposedDesc::ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)a4[1], (const ZinResizeLayerUtils::ResizeDecomposedDesc *)v153);
        v53 = v52 + 344;
        a4[1] = v52 + 344;
      }
      a4[1] = v53;
      ZinResizeLayerUtils::ResizeDecomposedDesc::~ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)v153);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v121);
      v94 = off_24C021950;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v102);
    }
    else
    {
      v98 = 0;
      v96 = 0;
      v97 = 0;
      v99 = 0u;
      v100 = 0u;
      DWORD2(v102) = -1;
      *(_QWORD *)&v103 = -1;
      DWORD2(v103) = -1;
      v104 = -1;
      *(_OWORD *)v105 = 0u;
      v106 = 0u;
      __p = 0u;
      v108 = 0;
      v109 = 1;
      v110 = 0;
      v111 = 0;
      v112 = -1;
      v113 = -1;
      v114 = -1;
      v115 = -1;
      v116 = 0x3F80000000000006;
      v94 = off_24C01CAD8;
      v95 = 0;
      *(_QWORD *)&v54 = 0x100000001;
      *((_QWORD *)&v54 + 1) = 0x100000001;
      *(_OWORD *)&v119[8] = v54;
      *(_QWORD *)&v119[24] = 0x100000001;
      memset(v120, 0, 24);
      *(_DWORD *)&v120[24] = 1;
      v117 = 0;
      *(_DWORD *)v118 = 1;
      *(_QWORD *)&v118[24] = 1;
      *(_QWORD *)v119 = 1;
      *(_QWORD *)&v102 = 0x200000000;
      v101 = *((_QWORD *)a1 + 1);
      *(int64x2_t *)&v118[8] = vdupq_n_s64(1uLL);
      v118[4] = 1;
      BYTE4(v153[0]) = 0;
      LODWORD(v153[0]) = 1;
      ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinIrKernelUnitInfo *)&v153[1], (const ZinIrKernelUnitInfo *)&v94);
      v55 = *(_OWORD *)v119;
      v56 = *(_OWORD *)v120;
      v57[18] = *(_OWORD *)&v119[16];
      v57[19] = v56;
      *(_OWORD *)((char *)&v153[40] + 4) = *(_OWORD *)&v120[12];
      v58 = *(_OWORD *)v118;
      v57[16] = *(_OWORD *)&v118[16];
      v57[17] = v55;
      v153[1] = off_24C01CAD8;
      *(_OWORD *)&v153[31] = v58;
      v59 = a4[1];
      if (v59 >= a4[2])
      {
        v60 = std::vector<ZinResizeLayerUtils::ResizeDecomposedDesc>::__push_back_slow_path<ZinResizeLayerUtils::ResizeDecomposedDesc const&>(a4, (const ZinResizeLayerUtils::ResizeDecomposedDesc *)v153);
      }
      else
      {
        ZinResizeLayerUtils::ResizeDecomposedDesc::ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)a4[1], (const ZinResizeLayerUtils::ResizeDecomposedDesc *)v153);
        v60 = v59 + 344;
        a4[1] = v59 + 344;
      }
      a4[1] = v60;
      ZinResizeLayerUtils::ResizeDecomposedDesc::~ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)v153);
      v94 = off_24C01ED88;
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      if (v105[1])
      {
        *(void **)&v106 = v105[1];
        operator delete(v105[1]);
      }
    }
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v94);
    v62 = (char *)a5[1];
    v61 = (char *)a5[2];
    if (v62 < v61)
    {
      *(_OWORD *)v62 = v124;
      *((_QWORD *)v62 + 2) = v35;
      *((_QWORD *)v62 + 3) = v92;
      *((_QWORD *)v62 + 4) = v93;
      v63 = v62 + 40;
LABEL_83:
      a5[1] = v63;
      v98 = 0;
      v96 = 0;
      v97 = 0;
      v99 = 0u;
      v101 = -1;
      v100 = 0u;
      v94 = off_24C01A728;
      v95 = 0;
      LODWORD(v102) = 2;
      ZinResizeLayerUtils::ResizeDecomposedDesc::ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)v153, (ZinIrEWUnitInfo *)&v94);
      v75 = a4[1];
      if (v75 >= a4[2])
      {
        v76 = std::vector<ZinResizeLayerUtils::ResizeDecomposedDesc>::__push_back_slow_path<ZinResizeLayerUtils::ResizeDecomposedDesc const&>(a4, (const ZinResizeLayerUtils::ResizeDecomposedDesc *)v153);
      }
      else
      {
        ZinResizeLayerUtils::ResizeDecomposedDesc::ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)a4[1], (const ZinResizeLayerUtils::ResizeDecomposedDesc *)v153);
        v76 = v75 + 344;
        a4[1] = v75 + 344;
      }
      a4[1] = v76;
      v78 = (char *)a5[1];
      v77 = (char *)a5[2];
      if (v78 >= v77)
      {
        v80 = 0xCCCCCCCCCCCCCCCDLL * ((v78 - (_BYTE *)*a5) >> 3);
        v81 = v80 + 1;
        if (v80 + 1 > 0x666666666666666)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v82 = 0xCCCCCCCCCCCCCCCDLL * ((v77 - (_BYTE *)*a5) >> 3);
        if (2 * v82 > v81)
          v81 = 2 * v82;
        if (v82 >= 0x333333333333333)
          v83 = 0x666666666666666;
        else
          v83 = v81;
        if (v83)
          v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)(a5 + 2), v83);
        else
          v84 = 0;
        v85 = &v84[40 * v80];
        v86 = &v84[40 * v83];
        *(_OWORD *)v85 = v124;
        *((_QWORD *)v85 + 2) = v35;
        *((_QWORD *)v85 + 3) = v92;
        *((_QWORD *)v85 + 4) = v93;
        v79 = v85 + 40;
        v88 = (char *)*a5;
        v87 = (char *)a5[1];
        if (v87 != *a5)
        {
          do
          {
            v89 = *(_OWORD *)(v87 - 40);
            v90 = *(_OWORD *)(v87 - 24);
            *((_QWORD *)v85 - 1) = *((_QWORD *)v87 - 1);
            *(_OWORD *)(v85 - 24) = v90;
            *(_OWORD *)(v85 - 40) = v89;
            v85 -= 40;
            v87 -= 40;
          }
          while (v87 != v88);
          v87 = (char *)*a5;
        }
        *a5 = v85;
        a5[1] = v79;
        a5[2] = v86;
        if (v87)
          operator delete(v87);
      }
      else
      {
        *(_OWORD *)v78 = v124;
        *((_QWORD *)v78 + 2) = v35;
        *((_QWORD *)v78 + 3) = v92;
        *((_QWORD *)v78 + 4) = v93;
        v79 = v78 + 40;
      }
      a5[1] = v79;
      ZinResizeLayerUtils::ResizeDecomposedDesc::~ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)v153);
      ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v94);
LABEL_103:
      ZinResizeLayerUtils::ResizeDecomposedDesc::~ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)&v154);
      v125[0] = off_24C01ED88;
      if ((_QWORD)v137)
      {
        *((_QWORD *)&v137 + 1) = v137;
        operator delete((void *)v137);
      }
      if (*((_QWORD *)&v135 + 1))
      {
        *(_QWORD *)&v136 = *((_QWORD *)&v135 + 1);
        operator delete(*((void **)&v135 + 1));
      }
      ZinIrUnitInfo::~ZinIrUnitInfo(v125);
      return (_DWORD)v19 == (_DWORD)v20;
    }
    v64 = 0xCCCCCCCCCCCCCCCDLL * ((v62 - (_BYTE *)*a5) >> 3);
    v65 = v64 + 1;
    if (v64 + 1 <= 0x666666666666666)
    {
      v66 = 0xCCCCCCCCCCCCCCCDLL * ((v61 - (_BYTE *)*a5) >> 3);
      if (2 * v66 > v65)
        v65 = 2 * v66;
      if (v66 >= 0x333333333333333)
        v67 = 0x666666666666666;
      else
        v67 = v65;
      if (v67)
        v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)(a5 + 2), v67);
      else
        v68 = 0;
      v69 = &v68[40 * v64];
      v70 = &v68[40 * v67];
      *(_OWORD *)v69 = v124;
      *((_QWORD *)v69 + 2) = v35;
      *((_QWORD *)v69 + 3) = v92;
      *((_QWORD *)v69 + 4) = v93;
      v63 = v69 + 40;
      v72 = (char *)*a5;
      v71 = (char *)a5[1];
      if (v71 != *a5)
      {
        do
        {
          v73 = *(_OWORD *)(v71 - 40);
          v74 = *(_OWORD *)(v71 - 24);
          *((_QWORD *)v69 - 1) = *((_QWORD *)v71 - 1);
          *(_OWORD *)(v69 - 24) = v74;
          *(_OWORD *)(v69 - 40) = v73;
          v69 -= 40;
          v71 -= 40;
        }
        while (v71 != v72);
        v71 = (char *)*a5;
      }
      *a5 = v69;
      a5[1] = v63;
      a5[2] = v70;
      if (v71)
        operator delete(v71);
      goto LABEL_83;
    }
LABEL_110:
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  }
  return (_DWORD)v19 == (_DWORD)v20;
}

void sub_206DE89AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  ZinResizeLayerUtils::ResizeDecomposedDesc::~ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)&STACK[0x2F8]);
  ZinIrConvUnitInfo::~ZinIrConvUnitInfo((ZinIrConvUnitInfo *)&a11);
  ZinResizeLayerUtils::ResizeDecomposedDesc::~ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)&STACK[0x450]);
  ZinIrConvUnitInfo::~ZinIrConvUnitInfo((ZinIrConvUnitInfo *)&a62);
  _Unwind_Resume(a1);
}

BOOL ZinResizeLayerUtils::DecomposeUpSample4x(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void **a5)
{
  _BOOL8 IsUpsampleBy4x;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  __int128 v58;
  __int128 v59;
  _BOOL4 v61;
  __int128 v62;
  _QWORD v63[19];
  __int128 v64;
  void *__p;
  void *v66;
  uint64_t v67;
  char v68;
  __int128 v69;
  _QWORD v70[19];
  __int128 v71;
  void *v72;
  void *v73;
  uint64_t v74;
  char v75;
  _BYTE v76[344];
  _BYTE v77[344];
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  IsUpsampleBy4x = ZinResizeLayerUtils::IsUpsampleBy4x(a1, a2);
  v10 = IsUpsampleBy4x;
  if (IsUpsampleBy4x)
  {
    v61 = IsUpsampleBy4x;
    v11 = *(unsigned int *)(a2 + 160);
    v12 = *(unsigned int *)(a2 + 156);
    v14 = *(_QWORD *)(a1 + 16);
    v13 = *(_QWORD *)(a1 + 24);
    ZinIrTextureUnitInfo::ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)v70, (const ZinIrTextureUnitInfo *)a2);
    v71 = *(_OWORD *)(a2 + 156);
    v70[0] = &off_24C01F040;
    v72 = 0;
    v73 = 0;
    v74 = 0;
    std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v72, *(const void **)(a2 + 176), *(_QWORD *)(a2 + 184), (uint64_t)(*(_QWORD *)(a2 + 184) - *(_QWORD *)(a2 + 176)) >> 3);
    v75 = *(_BYTE *)(a2 + 200);
    __asm { FMOV            V8.2S, #-1.0 }
    *((_QWORD *)&v71 + 1) = _D8;
    v20 = *(_DWORD *)(a1 + 24) << (v11 / v13 == 4);
    LODWORD(v71) = *(_DWORD *)(a1 + 16) << (v12 / v14 == 4);
    DWORD1(v71) = v20;
    ZinResizeLayerUtils::ResizeDecomposedDesc::ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)v77, (ZinIrResizeUnitInfo *)v70);
    v21 = a4[1];
    if (v21 >= a4[2])
    {
      v22 = std::vector<ZinResizeLayerUtils::ResizeDecomposedDesc>::__push_back_slow_path<ZinResizeLayerUtils::ResizeDecomposedDesc const&>(a4, (const ZinResizeLayerUtils::ResizeDecomposedDesc *)v77);
    }
    else
    {
      ZinResizeLayerUtils::ResizeDecomposedDesc::ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)a4[1], (const ZinResizeLayerUtils::ResizeDecomposedDesc *)v77);
      v22 = v21 + 344;
      a4[1] = v21 + 344;
    }
    a4[1] = v22;
    v69 = *(_OWORD *)a1;
    v23 = *(_QWORD *)(a1 + 32);
    v24 = DWORD1(v71);
    v25 = v71;
    v26 = (char *)a5[2];
    v27 = (char *)a5[1];
    if (v27 >= v26)
    {
      v30 = 0xCCCCCCCCCCCCCCCDLL * ((v27 - (_BYTE *)*a5) >> 3);
      v31 = v30 + 1;
      if (v30 + 1 > 0x666666666666666)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v32 = 0xCCCCCCCCCCCCCCCDLL * ((v26 - (_BYTE *)*a5) >> 3);
      if (2 * v32 > v31)
        v31 = 2 * v32;
      if (v32 >= 0x333333333333333)
        v33 = 0x666666666666666;
      else
        v33 = v31;
      if (v33)
        v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)(a5 + 2), v33);
      else
        v34 = 0;
      v35 = &v34[40 * v30];
      v36 = &v34[40 * v33];
      *(_OWORD *)v35 = v69;
      *((_QWORD *)v35 + 2) = v25;
      *((_QWORD *)v35 + 3) = v24;
      *((_QWORD *)v35 + 4) = v23;
      v28 = v35 + 40;
      v38 = (char *)*a5;
      v37 = (char *)a5[1];
      if (v37 == *a5)
      {
        v29 = (__int128 *)(a2 + 156);
      }
      else
      {
        v29 = (__int128 *)(a2 + 156);
        do
        {
          v39 = *(_OWORD *)(v37 - 40);
          v40 = *(_OWORD *)(v37 - 24);
          *((_QWORD *)v35 - 1) = *((_QWORD *)v37 - 1);
          *(_OWORD *)(v35 - 24) = v40;
          *(_OWORD *)(v35 - 40) = v39;
          v35 -= 40;
          v37 -= 40;
        }
        while (v37 != v38);
        v37 = (char *)*a5;
      }
      *a5 = v35;
      a5[1] = v28;
      a5[2] = v36;
      if (v37)
        operator delete(v37);
    }
    else
    {
      *(_OWORD *)v27 = *(_OWORD *)a1;
      *((_QWORD *)v27 + 2) = v25;
      *((_QWORD *)v27 + 3) = v24;
      *((_QWORD *)v27 + 4) = v23;
      v28 = v27 + 40;
      v29 = (__int128 *)(a2 + 156);
    }
    a5[1] = v28;
    ZinIrTextureUnitInfo::ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)v63, (const ZinIrTextureUnitInfo *)a2);
    v64 = *v29;
    v63[0] = &off_24C01F040;
    __p = 0;
    v66 = 0;
    v67 = 0;
    std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&__p, *(const void **)(a2 + 176), *(_QWORD *)(a2 + 184), (uint64_t)(*(_QWORD *)(a2 + 184) - *(_QWORD *)(a2 + 176)) >> 3);
    v68 = *(_BYTE *)(a2 + 200);
    *((_QWORD *)&v64 + 1) = _D8;
    ZinResizeLayerUtils::ResizeDecomposedDesc::ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)v76, (ZinIrResizeUnitInfo *)v63);
    v41 = a4[1];
    if (v41 >= a4[2])
    {
      v42 = std::vector<ZinResizeLayerUtils::ResizeDecomposedDesc>::__push_back_slow_path<ZinResizeLayerUtils::ResizeDecomposedDesc const&>(a4, (const ZinResizeLayerUtils::ResizeDecomposedDesc *)v76);
    }
    else
    {
      ZinResizeLayerUtils::ResizeDecomposedDesc::ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)a4[1], (const ZinResizeLayerUtils::ResizeDecomposedDesc *)v76);
      v42 = v41 + 344;
      a4[1] = v41 + 344;
    }
    a4[1] = v42;
    v62 = *(_OWORD *)a1;
    v43 = *(_QWORD *)(a1 + 32);
    v45 = v64;
    v44 = DWORD1(v64);
    v47 = (char *)a5[1];
    v46 = (char *)a5[2];
    if (v47 >= v46)
    {
      v49 = 0xCCCCCCCCCCCCCCCDLL * ((v47 - (_BYTE *)*a5) >> 3);
      v50 = v49 + 1;
      if (v49 + 1 > 0x666666666666666)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v51 = 0xCCCCCCCCCCCCCCCDLL * ((v46 - (_BYTE *)*a5) >> 3);
      if (2 * v51 > v50)
        v50 = 2 * v51;
      if (v51 >= 0x333333333333333)
        v52 = 0x666666666666666;
      else
        v52 = v50;
      if (v52)
        v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)(a5 + 2), v52);
      else
        v53 = 0;
      v54 = &v53[40 * v49];
      v55 = &v53[40 * v52];
      *(_OWORD *)v54 = v62;
      *((_QWORD *)v54 + 2) = v45;
      *((_QWORD *)v54 + 3) = v44;
      *((_QWORD *)v54 + 4) = v43;
      v48 = v54 + 40;
      v57 = (char *)*a5;
      v56 = (char *)a5[1];
      if (v56 == *a5)
      {
        v10 = v61;
      }
      else
      {
        v10 = v61;
        do
        {
          v58 = *(_OWORD *)(v56 - 40);
          v59 = *(_OWORD *)(v56 - 24);
          *((_QWORD *)v54 - 1) = *((_QWORD *)v56 - 1);
          *(_OWORD *)(v54 - 24) = v59;
          *(_OWORD *)(v54 - 40) = v58;
          v54 -= 40;
          v56 -= 40;
        }
        while (v56 != v57);
        v56 = (char *)*a5;
      }
      *a5 = v54;
      a5[1] = v48;
      a5[2] = v55;
      if (v56)
        operator delete(v56);
    }
    else
    {
      *(_OWORD *)v47 = *(_OWORD *)a1;
      *((_QWORD *)v47 + 2) = v45;
      *((_QWORD *)v47 + 3) = v44;
      *((_QWORD *)v47 + 4) = v43;
      v48 = v47 + 40;
      v10 = v61;
    }
    a5[1] = v48;
    ZinResizeLayerUtils::ResizeDecomposedDesc::~ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)v76);
    v63[0] = &off_24C01F040;
    if (__p)
    {
      v66 = __p;
      operator delete(__p);
    }
    ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)v63);
    ZinResizeLayerUtils::ResizeDecomposedDesc::~ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)v77);
    v70[0] = &off_24C01F040;
    if (v72)
    {
      v73 = v72;
      operator delete(v72);
    }
    ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)v70);
  }
  return v10;
}

void sub_206DE8F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a68;

  ZinResizeLayerUtils::ResizeDecomposedDesc::~ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)&a68);
  ZinIrResizeUnitInfo::~ZinIrResizeUnitInfo((ZinIrResizeUnitInfo *)&a13);
  ZinResizeLayerUtils::ResizeDecomposedDesc::~ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)&STACK[0x330]);
  ZinIrResizeUnitInfo::~ZinIrResizeUnitInfo((ZinIrResizeUnitInfo *)&a42);
  _Unwind_Resume(a1);
}

void sub_206DE8FA4()
{
  JUMPOUT(0x206DE8F94);
}

void sub_206DE8FAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)&a42);
  JUMPOUT(0x206DE8F9CLL);
}

void sub_206DE8FBC()
{
  JUMPOUT(0x206DE8F9CLL);
}

uint64_t ZinResizeLayerUtils::DecomposeUpsampleWithDefault(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, void **a5)
{
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  __int128 v32;
  __int128 v33;
  _OWORD *v34;
  __int128 v35;
  unint64_t v36;
  uint64_t v37;
  __int128 v39;
  __int128 v40;
  _OWORD *v41;
  __int128 v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  char *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  __int128 v59;
  __int128 v60;
  char *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  __int128 v69;
  __int128 v70;
  char *v71;
  char *v72;
  __int128 v73;
  __int128 v74;
  void (***v75)(ZinIrKernelUnitInfo *__hidden);
  char *v76;
  char *v77;
  __int128 v78;
  __int128 v79;
  char *v80;
  char *v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _OWORD *v87;
  __int128 v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  __int128 v95;
  __int128 v96;
  char *v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  __int128 v105;
  __int128 v106;
  char *v107;
  char *v108;
  __int128 v109;
  __int128 v110;
  void *v112[4];
  int v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  int v117;
  void (**v118)(ZinIrKernelUnitInfo *__hidden);
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  int v135;
  char v136;
  __int16 v137;
  int v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  _BYTE v144[32];
  _BYTE v145[32];
  _BYTE v146[28];
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  void (**v150)(ZinIrKernelUnitInfo *__hidden);
  std::string v151;
  int v152;
  __int128 v153;
  _BYTE v154[24];
  __int128 v155;
  __int128 v156;
  _BYTE v157[40];
  __int128 v158;
  uint64_t v159;
  __int128 v160;
  __int128 v161;
  _BYTE v162[28];
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  _BYTE v167[28];
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  void (**v171)(ZinIrKernelUnitInfo *__hidden);
  std::string v172;
  int v173;
  __int128 v174;
  _BYTE v175[24];
  __int128 v176;
  __int128 v177;
  _BYTE v178[40];
  __int128 v179;
  uint64_t v180;
  __int128 v181;
  __int128 v182;
  _BYTE v183[28];
  _BYTE v184[32];
  __int128 v185;
  __int128 v186;
  _BYTE v187[36];
  void (**v188)(ZinIrKernelUnitInfo *__hidden);
  std::string v189;
  int v190;
  std::string *__str;
  __int128 *v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  uint64_t v198;
  __int128 v199;
  uint64_t v200;
  __int128 v201;
  __int128 v202;
  _OWORD v203[2];
  _OWORD v204[2];
  __int128 v205;
  __int128 v206;
  _BYTE v207[36];
  uint64_t v208;

  v208 = *MEMORY[0x24BDAC8D0];
  v8 = *(unsigned int *)(a2 + 160);
  v9 = a1[3];
  v11 = v8 == 2 * v9 || 3 * v9 == v8 || v8 == 4 * v9;
  v12 = *(unsigned int *)(a2 + 156);
  v13 = a1[2];
  v14 = 1;
  if (v12 != 2 * v13 && 3 * v13 != v12)
  {
    v14 = v12 == 4 * v13;
    v15 = v12 == 4 * v13 || v11;
    if (v15 != 1)
      return 0;
  }
  v16 = v8 / v9;
  v17 = *(_DWORD **)(a3 + 1464);
  v18 = *(_DWORD **)(a3 + 1472);
  v19 = v12 / v13;
  if (v17 != v18)
  {
    while (*v17 != 3)
    {
      if (++v17 == v18)
      {
        v17 = *(_DWORD **)(a3 + 1472);
        break;
      }
    }
  }
  v20 = 2 * v16;
  v21 = 2 * v19;
  if (v17 == v18)
  {
    v152 = 0;
    v153 = 0u;
    *(_OWORD *)v154 = 0u;
    DWORD2(v155) = -1;
    *(_QWORD *)&v156 = -1;
    DWORD2(v156) = -1;
    memset(&v157[8], 0, 32);
    v158 = 0u;
    *(_QWORD *)v157 = -1;
    v159 = 0;
    LODWORD(v160) = 1;
    BYTE4(v160) = 0;
    WORD4(v160) = 0;
    LODWORD(v161) = -1;
    *((_QWORD *)&v161 + 1) = -1;
    *(_DWORD *)v162 = -1;
    *(_QWORD *)&v162[8] = -1;
    *(_QWORD *)&v162[16] = 0x3F80000000000006;
    v150 = off_24C01CAD8;
    memset(&v151, 0, sizeof(v151));
    *((_QWORD *)&v165 + 1) = 0x100000001;
    LODWORD(v166) = 1;
    *(_DWORD *)&v167[24] = 1;
    *(_DWORD *)&v162[24] = 0;
    LODWORD(v163) = 4;
    v27 = v20 - 1;
    if (v11)
      v28 = v27;
    else
      v28 = 1;
    v29 = v21 - 1;
    if (v14)
      v30 = v29;
    else
      v30 = 1;
    *((_QWORD *)&v164 + 1) = v30;
    *(_QWORD *)&v165 = 1;
    *(_QWORD *)((char *)&v166 + 4) = __PAIR64__(v19, v16);
    HIDWORD(v166) = 1;
    *(_DWORD *)v167 = v16 - 1;
    *(_DWORD *)&v167[4] = v16 - 1;
    *(_DWORD *)&v167[8] = v19 - 1;
    *(_DWORD *)&v167[12] = v19 - 1;
    *(_QWORD *)&v167[16] = 0;
    *(_QWORD *)&v155 = *(_QWORD *)"";
    BYTE4(v163) = 1;
    *(_QWORD *)&v154[16] = a1[1];
    *(_QWORD *)&v164 = v28;
    *((_QWORD *)&v163 + 1) = *(_QWORD *)&v154[16];
    if ((_DWORD)v16 == 2 && (_DWORD)v19 == 2)
    {
      *(_QWORD *)&v164 = v28 + 1;
      *((_QWORD *)&v164 + 1) = v30 + 1;
      *(_DWORD *)v167 = 2;
      *(_DWORD *)&v167[8] = 2;
    }
    ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinIrKernelUnitInfo *)&v188, (const ZinIrKernelUnitInfo *)&v150);
    v188 = off_24C01CAD8;
    *(_OWORD *)&v207[12] = *(_OWORD *)&v167[12];
    v205 = v165;
    v206 = v166;
    *(_OWORD *)v207 = *(_OWORD *)v167;
    v204[0] = v163;
    v204[1] = v164;
    std::string::operator=(&v151, &v189);
    v152 = v190;
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v153, __str, v192, 0xAAAAAAAAAAAAAAABLL * (((char *)v192 - (char *)__str) >> 3));
    *(_OWORD *)&v154[8] = v193;
    v155 = v194;
    v156 = v195;
    *(_OWORD *)v157 = v196;
    if (*(_QWORD *)&v157[16])
    {
      *(_QWORD *)&v157[24] = *(_QWORD *)&v157[16];
      operator delete(*(void **)&v157[16]);
    }
    *(_OWORD *)&v157[16] = v197;
    *(_QWORD *)&v157[32] = v198;
    v198 = 0;
    v197 = 0uLL;
    v31 = (void *)v158;
    if ((_QWORD)v158)
    {
      *((_QWORD *)&v158 + 1) = v158;
      operator delete((void *)v158);
      v31 = (void *)v197;
    }
    v158 = v199;
    v159 = v200;
    v200 = 0;
    v199 = 0uLL;
    v160 = v201;
    v161 = v202;
    *(_OWORD *)v162 = v203[0];
    *(_OWORD *)&v162[12] = *(_OWORD *)((char *)v203 + 12);
    v163 = v204[0];
    v164 = v204[1];
    *(_OWORD *)&v167[12] = *(_OWORD *)&v207[12];
    v166 = v206;
    *(_OWORD *)v167 = *(_OWORD *)v207;
    v165 = v205;
    v188 = off_24C01ED88;
    if (v31)
    {
      *((_QWORD *)&v197 + 1) = v31;
      operator delete(v31);
    }
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v188);
    BYTE4(v188) = 0;
    LODWORD(v188) = 1;
    ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinIrKernelUnitInfo *)&v189, (const ZinIrKernelUnitInfo *)&v150);
    v32 = v165;
    v33 = *(_OWORD *)v167;
    v34[18] = v166;
    v34[19] = v33;
    *(_OWORD *)&v207[20] = *(_OWORD *)&v167[12];
    v35 = v163;
    v34[16] = v164;
    v34[17] = v32;
    v189.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C01CAD8;
    *(_OWORD *)((char *)v204 + 8) = v35;
    v36 = a4[1];
    if (v36 >= a4[2])
    {
      v37 = std::vector<ZinResizeLayerUtils::ResizeDecomposedDesc>::__push_back_slow_path<ZinResizeLayerUtils::ResizeDecomposedDesc const&>(a4, (const ZinResizeLayerUtils::ResizeDecomposedDesc *)&v188);
    }
    else
    {
      ZinResizeLayerUtils::ResizeDecomposedDesc::ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)a4[1], (const ZinResizeLayerUtils::ResizeDecomposedDesc *)&v188);
      v37 = v36 + 344;
      a4[1] = v36 + 344;
    }
    a4[1] = v37;
    v171 = (void (**)(ZinIrKernelUnitInfo *__hidden))0x100000001;
    LODWORD(v172.__r_.__value_.__l.__data_) = 1;
    v56 = a1[1];
    *(_QWORD *)&v168 = 0x100000001;
    DWORD2(v168) = 1;
    ZinGetOutputTensorDimension((uint64_t)a1, &v164, (unsigned int *)&v171, (unsigned int *)&v166 + 1, (int *)v167, v56, (int *)&v168, (uint64_t)&v147);
    v57 = (char *)a5[2];
    v58 = (char *)a5[1];
    if (v58 >= v57)
    {
      v62 = 0xCCCCCCCCCCCCCCCDLL * ((v58 - (_BYTE *)*a5) >> 3);
      v63 = v62 + 1;
      if (v62 + 1 > 0x666666666666666)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v64 = 0xCCCCCCCCCCCCCCCDLL * ((v57 - (_BYTE *)*a5) >> 3);
      if (2 * v64 > v63)
        v63 = 2 * v64;
      if (v64 >= 0x333333333333333)
        v65 = 0x666666666666666;
      else
        v65 = v63;
      if (v65)
        v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)(a5 + 2), v65);
      else
        v66 = 0;
      v76 = &v66[40 * v62];
      v77 = &v66[40 * v65];
      v78 = v147;
      v79 = v148;
      *((_QWORD *)v76 + 4) = v149;
      *(_OWORD *)v76 = v78;
      *((_OWORD *)v76 + 1) = v79;
      v61 = v76 + 40;
      v81 = (char *)*a5;
      v80 = (char *)a5[1];
      if (v80 != *a5)
      {
        do
        {
          v82 = *(_OWORD *)(v80 - 40);
          v83 = *(_OWORD *)(v80 - 24);
          *((_QWORD *)v76 - 1) = *((_QWORD *)v80 - 1);
          *(_OWORD *)(v76 - 24) = v83;
          *(_OWORD *)(v76 - 40) = v82;
          v76 -= 40;
          v80 -= 40;
        }
        while (v80 != v81);
        v80 = (char *)*a5;
      }
      *a5 = v76;
      a5[1] = v61;
      a5[2] = v77;
      if (v80)
        operator delete(v80);
    }
    else
    {
      v59 = v147;
      v60 = v148;
      *((_QWORD *)v58 + 4) = v149;
      *(_OWORD *)v58 = v59;
      *((_OWORD *)v58 + 1) = v60;
      v61 = v58 + 40;
    }
    a5[1] = v61;
    v122 = 0;
    v120 = 0;
    v121 = 0;
    v123 = 0u;
    v124 = 0u;
    v127 = -1;
    v128 = -1;
    v129 = -1;
    v131 = 0u;
    v132 = 0u;
    v133 = 0u;
    v130 = -1;
    v134 = 0;
    v135 = 1;
    v136 = 0;
    v137 = 0;
    v138 = -1;
    v139 = -1;
    v140 = -1;
    v141 = -1;
    v142 = 0x3F80000000000006;
    v118 = off_24C01CAD8;
    v119 = 0;
    *(_QWORD *)&v84 = 0x100000001;
    *((_QWORD *)&v84 + 1) = 0x100000001;
    *(_OWORD *)&v145[8] = v84;
    *(_QWORD *)&v145[24] = 0x100000001;
    memset(v146, 0, 24);
    *(_DWORD *)&v146[24] = 1;
    v143 = 0;
    *(_DWORD *)v144 = 1;
    *(_QWORD *)&v144[24] = 1;
    *(_QWORD *)v145 = 1;
    v126 = 0x200000000;
    v125 = a1[1];
    *(int64x2_t *)&v144[8] = vdupq_n_s64(1uLL);
    v144[4] = 1;
    BYTE4(v171) = 0;
    LODWORD(v171) = 1;
    ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinIrKernelUnitInfo *)&v172, (const ZinIrKernelUnitInfo *)&v118);
    v85 = *(_OWORD *)v145;
    v86 = *(_OWORD *)v146;
    v87[18] = *(_OWORD *)&v145[16];
    v87[19] = v86;
    *(_OWORD *)&v187[20] = *(_OWORD *)&v146[12];
    v88 = *(_OWORD *)v144;
    v87[16] = *(_OWORD *)&v144[16];
    v87[17] = v85;
    v172.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C01CAD8;
    *(_OWORD *)&v184[8] = v88;
    v89 = a4[1];
    if (v89 >= a4[2])
    {
      v90 = std::vector<ZinResizeLayerUtils::ResizeDecomposedDesc>::__push_back_slow_path<ZinResizeLayerUtils::ResizeDecomposedDesc const&>(a4, (const ZinResizeLayerUtils::ResizeDecomposedDesc *)&v171);
    }
    else
    {
      ZinResizeLayerUtils::ResizeDecomposedDesc::ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)a4[1], (const ZinResizeLayerUtils::ResizeDecomposedDesc *)&v171);
      v90 = v89 + 344;
      a4[1] = v89 + 344;
    }
    a4[1] = v90;
    v113 = 0;
    v114 = 0u;
    v116 = -1;
    v115 = 0u;
    v112[0] = off_24C01A728;
    memset(&v112[1], 0, 24);
    v117 = 2;
    ZinResizeLayerUtils::ResizeDecomposedDesc::ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)&v168, (ZinIrEWUnitInfo *)v112);
    v91 = a4[1];
    if (v91 >= a4[2])
    {
      v92 = std::vector<ZinResizeLayerUtils::ResizeDecomposedDesc>::__push_back_slow_path<ZinResizeLayerUtils::ResizeDecomposedDesc const&>(a4, (const ZinResizeLayerUtils::ResizeDecomposedDesc *)&v168);
    }
    else
    {
      ZinResizeLayerUtils::ResizeDecomposedDesc::ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)a4[1], (const ZinResizeLayerUtils::ResizeDecomposedDesc *)&v168);
      v92 = v91 + 344;
      a4[1] = v91 + 344;
    }
    a4[1] = v92;
    v93 = (char *)a5[1];
    v94 = (char *)a5[2];
    if (v93 >= v94)
    {
      v98 = 0xCCCCCCCCCCCCCCCDLL * ((v93 - (_BYTE *)*a5) >> 3);
      v99 = v98 + 1;
      if (v98 + 1 > 0x666666666666666)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v100 = 0xCCCCCCCCCCCCCCCDLL * ((v94 - (_BYTE *)*a5) >> 3);
      if (2 * v100 > v99)
        v99 = 2 * v100;
      if (v100 >= 0x333333333333333)
        v101 = 0x666666666666666;
      else
        v101 = v99;
      if (v101)
        v102 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)(a5 + 2), v101);
      else
        v102 = 0;
      v103 = &v102[40 * v98];
      v104 = &v102[40 * v101];
      v105 = v147;
      v106 = v148;
      *((_QWORD *)v103 + 4) = v149;
      *(_OWORD *)v103 = v105;
      *((_OWORD *)v103 + 1) = v106;
      v97 = v103 + 40;
      v108 = (char *)*a5;
      v107 = (char *)a5[1];
      if (v107 != *a5)
      {
        do
        {
          v109 = *(_OWORD *)(v107 - 40);
          v110 = *(_OWORD *)(v107 - 24);
          *((_QWORD *)v103 - 1) = *((_QWORD *)v107 - 1);
          *(_OWORD *)(v103 - 24) = v110;
          *(_OWORD *)(v103 - 40) = v109;
          v103 -= 40;
          v107 -= 40;
        }
        while (v107 != v108);
        v107 = (char *)*a5;
      }
      *a5 = v103;
      a5[1] = v97;
      a5[2] = v104;
      if (v107)
        operator delete(v107);
    }
    else
    {
      v95 = v147;
      v96 = v148;
      *((_QWORD *)v93 + 4) = v149;
      *(_OWORD *)v93 = v95;
      *((_OWORD *)v93 + 1) = v96;
      v97 = v93 + 40;
    }
    a5[1] = v97;
    ZinResizeLayerUtils::ResizeDecomposedDesc::~ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)&v168);
    ZinIrUnitInfo::~ZinIrUnitInfo(v112);
    ZinResizeLayerUtils::ResizeDecomposedDesc::~ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)&v171);
    v118 = off_24C01ED88;
    if ((_QWORD)v133)
    {
      *((_QWORD *)&v133 + 1) = v133;
      operator delete((void *)v133);
    }
    if (*((_QWORD *)&v131 + 1))
    {
      *(_QWORD *)&v132 = *((_QWORD *)&v131 + 1);
      operator delete(*((void **)&v131 + 1));
    }
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v118);
    ZinResizeLayerUtils::ResizeDecomposedDesc::~ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)&v188);
    v150 = off_24C01ED88;
    if ((_QWORD)v158)
    {
      *((_QWORD *)&v158 + 1) = v158;
      operator delete((void *)v158);
    }
    if (*(_QWORD *)&v157[16])
    {
      *(_QWORD *)&v157[24] = *(_QWORD *)&v157[16];
      operator delete(*(void **)&v157[16]);
    }
    v75 = &v150;
  }
  else
  {
    v173 = 0;
    v174 = 0u;
    *(_OWORD *)v175 = 0u;
    DWORD2(v176) = -1;
    *(_QWORD *)&v177 = -1;
    DWORD2(v177) = -1;
    memset(&v178[8], 0, 32);
    v179 = 0u;
    *(_QWORD *)v178 = -1;
    v180 = 0;
    LODWORD(v181) = 1;
    BYTE4(v181) = 0;
    WORD4(v181) = 0;
    LODWORD(v182) = -1;
    *((_QWORD *)&v182 + 1) = -1;
    *(_DWORD *)v183 = -1;
    *(_QWORD *)&v183[8] = -1;
    *(_QWORD *)&v183[16] = 0x3F80000000000006;
    memset(&v172, 0, sizeof(v172));
    v171 = off_24C01CAD8;
    *((_QWORD *)&v185 + 1) = 0x100000001;
    LODWORD(v186) = 1;
    *(_DWORD *)&v183[24] = 0;
    *(_DWORD *)v184 = 4;
    v22 = v20 - 1;
    if (v11)
      v23 = v22;
    else
      v23 = 1;
    v24 = v21 - 1;
    if (v14)
      v25 = v24;
    else
      v25 = 1;
    *(_QWORD *)&v184[24] = v25;
    *(_QWORD *)&v185 = 1;
    *(_QWORD *)((char *)&v186 + 4) = __PAIR64__(v19, v16);
    HIDWORD(v186) = 1;
    *(_DWORD *)v187 = v16 - 1;
    *(_DWORD *)&v187[4] = v16 - 1;
    *(_DWORD *)&v187[8] = v19 - 1;
    *(_DWORD *)&v187[12] = v19 - 1;
    *(_QWORD *)&v187[16] = 0;
    *(_QWORD *)&v176 = *(_QWORD *)"";
    v184[4] = 1;
    *(_QWORD *)&v175[16] = a1[1];
    *(_QWORD *)&v184[16] = v23;
    *(_QWORD *)&v184[8] = *(_QWORD *)&v175[16];
    *(_DWORD *)&v187[24] = 3;
    if ((_DWORD)v16 == 2 && (_DWORD)v19 == 2)
    {
      *(_QWORD *)&v184[16] = v23 + 1;
      *(_QWORD *)&v184[24] = v25 + 1;
      *(_DWORD *)v187 = 2;
      *(_DWORD *)&v187[8] = 2;
    }
    ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinIrKernelUnitInfo *)&v188, (const ZinIrKernelUnitInfo *)&v171);
    v188 = off_24C01CAD8;
    *(_OWORD *)&v207[12] = *(_OWORD *)&v187[12];
    v205 = v185;
    v206 = v186;
    *(_OWORD *)v207 = *(_OWORD *)v187;
    v204[0] = *(_OWORD *)v184;
    v204[1] = *(_OWORD *)&v184[16];
    std::string::operator=(&v172, &v189);
    v173 = v190;
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v174, __str, v192, 0xAAAAAAAAAAAAAAABLL * (((char *)v192 - (char *)__str) >> 3));
    *(_OWORD *)&v175[8] = v193;
    v176 = v194;
    v177 = v195;
    *(_OWORD *)v178 = v196;
    if (*(_QWORD *)&v178[16])
    {
      *(_QWORD *)&v178[24] = *(_QWORD *)&v178[16];
      operator delete(*(void **)&v178[16]);
    }
    *(_OWORD *)&v178[16] = v197;
    *(_QWORD *)&v178[32] = v198;
    v198 = 0;
    v197 = 0uLL;
    v26 = (void *)v179;
    if ((_QWORD)v179)
    {
      *((_QWORD *)&v179 + 1) = v179;
      operator delete((void *)v179);
      v26 = (void *)v197;
    }
    v179 = v199;
    v180 = v200;
    v200 = 0;
    v199 = 0uLL;
    v181 = v201;
    v182 = v202;
    *(_OWORD *)v183 = v203[0];
    *(_OWORD *)&v183[12] = *(_OWORD *)((char *)v203 + 12);
    *(_OWORD *)v184 = v204[0];
    *(_OWORD *)&v184[16] = v204[1];
    *(_OWORD *)&v187[12] = *(_OWORD *)&v207[12];
    v186 = v206;
    *(_OWORD *)v187 = *(_OWORD *)v207;
    v185 = v205;
    v188 = off_24C01ED88;
    if (v26)
    {
      *((_QWORD *)&v197 + 1) = v26;
      operator delete(v26);
    }
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v188);
    BYTE4(v188) = 0;
    LODWORD(v188) = 1;
    ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinIrKernelUnitInfo *)&v189, (const ZinIrKernelUnitInfo *)&v171);
    v39 = v185;
    v40 = *(_OWORD *)v187;
    v41[18] = v186;
    v41[19] = v40;
    *(_OWORD *)&v207[20] = *(_OWORD *)&v187[12];
    v42 = *(_OWORD *)v184;
    v41[16] = *(_OWORD *)&v184[16];
    v41[17] = v39;
    v189.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C01CAD8;
    *(_OWORD *)((char *)v204 + 8) = v42;
    v43 = a4[1];
    if (v43 >= a4[2])
    {
      v44 = std::vector<ZinResizeLayerUtils::ResizeDecomposedDesc>::__push_back_slow_path<ZinResizeLayerUtils::ResizeDecomposedDesc const&>(a4, (const ZinResizeLayerUtils::ResizeDecomposedDesc *)&v188);
    }
    else
    {
      ZinResizeLayerUtils::ResizeDecomposedDesc::ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)a4[1], (const ZinResizeLayerUtils::ResizeDecomposedDesc *)&v188);
      v44 = v43 + 344;
      a4[1] = v43 + 344;
    }
    a4[1] = v44;
    v150 = (void (**)(ZinIrKernelUnitInfo *__hidden))0x100000001;
    LODWORD(v151.__r_.__value_.__l.__data_) = 1;
    v45 = a1[1];
    v118 = (void (**)(ZinIrKernelUnitInfo *__hidden))0x100000001;
    LODWORD(v119) = 1;
    ZinGetOutputTensorDimension((uint64_t)a1, &v184[16], (unsigned int *)&v150, (unsigned int *)&v186 + 1, (int *)v187, v45, (int *)&v118, (uint64_t)&v168);
    v46 = (char *)a5[2];
    v47 = (char *)a5[1];
    if (v47 >= v46)
    {
      v51 = 0xCCCCCCCCCCCCCCCDLL * ((v47 - (_BYTE *)*a5) >> 3);
      v52 = v51 + 1;
      if (v51 + 1 > 0x666666666666666)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v53 = 0xCCCCCCCCCCCCCCCDLL * ((v46 - (_BYTE *)*a5) >> 3);
      if (2 * v53 > v52)
        v52 = 2 * v53;
      if (v53 >= 0x333333333333333)
        v54 = 0x666666666666666;
      else
        v54 = v52;
      if (v54)
        v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)(a5 + 2), v54);
      else
        v55 = 0;
      v67 = &v55[40 * v51];
      v68 = &v55[40 * v54];
      v69 = v168;
      v70 = v169;
      *((_QWORD *)v67 + 4) = v170;
      *(_OWORD *)v67 = v69;
      *((_OWORD *)v67 + 1) = v70;
      v50 = v67 + 40;
      v72 = (char *)*a5;
      v71 = (char *)a5[1];
      if (v71 != *a5)
      {
        do
        {
          v73 = *(_OWORD *)(v71 - 40);
          v74 = *(_OWORD *)(v71 - 24);
          *((_QWORD *)v67 - 1) = *((_QWORD *)v71 - 1);
          *(_OWORD *)(v67 - 24) = v74;
          *(_OWORD *)(v67 - 40) = v73;
          v67 -= 40;
          v71 -= 40;
        }
        while (v71 != v72);
        v71 = (char *)*a5;
      }
      *a5 = v67;
      a5[1] = v50;
      a5[2] = v68;
      if (v71)
        operator delete(v71);
    }
    else
    {
      v48 = v168;
      v49 = v169;
      *((_QWORD *)v47 + 4) = v170;
      *(_OWORD *)v47 = v48;
      *((_OWORD *)v47 + 1) = v49;
      v50 = v47 + 40;
    }
    a5[1] = v50;
    ZinResizeLayerUtils::ResizeDecomposedDesc::~ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)&v188);
    v171 = off_24C01ED88;
    if ((_QWORD)v179)
    {
      *((_QWORD *)&v179 + 1) = v179;
      operator delete((void *)v179);
    }
    if (*(_QWORD *)&v178[16])
    {
      *(_QWORD *)&v178[24] = *(_QWORD *)&v178[16];
      operator delete(*(void **)&v178[16]);
    }
    v75 = &v171;
  }
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)v75);
  return 1;
}

void sub_206DE9DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a68;
  uint64_t v68;
  uint64_t v69;

  *(_QWORD *)(v68 + 8) = v69;
  ZinResizeLayerUtils::ResizeDecomposedDesc::~ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)&STACK[0x328]);
  ZinIrUnitInfo::~ZinIrUnitInfo(&a10);
  ZinResizeLayerUtils::ResizeDecomposedDesc::~ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)&STACK[0x480]);
  ZinIrConvUnitInfo::~ZinIrConvUnitInfo((ZinIrConvUnitInfo *)&a21);
  ZinResizeLayerUtils::ResizeDecomposedDesc::~ResizeDecomposedDesc((ZinResizeLayerUtils::ResizeDecomposedDesc *)&STACK[0x5D8]);
  ZinIrConvUnitInfo::~ZinIrConvUnitInfo((ZinIrConvUnitInfo *)&a68);
  _Unwind_Resume(a1);
}

uint64_t ZinResizeLayerUtils::CreateChannelWiseDeconvForUnalignedCornersUpsample(_QWORD **a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *v8;
  uint64_t v9;
  int v10;
  int8x16_t v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *p_p;
  std::string::size_type size;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  ZinIrConvolutionInfo *v27;
  uint64_t v28;
  int v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  void **v40;
  std::string::size_type v41;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  __int128 v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  ZinIrConvolutionInfo *v52;
  ZinIrKernel *v53;
  std::string v55;
  void *v56[2];
  int64_t v57;
  std::string v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  std::string v61;
  uint64_t v62;
  int v63;
  _QWORD *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  ZinIrConvolutionInfo *v67;
  ZinIrKernel *v68;
  std::string v69;
  std::string __p;
  std::string v71;
  __int128 v72;
  std::string::size_type v73;
  _QWORD v74[3];
  char v75;
  int64x2_t v76[2];
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  uint64_t v89;
  char v90;
  char v91;
  int v92;
  _BYTE __src[32];
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  _OWORD v101[7];
  _QWORD v102[2];

  v102[1] = *MEMORY[0x24BDAC8D0];
  v8 = (_QWORD *)*a1[11];
  v9 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v8 + 32))(v8, 0, 0);
  v86 = 0x100000001;
  v92 = 0;
  v78 = *(_OWORD *)(a2 + 256);
  v79 = *(_QWORD *)(a2 + 272);
  v84 = *(_OWORD *)(a2 + 304);
  v85 = *(_QWORD *)(a2 + 320);
  v80 = 0x100000001;
  v82 = *(_QWORD *)(a2 + 292);
  v10 = *(_DWORD *)(a2 + 300);
  v81 = 1;
  v83 = v10;
  v90 = *(_BYTE *)(a2 + 244);
  v87 = 1;
  v88 = a4;
  v91 = 1;
  v89 = *(_QWORD *)(a2 + 248);
  v11 = vextq_s8(*(int8x16_t *)(a2 + 256), *(int8x16_t *)(a2 + 256), 8uLL);
  v76[0] = vdupq_n_s64(1uLL);
  v76[1] = (int64x2_t)v11;
  v77 = 1;
  ZinObjectNameFactory::ZinObjectNameFactory(v74, a1 + 3);
  ZinObjectNameFactory::CreateName((uint64_t)v74, 2u, &v71);
  v12 = std::string::append(&v71, "_", 1uLL);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v61.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v69, "cwiseuc_conv");
  v14 = std::string::append(&v69, "_xfm", 4uLL);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v18 = std::string::append(&v61, (const std::string::value_type *)p_p, size);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  *(_QWORD *)&__src[16] = *((_QWORD *)&v18->__r_.__value_.__l + 2);
  *(_OWORD *)__src = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = std::string::append((std::string *)__src, "_kernel", 7uLL);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v73 = v20->__r_.__value_.__r.__words[2];
  v72 = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if ((__src[23] & 0x80000000) != 0)
    operator delete(*(void **)__src);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
  v22 = 0;
  memset(&v71, 0, sizeof(v71));
  v23 = *(_QWORD *)(a2 + 256);
  if (v23 == *(_QWORD *)(a2 + 264))
  {
    v24 = v23 * v23;
    switch(v24)
    {
      case 64:
        v101[3] = xmmword_207A9F41C;
        v101[4] = unk_207A9F42C;
        v101[5] = xmmword_207A9F43C;
        v101[6] = unk_207A9F44C;
        v100 = xmmword_207A9F3DC;
        v101[0] = unk_207A9F3EC;
        v101[1] = xmmword_207A9F3FC;
        v101[2] = unk_207A9F40C;
        v96 = xmmword_207A9F39C;
        v97 = unk_207A9F3AC;
        v98 = xmmword_207A9F3BC;
        v99 = unk_207A9F3CC;
        *(_OWORD *)__src = xmmword_207A9F35C;
        *(_OWORD *)&__src[16] = unk_207A9F36C;
        v94 = xmmword_207A9F37C;
        v95 = unk_207A9F38C;
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v71, __src, (uint64_t)v102, 0x40uLL);
        break;
      case 36:
        v98 = xmmword_207A9F32C;
        v99 = unk_207A9F33C;
        v100 = xmmword_207A9F34C;
        v94 = xmmword_207A9F2EC;
        v95 = unk_207A9F2FC;
        v96 = xmmword_207A9F30C;
        v97 = unk_207A9F31C;
        *(_OWORD *)__src = xmmword_207A9F2CC;
        *(_OWORD *)&__src[16] = unk_207A9F2DC;
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v71, __src, (uint64_t)v101, 0x24uLL);
        break;
      case 16:
        *(_OWORD *)__src = xmmword_207A9F28C;
        *(_OWORD *)&__src[16] = unk_207A9F29C;
        v94 = xmmword_207A9F2AC;
        v95 = unk_207A9F2BC;
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v71, __src, (uint64_t)&v96, 0x10uLL);
        v25 = 3;
        goto LABEL_25;
      default:
        v22 = 0;
        goto LABEL_72;
    }
    v25 = 6;
LABEL_25:
    ZinIrKernel::CreateDynamicKernel(&v72, (uint64_t)&v78, (float **)&v71, *(unsigned int *)(a2 + 84), v76, v25, a3, 0, (uint64_t *)&v68);
    v26 = *(_QWORD *)(v9 + 56);
    v61.__r_.__value_.__r.__words[0] = 0x100000001;
    LODWORD(v61.__r_.__value_.__r.__words[1]) = 1;
    ZinGetOutputTensorDimension(v9 + 48, &v78, (unsigned int *)&v80, (unsigned int *)&v82, (int *)&v84, v26, (int *)&v61, (uint64_t)__src);
    v27 = (ZinIrConvolutionInfo *)operator new();
    ZinIrConvolutionInfo::ZinIrConvolutionInfo(v27);
    v67 = v27;
    v28 = v8[2];
    v29 = *(_DWORD *)(((uint64_t (*)(_QWORD **, _QWORD, _QWORD))(*a1)[4])(a1, 0, 0) + 88);
    ZinObjectNameFactory::CreateName((uint64_t)v74, 0, &__p);
    v64 = 0;
    *(_OWORD *)&v69.__r_.__value_.__l.__data_ = 0uLL;
    LODWORD(v61.__r_.__value_.__l.__data_) = 0;
    v62 = 0;
    *(_OWORD *)&v61.__r_.__value_.__r.__words[1] = 0uLL;
    v63 = 0;
    ZinIrTensor::CreateTensor(v28, v29, (__int128 *)__src, (__int128 *)&__p, &v64, (uint64_t *)&v69, (unsigned int *)&v61, &v65);
    v30 = (std::__shared_weak_count *)v69.__r_.__value_.__l.__size_;
    if (v69.__r_.__value_.__l.__size_)
    {
      v31 = (unint64_t *)(v69.__r_.__value_.__l.__size_ + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v33 = v64;
    v64 = 0;
    if (v33)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v64, v33);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v22 = operator new();
    v59 = v65;
    v60 = v66;
    if (v66)
    {
      p_shared_owners = (unint64_t *)&v66->__shared_owners_;
      do
        v35 = __ldxr(p_shared_owners);
      while (__stxr(v35 + 1, p_shared_owners));
    }
    ZinObjectNameFactory::CreateName((uint64_t)v74, 1u, &v58);
    v36 = std::string::append(&v58, "_", 1uLL);
    v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v69.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v55, "cwiseuc_conv");
    v38 = std::string::append(&v55, "_xfm", 4uLL);
    v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v57 = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)v56 = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    if (v57 >= 0)
      v40 = v56;
    else
      v40 = (void **)v56[0];
    if (v57 >= 0)
      v41 = HIBYTE(v57);
    else
      v41 = (std::string::size_type)v56[1];
    v42 = std::string::append(&v69, (const std::string::value_type *)v40, v41);
    v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    v44 = std::string::append(&__p, "_layer", 6uLL);
    v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    ZinConvLayer::ZinConvLayer(v22, &v67, &v59, &v61, &v68);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v57) < 0)
      operator delete(v56[0]);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55.__r_.__value_.__l.__data_);
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v69.__r_.__value_.__l.__data_);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    v46 = v60;
    if (v60)
    {
      v47 = (unint64_t *)&v60->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    v49 = v66;
    if (v66)
    {
      v50 = (unint64_t *)&v66->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    v52 = v67;
    v67 = 0;
    if (v52)
      (*(void (**)(ZinIrConvolutionInfo *))(*(_QWORD *)v52 + 8))(v52);
    v53 = v68;
    v68 = 0;
    if (v53)
    {
      ZinIrKernel::~ZinIrKernel(v53);
      MEMORY[0x20BD002F8]();
    }
    if (v71.__r_.__value_.__r.__words[0])
    {
      v71.__r_.__value_.__l.__size_ = v71.__r_.__value_.__r.__words[0];
      operator delete(v71.__r_.__value_.__l.__data_);
    }
  }
LABEL_72:
  if (SHIBYTE(v73) < 0)
    operator delete((void *)v72);
  v74[0] = off_24C01FBB0;
  if (v75 < 0)
    operator delete((void *)v74[1]);
  return v22;
}

void sub_206DEA610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (__p)
    operator delete(__p);
  if (a46 < 0)
    operator delete(a41);
  if (a53 < 0)
    operator delete(a48);
  _Unwind_Resume(a1);
}

void sub_206DEA834()
{
  JUMPOUT(0x206DEA80CLL);
}

void sub_206DEA83C()
{
  JUMPOUT(0x206DEA82CLL);
}

uint64_t ZinResizeLayerUtils::CreateBoundaryScalingMaskForUnAlignedCorner(size_t *this, const ZinResizeLayer *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _WORD *v7;
  uint64_t v8;
  _WORD *v9;
  uint64_t v10;
  _WORD *v11;
  size_t v12;
  std::string *v13;
  char *v14;
  std::string *v15;
  __int128 v16;
  void **v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  std::string::size_type v25;
  _QWORD *v26;
  std::string::size_type v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::string::size_type v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  void *v42;
  std::__shared_weak_count *v43;
  _QWORD *v44;
  std::string v45;
  uint64_t v46;
  uint64_t v47;
  std::string v48;
  void *__p[2];
  int64_t v50;
  _QWORD v51[3];
  char v52;
  __int128 v53;
  void *__b[3];
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  std::string v58;

  v3 = (_QWORD *)(*(uint64_t (**)(size_t *, _QWORD, _QWORD))(*this + 32))(this, 0, 0);
  v4 = 0;
  if (v3[10] == 1)
  {
    v5 = v3[8];
    v6 = v3[9];
    LOWORD(v55) = 15360;
    std::vector<half>::vector(__b, v6 * v5, &v55);
    v7 = __b[0];
    v8 = v6;
    if (v6 <= 0)
    {
      v9 = (char *)__b[0] + 2 * (v5 - 1) * v6;
    }
    else
    {
      memset_pattern16(__b[0], "U=U=U=U=U=U=U=U=", 2 * v6);
      v9 = &v7[(v5 - 1) * v6];
      memset_pattern16(v9, "U=U=U=U=U=U=U=U=", 2 * v6);
    }
    if (v5 >= 1)
    {
      v10 = v5;
      v11 = v7;
      do
      {
        v11[v8 - 1] = 15701;
        *v11 = 15701;
        v11 = (_WORD *)((char *)v11 + v8 * 2);
        --v10;
      }
      while (v10);
    }
    *v7 = 16156;
    v7[v6 - 1] = 16156;
    *v9 = 16156;
    v7[v6 * v5 - 1] = 16156;
    std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<half>,std::allocator<ZinIrConstData_specialization<half>>,std::vector<half>,void>((uint64_t)__b, &v55);
    v53 = v55;
    if (*((char *)this + 47) >= 0)
      v12 = *((unsigned __int8 *)this + 47);
    else
      v12 = this[4];
    v13 = &v58;
    std::string::basic_string[abi:ne180100]((uint64_t)&v58, v12 + 1);
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v13 = (std::string *)v58.__r_.__value_.__r.__words[0];
    if (v12)
    {
      if (*((char *)this + 47) >= 0)
        v14 = (char *)(this + 3);
      else
        v14 = (char *)this[3];
      memmove(v13, v14, v12);
    }
    *(_WORD *)((char *)&v13->__r_.__value_.__l.__data_ + v12) = 95;
    std::string::basic_string[abi:ne180100]<0>(&v48, "boundary_scale_unaligned");
    v15 = std::string::append(&v48, "_xfm", 4uLL);
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v50 = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (v50 >= 0)
      v17 = __p;
    else
      v17 = (void **)__p[0];
    if (v50 >= 0)
      v18 = HIBYTE(v50);
    else
      v18 = (std::string::size_type)__p[1];
    v19 = std::string::append(&v58, (const std::string::value_type *)v17, v18);
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    v21 = std::string::append(&v45, "_", 1uLL);
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    *(_QWORD *)&v56 = *((_QWORD *)&v21->__r_.__value_.__l + 2);
    v55 = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    ZinObjectNameFactory::ZinObjectNameFactory(v51, &v55);
    if (SBYTE7(v56) < 0)
      operator delete((void *)v55);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(v50) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    v45.__r_.__value_.__r.__words[2] = v5;
    v46 = v6;
    v47 = 1;
    *(int64x2_t *)&v45.__r_.__value_.__l.__data_ = vdupq_n_s64(1uLL);
    v23 = operator new();
    DimensionOrderHint::DimensionOrderHint(&v58, 0);
    v57 = 0;
    v55 = 0u;
    v56 = 0u;
    ZinIrTensor::MirInfo::MirInfo(v23, 2, 0, 0, &v58, &v55);
    v48.__r_.__value_.__r.__words[0] = v23;
    if (v58.__r_.__value_.__r.__words[0])
    {
      v58.__r_.__value_.__l.__size_ = v58.__r_.__value_.__r.__words[0];
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    v24 = this[2];
    ZinObjectNameFactory::CreateName((uint64_t)v51, 0, &v58);
    v25 = v48.__r_.__value_.__r.__words[0];
    v48.__r_.__value_.__r.__words[0] = 0;
    v44 = (_QWORD *)v25;
    LODWORD(v55) = 0;
    v56 = 0uLL;
    *((_QWORD *)&v55 + 1) = 0;
    LODWORD(v57) = 0;
    ZinIrTensor::CreateTensor(v24, 3, (__int128 *)&v45, (__int128 *)&v58, &v44, (uint64_t *)&v53, (unsigned int *)&v55, (uint64_t *)__p);
    v26 = v44;
    v44 = 0;
    if (v26)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v44, v26);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    v27 = operator new();
    ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(v27, 29);
    v58.__r_.__value_.__r.__words[0] = v27;
    v4 = operator new();
    v42 = __p[0];
    v43 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v28 = (unint64_t *)((char *)__p[1] + 8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    ZinObjectNameFactory::CreateName((uint64_t)v51, 1u, (std::string *)&v55);
    ZinConstInLayer::ZinConstInLayer(v4, &v58, &v42, &v55);
    if (SBYTE7(v56) < 0)
      operator delete((void *)v55);
    v30 = v43;
    if (v43)
    {
      p_shared_owners = (unint64_t *)&v43->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v33 = v58.__r_.__value_.__r.__words[0];
    v58.__r_.__value_.__r.__words[0] = 0;
    if (v33)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v33 + 8))(v33);
    v34 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v35 = (unint64_t *)((char *)__p[1] + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v37 = (_QWORD *)v48.__r_.__value_.__r.__words[0];
    v48.__r_.__value_.__r.__words[0] = 0;
    if (v37)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v48, v37);
    v51[0] = off_24C01FBB0;
    if (v52 < 0)
      operator delete((void *)v51[1]);
    v38 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
    if (*((_QWORD *)&v53 + 1))
    {
      v39 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    if (__b[0])
    {
      __b[1] = __b[0];
      operator delete(__b[0]);
    }
  }
  return v4;
}

void sub_206DEAD84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,_QWORD *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void (**a33)(ZinObjectNameFactory *__hidden this),void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45)
{
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  _QWORD *v49;

  if (*(char *)(v46 - 137) < 0)
    operator delete(*(void **)(v46 - 160));
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  MEMORY[0x20BD002F8](v45, 0x10B3C4024B96488);
  v48 = *(_QWORD *)(v46 - 112);
  *(_QWORD *)(v46 - 112) = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  v49 = a21;
  a21 = 0;
  if (v49)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&a21, v49);
  a33 = off_24C01FBB0;
  if (a39 < 0)
    operator delete(__p);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  if (a44)
  {
    a45 = (uint64_t)a44;
    operator delete(a44);
  }
  _Unwind_Resume(a1);
}

void sub_206DEAF4C()
{
  JUMPOUT(0x206DEAF2CLL);
}

void sub_206DEAF54()
{
  JUMPOUT(0x206DEAF34);
}

uint64_t ZinResizeLayerUtils::ApplyResizeViaTransposeAndConvolution(uint64_t a1, uint64_t ***a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  void *__p;
  void *v9;
  uint64_t v10;

  __p = 0;
  v9 = 0;
  v10 = 0;
  if (ZinResizeLayerUtils::CreateTransposeAndConvolutionForResize((uint64_t)a2, *a2[11], a3, &__p, a4))
  {
    v6 = 3;
  }
  else
  {
    if ((ZinIrOpLayerGraph::ReplaceNode(a1, (ZinIrOpLayer *)a2, (ZinIrOpLayer ***)&__p) & 1) == 0)
      ZinAssertImpl("Error: failed to replace node in decomposed resize layer");
    v6 = 0;
  }
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
  return v6;
}

void sub_206DEAFEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinResizeLayerUtils::ApplyUpsampleWithUnalignedCorners(uint64_t **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _DWORD *v4;
  __int128 *v5;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _DWORD *v15;
  _DWORD *v16;
  int v17;
  ZinIrOpLayer *ChannelWiseDeconvForUnalignedCornersUpsample;
  ZinConvCompositeLayer *v19;
  _BOOL4 v20;
  const ZinResizeLayer *v21;
  int v22;
  int v23;
  ZinIrOpLayer *BoundaryScalingMaskForUnAlignedCorner;
  _BOOL4 v25;
  size_t v26;
  void **v27;
  const void *v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  ZinIrOpLayer *Broadcast;
  void *v35;
  size_t v36;
  void *v37;
  const void *v38;
  _BOOL4 v39;
  int v40;
  _BOOL4 v41;
  size_t v42;
  void **v43;
  const void *v44;
  int v45;
  _OWORD *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  ZinIrOpLayer *ElementWiseLayer;
  _BOOL4 v57;
  _QWORD *v58;
  int v59;
  uint64_t v61;
  ZinIrTarget **v62;
  _QWORD v63[4];
  int v64;
  void *v65;
  void *v66;
  char v67;
  char v68;
  _QWORD v69[4];
  int v70;
  void *v71[16];
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _BYTE v80[28];
  _QWORD *v81;
  void *__p[2];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  _OWORD v89[6];
  _OWORD v90[2];
  _QWORD *v91;
  uint64_t v92;
  _OWORD *v93;
  uint64_t v94;

  v94 = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD **)a3;
  if (**(_DWORD **)a3 != 1 || (v5 = (__int128 *)(v4 + 62), v4[62] != 4))
    ZinAssertImpl("Error: a CW deconv is expected in upsample decomposition");
  v10 = *(_QWORD *)a2[11];
  v62 = (ZinIrTarget **)a2[2];
  ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinIrKernelUnitInfo *)v71, (const ZinIrKernelUnitInfo *)(v4 + 2));
  v71[0] = off_24C01CAD8;
  v12 = v5[3];
  v11 = v5[4];
  v13 = v5[2];
  *(_OWORD *)&v80[12] = *(__int128 *)((char *)v5 + 76);
  v14 = v5[1];
  v76 = *v5;
  v77 = v14;
  v79 = v12;
  *(_OWORD *)v80 = v11;
  v78 = v13;
  v15 = *(_DWORD **)(a4 + 1464);
  v16 = *(_DWORD **)(a4 + 1472);
  if (v15 != v16)
  {
    while (*v15 != 3)
    {
      if (++v15 == v16)
      {
        v15 = *(_DWORD **)(a4 + 1472);
        break;
      }
    }
  }
  if (v15 == v16)
    v17 = 1;
  else
    v17 = 3;
  ChannelWiseDeconvForUnalignedCornersUpsample = (ZinIrOpLayer *)ZinResizeLayerUtils::CreateChannelWiseDeconvForUnalignedCornersUpsample((_QWORD **)a2, (uint64_t)v71, a4, v17);
  v91 = a2;
  v65 = &v91;
  v66 = (void *)1;
  Layer2TDMapper::SourceLayer::SourceLayer(__p, &v65);
  ZinIrOpLayerGraph::AddNode(a1, ChannelWiseDeconvForUnalignedCornersUpsample, (ZinIrOpLayer ***)__p);
  __p[0] = &unk_24C02BB18;
  if (__p[1])
  {
    *(void **)&v83 = __p[1];
    operator delete(__p[1]);
  }
  ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a1, ChannelWiseDeconvForUnalignedCornersUpsample, 0);
  if (!ChannelWiseDeconvForUnalignedCornersUpsample)
    ZinAssertImpl("Error: failed to create CW deconvolution");
  if (ZinConvLayer::HasLargeKernelStrides(ChannelWiseDeconvForUnalignedCornersUpsample))
  {
    v19 = (ZinConvCompositeLayer *)operator new();
    ZinConvCompositeLayer::ZinConvCompositeLayer(v19, 0, ChannelWiseDeconvForUnalignedCornersUpsample, 0, 0);
    ChannelWiseDeconvForUnalignedCornersUpsample = v19;
  }
  v91 = a2;
  v65 = &v91;
  v66 = (void *)1;
  Layer2TDMapper::SourceLayer::SourceLayer(__p, &v65);
  v20 = ZinIrOpLayerGraph::AddNode(a1, ChannelWiseDeconvForUnalignedCornersUpsample, (ZinIrOpLayer ***)__p);
  __p[0] = &unk_24C02BB18;
  if (__p[1])
  {
    *(void **)&v83 = __p[1];
    operator delete(__p[1]);
  }
  v22 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, v10, (uint64_t)ChannelWiseDeconvForUnalignedCornersUpsample, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  if (v15 != v16)
  {
    memset(v69, 0, sizeof(v69));
    v70 = 1065353216;
    v23 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a1, (uint64_t **)a2, ChannelWiseDeconvForUnalignedCornersUpsample, v69);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v69);
    goto LABEL_84;
  }
  BoundaryScalingMaskForUnAlignedCorner = (ZinIrOpLayer *)ZinResizeLayerUtils::CreateBoundaryScalingMaskForUnAlignedCorner(a2, v21);
  if (!BoundaryScalingMaskForUnAlignedCorner)
    ZinAssertImpl("Error: failed to add const scale for scaling boundaries");
  v91 = a2;
  v65 = &v91;
  v66 = (void *)1;
  Layer2TDMapper::SourceLayer::SourceLayer(__p, &v65);
  v25 = ZinIrOpLayerGraph::AddNode(a1, BoundaryScalingMaskForUnAlignedCorner, (ZinIrOpLayer ***)__p);
  __p[0] = &unk_24C02BB18;
  if (__p[1])
  {
    *(void **)&v83 = __p[1];
    operator delete(__p[1]);
  }
  HIDWORD(v61) = v25;
  if (*(_BYTE *)(a4 + 1882))
  {
    if (*((char *)a2 + 47) >= 0)
      v26 = *((unsigned __int8 *)a2 + 47);
    else
      v26 = a2[4];
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v26 + 16);
    if ((SBYTE7(v83) & 0x80u) == 0)
      v27 = __p;
    else
      v27 = (void **)__p[0];
    if (v26)
    {
      if (*((char *)a2 + 47) >= 0)
        v28 = a2 + 3;
      else
        v28 = (const void *)a2[3];
      memmove(v27, v28, v26);
    }
    strcpy((char *)v27 + v26, "_mask_broadcast_");
    ZinObjectNameFactory::ZinObjectNameFactory(&v65, __p);
    if (SBYTE7(v83) < 0)
      operator delete(__p[0]);
    if (*(_DWORD *)(*(_QWORD *)a3 + 344) != 19)
      ZinAssertImpl("Error: a broadcast unit is expected in upsample decomposition");
    (*(void (**)(void **__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)BoundaryScalingMaskForUnAlignedCorner
                                                                                + 80))(__p, BoundaryScalingMaskForUnAlignedCorner, 0, 0);
    v29 = operator new(0x78uLL);
    v92 = (uint64_t)v29 + 120;
    v93 = (_OWORD *)((char *)v29 + 120);
    v30 = v87;
    v29[4] = v86;
    v29[5] = v30;
    v29[6] = v88;
    *((_DWORD *)v29 + 28) = v89[0];
    v31 = v83;
    *v29 = *(_OWORD *)__p;
    v29[1] = v31;
    v32 = v85;
    v29[2] = v84;
    v29[3] = v32;
    v33 = *(_QWORD *)a3 + 432;
    v91 = v29;
    Broadcast = (ZinIrOpLayer *)ZinBuilder::CreateBroadcast((uint64_t)v62, (uint64_t)&v65, (uint64_t *)&v91, v33, 3);
    if (v91)
    {
      v92 = (uint64_t)v91;
      operator delete(v91);
    }
    v65 = off_24C01FBB0;
    if ((v68 & 0x80000000) == 0)
      goto LABEL_59;
    v35 = v66;
  }
  else
  {
    if (*(_DWORD *)(*(_QWORD *)a3 + 344) != 1 || *(_DWORD *)(*(_QWORD *)a3 + 592) != 1)
      ZinAssertImpl("Error: a conv unit is expected in upsample decomposition");
    if (*((char *)a2 + 47) >= 0)
      v36 = *((unsigned __int8 *)a2 + 47);
    else
      v36 = a2[4];
    std::string::basic_string[abi:ne180100]((uint64_t)&v65, v36 + 22);
    if (v67 >= 0)
      v37 = &v65;
    else
      v37 = v65;
    if (v36)
    {
      if (*((char *)a2 + 47) >= 0)
        v38 = a2 + 3;
      else
        v38 = (const void *)a2[3];
      memmove(v37, v38, v36);
    }
    strcpy((char *)v37 + v36, "_broadcast_pre-sicily_");
    ZinObjectNameFactory::ZinObjectNameFactory(__p, &v65);
    if (v67 < 0)
      operator delete(v65);
    Broadcast = (ZinIrOpLayer *)ZinBuilder::ChannelBroadcastForPreSicily(v62, (ZinIrContext *)__p, BoundaryScalingMaskForUnAlignedCorner, *(const ZinIrOpLayer **)(*(_QWORD *)a3 + 424));
    __p[0] = off_24C01FBB0;
    if ((SHIBYTE(v83) & 0x80000000) == 0)
      goto LABEL_59;
    v35 = __p[1];
  }
  operator delete(v35);
LABEL_59:
  if (!Broadcast)
    ZinAssertImpl("Error: failed to broadcast const scale for scaling boundaries");
  v91 = a2;
  v65 = &v91;
  v66 = (void *)1;
  Layer2TDMapper::SourceLayer::SourceLayer(__p, &v65);
  v39 = ZinIrOpLayerGraph::AddNode(a1, Broadcast, (ZinIrOpLayer ***)__p);
  __p[0] = &unk_24C02BB18;
  if (__p[1])
  {
    *(void **)&v83 = __p[1];
    operator delete(__p[1]);
  }
  v40 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)BoundaryScalingMaskForUnAlignedCorner, (uint64_t)Broadcast, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  if (*(_DWORD *)(*(_QWORD *)a3 + 688) != 4 || (LODWORD(v61) = v40, *(_DWORD *)(*(_QWORD *)a3 + 776) != 2))
    ZinAssertImpl("Error: an EW mul unit is expected in upsample decomposition", v61);
  v41 = v39;
  if (*((char *)a2 + 47) >= 0)
    v42 = *((unsigned __int8 *)a2 + 47);
  else
    v42 = a2[4];
  v43 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v42 + 18);
  if (SBYTE7(v83) < 0)
    v43 = (void **)__p[0];
  if (v42)
  {
    if (*((char *)a2 + 47) >= 0)
      v44 = a2 + 3;
    else
      v44 = (const void *)a2[3];
    memmove(v43, v44, v42);
  }
  strcpy((char *)v43 + v42, "_scale_with_ewmul_");
  ZinObjectNameFactory::ZinObjectNameFactory(&v65, __p);
  if (SBYTE7(v83) < 0)
    operator delete(__p[0]);
  v45 = *(_DWORD *)(*(_QWORD *)a3 + 776);
  (*(void (**)(void **__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)ChannelWiseDeconvForUnalignedCornersUpsample
                                                                              + 80))(__p, ChannelWiseDeconvForUnalignedCornersUpsample, 0, 0);
  (*(void (**)(_QWORD *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Broadcast + 80))((_QWORD *)v89 + 1, Broadcast, 0, 0);
  v46 = operator new(0xF0uLL);
  v93 = v46 + 15;
  v47 = v90[0];
  v46[12] = v89[5];
  v46[13] = v47;
  *(_OWORD *)((char *)v46 + 220) = *(_OWORD *)((char *)v90 + 12);
  v48 = v89[2];
  v46[8] = v89[1];
  v46[9] = v48;
  v49 = v89[4];
  v46[10] = v89[3];
  v46[11] = v49;
  v50 = v87;
  v46[4] = v86;
  v46[5] = v50;
  v51 = v89[0];
  v46[6] = v88;
  v46[7] = v51;
  v52 = v83;
  *v46 = *(_OWORD *)__p;
  v46[1] = v52;
  v53 = v85;
  v46[2] = v84;
  v46[3] = v53;
  v91 = v46;
  v92 = (uint64_t)(v46 + 15);
  v54 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a2 + 32))(a2, 0, 0);
  v55 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a2 + 32))(a2, 0, 0);
  ElementWiseLayer = (ZinIrOpLayer *)ZinBuilder::CreateElementWiseLayer((uint64_t)v62, (uint64_t)&v65, v45, (uint64_t)&v91, (__int128 *)(v54 + 48), *(_DWORD *)(v55 + 88));
  if (v91)
  {
    v92 = (uint64_t)v91;
    operator delete(v91);
  }
  v81 = a2;
  v91 = &v81;
  v92 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(__p, &v91);
  v57 = ZinIrOpLayerGraph::AddNode(a1, ElementWiseLayer, (ZinIrOpLayer ***)__p);
  __p[0] = &unk_24C02BB18;
  if (__p[1])
  {
    *(void **)&v83 = __p[1];
    operator delete(__p[1]);
  }
  v58 = operator new(0x10uLL);
  __p[1] = v58 + 2;
  *(_QWORD *)&v83 = v58 + 2;
  *v58 = ChannelWiseDeconvForUnalignedCornersUpsample;
  v58[1] = Broadcast;
  __p[0] = v58;
  v59 = ZinIrOpLayerGraph::AddEdgesImplSrc<std::vector<ZinIrOpLayer *>>((uint64_t)a1, (uint64_t *)__p, (uint64_t)ElementWiseLayer);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  memset(v63, 0, sizeof(v63));
  v64 = 1065353216;
  v23 = HIDWORD(v61) & v41 & v61 & v57 & v59 & ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a1, (uint64_t **)a2, ElementWiseLayer, v63);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v63);
  v65 = off_24C01FBB0;
  if (v68 < 0)
    operator delete(v66);
LABEL_84:
  if ((v20 & v22 & v23 & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a1, (ZinIrOpLayer *)a2, 0) & 1) == 0)
    ZinAssertImpl("ANE internal failure: Resize graph manipulation error");
  v71[0] = off_24C01ED88;
  if (v74)
  {
    v75 = v74;
    operator delete(v74);
  }
  if (v72)
  {
    v73 = v72;
    operator delete(v72);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(v71);
  return 0;
}

void sub_206DEB928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a69;
  void *__p;
  char a72;

  a69 = (uint64_t)off_24C01FBB0;
  if (a72 < 0)
    operator delete(__p);
  ZinIrConvUnitInfo::~ZinIrConvUnitInfo((ZinIrConvUnitInfo *)&a26);
  _Unwind_Resume(a1);
}

uint64_t ZinResizeLayerUtils::ApplyUpsample4xTransform(uint64_t **a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  size_t v13;
  _BYTE *v14;
  uint64_t *v15;
  std::string *v16;
  std::string::size_type size;
  std::string *v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _DWORD *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  ZinIrOpLayer *ResizeLayer;
  _BOOL4 v34;
  int v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  int v40;
  uint64_t v41;
  __int128 v43;
  _QWORD v44[4];
  int v45;
  void *__p[2];
  _QWORD v47[2];
  int v48;
  void *v49;
  void *v50;
  _QWORD *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  std::string v54;
  _QWORD v55[3];
  char v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  _QWORD v60[19];
  __int128 v61;
  void *v62;
  void *v63;
  uint64_t v64;
  char v65;
  __int128 v66;
  uint64_t **v67;
  _BYTE v68[32];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  int v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)a2[8] + 2) != 59)
    return 3;
  v5 = *a2[11];
  v6 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0, 0);
  v66 = *(_OWORD *)(v6 + 48);
  v7 = *a3;
  if (a3[1] == *a3)
  {
    ResizeLayer = 0;
    v10 = 1;
  }
  else
  {
    v8 = 0;
    v9 = *(_QWORD *)(v6 + 80);
    v43 = *(_OWORD *)(v6 + 64);
    v41 = v6;
    v10 = 1;
    do
    {
      if (*(_DWORD *)(v7 + 344 * v8) != 41)
        ZinAssertImpl("Error: a resize unit is expected in the decomposition");
      v11 = v7 + 344 * v8 + 8;
      ZinIrTextureUnitInfo::ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)v60, (const ZinIrTextureUnitInfo *)v11);
      v60[0] = &off_24C01F040;
      v61 = *(_OWORD *)(v11 + 156);
      v63 = 0;
      v64 = 0;
      v62 = 0;
      std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v62, *(const void **)(v11 + 176), *(_QWORD *)(v11 + 184), (uint64_t)(*(_QWORD *)(v11 + 184) - *(_QWORD *)(v11 + 176)) >> 3);
      v65 = *(_BYTE *)(v11 + 200);
      v59 = v9;
      *(_QWORD *)&v12 = v61;
      *((_QWORD *)&v12 + 1) = DWORD1(v61);
      v57 = v66;
      v58 = v12;
      if (*((char *)a2 + 47) >= 0)
        v13 = *((unsigned __int8 *)a2 + 47);
      else
        v13 = (size_t)a2[4];
      std::string::basic_string[abi:ne180100]((uint64_t)v68, v13 + 21);
      if (v68[23] >= 0)
        v14 = v68;
      else
        v14 = *(_BYTE **)v68;
      if (v13)
      {
        if (*((char *)a2 + 47) >= 0)
          v15 = (uint64_t *)(a2 + 3);
        else
          v15 = a2[3];
        memmove(v14, v15, v13);
      }
      strcpy(&v14[v13], "upsample_4x_decompose");
      std::to_string(&v54, v8);
      if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v16 = &v54;
      else
        v16 = (std::string *)v54.__r_.__value_.__r.__words[0];
      if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
      else
        size = v54.__r_.__value_.__l.__size_;
      v18 = std::string::append((std::string *)v68, (const std::string::value_type *)v16, size);
      v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v47[0] = *((_QWORD *)&v18->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      ZinObjectNameFactory::ZinObjectNameFactory(v55, __p);
      if (SHIBYTE(v47[0]) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      if ((v68[23] & 0x80000000) != 0)
        operator delete(*(void **)v68);
      v20 = v41;
      if (v8 == -1 - 0x7D05F417D05F417DLL * ((a3[1] - *a3) >> 3))
        v20 = ((uint64_t (*)(uint64_t **, _QWORD, _QWORD))(*a2)[4])(a2, 0, 0);
      v21 = *(_DWORD *)(v20 + 88);
      v22 = (uint64_t)a2[2];
      ZinObjectNameFactory::CreateName((uint64_t)v55, 0, (std::string *)v68);
      v51 = 0;
      *(_OWORD *)&v54.__r_.__value_.__l.__data_ = 0uLL;
      LODWORD(__p[0]) = 0;
      v47[0] = 0;
      v47[1] = 0;
      __p[1] = 0;
      v48 = 0;
      ZinIrTensor::CreateTensor(v22, v21, &v57, (__int128 *)v68, &v51, (uint64_t *)&v54, (unsigned int *)__p, &v52);
      v23 = (std::__shared_weak_count *)v54.__r_.__value_.__l.__size_;
      if (v54.__r_.__value_.__l.__size_)
      {
        v24 = (unint64_t *)(v54.__r_.__value_.__l.__size_ + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v26 = v51;
      v51 = 0;
      if (v26)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v51, v26);
      if ((v68[23] & 0x80000000) != 0)
        operator delete(*(void **)v68);
      ZinIrResizeInfo::ZinIrResizeInfo((ZinIrResizeInfo *)__p, (const ZinIrResizeUnitInfo *)v60, v43, DWORD2(v43));
      v27 = (uint64_t)a2[2];
      (*(void (**)(_BYTE *__return_ptr, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 80))(v68, v5, 0, 0);
      v28 = operator new(0x78uLL);
      v54.__r_.__value_.__l.__size_ = (std::string::size_type)(v28 + 30);
      v54.__r_.__value_.__r.__words[2] = (std::string::size_type)(v28 + 30);
      v28[28] = v74;
      v29 = v73;
      v30 = v71;
      *((_OWORD *)v28 + 5) = v72;
      *((_OWORD *)v28 + 6) = v29;
      v31 = *(_OWORD *)&v68[16];
      *(_OWORD *)v28 = *(_OWORD *)v68;
      *((_OWORD *)v28 + 1) = v31;
      v32 = v70;
      *((_OWORD *)v28 + 2) = v69;
      *((_OWORD *)v28 + 3) = v32;
      *((_OWORD *)v28 + 4) = v30;
      v54.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
      ResizeLayer = (ZinIrOpLayer *)ZinBuilder::CreateResizeLayer(v27, (uint64_t)v55, (uint64_t)&v54, (__int128 *)(v52 + 48), *(_DWORD *)(v52 + 88), (uint64_t)__p);
      if (v54.__r_.__value_.__r.__words[0])
      {
        v54.__r_.__value_.__l.__size_ = v54.__r_.__value_.__r.__words[0];
        operator delete(v54.__r_.__value_.__l.__data_);
      }
      v67 = a2;
      v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
      v54.__r_.__value_.__l.__size_ = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(v68, &v54);
      v34 = ZinIrOpLayerGraph::AddNode(a1, ResizeLayer, (ZinIrOpLayer ***)v68);
      *(_QWORD *)v68 = &unk_24C02BB18;
      if (*(_QWORD *)&v68[8])
      {
        *(_QWORD *)&v68[16] = *(_QWORD *)&v68[8];
        operator delete(*(void **)&v68[8]);
      }
      v35 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, v5, (uint64_t)ResizeLayer, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      v66 = v57;
      v9 = v59;
      v43 = v58;
      __p[0] = &unk_24C01ADF0;
      v47[0] = &off_24C01F040;
      if (v49)
      {
        v50 = v49;
        operator delete(v49);
      }
      ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)v47);
      ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)__p);
      v36 = v53;
      if (v53)
      {
        p_shared_owners = (unint64_t *)&v53->__shared_owners_;
        do
          v38 = __ldaxr(p_shared_owners);
        while (__stlxr(v38 - 1, p_shared_owners));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      v55[0] = off_24C01FBB0;
      if (v56 < 0)
        operator delete((void *)v55[1]);
      v60[0] = &off_24C01F040;
      if (v62)
      {
        v63 = v62;
        operator delete(v62);
      }
      v10 &= v34 & v35;
      ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)v60);
      ++v8;
      v7 = *a3;
      v5 = (uint64_t)ResizeLayer;
    }
    while (v8 < 0x82FA0BE82FA0BE83 * ((a3[1] - *a3) >> 3));
  }
  memset(v44, 0, sizeof(v44));
  v45 = 1065353216;
  v40 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a1, a2, ResizeLayer, v44);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v44);
  if ((v10 & v40 & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a1, (ZinIrOpLayer *)a2, 0) & 1) == 0)
    ZinAssertImpl("ANE internal failure: Resize graph manipulation error");
  return 0;
}

void sub_206DEC11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_206DEC25C()
{
  JUMPOUT(0x206DEC254);
}

uint64_t ZinResizeLayerUtils::ApplyUpsampleWithDefault(uint64_t **a1, _QWORD **a2, uint64_t a3, ZinIrOpLayerGraph *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  char v20;
  _DWORD *v21;
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  const ZinIrHalParameters *v27;
  ZinIrOpLayer *ChannelWiseDeconvForDefaultUpsample;
  _BOOL4 v29;
  int v30;
  _DWORD *v31;
  _DWORD *v32;
  int v33;
  ZinIrOpLayer *BoundaryScalingMaskForDefault;
  _BOOL4 v35;
  size_t v36;
  __int128 *v37;
  _QWORD *v38;
  ZinIrOpLayer *v39;
  int v40;
  size_t v41;
  __int128 *v42;
  _QWORD *v43;
  int v44;
  _OWORD *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  ZinIrOpLayer *ElementWiseLayer;
  _BOOL4 v56;
  _QWORD *v57;
  int v58;
  int v59;
  uint64_t *v60;
  ZinIrTensor *v61;
  ZinIrTensor::MirInfo *v62;
  uint64_t v64;
  _BOOL4 v65;
  _BOOL4 v66;
  ZinIrTarget **v67;
  ZinIrTensor::MirInfo *v68;
  _QWORD v69[4];
  int v70;
  void ***v71;
  void *v72;
  char v73;
  _QWORD v74[4];
  int v75;
  void *v76[11];
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _BYTE v85[28];
  _QWORD **v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  _OWORD v94[6];
  _OWORD v95[2];
  _QWORD *v96;
  uint64_t v97;
  _OWORD *v98;
  void **v99;
  uint64_t v100;
  char v101;
  uint64_t v102;

  v102 = *MEMORY[0x24BDAC8D0];
  v8 = *a2[11];
  v9 = ((uint64_t (*)(_QWORD **, _QWORD, _QWORD))(*a2)[4])(a2, 0, 0);
  v10 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0, 0);
  v11 = *(_QWORD *)(v9 + 64);
  v12 = *(_QWORD *)(v9 + 72);
  v13 = *(_QWORD *)(v10 + 64);
  v14 = *(_QWORD *)(v10 + 72);
  v15 = v12 == 4 * v14;
  v17 = v12 == 2 * v14;
  v16 = 3 * v14;
  v17 = v17 || v12 == v16;
  v18 = v17 || v15;
  if (v11 != 2 * v13 && v11 != 3 * v13)
  {
    v20 = v11 == 4 * v13 ? 1 : v18;
    if ((v20 & 1) == 0)
      ZinAssertImpl("Error: invalid upsample factor");
  }
  v21 = *(_DWORD **)a3;
  if (**(_DWORD **)a3 != 1 || (v22 = (__int128 *)(v21 + 62), v21[62] != 4))
    ZinAssertImpl("Error: a CW deconv is expected in upsample decomposition");
  ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinIrKernelUnitInfo *)v76, (const ZinIrKernelUnitInfo *)(v21 + 2));
  v76[0] = off_24C01CAD8;
  v24 = v22[3];
  v23 = v22[4];
  v25 = v22[2];
  *(_OWORD *)&v85[12] = *(__int128 *)((char *)v22 + 76);
  v26 = v22[1];
  v81 = *v22;
  v82 = v26;
  v84 = v24;
  *(_OWORD *)v85 = v23;
  v83 = v25;
  ChannelWiseDeconvForDefaultUpsample = ZinResizeLayerUtils::CreateChannelWiseDeconvForDefaultUpsample((ZinResizeLayerUtils *)a2, (const ZinResizeLayer *)v76, a1, a4, v27);
  if (!ChannelWiseDeconvForDefaultUpsample)
    ZinAssertImpl("Error: failed to add CW deconvolution");
  v99 = (void **)a2;
  v71 = &v99;
  v72 = (void *)1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v87, &v71);
  v29 = ZinIrOpLayerGraph::AddNode(a1, ChannelWiseDeconvForDefaultUpsample, (ZinIrOpLayer ***)&v87);
  *(_QWORD *)&v87 = &unk_24C02BB18;
  if (*((_QWORD *)&v87 + 1))
  {
    *(_QWORD *)&v88 = *((_QWORD *)&v87 + 1);
    operator delete(*((void **)&v87 + 1));
  }
  v30 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, v8, (uint64_t)ChannelWiseDeconvForDefaultUpsample, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  v31 = (_DWORD *)*((_QWORD *)a4 + 183);
  v32 = (_DWORD *)*((_QWORD *)a4 + 184);
  if (v31 != v32)
  {
    while (*v31 != 3)
    {
      if (++v31 == v32)
      {
        v31 = (_DWORD *)*((_QWORD *)a4 + 184);
        break;
      }
    }
  }
  if (v31 == v32)
  {
    v66 = v29;
    v67 = (ZinIrTarget **)a2[2];
    BoundaryScalingMaskForDefault = (ZinIrOpLayer *)ZinResizeLayerUtils::CreateBoundaryScalingMaskForDefault((size_t *)a2, (const ZinResizeLayer *)(*(_QWORD *)(v9 + 72)/ *(uint64_t *)(v10 + 72)), *(_QWORD *)(v9 + 64) / *(uint64_t *)(v10 + 64));
    if (!BoundaryScalingMaskForDefault)
      ZinAssertImpl("Error: failed to add const scale for scaling boundaries");
    v99 = (void **)a2;
    v71 = &v99;
    v72 = (void *)1;
    Layer2TDMapper::SourceLayer::SourceLayer(&v87, &v71);
    v35 = ZinIrOpLayerGraph::AddNode(a1, BoundaryScalingMaskForDefault, (ZinIrOpLayer ***)&v87);
    *(_QWORD *)&v87 = &unk_24C02BB18;
    if (*((_QWORD *)&v87 + 1))
    {
      *(_QWORD *)&v88 = *((_QWORD *)&v87 + 1);
      operator delete(*((void **)&v87 + 1));
    }
    if (*(_DWORD *)(*(_QWORD *)a3 + 344) != 1 || (v65 = v35, *(_DWORD *)(*(_QWORD *)a3 + 592) != 1))
      ZinAssertImpl("Error: a conv unit is expected in upsample decomposition. ");
    if (*((char *)a2 + 47) >= 0)
      v36 = *((unsigned __int8 *)a2 + 47);
    else
      v36 = (size_t)a2[4];
    v37 = &v87;
    std::string::basic_string[abi:ne180100]((uint64_t)&v87, v36 + 22);
    if (SBYTE7(v88) < 0)
      v37 = (__int128 *)v87;
    if (v36)
    {
      if (*((char *)a2 + 47) >= 0)
        v38 = a2 + 3;
      else
        v38 = a2[3];
      memmove(v37, v38, v36);
    }
    strcpy((char *)v37 + v36, "_broadcast_pre-sicily_");
    ZinObjectNameFactory::ZinObjectNameFactory(&v71, &v87);
    if (SBYTE7(v88) < 0)
      operator delete((void *)v87);
    v39 = (ZinIrOpLayer *)ZinBuilder::ChannelBroadcastForPreSicily(v67, (ZinIrContext *)&v71, BoundaryScalingMaskForDefault, *(const ZinIrOpLayer **)(*(_QWORD *)a3 + 424));
    if (!v39)
      ZinAssertImpl("Error: failed to broadcast const scale for scaling boundaries");
    v96 = a2;
    v99 = (void **)&v96;
    v100 = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&v87, &v99);
    HIDWORD(v64) = ZinIrOpLayerGraph::AddNode(a1, v39, (ZinIrOpLayer ***)&v87);
    *(_QWORD *)&v87 = &unk_24C02BB18;
    if (*((_QWORD *)&v87 + 1))
    {
      *(_QWORD *)&v88 = *((_QWORD *)&v87 + 1);
      operator delete(*((void **)&v87 + 1));
    }
    v40 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)BoundaryScalingMaskForDefault, (uint64_t)v39, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    if (*(_DWORD *)(*(_QWORD *)a3 + 688) != 4 || (LODWORD(v64) = v40, *(_DWORD *)(*(_QWORD *)a3 + 776) != 2))
      ZinAssertImpl("Error: An EW mul unit is expected in upsample decomposition", v64);
    if (*((char *)a2 + 47) >= 0)
      v41 = *((unsigned __int8 *)a2 + 47);
    else
      v41 = (size_t)a2[4];
    v42 = &v87;
    std::string::basic_string[abi:ne180100]((uint64_t)&v87, v41 + 8);
    if (SBYTE7(v88) < 0)
      v42 = (__int128 *)v87;
    if (v41)
    {
      if (*((char *)a2 + 47) >= 0)
        v43 = a2 + 3;
      else
        v43 = a2[3];
      memmove(v42, v43, v41);
    }
    strcpy((char *)v42 + v41, "_ew_mul_");
    ZinObjectNameFactory::ZinObjectNameFactory(&v99, &v87);
    v29 = v66;
    if (SBYTE7(v88) < 0)
      operator delete((void *)v87);
    v44 = *(_DWORD *)(*(_QWORD *)a3 + 776);
    (*(void (**)(__int128 *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)ChannelWiseDeconvForDefaultUpsample
                                                                                   + 80))(&v87, ChannelWiseDeconvForDefaultUpsample, 0, 0);
    (*(void (**)(_QWORD *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v39 + 80))((_QWORD *)v94 + 1, v39, 0, 0);
    v45 = operator new(0xF0uLL);
    v98 = v45 + 15;
    v46 = v95[0];
    v45[12] = v94[5];
    v45[13] = v46;
    *(_OWORD *)((char *)v45 + 220) = *(_OWORD *)((char *)v95 + 12);
    v47 = v94[2];
    v45[8] = v94[1];
    v45[9] = v47;
    v48 = v94[4];
    v45[10] = v94[3];
    v45[11] = v48;
    v49 = v92;
    v45[4] = v91;
    v45[5] = v49;
    v50 = v94[0];
    v45[6] = v93;
    v45[7] = v50;
    v51 = v88;
    *v45 = v87;
    v45[1] = v51;
    v52 = v90;
    v45[2] = v89;
    v45[3] = v52;
    v96 = v45;
    v97 = (uint64_t)(v45 + 15);
    v53 = ((uint64_t (*)(_QWORD **, _QWORD, _QWORD))(*a2)[4])(a2, 0, 0);
    v54 = ((uint64_t (*)(_QWORD **, _QWORD, _QWORD))(*a2)[4])(a2, 0, 0);
    ElementWiseLayer = (ZinIrOpLayer *)ZinBuilder::CreateElementWiseLayer((uint64_t)v67, (uint64_t)&v99, v44, (uint64_t)&v96, (__int128 *)(v53 + 48), *(_DWORD *)(v54 + 88));
    if (v96)
    {
      v97 = (uint64_t)v96;
      operator delete(v96);
    }
    v86 = a2;
    v96 = &v86;
    v97 = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&v87, &v96);
    v56 = ZinIrOpLayerGraph::AddNode(a1, ElementWiseLayer, (ZinIrOpLayer ***)&v87);
    *(_QWORD *)&v87 = &unk_24C02BB18;
    if (*((_QWORD *)&v87 + 1))
    {
      *(_QWORD *)&v88 = *((_QWORD *)&v87 + 1);
      operator delete(*((void **)&v87 + 1));
    }
    v57 = operator new(0x10uLL);
    *(_QWORD *)&v88 = v57 + 2;
    *v57 = ChannelWiseDeconvForDefaultUpsample;
    v57[1] = v39;
    *(_QWORD *)&v87 = v57;
    *((_QWORD *)&v87 + 1) = v57 + 2;
    v58 = ZinIrOpLayerGraph::AddEdgesImplSrc<std::vector<ZinIrOpLayer *>>((uint64_t)a1, (uint64_t *)&v87, (uint64_t)ElementWiseLayer);
    if ((_QWORD)v87)
    {
      *((_QWORD *)&v87 + 1) = v87;
      operator delete((void *)v87);
    }
    memset(v69, 0, sizeof(v69));
    v70 = 1065353216;
    v59 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a1, a2, ElementWiseLayer, v69);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v69);
    v60 = (uint64_t *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)ElementWiseLayer + 32))(ElementWiseLayer, 0, 0);
    v61 = (ZinIrTensor *)((uint64_t (*)(_QWORD **, _QWORD, _QWORD))(*a2)[4])(a2, 0, 0);
    ZinIrTensor::CopyTensorMirInfo(v61, &v68);
    ZinIrTensor::SetTensorMirInfo(v60, &v68);
    v62 = v68;
    v68 = 0;
    if (v62)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v68, v62);
    v99 = (void **)off_24C01FBB0;
    if (v101 < 0)
      operator delete((void *)v100);
    v33 = v65 & HIDWORD(v64) & v64 & v56 & v58 & v59;
    v71 = (void ***)off_24C01FBB0;
    if (v73 < 0)
      operator delete(v72);
  }
  else
  {
    memset(v74, 0, sizeof(v74));
    v75 = 1065353216;
    v33 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a1, a2, ChannelWiseDeconvForDefaultUpsample, v74);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v74);
  }
  if ((v29 & v30 & v33 & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a1, (ZinIrOpLayer *)a2, 0) & 1) == 0)
    ZinAssertImpl("ANE internal failure: Resize graph manipulation error");
  v76[0] = off_24C01ED88;
  if (v79)
  {
    v80 = v79;
    operator delete(v79);
  }
  if (v77)
  {
    v78 = v77;
    operator delete(v77);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(v76);
  return 0;
}

void sub_206DECAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  _QWORD *v34;

  v34 = (_QWORD *)a12;
  a12 = 0;
  if (v34)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&a12, v34);
  *(_QWORD *)(v32 - 144) = off_24C01FBB0;
  if (*(char *)(v32 - 113) < 0)
    operator delete(*(void **)(v32 - 136));
  a18 = (uint64_t)off_24C01FBB0;
  if (a24 < 0)
    operator delete(__p);
  ZinIrConvUnitInfo::~ZinIrConvUnitInfo((ZinIrConvUnitInfo *)&a32);
  _Unwind_Resume(a1);
}

ZinIrOpLayer *ZinResizeLayerUtils::CreateChannelWiseDeconvForDefaultUpsample(ZinResizeLayerUtils *this, const ZinResizeLayer *a2, uint64_t **a3, ZinIrOpLayerGraph *a4, const ZinIrHalParameters *a5)
{
  _QWORD *v9;
  uint64_t v10;
  ZinIrOpLayer *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  std::string *v23;
  __int128 v24;
  std::string *p_p;
  std::string::size_type size;
  std::string *v27;
  __int128 v28;
  uint64_t v29;
  ZinIrConvolutionInfo *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  __int128 v41;
  void **v42;
  std::string::size_type v43;
  std::string *v44;
  __int128 v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  ZinConvCompositeLayer *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  ZinIrConvolutionInfo *v53;
  ZinIrKernel *v54;
  _BOOL4 v57;
  BOOL v58;
  std::string v59;
  void *v60[2];
  int64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  std::string v64;
  uint64_t v65;
  int v66;
  _QWORD *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  ZinIrConvolutionInfo *v70;
  std::string v71;
  ZinIrKernel *v72;
  std::string __p;
  __int128 v74;
  std::string::size_type v75;
  void *v76;
  void *v77;
  uint64_t v78;
  int64x2_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  uint64_t v94;
  char v95;
  BOOL v96;
  int v97;
  std::string v98;
  __int128 __src;
  __int128 v100;
  _OWORD v101[2];
  _OWORD v102[2];
  int v103;
  _BYTE v104[12];

  *(_QWORD *)&v104[4] = *MEMORY[0x24BDAC8D0];
  v9 = (_QWORD *)**((_QWORD **)this + 11);
  v10 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, ZinIrOpLayerGraph *, const ZinIrHalParameters *))(*v9 + 32))(v9, 0, 0, a4, a5);
  v11 = 0;
  if (*((_QWORD *)a2 + 34) == 1)
  {
    v12 = v10;
    v91 = 0x100000001;
    v97 = 0;
    v83 = *((_OWORD *)a2 + 16);
    v84 = *((_QWORD *)a2 + 34);
    v89 = *((_OWORD *)a2 + 19);
    v90 = *((_QWORD *)a2 + 40);
    v85 = 0x100000001;
    v13 = *((_DWORD *)a2 + 75);
    v86 = 1;
    v88 = v13;
    v87 = *(_QWORD *)((char *)a2 + 292);
    v95 = *((_BYTE *)a2 + 244);
    v96 = *((_DWORD *)a2 + 60) == 4;
    v14 = *((_QWORD *)a2 + 32);
    v94 = *((_QWORD *)a2 + 31);
    v15 = *((_DWORD *)a2 + 82);
    v92 = 1;
    v93 = v15;
    v79 = vdupq_n_s64(1uLL);
    v16 = *((_QWORD *)a2 + 33);
    v80 = v16;
    v81 = v14;
    v82 = 1;
    v76 = 0;
    v77 = 0;
    v78 = 0;
    if (v14 == 5 && v16 == 5)
    {
      v103 = 1038322959;
      v101[0] = xmmword_207A9F47C;
      v101[1] = unk_207A9F48C;
      v102[0] = xmmword_207A9F49C;
      v102[1] = unk_207A9F4AC;
      __src = xmmword_207A9F45C;
      v100 = unk_207A9F46C;
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v76, (char *)&__src, (uint64_t)v104, 0x19uLL);
      v17 = 0;
      v18 = 6;
    }
    else if (v14 == 4 && v16 == 4)
    {
      __src = xmmword_207A9F4C0;
      v100 = unk_207A9F4D0;
      v101[0] = xmmword_207A9F4E0;
      v101[1] = unk_207A9F4F0;
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v76, (char *)&__src, (uint64_t)v102, 0x10uLL);
      v17 = 1;
      v18 = 4;
    }
    else if (v14 == 3 && v16 == 1 || v14 == 1 && v16 == 3)
    {
      *(_QWORD *)&__src = 0x3F8000003F000000;
      DWORD2(__src) = 1056964608;
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v76, (char *)&__src, (uint64_t)&__src + 12, 3uLL);
      v17 = 1;
      v18 = 2;
    }
    else
    {
      v57 = v14 == 1 && v16 == 5;
      v58 = v16 == 1 && v14 == 5;
      if (v58 || v57)
      {
        LODWORD(v100) = 1051371979;
        __src = xmmword_207A9F500;
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v76, (char *)&__src, (uint64_t)&v100 + 4, 5uLL);
        v17 = 0;
        v18 = 3;
      }
      else
      {
        if (v14 == 3 && v16 == 5)
        {
          __src = xmmword_207A9F514;
          v100 = unk_207A9F524;
          v101[0] = xmmword_207A9F534;
          *(_OWORD *)((char *)v101 + 12) = *(__int128 *)((char *)&xmmword_207A9F534 + 12);
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v76, (char *)&__src, (uint64_t)&v101[1] + 12, 0xFuLL);
        }
        else
        {
          v11 = 0;
          if (v14 != 5 || v16 != 3)
            return v11;
          __src = xmmword_207A9F550;
          v100 = unk_207A9F560;
          v101[0] = xmmword_207A9F570;
          *(_OWORD *)((char *)v101 + 12) = *(__int128 *)((char *)&xmmword_207A9F570 + 12);
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v76, (char *)&__src, (uint64_t)&v101[1] + 12, 0xFuLL);
        }
        v17 = 0;
        v18 = 5;
      }
    }
    v19 = ZinObjectNameFactory::ZinObjectNameFactory(&__src, (char *)this + 24);
    ZinObjectNameFactory::CreateName(v19, 2u, &v64);
    v20 = std::string::append(&v64, "_", 1uLL);
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v71.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v22 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v98, "resize_cw_kernel");
    v23 = std::string::append(v22, "_xfm", 4uLL);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v27 = std::string::append(&v71, (const std::string::value_type *)p_p, size);
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v75 = v27->__r_.__value_.__r.__words[2];
    v74 = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v98.__r_.__value_.__l.__data_);
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v71.__r_.__value_.__l.__data_);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v64.__r_.__value_.__l.__data_);
    ZinIrKernel::CreateDynamicKernel(&v74, (uint64_t)&v83, (float **)&v76, *((unsigned int *)a2 + 21), &v79, v18, (uint64_t)a4, v17, (uint64_t *)&v72);
    v29 = *(_QWORD *)(v12 + 56);
    v64.__r_.__value_.__r.__words[0] = 0x100000001;
    LODWORD(v64.__r_.__value_.__r.__words[1]) = 1;
    ZinGetOutputTensorDimension(v12 + 48, &v83, (unsigned int *)&v85, (unsigned int *)&v87, (int *)&v89, v29, (int *)&v64, (uint64_t)&v71);
    v30 = (ZinIrConvolutionInfo *)operator new();
    ZinIrConvolutionInfo::ZinIrConvolutionInfo(v30);
    v70 = v30;
    v31 = v9[2];
    LODWORD(v30) = *(_DWORD *)((*(uint64_t (**)(ZinResizeLayerUtils *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0)+ 88);
    ZinObjectNameFactory::CreateName((uint64_t)&__src, 0, &__p);
    v67 = 0;
    *(_OWORD *)&v98.__r_.__value_.__l.__data_ = 0uLL;
    LODWORD(v64.__r_.__value_.__l.__data_) = 0;
    v65 = 0;
    *(_OWORD *)&v64.__r_.__value_.__r.__words[1] = 0uLL;
    v66 = 0;
    ZinIrTensor::CreateTensor(v31, (int)v30, (__int128 *)&v71, (__int128 *)&__p, &v67, (uint64_t *)&v98, (unsigned int *)&v64, &v68);
    v32 = (std::__shared_weak_count *)v98.__r_.__value_.__l.__size_;
    if (v98.__r_.__value_.__l.__size_)
    {
      v33 = (unint64_t *)(v98.__r_.__value_.__l.__size_ + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v35 = v67;
    v67 = 0;
    if (v35)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v67, v35);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v11 = (ZinIrOpLayer *)operator new();
    v62 = v68;
    v63 = v69;
    if (v69)
    {
      p_shared_owners = (unint64_t *)&v69->__shared_owners_;
      do
        v37 = __ldxr(p_shared_owners);
      while (__stxr(v37 + 1, p_shared_owners));
    }
    ZinObjectNameFactory::CreateName((uint64_t)&__src, 1u, &v98);
    v38 = std::string::append(&v98, "_", 1uLL);
    v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v59, "resize_cw_deconv");
    v40 = std::string::append(&v59, "_xfm", 4uLL);
    v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v61 = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)v60 = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    if (v61 >= 0)
      v42 = v60;
    else
      v42 = (void **)v60[0];
    if (v61 >= 0)
      v43 = HIBYTE(v61);
    else
      v43 = (std::string::size_type)v60[1];
    v44 = std::string::append(&__p, (const std::string::value_type *)v42, v43);
    v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    ZinConvLayer::ZinConvLayer(v11, &v70, &v62, &v64, &v72);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v64.__r_.__value_.__l.__data_);
    if (SHIBYTE(v61) < 0)
      operator delete(v60[0]);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v98.__r_.__value_.__l.__data_);
    v46 = v63;
    if (v63)
    {
      v47 = (unint64_t *)&v63->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    v98.__r_.__value_.__r.__words[0] = (std::string::size_type)this;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v98;
    __p.__r_.__value_.__l.__size_ = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&v64, &__p);
    ZinIrOpLayerGraph::AddNode(a3, v11, (ZinIrOpLayer ***)&v64);
    v64.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
    if (v64.__r_.__value_.__l.__size_)
    {
      v64.__r_.__value_.__r.__words[2] = v64.__r_.__value_.__l.__size_;
      operator delete((void *)v64.__r_.__value_.__l.__size_);
    }
    ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a3, v11, 0);
    if (ZinConvLayer::HasLargeKernelStrides(v11))
    {
      v49 = (ZinConvCompositeLayer *)operator new();
      ZinConvCompositeLayer::ZinConvCompositeLayer(v49, 0, v11, 0, 0);
      v11 = v49;
    }
    v50 = v69;
    if (v69)
    {
      v51 = (unint64_t *)&v69->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    v53 = v70;
    v70 = 0;
    if (v53)
      (*(void (**)(ZinIrConvolutionInfo *))(*(_QWORD *)v53 + 8))(v53);
    v54 = v72;
    v72 = 0;
    if (v54)
    {
      ZinIrKernel::~ZinIrKernel(v54);
      MEMORY[0x20BD002F8]();
    }
    if (SHIBYTE(v75) < 0)
      operator delete((void *)v74);
    *(_QWORD *)&__src = off_24C01FBB0;
    if (SHIBYTE(v100) < 0)
      operator delete(*((void **)&__src + 1));
    if (v76)
    {
      v77 = v76;
      operator delete(v76);
    }
  }
  return v11;
}

void sub_206DED4A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,void *a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *__p,uint64_t a58)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinResizeLayerUtils::CreateBoundaryScalingMaskForDefault(size_t *this, const ZinResizeLayer *a2, unint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  char *v12;
  const ZinResizeLayer *v13;
  char *v14;
  unint64_t v15;
  char *v23;
  unint64_t v24;
  __int16 *v28;
  uint64_t v29;
  __int16 *v33;
  unint64_t v34;
  char *v38;
  const ZinResizeLayer *v39;
  uint64_t v40;
  __int16 *v41;
  __int16 *v45;
  uint64_t v46;
  size_t v51;
  std::string *v52;
  char *v53;
  std::string *v54;
  __int128 v55;
  void **v56;
  std::string::size_type v57;
  std::string *v58;
  __int128 v59;
  std::string *v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  std::string::size_type v64;
  _QWORD *v65;
  std::string::size_type v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *p_shared_owners;
  unint64_t v71;
  std::string::size_type v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  _QWORD *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void *v81;
  std::__shared_weak_count *v82;
  _QWORD *v83;
  std::string v84;
  uint64_t v85;
  uint64_t v86;
  std::string v87;
  void *__p[2];
  int64_t v89;
  _QWORD v90[3];
  char v91;
  __int128 v92;
  void *v93[3];
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  std::string v97;

  v6 = (_QWORD *)(*(uint64_t (**)(size_t *, _QWORD, _QWORD))(*this + 32))(this, 0, 0);
  v7 = 0;
  if (v6[10] != 1)
    return v7;
  v8 = v6[8];
  v9 = v6[9];
  LOWORD(v94) = 15360;
  std::vector<half>::vector(v93, v9 * v8, &v94);
  v10 = (float)(unint64_t)a2;
  v11 = (float)a3;
  if (a3 < 2)
  {
    if ((unint64_t)a2 > 1 && v8 >= 1)
    {
      v28 = (__int16 *)((char *)v93[0] + 2 * v9 - 2);
      v29 = v8;
      do
      {
        _H2 = *v28;
        __asm { FCVT            S2, H2 }
        _S2 = v10 * _S2;
        __asm { FCVT            H2, S2 }
        *v28 = LOWORD(_S2);
        v28 += v9;
        --v29;
      }
      while (v29);
LABEL_31:
      if (a3 >= 2)
      {
        _S0 = v10 * v11;
        __asm { FCVT            H0, S0 }
        *((_WORD *)v93[0] + v9 * v8 - 1) = LOWORD(_S0);
      }
    }
  }
  else
  {
    if ((unint64_t)a2 < 2)
    {
      if (v9 < 1)
        goto LABEL_33;
      v33 = (__int16 *)((char *)v93[0] + 2 * (v8 - 1) * v9);
      v34 = v9 + 1;
      do
      {
        _H2 = *v33;
        __asm { FCVT            S2, H2 }
        _S2 = v11 * _S2;
        __asm { FCVT            H2, S2 }
        *v33++ = LOWORD(_S2);
        --v34;
      }
      while (v34 > 1);
    }
    else
    {
      v12 = (char *)v93[0];
      if ((unint64_t)a2 < a3)
      {
        v13 = a2;
        do
        {
          if (v9 >= 1)
          {
            v14 = &v12[2 * (v8 - (_QWORD)v13) * v9];
            v15 = v9 + 1;
            do
            {
              _H2 = *(_WORD *)v14;
              __asm { FCVT            S2, H2 }
              _S2 = (float)(v11 * _S2) / v10;
              __asm { FCVT            H2, S2 }
              *(_WORD *)v14 = LOWORD(_S2);
              v14 += 2;
              --v15;
            }
            while (v15 > 1);
          }
          v13 = (const ZinResizeLayer *)((char *)v13 + 1);
        }
        while (v13 != (const ZinResizeLayer *)a3);
      }
      if (v9 >= 1)
      {
        v23 = &v12[2 * (v8 - 1) * v9];
        v24 = v9 + 1;
        do
        {
          _H2 = *(_WORD *)v23;
          __asm { FCVT            S2, H2 }
          _S2 = v11 * _S2;
          __asm { FCVT            H2, S2 }
          *(_WORD *)v23 = LOWORD(_S2);
          v23 += 2;
          --v24;
        }
        while (v24 > 1);
      }
    }
    if ((unint64_t)a2 >= 2)
    {
      if (a3 < (unint64_t)a2)
      {
        v38 = (char *)v93[0] + 2 * v9 - 2 * a3;
        v39 = (const ZinResizeLayer *)a3;
        do
        {
          v40 = v8;
          v41 = (__int16 *)v38;
          if (v8 >= 1)
          {
            do
            {
              _H2 = *v41;
              __asm { FCVT            S2, H2 }
              _S2 = (float)(v10 * _S2) / v11;
              __asm { FCVT            H2, S2 }
              *v41 = LOWORD(_S2);
              v41 += v9;
              --v40;
            }
            while (v40);
          }
          v39 = (const ZinResizeLayer *)((char *)v39 + 1);
          v38 -= 2;
        }
        while (v39 != a2);
      }
      if (v8 >= 1)
      {
        v45 = (__int16 *)((char *)v93[0] + 2 * v9 - 2);
        v46 = v8;
        do
        {
          _H2 = *v45;
          __asm { FCVT            S2, H2 }
          _S2 = v10 * _S2;
          __asm { FCVT            H2, S2 }
          *v45 = LOWORD(_S2);
          v45 += v9;
          --v46;
        }
        while (v46);
      }
      goto LABEL_31;
    }
  }
LABEL_33:
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<half>,std::allocator<ZinIrConstData_specialization<half>>,std::vector<half>,void>((uint64_t)v93, &v94);
  v92 = v94;
  if (*((char *)this + 47) >= 0)
    v51 = *((unsigned __int8 *)this + 47);
  else
    v51 = this[4];
  v52 = &v97;
  std::string::basic_string[abi:ne180100]((uint64_t)&v97, v51 + 1);
  if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v52 = (std::string *)v97.__r_.__value_.__r.__words[0];
  if (v51)
  {
    if (*((char *)this + 47) >= 0)
      v53 = (char *)(this + 3);
    else
      v53 = (char *)this[3];
    memmove(v52, v53, v51);
  }
  *(_WORD *)((char *)&v52->__r_.__value_.__l.__data_ + v51) = 95;
  std::string::basic_string[abi:ne180100]<0>(&v87, "boundary_scale_default");
  v54 = std::string::append(&v87, "_xfm", 4uLL);
  v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  v89 = v54->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v55;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  if (v89 >= 0)
    v56 = __p;
  else
    v56 = (void **)__p[0];
  if (v89 >= 0)
    v57 = HIBYTE(v89);
  else
    v57 = (std::string::size_type)__p[1];
  v58 = std::string::append(&v97, (const std::string::value_type *)v56, v57);
  v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
  v84.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v59;
  v58->__r_.__value_.__l.__size_ = 0;
  v58->__r_.__value_.__r.__words[2] = 0;
  v58->__r_.__value_.__r.__words[0] = 0;
  v60 = std::string::append(&v84, "_", 1uLL);
  v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
  *(_QWORD *)&v95 = *((_QWORD *)&v60->__r_.__value_.__l + 2);
  v94 = v61;
  v60->__r_.__value_.__l.__size_ = 0;
  v60->__r_.__value_.__r.__words[2] = 0;
  v60->__r_.__value_.__r.__words[0] = 0;
  ZinObjectNameFactory::ZinObjectNameFactory(v90, &v94);
  if (SBYTE7(v95) < 0)
    operator delete((void *)v94);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
  if (SHIBYTE(v89) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v87.__r_.__value_.__l.__data_);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v97.__r_.__value_.__l.__data_);
  v84.__r_.__value_.__r.__words[2] = v8;
  v85 = v9;
  v86 = 1;
  *(int64x2_t *)&v84.__r_.__value_.__l.__data_ = vdupq_n_s64(1uLL);
  v62 = operator new();
  DimensionOrderHint::DimensionOrderHint(&v97, 0);
  v96 = 0;
  v94 = 0u;
  v95 = 0u;
  ZinIrTensor::MirInfo::MirInfo(v62, 2, 0, 0, &v97, &v94);
  v87.__r_.__value_.__r.__words[0] = v62;
  if (v97.__r_.__value_.__r.__words[0])
  {
    v97.__r_.__value_.__l.__size_ = v97.__r_.__value_.__r.__words[0];
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  v63 = this[2];
  ZinObjectNameFactory::CreateName((uint64_t)v90, 0, &v97);
  v64 = v87.__r_.__value_.__r.__words[0];
  v87.__r_.__value_.__r.__words[0] = 0;
  v83 = (_QWORD *)v64;
  LODWORD(v94) = 0;
  v95 = 0uLL;
  *((_QWORD *)&v94 + 1) = 0;
  LODWORD(v96) = 0;
  ZinIrTensor::CreateTensor(v63, 3, (__int128 *)&v84, (__int128 *)&v97, &v83, (uint64_t *)&v92, (unsigned int *)&v94, (uint64_t *)__p);
  v65 = v83;
  v83 = 0;
  if (v65)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v83, v65);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v97.__r_.__value_.__l.__data_);
  v66 = operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(v66, 29);
  v97.__r_.__value_.__r.__words[0] = v66;
  v7 = operator new();
  v81 = __p[0];
  v82 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v67 = (unint64_t *)((char *)__p[1] + 8);
    do
      v68 = __ldxr(v67);
    while (__stxr(v68 + 1, v67));
  }
  ZinObjectNameFactory::CreateName((uint64_t)v90, 1u, (std::string *)&v94);
  ZinConstInLayer::ZinConstInLayer(v7, &v97, &v81, &v94);
  if (SBYTE7(v95) < 0)
    operator delete((void *)v94);
  v69 = v82;
  if (v82)
  {
    p_shared_owners = (unint64_t *)&v82->__shared_owners_;
    do
      v71 = __ldaxr(p_shared_owners);
    while (__stlxr(v71 - 1, p_shared_owners));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v72 = v97.__r_.__value_.__r.__words[0];
  v97.__r_.__value_.__r.__words[0] = 0;
  if (v72)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v72 + 8))(v72);
  v73 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v74 = (unint64_t *)((char *)__p[1] + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = (_QWORD *)v87.__r_.__value_.__r.__words[0];
  v87.__r_.__value_.__r.__words[0] = 0;
  if (v76)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v87, v76);
  v90[0] = off_24C01FBB0;
  if (v91 < 0)
    operator delete((void *)v90[1]);
  v77 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
  if (*((_QWORD *)&v92 + 1))
  {
    v78 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  if (v93[0])
  {
    v93[1] = v93[0];
    operator delete(v93[0]);
  }
  return v7;
}

void sub_206DEDD8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,_QWORD *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void (**a33)(ZinObjectNameFactory *__hidden this),void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,char a41)
{
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  _QWORD *v45;
  void *v46;

  if (*(char *)(v42 - 121) < 0)
    operator delete(*(void **)(v42 - 144));
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  MEMORY[0x20BD002F8](v41, 0x10B3C4024B96488);
  v44 = *(_QWORD *)(v42 - 96);
  *(_QWORD *)(v42 - 96) = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  v45 = a21;
  a21 = 0;
  if (v45)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&a21, v45);
  a33 = off_24C01FBB0;
  if (a39 < 0)
    operator delete(__p);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  v46 = *(void **)(v42 - 168);
  if (v46)
  {
    *(_QWORD *)(v42 - 160) = v46;
    operator delete(v46);
  }
  _Unwind_Resume(a1);
}

void sub_206DEDF54()
{
  JUMPOUT(0x206DEDF34);
}

void sub_206DEDF5C()
{
  JUMPOUT(0x206DEDF3CLL);
}

uint64_t ZinResizeLayerUtils::CreateConvKernel(uint64_t result, uint64_t a2, int a3, int a4, uint64_t *a5, _QWORD *a6, double a7)
{
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  double v33;
  unint64_t v34;
  unint64_t v35;
  float v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  float v46;
  unint64_t v55;
  uint64_t v56;
  int v58;
  __int128 v59;
  __int128 v60;
  int v61;

  v10 = result;
  if (a3 == 3 && !a4)
  {
    v11 = (float)a2 / (float)result;
    v59 = 0u;
    v60 = 0u;
    v61 = 1065353216;
    v12 = (uint64_t)(float)((float)((float)(result - 1) * v11) + 1.0);
    v13 = 4 * result;
    if (v12 >= 1)
    {
      v14 = 0;
      v15 = 0;
      for (i = 0; i != v12; ++i)
      {
        if (v10 >= 1)
        {
          v17 = 0;
          v18 = v15;
          do
          {
            v19 = *a5;
            if (v14 + v17 >= (unint64_t)((a5[1] - *a5) >> 2))
              std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
            v20 = vabds_f32((float)v17, (float)i / v11);
            if (v20 >= 1.0)
              v21 = 0.0;
            else
              v21 = 1.0 - v20;
            *(float *)(v19 + v18) = v21;
            std::__hash_table<float,std::hash<float>,std::equal_to<float>,std::allocator<float>>::__emplace_unique_key_args<float,float const&>((uint64_t)&v59, (float *)(v19 + v18), (float *)(v19 + v18));
            ++v17;
            v18 += 4;
          }
          while (v10 != v17);
        }
        v15 += v13;
        v14 += v10;
      }
    }
    v22 = a2 <= v12;
    v23 = a2 - v12;
    if (!v22)
    {
      v24 = v12 * v10;
      v25 = 4 * (v10 + v12 * v10) - 4;
      v26 = v24 - 1;
      do
      {
        v27 = *a5;
        v26 += v10;
        if (v26 >= (a5[1] - *a5) >> 2)
          std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
        *(_DWORD *)(v27 + v25) = 1065353216;
        std::__hash_table<float,std::hash<float>,std::equal_to<float>,std::allocator<float>>::__emplace_unique_key_args<float,float const&>((uint64_t)&v59, (float *)(v27 + v25), (float *)(v27 + v25));
        v25 += v13;
        --v23;
      }
      while (v23);
    }
    *a6 = *((_QWORD *)&v60 + 1);
    return std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v59);
  }
  if (!a4)
  {
    v59 = 0u;
    v60 = 0u;
    v61 = 1065353216;
    v36 = (float)result / (float)a2;
    v37 = 0.0;
    switch(a3)
    {
      case 0:
      case 6:
        v36 = (float)(result - 1) / (float)(a2 - 1);
        break;
      case 1:
        v37 = (float)(v36 * 0.5) + -0.5;
        break;
      case 3:
        break;
      default:
        ZinAssertImpl("Invalid grid mode for Bilinear Interpol");
    }
    if (a2 < 1)
    {
      v56 = 0;
    }
    else
    {
      v38 = 0;
      v39 = 1;
      do
      {
        v40 = fmax(v37 + (float)(v36 * (float)v38), 0.0);
        v41 = vcvtmd_s64_f64(v40);
        if (v41 + 1 >= v10)
        {
          v55 = v39 + v41 - 1;
          if (v55 >= (a5[1] - *a5) >> 2)
            std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
          *(_DWORD *)(*a5 + 4 * v55) = 1065353216;
          v58 = 1065353216;
          std::__hash_table<float,std::hash<float>,std::equal_to<float>,std::allocator<float>>::__emplace_unique_key_args<float,float const&>((uint64_t)&v59, (float *)&v58, (float *)&v58);
        }
        else
        {
          v42 = v39 + v41;
          v43 = v39 + v41 - 1;
          v44 = *a5;
          v45 = (a5[1] - *a5) >> 2;
          if (v45 <= v43)
            goto LABEL_53;
          v46 = v40;
          _S0 = v46 - (float)v41;
          __asm
          {
            FCVT            H0, S0
            FCVT            S12, H0
          }
          _S0 = 1.0 - _S12;
          __asm
          {
            FCVT            H0, S0
            FCVT            S0, H0
          }
          *(_DWORD *)(v44 + 4 * v43) = _S0;
          if (v45 <= v42)
LABEL_53:
            std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
          *(float *)(v44 + 4 * v42) = _S12;
          v58 = _S0;
          std::__hash_table<float,std::hash<float>,std::equal_to<float>,std::allocator<float>>::__emplace_unique_key_args<float,float const&>((uint64_t)&v59, (float *)&v58, (float *)&v58);
          v58 = LODWORD(_S12);
          std::__hash_table<float,std::hash<float>,std::equal_to<float>,std::allocator<float>>::__emplace_unique_key_args<float,float const&>((uint64_t)&v59, (float *)&v58, (float *)&v58);
        }
        ++v38;
        v39 += v10;
      }
      while (a2 != v38);
      v56 = *((_QWORD *)&v60 + 1);
    }
    *a6 = v56;
    return std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v59);
  }
  *(float *)&a7 = (float)result / (float)a2;
  v28 = 0.0;
  if (a3 != 3)
  {
    if (a3 != 1)
      ZinAssertImpl("Invalid grid mode for Nearest Neighbor", a7, 0.0);
    v28 = (float)(*(float *)&a7 * 0.5) + -0.5;
  }
  if (a2 >= 1)
  {
    v29 = 0;
    v30 = 0;
    v31 = *a5;
    v32 = (a5[1] - *a5) >> 2;
    do
    {
      v33 = fmax(v28 + (float)(*(float *)&a7 * (float)v30), 0.0);
      v34 = vcvtmd_s64_f64(v33);
      if ((uint64_t)(v34 + 1) >= result)
      {
        if (v32 <= v29 + v34)
          goto LABEL_52;
        v35 = v34 + v30 * result;
      }
      else if (v34 == vcvtmd_s64_f64(v33 + 0.5))
      {
        v35 = v29 + v34;
        if (v32 <= v35)
          goto LABEL_52;
      }
      else
      {
        if (v32 <= v29 + v34 + 1)
LABEL_52:
          std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
        v35 = v30 * result + v34 + 1;
      }
      *(_DWORD *)(v31 + 4 * v35) = 1065353216;
      ++v30;
      v29 += result;
    }
    while (a2 != v30);
  }
  *a6 = 2;
  return result;
}

void sub_206DEE3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinResizeLayerUtils::CreateTransposeAndConvolutionForResize(uint64_t a1, uint64_t *a2, uint64_t *a3, void **a4, uint64_t a5)
{
  uint64_t *v8;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  size_t v15;
  _BYTE *v16;
  const void *v17;
  std::string *v18;
  std::string *v19;
  __int128 v20;
  void **v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  double v39;
  size_t v40;
  std::string *v41;
  const void *v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  std::string::size_type size;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  std::string::size_type v52;
  std::string *v53;
  __int128 v54;
  std::string *v55;
  __int128 v56;
  const std::string::value_type *v57;
  std::string::size_type v58;
  std::string *v59;
  __int128 v60;
  int WeightFormat;
  int v62;
  uint64_t v63;
  ZinIrKernel *v64;
  ZinIrKernel *v65;
  unint64_t v66;
  uint64_t **v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  ZinIrTensor *v75;
  BOOL IsLiveOut;
  ZinIrTensor *v77;
  ZinIrTensor *v78;
  char v79;
  uint64_t v80;
  uint64_t Transpose;
  unint64_t v82;
  uint64_t *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t **v90;
  char *v91;
  char *v92;
  uint64_t *v93;
  ZinIrKernel *v94;
  uint64_t **v95;
  char *v96;
  char *v97;
  uint64_t *v98;
  uint64_t v100;
  uint64_t v101;
  ZinIrKernel *v102;
  std::string v103;
  std::string v104;
  unint64_t v105;
  void *__p[2];
  std::string::size_type v107;
  uint64_t v108;
  unsigned int v109;
  int v110;
  uint64_t v111;
  unsigned int v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  _BYTE v121[28];
  _BYTE v122[32];
  uint64_t v123;
  int v124;
  std::string v125;
  _BYTE v126[40];
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  void *v135[2];
  __int128 v136;
  uint64_t v137;
  std::string v138;
  uint64_t v139;
  int v140;
  std::string v141;
  __int128 v142;
  void *v143;
  void *v144;
  uint64_t v145;
  std::string v146;
  std::string v147;
  _BYTE v148[32];
  uint64_t v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;

  v8 = a2;
  v10 = (*(uint64_t (**)(uint64_t *, _QWORD, _QWORD))(*a2 + 32))(a2, 0, 0);
  v11 = *(_OWORD *)(v10 + 64);
  v150 = *(_OWORD *)(v10 + 48);
  v151 = v11;
  v152 = *(_QWORD *)(v10 + 80);
  v12 = *a3;
  if (a3[1] != *a3)
  {
    v13 = 0;
    v100 = (uint64_t)(a4 + 2);
    v101 = a5;
    do
    {
      v14 = *(_DWORD *)(v12 + 344 * v13);
      if (v14 == 1)
      {
        v34 = v12 + 344 * v13;
        ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinIrKernelUnitInfo *)__p, (const ZinIrKernelUnitInfo *)(v34 + 8));
        __p[0] = off_24C01CAD8;
        v35 = *(_OWORD *)(v34 + 264);
        v117 = *(_OWORD *)(v34 + 248);
        v118 = v35;
        v36 = *(_OWORD *)(v34 + 280);
        v37 = *(_OWORD *)(v34 + 296);
        v38 = *(_OWORD *)(v34 + 312);
        *(_OWORD *)&v121[12] = *(_OWORD *)(v34 + 324);
        v120 = v37;
        *(_OWORD *)v121 = v38;
        v119 = v36;
        LODWORD(v125.__r_.__value_.__l.__data_) = 0;
        std::vector<float>::vector(v135, v111 * *((_QWORD *)&v150 + 1), &v125);
        v105 = 0;
        ZinResizeLayerUtils::CreateConvKernel(*((uint64_t *)&v150 + 1), v111, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 192) + 4), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 144) + 4), (uint64_t *)v135, &v105, v39);
        if (*(char *)(a1 + 47) >= 0)
          v40 = *(unsigned __int8 *)(a1 + 47);
        else
          v40 = *(_QWORD *)(a1 + 32);
        std::string::basic_string[abi:ne180100]((uint64_t)&v147, v40 + 1);
        if ((v147.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v41 = &v147;
        else
          v41 = (std::string *)v147.__r_.__value_.__r.__words[0];
        if (v40)
        {
          if (*(char *)(a1 + 47) >= 0)
            v42 = (const void *)(a1 + 24);
          else
            v42 = *(const void **)(a1 + 24);
          memmove(v41, v42, v40);
        }
        *(_WORD *)((char *)&v41->__r_.__value_.__l.__data_ + v40) = 95;
        std::string::basic_string[abi:ne180100]<0>(&v104, "trans_resize_conv");
        v43 = std::string::append(&v104, "_xfm", 4uLL);
        v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        v146.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v45 = &v146;
        else
          v45 = (std::string *)v146.__r_.__value_.__r.__words[0];
        if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v146.__r_.__value_.__r.__words[2]);
        else
          size = v146.__r_.__value_.__l.__size_;
        v47 = std::string::append(&v147, (const std::string::value_type *)v45, size);
        v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        *(_QWORD *)&v148[16] = *((_QWORD *)&v47->__r_.__value_.__l + 2);
        *(_OWORD *)v148 = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        v49 = std::string::append((std::string *)v148, "_", 1uLL);
        v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        *(_QWORD *)&v122[16] = *((_QWORD *)&v49->__r_.__value_.__l + 2);
        *(_OWORD *)v122 = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v103, v13);
        if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v51 = &v103;
        else
          v51 = (std::string *)v103.__r_.__value_.__r.__words[0];
        if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v52 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
        else
          v52 = v103.__r_.__value_.__l.__size_;
        v53 = std::string::append((std::string *)v122, (const std::string::value_type *)v51, v52);
        v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
        v125.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v54;
        v53->__r_.__value_.__l.__size_ = 0;
        v53->__r_.__value_.__r.__words[2] = 0;
        v53->__r_.__value_.__r.__words[0] = 0;
        ZinObjectNameFactory::ZinObjectNameFactory(&v138, &v125);
        if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v125.__r_.__value_.__l.__data_);
        if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v103.__r_.__value_.__l.__data_);
        if ((v122[23] & 0x80000000) != 0)
          operator delete(*(void **)v122);
        if ((v148[23] & 0x80000000) != 0)
          operator delete(*(void **)v148);
        if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v146.__r_.__value_.__l.__data_);
        if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v104.__r_.__value_.__l.__data_);
        if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v147.__r_.__value_.__l.__data_);
        ZinObjectNameFactory::CreateName((uint64_t)&v138, 2u, (std::string *)v122);
        v55 = std::string::append((std::string *)v122, "_upsample_conv_kernel_", 0x16uLL);
        v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
        v125.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v56;
        v55->__r_.__value_.__l.__size_ = 0;
        v55->__r_.__value_.__r.__words[2] = 0;
        v55->__r_.__value_.__r.__words[0] = 0;
        std::to_string((std::string *)v148, v13);
        if (v148[23] >= 0)
          v57 = v148;
        else
          v57 = *(const std::string::value_type **)v148;
        if (v148[23] >= 0)
          v58 = v148[23];
        else
          v58 = *(_QWORD *)&v148[8];
        v59 = std::string::append(&v125, v57, v58);
        v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
        v147.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v60;
        v59->__r_.__value_.__l.__size_ = 0;
        v59->__r_.__value_.__r.__words[2] = 0;
        v59->__r_.__value_.__r.__words[0] = 0;
        if ((v148[23] & 0x80000000) != 0)
          operator delete(*(void **)v148);
        if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v125.__r_.__value_.__l.__data_);
        if ((v122[23] & 0x80000000) != 0)
          operator delete(*(void **)v122);
        v128 = 0x100000001;
        HIDWORD(v132) = 0;
        *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v118;
        v125.__r_.__value_.__r.__words[2] = v119;
        *(_OWORD *)&v126[24] = *(_OWORD *)v121;
        v127 = *(_QWORD *)&v121[16];
        *(_QWORD *)v126 = *(_QWORD *)((char *)&v120 + 4);
        *(_DWORD *)&v126[8] = HIDWORD(v120);
        *(_QWORD *)&v126[12] = *(_QWORD *)((char *)&v120 + 4);
        *(_DWORD *)&v126[20] = HIDWORD(v120);
        LOWORD(v132) = BYTE4(v117);
        v131 = *((_QWORD *)&v117 + 1);
        v129 = 1;
        v130 = *(_DWORD *)&v121[24];
        *(_QWORD *)v122 = v111;
        *(_QWORD *)&v122[8] = *((_QWORD *)&v150 + 1);
        *(int64x2_t *)&v122[16] = vdupq_n_s64(1uLL);
        v123 = 1;
        v146.__r_.__value_.__r.__words[0] = 0x100000001;
        LODWORD(v146.__r_.__value_.__r.__words[1]) = 1;
        ZinGetOutputTensorDimension((uint64_t)&v150, &v125, (unsigned int *)v126, (unsigned int *)&v126[12], (int *)&v126[24], v111, (int *)&v146, (uint64_t)v148);
        ZinIrKernel::CreateDynamicKernel((__int128 *)&v147, (uint64_t)&v125, (float **)v135, v112, (int64x2_t *)v122, v105, v101, 1, (uint64_t *)&v146);
        if (*(_BYTE *)(v101 + 1149))
        {
          WeightFormat = ZinIrKernel::GetWeightFormat((ZinIrKernel *)v146.__r_.__value_.__l.__data_);
          if (!ZinKernelFormatIsPalette(WeightFormat)
            || (v62 = ZinIrKernel::GetWeightFormat((ZinIrKernel *)v146.__r_.__value_.__l.__data_),
                ZinPaletteAllowsCompression(v62, v101)))
          {
            ZinIrKernel::SetMustCompressWeight((uint64_t)v146.__r_.__value_.__l.__data_, v109);
          }
        }
        v63 = v8[2];
        v64 = (ZinIrKernel *)v146.__r_.__value_.__r.__words[0];
        v146.__r_.__value_.__r.__words[0] = 0;
        v102 = v64;
        v8 = (uint64_t *)ZinBuilder::CreateConv(v63, (uint64_t)&v138, (uint64_t)v148, v109, v110, &v102);
        v65 = v102;
        v102 = 0;
        if (v65)
        {
          ZinIrKernel::~ZinIrKernel(v65);
          MEMORY[0x20BD002F8]();
        }
        v67 = (uint64_t **)a4[1];
        v66 = (unint64_t)a4[2];
        if ((unint64_t)v67 >= v66)
        {
          v69 = ((char *)v67 - (_BYTE *)*a4) >> 3;
          if ((unint64_t)(v69 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v70 = v66 - (_QWORD)*a4;
          v71 = v70 >> 2;
          if (v70 >> 2 <= (unint64_t)(v69 + 1))
            v71 = v69 + 1;
          if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8)
            v72 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v72 = v71;
          if (v72)
            v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v100, v72);
          else
            v73 = 0;
          v90 = (uint64_t **)&v73[8 * v69];
          *v90 = v8;
          v68 = v90 + 1;
          v92 = (char *)*a4;
          v91 = (char *)a4[1];
          if (v91 != *a4)
          {
            do
            {
              v93 = (uint64_t *)*((_QWORD *)v91 - 1);
              v91 -= 8;
              *--v90 = v93;
            }
            while (v91 != v92);
            v91 = (char *)*a4;
          }
          *a4 = v90;
          a4[1] = v68;
          a4[2] = &v73[8 * v72];
          if (v91)
            operator delete(v91);
        }
        else
        {
          *v67 = v8;
          v68 = v67 + 1;
        }
        a4[1] = v68;
        v150 = *(_OWORD *)v148;
        v151 = *(_OWORD *)&v148[16];
        v152 = v149;
        v94 = (ZinIrKernel *)v146.__r_.__value_.__r.__words[0];
        v146.__r_.__value_.__r.__words[0] = 0;
        if (v94)
        {
          ZinIrKernel::~ZinIrKernel(v94);
          MEMORY[0x20BD002F8]();
        }
        if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v147.__r_.__value_.__l.__data_);
        v138.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C01FBB0;
        if (SHIBYTE(v139) < 0)
          operator delete((void *)v138.__r_.__value_.__l.__size_);
        if (v135[0])
        {
          v135[1] = v135[0];
          operator delete(v135[0]);
        }
        __p[0] = off_24C01ED88;
        if (v115)
        {
          v116 = v115;
          operator delete(v115);
        }
        if (v113)
        {
          v114 = v113;
          operator delete(v113);
        }
        ZinIrUnitInfo::~ZinIrUnitInfo(__p);
      }
      else if (v14 == 21)
      {
        if (*(char *)(a1 + 47) >= 0)
          v15 = *(unsigned __int8 *)(a1 + 47);
        else
          v15 = *(_QWORD *)(a1 + 32);
        std::string::basic_string[abi:ne180100]((uint64_t)v122, v15 + 1);
        if (v122[23] >= 0)
          v16 = v122;
        else
          v16 = *(_BYTE **)v122;
        if (v15)
        {
          if (*(char *)(a1 + 47) >= 0)
            v17 = (const void *)(a1 + 24);
          else
            v17 = *(const void **)(a1 + 24);
          memmove(v16, v17, v15);
        }
        *(_WORD *)&v16[v15] = 95;
        v18 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v147, "transpose_resize");
        v19 = std::string::append(v18, "_xfm", 4uLL);
        v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        *(_QWORD *)&v136 = *((_QWORD *)&v19->__r_.__value_.__l + 2);
        *(_OWORD *)v135 = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        if ((SBYTE7(v136) & 0x80u) == 0)
          v21 = v135;
        else
          v21 = (void **)v135[0];
        if ((SBYTE7(v136) & 0x80u) == 0)
          v22 = BYTE7(v136);
        else
          v22 = (std::string::size_type)v135[1];
        v23 = std::string::append((std::string *)v122, (const std::string::value_type *)v21, v22);
        v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v138.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        v25 = std::string::append(&v138, "_", 1uLL);
        v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v125.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v146, v13);
        if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v27 = &v146;
        else
          v27 = (std::string *)v146.__r_.__value_.__r.__words[0];
        if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v28 = HIBYTE(v146.__r_.__value_.__r.__words[2]);
        else
          v28 = v146.__r_.__value_.__l.__size_;
        v29 = std::string::append(&v125, (const std::string::value_type *)v27, v28);
        v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        v107 = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        ZinObjectNameFactory::ZinObjectNameFactory(v148, __p);
        if (SHIBYTE(v107) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v146.__r_.__value_.__l.__data_);
        if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v125.__r_.__value_.__l.__data_);
        if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v138.__r_.__value_.__l.__data_);
        if (SBYTE7(v136) < 0)
          operator delete(v135[0]);
        if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v147.__r_.__value_.__l.__data_);
        if ((v122[23] & 0x80000000) != 0)
          operator delete(*(void **)v122);
        v31 = v12 + 344 * v13;
        v32 = v31 + 8;
        v138.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C017CA0;
        if (*(char *)(v31 + 39) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v138.__r_.__value_.__r.__words[1], *(const std::string::value_type **)(v31 + 16), *(_QWORD *)(v31 + 24));
        }
        else
        {
          v33 = *(_OWORD *)(v31 + 16);
          v139 = *(_QWORD *)(v31 + 32);
          *(_OWORD *)&v138.__r_.__value_.__r.__words[1] = v33;
        }
        v140 = *(_DWORD *)(v32 + 32);
        memset(&v141, 0, sizeof(v141));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v141, *(__int128 **)(v32 + 40), *(__int128 **)(v32 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v32 + 48) - *(_QWORD *)(v32 + 40)) >> 3));
        v142 = *(_OWORD *)(v32 + 64);
        v138.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C021A98;
        v144 = 0;
        v145 = 0;
        v143 = 0;
        std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v143, *(const void **)(v32 + 80), *(_QWORD *)(v32 + 88), (uint64_t)(*(_QWORD *)(v32 + 88) - *(_QWORD *)(v32 + 80)) >> 3);
        v74 = operator new();
        ZinIrTransposeInfo::ZinIrTransposeInfo(v74, (uint64_t)&v143);
        *(int64x2_t *)v135 = vdupq_n_s64(1uLL);
        v136 = *(_OWORD *)v135;
        v137 = 1;
        ZinIrTransposeUnitInfo::TransposeDimensions<ZinTensorDimensions>(&v150, (uint64_t)&v143, v135);
        LODWORD(v125.__r_.__value_.__l.__data_) = 0;
        v126[32] = 0;
        LOBYTE(v127) = 0;
        LOBYTE(v128) = 0;
        BYTE4(v131) = 0;
        *(_OWORD *)&v125.__r_.__value_.__r.__words[1] = 0u;
        memset(v126, 0, 26);
        v132 = 0;
        v133 = 0;
        v134 = 0;
        LODWORD(v125.__r_.__value_.__l.__data_) = *(_DWORD *)((*(uint64_t (**)(uint64_t *, _QWORD, _QWORD))(*v8 + 32))(v8, 0, 0)+ 88);
        *(_QWORD *)&v126[16] = v152;
        *(_OWORD *)&v125.__r_.__value_.__r.__words[1] = v150;
        *(_OWORD *)v126 = v151;
        v75 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t *, _QWORD, _QWORD))(*v8 + 32))(v8, 0, 0);
        if (*((_QWORD *)v75 + 14) || !ZinIrTensor::IsLiveInLiveStateOrConstTensor(v75))
        {
          v77 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t *, _QWORD, _QWORD))(*v8 + 32))(v8, 0, 0);
          IsLiveOut = ZinIrTensor::IsLiveOut(v77);
        }
        else
        {
          IsLiveOut = 1;
        }
        v126[24] = IsLiveOut;
        v126[25] = *(_QWORD *)((*(uint64_t (**)(uint64_t *, _QWORD, _QWORD))(*v8 + 32))(v8, 0, 0) + 112) != 0;
        v78 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t *, _QWORD, _QWORD))(*v8 + 32))(v8, 0, 0);
        *(_QWORD *)&v126[32] = ZinIrTensor::GetInterleave(v78);
        LOBYTE(v127) = v79;
        v80 = v8[2] + 176;
        *(_QWORD *)v122 = v101;
        *(_OWORD *)&v122[8] = (unint64_t)v80;
        v124 = 0;
        *(_QWORD *)&v122[24] = 0;
        v123 = 0;
        ZinTransposeValidator<ZinIrTransposeUnitInfo,ZinIrTensorInfo>::ZinTransposeValidator(__p, v122, &v138, &v125);
        ZinTransposeValidator<ZinIrTransposeUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)__p);
        if (v108)
          ZinAssertImpl("Validation failed for transpose layer");
        ZinTransposeValidator<ZinIrTransposeUnitInfo,ZinIrTensorInfo>::~ZinTransposeValidator((uint64_t)__p);
        if (SHIBYTE(v123) < 0)
          operator delete(*(void **)&v122[16]);
        Transpose = ZinBuilder::CreateTranspose(v8[2], (uint64_t)v148, (uint64_t)&v150, v142, (uint64_t)&v143);
        v8 = (uint64_t *)Transpose;
        v83 = (uint64_t *)a4[1];
        v82 = (unint64_t)a4[2];
        if ((unint64_t)v83 >= v82)
        {
          v85 = ((char *)v83 - (_BYTE *)*a4) >> 3;
          if ((unint64_t)(v85 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v86 = v82 - (_QWORD)*a4;
          v87 = v86 >> 2;
          if (v86 >> 2 <= (unint64_t)(v85 + 1))
            v87 = v85 + 1;
          if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF8)
            v88 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v88 = v87;
          if (v88)
            v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v100, v88);
          else
            v89 = 0;
          v95 = (uint64_t **)&v89[8 * v85];
          *v95 = v8;
          v84 = v95 + 1;
          v97 = (char *)*a4;
          v96 = (char *)a4[1];
          if (v96 != *a4)
          {
            do
            {
              v98 = (uint64_t *)*((_QWORD *)v96 - 1);
              v96 -= 8;
              *--v95 = v98;
            }
            while (v96 != v97);
            v96 = (char *)*a4;
          }
          *a4 = v95;
          a4[1] = v84;
          a4[2] = &v89[8 * v88];
          if (v96)
            operator delete(v96);
        }
        else
        {
          *v83 = Transpose;
          v84 = v83 + 1;
        }
        a4[1] = v84;
        v150 = *(_OWORD *)v135;
        v151 = v136;
        v152 = v137;
        (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
        v138.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C021A98;
        if (v143)
        {
          v144 = v143;
          operator delete(v143);
        }
        ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v138.__r_.__value_.__l.__data_);
        *(_QWORD *)v148 = off_24C01FBB0;
        if ((v148[31] & 0x80000000) != 0)
          operator delete(*(void **)&v148[8]);
      }
      else if (!*(_BYTE *)(v12 + 344 * v13 + 4))
      {
        return 3;
      }
      ++v13;
      v12 = *a3;
    }
    while (v13 < 0x82FA0BE82FA0BE83 * ((a3[1] - *a3) >> 3));
  }
  return 0;
}

void sub_206DEF0DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  ZinIrTransposeUnitInfo::~ZinIrTransposeUnitInfo((ZinIrTransposeUnitInfo *)&STACK[0x3B0]);
  *(_QWORD *)(v2 - 192) = off_24C01FBB0;
  if (*(char *)(v2 - 161) < 0)
    operator delete(*(void **)(v2 - 184));
  _Unwind_Resume(a1);
}

uint64_t std::vector<ZinResizeLayerUtils::ResizeDecomposedDesc>::__push_back_slow_path<ZinResizeLayerUtils::ResizeDecomposedDesc const&>(uint64_t *a1, const ZinResizeLayerUtils::ResizeDecomposedDesc *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  ZinResizeLayerUtils::ResizeDecomposedDesc *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x82FA0BE82FA0BE83 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xBE82FA0BE82FA0)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x82FA0BE82FA0BE83 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x5F417D05F417D0)
    v9 = 0xBE82FA0BE82FA0;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinPoolValidator<ZinIrPoolUnitInfo,ZinIrTensorInfo>>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (ZinResizeLayerUtils::ResizeDecomposedDesc *)&v10[344 * v4];
  v16 = &v10[344 * v9];
  ZinResizeLayerUtils::ResizeDecomposedDesc::ResizeDecomposedDesc(v14, a2);
  v15 = (char *)v14 + 344;
  std::vector<ZinResizeLayerUtils::ResizeDecomposedDesc>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<ZinResizeLayerUtils::ResizeDecomposedDesc>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_206DEF4E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ZinResizeLayerUtils::ResizeDecomposedDesc>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinResizeLayerUtils::ResizeDecomposedDesc>,std::reverse_iterator<ZinResizeLayerUtils::ResizeDecomposedDesc*>,std::reverse_iterator<ZinResizeLayerUtils::ResizeDecomposedDesc*>,std::reverse_iterator<ZinResizeLayerUtils::ResizeDecomposedDesc*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  ZinResizeLayerUtils::ResizeDecomposedDesc *v12;

  v10 = 0;
  v11 = a7 - 344;
  while (a3 + v10 != a5)
  {
    v12 = (ZinResizeLayerUtils::ResizeDecomposedDesc *)(v11 + v10);
    v10 -= 344;
    ZinResizeLayerUtils::ResizeDecomposedDesc::ResizeDecomposedDesc(v12, (const ZinResizeLayerUtils::ResizeDecomposedDesc *)(v10 + a3));
  }
  return a6;
}

ZinResizeLayerUtils::ResizeDecomposedDesc *ZinResizeLayerUtils::ResizeDecomposedDesc::ResizeDecomposedDesc(ZinResizeLayerUtils::ResizeDecomposedDesc *this, ZinIrBroadcastUnitInfo *a2)
{
  __int128 v4;
  int v5;

  *((_BYTE *)this + 4) = 0;
  *(_DWORD *)this = 19;
  *((_QWORD *)this + 1) = off_24C017CA0;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 4) = *((_QWORD *)a2 + 3);
    *((_OWORD *)this + 1) = v4;
  }
  v5 = *((_DWORD *)a2 + 8);
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 10) = v5;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((__int128 **)a2 + 5), *((__int128 **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3));
  *(_OWORD *)((char *)this + 72) = *((_OWORD *)a2 + 4);
  *((_QWORD *)this + 1) = off_24C021950;
  std::unordered_map<ZinIrDimension,unsigned long>::unordered_map((uint64_t)this + 88, (uint64_t)a2 + 80);
  return this;
}

void sub_206DEF65C(_Unwind_Exception *a1)
{
  void **v1;

  ZinIrUnitInfo::~ZinIrUnitInfo(v1);
  _Unwind_Resume(a1);
}

ZinResizeLayerUtils::ResizeDecomposedDesc *ZinResizeLayerUtils::ResizeDecomposedDesc::ResizeDecomposedDesc(ZinResizeLayerUtils::ResizeDecomposedDesc *this, ZinIrEWUnitInfo *a2)
{
  __int128 v4;
  int v5;

  *((_BYTE *)this + 4) = 0;
  *(_DWORD *)this = 4;
  *((_QWORD *)this + 1) = off_24C017CA0;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 4) = *((_QWORD *)a2 + 3);
    *((_OWORD *)this + 1) = v4;
  }
  v5 = *((_DWORD *)a2 + 8);
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 10) = v5;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((__int128 **)a2 + 5), *((__int128 **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3));
  *(_OWORD *)((char *)this + 72) = *((_OWORD *)a2 + 4);
  *((_QWORD *)this + 1) = off_24C01A728;
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 20);
  return this;
}

void sub_206DEF750(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

ZinResizeLayerUtils::ResizeDecomposedDesc *ZinResizeLayerUtils::ResizeDecomposedDesc::ResizeDecomposedDesc(ZinResizeLayerUtils::ResizeDecomposedDesc *this, ZinIrTransposeUnitInfo *a2)
{
  __int128 v4;
  int v5;
  __int128 v6;

  *((_BYTE *)this + 4) = 0;
  *(_DWORD *)this = 21;
  *((_QWORD *)this + 1) = off_24C017CA0;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 4) = *((_QWORD *)a2 + 3);
    *((_OWORD *)this + 1) = v4;
  }
  v5 = *((_DWORD *)a2 + 8);
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 10) = v5;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((__int128 **)a2 + 5), *((__int128 **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3));
  v6 = *((_OWORD *)a2 + 4);
  *((_QWORD *)this + 11) = 0;
  *(_OWORD *)((char *)this + 72) = v6;
  *((_QWORD *)this + 1) = off_24C021A98;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((_QWORD *)this + 11, *((const void **)a2 + 10), *((_QWORD *)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 3);
  return this;
}

void sub_206DEF84C(_Unwind_Exception *a1)
{
  void **v1;

  ZinIrUnitInfo::~ZinIrUnitInfo(v1);
  _Unwind_Resume(a1);
}

ZinResizeLayerUtils::ResizeDecomposedDesc *ZinResizeLayerUtils::ResizeDecomposedDesc::ResizeDecomposedDesc(ZinResizeLayerUtils::ResizeDecomposedDesc *this, ZinIrResizeUnitInfo *a2)
{
  __int128 v4;

  *((_BYTE *)this + 4) = 0;
  *(_DWORD *)this = 41;
  ZinIrTextureUnitInfo::ZinIrTextureUnitInfo((ZinResizeLayerUtils::ResizeDecomposedDesc *)((char *)this + 8), a2);
  *((_QWORD *)this + 1) = &off_24C01F040;
  v4 = *(_OWORD *)((char *)a2 + 156);
  *((_QWORD *)this + 23) = 0;
  *(_OWORD *)((char *)this + 164) = v4;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((_QWORD *)this + 23, *((const void **)a2 + 22), *((_QWORD *)a2 + 23), (uint64_t)(*((_QWORD *)a2 + 23) - *((_QWORD *)a2 + 22)) >> 3);
  *((_BYTE *)this + 208) = *((_BYTE *)a2 + 200);
  return this;
}

void sub_206DEF8F8(_Unwind_Exception *a1)
{
  ZinIrTextureUnitInfo *v1;

  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo(v1);
  _Unwind_Resume(a1);
}

float *std::__hash_table<float,std::hash<float>,std::equal_to<float>,std::allocator<float>>::__emplace_unique_key_args<float,float const&>(uint64_t a1, float *a2, float *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  float *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  float **v19;
  unint64_t v20;

  if (*a2 == 0.0)
    v6 = 0;
  else
    v6 = *(unsigned int *)a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = v6;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = v6 & (v7 + 0xFFFFFFFF);
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (float *)*v9;
      if (*v9)
      {
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == v6)
          {
            if (v10[4] == *a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = *(float **)v10;
        }
        while (v10);
      }
    }
  }
  v10 = (float *)operator new(0x18uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v6;
  v10[4] = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(float ***)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *(_QWORD *)v10 = *v19;
LABEL_41:
    *v19 = v10;
    goto LABEL_42;
  }
  *(_QWORD *)v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)v10)
  {
    v20 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (float **)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_41;
  }
LABEL_42:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_206DEFB24(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrOpt::ReplaceSqrtEWDiv(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  ZinIrOpt::SqrtDiv::SqrtDiv(&v8, a2);
  v9[0] = &off_24C002B48;
  v9[1] = &v8;
  v10 = v9;
  v3 = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v9, 1);
  v4 = v10;
  if (v10 == v9)
  {
    v5 = 4;
    v4 = v9;
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v8;
  v8 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
  return v3;
}

void sub_206DEFC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  ZinIrOpt::ReplaceSqrtEWDiv(&a9);
  _Unwind_Resume(a1);
}

uint64_t *ZinIrOpt::SqrtDiv::SqrtDiv(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  int v13;
  int v14;
  int v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char **v19;
  _BYTE v20[8];
  _BYTE v21[24];
  _BYTE *v22;
  _QWORD v23[3];
  _QWORD v24[4];
  uint64_t v25;
  uint64_t v26[3];
  _QWORD v27[4];
  uint64_t v28;
  uint64_t v29[3];
  _QWORD v30[4];
  uint64_t v31;
  _QWORD v32[23];
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  *a1 = 0;
  std::string::basic_string[abi:ne180100]<0>(v23, "sqrt");
  v24[0] = &unk_24C05AD90;
  v24[3] = v24;
  v15 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v25, &v15, 1);
  std::string::basic_string[abi:ne180100]<0>(v26, "broadcast");
  v27[0] = &unk_24C05AD38;
  v27[3] = v27;
  v14 = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v28, &v14, 1);
  std::string::basic_string[abi:ne180100]<0>(v29, "div");
  v30[0] = &unk_24C05ACE0;
  v30[3] = v30;
  v13 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v31, &v13, 1);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = &v16;
  v20[0] = 0;
  v16 = (char *)operator new(0x120uLL);
  v17 = (uint64_t)v16;
  v18 = v16 + 288;
  v17 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v18, (uint64_t)v23, (uint64_t)v32, (uint64_t)v16);
  v22 = 0;
  ZinLinearPattern::ZinLinearPattern(v32, &v16, a2, 0, v21, 0);
  v4 = operator new();
  ZinPattern::ZinPattern((ZinPattern *)v4, (const ZinPattern *)v32);
  *(_QWORD *)v4 = &off_24C01BCC8;
  *(_OWORD *)(v4 + 184) = v33;
  *(_QWORD *)(v4 + 200) = v34;
  v33 = 0uLL;
  v34 = 0;
  v5 = *a1;
  *a1 = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  v32[0] = &off_24C01BCC8;
  v19 = (char **)&v33;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
  ZinPattern::~ZinPattern((ZinPattern *)v32);
  v6 = v22;
  if (v22 == v21)
  {
    v7 = 4;
    v6 = v21;
    goto LABEL_7;
  }
  if (v22)
  {
    v7 = 5;
LABEL_7:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v19 = &v16;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
  v8 = 288;
  do
  {
    v9 = &v23[v8 / 8];
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v20[v8]);
    v10 = *(uint64_t **)&v20[v8 - 8];
    if (&(&v16)[v8 / 8] == (char **)v10)
    {
      v10 = v9 - 9;
      v11 = 4;
    }
    else
    {
      if (!v10)
        goto LABEL_14;
      v11 = 5;
    }
    (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_14:
    if (*((char *)&v15 + v8 + 3) < 0)
      operator delete((void *)*(v9 - 12));
    v8 -= 96;
  }
  while (v8);
  return a1;
}

void sub_206DEFF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  uint64_t *v56;
  uint64_t v57;
  char *v59;
  uint64_t v60;
  uint64_t i;
  uint64_t v62;

  MEMORY[0x20BD002F8](v57, 0x10F3C4065438FD5);
  ZinLinearPattern::~ZinLinearPattern((ZinLinearPattern *)&a56);
  v59 = a19;
  if (a19 == &a16)
  {
    v60 = 4;
    v59 = &a16;
  }
  else
  {
    if (!a19)
    {
LABEL_6:
      a14 = (void **)&a11;
      std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100](&a14);
      for (i = 192; i != -96; i -= 96)
        ZinLinearPattern::AtomItemDesc::~AtomItemDesc((ZinLinearPattern::AtomItemDesc *)(&a20 + i));
      v62 = *v56;
      *v56 = 0;
      if (v62)
        (*(void (**)(uint64_t))(*(_QWORD *)v62 + 48))(v62);
      _Unwind_Resume(a1);
    }
    v60 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v59 + 8 * v60))();
  goto LABEL_6;
}

void sub_206DF0014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)va);
  JUMPOUT(0x206DEFFF4);
}

void sub_206DF0024()
{
  JUMPOUT(0x206DEFFF4);
}

_QWORD *std::__function::__func<ZinIrOpt::SqrtDiv::SqrtDiv(ZinIrParameters const&)::{lambda(MatchParams const&)#1},std::allocator<ZinIrOpt::SqrtDiv::SqrtDiv(ZinIrParameters const&)::{lambda(MatchParams const&)#1}>,MatchStatus ()(MatchParams const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C05AD90;
  return result;
}

void std::__function::__func<ZinIrOpt::SqrtDiv::SqrtDiv(ZinIrParameters const&)::{lambda(MatchParams const&)#1},std::allocator<ZinIrOpt::SqrtDiv::SqrtDiv(ZinIrParameters const&)::{lambda(MatchParams const&)#1}>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C05AD90;
}

uint64_t std::__function::__func<ZinIrOpt::SqrtDiv::SqrtDiv(ZinIrParameters const&)::{lambda(MatchParams const&)#1},std::allocator<ZinIrOpt::SqrtDiv::SqrtDiv(ZinIrParameters const&)::{lambda(MatchParams const&)#1}>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return std::__invoke_void_return_wrapper<MatchStatus,false>::__call[abi:ne180100]<ZinIrOpt::SqrtDiv::SqrtDiv(ZinIrParameters const&)::{lambda(MatchParams const&)#1} &,MatchParams const&>(a1 + 8, a2);
}

uint64_t std::__function::__func<ZinIrOpt::SqrtDiv::SqrtDiv(ZinIrParameters const&)::{lambda(MatchParams const&)#1},std::allocator<ZinIrOpt::SqrtDiv::SqrtDiv(ZinIrParameters const&)::{lambda(MatchParams const&)#1}>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::SqrtDiv::SqrtDiv(ZinIrParameters const&)::{lambda(MatchParams const&)#1},std::allocator<ZinIrOpt::SqrtDiv::SqrtDiv(ZinIrParameters const&)::{lambda(MatchParams const&)#1}>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<MatchStatus,false>::__call[abi:ne180100]<ZinIrOpt::SqrtDiv::SqrtDiv(ZinIrParameters const&)::{lambda(MatchParams const&)#1} &,MatchParams const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(_DWORD *)(*(_QWORD *)(v2 + 64) + 8) == 4
    && *(_DWORD *)(v2 + 192) == 15
    && !ZinIrOpLayer::IsTensorFmtQuantized((ZinIrOpLayer *)v2);
  return v3 | 0x100u;
}

_QWORD *std::__function::__func<ZinIrOpt::SqrtDiv::SqrtDiv(ZinIrParameters const&)::{lambda(MatchParams const&)#3},std::allocator<ZinIrOpt::SqrtDiv::SqrtDiv(ZinIrParameters const&)::{lambda(MatchParams const&)#3}>,MatchStatus ()(MatchParams const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C05AD38;
  return result;
}

void std::__function::__func<ZinIrOpt::SqrtDiv::SqrtDiv(ZinIrParameters const&)::{lambda(MatchParams const&)#3},std::allocator<ZinIrOpt::SqrtDiv::SqrtDiv(ZinIrParameters const&)::{lambda(MatchParams const&)#3}>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C05AD38;
}

uint64_t std::__function::__func<ZinIrOpt::SqrtDiv::SqrtDiv(ZinIrParameters const&)::{lambda(MatchParams const&)#3},std::allocator<ZinIrOpt::SqrtDiv::SqrtDiv(ZinIrParameters const&)::{lambda(MatchParams const&)#3}>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 64) + 8) == 18) | 0x100u;
}

uint64_t std::__function::__func<ZinIrOpt::SqrtDiv::SqrtDiv(ZinIrParameters const&)::{lambda(MatchParams const&)#3},std::allocator<ZinIrOpt::SqrtDiv::SqrtDiv(ZinIrParameters const&)::{lambda(MatchParams const&)#3}>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::SqrtDiv::SqrtDiv(ZinIrParameters const&)::{lambda(MatchParams const&)#3},std::allocator<ZinIrOpt::SqrtDiv::SqrtDiv(ZinIrParameters const&)::{lambda(MatchParams const&)#3}>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

_QWORD *std::__function::__func<ZinIrOpt::SqrtDiv::SqrtDiv(ZinIrParameters const&)::{lambda(MatchParams const&)#2},std::allocator<ZinIrOpt::SqrtDiv::SqrtDiv(ZinIrParameters const&)::{lambda(MatchParams const&)#2}>,MatchStatus ()(MatchParams const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C05ACE0;
  return result;
}

void std::__function::__func<ZinIrOpt::SqrtDiv::SqrtDiv(ZinIrParameters const&)::{lambda(MatchParams const&)#2},std::allocator<ZinIrOpt::SqrtDiv::SqrtDiv(ZinIrParameters const&)::{lambda(MatchParams const&)#2}>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C05ACE0;
}

uint64_t std::__function::__func<ZinIrOpt::SqrtDiv::SqrtDiv(ZinIrParameters const&)::{lambda(MatchParams const&)#2},std::allocator<ZinIrOpt::SqrtDiv::SqrtDiv(ZinIrParameters const&)::{lambda(MatchParams const&)#2}>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return std::__invoke_void_return_wrapper<MatchStatus,false>::__call[abi:ne180100]<ZinIrOpt::SqrtDiv::SqrtDiv(ZinIrParameters const&)::{lambda(MatchParams const&)#2} &,MatchParams const&>(a1 + 8, a2);
}

uint64_t std::__function::__func<ZinIrOpt::SqrtDiv::SqrtDiv(ZinIrParameters const&)::{lambda(MatchParams const&)#2},std::allocator<ZinIrOpt::SqrtDiv::SqrtDiv(ZinIrParameters const&)::{lambda(MatchParams const&)#2}>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::SqrtDiv::SqrtDiv(ZinIrParameters const&)::{lambda(MatchParams const&)#2},std::allocator<ZinIrOpt::SqrtDiv::SqrtDiv(ZinIrParameters const&)::{lambda(MatchParams const&)#2}>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<MatchStatus,false>::__call[abi:ne180100]<ZinIrOpt::SqrtDiv::SqrtDiv(ZinIrParameters const&)::{lambda(MatchParams const&)#2} &,MatchParams const&>(uint64_t a1, uint64_t a2)
{
  ZinIrOpLayer *v2;
  uint64_t v3;
  _BOOL4 v4;

  v2 = *(ZinIrOpLayer **)(a2 + 8);
  v3 = *((_QWORD *)v2 + 8);
  v4 = *(_DWORD *)(v3 + 8) == 5 && *(_DWORD *)(v3 + 12) == 6 && !ZinIrOpLayer::IsTensorFmtQuantized(v2);
  return v4 | 0x100u;
}

void std::__function::__func<ZinIrOpt::ReplaceSqrtEWDiv(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::ReplaceSqrtEWDiv(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::ReplaceSqrtEWDiv(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::ReplaceSqrtEWDiv(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C002B48;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinIrOpt::ReplaceSqrtEWDiv(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::ReplaceSqrtEWDiv(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C002B48;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinIrOpt::ReplaceSqrtEWDiv(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::ReplaceSqrtEWDiv(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t ***a2, ZinIrOpLayer **a3)
{
  ZinIrOpt::SqrtDiv::MatchAndReplace(*(ZinIrOpt::SqrtDiv **)(a1 + 8), *a2, *a3);
  return 0;
}

uint64_t std::__function::__func<ZinIrOpt::ReplaceSqrtEWDiv(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::ReplaceSqrtEWDiv(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::ReplaceSqrtEWDiv(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::ReplaceSqrtEWDiv(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

void ZinIrOpt::SqrtDiv::MatchAndReplace(ZinIrOpt::SqrtDiv *this, uint64_t **a2, ZinIrOpLayer *a3)
{
  size_t v6;
  void **v7;
  char *v8;
  __n128 v9;
  void *__p[2];
  char v11;
  _QWORD v12[3];
  char v13;

  if (*((char *)a3 + 47) >= 0)
    v6 = *((unsigned __int8 *)a3 + 47);
  else
    v6 = *((_QWORD *)a3 + 4);
  v7 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v6 + 8);
  if (v11 < 0)
    v7 = (void **)__p[0];
  if (v6)
  {
    if (*((char *)a3 + 47) >= 0)
      v8 = (char *)a3 + 24;
    else
      v8 = (char *)*((_QWORD *)a3 + 3);
    memmove(v7, v8, v6);
  }
  strcpy((char *)v7 + v6, "_pattern");
  v9 = ZinObjectNameFactory::ZinObjectNameFactory(v12, __p);
  if (v11 < 0)
    operator delete(__p[0]);
  if (*(_QWORD *)this
    && ((*(uint64_t (**)(_QWORD, uint64_t **, ZinIrOpLayer *, __n128))(**(_QWORD **)this + 8))(*(_QWORD *)this, a2, a3, v9) & 1) != 0)
  {
    ZinIrOpt::SqrtDiv::Replace(this, a2, a3, (ZinObjectNameFactory *)v12);
  }
  v12[0] = off_24C01FBB0;
  if (v13 < 0)
    operator delete((void *)v12[1]);
}

void sub_206DF047C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinIrOpt::SqrtDiv::Replace(ZinIrOpt::SqrtDiv *this, uint64_t **a2, ZinIrOpLayer *a3, ZinObjectNameFactory *a4)
{
  uint64_t v8;
  ZinIrOpLayer *SingleMatch;
  uint64_t v10;
  ZinIrOpLayer *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  int v15;
  uint64_t Activation;
  _QWORD *v17;
  ZinIrOpLayer *v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  ZinIrOpLayer *ElementWiseLayer;
  char v31;
  char v32;
  void *v33;
  void *v34;
  _OWORD *v35;
  _OWORD v36[2];
  uint64_t v37;
  void *__p[2];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _OWORD v45[6];
  _OWORD v46[2];
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "sqrt");
  SingleMatch = (ZinIrOpLayer *)ZinPattern::GetSingleMatch(v8, (unsigned __int8 *)__p);
  if (SBYTE7(v39) < 0)
    operator delete(__p[0]);
  v10 = *(_QWORD *)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "div");
  v11 = (ZinIrOpLayer *)ZinPattern::GetSingleMatch(v10, (unsigned __int8 *)__p);
  if (SBYTE7(v39) < 0)
    operator delete(__p[0]);
  v12 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)SingleMatch + 32))(SingleMatch, 0, 0);
  v13 = *((_QWORD *)a3 + 2);
  v14 = *(_OWORD *)(v12 + 64);
  v36[0] = *(_OWORD *)(v12 + 48);
  v36[1] = v14;
  v37 = *(_QWORD *)(v12 + 80);
  v15 = *(_DWORD *)(v12 + 88);
  ZinIrActivationParams::ZinIrActivationParams((uint64_t)__p, 16);
  Activation = ZinBuilder::CreateActivation(v13, (uint64_t)a4, (uint64_t)v36, v15, (uint64_t)__p);
  v17 = (_QWORD *)*((_QWORD *)v11 + 11);
  if (*((_QWORD *)v11 + 12) - (_QWORD)v17 != 16)
    ZinAssertImpl("Division layer is expected to have two inputs.");
  v18 = (ZinIrOpLayer *)Activation;
  v19 = *((_QWORD *)a3 + 2);
  (*(void (**)(void **__return_ptr, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*v17 + 80))(__p, *v17, 0, 0);
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(*((_QWORD *)v11 + 11) + 8) + 80))((_QWORD *)v45 + 1);
  v20 = operator new(0xF0uLL);
  v33 = v20;
  v35 = v20 + 15;
  v21 = v46[0];
  v20[12] = v45[5];
  v20[13] = v21;
  *(_OWORD *)((char *)v20 + 220) = *(_OWORD *)((char *)v46 + 12);
  v22 = v45[2];
  v20[8] = v45[1];
  v20[9] = v22;
  v23 = v45[4];
  v20[10] = v45[3];
  v20[11] = v23;
  v24 = v43;
  v20[4] = v42;
  v20[5] = v24;
  v25 = v45[0];
  v20[6] = v44;
  v20[7] = v25;
  v26 = v39;
  *v20 = *(_OWORD *)__p;
  v20[1] = v26;
  v27 = v41;
  v20[2] = v40;
  v20[3] = v27;
  v34 = v20 + 15;
  v28 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v11 + 32))(v11, 0, 0);
  v29 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v11 + 32))(v11, 0, 0);
  ElementWiseLayer = (ZinIrOpLayer *)ZinBuilder::CreateElementWiseLayer(v19, (uint64_t)a4, 2, (uint64_t)&v33, (__int128 *)(v28 + 48), *(_DWORD *)(v29 + 88));
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  __p[0] = &unk_24C02BB18;
  __p[1] = 0;
  v39 = 0uLL;
  v31 = ZinIrOpLayerGraph::ReplaceNode(a2, SingleMatch, v18, (const Layer2TDMapper::SourceLayer *)__p);
  __p[0] = &unk_24C02BB18;
  if (__p[1])
  {
    *(void **)&v39 = __p[1];
    operator delete(__p[1]);
  }
  __p[0] = &unk_24C02BB18;
  __p[1] = 0;
  v39 = 0uLL;
  v32 = v31 & ZinIrOpLayerGraph::ReplaceNode(a2, v11, ElementWiseLayer, (const Layer2TDMapper::SourceLayer *)__p);
  __p[0] = &unk_24C02BB18;
  if (__p[1])
  {
    *(void **)&v39 = __p[1];
    operator delete(__p[1]);
  }
  if ((v32 & 1) == 0)
    ZinAssertImpl("Could not replace Sqrt->Div to Rsqrt->Mult");
}

void sub_206DF07C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrOpt::ReplaceSqrtEWDiv(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

__CFDictionary *ZinCreateResizeAsUnit(const ZinIrResizeAsUnitInfo *a1)
{
  __CFDictionary *Unit;
  __CFDictionary *Mutable;
  __CFArray *TextureUnitSamplingInfo;
  __CFArray *TextureUnitSamplingGridInfo;

  Unit = ZinCreateUnit(a1);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  TextureUnitSamplingInfo = ZinCreateTextureUnitSamplingInfo(a1);
  CFDictionaryAddValue(Mutable, CFSTR("SamplingMethodInfo"), TextureUnitSamplingInfo);
  CFRelease(TextureUnitSamplingInfo);
  TextureUnitSamplingGridInfo = ZinCreateTextureUnitSamplingGridInfo((uint64_t)a1 + 160);
  CFDictionaryAddValue(Mutable, CFSTR("SamplingGridInfo"), TextureUnitSamplingGridInfo);
  CFRelease(TextureUnitSamplingGridInfo);
  CFDictionaryAddValue(Unit, CFSTR("Params"), Mutable);
  CFRelease(Mutable);
  return Unit;
}

BOOL ZinCompressedFootprintInfo::IsFootprintWorsened(ZinCompressedFootprintInfo *this)
{
  return *((_QWORD *)this + 1) < *(_QWORD *)this;
}

int64x2_t ZinCompressedFootprintInfo::Add(int64x2_t *this, int64x2_t *a2)
{
  int64x2_t result;

  result = vaddq_s64(*this, *a2);
  *this = result;
  return result;
}

_QWORD *ZinCompressedFootprintInfo::Add(_QWORD *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = this[1] + a3;
  *this += a2;
  this[1] = v3;
  return this;
}

uint64_t ZinCompressedFootprintInfo::GetOverallReduction(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *a1;
  v2 = a1[1];
  if (*a1 == v2)
    return 0;
  v3 = 0;
  v4 = 0;
  do
  {
    v5 = *v1;
    v6 = v1[1];
    v1 += 2;
    v3 += v5;
    v4 += v6;
  }
  while (v1 != v2);
  return v4 - v3;
}

BOOL ZinCompressedFootprintInfo::GetFootprintImprovedFor(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *a1;
  v2 = a1[1];
  if (*a1 == v2)
    return 0;
  v3 = 0;
  v4 = 0;
  do
  {
    v5 = *v1;
    v6 = v1[1];
    v1 += 2;
    v3 += v5;
    v4 += v6;
  }
  while (v1 != v2);
  return v4 > v3;
}

uint64_t ZinNEPatterns::Conv::ToActivation(ZinNEPatterns::Conv *this, ZinElementWiseLayer *a2)
{
  std::string *v3;
  __int128 v4;
  std::string *v5;
  __int128 v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  _QWORD *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  std::string v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  std::string v49;
  __int128 v50;
  std::string::size_type v51;
  __int128 v52;
  std::string::size_type v53;
  __int128 v54;
  int64_t v55;
  _QWORD v56[3];
  char v57;

  ZinObjectNameFactory::ZinObjectNameFactory(v56, (char *)this + 24);
  std::string::basic_string[abi:ne180100]<0>(&v49, "ew_abs2act");
  v3 = std::string::append(&v49, "_xfm", 4uLL);
  v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v55 = v3->__r_.__value_.__r.__words[2];
  v54 = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  ZinObjectNameFactory::CreateName((uint64_t)v56, 1u, &v45);
  v5 = std::string::append(&v45, "_", 1uLL);
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (v55 >= 0)
    v7 = (const std::string::value_type *)&v54;
  else
    v7 = (const std::string::value_type *)v54;
  if (v55 >= 0)
    v8 = HIBYTE(v55);
  else
    v8 = *((_QWORD *)&v54 + 1);
  v9 = std::string::append(&v49, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v53 = v9->__r_.__value_.__r.__words[2];
  v52 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  ZinObjectNameFactory::CreateName((uint64_t)v56, 0, &v45);
  v11 = std::string::append(&v45, "_", 1uLL);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (v55 >= 0)
    v13 = (const std::string::value_type *)&v54;
  else
    v13 = (const std::string::value_type *)v54;
  if (v55 >= 0)
    v14 = HIBYTE(v55);
  else
    v14 = *((_QWORD *)&v54 + 1);
  v15 = std::string::append(&v49, v13, v14);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v51 = v15->__r_.__value_.__r.__words[2];
  v50 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  ZinIrActivationParams::ZinIrActivationParams((uint64_t)&v49, 31);
  v17 = operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(v17, 4);
  v48 = v17;
  ZinMirActivationV7::GetAbsCustomLut((uint64_t)&v45);
  v18 = ZinIrActivationParams::SetCustomLutParams((uint64_t)&v49, (uint64_t)&v45);
  v19 = *((_QWORD *)this + 2);
  v20 = *(_DWORD *)((*(uint64_t (**)(ZinNEPatterns::Conv *, _QWORD, _QWORD, __n128))(*(_QWORD *)this + 32))(this, 0, 0, v18)+ 88);
  v21 = (*(uint64_t (**)(ZinNEPatterns::Conv *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
  v41 = 0;
  v42 = 0;
  v40 = 0;
  LODWORD(v45.__r_.__value_.__l.__data_) = 0;
  v46 = 0;
  *(_OWORD *)&v45.__r_.__value_.__r.__words[1] = 0uLL;
  v47 = 0;
  ZinIrTensor::CreateTensor(v19, v20, (__int128 *)(v21 + 48), &v50, &v42, &v40, (unsigned int *)&v45, &v43);
  v22 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v42;
  v42 = 0;
  if (v25)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v42, v25);
  v26 = operator new();
  v27 = v26;
  v38 = v43;
  v39 = v44;
  if (v44)
  {
    v28 = (unint64_t *)&v44->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  ZinActivationLayer::ZinActivationLayer(v26, &v48, &v38, &v52, &v49);
  v30 = v39;
  if (v39)
  {
    v31 = (unint64_t *)&v39->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = v44;
  if (v44)
  {
    v34 = (unint64_t *)&v44->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v48;
  v48 = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  if (SHIBYTE(v51) < 0)
    operator delete((void *)v50);
  if (SHIBYTE(v53) < 0)
    operator delete((void *)v52);
  if (SHIBYTE(v55) < 0)
    operator delete((void *)v54);
  v56[0] = off_24C01FBB0;
  if (v57 < 0)
    operator delete((void *)v56[1]);
  return v27;
}

void sub_206DF0DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;

  v39 = v37;
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  MEMORY[0x20BD002F8](v39, 0x10B3C407E37BC9ELL);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  v41 = a31;
  a31 = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  if (*(char *)(v38 - 137) < 0)
    operator delete(*(void **)(v38 - 160));
  if (*(char *)(v38 - 105) < 0)
    operator delete(*(void **)(v38 - 128));
  if (*(char *)(v38 - 73) < 0)
    operator delete(*(void **)(v38 - 96));
  *(_QWORD *)(v38 - 72) = off_24C01FBB0;
  if (*(char *)(v38 - 41) < 0)
    operator delete(*(void **)(v38 - 64));
  _Unwind_Resume(a1);
}

void ZinNEPatterns::FuseQuant(ZinIrOpLayer **a1, ZinBondedInfo *a2, int a3, ZinObjectNameFactory *a4, void **a5, uint64_t *a6)
{
  uint64_t v11;
  _QWORD *SingleMatch;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t *AneIndex;
  ZinActivationLayer *v17;
  BOOL IsFusable;
  uint64_t Activation;
  char v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  _OWORD v40[2];
  uint64_t v41;
  void *__p[2];
  char v43;
  int v44;
  void *v45[2];
  char v46;
  void *v47[2];
  char v48;

  v11 = ZinPatternUtils::ConvertQuantToGOC(*a1, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "main");
  SingleMatch = (_QWORD *)ZinPattern::GetSingleMatch((uint64_t)a2, (unsigned __int8 *)__p);
  std::string::basic_string[abi:ne180100]<0>(v47, "texture");
  v13 = ZinPattern::GetSingleMatch((uint64_t)a2, (unsigned __int8 *)v47);
  std::string::basic_string[abi:ne180100]<0>(v45, "prescale");
  v14 = ZinPattern::GetSingleMatch((uint64_t)a2, (unsigned __int8 *)v45);
  v15 = *(_DWORD *)(ZinIrOpLayer::GetInputTensor(*a1, 0) + 88);
  AneIndex = (uint64_t *)ZinBondedInfo::GetAneIndex(a2);
  IsFusable = ZinNEAtoms::GOCAtom::IsFusable(v11, SingleMatch, v13, v14, v15, a3, *AneIndex);
  if (v46 < 0)
    operator delete(v45[0]);
  if (v48 < 0)
    operator delete(v47[0]);
  if (v43 < 0)
    operator delete(__p[0]);
  Activation = *a6;
  if (*a6)
    v20 = 1;
  else
    v20 = IsFusable;
  if ((v20 & 1) == 0)
  {
    v21 = ZinIrActivationParams::ZinIrActivationParams((uint64_t)__p, 8);
    v44 = 1065353216;
    v22 = *((_QWORD *)*a1 + 2);
    v23 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD, double))(*(_QWORD *)*a1 + 32))(*a1, 0, 0, v21);
    v24 = *(_OWORD *)(v23 + 64);
    v40[0] = *(_OWORD *)(v23 + 48);
    v40[1] = v24;
    v41 = *(_QWORD *)(v23 + 80);
    v25 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, 0, 0);
    Activation = ZinBuilder::CreateActivation(v22, (uint64_t)a4, (uint64_t)v40, *(_DWORD *)(v25 + 88), (uint64_t)__p);
    *a6 = Activation;
  }
  if (Activation && *(_DWORD *)(Activation + 192) != 1)
  {
    ZinPatternUtils::FuseQuantScaleIntoActivationPostScale(a1, (ZinQuantLayer **)Activation, v17);
    ZinQuantLayer::RemoveScale(*a1, a4);
  }
  else
  {
    v26 = (unint64_t)a5[2];
    v27 = (uint64_t *)a5[1];
    if ((unint64_t)v27 >= v26)
    {
      v29 = ((char *)v27 - (_BYTE *)*a5) >> 3;
      if ((unint64_t)(v29 + 1) >> 61)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v30 = v26 - (_QWORD)*a5;
      v31 = v30 >> 2;
      if (v30 >> 2 <= (unint64_t)(v29 + 1))
        v31 = v29 + 1;
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
        v32 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v32 = v31;
      if (v32)
        v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a5 + 2), v32);
      else
        v33 = 0;
      v34 = (uint64_t *)&v33[8 * v29];
      v35 = &v33[8 * v32];
      *v34 = v11;
      v28 = v34 + 1;
      v37 = (char *)*a5;
      v36 = (char *)a5[1];
      if (v36 != *a5)
      {
        do
        {
          v38 = *((_QWORD *)v36 - 1);
          v36 -= 8;
          *--v34 = v38;
        }
        while (v36 != v37);
        v36 = (char *)*a5;
      }
      *a5 = v34;
      a5[1] = v28;
      a5[2] = v35;
      if (v36)
        operator delete(v36);
    }
    else
    {
      *v27 = v11;
      v28 = v27 + 1;
    }
    a5[1] = v28;
    *a1 = 0;
  }
}

void sub_206DF11D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (*(char *)(v22 - 89) < 0)
    operator delete(*(void **)(v22 - 112));
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *ZinNEPatterns::UConv::UConv(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  std::string *v15;
  std::string::__raw *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v22[2];
  char v23;
  int v24;
  void *v25[2];
  char v26;
  void *v27[2];
  char v28;
  __int128 *v29;
  __int128 *v30;
  __int128 *v31;
  __int128 **v32;
  char v33;
  _BYTE v34[24];
  _BYTE *v35;
  std::string __p;
  _QWORD v37[3];
  _QWORD *v38;
  std::string v39;
  _QWORD v40[3];
  _QWORD *v41;
  std::string v42;
  _QWORD v43[3];
  _QWORD *v44;
  std::string v45[2];
  std::string v46[2];
  _QWORD *v47;
  uint64_t v48;
  std::string v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  std::string v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  _QWORD v57[2];

  v57[1] = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v27, "main");
  ZinNEAtoms::ConvAtom::ConvAtom(&v42, v27, a3);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(v45, v42.__r_.__value_.__l.__data_, v42.__r_.__value_.__l.__size_);
  else
    v45[0] = v42;
  v6 = v43;
  v7 = (uint64_t)v44;
  if (!v44)
    goto LABEL_7;
  if (v44 != v43)
  {
    v7 = (*(uint64_t (**)(void))(*v44 + 16))();
LABEL_7:
    v47 = (_QWORD *)v7;
    goto LABEL_9;
  }
  v47 = (_QWORD *)v46;
  (*(void (**)(_QWORD *))(v43[0] + 24))(v43);
LABEL_9:
  LODWORD(v39.__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v48, (int *)&v39, 1);
  std::string::basic_string[abi:ne180100]<0>(v25, "goc");
  ZinNEAtoms::ConvGOCAtom::ConvGOCAtom(&v39, v25, a3);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v49, v39.__r_.__value_.__l.__data_, v39.__r_.__value_.__l.__size_);
  else
    v49 = v39;
  v8 = v40;
  v9 = (uint64_t)v41;
  if (!v41)
    goto LABEL_15;
  if (v41 != v40)
  {
    v9 = (*(uint64_t (**)(void))(*v41 + 16))();
LABEL_15:
    v51 = (uint64_t *)v9;
    goto LABEL_17;
  }
  v51 = &v50;
  (*(void (**)(_QWORD *))(v40[0] + 24))(v40);
LABEL_17:
  v24 = 2;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v52, &v24, 1);
  std::string::basic_string[abi:ne180100]<0>(v22, "activation");
  ZinNEAtoms::ActivationAtom::ActivationAtom(&__p, v22, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v53, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v53 = __p;
  v10 = v37;
  v11 = (uint64_t)v38;
  if (!v38)
    goto LABEL_23;
  if (v38 != v37)
  {
    v11 = (*(uint64_t (**)(void))(*v38 + 16))();
LABEL_23:
    v55 = (uint64_t *)v11;
    goto LABEL_25;
  }
  v55 = &v54;
  (*(void (**)(_QWORD *))(v37[0] + 24))(v37);
LABEL_25:
  LODWORD(v32) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v56, (int *)&v32, 1);
  v30 = 0;
  v31 = 0;
  v29 = 0;
  v32 = &v29;
  v33 = 0;
  v29 = (__int128 *)operator new(0x120uLL);
  v30 = v29;
  v31 = v29 + 18;
  v30 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItem const>,ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*>((uint64_t)&v31, (uint64_t)v45, (uint64_t)v57, (uint64_t)v29);
  v35 = 0;
  ZinLinearPattern::ZinLinearPattern((uint64_t)a1, &v29, a2, 0, (uint64_t)v34, 0);
  v12 = v35;
  if (v35 == v34)
  {
    v13 = 4;
    v12 = v34;
    goto LABEL_29;
  }
  if (v35)
  {
    v13 = 5;
LABEL_29:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  v32 = &v29;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  v14 = 36;
  do
  {
    v15 = &v45[v14 / 3];
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v42.__r_.__value_.__r.__words[v14 + 2]);
    v16 = (std::string::__raw *)v42.__r_.__value_.__r.__words[v14 + 1];
    if (&v40[v14 + 2] == (_QWORD *)v16)
    {
      v16 = (std::string::__raw *)&v15[-3];
      v17 = 4;
    }
    else
    {
      if (!v16)
        goto LABEL_36;
      v17 = 5;
    }
    (*(void (**)(void))(v16->__words[0] + 8 * v17))();
LABEL_36:
    if (SHIBYTE(v40[v14 + 1]) < 0)
      operator delete(v15[-4].__r_.__value_.__l.__data_);
    v14 -= 12;
  }
  while (v14 * 8);
  if (v38 == v37)
  {
    v18 = 4;
LABEL_43:
    (*(void (**)(_QWORD *))(*v10 + 8 * v18))(v10);
  }
  else if (v38)
  {
    v18 = 5;
    v10 = v38;
    goto LABEL_43;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v23 < 0)
    operator delete(v22[0]);
  if (v41 == v40)
  {
    v19 = 4;
LABEL_52:
    (*(void (**)(_QWORD *))(*v8 + 8 * v19))(v8);
  }
  else if (v41)
  {
    v19 = 5;
    v8 = v41;
    goto LABEL_52;
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (v26 < 0)
    operator delete(v25[0]);
  if (v44 == v43)
  {
    v20 = 4;
LABEL_61:
    (*(void (**)(_QWORD *))(*v6 + 8 * v20))(v6);
  }
  else if (v44)
  {
    v20 = 5;
    v6 = v44;
    goto LABEL_61;
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (v28 < 0)
    operator delete(v27[0]);
  *a1 = &off_24C02B5F0;
  return a1;
}

