void sub_22DB66224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;

  if (a17 == v17)
  {
    (*(void (**)(void))(a14 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a17)
  {
    (*(void (**)(void))(*(_QWORD *)a17 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>>::resize(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = (v4 - *(_QWORD *)a1) >> 5;
  v6 = a2 >= v5;
  v7 = a2 - v5;
  if (v7 != 0 && v6)
  {
    std::vector<std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>>::__append((void **)a1, v7, a3);
    return;
  }
  if (!v6)
  {
    v8 = *(_QWORD *)a1 + 32 * a2;
    if (v4 == v8)
    {
LABEL_6:
      *(_QWORD *)(a1 + 8) = v8;
      return;
    }
    while (1)
    {
      v11 = v4 - 32;
      v9 = *(_QWORD **)(v4 - 8);
      if ((_QWORD *)(v4 - 32) == v9)
      {
        v9 = (_QWORD *)(v4 - 32);
        v10 = 4;
      }
      else
      {
        if (!v9)
          goto LABEL_10;
        v10 = 5;
      }
      (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_10:
      v4 = v11;
      if (v11 == v8)
        goto LABEL_6;
    }
  }
}

uint64_t operations_research::sat::Trail::Enqueue(uint64_t result, int a2, int a3)
{
  *(_DWORD *)(*(_QWORD *)(result + 72) + 4 * *(int *)(result + 12)) = a2;
  *(_DWORD *)(result + 8) = (*(_DWORD *)(result + 8) & 0xFFFFFFE | a2 & 1 | (a3 << 28)) ^ 1;
  *(_QWORD *)(*(_QWORD *)(result + 120) + 8 * (a2 >> 1)) = *(_QWORD *)(result + 8);
  *(_QWORD *)(*(_QWORD *)(result + 24) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  ++*(_DWORD *)(result + 12);
  return result;
}

void operations_research::sat::IntegerTrail::MergeReasonIntoInternal(uint64_t a1, void **a2)
{
  _QWORD *v4;
  int *v5;
  int *v6;
  int v7;
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  int *v24;
  int v25;
  int v26;
  int *v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  unint64_t v31;
  int *v32;
  int v33;
  int v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  std::vector<int>::pointer v41;
  uint64_t v42;
  std::vector<int>::pointer v43;
  int *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _BYTE *v60;
  int *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  _OWORD *v66;
  char *v67;
  uint64_t v68;
  __int128 v69;
  int v70;
  unint64_t v71;
  _DWORD *v72;
  int v73;
  _DWORD *v74;
  int v75;
  int v76;
  char *v77;
  unint64_t v78;
  _DWORD *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _BYTE *v86;
  int *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  _OWORD *v93;
  char *v94;
  uint64_t v95;
  __int128 v96;
  int v97;
  int *v98;
  int *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int64_t v103;
  int64_t v104;
  uint64_t v105;
  int *v106;
  int v107;
  BOOL v108;
  int *v109;
  int v110;
  int v111;
  uint64_t v112;
  void **v113;
  void **v114;
  int *v115;
  void **v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  int v122;

  v4 = (_QWORD *)(a1 + 616);
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize(a1 + 616, (*(_QWORD *)(*(_QWORD *)(a1 + 936) + 80) - *(_QWORD *)(*(_QWORD *)(a1 + 936) + 72)) >> 2);
  v114 = a2;
  v5 = (int *)*a2;
  v6 = (int *)a2[1];
  while (v5 != v6)
  {
    v7 = *v5++;
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(v4, v7 >> 1);
  }
  v8 = *(int **)(a1 + 544);
  v9 = *(int **)(a1 + 552);
  if (v8 != v9)
  {
    v10 = *(_QWORD *)(a1 + 144);
    v11 = *(_QWORD *)(a1 + 592);
    v12 = *(int **)(a1 + 544);
    do
    {
      v14 = *v12++;
      v13 = v14;
      v15 = 4 * *(int *)(v10 + 20 * v14 + 8);
      if (*(_DWORD *)(v11 + v15) > v14)
        v13 = *(_DWORD *)(v11 + v15);
      *(_DWORD *)(v11 + v15) = v13;
    }
    while (v12 != v9);
  }
  v16 = (char *)v9 - (char *)v8;
  if ((char *)v9 - (char *)v8 >= 5 && (unint64_t)v16 >= 8)
  {
    v102 = v16 >> 2;
    v103 = (unint64_t)(v102 - 2) >> 1;
    v104 = v103;
    do
    {
      if (v103 >= v104)
      {
        v105 = (2 * v104) | 1;
        v106 = &v8[v105];
        if (2 * v104 + 2 >= v102)
        {
          v107 = *v106;
          v109 = &v8[v104];
          v110 = *v109;
          if (*v106 >= *v109)
            goto LABEL_118;
        }
        else
        {
          v107 = v106[1];
          v108 = *v106 < v107;
          if (*v106 > v107)
            v107 = *v106;
          if (v108)
          {
            ++v106;
            v105 = 2 * v104 + 2;
          }
          v109 = &v8[v104];
          v110 = *v109;
          if (v107 >= *v109)
          {
LABEL_118:
            while (1)
            {
              *v109 = v107;
              v109 = v106;
              if (v103 < v105)
                break;
              v112 = (2 * v105) | 1;
              v106 = &v8[v112];
              v105 = 2 * v105 + 2;
              if (v105 < v102)
              {
                v107 = *v106;
                v111 = v106[1];
                if (*v106 <= v111)
                  v107 = v106[1];
                if (*v106 >= v111)
                  v105 = v112;
                else
                  ++v106;
                if (v107 < v110)
                  break;
              }
              else
              {
                v107 = *v106;
                v105 = v112;
                if (*v106 < v110)
                  break;
              }
            }
            *v109 = v110;
          }
        }
      }
      v108 = v104-- <= 0;
    }
    while (!v108);
  }
  *(_QWORD *)(a1 + 576) = *(_QWORD *)(a1 + 568);
  if (v8 != v9)
  {
    v116 = (void **)(a1 + 544);
    v113 = (void **)(a1 + 568);
    while (1)
    {
      v18 = *v8;
      v19 = *(_QWORD *)(a1 + 144);
      v20 = (char *)v9 - (char *)v8;
      if ((char *)v9 - (char *)v8 >= 5)
      {
        v21 = 0;
        v22 = v20 >> 2;
        v23 = (unint64_t)((v20 >> 2) - 2) >> 1;
        v24 = v8;
        do
        {
          while (1)
          {
            v27 = &v24[v21 + 1];
            v28 = (2 * v21) | 1;
            v21 = 2 * v21 + 2;
            if (v21 < v22)
              break;
            v21 = v28;
            *v24 = *v27;
            v24 = v27;
            if (v28 > v23)
              goto LABEL_24;
          }
          v25 = *v27;
          v26 = v27[1];
          if (*v27 <= v26)
            v25 = v27[1];
          if (*v27 >= v26)
            v21 = v28;
          else
            ++v27;
          *v24 = v25;
          v24 = v27;
        }
        while (v21 <= v23);
LABEL_24:
        v29 = v9 - 1;
        if (v27 == v9 - 1)
        {
          *v27 = v18;
        }
        else
        {
          *v27 = *v29;
          *v29 = v18;
          v30 = (char *)v27 - (char *)v8 + 4;
          if (v30 >= 5)
          {
            v31 = (((unint64_t)v30 >> 2) - 2) >> 1;
            v32 = &v8[v31];
            v33 = *v32;
            v34 = *v27;
            if (*v32 < *v27)
            {
              do
              {
                *v27 = v33;
                v27 = v32;
                if (!v31)
                  break;
                v31 = (v31 - 1) >> 1;
                v32 = &v8[v31];
                v33 = *v32;
              }
              while (*v32 < v34);
              *v27 = v34;
            }
          }
        }
      }
      *(_QWORD *)(a1 + 552) = v9 - 1;
      v35 = v19 + 20 * v18;
      v37 = *(int *)(v35 + 8);
      v36 = (int *)(v35 + 8);
      v38 = *(_QWORD *)(a1 + 592);
      if (*(_DWORD *)(v38 + 4 * v37) != v18)
        goto LABEL_13;
      *(_DWORD *)(a1 + 64) = v18;
      *(_DWORD *)(v38 + 4 * *v36) = 0;
      *(_BYTE *)(a1 + 536) = 0;
      if (*(_DWORD *)(v19 + 20 * v18 + 16) == -1)
      {
        LODWORD(v117) = *v36;
        *(_QWORD *)((char *)&v117 + 4) = *(_QWORD *)(v19 + 20 * v18);
        v39 = *(_QWORD *)(a1 + 168);
        v121 = v117;
        v122 = DWORD2(v117);
        v120 = v18;
        v118 = a1 + 384;
        v119 = a1 + 360;
        v40 = *(_QWORD *)(v39 + 32 * v18 + 24);
        if (!v40)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, uint64_t *, int *, uint64_t *, uint64_t *))(*(_QWORD *)v40 + 48))(v40, &v121, &v120, &v119, &v118);
      }
      v115 = v36;
      operations_research::sat::IntegerTrail::AppendLiteralsReason((_QWORD *)a1, v18, v114);
      v41 = operations_research::sat::IntegerTrail::Dependencies((std::vector<int> *)a1, v18);
      if (v42)
      {
        v43 = v41;
        v44 = &v41[v42];
        do
        {
          v45 = *v43;
          if (*v43 < 0)
            break;
          v46 = *(int *)(*(_QWORD *)(a1 + 144) + 20 * v45 + 8);
          v47 = *(_QWORD *)(a1 + 592);
          v48 = *(_DWORD *)(v47 + 4 * v46);
          if (v48 != 0x7FFFFFFF)
            *(_BYTE *)(a1 + 536) = 1;
          if (v45 > v48)
          {
            *(_DWORD *)(v47 + 4 * v46) = v45;
            v49 = *(char **)(a1 + 552);
            v50 = *(_QWORD *)(a1 + 560);
            if ((unint64_t)v49 >= v50)
            {
              v54 = (char *)*v116;
              v55 = v49 - (_BYTE *)*v116;
              v56 = v55 >> 2;
              v57 = (v55 >> 2) + 1;
              if (v57 >> 62)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v58 = v50 - (_QWORD)v54;
              if (v58 >> 1 > v57)
                v57 = v58 >> 1;
              if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
                v59 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v59 = v57;
              if (v59)
              {
                if (v59 >> 62)
                  goto LABEL_123;
                v60 = operator new(4 * v59);
                v61 = (int *)&v60[4 * v56];
                *v61 = v45;
                v51 = (uint64_t)(v61 + 1);
                if (v49 != v54)
                {
LABEL_55:
                  v62 = v49 - 4 - v54;
                  if (v62 < 0x2C)
                    goto LABEL_128;
                  if ((unint64_t)(v49 - &v60[v55]) < 0x20)
                    goto LABEL_128;
                  v63 = (v62 >> 2) + 1;
                  v64 = 4 * (v63 & 0x7FFFFFFFFFFFFFF8);
                  v65 = &v49[-v64];
                  v61 = (int *)((char *)v61 - v64);
                  v66 = &v60[4 * v56 - 16];
                  v67 = v49 - 16;
                  v68 = v63 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v69 = *(_OWORD *)v67;
                    *(v66 - 1) = *((_OWORD *)v67 - 1);
                    *v66 = v69;
                    v66 -= 2;
                    v67 -= 32;
                    v68 -= 8;
                  }
                  while (v68);
                  v49 = v65;
                  if (v63 != (v63 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_128:
                    do
                    {
                      v70 = *((_DWORD *)v49 - 1);
                      v49 -= 4;
                      *--v61 = v70;
                    }
                    while (v49 != v54);
                  }
                }
              }
              else
              {
                v60 = 0;
                v61 = (int *)(4 * v56);
                *(_DWORD *)(4 * v56) = v45;
                v51 = 4 * v56 + 4;
                if (v49 != v54)
                  goto LABEL_55;
              }
              *(_QWORD *)(a1 + 544) = v61;
              *(_QWORD *)(a1 + 552) = v51;
              *(_QWORD *)(a1 + 560) = &v60[4 * v59];
              if (v54)
                operator delete(v54);
              *(_QWORD *)(a1 + 552) = v51;
              v52 = *(_QWORD *)(a1 + 544);
              v53 = v51 - v52;
              if (v51 - v52 < 5)
                goto LABEL_38;
LABEL_67:
              v71 = (((unint64_t)v53 >> 2) - 2) >> 1;
              v72 = (_DWORD *)(v52 + 4 * v71);
              v75 = *(_DWORD *)(v51 - 4);
              v74 = (_DWORD *)(v51 - 4);
              v73 = v75;
              v76 = *v72;
              if (*v72 < v75)
              {
                do
                {
                  *v74 = v76;
                  v74 = v72;
                  if (!v71)
                    break;
                  v71 = (v71 - 1) >> 1;
                  v72 = (_DWORD *)(v52 + 4 * v71);
                  v76 = *v72;
                }
                while (*v72 < v73);
                *v74 = v73;
              }
              goto LABEL_38;
            }
            *(_DWORD *)v49 = v45;
            v51 = (uint64_t)(v49 + 4);
            *(_QWORD *)(a1 + 552) = v49 + 4;
            v52 = *(_QWORD *)(a1 + 544);
            v53 = (uint64_t)&v49[-v52 + 4];
            if (v53 >= 5)
              goto LABEL_67;
          }
LABEL_38:
          ++v43;
        }
        while (v43 != v44);
      }
      v17 = v115;
      if (*(_BYTE *)(a1 + 536))
        goto LABEL_13;
      v77 = *(char **)(a1 + 576);
      v78 = *(_QWORD *)(a1 + 584);
      if ((unint64_t)v77 >= v78)
        break;
      *(_DWORD *)v77 = *v115;
      v79 = v77 + 4;
LABEL_94:
      *(_QWORD *)(a1 + 576) = v79;
      *(_DWORD *)(*(_QWORD *)(a1 + 592) + 4 * *v17) = 0x7FFFFFFF;
LABEL_13:
      v8 = *(int **)(a1 + 544);
      v9 = *(int **)(a1 + 552);
      if (v8 == v9)
      {
        v98 = *(int **)(a1 + 568);
        v99 = *(int **)(a1 + 576);
        if (v98 != v99)
        {
          v100 = *(_QWORD *)(a1 + 592);
          do
          {
            v101 = *v98++;
            *(_DWORD *)(v100 + 4 * v101) = 0;
          }
          while (v98 != v99);
        }
        return;
      }
    }
    v80 = (char *)*v113;
    v81 = v77 - (_BYTE *)*v113;
    v82 = v81 >> 2;
    v83 = (v81 >> 2) + 1;
    if (v83 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v84 = v78 - (_QWORD)v80;
    if (v84 >> 1 > v83)
      v83 = v84 >> 1;
    if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL)
      v85 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v85 = v83;
    if (v85)
    {
      if (v85 >> 62)
LABEL_123:
        std::__throw_bad_array_new_length[abi:ne180100]();
      v86 = operator new(4 * v85);
    }
    else
    {
      v86 = 0;
    }
    v87 = (int *)&v86[4 * v82];
    *v87 = *v115;
    v79 = v87 + 1;
    if (v77 == v80)
    {
      v17 = v115;
      goto LABEL_92;
    }
    v88 = v77 - 4 - v80;
    if (v88 >= 0x2C)
    {
      v89 = v77 - &v86[v81];
      v17 = v115;
      if (v89 >= 0x20)
      {
        v90 = (v88 >> 2) + 1;
        v91 = 4 * (v90 & 0x7FFFFFFFFFFFFFF8);
        v92 = &v77[-v91];
        v87 = (int *)((char *)v87 - v91);
        v93 = &v86[4 * v82 - 16];
        v94 = v77 - 16;
        v95 = v90 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v96 = *(_OWORD *)v94;
          *(v93 - 1) = *((_OWORD *)v94 - 1);
          *v93 = v96;
          v93 -= 2;
          v94 -= 32;
          v95 -= 8;
        }
        while (v95);
        v77 = v92;
        if (v90 == (v90 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_92:
          *(_QWORD *)(a1 + 568) = v87;
          *(_QWORD *)(a1 + 576) = v79;
          *(_QWORD *)(a1 + 584) = &v86[4 * v85];
          if (v80)
            operator delete(v80);
          goto LABEL_94;
        }
      }
    }
    else
    {
      v17 = v115;
    }
    do
    {
      v97 = *((_DWORD *)v77 - 1);
      v77 -= 4;
      *--v87 = v97;
    }
    while (v77 != v80);
    goto LABEL_92;
  }
}

std::vector<int>::pointer operations_research::sat::IntegerTrail::Dependencies(std::vector<int> *this, int a2)
{
  uint64_t v3;
  std::vector<int>::pointer begin;
  int v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  std::vector<int>::pointer v9;
  unint64_t v10;
  std::vector<int>::pointer result;
  int *value;
  int v13;
  std::vector<int>::pointer v14;
  std::vector<int>::pointer v15;
  int v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  std::vector<int>::pointer v22;
  int v23;
  int v24;
  uint64_t v25;
  _BYTE v26[12];

  v3 = this[6].__begin_[5 * a2 + 4];
  if ((_DWORD)v3 == -1)
    return this[16].__begin_;
  begin = this[11].__begin_;
  v5 = begin[v3];
  v6 = (int)v3 + 1;
  if (v6 < this[11].__end_ - begin)
  {
    v7 = begin[v6];
    if (v7 != v5)
      goto LABEL_4;
    return 0;
  }
  v7 = -1431655765 * ((unint64_t)((char *)this[13].__end_ - (char *)this[13].__begin_) >> 2);
  if (v7 == v5)
    return 0;
LABEL_4:
  v8 = v5;
  v9 = this[14].__begin_;
  v10 = this[14].__end_ - v9;
  if (v7 > v10)
  {
    *(_DWORD *)v26 = -1;
    std::vector<int>::__append(this + 14, v7 - v10, (std::vector<int>::const_reference)v26);
    v9 = this[14].__begin_;
  }
  result = &v9[v5];
  if (*result == -1 && v7 > v5)
  {
    value = this[1].__end_cap_.__value_;
    v13 = -1431655765 * ((unint64_t)((char *)this[2].__begin_ - (char *)value) >> 2);
    v14 = this[13].__begin_;
    v15 = this[6].__begin_;
    v16 = v5;
    do
    {
      v17 = &v14[3 * v8];
      v18 = *(_QWORD *)v17;
      LODWORD(v17) = v17[2];
      *(_QWORD *)v26 = v18;
      *(_DWORD *)&v26[8] = (_DWORD)v17;
      v19 = *(_QWORD *)&v26[4];
      if (*(uint64_t *)&v26[4] <= *(_QWORD *)&v15[5 * (int)v18])
      {
        v21 = -1;
LABEL_26:
        if (v21 < v13)
          goto LABEL_13;
      }
      else
      {
        v20 = (int)v18;
        v21 = value[3 * (int)v18 + 2];
        v22 = this[3].__begin_;
        v23 = v22[(int)v18];
        if (v23 < v21 && v15[5 * v23 + 2] == (_DWORD)v18 && *(_QWORD *)&v15[5 * v23] >= *(uint64_t *)&v26[4])
          v21 = v22[(int)v18];
        v24 = v21;
        if (v21 >= SLODWORD(this[2].__end_cap_.__value_))
LABEL_20:
          v22[v20] = v24;
        while (1)
        {
          v25 = *(_QWORD *)&v15[5 * v24];
          if (v25 == v19)
            break;
          if (v25 < v19)
            goto LABEL_26;
          v21 = v24;
          v24 = v15[5 * v24 + 3];
          if (v24 >= SLODWORD(this[2].__end_cap_.__value_))
            goto LABEL_20;
        }
        v21 = v24;
        if (v24 < v13)
          goto LABEL_13;
      }
      v9[v16++] = v21;
LABEL_13:
      ++v8;
    }
    while (v8 != v7);
  }
  return result;
}

void operations_research::sat::IntegerTrail::AppendLiteralsReason(_QWORD *a1, int a2, void **a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int *v11;
  int *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  int *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  int *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  _OWORD *v31;
  int *v32;
  uint64_t v33;
  __int128 v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  int *v40;
  void **v41;
  _QWORD *v42;
  uint64_t v43;
  void **v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  int *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  _OWORD *v57;
  int *v58;
  uint64_t v59;
  __int128 v60;
  int v61;
  _QWORD *v62;
  int *v63;
  unint64_t v64;
  unint64_t v65[2];
  int v66;
  uint64_t *v67;

  v4 = a1;
  v66 = a2;
  v65[0] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[6] - a1[5]) >> 2);
  if (v65[0] > a2)
  {
    v67 = (uint64_t *)google::MakeCheckOpString<int,unsigned long>((int)&v66, (int)v65, "trail_index >= vars_.size()");
    if (v67)
    {
      google::LogMessageFatal::LogMessageFatal(v65, (google::glog_internal_namespace_ *)"./ortools/sat/integer.cc", 1396, &v67);
      google::LogMessage::stream((google::LogMessage *)v65);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v65);
    }
  }
  v6 = *(int *)(v4[18] + 20 * a2 + 16);
  if ((_DWORD)v6 == -1)
  {
    v12 = (int *)v4[45];
    v11 = (int *)v4[46];
    if (v12 == v11)
      return;
    v13 = v4 + 77;
    v63 = (int *)v4[46];
    while (1)
    {
      v15 = *v12;
      v16 = *v12 >> 1;
      if (((*(_QWORD *)(v4[78] + (((unint64_t)((uint64_t)*v12 >> 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
        goto LABEL_10;
      operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(v13, v16);
      v18 = (int *)a3[1];
      v17 = (unint64_t)a3[2];
      if ((unint64_t)v18 >= v17)
        break;
      *v18 = v15;
      v14 = (uint64_t)(v18 + 1);
LABEL_9:
      a3[1] = (void *)v14;
LABEL_10:
      if (++v12 == v11)
        return;
    }
    v19 = (int *)*a3;
    v20 = (char *)v18 - (_BYTE *)*a3;
    v21 = v20 >> 2;
    v22 = (v20 >> 2) + 1;
    if (v22 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v23 = v17 - (_QWORD)v19;
    if (v23 >> 1 > v22)
      v22 = v23 >> 1;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
      v24 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
    {
      if (v24 >> 62)
LABEL_62:
        std::__throw_bad_array_new_length[abi:ne180100]();
      v25 = operator new(4 * v24);
      v26 = (int *)&v25[4 * v21];
      *v26 = v15;
      v14 = (uint64_t)(v26 + 1);
      if (v18 == v19)
        goto LABEL_30;
    }
    else
    {
      v25 = 0;
      v26 = (int *)(4 * v21);
      *(_DWORD *)(4 * v21) = v15;
      v14 = 4 * v21 + 4;
      if (v18 == v19)
      {
LABEL_30:
        *a3 = v26;
        a3[1] = (void *)v14;
        a3[2] = &v25[4 * v24];
        if (v19)
          operator delete(v19);
        v11 = v63;
        v13 = v4 + 77;
        goto LABEL_9;
      }
    }
    v27 = (char *)(v18 - 1) - (char *)v19;
    if (v27 < 0x2C)
      goto LABEL_67;
    if ((unint64_t)((char *)v18 - &v25[v20]) < 0x20)
      goto LABEL_67;
    v28 = (v27 >> 2) + 1;
    v29 = 4 * (v28 & 0x7FFFFFFFFFFFFFF8);
    v30 = &v18[v29 / 0xFFFFFFFFFFFFFFFCLL];
    v26 = (int *)((char *)v26 - v29);
    v31 = &v25[4 * v21 - 16];
    v32 = v18 - 4;
    v33 = v28 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v34 = *(_OWORD *)v32;
      *(v31 - 1) = *((_OWORD *)v32 - 1);
      *v31 = v34;
      v31 -= 2;
      v32 -= 8;
      v33 -= 8;
    }
    while (v33);
    v18 = v30;
    if (v28 != (v28 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_67:
      do
      {
        v35 = *--v18;
        *--v26 = v35;
      }
      while (v18 != v19);
    }
    goto LABEL_30;
  }
  v7 = v4[30];
  v8 = *(int *)(v7 + 4 * v6);
  v9 = (int)v6 + 1;
  if (v9 < (v4[31] - v7) >> 2)
  {
    v10 = *(unsigned int *)(v7 + 4 * v9);
    if ((int)v8 >= (int)v10)
      return;
    goto LABEL_34;
  }
  v10 = (v4[37] - v4[36]) >> 2;
  if ((int)v8 < (int)v10)
  {
LABEL_34:
    v36 = v4 + 77;
    v62 = v4;
    while (1)
    {
      v38 = *(_DWORD *)(v4[36] + 4 * v8);
      if (((*(_QWORD *)(v4[78] + (((unint64_t)((uint64_t)v38 >> 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v38 >> 1)) & 1) != 0)
        goto LABEL_37;
      operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(v36, v38 >> 1);
      v40 = (int *)a3[1];
      v39 = (unint64_t)a3[2];
      if ((unint64_t)v40 >= v39)
        break;
      *v40 = v38;
      v37 = (uint64_t)(v40 + 1);
LABEL_36:
      a3[1] = (void *)v37;
LABEL_37:
      if ((_DWORD)v10 == (_DWORD)++v8)
        return;
    }
    v41 = a3;
    v42 = v36;
    v43 = v10;
    v44 = v41;
    v45 = (int *)*v41;
    v46 = (char *)v40 - (_BYTE *)*v41;
    v47 = v46 >> 2;
    v48 = (v46 >> 2) + 1;
    if (v48 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v49 = v39 - (_QWORD)v45;
    if (v49 >> 1 > v48)
      v48 = v49 >> 1;
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
      v48 = 0x3FFFFFFFFFFFFFFFLL;
    v64 = v48;
    if (v48)
    {
      if (v48 >> 62)
        goto LABEL_62;
      v50 = operator new(4 * v48);
      v51 = (int *)&v50[4 * v47];
      *v51 = v38;
      v37 = (uint64_t)(v51 + 1);
      if (v40 != v45)
        goto LABEL_48;
    }
    else
    {
      v50 = 0;
      v51 = (int *)(4 * v47);
      *(_DWORD *)(4 * v47) = v38;
      v37 = 4 * v47 + 4;
      if (v40 != v45)
      {
LABEL_48:
        v52 = (char *)(v40 - 1) - (char *)v45;
        if (v52 >= 0x2C)
        {
          v53 = (char *)v40 - &v50[v46];
          v10 = v43;
          v36 = v42;
          a3 = v44;
          v4 = v62;
          if (v53 >= 0x20)
          {
            v54 = (v52 >> 2) + 1;
            v55 = 4 * (v54 & 0x7FFFFFFFFFFFFFF8);
            v56 = &v40[v55 / 0xFFFFFFFFFFFFFFFCLL];
            v51 = (int *)((char *)v51 - v55);
            v57 = &v50[4 * v47 - 16];
            v58 = v40 - 4;
            v59 = v54 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v60 = *(_OWORD *)v58;
              *(v57 - 1) = *((_OWORD *)v58 - 1);
              *v57 = v60;
              v57 -= 2;
              v58 -= 8;
              v59 -= 8;
            }
            while (v59);
            v40 = v56;
            if (v54 == (v54 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_57;
          }
        }
        else
        {
          v10 = v43;
          v36 = v42;
          a3 = v44;
          v4 = v62;
        }
        do
        {
          v61 = *--v40;
          *--v51 = v61;
        }
        while (v40 != v45);
LABEL_57:
        *a3 = v51;
        a3[1] = (void *)v37;
        a3[2] = &v50[4 * v64];
        if (v45)
          operator delete(v45);
        goto LABEL_36;
      }
    }
    v10 = v43;
    v36 = v42;
    a3 = v44;
    v4 = v62;
    goto LABEL_57;
  }
}

void sub_22DB671C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::IntegerTrail::MergeReasonInto(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t *v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int *v17;
  unint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  int *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  _OWORD *v31;
  int *v32;
  uint64_t v33;
  __int128 v34;
  int v35;
  uint64_t *v37;
  int v38;
  void **v39;
  _BYTE v40[12];

  if (a3)
  {
    v5 = a2;
    v6 = -1431655765 * ((*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 2);
    v7 = (uint64_t *)((char *)a2 + 12 * a3);
    v39 = (void **)(a1 + 544);
    v38 = v6;
    v37 = v7;
    while (1)
    {
      v9 = *v5;
      *(_QWORD *)v40 = *v5;
      *(_DWORD *)&v40[8] = *((_DWORD *)v5 + 2);
      v10 = *(_QWORD *)(a1 + 144);
      if (*(uint64_t *)&v40[4] <= *(_QWORD *)(v10 + 20 * (int)*v5))
      {
        v12 = -1;
LABEL_18:
        if (v12 < v6)
          goto LABEL_5;
      }
      else
      {
        v11 = (int)v9;
        v12 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 12 * (int)v9 + 8);
        v13 = *(_QWORD *)(a1 + 72);
        v14 = *(_DWORD *)(v13 + 4 * (int)v9);
        if (v14 < v12
          && *(_DWORD *)(v10 + 20 * v14 + 8) == (_DWORD)v9
          && *(_QWORD *)(v10 + 20 * v14) >= *(uint64_t *)&v40[4])
        {
          v12 = *(_DWORD *)(v13 + 4 * (int)v9);
        }
        v15 = v12;
        if (v12 >= *(_DWORD *)(a1 + 64))
LABEL_12:
          *(_DWORD *)(v13 + 4 * v11) = v15;
        while (1)
        {
          v16 = *(_QWORD *)(v10 + 20 * v15);
          if (v16 == *(_QWORD *)&v40[4])
            break;
          if (v16 < *(uint64_t *)&v40[4])
            goto LABEL_18;
          v12 = v15;
          v15 = *(_DWORD *)(v10 + 20 * v15 + 12);
          if (v15 >= *(_DWORD *)(a1 + 64))
            goto LABEL_12;
        }
        v12 = v15;
        if (v15 < v6)
          goto LABEL_5;
      }
      v17 = *(int **)(a1 + 552);
      v18 = *(_QWORD *)(a1 + 560);
      if ((unint64_t)v17 >= v18)
        break;
      *v17 = v12;
      v8 = (uint64_t)(v17 + 1);
LABEL_4:
      *(_QWORD *)(a1 + 552) = v8;
LABEL_5:
      v5 = (uint64_t *)((char *)v5 + 12);
      if (v5 == v7)
        goto LABEL_42;
    }
    v19 = (int *)*v39;
    v20 = (char *)v17 - (_BYTE *)*v39;
    v21 = v20 >> 2;
    v22 = (v20 >> 2) + 1;
    if (v22 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v23 = v18 - (_QWORD)v19;
    if (v23 >> 1 > v22)
      v22 = v23 >> 1;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
      v24 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
    {
      if (v24 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v25 = operator new(4 * v24);
      v26 = (int *)&v25[4 * v21];
      *v26 = v12;
      v8 = (uint64_t)(v26 + 1);
      if (v17 == v19)
        goto LABEL_39;
    }
    else
    {
      v25 = 0;
      v26 = (int *)(4 * v21);
      *(_DWORD *)(4 * v21) = v12;
      v8 = 4 * v21 + 4;
      if (v17 == v19)
      {
LABEL_39:
        *(_QWORD *)(a1 + 544) = v26;
        *(_QWORD *)(a1 + 552) = v8;
        *(_QWORD *)(a1 + 560) = &v25[4 * v24];
        if (v19)
          operator delete(v19);
        v6 = v38;
        v7 = v37;
        goto LABEL_4;
      }
    }
    v27 = (char *)(v17 - 1) - (char *)v19;
    if (v27 < 0x2C)
      goto LABEL_47;
    if ((unint64_t)((char *)v17 - &v25[v20]) < 0x20)
      goto LABEL_47;
    v28 = (v27 >> 2) + 1;
    v29 = 4 * (v28 & 0x7FFFFFFFFFFFFFF8);
    v30 = &v17[v29 / 0xFFFFFFFFFFFFFFFCLL];
    v26 = (int *)((char *)v26 - v29);
    v31 = &v25[4 * v21 - 16];
    v32 = v17 - 4;
    v33 = v28 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v34 = *(_OWORD *)v32;
      *(v31 - 1) = *((_OWORD *)v32 - 1);
      *v31 = v34;
      v31 -= 2;
      v32 -= 8;
      v33 -= 8;
    }
    while (v33);
    v17 = v30;
    if (v28 != (v28 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_47:
      do
      {
        v35 = *--v17;
        *--v26 = v35;
      }
      while (v17 != v19);
    }
    goto LABEL_39;
  }
LABEL_42:
  operations_research::sat::IntegerTrail::MergeReasonIntoInternal(a1, a4);
}

void *operations_research::sat::IntegerTrail::Reason(std::vector<int> *this, const operations_research::sat::Trail *a2, int a3)
{
  int v4;
  void **EmptyVectorToStoreReason;
  std::vector<int>::pointer begin;
  int *v7;
  std::vector<int>::pointer v8;
  uint64_t v9;
  std::vector<int>::pointer v10;
  uint64_t v11;
  std::vector<int>::pointer v12;
  int *v13;
  uint64_t v14;
  int v15;
  char *v16;
  std::vector<int>::pointer end;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  int *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _OWORD *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  int v34;
  void **v36;
  void **p_value;
  __int128 v38;
  std::vector<int> *v39;
  std::vector<int> *v40;
  int v41;
  uint64_t v42;
  int v43;

  v4 = this[34].__end_[a3];
  EmptyVectorToStoreReason = (void **)operations_research::sat::Trail::GetEmptyVectorToStoreReason(a2, a3);
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize((uint64_t)&this[25].__end_cap_, (*((_QWORD *)this[39].__begin_ + 10) - *((_QWORD *)this[39].__begin_ + 9)) >> 2);
  begin = this[6].__begin_;
  if (begin[5 * v4 + 4] == -1)
  {
    v7 = &begin[5 * v4];
    LODWORD(v38) = v7[2];
    *(_QWORD *)((char *)&v38 + 4) = *(_QWORD *)v7;
    v8 = this[7].__begin_;
    v42 = v38;
    v43 = DWORD2(v38);
    v41 = v4;
    v39 = this + 16;
    v40 = this + 15;
    v9 = *(_QWORD *)&v8[8 * v4 + 6];
    if (!v9)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, uint64_t *, int *, std::vector<int> **, std::vector<int> **))(*(_QWORD *)v9 + 48))(v9, &v42, &v41, &v40, &v39);
  }
  v36 = EmptyVectorToStoreReason;
  operations_research::sat::IntegerTrail::AppendLiteralsReason(this, v4, EmptyVectorToStoreReason);
  v10 = operations_research::sat::IntegerTrail::Dependencies(this, v4);
  if (v11)
  {
    v12 = v10;
    p_value = (void **)&this[22].__end_cap_.__value_;
    v13 = &v10[v11];
    while (1)
    {
      v15 = *v12;
      if (*v12 < 0)
        goto LABEL_29;
      v16 = (char *)this[23].__begin_;
      end = this[23].__end_;
      if (v16 >= (char *)end)
        break;
      *(_DWORD *)v16 = v15;
      v14 = (uint64_t)(v16 + 4);
LABEL_7:
      this[23].__begin_ = (std::vector<int>::pointer)v14;
      if (++v12 == v13)
        goto LABEL_29;
    }
    v18 = (char *)*p_value;
    v19 = v16 - (_BYTE *)*p_value;
    v20 = v19 >> 2;
    v21 = (v19 >> 2) + 1;
    if (v21 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v22 = (char *)end - v18;
    if (v22 >> 1 > v21)
      v21 = v22 >> 1;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
      v23 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v23 = v21;
    if (v23)
    {
      if (v23 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v24 = operator new(4 * v23);
      v25 = (int *)&v24[4 * v20];
      *v25 = v15;
      v14 = (uint64_t)(v25 + 1);
      if (v16 == v18)
        goto LABEL_27;
    }
    else
    {
      v24 = 0;
      v25 = (int *)(4 * v20);
      *(_DWORD *)(4 * v20) = v15;
      v14 = 4 * v20 + 4;
      if (v16 == v18)
      {
LABEL_27:
        this[22].__end_cap_.__value_ = v25;
        this[23].__begin_ = (std::vector<int>::pointer)v14;
        this[23].__end_ = (std::vector<int>::pointer)&v24[4 * v23];
        if (v18)
          operator delete(v18);
        goto LABEL_7;
      }
    }
    v26 = v16 - 4 - v18;
    if (v26 < 0x2C)
      goto LABEL_35;
    if ((unint64_t)(v16 - &v24[v19]) < 0x20)
      goto LABEL_35;
    v27 = (v26 >> 2) + 1;
    v28 = 4 * (v27 & 0x7FFFFFFFFFFFFFF8);
    v29 = &v16[-v28];
    v25 = (int *)((char *)v25 - v28);
    v30 = &v24[4 * v20 - 16];
    v31 = v16 - 16;
    v32 = v27 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v33 = *(_OWORD *)v31;
      *(v30 - 1) = *((_OWORD *)v31 - 1);
      *v30 = v33;
      v30 -= 2;
      v31 -= 32;
      v32 -= 8;
    }
    while (v32);
    v16 = v29;
    if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_35:
      do
      {
        v34 = *((_DWORD *)v16 - 1);
        v16 -= 4;
        *--v25 = v34;
      }
      while (v16 != v18);
    }
    goto LABEL_27;
  }
LABEL_29:
  operations_research::sat::IntegerTrail::MergeReasonIntoInternal((uint64_t)this, v36);
  return *v36;
}

void operations_research::sat::IntegerTrail::AppendNewBounds(_QWORD *a1, void **a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  _BYTE v26[12];

  v4 = a1 + 93;
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize((uint64_t)(a1 + 93), -1431655765 * ((a1[6] - a1[5]) >> 2));
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[6] - a1[5]) >> 2);
  v6 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[19] - a1[18]) >> 2);
  if ((int)v6 > (int)v5)
  {
    v7 = (int)v6;
    v8 = (int)v5;
    v25 = v4;
    do
    {
      --v7;
      v10 = a1[18] + 20 * v7;
      v11 = *(_DWORD *)(v10 + 8);
      if (v11 != -1 && ((*(_QWORD *)(a1[94] + (((unint64_t)v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
      {
        operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(v4, v11);
        *(_DWORD *)v26 = *(_DWORD *)(v10 + 8);
        *(_QWORD *)&v26[4] = *(_QWORD *)v10;
        v12 = HIDWORD(*(_QWORD *)v10);
        v14 = (char *)a2[1];
        v13 = (unint64_t)a2[2];
        if ((unint64_t)v14 < v13)
        {
          *(_QWORD *)v14 = *(_QWORD *)v26;
          *((_DWORD *)v14 + 2) = v12;
          v9 = v14 + 12;
        }
        else
        {
          v15 = (char *)*a2;
          v16 = 0xAAAAAAAAAAAAAAABLL * ((v14 - (_BYTE *)*a2) >> 2);
          v17 = v16 + 1;
          if (v16 + 1 > 0x1555555555555555)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v15) >> 2);
          if (2 * v18 > v17)
            v17 = 2 * v18;
          if (v18 >= 0xAAAAAAAAAAAAAAALL)
            v19 = 0x1555555555555555;
          else
            v19 = v17;
          if (v19)
          {
            if (v19 > 0x1555555555555555)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v20 = (char *)operator new(12 * v19);
          }
          else
          {
            v20 = 0;
          }
          v21 = &v20[12 * v16];
          *(_QWORD *)v21 = *(_QWORD *)v26;
          *((_DWORD *)v21 + 2) = v12;
          v22 = v21;
          if (v14 != v15)
          {
            do
            {
              v23 = *(_QWORD *)(v14 - 12);
              v14 -= 12;
              v24 = *((_DWORD *)v14 + 2);
              *(_QWORD *)(v22 - 12) = v23;
              v22 -= 12;
              *((_DWORD *)v22 + 2) = v24;
            }
            while (v14 != v15);
            v14 = (char *)*a2;
          }
          v9 = v21 + 12;
          *a2 = v22;
          a2[1] = v21 + 12;
          a2[2] = &v20[12 * v19];
          if (v14)
            operator delete(v14);
          v4 = v25;
        }
        a2[1] = v9;
      }
    }
    while (v7 > v8);
  }
}

operations_research::sat::GenericLiteralWatcher *operations_research::sat::GenericLiteralWatcher::GenericLiteralWatcher(operations_research::sat::GenericLiteralWatcher *this, operations_research::sat::Model *a2)
{
  uint64_t v4;
  operations_research::sat::SatSolver *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t i;

  *((_BYTE *)this + 31) = 21;
  *((_QWORD *)this + 4) = 0xFFFFFFFFLL;
  *(_QWORD *)this = &off_24F9861B8;
  strcpy((char *)this + 8, "GenericLiteralWatcher");
  *((_QWORD *)this + 5) = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>((uint64_t)a2);
  *((_QWORD *)this + 6) = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)a2);
  v4 = operations_research::sat::Model::GetOrCreate<operations_research::sat::RevIntRepository>((uint64_t)a2);
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 7) = v4;
  *((_QWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *(_OWORD *)((char *)this + 124) = 0u;
  *((_QWORD *)this + 21) = (char *)this + 136;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 44) = -1;
  *((_QWORD *)this + 36) = &off_24F9807B8;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_QWORD *)this + 67) = 0;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *((_QWORD *)this + 63) = 0;
  v5 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)a2);
  operations_research::sat::SatSolver::AddLastPropagator(v5, this);
  operations_research::sat::IntegerTrail::RegisterReversibleClass(*((_QWORD **)this + 6), (uint64_t)this + 288);
  operations_research::sat::IntegerTrail::RegisterWatcher(*((_QWORD **)this + 6), (uint64_t)this + 136);
  v7 = *((_QWORD *)this + 27);
  v6 = *((_QWORD *)this + 28);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4);
  if (v8 > 1)
  {
    if (v6 - v7 != 96)
    {
      for (i = v7 + 96; v6 != i; v6 = std::deque<int>::~deque[abi:ne180100](v6 - 48))
        ;
      *((_QWORD *)this + 28) = i;
    }
  }
  else
  {
    std::vector<std::deque<int>>::__append((uint64_t)this + 216, 2 - v8);
  }
  return this;
}

void sub_22DB67B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  *(_QWORD *)v10 = off_24F980668;
  if (*(char *)(v10 + 31) < 0)
    operator delete(*(void **)(v10 + 8));
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::RevIntRepository>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v19;

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 32);
  if (!v2)
    goto LABEL_12;
  v4 = (_QWORD *)(a1 + 32);
  do
  {
    v5 = v2[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::RevIntRepository>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::RevIntRepository>(void)::d)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 != v3 && v4[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::RevIntRepository>(void)::d)
    return v4[5];
LABEL_12:
  v8 = operations_research::sat::Model::MyNew<operations_research::sat::RevIntRepository>(a1);
  v9 = *(_QWORD **)(a1 + 32);
  v10 = v3;
  if (v9)
  {
    while (1)
    {
      while (1)
      {
        v10 = v9;
        v11 = v9[4];
        if (v11 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::RevIntRepository>(void)::d)
          break;
        v9 = (_QWORD *)*v10;
        v3 = v10;
        if (!*v10)
          goto LABEL_19;
      }
      if (v11 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::RevIntRepository>(void)::d)
        break;
      v9 = (_QWORD *)v10[1];
      if (!v9)
      {
        v3 = v10 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v12 = v10;
    v10 = operator new(0x30uLL);
    v10[4] = &gtl::FastTypeId<operations_research::sat::RevIntRepository>(void)::d;
    v10[5] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v12;
    *v3 = v10;
    v13 = **(_QWORD **)(a1 + 24);
    v14 = v10;
    if (v13)
    {
      *(_QWORD *)(a1 + 24) = v13;
      v14 = (uint64_t *)*v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v14);
    ++*(_QWORD *)(a1 + 40);
  }
  v10[5] = v8;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24F9862D8;
  v15[1] = v8;
  v19 = v15;
  v16 = *(_QWORD **)(a1 + 56);
  if ((unint64_t)v16 >= *(_QWORD *)(a1 + 64))
  {
    v17 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a1 + 48), &v19);
  }
  else
  {
    *v16 = v15;
    v17 = (char *)(v16 + 1);
  }
  *(_QWORD *)(a1 + 56) = v17;
  return v8;
}

void operations_research::sat::IntegerTrail::RegisterReversibleClass(_QWORD *a1, uint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v4 = (char *)a1[113];
  v5 = v4;
  v6 = a1[114];
  if ((unint64_t)v4 < v6)
  {
    *(_QWORD *)v4 = a2;
    v7 = (uint64_t)(v4 + 8);
    goto LABEL_23;
  }
  v8 = (void **)(a1 + 112);
  v9 = (char *)a1[112];
  v10 = (v4 - v9) >> 3;
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 61)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v12 = v6 - (_QWORD)v9;
  if (v12 >> 2 > v11)
    v11 = v12 >> 2;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
    v13 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v14 = (char *)operator new(8 * v13);
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *(_QWORD *)v15 = a2;
    v7 = (uint64_t)(v15 + 8);
    v17 = (char *)(v4 - v9);
    if (v4 == v9)
      goto LABEL_21;
    goto LABEL_14;
  }
  v14 = 0;
  v15 = (char *)(8 * v10);
  v16 = 0;
  *(_QWORD *)(8 * v10) = a2;
  v7 = 8 * v10 + 8;
  v17 = (char *)(v4 - v9);
  if (v4 != v9)
  {
LABEL_14:
    v18 = (unint64_t)(v17 - 8);
    if (v18 < 0x58)
      goto LABEL_28;
    if ((unint64_t)(v9 - v14) < 0x20)
      goto LABEL_28;
    v19 = (v18 >> 3) + 1;
    v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v5 = &v4[-v20];
    v15 -= v20;
    v21 = &v14[8 * v10 - 16];
    v22 = (__int128 *)(v4 - 16);
    v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *v22;
      *((_OWORD *)v21 - 1) = *(v22 - 1);
      *(_OWORD *)v21 = v24;
      v21 -= 32;
      v22 -= 2;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v25 = *((_QWORD *)v5 - 1);
        v5 -= 8;
        *((_QWORD *)v15 - 1) = v25;
        v15 -= 8;
      }
      while (v5 != v9);
    }
    v5 = (char *)*v8;
  }
LABEL_21:
  a1[112] = v15;
  a1[113] = v7;
  a1[114] = v16;
  if (v5)
    operator delete(v5);
LABEL_23:
  a1[113] = v7;
}

void **std::vector<std::deque<int>>::~vector[abi:ne180100](void **a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        v3 = std::deque<int>::~deque[abi:ne180100](v3 - 48);
      while ((void *)v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void operations_research::sat::GenericLiteralWatcher::UpdateCallingNeeds(operations_research::sat::GenericLiteralWatcher *this, operations_research::sat::Trail *a2)
{
  operations_research::sat::GenericLiteralWatcher *v2;
  int v3;
  int v4;
  int v5;
  signed int v6;
  uint64_t v7;
  unint64_t **v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  _DWORD *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _OWORD *v41;
  char *v42;
  uint64_t v43;
  __int128 v44;
  int v45;
  int *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t **v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  char *v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  _DWORD *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  _OWORD *v80;
  char *v81;
  uint64_t v82;
  __int128 v83;
  int v84;
  uint64_t v85;
  uint64_t i;
  uint64_t v87;
  char *v88;
  int *v89;
  int *v91;
  unint64_t *v92;
  uint64_t *v93;
  unint64_t v95;
  unint64_t v96;

  v2 = this;
  v3 = *((_DWORD *)this + 9);
  v4 = *((_DWORD *)a2 + 3);
  if (v3 < v4)
  {
    while (1)
    {
      v5 = v3++;
      *((_DWORD *)v2 + 9) = v3;
      v6 = *(_DWORD *)(*((_QWORD *)a2 + 9) + 4 * v5);
      v7 = *((_QWORD *)v2 + 8);
      if (v6 < (int)(-1431655765 * ((unint64_t)(*((_QWORD *)v2 + 9) - v7) >> 3)))
      {
        v8 = (unint64_t **)(v7 + 24 * v6);
        v10 = *v8;
        v9 = v8[1];
        if (*v8 != v9)
          break;
      }
LABEL_4:
      if (v3 >= v4)
        goto LABEL_41;
    }
    v92 = v8[1];
    while (1)
    {
      v12 = *v10;
      v13 = (int)*v10;
      v14 = *((_QWORD *)v2 + 30);
      v15 = 1 << *v10;
      v16 = *(_QWORD *)(v14 + 8 * (v13 >> 6));
      if ((v15 & v16) != 0)
      {
        if ((v12 & 0x8000000000000000) != 0)
          goto LABEL_10;
      }
      else
      {
        v17 = (_QWORD *)(*((_QWORD *)v2 + 27) + 48 * *(int *)(*((_QWORD *)v2 + 55) + 4 * v13));
        v18 = v17[2];
        v19 = v17[1];
        *(_QWORD *)(v14 + 8 * (v13 >> 6)) = v16 | v15;
        if (v18 == v19)
          v20 = 0;
        else
          v20 = ((v18 - v19) << 7) - 1;
        v22 = v17 + 5;
        v21 = v17[5];
        v23 = v21 + v17[4];
        if (v20 == v23)
        {
          std::deque<int>::__add_back_capacity((uint64_t)v17);
          v9 = v92;
          v21 = *v22;
          v19 = v17[1];
          v23 = v17[4] + *v22;
        }
        *(_DWORD *)(*(_QWORD *)(v19 + ((v23 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v23 & 0x3FF)) = v12;
        *v22 = v21 + 1;
        if ((v12 & 0x8000000000000000) != 0)
          goto LABEL_10;
      }
      v24 = HIDWORD(v12);
      v25 = *((_QWORD *)v2 + 52) + 24 * (int)v13;
      v26 = (uint64_t *)(v25 + 8);
      v27 = *(char **)(v25 + 8);
      v28 = *(_QWORD *)(v25 + 16);
      if ((unint64_t)v27 >= v28)
        break;
      *(_DWORD *)v27 = v24;
      v11 = (uint64_t)(v27 + 4);
LABEL_9:
      *v26 = v11;
LABEL_10:
      if (++v10 == v9)
      {
        v3 = *((_DWORD *)v2 + 9);
        v4 = *((_DWORD *)a2 + 3);
        goto LABEL_4;
      }
    }
    v29 = *(char **)v25;
    v30 = (uint64_t)&v27[-*(_QWORD *)v25];
    v31 = v30 >> 2;
    v32 = (v30 >> 2) + 1;
    if (v32 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v33 = v28 - (_QWORD)v29;
    if (v33 >> 1 > v32)
      v32 = v33 >> 1;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
      v32 = 0x3FFFFFFFFFFFFFFFLL;
    v95 = v32;
    if (v32)
    {
      if (v32 >> 62)
LABEL_86:
        std::__throw_bad_array_new_length[abi:ne180100]();
      v34 = operator new(4 * v32);
      v35 = &v34[4 * v31];
      *v35 = v24;
      v11 = (uint64_t)(v35 + 1);
      if (v27 != v29)
        goto LABEL_29;
    }
    else
    {
      v34 = 0;
      v35 = (_DWORD *)(4 * v31);
      *(_DWORD *)(4 * v31) = v24;
      v11 = 4 * v31 + 4;
      if (v27 != v29)
      {
LABEL_29:
        v36 = v27 - 4 - v29;
        if (v36 >= 0x2C)
        {
          v37 = v27 - &v34[v30];
          v2 = this;
          if (v37 >= 0x20)
          {
            v38 = (v36 >> 2) + 1;
            v39 = 4 * (v38 & 0x7FFFFFFFFFFFFFF8);
            v40 = &v27[-v39];
            v35 = (_DWORD *)((char *)v35 - v39);
            v41 = &v34[4 * v31 - 16];
            v42 = v27 - 16;
            v43 = v38 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v44 = *(_OWORD *)v42;
              *(v41 - 1) = *((_OWORD *)v42 - 1);
              *v41 = v44;
              v41 -= 2;
              v42 -= 32;
              v43 -= 8;
            }
            while (v43);
            v27 = v40;
            if (v38 == (v38 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_38;
          }
        }
        else
        {
          v2 = this;
        }
        do
        {
          v45 = *((_DWORD *)v27 - 1);
          v27 -= 4;
          *--v35 = v45;
        }
        while (v27 != v29);
LABEL_38:
        *(_QWORD *)v25 = v35;
        *v26 = v11;
        *(_QWORD *)(v25 + 16) = &v34[4 * v95];
        if (v29)
          operator delete(v29);
        v9 = v92;
        goto LABEL_9;
      }
    }
    v2 = this;
    goto LABEL_38;
  }
LABEL_41:
  v46 = (int *)*((_QWORD *)v2 + 24);
  v88 = (char *)v2 + 192;
  v89 = (int *)*((_QWORD *)v2 + 25);
  if (v46 != v89)
  {
    while (1)
    {
      v91 = v46;
      v47 = *v46;
      v48 = *((_QWORD *)v2 + 11);
      if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v2 + 12) - v48) >> 3) > v47)
      {
        v49 = (uint64_t **)(v48 + 24 * (int)v47);
        v51 = *v49;
        v50 = v49[1];
        if (*v49 != v50)
          break;
      }
LABEL_43:
      v46 = v91 + 1;
      if (v91 + 1 == v89)
        goto LABEL_80;
    }
    v93 = v49[1];
    while (1)
    {
      v53 = *v51;
      v54 = (int)*v51;
      v55 = *((_QWORD *)v2 + 30);
      v56 = 1 << *v51;
      v57 = *(_QWORD *)(v55 + 8 * (v54 >> 6));
      if ((v56 & v57) != 0)
      {
        if (v53 < 0)
          goto LABEL_49;
      }
      else
      {
        v58 = (_QWORD *)(*((_QWORD *)v2 + 27) + 48 * *(int *)(*((_QWORD *)v2 + 55) + 4 * v54));
        v59 = v58[2];
        v60 = v58[1];
        *(_QWORD *)(v55 + 8 * (v54 >> 6)) = v57 | v56;
        if (v59 == v60)
          v61 = 0;
        else
          v61 = ((v59 - v60) << 7) - 1;
        v63 = v58 + 5;
        v62 = v58[5];
        v64 = v62 + v58[4];
        if (v61 == v64)
        {
          std::deque<int>::__add_back_capacity((uint64_t)v58);
          v50 = v93;
          v62 = *v63;
          v60 = v58[1];
          v64 = v58[4] + *v63;
        }
        *(_DWORD *)(*(_QWORD *)(v60 + ((v64 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v64 & 0x3FF)) = v53;
        *v63 = v62 + 1;
        if (v53 < 0)
          goto LABEL_49;
      }
      v65 = *((_QWORD *)v2 + 52) + 24 * (int)v54;
      v66 = (uint64_t *)(v65 + 8);
      v67 = *(char **)(v65 + 8);
      v68 = *(_QWORD *)(v65 + 16);
      if ((unint64_t)v67 >= v68)
        break;
      *(_DWORD *)v67 = HIDWORD(v53);
      v52 = (uint64_t)(v67 + 4);
LABEL_48:
      *v66 = v52;
LABEL_49:
      if (++v51 == v50)
        goto LABEL_43;
    }
    v69 = *(char **)v65;
    v70 = (uint64_t)&v67[-*(_QWORD *)v65];
    v71 = v70 >> 2;
    v72 = (v70 >> 2) + 1;
    if (v72 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v73 = v68 - (_QWORD)v69;
    if (v73 >> 1 > v72)
      v72 = v73 >> 1;
    if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL)
      v72 = 0x3FFFFFFFFFFFFFFFLL;
    v96 = v72;
    if (v72)
    {
      if (v72 >> 62)
        goto LABEL_86;
      v74 = operator new(4 * v72);
      v75 = &v74[4 * v71];
      *v75 = HIDWORD(v53);
      v52 = (uint64_t)(v75 + 1);
      if (v67 == v69)
        goto LABEL_77;
    }
    else
    {
      v74 = 0;
      v75 = (_DWORD *)(4 * v71);
      *(_DWORD *)(4 * v71) = HIDWORD(v53);
      v52 = 4 * v71 + 4;
      if (v67 == v69)
      {
LABEL_77:
        *(_QWORD *)v65 = v75;
        *v66 = v52;
        *(_QWORD *)(v65 + 16) = &v74[4 * v96];
        if (v69)
          operator delete(v69);
        v50 = v93;
        v2 = this;
        goto LABEL_48;
      }
    }
    v76 = v67 - 4 - v69;
    if (v76 < 0x2C)
      goto LABEL_92;
    if ((unint64_t)(v67 - &v74[v70]) < 0x20)
      goto LABEL_92;
    v77 = (v76 >> 2) + 1;
    v78 = 4 * (v77 & 0x7FFFFFFFFFFFFFF8);
    v79 = &v67[-v78];
    v75 = (_DWORD *)((char *)v75 - v78);
    v80 = &v74[4 * v71 - 16];
    v81 = v67 - 16;
    v82 = v77 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v83 = *(_OWORD *)v81;
      *(v80 - 1) = *((_OWORD *)v81 - 1);
      *v80 = v83;
      v80 -= 2;
      v81 -= 32;
      v82 -= 8;
    }
    while (v82);
    v67 = v79;
    if (v77 != (v77 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_92:
      do
      {
        v84 = *((_DWORD *)v67 - 1);
        v67 -= 4;
        *--v75 = v84;
      }
      while (v67 != v69);
    }
    goto LABEL_77;
  }
LABEL_80:
  if ((*((_DWORD *)a2 + 2) & 0xFFFFFFE) == 0)
  {
    v85 = *((_QWORD *)v2 + 65);
    for (i = *((_QWORD *)v2 + 66); v85 != i; v85 += 32)
    {
      v87 = *(_QWORD *)(v85 + 24);
      if (!v87)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v87 + 48))(v87, v88);
    }
  }
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize((uint64_t)v2 + 136, -1431655765 * ((*(_QWORD *)(*((_QWORD *)v2 + 6) + 48) - *(_QWORD *)(*((_QWORD *)v2 + 6) + 40)) >> 2));
}

uint64_t operations_research::sat::GenericLiteralWatcher::Propagate(int **this, operations_research::sat::Trail *a2)
{
  operations_research::sat::GenericLiteralWatcher *v2;
  absl::lts_2020_02_25 *v3;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 v8;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _OWORD *v41;
  __int128 *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int **v53;
  int **v54;
  uint64_t v55;
  int v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  char *v60;
  _QWORD *v61;
  int *v62;
  int v63;
  unint64_t v64;
  char *v65;
  _BYTE *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int *v75;
  int *i;
  int v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  unint64_t v87;
  int v88;
  int v90;
  int v91;
  char **v92;
  uint64_t *v93;
  uint64_t *v95;
  void ***v96;
  operations_research::sat::GenericLiteralWatcher *v97;
  unint64_t v98;
  int v99;

  v2 = (operations_research::sat::GenericLiteralWatcher *)this;
  v99 = (*((_DWORD *)a2 + 2) >> 1) & 0x7FFFFFF;
  if (!v99)
  {
    v75 = this[61];
    for (i = this[62]; v75 != i; ++v75)
    {
      v77 = *v75;
      v78 = *((_QWORD *)v2 + 30);
      v79 = (unint64_t)*v75 >> 6;
      v80 = *(_QWORD *)(v78 + 8 * v79);
      if (((1 << *v75) & v80) == 0)
      {
        v81 = (_QWORD *)(*((_QWORD *)v2 + 27) + 48 * *(int *)(*((_QWORD *)v2 + 55) + 4 * v77));
        v82 = v81[2];
        v83 = v81[1];
        *(_QWORD *)(v78 + 8 * v79) = (1 << v77) | v80;
        if (v82 == v83)
          v84 = 0;
        else
          v84 = ((v82 - v83) << 7) - 1;
        v86 = v81 + 5;
        v85 = v81[5];
        v87 = v85 + v81[4];
        if (v84 == v87)
        {
          std::deque<int>::__add_back_capacity((uint64_t)v81);
          v85 = *v86;
          v83 = v81[1];
          v87 = v81[4] + *v86;
        }
        *(_DWORD *)(*(_QWORD *)(v83 + ((v87 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v87 & 0x3FF)) = v77;
        *v86 = v85 + 1;
      }
    }
  }
  operations_research::sat::GenericLiteralWatcher::UpdateCallingNeeds(v2, a2);
  v4 = *((_QWORD *)v2 + 27);
  if (*((_QWORD *)v2 + 28) == v4)
    goto LABEL_107;
  v5 = 0;
  LODWORD(v4) = 0;
  v90 = 0;
  v92 = (char **)((char *)v2 + 320);
  v97 = v2;
  while (1)
  {
    if ((int)v4 >= 101)
    {
      v6 = *((_QWORD *)v2 + 5);
      v7 = *(unsigned __int8 **)(v6 + 120);
      if (v7)
      {
        v8 = atomic_load(v7);
        if ((v8 & 1) != 0)
          goto LABEL_107;
      }
      if (fmax(*(double *)(v6 + 104) - *(double *)(v6 + 112), 0.0) <= 0.0)
        goto LABEL_107;
      CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos(v3);
      if (*(_QWORD *)(v6 + 24) <= CurrentTimeNanos - *(_QWORD *)(v6 + 8))
        v10 = CurrentTimeNanos - *(_QWORD *)(v6 + 8);
      else
        v10 = *(_QWORD *)(v6 + 24);
      operations_research::RunningMax<long long>::Add((int *)(v6 + 32), v10);
      *(_QWORD *)(v6 + 8) = CurrentTimeNanos;
      v4 = *(_QWORD *)(v6 + 16);
      if (*(_QWORD *)(*(_QWORD *)(v6 + 40) + 8 * *(int *)(v6 + 68)) + CurrentTimeNanos < v4)
      {
        LODWORD(v4) = 0;
        goto LABEL_19;
      }
      if (!FLAGS_time_limit_use_usertime)
        goto LABEL_106;
      v11 = *(double *)(v6 + 96);
      if (*(_BYTE *)(v6 + 72))
      {
        v3 = (absl::lts_2020_02_25 *)absl::lts_2020_02_25::GetCurrentTimeNanos(v3);
        v4 = *(_QWORD *)(v6 + 88);
        v12 = v11 + (double)((uint64_t)v3 + v4 - *(_QWORD *)(v6 + 80)) * -0.000000001;
        if (v12 <= 0.0001)
          goto LABEL_106;
        goto LABEL_18;
      }
      v12 = v11 + (double)*(uint64_t *)(v6 + 88) * -0.000000001;
      if (v12 > 0.0001)
      {
LABEL_18:
        LODWORD(v4) = 0;
        *(_QWORD *)(v6 + 16) = *(_QWORD *)(v6 + 8) + (uint64_t)(v12 * 1000000000.0);
        goto LABEL_19;
      }
LABEL_106:
      *(_QWORD *)(v6 + 16) = 0;
LABEL_107:
      v88 = 1;
      return (v88 | v4) & 1;
    }
LABEL_19:
    v91 = v4;
    v13 = *((_QWORD *)v2 + 27) + 48 * v5;
    v14 = (uint64_t *)(v13 + 40);
    v95 = (uint64_t *)(v13 + 32);
    v96 = (void ***)(v13 + 8);
    v93 = (uint64_t *)(v13 + 40);
LABEL_20:
    v15 = *v14;
    if (!*v14)
    {
      v74 = v90;
      goto LABEL_92;
    }
    v16 = *v96;
    v17 = *v95;
    v18 = (*(unsigned int **)((char *)*v96 + (((unint64_t)*v95 >> 7) & 0x1FFFFFFFFFFFFF8)))[*v95 & 0x3FF];
    *((_DWORD *)v2 + 128) = v18;
    *v14 = v15 - 1;
    *v95 = v17 + 1;
    if ((unint64_t)(v17 + 1) >= 0x800)
    {
      operator delete(*v16);
      ++*v96;
      *v95 -= 1024;
    }
    v19 = (int)v18;
    v20 = *((_QWORD *)v2 + 43);
    v21 = 4 * (int)v18;
    v22 = *(unsigned int *)(v20 + v21);
    v23 = *((_QWORD *)v2 + 33);
    v24 = *(_DWORD *)(v23 + v21);
    if (v99 > (int)v22 || (int)v22 < v24)
    {
      *(_DWORD *)(v23 + 4 * (int)v18) = v99;
      v98 = (int)v18;
      if (*((_QWORD *)v2 + 37) == *((_QWORD *)v2 + 38))
        goto LABEL_49;
      v25 = *(unsigned int *)(v20 + 4 * (int)v18);
      v27 = (char *)*((_QWORD *)v2 + 41);
      v26 = *((_QWORD *)v2 + 42);
      if ((unint64_t)v27 < v26)
      {
        *(_QWORD *)v27 = v18 | (v25 << 32);
        v28 = (uint64_t)(v27 + 8);
LABEL_48:
        *((_QWORD *)v2 + 41) = v28;
        v20 = *((_QWORD *)v2 + 43);
        v19 = v98;
LABEL_49:
        *(_DWORD *)(v20 + 4 * v19) = v99;
        v46 = *((_QWORD *)v2 + 46) + 24 * (int)v19;
        v47 = *(uint64_t **)v46;
        v48 = *(uint64_t **)(v46 + 8);
        if (*(uint64_t **)v46 != v48)
        {
          if ((int)v22 >= v24)
          {
            if (v99 > (int)v22)
            {
              do
              {
                v51 = *v47++;
                (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v51 + 16))(v51, v99);
              }
              while (v47 != v48);
            }
          }
          else if (v99 <= (int)v22)
          {
            do
            {
              v50 = *v47++;
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v50 + 16))(v50, v22);
            }
            while (v47 != v48);
          }
          else
          {
            do
            {
              v49 = *v47++;
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v49 + 16))(v49, v22);
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v49 + 16))(v49, v99);
            }
            while (v47 != v48);
          }
        }
        v19 = v98;
        v52 = *((_QWORD *)v2 + 49) + 24 * (int)v98;
        v53 = *(int ***)v52;
        v54 = *(int ***)(v52 + 8);
        if (*(int ***)v52 == v54 || *(_QWORD *)(*((_QWORD *)v2 + 7) + 16) == *(_QWORD *)(*((_QWORD *)v2 + 7) + 24))
          goto LABEL_60;
        while (1)
        {
          v61 = (_QWORD *)*((_QWORD *)v2 + 7);
          if (v61[2] == v61[3])
            goto LABEL_65;
          v62 = *v53;
          v63 = **v53;
          v65 = (char *)v61[6];
          v64 = v61[7];
          if ((unint64_t)v65 >= v64)
            break;
          *(_QWORD *)v65 = v62;
          *((_DWORD *)v65 + 2) = v63;
          v60 = v65 + 16;
LABEL_64:
          v61[6] = v60;
LABEL_65:
          if (++v53 == v54)
            goto LABEL_60;
        }
        v66 = (_BYTE *)v61[5];
        v67 = (v65 - v66) >> 4;
        v68 = v67 + 1;
        if ((unint64_t)(v67 + 1) >> 60)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v69 = v64 - (_QWORD)v66;
        if (v69 >> 3 > v68)
          v68 = v69 >> 3;
        if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF0)
          v70 = 0xFFFFFFFFFFFFFFFLL;
        else
          v70 = v68;
        if (v70)
        {
          if (v70 >> 60)
            goto LABEL_110;
          v71 = (char *)operator new(16 * v70);
          v72 = (uint64_t)&v71[16 * v67];
          *(_QWORD *)v72 = v62;
          *(_DWORD *)(v72 + 8) = v63;
          v73 = v72;
          if (v65 == v66)
            goto LABEL_81;
        }
        else
        {
          v71 = 0;
          v72 = 16 * v67;
          *(_QWORD *)v72 = v62;
          *(_DWORD *)(v72 + 8) = v63;
          v73 = 16 * v67;
          if (v65 == v66)
            goto LABEL_81;
        }
        do
        {
          *(_OWORD *)(v73 - 16) = *((_OWORD *)v65 - 1);
          v73 -= 16;
          v65 -= 16;
        }
        while (v65 != v66);
        v65 = (char *)v61[5];
LABEL_81:
        v60 = (char *)(v72 + 16);
        v61[5] = v73;
        v61[6] = v72 + 16;
        v61[7] = &v71[16 * v70];
        v19 = v98;
        if (v65)
          operator delete(v65);
        v2 = v97;
        goto LABEL_64;
      }
      v29 = *v92;
      v30 = v27 - *v92;
      v31 = v30 >> 3;
      v32 = (v30 >> 3) + 1;
      if (v32 >> 61)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v33 = v26 - (_QWORD)v29;
      if (v33 >> 2 > v32)
        v32 = v33 >> 2;
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
        v34 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v34 = v32;
      if (v34)
      {
        if (v34 >> 61)
LABEL_110:
          std::__throw_bad_array_new_length[abi:ne180100]();
        v35 = operator new(8 * v34);
        v36 = (uint64_t *)&v35[8 * v31];
        *v36 = v18 | (v25 << 32);
        v28 = (uint64_t)(v36 + 1);
        if (v27 == v29)
          goto LABEL_46;
      }
      else
      {
        v35 = 0;
        v36 = (uint64_t *)(8 * v31);
        *(_QWORD *)(8 * v31) = v18 | (v25 << 32);
        v28 = 8 * v31 + 8;
        if (v27 == v29)
        {
LABEL_46:
          v2 = v97;
          *((_QWORD *)v97 + 40) = v36;
          *((_QWORD *)v97 + 41) = v28;
          *((_QWORD *)v97 + 42) = &v35[8 * v34];
          if (v27)
            operator delete(v27);
          goto LABEL_48;
        }
      }
      v37 = v27 - 8 - v29;
      if (v37 < 0x58)
        goto LABEL_114;
      if ((unint64_t)(v27 - &v35[v30]) < 0x20)
        goto LABEL_114;
      v38 = (v37 >> 3) + 1;
      v39 = 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
      v40 = &v27[-v39];
      v36 = (uint64_t *)((char *)v36 - v39);
      v41 = &v35[8 * v31 - 16];
      v42 = (__int128 *)(v27 - 16);
      v43 = v38 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v44 = *v42;
        *(v41 - 1) = *(v42 - 1);
        *v41 = v44;
        v41 -= 2;
        v42 -= 2;
        v43 -= 4;
      }
      while (v43);
      v27 = v40;
      if (v38 != (v38 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_114:
        do
        {
          v45 = *((_QWORD *)v27 - 1);
          v27 -= 8;
          *--v36 = v45;
        }
        while (v27 != v29);
      }
      v27 = *v92;
      goto LABEL_46;
    }
LABEL_60:
    v55 = *(_QWORD *)(*((_QWORD *)v2 + 6) + 848);
    v56 = *((_DWORD *)a2 + 3);
    v57 = (_QWORD *)(*((_QWORD *)v2 + 52) + 24 * (int)v19);
    v58 = v57 + 1;
    v59 = **(_QWORD **)(*((_QWORD *)v2 + 14) + 8 * v19);
    if (*v57 == v57[1])
    {
      if (((*(uint64_t (**)(void))(v59 + 16))() & 1) == 0)
      {
LABEL_104:
        v88 = 0;
        LODWORD(v4) = 0;
        *v58 = *v57;
        *(_QWORD *)(*((_QWORD *)v2 + 30) + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v19);
        return (v88 | v4) & 1;
      }
    }
    else if (((*(uint64_t (**)(void))(v59 + 24))() & 1) == 0)
    {
      goto LABEL_104;
    }
    if (!*(_DWORD *)(*((_QWORD *)v2 + 58) + 4 * v19))
      break;
    operations_research::sat::GenericLiteralWatcher::UpdateCallingNeeds(v2, a2);
    *v58 = *v57;
    *(_QWORD *)(*((_QWORD *)v2 + 30) + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v19);
    if (*((_DWORD *)a2 + 3) > v56)
      goto LABEL_105;
LABEL_89:
    v14 = v93;
    if (*(_QWORD *)(*((_QWORD *)v2 + 6) + 848) <= v55)
      goto LABEL_20;
    ++v91;
    v74 = -1;
LABEL_92:
    v90 = v74 + 1;
    v5 = v74 + 1;
    LODWORD(v4) = v91;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v2 + 28) - *((_QWORD *)v2 + 27)) >> 4) <= v5)
      goto LABEL_107;
  }
  *v58 = *v57;
  *(_QWORD *)(*((_QWORD *)v2 + 30) + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v19);
  operations_research::sat::GenericLiteralWatcher::UpdateCallingNeeds(v2, a2);
  if (*((_DWORD *)a2 + 3) <= v56)
    goto LABEL_89;
LABEL_105:
  v88 = 0;
  LODWORD(v4) = 1;
  return (v88 | v4) & 1;
}

void operations_research::sat::GenericLiteralWatcher::Untrail(operations_research::sat::GenericLiteralWatcher *this, const operations_research::sat::Trail *a2, int a3)
{
  int v4;
  _QWORD *v6;
  _QWORD *i;
  uint64_t v8;
  void **v9;
  unint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t v22[2];
  uint64_t *v23;

  v4 = *((_DWORD *)this + 9);
  if (v4 <= a3)
  {
    LODWORD(v22[0]) = *((_DWORD *)this + 9);
    LODWORD(v23) = a3;
    if (v4 != a3)
    {
      v21 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v22, (int)&v23, "propagation_trail_index_ == trail_index");
      v23 = v21;
      if (v21)
      {
        google::LogMessageFatal::LogMessageFatal(v22, (google::glog_internal_namespace_ *)"./ortools/sat/integer.cc", 1777, &v23);
        google::LogMessage::stream((google::LogMessage *)v22);
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v22);
      }
    }
  }
  else
  {
    v6 = (_QWORD *)*((_QWORD *)this + 27);
    for (i = (_QWORD *)*((_QWORD *)this + 28); v6 != i; v6 += 6)
    {
      v9 = (void **)v6[1];
      v10 = v6[2] - (_QWORD)v9;
      if (v10)
      {
        v11 = v6[4];
        v12 = &v9[v11 >> 10];
        v13 = (char *)*v12 + 4 * (v11 & 0x3FF);
        v14 = v6 + 5;
        v15 = *(uint64_t *)((char *)v9 + (((v6[5] + v11) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v6[5] + v11) & 0x3FF);
        if (v13 != (char *)v15)
        {
          v16 = *((_QWORD *)this + 52);
          do
          {
            v17 = *(_DWORD *)v13;
            v13 += 4;
            *(_QWORD *)(v16 + 24 * v17 + 8) = *(_QWORD *)(v16 + 24 * v17);
            if (v13 - (_BYTE *)*v12 == 4096)
            {
              v18 = (char *)v12[1];
              ++v12;
              v13 = v18;
            }
          }
          while (v13 != (char *)v15);
        }
      }
      else
      {
        v14 = v6 + 5;
      }
      *v14 = 0;
      if (v10 >= 0x11)
      {
        do
        {
          operator delete(*v9);
          v19 = v6[2];
          v9 = (void **)(v6[1] + 8);
          v6[1] = v9;
          v10 = v19 - (_QWORD)v9;
        }
        while (v10 > 0x10);
      }
      if (v10 >> 3 == 1)
      {
        v8 = 512;
      }
      else
      {
        if (v10 >> 3 != 2)
          continue;
        v8 = 1024;
      }
      v6[4] = v8;
    }
    *((_DWORD *)this + 9) = a3;
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize((uint64_t)this + 136, -1431655765 * ((*(_QWORD *)(*((_QWORD *)this + 6) + 48) - *(_QWORD *)(*((_QWORD *)this + 6) + 40)) >> 2));
    v20 = (uint64_t)(*((_QWORD *)this + 15) - *((_QWORD *)this + 14)) >> 3;
    LOBYTE(v22[0]) = 0;
    std::vector<BOOL>::assign((char **)this + 30, v20, v22);
  }
}

void sub_22DB69018(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

unint64_t operations_research::sat::GenericLiteralWatcher::Register(uint64_t a1, uint64_t a2)
{
  void **v4;
  char *v5;
  char *v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  _DWORD *v36;
  char *v37;
  int64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  _OWORD *v43;
  char *v44;
  uint64_t v45;
  __int128 v46;
  int v47;
  uint64_t v48;
  _QWORD *v49;
  char *v50;
  void *v51;
  _QWORD *v52;
  char *v53;
  void *v54;
  _QWORD *v55;
  char *v56;
  void *v57;
  unint64_t v58;
  char *v59;
  _DWORD *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _BYTE *v66;
  _DWORD *v67;
  char *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  _OWORD *v73;
  char *v74;
  uint64_t v75;
  __int128 v76;
  int v77;
  unint64_t v78;
  char *v79;
  _DWORD *v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _BYTE *v86;
  _DWORD *v87;
  char *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  _OWORD *v93;
  char *v94;
  uint64_t v95;
  __int128 v96;
  int v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t result;
  void *__p[2];
  uint64_t v110;

  v5 = *(char **)(a1 + 112);
  v6 = *(char **)(a1 + 120);
  v4 = (void **)(a1 + 112);
  v7 = *(_QWORD *)(a1 + 128);
  v8 = v6;
  v9 = v6 - v5;
  if ((unint64_t)v6 < v7)
  {
    *(_QWORD *)v6 = a2;
    v10 = (uint64_t)(v6 + 8);
    goto LABEL_23;
  }
  v11 = v9 >> 3;
  v12 = (v9 >> 3) + 1;
  if (v12 >> 61)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v13 = v7 - (_QWORD)v5;
  if (v13 >> 2 > v12)
    v12 = v13 >> 2;
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
    v14 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v14 = v12;
  if (v14)
  {
    if (v14 >> 61)
      goto LABEL_115;
    v15 = operator new(8 * v14);
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *v16 = a2;
    v10 = (uint64_t)(v16 + 1);
    v18 = (char *)(v6 - v5);
    if (v6 == v5)
      goto LABEL_21;
    goto LABEL_14;
  }
  v15 = 0;
  v16 = (_QWORD *)(8 * v11);
  v17 = 0;
  *(_QWORD *)(8 * v11) = a2;
  v10 = 8 * v11 + 8;
  v18 = (char *)(v6 - v5);
  if (v6 != v5)
  {
LABEL_14:
    v19 = (unint64_t)(v18 - 8);
    if (v19 < 0x58)
      goto LABEL_120;
    if ((unint64_t)(v6 - &v15[v9 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
      goto LABEL_120;
    v20 = (v19 >> 3) + 1;
    v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    v8 = &v6[-v21];
    v16 = (_QWORD *)((char *)v16 - v21);
    v22 = &v15[8 * v11 - 16];
    v23 = v6 - 16;
    v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v25 = *(_OWORD *)v23;
      *(v22 - 1) = *((_OWORD *)v23 - 1);
      *v22 = v25;
      v22 -= 2;
      v23 -= 32;
      v24 -= 4;
    }
    while (v24);
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_120:
      do
      {
        v26 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *--v16 = v26;
      }
      while (v8 != v5);
    }
    v8 = (char *)*v4;
  }
LABEL_21:
  *(_QWORD *)(a1 + 112) = v16;
  *(_QWORD *)(a1 + 120) = v10;
  *(_QWORD *)(a1 + 128) = v17;
  if (v8)
    operator delete(v8);
LABEL_23:
  *(_QWORD *)(a1 + 120) = v10;
  v28 = *(char **)(a1 + 272);
  v27 = *(_QWORD *)(a1 + 280);
  if ((unint64_t)v28 < v27)
  {
    *(_DWORD *)v28 = 0;
    v29 = (uint64_t)(v28 + 4);
    goto LABEL_44;
  }
  v30 = *(char **)(a1 + 264);
  v31 = (v28 - v30) >> 2;
  v32 = v31 + 1;
  if ((unint64_t)(v31 + 1) >> 62)
    goto LABEL_114;
  v33 = v27 - (_QWORD)v30;
  if (v33 >> 1 > v32)
    v32 = v33 >> 1;
  if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
    v34 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v34 = v32;
  if (v34)
  {
    if (v34 >> 62)
      goto LABEL_115;
    v35 = operator new(4 * v34);
    v36 = &v35[4 * v31];
    v37 = &v35[4 * v34];
    *v36 = 0;
    v29 = (uint64_t)(v36 + 1);
    v38 = v28 - v30;
    if (v28 == v30)
      goto LABEL_42;
    goto LABEL_36;
  }
  v35 = 0;
  v36 = (_DWORD *)(4 * v31);
  v37 = 0;
  *(_DWORD *)(4 * v31) = 0;
  v29 = 4 * v31 + 4;
  v38 = v28 - v30;
  if (v28 != v30)
  {
LABEL_36:
    v39 = v38 - 4;
    if (v39 < 0x2C)
      goto LABEL_121;
    if ((unint64_t)(v30 - v35) < 0x20)
      goto LABEL_121;
    v40 = (v39 >> 2) + 1;
    v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
    v42 = &v28[-v41];
    v36 = (_DWORD *)((char *)v36 - v41);
    v43 = &v35[4 * v31 - 16];
    v44 = v28 - 16;
    v45 = v40 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v46 = *(_OWORD *)v44;
      *(v43 - 1) = *((_OWORD *)v44 - 1);
      *v43 = v46;
      v43 -= 2;
      v44 -= 32;
      v45 -= 8;
    }
    while (v45);
    v28 = v42;
    if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_121:
      do
      {
        v47 = *((_DWORD *)v28 - 1);
        v28 -= 4;
        *--v36 = v47;
      }
      while (v28 != v30);
    }
  }
LABEL_42:
  *(_QWORD *)(a1 + 264) = v36;
  *(_QWORD *)(a1 + 272) = v29;
  *(_QWORD *)(a1 + 280) = v37;
  if (v30)
    operator delete(v30);
LABEL_44:
  *(_QWORD *)(a1 + 272) = v29;
  v48 = *(_QWORD *)(a1 + 344);
  if (*(_QWORD *)(a1 + 352) - v48 == -4)
  {
    *(_QWORD *)(a1 + 352) = v48;
    __p[0] = 0;
    __p[1] = 0;
    v110 = 0;
    v49 = *(_QWORD **)(a1 + 376);
    if ((unint64_t)v49 >= *(_QWORD *)(a1 + 384))
      goto LABEL_46;
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)(a1 + 344), 1uLL);
    __p[0] = 0;
    __p[1] = 0;
    v110 = 0;
    v49 = *(_QWORD **)(a1 + 376);
    if ((unint64_t)v49 >= *(_QWORD *)(a1 + 384))
    {
LABEL_46:
      v50 = std::vector<std::vector<operations_research::sat::CircuitPropagator::Arc>>::__push_back_slow_path<std::vector<operations_research::sat::CircuitPropagator::Arc>>((char **)(a1 + 368), (uint64_t)__p);
      v51 = __p[0];
      *(_QWORD *)(a1 + 376) = v50;
      if (v51)
      {
        __p[1] = v51;
        operator delete(v51);
      }
      __p[0] = 0;
      __p[1] = 0;
      v110 = 0;
      v52 = *(_QWORD **)(a1 + 400);
      if ((unint64_t)v52 < *(_QWORD *)(a1 + 408))
        goto LABEL_49;
      goto LABEL_52;
    }
  }
  *v49 = 0;
  v49[1] = 0;
  v49[2] = 0;
  v49[2] = v110;
  *(_QWORD *)(a1 + 376) = v49 + 3;
  __p[0] = 0;
  __p[1] = 0;
  v110 = 0;
  v52 = *(_QWORD **)(a1 + 400);
  if ((unint64_t)v52 < *(_QWORD *)(a1 + 408))
  {
LABEL_49:
    *v52 = 0;
    v52[1] = 0;
    v52[2] = 0;
    *(_OWORD *)v52 = *(_OWORD *)__p;
    v52[2] = v110;
    *(_QWORD *)(a1 + 400) = v52 + 3;
    goto LABEL_54;
  }
LABEL_52:
  v53 = std::vector<std::vector<operations_research::sat::CircuitPropagator::Arc>>::__push_back_slow_path<std::vector<operations_research::sat::CircuitPropagator::Arc>>((char **)(a1 + 392), (uint64_t)__p);
  v54 = __p[0];
  *(_QWORD *)(a1 + 400) = v53;
  if (v54)
  {
    __p[1] = v54;
    operator delete(v54);
  }
LABEL_54:
  __p[0] = 0;
  __p[1] = 0;
  v110 = 0;
  v55 = *(_QWORD **)(a1 + 424);
  if ((unint64_t)v55 >= *(_QWORD *)(a1 + 432))
  {
    v56 = std::vector<std::vector<operations_research::sat::CircuitPropagator::Arc>>::__push_back_slow_path<std::vector<operations_research::sat::CircuitPropagator::Arc>>((char **)(a1 + 416), (uint64_t)__p);
    v57 = __p[0];
    *(_QWORD *)(a1 + 424) = v56;
    if (v57)
    {
      __p[1] = v57;
      operator delete(v57);
    }
  }
  else
  {
    *v55 = 0;
    v55[1] = 0;
    v55[2] = 0;
    *(_OWORD *)v55 = *(_OWORD *)__p;
    v55[2] = v110;
    *(_QWORD *)(a1 + 424) = v55 + 3;
  }
  v59 = *(char **)(a1 + 448);
  v58 = *(_QWORD *)(a1 + 456);
  if ((unint64_t)v59 >= v58)
  {
    v61 = *(char **)(a1 + 440);
    v62 = (v59 - v61) >> 2;
    v63 = v62 + 1;
    if ((unint64_t)(v62 + 1) >> 62)
      goto LABEL_114;
    v64 = v58 - (_QWORD)v61;
    if (v64 >> 1 > v63)
      v63 = v64 >> 1;
    if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL)
      v65 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v65 = v63;
    if (v65)
    {
      if (v65 >> 62)
        goto LABEL_115;
      v66 = operator new(4 * v65);
    }
    else
    {
      v66 = 0;
    }
    v67 = &v66[4 * v62];
    v68 = &v66[4 * v65];
    *v67 = 1;
    v60 = v67 + 1;
    if (v59 != v61)
    {
      v69 = v59 - v61 - 4;
      if (v69 < 0x2C)
        goto LABEL_122;
      if ((unint64_t)(v61 - v66) < 0x20)
        goto LABEL_122;
      v70 = (v69 >> 2) + 1;
      v71 = 4 * (v70 & 0x7FFFFFFFFFFFFFF8);
      v72 = &v59[-v71];
      v67 = (_DWORD *)((char *)v67 - v71);
      v73 = &v66[4 * v62 - 16];
      v74 = v59 - 16;
      v75 = v70 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v76 = *(_OWORD *)v74;
        *(v73 - 1) = *((_OWORD *)v74 - 1);
        *v73 = v76;
        v73 -= 2;
        v74 -= 32;
        v75 -= 8;
      }
      while (v75);
      v59 = v72;
      if (v70 != (v70 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_122:
        do
        {
          v77 = *((_DWORD *)v59 - 1);
          v59 -= 4;
          *--v67 = v77;
        }
        while (v59 != v61);
      }
    }
    *(_QWORD *)(a1 + 440) = v67;
    *(_QWORD *)(a1 + 448) = v60;
    *(_QWORD *)(a1 + 456) = v68;
    if (v61)
      operator delete(v61);
  }
  else
  {
    *(_DWORD *)v59 = 1;
    v60 = v59 + 4;
  }
  *(_QWORD *)(a1 + 448) = v60;
  v79 = *(char **)(a1 + 472);
  v78 = *(_QWORD *)(a1 + 480);
  if ((unint64_t)v79 < v78)
  {
    *(_DWORD *)v79 = 1;
    v80 = v79 + 4;
    goto LABEL_100;
  }
  v81 = *(char **)(a1 + 464);
  v82 = (v79 - v81) >> 2;
  v83 = v82 + 1;
  if ((unint64_t)(v82 + 1) >> 62)
LABEL_114:
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v84 = v78 - (_QWORD)v81;
  if (v84 >> 1 > v83)
    v83 = v84 >> 1;
  if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL)
    v85 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v85 = v83;
  if (v85)
  {
    if (!(v85 >> 62))
    {
      v86 = operator new(4 * v85);
      goto LABEL_91;
    }
LABEL_115:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  v86 = 0;
LABEL_91:
  v87 = &v86[4 * v82];
  v88 = &v86[4 * v85];
  *v87 = 1;
  v80 = v87 + 1;
  if (v79 != v81)
  {
    v89 = v79 - v81 - 4;
    if (v89 < 0x2C)
      goto LABEL_123;
    if ((unint64_t)(v81 - v86) < 0x20)
      goto LABEL_123;
    v90 = (v89 >> 2) + 1;
    v91 = 4 * (v90 & 0x7FFFFFFFFFFFFFF8);
    v92 = &v79[-v91];
    v87 = (_DWORD *)((char *)v87 - v91);
    v93 = &v86[4 * v82 - 16];
    v94 = v79 - 16;
    v95 = v90 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v96 = *(_OWORD *)v94;
      *(v93 - 1) = *((_OWORD *)v94 - 1);
      *v93 = v96;
      v93 -= 2;
      v94 -= 32;
      v95 -= 8;
    }
    while (v95);
    v79 = v92;
    if (v90 != (v90 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_123:
      do
      {
        v97 = *((_DWORD *)v79 - 1);
        v79 -= 4;
        *--v87 = v97;
      }
      while (v79 != v81);
    }
  }
  *(_QWORD *)(a1 + 464) = v87;
  *(_QWORD *)(a1 + 472) = v80;
  *(_QWORD *)(a1 + 480) = v88;
  if (v81)
    operator delete(v81);
LABEL_100:
  *(_QWORD *)(a1 + 472) = v80;
  v99 = *(_QWORD *)(a1 + 248);
  v98 = *(_QWORD *)(a1 + 256);
  if (v99 == v98 << 6)
  {
    if ((uint64_t)(v99 + 1) < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v100 = v98 << 7;
    if (v100 <= (v99 & 0xFFFFFFFFFFFFFFC0) + 64)
      v100 = (v99 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v99 <= 0x3FFFFFFFFFFFFFFELL)
      v101 = v100;
    else
      v101 = 0x7FFFFFFFFFFFFFFFLL;
    std::vector<BOOL>::reserve(a1 + 240, v101);
    v99 = *(_QWORD *)(a1 + 248);
  }
  v102 = *(_QWORD **)(a1 + 216);
  v103 = v102[8];
  v104 = v102[7];
  *(_QWORD *)(a1 + 248) = v99 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 240) + ((v99 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v99;
  if (v103 == v104)
    v105 = 0;
  else
    v105 = ((v103 - v104) << 7) - 1;
  v106 = v102[11];
  v107 = v106 + v102[10];
  if (v105 == v107)
  {
    std::deque<int>::__add_back_capacity((uint64_t)(v102 + 6));
    v104 = v102[7];
    v106 = v102[11];
    v107 = v102[10] + v106;
  }
  result = (unint64_t)v9 >> 3;
  *(_DWORD *)(*(_QWORD *)(v104 + ((v107 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v107 & 0x3FF)) = (unint64_t)v9 >> 3;
  v102[11] = v106 + 1;
  return result;
}

void sub_22DB69748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::GenericLiteralWatcher::SetPropagatorPriority(operations_research::sat::GenericLiteralWatcher *this, int a2, int a3)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t i;

  v4 = (char *)this + 216;
  v5 = *((_QWORD *)this + 27);
  *(_DWORD *)(*((_QWORD *)this + 55) + 4 * a2) = a3;
  v6 = *((_QWORD *)this + 28);
  v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 4);
  if (v7 <= a3)
  {
    v8 = a3 + 1;
    if (v8 <= v7)
    {
      if (v8 < v7)
      {
        for (i = v5 + 48 * (int)v8; v6 != i; v6 = std::deque<int>::~deque[abi:ne180100](v6 - 48))
          ;
        *((_QWORD *)this + 28) = i;
      }
    }
    else
    {
      std::vector<std::deque<int>>::__append((uint64_t)v4, v8 - v7);
    }
  }
}

uint64_t operations_research::sat::GenericLiteralWatcher::NotifyThatPropagatorMayNotReachFixedPointInOnePass(uint64_t this, int a2)
{
  *(_DWORD *)(*(_QWORD *)(this + 464) + 4 * a2) = 0;
  return this;
}

void operations_research::sat::GenericLiteralWatcher::AlwaysCallAtLevelZero(operations_research::sat::GenericLiteralWatcher *this, int a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _DWORD *v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  int v24;

  v5 = (char *)*((_QWORD *)this + 62);
  v4 = *((_QWORD *)this + 63);
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_DWORD *)v5 = a2;
    v7 = (uint64_t)(v5 + 4);
    goto LABEL_22;
  }
  v8 = (char *)*((_QWORD *)this + 61);
  v9 = (v5 - v8) >> 2;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 62)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v11 = v4 - (_QWORD)v8;
  if (v11 >> 1 > v10)
    v10 = v11 >> 1;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
    v12 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 62)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v13 = operator new(4 * v12);
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *v14 = a2;
    v7 = (uint64_t)(v14 + 1);
    v16 = v5 - v8;
    if (v5 == v8)
      goto LABEL_20;
    goto LABEL_14;
  }
  v13 = 0;
  v14 = (_DWORD *)(4 * v9);
  v15 = 0;
  *(_DWORD *)(4 * v9) = a2;
  v7 = 4 * v9 + 4;
  v16 = v5 - v8;
  if (v5 != v8)
  {
LABEL_14:
    v17 = v16 - 4;
    if (v17 < 0x2C)
      goto LABEL_27;
    if ((unint64_t)(v8 - v13) < 0x20)
      goto LABEL_27;
    v18 = (v17 >> 2) + 1;
    v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
    v6 = &v5[-v19];
    v14 = (_DWORD *)((char *)v14 - v19);
    v20 = &v13[4 * v9 - 16];
    v21 = v5 - 16;
    v22 = v18 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v23 = *(_OWORD *)v21;
      *(v20 - 1) = *((_OWORD *)v21 - 1);
      *v20 = v23;
      v20 -= 2;
      v21 -= 32;
      v22 -= 8;
    }
    while (v22);
    if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_27:
      do
      {
        v24 = *((_DWORD *)v6 - 1);
        v6 -= 4;
        *--v14 = v24;
      }
      while (v6 != v8);
    }
  }
LABEL_20:
  *((_QWORD *)this + 61) = v14;
  *((_QWORD *)this + 62) = v7;
  *((_QWORD *)this + 63) = v15;
  if (v8)
    operator delete(v8);
LABEL_22:
  *((_QWORD *)this + 62) = v7;
}

void operations_research::sat::GenericLiteralWatcher::RegisterReversibleClass(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v4 = (_QWORD *)(*(_QWORD *)(a1 + 368) + 24 * a2);
  v5 = v4 + 1;
  v6 = (char *)v4[1];
  v7 = v6;
  v8 = v4[2];
  if ((unint64_t)v6 < v8)
  {
    *(_QWORD *)v6 = a3;
    v9 = (uint64_t)(v6 + 8);
    goto LABEL_23;
  }
  v10 = (char *)*v4;
  v11 = (uint64_t)&v6[-*v4];
  v12 = v11 >> 3;
  v13 = (v11 >> 3) + 1;
  if (v13 >> 61)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v14 = v8 - (_QWORD)v10;
  if (v14 >> 2 > v13)
    v13 = v14 >> 2;
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
    v15 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v15 = v13;
  if (v15)
  {
    if (v15 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v16 = operator new(8 * v15);
    v17 = &v16[8 * v12];
    v18 = &v16[8 * v15];
    *v17 = a3;
    v9 = (uint64_t)(v17 + 1);
    v19 = (char *)(v6 - v10);
    if (v6 == v10)
      goto LABEL_21;
    goto LABEL_14;
  }
  v16 = 0;
  v17 = (_QWORD *)(8 * v12);
  v18 = 0;
  *(_QWORD *)(8 * v12) = a3;
  v9 = 8 * v12 + 8;
  v19 = (char *)(v6 - v10);
  if (v6 != v10)
  {
LABEL_14:
    v20 = (unint64_t)(v19 - 8);
    if (v20 < 0x58)
      goto LABEL_28;
    if ((unint64_t)(v6 - v16 - v11) < 0x20)
      goto LABEL_28;
    v21 = (v20 >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = &v6[-v22];
    v17 = (_QWORD *)((char *)v17 - v22);
    v23 = &v16[8 * v12 - 16];
    v24 = v6 - 16;
    v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v27 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *--v17 = v27;
      }
      while (v7 != v10);
    }
    v7 = (char *)*v4;
  }
LABEL_21:
  *v4 = v17;
  *v5 = v9;
  v4[2] = v18;
  if (v7)
    operator delete(v7);
LABEL_23:
  *v5 = v9;
}

void operations_research::sat::GenericLiteralWatcher::RegisterReversibleInt(operations_research::sat::GenericLiteralWatcher *this, int a2, int *a3)
{
  _QWORD *v4;
  uint64_t *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v4 = (_QWORD *)(*((_QWORD *)this + 49) + 24 * a2);
  v5 = v4 + 1;
  v6 = (char *)v4[1];
  v7 = v6;
  v8 = v4[2];
  if ((unint64_t)v6 < v8)
  {
    *(_QWORD *)v6 = a3;
    v9 = (uint64_t)(v6 + 8);
    goto LABEL_23;
  }
  v10 = (char *)*v4;
  v11 = (uint64_t)&v6[-*v4];
  v12 = v11 >> 3;
  v13 = (v11 >> 3) + 1;
  if (v13 >> 61)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v14 = v8 - (_QWORD)v10;
  if (v14 >> 2 > v13)
    v13 = v14 >> 2;
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
    v15 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v15 = v13;
  if (v15)
  {
    if (v15 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v16 = operator new(8 * v15);
    v17 = &v16[8 * v12];
    v18 = &v16[8 * v15];
    *v17 = a3;
    v9 = (uint64_t)(v17 + 1);
    v19 = (char *)(v6 - v10);
    if (v6 == v10)
      goto LABEL_21;
    goto LABEL_14;
  }
  v16 = 0;
  v17 = (_QWORD *)(8 * v12);
  v18 = 0;
  *(_QWORD *)(8 * v12) = a3;
  v9 = 8 * v12 + 8;
  v19 = (char *)(v6 - v10);
  if (v6 != v10)
  {
LABEL_14:
    v20 = (unint64_t)(v19 - 8);
    if (v20 < 0x58)
      goto LABEL_28;
    if ((unint64_t)(v6 - v16 - v11) < 0x20)
      goto LABEL_28;
    v21 = (v20 >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = &v6[-v22];
    v17 = (_QWORD *)((char *)v17 - v22);
    v23 = &v16[8 * v12 - 16];
    v24 = v6 - 16;
    v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v27 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *--v17 = v27;
      }
      while (v7 != v10);
    }
    v7 = (char *)*v4;
  }
LABEL_21:
  *v4 = v17;
  *v5 = v9;
  v4[2] = v18;
  if (v7)
    operator delete(v7);
LABEL_23:
  *v5 = v9;
}

void operations_research::sat::ExcludeCurrentSolutionWithoutIgnoredVariableAndBacktrack(_QWORD *a1@<X8>)
{
  *a1 = &off_24F986310;
  a1[3] = a1;
}

uint64_t google::MakeCheckOpString<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,unsigned long>(int a1, int a2, char *a3)
{
  uint64_t v3;
  uint64_t v5;

  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5, a3);
  std::ostream::operator<<();
  google::base::CheckOpMessageBuilder::ForVar2((google::base::CheckOpMessageBuilder *)&v5);
  std::ostream::operator<<();
  v3 = google::base::CheckOpMessageBuilder::NewString((google::base::CheckOpMessageBuilder *)&v5);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5);
  return v3;
}

void sub_22DB69D70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

void std::vector<operations_research::sat::IntegerEncoder::ValueLiteralPair>::__append(void **a1, unint64_t a2)
{
  _BYTE *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *i;
  uint64_t v23;
  int v24;
  void *v25;
  unint64_t v26;
  uint64_t v27;

  v5 = a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)v5) >> 2) >= a2)
  {
    if (!a2)
    {
LABEL_29:
      a1[1] = v5;
      return;
    }
    v12 = (_QWORD *)((char *)v5 + 12 * a2);
    v13 = 12 * a2 - 12;
    if (v13 >= 0xC)
    {
      v26 = v13 / 0xC + 1;
      v14 = (_QWORD *)((char *)v5 + 12 * (v26 & 0x3FFFFFFFFFFFFFFELL));
      v27 = v26 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        *v5 = 0;
        *(_QWORD *)((char *)v5 + 12) = 0;
        v5 += 3;
        v27 -= 2;
      }
      while (v27);
      if (v26 == (v26 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_28;
    }
    else
    {
      v14 = a1[1];
    }
    do
    {
      *v14 = 0;
      v14 = (_QWORD *)((char *)v14 + 12);
    }
    while (v14 != v12);
LABEL_28:
    v5 = v12;
    goto LABEL_29;
  }
  v6 = *a1;
  v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a1) >> 2);
  v8 = v7 + a2;
  if (v7 + a2 > 0x1555555555555555)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)v6) >> 2);
  if (2 * v9 > v8)
    v8 = 2 * v9;
  if (v9 >= 0xAAAAAAAAAAAAAAALL)
    v10 = 0x1555555555555555;
  else
    v10 = v8;
  if (v10)
  {
    if (v10 > 0x1555555555555555)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v11 = (char *)operator new(12 * v10);
  }
  else
  {
    v11 = 0;
  }
  v15 = &v11[12 * v7];
  v16 = &v15[12 * a2];
  v17 = 12 * a2 - 12;
  v18 = v15;
  if (v17 < 0xC)
    goto LABEL_35;
  v19 = v17 / 0xC + 1;
  v18 = &v15[12 * (v19 & 0x3FFFFFFFFFFFFFFELL)];
  v20 = v19 & 0x3FFFFFFFFFFFFFFELL;
  v21 = &v11[12 * v7];
  do
  {
    *(_QWORD *)v21 = 0;
    *(_QWORD *)(v21 + 12) = 0;
    v21 += 24;
    v20 -= 2;
  }
  while (v20);
  if (v19 != (v19 & 0x3FFFFFFFFFFFFFFELL))
  {
LABEL_35:
    do
    {
      *(_QWORD *)v18 = 0;
      v18 += 12;
    }
    while (v18 != v16);
  }
  for (i = &v11[12 * v10]; v5 != v6; *((_DWORD *)v15 + 2) = v24)
  {
    v23 = *(_QWORD *)((char *)v5 - 12);
    v5 = (_QWORD *)((char *)v5 - 12);
    v24 = *((_DWORD *)v5 + 2);
    *(_QWORD *)(v15 - 12) = v23;
    v15 -= 12;
  }
  v25 = *a1;
  *a1 = v15;
  a1[1] = v16;
  a1[2] = i;
  if (v25)
    operator delete(v25);
}

uint64_t *std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::IntegerEncoder::ValueLiteralPair *,false>(uint64_t *result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  int v100;
  uint64_t *v101;
  BOOL v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  int v114;
  int v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  int v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  int v130;
  uint64_t v131;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;

  v8 = result;
LABEL_2:
  v9 = (uint64_t *)((char *)a2 - 12);
  v10 = a2 - 3;
  v11 = (uint64_t *)((char *)a2 - 36);
  v12 = (unint64_t)v8;
  while (2)
  {
    v8 = (uint64_t *)v12;
    v13 = (uint64_t)a2 - v12;
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v12) >> 2);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v91 = *(uint64_t *)((char *)a2 - 12);
        v90 = (char *)a2 - 12;
        if (v91 < *(_QWORD *)v12)
          goto LABEL_100;
        return result;
      case 3uLL:
        v92 = v12 + 12;
        v93 = *(_QWORD *)(v12 + 12);
        v95 = *(uint64_t *)((char *)a2 - 12);
        v90 = (char *)a2 - 12;
        v94 = v95;
        if (v93 >= *(_QWORD *)v12)
        {
          if (v94 < v93)
          {
            v112 = *(_QWORD *)v92;
            v113 = *(_DWORD *)(v12 + 20);
            v114 = *((_DWORD *)v90 + 2);
            *(_QWORD *)v92 = *(_QWORD *)v90;
            *(_DWORD *)(v12 + 20) = v114;
            *((_DWORD *)v90 + 2) = v113;
            *(_QWORD *)v90 = v112;
            goto LABEL_144;
          }
        }
        else if (v94 >= v93)
        {
          v180 = *(_DWORD *)(v12 + 8);
          v155 = *(_QWORD *)v12;
          *(_QWORD *)v12 = *(_QWORD *)v92;
          *(_DWORD *)(v12 + 8) = *(_DWORD *)(v12 + 20);
          *(_QWORD *)v92 = v155;
          *(_DWORD *)(v12 + 20) = v180;
          if (*(_QWORD *)v90 < *(_QWORD *)(v12 + 12))
          {
            v123 = *(_QWORD *)v92;
            v124 = *(_DWORD *)(v12 + 20);
            v125 = *((_DWORD *)v90 + 2);
            *(_QWORD *)v92 = *(_QWORD *)v90;
            *(_DWORD *)(v12 + 20) = v125;
            *((_DWORD *)v90 + 2) = v124;
            *(_QWORD *)v90 = v123;
          }
        }
        else
        {
LABEL_100:
          v177 = *(_DWORD *)(v12 + 8);
          v152 = *(_QWORD *)v12;
          v96 = *(_QWORD *)v90;
          *(_DWORD *)(v12 + 8) = *((_DWORD *)v90 + 2);
          *(_QWORD *)v12 = v96;
          *((_DWORD *)v90 + 2) = v177;
          *(_QWORD *)v90 = v152;
        }
        return result;
      case 4uLL:
        v92 = v12 + 12;
        v97 = *(_QWORD *)(v12 + 12);
        v98 = (uint64_t *)(v12 + 24);
        v99 = *(_QWORD *)(v12 + 24);
        if (v97 >= *(_QWORD *)v12)
        {
          if (v99 < v97)
          {
            v115 = *(_DWORD *)(v12 + 20);
            v116 = *(_QWORD *)v92;
            *(_QWORD *)v92 = *v98;
            *(_DWORD *)(v12 + 20) = *(_DWORD *)(v12 + 32);
            *v98 = v116;
            *(_DWORD *)(v12 + 32) = v115;
            if (*(_QWORD *)(v12 + 12) < *(_QWORD *)v12)
            {
              v179 = *(_DWORD *)(v12 + 8);
              v154 = *(_QWORD *)v12;
              *(_QWORD *)v12 = *(_QWORD *)v92;
              *(_DWORD *)(v12 + 8) = *(_DWORD *)(v12 + 20);
              *(_QWORD *)v92 = v154;
              *(_DWORD *)(v12 + 20) = v179;
            }
          }
        }
        else
        {
          if (v99 >= v97)
          {
            v181 = *(_DWORD *)(v12 + 8);
            v156 = *(_QWORD *)v12;
            *(_QWORD *)v12 = *(_QWORD *)v92;
            *(_DWORD *)(v12 + 8) = *(_DWORD *)(v12 + 20);
            *(_QWORD *)v92 = v156;
            *(_DWORD *)(v12 + 20) = v181;
            if (v99 >= *(_QWORD *)(v12 + 12))
              goto LABEL_141;
            v100 = *(_DWORD *)(v12 + 20);
            v126 = *(_QWORD *)v92;
            *(_QWORD *)v92 = *v98;
            *(_DWORD *)(v12 + 20) = *(_DWORD *)(v12 + 32);
            *v98 = v126;
          }
          else
          {
            v178 = *(_DWORD *)(v12 + 8);
            v153 = *(_QWORD *)v12;
            *(_QWORD *)v12 = *v98;
            *(_DWORD *)(v12 + 8) = *(_DWORD *)(v12 + 32);
            *v98 = v153;
            v100 = v178;
          }
          *(_DWORD *)(v12 + 32) = v100;
        }
LABEL_141:
        if (*v9 < *v98)
        {
          v127 = *v98;
          v128 = *(_DWORD *)(v12 + 32);
          v129 = *((_DWORD *)a2 - 1);
          *v98 = *v9;
          *(_DWORD *)(v12 + 32) = v129;
          *((_DWORD *)a2 - 1) = v128;
          *v9 = v127;
          if (*v98 < *(_QWORD *)v92)
          {
            v130 = *(_DWORD *)(v12 + 20);
            v131 = *(_QWORD *)v92;
            *(_QWORD *)v92 = *v98;
            *(_DWORD *)(v12 + 20) = *(_DWORD *)(v12 + 32);
            *v98 = v131;
            *(_DWORD *)(v12 + 32) = v130;
LABEL_144:
            if (*(_QWORD *)(v12 + 12) < *(_QWORD *)v12)
            {
              v182 = *(_DWORD *)(v12 + 8);
              v157 = *(_QWORD *)v12;
              *(_QWORD *)v12 = *(_QWORD *)v92;
              *(_DWORD *)(v12 + 8) = *(_DWORD *)(v92 + 8);
              *(_QWORD *)v92 = v157;
              *(_DWORD *)(v92 + 8) = v182;
            }
          }
        }
        return result;
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::IntegerEncoder::ValueLiteralPair *>((uint64_t *)v12, (uint64_t *)(v12 + 12), (uint64_t *)(v12 + 24), (uint64_t *)(v12 + 36), (uint64_t *)((char *)a2 - 12));
      default:
        if (v13 > 287)
        {
          if (!a4)
          {
            if ((uint64_t *)v12 != a2)
              return std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::IntegerEncoder::ValueLiteralPair *,operations_research::sat::IntegerEncoder::ValueLiteralPair *>(v12, a2, a2);
            return result;
          }
          v15 = v14 >> 1;
          v16 = v12 + 12 * (v14 >> 1);
          v17 = *v9;
          if ((unint64_t)v13 < 0x601)
          {
            v20 = *(_QWORD *)v12;
            if (*(_QWORD *)v12 >= *(_QWORD *)v16)
            {
              if (v17 < v20)
              {
                v162 = *(_DWORD *)(v12 + 8);
                v137 = *(_QWORD *)v12;
                v24 = *v9;
                *(_DWORD *)(v12 + 8) = *((_DWORD *)a2 - 1);
                *(_QWORD *)v12 = v24;
                *((_DWORD *)a2 - 1) = v162;
                *v9 = v137;
                if (*(_QWORD *)v12 < *(_QWORD *)v16)
                {
                  v163 = *(_DWORD *)(v16 + 8);
                  v138 = *(_QWORD *)v16;
                  v25 = *(_QWORD *)v12;
                  *(_DWORD *)(v16 + 8) = *(_DWORD *)(v12 + 8);
                  *(_QWORD *)v16 = v25;
                  v26 = v138;
                  *(_DWORD *)(v12 + 8) = v163;
                  *(_QWORD *)v12 = v138;
                  --a4;
                  if ((a5 & 1) != 0)
                    goto LABEL_55;
                  goto LABEL_54;
                }
              }
              goto LABEL_32;
            }
            if (v17 >= v20)
            {
              v166 = *(_DWORD *)(v16 + 8);
              v141 = *(_QWORD *)v16;
              v42 = *(_QWORD *)v12;
              *(_DWORD *)(v16 + 8) = *(_DWORD *)(v12 + 8);
              *(_QWORD *)v16 = v42;
              *(_DWORD *)(v12 + 8) = v166;
              *(_QWORD *)v12 = v141;
              if (*v9 >= *(_QWORD *)v12)
                goto LABEL_32;
              v159 = *(_DWORD *)(v12 + 8);
              v134 = *(_QWORD *)v12;
              v43 = *v9;
              *(_DWORD *)(v12 + 8) = *((_DWORD *)a2 - 1);
              *(_QWORD *)v12 = v43;
            }
            else
            {
              v159 = *(_DWORD *)(v16 + 8);
              v134 = *(_QWORD *)v16;
              v21 = *v9;
              *(_DWORD *)(v16 + 8) = *((_DWORD *)a2 - 1);
              *(_QWORD *)v16 = v21;
            }
            *((_DWORD *)a2 - 1) = v159;
            *v9 = v134;
LABEL_32:
            --a4;
            v26 = *(_QWORD *)v12;
            if ((a5 & 1) != 0)
              goto LABEL_55;
            goto LABEL_54;
          }
          v18 = *(_QWORD *)v16;
          if (*(_QWORD *)v16 >= *(_QWORD *)v12)
          {
            if (v17 < v18)
            {
              v160 = *(_DWORD *)(v16 + 8);
              v135 = *(_QWORD *)v16;
              v22 = *v9;
              *(_DWORD *)(v16 + 8) = *((_DWORD *)a2 - 1);
              *(_QWORD *)v16 = v22;
              *((_DWORD *)a2 - 1) = v160;
              *v9 = v135;
              if (*(_QWORD *)v16 < *(_QWORD *)v12)
              {
                v161 = *(_DWORD *)(v12 + 8);
                v136 = *(_QWORD *)v12;
                v23 = *(_QWORD *)v16;
                *(_DWORD *)(v12 + 8) = *(_DWORD *)(v16 + 8);
                *(_QWORD *)v12 = v23;
                *(_DWORD *)(v16 + 8) = v161;
                *(_QWORD *)v16 = v136;
              }
            }
          }
          else
          {
            if (v17 >= v18)
            {
              v164 = *(_DWORD *)(v12 + 8);
              v139 = *(_QWORD *)v12;
              v27 = *(_QWORD *)v16;
              *(_DWORD *)(v12 + 8) = *(_DWORD *)(v16 + 8);
              *(_QWORD *)v12 = v27;
              *(_DWORD *)(v16 + 8) = v164;
              *(_QWORD *)v16 = v139;
              if (*v9 >= *(_QWORD *)v16)
                goto LABEL_23;
              v158 = *(_DWORD *)(v16 + 8);
              v133 = *(_QWORD *)v16;
              v28 = *v9;
              *(_DWORD *)(v16 + 8) = *((_DWORD *)a2 - 1);
              *(_QWORD *)v16 = v28;
            }
            else
            {
              v158 = *(_DWORD *)(v12 + 8);
              v133 = *(_QWORD *)v12;
              v19 = *v9;
              *(_DWORD *)(v12 + 8) = *((_DWORD *)a2 - 1);
              *(_QWORD *)v12 = v19;
            }
            *((_DWORD *)a2 - 1) = v158;
            *v9 = v133;
          }
LABEL_23:
          v29 = (uint64_t *)(v12 + 12);
          v30 = v12 + 12 * v15;
          v33 = *(_QWORD *)(v30 - 12);
          v31 = v30 - 12;
          v32 = v33;
          v34 = *v10;
          if (v33 >= *(_QWORD *)(v12 + 12))
          {
            if (v34 < v32)
            {
              v165 = *(_DWORD *)(v31 + 8);
              v140 = *(_QWORD *)v31;
              v38 = *v10;
              *(_DWORD *)(v31 + 8) = *((_DWORD *)a2 - 4);
              *(_QWORD *)v31 = v38;
              *((_DWORD *)a2 - 4) = v165;
              *v10 = v140;
              if (*(_QWORD *)v31 < *v29)
              {
                v39 = *v29;
                v40 = *(_DWORD *)(v12 + 20);
                v41 = *(_DWORD *)(v31 + 8);
                *v29 = *(_QWORD *)v31;
                *(_DWORD *)(v12 + 20) = v41;
                *(_DWORD *)(v31 + 8) = v40;
                *(_QWORD *)v31 = v39;
              }
            }
          }
          else if (v34 >= v32)
          {
            v44 = *v29;
            v45 = *(_DWORD *)(v12 + 20);
            v46 = *(_DWORD *)(v31 + 8);
            *v29 = *(_QWORD *)v31;
            *(_DWORD *)(v12 + 20) = v46;
            *(_DWORD *)(v31 + 8) = v45;
            *(_QWORD *)v31 = v44;
            if (*v10 < v44)
            {
              v167 = *(_DWORD *)(v31 + 8);
              v142 = *(_QWORD *)v31;
              v47 = *v10;
              *(_DWORD *)(v31 + 8) = *((_DWORD *)a2 - 4);
              *(_QWORD *)v31 = v47;
              *((_DWORD *)a2 - 4) = v167;
              *v10 = v142;
            }
          }
          else
          {
            v35 = *v29;
            v36 = *(_DWORD *)(v12 + 20);
            v37 = *((_DWORD *)a2 - 4);
            *v29 = *v10;
            *(_DWORD *)(v12 + 20) = v37;
            *((_DWORD *)a2 - 4) = v36;
            *v10 = v35;
          }
          v48 = (uint64_t *)(v12 + 24);
          v49 = v12 + 12 * v15;
          v52 = *(_QWORD *)(v49 + 12);
          v50 = v49 + 12;
          v51 = v52;
          v53 = *v11;
          if (v52 >= *(_QWORD *)(v12 + 24))
          {
            if (v53 < v51)
            {
              v168 = *(_DWORD *)(v50 + 8);
              v143 = *(_QWORD *)v50;
              v57 = *v11;
              *(_DWORD *)(v50 + 8) = *((_DWORD *)a2 - 7);
              *(_QWORD *)v50 = v57;
              *((_DWORD *)a2 - 7) = v168;
              *v11 = v143;
              if (*(_QWORD *)v50 < *v48)
              {
                v58 = *v48;
                v59 = *(_DWORD *)(v12 + 32);
                v60 = *(_DWORD *)(v50 + 8);
                *v48 = *(_QWORD *)v50;
                *(_DWORD *)(v12 + 32) = v60;
                *(_DWORD *)(v50 + 8) = v59;
                *(_QWORD *)v50 = v58;
              }
            }
          }
          else if (v53 >= v51)
          {
            v61 = *v48;
            v62 = *(_DWORD *)(v12 + 32);
            v63 = *(_DWORD *)(v50 + 8);
            *v48 = *(_QWORD *)v50;
            *(_DWORD *)(v12 + 32) = v63;
            *(_DWORD *)(v50 + 8) = v62;
            *(_QWORD *)v50 = v61;
            if (*v11 < v61)
            {
              v169 = *(_DWORD *)(v50 + 8);
              v144 = *(_QWORD *)v50;
              v64 = *v11;
              *(_DWORD *)(v50 + 8) = *((_DWORD *)a2 - 7);
              *(_QWORD *)v50 = v64;
              *((_DWORD *)a2 - 7) = v169;
              *v11 = v144;
            }
          }
          else
          {
            v54 = *v48;
            v55 = *(_DWORD *)(v12 + 32);
            v56 = *((_DWORD *)a2 - 7);
            *v48 = *v11;
            *(_DWORD *)(v12 + 32) = v56;
            *((_DWORD *)a2 - 7) = v55;
            *v11 = v54;
          }
          v65 = *(_QWORD *)v16;
          v66 = *(_QWORD *)v50;
          if (*(_QWORD *)v16 >= *(_QWORD *)v31)
          {
            if (v66 < v65)
            {
              v171 = *(_DWORD *)(v16 + 8);
              v146 = *(_QWORD *)v16;
              *(_QWORD *)v16 = *(_QWORD *)v50;
              *(_DWORD *)(v16 + 8) = *(_DWORD *)(v50 + 8);
              *(_DWORD *)(v50 + 8) = v171;
              *(_QWORD *)v50 = v146;
              if (*(_QWORD *)v16 < *(_QWORD *)v31)
              {
                v172 = *(_DWORD *)(v31 + 8);
                v147 = *(_QWORD *)v31;
                *(_QWORD *)v31 = *(_QWORD *)v16;
                *(_DWORD *)(v31 + 8) = *(_DWORD *)(v16 + 8);
                *(_DWORD *)(v16 + 8) = v172;
                *(_QWORD *)v16 = v147;
              }
            }
          }
          else
          {
            if (v66 >= v65)
            {
              v173 = *(_DWORD *)(v31 + 8);
              v148 = *(_QWORD *)v31;
              *(_QWORD *)v31 = *(_QWORD *)v16;
              *(_DWORD *)(v31 + 8) = *(_DWORD *)(v16 + 8);
              *(_DWORD *)(v16 + 8) = v173;
              *(_QWORD *)v16 = v148;
              if (*(_QWORD *)v50 >= *(_QWORD *)v16)
                goto LABEL_53;
              v170 = *(_DWORD *)(v16 + 8);
              v145 = *(_QWORD *)v16;
              *(_QWORD *)v16 = *(_QWORD *)v50;
              *(_DWORD *)(v16 + 8) = *(_DWORD *)(v50 + 8);
            }
            else
            {
              v170 = *(_DWORD *)(v31 + 8);
              v145 = *(_QWORD *)v31;
              *(_QWORD *)v31 = *(_QWORD *)v50;
              *(_DWORD *)(v31 + 8) = *(_DWORD *)(v50 + 8);
            }
            *(_DWORD *)(v50 + 8) = v170;
            *(_QWORD *)v50 = v145;
          }
LABEL_53:
          v174 = *(_DWORD *)(v12 + 8);
          v149 = *(_QWORD *)v12;
          v67 = *(_QWORD *)v16;
          *(_DWORD *)(v12 + 8) = *(_DWORD *)(v16 + 8);
          *(_QWORD *)v12 = v67;
          *(_DWORD *)(v16 + 8) = v174;
          *(_QWORD *)v16 = v149;
          --a4;
          v26 = *(_QWORD *)v12;
          if ((a5 & 1) != 0)
            goto LABEL_55;
LABEL_54:
          if (*(_QWORD *)(v12 - 12) >= v26)
          {
            if (v26 >= *v9)
            {
              v82 = v12 + 12;
              do
              {
                v12 = v82;
                if (v82 >= (unint64_t)a2)
                  break;
                v82 += 12;
              }
              while (v26 >= *(_QWORD *)v12);
            }
            else
            {
              do
              {
                v81 = *(_QWORD *)(v12 + 12);
                v12 += 12;
              }
              while (v26 >= v81);
            }
            v83 = a2;
            if (v12 < (unint64_t)a2)
            {
              v83 = a2;
              do
              {
                v84 = *(uint64_t *)((char *)v83 - 12);
                v83 = (uint64_t *)((char *)v83 - 12);
              }
              while (v26 < v84);
            }
            v85 = *((_DWORD *)v8 + 2);
            while (v12 < (unint64_t)v83)
            {
              v176 = *(_DWORD *)(v12 + 8);
              v151 = *(_QWORD *)v12;
              v86 = *v83;
              *(_DWORD *)(v12 + 8) = *((_DWORD *)v83 + 2);
              *(_QWORD *)v12 = v86;
              *((_DWORD *)v83 + 2) = v176;
              *v83 = v151;
              do
              {
                v87 = *(_QWORD *)(v12 + 12);
                v12 += 12;
              }
              while (v26 >= v87);
              do
              {
                v88 = *(uint64_t *)((char *)v83 - 12);
                v83 = (uint64_t *)((char *)v83 - 12);
              }
              while (v26 < v88);
            }
            if ((uint64_t *)(v12 - 12) != v8)
            {
              v89 = *(_QWORD *)(v12 - 12);
              *((_DWORD *)v8 + 2) = *(_DWORD *)(v12 - 4);
              *v8 = v89;
            }
            a5 = 0;
            *(_QWORD *)(v12 - 12) = v26;
            *(_DWORD *)(v12 - 4) = v85;
            continue;
          }
LABEL_55:
          v68 = 0;
          v69 = *(_DWORD *)(v12 + 8);
          do
          {
            v70 = *(_QWORD *)(v12 + v68 + 12);
            v68 += 12;
          }
          while (v70 < v26);
          v71 = v12 + v68;
          v72 = a2;
          if (v68 == 12)
          {
            v72 = a2;
            do
            {
              if (v71 >= (unint64_t)v72)
                break;
              v74 = *(uint64_t *)((char *)v72 - 12);
              v72 = (uint64_t *)((char *)v72 - 12);
            }
            while (v74 >= v26);
          }
          else
          {
            do
            {
              v73 = *(uint64_t *)((char *)v72 - 12);
              v72 = (uint64_t *)((char *)v72 - 12);
            }
            while (v73 >= v26);
          }
          v12 += v68;
          if (v71 < (unint64_t)v72)
          {
            v75 = (unint64_t)v72;
            do
            {
              v175 = *(_DWORD *)(v12 + 8);
              v150 = *(_QWORD *)v12;
              v76 = *(_QWORD *)v75;
              *(_DWORD *)(v12 + 8) = *(_DWORD *)(v75 + 8);
              *(_QWORD *)v12 = v76;
              *(_DWORD *)(v75 + 8) = v175;
              *(_QWORD *)v75 = v150;
              do
              {
                v77 = *(_QWORD *)(v12 + 12);
                v12 += 12;
              }
              while (v77 < v26);
              do
              {
                v78 = *(_QWORD *)(v75 - 12);
                v75 -= 12;
              }
              while (v78 >= v26);
            }
            while (v12 < v75);
          }
          if ((uint64_t *)(v12 - 12) != v8)
          {
            v79 = *(_QWORD *)(v12 - 12);
            *((_DWORD *)v8 + 2) = *(_DWORD *)(v12 - 4);
            *v8 = v79;
          }
          *(_QWORD *)(v12 - 12) = v26;
          *(_DWORD *)(v12 - 4) = v69;
          if (v71 < (unint64_t)v72)
            goto LABEL_74;
          v80 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::IntegerEncoder::ValueLiteralPair *>(v8, (uint64_t *)(v12 - 12));
          result = (uint64_t *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::IntegerEncoder::ValueLiteralPair *>((uint64_t *)v12, a2);
          if (!(_DWORD)result)
          {
            if (v80)
              continue;
LABEL_74:
            result = (uint64_t *)std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::IntegerEncoder::ValueLiteralPair *,false>(v8, v12 - 12, a3, a4, a5 & 1);
            a5 = 0;
            continue;
          }
          a2 = (uint64_t *)(v12 - 12);
          if (v80)
            return result;
          goto LABEL_2;
        }
        v101 = (uint64_t *)(v12 + 12);
        v103 = (uint64_t *)v12 == a2 || v101 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v103)
          {
            v104 = 0;
            v105 = v12;
            do
            {
              v107 = v101;
              v108 = *(_QWORD *)(v105 + 12);
              if (v108 < *(_QWORD *)v105)
              {
                v109 = *(_DWORD *)(v105 + 20);
                v110 = v104;
                do
                {
                  v111 = v12 + v110;
                  *(_QWORD *)(v111 + 12) = *(_QWORD *)(v12 + v110);
                  *(_DWORD *)(v111 + 20) = *(_DWORD *)(v12 + v110 + 8);
                  if (!v110)
                  {
                    v106 = v12;
                    goto LABEL_115;
                  }
                  v110 -= 12;
                }
                while (v108 < *(_QWORD *)(v111 - 12));
                v106 = v12 + v110 + 12;
LABEL_115:
                *(_QWORD *)v106 = v108;
                *(_DWORD *)(v106 + 8) = v109;
              }
              v101 = (uint64_t *)((char *)v107 + 12);
              v104 += 12;
              v105 = (unint64_t)v107;
            }
            while ((uint64_t *)((char *)v107 + 12) != a2);
          }
        }
        else if (!v103)
        {
          do
          {
            v117 = v101;
            v118 = *(uint64_t *)((char *)v8 + 12);
            if (v118 < *v8)
            {
              v119 = *((_DWORD *)v8 + 5);
              v120 = v117;
              do
              {
                v121 = v120;
                v122 = *(uint64_t *)((char *)v120 - 12);
                v120 = (uint64_t *)((char *)v120 - 12);
                *v121 = v122;
                *((_DWORD *)v121 + 2) = *((_DWORD *)v121 - 1);
              }
              while (v118 < *(v121 - 3));
              *v120 = v118;
              *((_DWORD *)v120 + 2) = v119;
            }
            v101 = (uint64_t *)((char *)v117 + 12);
            v8 = v117;
          }
          while ((uint64_t *)((char *)v117 + 12) != a2);
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::IntegerEncoder::ValueLiteralPair *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;

  switch(0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 2))
  {
    case 0uLL:
    case 1uLL:
      return 1;
    case 2uLL:
      v11 = *(uint64_t *)((char *)a2 - 12);
      v10 = (uint64_t *)((char *)a2 - 12);
      if (v11 < *a1)
        goto LABEL_10;
      return 1;
    case 3uLL:
      v12 = (uint64_t *)((char *)a1 + 12);
      v13 = *(uint64_t *)((char *)a1 + 12);
      v15 = *(uint64_t *)((char *)a2 - 12);
      v10 = (uint64_t *)((char *)a2 - 12);
      v14 = v15;
      if (v13 < *a1)
      {
        if (v14 < v13)
        {
LABEL_10:
          v16 = *((_DWORD *)a1 + 2);
          v17 = *a1;
          v18 = *((_DWORD *)v10 + 2);
          *a1 = *v10;
          *((_DWORD *)a1 + 2) = v18;
          *v10 = v17;
          *((_DWORD *)v10 + 2) = v16;
          return 1;
        }
        v49 = *((_DWORD *)a1 + 2);
        v50 = *a1;
        *a1 = *v12;
        *((_DWORD *)a1 + 2) = *((_DWORD *)a1 + 5);
        *v12 = v50;
        *((_DWORD *)a1 + 5) = v49;
        if (*v10 < *(uint64_t *)((char *)a1 + 12))
        {
          v51 = *((_DWORD *)a1 + 5);
          v52 = *v12;
          v53 = *((_DWORD *)v10 + 2);
          *v12 = *v10;
          *((_DWORD *)a1 + 5) = v53;
          *v10 = v52;
          *((_DWORD *)v10 + 2) = v51;
          return 1;
        }
        return 1;
      }
      if (v14 >= v13)
        return 1;
      v30 = *((_DWORD *)a1 + 5);
      v31 = *v12;
      v32 = *((_DWORD *)v10 + 2);
      *v12 = *v10;
      *((_DWORD *)a1 + 5) = v32;
      *v10 = v31;
      *((_DWORD *)v10 + 2) = v30;
      if (*(uint64_t *)((char *)a1 + 12) >= *a1)
        return 1;
      goto LABEL_45;
    case 4uLL:
      v12 = (uint64_t *)((char *)a1 + 12);
      v19 = *(uint64_t *)((char *)a1 + 12);
      v20 = a1 + 3;
      v21 = a1[3];
      v22 = (uint64_t *)((char *)a2 - 12);
      v23 = *a1;
      if (v19 >= *a1)
      {
        if (v21 < v19)
        {
          v33 = *((_DWORD *)a1 + 5);
          v34 = *v12;
          *v12 = *v20;
          *((_DWORD *)a1 + 5) = *((_DWORD *)a1 + 8);
          *v20 = v34;
          *((_DWORD *)a1 + 8) = v33;
          if (*v12 < v23)
          {
            v35 = *((_DWORD *)a1 + 2);
            v36 = *a1;
            *a1 = *v12;
            *((_DWORD *)a1 + 2) = *((_DWORD *)a1 + 5);
            *v12 = v36;
            *((_DWORD *)a1 + 5) = v35;
          }
        }
      }
      else
      {
        if (v21 >= v19)
        {
          v54 = *((_DWORD *)a1 + 2);
          v55 = *a1;
          *a1 = *v12;
          *((_DWORD *)a1 + 2) = *((_DWORD *)a1 + 5);
          *v12 = v55;
          *((_DWORD *)a1 + 5) = v54;
          if (v21 >= *(uint64_t *)((char *)a1 + 12))
            goto LABEL_42;
          v24 = *((_DWORD *)a1 + 5);
          v25 = *v12;
          *v12 = *v20;
          *((_DWORD *)a1 + 5) = *((_DWORD *)a1 + 8);
        }
        else
        {
          v24 = *((_DWORD *)a1 + 2);
          v25 = *a1;
          *a1 = *v20;
          *((_DWORD *)a1 + 2) = *((_DWORD *)a1 + 8);
        }
        *v20 = v25;
        *((_DWORD *)a1 + 8) = v24;
      }
LABEL_42:
      if (*v22 >= *v20)
        return 1;
      v56 = *((_DWORD *)a1 + 8);
      v57 = *v20;
      v58 = *((_DWORD *)a2 - 1);
      *v20 = *v22;
      *((_DWORD *)a1 + 8) = v58;
      *v22 = v57;
      *((_DWORD *)a2 - 1) = v56;
      if (*v20 >= *v12)
        return 1;
      v59 = *((_DWORD *)a1 + 5);
      v60 = *v12;
      *v12 = *v20;
      *((_DWORD *)a1 + 5) = *((_DWORD *)a1 + 8);
      *v20 = v60;
      *((_DWORD *)a1 + 8) = v59;
      if (*(uint64_t *)((char *)a1 + 12) >= *a1)
        return 1;
LABEL_45:
      v61 = *((_DWORD *)a1 + 2);
      v62 = *a1;
      *a1 = *v12;
      *((_DWORD *)a1 + 2) = *((_DWORD *)v12 + 2);
      *v12 = v62;
      *((_DWORD *)v12 + 2) = v61;
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::IntegerEncoder::ValueLiteralPair *>(a1, (uint64_t *)((char *)a1 + 12), a1 + 3, (uint64_t *)((char *)a1 + 36), (uint64_t *)((char *)a2 - 12));
      return 1;
    default:
      v3 = a1 + 3;
      v4 = a1[3];
      v5 = (uint64_t *)((char *)a1 + 12);
      v6 = *(uint64_t *)((char *)a1 + 12);
      v7 = *a1;
      if (v6 >= *a1)
      {
        if (v4 < v6)
        {
          v26 = *((_DWORD *)a1 + 5);
          v27 = *v5;
          *v5 = *v3;
          *((_DWORD *)a1 + 5) = *((_DWORD *)a1 + 8);
          *v3 = v27;
          *((_DWORD *)a1 + 8) = v26;
          if (*v5 < v7)
          {
            v28 = *((_DWORD *)a1 + 2);
            v29 = *a1;
            *a1 = *v5;
            *((_DWORD *)a1 + 2) = *((_DWORD *)a1 + 5);
            *v5 = v29;
            *((_DWORD *)a1 + 5) = v28;
          }
        }
      }
      else if (v4 >= v6)
      {
        v37 = *((_DWORD *)a1 + 2);
        v38 = *a1;
        *a1 = *v5;
        *((_DWORD *)a1 + 2) = *((_DWORD *)a1 + 5);
        *v5 = v38;
        *((_DWORD *)a1 + 5) = v37;
        if (v4 < *(uint64_t *)((char *)a1 + 12))
        {
          v39 = *((_DWORD *)a1 + 5);
          v40 = *v5;
          *v5 = *v3;
          *((_DWORD *)a1 + 5) = *((_DWORD *)a1 + 8);
          *v3 = v40;
          *((_DWORD *)a1 + 8) = v39;
        }
      }
      else
      {
        v8 = *((_DWORD *)a1 + 2);
        v9 = *a1;
        *a1 = *v3;
        *((_DWORD *)a1 + 2) = *((_DWORD *)a1 + 8);
        *v3 = v9;
        *((_DWORD *)a1 + 8) = v8;
      }
      v41 = (uint64_t)a1 + 36;
      if ((uint64_t *)((char *)a1 + 36) == a2)
        return 1;
      v42 = 0;
      v43 = 0;
      break;
  }
  while (1)
  {
    v44 = *(_QWORD *)v41;
    if (*(_QWORD *)v41 < *v3)
      break;
LABEL_35:
    v3 = (uint64_t *)v41;
    v42 += 12;
    v41 += 12;
    if ((uint64_t *)v41 == a2)
      return 1;
  }
  v45 = *(_DWORD *)(v41 + 8);
  v46 = v42;
  do
  {
    v47 = (uint64_t)a1 + v46;
    *(_QWORD *)(v47 + 36) = *(uint64_t *)((char *)a1 + v46 + 24);
    *(_DWORD *)(v47 + 44) = *(_DWORD *)((char *)a1 + v46 + 32);
    if (v46 == -24)
    {
      *a1 = v44;
      *((_DWORD *)a1 + 2) = v45;
      if (++v43 != 8)
        goto LABEL_35;
      return v41 + 12 == (_QWORD)a2;
    }
    v46 -= 12;
  }
  while (v44 < *(_QWORD *)(v47 + 12));
  v48 = (uint64_t)a1 + v46;
  *(_QWORD *)(v48 + 36) = v44;
  *(_DWORD *)(v48 + 44) = v45;
  if (++v43 != 8)
    goto LABEL_35;
  return v41 + 12 == (_QWORD)a2;
}

uint64_t *std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::IntegerEncoder::ValueLiteralPair *>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;

  v5 = *a2;
  v6 = *a3;
  if (*a2 >= *result)
  {
    if (v6 < v5)
    {
      v10 = *((_DWORD *)a2 + 2);
      v11 = *a2;
      v12 = *((_DWORD *)a3 + 2);
      *a2 = *a3;
      *((_DWORD *)a2 + 2) = v12;
      *a3 = v11;
      *((_DWORD *)a3 + 2) = v10;
      if (*a2 < *result)
      {
        v13 = *((_DWORD *)result + 2);
        v14 = *result;
        v15 = *((_DWORD *)a2 + 2);
        *result = *a2;
        *((_DWORD *)result + 2) = v15;
        *a2 = v14;
        *((_DWORD *)a2 + 2) = v13;
      }
    }
  }
  else
  {
    if (v6 < v5)
    {
      v7 = *((_DWORD *)result + 2);
      v8 = *result;
      v9 = *((_DWORD *)a3 + 2);
      *result = *a3;
      *((_DWORD *)result + 2) = v9;
LABEL_9:
      *a3 = v8;
      *((_DWORD *)a3 + 2) = v7;
      goto LABEL_10;
    }
    v16 = *((_DWORD *)result + 2);
    v17 = *result;
    v18 = *((_DWORD *)a2 + 2);
    *result = *a2;
    *((_DWORD *)result + 2) = v18;
    *a2 = v17;
    *((_DWORD *)a2 + 2) = v16;
    if (*a3 < v17)
    {
      v7 = *((_DWORD *)a2 + 2);
      v8 = *a2;
      v19 = *((_DWORD *)a3 + 2);
      *a2 = *a3;
      *((_DWORD *)a2 + 2) = v19;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*a4 < *a3)
  {
    v20 = *((_DWORD *)a3 + 2);
    v21 = *a3;
    v22 = *((_DWORD *)a4 + 2);
    *a3 = *a4;
    *((_DWORD *)a3 + 2) = v22;
    *a4 = v21;
    *((_DWORD *)a4 + 2) = v20;
    if (*a3 < *a2)
    {
      v23 = *((_DWORD *)a2 + 2);
      v24 = *a2;
      v25 = *((_DWORD *)a3 + 2);
      *a2 = *a3;
      *((_DWORD *)a2 + 2) = v25;
      *a3 = v24;
      *((_DWORD *)a3 + 2) = v23;
      if (*a2 < *result)
      {
        v26 = *((_DWORD *)result + 2);
        v27 = *result;
        v28 = *((_DWORD *)a2 + 2);
        *result = *a2;
        *((_DWORD *)result + 2) = v28;
        *a2 = v27;
        *((_DWORD *)a2 + 2) = v26;
      }
    }
  }
  if (*a5 < *a4)
  {
    v29 = *((_DWORD *)a4 + 2);
    v30 = *a4;
    v31 = *((_DWORD *)a5 + 2);
    *a4 = *a5;
    *((_DWORD *)a4 + 2) = v31;
    *a5 = v30;
    *((_DWORD *)a5 + 2) = v29;
    if (*a4 < *a3)
    {
      v32 = *((_DWORD *)a3 + 2);
      v33 = *a3;
      v34 = *((_DWORD *)a4 + 2);
      *a3 = *a4;
      *((_DWORD *)a3 + 2) = v34;
      *a4 = v33;
      *((_DWORD *)a4 + 2) = v32;
      if (*a3 < *a2)
      {
        v35 = *((_DWORD *)a2 + 2);
        v36 = *a2;
        v37 = *((_DWORD *)a3 + 2);
        *a2 = *a3;
        *((_DWORD *)a2 + 2) = v37;
        *a3 = v36;
        *((_DWORD *)a3 + 2) = v35;
        if (*a2 < *result)
        {
          v38 = *((_DWORD *)result + 2);
          v39 = *result;
          v40 = *((_DWORD *)a2 + 2);
          *result = *a2;
          *((_DWORD *)result + 2) = v40;
          *a2 = v39;
          *((_DWORD *)a2 + 2) = v38;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::IntegerEncoder::ValueLiteralPair *,operations_research::sat::IntegerEncoder::ValueLiteralPair *>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  BOOL v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v43;
  int64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  BOOL v48;
  _QWORD *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;

  if ((uint64_t *)a1 == a2)
    return a3;
  v3 = (uint64_t)a2 - a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 2);
  if ((uint64_t)a2 - a1 >= 13 && (unint64_t)v3 >= 0x18)
  {
    v43 = (unint64_t)(v4 - 2) >> 1;
    v44 = v43;
    do
    {
      if (v43 >= v44)
      {
        v45 = (2 * v44) | 1;
        v46 = (_QWORD *)(a1 + 12 * v45);
        if (2 * v44 + 2 >= v4)
        {
          v49 = (_QWORD *)(a1 + 12 * v44);
          v50 = *v49;
          if (*v46 >= *v49)
            goto LABEL_69;
        }
        else
        {
          v47 = *(_QWORD *)((char *)v46 + 12);
          v48 = *v46 < v47;
          if (*v46 > v47)
            v47 = *v46;
          if (v48)
          {
            v46 = (_QWORD *)((char *)v46 + 12);
            v45 = 2 * v44 + 2;
          }
          v49 = (_QWORD *)(a1 + 12 * v44);
          v50 = *v49;
          if (v47 >= *v49)
          {
LABEL_69:
            v51 = *((_DWORD *)v49 + 2);
            while (1)
            {
              v54 = v49;
              v49 = v46;
              v55 = *v46;
              *((_DWORD *)v54 + 2) = *((_DWORD *)v49 + 2);
              *v54 = v55;
              if (v43 < v45)
                break;
              v56 = (2 * v45) | 1;
              v46 = (_QWORD *)(a1 + 12 * v56);
              v45 = 2 * v45 + 2;
              if (v45 < v4)
              {
                v52 = *v46;
                v53 = *(_QWORD *)((char *)v46 + 12);
                if (*v46 <= v53)
                  v52 = *(_QWORD *)((char *)v46 + 12);
                if (*v46 >= v53)
                  v45 = v56;
                else
                  v46 = (_QWORD *)((char *)v46 + 12);
                if (v52 < v50)
                  break;
              }
              else
              {
                v45 = v56;
                if (*v46 < v50)
                  break;
              }
            }
            *v49 = v50;
            *((_DWORD *)v49 + 2) = v51;
          }
        }
      }
      v16 = v44-- <= 0;
    }
    while (!v16);
  }
  v5 = a2;
  if (a2 != a3)
  {
    if (v3 < 24)
    {
      v6 = a2;
      do
      {
        if (*v6 < *(_QWORD *)a1)
        {
          v7 = *((_DWORD *)v6 + 2);
          v8 = *v6;
          v9 = *(_DWORD *)(a1 + 8);
          *v6 = *(_QWORD *)a1;
          *((_DWORD *)v6 + 2) = v9;
          *(_QWORD *)a1 = v8;
          *(_DWORD *)(a1 + 8) = v7;
        }
        v6 = (uint64_t *)((char *)v6 + 12);
      }
      while (v6 != a3);
LABEL_37:
      v5 = a3;
      goto LABEL_38;
    }
    v10 = (uint64_t *)(a1 + 24);
    v11 = a2;
    while (1)
    {
      if (*v11 < *(_QWORD *)a1)
      {
        v12 = *((_DWORD *)v11 + 2);
        v13 = *v11;
        v14 = *(_DWORD *)(a1 + 8);
        *v11 = *(_QWORD *)a1;
        *((_DWORD *)v11 + 2) = v14;
        *(_QWORD *)a1 = v13;
        *(_DWORD *)(a1 + 8) = v12;
        v15 = *(_QWORD *)(a1 + 12);
        if ((unint64_t)v4 < 3)
        {
          v17 = (_QWORD *)(a1 + 12);
          v18 = 1;
          v19 = *(_QWORD *)a1;
          if (v15 >= *(_QWORD *)a1)
            goto LABEL_26;
        }
        else
        {
          v16 = v15 < *v10;
          if (v15 <= *v10)
            v15 = *v10;
          if (v16)
            v17 = (_QWORD *)(a1 + 24);
          else
            v17 = (_QWORD *)(a1 + 12);
          if (v16)
            v18 = 2;
          else
            v18 = 1;
          v19 = *(_QWORD *)a1;
          if (v15 >= *(_QWORD *)a1)
          {
LABEL_26:
            v20 = *(_DWORD *)(a1 + 8);
            v21 = (_QWORD *)a1;
            while (1)
            {
              v24 = v21;
              v21 = v17;
              v25 = *v17;
              *((_DWORD *)v24 + 2) = *((_DWORD *)v21 + 2);
              *v24 = v25;
              if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v18)
                break;
              v26 = (2 * v18) | 1;
              v17 = (_QWORD *)(a1 + 12 * v26);
              v18 = 2 * v18 + 2;
              if (v18 < v4)
              {
                v22 = *v17;
                v23 = *(_QWORD *)((char *)v17 + 12);
                if (*v17 <= v23)
                  v22 = *(_QWORD *)((char *)v17 + 12);
                if (*v17 >= v23)
                  v18 = v26;
                else
                  v17 = (_QWORD *)((char *)v17 + 12);
                if (v22 < v19)
                  break;
              }
              else
              {
                v18 = v26;
                if (*v17 < v19)
                  break;
              }
            }
            *v21 = v19;
            *((_DWORD *)v21 + 2) = v20;
          }
        }
      }
      v11 = (uint64_t *)((char *)v11 + 12);
      if (v11 == a3)
        goto LABEL_37;
    }
  }
LABEL_38:
  if (v3 >= 13)
  {
    v27 = v3 / 0xCuLL;
    do
    {
      v28 = 0;
      v57 = *(_QWORD *)a1;
      v58 = *(_DWORD *)(a1 + 8);
      v29 = a1;
      do
      {
        v31 = v29 + 12 * v28 + 12;
        v32 = (2 * v28) | 1;
        v33 = 2 * v28 + 2;
        if (v33 < v27 && *(_QWORD *)v31 < *(_QWORD *)(v31 + 12))
        {
          v31 += 12;
          v32 = v33;
        }
        v30 = *(_QWORD *)v31;
        *(_DWORD *)(v29 + 8) = *(_DWORD *)(v31 + 8);
        *(_QWORD *)v29 = v30;
        v29 = v31;
        v28 = v32;
      }
      while (v32 <= (uint64_t)((unint64_t)(v27 - 2) >> 1));
      a2 = (uint64_t *)((char *)a2 - 12);
      if ((uint64_t *)v31 == a2)
      {
        *(_DWORD *)(v31 + 8) = v58;
        *(_QWORD *)v31 = v57;
      }
      else
      {
        v34 = *a2;
        *(_DWORD *)(v31 + 8) = *((_DWORD *)a2 + 2);
        *(_QWORD *)v31 = v34;
        *a2 = v57;
        *((_DWORD *)a2 + 2) = v58;
        v35 = v31 - a1 + 12;
        if (v35 >= 13)
        {
          v36 = (v35 / 0xCuLL - 2) >> 1;
          v37 = (uint64_t *)(a1 + 12 * v36);
          v38 = *(_QWORD *)v31;
          if (*v37 < *(_QWORD *)v31)
          {
            v39 = *(_DWORD *)(v31 + 8);
            do
            {
              v40 = v31;
              v31 = (uint64_t)v37;
              v41 = *v37;
              *(_DWORD *)(v40 + 8) = *(_DWORD *)(v31 + 8);
              *(_QWORD *)v40 = v41;
              if (!v36)
                break;
              v36 = (v36 - 1) >> 1;
              v37 = (uint64_t *)(a1 + 12 * v36);
            }
            while (*v37 < v38);
            *(_QWORD *)v31 = v38;
            *(_DWORD *)(v31 + 8) = v39;
          }
        }
      }
      v16 = v27-- <= 2;
    }
    while (!v16);
  }
  return v5;
}

uint64_t google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,long long>(int a1, int a2, char *a3)
{
  uint64_t v3;
  uint64_t v5;

  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5, a3);
  std::ostream::operator<<();
  google::base::CheckOpMessageBuilder::ForVar2((google::base::CheckOpMessageBuilder *)&v5);
  std::ostream::operator<<();
  v3 = google::base::CheckOpMessageBuilder::NewString((google::base::CheckOpMessageBuilder *)&v5);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5);
  return v3;
}

void sub_22DB6B8C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const,operations_research::sat::Literal>>>::find_or_prepare_insert<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>(uint64_t *a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v2 = 0;
  v3 = *a2;
  v4 = *(_QWORD *)(a2 + 1);
  v5 = v4
     + (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v3)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + v3)));
  v6 = ((v5 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v5);
  v7 = (v6 >> 7) ^ ((unint64_t)*a1 >> 12);
  v8 = a1[3];
  while (1)
  {
    v9 = v7 & v8;
    v10 = *(_QWORD *)(*a1 + (v7 & v8));
    v11 = ((v10 ^ (0x101010101010101 * (v6 & 0x7F))) - 0x101010101010101) & ~(v10 ^ (0x101010101010101
                                                                                       * (v6 & 0x7F))) & 0x8080808080808080;
    if (v11)
      break;
LABEL_8:
    if ((v10 & (~v10 << 6) & 0x8080808080808080) != 0)
      return absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const,operations_research::sat::Literal>>>::prepare_insert(a1, v6);
    v2 += 8;
    v7 = v2 + v9;
  }
  while (1)
  {
    v12 = (v9 + (__clz(__rbit64(v11)) >> 3)) & v8;
    v13 = a1[1] + 16 * v12;
    v14 = *(_DWORD *)v13;
    v15 = *(_QWORD *)(v13 + 4);
    if (v14 == (_DWORD)v3 && v15 == v4)
      return v12;
    v11 &= v11 - 1;
    if (!v11)
      goto LABEL_8;
  }
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const,operations_research::sat::Literal>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const,operations_research::sat::Literal>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      v7 = v13;
      v4 = *a1;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const,operations_research::sat::Literal>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const,operations_research::sat::Literal>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const,operations_research::sat::Literal>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const,operations_research::sat::Literal>>>::resize(char **a1, char *a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;

  v2 = (unint64_t)a2;
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  v8 = (v2 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  v9 = (char *)operator new(v8 + 16 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  v10 = v2 - (v2 >> 3);
  if (v2 == 7)
    v10 = 6;
  v11 = a1[2];
  a1[5] = (char *)(v10 - (_QWORD)v11);
  v12 = a1[4];
  if (v12)
  {
    *((_QWORD *)v12 + 1) = v11;
    *(_QWORD *)v12 = v2;
    if (!v11)
    {
      *((_QWORD *)v12 + 4) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    v14 = 0;
    v25 = a1[4];
    if (!v25)
      return;
LABEL_21:
    *((_QWORD *)v25 + 4) = v14 >> 3;
    *((_QWORD *)v25 + 2) = 0;
    return;
  }
  v13 = 0;
  v14 = 0;
  do
  {
    if ((v13[(_QWORD)v4] & 0x80000000) == 0)
    {
      v18 = &v5[16 * (_QWORD)v13];
      v19 = *(_QWORD *)(v18 + 4)
          + (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)v18)
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + *(int *)v18)));
      v20 = ((v19 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v19);
      v21 = *a1;
      v22 = a1[3];
      v23 = ((v20 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v22;
      v24 = *(_QWORD *)&(*a1)[v23] & (~*(_QWORD *)&(*a1)[v23] << 7) & 0x8080808080808080;
      if (v24)
      {
        v15 = 0;
      }
      else
      {
        v15 = 0;
        do
        {
          v15 += 8;
          v23 = (v15 + v23) & (unint64_t)v22;
          v24 = *(_QWORD *)&v21[v23] & (~*(_QWORD *)&v21[v23] << 7) & 0x8080808080808080;
        }
        while (!v24);
      }
      v16 = (v23 + (__clz(__rbit64(v24)) >> 3)) & (unint64_t)v22;
      v14 += v15;
      v17 = v20 & 0x7F;
      v21[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      *(_OWORD *)&a1[1][16 * v16] = *(_OWORD *)v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  v25 = a1[4];
  if (v25)
    goto LABEL_21;
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const,operations_research::sat::Literal>>>::drop_deletes_without_resize(uint64_t result)
{
  int8x16_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  int8x16_t *v7;
  int8x16_t v8;
  int8x16_t v9;
  uint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int8x16_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(int8x16_t **)result;
  v2 = *(_QWORD *)(result + 24);
  v3 = *(_QWORD *)result + v2;
  if (v3 + 1 != *(_QWORD *)result)
  {
    v4 = v2 - 7;
    v5 = *(unint64_t **)result;
    if (v4 < 0x18)
      goto LABEL_29;
    v6 = (v4 >> 3) + 1;
    v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v11 = vandq_s8(v7[-1], v8);
      v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      *v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(_QWORD *)(v3 + 1) = v1->i64[0];
  *(_BYTE *)v3 = -1;
  v13 = *(_QWORD *)(result + 24);
  if (!v13)
  {
    v15 = 0;
    *(_QWORD *)(result + 40) = -*(_QWORD *)(result + 16);
    v30 = *(_QWORD *)(result + 32);
    if (!v30)
      return result;
LABEL_26:
    *(_QWORD *)(v30 + 32) = v15 >> 3;
    *(_QWORD *)(v30 + 16) = 0;
    return result;
  }
  v14 = 0;
  v15 = 0;
  do
  {
    v19 = *(int8x16_t **)result;
    if (*(unsigned __int8 *)(*(_QWORD *)result + v14) == 254)
    {
      v20 = *(_QWORD *)(*(_QWORD *)(result + 8) + 16 * v14 + 4)
          + (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
              + *(int *)(*(_QWORD *)(result + 8) + 16 * v14))
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + *(int *)(*(_QWORD *)(result + 8) + 16 * v14))));
      v21 = ((v20 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v20);
      v22 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      v23 = *(uint64_t *)((_BYTE *)v19->i64 + v22) & (~*(uint64_t *)((char *)v19->i64 + v22) << 7) & 0x8080808080808080;
      if (v23)
      {
        v16 = 0;
        v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      }
      else
      {
        v16 = 0;
        v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
        do
        {
          v16 += 8;
          v17 = (v16 + v17) & v13;
          v23 = *(uint64_t *)((_BYTE *)v19->i64 + v17) & (~*(uint64_t *)((char *)v19->i64 + v17) << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      v18 = (v17 + (__clz(__rbit64(v23)) >> 3)) & v13;
      v15 += v16;
      if ((((v18 - v22) ^ (v14 - v22)) & v13) > 7)
      {
        v24 = v19->u8[v18];
        v19->i8[v18] = v21 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(result + 24) & (v18 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = v21 & 0x7F;
        v25 = *(_QWORD *)(result + 8);
        if (v24 == 128)
        {
          *(_OWORD *)(v25 + 16 * v18) = *(_OWORD *)(v25 + 16 * v14);
          *(_BYTE *)(*(_QWORD *)result + v14) = 0x80;
          *(_BYTE *)((*(_QWORD *)(result + 24) & (v14 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = 0x80;
        }
        else
        {
          v26 = *(_OWORD *)(v25 + 16 * v14);
          *(_OWORD *)(v25 + 16 * v14) = *(_OWORD *)(v25 + 16 * v18);
          *(_OWORD *)(*(_QWORD *)(result + 8) + 16 * v18) = v26;
          --v14;
        }
      }
      else
      {
        v19->i8[v14] = v21 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(result + 24) & (v14 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = v21 & 0x7F;
      }
    }
    ++v14;
    v13 = *(_QWORD *)(result + 24);
  }
  while (v14 != v13);
  v27 = v14 - (v14 >> 3);
  v28 = v14 == 7;
  v29 = 6;
  if (!v28)
    v29 = v27;
  *(_QWORD *)(result + 40) = v29 - *(_QWORD *)(result + 16);
  v30 = *(_QWORD *)(result + 32);
  if (v30)
    goto LABEL_26;
  return result;
}

void std::vector<std::map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>>::__append(void **a1, unint64_t a2)
{
  _QWORD *v4;
  _BYTE *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;

  v4 = a1[1];
  v5 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)v4) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = &v4[3 * a2];
      v12 = 24 * a2;
      v13 = v4 + 1;
      do
      {
        *v13 = 0;
        v13[1] = 0;
        *(v13 - 1) = v13;
        v13 += 3;
        v12 -= 24;
      }
      while (v12);
      a1[1] = v11;
    }
    else
    {
      a1[1] = v4;
    }
    return;
  }
  v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)v4 - (_BYTE *)*a1) >> 3);
  v7 = v6 + a2;
  if (v6 + a2 > 0xAAAAAAAAAAAAAAALL)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 3);
  if (2 * v8 > v7)
    v7 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v7;
  if (v9)
  {
    if (v9 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v10 = (char *)operator new(24 * v9);
  }
  else
  {
    v10 = 0;
  }
  v14 = &v10[24 * v6];
  v15 = &v10[24 * v9];
  v16 = 24 * a2;
  v17 = &v14[24 * a2];
  v18 = v14 + 8;
  do
  {
    *v18 = 0;
    v18[1] = 0;
    *(v18 - 1) = v18;
    v18 += 3;
    v16 -= 24;
  }
  while (v16);
  v20 = (char *)*a1;
  v19 = (char *)a1[1];
  if (v19 == *a1)
  {
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (!v19)
      return;
LABEL_31:
    operator delete(v19);
    return;
  }
  v21 = 0;
  do
  {
    while (1)
    {
      v22 = &v14[v21];
      *((_QWORD *)v22 - 3) = *(_QWORD *)&v19[v21 - 24];
      v23 = &v19[v21 - 16];
      v24 = *(_QWORD *)v23;
      *(_QWORD *)&v14[v21 - 16] = *(_QWORD *)v23;
      v25 = (uint64_t)&v14[v21 - 16];
      v26 = *(_QWORD *)&v19[v21 - 8];
      *((_QWORD *)v22 - 1) = v26;
      if (!v26)
        break;
      *(_QWORD *)(v24 + 16) = v25;
      *(_QWORD *)&v19[v21 - 24] = v23;
      *(_QWORD *)v23 = 0;
      *(_QWORD *)&v19[v21 - 8] = 0;
      v21 -= 24;
      if (&v19[v21] == v20)
        goto LABEL_25;
    }
    *((_QWORD *)v22 - 3) = v25;
    v21 -= 24;
  }
  while (&v19[v21] != v20);
LABEL_25:
  v27 = (char *)*a1;
  v19 = (char *)a1[1];
  *a1 = &v14[v21];
  a1[1] = v17;
  a1[2] = v15;
  if (v19 != v27)
  {
    do
    {
      v28 = v19 - 24;
      std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)(v19 - 24), *((_QWORD **)v19 - 2));
      v19 = v28;
    }
    while (v28 != v27);
    v19 = v27;
  }
  if (v19)
    goto LABEL_31;
}

void std::vector<operations_research::sat::IntegerTrail::TrailEntry>::__append(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;

  v5 = a1[1];
  v4 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 2) >= a2)
  {
    if (a2)
    {
      v12 = 20 * ((20 * a2 - 20) / 0x14) + 20;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 2);
    v8 = v7 + a2;
    if (v7 + a2 > 0xCCCCCCCCCCCCCCCLL)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - v6) >> 2);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x666666666666666)
      v10 = 0xCCCCCCCCCCCCCCCLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xCCCCCCCCCCCCCCCLL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(20 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[20 * v7];
    v14 = &v11[20 * v10];
    v15 = 20 * ((20 * a2 - 20) / 0x14) + 20;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v17 = *(_OWORD *)(v5 - 20);
        *((_DWORD *)v13 - 1) = *((_DWORD *)v5 - 1);
        *(_OWORD *)(v13 - 20) = v17;
        v13 -= 20;
        v5 -= 20;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
      operator delete(v5);
  }
}

void std::vector<operations_research::sat::IntegerLiteral>::__append(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  int v26;
  void *v27;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 2) >= a2)
  {
    if (a2)
    {
      v13 = 12 * a2 - 12;
      if (v13 < 0xC)
        goto LABEL_34;
      v14 = v13 / 0xC + 1;
      v6 = &v5[12 * (v14 & 0x3FFFFFFFFFFFFFFELL)];
      v15 = v5 + 16;
      v16 = v14 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        *((_DWORD *)v15 - 4) = -1;
        *((_DWORD *)v15 - 1) = -1;
        *(_QWORD *)((char *)v15 - 12) = 0;
        *v15 = 0;
        v15 += 3;
        v16 -= 2;
      }
      while (v16);
      if (v14 != (v14 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_34:
        do
        {
          *(_DWORD *)v6 = -1;
          *(_QWORD *)(v6 + 4) = 0;
          v6 += 12;
        }
        while (v6 != &v5[12 * a2]);
      }
      v6 = &v5[12 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 2);
    v9 = v8 + a2;
    if (v8 + a2 > 0x1555555555555555)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v7) >> 2);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0xAAAAAAAAAAAAAAALL)
      v11 = 0x1555555555555555;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0x1555555555555555)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = (char *)operator new(12 * v11);
    }
    else
    {
      v12 = 0;
    }
    v17 = &v12[12 * v8];
    v18 = &v17[12 * a2];
    v19 = 12 * a2 - 12;
    v20 = v17;
    if (v19 < 0xC)
      goto LABEL_35;
    v21 = v19 / 0xC + 1;
    v20 = &v17[12 * (v21 & 0x3FFFFFFFFFFFFFFELL)];
    v22 = &v12[12 * v8 + 16];
    v23 = v21 & 0x3FFFFFFFFFFFFFFELL;
    do
    {
      *((_DWORD *)v22 - 4) = -1;
      *((_DWORD *)v22 - 1) = -1;
      *(_QWORD *)(v22 - 12) = 0;
      *(_QWORD *)v22 = 0;
      v22 += 24;
      v23 -= 2;
    }
    while (v23);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_35:
      do
      {
        *(_DWORD *)v20 = -1;
        *(_QWORD *)(v20 + 4) = 0;
        v20 += 12;
      }
      while (v20 != v18);
    }
    v24 = &v12[12 * v11];
    if (v5 != v7)
    {
      do
      {
        v25 = *(_QWORD *)(v6 - 12);
        v6 -= 12;
        v26 = *((_DWORD *)v6 + 2);
        *(_QWORD *)(v17 - 12) = v25;
        v17 -= 12;
        *((_DWORD *)v17 + 2) = v26;
      }
      while (v6 != v7);
    }
    v27 = *a1;
    *a1 = v17;
    a1[1] = v18;
    a1[2] = v24;
    if (v27)
      operator delete(v27);
  }
}

void std::vector<operations_research::Domain>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void **v8;
  uint64_t v9;
  void **v10;
  char v11;
  void *v12;
  uint64_t v13;

  v2 = (uint64_t)(a1 + 2);
  v3 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v5 = a1[1];
    v6 = 24 * a2;
    v12 = operator new(24 * a2);
    v13 = (uint64_t)v12 + v5 - v3;
    std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<operations_research::Domain>,std::reverse_iterator<operations_research::Domain*>,std::reverse_iterator<operations_research::Domain*>,std::reverse_iterator<operations_research::Domain*>>(v2, v5, v5, v3, v3, v13, v13);
    v8 = (void **)*a1;
    v7 = (void **)a1[1];
    *a1 = v9;
    a1[1] = v13;
    a1[2] = (uint64_t)v12 + v6;
    if (v7 != v8)
    {
      v10 = v7;
      do
      {
        v11 = *((_BYTE *)v10 - 24);
        v10 -= 3;
        if ((v11 & 1) != 0)
          operator delete(*(v7 - 2));
        v7 = v10;
      }
      while (v10 != v8);
    }
    if (v8)
      operator delete(v8);
  }
}

void sub_22DB6C760(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<operations_research::Domain>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      v7 = v13;
      v4 = *a1;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>>::resize(char **a1, char *a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;

  v2 = (unint64_t)a2;
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  v8 = (char *)operator new(v2 + 9 + 12 * v2);
  *a1 = v8;
  a1[1] = &v8[v2 + 9];
  memset(v8, 128, v2 + 8);
  v8[v2] = -1;
  v9 = v2 - (v2 >> 3);
  if (v2 == 7)
    v9 = 6;
  v10 = a1[2];
  a1[5] = (char *)(v9 - (_QWORD)v10);
  v11 = a1[4];
  if (v11)
  {
    *((_QWORD *)v11 + 1) = v10;
    *(_QWORD *)v11 = v2;
    if (!v10)
    {
      *((_QWORD *)v11 + 4) = 0;
      *((_QWORD *)v11 + 2) = 0;
    }
  }
  if (!v6)
  {
    v13 = 0;
    v25 = a1[4];
    if (!v25)
      return;
LABEL_21:
    *((_QWORD *)v25 + 4) = v13 >> 3;
    *((_QWORD *)v25 + 2) = 0;
    return;
  }
  v12 = 0;
  v13 = 0;
  do
  {
    if ((v12[(_QWORD)v4] & 0x80000000) == 0)
    {
      v19 = &v5[12 * (_QWORD)v12];
      v20 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(_QWORD *)v19)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(_QWORD *)v19));
      v21 = *a1;
      v22 = a1[3];
      v23 = ((v20 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v22;
      v24 = *(_QWORD *)&(*a1)[v23] & (~*(_QWORD *)&(*a1)[v23] << 7) & 0x8080808080808080;
      if (v24)
      {
        v14 = 0;
      }
      else
      {
        v14 = 0;
        do
        {
          v14 += 8;
          v23 = (v14 + v23) & (unint64_t)v22;
          v24 = *(_QWORD *)&v21[v23] & (~*(_QWORD *)&v21[v23] << 7) & 0x8080808080808080;
        }
        while (!v24);
      }
      v15 = (v23 + (__clz(__rbit64(v24)) >> 3)) & (unint64_t)v22;
      v13 += v14;
      v16 = v20 & 0x7F;
      v21[v15] = v16;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v15 - 8) & (unint64_t)a1[3])] = v16;
      v17 = *(_QWORD *)v19;
      v18 = (uint64_t)&a1[1][12 * v15];
      *(_DWORD *)(v18 + 8) = *((_DWORD *)v19 + 2);
      *(_QWORD *)v18 = v17;
    }
    ++v12;
  }
  while (v12 != v6);
  operator delete(v4);
  v25 = a1[4];
  if (v25)
    goto LABEL_21;
}

void std::vector<std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>>::__append(void **a1, unint64_t a2, uint64_t a3)
{
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;

  v6 = a1[2];
  v7 = (char *)a1[1];
  if (a2 > (v6 - v7) >> 5)
  {
    v8 = (v7 - (_BYTE *)*a1) >> 5;
    if ((v8 + a2) >> 59)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v9 = v6 - (_BYTE *)*a1;
    v10 = v9 >> 4;
    if (v9 >> 4 <= v8 + a2)
      v10 = v8 + a2;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0)
      v11 = 0x7FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
    {
      if (v11 >> 59)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = (char *)operator new(32 * v11);
    }
    else
    {
      v12 = 0;
    }
    v16 = &v12[32 * v8];
    v30 = v16;
    v32 = &v12[32 * v11];
    v17 = 32 * a2;
    v18 = &v16[32 * a2];
    while (1)
    {
      v19 = *(_QWORD *)(a3 + 24);
      if (v19)
      {
        if (v19 == a3)
        {
          *((_QWORD *)v16 + 3) = v16;
          (*(void (**)(_QWORD, char *))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24), v16);
          goto LABEL_26;
        }
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
      }
      *((_QWORD *)v16 + 3) = v19;
LABEL_26:
      v16 += 32;
      v17 -= 32;
      if (!v17)
      {
        v31 = v18;
        v21 = (char *)*a1;
        v20 = (char *)a1[1];
        if (v20 == *a1)
        {
          *a1 = v30;
          a1[1] = v18;
          a1[2] = v32;
LABEL_48:
          if (v20)
            operator delete(v20);
          return;
        }
        v22 = v30 - 8;
        while (2)
        {
          v24 = (char *)*((_QWORD *)v20 - 1);
          v25 = v20 - 32;
          v23 = v22;
          if (v24)
          {
            if (v25 == v24)
            {
              *(_QWORD *)v22 = v22 - 24;
              (*(void (**)(_QWORD))(**((_QWORD **)v20 - 1) + 24))(*((_QWORD *)v20 - 1));
LABEL_34:
              v22 -= 32;
              v20 = v25;
              if (v25 != v21)
                continue;
              v26 = (char *)*a1;
              v20 = (char *)a1[1];
              *a1 = v22 + 8;
              a1[1] = v31;
              a1[2] = v32;
              if (v20 == v26)
                goto LABEL_48;
              while (2)
              {
                v29 = v20 - 32;
                v27 = (char *)*((_QWORD *)v20 - 1);
                if (v29 != v27)
                {
                  if (v27)
                  {
                    v28 = 5;
LABEL_42:
                    (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
                  }
                  v20 = v29;
                  if (v29 == v26)
                  {
                    v20 = v26;
                    goto LABEL_48;
                  }
                  continue;
                }
                break;
              }
              v27 = v29;
              v28 = 4;
              goto LABEL_42;
            }
            *(_QWORD *)v22 = v24;
            v23 = v20 - 8;
          }
          break;
        }
        *(_QWORD *)v23 = 0;
        goto LABEL_34;
      }
    }
  }
  if (!a2)
    goto LABEL_20;
  v13 = 32 * a2;
  v14 = &v7[32 * a2];
  do
  {
    v15 = *(_QWORD *)(a3 + 24);
    if (!v15)
      goto LABEL_14;
    if (v15 != a3)
    {
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
LABEL_14:
      *((_QWORD *)v7 + 3) = v15;
      goto LABEL_15;
    }
    *((_QWORD *)v7 + 3) = v7;
    (*(void (**)(_QWORD, char *))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24), v7);
LABEL_15:
    v7 += 32;
    v13 -= 32;
  }
  while (v13);
  v7 = v14;
LABEL_20:
  a1[1] = v7;
}

void sub_22DB6CD7C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_22DB6CD84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::function<void ()(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__value_func<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_22DB6CF30(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

char *std::vector<operations_research::sat::IntegerLiteral>::__insert_with_size[abi:ne180100]<operations_research::sat::IntegerLiteral const*,operations_research::sat::IntegerLiteral const*>(uint64_t a1, uint64_t a2, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  char *v7;
  char *v9;
  uint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  int v34;
  char *v35;
  char *v36;

  v5 = *(char **)a1;
  v6 = (a2 - *(_QWORD *)a1) / 12;
  v7 = (char *)(*(_QWORD *)a1 + 12 * v6);
  if (a5 < 1)
    return v7;
  v9 = __src;
  v12 = *(_BYTE **)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v12) >> 2)) < a5)
  {
    v13 = a5 - 0x5555555555555555 * ((v12 - v5) >> 2);
    if (v13 > 0x1555555555555555)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v14 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v5) >> 2);
    v15 = 2 * v14;
    if (2 * v14 <= v13)
      v15 = v13;
    if (v14 >= 0xAAAAAAAAAAAAAAALL)
      v16 = 0x1555555555555555;
    else
      v16 = v15;
    if (v16)
    {
      if (v16 > 0x1555555555555555)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v17 = (char *)operator new(12 * v16);
    }
    else
    {
      v17 = 0;
    }
    v25 = &v17[12 * v6];
    v26 = 12 * a5;
    v27 = &v25[12 * a5];
    v28 = v25;
    do
    {
      *(_QWORD *)v28 = *(_QWORD *)v9;
      *((_DWORD *)v28 + 2) = *((_DWORD *)v9 + 2);
      v28 += 12;
      v9 += 12;
      v26 -= 12;
    }
    while (v26);
    v29 = 12 * v16;
    v30 = *(char **)a1;
    v31 = v25;
    if (*(char **)a1 != v7)
    {
      v32 = v7;
      v31 = v25;
      do
      {
        v33 = *(_QWORD *)(v32 - 12);
        v32 -= 12;
        v34 = *((_DWORD *)v32 + 2);
        *(_QWORD *)(v31 - 12) = v33;
        v31 -= 12;
        *((_DWORD *)v31 + 2) = v34;
      }
      while (v32 != v30);
      v12 = *(_BYTE **)(a1 + 8);
    }
    v35 = &v17[v29];
    if (v12 != v7)
      memmove(v27, v7, v12 - v7);
    v36 = *(char **)a1;
    *(_QWORD *)a1 = v31;
    *(_QWORD *)(a1 + 8) = &v27[v12 - v7];
    *(_QWORD *)(a1 + 16) = v35;
    if (v36)
      operator delete(v36);
    return v25;
  }
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v12 - v7) >> 2)) >= a5)
  {
    v18 = &__src[12 * a5];
    v20 = *(char **)(a1 + 8);
LABEL_18:
    v21 = &v7[12 * a5];
    v22 = (unint64_t)&v20[-12 * a5];
    v23 = v20;
    if (v22 < (unint64_t)v12)
    {
      v23 = v20;
      do
      {
        v24 = *(_QWORD *)v22;
        *((_DWORD *)v23 + 2) = *(_DWORD *)(v22 + 8);
        *(_QWORD *)v23 = v24;
        v23 += 12;
        v22 += 12;
      }
      while (v22 < (unint64_t)v12);
    }
    *(_QWORD *)(a1 + 8) = v23;
    if (v20 != v21)
      memmove(&v7[12 * a5], v7, v20 - v21);
    if (v18 != v9)
      memmove(v7, v9, v18 - v9);
    return v7;
  }
  v18 = &__src[4 * ((v12 - v7) >> 2)];
  v19 = a4 - v18;
  if (a4 != v18)
    memmove(*(void **)(a1 + 8), &__src[4 * ((v12 - v7) >> 2)], a4 - v18);
  v20 = &v12[v19];
  *(_QWORD *)(a1 + 8) = &v12[v19];
  if (v12 - v7 >= 1)
    goto LABEL_18;
  return v7;
}

uint64_t gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>>(uint64_t *a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v15;
  _QWORD *v16;
  _BYTE v17[16];

  v2 = 0;
  v3 = *a2;
  v4 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v3)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + v3));
  v5 = *a1;
  v6 = a1[1];
  v7 = (v4 >> 7) ^ ((unint64_t)*a1 >> 12);
  v8 = a1[3];
  v9 = 0x101010101010101 * (v4 & 0x7F);
  while (1)
  {
    v10 = v7 & v8;
    v11 = *(_QWORD *)(v5 + v10);
    v12 = ((v11 ^ v9) - 0x101010101010101) & ~(v11 ^ v9) & 0x8080808080808080;
    if (v12)
      break;
LABEL_5:
    if ((v11 & (~v11 << 6) & 0x8080808080808080) != 0)
      goto LABEL_9;
    v2 += 8;
    v7 = v2 + v10;
  }
  while (1)
  {
    v13 = (v10 + (__clz(__rbit64(v12)) >> 3)) & v8;
    if (*(_DWORD *)(v6 + 8 * v13) == (_DWORD)v3)
      break;
    v12 &= v12 - 1;
    if (!v12)
      goto LABEL_5;
  }
  if (v13 == v8)
  {
LABEL_9:
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v17, (google::glog_internal_namespace_ *)"./ortools/base/map_util.h", 180);
    v15 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v17);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: it != collection.end() ", 37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Map key not found: ", 19);
    std::ostream::operator<<();
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v17);
  }
  return v6 + 8 * v13 + 4;
}

void sub_22DB6D2F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

uint64_t operations_research::sat::Model::MyNew<operations_research::sat::RevIntRepository>(uint64_t a1)
{
  uint64_t v2;
  operations_research::sat::IntegerTrail *v3;

  v2 = operator new();
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)v2 = &off_24F986258;
  v3 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a1);
  operations_research::sat::IntegerTrail::RegisterReversibleClass(v3, v2);
  return v2;
}

void sub_22DB6D364(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v3;

  *v1 = &off_24F9862B0;
  v3 = (void *)v1[5];
  if (v3)
  {
    v1[6] = v3;
    operator delete(v3);
  }
  operations_research::sat::Model::MyNew<operations_research::sat::RevIntRepository>((uint64_t)v1);
  MEMORY[0x22E31DF78](v1, 0x10B1C404D499D86);
  _Unwind_Resume(a1);
}

void operations_research::sat::RevIntRepository::~RevIntRepository(operations_research::sat::RevIntRepository *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24F9862B0;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 3) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24F9862B0;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 3) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x22E31DF78);
}

void operations_research::RevRepository<int>::SetLevel(_QWORD *a1, int a2)
{
  std::vector<int> *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int *v8;
  unint64_t v9;
  unint64_t v10;
  std::vector<int>::size_type v11;
  unint64_t v12;
  std::vector<int>::size_type v13;
  uint64_t v14;
  unint64_t v15;
  int i;
  std::vector<int>::value_type __x;

  v4 = a1[2];
  v5 = a1[3];
  v3 = (std::vector<int> *)(a1 + 2);
  v6 = v5 - v4;
  if (((unint64_t)v6 >> 2) != a2)
  {
    ++a1[1];
    v7 = a2;
    if ((int)((unint64_t)v6 >> 2) <= a2)
    {
      __x = (a1[6] - a1[5]) >> 4;
      v12 = v6 >> 2;
      v13 = a2 - v12;
      if (v7 <= v12)
      {
        if (v7 < v12)
          a1[3] = v4 + 4 * v7;
      }
      else
      {
        std::vector<int>::__append(v3, v13, &__x);
      }
    }
    else
    {
      v8 = (int *)(v4 + 4 * a2);
      v9 = *v8;
      v10 = v6 >> 2;
      v11 = a2 - v10;
      if (v7 <= v10)
      {
        if (v7 < v10)
          a1[3] = v8;
      }
      else
      {
        std::vector<int>::__append(v3, v11);
      }
      v14 = a1[5];
      v15 = (a1[6] - v14) >> 4;
      for (i = v15 - 1; i >= (int)v9; --i)
        **(_DWORD **)(v14 + 16 * i) = *(_DWORD *)(v14 + 16 * i + 8);
      if (v9 <= v15)
      {
        if (v9 < v15)
          a1[6] = v14 + 16 * v9;
      }
      else
      {
        std::vector<std::pair<int *,int>>::__append(a1 + 5, v9 - v15);
      }
    }
  }
}

_QWORD *operations_research::RevRepository<int>::~RevRepository(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_24F9862B0;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

void operations_research::RevRepository<int>::~RevRepository(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_24F9862B0;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x22E31DF78);
}

void std::vector<std::pair<int *,int>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void *v25;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 4)
  {
    if (a2)
    {
      if (((a2 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
        goto LABEL_35;
      v17 = ((a2 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      v6 = &v5[16 * (v17 & 0x1FFFFFFFFFFFFFFELL)];
      v18 = v5 + 16;
      v19 = v17 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *((_QWORD *)v18 - 2) = 0;
        *(_QWORD *)v18 = 0;
        *((_DWORD *)v18 - 2) = 0;
        *((_DWORD *)v18 + 2) = 0;
        v18 += 32;
        v19 -= 2;
      }
      while (v19);
      if (v17 != (v17 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_35:
        do
        {
          *(_QWORD *)v6 = 0;
          *((_DWORD *)v6 + 2) = 0;
          v6 += 16;
        }
        while (v6 != &v5[16 * a2]);
      }
      v6 = &v5[16 * a2];
    }
    a1[1] = (uint64_t)v6;
    return;
  }
  v7 = (char *)*a1;
  v8 = (uint64_t)&v5[-*a1] >> 4;
  v9 = v8 + a2;
  if ((v8 + a2) >> 60)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v10 = v4 - (_QWORD)v7;
  if (v10 >> 3 > v9)
    v9 = v10 >> 3;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
    v11 = 0xFFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    if (v11 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v12 = (char *)operator new(16 * v11);
    v13 = (uint64_t)&v12[16 * v8];
    v14 = v13 + 16 * a2;
    v15 = v13;
    v16 = (a2 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (!v16)
      goto LABEL_24;
  }
  else
  {
    v12 = 0;
    v13 = 16 * v8;
    v14 = 16 * v8 + 16 * a2;
    v15 = 16 * v8;
    v16 = (a2 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (!v16)
    {
      do
      {
LABEL_24:
        *(_QWORD *)v15 = 0;
        *(_DWORD *)(v15 + 8) = 0;
        v15 += 16;
      }
      while (v15 != v14);
      goto LABEL_25;
    }
  }
  v20 = v16 + 1;
  v15 = v13 + 16 * (v20 & 0x1FFFFFFFFFFFFFFELL);
  v21 = v13 + 16;
  v22 = v20 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *(_QWORD *)(v21 - 16) = 0;
    *(_QWORD *)v21 = 0;
    *(_DWORD *)(v21 - 8) = 0;
    *(_DWORD *)(v21 + 8) = 0;
    v21 += 32;
    v22 -= 2;
  }
  while (v22);
  if (v20 != (v20 & 0x1FFFFFFFFFFFFFFELL))
    goto LABEL_24;
LABEL_25:
  v23 = &v12[16 * v11];
  if (v5 == v7)
  {
    v25 = (void *)*a1;
    *a1 = v13;
    a1[1] = v14;
    a1[2] = (uint64_t)v23;
    if (v25)
LABEL_28:
      operator delete(v25);
  }
  else
  {
    do
    {
      v24 = v13 - 16;
      *(_OWORD *)(v13 - 16) = *((_OWORD *)v6 - 1);
      v6 -= 16;
      v13 -= 16;
    }
    while (v6 != v7);
    v25 = (void *)*a1;
    *a1 = v24;
    a1[1] = v14;
    a1[2] = (uint64_t)v23;
    if (v25)
      goto LABEL_28;
  }
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::RevIntRepository>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F9862D8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::RevIntRepository>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F9862D8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x22E31DF78);
}

void std::vector<std::deque<int>>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 4) >= a2)
  {
    if (a2)
    {
      v12 = 48 * ((48 * a2 - 48) / 0x30) + 48;
      bzero(*(void **)(a1 + 8), v12);
      v5 += v12;
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(char **)a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v5[-*(_QWORD *)a1] >> 4);
    v8 = v7 + a2;
    if (v7 + a2 > 0x555555555555555)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 4);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x2AAAAAAAAAAAAAALL)
      v10 = 0x555555555555555;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x555555555555555)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(48 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[48 * v7];
    v14 = &v11[48 * v10];
    v15 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v5)
LABEL_22:
        operator delete(v5);
    }
    else
    {
      v17 = 0;
      do
      {
        v18 = &v13[v17];
        v19 = &v5[v17];
        *((_QWORD *)v18 - 6) = *(_QWORD *)&v5[v17 - 48];
        *((_QWORD *)v18 - 5) = *(_QWORD *)&v5[v17 - 40];
        *((_QWORD *)v18 - 4) = *(_QWORD *)&v5[v17 - 32];
        *((_QWORD *)v18 - 3) = *(_QWORD *)&v5[v17 - 24];
        *((_OWORD *)v19 - 3) = 0uLL;
        *((_OWORD *)v19 - 2) = 0uLL;
        *((_QWORD *)v18 - 2) = *(_QWORD *)&v5[v17 - 16];
        *((_QWORD *)v18 - 1) = *(_QWORD *)&v5[v17 - 8];
        *((_QWORD *)v19 - 2) = 0;
        *((_QWORD *)v19 - 1) = 0;
        v17 -= 48;
      }
      while (&v5[v17] != v6);
      v20 = *(char **)a1;
      v5 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = &v13[v17];
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v5 != v20)
      {
        do
        {
          v5 -= 48;
          std::deque<int>::~deque[abi:ne180100]((uint64_t)v5);
        }
        while (v5 != v20);
        v5 = v20;
      }
      if (v5)
        goto LABEL_22;
    }
  }
}

void std::__function::__func<operations_research::sat::ExcludeCurrentSolutionWithoutIgnoredVariableAndBacktrack(void)::$_0,std::allocator<operations_research::sat::ExcludeCurrentSolutionWithoutIgnoredVariableAndBacktrack(void)::$_0>,void ()(operations_research::sat::Model *)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::ExcludeCurrentSolutionWithoutIgnoredVariableAndBacktrack(void)::$_0,std::allocator<operations_research::sat::ExcludeCurrentSolutionWithoutIgnoredVariableAndBacktrack(void)::$_0>,void ()(operations_research::sat::Model *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24F986310;
  return result;
}

void std::__function::__func<operations_research::sat::ExcludeCurrentSolutionWithoutIgnoredVariableAndBacktrack(void)::$_0,std::allocator<operations_research::sat::ExcludeCurrentSolutionWithoutIgnoredVariableAndBacktrack(void)::$_0>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24F986310;
}

void std::__function::__func<operations_research::sat::ExcludeCurrentSolutionWithoutIgnoredVariableAndBacktrack(void)::$_0,std::allocator<operations_research::sat::ExcludeCurrentSolutionWithoutIgnoredVariableAndBacktrack(void)::$_0>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  operations_research::sat::SatSolver *v3;
  operations_research::sat::IntegerTrail *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  int *v10;
  int *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  int *v19;
  unint64_t v20;
  uint64_t v21;
  int *v22;
  char v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  int *v30;
  unint64_t v31;
  int *v32;
  int v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  int *v38;
  uint64_t v39;
  __int128 v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  int *v46;
  unint64_t v47;
  int *v48;
  int v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  _OWORD *v53;
  int *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t (***v57)();
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  operations_research::sat::SatSolver *v61;
  uint64_t v62;
  _QWORD *v63;
  int v64;
  uint64_t v65;
  operations_research::sat::IntegerTrail *v66;
  int *v67;
  uint64_t (**v68)();
  int *v69[2];
  uint64_t (***v70)();
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  v3 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(*a2);
  v4 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(v2);
  v5 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(v2);
  v6 = *((int *)v3 + 76);
  v67 = 0;
  v59 = v2;
  if ((_DWORD)v6)
  {
    if ((v6 & 0x80000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v7 = v5;
    v8 = (int *)operator new(4 * v6);
    v9 = 0;
    v10 = &v8[v6];
    v62 = v6;
    v63 = (_QWORD *)(v7 + 56);
    v11 = v8;
    v12 = v8;
    v66 = v4;
    v60 = v7;
    v61 = v3;
    while (1)
    {
      v65 = v9;
      v13 = *(int *)(*((_QWORD *)v3 + 39) + 8 * v9 + 4);
      v14 = *(_QWORD *)(v7 + 88);
      v15 = (unint64_t)(*(_QWORD *)(v7 + 96) - v14) >> 5;
      v16 = (_QWORD *)(v14 + 32 * v13);
      v64 = v13;
      if ((int)v13 >= (int)v15)
        v17 = v63;
      else
        v17 = v16;
      v20 = *v17;
      v19 = (int *)(v17 + 1);
      v18 = v20;
      if ((v20 & 1) != 0)
        v19 = *(int **)v19;
      if (v18 < 2)
      {
        v21 = v65;
        goto LABEL_49;
      }
      v22 = &v19[3 * (v18 >> 1)];
      v23 = 1;
      do
      {
        v24 = *(int *)(*((_QWORD *)v4 + 51) + 4 * *v19);
        if ((_DWORD)v24 == -1
          || ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 117) + 24) + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v24) & 1) == 0)
        {
          goto LABEL_16;
        }
        v25 = v24 ^ 1;
        if (v11 < v10)
        {
          v23 = 0;
          *v11++ = v25;
          v8 = v11;
          goto LABEL_16;
        }
        v26 = v11 - v12;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        if (((char *)v10 - (char *)v12) >> 1 > v27)
          v27 = ((char *)v10 - (char *)v12) >> 1;
        if ((unint64_t)((char *)v10 - (char *)v12) >= 0x7FFFFFFFFFFFFFFCLL)
          v28 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v28 = v27;
        if (v28)
        {
          if (v28 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v29 = operator new(4 * v28);
          v30 = (int *)&v29[4 * v26];
          *v30 = v25;
          v8 = v30 + 1;
          if (v11 == v12)
            goto LABEL_34;
        }
        else
        {
          v29 = 0;
          v30 = (int *)(4 * v26);
          *(_DWORD *)(4 * v26) = v25;
          v8 = (int *)(4 * v26 + 4);
          if (v11 == v12)
            goto LABEL_34;
        }
        v31 = (char *)(v11 - 1) - (char *)v12;
        if (v31 < 0xBC)
        {
          v32 = v11;
          goto LABEL_33;
        }
        if (&v29[(char *)v11 - (char *)v12 - 4 - (v31 & 0xFFFFFFFFFFFFFFFCLL)] > &v29[(char *)v11 - (char *)v12 - 4])
        {
          v32 = v11;
          do
          {
LABEL_33:
            v33 = *--v32;
            *--v30 = v33;
          }
          while (v32 != v12);
          goto LABEL_34;
        }
        if ((int *)((char *)v11 - (v31 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v11 - 1)
        {
          v32 = v11;
          goto LABEL_33;
        }
        if ((unint64_t)((char *)v12 - v29) < 0x20)
        {
          v32 = v11;
          goto LABEL_33;
        }
        v35 = (v31 >> 2) + 1;
        v36 = 4 * (v35 & 0x7FFFFFFFFFFFFFF8);
        v32 = &v11[v36 / 0xFFFFFFFFFFFFFFFCLL];
        v30 = (int *)((char *)v30 - v36);
        v37 = &v29[4 * v26 - 16];
        v38 = v11 - 4;
        v39 = v35 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v40 = *(_OWORD *)v38;
          *(v37 - 1) = *((_OWORD *)v38 - 1);
          *v37 = v40;
          v37 -= 2;
          v38 -= 8;
          v39 -= 8;
        }
        while (v39);
        if (v35 != (v35 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_33;
LABEL_34:
        v10 = (int *)&v29[4 * v28];
        if (v12)
        {
          v34 = v8;
          operator delete(v12);
          v8 = v34;
          v23 = 0;
          v11 = v34;
        }
        else
        {
          v23 = 0;
          v11 = v8;
        }
        v12 = v30;
        v4 = v66;
LABEL_16:
        v19 += 3;
      }
      while (v19 != v22);
      v67 = v8;
      v7 = v60;
      v3 = v61;
      v21 = v65;
      if ((v23 & 1) != 0)
      {
LABEL_49:
        v41 = v64 ^ 1;
        if (v11 < v10)
        {
          *v11 = v41;
          v8 = v11 + 1;
        }
        else
        {
          v42 = v11 - v12;
          v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 62)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          if (((char *)v10 - (char *)v12) >> 1 > v43)
            v43 = ((char *)v10 - (char *)v12) >> 1;
          if ((unint64_t)((char *)v10 - (char *)v12) >= 0x7FFFFFFFFFFFFFFCLL)
            v44 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v44 = v43;
          if (v44)
          {
            if (v44 >> 62)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v45 = operator new(4 * v44);
            v46 = (int *)&v45[4 * v42];
            *v46 = v41;
            v8 = v46 + 1;
            if (v11 != v12)
            {
LABEL_59:
              v47 = (char *)(v11 - 1) - (char *)v12;
              if (v47 < 0xBC
                || &v45[(char *)v11 - (char *)v12 - 4 - (v47 & 0xFFFFFFFFFFFFFFFCLL)] > &v45[(char *)v11
                                                                                           - (char *)v12
                                                                                           - 4]
                || (int *)((char *)v11 - (v47 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v11 - 1
                || (unint64_t)((char *)v12 - v45) < 0x20)
              {
                v48 = v11;
                v4 = v66;
              }
              else
              {
                v51 = (v47 >> 2) + 1;
                v52 = 4 * (v51 & 0x7FFFFFFFFFFFFFF8);
                v48 = &v11[v52 / 0xFFFFFFFFFFFFFFFCLL];
                v46 = (int *)((char *)v46 - v52);
                v53 = &v45[4 * v42 - 16];
                v54 = v11 - 4;
                v55 = v51 & 0x7FFFFFFFFFFFFFF8;
                v4 = v66;
                do
                {
                  v56 = *(_OWORD *)v54;
                  *(v53 - 1) = *((_OWORD *)v54 - 1);
                  *v53 = v56;
                  v53 -= 2;
                  v54 -= 8;
                  v55 -= 8;
                }
                while (v55);
                if (v51 == (v51 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_62:
                  v10 = (int *)&v45[4 * v44];
                  if (v12)
                    goto LABEL_63;
                  goto LABEL_64;
                }
              }
              do
              {
                v49 = *--v48;
                *--v46 = v49;
              }
              while (v48 != v12);
              goto LABEL_62;
            }
          }
          else
          {
            v45 = 0;
            v46 = (int *)(4 * v42);
            *(_DWORD *)(4 * v42) = v41;
            v8 = (int *)(4 * v42 + 4);
            if (v11 != v12)
              goto LABEL_59;
          }
          v4 = v66;
          v10 = (int *)&v45[4 * v44];
          if (v12)
          {
LABEL_63:
            v50 = v8;
            operator delete(v12);
            v8 = v50;
          }
LABEL_64:
          v12 = v46;
          v21 = v65;
        }
        v67 = v8;
        v11 = v8;
      }
      v9 = v21 + 1;
      if (v9 == v62)
        goto LABEL_76;
    }
  }
  v12 = 0;
LABEL_76:
  operations_research::sat::SatSolver::Backtrack(v3, 0);
  v68 = &off_24F980568;
  v69[0] = v12;
  v69[1] = (int *)(v67 - v12);
  v70 = &v68;
  operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v69, v59);
  v57 = v70;
  if (v70 == &v68)
  {
    v58 = 4;
    v57 = &v68;
  }
  else
  {
    if (!v70)
      goto LABEL_81;
    v58 = 5;
  }
  (*v57)[v58]();
LABEL_81:
  if (v12)
    operator delete(v12);
}

void sub_22DB6E09C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v23;
  char *v25;
  uint64_t v26;

  v25 = a23;
  if (a23 == v23)
  {
    v26 = 4;
    v25 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<operations_research::sat::ExcludeCurrentSolutionWithoutIgnoredVariableAndBacktrack(void)::$_0,std::allocator<operations_research::sat::ExcludeCurrentSolutionWithoutIgnoredVariableAndBacktrack(void)::$_0>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat56ExcludeCurrentSolutionWithoutIgnoredVariableAndBacktrackEvE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat56ExcludeCurrentSolutionWithoutIgnoredVariableAndBacktrackEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat56ExcludeCurrentSolutionWithoutIgnoredVariableAndBacktrackEvE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat56ExcludeCurrentSolutionWithoutIgnoredVariableAndBacktrackEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::ExcludeCurrentSolutionWithoutIgnoredVariableAndBacktrack(void)::$_0,std::allocator<operations_research::sat::ExcludeCurrentSolutionWithoutIgnoredVariableAndBacktrack(void)::$_0>,void ()(operations_research::sat::Model *)>::target_type()
{
}

uint64_t operations_research::sat::IntegerSumLE::IntegerSumLE(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  _DWORD *v13;
  int64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  int64_t v20;
  char *v21;
  char *v22;
  const void *v23;
  int64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  char *v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  int *v46;
  unint64_t v47;
  char *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  char *v53;
  uint64_t v54;
  __int128 v55;
  _QWORD *v57;
  void **v58;
  _BYTE v59[16];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_24F986390;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v13 = *(_DWORD **)a2;
  v12 = *(_QWORD *)(a2 + 8);
  v14 = v12 - *(_QWORD *)a2;
  if (v12 != *(_QWORD *)a2)
  {
    if (v14 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v15 = (char *)operator new(v12 - *(_QWORD *)a2);
    *(_QWORD *)(a1 + 8) = v15;
    *(_QWORD *)(a1 + 16) = v15;
    v16 = &v15[4 * (v14 >> 2)];
    *(_QWORD *)(a1 + 24) = v16;
    memcpy(v15, v13, v14);
    *(_QWORD *)(a1 + 16) = v16;
  }
  *(_QWORD *)(a1 + 32) = a5;
  *(_QWORD *)(a1 + 40) = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>(a6);
  *(_QWORD *)(a1 + 48) = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a6);
  *(_QWORD *)(a1 + 56) = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>(a6);
  v17 = operations_research::sat::Model::GetOrCreate<operations_research::sat::RevIntegerValueRepository>(a6);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 64) = v17;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 73) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v19 = *(const void **)a3;
  v18 = *(_QWORD *)(a3 + 8);
  v20 = v18 - *(_QWORD *)a3;
  if (v18 == *(_QWORD *)a3)
  {
    v22 = 0;
    v21 = 0;
  }
  else
  {
    if (v20 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v21 = (char *)operator new(v18 - *(_QWORD *)a3);
    *(_QWORD *)(a1 + 88) = v21;
    *(_QWORD *)(a1 + 96) = v21;
    v22 = &v21[4 * (v20 >> 2)];
    *(_QWORD *)(a1 + 104) = v22;
    memcpy(v21, v19, v20);
    *(_QWORD *)(a1 + 96) = v22;
  }
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  v23 = *(const void **)a4;
  v24 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
  if (v24)
  {
    if (v24 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v25 = (char *)operator new(v24);
    *(_QWORD *)(a1 + 112) = v25;
    *(_QWORD *)(a1 + 120) = v25;
    v26 = &v25[8 * (v24 >> 3)];
    *(_QWORD *)(a1 + 128) = v26;
    memcpy(v25, v23, v24);
    *(_QWORD *)(a1 + 120) = v26;
  }
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  v58 = (void **)(a1 + 160);
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  if (v21 == v22)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v59, (google::glog_internal_namespace_ *)"./ortools/sat/integer_expr.cc", 44);
    v57 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v59);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"Check failed: !vars_.empty() ", 29);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v59);
  }
  std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::__append(a1 + 136, (v22 - v21) >> 2);
  v27 = *(_QWORD *)(a3 + 8);
  v28 = v27 - *(_QWORD *)a3;
  if (v27 != *(_QWORD *)a3)
  {
    v29 = 0;
    v30 = v28 >> 2;
    v31 = *(_QWORD *)(a1 + 112);
    if (v30 <= 1)
      v30 = 1;
    do
    {
      v32 = *(_QWORD *)(v31 + 8 * v29);
      if (v32 < 0)
      {
        *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * v29) ^= 1u;
        *(_QWORD *)(v31 + 8 * v29) = -v32;
      }
      ++v29;
    }
    while (v30 != v29);
  }
  v33 = *(_DWORD **)a2;
  v34 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 != v34)
  {
    v35 = *(char **)(a1 + 168);
    while (1)
    {
      v37 = *v33 ^ 1;
      v38 = *(_QWORD *)(a1 + 176);
      if ((unint64_t)v35 >= v38)
        break;
      *(_DWORD *)v35 = v37;
      v36 = (uint64_t)(v35 + 4);
LABEL_22:
      *(_QWORD *)(a1 + 168) = v36;
      ++v33;
      v35 = (char *)v36;
      if (v33 == v34)
        goto LABEL_50;
    }
    v39 = (char *)*v58;
    v40 = v35 - (_BYTE *)*v58;
    v41 = v40 >> 2;
    v42 = (v40 >> 2) + 1;
    if (v42 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v43 = v38 - (_QWORD)v39;
    if (v43 >> 1 > v42)
      v42 = v43 >> 1;
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
      v44 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v44 = v42;
    if (v44)
    {
      if (v44 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v45 = operator new(4 * v44);
      v46 = (int *)&v45[4 * v41];
      *v46 = v37;
      v36 = (uint64_t)(v46 + 1);
      if (v35 == v39)
        goto LABEL_38;
    }
    else
    {
      v45 = 0;
      v46 = (int *)(4 * v41);
      *(_DWORD *)(4 * v41) = v37;
      v36 = 4 * v41 + 4;
      if (v35 == v39)
        goto LABEL_38;
    }
    v47 = v35 - 4 - v39;
    if (v47 >= 0xBC)
    {
      if (&v45[v40 - 4 - (v47 & 0xFFFFFFFFFFFFFFFCLL)] > &v45[v40 - 4])
      {
        v48 = v35;
      }
      else if (&v35[-(v47 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v35 - 4)
      {
        v48 = v35;
      }
      else if ((unint64_t)(v35 - &v45[v40]) >= 0x20)
      {
        v50 = (v47 >> 2) + 1;
        v51 = 4 * (v50 & 0x7FFFFFFFFFFFFFF8);
        v48 = &v35[-v51];
        v46 = (int *)((char *)v46 - v51);
        v52 = &v45[4 * v41 - 16];
        v53 = v35 - 16;
        v54 = v50 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v55 = *(_OWORD *)v53;
          *(v52 - 1) = *((_OWORD *)v53 - 1);
          *v52 = v55;
          v52 -= 2;
          v53 -= 32;
          v54 -= 8;
        }
        while (v54);
        if (v50 == (v50 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_38:
          *(_QWORD *)(a1 + 160) = v46;
          *(_QWORD *)(a1 + 168) = v36;
          *(_QWORD *)(a1 + 176) = &v45[4 * v44];
          if (v39)
            operator delete(v39);
          goto LABEL_22;
        }
      }
      else
      {
        v48 = v35;
      }
    }
    else
    {
      v48 = v35;
    }
    do
    {
      v49 = *((_DWORD *)v48 - 1);
      v48 -= 4;
      *--v46 = v49;
    }
    while (v48 != v39);
    goto LABEL_38;
  }
LABEL_50:
  *(_DWORD *)(a1 + 84) = 0;
  *(_QWORD *)(a1 + 73) = 0;
  return a1;
}

void sub_22DB6E5C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void **a12, void **a13, void **a14, char a15)
{
  _QWORD *v15;
  void **v16;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  v18 = (void *)v15[26];
  if (v18)
  {
    v15[27] = v18;
    operator delete(v18);
    v19 = (void *)v15[23];
    if (!v19)
    {
LABEL_3:
      v20 = *a14;
      if (!*a14)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else
  {
    v19 = (void *)v15[23];
    if (!v19)
      goto LABEL_3;
  }
  v15[24] = v19;
  operator delete(v19);
  v20 = *a14;
  if (!*a14)
  {
LABEL_4:
    v21 = *a11;
    if (!*a11)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  v15[21] = v20;
  operator delete(v20);
  v21 = *a11;
  if (!*a11)
  {
LABEL_5:
    v22 = *a12;
    if (!*a12)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  v15[18] = v21;
  operator delete(v21);
  v22 = *a12;
  if (!*a12)
  {
LABEL_6:
    v23 = *a13;
    if (!*a13)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_15:
  v15[15] = v22;
  operator delete(v22);
  v23 = *a13;
  if (!*a13)
  {
LABEL_8:
    v24 = *v16;
    if (*v16)
    {
      v15[2] = v24;
      operator delete(v24);
    }
    _Unwind_Resume(exception_object);
  }
LABEL_7:
  v15[12] = v23;
  operator delete(v23);
  goto LABEL_8;
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::RevIntegerValueRepository>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v19;

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 32);
  if (!v2)
    goto LABEL_12;
  v4 = (_QWORD *)(a1 + 32);
  do
  {
    v5 = v2[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::RevIntegerValueRepository>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::RevIntegerValueRepository>(void)::d)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 != v3
    && v4[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::RevIntegerValueRepository>(void)::d)
  {
    return v4[5];
  }
LABEL_12:
  v8 = operations_research::sat::Model::MyNew<operations_research::sat::RevIntegerValueRepository>(a1);
  v9 = *(_QWORD **)(a1 + 32);
  v10 = v3;
  if (v9)
  {
    while (1)
    {
      while (1)
      {
        v10 = v9;
        v11 = v9[4];
        if (v11 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::RevIntegerValueRepository>(void)::d)
          break;
        v9 = (_QWORD *)*v10;
        v3 = v10;
        if (!*v10)
          goto LABEL_19;
      }
      if (v11 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::RevIntegerValueRepository>(void)::d)
        break;
      v9 = (_QWORD *)v10[1];
      if (!v9)
      {
        v3 = v10 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v12 = v10;
    v10 = operator new(0x30uLL);
    v10[4] = &gtl::FastTypeId<operations_research::sat::RevIntegerValueRepository>(void)::d;
    v10[5] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v12;
    *v3 = v10;
    v13 = **(_QWORD **)(a1 + 24);
    v14 = v10;
    if (v13)
    {
      *(_QWORD *)(a1 + 24) = v13;
      v14 = (uint64_t *)*v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v14);
    ++*(_QWORD *)(a1 + 40);
  }
  v10[5] = v8;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24F986608;
  v15[1] = v8;
  v19 = v15;
  v16 = *(_QWORD **)(a1 + 56);
  if ((unint64_t)v16 >= *(_QWORD *)(a1 + 64))
  {
    v17 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a1 + 48), &v19);
  }
  else
  {
    *v16 = v15;
    v17 = (char *)(v16 + 1);
  }
  *(_QWORD *)(a1 + 56) = v17;
  return v8;
}

void operations_research::sat::IntegerSumLE::FillIntegerReason(operations_research::sat::IntegerSumLE *this)
{
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _DWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _OWORD *v38;
  char *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  void **v43;
  _QWORD *v44;
  _BYTE v45[12];

  *((_QWORD *)this + 24) = *((_QWORD *)this + 23);
  v43 = (void **)((char *)this + 208);
  v44 = (_QWORD *)((char *)this + 184);
  *((_QWORD *)this + 27) = *((_QWORD *)this + 26);
  v1 = *((_QWORD *)this + 12) - *((_QWORD *)this + 11);
  if ((int)(v1 >> 2) >= 1)
  {
    v3 = 0;
    v4 = (v1 >> 2);
    while (1)
    {
      v6 = *(_DWORD *)(*((_QWORD *)this + 11) + 4 * v3);
      v7 = *((_QWORD *)this + 6);
      v8 = *(_QWORD *)(v7 + 40);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v7 + 48) - v8) >> 2) > *(int *)(v8 + 12 * v6 + 8))
        goto LABEL_5;
      *(_DWORD *)v45 = *(_DWORD *)(*((_QWORD *)this + 11) + 4 * v3);
      *(_QWORD *)&v45[4] = *(_QWORD *)(v8 + 12 * v6);
      v10 = (_DWORD *)*((_QWORD *)this + 24);
      v9 = *((_QWORD *)this + 25);
      if ((unint64_t)v10 < v9)
      {
        *(_QWORD *)v10 = *(_QWORD *)v45;
        v10[2] = *(_DWORD *)&v45[8];
        *((_QWORD *)this + 24) = v10 + 3;
        v11 = *((_QWORD *)this + 14);
        v13 = (char *)*((_QWORD *)this + 27);
        v12 = *((_QWORD *)this + 28);
        if ((unint64_t)v13 >= v12)
          goto LABEL_26;
        goto LABEL_3;
      }
      v14 = (_DWORD *)*v44;
      v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v10 - *v44) >> 2);
      v16 = v15 + 1;
      if (v15 + 1 > 0x1555555555555555)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (_QWORD)v14) >> 2);
      if (2 * v17 > v16)
        v16 = 2 * v17;
      v18 = v17 >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v16;
      if (!v18)
        break;
      if (v18 > 0x1555555555555555)
        goto LABEL_47;
      v19 = (char *)operator new(12 * v18);
      v20 = (uint64_t)&v19[12 * v15];
      *(_QWORD *)v20 = *(_QWORD *)v45;
      *(_DWORD *)(v20 + 8) = *(_DWORD *)&v45[8];
      v21 = v20;
      if (v10 != v14)
        goto LABEL_21;
LABEL_23:
      v24 = &v19[12 * v18];
      v25 = v20 + 12;
      *((_QWORD *)this + 23) = v21;
      *((_QWORD *)this + 24) = v20 + 12;
      *((_QWORD *)this + 25) = v24;
      if (v10)
        operator delete(v10);
      *((_QWORD *)this + 24) = v25;
      v11 = *((_QWORD *)this + 14);
      v13 = (char *)*((_QWORD *)this + 27);
      v12 = *((_QWORD *)this + 28);
      if ((unint64_t)v13 >= v12)
      {
LABEL_26:
        v26 = (char *)*v43;
        v27 = v13 - (_BYTE *)*v43;
        v28 = v27 >> 3;
        v29 = (v27 >> 3) + 1;
        if (v29 >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v30 = v12 - (_QWORD)v26;
        if (v30 >> 2 > v29)
          v29 = v30 >> 2;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
          v31 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        if (v31)
        {
          if (v31 >> 61)
LABEL_47:
            std::__throw_bad_array_new_length[abi:ne180100]();
          v32 = operator new(8 * v31);
          v33 = &v32[8 * v28];
          *v33 = *(_QWORD *)(v11 + 8 * v3);
          v5 = (uint64_t)(v33 + 1);
          if (v13 == v26)
            goto LABEL_43;
LABEL_37:
          v34 = v13 - 8 - v26;
          if (v34 < 0x58)
            goto LABEL_52;
          if ((unint64_t)(v13 - &v32[v27]) < 0x20)
            goto LABEL_52;
          v35 = (v34 >> 3) + 1;
          v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
          v37 = &v13[-v36];
          v33 = (_QWORD *)((char *)v33 - v36);
          v38 = &v32[8 * v28 - 16];
          v39 = v13 - 16;
          v40 = v35 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v41 = *(_OWORD *)v39;
            *(v38 - 1) = *((_OWORD *)v39 - 1);
            *v38 = v41;
            v38 -= 2;
            v39 -= 32;
            v40 -= 4;
          }
          while (v40);
          v13 = v37;
          if (v35 != (v35 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_52:
            do
            {
              v42 = *((_QWORD *)v13 - 1);
              v13 -= 8;
              *--v33 = v42;
            }
            while (v13 != v26);
          }
        }
        else
        {
          v32 = 0;
          v33 = (_QWORD *)(8 * v28);
          *(_QWORD *)(8 * v28) = *(_QWORD *)(v11 + 8 * v3);
          v5 = 8 * v28 + 8;
          if (v13 != v26)
            goto LABEL_37;
        }
LABEL_43:
        *((_QWORD *)this + 26) = v33;
        *((_QWORD *)this + 27) = v5;
        *((_QWORD *)this + 28) = &v32[8 * v31];
        if (v26)
          operator delete(v26);
        goto LABEL_4;
      }
LABEL_3:
      *(_QWORD *)v13 = *(_QWORD *)(v11 + 8 * v3);
      v5 = (uint64_t)(v13 + 8);
LABEL_4:
      *((_QWORD *)this + 27) = v5;
LABEL_5:
      if (++v3 == v4)
        return;
    }
    v19 = 0;
    v20 = 4 * (((uint64_t)v10 - *v44) >> 2);
    *(_QWORD *)v20 = *(_QWORD *)v45;
    *(_DWORD *)(v20 + 8) = *(_DWORD *)&v45[8];
    v21 = 12 * v15;
    if (v10 == v14)
      goto LABEL_23;
    do
    {
LABEL_21:
      v22 = *(_QWORD *)(v10 - 3);
      v10 -= 3;
      v23 = v10[2];
      *(_QWORD *)(v21 - 12) = v22;
      v21 -= 12;
      *(_DWORD *)(v21 + 8) = v23;
    }
    while (v10 != v14);
    v10 = (_DWORD *)*v44;
    goto LABEL_23;
  }
}

BOOL operations_research::sat::IntegerSumLE::Propagate(operations_research::sat::IntegerSumLE *this)
{
  int *v2;
  int *v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  char v38;
  int v39;
  _BYTE *v40;
  _BYTE *v41;
  int64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  void **v53;
  size_t v54;
  uint64_t v55;
  _QWORD v57[3];
  _QWORD *v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v2 = (int *)*((_QWORD *)this + 1);
  v3 = (int *)*((_QWORD *)this + 2);
  if (v2 == v3)
  {
    v4 = 0;
    v5 = -1;
    if (*((_BYTE *)this + 72))
LABEL_10:
      operations_research::RevRepository<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::SaveState(*((_QWORD **)this + 8), (uint64_t *)((char *)this + 73));
  }
  else
  {
    LODWORD(v4) = 0;
    v5 = -1;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 24) + (((unint64_t)*v2 >> 3) & 0x1FFFFFFFFFFFFFF8));
      if (((v6 >> (*v2 & 0x3F ^ 1u)) & 1) != 0)
        return 1;
      if ((v6 & (1 << (*v2 & 0x3F))) != 0)
      {
        v4 = v4;
      }
      else
      {
        v5 = *v2;
        v4 = (v4 + 1);
      }
      ++v2;
    }
    while (v2 != v3);
    if (v4 > 1)
      return 1;
    if (*((_BYTE *)this + 72))
      goto LABEL_10;
  }
  v7 = *((_QWORD *)this + 11);
  v8 = *((_QWORD *)this + 12) - v7;
  v9 = (unint64_t)v8 >> 2;
  v10 = *((_DWORD *)this + 21);
  if (v10 >= (int)((unint64_t)v8 >> 2))
  {
    v11 = 0;
  }
  else
  {
    v11 = 0;
    v12 = v10;
    v13 = *((_QWORD *)this + 14);
    v14 = *(_QWORD *)(*((_QWORD *)this + 6) + 40);
    v15 = (int)(v8 >> 2);
    do
    {
      while (1)
      {
        v22 = *(_DWORD *)(v7 + 4 * v12);
        v23 = *(_QWORD *)(v13 + 8 * v12);
        v24 = *(_QWORD *)(v14 + 12 * v22);
        v25 = *(_QWORD *)(v14 + 12 * (v22 ^ 1));
        if (v25 + v24)
          break;
        v16 = 4 * v10;
        *(_DWORD *)(v7 + 4 * v12) = *(_DWORD *)(v7 + v16);
        *(_DWORD *)(v7 + v16) = v22;
        v17 = *((int *)this + 21);
        v18 = 8 * v17;
        v19 = 8 * v12;
        *(_QWORD *)(v13 + v19) = *(_QWORD *)(v13 + 8 * v17);
        *(_QWORD *)(v13 + v18) = v23;
        v20 = *((_QWORD *)this + 17);
        v21 = *(_QWORD *)(v20 + 8 * v12);
        *(_QWORD *)(v20 + v19) = *(_QWORD *)(v20 + 8 * v17);
        *(_QWORD *)(v20 + v18) = v21;
        v10 = v17 + 1;
        *((_DWORD *)this + 21) = v10;
        *(_QWORD *)((char *)this + 73) += v24 * v23;
        if (v15 == ++v12)
          goto LABEL_20;
      }
      *(_QWORD *)(*((_QWORD *)this + 17) + 8 * v12) = (-v25 - v24) * v23;
      v11 += v24 * v23;
      ++v12;
    }
    while (v15 != v12);
  }
LABEL_20:
  *(double *)(*((_QWORD *)this + 7) + 112) = *(double *)(*((_QWORD *)this + 7) + 112)
                                             + (double)((int)v9 - v10) * 0.000000001;
  v26 = *((_QWORD *)this + 4) - (v11 + *(_QWORD *)((char *)this + 73));
  if (v26 < 0)
  {
    operations_research::sat::IntegerSumLE::FillIntegerReason(this);
    operations_research::sat::IntegerTrail::RelaxLinearReason(*((std::vector<int> **)this + 6), ~v26, *((_QWORD *)this + 26), (uint64_t)(*((_QWORD *)this + 27) - *((_QWORD *)this + 26)) >> 3, (char **)this + 23);
    if (!(_DWORD)v4)
    {
      v47 = *((_QWORD *)this + 6);
      v48 = (char *)*((_QWORD *)this + 20);
      v49 = (char *)*((_QWORD *)this + 21);
      v50 = (uint64_t *)*((_QWORD *)this + 23);
      v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 24) - (_QWORD)v50) >> 2);
      v52 = *(_QWORD *)(v47 + 936);
      *(_QWORD *)(v52 + 144) = 0;
      v53 = (void **)(v52 + 96);
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((_QWORD *)(v52 + 96), v48, v49, (v49 - v48) >> 2);
      operations_research::sat::IntegerTrail::MergeReasonInto(v47, v50, v51, v53);
      return 0;
    }
    v39 = v5 ^ 1;
    v41 = (_BYTE *)*((_QWORD *)this + 20);
    v40 = (_BYTE *)*((_QWORD *)this + 21);
    v42 = v40 - v41;
    if (v40 == v41)
    {
      v46 = 0;
      v43 = 0;
      v54 = -4;
      v55 = 4;
    }
    else
    {
      if (v42 < 0)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v43 = (char *)operator new(v40 - v41);
      v44 = 4 * (v42 >> 2);
      memcpy(v43, v41, v42);
      v45 = 0;
      while (*(_DWORD *)&v43[v45] != v39)
      {
        v45 += 4;
        if (v44 == v45)
        {
          v46 = &v43[v44];
          goto LABEL_45;
        }
      }
      v46 = &v43[v45];
LABEL_45:
      v55 = (uint64_t)(v46 + 4);
      v42 = (int64_t)v43;
      v54 = &v43[v44] - (v46 + 4);
      if (!v54)
        goto LABEL_47;
    }
    memmove(v46, (const void *)v55, v54);
LABEL_47:
    operations_research::sat::IntegerTrail::EnqueueLiteral(*((_QWORD *)this + 6), v39, (char *)v42, (uint64_t)&v46[v54 - v42] >> 2, *((char **)this + 23), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 24) - *((_QWORD *)this + 23)) >> 2));
    if (v43)
      operator delete(v43);
    return 1;
  }
  v27 = 1;
  if (!(_DWORD)v4 && (int)v9 > v10)
  {
    v27 = 0;
    v28 = v10;
    v29 = (int)(v8 >> 2);
    while (*(_QWORD *)(*((_QWORD *)this + 17) + 8 * v28) <= v26)
    {
LABEL_27:
      v27 = ++v28 >= v29;
      if (v29 == v28)
        return v27;
    }
    v32 = *(_DWORD *)(*((_QWORD *)this + 11) + 4 * v28);
    v33 = *(_QWORD *)(*((_QWORD *)this + 14) + 8 * v28);
    v34 = *((_QWORD *)this + 6);
    v35 = *(_QWORD *)(*(_QWORD *)(v34 + 40) + 12 * v32) + v26 / v33;
    v36 = v32 ^ 1;
    if (v35 >= (uint64_t)0x8000000000000002)
      v37 = -v35;
    else
      v37 = 0x7FFFFFFFFFFFFFFFLL;
    v57[0] = &off_24F986640;
    v57[1] = this;
    v57[2] = v33 + v33 * (v26 / v33) + ~v26;
    v58 = v57;
    v4 = v4 & 0xFFFFFFFF00000000 | HIDWORD(v37);
    v38 = operations_research::sat::IntegerTrail::Enqueue(v34, __SPAIR64__(v37, v36), v4, v57);
    v30 = v58;
    if (v58 == v57)
    {
      v30 = v57;
      v31 = 4;
    }
    else
    {
      if (!v58)
      {
LABEL_26:
        if ((v38 & 1) == 0)
          return v27;
        goto LABEL_27;
      }
      v31 = 5;
    }
    (*(void (**)(void))(*v30 + 8 * v31))();
    goto LABEL_26;
  }
  return v27;
}

void sub_22DB6F060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  void *v15;

  if (v15)
  {
    operator delete(v15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::RevRepository<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::SaveState(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  char **v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;

  if (a1[2] != a1[3])
  {
    v4 = *a2;
    v6 = (char *)a1[6];
    v5 = a1[7];
    if ((unint64_t)v6 < v5)
    {
      *(_QWORD *)v6 = a2;
      *((_QWORD *)v6 + 1) = v4;
      v7 = (uint64_t)(v6 + 16);
LABEL_19:
      a1[6] = v7;
      return;
    }
    v8 = (char **)(a1 + 5);
    v9 = (char *)a1[5];
    v10 = (v6 - v9) >> 4;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = v5 - (_QWORD)v9;
    if (v12 >> 3 > v11)
      v11 = v12 >> 3;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v14 = (char *)operator new(16 * v13);
      v15 = &v14[16 * v10];
      v16 = &v14[16 * v13];
      *(_QWORD *)v15 = a2;
      *((_QWORD *)v15 + 1) = v4;
      v7 = (uint64_t)(v15 + 16);
      if (v6 == v9)
        goto LABEL_17;
    }
    else
    {
      v15 = (char *)(16 * v10);
      v16 = 0;
      *(_QWORD *)v15 = a2;
      *((_QWORD *)v15 + 1) = v4;
      v7 = 16 * v10 + 16;
      if (v6 == v9)
      {
LABEL_17:
        a1[5] = v15;
        a1[6] = v7;
        a1[7] = v16;
        if (v6)
          operator delete(v6);
        goto LABEL_19;
      }
    }
    do
    {
      *((_OWORD *)v15 - 1) = *((_OWORD *)v6 - 1);
      v15 -= 16;
      v6 -= 16;
    }
    while (v6 != v9);
    v6 = *v8;
    goto LABEL_17;
  }
}

void operations_research::sat::IntegerSumLE::RegisterWith(operations_research::sat::IntegerSumLE *this, operations_research::sat::GenericLiteralWatcher *a2)
{
  unsigned int v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;

  *((_BYTE *)this + 72) = 1;
  v4 = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)a2, (uint64_t)this);
  v5 = (unsigned int *)*((_QWORD *)this + 11);
  v6 = (unsigned int *)*((_QWORD *)this + 12);
  while (v5 != v6)
  {
    v7 = *v5++;
    operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a2, v7, v4, 0xFFFFFFFFLL);
  }
  v8 = (unsigned int *)*((_QWORD *)this + 1);
  v9 = (unsigned int *)*((_QWORD *)this + 2);
  while (v8 != v9)
  {
    v10 = *v8++;
    operations_research::sat::GenericLiteralWatcher::WatchLiteral((uint64_t)a2, v10, v4, 0xFFFFFFFFLL);
  }
  operations_research::sat::GenericLiteralWatcher::RegisterReversibleInt(a2, v4, (int *)this + 21);
}

uint64_t operations_research::sat::MinPropagator::MinPropagator(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;
  const void *v8;
  int64_t v9;
  char *v10;
  char *v11;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_24F9863C0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v8 = *(const void **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v9 = v7 - *(_QWORD *)a2;
  if (v7 != *(_QWORD *)a2)
  {
    if (v9 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v10 = (char *)operator new(v7 - *(_QWORD *)a2);
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = v10;
    v11 = &v10[4 * (v9 >> 2)];
    *(_QWORD *)(a1 + 24) = v11;
    memcpy(v10, v8, v9);
    *(_QWORD *)(a1 + 16) = v11;
  }
  *(_DWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = a4;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  return a1;
}

void sub_22DB6F358(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::MinPropagator::Propagate(operations_research::sat::MinPropagator *this)
{
  _DWORD *v1;
  _DWORD *v2;
  operations_research::sat::MinPropagator *v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  operations_research::sat::MinPropagator *v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  int v27;
  void *v28;
  char v29;
  _DWORD *v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  char *v37;
  unint64_t v38;
  char *v39;
  _DWORD *v40;
  _DWORD *v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _DWORD *v68;
  char *v69;
  unsigned int v70;
  unint64_t v71;
  char *v72;
  unint64_t v73;
  char *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _DWORD *v87;
  void **v88;
  unint64_t v89;
  void **v90;
  void **v91;
  _BYTE v92[12];
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;

  v2 = (_DWORD *)*((_QWORD *)this + 1);
  v1 = (_DWORD *)*((_QWORD *)this + 2);
  if (v2 == v1)
    return 1;
  v3 = this;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = *((_DWORD *)this + 8);
  v8 = *(_QWORD *)(*((_QWORD *)this + 5) + 40);
  *(_DWORD *)v92 = v7 ^ 1;
  *(_QWORD *)&v92[4] = *(_QWORD *)(v8 + 12 * (v7 ^ 1));
  v9 = *(_QWORD *)v92;
  v85 = HIDWORD(*(_QWORD *)&v92[4]);
  v86 = *(_QWORD *)&v92[4];
  v10 = v1 - v2;
  if (v10 <= 1)
    v10 = 1;
  v11 = 0x7FFFFFFFFFFFFFFELL;
  do
  {
    v12 = *(_QWORD *)(v8 + 12 * (int)v2[v4]);
    if (v12 < v11)
      v11 = *(_QWORD *)(v8 + 12 * (int)v2[v4]);
    if (v12 <= -*(_QWORD *)&v92[4])
    {
      v6 = v4;
      ++v5;
    }
    ++v4;
  }
  while (v10 != v4);
  if (v11 <= *(_QWORD *)(v8 + 12 * v7))
  {
LABEL_34:
    if (v5)
    {
      if (v5 == 1
        && *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 5) + 40) + 12
                                                               * (*(_DWORD *)(*((_QWORD *)v3 + 1) + 4 * v6) ^ 1)) < v86)
      {
        v30 = (_DWORD *)*((_QWORD *)v3 + 6);
        *((_QWORD *)v3 + 7) = v30;
        v90 = (void **)((char *)v3 + 48);
        v31 = *((_QWORD *)v3 + 8);
        if ((unint64_t)v30 < v31)
        {
          *(_QWORD *)v30 = v9;
          v30[2] = v85;
          v32 = (char *)(v30 + 3);
          v33 = v6;
          *((_QWORD *)v3 + 7) = v30 + 3;
          v34 = (_DWORD *)*((_QWORD *)v3 + 1);
          v35 = (_DWORD *)*((_QWORD *)v3 + 2);
          if (v34 == v35)
          {
LABEL_107:
            LODWORD(v97) = v34[v33] ^ 1;
            HIDWORD(v97) = v86;
            return operations_research::sat::IntegerTrail::Enqueue(*((_QWORD *)v3 + 5), v97, v85, 0, 0, *((uint64_t **)v3 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v32[-*((_QWORD *)v3 + 6)] >> 2));
          }
LABEL_84:
          v70 = 1 - v86;
          v71 = (unint64_t)(1 - v86) >> 32;
          do
          {
            if (*v34 != *(_DWORD *)(*((_QWORD *)v3 + 1) + 4 * v33))
            {
              v96 = __PAIR64__(v70, *v34);
              v73 = *((_QWORD *)v3 + 8);
              if ((unint64_t)v32 < v73)
              {
                *(_QWORD *)v32 = __PAIR64__(v70, *v34);
                *((_DWORD *)v32 + 2) = v71;
                v72 = v32 + 12;
              }
              else
              {
                v74 = (char *)*v90;
                v75 = 0xAAAAAAAAAAAAAAABLL * ((v32 - (_BYTE *)*v90) >> 2);
                v76 = v75 + 1;
                if (v75 + 1 > 0x1555555555555555)
                  goto LABEL_110;
                v77 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v73 - (_QWORD)v74) >> 2);
                if (2 * v77 > v76)
                  v76 = 2 * v77;
                if (v77 >= 0xAAAAAAAAAAAAAAALL)
                  v78 = 0x1555555555555555;
                else
                  v78 = v76;
                if (v78)
                {
                  if (v78 > 0x1555555555555555)
                    goto LABEL_109;
                  v79 = (char *)operator new(12 * v78);
                }
                else
                {
                  v79 = 0;
                }
                v80 = &v79[12 * v75];
                *(_QWORD *)v80 = v96;
                *((_DWORD *)v80 + 2) = v71;
                v81 = v80;
                if (v32 != v74)
                {
                  do
                  {
                    v82 = *(_QWORD *)(v32 - 12);
                    v32 -= 12;
                    v83 = *((_DWORD *)v32 + 2);
                    *(_QWORD *)(v81 - 12) = v82;
                    v81 -= 12;
                    *((_DWORD *)v81 + 2) = v83;
                  }
                  while (v32 != v74);
                  v32 = (char *)*v90;
                }
                v72 = v80 + 12;
                *((_QWORD *)v3 + 6) = v81;
                *((_QWORD *)v3 + 7) = v80 + 12;
                *((_QWORD *)v3 + 8) = &v79[12 * v78];
                if (v32)
                  operator delete(v32);
                v70 = 1 - v86;
              }
              *((_QWORD *)v3 + 7) = v72;
              v32 = v72;
            }
            ++v34;
          }
          while (v34 != v35);
          v34 = (_DWORD *)*((_QWORD *)v3 + 1);
          goto LABEL_107;
        }
        v64 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - (_QWORD)v30) >> 2);
        v65 = 2 * v64;
        if (2 * v64 <= 1)
          v65 = 1;
        if (v64 >= 0xAAAAAAAAAAAAAAALL)
          v66 = 0x1555555555555555;
        else
          v66 = v65;
        if (v66 <= 0x1555555555555555)
        {
          v67 = 3 * v66;
          v68 = operator new(12 * v66);
          *(_QWORD *)v68 = v9;
          v69 = (char *)&v68[v67];
          v68[2] = v85;
          v32 = (char *)(v68 + 3);
          *((_QWORD *)v3 + 6) = v68;
          *((_QWORD *)v3 + 7) = v68 + 3;
          *((_QWORD *)v3 + 8) = v69;
          if (v30)
            operator delete(v30);
          v33 = v6;
          *((_QWORD *)v3 + 7) = v32;
          v34 = (_DWORD *)*((_QWORD *)v3 + 1);
          v35 = (_DWORD *)*((_QWORD *)v3 + 2);
          if (v34 == v35)
            goto LABEL_107;
          goto LABEL_84;
        }
LABEL_109:
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      return 1;
    }
    v37 = (char *)*((_QWORD *)v3 + 6);
    *((_QWORD *)v3 + 7) = v37;
    v91 = (void **)((char *)v3 + 48);
    v38 = *((_QWORD *)v3 + 8);
    if ((unint64_t)v37 >= v38)
    {
      v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - (_QWORD)v37) >> 2);
      v44 = 2 * v43;
      if (2 * v43 <= 1)
        v44 = 1;
      if (v43 >= 0xAAAAAAAAAAAAAAALL)
        v45 = 0x1555555555555555;
      else
        v45 = v44;
      if (v45 > 0x1555555555555555)
        goto LABEL_109;
      v46 = 3 * v45;
      v47 = operator new(12 * v45);
      *(_QWORD *)v47 = v9;
      v47[2] = v85;
      v39 = (char *)(v47 + 3);
      *((_QWORD *)v3 + 6) = v47;
      *((_QWORD *)v3 + 7) = v47 + 3;
      *((_QWORD *)v3 + 8) = &v47[v46];
      if (v37)
        operator delete(v37);
      *((_QWORD *)v3 + 7) = v39;
      v40 = (_DWORD *)*((_QWORD *)v3 + 1);
      v41 = (_DWORD *)*((_QWORD *)v3 + 2);
      if (v40 == v41)
      {
LABEL_43:
        v42 = v39;
LABEL_73:
        v60 = *((_QWORD *)v3 + 5);
        v61 = (uint64_t *)*((_QWORD *)v3 + 6);
        v62 = *(_QWORD *)(v60 + 936);
        v63 = *(_QWORD *)(v62 + 96);
        v62 += 96;
        *(_QWORD *)(v62 + 48) = 0;
        *(_QWORD *)(v62 + 8) = v63;
        operations_research::sat::IntegerTrail::MergeReasonInto(v60, v61, 0xAAAAAAAAAAAAAAABLL * ((v42 - (char *)v61) >> 2), (void **)v62);
        return 0;
      }
    }
    else
    {
      *(_QWORD *)v37 = v9;
      *((_DWORD *)v37 + 2) = v85;
      v39 = v37 + 12;
      *((_QWORD *)v3 + 7) = v37 + 12;
      v40 = (_DWORD *)*((_QWORD *)v3 + 1);
      v41 = (_DWORD *)*((_QWORD *)v3 + 2);
      if (v40 == v41)
        goto LABEL_43;
    }
    v48 = (unint64_t)(1 - v86) >> 32;
    while (1)
    {
      while (1)
      {
        LODWORD(v95) = *v40;
        HIDWORD(v95) = 1 - v86;
        v49 = *((_QWORD *)v3 + 8);
        if ((unint64_t)v39 >= v49)
          break;
        *(_QWORD *)v39 = v95;
        *((_DWORD *)v39 + 2) = v48;
        v42 = v39 + 12;
        *((_QWORD *)v3 + 7) = v39 + 12;
        ++v40;
        v39 += 12;
        if (v40 == v41)
          goto LABEL_73;
      }
      v50 = (char *)*v91;
      v51 = 0xAAAAAAAAAAAAAAABLL * ((v39 - (_BYTE *)*v91) >> 2);
      v52 = v51 + 1;
      if (v51 + 1 > 0x1555555555555555)
LABEL_110:
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - (_QWORD)v50) >> 2);
      if (2 * v53 > v52)
        v52 = 2 * v53;
      if (v53 >= 0xAAAAAAAAAAAAAAALL)
        v54 = 0x1555555555555555;
      else
        v54 = v52;
      if (v54)
      {
        if (v54 > 0x1555555555555555)
          goto LABEL_109;
        v55 = (char *)operator new(12 * v54);
      }
      else
      {
        v55 = 0;
      }
      v56 = &v55[12 * v51];
      v57 = &v55[12 * v54];
      *(_QWORD *)v56 = v95;
      *((_DWORD *)v56 + 2) = v48;
      v42 = v56 + 12;
      if (v39 == v50)
      {
        *((_QWORD *)v3 + 6) = v56;
        *((_QWORD *)v3 + 7) = v42;
        *((_QWORD *)v3 + 8) = v57;
      }
      else
      {
        do
        {
          v58 = *(_QWORD *)(v39 - 12);
          v39 -= 12;
          v59 = *((_DWORD *)v39 + 2);
          *(_QWORD *)(v56 - 12) = v58;
          v56 -= 12;
          *((_DWORD *)v56 + 2) = v59;
        }
        while (v39 != v50);
        v39 = (char *)*((_QWORD *)v3 + 6);
        *((_QWORD *)v3 + 6) = v56;
        *((_QWORD *)v3 + 7) = v42;
        *((_QWORD *)v3 + 8) = v57;
        if (!v39)
          goto LABEL_72;
      }
      operator delete(v39);
LABEL_72:
      *((_QWORD *)v3 + 7) = v42;
      ++v40;
      v39 = v42;
      if (v40 == v41)
        goto LABEL_73;
    }
  }
  v84 = *(_QWORD *)v92;
  v13 = (char *)*((_QWORD *)this + 6);
  v87 = (_DWORD *)*((_QWORD *)this + 2);
  v88 = (void **)((char *)this + 48);
  *((_QWORD *)this + 7) = v13;
  v14 = HIDWORD(v11);
  do
  {
    while (1)
    {
      LODWORD(v93) = *v2;
      HIDWORD(v93) = v11;
      v15 = *((_QWORD *)v3 + 8);
      if ((unint64_t)v13 >= v15)
        break;
      *(_QWORD *)v13 = v93;
      *((_DWORD *)v13 + 2) = v14;
      v13 += 12;
      *((_QWORD *)v3 + 7) = v13;
      if (++v2 == v1)
        goto LABEL_33;
    }
    v16 = v3;
    v17 = v14;
    v18 = (char *)*v88;
    v19 = 0xAAAAAAAAAAAAAAABLL * ((v13 - (_BYTE *)*v88) >> 2);
    v20 = v19 + 1;
    if (v19 + 1 > 0x1555555555555555)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (_QWORD)v18) >> 2);
    if (2 * v21 > v20)
      v20 = 2 * v21;
    if (v21 >= 0xAAAAAAAAAAAAAAALL)
      v22 = 0x1555555555555555;
    else
      v22 = v20;
    v89 = v22;
    if (v22)
    {
      if (v22 > 0x1555555555555555)
        goto LABEL_109;
      v23 = (char *)operator new(12 * v22);
    }
    else
    {
      v23 = 0;
    }
    v24 = &v23[12 * v19];
    *(_QWORD *)v24 = v93;
    v14 = v17;
    *((_DWORD *)v24 + 2) = v17;
    if (v13 == v18)
    {
      v28 = v13;
      v3 = v16;
      v13 = v24 + 12;
      *((_QWORD *)v16 + 6) = v24;
      *((_QWORD *)v16 + 7) = v24 + 12;
      *((_QWORD *)v16 + 8) = &v23[12 * v89];
      if (v28)
        goto LABEL_28;
    }
    else
    {
      v25 = v24;
      v3 = v16;
      do
      {
        v26 = *(_QWORD *)(v13 - 12);
        v13 -= 12;
        v27 = *((_DWORD *)v13 + 2);
        *(_QWORD *)(v25 - 12) = v26;
        v25 -= 12;
        *((_DWORD *)v25 + 2) = v27;
      }
      while (v13 != v18);
      v28 = *v88;
      v13 = v24 + 12;
      *((_QWORD *)v16 + 6) = v25;
      *((_QWORD *)v16 + 7) = v24 + 12;
      *((_QWORD *)v16 + 8) = &v23[12 * v89];
      if (v28)
LABEL_28:
        operator delete(v28);
    }
    v1 = v87;
    *((_QWORD *)v3 + 7) = v13;
    ++v2;
  }
  while (v2 != v87);
LABEL_33:
  LODWORD(v94) = *((_DWORD *)v3 + 8);
  HIDWORD(v94) = v11;
  v29 = operations_research::sat::IntegerTrail::Enqueue(*((_QWORD *)v3 + 5), v94, v14, 0, 0, *((uint64_t **)v3 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v13[-*((_QWORD *)v3 + 6)] >> 2));
  v9 = v84;
  if ((v29 & 1) != 0)
    goto LABEL_34;
  return 0;
}

void operations_research::sat::MinPropagator::RegisterWith(operations_research::sat::MinPropagator *this, operations_research::sat::GenericLiteralWatcher *a2)
{
  unsigned int v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;

  v4 = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)a2, (uint64_t)this);
  v5 = (unsigned int *)*((_QWORD *)this + 1);
  v6 = (unsigned int *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a2, v7, v4, 0xFFFFFFFFLL);
  }
  v8 = *((unsigned int *)this + 8);
  if ((_DWORD)v8 != -1)
    operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a2, v8 ^ 1, v4, 0xFFFFFFFFLL);
}

uint64_t operations_research::sat::LinMinPropagator::LinMinPropagator(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  *(_QWORD *)a1 = &off_24F9863F0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  std::vector<operations_research::sat::LinearExpression>::__init_with_size[abi:ne180100]<operations_research::sat::LinearExpression*,operations_research::sat::LinearExpression*>((_QWORD *)(a1 + 8), *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3));
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = a4;
  *(_QWORD *)(a1 + 72) = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a4);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  return a1;
}

void sub_22DB6FC78(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  operations_research::sat::LinMinPropagator::LinMinPropagator((void **)(v1 + 8), v1);
  _Unwind_Resume(a1);
}

BOOL operations_research::sat::LinMinPropagator::PropagateLinearUpperBound(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  char *v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  double *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  char *v56;
  char *v57;
  int64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  _BYTE *v62;
  _QWORD *v63;
  char *v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _OWORD *v70;
  char *v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  char v92;
  _BYTE *v93;
  _BYTE *v94;
  int64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  void **v100;
  uint64_t v102;
  _QWORD *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v109;
  unint64_t v110;
  _QWORD *v112;
  uint64_t v113;
  __int128 __p;
  uint64_t v115;
  void *v116;
  char *v117;
  char *v118;
  void *v119;
  char *v120;
  unint64_t v121;
  void *v122;
  uint64_t v123;
  char *v124;
  _QWORD v125[3];
  _QWORD *v126;
  uint64_t v127;

  v4 = a2;
  v5 = a1;
  v127 = *MEMORY[0x24BDAC8D0];
  v6 = a2[1] - *a2;
  v122 = 0;
  v123 = 0;
  v124 = 0;
  v102 = v6;
  v112 = a3;
  v113 = (v6 >> 2);
  v105 = v6 >> 2;
  if ((int)(v6 >> 2) >= 1)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = v123;
    while (1)
    {
      v13 = *(_DWORD *)(*v4 + 4 * v8);
      v14 = *(_QWORD *)(*a3 + 8 * v8);
      v15 = *(_QWORD *)(*(_QWORD *)(v5 + 72) + 40);
      v16 = *(_QWORD *)(v15 + 12 * v13);
      v17 = -(v14 * (*(_QWORD *)(v15 + 12 * (v13 ^ 1)) + v16));
      if (v7 >= v9)
        break;
      *(_QWORD *)v7 = v17;
      v12 = (uint64_t)(v7 + 8);
LABEL_4:
      v10 += v16 * v14;
      ++v8;
      v7 = (char *)v12;
      if (v8 == v113)
      {
        v123 = v12;
        v124 = v9;
        goto LABEL_33;
      }
    }
    v18 = (v7 - v11) >> 3;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 61)
    {
      v123 = v12;
      v124 = v9;
      v122 = v11;
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    if ((v9 - v11) >> 2 > v19)
      v19 = (v9 - v11) >> 2;
    if ((unint64_t)(v9 - v11) >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    v109 = v10;
    v107 = *(_QWORD *)(*a3 + 8 * v8);
    if (v20)
    {
      if (v20 >> 61)
      {
        v123 = v12;
        v124 = v9;
        v122 = v11;
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      v21 = v20;
      v22 = operator new(8 * v20);
      v20 = v21;
      v23 = &v22[8 * v18];
      *(_QWORD *)v23 = v17;
      v12 = (uint64_t)(v23 + 8);
      if (v7 != v11)
      {
LABEL_15:
        v24 = v7 - 8 - v11;
        if (v24 < 0x168
          || &v22[v7 - v11 - 8 - (v24 & 0xFFFFFFFFFFFFFFF8)] > &v22[v7 - v11 - 8]
          || &v7[-(v24 & 0xFFFFFFFFFFFFFFF8) - 8] > v7 - 8
          || (unint64_t)(v11 - v22) < 0x20)
        {
          v25 = v7;
          v5 = a1;
          v4 = a2;
        }
        else
        {
          v28 = (v24 >> 3) + 1;
          v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
          v25 = &v7[-v29];
          v23 -= v29;
          v30 = &v22[8 * v18 - 16];
          v31 = v7 - 16;
          v32 = v28 & 0x3FFFFFFFFFFFFFFCLL;
          v4 = a2;
          do
          {
            v33 = *(_OWORD *)v31;
            *(v30 - 1) = *((_OWORD *)v31 - 1);
            *v30 = v33;
            v30 -= 2;
            v31 -= 32;
            v32 -= 4;
          }
          while (v32);
          v5 = a1;
          if (v28 == (v28 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_18:
            v9 = &v22[8 * v20];
            if (!v11)
            {
LABEL_20:
              v11 = v23;
              a3 = v112;
              v10 = v109;
              v14 = v107;
              goto LABEL_4;
            }
LABEL_19:
            v27 = v12;
            operator delete(v11);
            v12 = v27;
            goto LABEL_20;
          }
        }
        do
        {
          v26 = *((_QWORD *)v25 - 1);
          v25 -= 8;
          *((_QWORD *)v23 - 1) = v26;
          v23 -= 8;
        }
        while (v25 != v11);
        goto LABEL_18;
      }
    }
    else
    {
      v22 = 0;
      v23 = (char *)(8 * v18);
      *(_QWORD *)(8 * v18) = v17;
      v12 = 8 * v18 + 8;
      if (v7 != v11)
        goto LABEL_15;
    }
    v5 = a1;
    v4 = a2;
    v9 = &v22[8 * v20];
    if (!v11)
      goto LABEL_20;
    goto LABEL_19;
  }
  v11 = 0;
  v10 = 0;
LABEL_33:
  v122 = v11;
  v34 = (double *)operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>(*(_QWORD *)(v5 + 64));
  v110 = v10;
  v34[14] = (double)(int)v105 * 0.000000001 + v34[14];
  v119 = 0;
  v120 = 0;
  v121 = 0;
  v116 = 0;
  v117 = 0;
  v118 = 0;
  if ((int)v105 >= 1)
  {
    v35 = 0;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    while (1)
    {
      v40 = *(_DWORD *)(*v4 + 4 * v38);
      v41 = *(_QWORD *)(v5 + 72);
      v42 = *(_QWORD *)(v41 + 40);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v41 + 48) - v42) >> 2) > *(int *)(v42 + 12 * v40 + 8))
        goto LABEL_37;
      v43 = *(_QWORD *)(v42 + 12 * v40);
      LODWORD(__p) = *(_DWORD *)(*v4 + 4 * v38);
      *(_QWORD *)((char *)&__p + 4) = v43;
      v44 = HIDWORD(v43);
      if ((unint64_t)v37 < v121)
      {
        *(_QWORD *)v37 = __p;
        *((_DWORD *)v37 + 2) = HIDWORD(v43);
        v45 = v37 + 12;
        v36 = v117;
        v35 = v118;
        v120 = v37 + 12;
        v46 = *v112;
        if (v117 >= v118)
          goto LABEL_56;
        goto LABEL_35;
      }
      v47 = (char *)v119;
      v48 = 0xAAAAAAAAAAAAAAABLL * ((v37 - (_BYTE *)v119) >> 2);
      v49 = v48 + 1;
      if (v48 + 1 > 0x1555555555555555)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((uint64_t)(v121 - (_QWORD)v119) >> 2) > v49)
        v49 = 0x5555555555555556 * ((uint64_t)(v121 - (_QWORD)v119) >> 2);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v121 - (_QWORD)v119) >> 2) >= 0xAAAAAAAAAAAAAAALL)
        v50 = 0x1555555555555555;
      else
        v50 = v49;
      if (v50)
      {
        if (v50 > 0x1555555555555555)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v51 = (char *)operator new(12 * v50);
        v52 = (uint64_t)&v51[4 * ((v37 - (_BYTE *)v119) >> 2)];
        *(_QWORD *)v52 = __p;
        *(_DWORD *)(v52 + 8) = v44;
        v53 = (uint64_t)&v51[12 * v48];
        if (v37 == v47)
        {
LABEL_67:
          v5 = a1;
          v64 = &v51[12 * v50];
          v45 = (char *)(v52 + 12);
          v119 = (void *)v53;
          v121 = (unint64_t)v64;
          if (v37)
            goto LABEL_54;
          goto LABEL_55;
        }
      }
      else
      {
        v51 = 0;
        v52 = 4 * ((v37 - (_BYTE *)v119) >> 2);
        *(_QWORD *)v52 = __p;
        *(_DWORD *)(v52 + 8) = v44;
        v53 = 12 * v48;
        if (v37 == v47)
          goto LABEL_67;
      }
      v5 = a1;
      do
      {
        v54 = *(_QWORD *)(v37 - 12);
        v37 -= 12;
        v55 = *((_DWORD *)v37 + 2);
        *(_QWORD *)(v53 - 12) = v54;
        v53 -= 12;
        *(_DWORD *)(v53 + 8) = v55;
      }
      while (v37 != v47);
      v37 = v47;
      v56 = &v51[12 * v50];
      v45 = (char *)(v52 + 12);
      v119 = (void *)v53;
      v121 = (unint64_t)v56;
      if (v47)
LABEL_54:
        operator delete(v37);
LABEL_55:
      v120 = v45;
      v46 = *v112;
      if (v36 >= v35)
      {
LABEL_56:
        v57 = (char *)v116;
        v58 = v36 - (_BYTE *)v116;
        v59 = (v36 - (_BYTE *)v116) >> 3;
        v60 = v59 + 1;
        if ((unint64_t)(v59 + 1) >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        if ((v35 - (_BYTE *)v116) >> 2 > v60)
          v60 = (v35 - (_BYTE *)v116) >> 2;
        if ((unint64_t)(v35 - (_BYTE *)v116) >= 0x7FFFFFFFFFFFFFF8)
          v61 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v61 = v60;
        if (v61)
        {
          if (v61 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v62 = operator new(8 * v61);
          v63 = &v62[8 * v59];
          *v63 = *(_QWORD *)(v46 + 8 * v38);
          v39 = (uint64_t)(v63 + 1);
          if (v36 == v57)
            goto LABEL_73;
LABEL_70:
          v65 = v36 - 8 - v57;
          if (v65 < 0x168)
          {
            v66 = v36;
            goto LABEL_72;
          }
          if (&v62[v58 - 8 - (v65 & 0xFFFFFFFFFFFFFFF8)] > &v62[v58 - 8])
          {
            v66 = v36;
            goto LABEL_72;
          }
          if (&v36[-(v65 & 0xFFFFFFFFFFFFFFF8) - 8] > v36 - 8)
          {
            v66 = v36;
            goto LABEL_72;
          }
          if ((unint64_t)(v36 - v62 - v58) < 0x20)
          {
            v66 = v36;
            goto LABEL_72;
          }
          v68 = (v65 >> 3) + 1;
          v69 = 8 * (v68 & 0x3FFFFFFFFFFFFFFCLL);
          v66 = &v36[-v69];
          v63 = (_QWORD *)((char *)v63 - v69);
          v70 = &v62[8 * v59 - 16];
          v71 = v36 - 16;
          v72 = v68 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v73 = *(_OWORD *)v71;
            *(v70 - 1) = *((_OWORD *)v71 - 1);
            *v70 = v73;
            v70 -= 2;
            v71 -= 32;
            v72 -= 4;
          }
          while (v72);
          if (v68 != (v68 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_72:
              v67 = *((_QWORD *)v66 - 1);
              v66 -= 8;
              *--v63 = v67;
            }
            while (v66 != v57);
          }
        }
        else
        {
          v62 = 0;
          v63 = (_QWORD *)(8 * v59);
          *(_QWORD *)(8 * v59) = *(_QWORD *)(v46 + 8 * v38);
          v39 = 8 * v59 + 8;
          if (v36 != v57)
            goto LABEL_70;
        }
LABEL_73:
        v35 = &v62[8 * v61];
        v116 = v63;
        v118 = v35;
        if (v57)
          operator delete(v57);
        goto LABEL_36;
      }
LABEL_35:
      *(_QWORD *)v36 = *(_QWORD *)(v46 + 8 * v38);
      v39 = (uint64_t)(v36 + 8);
LABEL_36:
      v117 = (char *)v39;
      v36 = (char *)v39;
      v37 = v45;
      v4 = a2;
LABEL_37:
      if (++v38 == v113)
        goto LABEL_87;
    }
  }
  v36 = 0;
LABEL_87:
  v74 = a4 - v110;
  if (((a4 - v110) & 0x8000000000000000) != 0)
  {
    operations_research::sat::IntegerTrail::RelaxLinearReason(*(std::vector<int> **)(v5 + 72), ~v74, (uint64_t)v116, (v36 - (_BYTE *)v116) >> 3, (char **)&v119);
    __p = 0uLL;
    v115 = 0;
    v94 = *(_BYTE **)(v5 + 80);
    v93 = *(_BYTE **)(v5 + 88);
    v95 = v93 - v94;
    if (v93 == v94)
    {
      v96 = 0;
    }
    else
    {
      if (0xAAAAAAAAAAAAAAABLL * (v95 >> 2) > 0x1555555555555555)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      *(_QWORD *)&__p = operator new(v95);
      v96 = __p + 4 * (v95 >> 2);
      v115 = v96;
      memcpy((void *)__p, v94, v95);
      *((_QWORD *)&__p + 1) = v96;
    }
    std::vector<operations_research::sat::IntegerLiteral>::__insert_with_size[abi:ne180100]<std::__wrap_iter<operations_research::sat::IntegerLiteral*>,std::__wrap_iter<operations_research::sat::IntegerLiteral*>>((uint64_t)&__p, v96, (char *)v119, v120, 0xAAAAAAAAAAAAAAABLL * ((v120 - (_BYTE *)v119) >> 2));
    v97 = *(_QWORD *)(v5 + 72);
    v98 = __p;
    v99 = *(_QWORD *)(v97 + 936);
    *(_QWORD *)(v99 + 144) = 0;
    v100 = (void **)(v99 + 96);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((_QWORD *)(v99 + 96), 0, 0, 0);
    operations_research::sat::IntegerTrail::MergeReasonInto(v97, (uint64_t *)v98, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v98 + 1) - v98) >> 2), v100);
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    v76 = 0;
  }
  else
  {
    if ((int)v105 >= 1)
    {
      v75 = 0;
      v76 = 0;
      v106 = ~v74;
      v77 = (int)(v102 >> 2);
      v78 = v122;
      v104 = v122;
      while (v78[v75] <= v74)
      {
LABEL_93:
        v76 = ++v75 >= v77;
        if (v113 == v75)
          goto LABEL_109;
      }
      v81 = *(_DWORD *)(*a2 + 4 * v75);
      v82 = *(_QWORD *)(*v112 + 8 * v75);
      v83 = v74;
      v84 = v74 / v82;
      v85 = *(_QWORD *)(v5 + 72);
      v86 = *(_QWORD *)(*(_QWORD *)(v85 + 40) + 12 * v81) + v74 / v82;
      v87 = v81 ^ 1;
      v88 = v5;
      if (v86 >= (uint64_t)0x8000000000000002)
        v89 = -v86;
      else
        v89 = 0x7FFFFFFFFFFFFFFFLL;
      LODWORD(__p) = v87;
      *(_QWORD *)((char *)&__p + 4) = v89;
      v90 = __p;
      v126 = 0;
      v91 = operator new(0x28uLL);
      *v91 = &off_24F9866D0;
      v91[1] = v88;
      v91[2] = a2;
      v91[3] = v112;
      v91[4] = v82 + v82 * v84 + v106;
      v126 = v91;
      v110 = v110 & 0xFFFFFFFF00000000 | HIDWORD(v89);
      v92 = operations_research::sat::IntegerTrail::Enqueue(v85, v90, SHIDWORD(v89), v125);
      v79 = v126;
      v5 = a1;
      v74 = v83;
      if (v126 == v125)
      {
        v79 = v125;
        v80 = 4;
      }
      else
      {
        if (!v126)
        {
LABEL_92:
          v78 = v104;
          v77 = (int)(v102 >> 2);
          if ((v92 & 1) == 0)
            goto LABEL_109;
          goto LABEL_93;
        }
        v80 = 5;
      }
      (*(void (**)(void))(*v79 + 8 * v80))();
      goto LABEL_92;
    }
    v76 = 1;
  }
LABEL_109:
  if (v116)
    operator delete(v116);
  if (v119)
  {
    v120 = (char *)v119;
    operator delete(v119);
  }
  if (v122)
    operator delete(v122);
  return v76;
}

void sub_22DB705E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30)
{
  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  if (a25)
    operator delete(a25);
  if (a28)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

BOOL operations_research::sat::LinMinPropagator::Propagate(operations_research::sat::LinMinPropagator *this)
{
  uint64_t v1;
  operations_research::sat::LinMinPropagator *v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  operations_research::sat::LinMinPropagator *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  _OWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  _BYTE *v42;
  char v43;
  uint64_t v44;
  _DWORD *v46;
  unint64_t v47;
  _DWORD *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void *v59;
  unint64_t v60;
  uint64_t v61;
  void **v62;
  unint64_t v63;
  int v64;
  int v65;
  void *__p[3];
  uint64_t v67[2];

  v1 = *((_QWORD *)this + 1);
  if (v1 == *((_QWORD *)this + 2))
    return 1;
  v2 = this;
  v3 = 0;
  v4 = 0;
  LODWORD(v5) = 0;
  *((_QWORD *)this + 6) = *((_QWORD *)this + 5);
  v62 = (void **)((char *)this + 40);
  v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 9) + 40) + 12 * (*((_DWORD *)this + 8) ^ 1));
  LODWORD(__p[0]) = *((_DWORD *)this + 8) ^ 1;
  *(void **)((char *)__p + 4) = (void *)v6;
  v60 = HIDWORD(v6);
  v61 = v6;
  v7 = -v6;
  v8 = 0x7FFFFFFFFFFFFFFELL;
  v59 = __p[0];
  do
  {
    v11 = operations_research::sat::LinExprLowerBound((uint64_t *)(v1 + 56 * v3), *((_QWORD *)v2 + 9));
    v12 = v11;
    v14 = (uint64_t *)*((_QWORD *)v2 + 6);
    v13 = *((_QWORD *)v2 + 7);
    if ((unint64_t)v14 < v13)
    {
      *v14 = v11;
      v9 = (uint64_t)(v14 + 1);
      goto LABEL_4;
    }
    v64 = v4;
    v15 = v2;
    v16 = v7;
    v65 = v5;
    v17 = (uint64_t *)*v62;
    v18 = (char *)v14 - (_BYTE *)*v62;
    v19 = v18 >> 3;
    v20 = (v18 >> 3) + 1;
    if (v20 >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v21 = v13 - (_QWORD)v17;
    if (v21 >> 2 > v20)
      v20 = v21 >> 2;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    v63 = v20;
    if (v20)
    {
      if (v20 >> 61)
        goto LABEL_70;
      v22 = operator new(8 * v20);
      v23 = (uint64_t *)&v22[8 * v19];
      *v23 = v12;
      v9 = (uint64_t)(v23 + 1);
      if (v14 == v17)
      {
LABEL_24:
        v7 = v16;
        v2 = v15;
        v4 = v64;
        v25 = v63;
        goto LABEL_30;
      }
    }
    else
    {
      v22 = 0;
      v23 = (uint64_t *)(8 * v19);
      *(_QWORD *)(8 * v19) = v12;
      v9 = 8 * v19 + 8;
      if (v14 == v17)
        goto LABEL_24;
    }
    v24 = (char *)(v14 - 1) - (char *)v17;
    v25 = v63;
    if (v24 >= 0x58)
    {
      v26 = (char *)v14 - &v22[v18];
      v7 = v16;
      v2 = v15;
      v4 = v64;
      if (v26 >= 0x20)
      {
        v27 = (v24 >> 3) + 1;
        v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
        v29 = &v14[v28 / 0xFFFFFFFFFFFFFFF8];
        v23 = (uint64_t *)((char *)v23 - v28);
        v30 = &v22[8 * v19 - 16];
        v31 = v14 - 2;
        v32 = v27 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v33 = *(_OWORD *)v31;
          *(v30 - 1) = *((_OWORD *)v31 - 1);
          *v30 = v33;
          v30 -= 2;
          v31 -= 4;
          v32 -= 4;
        }
        while (v32);
        v14 = v29;
        if (v27 == (v27 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_30;
      }
    }
    else
    {
      v7 = v16;
      v2 = v15;
      v4 = v64;
    }
    do
    {
      v34 = *--v14;
      *--v23 = v34;
    }
    while (v14 != v17);
LABEL_30:
    *((_QWORD *)v2 + 5) = v23;
    *((_QWORD *)v2 + 6) = v9;
    *((_QWORD *)v2 + 7) = &v22[8 * v25];
    if (v17)
      operator delete(v17);
    LODWORD(v5) = v65;
LABEL_4:
    *((_QWORD *)v2 + 6) = v9;
    if (v12 < v8)
      v8 = v12;
    if (v12 > v7)
      v5 = v5;
    else
      v5 = v3;
    if (v12 <= v7)
      ++v4;
    ++v3;
    v1 = *((_QWORD *)v2 + 1);
    v10 = *((_QWORD *)v2 + 2);
  }
  while (0x6DB6DB6DB6DB6DB7 * ((v10 - v1) >> 3) > v3);
  v35 = *((_QWORD *)v2 + 9);
  v36 = *((_DWORD *)v2 + 8);
  if (v8 <= v7)
    v37 = v8;
  else
    v37 = 1 - v61;
  if (v37 > *(_QWORD *)(*(_QWORD *)(v35 + 40) + 12 * v36))
  {
    memset(__p, 0, sizeof(__p));
    if (v10 == v1)
    {
      v42 = 0;
      v41 = 0;
    }
    else
    {
      v38 = 0;
      v39 = 0;
      do
      {
        v40 = v1 + v38;
        operations_research::sat::IntegerTrail::AppendRelaxedLinearReason(*((std::vector<int> **)v2 + 9), 0, *(_QWORD *)(v40 + 24), (uint64_t)(*(_QWORD *)(v40 + 32) - *(_QWORD *)(v40 + 24)) >> 3, *(int **)v40, (uint64_t)(*(_QWORD *)(v40 + 8) - *(_QWORD *)v40) >> 2, __p);
        ++v39;
        v1 = *((_QWORD *)v2 + 1);
        v38 += 56;
      }
      while (0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)v2 + 2) - v1) >> 3) > v39);
      v35 = *((_QWORD *)v2 + 9);
      v36 = *((_DWORD *)v2 + 8);
      v42 = __p[1];
      v41 = (uint64_t *)__p[0];
    }
    LODWORD(v67[0]) = v36;
    *(uint64_t *)((char *)v67 + 4) = v37;
    v43 = operations_research::sat::IntegerTrail::Enqueue(v35, v67[0], SHIDWORD(v37), 0, 0, v41, 0xAAAAAAAAAAAAAAABLL * ((v42 - (_BYTE *)v41) >> 2));
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if ((v43 & 1) == 0)
      return 0;
  }
  if (v4 != 1
    || operations_research::sat::LinExprUpperBound((uint64_t *)(*((_QWORD *)v2 + 1) + 56 * (int)v5), *((_QWORD *)v2 + 9)) <= v7)
  {
    return 1;
  }
  if (*((_DWORD *)v2 + 26))
  {
    v44 = *((_QWORD *)v2 + 1);
  }
  else
  {
    v46 = (_DWORD *)*((_QWORD *)v2 + 10);
    *((_QWORD *)v2 + 11) = v46;
    v47 = *((_QWORD *)v2 + 12);
    if ((unint64_t)v46 >= v47)
    {
      v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - (_QWORD)v46) >> 2);
      v50 = 2 * v49;
      if (2 * v49 <= 1)
        v50 = 1;
      if (v49 >= 0xAAAAAAAAAAAAAAALL)
        v51 = 0x1555555555555555;
      else
        v51 = v50;
      if (v51 > 0x1555555555555555)
LABEL_70:
        std::__throw_bad_array_new_length[abi:ne180100]();
      v52 = 3 * v51;
      v53 = operator new(12 * v51);
      *(_QWORD *)v53 = v59;
      v54 = (char *)&v53[v52];
      v53[2] = v60;
      v48 = v53 + 3;
      *((_QWORD *)v2 + 10) = v53;
      *((_QWORD *)v2 + 11) = v53 + 3;
      *((_QWORD *)v2 + 12) = v54;
      if (v46)
        operator delete(v46);
    }
    else
    {
      *(_QWORD *)v46 = v59;
      v46[2] = v60;
      v48 = v46 + 3;
    }
    *((_QWORD *)v2 + 11) = v48;
    v44 = *((_QWORD *)v2 + 1);
    v55 = *((_QWORD *)v2 + 2);
    if (v55 == v44)
    {
      v44 = *((_QWORD *)v2 + 2);
    }
    else
    {
      v56 = 0;
      v57 = 0;
      do
      {
        if (v5 != v57)
        {
          v58 = v44 + v56;
          operations_research::sat::IntegerTrail::AppendRelaxedLinearReason(*((std::vector<int> **)v2 + 9), 0, *(_QWORD *)(v58 + 24), (uint64_t)(*(_QWORD *)(v58 + 32) - *(_QWORD *)(v58 + 24)) >> 3, *(int **)v58, (uint64_t)(*(_QWORD *)(v58 + 8) - *(_QWORD *)v58) >> 2, (void **)v2 + 10);
          v44 = *((_QWORD *)v2 + 1);
          v55 = *((_QWORD *)v2 + 2);
        }
        ++v57;
        v56 += 56;
      }
      while (0x6DB6DB6DB6DB6DB7 * ((v55 - v44) >> 3) > v57);
    }
    *((_DWORD *)v2 + 26) = 1;
  }
  return operations_research::sat::LinMinPropagator::PropagateLinearUpperBound((uint64_t)v2, (_QWORD *)(v44 + 56 * (int)v5), (_QWORD *)(v44 + 56 * (int)v5 + 24), v7 - *(_QWORD *)(v44 + 56 * (int)v5 + 48));
}

void sub_22DB70BE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::LinMinPropagator::RegisterWith(operations_research::sat::LinMinPropagator *this, operations_research::sat::GenericLiteralWatcher *a2)
{
  operations_research::sat::GenericLiteralWatcher *v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  void *v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  unint64_t **v41;
  uint64_t *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  _OWORD *v57;
  unint64_t *v58;
  uint64_t v59;
  __int128 v60;
  unint64_t v61;
  unint64_t **v62;
  unint64_t v63;
  operations_research::sat::GenericLiteralWatcher *v64;
  unint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  _OWORD *v77;
  unint64_t *v78;
  uint64_t v79;
  __int128 v80;
  unint64_t v81;
  uint64_t v82;
  unsigned int v84;
  _QWORD *v85;
  _QWORD *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  _QWORD *v90;

  v2 = a2;
  v84 = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)a2, (uint64_t)this);
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  v85 = (_QWORD *)*((_QWORD *)this + 2);
  if (v3 != v85)
  {
    v89 = v84 | 0xFFFFFFFF00000000;
    v90 = (_QWORD *)((char *)v2 + 88);
    while (1)
    {
      v4 = *v3;
      if (v3[1] != *v3)
        break;
LABEL_3:
      v3 += 7;
      if (v3 == v85)
        goto LABEL_95;
    }
    v5 = 0;
    v86 = v3;
    while (1)
    {
      v7 = *(unsigned int *)(v4 + 4 * v5);
      v8 = v7;
      if (*(uint64_t *)(v3[3] + 8 * v5) < 1)
      {
        v27 = (int)v7 ^ 1;
        if ((_DWORD)v7 == -1 || (_DWORD)v27 == -1)
          goto LABEL_8;
        v30 = *((_QWORD *)v2 + 11);
        v29 = *((_QWORD *)v2 + 12);
        v31 = 0xAAAAAAAAAAAAAAABLL * ((v29 - v30) >> 3);
        if (v31 <= v27)
        {
          v32 = (int)v27 + 1;
          if (v32 <= v31)
          {
            if (v32 < v31)
            {
              v37 = v30 + 24 * (int)v32;
              if (v29 != v37)
              {
                v38 = *((_QWORD *)v2 + 12);
                do
                {
                  v40 = *(void **)(v38 - 24);
                  v38 -= 24;
                  v39 = v40;
                  if (v40)
                  {
                    *(_QWORD *)(v29 - 16) = v39;
                    operator delete(v39);
                  }
                  v29 = v38;
                }
                while (v38 != v37);
              }
              *((_QWORD *)v2 + 12) = v37;
            }
          }
          else
          {
            std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)v90, v32 - v31);
          }
        }
        v41 = (unint64_t **)(*v90 + 24 * (int)v27);
        v42 = (uint64_t *)(v41 + 1);
        v43 = v41[1];
        v44 = (unint64_t)v41[2];
        if ((unint64_t)v43 < v44)
          goto LABEL_6;
        v45 = *v41;
        v46 = (char *)v43 - (char *)*v41;
        v47 = v46 >> 3;
        v48 = (v46 >> 3) + 1;
        if (v48 >> 61)
          goto LABEL_98;
        v49 = v44 - (_QWORD)v45;
        if (v49 >> 2 > v48)
          v48 = v49 >> 2;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
          v48 = 0x1FFFFFFFFFFFFFFFLL;
        v87 = v48;
        if (v48)
        {
          if (v48 >> 61)
            goto LABEL_99;
          v50 = operator new(8 * v48);
          v51 = (unint64_t *)&v50[8 * v47];
          *v51 = v89;
          v6 = (uint64_t)(v51 + 1);
          if (v43 != v45)
          {
LABEL_58:
            v52 = (char *)(v43 - 1) - (char *)v45;
            if (v52 < 0x58)
            {
              v3 = v86;
              goto LABEL_66;
            }
            v53 = (char *)v43 - &v50[v46];
            v3 = v86;
            if (v53 < 0x20)
              goto LABEL_103;
            v54 = (v52 >> 3) + 1;
            v55 = 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
            v56 = &v43[v55 / 0xFFFFFFFFFFFFFFF8];
            v51 = (unint64_t *)((char *)v51 - v55);
            v57 = &v50[8 * v47 - 16];
            v58 = v43 - 2;
            v59 = v54 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v60 = *(_OWORD *)v58;
              *(v57 - 1) = *((_OWORD *)v58 - 1);
              *v57 = v60;
              v57 -= 2;
              v58 -= 4;
              v59 -= 4;
            }
            while (v59);
            v43 = v56;
            if (v54 != (v54 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_103:
              do
              {
LABEL_66:
                v61 = *--v43;
                *--v51 = v61;
              }
              while (v43 != v45);
            }
            v43 = *v41;
LABEL_68:
            *v41 = v51;
            *v42 = v6;
            v41[2] = (unint64_t *)&v50[8 * v87];
            if (v43)
              goto LABEL_93;
            goto LABEL_7;
          }
        }
        else
        {
          v50 = 0;
          v51 = (unint64_t *)(8 * v47);
          *(_QWORD *)(8 * v47) = v89;
          v6 = 8 * v47 + 8;
          if (v43 != v45)
            goto LABEL_58;
        }
        v3 = v86;
        goto LABEL_68;
      }
      if ((_DWORD)v7 == -1)
        goto LABEL_8;
      v9 = (_QWORD *)*((_QWORD *)v2 + 11);
      v10 = (_QWORD *)*((_QWORD *)v2 + 12);
      v11 = 0xAAAAAAAAAAAAAAABLL * (v10 - v9);
      if (v11 <= (int)v7)
      {
        v12 = (v7 << 32) + 0x100000000;
        v13 = v12 >> 32;
        v14 = (v12 >> 32) - v11;
        if (v12 >> 32 <= v11)
        {
          if (v12 >> 32 < v11)
          {
            v33 = &v9[3 * SHIDWORD(v12)];
            if (v10 != v33)
            {
              v34 = (_QWORD *)*((_QWORD *)v2 + 12);
              do
              {
                v36 = (void *)*(v34 - 3);
                v34 -= 3;
                v35 = v36;
                if (v36)
                {
                  *(v10 - 2) = v35;
                  operator delete(v35);
                }
                v10 = v34;
              }
              while (v34 != v33);
            }
            *((_QWORD *)v2 + 12) = v33;
          }
        }
        else
        {
          v15 = *((_QWORD *)v2 + 13);
          if (0xAAAAAAAAAAAAAAABLL * ((v15 - (uint64_t)v10) >> 3) >= v14)
          {
            bzero(*((void **)v2 + 12), 24 * ((24 * v14 - 24) / 0x18) + 24);
            *((_QWORD *)v2 + 12) = &v10[3 * ((24 * v14 - 24) / 0x18) + 3];
          }
          else
          {
            if (v12 < 0)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((v15 - (uint64_t)v9) >> 3) > v13)
              v13 = 0x5555555555555556 * ((v15 - (uint64_t)v9) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((v15 - (uint64_t)v9) >> 3) >= 0x555555555555555)
              v13 = 0xAAAAAAAAAAAAAAALL;
            if (v13 > 0xAAAAAAAAAAAAAAALL)
LABEL_99:
              std::__throw_bad_array_new_length[abi:ne180100]();
            v16 = 24 * v13;
            v17 = (char *)operator new(24 * v13);
            v18 = &v17[8 * (v10 - v9)];
            v19 = &v17[v16];
            bzero(v18, 24 * ((24 * v14 - 24) / 0x18) + 24);
            v20 = &v18[24 * ((24 * v14 - 24) / 0x18) + 24];
            if (v10 == v9)
            {
              *((_QWORD *)v2 + 11) = v18;
              *((_QWORD *)v2 + 12) = v20;
              *((_QWORD *)v2 + 13) = v19;
            }
            else
            {
              do
              {
                v21 = v18;
                *((_QWORD *)v18 - 2) = 0;
                *((_QWORD *)v18 - 1) = 0;
                v22 = *(_OWORD *)(v10 - 3);
                v10 -= 3;
                *(_OWORD *)(v18 - 24) = v22;
                v18 -= 24;
                *((_QWORD *)v21 - 1) = v10[2];
                *v10 = 0;
                v10[1] = 0;
                v10[2] = 0;
              }
              while (v10 != v9);
              v10 = (_QWORD *)*((_QWORD *)v2 + 11);
              v23 = (_QWORD *)*((_QWORD *)v2 + 12);
              *((_QWORD *)v2 + 11) = v18;
              *((_QWORD *)v2 + 12) = v20;
              *((_QWORD *)v2 + 13) = v19;
              if (v23 != v10)
              {
                v24 = v23;
                do
                {
                  v26 = (void *)*(v24 - 3);
                  v24 -= 3;
                  v25 = v26;
                  if (v26)
                  {
                    *(v23 - 2) = v25;
                    operator delete(v25);
                  }
                  v23 = v24;
                }
                while (v24 != v10);
              }
            }
            if (v10)
              operator delete(v10);
          }
        }
      }
      v62 = (unint64_t **)(*v90 + 24 * v8);
      v42 = (uint64_t *)(v62 + 1);
      v43 = v62[1];
      v63 = (unint64_t)v62[2];
      if ((unint64_t)v43 < v63)
      {
LABEL_6:
        *v43 = v89;
        v6 = (uint64_t)(v43 + 1);
        goto LABEL_7;
      }
      v64 = v2;
      v65 = *v62;
      v66 = (char *)v43 - (char *)*v62;
      v67 = v66 >> 3;
      v68 = (v66 >> 3) + 1;
      if (v68 >> 61)
LABEL_98:
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v69 = v63 - (_QWORD)v65;
      if (v69 >> 2 > v68)
        v68 = v69 >> 2;
      if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
        v68 = 0x1FFFFFFFFFFFFFFFLL;
      v88 = v68;
      if (v68)
      {
        if (v68 >> 61)
          goto LABEL_99;
        v70 = operator new(8 * v68);
        v71 = (unint64_t *)&v70[8 * v67];
        *v71 = v89;
        v6 = (uint64_t)(v71 + 1);
        if (v43 == v65)
        {
LABEL_85:
          v2 = v64;
          v3 = v86;
          goto LABEL_92;
        }
      }
      else
      {
        v70 = 0;
        v71 = (unint64_t *)(8 * v67);
        *(_QWORD *)(8 * v67) = v89;
        v6 = 8 * v67 + 8;
        if (v43 == v65)
          goto LABEL_85;
      }
      v72 = (char *)(v43 - 1) - (char *)v65;
      if (v72 >= 0x58)
      {
        v73 = (char *)v43 - &v70[v66];
        v2 = v64;
        v3 = v86;
        if (v73 >= 0x20)
        {
          v74 = (v72 >> 3) + 1;
          v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
          v76 = &v43[v75 / 0xFFFFFFFFFFFFFFF8];
          v71 = (unint64_t *)((char *)v71 - v75);
          v77 = &v70[8 * v67 - 16];
          v78 = v43 - 2;
          v79 = v74 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v80 = *(_OWORD *)v78;
            *(v77 - 1) = *((_OWORD *)v78 - 1);
            *v77 = v80;
            v77 -= 2;
            v78 -= 4;
            v79 -= 4;
          }
          while (v79);
          v43 = v76;
          if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_91;
        }
      }
      else
      {
        v2 = v64;
        v3 = v86;
      }
      do
      {
        v81 = *--v43;
        *--v71 = v81;
      }
      while (v43 != v65);
LABEL_91:
      v43 = *v62;
LABEL_92:
      *v62 = v71;
      *v42 = v6;
      v62[2] = (unint64_t *)&v70[8 * v88];
      if (v43)
LABEL_93:
        operator delete(v43);
LABEL_7:
      *v42 = v6;
LABEL_8:
      ++v5;
      v4 = *v3;
      if (v5 >= (uint64_t)(v3[1] - *v3) >> 2)
        goto LABEL_3;
    }
  }
LABEL_95:
  v82 = *((unsigned int *)this + 8);
  if ((_DWORD)v82 != -1)
    operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)v2, v82 ^ 1, v84, 0xFFFFFFFFLL);
  operations_research::sat::GenericLiteralWatcher::RegisterReversibleInt(v2, v84, (int *)this + 26);
}

uint64_t operations_research::sat::PositiveProductPropagator::PositiveProductPropagator(uint64_t result, int a2, int a3, int a4, uint64_t a5)
{
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_QWORD *)result = &off_24F986420;
  *(_DWORD *)(result + 16) = a4;
  *(_QWORD *)(result + 24) = a5;
  return result;
}

uint64_t operations_research::sat::PositiveProductPropagator::Propagate(operations_research::sat::PositiveProductPropagator *this)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  _BYTE v57[12];
  _BYTE v58[12];
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v4 = *((int *)this + 2);
  v3 = *((int *)this + 3);
  v5 = *(_QWORD *)(*((_QWORD *)this + 3) + 40);
  v54 = *(_QWORD *)(v5 + 12 * (int)v4);
  v6 = *(_QWORD *)(v5 + 12 * (int)(v4 ^ 1));
  v7 = *(_QWORD *)(v5 + 12 * (int)v3);
  v53 = v7;
  v8 = *(_QWORD *)(v5 + 12 * (int)(v3 ^ 1));
  v9 = *((_DWORD *)this + 4);
  v52 = *(_QWORD *)(v5 + 12 * v9);
  v51 = -*(_QWORD *)(v5 + 12 * (v9 ^ 1));
  *(_DWORD *)v58 = 0;
  if (v54 < 0)
  {
    *(_QWORD *)v57 = google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)&v54, (int)v58, "min_a >= 0");
    if (*(_QWORD *)v57)
    {
      google::LogMessageFatal::LogMessageFatal((unint64_t *)v58, (google::glog_internal_namespace_ *)"./ortools/sat/integer_expr.cc", 540, (uint64_t **)v57);
      google::LogMessage::stream((google::LogMessage *)v58);
      goto LABEL_53;
    }
    *(_DWORD *)v58 = 0;
    if ((v53 & 0x8000000000000000) == 0)
      goto LABEL_3;
    goto LABEL_49;
  }
  *(_DWORD *)v58 = 0;
  if (v7 < 0)
  {
LABEL_49:
    *(_QWORD *)v57 = google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)&v53, (int)v58, "min_b >= 0");
    if (*(_QWORD *)v57)
    {
      google::LogMessageFatal::LogMessageFatal((unint64_t *)v58, (google::glog_internal_namespace_ *)"./ortools/sat/integer_expr.cc", 541, (uint64_t **)v57);
      google::LogMessage::stream((google::LogMessage *)v58);
      goto LABEL_53;
    }
  }
LABEL_3:
  v10 = -v6;
  v11 = -v8;
  while (1)
  {
    v12 = v10 * v11;
    if (v10 * v11 < v51)
      break;
    v20 = 0;
    v21 = v53 * v54;
    v22 = v52;
    if (v53 * v54 <= v52)
      goto LABEL_14;
LABEL_12:
    v52 = v21;
    v23 = *((_QWORD *)this + 3);
    *(_DWORD *)v58 = *((_DWORD *)this + 4);
    *(_QWORD *)&v58[4] = v21;
    v24 = *(_QWORD *)v58;
    v25 = *(_QWORD *)(v23 + 40);
    v26 = *(_QWORD *)(v25 + 12 * (int)v4);
    *(_DWORD *)v57 = v4;
    *(_QWORD *)&v57[4] = v26;
    *(_QWORD *)v58 = *(_QWORD *)v57;
    *(_DWORD *)&v58[8] = HIDWORD(v26);
    v27 = *(_QWORD *)(v25 + 12 * (int)v3);
    *(_DWORD *)v57 = v3;
    *(_QWORD *)&v57[4] = v27;
    v59 = *(_QWORD *)v57;
    v60 = HIDWORD(v27);
    v48 = v48 & 0xFFFFFFFF00000000 | HIDWORD(v21);
    result = operations_research::sat::IntegerTrail::Enqueue(v23, v24, SHIDWORD(v21), 0, 0, (uint64_t *)v58, 2);
    if (!(_DWORD)result)
      return result;
    v20 = 1;
    v22 = v52;
LABEL_14:
    *(_DWORD *)v58 = 0;
    if (v22 < 0)
    {
      *(_QWORD *)v57 = google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)&v52, (int)v58, "min_p >= 0");
      if (*(_QWORD *)v57)
      {
        google::LogMessageFatal::LogMessageFatal((unint64_t *)v58, (google::glog_internal_namespace_ *)"./ortools/sat/integer_expr.cc", 570, (uint64_t **)v57);
        google::LogMessage::stream((google::LogMessage *)v58);
        goto LABEL_53;
      }
      if (v51 >= v52)
        goto LABEL_16;
LABEL_43:
      *(_QWORD *)v57 = google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>((int)&v51, (int)&v52, "max_p >= min_p");
      if (*(_QWORD *)v57)
      {
        google::LogMessageFatal::LogMessageFatal((unint64_t *)v58, (google::glog_internal_namespace_ *)"./ortools/sat/integer_expr.cc", 571, (uint64_t **)v57);
        google::LogMessage::stream((google::LogMessage *)v58);
        goto LABEL_53;
      }
      goto LABEL_16;
    }
    if (v51 < v22)
      goto LABEL_43;
LABEL_16:
    v28 = 1;
    v29 = v53;
    do
    {
      while (1)
      {
        v31 = v11;
        v32 = v3;
        v3 = v4;
        v33 = v28;
        v34 = v51;
        if (v29 * v10 > v51)
          break;
        v42 = v52;
        if (v29 * v10 < v52)
        {
          v56 = v52;
          *(_QWORD *)v57 = v10;
          *(_DWORD *)v58 = 0;
          if (v10 < 1)
          {
            v55 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)v57, (int)v58, "b > 0");
            if (v55)
            {
              google::LogMessageFatal::LogMessageFatal((unint64_t *)v58, (google::glog_internal_namespace_ *)"./ortools/sat/integer_expr.cc", 521, &v55);
              google::LogMessage::stream((google::LogMessage *)v58);
              goto LABEL_53;
            }
          }
          *(_DWORD *)v58 = 0;
          if (v42 < 0)
          {
            v55 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)&v56, (int)v58, "p >= 0");
            if (v55)
            {
              google::LogMessageFatal::LogMessageFatal((unint64_t *)v58, (google::glog_internal_namespace_ *)"./ortools/sat/integer_expr.cc", 522, &v55);
              google::LogMessage::stream((google::LogMessage *)v58);
              goto LABEL_53;
            }
            v42 = v56;
          }
          v53 = (v42 + *(_QWORD *)v57 - 1) / *(_QWORD *)v57;
          v43 = *((_QWORD *)this + 3);
          *(_DWORD *)v58 = v32;
          *(_QWORD *)&v58[4] = v53;
          v44 = *(_QWORD *)v58;
          v45 = *(_QWORD *)(v43 + 40);
          v46 = *(_QWORD *)(v45 + 12 * (int)(v4 ^ 1));
          *(_DWORD *)v57 = v4 ^ 1;
          *(_DWORD *)&v57[4] = v46;
          *(_QWORD *)v58 = *(_QWORD *)v57;
          *(_DWORD *)&v58[8] = HIDWORD(v46);
          *(_DWORD *)v57 = v32;
          *(_QWORD *)&v57[4] = 0;
          v59 = v32;
          v60 = 0;
          v47 = *(_QWORD *)(v45 + 12 * *((int *)this + 4));
          *(_DWORD *)v57 = *((_DWORD *)this + 4);
          *(_QWORD *)&v57[4] = v47;
          v61 = *(_QWORD *)v57;
          v62 = HIDWORD(v47);
          v1 = v1 & 0xFFFFFFFF00000000 | HIDWORD(v53);
          result = operations_research::sat::IntegerTrail::Enqueue(v43, v44, v1, 0, 0, (uint64_t *)v58, 3);
          if (!(_DWORD)result)
            return result;
          v20 = 1;
        }
        v11 = v10;
        v28 = 0;
        v30 = v53;
        v29 = v54;
        v53 = v54;
        v54 = v30;
        v4 = v32;
        v10 = v31;
        if ((v33 & 1) == 0)
          goto LABEL_39;
      }
      v56 = v51;
      *(_QWORD *)v57 = v29;
      *(_DWORD *)v58 = 0;
      if (v29 < 1)
      {
        v55 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)v57, (int)v58, "b > 0");
        if (v55)
        {
          google::LogMessageFatal::LogMessageFatal((unint64_t *)v58, (google::glog_internal_namespace_ *)"./ortools/sat/integer_expr.cc", 514, &v55);
          google::LogMessage::stream((google::LogMessage *)v58);
          goto LABEL_53;
        }
      }
      *(_DWORD *)v58 = 0;
      if (v34 < 0)
      {
        v55 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)&v56, (int)v58, "p >= 0");
        if (!v55)
        {
          v34 = v56;
          goto LABEL_21;
        }
        google::LogMessageFatal::LogMessageFatal((unint64_t *)v58, (google::glog_internal_namespace_ *)"./ortools/sat/integer_expr.cc", 515, &v55);
        google::LogMessage::stream((google::LogMessage *)v58);
LABEL_53:
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v58);
      }
LABEL_21:
      v11 = v34 / *(_QWORD *)v57;
      v35 = *((_QWORD *)this + 3);
      v36 = 0x7FFFFFFFFFFFFFFFLL;
      if (v11 >= (uint64_t)0x8000000000000002)
        v36 = -v11;
      *(_DWORD *)v58 = v4 ^ 1;
      *(_QWORD *)&v58[4] = v36;
      v37 = *(_QWORD *)v58;
      v38 = *(_QWORD *)(v35 + 40);
      v39 = *(_QWORD *)(v38 + 12 * (int)v32);
      *(_DWORD *)v57 = v32;
      *(_QWORD *)&v57[4] = v39;
      *(_QWORD *)v58 = *(_QWORD *)v57;
      *(_DWORD *)&v58[8] = HIDWORD(v39);
      v40 = *(_QWORD *)(v38 + 12 * (*((_DWORD *)this + 4) ^ 1));
      *(_DWORD *)v57 = *((_DWORD *)this + 4) ^ 1;
      *(_QWORD *)&v57[4] = v40;
      v59 = *(_QWORD *)v57;
      v60 = HIDWORD(v40);
      v2 = v2 & 0xFFFFFFFF00000000 | HIDWORD(v36);
      if ((operations_research::sat::IntegerTrail::Enqueue(v35, v37, v2, 0, 0, (uint64_t *)v58, 2) & 1) == 0)
        return 0;
      v20 = 1;
      v28 = 0;
      v41 = v53;
      v29 = v54;
      v53 = v54;
      v54 = v41;
      v4 = v32;
      v10 = v31;
    }
    while ((v33 & 1) != 0);
LABEL_39:
    v4 = v32;
    v10 = v31;
    if ((v20 & 1) == 0)
      return 1;
  }
  v51 = v10 * v11;
  v13 = *((_QWORD *)this + 3);
  if (v12 >= (uint64_t)0x8000000000000002)
    v14 = -v12;
  else
    v14 = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)v58 = *((_DWORD *)this + 4) ^ 1;
  *(_QWORD *)&v58[4] = v14;
  v15 = *(_QWORD *)(v13 + 40);
  v16 = *(_QWORD *)(v15 + 12 * (int)(v4 ^ 1));
  v17 = *(_QWORD *)v58;
  *(_DWORD *)v57 = v4 ^ 1;
  *(_QWORD *)&v57[4] = v16;
  *(_QWORD *)v58 = *(_QWORD *)v57;
  *(_DWORD *)&v58[8] = HIDWORD(v16);
  v18 = *(_QWORD *)(v15 + 12 * (int)(v3 ^ 1));
  *(_DWORD *)v57 = v3 ^ 1;
  *(_DWORD *)&v57[4] = v18;
  v59 = *(_QWORD *)v57;
  v60 = HIDWORD(v18);
  v61 = v4;
  v62 = 0;
  *(_DWORD *)v57 = v3;
  *(_QWORD *)&v57[4] = 0;
  v63 = v3;
  v64 = 0;
  v49 = v49 & 0xFFFFFFFF00000000 | HIDWORD(v14);
  result = operations_research::sat::IntegerTrail::Enqueue(v13, v17, SHIDWORD(v14), 0, 0, (uint64_t *)v58, 4);
  if ((_DWORD)result)
  {
    v20 = 1;
    v21 = v53 * v54;
    v22 = v52;
    if (v53 * v54 <= v52)
      goto LABEL_14;
    goto LABEL_12;
  }
  return result;
}

void sub_22DB719A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DB719A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DB719B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DB719B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DB719C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DB719C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DB719D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DB719D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::PositiveProductPropagator::RegisterWith(operations_research::sat::PositiveProductPropagator *this, operations_research::sat::GenericLiteralWatcher *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)a2, (uint64_t)this);
  v5 = *((unsigned int *)this + 2);
  operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a2, v5, v4, 0xFFFFFFFFLL);
  if ((_DWORD)v5 != -1)
    operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a2, v5 ^ 1, v4, 0xFFFFFFFFLL);
  v6 = *((unsigned int *)this + 3);
  operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a2, v6, v4, 0xFFFFFFFFLL);
  if ((_DWORD)v6 != -1)
    operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a2, v6 ^ 1, v4, 0xFFFFFFFFLL);
  v7 = *((unsigned int *)this + 4);
  operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a2, v7, v4, 0xFFFFFFFFLL);
  if ((_DWORD)v7 != -1)
    operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a2, v7 ^ 1, v4, 0xFFFFFFFFLL);
}

uint64_t operations_research::sat::SquarePropagator::SquarePropagator(uint64_t result, int a2, int a3, uint64_t a4)
{
  *(_QWORD *)result = &off_24F986450;
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_QWORD *)(result + 16) = a4;
  return result;
}

uint64_t operations_research::sat::SquarePropagator::Propagate(operations_research::sat::SquarePropagator *this)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v33;
  _BYTE v34[12];
  uint64_t v35;
  uint64_t *v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  do
  {
    v5 = *(_QWORD *)(*((_QWORD *)this + 2) + 40);
    v6 = *((_DWORD *)this + 2);
    v7 = *((_DWORD *)this + 3);
    v8 = *(_QWORD *)(v5 + 12 * v6);
    v35 = v8;
    v9 = *(_QWORD *)(v5 + 12 * (v6 ^ 1));
    v10 = *(_QWORD *)(v5 + 12 * v7);
    v11 = *(_QWORD *)(v5 + 12 * (v7 ^ 1));
    *(_DWORD *)v34 = 0;
    if (v8 < 0)
    {
      v36 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)&v35, (int)v34, "min_x >= 0");
      if (v36)
      {
        google::LogMessageFatal::LogMessageFatal((unint64_t *)v34, (google::glog_internal_namespace_ *)"./ortools/sat/integer_expr.cc", 625, &v36);
        google::LogMessage::stream((google::LogMessage *)v34);
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v34);
      }
      v8 = v35;
      v12 = v8 * v8;
      v13 = v8 * v8 > v10;
      if (v8 * v8 <= v10)
      {
LABEL_11:
        v12 = v10;
        v17 = -v11;
        v18 = v9 * v9;
        v19 = v9 * v9 <= -v11;
        if (v9 * v9 < -v11)
          goto LABEL_7;
        goto LABEL_12;
      }
    }
    else
    {
      v12 = v8 * v8;
      v13 = v8 * v8 > v10;
      if (v8 * v8 <= v10)
        goto LABEL_11;
    }
    v14 = *((_QWORD *)this + 2);
    v15 = *((_DWORD *)this + 2);
    *(_DWORD *)v34 = *((_DWORD *)this + 3);
    *(_DWORD *)&v34[4] = v12;
    v16 = *(_QWORD *)v34;
    *(_DWORD *)v34 = v15;
    *(_QWORD *)&v34[4] = v8;
    v36 = *(uint64_t **)v34;
    v37 = HIDWORD(v8);
    v2 = v2 & 0xFFFFFFFF00000000 | HIDWORD(v12);
    if (!operations_research::sat::IntegerTrail::Enqueue(v14, v16, v2, 0, 0, (uint64_t *)&v36, 1))
      return 0;
    v17 = -v11;
    v18 = v9 * v9;
    v19 = v9 * v9 <= -v11;
    if (v9 * v9 < -v11)
    {
LABEL_7:
      v20 = *((_QWORD *)this + 2);
      v21 = *((_DWORD *)this + 2);
      v22 = -v18;
      *(_DWORD *)v34 = *((_DWORD *)this + 3) ^ 1;
      *(_DWORD *)&v34[4] = v22;
      v23 = *(_QWORD *)v34;
      *(_DWORD *)v34 = v21 ^ 1;
      *(_QWORD *)&v34[4] = v9;
      v36 = *(uint64_t **)v34;
      v37 = HIDWORD(v9);
      v3 = v3 & 0xFFFFFFFF00000000 | HIDWORD(v22);
      if ((operations_research::sat::IntegerTrail::Enqueue(v20, v23, v3, 0, 0, (uint64_t *)&v36, 1) & 1) == 0)
        return 0;
      goto LABEL_18;
    }
LABEL_12:
    if (v19)
      goto LABEL_19;
    v24 = 1 - v9;
    do
      --v24;
    while (v24 * v24 > v17);
    v25 = *((_QWORD *)this + 2);
    v26 = *((_DWORD *)this + 2) ^ 1;
    v27 = 0x7FFFFFFFFFFFFFFFLL;
    if (v24 >= (uint64_t)0x8000000000000002)
      v27 = -v24;
    *(_DWORD *)v34 = *((_DWORD *)this + 3) ^ 1;
    *(_QWORD *)&v34[4] = 1 - (v24 + 1) * (v24 + 1);
    v36 = *(uint64_t **)v34;
    v37 = *(_DWORD *)&v34[8];
    v33 = v33 & 0xFFFFFFFF00000000 | HIDWORD(v27);
    if (!operations_research::sat::IntegerTrail::Enqueue(v25, __SPAIR64__(v27, v26), SHIDWORD(v27), 0, 0, (uint64_t *)&v36, 1))return 0;
LABEL_18:
    v13 = 1;
LABEL_19:
    v28 = v35;
    if (v28 * v28 < v12)
    {
      do
        ++v28;
      while (v28 * v28 < v12);
      v29 = *((_QWORD *)this + 2);
      v30 = *((_DWORD *)this + 3);
      *(_DWORD *)v34 = *((_DWORD *)this + 2);
      *(_DWORD *)&v34[4] = v28;
      v31 = *(_QWORD *)v34;
      *(_DWORD *)v34 = v30;
      *(_QWORD *)&v34[4] = (v28 - 1) * (v28 - 1) + 1;
      v35 = v28;
      v36 = *(uint64_t **)v34;
      v37 = *(_DWORD *)&v34[8];
      v1 = v1 & 0xFFFFFFFF00000000 | HIDWORD(v28);
      if ((operations_research::sat::IntegerTrail::Enqueue(v29, v31, v1, 0, 0, (uint64_t *)&v36, 1) & 1) == 0)
        return 0;
      v13 = 1;
    }
  }
  while (v13);
  return 1;
}

void sub_22DB71E00(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::SquarePropagator::RegisterWith(operations_research::sat::SquarePropagator *this, operations_research::sat::GenericLiteralWatcher *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  v4 = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)a2, (uint64_t)this);
  v5 = *((unsigned int *)this + 2);
  operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a2, v5, v4, 0xFFFFFFFFLL);
  if ((_DWORD)v5 != -1)
    operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a2, v5 ^ 1, v4, 0xFFFFFFFFLL);
  v6 = *((unsigned int *)this + 3);
  operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a2, v6, v4, 0xFFFFFFFFLL);
  if ((_DWORD)v6 != -1)
    operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a2, v6 ^ 1, v4, 0xFFFFFFFFLL);
}

uint64_t operations_research::sat::DivisionPropagator::DivisionPropagator(uint64_t result, int a2, int a3, int a4, uint64_t a5)
{
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_QWORD *)result = &off_24F986480;
  *(_DWORD *)(result + 16) = a4;
  *(_QWORD *)(result + 24) = a5;
  return result;
}

uint64_t operations_research::sat::DivisionPropagator::Propagate(operations_research::sat::DivisionPropagator *this)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[12];
  _BYTE v32[12];
  uint64_t v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 40);
  v3 = *((_DWORD *)this + 2);
  v4 = *((_DWORD *)this + 3);
  v30 = *(_QWORD *)(v2 + 12 * v3);
  v5 = *(_QWORD *)(v2 + 12 * (v3 ^ 1));
  v6 = *(_QWORD *)(v2 + 12 * v4);
  v29 = v6;
  v7 = *(_QWORD *)(v2 + 12 * (v4 ^ 1));
  v8 = *((_DWORD *)this + 4);
  v9 = *(_QWORD *)(v2 + 12 * v8);
  v10 = *(_QWORD *)(v2 + 12 * (v8 ^ 1));
  *(_DWORD *)v32 = 0;
  if (v30 < 0)
  {
    *(_QWORD *)v31 = google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)&v30, (int)v32, "min_a >= 0");
    if (*(_QWORD *)v31)
    {
      google::LogMessageFatal::LogMessageFatal((unint64_t *)v32, (google::glog_internal_namespace_ *)"./ortools/sat/integer_expr.cc", 693, (uint64_t **)v31);
      google::LogMessage::stream((google::LogMessage *)v32);
      goto LABEL_18;
    }
  }
  *(_DWORD *)v32 = 0;
  if (v6 < 1)
  {
    *(_QWORD *)v31 = google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)&v29, (int)v32, "min_b > 0");
    if (*(_QWORD *)v31)
    {
      google::LogMessageFatal::LogMessageFatal((unint64_t *)v32, (google::glog_internal_namespace_ *)"./ortools/sat/integer_expr.cc", 694, (uint64_t **)v31);
      google::LogMessage::stream((google::LogMessage *)v32);
LABEL_18:
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v32);
    }
  }
  v11 = -(uint64_t)v7;
  v12 = -(uint64_t)v10;
  do
  {
    v14 = -(v5 / v29);
    v13 = v12 > v14;
    if (v12 > v14)
    {
      v15 = *((_QWORD *)this + 3);
      v16 = *((_DWORD *)this + 3);
      *(_DWORD *)v32 = *((_DWORD *)this + 4) ^ 1;
      *(_QWORD *)&v32[4] = v5 / v29;
      v17 = *(_QWORD *)v32;
      v18 = *(_QWORD *)(v15 + 40);
      v19 = *(_QWORD *)(v18 + 12 * (*((_DWORD *)this + 2) ^ 1));
      *(_DWORD *)v31 = *((_DWORD *)this + 2) ^ 1;
      *(_QWORD *)&v31[4] = v19;
      *(_QWORD *)v32 = *(_QWORD *)v31;
      *(_DWORD *)&v32[8] = HIDWORD(v19);
      v20 = *(_QWORD *)(v18 + 12 * v16);
      *(_DWORD *)v31 = v16;
      *(_QWORD *)&v31[4] = v20;
      v33 = *(_QWORD *)v31;
      v34 = HIDWORD(v20);
      v10 = v10 & 0xFFFFFFFF00000000 | ((unint64_t)(v5 / v29) >> 32);
      result = operations_research::sat::IntegerTrail::Enqueue(v15, v17, v10, 0, 0, (uint64_t *)v32, 2);
      if (!(_DWORD)result)
        return result;
      v12 = v14;
    }
    v22 = v30 / v11;
    if (v30 / v11 > v9)
    {
      v23 = *((_QWORD *)this + 3);
      v24 = *((_DWORD *)this + 3);
      *(_DWORD *)v32 = *((_DWORD *)this + 4);
      *(_QWORD *)&v32[4] = v30 / v11;
      v25 = *(_QWORD *)(v23 + 40);
      v26 = *(_QWORD *)(v25 + 12 * *((int *)this + 2));
      v27 = *(_QWORD *)v32;
      *(_DWORD *)v31 = *((_DWORD *)this + 2);
      *(_QWORD *)&v31[4] = v26;
      *(_QWORD *)v32 = *(_QWORD *)v31;
      *(_DWORD *)&v32[8] = HIDWORD(v26);
      v28 = *(_QWORD *)(v25 + 12 * (v24 ^ 1));
      *(_DWORD *)v31 = v24 ^ 1;
      *(_QWORD *)&v31[4] = v28;
      v33 = *(_QWORD *)v31;
      v34 = HIDWORD(v28);
      v7 = v7 & 0xFFFFFFFF00000000 | HIDWORD(v22);
      result = operations_research::sat::IntegerTrail::Enqueue(v23, v27, v7, 0, 0, (uint64_t *)v32, 2);
      if (!(_DWORD)result)
        return result;
      v13 = 1;
      v9 = v22;
    }
  }
  while (v13);
  return 1;
}

void sub_22DB72190(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DB72198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::FixedDivisionPropagator::FixedDivisionPropagator(uint64_t result, int a2, uint64_t a3, int a4, uint64_t a5)
{
  *(_DWORD *)(result + 8) = a2;
  *(_QWORD *)result = &off_24F9864B0;
  *(_QWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 20) = a4;
  *(_QWORD *)(result + 24) = a5;
  return result;
}

BOOL operations_research::sat::FixedDivisionPropagator::Propagate(operations_research::sat::FixedDivisionPropagator *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  int v22;
  unint64_t v23;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  int v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50[3];

  v50[2] = *MEMORY[0x24BDAC8D0];
  v2 = *((_DWORD *)this + 2);
  v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 40);
  v4 = *(_QWORD *)(v3 + 12 * v2);
  v49 = v4;
  v5 = -*(_QWORD *)(v3 + 12 * (v2 ^ 1));
  v48 = v5;
  v6 = *((_DWORD *)this + 5);
  v7 = *(_QWORD *)(v3 + 12 * v6);
  v8 = *(_QWORD *)(v3 + 12 * (v6 ^ 1));
  v10 = (uint64_t *)((char *)this + 12);
  v9 = *(_QWORD *)((char *)this + 12);
  LODWORD(v50[0]) = 0;
  if (v9 < 1)
  {
    v47 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)this + 12, (int)v50, "b_ > 0");
    if (v47)
    {
      google::LogMessageFatal::LogMessageFatal(v50, (google::glog_internal_namespace_ *)"./ortools/sat/integer_expr.cc", 745, &v47);
      google::LogMessage::stream((google::LogMessage *)v50);
      goto LABEL_61;
    }
    v9 = *v10;
    v11 = -v8;
    v12 = v5 / *v10;
    v13 = v12 <= -v8;
    if (v12 < -v8)
      goto LABEL_3;
  }
  else
  {
    v11 = -v8;
    v12 = v5 / v9;
    v13 = v5 / v9 <= -v8;
    if (v5 / v9 < -v8)
    {
LABEL_3:
      v14 = *((_QWORD *)this + 3);
      v15 = 0x7FFFFFFFFFFFFFFFLL;
      if (v12 >= (uint64_t)0x8000000000000002)
        v15 = -v12;
      LODWORD(v50[0]) = *((_DWORD *)this + 5) ^ 1;
      *(unint64_t *)((char *)v50 + 4) = v15;
      v16 = v50[0];
      v17 = HIDWORD(v15);
      v18 = *(_QWORD *)(*(_QWORD *)(v14 + 40) + 12 * (*((_DWORD *)this + 2) ^ 1));
      LODWORD(v50[0]) = *((_DWORD *)this + 2) ^ 1;
      *(unint64_t *)((char *)v50 + 4) = v18;
      if ((operations_research::sat::IntegerTrail::Enqueue(v14, v16, v17, 0, 0, (uint64_t *)v50, 1) & 1) == 0)
        return 0;
      goto LABEL_32;
    }
  }
  if (!v13)
  {
    if (v8 <= 0)
    {
      v9 += ~(v9 * v8);
    }
    else
    {
      if (v9 >= 0)
        v19 = v9;
      else
        v19 = -v9;
      v20 = 63 - __clz(v19);
      v21 = __clz(v8) ^ 0x3F;
      if (!v9)
        v20 = 0;
      v22 = v20 + v21;
      if (v22 > 61)
      {
        if (v9)
        {
          v9 = ((v9 ^ (unint64_t)v11) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
          v23 = v19 * v8;
          if (v22 <= 0x3E && v23 < v9)
          {
            if (v9 >= 0)
              v9 = v19 * v8;
            else
              v9 = -(uint64_t)v23;
          }
        }
      }
      else
      {
        v9 *= v11;
      }
    }
    v47 = (uint64_t *)v9;
    if (v9 >= v5)
    {
      v46 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>((int)&v47, (int)&v48, "new_max_a < max_a");
      if (v46)
      {
        google::LogMessageFatal::LogMessageFatal(v50, (google::glog_internal_namespace_ *)"./ortools/sat/integer_expr.cc", 757, &v46);
        google::LogMessage::stream((google::LogMessage *)v50);
        goto LABEL_61;
      }
      v9 = (uint64_t)v47;
    }
    v25 = *((_QWORD *)this + 3);
    if (v9 >= (uint64_t)0x8000000000000002)
      v26 = -v9;
    else
      v26 = 0x7FFFFFFFFFFFFFFFLL;
    LODWORD(v50[0]) = *((_DWORD *)this + 2) ^ 1;
    *(unint64_t *)((char *)v50 + 4) = v26;
    v27 = v50[0];
    v28 = *(_QWORD *)(*(_QWORD *)(v25 + 40) + 12 * (*((_DWORD *)this + 5) ^ 1));
    LODWORD(v50[0]) = *((_DWORD *)this + 5) ^ 1;
    *(unint64_t *)((char *)v50 + 4) = v28;
    if ((operations_research::sat::IntegerTrail::Enqueue(v25, v27, SHIDWORD(v26), 0, 0, (uint64_t *)v50, 1) & 1) == 0)
      return 0;
  }
LABEL_32:
  v29 = *v10;
  v30 = v4 / *v10;
  if (v30 > v7)
  {
    v31 = *((_QWORD *)this + 3);
    LODWORD(v50[0]) = *((_DWORD *)this + 5);
    *(unint64_t *)((char *)v50 + 4) = v30;
    v32 = v50[0];
    v33 = HIDWORD(v30);
    v34 = *(_QWORD *)(*(_QWORD *)(v31 + 40) + 12 * *((int *)this + 2));
    LODWORD(v50[0]) = *((_DWORD *)this + 2);
    *(unint64_t *)((char *)v50 + 4) = v34;
    v35 = operations_research::sat::IntegerTrail::Enqueue(v31, v32, v33, 0, 0, (uint64_t *)v50, 1);
    return (v35 & 1) != 0;
  }
  if (v30 >= v7)
    return 1;
  if (v7 < 1)
  {
    v29 = v29 * (v7 - 1) + 1;
  }
  else
  {
    if (v29 >= 0)
      v36 = *v10;
    else
      v36 = -v29;
    v37 = 63 - __clz(v36);
    v38 = __clz(v7) ^ 0x3F;
    if (!v29)
      v37 = 0;
    v39 = v37 + v38;
    if (v39 > 61)
    {
      if (v29)
      {
        v29 = ((v29 ^ (unint64_t)v7) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
        if (v39 <= 0x3E)
        {
          v40 = v36 * v7;
          if (v29 >= 0)
            v41 = v40;
          else
            v41 = -(uint64_t)v40;
          if (v40 < v29)
            v29 = v41;
        }
      }
    }
    else
    {
      v29 *= v7;
    }
  }
  v47 = (uint64_t *)v29;
  if (v29 <= v4)
  {
    v46 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>((int)&v47, (int)&v49, "new_min_a > min_a");
    if (!v46)
    {
      v29 = (uint64_t)v47;
      goto LABEL_52;
    }
    google::LogMessageFatal::LogMessageFatal(v50, (google::glog_internal_namespace_ *)"./ortools/sat/integer_expr.cc", 775, &v46);
    google::LogMessage::stream((google::LogMessage *)v50);
LABEL_61:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v50);
  }
LABEL_52:
  v42 = *((_QWORD *)this + 3);
  LODWORD(v50[0]) = *((_DWORD *)this + 2);
  *(unint64_t *)((char *)v50 + 4) = v29;
  v43 = v50[0];
  v44 = *(_QWORD *)(*(_QWORD *)(v42 + 40) + 12 * *((int *)this + 5));
  LODWORD(v50[0]) = *((_DWORD *)this + 5);
  *(unint64_t *)((char *)v50 + 4) = v44;
  v35 = operations_research::sat::IntegerTrail::Enqueue(v42, v43, SHIDWORD(v29), 0, 0, (uint64_t *)v50, 1);
  return (v35 & 1) != 0;
}

void sub_22DB72664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DB7266C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DB72674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::FixedDivisionPropagator::RegisterWith(operations_research::sat::FixedDivisionPropagator *this, operations_research::sat::GenericLiteralWatcher *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  v4 = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)a2, (uint64_t)this);
  v5 = *((unsigned int *)this + 2);
  operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a2, v5, v4, 0xFFFFFFFFLL);
  if ((_DWORD)v5 != -1)
    operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a2, v5 ^ 1, v4, 0xFFFFFFFFLL);
  v6 = *((unsigned int *)this + 5);
  operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a2, v6, v4, 0xFFFFFFFFLL);
  if ((_DWORD)v6 != -1)
    operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a2, v6 ^ 1, v4, 0xFFFFFFFFLL);
}

void operations_research::sat::IntegerSumLE::~IntegerSumLE(operations_research::sat::IntegerSumLE *this)
{
  operations_research::sat::IntegerSumLE::~IntegerSumLE(this);
  JUMPOUT(0x22E31DF78);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  *(_QWORD *)this = &off_24F986390;
  v2 = (void *)*((_QWORD *)this + 26);
  if (v2)
  {
    *((_QWORD *)this + 27) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 23);
  if (v3)
  {
    *((_QWORD *)this + 24) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 20);
  if (v4)
  {
    *((_QWORD *)this + 21) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 17);
  if (v5)
  {
    *((_QWORD *)this + 18) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 14);
  if (v6)
  {
    *((_QWORD *)this + 15) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 11);
  if (v7)
  {
    *((_QWORD *)this + 12) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 1);
  if (v8)
  {
    *((_QWORD *)this + 2) = v8;
    operator delete(v8);
  }
}

void operations_research::sat::MinPropagator::~MinPropagator(operations_research::sat::MinPropagator *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24F9863C0;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24F9863C0;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x22E31DF78);
}

void operations_research::sat::LinMinPropagator::~LinMinPropagator(operations_research::sat::LinMinPropagator *this)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *(_QWORD *)this = &off_24F9863F0;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 6) = v3;
    operator delete(v3);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    v5 = *((_QWORD *)this + 2);
    v6 = (void *)*((_QWORD *)this + 1);
    if (v5 != v4)
    {
      do
      {
        v7 = *(void **)(v5 - 32);
        if (v7)
        {
          *(_QWORD *)(v5 - 24) = v7;
          operator delete(v7);
        }
        v8 = *(void **)(v5 - 56);
        if (v8)
        {
          *(_QWORD *)(v5 - 48) = v8;
          operator delete(v8);
        }
        v5 -= 56;
      }
      while (v5 != v4);
      v6 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v4;
    operator delete(v6);
  }
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *(_QWORD *)this = &off_24F9863F0;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 6) = v3;
    operator delete(v3);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    v5 = *((_QWORD *)this + 2);
    v6 = (void *)*((_QWORD *)this + 1);
    if (v5 != v4)
    {
      do
      {
        v7 = *(void **)(v5 - 32);
        if (v7)
        {
          *(_QWORD *)(v5 - 24) = v7;
          operator delete(v7);
        }
        v8 = *(void **)(v5 - 56);
        if (v8)
        {
          *(_QWORD *)(v5 - 48) = v8;
          operator delete(v8);
        }
        v5 -= 56;
      }
      while (v5 != v4);
      v6 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v4;
    operator delete(v6);
  }
  JUMPOUT(0x22E31DF78);
}

void operations_research::sat::PositiveProductPropagator::~PositiveProductPropagator(operations_research::sat::PositiveProductPropagator *this)
{
  JUMPOUT(0x22E31DF78);
}

void operations_research::sat::SquarePropagator::~SquarePropagator(operations_research::sat::SquarePropagator *this)
{
  JUMPOUT(0x22E31DF78);
}

void operations_research::sat::DivisionPropagator::~DivisionPropagator(operations_research::sat::DivisionPropagator *this)
{
  JUMPOUT(0x22E31DF78);
}

void operations_research::sat::FixedDivisionPropagator::~FixedDivisionPropagator(operations_research::sat::FixedDivisionPropagator *this)
{
  JUMPOUT(0x22E31DF78);
}

uint64_t operations_research::sat::Model::MyNew<operations_research::sat::RevIntegerValueRepository>(uint64_t a1)
{
  uint64_t v2;
  operations_research::sat::IntegerTrail *v3;

  v2 = operator new();
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)v2 = &off_24F986588;
  v3 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a1);
  operations_research::sat::IntegerTrail::RegisterReversibleClass(v3, v2);
  return v2;
}

void sub_22DB72ACC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v3;

  *v1 = &off_24F9865E0;
  v3 = (void *)v1[5];
  if (v3)
  {
    v1[6] = v3;
    operator delete(v3);
  }
  operations_research::sat::Model::MyNew<operations_research::sat::RevIntRepository>((uint64_t)v1);
  MEMORY[0x22E31DF78](v1, 0x10B1C404D499D86);
  _Unwind_Resume(a1);
}

void operations_research::sat::RevIntegerValueRepository::~RevIntegerValueRepository(operations_research::sat::RevIntegerValueRepository *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24F9865E0;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 3) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24F9865E0;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 3) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x22E31DF78);
}

void operations_research::RevRepository<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::SetLevel(uint64_t a1, int a2)
{
  std::vector<int> *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int *v8;
  unint64_t v9;
  unint64_t v10;
  std::vector<int>::size_type v11;
  unint64_t v12;
  std::vector<int>::size_type v13;
  uint64_t v14;
  unint64_t v15;
  int i;
  std::vector<int>::value_type __x;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v3 = (std::vector<int> *)(a1 + 16);
  v6 = v5 - v4;
  if (((unint64_t)v6 >> 2) != a2)
  {
    ++*(_QWORD *)(a1 + 8);
    v7 = a2;
    if ((int)((unint64_t)v6 >> 2) <= a2)
    {
      __x = (*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 4;
      v12 = v6 >> 2;
      v13 = a2 - v12;
      if (v7 <= v12)
      {
        if (v7 < v12)
          *(_QWORD *)(a1 + 24) = v4 + 4 * v7;
      }
      else
      {
        std::vector<int>::__append(v3, v13, &__x);
      }
    }
    else
    {
      v8 = (int *)(v4 + 4 * a2);
      v9 = *v8;
      v10 = v6 >> 2;
      v11 = a2 - v10;
      if (v7 <= v10)
      {
        if (v7 < v10)
          *(_QWORD *)(a1 + 24) = v8;
      }
      else
      {
        std::vector<int>::__append(v3, v11);
      }
      v14 = *(_QWORD *)(a1 + 40);
      v15 = (*(_QWORD *)(a1 + 48) - v14) >> 4;
      for (i = v15 - 1; i >= (int)v9; --i)
        **(_QWORD **)(v14 + 16 * i) = *(_QWORD *)(v14 + 16 * i + 8);
      if (v9 <= v15)
      {
        if (v9 < v15)
          *(_QWORD *)(a1 + 48) = v14 + 16 * v9;
      }
      else
      {
        std::vector<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> *,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>::__append((char **)(a1 + 40), v9 - v15);
      }
    }
  }
}

_QWORD *operations_research::RevRepository<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::~RevRepository(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_24F9865E0;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

void operations_research::RevRepository<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::~RevRepository(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_24F9865E0;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x22E31DF78);
}

void std::vector<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> *,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>::__append(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      v12 = 16 * a2;
      bzero(a1[1], 16 * a2);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = (v5 - *a1) >> 4;
    v8 = v7 + a2;
    if ((v7 + a2) >> 60)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v9 = v4 - v6;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[16 * v7];
    v14 = 16 * a2;
    v15 = &v11[16 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
      operator delete(v5);
  }
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::RevIntegerValueRepository>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F986608;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::RevIntegerValueRepository>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F986608;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x22E31DF78);
}

void std::__function::__func<operations_research::sat::IntegerSumLE::Propagate(void)::$_0,std::allocator<operations_research::sat::IntegerSumLE::Propagate(void)::$_0>,void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::sat::IntegerSumLE::Propagate(void)::$_0,std::allocator<operations_research::sat::IntegerSumLE::Propagate(void)::$_0>,void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F986640;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::IntegerSumLE::Propagate(void)::$_0,std::allocator<operations_research::sat::IntegerSumLE::Propagate(void)::$_0>,void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F986640;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<operations_research::sat::IntegerSumLE::Propagate(void)::$_0,std::allocator<operations_research::sat::IntegerSumLE::Propagate(void)::$_0>,void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::operator()(uint64_t a1, uint64_t *a2, signed int *a3, _QWORD **a4, std::vector<int> **a5)
{
  uint64_t v5;
  uint64_t v6;
  signed int v7;
  std::vector<int> *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int TrailIndexOfVarBefore;
  int v16;
  int *value;
  std::vector<int>::pointer end;
  uint64_t v19;
  uint64_t v20;
  std::vector<int>::pointer begin;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  int *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  _OWORD *v34;
  __int128 *v35;
  uint64_t v36;
  __int128 v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _BYTE *v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  _OWORD *v55;
  char *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  void **v61;
  signed int v62;
  std::vector<int> *v63;
  unint64_t v64;
  uint64_t v65;

  v5 = a1;
  v6 = *a2;
  v7 = *a3;
  v8 = *a5;
  v9 = *(_QWORD *)(a1 + 8);
  if ((_QWORD *)(v9 + 160) != *a4)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(*a4, *(char **)(v9 + 160), *(char **)(v9 + 168), (uint64_t)(*(_QWORD *)(v9 + 168) - *(_QWORD *)(v9 + 160)) >> 2);
  v8->__end_ = v8->__begin_;
  *(_QWORD *)(v9 + 216) = *(_QWORD *)(v9 + 208);
  v61 = (void **)(v9 + 208);
  v10 = *(_QWORD *)(v9 + 96) - *(_QWORD *)(v9 + 88);
  if ((int)(v10 >> 2) >= 1)
  {
    v11 = 0;
    v12 = (v10 >> 2);
    v63 = v8;
    v62 = v7;
    v65 = v12;
    while (1)
    {
      v14 = *(_DWORD *)(*(_QWORD *)(v9 + 88) + 4 * v11);
      if ((v14 ^ v6) < 2)
        goto LABEL_7;
      TrailIndexOfVarBefore = operations_research::sat::IntegerTrail::FindTrailIndexOfVarBefore(*(_QWORD *)(v9 + 48), v14, v7);
      if (TrailIndexOfVarBefore < 0)
        goto LABEL_7;
      v16 = TrailIndexOfVarBefore;
      end = v8->__end_;
      value = v8->__end_cap_.__value_;
      if (end >= value)
        break;
      *end = TrailIndexOfVarBefore;
      v8->__end_ = end + 1;
      if (*(uint64_t *)(v5 + 16) < 1)
        goto LABEL_7;
LABEL_33:
      v39 = *(_QWORD *)(v9 + 112);
      v41 = *(char **)(v9 + 216);
      v40 = *(_QWORD *)(v9 + 224);
      if ((unint64_t)v41 >= v40)
      {
        v42 = (char *)*v61;
        v43 = v41 - (_BYTE *)*v61;
        v44 = v43 >> 3;
        v45 = (v43 >> 3) + 1;
        if (v45 >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v46 = v40 - (_QWORD)v42;
        if (v46 >> 2 > v45)
          v45 = v46 >> 2;
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
          v47 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v47 = v45;
        if (v47)
        {
          if (v47 >> 61)
LABEL_58:
            std::__throw_bad_array_new_length[abi:ne180100]();
          v48 = operator new(8 * v47);
          v49 = &v48[8 * v44];
          *v49 = *(_QWORD *)(v39 + 8 * v11);
          v13 = (uint64_t)(v49 + 1);
          if (v41 != v42)
          {
LABEL_43:
            v50 = v41 - 8 - v42;
            if (v50 < 0x58)
            {
              v8 = v63;
              goto LABEL_51;
            }
            v51 = v41 - &v48[v43];
            v8 = v63;
            if (v51 < 0x20)
              goto LABEL_63;
            v52 = (v50 >> 3) + 1;
            v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
            v54 = &v41[-v53];
            v49 = (_QWORD *)((char *)v49 - v53);
            v55 = &v48[8 * v44 - 16];
            v56 = v41 - 16;
            v57 = v52 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v58 = *(_OWORD *)v56;
              *(v55 - 1) = *((_OWORD *)v56 - 1);
              *v55 = v58;
              v55 -= 2;
              v56 -= 32;
              v57 -= 4;
            }
            while (v57);
            v41 = v54;
            if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_63:
              do
              {
LABEL_51:
                v59 = *((_QWORD *)v41 - 1);
                v41 -= 8;
                *--v49 = v59;
              }
              while (v41 != v42);
            }
LABEL_52:
            *(_QWORD *)(v9 + 208) = v49;
            *(_QWORD *)(v9 + 216) = v13;
            *(_QWORD *)(v9 + 224) = &v48[8 * v47];
            if (v42)
              operator delete(v42);
            v7 = v62;
            goto LABEL_6;
          }
        }
        else
        {
          v48 = 0;
          v49 = (_QWORD *)(8 * v44);
          *(_QWORD *)(8 * v44) = *(_QWORD *)(v39 + 8 * v11);
          v13 = 8 * v44 + 8;
          if (v41 != v42)
            goto LABEL_43;
        }
        v8 = v63;
        goto LABEL_52;
      }
      *(_QWORD *)v41 = *(_QWORD *)(v39 + 8 * v11);
      v13 = (uint64_t)(v41 + 8);
LABEL_6:
      v12 = v65;
      *(_QWORD *)(v9 + 216) = v13;
LABEL_7:
      if (++v11 == v12)
        goto LABEL_55;
    }
    v19 = v6;
    v20 = v5;
    begin = v8->__begin_;
    v22 = (char *)end - (char *)v8->__begin_;
    v23 = v22 >> 2;
    v24 = (v22 >> 2) + 1;
    if (v24 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v25 = (char *)value - (char *)begin;
    if (v25 >> 1 > v24)
      v24 = v25 >> 1;
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
      v24 = 0x3FFFFFFFFFFFFFFFLL;
    v64 = v24;
    if (v24)
    {
      if (v24 >> 62)
        goto LABEL_58;
      v26 = operator new(4 * v24);
      v27 = (int *)&v26[4 * v23];
      *v27 = v16;
      v28 = (uint64_t)(v27 + 1);
      if (end != begin)
      {
LABEL_21:
        v29 = (char *)(end - 1) - (char *)begin;
        if (v29 >= 0x2C)
        {
          v30 = (char *)end - &v26[v22];
          v5 = v20;
          v6 = v19;
          v12 = v65;
          if (v30 >= 0x20)
          {
            v31 = (v29 >> 2) + 1;
            v32 = 4 * (v31 & 0x7FFFFFFFFFFFFFF8);
            v33 = &end[v32 / 0xFFFFFFFFFFFFFFFCLL];
            v27 = (int *)((char *)v27 - v32);
            v34 = &v26[4 * v23 - 16];
            v35 = (__int128 *)(end - 4);
            v36 = v31 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v37 = *v35;
              *(v34 - 1) = *(v35 - 1);
              *v34 = v37;
              v34 -= 2;
              v35 -= 2;
              v36 -= 8;
            }
            while (v36);
            end = v33;
            if (v31 == (v31 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_30:
              v8 = v63;
              v63->__begin_ = v27;
              v63->__end_ = (std::vector<int>::pointer)v28;
              v63->__end_cap_.__value_ = (int *)&v26[4 * v64];
              if (begin)
                operator delete(begin);
              v7 = v62;
              v63->__end_ = (std::vector<int>::pointer)v28;
              if (*(uint64_t *)(v5 + 16) < 1)
                goto LABEL_7;
              goto LABEL_33;
            }
          }
        }
        else
        {
          v5 = v20;
          v6 = v19;
          v12 = v65;
        }
        do
        {
          v38 = *--end;
          *--v27 = v38;
        }
        while (end != begin);
        goto LABEL_30;
      }
    }
    else
    {
      v26 = 0;
      v27 = (int *)(4 * v23);
      *(_DWORD *)(4 * v23) = v16;
      v28 = 4 * v23 + 4;
      if (end != begin)
        goto LABEL_21;
    }
    v5 = v20;
    v6 = v19;
    v12 = v65;
    goto LABEL_30;
  }
LABEL_55:
  v60 = *(_QWORD *)(v5 + 16);
  if (v60 > 0)
    operations_research::sat::IntegerTrail::RelaxLinearReason(*(_QWORD **)(v9 + 48), v60, *(_QWORD *)(v9 + 208), (uint64_t)(*(_QWORD *)(v9 + 216) - *(_QWORD *)(v9 + 208)) >> 3, v8);
}

uint64_t std::__function::__func<operations_research::sat::IntegerSumLE::Propagate(void)::$_0,std::allocator<operations_research::sat::IntegerSumLE::Propagate(void)::$_0>,void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat12IntegerSumLE9PropagateEvE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat12IntegerSumLE9PropagateEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat12IntegerSumLE9PropagateEvE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat12IntegerSumLE9PropagateEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::IntegerSumLE::Propagate(void)::$_0,std::allocator<operations_research::sat::IntegerSumLE::Propagate(void)::$_0>,void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::target_type()
{
}

char *std::vector<operations_research::sat::IntegerLiteral>::__insert_with_size[abi:ne180100]<std::__wrap_iter<operations_research::sat::IntegerLiteral*>,std::__wrap_iter<operations_research::sat::IntegerLiteral*>>(uint64_t a1, uint64_t a2, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  char *v7;
  char *v9;
  uint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  int v35;
  char *v36;
  char *v37;

  v5 = *(char **)a1;
  v6 = (a2 - *(_QWORD *)a1) / 12;
  v7 = (char *)(*(_QWORD *)a1 + 12 * v6);
  if (a5 < 1)
    return v7;
  v9 = __src;
  v12 = *(_BYTE **)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v12) >> 2)) < a5)
  {
    v13 = a5 - 0x5555555555555555 * ((v12 - v5) >> 2);
    if (v13 > 0x1555555555555555)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v14 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v5) >> 2);
    v15 = 2 * v14;
    if (2 * v14 <= v13)
      v15 = v13;
    if (v14 >= 0xAAAAAAAAAAAAAAALL)
      v16 = 0x1555555555555555;
    else
      v16 = v15;
    if (v16)
    {
      if (v16 > 0x1555555555555555)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v17 = (char *)operator new(12 * v16);
    }
    else
    {
      v17 = 0;
    }
    v25 = &v17[12 * v6];
    v26 = 12 * a5;
    v27 = &v25[12 * a5];
    v28 = v25;
    do
    {
      v29 = *(_QWORD *)v9;
      *((_DWORD *)v28 + 2) = *((_DWORD *)v9 + 2);
      *(_QWORD *)v28 = v29;
      v28 += 12;
      v9 += 12;
      v26 -= 12;
    }
    while (v26);
    v30 = 12 * v16;
    v31 = *(char **)a1;
    v32 = v25;
    if (*(char **)a1 != v7)
    {
      v33 = v7;
      v32 = v25;
      do
      {
        v34 = *(_QWORD *)(v33 - 12);
        v33 -= 12;
        v35 = *((_DWORD *)v33 + 2);
        *(_QWORD *)(v32 - 12) = v34;
        v32 -= 12;
        *((_DWORD *)v32 + 2) = v35;
      }
      while (v33 != v31);
      v12 = *(_BYTE **)(a1 + 8);
    }
    v36 = &v17[v30];
    if (v12 != v7)
      memmove(v27, v7, v12 - v7);
    v37 = *(char **)a1;
    *(_QWORD *)a1 = v32;
    *(_QWORD *)(a1 + 8) = &v27[v12 - v7];
    *(_QWORD *)(a1 + 16) = v36;
    if (v37)
      operator delete(v37);
    return v25;
  }
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v12 - v7) >> 2)) >= a5)
  {
    v18 = &__src[12 * a5];
    v20 = *(char **)(a1 + 8);
LABEL_18:
    v21 = &v7[12 * a5];
    v22 = (unint64_t)&v20[-12 * a5];
    v23 = v20;
    if (v22 < (unint64_t)v12)
    {
      v23 = v20;
      do
      {
        v24 = *(_QWORD *)v22;
        *((_DWORD *)v23 + 2) = *(_DWORD *)(v22 + 8);
        *(_QWORD *)v23 = v24;
        v23 += 12;
        v22 += 12;
      }
      while (v22 < (unint64_t)v12);
    }
    *(_QWORD *)(a1 + 8) = v23;
    if (v20 != v21)
      memmove(&v7[12 * a5], v7, v20 - v21);
    if (v18 != v9)
      memmove(v7, v9, v18 - v9);
    return v7;
  }
  v18 = &__src[4 * ((v12 - v7) >> 2)];
  v19 = a4 - v18;
  if (a4 != v18)
    memmove(*(void **)(a1 + 8), &__src[4 * ((v12 - v7) >> 2)], a4 - v18);
  v20 = &v12[v19];
  *(_QWORD *)(a1 + 8) = &v12[v19];
  if (v12 - v7 >= 1)
    goto LABEL_18;
  return v7;
}

void std::__function::__func<operations_research::sat::LinMinPropagator::PropagateLinearUpperBound(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0,std::allocator<operations_research::sat::LinMinPropagator::PropagateLinearUpperBound(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0>,void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::sat::LinMinPropagator::PropagateLinearUpperBound(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0,std::allocator<operations_research::sat::LinMinPropagator::PropagateLinearUpperBound(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0>,void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24F9866D0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::LinMinPropagator::PropagateLinearUpperBound(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0,std::allocator<operations_research::sat::LinMinPropagator::PropagateLinearUpperBound(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0>,void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F9866D0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<operations_research::sat::LinMinPropagator::PropagateLinearUpperBound(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0,std::allocator<operations_research::sat::LinMinPropagator::PropagateLinearUpperBound(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0>,void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::operator()(uint64_t a1, uint64_t *a2, signed int *a3, _QWORD **a4, std::vector<int> **a5)
{
  uint64_t v5;
  uint64_t v6;
  std::vector<int> *v7;
  uint64_t *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int TrailIndexOfVarBefore;
  int v15;
  std::vector<int> *v16;
  int *value;
  std::vector<int>::pointer end;
  uint64_t v19;
  char *v20;
  std::vector<int>::pointer begin;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  int *v28;
  uint64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  _OWORD *v40;
  __int128 *v41;
  uint64_t v42;
  __int128 v43;
  int v44;
  char *v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  char *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  int *v56;
  int *v57;
  uint64_t v58;
  int v59;
  int v60;
  std::vector<int> *v61;
  int *v62;
  char *v63;
  std::vector<int>::pointer v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _BYTE *v70;
  int *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  _OWORD *v76;
  char *v77;
  uint64_t v78;
  __int128 v79;
  int v80;
  char *v81;
  uint64_t v82;
  int v83;
  char *v84;
  uint64_t *v85;
  char *__p;
  char *__pa;
  std::vector<int> *v88;
  signed int v89;

  v5 = a1;
  v6 = *a2;
  v89 = *a3;
  v7 = *a5;
  v8 = *(uint64_t **)(a1 + 8);
  (*a4)[1] = **a4;
  v88 = v7;
  v7->__end_ = v7->__begin_;
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) - **(_QWORD **)(a1 + 16);
  v85 = v8;
  v10 = 0;
  if ((int)(v9 >> 2) >= 1)
  {
    v83 = v6;
    v84 = 0;
    v11 = 0;
    v12 = (v9 >> 2);
    v81 = 0;
    v82 = v12;
    while (1)
    {
      v13 = *(_DWORD *)(**(_QWORD **)(v5 + 16) + 4 * v11);
      if ((v13 ^ v6) < 2)
        goto LABEL_5;
      v6 = v5;
      __p = v10;
      TrailIndexOfVarBefore = operations_research::sat::IntegerTrail::FindTrailIndexOfVarBefore(v8[9], v13, v89);
      v15 = TrailIndexOfVarBefore;
      if ((TrailIndexOfVarBefore & 0x80000000) == 0)
        break;
      v8 = v85;
      v10 = __p;
LABEL_4:
      v12 = v82;
      LODWORD(v6) = v83;
LABEL_5:
      if (++v11 == v12)
        goto LABEL_63;
    }
    v16 = v88;
    end = v88->__end_;
    value = v88->__end_cap_.__value_;
    if (end < value)
    {
      *end = TrailIndexOfVarBefore;
      v10 = __p;
      v88->__end_ = end + 1;
      if (*(uint64_t *)(v5 + 32) >= 1)
        goto LABEL_10;
LABEL_42:
      v8 = v85;
      goto LABEL_4;
    }
    begin = v88->__begin_;
    v22 = (char *)end - (char *)v88->__begin_;
    v23 = v22 >> 2;
    v24 = (v22 >> 2) + 1;
    if (v24 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v25 = (char *)value - (char *)begin;
    if (v25 >> 1 > v24)
      v24 = v25 >> 1;
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
      v26 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v26 = v24;
    if (v26)
    {
      if (v26 >> 62)
        goto LABEL_97;
      v27 = operator new(4 * v26);
      v16 = v88;
      v28 = (int *)&v27[4 * v23];
      *v28 = v15;
      v29 = (uint64_t)(v28 + 1);
      if (end != begin)
      {
LABEL_21:
        v30 = (char *)(end - 1) - (char *)begin;
        if (v30 >= 0x2C)
        {
          v36 = (char *)end - &v27[v22];
          v5 = v6;
          if (v36 >= 0x20)
          {
            v37 = (v30 >> 2) + 1;
            v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
            v39 = &end[v38 / 0xFFFFFFFFFFFFFFFCLL];
            v28 = (int *)((char *)v28 - v38);
            v40 = &v27[4 * v23 - 16];
            v41 = (__int128 *)(end - 4);
            v42 = v37 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v43 = *v41;
              *(v40 - 1) = *(v41 - 1);
              *v40 = v43;
              v40 -= 2;
              v41 -= 2;
              v42 -= 8;
            }
            while (v42);
            end = v39;
            if (v37 == (v37 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_39:
              v16->__begin_ = v28;
              v16->__end_ = (std::vector<int>::pointer)v29;
              v16->__end_cap_.__value_ = (int *)&v27[4 * v26];
              if (begin)
                operator delete(begin);
              v10 = __p;
              v16->__end_ = (std::vector<int>::pointer)v29;
              if (*(uint64_t *)(v5 + 32) >= 1)
              {
LABEL_10:
                v19 = **(_QWORD **)(v5 + 24);
                if (v84 < v81)
                {
                  *(_QWORD *)v84 = *(_QWORD *)(v19 + 8 * v11);
                  v20 = v84 + 8;
                  v8 = v85;
                  v12 = v82;
                  LODWORD(v6) = v83;
LABEL_57:
                  v84 = v20;
                  goto LABEL_5;
                }
                v31 = v84 - v10;
                v32 = (v84 - v10) >> 3;
                v33 = v32 + 1;
                if ((unint64_t)(v32 + 1) >> 61)
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                if ((v81 - v10) >> 2 > v33)
                  v33 = (v81 - v10) >> 2;
                if ((unint64_t)(v81 - v10) >= 0x7FFFFFFFFFFFFFF8)
                  v34 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v34 = v33;
                if (v34)
                {
                  if (v34 >> 61)
LABEL_97:
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  v35 = operator new(8 * v34);
                  v10 = __p;
                }
                else
                {
                  v35 = 0;
                }
                v45 = &v35[8 * v32];
                *(_QWORD *)v45 = *(_QWORD *)(v19 + 8 * v11);
                v20 = v45 + 8;
                if (v84 == v10)
                {
                  v8 = v85;
                  v5 = v6;
                  v12 = v82;
                  LODWORD(v6) = v83;
                }
                else
                {
                  v46 = v84 - 8 - v10;
                  v5 = v6;
                  if (v46 < 0x168)
                  {
                    v47 = v84;
                    goto LABEL_52;
                  }
                  if (&v35[v31 - 8 - (v46 & 0xFFFFFFFFFFFFFFF8)] <= &v35[v31 - 8]
                    && &v84[-(v46 & 0xFFFFFFFFFFFFFFF8) - 8] <= v84 - 8
                    && (unint64_t)(v84 - &v35[v31]) >= 0x20)
                  {
                    v49 = (v46 >> 3) + 1;
                    v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
                    v47 = &v84[-v50];
                    v45 -= v50;
                    v51 = &v35[8 * v32 - 16];
                    v52 = v84 - 16;
                    v53 = v49 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v54 = *(_OWORD *)v52;
                      *(v51 - 1) = *((_OWORD *)v52 - 1);
                      *v51 = v54;
                      v51 -= 2;
                      v52 -= 32;
                      v53 -= 4;
                    }
                    while (v53);
                    v8 = v85;
                    v12 = v82;
                    LODWORD(v6) = v83;
                    if (v49 != (v49 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_53;
                  }
                  else
                  {
                    v47 = v84;
LABEL_52:
                    v8 = v85;
                    v12 = v82;
                    LODWORD(v6) = v83;
                    do
                    {
LABEL_53:
                      v48 = *((_QWORD *)v47 - 1);
                      v47 -= 8;
                      *((_QWORD *)v45 - 1) = v48;
                      v45 -= 8;
                    }
                    while (v47 != v10);
                  }
                }
                v81 = &v35[8 * v34];
                if (v10)
                  operator delete(v10);
                v10 = v45;
                goto LABEL_57;
              }
              goto LABEL_42;
            }
          }
        }
        else
        {
          v5 = v6;
        }
        do
        {
          v44 = *--end;
          *--v28 = v44;
        }
        while (end != begin);
        goto LABEL_39;
      }
    }
    else
    {
      v27 = 0;
      v28 = (int *)(4 * v23);
      *(_DWORD *)(4 * v23) = v15;
      v29 = 4 * v23 + 4;
      if (end != begin)
        goto LABEL_21;
    }
    v5 = v6;
    goto LABEL_39;
  }
  v84 = 0;
LABEL_63:
  __pa = v10;
  v55 = *(_QWORD *)(v5 + 32);
  if (v55 >= 1)
    operations_research::sat::IntegerTrail::RelaxLinearReason((_QWORD *)v8[9], v55, (uint64_t)v10, (v84 - v10) >> 3, v88);
  v56 = (int *)v8[10];
  v57 = (int *)v8[11];
  while (v56 != v57)
  {
    v59 = operations_research::sat::IntegerTrail::FindTrailIndexOfVarBefore(v8[9], *v56, v89);
    v60 = v59;
    if ((v59 & 0x80000000) == 0)
    {
      v61 = v88;
      v63 = (char *)v88->__end_;
      v62 = v88->__end_cap_.__value_;
      if (v63 >= (char *)v62)
      {
        v64 = v88->__begin_;
        v65 = v63 - (char *)v88->__begin_;
        v66 = v65 >> 2;
        v67 = (v65 >> 2) + 1;
        if (v67 >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v68 = (char *)v62 - (char *)v64;
        if (v68 >> 1 > v67)
          v67 = v68 >> 1;
        if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL)
          v69 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v69 = v67;
        if (v69)
        {
          if (v69 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v70 = operator new(4 * v69);
          v71 = (int *)&v70[4 * v66];
          *v71 = v60;
          v58 = (uint64_t)(v71 + 1);
          if (v63 != (char *)v64)
          {
LABEL_81:
            v72 = v63 - 4 - (char *)v64;
            if (v72 < 0x2C)
            {
              v61 = v88;
              goto LABEL_89;
            }
            v61 = v88;
            if ((unint64_t)(v63 - &v70[v65]) < 0x20)
              goto LABEL_102;
            v73 = (v72 >> 2) + 1;
            v74 = 4 * (v73 & 0x7FFFFFFFFFFFFFF8);
            v75 = &v63[-v74];
            v71 = (int *)((char *)v71 - v74);
            v76 = &v70[4 * v66 - 16];
            v77 = v63 - 16;
            v78 = v73 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v79 = *(_OWORD *)v77;
              *(v76 - 1) = *((_OWORD *)v77 - 1);
              *v76 = v79;
              v76 -= 2;
              v77 -= 32;
              v78 -= 8;
            }
            while (v78);
            v63 = v75;
            if (v73 != (v73 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_102:
              do
              {
LABEL_89:
                v80 = *((_DWORD *)v63 - 1);
                v63 -= 4;
                *--v71 = v80;
              }
              while (v63 != (char *)v64);
            }
LABEL_90:
            v61->__begin_ = v71;
            v61->__end_ = (std::vector<int>::pointer)v58;
            v61->__end_cap_.__value_ = (int *)&v70[4 * v69];
            if (v64)
              operator delete(v64);
LABEL_67:
            v61->__end_ = (std::vector<int>::pointer)v58;
            v8 = v85;
            goto LABEL_68;
          }
        }
        else
        {
          v70 = 0;
          v71 = (int *)(4 * v66);
          *(_DWORD *)(4 * v66) = v60;
          v58 = 4 * v66 + 4;
          if (v63 != (char *)v64)
            goto LABEL_81;
        }
        v61 = v88;
        goto LABEL_90;
      }
      *(_DWORD *)v63 = v59;
      v58 = (uint64_t)(v63 + 4);
      goto LABEL_67;
    }
LABEL_68:
    v56 += 3;
  }
  if (__pa)
    operator delete(__pa);
}

void sub_22DB73D44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<operations_research::sat::LinMinPropagator::PropagateLinearUpperBound(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0,std::allocator<operations_research::sat::LinMinPropagator::PropagateLinearUpperBound(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0>,void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat16LinMinPropagator25PropagateLinearUpperBoundERKNSt3__16vectorIN3gtl7Int"
                     "TypeINS0_20IntegerVariable_tag_EiEENS2_9allocatorIS7_EEEERKNS3_INS5_INS0_17IntegerValue_tag_ExEENS8"
                     "_ISE_EEEESE_E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat16LinMinPropagator25PropagateLinearUpperBoundERKNSt3__16vecto"
                                "rIN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS2_9allocatorIS7_EEEERKNS3_INS5_INS0_17In"
                                "tegerValue_tag_ExEENS8_ISE_EEEESE_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat16LinMinPropagator25PropagateLinearUpperBoundERKNSt3__16vectorIN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS2_9allocatorIS7_EEEERKNS3_INS5_INS0_17IntegerValue_tag_ExEENS8_ISE_EEEESE_E3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat16LinMinPropagator25PropagateLinearUpperBoundERKNSt3__16vectorIN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS2_9allocatorIS7_EEEERKNS3_INS5_INS0_17IntegerValue_tag_ExEENS8_ISE_EEEESE_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::LinMinPropagator::PropagateLinearUpperBound(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0,std::allocator<operations_research::sat::LinMinPropagator::PropagateLinearUpperBound(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0>,void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::target_type()
{
}

unint64_t operations_research::sat::GreaterOrEqualToMiddleValue(int a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  _BYTE v13[12];
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *((_QWORD *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a2) + 5);
  v5 = *(_QWORD *)(v4 + 12 * a1);
  v16 = v5;
  v6 = -*(_QWORD *)(v4 + 12 * (a1 ^ 1));
  v15 = v6;
  if (v5 >= v6)
  {
    v14 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>((int)&v16, (int)&v15, "var_lb < var_ub");
    if (v14)
    {
      google::LogMessageFatal::LogMessageFatal((unint64_t *)v13, (google::glog_internal_namespace_ *)"./ortools/sat/integer_search.cc", 71, &v14);
      google::LogMessage::stream((google::LogMessage *)v13);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v13);
    }
    v6 = v15;
    v5 = v16;
  }
  v7 = v6 < v5;
  v8 = v6 - v5;
  if (v7)
    ++v8;
  v9 = v8 >> 1;
  if (v9 <= 1)
    v9 = 1;
  v10 = v9 + v5;
  v11 = (unsigned int *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a2);
  operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>(a2);
  *(_DWORD *)v13 = a1;
  *(_QWORD *)&v13[4] = v10;
  return operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(v11, *(const char **)v13, SHIDWORD(v10));
}

void sub_22DB73EF4(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::SplitAroundGivenValue(unsigned int a1, int64_t a2, uint64_t a3)
{
  uint64_t v6;
  int64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  BOOL v11;
  _BOOL4 v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v33;
  const char *v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int *v37;
  uint64_t v38;
  unint64_t v39;
  const char *v41;

  v6 = *((_QWORD *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a3) + 5);
  v7 = *(_QWORD *)(v6 + 12 * (int)a1);
  v8 = -*(_QWORD *)(v6 + 12 * (int)(a1 ^ 1));
  v9 = (_QWORD *)operations_research::sat::Model::GetOrCreate<operations_research::sat::ObjectiveDefinition>(a3);
  v10 = 0;
  v11 = v8 <= a2 || v7 > a2;
  v12 = v8 >= a2 && v7 < a2;
  v13 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (int)a1)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + (int)a1));
  v14 = v9[9];
  v15 = (v14 >> 12) ^ (v13 >> 7);
  v16 = 0x101010101010101 * (v13 & 0x7F);
  v17 = v9[12];
  while (1)
  {
    v18 = v15 & v17;
    v19 = *(_QWORD *)(v14 + v18);
    v20 = ((v19 ^ v16) - 0x101010101010101) & ~(v19 ^ v16) & 0x8080808080808080;
    if (v20)
      break;
LABEL_11:
    if ((v19 & (~v19 << 6) & 0x8080808080808080) != 0)
      goto LABEL_17;
    v10 += 8;
    v15 = v10 + v18;
  }
  while (1)
  {
    v21 = (v18 + (__clz(__rbit64(v20)) >> 3)) & v17;
    if (*(_DWORD *)(v9[10] + 4 * v21) == a1)
      break;
    v20 &= v20 - 1;
    if (!v20)
      goto LABEL_11;
  }
  v22 = v21 == v17 || v11;
  if ((v22 & 1) == 0)
  {
    v33 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a3);
    operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>(a3);
    v36 = 0x7FFFFFFFFFFFFFFFLL;
    if (a2 >= (uint64_t)0x8000000000000002)
      v36 = -a2;
    LODWORD(v41) = a1 ^ 1;
    HIDWORD(v41) = v36;
    v34 = v41;
    v35 = HIDWORD(v36);
LABEL_33:
    v37 = (unsigned int *)v33;
    return operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(v37, v34, v35);
  }
LABEL_17:
  v23 = 0;
  v24 = a1 ^ 1;
  v25 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v24)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + v24));
  v26 = (v14 >> 12) ^ (v25 >> 7);
  v27 = 0x101010101010101 * (v25 & 0x7F);
  while (1)
  {
    v28 = v26 & v17;
    v29 = *(_QWORD *)(v14 + v28);
    v30 = ((v29 ^ v27) - 0x101010101010101) & ~(v29 ^ v27) & 0x8080808080808080;
    if (v30)
      break;
LABEL_21:
    if ((v29 & (~v29 << 6) & 0x8080808080808080) != 0)
      goto LABEL_27;
    v23 += 8;
    v26 = v23 + v28;
  }
  while (1)
  {
    v31 = (v28 + (__clz(__rbit64(v30)) >> 3)) & v17;
    if (*(_DWORD *)(v9[10] + 4 * v31) == v24)
      break;
    v30 &= v30 - 1;
    if (!v30)
      goto LABEL_21;
  }
  if (v31 != v17 && v12)
  {
LABEL_29:
    v33 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a3);
    operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>(a3);
    v34 = (const char *)__PAIR64__(a2, a1);
    v35 = HIDWORD(a2);
    goto LABEL_33;
  }
LABEL_27:
  if (!v11)
  {
    v38 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a3);
    operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>(a3);
    v39 = 0x7FFFFFFFFFFFFFFFLL;
    if (a2 >= (uint64_t)0x8000000000000002)
      v39 = -a2;
    v34 = (const char *)__PAIR64__(v39, v24);
    v35 = HIDWORD(v39);
    v37 = (unsigned int *)v38;
    return operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(v37, v34, v35);
  }
  if (v12)
    goto LABEL_29;
  return 0xFFFFFFFFLL;
}

uint64_t operations_research::sat::SplitAroundLpValue(int a1, uint64_t a2)
{
  operations_research::sat::SatParameters *v4;
  uint64_t *v5;
  uint64_t v6;
  signed int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  double SolutionValue;

  v4 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>(a2);
  operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a2);
  v5 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::LinearProgrammingDispatcher>(a2);
  v6 = 0;
  v7 = a1 & 0xFFFFFFFE;
  v8 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v7)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + v7));
  v9 = *v5;
  v10 = v5[1];
  v11 = (v8 >> 7) ^ ((unint64_t)*v5 >> 12);
  v12 = v5[3];
  v13 = 0x101010101010101 * (v8 & 0x7F);
  while (1)
  {
    v14 = v11 & v12;
    v15 = *(_QWORD *)(v9 + v14);
    v16 = ((v15 ^ v13) - 0x101010101010101) & ~(v15 ^ v13) & 0x8080808080808080;
    if (v16)
      break;
LABEL_5:
    if ((v15 & (~v15 << 6) & 0x8080808080808080) != 0)
      return 0xFFFFFFFFLL;
    v6 += 8;
    v11 = v6 + v14;
  }
  while (1)
  {
    v17 = (v14 + (__clz(__rbit64(v16)) >> 3)) & v12;
    if (*(_DWORD *)(v10 + 16 * v17) == v7)
      break;
    v16 &= v16 - 1;
    if (!v16)
      goto LABEL_5;
  }
  if (v17 != v12)
  {
    v18 = *(_QWORD *)(v10 + 16 * v17 + 8);
    if (v18)
    {
      if (*(_BYTE *)(v18 + 20316) && (*((_BYTE *)v4 + 442) || *(_BYTE *)(v18 + 20317)))
      {
        v19 = a1 & 0xFFFFFFFE;
        SolutionValue = operations_research::sat::LinearProgrammingConstraint::GetSolutionValue(v18, v19);
        return operations_research::sat::SplitAroundGivenValue(v19, llround(SolutionValue), a2);
      }
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t operations_research::sat::SplitUsingBestSolutionValueInRepository(int a1, _QWORD *a2, uint64_t a3)
{
  absl::lts_2020_02_25::Mutex *v6;
  uint64_t v7;
  uint64_t v8;
  absl::lts_2020_02_25::Mutex *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  absl::lts_2020_02_25::Mutex *v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  BOOL v20;
  _QWORD *v21;
  signed int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int64_t v26;
  absl::lts_2020_02_25::Mutex *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v35[16];

  v6 = (absl::lts_2020_02_25::Mutex *)(a2 + 1);
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(a2 + 1), (absl::lts_2020_02_25::Mutex *)a2);
  v8 = a2[6];
  v7 = a2[7];
  absl::lts_2020_02_25::Mutex::Unlock(v6, v9, v10, v11, v12, v13, v14, v15);
  if (!(-858993459 * ((unint64_t)(v7 - v8) >> 3)))
    return 0xFFFFFFFFLL;
  v17 = a3 + 32;
  v18 = *(_QWORD **)(a3 + 32);
  do
  {
    v19 = v18[4];
    v20 = v19 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::CpModelMapping>(void)::d;
    if (v19 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::CpModelMapping>(void)::d)
      v21 = v18;
    else
      v21 = v18 + 1;
    if (v20)
      v17 = (uint64_t)v18;
    v18 = (_QWORD *)*v21;
  }
  while (*v21);
  v22 = a1 & 0xFFFFFFFE;
  v23 = *(_QWORD *)(*(_QWORD *)(v17 + 40) + 96);
  if (v22 >= (unint64_t)((*(_QWORD *)(*(_QWORD *)(v17 + 40) + 104) - v23) >> 2))
    return 0xFFFFFFFFLL;
  v24 = *(unsigned int *)(v23 + 4 * v22);
  if ((v24 & 0x80000000) != 0)
    return 0xFFFFFFFFLL;
  if (*operations_research::sat::SplitUsingBestSolutionValueInRepository(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::SharedSolutionRepository<long long> const&,operations_research::sat::Model *)::vlocal__[0] >= 2
    && (operations_research::sat::SplitUsingBestSolutionValueInRepository(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::SharedSolutionRepository<long long> const&,operations_research::sat::Model *)::vlocal__[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)operations_research::sat::SplitUsingBestSolutionValueInRepository(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::SharedSolutionRepository<long long> const&,operations_research::sat::Model *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/integer_search.cc", (const char *)2)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v35, (google::glog_internal_namespace_ *)"./ortools/sat/integer_search.cc", 151);
    v25 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Using solution value for branching.", 35);
    google::LogMessage::~LogMessage((google::LogMessage *)v35);
  }
  absl::lts_2020_02_25::Mutex::Lock(v6, v16);
  v26 = *(_QWORD *)(*(_QWORD *)(a2[6] + 8) + 8 * v24);
  absl::lts_2020_02_25::Mutex::Unlock(v6, v27, v28, v29, v30, v31, v32, v33);
  return operations_research::sat::SplitAroundGivenValue(v22, v26, a3);
}

void sub_22DB7449C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void operations_research::sat::FirstUnassignedVarAtItsMinHeuristic(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  operations_research::sat::IntegerTrail *v6;
  uint64_t v7;
  const void *v8;
  int64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;

  v6 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a2);
  v7 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a2);
  v8 = *(const void **)a1;
  v9 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (v9)
  {
    if (v9 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v10 = (char *)operator new(v9);
    v11 = &v10[4 * (v9 >> 2)];
    memcpy(v10, v8, v9);
  }
  else
  {
    v11 = 0;
    v10 = 0;
  }
  *(_QWORD *)&v16 = v6;
  *((_QWORD *)&v16 + 1) = v7;
  *(_QWORD *)(a3 + 24) = 0;
  v12 = operator new(0x30uLL);
  *v12 = &off_24F986750;
  v12[1] = 0;
  v12[2] = 0;
  v12[3] = 0;
  v13 = v11 - v10;
  if (v11 != v10)
  {
    if (v13 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v14 = (char *)operator new(v11 - v10);
    v12[1] = v14;
    v15 = &v14[4 * (v13 >> 2)];
    v12[3] = v15;
    memcpy(v14, v10, v11 - v10);
    v12[2] = v15;
  }
  *((_OWORD *)v12 + 2) = v16;
  *(_QWORD *)(a3 + 24) = v12;
  if (v10)
    operator delete(v10);
}

void sub_22DB74604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (v11)
    operator delete(v11);
  _Unwind_Resume(exception_object);
}

double operations_research::sat::SequentialSearch@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  double result;
  __int128 v5;
  uint64_t v6;

  v5 = 0uLL;
  v6 = 0;
  std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>(&v5, *a1, a1[1], (a1[1] - *a1) >> 5);
  *(_QWORD *)(a2 + 24) = 0;
  v3 = (char *)operator new(0x20uLL);
  *(_QWORD *)v3 = &off_24F9867D0;
  result = *(double *)&v5;
  *(_OWORD *)(v3 + 8) = v5;
  *((_QWORD *)v3 + 3) = v6;
  *(_QWORD *)(a2 + 24) = v3;
  return result;
}

void sub_22DB746BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  std::vector<std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>>::~vector[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *operations_research::sat::SequentialValueSelection@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  operations_research::sat::IntegerTrail *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *result;
  uint64_t v14;
  _QWORD v15[3];
  _QWORD *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v8 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a3);
  v9 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a3);
  v10 = (_QWORD *)a2[3];
  if (v10)
  {
    if (v10 == a2)
    {
      v16 = v15;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v15);
    }
    else
    {
      v16 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v10 + 16))(v10);
    }
  }
  else
  {
    v16 = 0;
  }
  *(_QWORD *)&v17 = v8;
  *((_QWORD *)&v17 + 1) = v9;
  v19 = 0;
  v18 = 0uLL;
  std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>*>(&v18, *a1, a1[1], (a1[1] - *a1) >> 5);
  *(_QWORD *)(a4 + 24) = 0;
  v11 = operator new(0x50uLL);
  v12 = v11;
  *v11 = &off_24F986850;
  if (v16)
  {
    if (v16 == v15)
    {
      v11[4] = v11 + 1;
      (*(void (**)(_QWORD *))(v15[0] + 24))(v15);
    }
    else
    {
      v11[4] = v16;
      v16 = 0;
    }
  }
  else
  {
    v11[4] = 0;
  }
  *(_OWORD *)(v12 + 5) = v17;
  *(_OWORD *)(v12 + 7) = v18;
  v12[9] = v19;
  v19 = 0;
  v18 = 0uLL;
  *(_QWORD *)(a4 + 24) = v12;
  result = v16;
  if (v16 == v15)
  {
    v14 = 4;
    result = v15;
  }
  else
  {
    if (!v16)
      return result;
    v14 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v14))();
}

void sub_22DB7487C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0::~$_0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v2 = a1[6];
  if (v2)
  {
    v3 = a1[7];
    v4 = (void *)a1[6];
    if (v3 == v2)
    {
LABEL_11:
      a1[7] = v2;
      operator delete(v4);
      goto LABEL_12;
    }
    while (1)
    {
      v7 = v3 - 32;
      v5 = *(_QWORD **)(v3 - 8);
      if ((_QWORD *)(v3 - 32) == v5)
      {
        v5 = (_QWORD *)(v3 - 32);
        v6 = 4;
      }
      else
      {
        if (!v5)
          goto LABEL_6;
        v6 = 5;
      }
      (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
      v3 = v7;
      if (v7 == v2)
      {
        v4 = (void *)a1[6];
        goto LABEL_11;
      }
    }
  }
LABEL_12:
  v8 = (_QWORD *)a1[3];
  if (v8 == a1)
  {
    v9 = 4;
    v8 = a1;
    goto LABEL_16;
  }
  if (v8)
  {
    v9 = 5;
LABEL_16:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return a1;
}

unint64_t operations_research::sat::ChooseBestObjectiveValue(int a1, uint64_t a2)
{
  _QWORD *v4;
  unsigned int *v5;
  operations_research::sat::IntegerTrail *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  const char *v32;

  v4 = (_QWORD *)operations_research::sat::Model::GetOrCreate<operations_research::sat::ObjectiveDefinition>(a2);
  v5 = (unsigned int *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a2);
  v6 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a2);
  v7 = 0;
  v8 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + a1)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + a1));
  v9 = v4[9];
  v10 = (v9 >> 12) ^ (v8 >> 7);
  v11 = 0x101010101010101 * (v8 & 0x7F);
  v12 = v4[12];
  while (1)
  {
    v13 = v10 & v12;
    v14 = *(_QWORD *)(v9 + v13);
    v15 = ((v14 ^ v11) - 0x101010101010101) & ~(v14 ^ v11) & 0x8080808080808080;
    if (v15)
      break;
LABEL_5:
    if ((v14 & (~v14 << 6) & 0x8080808080808080) != 0)
      goto LABEL_8;
    v7 += 8;
    v10 = v7 + v13;
  }
  while (1)
  {
    v16 = (v13 + (__clz(__rbit64(v15)) >> 3)) & v12;
    if (*(_DWORD *)(v4[10] + 4 * v16) == a1)
      break;
    v15 &= v15 - 1;
    if (!v15)
      goto LABEL_5;
  }
  if (v16 != v12)
  {
    v29 = *((_QWORD *)v6 + 5);
    v30 = *(_QWORD *)(v29 + 12 * a1);
    if (v30 + *(_QWORD *)(v29 + 12 * (a1 ^ 1)))
    {
      if (v30 >= (uint64_t)0x8000000000000002)
        v28 = -v30;
      else
        v28 = 0x7FFFFFFFFFFFFFFFLL;
      LODWORD(v32) = a1 ^ 1;
      goto LABEL_26;
    }
    return 0xFFFFFFFFLL;
  }
LABEL_8:
  v17 = 0;
  v18 = a1 ^ 1;
  v19 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v18)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + v18));
  v20 = (v9 >> 12) ^ (v19 >> 7);
  v21 = 0x101010101010101 * (v19 & 0x7F);
  while (1)
  {
    v22 = v20 & v12;
    v23 = *(_QWORD *)(v9 + v22);
    v24 = ((v23 ^ v21) - 0x101010101010101) & ~(v23 ^ v21) & 0x8080808080808080;
    if (v24)
      break;
LABEL_12:
    if ((v23 & (~v23 << 6) & 0x8080808080808080) != 0)
      return 0xFFFFFFFFLL;
    v17 += 8;
    v20 = v17 + v22;
  }
  while (1)
  {
    v25 = (v22 + (__clz(__rbit64(v24)) >> 3)) & v12;
    if (*(_DWORD *)(v4[10] + 4 * v25) == (_DWORD)v18)
      break;
    v24 &= v24 - 1;
    if (!v24)
      goto LABEL_12;
  }
  if (v25 == v12)
    return 0xFFFFFFFFLL;
  v26 = *((_QWORD *)v6 + 5);
  v27 = *(_QWORD *)(v26 + 12 * (int)v18);
  if (!(v27 + *(_QWORD *)(v26 + 12 * a1)))
    return 0xFFFFFFFFLL;
  if (v27 >= (uint64_t)0x8000000000000002)
    v28 = -v27;
  else
    v28 = 0x7FFFFFFFFFFFFFFFLL;
  LODWORD(v32) = a1;
LABEL_26:
  HIDWORD(v32) = v28;
  return operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(v5, v32, SHIDWORD(v28));
}

void operations_research::sat::IntegerValueSelectionHeuristic(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  operations_research::sat::SatParameters *v6;
  char **v7;
  char *v8;
  char *v9;
  unint64_t v10;
  int v11;
  char *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  operations_research::sat::IntegerTrail *v20;
  _QWORD *v21;
  uint64_t (***v22)();
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  BOOL v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t (***v33)();
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  BOOL v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t (***v43)();
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t (***v48)();
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  char *v53;
  _QWORD *v54;
  void *v55;
  _QWORD *v56;
  uint64_t v57;
  char *v58;
  _QWORD *v59;
  _QWORD *v60;
  void *v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  void *__p;
  _QWORD *v66;
  uint64_t v67;
  void *v68;
  _QWORD *v69;
  unint64_t v70;
  _QWORD v71[3];
  _QWORD *v72;
  uint64_t (**v73)();
  uint64_t v74;
  uint64_t v75;
  uint64_t (***v76)();
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  v6 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>(a2);
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v7 = (char **)operations_research::sat::Model::GetOrCreate<operations_research::sat::LinearProgrammingConstraintCollection>(a2);
  v9 = *v7;
  v8 = v7[1];
  if (*v7 != v8)
  {
    v10 = v8 - v9 - 8;
    if (v10 >= 8)
    {
      v14 = 0;
      v15 = 0;
      v16 = (v10 >> 3) + 1;
      v12 = &v9[8 * (v16 & 0x3FFFFFFFFFFFFFFELL)];
      v17 = v9 + 8;
      v18 = v16 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        v14 += (*(_QWORD *)(*(v17 - 1) + 19928) - *(_QWORD *)(*(v17 - 1) + 19920)) >> 2;
        v15 += (*(_QWORD *)(*v17 + 19928) - *(_QWORD *)(*v17 + 19920)) >> 2;
        v17 += 2;
        v18 -= 2;
      }
      while (v18);
      v11 = v15 + v14;
      if (v16 == (v16 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_9;
    }
    else
    {
      v11 = 0;
      v12 = *v7;
    }
    do
    {
      v19 = *(_QWORD *)v12;
      v12 += 8;
      v11 += (*(_QWORD *)(v19 + 19928) - *(_QWORD *)(v19 + 19920)) >> 2;
    }
    while (v12 != v8);
LABEL_9:
    v13 = 2 * v11;
    goto LABEL_10;
  }
  v13 = 0;
LABEL_10:
  v20 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a2);
  if (v13 < (int)(-1431655765 * ((*((_QWORD *)v20 + 6) - *((_QWORD *)v20 + 5)) >> 2)) / 2
    || !*((_BYTE *)v6 + 441) && !*((_BYTE *)v6 + 442))
  {
    goto LABEL_22;
  }
  if (*_MergedGlobals_12[0] >= 1
    && (_MergedGlobals_12[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)_MergedGlobals_12, (int **)&fLI::FLAGS_v, "./ortools/sat/integer_search.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)&v73, (google::glog_internal_namespace_ *)"./ortools/sat/integer_search.cc", 267);
    v21 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v73);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Using LP value selection heuristic.", 35);
    google::LogMessage::~LogMessage((google::LogMessage *)&v73);
  }
  v73 = &off_24F9868D0;
  v74 = a2;
  v76 = &v73;
  v69 = (_QWORD *)std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>::__push_back_slow_path<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>((uint64_t *)&v68, &v73);
  v22 = v76;
  if (v76 == &v73)
  {
    v23 = 4;
    v22 = &v73;
  }
  else
  {
    if (!v76)
      goto LABEL_22;
    v23 = 5;
  }
  (*v22)[v23]();
LABEL_22:
  if (*((_BYTE *)v6 + 145))
  {
    v24 = *(_QWORD **)(a2 + 32);
    if (v24)
    {
      v25 = a2 + 32;
      do
      {
        v26 = v24[4];
        v27 = v26 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedResponseManager>(void)::d;
        if (v26 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedResponseManager>(void)::d)
          v28 = v24;
        else
          v28 = v24 + 1;
        if (v27)
          v25 = (uint64_t)v24;
        v24 = (_QWORD *)*v28;
      }
      while (*v28);
      if (v25 != a2 + 32
        && *(_QWORD *)(v25 + 32) <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedResponseManager>(void)::d)
      {
        v29 = *(_QWORD *)(v25 + 40);
        if (v29)
        {
          if (*off_2540795B8[0] >= 1
            && (off_2540795B8[0] != &google::kLogSiteUninitialized
             || google::InitVLOG3__((google *)off_2540795B8, (int **)&fLI::FLAGS_v, "./ortools/sat/integer_search.cc", (const char *)1)))
          {
            google::LogMessage::LogMessage((google::LogMessage *)&v73, (google::glog_internal_namespace_ *)"./ortools/sat/integer_search.cc", 277);
            v30 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v73);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Using best solution value selection heuristic.", 46);
            google::LogMessage::~LogMessage((google::LogMessage *)&v73);
          }
          v73 = &off_24F986960;
          v74 = a2;
          v75 = v29;
          v76 = &v73;
          v31 = v69;
          if ((unint64_t)v69 >= v70)
          {
            v32 = (_QWORD *)std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>::__push_back_slow_path<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>((uint64_t *)&v68, &v73);
          }
          else
          {
            v69[3] = v69;
            ((void (*)(uint64_t (***)(), _QWORD *))(*v76)[3])(v76, v31);
            v32 = v31 + 4;
          }
          v69 = v32;
          v33 = v76;
          if (v76 == &v73)
          {
            v34 = 4;
            v33 = &v73;
          }
          else
          {
            if (!v76)
              goto LABEL_47;
            v34 = 5;
          }
          (*v33)[v34]();
        }
      }
    }
  }
LABEL_47:
  if (*((_BYTE *)v6 + 146))
  {
    v35 = *(_QWORD **)(a2 + 32);
    if (v35)
    {
      v36 = a2 + 32;
      do
      {
        v37 = v35[4];
        v38 = v37 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedRelaxationSolutionRepository>(void)::d;
        if (v37 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedRelaxationSolutionRepository>(void)::d)
          v39 = v35;
        else
          v39 = v35 + 1;
        if (v38)
          v36 = (uint64_t)v35;
        v35 = (_QWORD *)*v39;
      }
      while (*v39);
      if (v36 != a2 + 32
        && *(_QWORD *)(v36 + 32) <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedRelaxationSolutionRepository>(void)::d)
      {
        v40 = *(_QWORD *)(v36 + 40);
        if (v40)
        {
          v73 = &off_24F9869E0;
          v74 = a2;
          v75 = v40;
          v76 = &v73;
          v41 = v69;
          if ((unint64_t)v69 >= v70)
          {
            v42 = (_QWORD *)std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>::__push_back_slow_path<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>((uint64_t *)&v68, &v73);
          }
          else
          {
            v69[3] = v69;
            ((void (*)(uint64_t (***)(), _QWORD *))(*v76)[3])(v76, v41);
            v42 = v41 + 4;
          }
          v69 = v42;
          v43 = v76;
          if (v76 == &v73)
          {
            v44 = 4;
            v43 = &v73;
          }
          else
          {
            if (!v76)
              goto LABEL_68;
            v44 = 5;
          }
          (*v43)[v44]();
        }
      }
    }
  }
LABEL_68:
  if (!*((_BYTE *)v6 + 443))
    goto LABEL_81;
  if (*off_2540795C0[0] >= 1
    && (off_2540795C0[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_2540795C0, (int **)&fLI::FLAGS_v, "./ortools/sat/integer_search.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)&v73, (google::glog_internal_namespace_ *)"./ortools/sat/integer_search.cc", 302);
    v45 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v73);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Using objective value selection heuristic.", 42);
    google::LogMessage::~LogMessage((google::LogMessage *)&v73);
  }
  v73 = &off_24F986A60;
  v74 = a2;
  v76 = &v73;
  v46 = v69;
  if ((unint64_t)v69 >= v70)
  {
    v47 = (_QWORD *)std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>::__push_back_slow_path<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>((uint64_t *)&v68, &v73);
  }
  else
  {
    v69[3] = v69;
    ((void (*)(uint64_t (***)(), _QWORD *))(*v76)[3])(v76, v46);
    v47 = v46 + 4;
  }
  v69 = v47;
  v48 = v76;
  if (v76 == &v73)
  {
    v49 = 4;
    v48 = &v73;
  }
  else
  {
    if (!v76)
      goto LABEL_81;
    v49 = 5;
  }
  (*v48)[v49]();
LABEL_81:
  __p = 0;
  v66 = 0;
  v67 = 0;
  std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>*>(&__p, (uint64_t)v68, (uint64_t)v69, ((char *)v69 - (_BYTE *)v68) >> 5);
  v50 = a1[3];
  if (!v50)
  {
LABEL_84:
    v72 = (_QWORD *)v50;
    goto LABEL_86;
  }
  if ((_QWORD *)v50 != a1)
  {
    v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 16))(v50);
    goto LABEL_84;
  }
  v72 = v71;
  (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v71);
LABEL_86:
  operations_research::sat::SequentialValueSelection((uint64_t *)&__p, v71, a2, a3);
  v51 = v72;
  if (v72 == v71)
  {
    v52 = 4;
    v51 = v71;
  }
  else
  {
    if (!v72)
      goto LABEL_91;
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_91:
  v53 = (char *)__p;
  if (!__p)
    goto LABEL_102;
  v54 = v66;
  v55 = __p;
  if (v66 != __p)
  {
    while (1)
    {
      v58 = (char *)(v54 - 4);
      v56 = (_QWORD *)*(v54 - 1);
      if (v54 - 4 == v56)
      {
        v56 = v54 - 4;
        v57 = 4;
      }
      else
      {
        if (!v56)
          goto LABEL_96;
        v57 = 5;
      }
      (*(void (**)(void))(*v56 + 8 * v57))();
LABEL_96:
      v54 = v58;
      if (v58 == v53)
      {
        v55 = __p;
        break;
      }
    }
  }
  v66 = v53;
  operator delete(v55);
LABEL_102:
  v59 = v68;
  if (!v68)
    return;
  v60 = v69;
  v61 = v68;
  if (v69 != v68)
  {
    while (1)
    {
      v64 = v60 - 4;
      v62 = (_QWORD *)*(v60 - 1);
      if (v60 - 4 == v62)
      {
        v62 = v60 - 4;
        v63 = 4;
      }
      else
      {
        if (!v62)
          goto LABEL_107;
        v63 = 5;
      }
      (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_107:
      v60 = v64;
      if (v64 == v59)
      {
        v61 = v68;
        break;
      }
    }
  }
  v69 = v59;
  operator delete(v61);
}

void sub_22DB7532C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::vector<std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

operations_research::sat::SatDecisionPolicy *operations_research::sat::Model::GetOrCreate<operations_research::sat::SatDecisionPolicy>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  operations_research::sat::SatDecisionPolicy *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v19;

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 32);
  if (!v2)
    goto LABEL_12;
  v4 = (_QWORD *)(a1 + 32);
  do
  {
    v5 = v2[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatDecisionPolicy>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatDecisionPolicy>(void)::d)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 != v3 && v4[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatDecisionPolicy>(void)::d)
    return (operations_research::sat::SatDecisionPolicy *)v4[5];
LABEL_12:
  v8 = (operations_research::sat::SatDecisionPolicy *)operator new();
  operations_research::sat::SatDecisionPolicy::SatDecisionPolicy(v8, (operations_research::sat::Model *)a1);
  v9 = (_QWORD *)*v3;
  v10 = v3;
  if (*v3)
  {
    while (1)
    {
      while (1)
      {
        v10 = v9;
        v11 = v9[4];
        if (v11 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatDecisionPolicy>(void)::d)
          break;
        v9 = (_QWORD *)*v10;
        v3 = v10;
        if (!*v10)
          goto LABEL_19;
      }
      if (v11 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatDecisionPolicy>(void)::d)
        break;
      v9 = (_QWORD *)v10[1];
      if (!v9)
      {
        v3 = v10 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v12 = v10;
    v10 = operator new(0x30uLL);
    v10[4] = &gtl::FastTypeId<operations_research::sat::SatDecisionPolicy>(void)::d;
    v10[5] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v12;
    *v3 = v10;
    v13 = **(_QWORD **)(a1 + 24);
    v14 = v10;
    if (v13)
    {
      *(_QWORD *)(a1 + 24) = v13;
      v14 = (uint64_t *)*v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v14);
    ++*(_QWORD *)(a1 + 40);
  }
  v10[5] = v8;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24F986AE0;
  v15[1] = v8;
  v19 = v15;
  v16 = *(_QWORD **)(a1 + 56);
  if ((unint64_t)v16 >= *(_QWORD *)(a1 + 64))
  {
    v17 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a1 + 48), &v19);
  }
  else
  {
    *v16 = v15;
    v17 = (char *)(v16 + 1);
  }
  *(_QWORD *)(a1 + 56) = v17;
  return v8;
}

void sub_22DB755C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x10F0C40550D4C41);
  _Unwind_Resume(a1);
}

operations_research::sat::PseudoCosts *operations_research::sat::Model::GetOrCreate<operations_research::sat::PseudoCosts>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  operations_research::sat::PseudoCosts *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v19;

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 32);
  if (!v2)
    goto LABEL_12;
  v4 = (_QWORD *)(a1 + 32);
  do
  {
    v5 = v2[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::PseudoCosts>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::PseudoCosts>(void)::d)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 != v3 && v4[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::PseudoCosts>(void)::d)
    return (operations_research::sat::PseudoCosts *)v4[5];
LABEL_12:
  v8 = (operations_research::sat::PseudoCosts *)operator new();
  operations_research::sat::PseudoCosts::PseudoCosts(v8, (operations_research::sat::Model *)a1);
  v9 = (_QWORD *)*v3;
  v10 = v3;
  if (*v3)
  {
    while (1)
    {
      while (1)
      {
        v10 = v9;
        v11 = v9[4];
        if (v11 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::PseudoCosts>(void)::d)
          break;
        v9 = (_QWORD *)*v10;
        v3 = v10;
        if (!*v10)
          goto LABEL_19;
      }
      if (v11 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::PseudoCosts>(void)::d)
        break;
      v9 = (_QWORD *)v10[1];
      if (!v9)
      {
        v3 = v10 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v12 = v10;
    v10 = operator new(0x30uLL);
    v10[4] = &gtl::FastTypeId<operations_research::sat::PseudoCosts>(void)::d;
    v10[5] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v12;
    *v3 = v10;
    v13 = **(_QWORD **)(a1 + 24);
    v14 = v10;
    if (v13)
    {
      *(_QWORD *)(a1 + 24) = v13;
      v14 = (uint64_t *)*v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v14);
    ++*(_QWORD *)(a1 + 40);
  }
  v10[5] = v8;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24F986C18;
  v15[1] = v8;
  v19 = v15;
  v16 = *(_QWORD **)(a1 + 56);
  if ((unint64_t)v16 >= *(_QWORD *)(a1 + 64))
  {
    v17 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a1 + 48), &v19);
  }
  else
  {
    *v16 = v15;
    v17 = (char *)(v16 + 1);
  }
  *(_QWORD *)(a1 + 56) = v17;
  return v8;
}

void sub_22DB75770(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x1060C405E3B83C8);
  _Unwind_Resume(a1);
}

_QWORD *operations_research::sat::RandomizeOnRestartHeuristic@<X0>(operations_research::sat *this@<X0>, uint64_t a2@<X8>)
{
  operations_research::sat::SatDecisionPolicy *v5;
  operations_research::sat::SatSolver *v6;
  uint64_t v7;
  operations_research::sat::SatDecisionPolicy *v8;
  _QWORD *v9;
  char *v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t (***v23)();
  uint64_t v24;
  char *v25;
  char *v26;
  void *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t (***v32)();
  uint64_t v33;
  double *v34;
  void *v35;
  uint64_t (***v36)();
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  _QWORD *v44;
  char *v45;
  _QWORD *v46;
  unint64_t v47;
  BOOL v48;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  void *v52;
  uint64_t (***v53)();
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  int64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  int v73;
  char *v74;
  unint64_t v75;
  BOOL v76;
  _QWORD *v77;
  uint64_t v78;
  char *v79;
  void *v80;
  uint64_t (***v81)();
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  int64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  __int128 v100;
  int v101;
  char *v102;
  void *v103;
  uint64_t (***v104)();
  uint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  int64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  char *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  uint64_t v122;
  __int128 v123;
  int v124;
  operations_research::sat::IntegerTrail *v125;
  uint64_t v126;
  char *v127;
  void *v128;
  uint64_t (***v129)();
  uint64_t v130;
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  int64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char *v140;
  char *v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  char *v147;
  uint64_t v148;
  __int128 v149;
  int v150;
  int *v151;
  char *v152;
  int64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  _BYTE *v158;
  int *v159;
  char *v160;
  unint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  _OWORD *v165;
  __int128 *v166;
  uint64_t v167;
  __int128 v168;
  int v169;
  uint64_t (**v170)();
  int64_t v171;
  uint64_t (**v172)();
  int64_t v173;
  char *v174;
  char *v175;
  _QWORD *v176;
  void *v177;
  _QWORD *v178;
  uint64_t v179;
  char *v180;
  char *v181;
  char *v182;
  void *v183;
  char *v184;
  uint64_t v185;
  char *v186;
  _QWORD *result;
  uint64_t v188;
  operations_research::sat::SatSolver *v189;
  _BYTE v190[28];
  __int128 v191;
  uint64_t v192;
  __int128 v193;
  uint64_t v194;
  __int128 v195;
  uint64_t v196;
  __int128 v197;
  uint64_t v198;
  __int128 v199;
  void *v200;
  char *v201;
  char *v202;
  void *__p;
  char *v204;
  void *v205;
  char *v206;
  void *v207[2];
  void *v208;
  uint64_t (**v209)();
  double *v210;
  operations_research::sat *v211;
  double **v212;
  _BYTE v213[24];
  _BYTE *v214;
  uint64_t (**v215)();
  operations_research::sat *v216;
  uint64_t v217;
  void **v218;
  _BYTE v219[24];
  _BYTE *v220;
  _QWORD v221[3];
  _QWORD *v222;
  uint64_t v223;

  v223 = *MEMORY[0x24BDAC8D0];
  v189 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)this);
  v5 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatDecisionPolicy>((uint64_t)this);
  v6 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)this);
  v7 = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)this);
  v8 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatDecisionPolicy>((uint64_t)this);
  v9 = operator new(0x20uLL);
  *v9 = &off_24F986B18;
  v9[1] = v6;
  v9[2] = v7;
  v9[3] = v8;
  v222 = v9;
  v10 = (char *)operator new(0x20uLL);
  *(_QWORD *)v10 = &off_24F986B18;
  *(_OWORD *)(v10 + 8) = *(_OWORD *)(v9 + 1);
  *((_QWORD *)v10 + 3) = v9[3];
  v218 = (void **)v10;
  v12 = (char *)this + 32;
  v11 = (_QWORD *)*((_QWORD *)this + 4);
  if (!v11)
    goto LABEL_17;
  v13 = (char *)this + 32;
  do
  {
    v14 = v11[4];
    v15 = v14 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::ObjectiveDefinition>(void)::d;
    if (v14 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::ObjectiveDefinition>(void)::d)
      v16 = v11;
    else
      v16 = v11 + 1;
    if (v15)
      v13 = (char *)v11;
    v11 = (_QWORD *)*v16;
  }
  while (*v16);
  if (v13 == v12
    || *((_QWORD *)v13 + 4) > (unint64_t)&gtl::FastTypeId<operations_research::sat::ObjectiveDefinition>(void)::d
    || (v17 = *((_QWORD *)v13 + 5)) == 0
    || *(_DWORD *)(v17 + 16) == -1)
  {
LABEL_17:
    v209 = &off_24F986B98;
    v212 = (double **)&v209;
    v18 = v213;
  }
  else
  {
    v209 = &off_24F986C50;
    v210 = (double *)operations_research::sat::Model::GetOrCreate<operations_research::sat::PseudoCosts>((uint64_t)this);
    v9 = v222;
    v211 = this;
    v212 = (double **)&v209;
    v18 = v213;
    if (!v222)
    {
      v19 = 0;
      goto LABEL_19;
    }
    if (v222 == v221)
    {
      v214 = v213;
      (*(void (**)(_QWORD *, _BYTE *))(v221[0] + 24))(v221, v213);
      goto LABEL_20;
    }
  }
  v19 = (*(uint64_t (**)(_QWORD *))(*v9 + 16))(v9);
LABEL_19:
  v214 = (_BYTE *)v19;
LABEL_20:
  std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::vector[abi:ne180100](&__p, (uint64_t)&v209, 2uLL);
  v207[0] = 0;
  v207[1] = 0;
  v208 = 0;
  std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>(v207, (uint64_t)__p, (uint64_t)v204, (v204 - (_BYTE *)__p) >> 5);
  v220 = 0;
  v20 = (char *)operator new(0x20uLL);
  *(_QWORD *)v20 = &off_24F9867D0;
  *(_OWORD *)(v20 + 8) = *(_OWORD *)v207;
  *((_QWORD *)v20 + 3) = v208;
  v220 = v20;
  std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::vector[abi:ne180100](&v205, (uint64_t)&v215, 2uLL);
  v21 = v220;
  if (v220 == v219)
  {
    v22 = 4;
    v21 = v219;
  }
  else
  {
    if (!v220)
      goto LABEL_25;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_25:
  v23 = (uint64_t (***)())v218;
  if (v218 == (void **)&v215)
  {
    v24 = 4;
    v23 = &v215;
  }
  else
  {
    if (!v218)
      goto LABEL_30;
    v24 = 5;
  }
  (*v23)[v24]();
LABEL_30:
  v25 = (char *)__p;
  if (!__p)
    goto LABEL_41;
  v26 = v204;
  v27 = __p;
  if (v204 != __p)
  {
    while (1)
    {
      v30 = v26 - 32;
      v28 = (char *)*((_QWORD *)v26 - 1);
      if (v26 - 32 == v28)
      {
        v28 = v26 - 32;
        v29 = 4;
      }
      else
      {
        if (!v28)
          goto LABEL_35;
        v29 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_35:
      v26 = v30;
      if (v30 == v25)
      {
        v27 = __p;
        break;
      }
    }
  }
  v204 = v25;
  operator delete(v27);
LABEL_41:
  if (v214 == v213)
  {
    v31 = 4;
  }
  else
  {
    if (!v214)
      goto LABEL_46;
    v31 = 5;
    v18 = v214;
  }
  (*(void (**)(_QWORD *))(*v18 + 8 * v31))(v18);
LABEL_46:
  v32 = (uint64_t (***)())v212;
  if (v212 == (double **)&v209)
  {
    v33 = 4;
    v32 = &v209;
  }
  else
  {
    if (!v212)
      goto LABEL_51;
    v33 = 5;
  }
  (*v32)[v33]();
LABEL_51:
  v34 = (double *)operator new(0x10uLL);
  v209 = (uint64_t (**)())v34;
  *(_OWORD *)v34 = xmmword_22DCF35D0;
  v210 = v34 + 2;
  v211 = (operations_research::sat *)(v34 + 2);
  std::discrete_distribution<int>::param_type::__init((double **)&v209);
  v207[0] = 0;
  v207[1] = 0;
  v208 = 0;
  v200 = 0;
  v201 = 0;
  v202 = 0;
  v215 = &off_24F986CD0;
  v216 = this;
  v218 = (void **)&v215;
  v35 = (void *)std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>::__push_back_slow_path<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>((uint64_t *)v207, &v215);
  v36 = (uint64_t (***)())v218;
  v207[1] = v35;
  if (v218 == (void **)&v215)
  {
    v37 = 4;
    v36 = &v215;
  }
  else
  {
    if (!v218)
      goto LABEL_56;
    v37 = 5;
  }
  (*v36)[v37]();
LABEL_56:
  v38 = (v201 - (_BYTE *)v200) >> 2;
  v39 = v38 + 1;
  if ((unint64_t)(v38 + 1) >> 62)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v40 = v202 - (_BYTE *)v200;
  if ((v202 - (_BYTE *)v200) >> 1 > v39)
    v39 = v40 >> 1;
  if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
    v41 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v41 = v39;
  if (v41)
  {
    if (v41 >> 62)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v42 = (char *)operator new(4 * v41);
  }
  else
  {
    v42 = 0;
  }
  v43 = &v42[4 * v38];
  *(_DWORD *)v43 = 8;
  v200 = v43;
  v202 = &v42[4 * v41];
  v201 = v43 + 4;
  v44 = *(_QWORD **)v12;
  if (!*(_QWORD *)v12)
    goto LABEL_151;
  v45 = (char *)this + 32;
  v46 = *(_QWORD **)v12;
  do
  {
    v47 = v46[4];
    v48 = v47 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedResponseManager>(void)::d;
    if (v47 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedResponseManager>(void)::d)
      v49 = v46;
    else
      v49 = v46 + 1;
    if (v48)
      v45 = (char *)v46;
    v46 = (_QWORD *)*v49;
  }
  while (*v49);
  if (v45 != v12
    && *((_QWORD *)v45 + 4) <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedResponseManager>(void)::d)
  {
    v50 = *((_QWORD *)v45 + 5);
    if (v50)
    {
      v215 = &off_24F986D50;
      v216 = this;
      v217 = v50;
      v218 = (void **)&v215;
      v51 = (char *)v207[1];
      if (v207[1] >= v208)
      {
        v52 = (void *)std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>::__push_back_slow_path<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>((uint64_t *)v207, &v215);
      }
      else
      {
        *((void **)v207[1] + 3) = v207[1];
        (*((void (**)(void **, char *))*v218 + 3))(v218, v51);
        v52 = v51 + 32;
      }
      v207[1] = v52;
      v53 = (uint64_t (***)())v218;
      if (v218 == (void **)&v215)
      {
        v54 = 4;
        v53 = &v215;
      }
      else
      {
        if (!v218)
        {
LABEL_86:
          v55 = v201;
          if (v201 >= v202)
          {
            v57 = (char *)v200;
            v58 = v201 - (_BYTE *)v200;
            v59 = (v201 - (_BYTE *)v200) >> 2;
            v60 = v59 + 1;
            if ((unint64_t)(v59 + 1) >> 62)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v61 = v202 - (_BYTE *)v200;
            if ((v202 - (_BYTE *)v200) >> 1 > v60)
              v60 = v61 >> 1;
            if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
              v62 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v62 = v60;
            if (v62)
            {
              if (v62 >> 62)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v63 = (char *)operator new(4 * v62);
            }
            else
            {
              v63 = 0;
            }
            v64 = &v63[4 * v59];
            *(_DWORD *)v64 = 5;
            v56 = v64 + 4;
            if (v55 != v57)
            {
              v65 = v55 - v57 - 4;
              if (v65 < 0x2C)
                goto LABEL_288;
              if ((unint64_t)(v55 - v63 - v58) < 0x20)
                goto LABEL_288;
              v66 = (v65 >> 2) + 1;
              v67 = 4 * (v66 & 0x7FFFFFFFFFFFFFF8);
              v68 = &v55[-v67];
              v64 -= v67;
              v69 = &v63[4 * v59 - 16];
              v70 = v55 - 16;
              v71 = v66 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v72 = *(_OWORD *)v70;
                *((_OWORD *)v69 - 1) = *((_OWORD *)v70 - 1);
                *(_OWORD *)v69 = v72;
                v69 -= 32;
                v70 -= 32;
                v71 -= 8;
              }
              while (v71);
              v55 = v68;
              if (v66 != (v66 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_288:
                do
                {
                  v73 = *((_DWORD *)v55 - 1);
                  v55 -= 4;
                  *((_DWORD *)v64 - 1) = v73;
                  v64 -= 4;
                }
                while (v55 != v57);
              }
            }
            v200 = v64;
            v201 = v56;
            v202 = &v63[4 * v62];
            if (v57)
              operator delete(v57);
          }
          else
          {
            *(_DWORD *)v201 = 5;
            v56 = v55 + 4;
          }
          v201 = v56;
          v44 = *(_QWORD **)v12;
          goto LABEL_109;
        }
        v54 = 5;
      }
      (*v53)[v54]();
      goto LABEL_86;
    }
  }
LABEL_109:
  if (v44)
  {
    v74 = (char *)this + 32;
    do
    {
      v75 = v44[4];
      v76 = v75 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedRelaxationSolutionRepository>(void)::d;
      if (v75 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedRelaxationSolutionRepository>(void)::d)
        v77 = v44;
      else
        v77 = v44 + 1;
      if (v76)
        v74 = (char *)v44;
      v44 = (_QWORD *)*v77;
    }
    while (*v77);
    if (v74 != v12
      && *((_QWORD *)v74 + 4) <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedRelaxationSolutionRepository>(void)::d)
    {
      v78 = *((_QWORD *)v74 + 5);
      if (v78)
      {
        v215 = &off_24F986DD0;
        v216 = this;
        v217 = v78;
        v218 = (void **)&v215;
        v79 = (char *)v207[1];
        if (v207[1] >= v208)
        {
          v80 = (void *)std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>::__push_back_slow_path<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>((uint64_t *)v207, &v215);
        }
        else
        {
          *((void **)v207[1] + 3) = v207[1];
          (*((void (**)(void **, char *))*v218 + 3))(v218, v79);
          v80 = v79 + 32;
        }
        v207[1] = v80;
        v81 = (uint64_t (***)())v218;
        if (v218 == (void **)&v215)
        {
          v82 = 4;
          v81 = &v215;
        }
        else
        {
          if (!v218)
          {
LABEL_129:
            v83 = v201;
            if (v201 >= v202)
            {
              v85 = (char *)v200;
              v86 = v201 - (_BYTE *)v200;
              v87 = (v201 - (_BYTE *)v200) >> 2;
              v88 = v87 + 1;
              if ((unint64_t)(v87 + 1) >> 62)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v89 = v202 - (_BYTE *)v200;
              if ((v202 - (_BYTE *)v200) >> 1 > v88)
                v88 = v89 >> 1;
              if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL)
                v90 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v90 = v88;
              if (v90)
              {
                if (v90 >> 62)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v91 = (char *)operator new(4 * v90);
              }
              else
              {
                v91 = 0;
              }
              v92 = &v91[4 * v87];
              *(_DWORD *)v92 = 3;
              v84 = v92 + 4;
              if (v83 != v85)
              {
                v93 = v83 - v85 - 4;
                if (v93 < 0x2C)
                  goto LABEL_289;
                if ((unint64_t)(v83 - v91 - v86) < 0x20)
                  goto LABEL_289;
                v94 = (v93 >> 2) + 1;
                v95 = 4 * (v94 & 0x7FFFFFFFFFFFFFF8);
                v96 = &v83[-v95];
                v92 -= v95;
                v97 = &v91[4 * v87 - 16];
                v98 = v83 - 16;
                v99 = v94 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v100 = *(_OWORD *)v98;
                  *((_OWORD *)v97 - 1) = *((_OWORD *)v98 - 1);
                  *(_OWORD *)v97 = v100;
                  v97 -= 32;
                  v98 -= 32;
                  v99 -= 8;
                }
                while (v99);
                v83 = v96;
                if (v94 != (v94 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_289:
                  do
                  {
                    v101 = *((_DWORD *)v83 - 1);
                    v83 -= 4;
                    *((_DWORD *)v92 - 1) = v101;
                    v92 -= 4;
                  }
                  while (v83 != v85);
                }
              }
              v200 = v92;
              v201 = v84;
              v202 = &v91[4 * v90];
              if (v85)
                operator delete(v85);
            }
            else
            {
              *(_DWORD *)v201 = 3;
              v84 = v83 + 4;
            }
            v201 = v84;
            goto LABEL_151;
          }
          v82 = 5;
        }
        (*v81)[v82]();
        goto LABEL_129;
      }
    }
  }
LABEL_151:
  v215 = &off_24F986E50;
  v216 = this;
  v218 = (void **)&v215;
  v102 = (char *)v207[1];
  if (v207[1] >= v208)
  {
    v103 = (void *)std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>::__push_back_slow_path<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>((uint64_t *)v207, &v215);
  }
  else
  {
    *((void **)v207[1] + 3) = v207[1];
    (*((void (**)(void **, char *))*v218 + 3))(v218, v102);
    v103 = v102 + 32;
  }
  v207[1] = v103;
  v104 = (uint64_t (***)())v218;
  if (v218 == (void **)&v215)
  {
    v105 = 4;
    v104 = &v215;
  }
  else
  {
    if (!v218)
      goto LABEL_159;
    v105 = 5;
  }
  (*v104)[v105]();
LABEL_159:
  v106 = v201;
  if (v201 >= v202)
  {
    v108 = (char *)v200;
    v109 = v201 - (_BYTE *)v200;
    v110 = (v201 - (_BYTE *)v200) >> 2;
    v111 = v110 + 1;
    if ((unint64_t)(v110 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v112 = v202 - (_BYTE *)v200;
    if ((v202 - (_BYTE *)v200) >> 1 > v111)
      v111 = v112 >> 1;
    if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFFCLL)
      v113 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v113 = v111;
    if (v113)
    {
      if (v113 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v114 = (char *)operator new(4 * v113);
    }
    else
    {
      v114 = 0;
    }
    v115 = &v114[4 * v110];
    *(_DWORD *)v115 = 1;
    v107 = v115 + 4;
    if (v106 != v108)
    {
      v116 = v106 - v108 - 4;
      if (v116 < 0x2C)
        goto LABEL_290;
      if ((unint64_t)(v106 - v114 - v109) < 0x20)
        goto LABEL_290;
      v117 = (v116 >> 2) + 1;
      v118 = 4 * (v117 & 0x7FFFFFFFFFFFFFF8);
      v119 = &v106[-v118];
      v115 -= v118;
      v120 = &v114[4 * v110 - 16];
      v121 = v106 - 16;
      v122 = v117 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v123 = *(_OWORD *)v121;
        *((_OWORD *)v120 - 1) = *((_OWORD *)v121 - 1);
        *(_OWORD *)v120 = v123;
        v120 -= 32;
        v121 -= 32;
        v122 -= 8;
      }
      while (v122);
      v106 = v119;
      if (v117 != (v117 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_290:
        do
        {
          v124 = *((_DWORD *)v106 - 1);
          v106 -= 4;
          *((_DWORD *)v115 - 1) = v124;
          v115 -= 4;
        }
        while (v106 != v108);
      }
    }
    v200 = v115;
    v201 = v107;
    v202 = &v114[4 * v113];
    if (v108)
      operator delete(v108);
  }
  else
  {
    *(_DWORD *)v201 = 1;
    v107 = v106 + 4;
  }
  v201 = v107;
  v125 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)this);
  v126 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)this);
  v215 = &off_24F986ED0;
  v216 = v125;
  v217 = v126;
  v218 = (void **)&v215;
  v127 = (char *)v207[1];
  if (v207[1] >= v208)
  {
    v128 = (void *)std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>::__push_back_slow_path<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>((uint64_t *)v207, &v215);
  }
  else
  {
    *((void **)v207[1] + 3) = v207[1];
    (*((void (**)(void **, char *))*v218 + 3))(v218, v127);
    v128 = v127 + 32;
  }
  v207[1] = v128;
  v129 = (uint64_t (***)())v218;
  if (v218 == (void **)&v215)
  {
    v130 = 4;
    v129 = &v215;
  }
  else
  {
    if (!v218)
      goto LABEL_188;
    v130 = 5;
  }
  (*v129)[v130]();
LABEL_188:
  v132 = v201;
  v131 = v202;
  if (v201 >= v202)
  {
    v134 = (char *)v200;
    v135 = v201 - (_BYTE *)v200;
    v136 = (v201 - (_BYTE *)v200) >> 2;
    v137 = v136 + 1;
    if ((unint64_t)(v136 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v138 = v202 - (_BYTE *)v200;
    if ((v202 - (_BYTE *)v200) >> 1 > v137)
      v137 = v138 >> 1;
    if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFFCLL)
      v139 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v139 = v137;
    if (v139)
    {
      if (v139 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v140 = (char *)operator new(4 * v139);
    }
    else
    {
      v140 = 0;
    }
    v141 = &v140[4 * v136];
    v131 = &v140[4 * v139];
    *(_DWORD *)v141 = 1;
    v133 = v141 + 4;
    if (v132 != v134)
    {
      v142 = v132 - v134 - 4;
      if (v142 < 0x2C)
        goto LABEL_291;
      if ((unint64_t)(v132 - v140 - v135) < 0x20)
        goto LABEL_291;
      v143 = (v142 >> 2) + 1;
      v144 = 4 * (v143 & 0x7FFFFFFFFFFFFFF8);
      v145 = &v132[-v144];
      v141 -= v144;
      v146 = &v140[4 * v136 - 16];
      v147 = v132 - 16;
      v148 = v143 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v149 = *(_OWORD *)v147;
        *((_OWORD *)v146 - 1) = *((_OWORD *)v147 - 1);
        *(_OWORD *)v146 = v149;
        v146 -= 32;
        v147 -= 32;
        v148 -= 8;
      }
      while (v148);
      v132 = v145;
      if (v143 != (v143 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_291:
        do
        {
          v150 = *((_DWORD *)v132 - 1);
          v132 -= 4;
          *((_DWORD *)v141 - 1) = v150;
          v141 -= 4;
        }
        while (v132 != v134);
      }
    }
    v200 = v141;
    v201 = v133;
    v202 = v131;
    if (v134)
    {
      operator delete(v134);
      v131 = v202;
    }
  }
  else
  {
    *(_DWORD *)v201 = 1;
    v133 = v132 + 4;
  }
  v201 = v133;
  if (v133 < v131)
  {
    *(_DWORD *)v133 = 10;
    v151 = (int *)(v133 + 4);
    goto LABEL_232;
  }
  v152 = (char *)v200;
  v153 = v133 - (_BYTE *)v200;
  v154 = (v133 - (_BYTE *)v200) >> 2;
  v155 = v154 + 1;
  if ((unint64_t)(v154 + 1) >> 62)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v156 = v131 - (_BYTE *)v200;
  if (v156 >> 1 > v155)
    v155 = v156 >> 1;
  if ((unint64_t)v156 >= 0x7FFFFFFFFFFFFFFCLL)
    v157 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v157 = v155;
  if (v157)
  {
    if (v157 >> 62)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v158 = operator new(4 * v157);
  }
  else
  {
    v158 = 0;
  }
  v159 = (int *)&v158[4 * v154];
  v160 = &v158[4 * v157];
  *v159 = 10;
  v151 = v159 + 1;
  if (v133 != v152)
  {
    v161 = v133 - v152 - 4;
    if (v161 < 0x2C)
    {
      v162 = v133;
      goto LABEL_229;
    }
    if ((unint64_t)(v133 - v158 - v153) < 0x20)
    {
      v162 = v133;
      do
      {
LABEL_229:
        v169 = *((_DWORD *)v162 - 1);
        v162 -= 4;
        *--v159 = v169;
      }
      while (v162 != v152);
      goto LABEL_230;
    }
    v163 = (v161 >> 2) + 1;
    v164 = 4 * (v163 & 0x7FFFFFFFFFFFFFF8);
    v162 = &v133[-v164];
    v159 = (int *)((char *)v159 - v164);
    v165 = &v158[4 * v154 - 16];
    v166 = (__int128 *)(v133 - 16);
    v167 = v163 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v168 = *v166;
      *(v165 - 1) = *(v166 - 1);
      *v165 = v168;
      v165 -= 2;
      v166 -= 2;
      v167 -= 8;
    }
    while (v167);
    if (v163 != (v163 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_229;
  }
LABEL_230:
  v200 = v159;
  v201 = (char *)v151;
  v202 = v160;
  if (v152)
    operator delete(v152);
LABEL_232:
  v201 = (char *)v151;
  std::discrete_distribution<int>::param_type::param_type[abi:ne180100]<std::__wrap_iter<int *>>((uint64_t)&v215, (int *)v200, v151);
  *(_QWORD *)v190 = v189;
  *(_QWORD *)&v190[8] = this;
  *(_QWORD *)&v190[16] = v5;
  *(_DWORD *)&v190[24] = 0;
  v192 = 0;
  v191 = 0uLL;
  v170 = v209;
  v171 = (char *)v210 - (char *)v209;
  if (v210 != (double *)v209)
  {
    if (v171 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    *(_QWORD *)&v191 = operator new((char *)v210 - (char *)v209);
    v192 = v191 + 8 * (v171 >> 3);
    memcpy((void *)v191, v170, v171);
    *((_QWORD *)&v191 + 1) = v192;
  }
  v194 = 0;
  v193 = 0uLL;
  v172 = v215;
  v173 = v216 - (operations_research::sat *)v215;
  if (v216 != (operations_research::sat *)v215)
  {
    if (v173 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    *(_QWORD *)&v193 = operator new(v216 - (operations_research::sat *)v215);
    v194 = v193 + 8 * (v173 >> 3);
    memcpy((void *)v193, v172, v173);
    *((_QWORD *)&v193 + 1) = v194;
  }
  v195 = 0uLL;
  v196 = 0;
  std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>(&v195, (uint64_t)v205, (uint64_t)v206, (v206 - (_BYTE *)v205) >> 5);
  v197 = 0uLL;
  v198 = 0;
  std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>*>(&v197, (uint64_t)v207[0], (uint64_t)v207[1], ((char *)v207[1] - (char *)v207[0]) >> 5);
  *(_QWORD *)&v199 = v126;
  *((_QWORD *)&v199 + 1) = v125;
  *(_QWORD *)(a2 + 24) = 0;
  v174 = (char *)operator new(0xA0uLL);
  *(_QWORD *)v174 = &off_24F986F50;
  *(_OWORD *)(v174 + 8) = *(_OWORD *)v190;
  *(_OWORD *)(v174 + 20) = *(_OWORD *)&v190[12];
  *(_OWORD *)(v174 + 40) = v191;
  *((_QWORD *)v174 + 7) = v192;
  *((_DWORD *)v174 + 16) = 0;
  *(_OWORD *)(v174 + 72) = v193;
  *((_QWORD *)v174 + 11) = v194;
  *((_OWORD *)v174 + 6) = v195;
  *((_QWORD *)v174 + 14) = v196;
  v195 = 0uLL;
  v196 = 0;
  *(_OWORD *)(v174 + 120) = v197;
  *((_QWORD *)v174 + 17) = v198;
  v197 = 0uLL;
  v198 = 0;
  *((_OWORD *)v174 + 9) = v199;
  *(_QWORD *)(a2 + 24) = v174;
  if (v215)
  {
    v216 = (operations_research::sat *)v215;
    operator delete(v215);
  }
  if (v200)
  {
    v201 = (char *)v200;
    operator delete(v200);
  }
  v175 = (char *)v207[0];
  if (v207[0])
  {
    v176 = v207[1];
    v177 = v207[0];
    if (v207[1] == v207[0])
    {
LABEL_252:
      v207[1] = v175;
      operator delete(v177);
      goto LABEL_253;
    }
    while (1)
    {
      v180 = (char *)(v176 - 4);
      v178 = (_QWORD *)*(v176 - 1);
      if (v176 - 4 == v178)
      {
        v178 = v176 - 4;
        v179 = 4;
      }
      else
      {
        if (!v178)
          goto LABEL_247;
        v179 = 5;
      }
      (*(void (**)(void))(*v178 + 8 * v179))();
LABEL_247:
      v176 = v180;
      if (v180 == v175)
      {
        v177 = v207[0];
        goto LABEL_252;
      }
    }
  }
LABEL_253:
  if (v209)
  {
    v210 = (double *)v209;
    operator delete(v209);
  }
  v181 = (char *)v205;
  if (v205)
  {
    v182 = v206;
    v183 = v205;
    if (v206 == v205)
    {
LABEL_265:
      v206 = v181;
      operator delete(v183);
      goto LABEL_266;
    }
    while (1)
    {
      v186 = v182 - 32;
      v184 = (char *)*((_QWORD *)v182 - 1);
      if (v182 - 32 == v184)
      {
        v184 = v182 - 32;
        v185 = 4;
      }
      else
      {
        if (!v184)
          goto LABEL_260;
        v185 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v184 + 8 * v185))();
LABEL_260:
      v182 = v186;
      if (v186 == v181)
      {
        v183 = v205;
        goto LABEL_265;
      }
    }
  }
LABEL_266:
  result = v222;
  if (v222 == v221)
  {
    v188 = 4;
    result = v221;
  }
  else
  {
    if (!v222)
      return result;
    v188 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v188))();
}

void sub_22DB76848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39)
{
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v42;
  uint64_t v43;
  void *v44;
  _QWORD *v45;
  uint64_t v46;

  v42 = *(_QWORD **)(v40 - 168);
  if (v42 == v39)
  {
    v43 = 4;
    v42 = (_QWORD *)(v40 - 192);
  }
  else
  {
    if (!v42)
      goto LABEL_6;
    v43 = 5;
  }
  (*(void (**)(void))(*v42 + 8 * v43))();
LABEL_6:
  if (__p)
    operator delete(__p);
  std::vector<std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>>::~vector[abi:ne180100](&a39);
  v44 = *(void **)(v40 - 256);
  if (v44)
  {
    *(_QWORD *)(v40 - 248) = v44;
    operator delete(v44);
  }
  std::vector<std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>>::~vector[abi:ne180100](&a36);
  v45 = *(_QWORD **)(v40 - 104);
  if (v45 == (_QWORD *)(v40 - 128))
  {
    v46 = 4;
    v45 = (_QWORD *)(v40 - 128);
  }
  else
  {
    if (!v45)
      goto LABEL_15;
    v46 = 5;
  }
  (*(void (**)(void))(*v45 + 8 * v46))();
LABEL_15:
  _Unwind_Resume(a1);
}

_QWORD *operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5::~$_5(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;

  v2 = a1[14];
  if (v2)
  {
    v3 = a1[15];
    v4 = (void *)a1[14];
    if (v3 == v2)
    {
LABEL_11:
      a1[15] = v2;
      operator delete(v4);
      goto LABEL_12;
    }
    while (1)
    {
      v7 = v3 - 32;
      v5 = *(_QWORD **)(v3 - 8);
      if ((_QWORD *)(v3 - 32) == v5)
      {
        v5 = (_QWORD *)(v3 - 32);
        v6 = 4;
      }
      else
      {
        if (!v5)
          goto LABEL_6;
        v6 = 5;
      }
      (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
      v3 = v7;
      if (v7 == v2)
      {
        v4 = (void *)a1[14];
        goto LABEL_11;
      }
    }
  }
LABEL_12:
  v8 = a1[11];
  if (!v8)
    goto LABEL_23;
  v9 = a1[12];
  v10 = (void *)a1[11];
  if (v9 != v8)
  {
    while (1)
    {
      v13 = v9 - 32;
      v11 = *(_QWORD **)(v9 - 8);
      if ((_QWORD *)(v9 - 32) == v11)
      {
        v11 = (_QWORD *)(v9 - 32);
        v12 = 4;
      }
      else
      {
        if (!v11)
          goto LABEL_17;
        v12 = 5;
      }
      (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_17:
      v9 = v13;
      if (v13 == v8)
      {
        v10 = (void *)a1[11];
        break;
      }
    }
  }
  a1[12] = v8;
  operator delete(v10);
LABEL_23:
  v14 = (void *)a1[8];
  if (v14)
  {
    a1[9] = v14;
    operator delete(v14);
  }
  v15 = (void *)a1[4];
  if (v15)
  {
    a1[5] = v15;
    operator delete(v15);
  }
  return a1;
}

void operations_research::sat::FollowHint(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  operations_research::sat::IntegerTrail *v9;
  uint64_t v10;
  const void *v11;
  int64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  const void *v16;
  int64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  uint64_t v29;

  v8 = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>(a3);
  v9 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a3);
  v11 = *(const void **)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v12 = v10 - *(_QWORD *)a1;
  if (v10 != *(_QWORD *)a1)
  {
    if (v12 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v13 = (char *)operator new(v10 - *(_QWORD *)a1);
    v14 = &v13[8 * (v12 >> 3)];
    memcpy(v13, v11, v12);
    v16 = *(const void **)a2;
    v15 = *(_QWORD *)(a2 + 8);
    v17 = v15 - *(_QWORD *)a2;
    if (v15 != *(_QWORD *)a2)
      goto LABEL_4;
LABEL_7:
    v19 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  v14 = 0;
  v13 = 0;
  v16 = *(const void **)a2;
  v20 = *(_QWORD *)(a2 + 8);
  v17 = v20 - *(_QWORD *)a2;
  if (v20 == *(_QWORD *)a2)
    goto LABEL_7;
LABEL_4:
  if (v17 < 0)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v18 = (char *)operator new(v17);
  v19 = &v18[8 * (v17 >> 3)];
  memcpy(v18, v16, v17);
LABEL_8:
  *(_QWORD *)&v28 = v8;
  *((_QWORD *)&v28 + 1) = v9;
  v29 = a3;
  *(_QWORD *)(a4 + 24) = 0;
  v21 = (char *)operator new(0x50uLL);
  *(_QWORD *)v21 = &off_24F986FD0;
  *((_QWORD *)v21 + 1) = 0;
  *((_QWORD *)v21 + 2) = 0;
  *((_QWORD *)v21 + 3) = 0;
  v22 = v14 - v13;
  if (v14 != v13)
  {
    if (v22 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v23 = (char *)operator new(v14 - v13);
    *((_QWORD *)v21 + 1) = v23;
    v24 = &v23[8 * (v22 >> 3)];
    *((_QWORD *)v21 + 3) = v24;
    memcpy(v23, v13, v14 - v13);
    *((_QWORD *)v21 + 2) = v24;
  }
  *((_QWORD *)v21 + 4) = 0;
  *((_QWORD *)v21 + 5) = 0;
  *((_QWORD *)v21 + 6) = 0;
  v25 = v19 - v18;
  if (v19 != v18)
  {
    if (v25 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v26 = (char *)operator new(v19 - v18);
    *((_QWORD *)v21 + 4) = v26;
    v27 = &v26[8 * (v25 >> 3)];
    *((_QWORD *)v21 + 6) = v27;
    memcpy(v26, v18, v19 - v18);
    *((_QWORD *)v21 + 5) = v27;
  }
  *(_OWORD *)(v21 + 56) = v28;
  *((_QWORD *)v21 + 9) = v29;
  *(_QWORD *)(a4 + 24) = v21;
  if (v18)
    operator delete(v18);
  if (v13)
    operator delete(v13);
}

void sub_22DB76ED8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)va);
  _Unwind_Resume(a1);
}

void sub_22DB76EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _QWORD *v10;
  void **v11;
  void **v12;
  void *v14;
  void *v15;

  v14 = *v12;
  if (*v12)
  {
    v10[5] = v14;
    operator delete(v14);
  }
  v15 = *v11;
  if (*v11)
  {
    v10[2] = v15;
    operator delete(v15);
  }
  operator delete(v10);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a10);
  _Unwind_Resume(a1);
}

void sub_22DB76F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a10)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *operations_research::sat::Model::GetOrCreate<operations_research::sat::LinearProgrammingConstraintCollection>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v19;

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 32);
  if (!v2)
    goto LABEL_12;
  v4 = (_QWORD *)(a1 + 32);
  do
  {
    v5 = v2[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::LinearProgrammingConstraintCollection>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::LinearProgrammingConstraintCollection>(void)::d)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 != v3
    && v4[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::LinearProgrammingConstraintCollection>(void)::d)
  {
    return (_QWORD *)v4[5];
  }
LABEL_12:
  v8 = (_QWORD *)operator new();
  v8[1] = 0;
  v8[2] = 0;
  *v8 = 0;
  v9 = (_QWORD *)*v3;
  v10 = v3;
  if (*v3)
  {
    while (1)
    {
      while (1)
      {
        v10 = v9;
        v11 = v9[4];
        if (v11 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::LinearProgrammingConstraintCollection>(void)::d)
          break;
        v9 = (_QWORD *)*v10;
        v3 = v10;
        if (!*v10)
          goto LABEL_19;
      }
      if (v11 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::LinearProgrammingConstraintCollection>(void)::d)
        break;
      v9 = (_QWORD *)v10[1];
      if (!v9)
      {
        v3 = v10 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v12 = v10;
    v10 = operator new(0x30uLL);
    v10[4] = &gtl::FastTypeId<operations_research::sat::LinearProgrammingConstraintCollection>(void)::d;
    v10[5] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v12;
    *v3 = v10;
    v13 = **(_QWORD **)(a1 + 24);
    v14 = v10;
    if (v13)
    {
      *(_QWORD *)(a1 + 24) = v13;
      v14 = (uint64_t *)*v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v14);
    ++*(_QWORD *)(a1 + 40);
  }
  v10[5] = v8;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24F987050;
  v15[1] = v8;
  v19 = v15;
  v16 = *(_QWORD **)(a1 + 56);
  if ((unint64_t)v16 >= *(_QWORD *)(a1 + 64))
  {
    v17 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a1 + 48), &v19);
  }
  else
  {
    *v16 = v15;
    v17 = (char *)(v16 + 1);
  }
  *(_QWORD *)(a1 + 56) = v17;
  return v8;
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::RestartPolicy>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t restarted;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v19;

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 32);
  if (!v2)
    goto LABEL_12;
  v4 = (_QWORD *)(a1 + 32);
  do
  {
    v5 = v2[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::RestartPolicy>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::RestartPolicy>(void)::d)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 != v3 && v4[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::RestartPolicy>(void)::d)
    return v4[5];
LABEL_12:
  restarted = operations_research::sat::Model::MyNew<operations_research::sat::RestartPolicy>(a1);
  v9 = *(_QWORD **)(a1 + 32);
  v10 = v3;
  if (v9)
  {
    while (1)
    {
      while (1)
      {
        v10 = v9;
        v11 = v9[4];
        if (v11 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::RestartPolicy>(void)::d)
          break;
        v9 = (_QWORD *)*v10;
        v3 = v10;
        if (!*v10)
          goto LABEL_19;
      }
      if (v11 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::RestartPolicy>(void)::d)
        break;
      v9 = (_QWORD *)v10[1];
      if (!v9)
      {
        v3 = v10 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v12 = v10;
    v10 = operator new(0x30uLL);
    v10[4] = &gtl::FastTypeId<operations_research::sat::RestartPolicy>(void)::d;
    v10[5] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v12;
    *v3 = v10;
    v13 = **(_QWORD **)(a1 + 24);
    v14 = v10;
    if (v13)
    {
      *(_QWORD *)(a1 + 24) = v13;
      v14 = (uint64_t *)*v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v14);
    ++*(_QWORD *)(a1 + 40);
  }
  v10[5] = restarted;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24F987108;
  v15[1] = restarted;
  v19 = v15;
  v16 = *(_QWORD **)(a1 + 56);
  if ((unint64_t)v16 >= *(_QWORD *)(a1 + 64))
  {
    v17 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a1 + 48), &v19);
  }
  else
  {
    *v16 = v15;
    v17 = (char *)(v16 + 1);
  }
  *(_QWORD *)(a1 + 56) = v17;
  return restarted;
}

void operations_research::sat::ConfigureSearchHeuristics(operations_research::sat *this, operations_research::sat::Model *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  operations_research::sat::SatParameters *v10;
  operations_research::sat::SatParameters *v11;
  uint64_t v12;
  void ***v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  BOOL v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t **v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t (***v33)();
  uint64_t v34;
  uint64_t v35;
  void ***v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  operations_research::sat::SatSolver *v40;
  uint64_t v41;
  operations_research::sat::SatDecisionPolicy *v42;
  void **v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  operations_research::sat::SatSolver *v47;
  uint64_t v48;
  operations_research::sat::SatDecisionPolicy *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  operations_research::sat::SatSolver *v53;
  uint64_t v54;
  operations_research::sat::SatDecisionPolicy *v55;
  void **v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  operations_research::sat::SatSolver *v61;
  uint64_t v62;
  operations_research::sat::SatDecisionPolicy *v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  operations_research::sat::SatSolver *v67;
  uint64_t v68;
  operations_research::sat::SatDecisionPolicy *v69;
  _QWORD *v70;
  char *v71;
  _QWORD *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  void *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t (***v82)();
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  operations_research::sat::SatSolver *v86;
  uint64_t v87;
  operations_research::sat::SatDecisionPolicy *v88;
  void **v89;
  _QWORD *v90;
  uint64_t v91;
  void ***v92;
  char *v93;
  char *v94;
  char *v95;
  void *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t (***v101)();
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  void *v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t (***v113)();
  uint64_t v114;
  uint64_t v115;
  uint64_t (***v116)();
  uint64_t v117;
  operations_research::sat::SatSolver *v118;
  _BYTE *v119;
  uint64_t (***v120)();
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  char *v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  char *v134;
  char *v135;
  void *v136;
  char *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t (***v141)();
  uint64_t v142;
  _QWORD *v143;
  _QWORD *v144;
  void *v145;
  _QWORD *v146;
  uint64_t v147;
  _QWORD *v148;
  char *v149;
  char *v150;
  void *v151;
  char *v152;
  uint64_t v153;
  char *v154;
  _QWORD *v155;
  uint64_t v156;
  char *v157;
  _QWORD *v158;
  void ***v159;
  _QWORD *v160;
  uint64_t v161;
  _QWORD *v162;
  void **v163;
  void **v164;
  void **v165;
  uint64_t v166;
  void ***v167;
  uint64_t (***v168)();
  uint64_t v169;
  char *v170;
  uint64_t v171;
  char *v172;
  _QWORD *v173;
  uint64_t v174;
  char *v175;
  char *v176;
  void *v177;
  char *v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t (***v183)();
  uint64_t v184;
  uint64_t (***v185)();
  uint64_t v186;
  uint64_t (***v187)();
  uint64_t v188;
  char *v189;
  char *v190;
  char *v191;
  char *v192;
  char *v193;
  uint64_t v194;
  char *v195;
  _QWORD *v196;
  uint64_t v197;
  char *v198;
  char *v199;
  void *v200;
  char *v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  uint64_t (***v205)();
  uint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t (***v211)();
  uint64_t v212;
  void ***v213;
  uint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  char *v217;
  _QWORD *v218;
  uint64_t v219;
  char **v220;
  char *v221;
  uint64_t v222;
  char *v223;
  char *v224;
  void *v225;
  char *v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  uint64_t (***v230)();
  uint64_t v231;
  uint64_t v232;
  _QWORD *v233;
  uint64_t v234;
  uint64_t (***v235)();
  uint64_t v236;
  _QWORD *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t (***v240)();
  uint64_t v241;
  uint64_t restarted;
  uint64_t (***v243)();
  uint64_t v244;
  operations_research::sat::SatSolver *v245;
  uint64_t v246;
  operations_research::sat::SatDecisionPolicy *v247;
  _QWORD *v248;
  char *v249;
  uint64_t v250;
  char *v251;
  uint64_t v252;
  _QWORD *v253;
  uint64_t v254;
  char *v255;
  char *v256;
  void *v257;
  char *v258;
  uint64_t v259;
  char *v260;
  _QWORD *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  void *v265;
  _QWORD *v266;
  uint64_t v267;
  uint64_t v268;
  _QWORD *v269;
  _QWORD *v270;
  void *v271;
  char *v272;
  void *v273;
  char *v274;
  void *v275;
  char *v276;
  void *v277;
  char *v278;
  void *v279;
  char *v280;
  void *v281;
  char *v282;
  void *v283;
  _QWORD *v284;
  uint64_t v285;
  __int128 v286;
  uint64_t v287;
  void *v288;
  char *v289;
  void *__p;
  char *v291;
  void *v292;
  char *v293;
  __int128 v294;
  unint64_t v295;
  _QWORD v296[3];
  _QWORD *v297;
  _QWORD v298[3];
  _QWORD *v299;
  uint64_t (**v300)();
  operations_research::sat::PseudoCosts *v301;
  operations_research::sat *v302;
  void **v303;
  _QWORD v304[3];
  _QWORD *v305;
  _BYTE v306[24];
  _BYTE *v307;
  _QWORD v308[3];
  _QWORD *v309;
  __int128 v310;
  uint64_t v311;
  char *v312;
  uint64_t v313;
  _QWORD v314[3];
  _QWORD *v315;
  _QWORD v316[3];

  v316[0] = *MEMORY[0x24BDAC8D0];
  v3 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SearchHeuristics>((uint64_t)this);
  if (!*(_QWORD *)(v3 + 80))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v300, (google::glog_internal_namespace_ *)"./ortools/sat/integer_search.cc", 535);
    v269 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v300);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v269, (uint64_t)"Check failed: heuristics.fixed_search != nullptr ", 49);
    goto LABEL_526;
  }
  v4 = v3;
  *(_DWORD *)(v3 + 48) = 0;
  v6 = *(_QWORD *)v3;
  v5 = *(_QWORD *)(v3 + 8);
  if (v5 != *(_QWORD *)v3)
  {
    do
    {
      v18 = v5 - 32;
      v16 = *(_QWORD **)(v5 - 8);
      if ((_QWORD *)(v5 - 32) == v16)
      {
        v16 = (_QWORD *)(v5 - 32);
        v17 = 4;
      }
      else
      {
        if (!v16)
          goto LABEL_11;
        v17 = 5;
      }
      (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_11:
      v5 = v18;
    }
    while (v18 != v6);
  }
  v7 = (void **)(v4 + 24);
  v8 = *(_QWORD *)(v4 + 24);
  *(_QWORD *)(v4 + 8) = v6;
  v9 = *(_QWORD *)(v4 + 32);
  if (v9 != v8)
  {
    do
    {
      v21 = v9 - 32;
      v19 = *(_QWORD **)(v9 - 8);
      if ((_QWORD *)(v9 - 32) == v19)
      {
        v19 = (_QWORD *)(v9 - 32);
        v20 = 4;
      }
      else
      {
        if (!v19)
          goto LABEL_17;
        v20 = 5;
      }
      (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_17:
      v9 = v21;
    }
    while (v21 != v8);
  }
  *(_QWORD *)(v4 + 32) = v8;
  v10 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)this);
  v11 = v10;
  v12 = v4 + 56;
  switch(*((_DWORD *)v10 + 31))
  {
    case 0:
      v13 = (void ***)&v315;
      v315 = 0;
      if (*((_BYTE *)v10 + 151))
      {
        operations_research::sat::RandomizeOnRestartHeuristic(this, (uint64_t)&v300);
        v14 = v315;
        v315 = 0;
        if (v14 == v314)
        {
          v15 = 4;
          v14 = v314;
        }
        else
        {
          if (!v14)
            goto LABEL_127;
          v15 = 5;
        }
        (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_127:
        v92 = (void ***)&v315;
        if (v303)
        {
          if (v303 == (void **)&v300)
          {
            v315 = v314;
            ((void (*)(uint64_t (***)(), _QWORD *))v300[3])(&v300, v314);
LABEL_339:
            v187 = (uint64_t (***)())v303;
            if (v303 != (void **)&v300)
            {
LABEL_340:
              if (!v187)
                goto LABEL_391;
              v188 = 5;
LABEL_390:
              (*v187)[v188]();
LABEL_391:
              v214 = (uint64_t)v315;
              if (v315)
              {
                if (v315 == v314)
                {
                  v303 = (void **)&v300;
                  (*(void (**)(_QWORD *, uint64_t (***)()))(v314[0] + 24))(v314, &v300);
LABEL_396:
                  v215 = v304;
                  v216 = *(_QWORD *)(v4 + 80);
                  if (v216)
                  {
                    if (v216 == v12)
                    {
                      v305 = v304;
                      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v12 + 24))(v4 + 56, v304);
LABEL_401:
                      std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::vector[abi:ne180100](&v292, (uint64_t)&v300, 2uLL);
                      v294 = 0uLL;
                      v295 = 0;
                      std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>(&v294, (uint64_t)v292, (uint64_t)v293, (v293 - (_BYTE *)v292) >> 5);
                      v312 = 0;
                      v217 = (char *)operator new(0x20uLL);
                      *(_QWORD *)v217 = &off_24F9867D0;
                      *(_OWORD *)(v217 + 8) = v294;
                      *((_QWORD *)v217 + 3) = v295;
                      v312 = v217;
                      v218 = v315;
                      v315 = 0;
                      if (v218 == v314)
                      {
                        v219 = 4;
                        v218 = v314;
                      }
                      else
                      {
                        if (!v218)
                          goto LABEL_407;
                        v219 = 5;
                      }
                      (*(void (**)(_QWORD *))(*v218 + 8 * v219))(v218);
                      v217 = v312;
                      v220 = (char **)&v315;
                      if (!v312)
                      {
LABEL_408:
                        *v220 = 0;
                        goto LABEL_409;
                      }
                      if (v312 == (char *)&v310)
                      {
                        v315 = v314;
                        (*(void (**)(__int128 *, _QWORD *))(v310 + 24))(&v310, v314);
LABEL_409:
                        v221 = v312;
                        if (v312 == (char *)&v310)
                        {
                          v222 = 4;
                          v221 = (char *)&v310;
                        }
                        else
                        {
                          if (!v312)
                          {
LABEL_414:
                            v223 = (char *)v292;
                            if (!v292)
                              goto LABEL_425;
                            v224 = v293;
                            v225 = v292;
                            if (v293 == v292)
                            {
LABEL_424:
                              v293 = v223;
                              operator delete(v225);
LABEL_425:
                              if (v305 == v304)
                              {
                                v229 = 4;
                              }
                              else
                              {
                                if (!v305)
                                  goto LABEL_430;
                                v229 = 5;
                                v215 = v305;
                              }
                              (*(void (**)(_QWORD *))(*v215 + 8 * v229))(v215);
LABEL_430:
                              v230 = (uint64_t (***)())v303;
                              if (v303 == (void **)&v300)
                              {
                                v231 = 4;
                                v230 = &v300;
                              }
                              else
                              {
                                if (!v303)
                                  goto LABEL_435;
                                v231 = 5;
                              }
                              (*v230)[v231]();
LABEL_435:
                              v232 = (uint64_t)v315;
                              if (v315)
                              {
                                if (v315 == v314)
                                {
                                  v309 = v308;
                                  (*(void (**)(_QWORD *, _QWORD *))(v314[0] + 24))(v314, v308);
LABEL_440:
                                  operations_research::sat::IntegerValueSelectionHeuristic(v308, (uint64_t)this, (uint64_t)&v300);
                                  v233 = v315;
                                  v315 = 0;
                                  if (v233 == v314)
                                  {
                                    v234 = 4;
                                    v233 = v314;
                                  }
                                  else
                                  {
                                    if (!v233)
                                      goto LABEL_445;
                                    v234 = 5;
                                  }
                                  (*(void (**)(void))(*v233 + 8 * v234))();
LABEL_445:
                                  if (v303)
                                  {
                                    if (v303 == (void **)&v300)
                                    {
                                      v315 = v314;
                                      ((void (*)(uint64_t (***)(), _QWORD *))v300[3])(&v300, v314);
LABEL_450:
                                      v235 = (uint64_t (***)())v303;
                                      if (v303 == (void **)&v300)
                                      {
                                        v236 = 4;
                                        v235 = &v300;
                                      }
                                      else
                                      {
                                        if (!v303)
                                          goto LABEL_455;
                                        v236 = 5;
                                      }
                                      (*v235)[v236]();
LABEL_455:
                                      v237 = v309;
                                      if (v309 == v308)
                                      {
                                        v238 = 4;
                                        v237 = v308;
                                      }
                                      else
                                      {
                                        if (!v309)
                                          goto LABEL_460;
                                        v238 = 5;
                                      }
                                      (*(void (**)(void))(*v237 + 8 * v238))();
LABEL_460:
                                      v239 = (uint64_t)v315;
                                      if (v315)
                                      {
                                        if (v315 == v314)
                                        {
                                          v303 = (void **)&v300;
                                          (*(void (**)(_QWORD *, uint64_t (***)()))(v314[0] + 24))(v314, &v300);
LABEL_465:
                                          std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__assign_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const*>((void **)v4, &v300, v304, 1uLL);
                                          v240 = (uint64_t (***)())v303;
                                          if (v303 == (void **)&v300)
                                          {
                                            v241 = 4;
                                            v240 = &v300;
                                          }
                                          else
                                          {
                                            if (!v303)
                                            {
LABEL_470:
                                              restarted = operations_research::sat::Model::GetOrCreate<operations_research::sat::RestartPolicy>((uint64_t)this);
                                              v300 = &off_24F987140;
                                              v301 = (operations_research::sat::PseudoCosts *)restarted;
                                              v303 = (void **)&v300;
                                              std::vector<std::function<BOOL ()(void)>>::__assign_with_size[abi:ne180100]<std::function<BOOL ()(void)> const*,std::function<BOOL ()(void)> const*>((void **)(v4 + 24), &v300, v304, 1uLL);
                                              goto LABEL_471;
                                            }
                                            v241 = 5;
                                          }
                                          (*v240)[v241]();
                                          goto LABEL_470;
                                        }
                                        v239 = (*(uint64_t (**)(void))(*v315 + 16))();
                                      }
                                      v303 = (void **)v239;
                                      goto LABEL_465;
                                    }
                                    v13 = &v303;
                                    v315 = v303;
                                  }
                                  *v13 = 0;
                                  goto LABEL_450;
                                }
                                v232 = (*(uint64_t (**)(void))(*v315 + 16))();
                              }
                              v309 = (_QWORD *)v232;
                              goto LABEL_440;
                            }
                            while (1)
                            {
                              v228 = v224 - 32;
                              v226 = (char *)*((_QWORD *)v224 - 1);
                              if (v224 - 32 == v226)
                              {
                                v226 = v224 - 32;
                                v227 = 4;
                              }
                              else
                              {
                                if (!v226)
                                  goto LABEL_419;
                                v227 = 5;
                              }
                              (*(void (**)(void))(*(_QWORD *)v226 + 8 * v227))();
LABEL_419:
                              v224 = v228;
                              if (v228 == v223)
                              {
                                v225 = v292;
                                goto LABEL_424;
                              }
                            }
                          }
                          v222 = 5;
                        }
                        (*(void (**)(void))(*(_QWORD *)v221 + 8 * v222))();
                        goto LABEL_414;
                      }
LABEL_407:
                      v220 = &v312;
                      v315 = v217;
                      goto LABEL_408;
                    }
                    v216 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v216 + 16))(v216);
                  }
                  v305 = (_QWORD *)v216;
                  goto LABEL_401;
                }
                v214 = (*(uint64_t (**)(void))(*v315 + 16))();
              }
              v303 = (void **)v214;
              goto LABEL_396;
            }
LABEL_389:
            v188 = 4;
            v187 = &v300;
            goto LABEL_390;
          }
          v92 = &v303;
          v315 = v303;
        }
        *v92 = 0;
        goto LABEL_339;
      }
      v53 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)this);
      v54 = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)this);
      v55 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatDecisionPolicy>((uint64_t)this);
      v56 = (void **)operator new(0x20uLL);
      *v56 = &off_24F986B18;
      v56[1] = v53;
      v56[2] = (void *)v54;
      v56[3] = v55;
      v303 = v56;
      v57 = v315;
      v315 = 0;
      if (v57 == v314)
      {
        v58 = 4;
        v57 = v314;
      }
      else
      {
        if (!v57)
          goto LABEL_386;
        v58 = 5;
      }
      (*(void (**)(_QWORD *))(*v57 + 8 * v58))(v57);
      v56 = v303;
      v213 = (void ***)&v315;
      if (!v303)
      {
LABEL_387:
        *v213 = 0;
        goto LABEL_388;
      }
      if (v303 == (void **)&v300)
      {
        v315 = v314;
        ((void (*)(uint64_t (***)(), _QWORD *))v300[3])(&v300, v314);
LABEL_388:
        v187 = (uint64_t (***)())v303;
        if (v303 != (void **)&v300)
          goto LABEL_340;
        goto LABEL_389;
      }
LABEL_386:
      v213 = &v303;
      v315 = v56;
      goto LABEL_387;
    case 1:
      v28 = *(_QWORD *)(v4 + 80);
      if (!v28)
        goto LABEL_38;
      if (v28 == v12)
      {
        v303 = (void **)&v300;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v12 + 24))(v4 + 56, &v300);
      }
      else
      {
        v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
LABEL_38:
        v303 = (void **)v28;
      }
      v67 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)this);
      v68 = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)this);
      v69 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatDecisionPolicy>((uint64_t)this);
      v305 = 0;
      v70 = operator new(0x20uLL);
      *v70 = &off_24F986B18;
      v70[1] = v67;
      v70[2] = v68;
      v70[3] = v69;
      v305 = v70;
      std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::vector[abi:ne180100](&__p, (uint64_t)&v300, 2uLL);
      v310 = 0uLL;
      v311 = 0;
      std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>(&v310, (uint64_t)__p, (uint64_t)v291, (v291 - (_BYTE *)__p) >> 5);
      v315 = 0;
      v71 = (char *)operator new(0x20uLL);
      *(_QWORD *)v71 = &off_24F9867D0;
      *(_OWORD *)(v71 + 8) = v310;
      *((_QWORD *)v71 + 3) = v311;
      v315 = v71;
      std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__assign_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const*>((void **)v4, v314, v316, 1uLL);
      v72 = v315;
      if (v315 == v314)
      {
        v73 = 4;
        v72 = v314;
      }
      else
      {
        if (!v315)
          goto LABEL_95;
        v73 = 5;
      }
      (*(void (**)(void))(*v72 + 8 * v73))();
LABEL_95:
      v74 = (char *)__p;
      if (!__p)
        goto LABEL_106;
      v75 = v291;
      v76 = __p;
      if (v291 == __p)
        goto LABEL_105;
      do
      {
        v79 = v75 - 32;
        v77 = (char *)*((_QWORD *)v75 - 1);
        if (v75 - 32 == v77)
        {
          v77 = v75 - 32;
          v78 = 4;
LABEL_99:
          (*(void (**)(void))(*(_QWORD *)v77 + 8 * v78))();
          goto LABEL_100;
        }
        if (v77)
        {
          v78 = 5;
          goto LABEL_99;
        }
LABEL_100:
        v75 = v79;
      }
      while (v79 != v74);
      v76 = __p;
LABEL_105:
      v291 = v74;
      operator delete(v76);
LABEL_106:
      v80 = v305;
      if (v305 == v304)
      {
        v81 = 4;
        v80 = v304;
LABEL_110:
        (*(void (**)(void))(*v80 + 8 * v81))();
      }
      else if (v305)
      {
        v81 = 5;
        goto LABEL_110;
      }
      v82 = (uint64_t (***)())v303;
      if (v303 == (void **)&v300)
      {
        v83 = 4;
        v82 = &v300;
LABEL_115:
        (*v82)[v83]();
      }
      else if (v303)
      {
        v83 = 5;
        goto LABEL_115;
      }
      if (*((_BYTE *)v11 + 151))
      {
        v84 = operations_research::sat::Model::GetOrCreate<operations_research::sat::RestartPolicy>((uint64_t)this);
        v300 = &off_24F987140;
        v301 = (operations_research::sat::PseudoCosts *)v84;
      }
      else
      {
        v300 = &off_24F9871C0;
      }
      v303 = (void **)&v300;
      std::vector<std::function<BOOL ()(void)>>::__assign_with_size[abi:ne180100]<std::function<BOOL ()(void)> const*,std::function<BOOL ()(void)> const*>(v7, &v300, v304, 1uLL);
LABEL_336:
      v185 = (uint64_t (***)())v303;
      if (v303 == (void **)&v300)
      {
        v186 = 4;
        v185 = &v300;
        goto LABEL_480;
      }
LABEL_477:
      if (v185)
      {
        v186 = 5;
        goto LABEL_480;
      }
      return;
    case 2:
      v29 = *(_QWORD *)(v4 + 80);
      if (!v29)
        goto LABEL_42;
      if (v29 == v12)
      {
        v315 = v314;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v12 + 24))(v4 + 56, v314);
      }
      else
      {
        v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
LABEL_42:
        v315 = (_QWORD *)v29;
      }
      std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::vector[abi:ne180100](&v281, (uint64_t)v314, 1uLL);
      v283 = 0;
      v284 = 0;
      v285 = 0;
      std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>(&v283, (uint64_t)v281, (uint64_t)v282, (v282 - (_BYTE *)v281) >> 5);
      v85 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SearchHeuristicsVector>((uint64_t)this);
      std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>,std::__wrap_iter<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>>((uint64_t *)&v283, v284, (_QWORD *)*v85, (_QWORD *)v85[1], (uint64_t)(v85[1] - *v85) >> 5);
      v86 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)this);
      v87 = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)this);
      v88 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatDecisionPolicy>((uint64_t)this);
      v89 = (void **)operator new(0x20uLL);
      *v89 = &off_24F986B18;
      v89[1] = v86;
      v89[2] = (void *)v87;
      v89[3] = v88;
      v303 = v89;
      v90 = v304;
      v91 = *(_QWORD *)(v4 + 80);
      if (!v91)
        goto LABEL_124;
      if (v91 == v12)
      {
        v305 = v304;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v12 + 24))(v4 + 56, v304);
      }
      else
      {
        v91 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v91 + 16))(v91);
LABEL_124:
        v305 = (_QWORD *)v91;
      }
      std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::vector[abi:ne180100](&v279, (uint64_t)&v300, 2uLL);
      v294 = 0uLL;
      v295 = 0;
      std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>(&v294, (uint64_t)v279, (uint64_t)v280, (v280 - (_BYTE *)v279) >> 5);
      v312 = 0;
      v125 = (char *)operator new(0x20uLL);
      *(_QWORD *)v125 = &off_24F9867D0;
      *(_OWORD *)(v125 + 8) = v294;
      *((_QWORD *)v125 + 3) = v295;
      v312 = v125;
      operations_research::sat::CompleteHeuristics((uint64_t *)&v283, &v310, (uint64_t)&v286);
      v126 = *(char **)v4;
      if (!*(_QWORD *)v4)
        goto LABEL_219;
      v127 = *(char **)(v4 + 8);
      v128 = *(char **)v4;
      if (v127 == v126)
        goto LABEL_218;
      while (1)
      {
        v131 = v127 - 32;
        v129 = (char *)*((_QWORD *)v127 - 1);
        if (v127 - 32 == v129)
        {
          v129 = v127 - 32;
          v130 = 4;
        }
        else
        {
          if (!v129)
            goto LABEL_213;
          v130 = 5;
        }
        (*(void (**)(void))(*(_QWORD *)v129 + 8 * v130))();
LABEL_213:
        v127 = v131;
        if (v131 == v126)
        {
          v128 = *(char **)v4;
LABEL_218:
          *(_QWORD *)(v4 + 8) = v126;
          operator delete(v128);
          *(_QWORD *)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
          *(_QWORD *)(v4 + 16) = 0;
LABEL_219:
          *(_OWORD *)v4 = v286;
          *(_QWORD *)(v4 + 16) = v287;
          v286 = 0uLL;
          v287 = 0;
          v132 = v312;
          if (v312 == (char *)&v310)
          {
            v133 = 4;
            v132 = (char *)&v310;
LABEL_223:
            (*(void (**)(void))(*(_QWORD *)v132 + 8 * v133))();
          }
          else if (v312)
          {
            v133 = 5;
            goto LABEL_223;
          }
          v134 = (char *)v279;
          if (v279)
          {
            v135 = v280;
            v136 = v279;
            if (v280 == v279)
            {
LABEL_234:
              v280 = v134;
              operator delete(v136);
              goto LABEL_235;
            }
            while (2)
            {
              v139 = v135 - 32;
              v137 = (char *)*((_QWORD *)v135 - 1);
              if (v135 - 32 != v137)
              {
                if (v137)
                {
                  v138 = 5;
LABEL_228:
                  (*(void (**)(void))(*(_QWORD *)v137 + 8 * v138))();
                }
                v135 = v139;
                if (v139 == v134)
                {
                  v136 = v279;
                  goto LABEL_234;
                }
                continue;
              }
              break;
            }
            v137 = v135 - 32;
            v138 = 4;
            goto LABEL_228;
          }
LABEL_235:
          if (v305 == v304)
          {
            v140 = 4;
LABEL_239:
            (*(void (**)(_QWORD *))(*v90 + 8 * v140))(v90);
          }
          else if (v305)
          {
            v140 = 5;
            v90 = v305;
            goto LABEL_239;
          }
          v141 = (uint64_t (***)())v303;
          if (v303 == (void **)&v300)
          {
            v142 = 4;
            v141 = &v300;
LABEL_244:
            (*v141)[v142]();
          }
          else if (v303)
          {
            v142 = 5;
            goto LABEL_244;
          }
          v143 = v283;
          if (v283)
          {
            v144 = v284;
            v145 = v283;
            if (v284 == v283)
            {
LABEL_255:
              v284 = v143;
              operator delete(v145);
              goto LABEL_256;
            }
            while (2)
            {
              v148 = v144 - 4;
              v146 = (_QWORD *)*(v144 - 1);
              if (v144 - 4 != v146)
              {
                if (v146)
                {
                  v147 = 5;
LABEL_249:
                  (*(void (**)(void))(*v146 + 8 * v147))();
                }
                v144 = v148;
                if (v148 == v143)
                {
                  v145 = v283;
                  goto LABEL_255;
                }
                continue;
              }
              break;
            }
            v146 = v144 - 4;
            v147 = 4;
            goto LABEL_249;
          }
LABEL_256:
          v149 = (char *)v281;
          if (v281)
          {
            v150 = v282;
            v151 = v281;
            if (v282 == v281)
            {
LABEL_266:
              v282 = v149;
              operator delete(v151);
              goto LABEL_267;
            }
            while (2)
            {
              v154 = v150 - 32;
              v152 = (char *)*((_QWORD *)v150 - 1);
              if (v150 - 32 != v152)
              {
                if (v152)
                {
                  v153 = 5;
LABEL_260:
                  (*(void (**)(void))(*(_QWORD *)v152 + 8 * v153))();
                }
                v150 = v154;
                if (v154 == v149)
                {
                  v151 = v281;
                  goto LABEL_266;
                }
                continue;
              }
              break;
            }
            v152 = v150 - 32;
            v153 = 4;
            goto LABEL_260;
          }
LABEL_267:
          v155 = v315;
          if (v315 == v314)
          {
            v156 = 4;
            v155 = v314;
LABEL_271:
            (*(void (**)(void))(*v155 + 8 * v156))();
          }
          else if (v315)
          {
            v156 = 5;
            goto LABEL_271;
          }
          v157 = *(char **)v4;
          v158 = *(_QWORD **)(v4 + 8);
          if (*(_QWORD **)v4 == v158)
          {
            v170 = *(char **)v4;
            goto LABEL_302;
          }
          v159 = (void ***)(v157 + 24);
          while (2)
          {
            v164 = (void **)(v159 - 3);
            v163 = *v159;
            if (*v159)
            {
              if (v164 == v163)
              {
                v299 = v298;
                (*((void (**)(void **, _QWORD *))**v159 + 3))(*v159, v298);
              }
              else
              {
                v299 = (_QWORD *)(*((uint64_t (**)(void **))*v163 + 2))(v163);
              }
            }
            else
            {
              v299 = 0;
            }
            operations_research::sat::IntegerValueSelectionHeuristic(v298, (uint64_t)this, (uint64_t)&v300);
            v165 = *v159;
            *v159 = 0;
            if (v164 == v165)
            {
              v165 = (void **)(v159 - 3);
              v166 = 4;
LABEL_286:
              (*((void (**)(void))*v165 + v166))();
            }
            else if (v165)
            {
              v166 = 5;
              goto LABEL_286;
            }
            v167 = v159;
            if (v303)
            {
              if (v303 != (void **)&v300)
              {
                *v159 = v303;
                v167 = &v303;
                goto LABEL_290;
              }
              *v159 = v164;
              (*((void (**)(void **, void ***))*v303 + 3))(v303, v159 - 3);
            }
            else
            {
LABEL_290:
              *v167 = 0;
            }
            v168 = (uint64_t (***)())v303;
            if (v303 == (void **)&v300)
            {
              v168 = &v300;
              v169 = 4;
LABEL_296:
              (*v168)[v169]();
            }
            else if (v303)
            {
              v169 = 5;
              goto LABEL_296;
            }
            v160 = v299;
            if (v299 != v298)
            {
              if (v299)
              {
                v161 = 5;
LABEL_275:
                (*(void (**)(void))(*v160 + 8 * v161))();
              }
              v162 = v159 + 1;
              v159 += 4;
              if (v162 == v158)
              {
                v157 = *(char **)v4;
                v170 = *(char **)(v4 + 8);
LABEL_302:
                v171 = operations_research::sat::Model::GetOrCreate<operations_research::sat::RestartPolicy>((uint64_t)this);
                v300 = &off_24F987140;
                v301 = (operations_research::sat::PseudoCosts *)v171;
                v303 = (void **)&v300;
                std::vector<std::function<BOOL ()(void)>>::assign((void **)(v4 + 24), (v170 - v157) >> 5, (void **)&v300);
                goto LABEL_336;
              }
              continue;
            }
            break;
          }
          v160 = v298;
          v161 = 4;
          goto LABEL_275;
        }
      }
    case 3:
      v294 = 0uLL;
      v295 = 0;
      v30 = (uint64_t **)operations_research::sat::Model::GetOrCreate<operations_research::sat::LinearProgrammingConstraintCollection>((uint64_t)this);
      v31 = *v30;
      v32 = v30[1];
      if (*v30 == v32)
        goto LABEL_67;
      while (1)
      {
        operations_research::sat::LinearProgrammingConstraint::LPReducedCostAverageBranching(*v31, &v300);
        v35 = *((_QWORD *)&v294 + 1);
        if (*((_QWORD *)&v294 + 1) >= v295)
        {
          *((_QWORD *)&v294 + 1) = std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__push_back_slow_path<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>((uint64_t *)&v294, &v300);
          v33 = (uint64_t (***)())v303;
          if (v303 == (void **)&v300)
            goto LABEL_45;
          goto LABEL_58;
        }
        if (!v303)
          break;
        if (v303 != (void **)&v300)
        {
          *(_QWORD *)(*((_QWORD *)&v294 + 1) + 24) = v303;
          v36 = &v303;
          goto LABEL_55;
        }
        *(_QWORD *)(*((_QWORD *)&v294 + 1) + 24) = *((_QWORD *)&v294 + 1);
        (*((void (**)(void **, uint64_t))*v303 + 3))(v303, v35);
        *((_QWORD *)&v294 + 1) = v35 + 32;
        v33 = (uint64_t (***)())v303;
        if (v303 == (void **)&v300)
        {
LABEL_45:
          v33 = &v300;
          v34 = 4;
          goto LABEL_46;
        }
LABEL_58:
        if (!v33)
          goto LABEL_47;
        v34 = 5;
LABEL_46:
        (*v33)[v34]();
LABEL_47:
        if (++v31 == v32)
        {
LABEL_67:
          if ((_QWORD)v294 != *((_QWORD *)&v294 + 1))
          {
            v40 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)this);
            v41 = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)this);
            v42 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatDecisionPolicy>((uint64_t)this);
            v43 = (void **)operator new(0x20uLL);
            *v43 = &off_24F986B18;
            v43[1] = v40;
            v43[2] = (void *)v41;
            v43[3] = v42;
            v303 = v43;
            v44 = v304;
            v45 = *(_QWORD *)(v4 + 80);
            if (!v45)
              goto LABEL_71;
            if (v45 == v12)
            {
              v305 = v304;
              (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v12 + 24))(v4 + 56, v304);
            }
            else
            {
              v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 16))(v45);
LABEL_71:
              v305 = (_QWORD *)v45;
            }
            std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::vector[abi:ne180100](&v275, (uint64_t)&v300, 2uLL);
            v310 = 0uLL;
            v311 = 0;
            std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>(&v310, (uint64_t)v275, (uint64_t)v276, (v276 - (_BYTE *)v275) >> 5);
            v315 = 0;
            v189 = (char *)operator new(0x20uLL);
            *(_QWORD *)v189 = &off_24F9867D0;
            *(_OWORD *)(v189 + 8) = v310;
            *((_QWORD *)v189 + 3) = v311;
            v315 = v189;
            operations_research::sat::CompleteHeuristics((uint64_t *)&v294, v314, (uint64_t)&v286);
            v190 = *(char **)v4;
            if (*(_QWORD *)v4)
            {
              v191 = *(char **)(v4 + 8);
              v192 = *(char **)v4;
              if (v191 == v190)
              {
LABEL_353:
                *(_QWORD *)(v4 + 8) = v190;
                operator delete(v192);
                *(_QWORD *)v4 = 0;
                *(_QWORD *)(v4 + 8) = 0;
                *(_QWORD *)(v4 + 16) = 0;
                goto LABEL_354;
              }
              while (2)
              {
                v195 = v191 - 32;
                v193 = (char *)*((_QWORD *)v191 - 1);
                if (v191 - 32 != v193)
                {
                  if (v193)
                  {
                    v194 = 5;
LABEL_347:
                    (*(void (**)(void))(*(_QWORD *)v193 + 8 * v194))();
                  }
                  v191 = v195;
                  if (v195 == v190)
                  {
                    v192 = *(char **)v4;
                    goto LABEL_353;
                  }
                  continue;
                }
                break;
              }
              v193 = v191 - 32;
              v194 = 4;
              goto LABEL_347;
            }
LABEL_354:
            *(_OWORD *)v4 = v286;
            *(_QWORD *)(v4 + 16) = v287;
            v286 = 0uLL;
            v287 = 0;
            v196 = v315;
            if (v315 == v314)
            {
              v197 = 4;
              v196 = v314;
LABEL_358:
              (*(void (**)(void))(*v196 + 8 * v197))();
            }
            else if (v315)
            {
              v197 = 5;
              goto LABEL_358;
            }
            v198 = (char *)v275;
            if (v275)
            {
              v199 = v276;
              v200 = v275;
              if (v276 == v275)
              {
LABEL_369:
                v276 = v198;
                operator delete(v200);
                goto LABEL_370;
              }
              while (2)
              {
                v203 = v199 - 32;
                v201 = (char *)*((_QWORD *)v199 - 1);
                if (v199 - 32 != v201)
                {
                  if (v201)
                  {
                    v202 = 5;
LABEL_363:
                    (*(void (**)(void))(*(_QWORD *)v201 + 8 * v202))();
                  }
                  v199 = v203;
                  if (v203 == v198)
                  {
                    v200 = v275;
                    goto LABEL_369;
                  }
                  continue;
                }
                break;
              }
              v201 = v199 - 32;
              v202 = 4;
              goto LABEL_363;
            }
LABEL_370:
            if (v305 == v304)
            {
              v204 = 4;
LABEL_374:
              (*(void (**)(_QWORD *))(*v44 + 8 * v204))(v44);
            }
            else if (v305)
            {
              v204 = 5;
              v44 = v305;
              goto LABEL_374;
            }
            v205 = (uint64_t (***)())v303;
            if (v303 == (void **)&v300)
            {
              v206 = 4;
              v205 = &v300;
LABEL_379:
              (*v205)[v206]();
            }
            else if (v303)
            {
              v206 = 5;
              goto LABEL_379;
            }
            v209 = v4;
            v207 = *(char **)v4;
            v208 = *(_QWORD *)(v209 + 8);
            v210 = operations_research::sat::Model::GetOrCreate<operations_research::sat::RestartPolicy>((uint64_t)this);
            v300 = &off_24F987140;
            v301 = (operations_research::sat::PseudoCosts *)v210;
            v303 = (void **)&v300;
            std::vector<std::function<BOOL ()(void)>>::assign(v7, (v208 - (uint64_t)v207) >> 5, (void **)&v300);
            v211 = (uint64_t (***)())v303;
            if (v303 != (void **)&v300)
            {
LABEL_381:
              if (v211)
              {
                v212 = 5;
                goto LABEL_512;
              }
              goto LABEL_513;
            }
LABEL_511:
            v212 = 4;
            v211 = &v300;
LABEL_512:
            (*v211)[v212]();
LABEL_513:
            v263 = v294;
            if (!(_QWORD)v294)
              return;
            v264 = *((_QWORD *)&v294 + 1);
            v265 = (void *)v294;
            if (*((_QWORD *)&v294 + 1) == (_QWORD)v294)
            {
LABEL_523:
              *((_QWORD *)&v294 + 1) = v263;
              operator delete(v265);
              return;
            }
            while (2)
            {
              v268 = v264 - 32;
              v266 = *(_QWORD **)(v264 - 8);
              if ((_QWORD *)(v264 - 32) != v266)
              {
                if (v266)
                {
                  v267 = 5;
LABEL_517:
                  (*(void (**)(void))(*v266 + 8 * v267))();
                }
                v264 = v268;
                if (v268 == v263)
                {
                  v265 = (void *)v294;
                  goto LABEL_523;
                }
                continue;
              }
              break;
            }
            v266 = (_QWORD *)(v264 - 32);
            v267 = 4;
            goto LABEL_517;
          }
          v59 = *(_QWORD *)(v4 + 80);
          if (v59)
          {
            if (v59 != v12)
            {
              v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 16))(v59);
              goto LABEL_83;
            }
            v303 = (void **)&v300;
            (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v12 + 24))(v4 + 56, &v300);
          }
          else
          {
LABEL_83:
            v303 = (void **)v59;
          }
          v245 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)this);
          v246 = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)this);
          v247 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatDecisionPolicy>((uint64_t)this);
          v305 = 0;
          v248 = operator new(0x20uLL);
          *v248 = &off_24F986B18;
          v248[1] = v245;
          v248[2] = v246;
          v248[3] = v247;
          v305 = v248;
          std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::vector[abi:ne180100](&v277, (uint64_t)&v300, 2uLL);
          v310 = 0uLL;
          v311 = 0;
          std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>(&v310, (uint64_t)v277, (uint64_t)v278, (v278 - (_BYTE *)v277) >> 5);
          v315 = 0;
          v249 = (char *)operator new(0x20uLL);
          *(_QWORD *)v249 = &off_24F9867D0;
          *(_OWORD *)(v249 + 8) = v310;
          *((_QWORD *)v249 + 3) = v311;
          v315 = v249;
          std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__assign_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const*>((void **)v4, v314, v316, 1uLL);
          v250 = operations_research::sat::Model::GetOrCreate<operations_research::sat::RestartPolicy>((uint64_t)this);
          *(_QWORD *)&v310 = &off_24F987140;
          *((_QWORD *)&v310 + 1) = v250;
          v312 = (char *)&v310;
          std::vector<std::function<BOOL ()(void)>>::__assign_with_size[abi:ne180100]<std::function<BOOL ()(void)> const*,std::function<BOOL ()(void)> const*>((void **)(v4 + 24), &v310, &v313, 1uLL);
          v251 = v312;
          if (v312 == (char *)&v310)
          {
            v252 = 4;
            v251 = (char *)&v310;
LABEL_488:
            (*(void (**)(void))(*(_QWORD *)v251 + 8 * v252))();
          }
          else if (v312)
          {
            v252 = 5;
            goto LABEL_488;
          }
          v253 = v315;
          if (v315 == v314)
          {
            v254 = 4;
            v253 = v314;
LABEL_493:
            (*(void (**)(void))(*v253 + 8 * v254))();
          }
          else if (v315)
          {
            v254 = 5;
            goto LABEL_493;
          }
          v255 = (char *)v277;
          if (v277)
          {
            v256 = v278;
            v257 = v277;
            if (v278 == v277)
            {
LABEL_504:
              v278 = v255;
              operator delete(v257);
              goto LABEL_505;
            }
            while (2)
            {
              v260 = v256 - 32;
              v258 = (char *)*((_QWORD *)v256 - 1);
              if (v256 - 32 != v258)
              {
                if (v258)
                {
                  v259 = 5;
LABEL_498:
                  (*(void (**)(void))(*(_QWORD *)v258 + 8 * v259))();
                }
                v256 = v260;
                if (v260 == v255)
                {
                  v257 = v277;
                  goto LABEL_504;
                }
                continue;
              }
              break;
            }
            v258 = v256 - 32;
            v259 = 4;
            goto LABEL_498;
          }
LABEL_505:
          v261 = v305;
          if (v305 == v304)
          {
            v262 = 4;
            v261 = v304;
LABEL_509:
            (*(void (**)(void))(*v261 + 8 * v262))();
          }
          else if (v305)
          {
            v262 = 5;
            goto LABEL_509;
          }
          v211 = (uint64_t (***)())v303;
          if (v303 != (void **)&v300)
            goto LABEL_381;
          goto LABEL_511;
        }
      }
      v36 = (void ***)(*((_QWORD *)&v294 + 1) + 24);
LABEL_55:
      *v36 = 0;
      *((_QWORD *)&v294 + 1) = v35 + 32;
      v33 = (uint64_t (***)())v303;
      if (v303 == (void **)&v300)
        goto LABEL_45;
      goto LABEL_58;
    case 4:
      v22 = (_QWORD *)*((_QWORD *)this + 4);
      if (!v22)
        goto LABEL_72;
      v23 = (_QWORD *)((char *)this + 32);
      do
      {
        v24 = v22[4];
        v25 = v24 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::ObjectiveDefinition>(void)::d;
        if (v24 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::ObjectiveDefinition>(void)::d)
          v26 = v22;
        else
          v26 = v22 + 1;
        if (v25)
          v23 = v22;
        v22 = (_QWORD *)*v26;
      }
      while (*v26);
      if (v23 == (_QWORD *)((char *)this + 32)
        || v23[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::ObjectiveDefinition>(void)::d
        || (v27 = v23[5]) == 0
        || *(_DWORD *)(v27 + 16) == -1)
      {
LABEL_72:
        v300 = &off_24F986B98;
      }
      else
      {
        v300 = &off_24F986C50;
        v301 = operations_research::sat::Model::GetOrCreate<operations_research::sat::PseudoCosts>((uint64_t)this);
        v302 = this;
      }
      v303 = (void **)&v300;
      v46 = v304;
      v47 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)this);
      v48 = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)this);
      v49 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatDecisionPolicy>((uint64_t)this);
      v305 = 0;
      v50 = operator new(0x20uLL);
      *v50 = &off_24F986B18;
      v50[1] = v47;
      v50[2] = v48;
      v50[3] = v49;
      v305 = v50;
      v51 = v306;
      v52 = *(_QWORD *)(v4 + 80);
      if (!v52)
        goto LABEL_76;
      if (v52 == v12)
      {
        v307 = v306;
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v12 + 24))(v4 + 56, v306);
      }
      else
      {
        v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 16))(v52);
LABEL_76:
        v307 = (_BYTE *)v52;
      }
      std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::vector[abi:ne180100](&v273, (uint64_t)&v300, 3uLL);
      v310 = 0uLL;
      v311 = 0;
      std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>(&v310, (uint64_t)v273, (uint64_t)v274, (v274 - (_BYTE *)v273) >> 5);
      v315 = 0;
      v104 = (char *)operator new(0x20uLL);
      *(_QWORD *)v104 = &off_24F9867D0;
      *(_OWORD *)(v104 + 8) = v310;
      *((_QWORD *)v104 + 3) = v311;
      v315 = v104;
      v105 = (char *)v273;
      if (!v273)
        goto LABEL_169;
      v106 = v274;
      v107 = v273;
      if (v274 == v273)
        goto LABEL_168;
      while (1)
      {
        v110 = v106 - 32;
        v108 = (char *)*((_QWORD *)v106 - 1);
        if (v106 - 32 == v108)
        {
          v108 = v106 - 32;
          v109 = 4;
        }
        else
        {
          if (!v108)
            goto LABEL_163;
          v109 = 5;
        }
        (*(void (**)(void))(*(_QWORD *)v108 + 8 * v109))();
LABEL_163:
        v106 = v110;
        if (v110 == v105)
        {
          v107 = v273;
LABEL_168:
          v274 = v105;
          operator delete(v107);
LABEL_169:
          if (v307 == v306)
          {
            v111 = 4;
LABEL_173:
            (*(void (**)(_QWORD *))(*v51 + 8 * v111))(v51);
          }
          else if (v307)
          {
            v111 = 5;
            v51 = v307;
            goto LABEL_173;
          }
          if (v305 == v304)
          {
            v112 = 4;
LABEL_178:
            (*(void (**)(_QWORD *))(*v46 + 8 * v112))(v46);
          }
          else if (v305)
          {
            v112 = 5;
            v46 = v305;
            goto LABEL_178;
          }
          v113 = (uint64_t (***)())v303;
          if (v303 == (void **)&v300)
          {
            v114 = 4;
            v113 = &v300;
LABEL_183:
            (*v113)[v114]();
          }
          else if (v303)
          {
            v114 = 5;
            goto LABEL_183;
          }
          v115 = (uint64_t)v315;
          if (v315)
          {
            if (v315 != v314)
            {
              v115 = (*(uint64_t (**)(void))(*v315 + 16))();
              goto LABEL_187;
            }
            v297 = v296;
            (*(void (**)(_QWORD *, _QWORD *))(v314[0] + 24))(v314, v296);
          }
          else
          {
LABEL_187:
            v297 = (_QWORD *)v115;
          }
          operations_research::sat::IntegerValueSelectionHeuristic(v296, (uint64_t)this, (uint64_t)&v300);
          std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__assign_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const*>((void **)v4, &v300, v304, 1uLL);
          v120 = (uint64_t (***)())v303;
          if (v303 == (void **)&v300)
          {
            v121 = 4;
            v120 = &v300;
LABEL_200:
            (*v120)[v121]();
          }
          else if (v303)
          {
            v121 = 5;
            goto LABEL_200;
          }
          v122 = v297;
          if (v297 == v296)
          {
            v123 = 4;
            v122 = v296;
LABEL_205:
            (*(void (**)(void))(*v122 + 8 * v123))();
          }
          else if (v297)
          {
            v123 = 5;
            goto LABEL_205;
          }
          v124 = operations_research::sat::Model::GetOrCreate<operations_research::sat::RestartPolicy>((uint64_t)this);
          v300 = &off_24F987140;
          v301 = (operations_research::sat::PseudoCosts *)v124;
          v303 = (void **)&v300;
          std::vector<std::function<BOOL ()(void)>>::__assign_with_size[abi:ne180100]<std::function<BOOL ()(void)> const*,std::function<BOOL ()(void)> const*>((void **)(v4 + 24), &v300, v304, 1uLL);
LABEL_471:
          v243 = (uint64_t (***)())v303;
          if (v303 == (void **)&v300)
          {
            v244 = 4;
            v243 = &v300;
LABEL_475:
            (*v243)[v244]();
          }
          else if (v303)
          {
            v244 = 5;
            goto LABEL_475;
          }
          v185 = (uint64_t (***)())v315;
          if (v315 != v314)
            goto LABEL_477;
          v186 = 4;
          v185 = (uint64_t (***)())v314;
LABEL_480:
          (*v185)[v186]();
          return;
        }
      }
    case 5:
      operations_research::sat::RandomizeOnRestartHeuristic(this, (uint64_t)&v300);
      v37 = v304;
      v38 = *(_QWORD *)(v4 + 80);
      if (!v38)
        goto LABEL_63;
      if (v38 == v12)
      {
        v305 = v304;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v12 + 24))(v4 + 56, v304);
      }
      else
      {
        v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38);
LABEL_63:
        v305 = (_QWORD *)v38;
      }
      std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::vector[abi:ne180100](&v271, (uint64_t)&v300, 2uLL);
      v310 = 0uLL;
      v311 = 0;
      std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>(&v310, (uint64_t)v271, (uint64_t)v272, (v272 - (_BYTE *)v271) >> 5);
      v315 = 0;
      v93 = (char *)operator new(0x20uLL);
      *(_QWORD *)v93 = &off_24F9867D0;
      *(_OWORD *)(v93 + 8) = v310;
      *((_QWORD *)v93 + 3) = v311;
      v315 = v93;
      v94 = (char *)v271;
      if (!v271)
        goto LABEL_143;
      v95 = v272;
      v96 = v271;
      if (v272 == v271)
        goto LABEL_142;
      while (1)
      {
        v99 = v95 - 32;
        v97 = (char *)*((_QWORD *)v95 - 1);
        if (v95 - 32 == v97)
        {
          v97 = v95 - 32;
          v98 = 4;
        }
        else
        {
          if (!v97)
            goto LABEL_137;
          v98 = 5;
        }
        (*(void (**)(void))(*(_QWORD *)v97 + 8 * v98))();
LABEL_137:
        v95 = v99;
        if (v99 == v94)
        {
          v96 = v271;
LABEL_142:
          v272 = v94;
          operator delete(v96);
LABEL_143:
          if (v305 == v304)
          {
            v100 = 4;
LABEL_147:
            (*(void (**)(_QWORD *))(*v37 + 8 * v100))(v37);
          }
          else if (v305)
          {
            v100 = 5;
            v37 = v305;
            goto LABEL_147;
          }
          v101 = (uint64_t (***)())v303;
          if (v303 == (void **)&v300)
          {
            v102 = 4;
            v101 = &v300;
LABEL_152:
            (*v101)[v102]();
          }
          else if (v303)
          {
            v102 = 5;
            goto LABEL_152;
          }
          v103 = (uint64_t)v315;
          if (v315)
          {
            if (v315 != v314)
            {
              v103 = (*(uint64_t (**)(_QWORD *))(*v315 + 16))(v315);
              goto LABEL_156;
            }
            v303 = (void **)&v300;
            (*(void (**)(_QWORD *, uint64_t (***)()))(v314[0] + 24))(v314, &v300);
          }
          else
          {
LABEL_156:
            v303 = (void **)v103;
          }
          std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__assign_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const*>((void **)v4, &v300, v304, 1uLL);
          v116 = (uint64_t (***)())v303;
          if (v303 == (void **)&v300)
          {
            v117 = 4;
            v116 = &v300;
LABEL_193:
            (*v116)[v117]();
          }
          else if (v303)
          {
            v117 = 5;
            goto LABEL_193;
          }
          v118 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)this);
          v119 = operator new(0x20uLL);
          *(_QWORD *)v119 = &off_24F987088;
          v119[8] = 1;
          *((_DWORD *)v119 + 3) = 0;
          *((_QWORD *)v119 + 2) = v118;
          *((_DWORD *)v119 + 6) = 10;
          v303 = (void **)v119;
          std::vector<std::function<BOOL ()(void)>>::__assign_with_size[abi:ne180100]<std::function<BOOL ()(void)> const*,std::function<BOOL ()(void)> const*>((void **)(v4 + 24), &v300, v304, 1uLL);
          goto LABEL_471;
        }
      }
    case 6:
      v39 = *(_QWORD *)(v4 + 112);
      if (v39)
      {
        if (v39 == v4 + 88)
        {
          v303 = (void **)&v300;
          (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(v4 + 88) + 24))(v4 + 88, &v300);
        }
        else
        {
          v303 = (void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 16))(v39);
        }
        v60 = v304;
        v61 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)this);
        v62 = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)this);
        v63 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatDecisionPolicy>((uint64_t)this);
        v305 = 0;
        v64 = operator new(0x20uLL);
        *v64 = &off_24F986B18;
        v64[1] = v61;
        v64[2] = v62;
        v64[3] = v63;
        v305 = v64;
        v65 = v306;
        v66 = *(_QWORD *)(v4 + 80);
        if (v66)
        {
          if (v66 == v12)
          {
            v307 = v306;
            (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v12 + 24))(v4 + 56, v306);
LABEL_304:
            std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::vector[abi:ne180100](&v288, (uint64_t)&v300, 3uLL);
            v310 = 0uLL;
            v311 = 0;
            std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>(&v310, (uint64_t)v288, (uint64_t)v289, (v289 - (_BYTE *)v288) >> 5);
            v315 = 0;
            v172 = (char *)operator new(0x20uLL);
            *(_QWORD *)v172 = &off_24F9867D0;
            *(_OWORD *)(v172 + 8) = v310;
            *((_QWORD *)v172 + 3) = v311;
            v315 = v172;
            std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__assign_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const*>((void **)v4, v314, v316, 1uLL);
            v173 = v315;
            if (v315 == v314)
            {
              v174 = 4;
              v173 = v314;
            }
            else
            {
              if (!v315)
              {
LABEL_309:
                v175 = (char *)v288;
                if (!v288)
                  goto LABEL_320;
                v176 = v289;
                v177 = v288;
                if (v289 == v288)
                {
LABEL_319:
                  v289 = v175;
                  operator delete(v177);
LABEL_320:
                  if (v307 == v306)
                  {
                    v181 = 4;
                  }
                  else
                  {
                    if (!v307)
                      goto LABEL_325;
                    v181 = 5;
                    v65 = v307;
                  }
                  (*(void (**)(_QWORD *))(*v65 + 8 * v181))(v65);
LABEL_325:
                  if (v305 == v304)
                  {
                    v182 = 4;
                  }
                  else
                  {
                    if (!v305)
                      goto LABEL_330;
                    v182 = 5;
                    v60 = v305;
                  }
                  (*(void (**)(_QWORD *))(*v60 + 8 * v182))(v60);
LABEL_330:
                  v183 = (uint64_t (***)())v303;
                  if (v303 == (void **)&v300)
                  {
                    v184 = 4;
                    v183 = &v300;
                  }
                  else
                  {
                    if (!v303)
                    {
LABEL_335:
                      v300 = &off_24F987240;
                      v303 = (void **)&v300;
                      std::vector<std::function<BOOL ()(void)>>::__assign_with_size[abi:ne180100]<std::function<BOOL ()(void)> const*,std::function<BOOL ()(void)> const*>(v7, &v300, v304, 1uLL);
                      goto LABEL_336;
                    }
                    v184 = 5;
                  }
                  (*v183)[v184]();
                  goto LABEL_335;
                }
                while (1)
                {
                  v180 = v176 - 32;
                  v178 = (char *)*((_QWORD *)v176 - 1);
                  if (v176 - 32 == v178)
                  {
                    v178 = v176 - 32;
                    v179 = 4;
                  }
                  else
                  {
                    if (!v178)
                      goto LABEL_314;
                    v179 = 5;
                  }
                  (*(void (**)(void))(*(_QWORD *)v178 + 8 * v179))();
LABEL_314:
                  v176 = v180;
                  if (v180 == v175)
                  {
                    v177 = v288;
                    goto LABEL_319;
                  }
                }
              }
              v174 = 5;
            }
            (*(void (**)(void))(*v173 + 8 * v174))();
            goto LABEL_309;
          }
          v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v66 + 16))(v66);
        }
        v307 = (_BYTE *)v66;
        goto LABEL_304;
      }
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v300, (google::glog_internal_namespace_ *)"./ortools/sat/integer_search.cc", 574);
      v270 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v300);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v270, (uint64_t)"Check failed: heuristics.hint_search != nullptr ", 48);
      break;
    default:
      return;
  }
LABEL_526:
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v300);
}

void sub_22DB790F4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void operations_research::sat::CompleteHeuristics(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  void *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  void *__p;
  char *v26;
  __int128 v27;
  uint64_t v28;
  _BYTE v29[24];
  _BYTE *v30;
  _BYTE v31[24];
  _BYTE *v32;
  _QWORD v33[3];
  _QWORD *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::reserve((char **)a3, (a1[1] - *a1) >> 5);
  v6 = *a1;
  v7 = a1[1];
  if (*a1 != v7)
  {
    while (1)
    {
      v10 = *(_QWORD *)(v6 + 24);
      if (!v10)
        goto LABEL_9;
      if (v10 != v6)
        break;
      v30 = v29;
      (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v6 + 24) + 24))(*(_QWORD *)(v6 + 24), v29);
LABEL_11:
      v11 = a2[3];
      if (!v11)
        goto LABEL_14;
      if ((_QWORD *)v11 != a2)
      {
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
LABEL_14:
        v32 = (_BYTE *)v11;
        goto LABEL_16;
      }
      v32 = v31;
      (*(void (**)(_QWORD *, _BYTE *))(*a2 + 24))(a2, v31);
LABEL_16:
      std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::vector[abi:ne180100](&__p, (uint64_t)v29, 2uLL);
      v27 = 0uLL;
      v28 = 0;
      std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>(&v27, (uint64_t)__p, (uint64_t)v26, (v26 - (_BYTE *)__p) >> 5);
      v34 = 0;
      v12 = (char *)operator new(0x20uLL);
      *(_QWORD *)v12 = &off_24F9867D0;
      *(_OWORD *)(v12 + 8) = v27;
      *((_QWORD *)v12 + 3) = v28;
      v34 = v12;
      v13 = *(_QWORD *)(a3 + 8);
      if (v13 < *(_QWORD *)(a3 + 16))
      {
        *(_QWORD *)(v13 + 24) = v12;
        v34 = 0;
        *(_QWORD *)(a3 + 8) = v13 + 32;
        goto LABEL_23;
      }
      v14 = std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__push_back_slow_path<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>((uint64_t *)a3, v33);
      v15 = v34;
      *(_QWORD *)(a3 + 8) = v14;
      if (v15 == v33)
      {
        v15 = v33;
        v16 = 4;
      }
      else
      {
        if (!v15)
          goto LABEL_23;
        v16 = 5;
      }
      (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_23:
      v17 = (char *)__p;
      if (!__p)
        goto LABEL_34;
      v18 = v26;
      v19 = __p;
      if (v26 != __p)
      {
        while (1)
        {
          v22 = v18 - 32;
          v20 = (char *)*((_QWORD *)v18 - 1);
          if (v18 - 32 == v20)
          {
            v20 = v18 - 32;
            v21 = 4;
          }
          else
          {
            if (!v20)
              goto LABEL_28;
            v21 = 5;
          }
          (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_28:
          v18 = v22;
          if (v22 == v17)
          {
            v19 = __p;
            break;
          }
        }
      }
      v26 = v17;
      operator delete(v19);
LABEL_34:
      v23 = v32;
      if (v32 == v31)
      {
        v23 = v31;
        v24 = 4;
      }
      else
      {
        if (!v32)
          goto LABEL_39;
        v24 = 5;
      }
      (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_39:
      v8 = v30;
      if (v30 == v29)
      {
        v8 = v29;
        v9 = 4;
      }
      else
      {
        if (!v30)
          goto LABEL_5;
        v9 = 5;
      }
      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_5:
      v6 += 32;
      if (v6 == v7)
        return;
    }
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
LABEL_9:
    v30 = (_BYTE *)v10;
    goto LABEL_11;
  }
}

void sub_22DB79B88(_Unwind_Exception *a1)
{
  void **v1;

  std::vector<std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_22DB79B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23,char a24,uint64_t a25,uint64_t a26,char *a27)
{
  void **v27;
  _QWORD *v28;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;

  v30 = a27;
  if (a27 == &a24)
  {
    v31 = 4;
    v30 = &a24;
  }
  else
  {
    if (!a27)
      goto LABEL_8;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_8:
  std::vector<std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>>::~vector[abi:ne180100](&a10);
  if (a23 == v28)
  {
    v33 = 4;
  }
  else
  {
    if (!a23)
      goto LABEL_13;
    v33 = 5;
    v28 = a23;
  }
  (*(void (**)(_QWORD *))(*v28 + 8 * v33))(v28);
LABEL_13:
  v34 = a19;
  if (a19 == &a16)
  {
    v32 = 4;
    v34 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_16;
    v32 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v34 + 8 * v32))();
LABEL_16:
  std::vector<std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>>::~vector[abi:ne180100](v27);
  _Unwind_Resume(a1);
}

void **std::vector<std::function<BOOL ()(void)>>::assign(void **result, unint64_t a2, void **a3)
{
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD v35[3];
  void **v36;
  uint64_t v37;

  v5 = result;
  v37 = *MEMORY[0x24BDAC8D0];
  v6 = (uint64_t)result[2];
  v7 = *result;
  if (a2 <= (v6 - (uint64_t)*result) >> 5)
  {
    v13 = (_BYTE *)result[1] - (_BYTE *)v7;
    v14 = v13 >> 5;
    if (v13 >> 5 >= a2)
      v15 = a2;
    else
      v15 = v13 >> 5;
    for (; v15; --v15)
    {
      v17 = (void **)a3[3];
      if (v17)
      {
        if (v17 == a3)
        {
          v36 = (void **)v35;
          (*((void (**)(void **, _QWORD *))*a3 + 3))(a3, v35);
        }
        else
        {
          v36 = (void **)(*((uint64_t (**)(void **))*v17 + 2))(v17);
        }
      }
      else
      {
        v36 = 0;
      }
      std::__function::__value_func<BOOL ()(void)>::swap[abi:ne180100](v35, v7);
      result = v36;
      if (v36 == v35)
      {
        result = (void **)v35;
        v16 = 4;
      }
      else
      {
        if (!v36)
          goto LABEL_18;
        v16 = 5;
      }
      result = (void **)(*((uint64_t (**)(void))*result + v16))();
LABEL_18:
      v7 += 4;
    }
    if (a2 > v14)
    {
      v18 = v5[1];
      v19 = (char *)&v18[4 * (a2 - v14)];
      v20 = 32 * a2 - 32 * v14;
      while (1)
      {
        result = (void **)a3[3];
        if (result)
        {
          if (result == a3)
          {
            v18[3] = v18;
            result = (void **)(*(uint64_t (**)(void *, _QWORD *))(*(_QWORD *)a3[3] + 24))(a3[3], v18);
            goto LABEL_31;
          }
          result = (void **)(*((uint64_t (**)(void **))*result + 2))(result);
        }
        v18[3] = result;
LABEL_31:
        v18 += 4;
        v20 -= 32;
        if (!v20)
        {
          v5[1] = v19;
          return result;
        }
      }
    }
    v21 = v5[1];
    v22 = (uint64_t)*v5 + 32 * a2;
    if (v21 == (_QWORD *)v22)
    {
LABEL_36:
      v5[1] = (void *)v22;
      return result;
    }
    while (1)
    {
      v24 = v21 - 4;
      result = (void **)*(v21 - 1);
      if (v21 - 4 == result)
      {
        result = (void **)(v21 - 4);
        v23 = 4;
      }
      else
      {
        if (!result)
          goto LABEL_39;
        v23 = 5;
      }
      result = (void **)(*((uint64_t (**)(void))*result + v23))();
LABEL_39:
      v21 = v24;
      if (v24 == (_QWORD *)v22)
        goto LABEL_36;
    }
  }
  if (!v7)
    goto LABEL_46;
  v8 = result[1];
  v9 = *result;
  if (v8 != v7)
  {
    while (1)
    {
      v12 = v8 - 4;
      v10 = (_QWORD *)*(v8 - 1);
      if (v8 - 4 == v10)
      {
        v10 = v8 - 4;
        v11 = 4;
      }
      else
      {
        if (!v10)
          goto LABEL_7;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_7:
      v8 = v12;
      if (v12 == v7)
      {
        v9 = *v5;
        break;
      }
    }
  }
  v5[1] = v7;
  operator delete(v9);
  v6 = 0;
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
LABEL_46:
  if (a2 >> 59)
    goto LABEL_67;
  v25 = v6 >> 4;
  if (v6 >> 4 <= a2)
    v25 = a2;
  v26 = (unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0;
  v27 = 0x7FFFFFFFFFFFFFFLL;
  if (!v26)
    v27 = v25;
  if (v27 >> 59)
LABEL_67:
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v28 = 32 * v27;
  v29 = (char *)operator new(32 * v27);
  *v5 = v29;
  v5[1] = v29;
  v5[2] = &v29[v28];
  v30 = &v29[32 * a2];
  result = (void **)a3[3];
  if (result)
  {
    v31 = 32 * a2 - 32;
LABEL_54:
    if (result != a3)
    {
      result = (void **)(*((uint64_t (**)(void **))*result + 2))(result);
      goto LABEL_56;
    }
    *((_QWORD *)v29 + 3) = v29;
    result = (void **)(*((uint64_t (**)(void **, char *))*a3 + 3))(a3, v29);
    while (v31)
    {
      v29 += 32;
      result = (void **)a3[3];
      v31 -= 32;
      if (result)
        goto LABEL_54;
LABEL_56:
      *((_QWORD *)v29 + 3) = result;
    }
  }
  else
  {
    if (((a2 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0)
      goto LABEL_70;
    v32 = ((a2 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
    v33 = v29 + 56;
    v34 = v32 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      *(v33 - 4) = 0;
      *v33 = 0;
      v33 += 8;
      v34 -= 2;
    }
    while (v34);
    v29 += 32 * (v32 & 0xFFFFFFFFFFFFFFELL);
    if (v32 != (v32 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_70:
      do
      {
        *((_QWORD *)v29 + 3) = 0;
        v29 += 32;
      }
      while (v29 != v30);
    }
  }
  v5[1] = v30;
  return result;
}

void sub_22DB79FF0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_22DB79FF8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *operations_research::sat::Model::GetOrCreate<operations_research::sat::SearchHeuristicsVector>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v19;

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 32);
  if (!v2)
    goto LABEL_12;
  v4 = (_QWORD *)(a1 + 32);
  do
  {
    v5 = v2[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SearchHeuristicsVector>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SearchHeuristicsVector>(void)::d)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 != v3
    && v4[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SearchHeuristicsVector>(void)::d)
  {
    return (_QWORD *)v4[5];
  }
LABEL_12:
  v8 = (_QWORD *)operator new();
  v8[1] = 0;
  v8[2] = 0;
  *v8 = 0;
  v9 = (_QWORD *)*v3;
  v10 = v3;
  if (*v3)
  {
    while (1)
    {
      while (1)
      {
        v10 = v9;
        v11 = v9[4];
        if (v11 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SearchHeuristicsVector>(void)::d)
          break;
        v9 = (_QWORD *)*v10;
        v3 = v10;
        if (!*v10)
          goto LABEL_19;
      }
      if (v11 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SearchHeuristicsVector>(void)::d)
        break;
      v9 = (_QWORD *)v10[1];
      if (!v9)
      {
        v3 = v10 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v12 = v10;
    v10 = operator new(0x30uLL);
    v10[4] = &gtl::FastTypeId<operations_research::sat::SearchHeuristicsVector>(void)::d;
    v10[5] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v12;
    *v3 = v10;
    v13 = **(_QWORD **)(a1 + 24);
    v14 = v10;
    if (v13)
    {
      *(_QWORD *)(a1 + 24) = v13;
      v14 = (uint64_t *)*v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v14);
    ++*(_QWORD *)(a1 + 40);
  }
  v10[5] = v8;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24F9872C0;
  v15[1] = v8;
  v19 = v15;
  v16 = *(_QWORD **)(a1 + 56);
  if ((unint64_t)v16 >= *(_QWORD *)(a1 + 64))
  {
    v17 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a1 + 48), &v19);
  }
  else
  {
    *v16 = v15;
    v17 = (char *)(v16 + 1);
  }
  *(_QWORD *)(a1 + 56) = v17;
  return v8;
}

void std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::reserve(char **a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;

  v2 = *a1;
  if (a2 <= (a1[2] - *a1) >> 5)
    return;
  if (a2 >> 59)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v4 = a1[1];
  v5 = 32 * a2;
  v6 = (char *)operator new(32 * a2);
  v7 = &v6[v5];
  v8 = &v6[v4 - v2];
  if (v4 != v2)
  {
    v9 = 0;
    v10 = v4;
    while (1)
    {
      v12 = &v8[v9];
      v13 = &v4[v9];
      v14 = *(char **)&v4[v9 - 8];
      if (v14)
      {
        if (v13 - 32 == v14)
        {
          *((_QWORD *)v12 - 1) = v12 - 32;
          (*(void (**)(char *))(*((_QWORD *)v13 - 4) + 24))(v13 - 32);
          goto LABEL_7;
        }
        v11 = v10 - 8;
        *((_QWORD *)v12 - 1) = v14;
      }
      else
      {
        v11 = v12 - 8;
      }
      *(_QWORD *)v11 = 0;
LABEL_7:
      v10 -= 32;
      v9 -= 32;
      if (&v4[v9] == v2)
      {
        v15 = *a1;
        v2 = a1[1];
        *a1 = &v8[v9];
        a1[1] = v8;
        a1[2] = v7;
        if (v2 == v15)
        {
LABEL_21:
          if (v2)
            goto LABEL_22;
          return;
        }
        while (2)
        {
          v18 = v2 - 32;
          v16 = (char *)*((_QWORD *)v2 - 1);
          if (v2 - 32 != v16)
          {
            if (v16)
            {
              v17 = 5;
LABEL_15:
              (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
            }
            v2 -= 32;
            if (v18 == v15)
            {
              v2 = v15;
              goto LABEL_21;
            }
            continue;
          }
          break;
        }
        v16 = v2 - 32;
        v17 = 4;
        goto LABEL_15;
      }
    }
  }
  *a1 = v8;
  a1[1] = v8;
  a1[2] = v7;
  if (v2)
LABEL_22:
    operator delete(v2);
}

uint64_t operations_research::sat::SolveIntegerProblem(operations_research::sat *this, operations_research::sat::Model *a2)
{
  double *v3;
  double *v4;
  unsigned __int8 *v5;
  unsigned __int8 v6;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v8;
  int *v9;
  uint64_t v10;
  absl::lts_2020_02_25 *v11;
  double v12;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v13;
  double v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  BOOL v21;
  _QWORD *v22;
  uint64_t v23;
  operations_research::sat::SatSolver *v24;
  operations_research::sat::SatParameters *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned __int8 v29;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v30;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v31;
  uint64_t v32;
  absl::lts_2020_02_25 *v33;
  double v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  double v49;
  operations_research::sat::Model *v50;
  _QWORD *v51;
  _QWORD *v52;
  unint64_t v53;
  BOOL v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  operations_research::sat::Inprocessing *v60;
  operations_research::sat::SatDecisionPolicy *v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  void *v65;
  operations_research::sat::PseudoCosts *v66;
  _QWORD *v67;
  int v68;
  operations_research::sat::ImpliedBounds *v69;
  unint64_t v70;
  int v71;
  operations_research::sat::IntegerTrail *v72;
  operations_research::sat::SatParameters *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  operations_research::sat *v79;
  void *__p[3];
  int v81;
  uint64_t *v82[2];

  v3 = (double *)operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>((uint64_t)this);
  v4 = v3;
  v5 = (unsigned __int8 *)*((_QWORD *)v3 + 15);
  if (v5)
  {
    v6 = atomic_load(v5);
    if ((v6 & 1) != 0)
      return 3;
  }
  if (fmax(v3[13] - v3[14], 0.0) <= 0.0)
    return 3;
  CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)v3);
  v8 = CurrentTimeNanos;
  v9 = (int *)(v4 + 4);
  if (*((_QWORD *)v4 + 3) <= CurrentTimeNanos - *((_QWORD *)v4 + 1))
    v10 = CurrentTimeNanos - *((_QWORD *)v4 + 1);
  else
    v10 = *((_QWORD *)v4 + 3);
  operations_research::RunningMax<long long>::Add((int *)v4 + 8, v10);
  *((_QWORD *)v4 + 1) = v8;
  if (*(_QWORD *)(*((_QWORD *)v4 + 5) + 8 * *((int *)v4 + 17)) + v8 >= *((_QWORD *)v4 + 2))
  {
    if (!FLAGS_time_limit_use_usertime
      || ((v12 = v4[12], !*((_BYTE *)v4 + 72))
        ? (v13 = *((_QWORD *)v4 + 11))
        : (v13 = absl::lts_2020_02_25::GetCurrentTimeNanos(v11) - *((_QWORD *)v4 + 10) + *((_QWORD *)v4 + 11)),
          v14 = v12 + (double)v13 * -0.000000001,
          v14 <= 0.0001))
    {
LABEL_13:
      v4[2] = 0.0;
      return 3;
    }
    *((_QWORD *)v4 + 2) = *((_QWORD *)v4 + 1) + (uint64_t)(v14 * 1000000000.0);
  }
  v16 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SearchHeuristics>((uint64_t)this);
  v17 = (*(_QWORD *)(v16 + 8) - *(_QWORD *)v16) >> 5;
  LODWORD(__p[0]) = v17;
  LODWORD(v82[0]) = 0;
  if (!(_DWORD)v17)
  {
    v82[0] = (uint64_t *)google::MakeCheckOpString<int,int>((int)__p, (int)v82, "num_policies != 0");
    if (v82[0])
    {
      google::LogMessageFatal::LogMessageFatal((unint64_t *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/integer_search.cc", 661, v82);
      google::LogMessage::stream((google::LogMessage *)__p);
      goto LABEL_122;
    }
  }
  v81 = v17;
  __p[0] = (void *)((uint64_t)(*(_QWORD *)(v16 + 32) - *(_QWORD *)(v16 + 24)) >> 5);
  if (__p[0] != (void *)(int)v17)
  {
    v82[0] = (uint64_t *)google::MakeCheckOpString<int,unsigned long>((int)&v81, (int)__p, "num_policies == heuristics.restart_policies.size()");
    if (v82[0])
    {
      google::LogMessageFatal::LogMessageFatal((unint64_t *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/integer_search.cc", 662, v82);
      google::LogMessage::stream((google::LogMessage *)__p);
LABEL_122:
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)__p);
    }
  }
  v18 = (_QWORD *)*((_QWORD *)this + 4);
  if (v18)
  {
    v19 = (_QWORD *)((char *)this + 32);
    do
    {
      v20 = v18[4];
      v21 = v20 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::ObjectiveDefinition>(void)::d;
      if (v20 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::ObjectiveDefinition>(void)::d)
        v22 = v18;
      else
        v22 = v18 + 1;
      if (v21)
        v19 = v18;
      v18 = (_QWORD *)*v22;
    }
    while (*v22);
    if (v19 != (_QWORD *)((char *)this + 32)
      && v19[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::ObjectiveDefinition>(void)::d)
    {
      v23 = v19[5];
      if (v23)
      {
        v77 = *(_DWORD *)(v23 + 16);
        v24 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)this);
        if ((operations_research::sat::SatSolver::FinishPropagation(v24) & 1) == 0)
          return *((unsigned __int8 *)v24 + 496);
        goto LABEL_33;
      }
    }
  }
  v77 = -1;
  v24 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)this);
  if ((operations_research::sat::SatSolver::FinishPropagation(v24) & 1) != 0)
  {
LABEL_33:
    v67 = (_QWORD *)((char *)this + 32);
    v68 = v17;
    v66 = operations_research::sat::Model::GetOrCreate<operations_research::sat::PseudoCosts>((uint64_t)this);
    v72 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)this);
    v69 = (operations_research::sat::ImpliedBounds *)operations_research::sat::Model::GetOrCreate<operations_research::sat::ImpliedBounds>((uint64_t)this);
    v79 = this;
    v25 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)this);
    result = operations_research::sat::SatSolver::num_failures(v24);
    v75 = result;
    v26 = 0;
    v27 = 0;
    v73 = v25;
    v74 = *((_QWORD *)v25 + 36);
    v71 = v77 ^ 1;
    while (1)
    {
      v78 = result;
      v28 = (unsigned __int8 *)*((_QWORD *)v4 + 15);
      if (v28)
      {
        v29 = atomic_load(v28);
        if ((v29 & 1) != 0)
          return 3;
      }
      if (fmax(v4[13] - v4[14], 0.0) <= 0.0)
        return 3;
      v30 = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)result);
      v31 = v30;
      if (*((_QWORD *)v4 + 3) <= v30 - *((_QWORD *)v4 + 1))
        v32 = v30 - *((_QWORD *)v4 + 1);
      else
        v32 = *((_QWORD *)v4 + 3);
      operations_research::RunningMax<long long>::Add(v9, v32);
      *((_QWORD *)v4 + 1) = v31;
      if (*(_QWORD *)(*((_QWORD *)v4 + 5) + 8 * *((int *)v4 + 17)) + v31 >= *((_QWORD *)v4 + 2))
      {
        if (!FLAGS_time_limit_use_usertime)
          goto LABEL_13;
        v34 = v4[12];
        if (*((_BYTE *)v4 + 72))
        {
          v35 = v34
              + (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v33) - *((_QWORD *)v4 + 10) + *((_QWORD *)v4 + 11))
              * -0.000000001;
          if (v35 <= 0.0001)
            goto LABEL_13;
        }
        else
        {
          v35 = v34 + (double)*((uint64_t *)v4 + 11) * -0.000000001;
          if (v35 <= 0.0001)
            goto LABEL_13;
        }
        *((_QWORD *)v4 + 2) = *((_QWORD *)v4 + 1) + (uint64_t)(v35 * 1000000000.0);
      }
      if (operations_research::sat::SatSolver::num_failures(v24) - v75 >= v74)
        return 3;
      v36 = *(_QWORD *)(*(_QWORD *)(v16 + 24) + 32 * *(int *)(v16 + 48) + 24);
      if (!v36)
        goto LABEL_123;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v36 + 48))(v36))
      {
        if ((operations_research::sat::SatSolver::RestoreSolverToAssumptionLevel(v24) & 1) == 0)
          return *((unsigned __int8 *)v24 + 496);
        *(_DWORD *)(v16 + 48) = (*(_DWORD *)(v16 + 48) + 1) % v68;
      }
      if (!*((_DWORD *)v24 + 76))
      {
        if (!operations_research::sat::ImpliedBounds::EnqueueNewDeductions(v69))
          return 1;
        v56 = operations_research::sat::Model::GetOrCreate<operations_research::sat::LevelZeroCallbackHelper>((uint64_t)v79);
        v57 = *v56;
        v58 = v56[1];
        if (*v56 != v58)
        {
          while (1)
          {
            v59 = *(_QWORD *)(v57 + 24);
            if (!v59)
              break;
            if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 48))(v59) & 1) == 0)
              return 1;
            v57 += 32;
            if (v57 == v58)
              goto LABEL_97;
          }
LABEL_123:
          std::__throw_bad_function_call[abi:ne180100]();
        }
LABEL_97:
        if (*((_BYTE *)v73 + 135))
        {
          v60 = (operations_research::sat::Inprocessing *)operations_research::sat::Model::GetOrCreate<operations_research::sat::Inprocessing>((uint64_t)v79);
          if (!operations_research::sat::Inprocessing::InprocessingRound(v60))
            return 1;
        }
      }
      v76 = v27;
      while (1)
      {
        v37 = *(_QWORD *)(*(_QWORD *)v16 + 32 * *(int *)(v16 + 48) + 24);
        if (!v37)
          goto LABEL_123;
        while (1)
        {
          v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 48))(v37);
          if (v38 == -1)
          {
            v44 = v26;
            goto LABEL_70;
          }
          v39 = (unint64_t)v38 >> 6;
          v40 = 3 << (v38 & 0x3E);
          if ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v24 + 26) + 24) + 8 * v39) & v40) == 0)
            break;
          if (*operations_research::sat::SolveIntegerProblem(operations_research::sat::Model *)::vlocal__ >= 1
            && (operations_research::sat::SolveIntegerProblem(operations_research::sat::Model *)::vlocal__ != &google::kLogSiteUninitialized
             || google::InitVLOG3__((google *)&operations_research::sat::SolveIntegerProblem(operations_research::sat::Model *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/integer_search.cc", (const char *)1)))
          {
            google::LogMessage::LogMessage((google::LogMessage *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/integer_search.cc", 739);
            v41 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)__p);
            v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Trying to take a decision that is already assigned!", 51);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" Fix this. Continuing for now...", 32);
            google::LogMessage::~LogMessage((google::LogMessage *)__p);
          }
          v37 = *(_QWORD *)(*(_QWORD *)v16 + 32 * *(int *)(v16 + 48) + 24);
          if (!v37)
            goto LABEL_123;
        }
        if (*((_DWORD *)v24 + 76))
          break;
        v43 = *((_QWORD *)v73 + 20);
        if (v43 < 1)
          break;
        v44 = v26 + 1;
        if (v26 + 1 < v43)
          goto LABEL_70;
        LODWORD(__p[0]) = v38 >> 1;
        if (!operations_research::sat::ProbeBooleanVariables((_BOOL8)__p, 1, (uint64_t)v79, 0, 0.1))
          return 1;
        v26 = 0;
        v44 = 0;
        if ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v24 + 26) + 24) + 8 * v39) & v40) == 0)
          goto LABEL_70;
      }
      v44 = v26;
LABEL_70:
      operations_research::sat::GetBoundChanges(v38, (uint64_t)v79, __p);
      if (v77 == -1)
      {
        v70 = 0x8000000000000002;
        v46 = 0x7FFFFFFFFFFFFFFELL;
        if (v38 == -1)
        {
LABEL_101:
          if (*((_BYTE *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)v79)
               + 455))
          {
            v61 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatDecisionPolicy>((uint64_t)v79);
            v62 = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)v79);
            if (*(int *)(v62 + 12) >= 1)
            {
              v63 = 0;
              do
                operations_research::sat::SatDecisionPolicy::SetAssignmentPreference((uint64_t)v61, *(_DWORD *)(*(_QWORD *)(v62 + 72) + 4 * v63++), 0.0);
              while (v63 < *(int *)(v62 + 12));
            }
          }
          v64 = 0;
          v78 = 2;
          v65 = __p[0];
          if (!__p[0])
            goto LABEL_107;
          goto LABEL_106;
        }
      }
      else
      {
        v45 = *((_QWORD *)v72 + 5);
        v70 = *(_QWORD *)(v45 + 12 * v77);
        v46 = -*(_QWORD *)(v45 + 12 * v71);
        if (v38 == -1)
          goto LABEL_101;
      }
      v47 = *((_DWORD *)v24 + 76);
      operations_research::sat::SatSolver::EnqueueDecisionAndBackjumpOnConflict((uint64_t)v24, v38);
      v48 = *((_DWORD *)v24 + 76);
      if (!v47 && v48 == 1)
      {
        operations_research::sat::ImpliedBounds::ProcessIntegerTrail((uint64_t)v69, v38);
        v48 = *((_DWORD *)v24 + 76);
      }
      if (v77 != -1 && v48 > v47)
        operations_research::sat::PseudoCosts::UpdateCost(v66, (int **)__p, v46 - v70 + *(_QWORD *)(*((_QWORD *)v72 + 5) + 12 * v77) + *(_QWORD *)(*((_QWORD *)v72 + 5) + 12 * v71));
      v49 = operations_research::sat::SatSolver::deterministic_time(v24);
      v4[14] = v4[14] + v49 - *((double *)v24 + 163);
      *((double *)v24 + 163) = v49;
      if ((operations_research::sat::SatSolver::ReapplyAssumptionsIfNeeded(v24) & 1) != 0)
      {
        v51 = v67;
        v52 = (_QWORD *)*v67;
        if (*v67)
        {
          do
          {
            v53 = v52[4];
            v54 = v53 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedLPSolutionRepository>(void)::d;
            if (v53 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedLPSolutionRepository>(void)::d)
              v55 = v52;
            else
              v55 = v52 + 1;
            if (v54)
              v51 = v52;
            v52 = (_QWORD *)*v55;
          }
          while (*v55);
          if (v51 != v67
            && v51[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedLPSolutionRepository>(void)::d
            && v51[5])
          {
            if (v76 >= 99)
            {
              operations_research::sat::RecordLPRelaxationValues(v79, v50);
              v76 = 0;
            }
            else
            {
              ++v76;
            }
          }
        }
        v64 = 1;
        v65 = __p[0];
        if (!__p[0])
          goto LABEL_107;
      }
      else
      {
        v64 = 0;
        v78 = *((unsigned __int8 *)v24 + 496);
        v65 = __p[0];
        if (!__p[0])
          goto LABEL_107;
      }
LABEL_106:
      __p[1] = v65;
      operator delete(v65);
LABEL_107:
      v26 = v44;
      v9 = (int *)(v4 + 4);
      v27 = v76;
      result = v78;
      if ((v64 & 1) == 0)
        return result;
    }
  }
  return *((unsigned __int8 *)v24 + 496);
}

void sub_22DB7ABB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DB7ABBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DB7ABC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22DB7ABF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::Inprocessing>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v19;

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 32);
  if (!v2)
    goto LABEL_12;
  v4 = (_QWORD *)(a1 + 32);
  do
  {
    v5 = v2[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::Inprocessing>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::Inprocessing>(void)::d)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 != v3 && v4[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::Inprocessing>(void)::d)
    return v4[5];
LABEL_12:
  v8 = operations_research::sat::Model::MyNew<operations_research::sat::Inprocessing>(a1);
  v9 = *(_QWORD **)(a1 + 32);
  v10 = v3;
  if (v9)
  {
    while (1)
    {
      while (1)
      {
        v10 = v9;
        v11 = v9[4];
        if (v11 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::Inprocessing>(void)::d)
          break;
        v9 = (_QWORD *)*v10;
        v3 = v10;
        if (!*v10)
          goto LABEL_19;
      }
      if (v11 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::Inprocessing>(void)::d)
        break;
      v9 = (_QWORD *)v10[1];
      if (!v9)
      {
        v3 = v10 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v12 = v10;
    v10 = operator new(0x30uLL);
    v10[4] = &gtl::FastTypeId<operations_research::sat::Inprocessing>(void)::d;
    v10[5] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v12;
    *v3 = v10;
    v13 = **(_QWORD **)(a1 + 24);
    v14 = v10;
    if (v13)
    {
      *(_QWORD *)(a1 + 24) = v13;
      v14 = (uint64_t *)*v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v14);
    ++*(_QWORD *)(a1 + 40);
  }
  v10[5] = v8;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24F9873D8;
  v15[1] = v8;
  v19 = v15;
  v16 = *(_QWORD **)(a1 + 56);
  if ((unint64_t)v16 >= *(_QWORD *)(a1 + 64))
  {
    v17 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a1 + 48), &v19);
  }
  else
  {
    *v16 = v15;
    v17 = (char *)(v16 + 1);
  }
  *(_QWORD *)(a1 + 56) = v17;
  return v8;
}

uint64_t operations_research::sat::ResetAndSolveIntegerProblem(int **a1, operations_research::sat *a2)
{
  unsigned __int8 *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  operations_research::sat::Model *v9;

  v4 = (unsigned __int8 *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)a2);
  if ((operations_research::sat::SatSolver::ResetToLevelZero((operations_research::sat::SatSolver *)v4) & 1) == 0)
    return v4[496];
  v5 = operations_research::sat::Model::GetOrCreate<operations_research::sat::LevelZeroCallbackHelper>((uint64_t)a2);
  v6 = *v5;
  v7 = v5[1];
  if (*v5 == v7)
  {
LABEL_6:
    if ((operations_research::sat::SatSolver::ResetWithGivenAssumptions((uint64_t)v4, a1) & 1) != 0)
      return operations_research::sat::SolveIntegerProblem(a2, v9);
    return v4[496];
  }
  while (1)
  {
    v8 = *(_QWORD *)(v6 + 24);
    if (!v8)
      std::__throw_bad_function_call[abi:ne180100]();
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8) & 1) == 0)
      return 1;
    v6 += 32;
    if (v6 == v7)
      goto LABEL_6;
  }
}

_QWORD *std::__function::__func<operations_research::sat::FirstUnassignedVarAtItsMinHeuristic(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::FirstUnassignedVarAtItsMinHeuristic(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24F986750;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::FirstUnassignedVarAtItsMinHeuristic(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::FirstUnassignedVarAtItsMinHeuristic(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24F986750;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::FirstUnassignedVarAtItsMinHeuristic(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::FirstUnassignedVarAtItsMinHeuristic(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = operator new(0x30uLL);
  v2[1] = 0;
  *v2 = &off_24F986750;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[4 * (v5 >> 2)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  return v2;
}

void sub_22DB7AF64(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<operations_research::sat::FirstUnassignedVarAtItsMinHeuristic(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::FirstUnassignedVarAtItsMinHeuristic(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(__n128 *a1, __n128 *a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __n128 result;

  a2->n128_u64[1] = 0;
  a2->n128_u64[0] = (unint64_t)&off_24F986750;
  a2[1].n128_u64[0] = 0;
  a2[1].n128_u64[1] = 0;
  v5 = (_BYTE *)a1->n128_u64[1];
  v4 = (_BYTE *)a1[1].n128_u64[0];
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4 - v5);
    a2->n128_u64[1] = (unint64_t)v7;
    a2[1].n128_u64[0] = (unint64_t)v7;
    v8 = &v7[4 * (v6 >> 2)];
    a2[1].n128_u64[1] = (unint64_t)v8;
    memcpy(v7, v5, v6);
    a2[1].n128_u64[0] = (unint64_t)v8;
  }
  result = a1[2];
  a2[2] = result;
  return result;
}

void sub_22DB7B01C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::FirstUnassignedVarAtItsMinHeuristic(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::FirstUnassignedVarAtItsMinHeuristic(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::destroy(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<operations_research::sat::FirstUnassignedVarAtItsMinHeuristic(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::FirstUnassignedVarAtItsMinHeuristic(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

unint64_t std::__function::__func<operations_research::sat::FirstUnassignedVarAtItsMinHeuristic(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::FirstUnassignedVarAtItsMinHeuristic(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::operator()(uint64_t a1)
{
  int *v1;
  int *v2;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  unsigned int v9;
  int64_t v10;
  unint64_t result;

  v1 = *(int **)(a1 + 8);
  v2 = *(int **)(a1 + 16);
  if (v1 == v2)
    return 0xFFFFFFFFLL;
  while (1)
  {
    v4 = *v1;
    v5 = *(_QWORD **)(a1 + 32);
    v6 = *(int *)(v5[51] + 4 * v4);
    if ((_DWORD)v6 == -1
      || ((*(_QWORD *)(*(_QWORD *)(v5[117] + 24) + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    {
      v7 = v5[5];
      v8 = *(_QWORD *)(v7 + 12 * (int)v4);
      if (v8 + *(_QWORD *)(v7 + 12 * (int)(v4 ^ 1)))
      {
        v9 = v4 ^ 1;
        v10 = v8 >= (uint64_t)0x8000000000000002 ? -v8 : 0x7FFFFFFFFFFFFFFFLL;
        result = operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(*(unsigned int **)(a1 + 40), (const char *)__PAIR64__(v10, v9), SHIDWORD(v10));
        if ((_DWORD)result != -1)
          break;
      }
    }
    if (++v1 == v2)
      return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t std::__function::__func<operations_research::sat::FirstUnassignedVarAtItsMinHeuristic(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::FirstUnassignedVarAtItsMinHeuristic(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat35FirstUnassignedVarAtItsMinHeuristicERKNSt3__16vectorIN3gtl7IntTypeINS0"
                     "_20IntegerVariable_tag_EiEENS1_9allocatorIS6_EEEEPNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat35FirstUnassignedVarAtItsMinHeuristicERKNSt3__16vectorIN3gtl7"
                                "IntTypeINS0_20IntegerVariable_tag_EiEENS1_9allocatorIS6_EEEEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat35FirstUnassignedVarAtItsMinHeuristicERKNSt3__16vectorIN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS1_9allocatorIS6_EEEEPNS0_5ModelEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat35FirstUnassignedVarAtItsMinHeuristicERKNSt3__16vectorIN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS1_9allocatorIS6_EEEEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::FirstUnassignedVarAtItsMinHeuristic(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::FirstUnassignedVarAtItsMinHeuristic(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target_type()
{
}

_QWORD *std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  if (a4)
  {
    v5 = result;
    if (a4 >> 59)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    result = operator new(32 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[4 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      while (1)
      {
        v10 = &v8[v9 / 8];
        v11 = a2 + v9;
        v12 = *(_QWORD *)(a2 + v9 + 24);
        if (v12)
        {
          if (v11 == v12)
          {
            v8[v9 / 8 + 3] = v10;
            result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v11 + 24))(v11, &v8[v9 / 8]);
            goto LABEL_7;
          }
          result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v12 + 16))(*(_QWORD *)(a2 + v9 + 24));
        }
        else
        {
          result = 0;
        }
        v10[3] = result;
LABEL_7:
        v9 += 32;
        if (a2 + v9 == a3)
        {
          v8 = (_QWORD *)((char *)v8 + v9);
          break;
        }
      }
    }
    v5[1] = v8;
  }
  return result;
}

void sub_22DB7B2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::__exception_guard_exceptions<std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_22DB7B2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (v11)
    operations_research::sat::ConfigureSearchHeuristics(v10 + v11);
  *(_QWORD *)(v9 + 8) = v10;
  std::__exception_guard_exceptions<std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<operations_research::sat::SequentialSearch(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>)::$_0,std::allocator<operations_research::sat::SequentialSearch(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~__func(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = &off_24F9867D0;
  v2 = a1[1];
  if (v2)
  {
    v3 = a1[2];
    v4 = (void *)a1[1];
    if (v3 == v2)
    {
LABEL_11:
      a1[2] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      v7 = v3 - 32;
      v5 = *(_QWORD **)(v3 - 8);
      if ((_QWORD *)(v3 - 32) == v5)
      {
        v5 = (_QWORD *)(v3 - 32);
        v6 = 4;
      }
      else
      {
        if (!v5)
          goto LABEL_6;
        v6 = 5;
      }
      (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
      v3 = v7;
      if (v7 == v2)
      {
        v4 = (void *)a1[1];
        goto LABEL_11;
      }
    }
  }
  return a1;
}

void std::__function::__func<operations_research::sat::SequentialSearch(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>)::$_0,std::allocator<operations_research::sat::SequentialSearch(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~__func(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = &off_24F9867D0;
  v2 = a1[1];
  if (!v2)
LABEL_12:
    JUMPOUT(0x22E31DF78);
  v3 = a1[2];
  v4 = (void *)a1[1];
  if (v3 == v2)
  {
LABEL_11:
    a1[2] = v2;
    operator delete(v4);
    goto LABEL_12;
  }
  while (1)
  {
    v7 = v3 - 32;
    v5 = *(_QWORD **)(v3 - 8);
    if ((_QWORD *)(v3 - 32) == v5)
    {
      v5 = (_QWORD *)(v3 - 32);
      v6 = 4;
    }
    else
    {
      if (!v5)
        goto LABEL_6;
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
    v3 = v7;
    if (v7 == v2)
    {
      v4 = (void *)a1[1];
      goto LABEL_11;
    }
  }
}

_QWORD *std::__function::__func<operations_research::sat::SequentialSearch(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>)::$_0,std::allocator<operations_research::sat::SequentialSearch(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x20uLL);
  *v2 = &off_24F9867D0;
  v2[2] = 0;
  v2[3] = 0;
  v2[1] = 0;
  std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>(v2 + 1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 5);
  return v2;
}

void sub_22DB7B4B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<operations_research::sat::SequentialSearch(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>)::$_0,std::allocator<operations_research::sat::SequentialSearch(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24F9867D0;
  a2[2] = 0;
  a2[3] = 0;
  a2[1] = 0;
  return std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>(a2 + 1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 5);
}

void std::__function::__func<operations_research::sat::SequentialSearch(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>)::$_0,std::allocator<operations_research::sat::SequentialSearch(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(void **)(a1 + 8);
    if (v3 == v1)
    {
      *(_QWORD *)(a1 + 16) = v1;
      operator delete(v4);
      return;
    }
    while (1)
    {
      v7 = v3 - 32;
      v5 = *(_QWORD **)(v3 - 8);
      if ((_QWORD *)(v3 - 32) == v5)
      {
        v5 = (_QWORD *)(v3 - 32);
        v6 = 4;
      }
      else
      {
        if (!v5)
          goto LABEL_6;
        v6 = 5;
      }
      (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
      v3 = v7;
      if (v7 == v1)
      {
        v8 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 16) = v1;
        operator delete(v8);
        return;
      }
    }
  }
}

void std::__function::__func<operations_research::sat::SequentialSearch(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>)::$_0,std::allocator<operations_research::sat::SequentialSearch(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::destroy_deallocate(_QWORD *__p)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = __p[1];
  if (v2)
  {
    v3 = __p[2];
    v4 = (void *)__p[1];
    if (v3 == v2)
    {
LABEL_11:
      __p[2] = v2;
      operator delete(v4);
      goto LABEL_12;
    }
    while (1)
    {
      v7 = v3 - 32;
      v5 = *(_QWORD **)(v3 - 8);
      if ((_QWORD *)(v3 - 32) == v5)
      {
        v5 = (_QWORD *)(v3 - 32);
        v6 = 4;
      }
      else
      {
        if (!v5)
          goto LABEL_6;
        v6 = 5;
      }
      (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
      v3 = v7;
      if (v7 == v2)
      {
        v4 = (void *)__p[1];
        goto LABEL_11;
      }
    }
  }
LABEL_12:
  operator delete(__p);
}

uint64_t std::__function::__func<operations_research::sat::SequentialSearch(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>)::$_0,std::allocator<operations_research::sat::SequentialSearch(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v1 == v2)
    return 0xFFFFFFFFLL;
  while (1)
  {
    v3 = *(_QWORD *)(v1 + 24);
    if (!v3)
      std::__throw_bad_function_call[abi:ne180100]();
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
    if ((_DWORD)result != -1)
      break;
    v1 += 32;
    if (v1 == v2)
      return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t std::__function::__func<operations_research::sat::SequentialSearch(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>)::$_0,std::allocator<operations_research::sat::SequentialSearch(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat16SequentialSearchENSt3__16vectorINS1_8functionIFN3gtl7IntTypeINS0_17Lit"
                     "eralIndex_tag_EiEEvEEENS1_9allocatorIS9_EEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat16SequentialSearchENSt3__16vectorINS1_8functionIFN3gtl7IntTyp"
                                "eINS0_17LiteralIndex_tag_EiEEvEEENS1_9allocatorIS9_EEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat16SequentialSearchENSt3__16vectorINS1_8functionIFN3gtl7IntTypeINS0_17LiteralIndex_tag_EiEEvEEENS1_9allocatorIS9_EEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat16SequentialSearchENSt3__16vectorINS1_8functionIFN3gtl7IntTypeINS0_17LiteralIndex_tag_EiEEvEEENS1_9allocatorIS9_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::SequentialSearch(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>)::$_0,std::allocator<operations_research::sat::SequentialSearch(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target_type()
{
}

_QWORD *std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  if (a4)
  {
    v5 = result;
    if (a4 >> 59)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    result = operator new(32 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[4 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      while (1)
      {
        v10 = &v8[v9 / 8];
        v11 = a2 + v9;
        v12 = *(_QWORD *)(a2 + v9 + 24);
        if (v12)
        {
          if (v11 == v12)
          {
            v8[v9 / 8 + 3] = v10;
            result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v11 + 24))(v11, &v8[v9 / 8]);
            goto LABEL_7;
          }
          result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v12 + 16))(*(_QWORD *)(a2 + v9 + 24));
        }
        else
        {
          result = 0;
        }
        v10[3] = result;
LABEL_7:
        v9 += 32;
        if (a2 + v9 == a3)
        {
          v8 = (_QWORD *)((char *)v8 + v9);
          break;
        }
      }
    }
    v5[1] = v8;
  }
  return result;
}

void sub_22DB7B7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::__exception_guard_exceptions<std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_22DB7B804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (v11)
    operations_research::sat::ConfigureSearchHeuristics(v10 + v11);
  *(_QWORD *)(v9 + 8) = v10;
  std::__exception_guard_exceptions<std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  *a1 = &off_24F986850;
  v2 = a1 + 1;
  v3 = a1[7];
  if (v3)
  {
    v4 = a1[8];
    v5 = (void *)a1[7];
    if (v4 == v3)
    {
LABEL_11:
      a1[8] = v3;
      operator delete(v5);
      goto LABEL_12;
    }
    while (1)
    {
      v8 = v4 - 32;
      v6 = *(_QWORD **)(v4 - 8);
      if ((_QWORD *)(v4 - 32) == v6)
      {
        v6 = (_QWORD *)(v4 - 32);
        v7 = 4;
      }
      else
      {
        if (!v6)
          goto LABEL_6;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
      v4 = v8;
      if (v8 == v3)
      {
        v5 = (void *)a1[7];
        goto LABEL_11;
      }
    }
  }
LABEL_12:
  v9 = (_QWORD *)a1[4];
  if (v9 == v2)
  {
    v10 = 4;
    v9 = v2;
    goto LABEL_16;
  }
  if (v9)
  {
    v10 = 5;
LABEL_16:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  return a1;
}

void std::__function::__func<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  *a1 = &off_24F986850;
  v2 = a1 + 1;
  v3 = a1[7];
  if (!v3)
  {
LABEL_12:
    v9 = (_QWORD *)a1[4];
    if (v9 == v2)
    {
      v10 = 4;
      v9 = v2;
    }
    else
    {
      if (!v9)
        goto LABEL_17;
      v10 = 5;
    }
    (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_17:
    JUMPOUT(0x22E31DF78);
  }
  v4 = a1[8];
  v5 = (void *)a1[7];
  if (v4 == v3)
  {
LABEL_11:
    a1[8] = v3;
    operator delete(v5);
    goto LABEL_12;
  }
  while (1)
  {
    v8 = v4 - 32;
    v6 = *(_QWORD **)(v4 - 8);
    if ((_QWORD *)(v4 - 32) == v6)
    {
      v6 = (_QWORD *)(v4 - 32);
      v7 = 4;
    }
    else
    {
      if (!v6)
        goto LABEL_6;
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
    v4 = v8;
    if (v8 == v3)
    {
      v5 = (void *)a1[7];
      goto LABEL_11;
    }
  }
}

char *std::__function::__func<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  __int128 v5;

  v2 = (char *)operator new(0x50uLL);
  *(_QWORD *)v2 = &off_24F986850;
  v3 = v2 + 8;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      *((_QWORD *)v2 + 4) = v3;
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v4 + 24))(v4, v3);
      goto LABEL_6;
    }
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  }
  *((_QWORD *)v2 + 4) = v4;
LABEL_6:
  v5 = *(_OWORD *)(a1 + 40);
  *((_QWORD *)v2 + 7) = 0;
  *(_OWORD *)(v2 + 40) = v5;
  *((_QWORD *)v2 + 8) = 0;
  *((_QWORD *)v2 + 9) = 0;
  std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>*>((_QWORD *)v2 + 7, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), (uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 5);
  return v2;
}

void sub_22DB7BA70(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_22DB7BA84(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)v1[4];
  if (v4 == v2)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v2 = (_QWORD *)v1[4];
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v5))(v2);
LABEL_6:
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24F986850;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      *(_QWORD *)(a2 + 32) = a2 + 8;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), a2 + 8);
    }
    else
    {
      *(_QWORD *)(a2 + 32) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
  }
  v5 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 40) = v5;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  return std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>*>((_QWORD *)(a2 + 56), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), (uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 5);
}

void sub_22DB7BB6C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 + 32);
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = *(_QWORD **)(v2 + 32);
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::destroy(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v2 = a1 + 1;
  v3 = a1[7];
  if (!v3)
    goto LABEL_12;
  v4 = a1[8];
  v5 = (void *)a1[7];
  if (v4 != v3)
  {
    while (1)
    {
      v8 = v4 - 32;
      v6 = *(_QWORD **)(v4 - 8);
      if ((_QWORD *)(v4 - 32) == v6)
      {
        v6 = (_QWORD *)(v4 - 32);
        v7 = 4;
      }
      else
      {
        if (!v6)
          goto LABEL_6;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
      v4 = v8;
      if (v8 == v3)
      {
        v5 = (void *)a1[7];
        break;
      }
    }
  }
  a1[8] = v3;
  operator delete(v5);
LABEL_12:
  result = a1[4];
  if ((_QWORD *)result == v2)
    return (*(uint64_t (**)(_QWORD *))(*v2 + 32))(v2);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void std::__function::__func<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::destroy_deallocate(char *__p)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  v2 = __p + 8;
  v3 = *((_QWORD *)__p + 7);
  if (v3)
  {
    v4 = *((_QWORD *)__p + 8);
    v5 = (void *)*((_QWORD *)__p + 7);
    if (v4 == v3)
    {
LABEL_11:
      *((_QWORD *)__p + 8) = v3;
      operator delete(v5);
      goto LABEL_12;
    }
    while (1)
    {
      v8 = v4 - 32;
      v6 = *(_QWORD **)(v4 - 8);
      if ((_QWORD *)(v4 - 32) == v6)
      {
        v6 = (_QWORD *)(v4 - 32);
        v7 = 4;
      }
      else
      {
        if (!v6)
          goto LABEL_6;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
      v4 = v8;
      if (v8 == v3)
      {
        v5 = (void *)*((_QWORD *)__p + 7);
        goto LABEL_11;
      }
    }
  }
LABEL_12:
  v9 = (char *)*((_QWORD *)__p + 4);
  if (v9 == v2)
  {
    v10 = 4;
    v9 = v2;
    goto LABEL_16;
  }
  if (v9)
  {
    v10 = 5;
LABEL_16:
    (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::operator()(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  int *v12;
  unint64_t v13;
  _QWORD *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD v24[4];

  v2 = a1[4];
  if (!v2)
LABEL_25:
    std::__throw_bad_function_call[abi:ne180100]();
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  if ((_DWORD)v3 == -1)
    return 0xFFFFFFFFLL;
  v4 = v3;
  v5 = (_QWORD *)a1[5];
  v6 = v5[14];
  v7 = (unint64_t)(v5[15] - v6) >> 5;
  v8 = v5 + 7;
  v9 = (_QWORD *)(v6 + 32 * (int)v3);
  if ((int)v3 >= (int)v7)
    v10 = v8;
  else
    v10 = v9;
  v13 = *v10;
  v12 = (int *)(v10 + 1);
  v11 = v13;
  if ((v13 & 1) != 0)
    v12 = *(int **)v12;
  if (v11 >= 2)
  {
    v15 = &v12[3 * (v11 >> 1)];
    while (1)
    {
      v16 = *v12;
      v17 = a1[6];
      v18 = *(int *)(*(_QWORD *)(v17 + 408) + 4 * v16);
      if ((_DWORD)v18 == -1
        || ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 936) + 24) + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(*(_QWORD *)(v17 + 408) + 4 * v16)) & 1) == 0)
      {
        v19 = a1[7];
        v20 = a1[8];
        if (v19 != v20)
          break;
      }
LABEL_15:
      v12 += 3;
      if (v12 == v15)
        goto LABEL_9;
    }
    while (1)
    {
      v24[0] = v16;
      v21 = *(_QWORD *)(v19 + 24);
      if (!v21)
        goto LABEL_25;
      v22 = (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)v21 + 48))(v21, v24);
      if ((_DWORD)v22 != -1)
        return v22;
      v19 += 32;
      if (v19 == v20)
        goto LABEL_15;
    }
  }
  else
  {
LABEL_9:
    if ((int)*operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0::operator() const(void)::vlocal__ >= 2
      && ((int *)operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0::operator() const(void)::vlocal__ != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)&operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0::operator() const(void)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/integer_search.cc", (const char *)2)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v24, (google::glog_internal_namespace_ *)"./ortools/sat/integer_search.cc", 234);
      v14 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Value selection: using default decision.", 40);
      google::LogMessage::~LogMessage((google::LogMessage *)v24);
    }
  }
  return v4;
}

void sub_22DB7BEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat24SequentialValueSelectionENSt3__16vectorINS1_8functionIFN3gtl7IntTypeIN"
                     "S0_17LiteralIndex_tag_EiEENS5_INS0_20IntegerVariable_tag_EiEEEEENS1_9allocatorISB_EEEENS3_IFS7_vEEE"
                     "PNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat24SequentialValueSelectionENSt3__16vectorINS1_8functionIFN3gt"
                                "l7IntTypeINS0_17LiteralIndex_tag_EiEENS5_INS0_20IntegerVariable_tag_EiEEEEENS1_9allocato"
                                "rISB_EEEENS3_IFS7_vEEEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat24SequentialValueSelectionENSt3__16vectorINS1_8functionIFN3gtl7IntTypeINS0_17LiteralIndex_tag_EiEENS5_INS0_20IntegerVariable_tag_EiEEEEENS1_9allocatorISB_EEEENS3_IFS7_vEEEPNS0_5ModelEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat24SequentialValueSelectionENSt3__16vectorINS1_8functionIFN3gtl7IntTypeINS0_17LiteralIndex_tag_EiEENS5_INS0_20IntegerVariable_tag_EiEEEEENS1_9allocatorISB_EEEENS3_IFS7_vEEEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SequentialValueSelection(std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target_type()
{
}

uint64_t std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>::__push_back_slow_path<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>(uint64_t *a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v24;
  uint64_t v25;
  char *v26;

  v4 = (char *)*a1;
  v3 = (char *)a1[1];
  v5 = (uint64_t)&v3[-*a1] >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v8 = a1[2] - (_QWORD)v4;
  if (v8 >> 4 > v6)
    v6 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9)
  {
    if (v9 >> 59)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v10 = (char *)operator new(32 * v9);
    v11 = (uint64_t)&v10[32 * v5];
    v12 = a2 + 3;
    v13 = (_QWORD *)a2[3];
    if (v13)
    {
LABEL_10:
      if (v13 == a2)
      {
        *(_QWORD *)(v11 + 24) = v11;
        (*(void (**)(_QWORD *, uint64_t))(*a2 + 24))(a2, v11);
        v4 = (char *)*a1;
        v3 = (char *)a1[1];
        v14 = v11;
        if (v3 == (char *)*a1)
          goto LABEL_26;
      }
      else
      {
        *(_QWORD *)(v11 + 24) = v13;
        *v12 = 0;
        v14 = v11;
        if (v3 == v4)
          goto LABEL_26;
      }
      goto LABEL_17;
    }
  }
  else
  {
    v10 = 0;
    v11 = 32 * v5;
    v12 = a2 + 3;
    v13 = (_QWORD *)a2[3];
    if (v13)
      goto LABEL_10;
  }
  *(_QWORD *)(v11 + 24) = 0;
  v14 = v11;
  if (v3 != v4)
  {
LABEL_17:
    v15 = 0;
    v16 = v3;
    while (1)
    {
      v18 = v11 + v15;
      v19 = &v3[v15];
      v20 = *(char **)&v3[v15 - 8];
      if (v20)
      {
        if (v19 - 32 == v20)
        {
          *(_QWORD *)(v18 - 8) = v18 - 32;
          (*(void (**)(_QWORD))(**((_QWORD **)v19 - 1) + 24))(*((_QWORD *)v19 - 1));
          goto LABEL_20;
        }
        v17 = v16 - 8;
        *(_QWORD *)(v18 - 8) = v20;
      }
      else
      {
        v17 = (char *)(v18 - 8);
      }
      *(_QWORD *)v17 = 0;
LABEL_20:
      v16 -= 32;
      v15 -= 32;
      if (&v3[v15] == v4)
      {
        v14 = v11 + v15;
        break;
      }
    }
  }
LABEL_26:
  v22 = (char *)*a1;
  v21 = (char *)a1[1];
  *a1 = v14;
  a1[1] = v11 + 32;
  a1[2] = (uint64_t)&v10[32 * v9];
  if (v21 != v22)
  {
    do
    {
      v26 = v21 - 32;
      v24 = (char *)*((_QWORD *)v21 - 1);
      if (v21 - 32 == v24)
      {
        v24 = v21 - 32;
        v25 = 4;
      }
      else
      {
        if (!v24)
          goto LABEL_32;
        v25 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_32:
      v21 = v26;
    }
    while (v26 != v22);
  }
  if (v22)
    operator delete(v22);
  return v11 + 32;
}

void std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F9868D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F9868D0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::operator()(uint64_t a1, _DWORD *a2)
{
  return operations_research::sat::SplitAroundLpValue(*a2 & 0xFFFFFFFE, *(_QWORD *)(a1 + 8));
}

uint64_t std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat30IntegerValueSelectionHeuristicENSt3__18functionIFN3gtl7IntTypeINS0_17L"
                     "iteralIndex_tag_EiEEvEEEPNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat30IntegerValueSelectionHeuristicENSt3__18functionIFN3gtl7IntT"
                                "ypeINS0_17LiteralIndex_tag_EiEEvEEEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat30IntegerValueSelectionHeuristicENSt3__18functionIFN3gtl7IntTypeINS0_17LiteralIndex_tag_EiEEvEEEPNS0_5ModelEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat30IntegerValueSelectionHeuristicENSt3__18functionIFN3gtl7IntTypeINS0_17LiteralIndex_tag_EiEEvEEEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::target_type()
{
}

void std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F986960;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F986960;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::operator()(uint64_t a1, int *a2)
{
  return operations_research::sat::SplitUsingBestSolutionValueInRepository(*a2, (_QWORD *)(*(_QWORD *)(a1 + 16) + 304), *(_QWORD *)(a1 + 8));
}

uint64_t std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat30IntegerValueSelectionHeuristicENSt3__18functionIFN3gtl7IntTypeINS0_17L"
                     "iteralIndex_tag_EiEEvEEEPNS0_5ModelEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat30IntegerValueSelectionHeuristicENSt3__18functionIFN3gtl7IntT"
                                "ypeINS0_17LiteralIndex_tag_EiEEvEEEPNS0_5ModelEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat30IntegerValueSelectionHeuristicENSt3__18functionIFN3gtl7IntTypeINS0_17LiteralIndex_tag_EiEEvEEEPNS0_5ModelEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat30IntegerValueSelectionHeuristicENSt3__18functionIFN3gtl7IntTypeINS0_17LiteralIndex_tag_EiEEvEEEPNS0_5ModelEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::target_type()
{
}

void std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_2,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_2>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_2,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_2>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F9869E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_2,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_2>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F9869E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_2,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_2>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::operator()(uint64_t a1, int *a2)
{
  int v3;
  _QWORD *v4;
  _BYTE v6[16];

  v3 = *a2;
  if (*operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_2::operator() const(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::vlocal__ >= 1
    && (operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_2::operator() const(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::vlocal__ != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)&operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_2::operator() const(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/integer_search.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v6, (google::glog_internal_namespace_ *)"./ortools/sat/integer_search.cc", 293);
    v4 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Using relaxation solution value selection heuristic.", 52);
    google::LogMessage::~LogMessage((google::LogMessage *)v6);
  }
  return operations_research::sat::SplitUsingBestSolutionValueInRepository(v3, *(_QWORD **)(a1 + 16), *(_QWORD *)(a1 + 8));
}

void sub_22DB7C48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_2,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_2>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat30IntegerValueSelectionHeuristicENSt3__18functionIFN3gtl7IntTypeINS0_17L"
                     "iteralIndex_tag_EiEEvEEEPNS0_5ModelEE3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat30IntegerValueSelectionHeuristicENSt3__18functionIFN3gtl7IntT"
                                "ypeINS0_17LiteralIndex_tag_EiEEvEEEPNS0_5ModelEE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat30IntegerValueSelectionHeuristicENSt3__18functionIFN3gtl7IntTypeINS0_17LiteralIndex_tag_EiEEvEEEPNS0_5ModelEE3$_2"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat30IntegerValueSelectionHeuristicENSt3__18functionIFN3gtl7IntTypeINS0_17LiteralIndex_tag_EiEEvEEEPNS0_5ModelEE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_2,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_2>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::target_type()
{
}

void std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_3,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_3>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_3,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_3>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F986A60;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_3,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_3>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F986A60;
  a2[1] = v2;
  return result;
}

unint64_t std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_3,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_3>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::operator()(uint64_t a1, int *a2)
{
  return operations_research::sat::ChooseBestObjectiveValue(*a2, *(_QWORD *)(a1 + 8));
}

uint64_t std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_3,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_3>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat30IntegerValueSelectionHeuristicENSt3__18functionIFN3gtl7IntTypeINS0_17L"
                     "iteralIndex_tag_EiEEvEEEPNS0_5ModelEE3$_3")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat30IntegerValueSelectionHeuristicENSt3__18functionIFN3gtl7IntT"
                                "ypeINS0_17LiteralIndex_tag_EiEEvEEEPNS0_5ModelEE3$_3" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat30IntegerValueSelectionHeuristicENSt3__18functionIFN3gtl7IntTypeINS0_17LiteralIndex_tag_EiEEvEEEPNS0_5ModelEE3$_3"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat30IntegerValueSelectionHeuristicENSt3__18functionIFN3gtl7IntTypeINS0_17LiteralIndex_tag_EiEEvEEEPNS0_5ModelEE3$_3" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_3,std::allocator<operations_research::sat::IntegerValueSelectionHeuristic(std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>,operations_research::sat::Model *)::$_3>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::target_type()
{
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::SatDecisionPolicy>::~Delete(_QWORD *a1)
{
  operations_research::sat::SatDecisionPolicy *v2;

  v2 = (operations_research::sat::SatDecisionPolicy *)a1[1];
  *a1 = &off_24F986AE0;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::SatDecisionPolicy::~SatDecisionPolicy(v2);
    MEMORY[0x22E31DF78]();
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::SatDecisionPolicy>::~Delete(_QWORD *a1)
{
  operations_research::sat::SatDecisionPolicy *v2;

  v2 = (operations_research::sat::SatDecisionPolicy *)a1[1];
  *a1 = &off_24F986AE0;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::SatDecisionPolicy::~SatDecisionPolicy(v2);
    MEMORY[0x22E31DF78]();
  }
  JUMPOUT(0x22E31DF78);
}

void operations_research::sat::SatDecisionPolicy::~SatDecisionPolicy(operations_research::sat::SatDecisionPolicy *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v2 = (void *)*((_QWORD *)this + 35);
  if (v2)
  {
    *((_QWORD *)this + 36) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 32);
  if (v3)
    operator delete(v3);
  v4 = (void *)*((_QWORD *)this + 29);
  if (v4)
    operator delete(v4);
  v5 = (void *)*((_QWORD *)this + 26);
  if (v5)
  {
    *((_QWORD *)this + 27) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 23);
  if (v6)
  {
    *((_QWORD *)this + 24) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 20);
  if (v7)
  {
    *((_QWORD *)this + 21) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 16);
  if (v8)
  {
    *((_QWORD *)this + 17) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 12);
  if (v9)
  {
    *((_QWORD *)this + 13) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 8);
  if (v10)
  {
    *((_QWORD *)this + 9) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 5);
  if (v11)
  {
    *((_QWORD *)this + 6) = v11;
    operator delete(v11);
  }
}

void std::__function::__func<operations_research::sat::SatSolverHeuristic(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SatSolverHeuristic(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::sat::SatSolverHeuristic(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SatSolverHeuristic(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24F986B18;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<operations_research::sat::SatSolverHeuristic(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SatSolverHeuristic(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F986B18;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::SatSolverHeuristic(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SatSolverHeuristic(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::operator()(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  _BYTE v4[16];

  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 12) == *(_DWORD *)(*(_QWORD *)(a1 + 8) + 16))
    return 0xFFFFFFFFLL;
  result = operations_research::sat::SatDecisionPolicy::NextBranch(*(std::vector<int> **)(a1 + 24));
  if (((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 208) + 24)
                   + (((unint64_t)(int)result >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (result & 0x3E)) & 3) != 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v4, (google::glog_internal_namespace_ *)"./ortools/sat/integer_search.cc", 320);
    v3 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Check failed: !sat_solver->Assignment().LiteralIsAssigned(result) ", 66);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v4);
  }
  return result;
}

void sub_22DB7C89C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

uint64_t std::__function::__func<operations_research::sat::SatSolverHeuristic(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SatSolverHeuristic(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat18SatSolverHeuristicEPNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat18SatSolverHeuristicEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat18SatSolverHeuristicEPNS0_5ModelEE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat18SatSolverHeuristicEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::SatSolverHeuristic(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SatSolverHeuristic(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target_type()
{
}

void std::__function::__func<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24F986B98;
  return result;
}

void std::__function::__func<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24F986B98;
}

uint64_t std::__function::__func<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::operator()()
{
  return 0xFFFFFFFFLL;
}

uint64_t std::__function::__func<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat10PseudoCostEPNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat10PseudoCostEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat10PseudoCostEPNS0_5ModelEE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat10PseudoCostEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target_type()
{
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::PseudoCosts>::~Delete(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  v2 = a1[1];
  *a1 = &off_24F986C18;
  a1[1] = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 24);
    if (v3)
    {
      *(_QWORD *)(v2 + 32) = v3;
      operator delete(v3);
    }
    MEMORY[0x22E31DF78](v2, 0x1060C405E3B83C8);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::PseudoCosts>::~Delete(_QWORD *a1)
{
  uint64_t v1;
  void *v2;

  v1 = a1[1];
  *a1 = &off_24F986C18;
  a1[1] = 0;
  if (v1)
  {
    v2 = *(void **)(v1 + 24);
    if (v2)
    {
      *(_QWORD *)(v1 + 32) = v2;
      operator delete(v2);
    }
    MEMORY[0x22E31DF78](v1, 0x1060C405E3B83C8);
  }
  JUMPOUT(0x22E31DF78);
}

void std::__function::__func<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F986C50;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F986C50;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t std::__function::__func<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::operator()(uint64_t a1)
{
  unint64_t result;

  result = operations_research::sat::PseudoCosts::GetBestDecisionVar(*(operations_research::sat::PseudoCosts **)(a1 + 8));
  if ((_DWORD)result != -1)
    return operations_research::sat::GreaterOrEqualToMiddleValue(result, *(_QWORD *)(a1 + 16));
  return result;
}

uint64_t std::__function::__func<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat10PseudoCostEPNS0_5ModelEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat10PseudoCostEPNS0_5ModelEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat10PseudoCostEPNS0_5ModelEE3$_1"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat10PseudoCostEPNS0_5ModelEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::PseudoCost(operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target_type()
{
}

void std::discrete_distribution<int>::param_type::__init(double **a1)
{
  float64x2_t *v1;
  unint64_t v2;
  uint64_t v4;
  double v5;
  double *v6;
  unint64_t v7;
  double *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  double *v12;
  unint64_t v13;
  double *v14;
  uint64_t v15;
  float64x2_t v16;
  float64x2_t *v17;
  uint64_t v18;
  float64x2_t v19;
  size_t v20;
  size_t v21;
  double *v22;
  double *v23;
  double *v24;
  double *v25;
  double v26;
  double *v27;
  double v28;

  v1 = (float64x2_t *)*a1;
  v2 = (unint64_t)a1[1];
  if (*a1 != (double *)v2)
  {
    v4 = v2 - (_QWORD)v1;
    if (v2 - (unint64_t)v1 < 9)
    {
      a1[1] = (double *)v1;
      std::vector<double>::shrink_to_fit((uint64_t)a1);
      return;
    }
    v5 = 0.0;
    v6 = *a1;
    if ((unint64_t)(v4 - 8) < 8)
      goto LABEL_31;
    v7 = ((unint64_t)(v4 - 8) >> 3) + 1;
    v6 = &v1->f64[v7 & 0x3FFFFFFFFFFFFFFELL];
    v8 = &v1->f64[1];
    v5 = 0.0;
    v9 = v7 & 0x3FFFFFFFFFFFFFFELL;
    do
    {
      v5 = v5 + *(v8 - 1) + *v8;
      v8 += 2;
      v9 -= 2;
    }
    while (v9);
    if (v7 != (v7 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_31:
      do
      {
        v10 = *v6++;
        v5 = v5 + v10;
      }
      while (v6 != (double *)v2);
    }
    v11 = v4 >> 3;
    if ((unint64_t)v1 < v2)
    {
      v12 = &v1->f64[1];
      if (v2 > (unint64_t)&v1->f64[1])
        v12 = a1[1];
      v13 = (unint64_t)v12 + ~(unint64_t)v1;
      v14 = *a1;
      if (v13 < 0x18)
        goto LABEL_32;
      v15 = (v13 >> 3) + 1;
      v14 = &v1->f64[v15 & 0x3FFFFFFFFFFFFFFCLL];
      v16 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v5, 0);
      v17 = v1 + 1;
      v18 = v15 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v19 = vdivq_f64(*v17, v16);
        v17[-1] = vdivq_f64(v17[-1], v16);
        *v17 = v19;
        v17 += 2;
        v18 -= 4;
      }
      while (v18);
      if (v15 != (v15 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_32:
        do
        {
          *v14 = *v14 / v5;
          ++v14;
        }
        while ((unint64_t)v14 < v2);
      }
    }
    v20 = v11 - 1;
    if (v11 == 1)
    {
      v23 = 0;
      v22 = 0;
      v24 = (double *)(v2 - 8);
      if (v1 == (float64x2_t *)(v2 - 8))
      {
LABEL_25:
        *a1 = v22;
        a1[1] = v23;
        a1[2] = (double *)v20;
        if (v1)
          operator delete(v1);
        return;
      }
    }
    else
    {
      if (v20 >> 61)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v21 = v20;
      v22 = (double *)operator new(8 * v20);
      v20 = (size_t)&v22[v20];
      bzero(v22, v21 * 8);
      v23 = &v22[v21];
      v24 = (double *)(v2 - 8);
      if (v1 == (float64x2_t *)(v2 - 8))
        goto LABEL_25;
    }
    v25 = &v1->f64[1];
    v26 = v1->f64[0];
    *v22 = v1->f64[0];
    if (&v1->f64[1] != v24)
    {
      v27 = v22 + 1;
      do
      {
        v28 = *v25++;
        v26 = v26 + v28;
        *v27++ = v26;
      }
      while (v25 != v24);
    }
    goto LABEL_25;
  }
}

void sub_22DB7CDD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<double>::shrink_to_fit(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  v1 = *(_BYTE **)(a1 + 8);
  v2 = *(_BYTE **)a1;
  v3 = (uint64_t)&v1[-*(_QWORD *)a1];
  v4 = v3 >> 3;
  if (v3 >> 3 < (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3))
  {
    v6 = v1 - v2;
    if (v1 == v2)
    {
      v8 = 8 * v4;
      v9 = 8 * v4;
    }
    else
    {
      if (v3 < 0)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v7 = (char *)operator new((size_t)&v1[-*(_QWORD *)a1]);
      v8 = (uint64_t)&v7[8 * v4];
      if ((unint64_t)(v6 - 8) >= 0x58)
      {
        v9 = (uint64_t)&v7[8 * v4];
        if ((unint64_t)(&v1[-v3] - v7) >= 0x20)
        {
          v10 = ((unint64_t)(v6 - 8) >> 3) + 1;
          v11 = 8 * (v10 & 0x3FFFFFFFFFFFFFFCLL);
          v12 = &v1[-v11];
          v9 = v8 - v11;
          v13 = &v7[8 * v4 - 16];
          v14 = (__int128 *)(v1 - 16);
          v15 = v10 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v16 = *v14;
            *((_OWORD *)v13 - 1) = *(v14 - 1);
            *(_OWORD *)v13 = v16;
            v13 -= 32;
            v14 -= 2;
            v15 -= 4;
          }
          while (v15);
          v1 = v12;
          if (v10 == (v10 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_12;
        }
      }
      else
      {
        v9 = (uint64_t)&v7[8 * v4];
      }
      do
      {
        v17 = *((_QWORD *)v1 - 1);
        v1 -= 8;
        *(_QWORD *)(v9 - 8) = v17;
        v9 -= 8;
      }
      while (v1 != v2);
    }
LABEL_12:
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v8;
    if (v2)
      operator delete(v2);
  }
}

void std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F986CD0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F986CD0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::operator()(uint64_t a1, _DWORD *a2)
{
  return operations_research::sat::SplitAroundLpValue(*a2 & 0xFFFFFFFE, *(_QWORD *)(a1 + 8));
}

uint64_t std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::target_type()
{
}

void std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F986D50;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F986D50;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::operator()(uint64_t a1, int *a2)
{
  return operations_research::sat::SplitUsingBestSolutionValueInRepository(*a2, (_QWORD *)(*(_QWORD *)(a1 + 16) + 304), *(_QWORD *)(a1 + 8));
}

uint64_t std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_1"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::target_type()
{
}

void std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_2,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_2>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_2,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_2>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F986DD0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_2,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_2>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F986DD0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_2,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_2>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::operator()(uint64_t a1, int *a2)
{
  return operations_research::sat::SplitUsingBestSolutionValueInRepository(*a2, *(_QWORD **)(a1 + 16), *(_QWORD *)(a1 + 8));
}

uint64_t std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_2,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_2>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_2"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_2,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_2>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::target_type()
{
}

void std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_3,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_3>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_3,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_3>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F986E50;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_3,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_3>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F986E50;
  a2[1] = v2;
  return result;
}

unint64_t std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_3,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_3>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::operator()(uint64_t a1, int *a2)
{
  return operations_research::sat::GreaterOrEqualToMiddleValue(*a2, *(_QWORD *)(a1 + 8));
}

uint64_t std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_3,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_3>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_3")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_3" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_3"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_3" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_3,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_3>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::target_type()
{
}

void std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_4,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_4>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_4,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_4>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F986ED0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_4,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_4>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F986ED0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_4,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_4>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::operator()(uint64_t a1, int *a2)
{
  uint64_t v2;
  int64_t v3;
  unsigned int *v5;
  uint64_t v6;
  const char *v7;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
  v3 = *(_QWORD *)(v2 + 12 * *a2);
  if (!(v3 + *(_QWORD *)(v2 + 12 * (*a2 ^ 1))))
    return 0xFFFFFFFFLL;
  v5 = *(unsigned int **)(a1 + 16);
  if (v3 >= (uint64_t)0x8000000000000002)
    v6 = -v3;
  else
    v6 = 0x7FFFFFFFFFFFFFFFLL;
  LODWORD(v7) = *a2 ^ 1;
  HIDWORD(v7) = v6;
  return operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(v5, v7, SHIDWORD(v6));
}

uint64_t std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_4,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_4>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_4")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_4" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_4"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_4" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_4,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_4>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>::target_type()
{
}

uint64_t std::discrete_distribution<int>::param_type::param_type[abi:ne180100]<std::__wrap_iter<int *>>(uint64_t a1, int *a2, int *a3)
{
  uint64_t v4;
  double *v7;
  int *v8;
  unint64_t v9;
  double *v10;
  float64x2_t *v11;
  _DWORD *v12;
  uint64_t v13;
  __int128 v14;
  int64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  int v19;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = (char *)a3 - (char *)a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x7FFFFFFFFFFFFFFDLL)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v7 = (double *)operator new(2 * v4);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v7[v4 >> 2];
    if (a2 == a3)
    {
      v10 = v7;
    }
    else
    {
      v8 = a2;
      if ((unint64_t)(v4 - 4) < 0x1C)
        goto LABEL_8;
      v9 = ((unint64_t)(v4 - 4) >> 2) + 1;
      v8 = &a2[v9 & 0x7FFFFFFFFFFFFFF8];
      v10 = &v7[v9 & 0x7FFFFFFFFFFFFFF8];
      v11 = (float64x2_t *)(v7 + 4);
      v12 = a2 + 4;
      v13 = v9 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v14 = *((_OWORD *)v12 - 1);
        v15.i64[0] = (int)v14;
        v15.i64[1] = SDWORD1(v14);
        v16 = vcvtq_f64_s64(v15);
        v15.i64[0] = SDWORD2(v14);
        v15.i64[1] = SHIDWORD(v14);
        v17 = vcvtq_f64_s64(v15);
        v15.i64[0] = (int)*(_OWORD *)v12;
        v15.i64[1] = (int)HIDWORD(*(_QWORD *)v12);
        v18 = vcvtq_f64_s64(v15);
        v15.i64[0] = (int)*((_QWORD *)v12 + 1);
        v15.i64[1] = (int)HIDWORD(*(_OWORD *)v12);
        v11[-2] = v16;
        v11[-1] = v17;
        *v11 = v18;
        v11[1] = vcvtq_f64_s64(v15);
        v11 += 4;
        v12 += 8;
        v13 -= 8;
      }
      while (v13);
      v7 += v9 & 0x7FFFFFFFFFFFFFF8;
      if (v9 != (v9 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_8:
        v10 = v7;
        do
        {
          v19 = *v8++;
          *v10++ = (double)v19;
        }
        while (v8 != a3);
      }
    }
    *(_QWORD *)(a1 + 8) = v10;
  }
  std::discrete_distribution<int>::param_type::__init((double **)a1);
  return a1;
}

void sub_22DB7D55C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_24F986F50;
  operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5::~$_5(a1 + 1);
  return a1;
}

void std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_24F986F50;
  operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5::~$_5(a1 + 1);
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1)
{
  __int128 *v1;
  _QWORD *v2;

  v1 = (__int128 *)(a1 + 8);
  v2 = operator new(0xA0uLL);
  *v2 = &off_24F986F50;
  std::__compressed_pair_elem<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_22DB7D62C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24F986F50;
  return std::__compressed_pair_elem<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5 const&,0ul>((uint64_t)(a2 + 1), (__int128 *)(a1 + 8));
}

_QWORD *std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::destroy(uint64_t a1)
{
  return operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5::~$_5((_QWORD *)(a1 + 8));
}

void std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::destroy_deallocate(_QWORD *a1)
{
  operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5::~$_5(a1 + 1);
  operator delete(a1);
}

uint64_t std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::operator()(uint64_t a1)
{
  operations_research::sat *v2;
  operations_research::sat::SatParameters *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  int *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v25;

  if (!*(_DWORD *)(*(_QWORD *)(a1 + 8) + 304))
  {
    v2 = (operations_research::sat *)operations_research::sat::Model::GetOrCreate<operations_research::sat::ModelRandomGenerator>(*(_QWORD *)(a1 + 16));
    v3 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>(*(_QWORD *)(a1 + 16));
    operations_research::sat::RandomizeDecisionHeuristic<operations_research::sat::ModelRandomGenerator>(v2, (uint64_t)v3);
    operations_research::sat::SatDecisionPolicy::ResetDecisionHeuristic(*(operations_research::sat::SatDecisionPolicy **)(a1 + 24));
    *(_DWORD *)(a1 + 32) = std::discrete_distribution<int>::operator()<operations_research::sat::ModelRandomGenerator>(a1 + 40, (uint64_t)v2, (double **)(a1 + 40));
    *(_DWORD *)(a1 + 64) = std::discrete_distribution<int>::operator()<operations_research::sat::ModelRandomGenerator>(a1 + 72, (uint64_t)v2, (double **)(a1 + 72));
  }
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 32 * *(int *)(a1 + 32) + 24);
  if (!v4)
LABEL_21:
    std::__throw_bad_function_call[abi:ne180100]();
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
  if ((_DWORD)v5 == -1)
    return 0xFFFFFFFFLL;
  v6 = v5;
  if (*(int *)(a1 + 64) < (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 5))
  {
    v7 = *(_QWORD *)(a1 + 144);
    v8 = *(_QWORD *)(v7 + 112);
    v9 = (unint64_t)(*(_QWORD *)(v7 + 120) - v8) >> 5;
    v10 = v7 + 56;
    v11 = v8 + 32 * (int)v5;
    v12 = (_QWORD *)((int)v5 >= (int)v9 ? v10 : v11);
    v15 = *v12;
    v14 = (int *)(v12 + 1);
    v13 = v15;
    if ((v15 & 1) != 0)
      v14 = *(int **)v14;
    if (v13 >= 2)
    {
      v16 = 12 * (v13 >> 1);
      while (1)
      {
        v17 = *v14;
        v18 = *(_QWORD *)(a1 + 152);
        v19 = *(int *)(*(_QWORD *)(v18 + 408) + 4 * v17);
        if ((_DWORD)v19 == -1
          || ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 936) + 24) + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(*(_QWORD *)(v18 + 408) + 4 * v17)) & 1) == 0)
        {
          v20 = *(int *)(a1 + 64);
          v21 = *(_QWORD *)(a1 + 120);
          v25 = *v14;
          v22 = *(_QWORD *)(v21 + 32 * v20 + 24);
          if (!v22)
            goto LABEL_21;
          v23 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v22 + 48))(v22, &v25);
          if ((_DWORD)v23 != -1)
            return v23;
        }
        v14 += 3;
        v16 -= 12;
        if (!v16)
          return v6;
      }
    }
  }
  return v6;
}

uint64_t std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_5")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_5" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_5"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat27RandomizeOnRestartHeuristicEPNS0_5ModelEE3$_5" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5,std::allocator<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5 const&,0ul>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  int v10;
  _BYTE *v11;
  _BYTE *v12;
  int64_t v13;
  char *v14;
  char *v15;

  v4 = *a2;
  *(_OWORD *)(a1 + 12) = *(__int128 *)((char *)a2 + 12);
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = v4;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v6 = (_BYTE *)*((_QWORD *)a2 + 4);
  v5 = (_BYTE *)*((_QWORD *)a2 + 5);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(v5 - v6);
    *(_QWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 40) = v8;
    v9 = &v8[8 * (v7 >> 3)];
    *(_QWORD *)(a1 + 48) = v9;
    memcpy(v8, v6, v7);
    *(_QWORD *)(a1 + 40) = v9;
  }
  v10 = *((_DWORD *)a2 + 14);
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v12 = (_BYTE *)*((_QWORD *)a2 + 8);
  v11 = (_BYTE *)*((_QWORD *)a2 + 9);
  v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v14 = (char *)operator new(v11 - v12);
    *(_QWORD *)(a1 + 64) = v14;
    *(_QWORD *)(a1 + 72) = v14;
    v15 = &v14[8 * (v13 >> 3)];
    *(_QWORD *)(a1 + 80) = v15;
    memcpy(v14, v12, v13);
    *(_QWORD *)(a1 + 72) = v15;
  }
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>((_QWORD *)(a1 + 88), *((_QWORD *)a2 + 11), *((_QWORD *)a2 + 12), (uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 5);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>>::__init_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)>*>((_QWORD *)(a1 + 112), *((_QWORD *)a2 + 14), *((_QWORD *)a2 + 15), (uint64_t)(*((_QWORD *)a2 + 15) - *((_QWORD *)a2 + 14)) >> 5);
  *(_OWORD *)(a1 + 136) = *(__int128 *)((char *)a2 + 136);
  return a1;
}

void sub_22DB7D9E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  char **v4;
  void *v6;
  void *v7;

  if (*v4)
    std::__compressed_pair_elem<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::RandomizeOnRestartHeuristic(operations_research::sat::Model *)::$_5 const&,0ul>(v1, *v4, (void **)(v1 + 88));
  v6 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 72) = v6;
    operator delete(v6);
  }
  v7 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

int8x16_t operations_research::sat::RandomizeDecisionHeuristic<operations_research::sat::ModelRandomGenerator>(operations_research::sat *a1, uint64_t a2)
{
  operations_research::sat *v4;
  operations_research::sat *v5;
  int v6;
  BOOL v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  signed int v20;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unint64_t v29;
  int v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint32x2_t v36;
  int32x2_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int32x2_t v40;
  int8x16_t result;
  uint64_t v42;
  uint64_t v43;

  v4 = (operations_research::sat *)operations_research::sat::SatParameters_VariableOrder_descriptor(a1);
  v5 = v4;
  v6 = *((_DWORD *)v4 + 11);
  v7 = __OFSUB__(v6, 1);
  v8 = v6 - 1;
  if (v8 < 0 != v7)
  {
    v9 = 0;
  }
  else
  {
    LODWORD(v42) = 0;
    HIDWORD(v42) = v8;
    v43 = v42;
    v4 = (operations_research::sat *)absl::lts_2020_02_25::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v42, (uint64_t)a1, (int *)&v43);
    v9 = (int)v4;
  }
  v10 = *(_DWORD *)(*((_QWORD *)v5 + 6) + 40 * v9 + 16);
  *(_DWORD *)(a2 + 16) |= 2u;
  *(_DWORD *)(a2 + 64) = v10;
  v11 = operations_research::sat::SatParameters_Polarity_descriptor(v4);
  v12 = *(_DWORD *)(v11 + 44);
  v7 = __OFSUB__(v12, 1);
  v13 = v12 - 1;
  if (v13 < 0 != v7)
  {
    v14 = 0;
  }
  else
  {
    LODWORD(v42) = 0;
    HIDWORD(v42) = v13;
    v43 = v42;
    v14 = absl::lts_2020_02_25::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v42, (uint64_t)a1, (int *)&v43);
  }
  v15 = *(_DWORD *)(*(_QWORD *)(v11 + 48) + 40 * v14 + 16);
  *(_DWORD *)(a2 + 20) |= 0x8000u;
  *(_DWORD *)(a2 + 196) = v15;
  v16 = *((_QWORD *)a1 + 312);
  v17 = (v16 + 1) % 0x270uLL;
  v18 = *((_DWORD *)a1 + (v16 + 397) % 0x270uLL) ^ ((*((_DWORD *)a1 + v17) & 0x7FFFFFFE | *((_DWORD *)a1 + v16) & 0x80000000) >> 1) ^ ((int)(*((_DWORD *)a1 + v17) << 31) >> 31) & 0x9908B0DF;
  *((_DWORD *)a1 + v16) = v18;
  v19 = ((v18 ^ (v18 >> 11)) << 7) & 0x9D2C5680 ^ v18 ^ (v18 >> 11);
  v20 = (v19 << 15) & 0xEFC60000 ^ v19;
  v22 = (v20 ^ (v20 >> 18)) != 0x80000000 && v20 >= 0;
  *(_DWORD *)(a2 + 24) |= 1u;
  *(_BYTE *)(a2 + 304) = v22;
  if (v17 == 623)
    v23 = 0;
  else
    v23 = v17 + 1;
  v24 = 4 * v23;
  v25 = 397;
  if (v17 >= 0xE3)
    v25 = -227;
  v26 = *((_DWORD *)a1 + v17 + v25) ^ ((*((_DWORD *)a1 + v23) & 0x7FFFFFFE | *((_DWORD *)a1 + v17) & 0x80000000) >> 1) ^ ((int)(*((_DWORD *)a1 + v23) << 31) >> 31) & 0x9908B0DF;
  *((_DWORD *)a1 + v17) = v26;
  v27 = ((v26 ^ (v26 >> 11)) << 7) & 0x9D2C5680 ^ v26 ^ (v26 >> 11);
  v28 = (v27 << 15) & 0xEFC60000 ^ v27;
  *(_DWORD *)(a2 + 16) |= 0x10u;
  if (v23 + 1 < 0x270)
    v29 = v23 + 1;
  else
    v29 = v23 - 623;
  v30 = *((_DWORD *)a1 + v29);
  v31 = v30 & 0x7FFFFFFE | *((_DWORD *)a1 + v23) & 0x80000000;
  v32 = v23 + 397;
  v33 = v23 - 227;
  if (v32 < 0x270)
    v33 = v32;
  v34 = *((_DWORD *)a1 + v33) ^ (v31 >> 1) ^ (v30 << 31 >> 31) & 0x9908B0DF;
  *(_DWORD *)((char *)a1 + v24) = v34;
  v35 = ((v34 ^ (v34 >> 11)) << 7) & 0x9D2C5680 ^ v34 ^ (v34 >> 11);
  *((_QWORD *)a1 + 312) = v29;
  *(_DWORD *)(a2 + 16) |= 8u;
  v36.i32[0] = (v35 << 15) & 0xEFC60000 ^ v35;
  v36.i32[1] = v28;
  v37 = vceq_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32(v36, 0x12uLL), (int8x8_t)v36), (int32x2_t)0x8000000080000000);
  v38.i64[0] = v37.i32[0];
  v38.i64[1] = v37.i32[1];
  v39 = v38;
  v40 = vcgt_s32((int32x2_t)v36, (int32x2_t)-1);
  v38.i64[0] = v40.i32[0];
  v38.i64[1] = v40.i32[1];
  result = vbicq_s8(vandq_s8((int8x16_t)vdupq_n_s64(0x3F847AE147AE147BuLL), v38), v39);
  *(int8x16_t *)(a2 + 72) = result;
  return result;
}

unint64_t std::discrete_distribution<int>::operator()<operations_research::sat::ModelRandomGenerator>(uint64_t a1, uint64_t a2, double **a3)
{
  double *v3;
  double *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  double v14;
  unsigned int v15;
  double v16;
  unint64_t v17;
  unint64_t v18;
  double *v19;
  double *v20;
  double v21;

  v3 = *a3;
  v4 = a3[1];
  v5 = *(_QWORD *)(a2 + 2496);
  v6 = (v5 + 1) % 0x270uLL;
  v7 = 4 * v5;
  v8 = *(_DWORD *)(a2 + 4 * ((v5 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(a2 + 4 * v6) & 0x7FFFFFFE | *(_DWORD *)(a2 + 4 * v5) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a2 + 4 * v6) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(a2 + v7) = v8;
  if (v6 == 623)
    v9 = 0;
  else
    v9 = v6 + 1;
  v10 = 397;
  if (v6 >= 0xE3)
    v10 = -227;
  v11 = *(_DWORD *)(a2 + 4 * (v10 + v6)) ^ ((*(_DWORD *)(a2 + 4 * v9) & 0x7FFFFFFE | *(_DWORD *)(a2 + 4 * v6) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a2 + 4 * v9) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(a2 + 4 * v6) = v11;
  *(_QWORD *)(a2 + 2496) = v9;
  v12 = (char *)v4 - (char *)v3;
  if (v4 != v3)
  {
    v13 = ((v8 ^ (v8 >> 11)) << 7) & 0x9D2C5680 ^ v8 ^ (v8 >> 11);
    v14 = (double)((v13 << 15) & 0xEFC60000 ^ v13 ^ (((v13 << 15) & 0xEFC60000 ^ v13) >> 18));
    v15 = ((v11 ^ (v11 >> 11)) << 7) & 0x9D2C5680 ^ v11 ^ (v11 >> 11);
    v16 = (v14 + (double)((v15 << 15) & 0xEFC60000 ^ v15 ^ (((v15 << 15) & 0xEFC60000 ^ v15) >> 18)) * 4294967300.0)
        * 5.42101086e-20
        + 0.0;
    v17 = v12 >> 3;
    v4 = v3;
    do
    {
      v18 = v17 >> 1;
      v19 = &v4[v17 >> 1];
      v21 = *v19;
      v20 = v19 + 1;
      v17 += ~(v17 >> 1);
      if (v16 < v21)
        v17 = v18;
      else
        v4 = v20;
    }
    while (v17);
  }
  return (unint64_t)((char *)v4 - (char *)v3) >> 3;
}

_QWORD *std::__function::__func<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~__func(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_24F986FD0;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~__func(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_24F986FD0;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x50uLL);
  *v2 = &off_24F986FD0;
  std::__compressed_pair_elem<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_22DB7DF68(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24F986FD0;
  return std::__compressed_pair_elem<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::destroy(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
}

void std::__function::__func<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;
  void *v3;

  v2 = (void *)__p[4];
  if (v2)
  {
    __p[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)__p[1];
  if (v3)
  {
    __p[2] = v3;
    operator delete(v3);
  }
  operator delete(__p);
}

uint64_t std::__function::__func<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::operator()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t i;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  int64_t v10;
  uint64_t result;

  v2 = a1[1];
  v1 = a1[2];
  if (v1 != v2)
  {
    for (i = 0; i < (v1 - v2) >> 3; ++i)
    {
      v5 = *(_QWORD *)(a1[4] + 8 * i);
      v6 = *(_DWORD *)(v2 + 8 * i);
      if (v6 == -1)
      {
        v7 = *(int *)(v2 + 8 * i + 4);
        v8 = (_QWORD *)a1[8];
        v9 = *(int *)(v8[51] + 4 * v7);
        if (((_DWORD)v9 == -1
           || ((*(_QWORD *)(*(_QWORD *)(v8[117] + 24) + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
          && *(_QWORD *)(v8[5] + 12 * (int)v7) + *(_QWORD *)(v8[5] + 12 * (int)(v7 ^ 1)))
        {
          if ((v7 & 0xFFFFFFFE) == (_DWORD)v7)
            v10 = *(_QWORD *)(a1[4] + 8 * i);
          else
            v10 = -v5;
          result = operations_research::sat::SplitAroundGivenValue(v7 & 0xFFFFFFFE, v10, a1[9]);
          if ((_DWORD)result != -1)
            return result;
          v2 = a1[1];
          v1 = a1[2];
        }
      }
      else if (((*(_QWORD *)(*(_QWORD *)(a1[7] + 24) + (((unint64_t)(2 * v6) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (2 * (v6 & 0x1Fu))) & 3) == 0)
      {
        return (v5 != 1) | (2 * v6);
      }
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t std::__function::__func<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat10FollowHintERKNSt3__16vectorINS0_24BooleanOrIntegerVariableENS1_9alloca"
                     "torIS3_EEEERKNS2_IN3gtl7IntTypeINS0_17IntegerValue_tag_ExEENS4_ISC_EEEEPNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat10FollowHintERKNSt3__16vectorINS0_24BooleanOrIntegerVariableE"
                                "NS1_9allocatorIS3_EEEERKNS2_IN3gtl7IntTypeINS0_17IntegerValue_tag_ExEENS4_ISC_EEEEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat10FollowHintERKNSt3__16vectorINS0_24BooleanOrIntegerVariableENS1_9allocatorIS3_EEEERKNS2_IN3gtl7IntTypeINS0_17IntegerValue_tag_ExEENS4_ISC_EEEEPNS0_5ModelEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat10FollowHintERKNSt3__16vectorINS0_24BooleanOrIntegerVariableENS1_9allocatorIS3_EEEERKNS2_IN3gtl7IntTypeINS0_17IntegerValue_tag_ExEENS4_ISC_EEEEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::FollowHint(std::vector<operations_research::sat::BooleanOrIntegerVariable> const&,std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const&,operations_research::sat::Model *)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;
  __int128 v14;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a1 + 16) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a1 + 8) = v8;
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v10 = *(_BYTE **)(a2 + 24);
  v9 = *(_BYTE **)(a2 + 32);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = (char *)operator new(v9 - v10);
    *(_QWORD *)(a1 + 24) = v12;
    *(_QWORD *)(a1 + 32) = v12;
    v13 = &v12[8 * (v11 >> 3)];
    *(_QWORD *)(a1 + 40) = v13;
    memcpy(v12, v10, v11);
    *(_QWORD *)(a1 + 32) = v13;
  }
  v14 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v14;
  return a1;
}

void sub_22DB7E2A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::LinearProgrammingConstraintCollection>::~Delete(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  v2 = a1[1];
  *a1 = &off_24F987050;
  a1[1] = 0;
  if (v2)
  {
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x22E31DF78](v2, 0x80C40D6874129);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::LinearProgrammingConstraintCollection>::~Delete(_QWORD *a1)
{
  uint64_t v1;
  void *v2;

  v1 = a1[1];
  *a1 = &off_24F987050;
  a1[1] = 0;
  if (v1)
  {
    v2 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v2;
      operator delete(v2);
    }
    MEMORY[0x22E31DF78](v1, 0x80C40D6874129);
  }
  JUMPOUT(0x22E31DF78);
}

void std::__function::__func<operations_research::sat::RestartEveryKFailures(int,operations_research::sat::SatSolver *)::$_0,std::allocator<operations_research::sat::RestartEveryKFailures(int,operations_research::sat::SatSolver *)::$_0>,BOOL ()(void)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::sat::RestartEveryKFailures(int,operations_research::sat::SatSolver *)::$_0,std::allocator<operations_research::sat::RestartEveryKFailures(int,operations_research::sat::SatSolver *)::$_0>,BOOL ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24F987088;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<operations_research::sat::RestartEveryKFailures(int,operations_research::sat::SatSolver *)::$_0,std::allocator<operations_research::sat::RestartEveryKFailures(int,operations_research::sat::SatSolver *)::$_0>,BOOL ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F987088;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<operations_research::sat::RestartEveryKFailures(int,operations_research::sat::SatSolver *)::$_0,std::allocator<operations_research::sat::RestartEveryKFailures(int,operations_research::sat::SatSolver *)::$_0>,BOOL ()(void)>::operator()(uint64_t a1)
{
  int v2;
  uint64_t v3;
  int v4;
  _BOOL8 result;

  v2 = *(unsigned __int8 *)(a1 + 8);
  v3 = operations_research::sat::SatSolver::num_failures(*(operations_research::sat::SatSolver **)(a1 + 16));
  v4 = v3;
  if (v2)
  {
    result = 0;
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a1 + 24) + v4;
    *(_BYTE *)(a1 + 8) = 0;
  }
  else if (v3 >= *(int *)(a1 + 12))
  {
    result = 1;
    *(_BYTE *)(a1 + 8) = 1;
  }
  else
  {
    return *(_BYTE *)(a1 + 8) != 0;
  }
  return result;
}

uint64_t std::__function::__func<operations_research::sat::RestartEveryKFailures(int,operations_research::sat::SatSolver *)::$_0,std::allocator<operations_research::sat::RestartEveryKFailures(int,operations_research::sat::SatSolver *)::$_0>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat21RestartEveryKFailuresEiPNS0_9SatSolverEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat21RestartEveryKFailuresEiPNS0_9SatSolverEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat21RestartEveryKFailuresEiPNS0_9SatSolverEE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat21RestartEveryKFailuresEiPNS0_9SatSolverEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::RestartEveryKFailures(int,operations_research::sat::SatSolver *)::$_0,std::allocator<operations_research::sat::RestartEveryKFailures(int,operations_research::sat::SatSolver *)::$_0>,BOOL ()(void)>::target_type()
{
}

uint64_t operations_research::sat::Model::MyNew<operations_research::sat::RestartPolicy>(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>(a1);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 56) = 1;
  *(_OWORD *)(v2 + 60) = 0u;
  *(_OWORD *)(v2 + 76) = 0u;
  *(_OWORD *)(v2 + 92) = 0u;
  *(_OWORD *)(v2 + 108) = 0u;
  *(_QWORD *)(v2 + 124) = 0x100000000;
  *(_OWORD *)(v2 + 132) = 0u;
  *(_OWORD *)(v2 + 148) = 0u;
  *(_OWORD *)(v2 + 164) = 0u;
  *(_OWORD *)(v2 + 180) = 0u;
  *(_QWORD *)(v2 + 196) = 0x100000000;
  *(_DWORD *)(v2 + 268) = 0;
  *(_OWORD *)(v2 + 252) = 0u;
  *(_OWORD *)(v2 + 236) = 0u;
  *(_OWORD *)(v2 + 220) = 0u;
  *(_OWORD *)(v2 + 204) = 0u;
  operations_research::sat::RestartPolicy::Reset((operations_research::sat::RestartPolicy *)v2);
  return v2;
}

void sub_22DB7E5BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  std::deque<int>::~deque[abi:ne180100](v1 + 224);
  std::deque<int>::~deque[abi:ne180100](v1 + 152);
  std::deque<int>::~deque[abi:ne180100](v1 + 80);
  v3 = *(void **)(v1 + 24);
  if (v3)
  {
    *(_QWORD *)(v1 + 32) = v3;
    operator delete(v3);
  }
  MEMORY[0x22E31DF78](v1, 0x10F0C400998408DLL);
  _Unwind_Resume(a1);
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::RestartPolicy>::~Delete(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  v2 = a1[1];
  *a1 = &off_24F987108;
  a1[1] = 0;
  if (v2)
  {
    std::deque<int>::~deque[abi:ne180100](v2 + 224);
    std::deque<int>::~deque[abi:ne180100](v2 + 152);
    std::deque<int>::~deque[abi:ne180100](v2 + 80);
    v3 = *(void **)(v2 + 24);
    if (v3)
    {
      *(_QWORD *)(v2 + 32) = v3;
      operator delete(v3);
    }
    MEMORY[0x22E31DF78](v2, 0x10F0C400998408DLL);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::RestartPolicy>::~Delete(_QWORD *a1)
{
  uint64_t v1;
  void *v2;

  v1 = a1[1];
  *a1 = &off_24F987108;
  a1[1] = 0;
  if (v1)
  {
    std::deque<int>::~deque[abi:ne180100](v1 + 224);
    std::deque<int>::~deque[abi:ne180100](v1 + 152);
    std::deque<int>::~deque[abi:ne180100](v1 + 80);
    v2 = *(void **)(v1 + 24);
    if (v2)
    {
      *(_QWORD *)(v1 + 32) = v2;
      operator delete(v2);
    }
    MEMORY[0x22E31DF78](v1, 0x10F0C400998408DLL);
  }
  JUMPOUT(0x22E31DF78);
}

void std::__function::__func<operations_research::sat::SatSolverRestartPolicy(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SatSolverRestartPolicy(operations_research::sat::Model *)::$_0>,BOOL ()(void)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::SatSolverRestartPolicy(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SatSolverRestartPolicy(operations_research::sat::Model *)::$_0>,BOOL ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F987140;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::SatSolverRestartPolicy(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SatSolverRestartPolicy(operations_research::sat::Model *)::$_0>,BOOL ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F987140;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::SatSolverRestartPolicy(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SatSolverRestartPolicy(operations_research::sat::Model *)::$_0>,BOOL ()(void)>::operator()(uint64_t a1)
{
  return operations_research::sat::RestartPolicy::ShouldRestart(*(operations_research::sat::RestartPolicy **)(a1 + 8));
}

uint64_t std::__function::__func<operations_research::sat::SatSolverRestartPolicy(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SatSolverRestartPolicy(operations_research::sat::Model *)::$_0>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat22SatSolverRestartPolicyEPNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat22SatSolverRestartPolicyEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat22SatSolverRestartPolicyEPNS0_5ModelEE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat22SatSolverRestartPolicyEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::SatSolverRestartPolicy(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SatSolverRestartPolicy(operations_research::sat::Model *)::$_0>,BOOL ()(void)>::target_type()
{
}

void **std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__assign_with_size[abi:ne180100]<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const*,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const*>(void **result, _QWORD *a2, _QWORD *a3, size_t __sz)
{
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  char *v9;
  char *v10;
  void *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  void **v37;
  uint64_t v38;
  char *v39;
  _QWORD v40[3];
  void **v41;
  uint64_t v42;

  v6 = a2;
  v7 = result;
  v42 = *MEMORY[0x24BDAC8D0];
  v8 = (uint64_t)result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - (uint64_t)*result) >> 5)
  {
    if (!v9)
      goto LABEL_40;
    v10 = (char *)result[1];
    v11 = *result;
    if (v10 == v9)
    {
LABEL_39:
      v7[1] = v9;
      operator delete(v11);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
LABEL_40:
      if (__sz >> 59)
        goto LABEL_79;
      v24 = v8 >> 4;
      if (v8 >> 4 <= __sz)
        v24 = __sz;
      v25 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
      v26 = 0x7FFFFFFFFFFFFFFLL;
      if (!v25)
        v26 = v24;
      if (v26 >> 59)
LABEL_79:
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v27 = 4 * v26;
      result = (void **)operator new(32 * v26);
      v28 = (uint64_t)result;
      *v7 = result;
      v7[1] = result;
      v7[2] = &result[v27];
      if (v6 == a3)
      {
LABEL_56:
        v7[1] = (void *)v28;
        return result;
      }
      v29 = 0;
      while (1)
      {
        v30 = v28 + v29 * 8;
        v31 = &v6[v29];
        v32 = (_QWORD *)v6[v29 + 3];
        if (v32)
        {
          if (v31 == v32)
          {
            *(_QWORD *)(v28 + v29 * 8 + 24) = v30;
            result = (void **)(*(uint64_t (**)(_QWORD *, uint64_t))(*v31 + 24))(v31, v28 + v29 * 8);
            goto LABEL_50;
          }
          result = (void **)(*(uint64_t (**)(_QWORD))(*v32 + 16))(v6[v29 + 3]);
        }
        else
        {
          result = 0;
        }
        *(_QWORD *)(v30 + 24) = result;
LABEL_50:
        v29 += 4;
        if (&v6[v29] == a3)
        {
          v28 += v29 * 8;
          goto LABEL_56;
        }
      }
    }
    while (1)
    {
      v14 = v10 - 32;
      v12 = (char *)*((_QWORD *)v10 - 1);
      if (v10 - 32 == v12)
      {
        v12 = v10 - 32;
        v13 = 4;
      }
      else
      {
        if (!v12)
          goto LABEL_7;
        v13 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v12 + 8 * v13))();
LABEL_7:
      v10 = v14;
      if (v14 == v9)
      {
        v11 = *v7;
        goto LABEL_39;
      }
    }
  }
  v15 = (char *)result[1];
  v16 = (v15 - v9) >> 5;
  if (v16 >= __sz)
  {
    if (a2 != a3)
    {
      v21 = (char *)*result;
      while (1)
      {
        v23 = (_QWORD *)v6[3];
        if (v23)
        {
          if (v6 == v23)
          {
            v41 = (void **)v40;
            (*(void (**)(_QWORD *, _QWORD *))(*v6 + 24))(v6, v40);
          }
          else
          {
            v41 = (void **)(*(uint64_t (**)(_QWORD *))(*v23 + 16))(v23);
          }
        }
        else
        {
          v41 = 0;
        }
        std::__function::__value_func<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::swap[abi:ne180100](v40, v9);
        result = v41;
        if (v41 == v40)
        {
          result = (void **)v40;
          v22 = 4;
        }
        else
        {
          if (!v41)
            goto LABEL_29;
          v22 = 5;
        }
        result = (void **)(*((uint64_t (**)(void))*result + v22))();
LABEL_29:
        v6 += 4;
        v9 += 32;
        v21 += 32;
        if (v6 == a3)
        {
          v15 = (char *)v7[1];
          if (v15 != v21)
            goto LABEL_76;
LABEL_71:
          v7[1] = v21;
          return result;
        }
      }
    }
    v21 = (char *)*result;
    if (v15 == v9)
      goto LABEL_71;
    while (1)
    {
LABEL_76:
      v39 = v15 - 32;
      result = (void **)*((_QWORD *)v15 - 1);
      if (v15 - 32 == (char *)result)
      {
        result = (void **)(v15 - 32);
        v38 = 4;
      }
      else
      {
        if (!result)
          goto LABEL_75;
        v38 = 5;
      }
      result = (void **)(*((uint64_t (**)(void))*result + v38))();
LABEL_75:
      v15 = v39;
      if (v39 == v21)
        goto LABEL_71;
    }
  }
  if (v15 == v9)
    goto LABEL_58;
  v17 = 32 * v16;
  v18 = a2;
  do
  {
    v20 = (_QWORD *)v18[3];
    if (v20)
    {
      if (v18 == v20)
      {
        v41 = (void **)v40;
        (*(void (**)(_QWORD *, _QWORD *))(*v18 + 24))(v18, v40);
      }
      else
      {
        v41 = (void **)(*(uint64_t (**)(_QWORD *))(*v20 + 16))(v20);
      }
    }
    else
    {
      v41 = 0;
    }
    std::__function::__value_func<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::swap[abi:ne180100](v40, v9);
    result = v41;
    if (v41 == v40)
    {
      result = (void **)v40;
      v19 = 4;
LABEL_15:
      result = (void **)(*((uint64_t (**)(void))*result + v19))();
      goto LABEL_16;
    }
    if (v41)
    {
      v19 = 5;
      goto LABEL_15;
    }
LABEL_16:
    v18 += 4;
    v9 += 32;
    v17 -= 32;
  }
  while (v17);
  v9 = (char *)v7[1];
LABEL_58:
  v33 = &v6[4 * v16];
  v34 = v9;
  if (v33 == a3)
    goto LABEL_69;
  v35 = 0;
  while (2)
  {
    v36 = &v9[v35 * 8];
    v37 = (void **)&v33[v35];
    result = (void **)v33[v35 + 3];
    if (!result)
      goto LABEL_61;
    if (v37 != result)
    {
      result = (void **)(*((uint64_t (**)(void **))*result + 2))(result);
LABEL_61:
      *((_QWORD *)v36 + 3) = result;
      goto LABEL_62;
    }
    *(_QWORD *)&v9[v35 * 8 + 24] = v36;
    result = (void **)(*(uint64_t (**)(void *, char *))(*(_QWORD *)v37[3] + 24))(v37[3], &v9[v35 * 8]);
LABEL_62:
    v35 += 4;
    if (&v33[v35] != a3)
      continue;
    break;
  }
  v34 = &v9[v35 * 8];
LABEL_69:
  v7[1] = v34;
  return result;
}

void sub_22DB7EC00(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (v3)
    operations_research::sat::ConfigureSearchHeuristics(v2 + v3);
  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__value_func<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_22DB7EDD0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void **std::vector<std::function<BOOL ()(void)>>::__assign_with_size[abi:ne180100]<std::function<BOOL ()(void)> const*,std::function<BOOL ()(void)> const*>(void **result, _QWORD *a2, _QWORD *a3, size_t __sz)
{
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  char *v9;
  char *v10;
  void *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  void **v37;
  uint64_t v38;
  char *v39;
  _QWORD v40[3];
  void **v41;
  uint64_t v42;

  v6 = a2;
  v7 = result;
  v42 = *MEMORY[0x24BDAC8D0];
  v8 = (uint64_t)result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - (uint64_t)*result) >> 5)
  {
    if (!v9)
      goto LABEL_40;
    v10 = (char *)result[1];
    v11 = *result;
    if (v10 == v9)
    {
LABEL_39:
      v7[1] = v9;
      operator delete(v11);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
LABEL_40:
      if (__sz >> 59)
        goto LABEL_79;
      v24 = v8 >> 4;
      if (v8 >> 4 <= __sz)
        v24 = __sz;
      v25 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
      v26 = 0x7FFFFFFFFFFFFFFLL;
      if (!v25)
        v26 = v24;
      if (v26 >> 59)
LABEL_79:
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v27 = 4 * v26;
      result = (void **)operator new(32 * v26);
      v28 = (uint64_t)result;
      *v7 = result;
      v7[1] = result;
      v7[2] = &result[v27];
      if (v6 == a3)
      {
LABEL_56:
        v7[1] = (void *)v28;
        return result;
      }
      v29 = 0;
      while (1)
      {
        v30 = v28 + v29 * 8;
        v31 = &v6[v29];
        v32 = (_QWORD *)v6[v29 + 3];
        if (v32)
        {
          if (v31 == v32)
          {
            *(_QWORD *)(v28 + v29 * 8 + 24) = v30;
            result = (void **)(*(uint64_t (**)(_QWORD *, uint64_t))(*v31 + 24))(v31, v28 + v29 * 8);
            goto LABEL_50;
          }
          result = (void **)(*(uint64_t (**)(_QWORD))(*v32 + 16))(v6[v29 + 3]);
        }
        else
        {
          result = 0;
        }
        *(_QWORD *)(v30 + 24) = result;
LABEL_50:
        v29 += 4;
        if (&v6[v29] == a3)
        {
          v28 += v29 * 8;
          goto LABEL_56;
        }
      }
    }
    while (1)
    {
      v14 = v10 - 32;
      v12 = (char *)*((_QWORD *)v10 - 1);
      if (v10 - 32 == v12)
      {
        v12 = v10 - 32;
        v13 = 4;
      }
      else
      {
        if (!v12)
          goto LABEL_7;
        v13 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v12 + 8 * v13))();
LABEL_7:
      v10 = v14;
      if (v14 == v9)
      {
        v11 = *v7;
        goto LABEL_39;
      }
    }
  }
  v15 = (char *)result[1];
  v16 = (v15 - v9) >> 5;
  if (v16 >= __sz)
  {
    if (a2 != a3)
    {
      v21 = (char *)*result;
      while (1)
      {
        v23 = (_QWORD *)v6[3];
        if (v23)
        {
          if (v6 == v23)
          {
            v41 = (void **)v40;
            (*(void (**)(_QWORD *, _QWORD *))(*v6 + 24))(v6, v40);
          }
          else
          {
            v41 = (void **)(*(uint64_t (**)(_QWORD *))(*v23 + 16))(v23);
          }
        }
        else
        {
          v41 = 0;
        }
        std::__function::__value_func<BOOL ()(void)>::swap[abi:ne180100](v40, v9);
        result = v41;
        if (v41 == v40)
        {
          result = (void **)v40;
          v22 = 4;
        }
        else
        {
          if (!v41)
            goto LABEL_29;
          v22 = 5;
        }
        result = (void **)(*((uint64_t (**)(void))*result + v22))();
LABEL_29:
        v6 += 4;
        v9 += 32;
        v21 += 32;
        if (v6 == a3)
        {
          v15 = (char *)v7[1];
          if (v15 != v21)
            goto LABEL_76;
LABEL_71:
          v7[1] = v21;
          return result;
        }
      }
    }
    v21 = (char *)*result;
    if (v15 == v9)
      goto LABEL_71;
    while (1)
    {
LABEL_76:
      v39 = v15 - 32;
      result = (void **)*((_QWORD *)v15 - 1);
      if (v15 - 32 == (char *)result)
      {
        result = (void **)(v15 - 32);
        v38 = 4;
      }
      else
      {
        if (!result)
          goto LABEL_75;
        v38 = 5;
      }
      result = (void **)(*((uint64_t (**)(void))*result + v38))();
LABEL_75:
      v15 = v39;
      if (v39 == v21)
        goto LABEL_71;
    }
  }
  if (v15 == v9)
    goto LABEL_58;
  v17 = 32 * v16;
  v18 = a2;
  do
  {
    v20 = (_QWORD *)v18[3];
    if (v20)
    {
      if (v18 == v20)
      {
        v41 = (void **)v40;
        (*(void (**)(_QWORD *, _QWORD *))(*v18 + 24))(v18, v40);
      }
      else
      {
        v41 = (void **)(*(uint64_t (**)(_QWORD *))(*v20 + 16))(v20);
      }
    }
    else
    {
      v41 = 0;
    }
    std::__function::__value_func<BOOL ()(void)>::swap[abi:ne180100](v40, v9);
    result = v41;
    if (v41 == v40)
    {
      result = (void **)v40;
      v19 = 4;
LABEL_15:
      result = (void **)(*((uint64_t (**)(void))*result + v19))();
      goto LABEL_16;
    }
    if (v41)
    {
      v19 = 5;
      goto LABEL_15;
    }
LABEL_16:
    v18 += 4;
    v9 += 32;
    v17 -= 32;
  }
  while (v17);
  v9 = (char *)v7[1];
LABEL_58:
  v33 = &v6[4 * v16];
  v34 = v9;
  if (v33 == a3)
    goto LABEL_69;
  v35 = 0;
  while (2)
  {
    v36 = &v9[v35 * 8];
    v37 = (void **)&v33[v35];
    result = (void **)v33[v35 + 3];
    if (!result)
      goto LABEL_61;
    if (v37 != result)
    {
      result = (void **)(*((uint64_t (**)(void **))*result + 2))(result);
LABEL_61:
      *((_QWORD *)v36 + 3) = result;
      goto LABEL_62;
    }
    *(_QWORD *)&v9[v35 * 8 + 24] = v36;
    result = (void **)(*(uint64_t (**)(void *, char *))(*(_QWORD *)v37[3] + 24))(v37[3], &v9[v35 * 8]);
LABEL_62:
    v35 += 4;
    if (&v33[v35] != a3)
      continue;
    break;
  }
  v34 = &v9[v35 * 8];
LABEL_69:
  v7[1] = v34;
  return result;
}

void sub_22DB7F1EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (v3)
    operations_research::sat::ConfigureSearchHeuristics(v2 + v3);
  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_0>,BOOL ()(void)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_0>,BOOL ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24F9871C0;
  return result;
}

void std::__function::__func<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_0>,BOOL ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24F9871C0;
}

uint64_t std::__function::__func<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_0>,BOOL ()(void)>::operator()()
{
  return 0;
}

uint64_t std::__function::__func<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_0>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat25ConfigureSearchHeuristicsEPNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat25ConfigureSearchHeuristicsEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat25ConfigureSearchHeuristicsEPNS0_5ModelEE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat25ConfigureSearchHeuristicsEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_0>,BOOL ()(void)>::target_type()
{
}

void std::__function::__func<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_1>,BOOL ()(void)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_1>,BOOL ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24F987240;
  return result;
}

void std::__function::__func<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_1>,BOOL ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24F987240;
}

uint64_t std::__function::__func<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_1>,BOOL ()(void)>::operator()()
{
  return 0;
}

uint64_t std::__function::__func<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_1>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat25ConfigureSearchHeuristicsEPNS0_5ModelEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat25ConfigureSearchHeuristicsEPNS0_5ModelEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat25ConfigureSearchHeuristicsEPNS0_5ModelEE3$_1"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat25ConfigureSearchHeuristicsEPNS0_5ModelEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::ConfigureSearchHeuristics(operations_research::sat::Model *)::$_1>,BOOL ()(void)>::target_type()
{
}

uint64_t std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__push_back_slow_path<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>(uint64_t *a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v24;
  uint64_t v25;
  char *v26;

  v4 = (char *)*a1;
  v3 = (char *)a1[1];
  v5 = (uint64_t)&v3[-*a1] >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v8 = a1[2] - (_QWORD)v4;
  if (v8 >> 4 > v6)
    v6 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9)
  {
    if (v9 >> 59)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v10 = (char *)operator new(32 * v9);
    v11 = (uint64_t)&v10[32 * v5];
    v12 = a2 + 3;
    v13 = (_QWORD *)a2[3];
    if (v13)
    {
LABEL_10:
      if (v13 == a2)
      {
        *(_QWORD *)(v11 + 24) = v11;
        (*(void (**)(_QWORD *, uint64_t))(*a2 + 24))(a2, v11);
        v4 = (char *)*a1;
        v3 = (char *)a1[1];
        v14 = v11;
        if (v3 == (char *)*a1)
          goto LABEL_26;
      }
      else
      {
        *(_QWORD *)(v11 + 24) = v13;
        *v12 = 0;
        v14 = v11;
        if (v3 == v4)
          goto LABEL_26;
      }
      goto LABEL_17;
    }
  }
  else
  {
    v10 = 0;
    v11 = 32 * v5;
    v12 = a2 + 3;
    v13 = (_QWORD *)a2[3];
    if (v13)
      goto LABEL_10;
  }
  *(_QWORD *)(v11 + 24) = 0;
  v14 = v11;
  if (v3 != v4)
  {
LABEL_17:
    v15 = 0;
    v16 = v3;
    while (1)
    {
      v18 = v11 + v15;
      v19 = &v3[v15];
      v20 = *(char **)&v3[v15 - 8];
      if (v20)
      {
        if (v19 - 32 == v20)
        {
          *(_QWORD *)(v18 - 8) = v18 - 32;
          (*(void (**)(_QWORD))(**((_QWORD **)v19 - 1) + 24))(*((_QWORD *)v19 - 1));
          goto LABEL_20;
        }
        v17 = v16 - 8;
        *(_QWORD *)(v18 - 8) = v20;
      }
      else
      {
        v17 = (char *)(v18 - 8);
      }
      *(_QWORD *)v17 = 0;
LABEL_20:
      v16 -= 32;
      v15 -= 32;
      if (&v3[v15] == v4)
      {
        v14 = v11 + v15;
        break;
      }
    }
  }
LABEL_26:
  v22 = (char *)*a1;
  v21 = (char *)a1[1];
  *a1 = v14;
  a1[1] = v11 + 32;
  a1[2] = (uint64_t)&v10[32 * v9];
  if (v21 != v22)
  {
    do
    {
      v26 = v21 - 32;
      v24 = (char *)*((_QWORD *)v21 - 1);
      if (v21 - 32 == v24)
      {
        v24 = v21 - 32;
        v25 = 4;
      }
      else
      {
        if (!v24)
          goto LABEL_32;
        v25 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_32:
      v21 = v26;
    }
    while (v26 != v22);
  }
  if (v22)
    operator delete(v22);
  return v11 + 32;
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::SearchHeuristicsVector>::~Delete(_QWORD *a1)
{
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  uint64_t v7;
  char *v8;

  v2 = (void **)a1[1];
  *a1 = &off_24F9872C0;
  a1[1] = 0;
  if (v2)
  {
    v3 = (char *)*v2;
    if (!*v2)
    {
LABEL_13:
      MEMORY[0x22E31DF78](v2, 0x20C40960023A9);
      return a1;
    }
    v4 = (char *)v2[1];
    v5 = *v2;
    if (v4 == v3)
    {
LABEL_12:
      v2[1] = v3;
      operator delete(v5);
      goto LABEL_13;
    }
    while (1)
    {
      v8 = v4 - 32;
      v6 = (char *)*((_QWORD *)v4 - 1);
      if (v4 - 32 == v6)
      {
        v6 = v4 - 32;
        v7 = 4;
      }
      else
      {
        if (!v6)
          goto LABEL_7;
        v7 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_7:
      v4 = v8;
      if (v8 == v3)
      {
        v5 = *v2;
        goto LABEL_12;
      }
    }
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::SearchHeuristicsVector>::~Delete(_QWORD *a1)
{
  void **v1;
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  uint64_t v6;
  char *v7;

  v1 = (void **)a1[1];
  *a1 = &off_24F9872C0;
  a1[1] = 0;
  if (!v1)
LABEL_14:
    JUMPOUT(0x22E31DF78);
  v2 = (char *)*v1;
  if (!*v1)
  {
LABEL_13:
    MEMORY[0x22E31DF78](v1, 0x20C40960023A9);
    goto LABEL_14;
  }
  v3 = (char *)v1[1];
  v4 = *v1;
  if (v3 == v2)
  {
LABEL_12:
    v1[1] = v2;
    operator delete(v4);
    goto LABEL_13;
  }
  while (1)
  {
    v7 = v3 - 32;
    v5 = (char *)*((_QWORD *)v3 - 1);
    if (v3 - 32 == v5)
    {
      v5 = v3 - 32;
      v6 = 4;
    }
    else
    {
      if (!v5)
        goto LABEL_7;
      v6 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_7:
    v3 = v7;
    if (v7 == v2)
    {
      v4 = *v1;
      goto LABEL_12;
    }
  }
}

_QWORD *std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>,std::__wrap_iter<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>*>>(uint64_t *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  _QWORD *i;
  void **v34;
  uint64_t v35;
  _QWORD *v36;
  void *__p;
  char *v39;
  char *v40;
  void **p_p;
  _QWORD *v42;
  uint64_t v43;

  v5 = a2;
  v43 = *MEMORY[0x24BDAC8D0];
  if (a5 < 1)
    return v5;
  v7 = a3;
  v9 = a1[2];
  v10 = a1[1];
  if (a5 <= (uint64_t)(v9 - v10) >> 5)
  {
    v16 = v10 - (_QWORD)a2;
    v17 = (uint64_t)(v10 - (_QWORD)a2) >> 5;
    if (v17 >= a5)
    {
      v19 = &a3[4 * a5];
      goto LABEL_42;
    }
    v19 = &a3[4 * v17];
    if (v19 != a4)
    {
      v20 = 0;
      while (1)
      {
        v22 = v10 + v20 * 8;
        v23 = &v19[v20];
        v21 = v19[v20 + 3];
        if (v21)
        {
          if (v23 == (_QWORD *)v21)
          {
            *(_QWORD *)(v10 + v20 * 8 + 24) = v22;
            (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)v23[3] + 24))(v23[3], v10 + v20 * 8);
            goto LABEL_17;
          }
          v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
        }
        *(_QWORD *)(v22 + 24) = v21;
LABEL_17:
        v20 += 4;
        if (&v19[v20] == a4)
        {
          a1[1] = v10 + v20 * 8;
          if (v16 < 1)
            return v5;
          goto LABEL_42;
        }
      }
    }
    a1[1] = v10;
    if (v16 < 1)
      return v5;
LABEL_42:
    std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__move_range(a1, (uint64_t)v5, v10, (uint64_t)&v5[4 * a5]);
    if (v19 == v7)
      return v5;
    for (i = v5; ; i += 4)
    {
      v36 = (_QWORD *)v7[3];
      if (v36)
      {
        if (v7 == v36)
        {
          p_p = &__p;
          (*(void (**)(_QWORD *, void **))(*v7 + 24))(v7, &__p);
        }
        else
        {
          p_p = (void **)(*(uint64_t (**)(_QWORD *))(*v36 + 16))(v36);
        }
      }
      else
      {
        p_p = 0;
      }
      std::__function::__value_func<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::swap[abi:ne180100](&__p, i);
      v34 = p_p;
      if (p_p == &__p)
      {
        v34 = &__p;
        v35 = 4;
      }
      else
      {
        if (!p_p)
          goto LABEL_46;
        v35 = 5;
      }
      (*((void (**)(void))*v34 + v35))();
LABEL_46:
      v7 += 4;
      if (v7 == v19)
        return v5;
    }
  }
  v11 = *a1;
  v12 = a5 + ((uint64_t)(v10 - *a1) >> 5);
  if (v12 >> 59)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v13 = v9 - v11;
  if (v13 >> 4 > v12)
    v12 = v13 >> 4;
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0)
    v14 = 0x7FFFFFFFFFFFFFFLL;
  else
    v14 = v12;
  v42 = a1 + 2;
  if (v14)
  {
    if (v14 >> 59)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v15 = (char *)operator new(32 * v14);
  }
  else
  {
    v15 = 0;
  }
  v24 = &v15[32 * (((uint64_t)v5 - v11) >> 5)];
  __p = v15;
  v39 = v24;
  v40 = v24;
  p_p = (void **)&v15[32 * v14];
  v25 = 32 * a5;
  v26 = &v24[32 * a5];
  do
  {
    v27 = v7[3];
    if (!v27)
      goto LABEL_25;
    if (v7 != (_QWORD *)v27)
    {
      v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
LABEL_25:
      *((_QWORD *)v24 + 3) = v27;
      goto LABEL_26;
    }
    *((_QWORD *)v24 + 3) = v24;
    (*(void (**)(_QWORD *, char *))(*v7 + 24))(v7, v24);
LABEL_26:
    v24 += 32;
    v7 += 4;
    v25 -= 32;
  }
  while (v25);
  v40 = v26;
  v5 = std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__swap_out_circular_buffer(a1, &__p, v5);
  v29 = v39;
  v28 = v40;
  if (v40 != v39)
  {
    do
    {
      v31 = v28 - 32;
      v40 = v31;
      v32 = (char *)*((_QWORD *)v28 - 1);
      if (v32 == v31)
      {
        v30 = 4;
      }
      else
      {
        if (!v32)
          goto LABEL_35;
        v31 = v32;
        v30 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v31 + 8 * v30))();
      v31 = v40;
LABEL_35:
      v28 = v31;
    }
    while (v31 != v29);
  }
  if (__p)
    operator delete(__p);
  return v5;
}

void sub_22DB7FA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__split_buffer<std::function<void ()(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)>>::~__split_buffer((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22DB7FAAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (v3)
    operations_research::sat::ConfigureSearchHeuristics(v2 + v3);
  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void sub_22DB7FAD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__split_buffer<std::function<void ()(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)>>::~__split_buffer((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__move_range(_QWORD *result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  v5 = result;
  v6 = result[1];
  v7 = (v6 - a4) >> 5;
  v8 = a2 + v6 - a4;
  if (v8 < a3)
  {
    v10 = (_QWORD *)(a2 + 32 * v7 + 24);
    v11 = result[1];
    while (1)
    {
      v14 = (_QWORD *)*v10;
      if (*v10)
      {
        if (v10 - 3 == v14)
        {
          *(_QWORD *)(v11 + 24) = v11;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v10 + 24))(*v10, v11);
          goto LABEL_5;
        }
        *(_QWORD *)(v11 + 24) = v14;
        v12 = v10;
      }
      else
      {
        v12 = (_QWORD *)(v11 + 24);
      }
      *v12 = 0;
LABEL_5:
      v11 += 32;
      v13 = v10 + 1;
      v10 += 4;
      if ((unint64_t)v13 >= a3)
        goto LABEL_11;
    }
  }
  v11 = result[1];
LABEL_11:
  v5[1] = v11;
  if (v6 != a4)
  {
    v15 = 0;
    v16 = -32 * v7;
    v17 = v8;
    do
    {
      v18 = (uint64_t *)(v6 + v15 - 8);
      result = (_QWORD *)*v18;
      v19 = v6 + v15 - 32;
      *v18 = 0;
      if ((_QWORD *)v19 == result)
      {
        result = (_QWORD *)(v6 + v15 - 32);
        v20 = 4;
      }
      else
      {
        if (!result)
          goto LABEL_21;
        v20 = 5;
      }
      result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v20))();
LABEL_21:
      v21 = *(_QWORD **)(v8 + v15 - 8);
      if (v21)
      {
        if ((_QWORD *)(v8 + v15 - 32) == v21)
        {
          *v18 = v19;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v8 + v15 - 8) + 24))(*(_QWORD *)(v8 + v15 - 8), v6 + v15 - 32);
          goto LABEL_15;
        }
        *v18 = (uint64_t)v21;
        v18 = (uint64_t *)(v17 - 8);
      }
      *v18 = 0;
LABEL_15:
      v17 -= 32;
      v15 -= 32;
    }
    while (v16 != v15);
  }
  return result;
}

_QWORD *std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v6 = (_QWORD *)a2[1];
  v7 = (_QWORD *)*a1;
  v8 = v6;
  if ((_QWORD *)*a1 != a3)
  {
    v9 = v6 - 1;
    v10 = a3;
    while (1)
    {
      v12 = (_QWORD *)*(v10 - 1);
      v13 = v10 - 4;
      v11 = v9;
      if (v12)
      {
        if (v13 == v12)
        {
          *v9 = v9 - 3;
          (*(void (**)(_QWORD))(*(_QWORD *)*(v10 - 1) + 24))(*(v10 - 1));
          goto LABEL_5;
        }
        *v9 = v12;
        v11 = v10 - 1;
      }
      *v11 = 0;
LABEL_5:
      v9 -= 4;
      v10 = v13;
      if (v13 == v7)
      {
        v8 = v9 + 1;
        break;
      }
    }
  }
  a2[1] = v8;
  v14 = (_QWORD *)a1[1];
  v15 = a2[2];
  if (v14 != a3)
  {
    v16 = a3 + 3;
    while (1)
    {
      v19 = (_QWORD *)*v16;
      if (*v16)
      {
        if (v16 - 3 == v19)
        {
          *(_QWORD *)(v15 + 24) = v15;
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v16 + 24))(*v16, v15);
          goto LABEL_14;
        }
        *(_QWORD *)(v15 + 24) = v19;
        v17 = v16;
      }
      else
      {
        v17 = (_QWORD *)(v15 + 24);
      }
      *v17 = 0;
LABEL_14:
      v15 += 32;
      v18 = v16 + 1;
      v16 += 4;
      if (v18 == v14)
      {
        v8 = (_QWORD *)a2[1];
        break;
      }
    }
  }
  a2[2] = v15;
  v20 = (_QWORD *)*a1;
  *a1 = (uint64_t)v8;
  a2[1] = v20;
  v21 = a1[1];
  a1[1] = a2[2];
  a2[2] = v21;
  v22 = a1[2];
  a1[2] = a2[3];
  a2[3] = v22;
  *a2 = a2[1];
  return v6;
}

uint64_t operations_research::sat::Model::MyNew<operations_research::sat::Inprocessing>(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>(a1) + 16;
  *(_QWORD *)(v2 + 8) = operations_research::sat::Model::GetOrCreate<operations_research::sat::BinaryImplicationGraph>(a1);
  *(_QWORD *)(v2 + 16) = operations_research::sat::Model::GetOrCreate<operations_research::sat::LiteralWatchers>(a1);
  *(_QWORD *)(v2 + 24) = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>(a1);
  *(_QWORD *)(v2 + 32) = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>(a1);
  *(_QWORD *)(v2 + 40) = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(a1);
  *(_QWORD *)(v2 + 48) = operations_research::sat::Model::GetOrCreate<operations_research::sat::StampingSimplifier>(a1);
  *(_QWORD *)(v2 + 56) = operations_research::sat::Model::GetOrCreate<operations_research::sat::BlockedClauseSimplifier>(a1);
  *(_QWORD *)(v2 + 64) = operations_research::sat::Model::GetOrCreate<operations_research::sat::BoundedVariableElimination>(a1);
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 104) = a1;
  return v2;
}

void sub_22DB7FE88(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x1070C4066161334);
  _Unwind_Resume(a1);
}

operations_research::sat::LiteralWatchers *operations_research::sat::Model::GetOrCreate<operations_research::sat::LiteralWatchers>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  operations_research::sat::LiteralWatchers *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v19;

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 32);
  if (!v2)
    goto LABEL_12;
  v4 = (_QWORD *)(a1 + 32);
  do
  {
    v5 = v2[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::LiteralWatchers>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::LiteralWatchers>(void)::d)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 != v3 && v4[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::LiteralWatchers>(void)::d)
    return (operations_research::sat::LiteralWatchers *)v4[5];
LABEL_12:
  v8 = (operations_research::sat::LiteralWatchers *)operator new();
  operations_research::sat::LiteralWatchers::LiteralWatchers(v8, (operations_research::sat::Model *)a1);
  v9 = (_QWORD *)*v3;
  v10 = v3;
  if (*v3)
  {
    while (1)
    {
      while (1)
      {
        v10 = v9;
        v11 = v9[4];
        if (v11 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::LiteralWatchers>(void)::d)
          break;
        v9 = (_QWORD *)*v10;
        v3 = v10;
        if (!*v10)
          goto LABEL_19;
      }
      if (v11 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::LiteralWatchers>(void)::d)
        break;
      v9 = (_QWORD *)v10[1];
      if (!v9)
      {
        v3 = v10 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v12 = v10;
    v10 = operator new(0x30uLL);
    v10[4] = &gtl::FastTypeId<operations_research::sat::LiteralWatchers>(void)::d;
    v10[5] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v12;
    *v3 = v10;
    v13 = **(_QWORD **)(a1 + 24);
    v14 = v10;
    if (v13)
    {
      *(_QWORD *)(a1 + 24) = v13;
      v14 = (uint64_t *)*v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v14);
    ++*(_QWORD *)(a1 + 40);
  }
  v10[5] = v8;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24F9872F8;
  v15[1] = v8;
  v19 = v15;
  v16 = *(_QWORD **)(a1 + 56);
  if ((unint64_t)v16 >= *(_QWORD *)(a1 + 64))
  {
    v17 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a1 + 48), &v19);
  }
  else
  {
    *v16 = v15;
    v17 = (char *)(v16 + 1);
  }
  *(_QWORD *)(a1 + 56) = v17;
  return v8;
}

void sub_22DB80034(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x10F3C40FA235325);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::StampingSimplifier>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v19;

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 32);
  if (!v2)
    goto LABEL_12;
  v4 = (_QWORD *)(a1 + 32);
  do
  {
    v5 = v2[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::StampingSimplifier>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::StampingSimplifier>(void)::d)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 != v3 && v4[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::StampingSimplifier>(void)::d)
    return v4[5];
LABEL_12:
  v8 = operations_research::sat::Model::MyNew<operations_research::sat::StampingSimplifier>(a1);
  v9 = *(_QWORD **)(a1 + 32);
  v10 = v3;
  if (v9)
  {
    while (1)
    {
      while (1)
      {
        v10 = v9;
        v11 = v9[4];
        if (v11 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::StampingSimplifier>(void)::d)
          break;
        v9 = (_QWORD *)*v10;
        v3 = v10;
        if (!*v10)
          goto LABEL_19;
      }
      if (v11 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::StampingSimplifier>(void)::d)
        break;
      v9 = (_QWORD *)v10[1];
      if (!v9)
      {
        v3 = v10 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v12 = v10;
    v10 = operator new(0x30uLL);
    v10[4] = &gtl::FastTypeId<operations_research::sat::StampingSimplifier>(void)::d;
    v10[5] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v12;
    *v3 = v10;
    v13 = **(_QWORD **)(a1 + 24);
    v14 = v10;
    if (v13)
    {
      *(_QWORD *)(a1 + 24) = v13;
      v14 = (uint64_t *)*v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v14);
    ++*(_QWORD *)(a1 + 40);
  }
  v10[5] = v8;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24F987330;
  v15[1] = v8;
  v19 = v15;
  v16 = *(_QWORD **)(a1 + 56);
  if ((unint64_t)v16 >= *(_QWORD *)(a1 + 64))
  {
    v17 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a1 + 48), &v19);
  }
  else
  {
    *v16 = v15;
    v17 = (char *)(v16 + 1);
  }
  *(_QWORD *)(a1 + 56) = v17;
  return v8;
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::BlockedClauseSimplifier>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v19;

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 32);
  if (!v2)
    goto LABEL_12;
  v4 = (_QWORD *)(a1 + 32);
  do
  {
    v5 = v2[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::BlockedClauseSimplifier>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::BlockedClauseSimplifier>(void)::d)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 != v3
    && v4[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::BlockedClauseSimplifier>(void)::d)
  {
    return v4[5];
  }
LABEL_12:
  v8 = operations_research::sat::Model::MyNew<operations_research::sat::BlockedClauseSimplifier>(a1);
  v9 = *(_QWORD **)(a1 + 32);
  v10 = v3;
  if (v9)
  {
    while (1)
    {
      while (1)
      {
        v10 = v9;
        v11 = v9[4];
        if (v11 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::BlockedClauseSimplifier>(void)::d)
          break;
        v9 = (_QWORD *)*v10;
        v3 = v10;
        if (!*v10)
          goto LABEL_19;
      }
      if (v11 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::BlockedClauseSimplifier>(void)::d)
        break;
      v9 = (_QWORD *)v10[1];
      if (!v9)
      {
        v3 = v10 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v12 = v10;
    v10 = operator new(0x30uLL);
    v10[4] = &gtl::FastTypeId<operations_research::sat::BlockedClauseSimplifier>(void)::d;
    v10[5] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v12;
    *v3 = v10;
    v13 = **(_QWORD **)(a1 + 24);
    v14 = v10;
    if (v13)
    {
      *(_QWORD *)(a1 + 24) = v13;
      v14 = (uint64_t *)*v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v14);
    ++*(_QWORD *)(a1 + 40);
  }
  v10[5] = v8;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24F987368;
  v15[1] = v8;
  v19 = v15;
  v16 = *(_QWORD **)(a1 + 56);
  if ((unint64_t)v16 >= *(_QWORD *)(a1 + 64))
  {
    v17 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a1 + 48), &v19);
  }
  else
  {
    *v16 = v15;
    v17 = (char *)(v16 + 1);
  }
  *(_QWORD *)(a1 + 56) = v17;
  return v8;
}

operations_research::sat::BoundedVariableElimination *operations_research::sat::Model::GetOrCreate<operations_research::sat::BoundedVariableElimination>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  operations_research::sat::BoundedVariableElimination *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v19;

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 32);
  if (!v2)
    goto LABEL_12;
  v4 = (_QWORD *)(a1 + 32);
  do
  {
    v5 = v2[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::BoundedVariableElimination>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::BoundedVariableElimination>(void)::d)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 != v3
    && v4[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::BoundedVariableElimination>(void)::d)
  {
    return (operations_research::sat::BoundedVariableElimination *)v4[5];
  }
LABEL_12:
  v8 = (operations_research::sat::BoundedVariableElimination *)operator new();
  operations_research::sat::BoundedVariableElimination::BoundedVariableElimination(v8, (operations_research::sat::Model *)a1);
  v9 = (_QWORD *)*v3;
  v10 = v3;
  if (*v3)
  {
    while (1)
    {
      while (1)
      {
        v10 = v9;
        v11 = v9[4];
        if (v11 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::BoundedVariableElimination>(void)::d)
          break;
        v9 = (_QWORD *)*v10;
        v3 = v10;
        if (!*v10)
          goto LABEL_19;
      }
      if (v11 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::BoundedVariableElimination>(void)::d)
        break;
      v9 = (_QWORD *)v10[1];
      if (!v9)
      {
        v3 = v10 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v12 = v10;
    v10 = operator new(0x30uLL);
    v10[4] = &gtl::FastTypeId<operations_research::sat::BoundedVariableElimination>(void)::d;
    v10[5] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v12;
    *v3 = v10;
    v13 = **(_QWORD **)(a1 + 24);
    v14 = v10;
    if (v13)
    {
      *(_QWORD *)(a1 + 24) = v13;
      v14 = (uint64_t *)*v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v14);
    ++*(_QWORD *)(a1 + 40);
  }
  v10[5] = v8;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24F9873A0;
  v15[1] = v8;
  v19 = v15;
  v16 = *(_QWORD **)(a1 + 56);
  if ((unint64_t)v16 >= *(_QWORD *)(a1 + 64))
  {
    v17 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a1 + 48), &v19);
  }
  else
  {
    *v16 = v15;
    v17 = (char *)(v16 + 1);
  }
  *(_QWORD *)(a1 + 56) = v17;
  return v8;
}

void sub_22DB804C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x10F0C40661EC0B5);
  _Unwind_Resume(a1);
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::LiteralWatchers>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F9872F8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::LiteralWatchers>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F9872F8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x22E31DF78);
}

uint64_t operations_research::sat::Model::MyNew<operations_research::sat::StampingSimplifier>(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>(a1) + 16;
  *(_QWORD *)(v2 + 8) = operations_research::sat::Model::GetOrCreate<operations_research::sat::BinaryImplicationGraph>(a1);
  *(_QWORD *)(v2 + 16) = operations_research::sat::Model::GetOrCreate<operations_research::sat::LiteralWatchers>(a1);
  *(_QWORD *)(v2 + 24) = operations_research::sat::Model::GetOrCreate<operations_research::sat::ModelRandomGenerator>(a1);
  *(_QWORD *)(v2 + 32) = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>(a1);
  *(_BYTE *)(v2 + 40) = 0;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  return v2;
}

void sub_22DB8061C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x1070C4028D124EBLL);
  _Unwind_Resume(a1);
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::StampingSimplifier>::~Delete(_QWORD *a1)
{
  operations_research::sat::StampingSimplifier *v2;

  v2 = (operations_research::sat::StampingSimplifier *)a1[1];
  *a1 = &off_24F987330;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::StampingSimplifier::~StampingSimplifier(v2);
    MEMORY[0x22E31DF78]();
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::StampingSimplifier>::~Delete(_QWORD *a1)
{
  operations_research::sat::StampingSimplifier *v2;

  v2 = (operations_research::sat::StampingSimplifier *)a1[1];
  *a1 = &off_24F987330;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::StampingSimplifier::~StampingSimplifier(v2);
    MEMORY[0x22E31DF78]();
  }
  JUMPOUT(0x22E31DF78);
}

void operations_research::sat::StampingSimplifier::~StampingSimplifier(operations_research::sat::StampingSimplifier *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = (void *)*((_QWORD *)this + 31);
  if (v2)
  {
    *((_QWORD *)this + 32) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 28);
  if (v3)
  {
    *((_QWORD *)this + 29) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 25);
  if (v4)
  {
    *((_QWORD *)this + 26) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 22);
  if (v5)
    operator delete(v5);
  v6 = (void *)*((_QWORD *)this + 19);
  if (v6)
  {
    *((_QWORD *)this + 20) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 16);
  if (v7)
  {
    *((_QWORD *)this + 17) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 13);
  if (v8)
  {
    *((_QWORD *)this + 14) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 10);
  if (v9)
  {
    *((_QWORD *)this + 11) = v9;
    operator delete(v9);
  }
}

uint64_t operations_research::sat::Model::MyNew<operations_research::sat::BlockedClauseSimplifier>(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>(a1) + 16;
  *(_QWORD *)(v2 + 8) = operations_research::sat::Model::GetOrCreate<operations_research::sat::BinaryImplicationGraph>(a1);
  *(_QWORD *)(v2 + 16) = operations_research::sat::Model::GetOrCreate<operations_research::sat::LiteralWatchers>(a1);
  *(_QWORD *)(v2 + 24) = operations_research::sat::Model::GetOrCreate<operations_research::sat::PostsolveClauses>(a1);
  *(_QWORD *)(v2 + 32) = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>(a1);
  *(_QWORD *)(v2 + 40) = 0;
  *(_DWORD *)(v2 + 48) = 0;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_QWORD *)(v2 + 200) = 0;
  return v2;
}

void sub_22DB80830(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x10F0C40AA11D5BBLL);
  _Unwind_Resume(a1);
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::BlockedClauseSimplifier>::~Delete(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  *a1 = &off_24F987368;
  v4 = (_QWORD *)a1[1];
  v2 = a1 + 1;
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<operations_research::sat::BlockedClauseSimplifier>::operator()[abi:ne180100]((uint64_t)v2, v3);
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::BlockedClauseSimplifier>::~Delete(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_24F987368;
  v3 = (_QWORD *)a1[1];
  v1 = a1 + 1;
  v2 = v3;
  *v1 = 0;
  if (v3)
    std::default_delete<operations_research::sat::BlockedClauseSimplifier>::operator()[abi:ne180100]((uint64_t)v1, v2);
  JUMPOUT(0x22E31DF78);
}

void std::default_delete<operations_research::sat::BlockedClauseSimplifier>::operator()[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  if (a2)
  {
    v3 = a2[23];
    if (v3)
    {
      v4 = a2[24];
      v5 = (void *)a2[23];
      if (v4 != v3)
      {
        v6 = a2[24];
        do
        {
          v8 = *(void **)(v6 - 24);
          v6 -= 24;
          v7 = v8;
          if (v8)
          {
            *(_QWORD *)(v4 - 16) = v7;
            operator delete(v7);
          }
          v4 = v6;
        }
        while (v6 != v3);
        v5 = (void *)a2[23];
      }
      a2[24] = v3;
      operator delete(v5);
    }
    v9 = (void *)a2[20];
    if (v9)
    {
      a2[21] = v9;
      operator delete(v9);
    }
    std::deque<int>::~deque[abi:ne180100]((uint64_t)(a2 + 14));
    v10 = (void *)a2[11];
    if (v10)
      operator delete(v10);
    v11 = (void *)a2[8];
    if (v11)
      operator delete(v11);
    JUMPOUT(0x22E31DF78);
  }
}

operations_research::sat::BoundedVariableElimination *operations_research::sat::BoundedVariableElimination::BoundedVariableElimination(operations_research::sat::BoundedVariableElimination *this, operations_research::sat::Model *a2)
{
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)this = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a2);
  *((_QWORD *)this + 1) = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)a2)
                        + 16;
  *((_QWORD *)this + 2) = operations_research::sat::Model::GetOrCreate<operations_research::sat::BinaryImplicationGraph>((uint64_t)a2);
  *((_QWORD *)this + 3) = operations_research::sat::Model::GetOrCreate<operations_research::sat::LiteralWatchers>((uint64_t)a2);
  *((_QWORD *)this + 4) = operations_research::sat::Model::GetOrCreate<operations_research::sat::PostsolveClauses>((uint64_t)a2);
  *((_QWORD *)this + 5) = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)a2);
  v4 = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>((uint64_t)a2);
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_QWORD *)this + 6) = v4;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_QWORD *)this + 14) = 0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((_DWORD *)this + 46) = 0;
  std::vector<std::pair<gtl::IntType<operations_research::sat::GenericLiteralWatcher::IdType_tag_,int>,int>>::__append((void **)this + 24, 1uLL);
  v5 = *((_QWORD *)this + 27);
  if (*((_QWORD *)this + 28) != v5)
    *((_QWORD *)this + 28) = v5;
  *((_QWORD *)this + 44) = 0;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 15) = 0u;
  return this;
}

void sub_22DB80A84(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v5 = (void *)v1[27];
  if (v5)
  {
    v1[28] = v5;
    operator delete(v5);
    v6 = *v2;
    if (!*v2)
    {
LABEL_3:
      v7 = (void *)v1[20];
      if (!v7)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v6 = *v2;
    if (!*v2)
      goto LABEL_3;
  }
  v1[25] = v6;
  operator delete(v6);
  v7 = (void *)v1[20];
  if (!v7)
  {
LABEL_4:
    v8 = *v3;
    if (!*v3)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  v1[21] = v7;
  operator delete(v7);
  v8 = *v3;
  if (!*v3)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(v8);
  _Unwind_Resume(exception_object);
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::BoundedVariableElimination>::~Delete(_QWORD *a1)
{
  operations_research::sat::BoundedVariableElimination *v2;

  v2 = (operations_research::sat::BoundedVariableElimination *)a1[1];
  *a1 = &off_24F9873A0;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::BoundedVariableElimination::~BoundedVariableElimination(v2);
    MEMORY[0x22E31DF78]();
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::BoundedVariableElimination>::~Delete(_QWORD *a1)
{
  operations_research::sat::BoundedVariableElimination *v2;

  v2 = (operations_research::sat::BoundedVariableElimination *)a1[1];
  *a1 = &off_24F9873A0;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::BoundedVariableElimination::~BoundedVariableElimination(v2);
    MEMORY[0x22E31DF78]();
  }
  JUMPOUT(0x22E31DF78);
}

void operations_research::sat::BoundedVariableElimination::~BoundedVariableElimination(operations_research::sat::BoundedVariableElimination *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v2 = (void *)*((_QWORD *)this + 42);
  if (v2)
  {
    *((_QWORD *)this + 43) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 39);
  if (v3)
  {
    v4 = *((_QWORD *)this + 40);
    v5 = (void *)*((_QWORD *)this + 39);
    if (v4 != v3)
    {
      v6 = *((_QWORD *)this + 40);
      do
      {
        v8 = *(void **)(v6 - 24);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 16) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = (void *)*((_QWORD *)this + 39);
    }
    *((_QWORD *)this + 40) = v3;
    operator delete(v5);
  }
  v9 = (void *)*((_QWORD *)this + 36);
  if (v9)
  {
    *((_QWORD *)this + 37) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 33);
  if (v10)
  {
    *((_QWORD *)this + 34) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 30);
  if (v11)
    operator delete(v11);
  v12 = (void *)*((_QWORD *)this + 27);
  if (v12)
  {
    *((_QWORD *)this + 28) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 24);
  if (v13)
  {
    *((_QWORD *)this + 25) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)this + 20);
  if (v14)
  {
    *((_QWORD *)this + 21) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 17);
  if (v15)
    operator delete(v15);
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::Inprocessing>::~Delete(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  v2 = a1[1];
  *a1 = &off_24F9873D8;
  a1[1] = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 80);
    if (v3)
      operator delete(v3);
    MEMORY[0x22E31DF78](v2, 0x1070C4066161334);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::Inprocessing>::~Delete(_QWORD *a1)
{
  uint64_t v1;
  void *v2;

  v1 = a1[1];
  *a1 = &off_24F9873D8;
  a1[1] = 0;
  if (v1)
  {
    v2 = *(void **)(v1 + 80);
    if (v2)
      operator delete(v2);
    MEMORY[0x22E31DF78](v1, 0x1070C4066161334);
  }
  JUMPOUT(0x22E31DF78);
}

uint64_t OUTLINED_FUNCTION_0_8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(void))(*a1 + 8 * a2))();
}

uint64_t OUTLINED_FUNCTION_1_5(uint64_t a1)
{
  return *(_QWORD *)(a1 - 8);
}

uint64_t OUTLINED_FUNCTION_3_3()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_4_2()
{
  uint64_t v0;

  return v0;
}

unint64_t operations_research::sat::IntervalsRepository::CreateInterval(uint64_t *a1, int a2, int a3, int a4, uint64_t a5, int a6)
{
  uint64_t *v7;
  uint64_t v8;
  int v9;
  int *v10;
  int *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;

  v19 = a3;
  v20 = a2;
  v18 = a4;
  v17 = a5;
  v16 = a6;
  v7 = a1 + 5;
  v8 = a1[6] - a1[5];
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back((uint64_t)(a1 + 5), &v20);
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back((uint64_t)(v7 + 3), &v19);
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back((uint64_t)(v7 + 6), &v18);
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>,std::allocator<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>>::push_back((uint64_t)(v7 + 9), &v17);
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back((uint64_t)(v7 - 3), &v16);
  v9 = v16;
  if (v16 == -1)
  {
    v11 = 0;
    v10 = 0;
  }
  else
  {
    v10 = (int *)operator new(4uLL);
    *v10 = v9;
    v11 = v10 + 1;
  }
  v12 = v11 - v10;
  operations_research::sat::PrecedencesPropagator::AddArc(a1[1], *(_DWORD *)(a1[5] + 4 * (int)(v8 >> 2)), *(_DWORD *)(a1[8] + 4 * (int)(v8 >> 2)), v17, *(_DWORD *)(a1[11] + 4 * (int)(v8 >> 2)), v10, v12);
  v13 = *(_DWORD *)(a1[11] + 4 * (int)(v8 >> 2));
  if (v13 == -1)
    v14 = -1;
  else
    v14 = v13 ^ 1;
  operations_research::sat::PrecedencesPropagator::AddArc(a1[1], *(_DWORD *)(a1[8] + 4 * (int)(v8 >> 2)), *(_DWORD *)(a1[5] + 4 * (int)(v8 >> 2)), -v17, v14, v10, v12);
  if (v10)
    operator delete(v10);
  return (unint64_t)v8 >> 2;
}

void sub_22DB80EBC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::SchedulingConstraintHelper::SchedulingConstraintHelper(uint64_t a1, int **a2, uint64_t a3)
{
  operations_research::sat::PrecedencesPropagator *v6;
  uint64_t v7;
  int *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _DWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  _OWORD *v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  int v46;
  int v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _BYTE *v58;
  _DWORD *v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _BYTE *v67;
  _DWORD *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  _OWORD *v73;
  char *v74;
  uint64_t v75;
  __int128 v76;
  int v77;
  unint64_t v78;
  char *v79;
  _QWORD *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  _BYTE *v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  _OWORD *v94;
  char *v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  _OWORD *v103;
  char *v104;
  uint64_t v105;
  __int128 v106;
  int v107;
  int v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  _OWORD *v121;
  char *v122;
  uint64_t v123;
  __int128 v124;
  uint64_t v125;
  int v126;
  unint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  _BYTE *v136;
  _DWORD *v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  _OWORD *v143;
  char *v144;
  uint64_t v145;
  __int128 v146;
  int v147;
  int v148;
  unint64_t v149;
  char *v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  _BYTE *v158;
  _DWORD *v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  _OWORD *v165;
  char *v166;
  uint64_t v167;
  __int128 v168;
  int v169;
  int v170;
  unint64_t v171;
  int *v172;
  uint64_t v173;
  int *v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  _BYTE *v180;
  int *v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int *v186;
  _OWORD *v187;
  int *v188;
  uint64_t v189;
  __int128 v190;
  int v191;
  int v192;
  unint64_t v193;
  int *v194;
  int *v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  unint64_t v200;
  _BYTE *v201;
  int *v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int *v206;
  _OWORD *v207;
  int *v208;
  uint64_t v209;
  __int128 v210;
  int v211;
  void **v213;
  void **v214;
  void **v215;
  void **v216;
  void **v217;
  void **v218;
  void **v219;
  int *v220;
  _QWORD *v221;

  *(_QWORD *)a1 = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>(a3);
  *(_QWORD *)(a1 + 8) = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a3);
  v6 = operations_research::sat::Model::GetOrCreate<operations_research::sat::PrecedencesPropagator>(a3);
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = 1;
  *(_OWORD *)(a1 + 32) = 0u;
  v215 = (void **)(a1 + 32);
  *(_OWORD *)(a1 + 80) = 0u;
  v217 = (void **)(a1 + 80);
  *(_OWORD *)(a1 + 128) = 0u;
  v218 = (void **)(a1 + 128);
  v216 = (void **)(a1 + 104);
  v213 = (void **)(a1 + 152);
  v214 = (void **)(a1 + 56);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_QWORD *)(a1 + 344) = -1;
  *(_QWORD *)(a1 + 352) = -1;
  *(_QWORD *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  v219 = (void **)(a1 + 176);
  *(_QWORD *)(a1 + 440) = 0;
  v7 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntervalsRepository>(a3);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 128);
  v8 = *a2;
  v220 = a2[1];
  if (*a2 != v220)
  {
    v9 = (_QWORD *)v7;
    v221 = (_QWORD *)v7;
    do
    {
      v11 = *v8;
      v12 = *(_DWORD *)(v9[2] + 4 * v11);
      v14 = *(char **)(a1 + 136);
      v13 = *(_QWORD *)(a1 + 144);
      if (v12 == -1)
      {
        if ((unint64_t)v14 < v13)
        {
          *(_DWORD *)v14 = -1;
          v15 = (uint64_t)(v14 + 4);
          goto LABEL_48;
        }
        v16 = (char *)*v218;
        v25 = v14 - (_BYTE *)*v218;
        v26 = v25 >> 2;
        v27 = (v25 >> 2) + 1;
        if (v27 >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v28 = v13 - (_QWORD)v16;
        if (v28 >> 1 > v27)
          v27 = v28 >> 1;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
          v21 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v21 = v27;
        if (v21)
        {
          if (v21 >> 62)
            goto LABEL_235;
          v22 = operator new(4 * v21);
          v23 = &v22[4 * v26];
          *v23 = -1;
          v15 = (uint64_t)(v23 + 1);
          if (v14 == v16)
            goto LABEL_46;
LABEL_40:
          v38 = v14 - 4 - v16;
          if (v38 < 0x2C)
            goto LABEL_245;
          if ((unint64_t)(v14 - &v22[v25]) < 0x20)
            goto LABEL_245;
          v39 = (v38 >> 2) + 1;
          v40 = 4 * (v39 & 0x7FFFFFFFFFFFFFF8);
          v41 = &v14[-v40];
          v23 = (_DWORD *)((char *)v23 - v40);
          v42 = &v22[4 * v26 - 16];
          v43 = v14 - 16;
          v44 = v39 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v45 = *(_OWORD *)v43;
            *(v42 - 1) = *((_OWORD *)v43 - 1);
            *v42 = v45;
            v42 -= 2;
            v43 -= 32;
            v44 -= 8;
          }
          while (v44);
          v14 = v41;
          if (v39 != (v39 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_245:
            do
            {
              v46 = *((_DWORD *)v14 - 1);
              v14 -= 4;
              *--v23 = v46;
            }
            while (v14 != v16);
          }
          goto LABEL_46;
        }
        v22 = 0;
        v23 = (_DWORD *)(4 * v26);
        *(_DWORD *)(4 * v26) = -1;
        v15 = 4 * v26 + 4;
        if (v14 != v16)
          goto LABEL_40;
      }
      else
      {
        if ((unint64_t)v14 < v13)
        {
          *(_DWORD *)v14 = v12;
          v15 = (uint64_t)(v14 + 4);
          goto LABEL_48;
        }
        v16 = (char *)*v218;
        v17 = v14 - (_BYTE *)*v218;
        v18 = v17 >> 2;
        v19 = (v17 >> 2) + 1;
        if (v19 >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v20 = v13 - (_QWORD)v16;
        if (v20 >> 1 > v19)
          v19 = v20 >> 1;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
          v21 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          if (v21 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v22 = operator new(4 * v21);
          v23 = &v22[4 * v18];
          *v23 = v12;
          v15 = (uint64_t)(v23 + 1);
          if (v14 == v16)
          {
LABEL_32:
            v9 = v221;
            goto LABEL_46;
          }
        }
        else
        {
          v22 = 0;
          v23 = (_DWORD *)(4 * v18);
          *(_DWORD *)(4 * v18) = v12;
          v15 = 4 * v18 + 4;
          if (v14 == v16)
            goto LABEL_32;
        }
        v24 = v14 - 4 - v16;
        if (v24 < 0x2C)
        {
          v9 = v221;
          do
          {
LABEL_37:
            v37 = *((_DWORD *)v14 - 1);
            v14 -= 4;
            *--v23 = v37;
          }
          while (v14 != v16);
          goto LABEL_46;
        }
        v29 = v14 - &v22[v17];
        v9 = v221;
        if (v29 < 0x20)
          goto LABEL_37;
        v30 = (v24 >> 2) + 1;
        v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
        v32 = &v14[-v31];
        v23 = (_DWORD *)((char *)v23 - v31);
        v33 = &v22[4 * v18 - 16];
        v34 = v14 - 16;
        v35 = v30 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v36 = *(_OWORD *)v34;
          *(v33 - 1) = *((_OWORD *)v34 - 1);
          *v33 = v36;
          v33 -= 2;
          v34 -= 32;
          v35 -= 8;
        }
        while (v35);
        v14 = v32;
        if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_37;
      }
LABEL_46:
      *(_QWORD *)(a1 + 128) = v23;
      *(_QWORD *)(a1 + 136) = v15;
      *(_QWORD *)(a1 + 144) = &v22[4 * v21];
      if (v16)
        operator delete(v16);
LABEL_48:
      *(_QWORD *)(a1 + 136) = v15;
      v47 = *(_DWORD *)(v9[11] + 4 * v11);
      v49 = *(char **)(a1 + 88);
      v48 = *(_QWORD *)(a1 + 96);
      if (v47 != -1)
      {
        if ((unint64_t)v49 < v48)
        {
          *(_DWORD *)v49 = v47;
          v50 = (uint64_t)(v49 + 4);
LABEL_83:
          *(_QWORD *)(a1 + 88) = v50;
          v79 = *(char **)(a1 + 112);
          v78 = *(_QWORD *)(a1 + 120);
          if ((unint64_t)v79 < v78)
          {
            *(_QWORD *)v79 = 0;
            v80 = v79 + 8;
LABEL_115:
            v89 = (uint64_t)v80;
            goto LABEL_137;
          }
          v81 = (char *)*v216;
          v82 = v79 - (_BYTE *)*v216;
          v83 = v82 >> 3;
          v84 = (v82 >> 3) + 1;
          if (v84 >> 61)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v85 = v78 - (_QWORD)v81;
          if (v85 >> 2 > v84)
            v84 = v85 >> 2;
          if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8)
            v86 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v86 = v84;
          if (v86)
          {
            if (v86 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v87 = operator new(8 * v86);
            v88 = &v87[8 * v83];
            *v88 = 0;
            v89 = (uint64_t)(v88 + 1);
            if (v79 == v81)
              goto LABEL_135;
LABEL_96:
            v90 = v79 - 8 - v81;
            if (v90 < 0x58)
              goto LABEL_246;
            if ((unint64_t)(v79 - &v87[v82]) < 0x20)
              goto LABEL_246;
            v91 = (v90 >> 3) + 1;
            v92 = 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL);
            v93 = &v79[-v92];
            v88 = (_QWORD *)((char *)v88 - v92);
            v94 = &v87[8 * v83 - 16];
            v95 = v79 - 16;
            v96 = v91 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v97 = *(_OWORD *)v95;
              *(v94 - 1) = *((_OWORD *)v95 - 1);
              *v94 = v97;
              v94 -= 2;
              v95 -= 32;
              v96 -= 4;
            }
            while (v96);
            v79 = v93;
            if (v91 != (v91 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_246:
              do
              {
                v98 = *((_QWORD *)v79 - 1);
                v79 -= 8;
                *--v88 = v98;
              }
              while (v79 != v81);
            }
            goto LABEL_135;
          }
          v87 = 0;
          v88 = (_QWORD *)(8 * v83);
          *(_QWORD *)(8 * v83) = 0;
          v89 = 8 * v83 + 8;
          if (v79 != v81)
            goto LABEL_96;
          goto LABEL_135;
        }
        v52 = (char *)*v217;
        v53 = v49 - (_BYTE *)*v217;
        v54 = v53 >> 2;
        v55 = (v53 >> 2) + 1;
        if (v55 >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v56 = v48 - (_QWORD)v52;
        if (v56 >> 1 > v55)
          v55 = v56 >> 1;
        if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL)
          v57 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v57 = v55;
        if (v57)
        {
          if (v57 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v58 = operator new(4 * v57);
          v59 = &v58[4 * v54];
          *v59 = v47;
          v50 = (uint64_t)(v59 + 1);
          if (v49 != v52)
          {
LABEL_62:
            v60 = v49 - 4 - v52;
            if (v60 < 0x2C)
            {
              v9 = v221;
              goto LABEL_80;
            }
            v69 = v49 - &v58[v53];
            v9 = v221;
            if (v69 < 0x20)
              goto LABEL_247;
            v70 = (v60 >> 2) + 1;
            v71 = 4 * (v70 & 0x7FFFFFFFFFFFFFF8);
            v72 = &v49[-v71];
            v59 = (_DWORD *)((char *)v59 - v71);
            v73 = &v58[4 * v54 - 16];
            v74 = v49 - 16;
            v75 = v70 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v76 = *(_OWORD *)v74;
              *(v73 - 1) = *((_OWORD *)v74 - 1);
              *v73 = v76;
              v73 -= 2;
              v74 -= 32;
              v75 -= 8;
            }
            while (v75);
            v49 = v72;
            if (v70 != (v70 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_247:
              do
              {
LABEL_80:
                v77 = *((_DWORD *)v49 - 1);
                v49 -= 4;
                *--v59 = v77;
              }
              while (v49 != v52);
            }
LABEL_81:
            *(_QWORD *)(a1 + 80) = v59;
            *(_QWORD *)(a1 + 88) = v50;
            *(_QWORD *)(a1 + 96) = &v58[4 * v57];
            if (v52)
              operator delete(v52);
            goto LABEL_83;
          }
        }
        else
        {
          v58 = 0;
          v59 = (_DWORD *)(4 * v54);
          *(_DWORD *)(4 * v54) = v47;
          v50 = 4 * v54 + 4;
          if (v49 != v52)
            goto LABEL_62;
        }
        v9 = v221;
        goto LABEL_81;
      }
      if ((unint64_t)v49 >= v48)
      {
        v61 = (char *)*v217;
        v62 = v49 - (_BYTE *)*v217;
        v63 = v62 >> 2;
        v64 = (v62 >> 2) + 1;
        if (v64 >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v65 = v48 - (_QWORD)v61;
        if (v65 >> 1 > v64)
          v64 = v65 >> 1;
        if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL)
          v66 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v66 = v64;
        if (v66)
        {
          if (v66 >> 62)
LABEL_235:
            std::__throw_bad_array_new_length[abi:ne180100]();
          v67 = operator new(4 * v66);
          v68 = &v67[4 * v63];
          *v68 = -1;
          v51 = (uint64_t)(v68 + 1);
          if (v49 == v61)
            goto LABEL_110;
LABEL_104:
          v99 = v49 - 4 - v61;
          if (v99 < 0x2C)
            goto LABEL_248;
          if ((unint64_t)(v49 - &v67[v62]) < 0x20)
            goto LABEL_248;
          v100 = (v99 >> 2) + 1;
          v101 = 4 * (v100 & 0x7FFFFFFFFFFFFFF8);
          v102 = &v49[-v101];
          v68 = (_DWORD *)((char *)v68 - v101);
          v103 = &v67[4 * v63 - 16];
          v104 = v49 - 16;
          v105 = v100 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v106 = *(_OWORD *)v104;
            *(v103 - 1) = *((_OWORD *)v104 - 1);
            *v103 = v106;
            v103 -= 2;
            v104 -= 32;
            v105 -= 8;
          }
          while (v105);
          v49 = v102;
          if (v100 != (v100 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_248:
            do
            {
              v107 = *((_DWORD *)v49 - 1);
              v49 -= 4;
              *--v68 = v107;
            }
            while (v49 != v61);
          }
        }
        else
        {
          v67 = 0;
          v68 = (_DWORD *)(4 * v63);
          *(_DWORD *)(4 * v63) = -1;
          v51 = 4 * v63 + 4;
          if (v49 != v61)
            goto LABEL_104;
        }
LABEL_110:
        *(_QWORD *)(a1 + 80) = v68;
        *(_QWORD *)(a1 + 88) = v51;
        *(_QWORD *)(a1 + 96) = &v67[4 * v66];
        if (v61)
          operator delete(v61);
        goto LABEL_112;
      }
      *(_DWORD *)v49 = -1;
      v51 = (uint64_t)(v49 + 4);
LABEL_112:
      *(_QWORD *)(a1 + 88) = v51;
      v108 = *(_DWORD *)(v9[11] + 4 * v11);
      if (v108 == -1)
      {
        v109 = *(_QWORD *)(v9[14] + 8 * v11);
        v111 = *(char **)(a1 + 112);
        v110 = *(_QWORD *)(a1 + 120);
        if ((unint64_t)v111 < v110)
        {
LABEL_114:
          *(_QWORD *)v111 = v109;
          v80 = v111 + 8;
          goto LABEL_115;
        }
      }
      else
      {
        v109 = *(_QWORD *)(*(_QWORD *)(*v9 + 40) + 12 * v108);
        v111 = *(char **)(a1 + 112);
        v110 = *(_QWORD *)(a1 + 120);
        if ((unint64_t)v111 < v110)
          goto LABEL_114;
      }
      v81 = (char *)*v216;
      v112 = v111 - (_BYTE *)*v216;
      v113 = v112 >> 3;
      v114 = (v112 >> 3) + 1;
      if (v114 >> 61)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v115 = v110 - (_QWORD)v81;
      if (v115 >> 2 > v114)
        v114 = v115 >> 2;
      if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFF8)
        v86 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v86 = v114;
      if (v86)
      {
        if (v86 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v87 = operator new(8 * v86);
        v88 = &v87[8 * v113];
        *v88 = v109;
        v89 = (uint64_t)(v88 + 1);
        if (v111 == v81)
        {
LABEL_129:
          v9 = v221;
          goto LABEL_135;
        }
      }
      else
      {
        v87 = 0;
        v88 = (_QWORD *)(8 * v113);
        *(_QWORD *)(8 * v113) = v109;
        v89 = 8 * v113 + 8;
        if (v111 == v81)
          goto LABEL_129;
      }
      v116 = v111 - 8 - v81;
      if (v116 < 0x58)
      {
        v9 = v221;
        do
        {
LABEL_134:
          v125 = *((_QWORD *)v111 - 1);
          v111 -= 8;
          *--v88 = v125;
        }
        while (v111 != v81);
        goto LABEL_135;
      }
      v117 = v111 - &v87[v112];
      v9 = v221;
      if (v117 < 0x20)
        goto LABEL_134;
      v118 = (v116 >> 3) + 1;
      v119 = 8 * (v118 & 0x3FFFFFFFFFFFFFFCLL);
      v120 = &v111[-v119];
      v88 = (_QWORD *)((char *)v88 - v119);
      v121 = &v87[8 * v113 - 16];
      v122 = v111 - 16;
      v123 = v118 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v124 = *(_OWORD *)v122;
        *(v121 - 1) = *((_OWORD *)v122 - 1);
        *v121 = v124;
        v121 -= 2;
        v122 -= 32;
        v123 -= 4;
      }
      while (v123);
      v111 = v120;
      if (v118 != (v118 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_134;
LABEL_135:
      *(_QWORD *)(a1 + 104) = v88;
      *(_QWORD *)(a1 + 112) = v89;
      *(_QWORD *)(a1 + 120) = &v87[8 * v86];
      if (v81)
        operator delete(v81);
LABEL_137:
      *(_QWORD *)(a1 + 112) = v89;
      v126 = *(_DWORD *)(v9[5] + 4 * v11);
      v128 = *(char **)(a1 + 40);
      v127 = *(_QWORD *)(a1 + 48);
      if ((unint64_t)v128 < v127)
      {
        *(_DWORD *)v128 = v126;
        v129 = (uint64_t)(v128 + 4);
        goto LABEL_159;
      }
      v130 = (char *)*v215;
      v131 = v128 - (_BYTE *)*v215;
      v132 = v131 >> 2;
      v133 = (v131 >> 2) + 1;
      if (v133 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v134 = v127 - (_QWORD)v130;
      if (v134 >> 1 > v133)
        v133 = v134 >> 1;
      if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFFCLL)
        v135 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v135 = v133;
      if (v135)
      {
        if (v135 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v136 = operator new(4 * v135);
        v137 = &v136[4 * v132];
        *v137 = v126;
        v129 = (uint64_t)(v137 + 1);
        if (v128 == v130)
        {
LABEL_151:
          v9 = v221;
          goto LABEL_157;
        }
      }
      else
      {
        v136 = 0;
        v137 = (_DWORD *)(4 * v132);
        *(_DWORD *)(4 * v132) = v126;
        v129 = 4 * v132 + 4;
        if (v128 == v130)
          goto LABEL_151;
      }
      v138 = v128 - 4 - v130;
      if (v138 < 0x2C)
      {
        v9 = v221;
        do
        {
LABEL_156:
          v147 = *((_DWORD *)v128 - 1);
          v128 -= 4;
          *--v137 = v147;
        }
        while (v128 != v130);
        goto LABEL_157;
      }
      v139 = v128 - &v136[v131];
      v9 = v221;
      if (v139 < 0x20)
        goto LABEL_156;
      v140 = (v138 >> 2) + 1;
      v141 = 4 * (v140 & 0x7FFFFFFFFFFFFFF8);
      v142 = &v128[-v141];
      v137 = (_DWORD *)((char *)v137 - v141);
      v143 = &v136[4 * v132 - 16];
      v144 = v128 - 16;
      v145 = v140 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v146 = *(_OWORD *)v144;
        *(v143 - 1) = *((_OWORD *)v144 - 1);
        *v143 = v146;
        v143 -= 2;
        v144 -= 32;
        v145 -= 8;
      }
      while (v145);
      v128 = v142;
      if (v140 != (v140 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_156;
LABEL_157:
      *(_QWORD *)(a1 + 32) = v137;
      *(_QWORD *)(a1 + 40) = v129;
      *(_QWORD *)(a1 + 48) = &v136[4 * v135];
      if (v130)
        operator delete(v130);
LABEL_159:
      *(_QWORD *)(a1 + 40) = v129;
      v148 = *(_DWORD *)(v9[8] + 4 * v11);
      v150 = *(char **)(a1 + 64);
      v149 = *(_QWORD *)(a1 + 72);
      if ((unint64_t)v150 < v149)
      {
        *(_DWORD *)v150 = v148;
        v151 = (uint64_t)(v150 + 4);
        goto LABEL_181;
      }
      v152 = (char *)*v214;
      v153 = v150 - (_BYTE *)*v214;
      v154 = v153 >> 2;
      v155 = (v153 >> 2) + 1;
      if (v155 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v156 = v149 - (_QWORD)v152;
      if (v156 >> 1 > v155)
        v155 = v156 >> 1;
      if ((unint64_t)v156 >= 0x7FFFFFFFFFFFFFFCLL)
        v157 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v157 = v155;
      if (v157)
      {
        if (v157 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v158 = operator new(4 * v157);
        v159 = &v158[4 * v154];
        *v159 = v148;
        v151 = (uint64_t)(v159 + 1);
        if (v150 == v152)
        {
LABEL_173:
          v9 = v221;
          goto LABEL_179;
        }
      }
      else
      {
        v158 = 0;
        v159 = (_DWORD *)(4 * v154);
        *(_DWORD *)(4 * v154) = v148;
        v151 = 4 * v154 + 4;
        if (v150 == v152)
          goto LABEL_173;
      }
      v160 = v150 - 4 - v152;
      if (v160 < 0x2C)
      {
        v9 = v221;
        do
        {
LABEL_178:
          v169 = *((_DWORD *)v150 - 1);
          v150 -= 4;
          *--v159 = v169;
        }
        while (v150 != v152);
        goto LABEL_179;
      }
      v161 = v150 - &v158[v153];
      v9 = v221;
      if (v161 < 0x20)
        goto LABEL_178;
      v162 = (v160 >> 2) + 1;
      v163 = 4 * (v162 & 0x7FFFFFFFFFFFFFF8);
      v164 = &v150[-v163];
      v159 = (_DWORD *)((char *)v159 - v163);
      v165 = &v158[4 * v154 - 16];
      v166 = v150 - 16;
      v167 = v162 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v168 = *(_OWORD *)v166;
        *(v165 - 1) = *((_OWORD *)v166 - 1);
        *v165 = v168;
        v165 -= 2;
        v166 -= 32;
        v167 -= 8;
      }
      while (v167);
      v150 = v164;
      if (v162 != (v162 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_178;
LABEL_179:
      *(_QWORD *)(a1 + 56) = v159;
      *(_QWORD *)(a1 + 64) = v151;
      *(_QWORD *)(a1 + 72) = &v158[4 * v157];
      if (v152)
        operator delete(v152);
LABEL_181:
      *(_QWORD *)(a1 + 64) = v151;
      v170 = *(_DWORD *)(v9[5] + 4 * v11) ^ 1;
      v172 = *(int **)(a1 + 160);
      v171 = *(_QWORD *)(a1 + 168);
      if ((unint64_t)v172 < v171)
      {
        *v172 = v170;
        v173 = (uint64_t)(v172 + 1);
        goto LABEL_203;
      }
      v174 = (int *)*v213;
      v175 = (char *)v172 - (_BYTE *)*v213;
      v176 = v175 >> 2;
      v177 = (v175 >> 2) + 1;
      if (v177 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v178 = v171 - (_QWORD)v174;
      if (v178 >> 1 > v177)
        v177 = v178 >> 1;
      if ((unint64_t)v178 >= 0x7FFFFFFFFFFFFFFCLL)
        v179 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v179 = v177;
      if (v179)
      {
        if (v179 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v180 = operator new(4 * v179);
        v181 = (int *)&v180[4 * v176];
        *v181 = v170;
        v173 = (uint64_t)(v181 + 1);
        if (v172 == v174)
        {
LABEL_195:
          v9 = v221;
          goto LABEL_201;
        }
      }
      else
      {
        v180 = 0;
        v181 = (int *)(4 * v176);
        *(_DWORD *)(4 * v176) = v170;
        v173 = 4 * v176 + 4;
        if (v172 == v174)
          goto LABEL_195;
      }
      v182 = (char *)(v172 - 1) - (char *)v174;
      if (v182 < 0x2C)
      {
        v9 = v221;
        do
        {
LABEL_200:
          v191 = *--v172;
          *--v181 = v191;
        }
        while (v172 != v174);
        goto LABEL_201;
      }
      v183 = (char *)v172 - &v180[v175];
      v9 = v221;
      if (v183 < 0x20)
        goto LABEL_200;
      v184 = (v182 >> 2) + 1;
      v185 = 4 * (v184 & 0x7FFFFFFFFFFFFFF8);
      v186 = &v172[v185 / 0xFFFFFFFFFFFFFFFCLL];
      v181 = (int *)((char *)v181 - v185);
      v187 = &v180[4 * v176 - 16];
      v188 = v172 - 4;
      v189 = v184 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v190 = *(_OWORD *)v188;
        *(v187 - 1) = *((_OWORD *)v188 - 1);
        *v187 = v190;
        v187 -= 2;
        v188 -= 8;
        v189 -= 8;
      }
      while (v189);
      v172 = v186;
      if (v184 != (v184 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_200;
LABEL_201:
      *(_QWORD *)(a1 + 152) = v181;
      *(_QWORD *)(a1 + 160) = v173;
      *(_QWORD *)(a1 + 168) = &v180[4 * v179];
      if (v174)
        operator delete(v174);
LABEL_203:
      *(_QWORD *)(a1 + 160) = v173;
      v192 = *(_DWORD *)(v9[8] + 4 * v11) ^ 1;
      v194 = *(int **)(a1 + 184);
      v193 = *(_QWORD *)(a1 + 192);
      if ((unint64_t)v194 >= v193)
      {
        v195 = (int *)*v219;
        v196 = (char *)v194 - (_BYTE *)*v219;
        v197 = v196 >> 2;
        v198 = (v196 >> 2) + 1;
        if (v198 >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v199 = v193 - (_QWORD)v195;
        if (v199 >> 1 > v198)
          v198 = v199 >> 1;
        if ((unint64_t)v199 >= 0x7FFFFFFFFFFFFFFCLL)
          v200 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v200 = v198;
        if (v200)
        {
          if (v200 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v201 = operator new(4 * v200);
          v202 = (int *)&v201[4 * v197];
          *v202 = v192;
          v10 = (uint64_t)(v202 + 1);
          if (v194 == v195)
            goto LABEL_221;
LABEL_215:
          v203 = (char *)(v194 - 1) - (char *)v195;
          if (v203 < 0x2C)
            goto LABEL_249;
          if ((unint64_t)((char *)v194 - &v201[v196]) < 0x20)
            goto LABEL_249;
          v204 = (v203 >> 2) + 1;
          v205 = 4 * (v204 & 0x7FFFFFFFFFFFFFF8);
          v206 = &v194[v205 / 0xFFFFFFFFFFFFFFFCLL];
          v202 = (int *)((char *)v202 - v205);
          v207 = &v201[4 * v197 - 16];
          v208 = v194 - 4;
          v209 = v204 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v210 = *(_OWORD *)v208;
            *(v207 - 1) = *((_OWORD *)v208 - 1);
            *v207 = v210;
            v207 -= 2;
            v208 -= 8;
            v209 -= 8;
          }
          while (v209);
          v194 = v206;
          if (v204 != (v204 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_249:
            do
            {
              v211 = *--v194;
              *--v202 = v211;
            }
            while (v194 != v195);
          }
        }
        else
        {
          v201 = 0;
          v202 = (int *)(4 * v197);
          *(_DWORD *)(4 * v197) = v192;
          v10 = 4 * v197 + 4;
          if (v194 != v195)
            goto LABEL_215;
        }
LABEL_221:
        *(_QWORD *)(a1 + 176) = v202;
        *(_QWORD *)(a1 + 184) = v10;
        *(_QWORD *)(a1 + 192) = &v201[4 * v200];
        if (v195)
          operator delete(v195);
        goto LABEL_4;
      }
      *v194 = v192;
      v10 = (uint64_t)(v194 + 1);
LABEL_4:
      *(_QWORD *)(a1 + 184) = v10;
      ++v8;
    }
    while (v8 != v220);
  }
  operations_research::sat::SchedulingConstraintHelper::InitSortedVectors((operations_research::sat::SchedulingConstraintHelper *)a1);
  return a1;
}

void sub_22DB81DDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16)
{
  _QWORD *v16;
  void *v18;
  void **v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  v18 = (void *)v16[53];
  if (v18)
  {
    operator delete(v18);
    v19 = a16 + 23;
    v20 = (void *)v16[48];
    if (!v20)
    {
LABEL_3:
      v21 = *v19;
      if (!*v19)
        goto LABEL_4;
      goto LABEL_20;
    }
  }
  else
  {
    v19 = a16 + 23;
    v20 = (void *)v16[48];
    if (!v20)
      goto LABEL_3;
  }
  v16[49] = v20;
  operator delete(v20);
  v21 = *v19;
  if (!*v19)
  {
LABEL_4:
    v22 = (void *)v16[40];
    if (!v22)
      goto LABEL_5;
    goto LABEL_21;
  }
LABEL_20:
  v16[46] = v21;
  operator delete(v21);
  v22 = (void *)v16[40];
  if (!v22)
  {
LABEL_5:
    v23 = (void *)v16[37];
    if (!v23)
      goto LABEL_6;
    goto LABEL_22;
  }
LABEL_21:
  v16[41] = v22;
  operator delete(v22);
  v23 = (void *)v16[37];
  if (!v23)
  {
LABEL_6:
    v24 = (void *)v16[34];
    if (!v24)
      goto LABEL_7;
    goto LABEL_23;
  }
LABEL_22:
  v16[38] = v23;
  operator delete(v23);
  v24 = (void *)v16[34];
  if (!v24)
  {
LABEL_7:
    v25 = (void *)v16[31];
    if (!v25)
      goto LABEL_8;
    goto LABEL_24;
  }
LABEL_23:
  v16[35] = v24;
  operator delete(v24);
  v25 = (void *)v16[31];
  if (!v25)
  {
LABEL_8:
    v26 = (void *)v16[28];
    if (!v26)
      goto LABEL_9;
    goto LABEL_25;
  }
LABEL_24:
  v16[32] = v25;
  operator delete(v25);
  v26 = (void *)v16[28];
  if (!v26)
  {
LABEL_9:
    v27 = (void *)v16[25];
    if (!v27)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  v16[29] = v26;
  operator delete(v26);
  v27 = (void *)v16[25];
  if (!v27)
  {
LABEL_10:
    v28 = *a16;
    if (!*a16)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  v16[26] = v27;
  operator delete(v27);
  v28 = *a16;
  if (!*a16)
  {
LABEL_11:
    v29 = *a10;
    if (!*a10)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  v16[23] = v28;
  operator delete(v28);
  v29 = *a10;
  if (!*a10)
  {
LABEL_12:
    v30 = *a15;
    if (!*a15)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  v16[20] = v29;
  operator delete(v29);
  v30 = *a15;
  if (!*a15)
  {
LABEL_13:
    v31 = *a13;
    if (!*a13)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  v16[17] = v30;
  operator delete(v30);
  v31 = *a13;
  if (!*a13)
  {
LABEL_14:
    v32 = *a14;
    if (!*a14)
      goto LABEL_15;
    goto LABEL_31;
  }
LABEL_30:
  v16[14] = v31;
  operator delete(v31);
  v32 = *a14;
  if (!*a14)
  {
LABEL_15:
    v33 = *a11;
    if (!*a11)
      goto LABEL_16;
    goto LABEL_32;
  }
LABEL_31:
  v16[11] = v32;
  operator delete(v32);
  v33 = *a11;
  if (!*a11)
  {
LABEL_16:
    v34 = *a12;
    if (!*a12)
      goto LABEL_17;
    goto LABEL_33;
  }
LABEL_32:
  v16[8] = v33;
  operator delete(v33);
  v34 = *a12;
  if (!*a12)
LABEL_17:
    _Unwind_Resume(exception_object);
LABEL_33:
  v16[5] = v34;
  operator delete(v34);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::SchedulingConstraintHelper::InitSortedVectors(operations_research::sat::SchedulingConstraintHelper *this)
{
  uint64_t v2;
  _DWORD **v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;

  v3 = (_DWORD **)((char *)this + 200);
  v2 = *((_QWORD *)this + 25);
  v4 = *((_QWORD *)this + 5) - *((_QWORD *)this + 4);
  v5 = (int)(v4 >> 2);
  v6 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 26) - v2) >> 2);
  if (v5 <= v6)
  {
    if (v5 < v6)
      *((_QWORD *)this + 26) = v2 + 12 * (int)v5;
  }
  else
  {
    std::vector<operations_research::sat::TaskTime>::__append((uint64_t)this + 200, v5 - v6);
  }
  v7 = *((_QWORD *)this + 28);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 29) - v7) >> 2);
  if (v5 <= v8)
  {
    if (v5 < v8)
      *((_QWORD *)this + 29) = v7 + 12 * (int)v5;
  }
  else
  {
    std::vector<operations_research::sat::TaskTime>::__append((uint64_t)this + 224, v5 - v8);
  }
  v9 = *((_QWORD *)this + 31);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 32) - v9) >> 2);
  if (v5 <= v10)
  {
    if (v5 < v10)
      *((_QWORD *)this + 32) = v9 + 12 * (int)v5;
  }
  else
  {
    std::vector<operations_research::sat::TaskTime>::__append((uint64_t)this + 248, v5 - v10);
  }
  v11 = *((_QWORD *)this + 34);
  v12 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 35) - v11) >> 2);
  if (v5 <= v12)
  {
    if (v5 < v12)
      *((_QWORD *)this + 35) = v11 + 12 * (int)v5;
  }
  else
  {
    std::vector<operations_research::sat::TaskTime>::__append((uint64_t)this + 272, v5 - v12);
  }
  v13 = *((_QWORD *)this + 37);
  v14 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 38) - v13) >> 2);
  if (v5 <= v14)
  {
    if (v5 < v14)
      *((_QWORD *)this + 38) = v13 + 12 * (int)v5;
  }
  else
  {
    std::vector<operations_research::sat::TaskTime>::__append((uint64_t)this + 296, v5 - v14);
  }
  v15 = *((_QWORD *)this + 40);
  v16 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 41) - v15) >> 2);
  if (v5 <= v16)
  {
    if (v5 < v16)
      *((_QWORD *)this + 41) = v15 + 12 * (int)v5;
  }
  else
  {
    std::vector<operations_research::sat::TaskTime>::__append((uint64_t)this + 320, v5 - v16);
  }
  if ((int)((unint64_t)v4 >> 2) >= 1)
  {
    v17 = 0;
    v18 = *v3;
    v19 = (_DWORD *)*((_QWORD *)this + 28);
    v20 = (_DWORD *)*((_QWORD *)this + 31);
    v21 = (_DWORD *)*((_QWORD *)this + 34);
    v22 = (_DWORD *)*((_QWORD *)this + 37);
    v23 = (_DWORD *)*((_QWORD *)this + 40);
    do
    {
      *v18 = v17;
      v18 += 3;
      *v19 = v17;
      v19 += 3;
      *v20 = v17;
      v20 += 3;
      *v21 = v17;
      v21 += 3;
      *v22 = v17;
      v22 += 3;
      *v23 = v17;
      v23 += 3;
      ++v17;
    }
    while (((unint64_t)v4 >> 2) != v17);
  }
  *((_QWORD *)this + 43) = -1;
  *((_QWORD *)this + 44) = -1;
}

operations_research::sat::SchedulingConstraintHelper *operations_research::sat::SchedulingConstraintHelper::SchedulingConstraintHelper(operations_research::sat::SchedulingConstraintHelper *this, int a2, operations_research::sat::Model *a3)
{
  operations_research::sat::PrecedencesPropagator *v6;
  uint64_t *v8;
  unint64_t v9[2];
  uint64_t *v10;
  int v11;

  *(_QWORD *)this = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)a3);
  *((_QWORD *)this + 1) = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)a3);
  v6 = operations_research::sat::Model::GetOrCreate<operations_research::sat::PrecedencesPropagator>((uint64_t)a3);
  *((_OWORD *)this + 2) = 0u;
  *((_QWORD *)this + 2) = v6;
  *((_BYTE *)this + 24) = 1;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_QWORD *)this + 43) = -1;
  *((_QWORD *)this + 44) = -1;
  *((_QWORD *)this + 42) = 0;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *((_QWORD *)this + 55) = 0;
  if (a2)
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 32), a2);
    LODWORD(v9[0]) = (*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 2;
    v11 = a2;
    if (LODWORD(v9[0]) != a2)
    {
      v8 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v9, (int)&v11, "NumTasks() == num_tasks");
      v10 = v8;
      if (v8)
      {
        google::LogMessageFatal::LogMessageFatal(v9, (google::glog_internal_namespace_ *)"./ortools/sat/intervals.cc", 93, &v10);
        google::LogMessage::stream((google::LogMessage *)v9);
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v9);
      }
    }
  }
  else
  {
    LODWORD(v9[0]) = 0;
    v11 = 0;
  }
  return this;
}

void sub_22DB82364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void sub_22DB8236C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v5 = (void *)v1[53];
  if (v5)
  {
    operator delete(v5);
    v6 = (void *)v1[48];
    if (!v6)
    {
LABEL_3:
      v7 = *v3;
      if (!*v3)
        goto LABEL_4;
      goto LABEL_20;
    }
  }
  else
  {
    v6 = (void *)v1[48];
    if (!v6)
      goto LABEL_3;
  }
  v1[49] = v6;
  operator delete(v6);
  v7 = *v3;
  if (!*v3)
  {
LABEL_4:
    v8 = (void *)v1[40];
    if (!v8)
      goto LABEL_5;
    goto LABEL_21;
  }
LABEL_20:
  v1[46] = v7;
  operator delete(v7);
  v8 = (void *)v1[40];
  if (!v8)
  {
LABEL_5:
    v9 = (void *)v1[37];
    if (!v9)
      goto LABEL_6;
    goto LABEL_22;
  }
LABEL_21:
  v1[41] = v8;
  operator delete(v8);
  v9 = (void *)v1[37];
  if (!v9)
  {
LABEL_6:
    v10 = (void *)v1[34];
    if (!v10)
      goto LABEL_7;
    goto LABEL_23;
  }
LABEL_22:
  v1[38] = v9;
  operator delete(v9);
  v10 = (void *)v1[34];
  if (!v10)
  {
LABEL_7:
    v11 = (void *)v1[31];
    if (!v11)
      goto LABEL_8;
    goto LABEL_24;
  }
LABEL_23:
  v1[35] = v10;
  operator delete(v10);
  v11 = (void *)v1[31];
  if (!v11)
  {
LABEL_8:
    v12 = (void *)v1[28];
    if (!v12)
      goto LABEL_9;
    goto LABEL_25;
  }
LABEL_24:
  v1[32] = v11;
  operator delete(v11);
  v12 = (void *)v1[28];
  if (!v12)
  {
LABEL_9:
    v13 = (void *)v1[25];
    if (!v13)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  v1[29] = v12;
  operator delete(v12);
  v13 = (void *)v1[25];
  if (!v13)
  {
LABEL_10:
    v14 = (void *)v1[22];
    if (!v14)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  v1[26] = v13;
  operator delete(v13);
  v14 = (void *)v1[22];
  if (!v14)
  {
LABEL_11:
    v15 = (void *)v1[19];
    if (!v15)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  v1[23] = v14;
  operator delete(v14);
  v15 = (void *)v1[19];
  if (!v15)
  {
LABEL_12:
    v16 = (void *)v1[16];
    if (!v16)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  v1[20] = v15;
  operator delete(v15);
  v16 = (void *)v1[16];
  if (!v16)
  {
LABEL_13:
    v17 = (void *)v1[13];
    if (!v17)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  v1[17] = v16;
  operator delete(v16);
  v17 = (void *)v1[13];
  if (!v17)
  {
LABEL_14:
    v18 = (void *)v1[10];
    if (!v18)
      goto LABEL_15;
    goto LABEL_31;
  }
LABEL_30:
  v1[14] = v17;
  operator delete(v17);
  v18 = (void *)v1[10];
  if (!v18)
  {
LABEL_15:
    v19 = (void *)v1[7];
    if (!v19)
      goto LABEL_16;
    goto LABEL_32;
  }
LABEL_31:
  v1[11] = v18;
  operator delete(v18);
  v19 = (void *)v1[7];
  if (!v19)
  {
LABEL_16:
    v20 = *v2;
    if (!*v2)
      goto LABEL_17;
    goto LABEL_33;
  }
LABEL_32:
  v1[8] = v19;
  operator delete(v19);
  v20 = *v2;
  if (!*v2)
LABEL_17:
    _Unwind_Resume(exception_object);
LABEL_33:
  v1[5] = v20;
  operator delete(v20);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::SchedulingConstraintHelper::ResetFromSubset(std::vector<int> *this, uint64_t a2, int *a3, unsigned int a4)
{
  std::vector<int>::pointer end;
  std::vector<int>::pointer *p_end;
  unint64_t v8;
  unint64_t v9;
  std::vector<int>::pointer v10;
  unint64_t v11;
  std::vector<int>::pointer v12;
  unint64_t v13;
  std::vector<int>::pointer v14;
  unint64_t v15;
  std::vector<int>::pointer v16;
  unint64_t v17;
  std::vector<int>::pointer v18;
  unint64_t v19;
  std::vector<int>::pointer v20;
  unint64_t v21;
  uint64_t v22;
  std::vector<int>::pointer v23;
  uint64_t v24;
  std::vector<int>::pointer v25;
  uint64_t v26;
  std::vector<int>::pointer v27;
  uint64_t v28;
  std::vector<int>::pointer v29;
  uint64_t v30;
  std::vector<int>::pointer v31;
  uint64_t v32;
  std::vector<int>::pointer v33;
  uint64_t v34;
  uint64_t v35;
  std::vector<int>::pointer v36;
  uint64_t v37;

  p_end = &this[1].__end_;
  end = this[1].__end_;
  LOBYTE(this[1].__begin_) = *(_BYTE *)(a2 + 24);
  v8 = (int)a4;
  v9 = this[1].__end_cap_.__value_ - end;
  if ((int)a4 <= v9)
  {
    if ((int)a4 < v9)
      this[1].__end_cap_.__value_ = &end[a4];
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 32), (int)a4 - v9);
  }
  v10 = this[2].__end_;
  v11 = this[2].__end_cap_.__value_ - v10;
  if (v8 <= v11)
  {
    if (v8 < v11)
      this[2].__end_cap_.__value_ = &v10[v8];
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 56), v8 - v11);
  }
  v12 = this[7].__end_;
  v13 = this[7].__end_cap_.__value_ - v12;
  if (v8 <= v13)
  {
    if (v8 < v13)
      this[7].__end_cap_.__value_ = &v12[v8];
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 176), v8 - v13);
  }
  v14 = this[6].__end_;
  v15 = this[6].__end_cap_.__value_ - v14;
  if (v8 <= v15)
  {
    if (v8 < v15)
      this[6].__end_cap_.__value_ = &v14[v8];
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 152), v8 - v15);
  }
  v16 = this[3].__end_;
  v17 = this[3].__end_cap_.__value_ - v16;
  if (v8 <= v17)
  {
    if (v8 < v17)
      this[3].__end_cap_.__value_ = &v16[v8];
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 80), v8 - v17);
  }
  v18 = this[4].__end_;
  v19 = ((char *)this[4].__end_cap_.__value_ - (char *)v18) >> 3;
  if (v8 <= v19)
  {
    if (v8 < v19)
      this[4].__end_cap_.__value_ = &v18[2 * v8];
  }
  else
  {
    std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::__append((uint64_t)&this[4].__end_, v8 - v19);
  }
  v20 = this[5].__end_;
  v21 = this[5].__end_cap_.__value_ - v20;
  if (v8 <= v21)
  {
    if (v8 < v21)
      this[5].__end_cap_.__value_ = &v20[v8];
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 128), v8 - v21);
  }
  if ((int)v8 >= 1)
  {
    v22 = *(_QWORD *)(a2 + 32);
    v23 = *p_end;
    v24 = *(_QWORD *)(a2 + 56);
    v25 = this[2].__end_;
    v26 = *(_QWORD *)(a2 + 176);
    v27 = this[7].__end_;
    v28 = *(_QWORD *)(a2 + 152);
    v29 = this[6].__end_;
    v30 = *(_QWORD *)(a2 + 80);
    v31 = this[3].__end_;
    v32 = *(_QWORD *)(a2 + 104);
    v33 = this[4].__end_;
    v34 = *(_QWORD *)(a2 + 128);
    v35 = a4;
    v36 = this[5].__end_;
    do
    {
      v37 = *a3++;
      *v23++ = *(_DWORD *)(v22 + 4 * v37);
      *v25++ = *(_DWORD *)(v24 + 4 * v37);
      *v27++ = *(_DWORD *)(v26 + 4 * v37);
      *v29++ = *(_DWORD *)(v28 + 4 * v37);
      *v31++ = *(_DWORD *)(v30 + 4 * v37);
      *(_QWORD *)v33 = *(_QWORD *)(v32 + 8 * v37);
      v33 += 2;
      *v36++ = *(_DWORD *)(v34 + 4 * v37);
      --v35;
    }
    while (v35);
  }
  operations_research::sat::SchedulingConstraintHelper::InitSortedVectors((operations_research::sat::SchedulingConstraintHelper *)this);
}

int8x16_t operations_research::sat::SchedulingConstraintHelper::SetTimeDirection(operations_research::sat::SchedulingConstraintHelper *this, int a2)
{
  __int128 v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int8x16_t result;

  if (*((unsigned __int8 *)this + 24) != a2)
  {
    *((_BYTE *)this + 24) = a2;
    v2 = *((_OWORD *)this + 2);
    *((_OWORD *)this + 2) = *((_OWORD *)this + 11);
    *((_OWORD *)this + 11) = v2;
    v3 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = *((_QWORD *)this + 24);
    *((_QWORD *)this + 24) = v3;
    v4 = *(_OWORD *)((char *)this + 56);
    *(_OWORD *)((char *)this + 56) = *(_OWORD *)((char *)this + 152);
    *(_OWORD *)((char *)this + 152) = v4;
    v5 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = *((_QWORD *)this + 21);
    *((_QWORD *)this + 21) = v5;
    v6 = *(_OWORD *)((char *)this + 200);
    *(_OWORD *)((char *)this + 200) = *((_OWORD *)this + 17);
    *((_OWORD *)this + 17) = v6;
    v7 = *((_QWORD *)this + 27);
    *((_QWORD *)this + 27) = *((_QWORD *)this + 36);
    *((_QWORD *)this + 36) = v7;
    v8 = *((_OWORD *)this + 14);
    *((_OWORD *)this + 14) = *(_OWORD *)((char *)this + 248);
    *(_OWORD *)((char *)this + 248) = v8;
    v9 = *((_QWORD *)this + 30);
    *((_QWORD *)this + 30) = *((_QWORD *)this + 33);
    *((_QWORD *)this + 33) = v9;
    v10 = *(_OWORD *)((char *)this + 296);
    *(_OWORD *)((char *)this + 296) = *((_OWORD *)this + 20);
    *((_OWORD *)this + 20) = v10;
    v11 = *((_QWORD *)this + 39);
    *((_QWORD *)this + 39) = *((_QWORD *)this + 42);
    *((_QWORD *)this + 42) = v11;
    result = vextq_s8(*(int8x16_t *)((char *)this + 344), *(int8x16_t *)((char *)this + 344), 8uLL);
    *(int8x16_t *)((char *)this + 344) = result;
  }
  return result;
}

char *operations_research::sat::SchedulingConstraintHelper::TaskByIncreasingStartMin(operations_research::sat::SchedulingConstraintHelper *this)
{
  char *v1;
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v2 = (char *)this + 200;
  v1 = (char *)*((_QWORD *)this + 25);
  v3 = *((_QWORD *)this + 4);
  v4 = *((_QWORD *)this + 5) - v3;
  if ((int)(v4 >> 2) >= 1)
  {
    v5 = *(_QWORD *)(*((_QWORD *)this + 1) + 40);
    v6 = (v4 >> 2);
    v7 = v1 + 4;
    do
    {
      *v7 = *(_QWORD *)(v5 + 12 * *(int *)(v3 + 4 * *((int *)v7 - 1)));
      v7 = (_QWORD *)((char *)v7 + 12);
      --v6;
    }
    while (v6);
  }
  v8 = (char *)*((_QWORD *)this + 26);
  if ((int)(-1431655765 * ((unint64_t)(v8 - v1) >> 2)) > 32)
  {
    operations_research::IncrementalSort<std::__wrap_iter<operations_research::sat::TaskTime *>,std::less<operations_research::sat::TaskTime>>(1431655768 * ((unint64_t)(v8 - v1) >> 2), v1, v8, 0);
  }
  else if (v8 - v1 >= 24)
  {
    v9 = v8 - 12;
    v10 = v1;
    if (v8 - 12 != v1)
    {
      v10 = v8 - 12;
      v11 = v8 - 12;
      do
      {
        v12 = *(_QWORD *)(v11 - 12);
        v11 -= 12;
        LODWORD(v23) = HIDWORD(v12);
        HIDWORD(v23) = *((_DWORD *)v11 + 2);
        if (*((_QWORD *)v11 + 2) < v23)
        {
          v13 = *((_DWORD *)v9 + 2);
          v14 = *(_QWORD *)v9;
          *(_QWORD *)v9 = *(_QWORD *)v11;
          *((_DWORD *)v9 + 2) = *((_DWORD *)v11 + 2);
          *(_QWORD *)v11 = v14;
          *((_DWORD *)v11 + 2) = v13;
          v10 = v9;
        }
        v9 = v11;
      }
      while (v11 != v1);
    }
    while (1)
    {
      v15 = v10 + 12;
      if (v10 + 12 == v8)
        break;
      v16 = *((_DWORD *)v10 + 3);
      v17 = *((_QWORD *)v10 + 2);
      v10 += 12;
      *(_QWORD *)&v21 = *(_QWORD *)(v15 - 12);
      DWORD2(v21) = *((_DWORD *)v15 - 1);
      if (v17 < *(uint64_t *)((char *)&v21 + 4))
      {
        v18 = v15;
        do
        {
          v19 = *(_QWORD *)(v15 - 12);
          v15 -= 12;
          *(_QWORD *)v18 = v19;
          *((_DWORD *)v18 + 2) = *((_DWORD *)v18 - 1);
          *(_QWORD *)&v22 = *((_QWORD *)v18 - 3);
          DWORD2(v22) = *((_DWORD *)v18 - 4);
          v18 = v15;
        }
        while (v17 < *(uint64_t *)((char *)&v22 + 4));
      }
      *(_DWORD *)v15 = v16;
      *(_QWORD *)(v15 + 4) = v17;
    }
  }
  return v2;
}

char *operations_research::sat::SchedulingConstraintHelper::TaskByIncreasingEndMin(operations_research::sat::SchedulingConstraintHelper *this)
{
  char *v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v2 = (char *)this + 224;
  v1 = (char *)*((_QWORD *)this + 28);
  v3 = *((_QWORD *)this + 5) - *((_QWORD *)this + 4);
  if ((int)(v3 >> 2) >= 1)
  {
    v4 = *((_QWORD *)this + 7);
    v5 = *(_QWORD *)(*((_QWORD *)this + 1) + 40);
    v6 = (v3 >> 2);
    v7 = v1 + 4;
    do
    {
      *v7 = *(_QWORD *)(v5 + 12 * *(int *)(v4 + 4 * *((int *)v7 - 1)));
      v7 = (_QWORD *)((char *)v7 + 12);
      --v6;
    }
    while (v6);
  }
  v8 = (char *)*((_QWORD *)this + 29);
  if ((int)(-1431655765 * ((unint64_t)(v8 - v1) >> 2)) > 32)
  {
    operations_research::IncrementalSort<std::__wrap_iter<operations_research::sat::TaskTime *>,std::less<operations_research::sat::TaskTime>>(1431655768 * ((unint64_t)(v8 - v1) >> 2), v1, v8, 0);
  }
  else if (v8 - v1 >= 24)
  {
    v9 = v8 - 12;
    v10 = v1;
    if (v8 - 12 != v1)
    {
      v10 = v8 - 12;
      v11 = v8 - 12;
      do
      {
        v12 = *(_QWORD *)(v11 - 12);
        v11 -= 12;
        LODWORD(v23) = HIDWORD(v12);
        HIDWORD(v23) = *((_DWORD *)v11 + 2);
        if (*((_QWORD *)v11 + 2) < v23)
        {
          v13 = *((_DWORD *)v9 + 2);
          v14 = *(_QWORD *)v9;
          *(_QWORD *)v9 = *(_QWORD *)v11;
          *((_DWORD *)v9 + 2) = *((_DWORD *)v11 + 2);
          *(_QWORD *)v11 = v14;
          *((_DWORD *)v11 + 2) = v13;
          v10 = v9;
        }
        v9 = v11;
      }
      while (v11 != v1);
    }
    while (1)
    {
      v15 = v10 + 12;
      if (v10 + 12 == v8)
        break;
      v16 = *((_DWORD *)v10 + 3);
      v17 = *((_QWORD *)v10 + 2);
      v10 += 12;
      *(_QWORD *)&v21 = *(_QWORD *)(v15 - 12);
      DWORD2(v21) = *((_DWORD *)v15 - 1);
      if (v17 < *(uint64_t *)((char *)&v21 + 4))
      {
        v18 = v15;
        do
        {
          v19 = *(_QWORD *)(v15 - 12);
          v15 -= 12;
          *(_QWORD *)v18 = v19;
          *((_DWORD *)v18 + 2) = *((_DWORD *)v18 - 1);
          *(_QWORD *)&v22 = *((_QWORD *)v18 - 3);
          DWORD2(v22) = *((_DWORD *)v18 - 4);
          v18 = v15;
        }
        while (v17 < *(uint64_t *)((char *)&v22 + 4));
      }
      *(_DWORD *)v15 = v16;
      *(_QWORD *)(v15 + 4) = v17;
    }
  }
  return v2;
}

char *operations_research::sat::SchedulingConstraintHelper::TaskByDecreasingStartMax(operations_research::sat::SchedulingConstraintHelper *this)
{
  char *v1;
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v2 = (char *)this + 248;
  v1 = (char *)*((_QWORD *)this + 31);
  v3 = *((_QWORD *)this + 4);
  v4 = *((_QWORD *)this + 5) - v3;
  if ((int)(v4 >> 2) >= 1)
  {
    v5 = *(_QWORD *)(*((_QWORD *)this + 1) + 40);
    v6 = (v4 >> 2);
    v7 = v1 + 4;
    do
    {
      *v7 = -*(_QWORD *)(v5 + 12 * (*(_DWORD *)(v3 + 4 * *((int *)v7 - 1)) ^ 1));
      v7 = (_QWORD *)((char *)v7 + 12);
      --v6;
    }
    while (v6);
  }
  v8 = (char *)*((_QWORD *)this + 32);
  if ((int)(-1431655765 * ((unint64_t)(v8 - v1) >> 2)) > 32)
  {
    operations_research::IncrementalSort<std::__wrap_iter<operations_research::sat::TaskTime *>,std::greater<operations_research::sat::TaskTime>>(1431655768 * ((unint64_t)(v8 - v1) >> 2), v1, v8, 0);
  }
  else if (v8 - v1 >= 24)
  {
    v9 = v8 - 12;
    v10 = v1;
    if (v8 - 12 != v1)
    {
      v10 = v8 - 12;
      v11 = v8 - 12;
      do
      {
        v12 = *(_QWORD *)(v11 - 12);
        v11 -= 12;
        LODWORD(v23) = HIDWORD(v12);
        HIDWORD(v23) = *((_DWORD *)v11 + 2);
        if (*((_QWORD *)v11 + 2) > v23)
        {
          v13 = *((_DWORD *)v9 + 2);
          v14 = *(_QWORD *)v9;
          *(_QWORD *)v9 = *(_QWORD *)v11;
          *((_DWORD *)v9 + 2) = *((_DWORD *)v11 + 2);
          *(_QWORD *)v11 = v14;
          *((_DWORD *)v11 + 2) = v13;
          v10 = v9;
        }
        v9 = v11;
      }
      while (v11 != v1);
    }
    while (1)
    {
      v15 = v10 + 12;
      if (v10 + 12 == v8)
        break;
      v16 = *((_DWORD *)v10 + 3);
      v17 = *((_QWORD *)v10 + 2);
      v10 += 12;
      *(_QWORD *)&v21 = *(_QWORD *)(v15 - 12);
      DWORD2(v21) = *((_DWORD *)v15 - 1);
      if (v17 > *(uint64_t *)((char *)&v21 + 4))
      {
        v18 = v15;
        do
        {
          v19 = *(_QWORD *)(v15 - 12);
          v15 -= 12;
          *(_QWORD *)v18 = v19;
          *((_DWORD *)v18 + 2) = *((_DWORD *)v18 - 1);
          *(_QWORD *)&v22 = *((_QWORD *)v18 - 3);
          DWORD2(v22) = *((_DWORD *)v18 - 4);
          v18 = v15;
        }
        while (v17 > *(uint64_t *)((char *)&v22 + 4));
      }
      *(_DWORD *)v15 = v16;
      *(_QWORD *)(v15 + 4) = v17;
    }
  }
  return v2;
}

char *operations_research::sat::SchedulingConstraintHelper::TaskByDecreasingEndMax(operations_research::sat::SchedulingConstraintHelper *this)
{
  unint64_t v1;
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v1 = *((_QWORD *)this + 5) - *((_QWORD *)this + 4);
  v2 = (char *)this + 272;
  v3 = (char *)*((_QWORD *)this + 34);
  if ((int)(v1 >> 2) >= 1)
  {
    v4 = *((_QWORD *)this + 7);
    v5 = *(_QWORD *)(*((_QWORD *)this + 1) + 40);
    v6 = (v1 >> 2);
    v7 = v3 + 4;
    do
    {
      *v7 = -*(_QWORD *)(v5 + 12 * (*(_DWORD *)(v4 + 4 * *((int *)v7 - 1)) ^ 1));
      v7 = (_QWORD *)((char *)v7 + 12);
      --v6;
    }
    while (v6);
  }
  v8 = (char *)*((_QWORD *)this + 35);
  if ((int)(-1431655765 * ((unint64_t)(v8 - v3) >> 2)) > 32)
  {
    operations_research::IncrementalSort<std::__wrap_iter<operations_research::sat::TaskTime *>,std::greater<operations_research::sat::TaskTime>>(1431655768 * ((unint64_t)(v8 - v3) >> 2), v3, v8, 0);
  }
  else if (v8 - v3 >= 24)
  {
    v9 = v8 - 12;
    v10 = v3;
    if (v8 - 12 != v3)
    {
      v10 = v8 - 12;
      v11 = v8 - 12;
      do
      {
        v12 = *(_QWORD *)(v11 - 12);
        v11 -= 12;
        LODWORD(v23) = HIDWORD(v12);
        HIDWORD(v23) = *((_DWORD *)v11 + 2);
        if (*((_QWORD *)v11 + 2) > v23)
        {
          v13 = *((_DWORD *)v9 + 2);
          v14 = *(_QWORD *)v9;
          *(_QWORD *)v9 = *(_QWORD *)v11;
          *((_DWORD *)v9 + 2) = *((_DWORD *)v11 + 2);
          *(_QWORD *)v11 = v14;
          *((_DWORD *)v11 + 2) = v13;
          v10 = v9;
        }
        v9 = v11;
      }
      while (v11 != v3);
    }
    while (1)
    {
      v15 = v10 + 12;
      if (v10 + 12 == v8)
        break;
      v16 = *((_DWORD *)v10 + 3);
      v17 = *((_QWORD *)v10 + 2);
      v10 += 12;
      *(_QWORD *)&v21 = *(_QWORD *)(v15 - 12);
      DWORD2(v21) = *((_DWORD *)v15 - 1);
      if (v17 > *(uint64_t *)((char *)&v21 + 4))
      {
        v18 = v15;
        do
        {
          v19 = *(_QWORD *)(v15 - 12);
          v15 -= 12;
          *(_QWORD *)v18 = v19;
          *((_DWORD *)v18 + 2) = *((_DWORD *)v18 - 1);
          *(_QWORD *)&v22 = *((_QWORD *)v18 - 3);
          DWORD2(v22) = *((_DWORD *)v18 - 4);
          v18 = v15;
        }
        while (v17 > *(uint64_t *)((char *)&v22 + 4));
      }
      *(_DWORD *)v15 = v16;
      *(_QWORD *)(v15 + 4) = v17;
    }
  }
  return v2;
}

uint64_t operations_research::sat::SchedulingConstraintHelper::TaskByIncreasingShiftedStartMin(operations_research::sat::SchedulingConstraintHelper *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t *v10;
  int64_t v11;
  char v12;
  _QWORD *v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char *v27;
  int v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v2 = (_QWORD *)*((_QWORD *)this + 1);
  v3 = v2[107] + v2[106];
  if (v3 > *((_QWORD *)this + 43))
  {
    *((_QWORD *)this + 43) = v3;
    v4 = *((_QWORD *)this + 4);
    v5 = *((_QWORD *)this + 5) - v4;
    if ((int)(v5 >> 2) >= 1)
    {
      v6 = v2[5];
      v7 = *((_QWORD *)this + 7);
      v8 = (v5 >> 2);
      v9 = *((_QWORD *)this + 10);
      v10 = (int64_t *)(*((_QWORD *)this + 37) + 4);
      v11 = 0x8000000000000002;
      v12 = 1;
      do
      {
        v16 = *((int *)v10 - 1);
        v17 = 4 * v16;
        v18 = *(_DWORD *)(v9 + 4 * v16);
        if (v18 == -1)
          v13 = (_QWORD *)(*((_QWORD *)this + 13) + 8 * v16);
        else
          v13 = (_QWORD *)(v6 + 12 * v18);
        v14 = *(_QWORD *)(v6 + 12 * *(int *)(v4 + 4 * v16));
        v15 = *(_QWORD *)(v6 + 12 * *(int *)(v7 + v17)) - *v13;
        if (v14 > v15)
          v15 = v14;
        *v10 = v15;
        v10 = (int64_t *)((char *)v10 + 12);
        v12 &= v15 >= v11;
        v11 = v15;
        --v8;
      }
      while (v8);
      if ((v12 & 1) == 0)
      {
        v19 = (char *)*((_QWORD *)this + 37);
        v20 = (char *)*((_QWORD *)this + 38);
        if ((int)(-1431655765 * ((unint64_t)(v20 - v19) >> 2)) > 32)
        {
          operations_research::IncrementalSort<std::__wrap_iter<operations_research::sat::TaskTime *>,std::less<operations_research::sat::TaskTime>>(1431655768 * ((unint64_t)(v20 - v19) >> 2), v19, v20, 0);
        }
        else if (v20 - v19 >= 24)
        {
          v21 = v20 - 12;
          v22 = (char *)*((_QWORD *)this + 37);
          if (v20 - 12 != v19)
          {
            v22 = v20 - 12;
            v23 = v20 - 12;
            do
            {
              v24 = *(_QWORD *)(v23 - 12);
              v23 -= 12;
              LODWORD(v35) = HIDWORD(v24);
              HIDWORD(v35) = *((_DWORD *)v23 + 2);
              if (*((_QWORD *)v23 + 2) < v35)
              {
                v25 = *((_DWORD *)v21 + 2);
                v26 = *(_QWORD *)v21;
                *(_QWORD *)v21 = *(_QWORD *)v23;
                *((_DWORD *)v21 + 2) = *((_DWORD *)v23 + 2);
                *(_QWORD *)v23 = v26;
                *((_DWORD *)v23 + 2) = v25;
                v22 = v21;
              }
              v21 = v23;
            }
            while (v23 != v19);
          }
          while (1)
          {
            v27 = v22 + 12;
            if (v22 + 12 == v20)
              break;
            v28 = *((_DWORD *)v22 + 3);
            v29 = *((_QWORD *)v22 + 2);
            v22 += 12;
            *(_QWORD *)&v33 = *(_QWORD *)(v27 - 12);
            DWORD2(v33) = *((_DWORD *)v27 - 1);
            if (v29 < *(uint64_t *)((char *)&v33 + 4))
            {
              v30 = v27;
              do
              {
                v31 = *(_QWORD *)(v27 - 12);
                v27 -= 12;
                *(_QWORD *)v30 = v31;
                *((_DWORD *)v30 + 2) = *((_DWORD *)v30 - 1);
                *(_QWORD *)&v34 = *((_QWORD *)v30 - 3);
                DWORD2(v34) = *((_DWORD *)v30 - 4);
                v30 = v27;
              }
              while (v29 < *(uint64_t *)((char *)&v34 + 4));
            }
            *(_DWORD *)v27 = v28;
            *(_QWORD *)(v27 + 4) = v29;
          }
        }
      }
    }
  }
  return (uint64_t)this + 296;
}

void operations_research::sat::SchedulingConstraintHelper::AddReasonForBeingBefore(void **this, int a2, int a3)
{
  std::vector<int> *v6;
  _DWORD *v7;
  int v8;
  int *value;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  char *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  __int32 v49;
  char *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  void *v72;
  uint64_t v73;
  int v74;
  char *v75;
  uint64_t v76;
  int v77;
  char *v78;
  char *v79;
  char *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  int v89;
  _BYTE v90[12];
  _BYTE v91[12];
  int v92[2];
  int64x2_t v93;
  uint64_t v94;

  v94 = *MEMORY[0x24BDAC8D0];
  operations_research::sat::SchedulingConstraintHelper::AddOtherReason((operations_research::sat::SchedulingConstraintHelper *)this, a2);
  operations_research::sat::SchedulingConstraintHelper::AddOtherReason((operations_research::sat::SchedulingConstraintHelper *)this, a3);
  v6 = (std::vector<int> *)this[1];
  v7 = this[4];
  v8 = v7[a2] ^ 1;
  value = v6[1].__end_cap_.__value_;
  v10 = *(_QWORD *)&value[3 * v8];
  v11 = -v10;
  v12 = *((_DWORD *)this[7] + a3);
  v13 = *(_QWORD *)&value[3 * v12];
  if (v13 <= -v10)
  {
    v14 = a3;
    v93.i64[0] = -v10;
    v15 = a3;
    v16 = *(_QWORD *)&value[3 * v7[v15]];
    v17 = *(_DWORD *)((char *)this[10] + v15 * 4);
    if (v17 == -1)
    {
      *(_QWORD *)v90 = *((_QWORD *)this[13] + a3) + v16;
      if (*(uint64_t *)v90 >= v11)
        goto LABEL_10;
    }
    else
    {
      *(_QWORD *)v90 = *(_QWORD *)&value[3 * v17] + v16;
      if (*(uint64_t *)v90 >= v11)
        goto LABEL_10;
    }
    *(_QWORD *)v91 = google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>((int)&v93, (int)v90, "StartMax(before) <= StartMin(after) + DurationMin(after)");
    if (*(_QWORD *)v91)
    {
      google::LogMessageFatal::LogMessageFatal((unint64_t *)&v93, (google::glog_internal_namespace_ *)"./ortools/sat/intervals.cc", 234, (uint64_t **)v91);
      google::LogMessage::stream((google::LogMessage *)&v93);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v93);
    }
    value = (int *)*((_QWORD *)this[1] + 5);
    v8 = *((_DWORD *)this[4] + a2) ^ 1;
LABEL_10:
    v22 = this + 48;
    v23 = *(_QWORD *)&value[3 * v8];
    v93.i32[0] = v8;
    *(uint64_t *)((char *)v93.i64 + 4) = v23;
    v24 = v93.i64[0];
    v25 = HIDWORD(v23);
    v27 = (char *)this[49];
    v26 = (char *)this[50];
    if (v27 >= v26)
    {
      v29 = (char *)*v22;
      v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v27[-*v22] >> 2);
      v31 = v30 + 1;
      if (v30 + 1 > 0x1555555555555555)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v32 = 0xAAAAAAAAAAAAAAABLL * ((v26 - v29) >> 2);
      if (2 * v32 > v31)
        v31 = 2 * v32;
      if (v32 >= 0xAAAAAAAAAAAAAAALL)
        v33 = 0x1555555555555555;
      else
        v33 = v31;
      if (v33)
      {
        if (v33 > 0x1555555555555555)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v34 = (char *)operator new(12 * v33);
      }
      else
      {
        v34 = 0;
      }
      v41 = &v34[12 * v30];
      *(_QWORD *)v41 = v24;
      *((_DWORD *)v41 + 2) = v25;
      v28 = v41 + 12;
      if (v27 != v29)
      {
        do
        {
          v42 = *(_QWORD *)(v27 - 12);
          v27 -= 12;
          v43 = *((_DWORD *)v27 + 2);
          *(_QWORD *)(v41 - 12) = v42;
          v41 -= 12;
          *((_DWORD *)v41 + 2) = v43;
        }
        while (v27 != v29);
        v27 = (char *)*v22;
      }
      this[48] = v41;
      this[49] = v28;
      this[50] = &v34[12 * v33];
      if (v27)
        operator delete(v27);
    }
    else
    {
      *(_QWORD *)v27 = v93.i64[0];
      *((_DWORD *)v27 + 2) = HIDWORD(v23);
      v28 = v27 + 12;
    }
    this[49] = v28;
    v44 = *(_QWORD *)(*((_QWORD *)this[1] + 5) + 12 * *((int *)this[4] + v14));
    v93.i32[0] = *((_DWORD *)this[4] + v14);
    *(uint64_t *)((char *)v93.i64 + 4) = v44;
    v45 = v93.i64[0];
    v46 = HIDWORD(v44);
    v47 = (char *)this[50];
    if (v28 < v47)
    {
      *(_QWORD *)v28 = v93.i64[0];
      *((_DWORD *)v28 + 2) = HIDWORD(v44);
      v48 = v28 + 12;
      this[49] = v28 + 12;
      v49 = *((_DWORD *)this[10] + v14);
      if (v49 == -1)
        return;
      goto LABEL_56;
    }
    v50 = (char *)*v22;
    v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v28[-*v22] >> 2);
    v52 = v51 + 1;
    if (v51 + 1 > 0x1555555555555555)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v53 = 0xAAAAAAAAAAAAAAABLL * ((v47 - v50) >> 2);
    if (2 * v53 > v52)
      v52 = 2 * v53;
    if (v53 >= 0xAAAAAAAAAAAAAAALL)
      v54 = 0x1555555555555555;
    else
      v54 = v52;
    if (v54)
    {
      if (v54 > 0x1555555555555555)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v55 = (char *)operator new(12 * v54);
    }
    else
    {
      v55 = 0;
    }
    v56 = &v55[12 * v51];
    v57 = &v55[12 * v54];
    *(_QWORD *)v56 = v45;
    *((_DWORD *)v56 + 2) = v46;
    v48 = v56 + 12;
    if (v28 == v50)
    {
      this[48] = v56;
      this[49] = v48;
      this[50] = v57;
    }
    else
    {
      do
      {
        v58 = *(_QWORD *)(v28 - 12);
        v28 -= 12;
        v59 = *((_DWORD *)v28 + 2);
        *(_QWORD *)(v56 - 12) = v58;
        v56 -= 12;
        *((_DWORD *)v56 + 2) = v59;
      }
      while (v28 != v50);
      v28 = (char *)this[48];
      this[48] = v56;
      this[49] = v48;
      this[50] = v57;
      if (!v28)
      {
LABEL_55:
        this[49] = v48;
        v49 = *((_DWORD *)this[10] + v14);
        if (v49 == -1)
          return;
LABEL_56:
        v60 = *(_QWORD *)(*((_QWORD *)this[1] + 5) + 12 * v49);
        v93.i32[0] = v49;
        *(uint64_t *)((char *)v93.i64 + 4) = v60;
        v61 = v93.i64[0];
        v62 = HIDWORD(v60);
        v63 = (char *)this[50];
        if (v48 < v63)
        {
          *(_QWORD *)v48 = v93.i64[0];
          *((_DWORD *)v48 + 2) = HIDWORD(v60);
          this[49] = v48 + 12;
          return;
        }
        v64 = (char *)*v22;
        v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v48[-*v22] >> 2);
        v66 = v65 + 1;
        if (v65 + 1 > 0x1555555555555555)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v67 = 0xAAAAAAAAAAAAAAABLL * ((v63 - v64) >> 2);
        if (2 * v67 > v66)
          v66 = 2 * v67;
        if (v67 >= 0xAAAAAAAAAAAAAAALL)
          v68 = 0x1555555555555555;
        else
          v68 = v66;
        if (v68)
        {
          if (v68 > 0x1555555555555555)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v69 = (char *)operator new(12 * v68);
        }
        else
        {
          v69 = 0;
        }
        v70 = &v69[12 * v65];
        v71 = &v69[12 * v68];
        *(_QWORD *)v70 = v61;
        *((_DWORD *)v70 + 2) = v62;
        v72 = v70 + 12;
        if (v48 == v64)
        {
          this[48] = v70;
          this[49] = v72;
          this[50] = v71;
        }
        else
        {
          do
          {
            v73 = *(_QWORD *)(v48 - 12);
            v48 -= 12;
            v74 = *((_DWORD *)v48 + 2);
            *(_QWORD *)(v70 - 12) = v73;
            v70 -= 12;
            *((_DWORD *)v70 + 2) = v74;
          }
          while (v48 != v64);
          v48 = (char *)this[48];
          this[48] = v70;
          this[49] = v72;
          this[50] = v71;
          if (!v48)
            goto LABEL_74;
        }
        operator delete(v48);
LABEL_74:
        this[49] = v72;
        return;
      }
    }
    operator delete(v28);
    goto LABEL_55;
  }
  *(_QWORD *)v91 = __PAIR64__(v13, v12);
  *(_DWORD *)&v91[8] = HIDWORD(v13);
  v93.i32[0] = v8;
  *(uint64_t *)((char *)v93.i64 + 4) = v10;
  *(_QWORD *)v90 = v93.i64[0];
  *(_DWORD *)&v90[8] = HIDWORD(v10);
  if (*(_QWORD *)&v91[4] + *(_QWORD *)&v90[4] != 1)
  {
    v93 = vdupq_n_s64(1uLL);
    v92[0] = v12;
    v92[1] = v8;
    operations_research::sat::IntegerTrail::AppendRelaxedLinearReason(v6, *(_QWORD *)&v91[4] + *(_QWORD *)&v90[4] - 1, (uint64_t)&v93, 2, v92, 2, this + 48);
    return;
  }
  v18 = this + 48;
  v20 = (char *)this[49];
  v19 = (char *)this[50];
  if (v20 >= v19)
  {
    v35 = (char *)*v18;
    v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v20[-*v18] >> 2);
    v37 = v36 + 1;
    if (v36 + 1 > 0x1555555555555555)
      goto LABEL_105;
    v38 = 0xAAAAAAAAAAAAAAABLL * ((v19 - v35) >> 2);
    if (2 * v38 > v37)
      v37 = 2 * v38;
    if (v38 >= 0xAAAAAAAAAAAAAAALL)
      v39 = 0x1555555555555555;
    else
      v39 = v37;
    if (v39)
    {
      if (v39 > 0x1555555555555555)
        goto LABEL_109;
      v40 = (char *)operator new(12 * v39);
    }
    else
    {
      v40 = 0;
    }
    v75 = &v40[12 * v36];
    *(_QWORD *)v75 = *(_QWORD *)v91;
    *((_DWORD *)v75 + 2) = *(_DWORD *)&v91[8];
    v21 = v75 + 12;
    if (v20 != v35)
    {
      do
      {
        v76 = *(_QWORD *)(v20 - 12);
        v20 -= 12;
        v77 = *((_DWORD *)v20 + 2);
        *(_QWORD *)(v75 - 12) = v76;
        v75 -= 12;
        *((_DWORD *)v75 + 2) = v77;
      }
      while (v20 != v35);
      v20 = (char *)*v18;
    }
    this[48] = v75;
    this[49] = v21;
    this[50] = &v40[12 * v39];
    if (v20)
      operator delete(v20);
  }
  else
  {
    *(_QWORD *)v20 = *(_QWORD *)v91;
    *((_DWORD *)v20 + 2) = *(_DWORD *)&v91[8];
    v21 = v20 + 12;
  }
  this[49] = v21;
  v78 = (char *)this[50];
  if (v21 < v78)
  {
    *(_QWORD *)v21 = *(_QWORD *)v90;
    *((_DWORD *)v21 + 2) = *(_DWORD *)&v90[8];
    v79 = v21 + 12;
    goto LABEL_99;
  }
  v80 = (char *)*v18;
  v81 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v21[-*v18] >> 2);
  v82 = v81 + 1;
  if (v81 + 1 > 0x1555555555555555)
LABEL_105:
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v83 = 0xAAAAAAAAAAAAAAABLL * ((v78 - v80) >> 2);
  if (2 * v83 > v82)
    v82 = 2 * v83;
  if (v83 >= 0xAAAAAAAAAAAAAAALL)
    v84 = 0x1555555555555555;
  else
    v84 = v82;
  if (!v84)
  {
    v85 = 0;
    goto LABEL_93;
  }
  if (v84 > 0x1555555555555555)
LABEL_109:
    std::__throw_bad_array_new_length[abi:ne180100]();
  v85 = (char *)operator new(12 * v84);
LABEL_93:
  v86 = &v85[12 * v81];
  v87 = &v85[12 * v84];
  *(_QWORD *)v86 = *(_QWORD *)v90;
  *((_DWORD *)v86 + 2) = *(_DWORD *)&v90[8];
  v79 = v86 + 12;
  if (v21 == v80)
  {
    this[48] = v86;
    this[49] = v79;
    this[50] = v87;
  }
  else
  {
    do
    {
      v88 = *(_QWORD *)(v21 - 12);
      v21 -= 12;
      v89 = *((_DWORD *)v21 + 2);
      *(_QWORD *)(v86 - 12) = v88;
      v86 -= 12;
      *((_DWORD *)v86 + 2) = v89;
    }
    while (v21 != v80);
    v21 = (char *)this[48];
    this[48] = v86;
    this[49] = v79;
    this[50] = v87;
    if (!v21)
      goto LABEL_99;
  }
  operator delete(v21);
LABEL_99:
  this[49] = v79;
}

void sub_22DB83800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::SchedulingConstraintHelper::AddOtherReason(operations_research::sat::SchedulingConstraintHelper *this, int a2)
{
  operations_research::sat::SchedulingConstraintHelper *v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;

  v2 = (operations_research::sat::SchedulingConstraintHelper *)*((_QWORD *)this + 51);
  if (v2)
  {
    v5 = a2;
    v6 = *((_QWORD *)this + 53);
    v7 = (unint64_t)a2 >> 6;
    v8 = *(_QWORD *)(v6 + 8 * v7);
    if ((v8 & (1 << a2)) == 0)
    {
      *(_QWORD *)(v6 + 8 * v7) = v8 | (1 << a2);
      v9 = *((_QWORD *)this + 52);
      operations_research::sat::SchedulingConstraintHelper::AddOtherReason(v2, a2);
      v10 = 0x7FFFFFFFFFFFFFFFLL;
      if (v9 >= (uint64_t)0x8000000000000002)
        v10 = -v9;
      LODWORD(v23) = *(_DWORD *)(*((_QWORD *)v2 + 4) + 4 * v5) ^ 1;
      HIDWORD(v23) = v10;
      v11 = HIDWORD(v10);
      v13 = (_DWORD *)*((_QWORD *)v2 + 49);
      v12 = *((_QWORD *)v2 + 50);
      if ((unint64_t)v13 >= v12)
      {
        v15 = (_DWORD *)*((_QWORD *)v2 + 48);
        v16 = 0xAAAAAAAAAAAAAAABLL * (v13 - v15) + 1;
        if (v16 > 0x1555555555555555)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)v15) >> 2);
        if (2 * v17 > v16)
          v16 = 2 * v17;
        if (v17 >= 0xAAAAAAAAAAAAAAALL)
          v18 = 0x1555555555555555;
        else
          v18 = v16;
        if (v18)
        {
          if (v18 > 0x1555555555555555)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v19 = (char *)operator new(12 * v18);
        }
        else
        {
          v19 = 0;
        }
        v20 = &v19[4 * (v13 - v15)];
        *(_QWORD *)v20 = v23;
        *((_DWORD *)v20 + 2) = v11;
        v14 = v20 + 12;
        if (v13 != v15)
        {
          do
          {
            v21 = *(_QWORD *)(v13 - 3);
            v13 -= 3;
            v22 = v13[2];
            *(_QWORD *)(v20 - 12) = v21;
            v20 -= 12;
            *((_DWORD *)v20 + 2) = v22;
          }
          while (v13 != v15);
          v13 = (_DWORD *)*((_QWORD *)v2 + 48);
        }
        *((_QWORD *)v2 + 48) = v20;
        *((_QWORD *)v2 + 49) = v14;
        *((_QWORD *)v2 + 50) = &v19[12 * v18];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *(_QWORD *)v13 = v23;
        v13[2] = v11;
        v14 = v13 + 3;
      }
      *((_QWORD *)v2 + 49) = v14;
      operations_research::sat::SchedulingConstraintHelper::AddEndMinReason(*((_QWORD **)this + 51), a2, *((_QWORD *)this + 52) + 1);
    }
  }
}

uint64_t operations_research::sat::SchedulingConstraintHelper::PushIntegerLiteral(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v4;
  _BYTE v5[16];

  if (*(_QWORD *)(a1 + 408))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v5, (google::glog_internal_namespace_ *)"./ortools/sat/intervals.cc", 267);
    v4 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: other_helper_ == nullptr ", 39);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v5);
  }
  return operations_research::sat::IntegerTrail::Enqueue(*(_QWORD *)(a1 + 8), a2, a3, *(char **)(a1 + 360), (uint64_t)(*(_QWORD *)(a1 + 368) - *(_QWORD *)(a1 + 360)) >> 2, *(uint64_t **)(a1 + 384), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 392) - *(_QWORD *)(a1 + 384)) >> 2));
}

void sub_22DB83A68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

uint64_t operations_research::sat::SchedulingConstraintHelper::PushIntegerLiteralIfTaskPresent(unint64_t *a1, int a2, uint64_t a3, int a4)
{
  unint64_t v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  char **v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  int v27;
  int64_t v28;
  uint64_t v29;

  v28 = __PAIR64__(a4, HIDWORD(a3));
  v8 = *(int *)(a1[16] + 4 * a2);
  if ((_DWORD)v8 != -1
    && ((*(_QWORD *)(*(_QWORD *)(*a1 + 24) + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v8 & 0x3F ^ 1)) & 1) != 0)
  {
    return 1;
  }
  operations_research::sat::SchedulingConstraintHelper::AddOtherReason((operations_research::sat::SchedulingConstraintHelper *)a1, a2);
  v10 = *(int *)(a1[16] + 4 * a2);
  if ((_DWORD)v10 == -1)
    goto LABEL_11;
  v11 = a1[1];
  v12 = *(_DWORD *)(*(_QWORD *)(v11 + 408) + 4 * (int)a3);
  v13 = v12 == -1 ? -1 : v12 ^ 1;
  if (v13 == (_DWORD)v10)
    goto LABEL_11;
  if (((*(_QWORD *)(*(_QWORD *)(*a1 + 24) + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    operations_research::sat::SchedulingConstraintHelper::AddPresenceReason((operations_research::sat::SchedulingConstraintHelper *)a1, a2);
LABEL_11:
    v14 = (char **)a1[51];
    if (v14)
    {
      std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const*>,std::__wrap_iter<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const*>>(a1 + 45, (void *)a1[46], v14[45], v14[46], (v14[46] - v14[45]) >> 2);
      std::vector<operations_research::sat::IntegerLiteral>::__insert_with_size[abi:ne180100]<std::__wrap_iter<operations_research::sat::IntegerLiteral*>,std::__wrap_iter<operations_research::sat::IntegerLiteral*>>((uint64_t)(a1 + 48), a1[49], v14[48], v14[49], 0xAAAAAAAAAAAAAAABLL * ((v14[49] - v14[48]) >> 2));
    }
    return operations_research::sat::IntegerTrail::Enqueue(a1[1], a3, a4, (char *)a1[45], (uint64_t)(a1[46] - a1[45]) >> 2, (uint64_t *)a1[48], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[49] - a1[48]) >> 2));
  }
  if (v28 <= -*(_QWORD *)(*(_QWORD *)(v11 + 40) + 12 * (int)(a3 ^ 1)))
    return 1;
  v15 = 0x7FFFFFFFFFFFFFFFLL;
  if (v28 >= (uint64_t)0x8000000000000003)
    v15 = 1 - v28;
  LODWORD(v29) = a3 ^ 1;
  HIDWORD(v29) = v15;
  v16 = HIDWORD(v15);
  v18 = (_DWORD *)a1[49];
  v17 = a1[50];
  if ((unint64_t)v18 >= v17)
  {
    v20 = (_DWORD *)a1[48];
    v21 = 0xAAAAAAAAAAAAAAABLL * (v18 - v20) + 1;
    if (v21 > 0x1555555555555555)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - (_QWORD)v20) >> 2);
    if (2 * v22 > v21)
      v21 = 2 * v22;
    v23 = v22 >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v21;
    if (v23)
    {
      if (v23 > 0x1555555555555555)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v24 = (char *)operator new(12 * v23);
    }
    else
    {
      v24 = 0;
    }
    v25 = &v24[4 * (v18 - v20)];
    *(_QWORD *)v25 = v29;
    *((_DWORD *)v25 + 2) = v16;
    v19 = v25 + 12;
    if (v18 != v20)
    {
      do
      {
        v26 = *(_QWORD *)(v18 - 3);
        v18 -= 3;
        v27 = v18[2];
        *(_QWORD *)(v25 - 12) = v26;
        v25 -= 12;
        *((_DWORD *)v25 + 2) = v27;
      }
      while (v18 != v20);
      v18 = (_DWORD *)a1[48];
    }
    a1[48] = (unint64_t)v25;
    a1[49] = (unint64_t)v19;
    a1[50] = (unint64_t)&v24[12 * v23];
    if (v18)
      operator delete(v18);
  }
  else
  {
    *(_QWORD *)v18 = v29;
    v18[2] = v16;
    v19 = v18 + 3;
  }
  a1[49] = (unint64_t)v19;
  result = operations_research::sat::SchedulingConstraintHelper::PushTaskAbsence((operations_research::sat::SchedulingConstraintHelper *)a1, a2);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t operations_research::sat::SchedulingConstraintHelper::PushTaskAbsence(operations_research::sat::SchedulingConstraintHelper *this, int a2)
{
  int v4;
  int v5;
  unint64_t v6;
  int *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  int *v15;
  char *v16;
  int64_t v17;
  char **v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  _OWORD *v24;
  int *v25;
  uint64_t v26;
  __int128 v27;
  int v28;

  operations_research::sat::SchedulingConstraintHelper::AddOtherReason(this, a2);
  v4 = *(_DWORD *)(*((_QWORD *)this + 16) + 4 * a2);
  if (v4 == -1
    || ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 24) + (((unint64_t)v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = v4 ^ 1;
    v7 = (int *)*((_QWORD *)this + 46);
    v6 = *((_QWORD *)this + 47);
    if ((unint64_t)v7 < v6)
    {
      *v7 = v5;
      v8 = (uint64_t)(v7 + 1);
LABEL_27:
      *((_QWORD *)this + 46) = v8;
      return operations_research::sat::SchedulingConstraintHelper::ReportConflict(this);
    }
    v9 = (int *)*((_QWORD *)this + 45);
    v10 = v7 - v9;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = v6 - (_QWORD)v9;
    if (v12 >> 1 > v11)
      v11 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v14 = operator new(4 * v13);
      v15 = (int *)&v14[4 * v10];
      v16 = &v14[4 * v13];
      *v15 = v5;
      v8 = (uint64_t)(v15 + 1);
      v17 = (char *)v7 - (char *)v9;
      if (v7 == v9)
        goto LABEL_25;
    }
    else
    {
      v14 = 0;
      v15 = (int *)(4 * v10);
      v16 = 0;
      *(_DWORD *)(4 * v10) = v5;
      v8 = 4 * v10 + 4;
      v17 = (char *)v7 - (char *)v9;
      if (v7 == v9)
      {
LABEL_25:
        *((_QWORD *)this + 45) = v15;
        *((_QWORD *)this + 46) = v8;
        *((_QWORD *)this + 47) = v16;
        if (v9)
          operator delete(v9);
        goto LABEL_27;
      }
    }
    v20 = v17 - 4;
    if (v20 < 0x2C)
      goto LABEL_32;
    if ((unint64_t)((char *)v9 - v14) < 0x20)
      goto LABEL_32;
    v21 = (v20 >> 2) + 1;
    v22 = 4 * (v21 & 0x7FFFFFFFFFFFFFF8);
    v23 = &v7[v22 / 0xFFFFFFFFFFFFFFFCLL];
    v15 = (int *)((char *)v15 - v22);
    v24 = &v14[4 * v10 - 16];
    v25 = v7 - 4;
    v26 = v21 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      *v24 = v27;
      v24 -= 2;
      v25 -= 8;
      v26 -= 8;
    }
    while (v26);
    v7 = v23;
    if (v21 != (v21 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_32:
      do
      {
        v28 = *--v7;
        *--v15 = v28;
      }
      while (v7 != v9);
    }
    goto LABEL_25;
  }
  v18 = (char **)*((_QWORD *)this + 51);
  if (v18)
  {
    std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const*>,std::__wrap_iter<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const*>>((unint64_t *)this + 45, *((void **)this + 46), v18[45], v18[46], (v18[46] - v18[45]) >> 2);
    std::vector<operations_research::sat::IntegerLiteral>::__insert_with_size[abi:ne180100]<std::__wrap_iter<operations_research::sat::IntegerLiteral*>,std::__wrap_iter<operations_research::sat::IntegerLiteral*>>((uint64_t)this + 384, *((_QWORD *)this + 49), v18[48], v18[49], 0xAAAAAAAAAAAAAAABLL * ((v18[49] - v18[48]) >> 2));
    v4 = *(_DWORD *)(*((_QWORD *)this + 16) + 4 * a2);
  }
  operations_research::sat::IntegerTrail::EnqueueLiteral(*((_QWORD *)this + 1), v4 ^ 1, *((char **)this + 45), (uint64_t)(*((_QWORD *)this + 46) - *((_QWORD *)this + 45)) >> 2, *((char **)this + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 49) - *((_QWORD *)this + 48)) >> 2));
  return 1;
}

uint64_t operations_research::sat::SchedulingConstraintHelper::IncreaseStartMin(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t result;
  unint64_t v6;
  uint64_t v7;

  LODWORD(v7) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * a2);
  HIDWORD(v7) = a3;
  result = operations_research::sat::SchedulingConstraintHelper::PushIntegerLiteralIfTaskPresent((unint64_t *)a1, a2, v7, SHIDWORD(a3));
  if ((_DWORD)result)
  {
    v6 = *(int *)(*(_QWORD *)(a1 + 128) + 4 * a2);
    if ((_DWORD)v6 == -1
      || ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v6 & 0x3F ^ 1)) & 1) == 0)
    {
      return operations_research::sat::PrecedencesPropagator::PropagateOutgoingArcs(*(uint64_t **)(a1 + 16), v7);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t operations_research::sat::SchedulingConstraintHelper::DecreaseEndMax(uint64_t a1, int a2, int64_t a3)
{
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;

  v5 = 0x7FFFFFFFFFFFFFFFLL;
  if (a3 >= (uint64_t)0x8000000000000002)
    v5 = -a3;
  LODWORD(v8) = *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4 * a2) ^ 1;
  HIDWORD(v8) = v5;
  result = operations_research::sat::SchedulingConstraintHelper::PushIntegerLiteralIfTaskPresent((unint64_t *)a1, a2, v8, SHIDWORD(v5));
  if ((_DWORD)result)
  {
    v7 = *(int *)(*(_QWORD *)(a1 + 128) + 4 * a2);
    if ((_DWORD)v7 == -1
      || ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v7 & 0x3F ^ 1)) & 1) == 0)
    {
      return operations_research::sat::PrecedencesPropagator::PropagateOutgoingArcs(*(uint64_t **)(a1 + 16), v8);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t operations_research::sat::SchedulingConstraintHelper::ReportConflict(operations_research::sat::SchedulingConstraintHelper *this)
{
  char **v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  v2 = (char **)*((_QWORD *)this + 51);
  if (v2)
  {
    std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const*>,std::__wrap_iter<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const*>>((unint64_t *)this + 45, *((void **)this + 46), v2[45], v2[46], (v2[46] - v2[45]) >> 2);
    std::vector<operations_research::sat::IntegerLiteral>::__insert_with_size[abi:ne180100]<std::__wrap_iter<operations_research::sat::IntegerLiteral*>,std::__wrap_iter<operations_research::sat::IntegerLiteral*>>((uint64_t)this + 384, *((_QWORD *)this + 49), v2[48], v2[49], 0xAAAAAAAAAAAAAAABLL * ((v2[49] - v2[48]) >> 2));
  }
  v3 = *((_QWORD *)this + 1);
  v4 = (char *)*((_QWORD *)this + 45);
  v5 = (char *)*((_QWORD *)this + 46);
  v6 = (uint64_t *)*((_QWORD *)this + 48);
  v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 49) - (_QWORD)v6) >> 2);
  v8 = *(_QWORD *)(v3 + 936);
  *(_QWORD *)(v8 + 144) = 0;
  v9 = (void **)(v8 + 96);
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((_QWORD *)(v8 + 96), v4, v5, (v5 - v4) >> 2);
  operations_research::sat::IntegerTrail::MergeReasonInto(v3, v6, v7, v9);
  return 0;
}

void operations_research::sat::SchedulingConstraintHelper::WatchAllTasks(operations_research::sat::SchedulingConstraintHelper *this, unsigned int a2, operations_research::sat::GenericLiteralWatcher *a3, int a4, int a5)
{
  unint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v5 = *((_QWORD *)this + 5) - *((_QWORD *)this + 4);
  if ((int)(v5 >> 2) >= 1)
  {
    v11 = 0;
    v12 = v5 & 0x3FFFFFFFCLL;
    do
    {
      operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a3, *(unsigned int *)(*((_QWORD *)this + 4) + v11), a2, 0xFFFFFFFFLL);
      operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a3, *(unsigned int *)(*((_QWORD *)this + 7) + v11), a2, 0xFFFFFFFFLL);
      if (a4)
      {
        v13 = *(unsigned int *)(*((_QWORD *)this + 4) + v11);
        if ((_DWORD)v13 != -1)
          operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a3, v13 ^ 1, a2, 0xFFFFFFFFLL);
      }
      if (a5)
      {
        v14 = *(unsigned int *)(*((_QWORD *)this + 7) + v11);
        if ((_DWORD)v14 != -1)
          operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a3, v14 ^ 1, a2, 0xFFFFFFFFLL);
      }
      v15 = *(unsigned int *)(*((_QWORD *)this + 10) + v11);
      if ((_DWORD)v15 != -1)
        operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a3, v15, a2, 0xFFFFFFFFLL);
      v16 = *(int *)(*((_QWORD *)this + 16) + v11);
      if ((_DWORD)v16 != -1)
      {
        v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 24) + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8));
        if (((v17 >> v16) & 1) == 0 && ((v17 >> (*(_DWORD *)(*((_QWORD *)this + 16) + v11) & 0x3F ^ 1u)) & 1) == 0)
          operations_research::sat::GenericLiteralWatcher::WatchLiteral((uint64_t)a3, *(unsigned int *)(*((_QWORD *)this + 16) + v11), a2, 0xFFFFFFFFLL);
      }
      v11 += 4;
    }
    while (v12 != v11);
  }
}

char *operations_research::sat::SchedulingConstraintHelper::ImportOtherReasons(operations_research::sat::SchedulingConstraintHelper *this, char **a2)
{
  std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const*>,std::__wrap_iter<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const*>>((unint64_t *)this + 45, *((void **)this + 46), a2[45], a2[46], (a2[46] - a2[45]) >> 2);
  return std::vector<operations_research::sat::IntegerLiteral>::__insert_with_size[abi:ne180100]<std::__wrap_iter<operations_research::sat::IntegerLiteral*>,std::__wrap_iter<operations_research::sat::IntegerLiteral*>>((uint64_t)this + 384, *((_QWORD *)this + 49), a2[48], a2[49], 0xAAAAAAAAAAAAAAABLL * ((a2[49] - a2[48]) >> 2));
}

void operations_research::IncrementalSort<std::__wrap_iter<operations_research::sat::TaskTime *>,std::greater<operations_research::sat::TaskTime>>(int a1, char *a2, char *a3, int a4)
{
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int v14;
  uint64_t v15;
  int v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  const std::nothrow_t *v23;
  unint64_t v24;
  void *v25;
  BOOL v26;
  void *v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE v30[12];

  if (a3 - a2 >= 24)
  {
    v5 = a3 - 12;
    if (a3 - 12 == a2)
    {
      v5 = a2;
    }
    else
    {
      v6 = a3 - 12;
      v7 = a3 - 12;
      do
      {
        v8 = *(_QWORD *)(v7 - 12);
        v7 -= 12;
        v9 = *((_DWORD *)v7 + 2);
        *(_QWORD *)v30 = v8;
        *(_DWORD *)&v30[8] = v9;
        if (*((_QWORD *)v7 + 2) > *(uint64_t *)&v30[4])
        {
          v10 = *((_DWORD *)v6 + 2);
          v11 = *(_QWORD *)v6;
          *(_QWORD *)v6 = *(_QWORD *)v7;
          *((_DWORD *)v6 + 2) = *((_DWORD *)v7 + 2);
          *(_QWORD *)v7 = v11;
          *((_DWORD *)v7 + 2) = v10;
          v5 = v6;
        }
        v6 = v7;
      }
      while (v7 != a2);
    }
    v12 = v5 + 12;
    if (v5 + 12 != a3 && a1 >= 1)
    {
      v13 = v5;
      do
      {
        v14 = *((_DWORD *)v13 + 3);
        v15 = *((_QWORD *)v13 + 2);
        v13 = v12;
        --a1;
        v16 = *((_DWORD *)v12 - 1);
        *(_QWORD *)v30 = *(_QWORD *)(v12 - 12);
        *(_DWORD *)&v30[8] = v16;
        if (v15 <= *(uint64_t *)&v30[4])
        {
          *(_DWORD *)v12 = v14;
          *(_QWORD *)(v12 + 4) = v15;
          v12 += 12;
          if (v13 + 12 == a3)
            break;
        }
        else
        {
          v17 = v12;
          do
          {
            v18 = *(_QWORD *)(v12 - 12);
            v12 -= 12;
            *(_QWORD *)v17 = v18;
            *((_DWORD *)v17 + 2) = *((_DWORD *)v17 - 1);
            --a1;
            v19 = *((_QWORD *)v17 - 3);
            v20 = *((_DWORD *)v17 - 4);
            *(_QWORD *)v30 = v19;
            *(_DWORD *)&v30[8] = v20;
            v17 = v12;
          }
          while (v15 > *(uint64_t *)&v30[4]);
          *(_DWORD *)v12 = v14;
          *(_QWORD *)(v12 + 4) = v15;
          v12 = v13 + 12;
          if (v13 + 12 == a3)
            break;
        }
      }
      while (a1 > 0);
    }
    if (v12 != a3)
    {
      v21 = (a3 - v5) >> 2;
      v22 = 0xAAAAAAAAAAAAAAABLL * v21;
      if (a4)
      {
        if (a3 - v5 < 1537)
        {
LABEL_24:
          v27 = 0;
          v24 = 0;
        }
        else
        {
          v23 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
          v24 = 0xAAAAAAAAAAAAAAABLL * v21;
          while (1)
          {
            v25 = operator new(12 * v24, v23);
            if (v25)
              break;
            v26 = v24 > 1;
            v24 >>= 1;
            if (!v26)
              goto LABEL_24;
          }
          v27 = v25;
        }
        std::__stable_sort<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>(v5, a3, (uint64_t)v30, v22, (uint64_t)v27, v24);
        if (v27)
          operator delete(v27);
      }
      else
      {
        v28 = 126 - 2 * __clz(v22);
        if (v5 == a3)
          v29 = 0;
        else
          v29 = v28;
        std::__introsort<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*,false>((uint64_t)v5, (uint64_t *)a3, (uint64_t)v30, v29, 1);
      }
    }
  }
}

void sub_22DB845CC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

char *std::__stable_sort<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>(char *result, char *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v7;
  int v8;
  uint64_t v9;
  int v10;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  if (a4 >= 2)
  {
    v7 = result;
    if (a4 == 2)
    {
      *(_QWORD *)&v39 = *(_QWORD *)result;
      DWORD2(v39) = *((_DWORD *)result + 2);
      if (*((_QWORD *)a2 - 1) > *(uint64_t *)((char *)&v39 + 4))
      {
        v8 = *((_DWORD *)result + 2);
        v9 = *(_QWORD *)result;
        v10 = *((_DWORD *)a2 - 1);
        *(_QWORD *)result = *(_QWORD *)(a2 - 12);
        *((_DWORD *)result + 2) = v10;
        *(_QWORD *)(a2 - 12) = v9;
        *((_DWORD *)a2 - 1) = v8;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v23 = a5;
      v25 = a4 >> 1;
      v26 = (uint64_t)&result[12 * (a4 >> 1)];
      v27 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>((uint64_t)result, v26, a3, v27, a5);
        v28 = v23 + 12 * v25;
        result = (char *)std::__stable_sort_move<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>((uint64_t)&v7[12 * (a4 >> 1)], (uint64_t)a2, a3, a4 - (a4 >> 1), v28);
        v29 = v23 + 12 * a4;
        v30 = v28;
        while (v30 != v29)
        {
          *(_QWORD *)&v41 = *(_QWORD *)v23;
          DWORD2(v41) = *(_DWORD *)(v23 + 8);
          if (*(_QWORD *)(v30 + 4) <= *(uint64_t *)((char *)&v41 + 4))
          {
            v31 = *(_QWORD *)v23;
            *((_DWORD *)v7 + 2) = *(_DWORD *)(v23 + 8);
            *(_QWORD *)v7 = v31;
            v7 += 12;
            v23 += 12;
            if (v23 == v28)
              goto LABEL_24;
          }
          else
          {
            v32 = *(_QWORD *)v30;
            *((_DWORD *)v7 + 2) = *(_DWORD *)(v30 + 8);
            *(_QWORD *)v7 = v32;
            v7 += 12;
            v30 += 12;
            if (v23 == v28)
            {
LABEL_24:
              if (v30 != v29)
              {
                v33 = 0;
                do
                {
                  v34 = &v7[v33];
                  v35 = *(_QWORD *)(v30 + v33);
                  *((_DWORD *)v34 + 2) = *(_DWORD *)(v30 + v33 + 8);
                  *(_QWORD *)v34 = v35;
                  v33 += 12;
                }
                while (v30 + v33 != v29);
              }
              return result;
            }
          }
        }
        if (v23 != v28)
        {
          v36 = 0;
          do
          {
            v37 = &v7[v36];
            v38 = *(_QWORD *)(v23 + v36);
            *((_DWORD *)v37 + 2) = *(_DWORD *)(v23 + v36 + 8);
            *(_QWORD *)v37 = v38;
            v36 += 12;
          }
          while (v23 + v36 != v28);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>(result, v26, a3, v27, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>(&v7[12 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v23, a6);
        return std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>(v7, &v7[12 * (a4 >> 1)], a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)v23, a6);
      }
    }
    else if (result != a2)
    {
      v12 = result + 12;
      if (result + 12 != a2)
      {
        v13 = 0;
        v14 = result;
        do
        {
          v16 = *(_QWORD *)v14;
          v17 = *((_DWORD *)v14 + 2);
          v18 = *((_QWORD *)v14 + 2);
          v14 = v12;
          if (v18 > __SPAIR64__(v17, HIDWORD(v16)))
          {
            v19 = *(_DWORD *)v12;
            v20 = v13;
            do
            {
              v21 = &result[v20];
              *(_QWORD *)(v21 + 12) = *(_QWORD *)&result[v20];
              *((_DWORD *)v21 + 5) = *(_DWORD *)&result[v20 + 8];
              if (!v20)
              {
                v15 = (uint64_t)result;
                goto LABEL_10;
              }
              *(_QWORD *)&v40 = *(_QWORD *)(v21 - 12);
              DWORD2(v40) = *((_DWORD *)v21 - 1);
              v20 -= 12;
            }
            while (v18 > *(uint64_t *)((char *)&v40 + 4));
            v15 = (uint64_t)&result[v20 + 12];
LABEL_10:
            *(_DWORD *)v15 = v19;
            *(_QWORD *)(v15 + 4) = v18;
          }
          v12 = v14 + 12;
          v13 += 12;
        }
        while (v14 + 12 != a2);
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  if (a4)
  {
    v5 = a5;
    v8 = result;
    if (a4 == 2)
    {
      v10 = (uint64_t *)(a2 - 12);
      *(_QWORD *)&v38 = *(_QWORD *)result;
      DWORD2(v38) = *(_DWORD *)(result + 8);
      v11 = (_QWORD *)(a5 + 12);
      if (*(_QWORD *)(a2 - 8) <= *(uint64_t *)((char *)&v38 + 4))
      {
        v23 = *(_QWORD *)result;
        *(_DWORD *)(a5 + 8) = *(_DWORD *)(result + 8);
        *(_QWORD *)a5 = v23;
        v24 = *v10;
        *(_DWORD *)(a5 + 20) = *(_DWORD *)(a2 - 4);
        *v11 = v24;
      }
      else
      {
        v12 = *v10;
        *(_DWORD *)(a5 + 8) = *(_DWORD *)(a2 - 4);
        *(_QWORD *)a5 = v12;
        v13 = *(_QWORD *)result;
        *(_DWORD *)(a5 + 20) = *(_DWORD *)(result + 8);
        *v11 = v13;
      }
    }
    else if (a4 == 1)
    {
      v9 = *(_QWORD *)result;
      *(_DWORD *)(a5 + 8) = *(_DWORD *)(result + 8);
      *(_QWORD *)a5 = v9;
    }
    else if ((uint64_t)a4 > 8)
    {
      v26 = a4 >> 1;
      v27 = 12 * (a4 >> 1);
      v28 = result + v27;
      std::__stable_sort<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>(result, result + v27, a3, a4 >> 1, a5, a4 >> 1);
      result = std::__stable_sort<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>(v8 + v27, a2, a3, a4 - v26, v5 + v27, a4 - v26);
      v29 = v8 + v27;
      while (v29 != a2)
      {
        *(_QWORD *)&v41 = *(_QWORD *)v8;
        DWORD2(v41) = *(_DWORD *)(v8 + 8);
        if (*(_QWORD *)(v29 + 4) <= *(uint64_t *)((char *)&v41 + 4))
        {
          v30 = *(_QWORD *)v8;
          *(_DWORD *)(v5 + 8) = *(_DWORD *)(v8 + 8);
          *(_QWORD *)v5 = v30;
          v5 += 12;
          v8 += 12;
          if (v8 == v28)
            goto LABEL_24;
        }
        else
        {
          v31 = *(_QWORD *)v29;
          *(_DWORD *)(v5 + 8) = *(_DWORD *)(v29 + 8);
          *(_QWORD *)v5 = v31;
          v5 += 12;
          v29 += 12;
          if (v8 == v28)
          {
LABEL_24:
            if (v29 != a2)
            {
              v32 = 0;
              do
              {
                v33 = v5 + v32;
                v34 = *(_QWORD *)(v29 + v32);
                *(_DWORD *)(v33 + 8) = *(_DWORD *)(v29 + v32 + 8);
                *(_QWORD *)v33 = v34;
                v32 += 12;
              }
              while (v29 + v32 != a2);
            }
            return result;
          }
        }
      }
      if (v8 != v28)
      {
        v35 = 0;
        do
        {
          v36 = v5 + v35;
          v37 = *(_QWORD *)(v8 + v35);
          *(_DWORD *)(v36 + 8) = *(_DWORD *)(v8 + v35 + 8);
          *(_QWORD *)v36 = v37;
          v35 += 12;
        }
        while (v8 + v35 != v28);
      }
    }
    else if (result != a2)
    {
      v14 = *(_QWORD *)result;
      *(_DWORD *)(a5 + 8) = *(_DWORD *)(result + 8);
      *(_QWORD *)a5 = v14;
      v15 = result + 12;
      if (result + 12 != a2)
      {
        v16 = 0;
        v17 = a5;
        do
        {
          v19 = v8;
          v20 = v17;
          v8 = v15;
          v17 += 12;
          *(_QWORD *)&v39 = *(_QWORD *)v20;
          DWORD2(v39) = *(_DWORD *)(v20 + 8);
          v21 = v17;
          if (*(_QWORD *)(v19 + 16) > *(uint64_t *)((char *)&v39 + 4))
          {
            *(_QWORD *)v17 = *(_QWORD *)v20;
            *(_DWORD *)(v17 + 8) = *(_DWORD *)(v20 + 8);
            v21 = a5;
            if (v20 != a5)
            {
              v22 = v16;
              while (1)
              {
                v21 = a5 + v22;
                *(_QWORD *)&v40 = *(_QWORD *)(a5 + v22 - 12);
                DWORD2(v40) = *(_DWORD *)(a5 + v22 - 4);
                if (*(_QWORD *)(v19 + 16) <= *(uint64_t *)((char *)&v40 + 4))
                  break;
                *(_QWORD *)v21 = *(_QWORD *)(a5 + v22 - 12);
                *(_DWORD *)(v21 + 8) = *(_DWORD *)(a5 + v22 - 4);
                v22 -= 12;
                if (!v22)
                {
                  v21 = a5;
                  break;
                }
              }
            }
          }
          v18 = *(_QWORD *)v8;
          *(_DWORD *)(v21 + 8) = *(_DWORD *)(v8 + 8);
          *(_QWORD *)v21 = v18;
          v15 = v8 + 12;
          v16 += 12;
        }
        while (v8 + 12 != a2);
      }
    }
  }
  return result;
}

char *std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v10;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  BOOL v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  int v70;

  if (a6)
  {
    v10 = a6;
    v12 = result;
    while (v10 > a8 && a5 > a8)
    {
      if (!a5)
        return result;
      v13 = 0;
      v14 = -a5;
      while (1)
      {
        v15 = &v12[v13];
        *(_QWORD *)&v65 = *(_QWORD *)&v12[v13];
        DWORD2(v65) = *(_DWORD *)&v12[v13 + 8];
        if (*(_QWORD *)(a2 + 4) > *(uint64_t *)((char *)&v65 + 4))
          break;
        v13 += 12;
        if (__CFADD__(v14++, 1))
          return result;
      }
      v17 = -v14;
      v62 = a3;
      v63 = a7;
      v61 = a8;
      if (-v14 >= v10)
      {
        if (v14 == -1)
        {
          v55 = &v12[v13];
          v70 = *(_DWORD *)&v12[v13 + 8];
          v69 = *(_QWORD *)&v12[v13];
          v56 = *(_QWORD *)a2;
          *((_DWORD *)v55 + 2) = *((_DWORD *)a2 + 2);
          *(_QWORD *)v55 = v56;
          *(_QWORD *)a2 = v69;
          *((_DWORD *)a2 + 2) = v70;
          return result;
        }
        if (v14 > 0)
          v17 = 1 - v14;
        v26 = v17 >> 1;
        v20 = &v12[12 * (v17 >> 1) + v13];
        v25 = a2;
        if (a2 != a3)
        {
          v27 = 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 2);
          v25 = a2;
          do
          {
            v28 = v27 >> 1;
            v29 = &v25[12 * (v27 >> 1)];
            v30 = *(_QWORD *)(v29 + 4);
            v31 = v29 + 12;
            v27 += ~(v27 >> 1);
            if (v30 > __SPAIR64__(*(_DWORD *)&v12[12 * v26 + 8 + v13], HIDWORD(*(_QWORD *)v20)))
              v25 = v31;
            else
              v27 = v28;
          }
          while (v27);
        }
        v19 = 0xAAAAAAAAAAAAAAABLL * ((v25 - a2) >> 2);
      }
      else
      {
        if (v10 >= 0)
          v18 = v10;
        else
          v18 = v10 + 1;
        v19 = v18 >> 1;
        v20 = a2;
        if (a2 - v12 != v13)
        {
          v21 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v12 - v13) >> 2);
          v20 = &v12[v13];
          do
          {
            v22 = v21 >> 1;
            v23 = &v20[12 * (v21 >> 1)];
            *(_QWORD *)&v66 = *(_QWORD *)v23;
            DWORD2(v66) = *((_DWORD *)v23 + 2);
            v24 = v23 + 12;
            v21 += ~(v21 >> 1);
            if (*(_QWORD *)&a2[12 * v19 + 4] > *(uint64_t *)((char *)&v66 + 4))
              v21 = v22;
            else
              v20 = v24;
          }
          while (v21);
        }
        v25 = &a2[12 * v19];
        v26 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v12 - v13) >> 2);
      }
      a5 = -(v26 + v14);
      v60 = v10 - v19;
      v32 = v26;
      v33 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<operations_research::sat::TaskTime *>,std::__wrap_iter<operations_research::sat::TaskTime *>>(v20, a2, v25);
      v34 = v32;
      v35 = v33;
      if (v34 + v19 >= v10 - (v34 + v19) - v14)
      {
        v37 = v25;
        v38 = v34;
        a8 = v61;
        result = (char *)std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>(v33, v37, v62, a4, a5, v60, v63, v61);
        a2 = v20;
        a7 = v63;
        a5 = v38;
        a3 = v35;
        v10 = v19;
        v12 = v15;
        if (!v19)
          return result;
      }
      else
      {
        v36 = v20;
        a7 = v63;
        result = (char *)std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>(&v12[v13], v36, v33, a4, v34, v19, v63, v61);
        a2 = v25;
        a8 = v61;
        a3 = v62;
        v10 -= v19;
        v12 = v35;
        if (!v60)
          return result;
      }
    }
    if (a5 <= v10)
    {
      if (v12 != a2)
      {
        v48 = 0;
        do
        {
          v49 = &a7[v48];
          v50 = *(_QWORD *)&v12[v48];
          *((_DWORD *)v49 + 2) = *(_DWORD *)&v12[v48 + 8];
          *(_QWORD *)v49 = v50;
          v48 += 12;
        }
        while (&v12[v48] != a2);
        if (v48)
        {
          v51 = &a7[v48];
          v52 = a7;
          while (a2 != a3)
          {
            *(_QWORD *)&v68 = *(_QWORD *)v52;
            DWORD2(v68) = *((_DWORD *)v52 + 2);
            if (*(_QWORD *)(a2 + 4) <= *(uint64_t *)((char *)&v68 + 4))
            {
              v53 = *(_QWORD *)v52;
              *((_DWORD *)v12 + 2) = *((_DWORD *)v52 + 2);
              *(_QWORD *)v12 = v53;
              v12 += 12;
              v52 += 12;
              if (v51 == v52)
                return result;
            }
            else
            {
              v54 = *(_QWORD *)a2;
              *((_DWORD *)v12 + 2) = *((_DWORD *)a2 + 2);
              *(_QWORD *)v12 = v54;
              v12 += 12;
              a2 += 12;
              if (v51 == v52)
                return result;
            }
          }
          return (char *)memmove(v12, v52, a7 - v52 + v48);
        }
      }
    }
    else if (a3 != a2)
    {
      v39 = 0;
      do
      {
        v40 = &a7[v39];
        v41 = *(_QWORD *)&a2[v39];
        *((_DWORD *)v40 + 2) = *(_DWORD *)&a2[v39 + 8];
        *(_QWORD *)v40 = v41;
        v39 += 12;
      }
      while (&a2[v39] != a3);
      if (v39)
      {
        v42 = &a7[v39];
        v43 = a3 - 12;
        while (a2 != v12)
        {
          *(_QWORD *)&v67 = *(_QWORD *)(a2 - 12);
          DWORD2(v67) = *((_DWORD *)a2 - 1);
          v44 = *((_QWORD *)v42 - 1);
          v45 = v44 <= *(_QWORD *)((char *)&v67 + 4);
          if (v44 <= *(uint64_t *)((char *)&v67 + 4))
            v46 = v42 - 12;
          else
            v46 = a2 - 12;
          if (v45)
            v42 -= 12;
          else
            a2 -= 12;
          v47 = *(_QWORD *)v46;
          *((_DWORD *)v43 + 2) = *((_DWORD *)v46 + 2);
          *(_QWORD *)v43 = v47;
          v43 -= 12;
          if (v42 == a7)
            return result;
        }
        v57 = 0;
        do
        {
          v58 = &v43[v57];
          v59 = *(_QWORD *)&v42[v57 - 12];
          *((_DWORD *)v58 + 2) = *(_DWORD *)&v42[v57 - 4];
          *(_QWORD *)v58 = v59;
          v57 -= 12;
        }
        while (&v42[v57] != a7);
      }
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t *v43;
  BOOL v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  int v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  int v75;
  int v76;
  int v77;
  int v78;

  v9 = result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (uint64_t)a2 - v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v10) >> 2);
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        *(_QWORD *)&v67 = *(_QWORD *)v10;
        DWORD2(v67) = *(_DWORD *)(v10 + 8);
        if (*(a2 - 1) > *(uint64_t *)((char *)&v67 + 4))
        {
          v77 = *(_DWORD *)(v10 + 8);
          v68 = *(_QWORD *)v10;
          v35 = *(uint64_t *)((char *)a2 - 12);
          *(_DWORD *)(v10 + 8) = *((_DWORD *)a2 - 1);
          *(_QWORD *)v10 = v35;
          *((_DWORD *)a2 - 1) = v77;
          *(uint64_t *)((char *)a2 - 12) = v68;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>((uint64_t *)v10, (uint64_t *)(v10 + 12), (uint64_t *)((char *)a2 - 12));
      case 4uLL:
        v36 = (uint64_t *)(v10 + 12);
        v37 = (uint64_t *)(v10 + 24);
        result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>((uint64_t *)v10, (uint64_t *)(v10 + 12), (uint64_t *)(v10 + 24));
        *(_QWORD *)&v69 = *(_QWORD *)(v10 + 24);
        DWORD2(v69) = *(_DWORD *)(v10 + 32);
        if (*(a2 - 1) > *(uint64_t *)((char *)&v69 + 4))
        {
          v38 = *v37;
          v39 = *(_DWORD *)(v10 + 32);
          v40 = *((_DWORD *)a2 - 1);
          *v37 = *(uint64_t *)((char *)a2 - 12);
          *(_DWORD *)(v10 + 32) = v40;
          *((_DWORD *)a2 - 1) = v39;
          *(uint64_t *)((char *)a2 - 12) = v38;
          *(_QWORD *)&v70 = *(_QWORD *)(v10 + 12);
          DWORD2(v70) = *(_DWORD *)(v10 + 20);
          if (*(_QWORD *)(v10 + 28) > *(uint64_t *)((char *)&v70 + 4))
          {
            v41 = *(_DWORD *)(v10 + 20);
            v42 = *v36;
            *v36 = *v37;
            *(_DWORD *)(v10 + 20) = *(_DWORD *)(v10 + 32);
            *v37 = v42;
            *(_DWORD *)(v10 + 32) = v41;
            *(_QWORD *)&v71 = *(_QWORD *)v10;
            DWORD2(v71) = *(_DWORD *)(v10 + 8);
            if (*(_QWORD *)(v10 + 16) > *(uint64_t *)((char *)&v71 + 4))
            {
              v78 = *(_DWORD *)(v10 + 8);
              v72 = *(_QWORD *)v10;
              *(_QWORD *)v10 = *v36;
              *(_DWORD *)(v10 + 8) = *(_DWORD *)(v10 + 20);
              *v36 = v72;
              *(_DWORD *)(v10 + 20) = v78;
            }
          }
        }
        return result;
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>(v10, v10 + 12, v10 + 24, (uint64_t *)(v10 + 36), (uint64_t *)((char *)a2 - 12));
      default:
        if (v11 <= 287)
        {
          v43 = (uint64_t *)(v10 + 12);
          v45 = (uint64_t *)v10 == a2 || v43 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v45)
            {
              v46 = 0;
              v47 = v10;
              do
              {
                v49 = *(_QWORD *)v47;
                v50 = *(_DWORD *)(v47 + 8);
                v51 = *(_QWORD *)(v47 + 16);
                v47 = (unint64_t)v43;
                if (v51 > __SPAIR64__(v50, HIDWORD(v49)))
                {
                  v52 = *(_DWORD *)v43;
                  v53 = v46;
                  do
                  {
                    v54 = v10 + v53;
                    *(_QWORD *)(v54 + 12) = *(_QWORD *)(v10 + v53);
                    *(_DWORD *)(v54 + 20) = *(_DWORD *)(v10 + v53 + 8);
                    if (!v53)
                    {
                      v48 = v10;
                      goto LABEL_54;
                    }
                    *(_QWORD *)&v73 = *(_QWORD *)(v54 - 12);
                    DWORD2(v73) = *(_DWORD *)(v54 - 4);
                    v53 -= 12;
                  }
                  while (v51 > *(uint64_t *)((char *)&v73 + 4));
                  v48 = v10 + v53 + 12;
LABEL_54:
                  *(_DWORD *)v48 = v52;
                  *(_QWORD *)(v48 + 4) = v51;
                }
                v43 = (uint64_t *)(v47 + 12);
                v46 += 12;
              }
              while ((uint64_t *)(v47 + 12) != a2);
            }
          }
          else if (!v45)
          {
            do
            {
              v55 = *(_QWORD *)v9;
              v56 = *(_DWORD *)(v9 + 8);
              v57 = *(_QWORD *)(v9 + 16);
              v9 = (uint64_t)v43;
              if (v57 > __SPAIR64__(v56, HIDWORD(v55)))
              {
                v58 = *(_DWORD *)v43;
                do
                {
                  v59 = v43;
                  v60 = *(uint64_t *)((char *)v43 - 12);
                  v43 = (uint64_t *)((char *)v43 - 12);
                  *v59 = v60;
                  *((_DWORD *)v59 + 2) = *((_DWORD *)v59 - 1);
                  *(_QWORD *)&v74 = *(v59 - 3);
                  DWORD2(v74) = *((_DWORD *)v59 - 4);
                }
                while (v57 > *(uint64_t *)((char *)&v74 + 4));
                *(_DWORD *)v43 = v58;
                *(uint64_t *)((char *)v43 + 4) = v57;
              }
              v43 = (uint64_t *)(v9 + 12);
            }
            while ((uint64_t *)(v9 + 12) != a2);
          }
          return result;
        }
        if (!a4)
        {
          if ((uint64_t *)v10 != a2)
            return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*,operations_research::sat::TaskTime*>(v10, a2, a2, a3);
          return result;
        }
        v13 = v12 >> 1;
        v14 = v10 + 12 * (v12 >> 1);
        if ((unint64_t)v11 < 0x601)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>((uint64_t *)(v9 + 12 * v13), (uint64_t *)v9, (uint64_t *)((char *)a2 - 12));
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_11;
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>((uint64_t *)v9, (uint64_t *)(v9 + 12 * v13), (uint64_t *)((char *)a2 - 12));
          v15 = 12 * v13;
          v16 = (uint64_t *)(12 * v13 + v9 - 12);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>((uint64_t *)(v9 + 12), v16, a2 - 3);
          v17 = (uint64_t *)(v9 + 12 + v15);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>((uint64_t *)(v9 + 24), v17, (uint64_t *)((char *)a2 - 36));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>(v16, (uint64_t *)v14, v17);
          v75 = *(_DWORD *)(v9 + 8);
          v61 = *(_QWORD *)v9;
          v18 = *(_QWORD *)v14;
          *(_DWORD *)(v9 + 8) = *(_DWORD *)(v14 + 8);
          *(_QWORD *)v9 = v18;
          *(_DWORD *)(v14 + 8) = v75;
          *(_QWORD *)v14 = v61;
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_11;
        }
        *(_QWORD *)&v62 = *(_QWORD *)v9;
        DWORD2(v62) = *(_DWORD *)(v9 + 8);
        if (*(_QWORD *)(v9 - 8) <= *(uint64_t *)((char *)&v62 + 4))
        {
          result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::TaskTime *,std::greater<operations_research::sat::TaskTime> &>((uint64_t *)v9, a2);
          v10 = result;
          a5 = 0;
          continue;
        }
LABEL_11:
        v19 = 0;
        v20 = *(_QWORD *)v9;
        v21 = *(_DWORD *)(v9 + 8);
        do
        {
          *(_QWORD *)&v63 = *(_QWORD *)v9;
          DWORD2(v63) = *(_DWORD *)(v9 + 8);
          v22 = *(_QWORD *)(v9 + v19 + 16);
          v19 += 12;
        }
        while (v22 > *(uint64_t *)((char *)&v63 + 4));
        v23 = v9 + v19;
        v24 = a2;
        if (v19 == 12)
        {
          v27 = a2;
          while (v23 < (unint64_t)v27)
          {
            v25 = (uint64_t *)((char *)v27 - 12);
            *(_QWORD *)&v65 = *(_QWORD *)v9;
            DWORD2(v65) = *(_DWORD *)(v9 + 8);
            v28 = *(v27 - 1);
            v27 = (uint64_t *)((char *)v27 - 12);
            if (v28 > *(uint64_t *)((char *)&v65 + 4))
              goto LABEL_19;
          }
          v25 = v27;
          v10 = v23;
        }
        else
        {
          do
          {
            v25 = (uint64_t *)((char *)v24 - 12);
            *(_QWORD *)&v64 = *(_QWORD *)v9;
            DWORD2(v64) = *(_DWORD *)(v9 + 8);
            v26 = *(v24 - 1);
            v24 = (uint64_t *)((char *)v24 - 12);
          }
          while (v26 <= *(uint64_t *)((char *)&v64 + 4));
LABEL_19:
          v10 = v23;
          if (v23 < (unint64_t)v25)
          {
            v29 = (unint64_t)v25;
            do
            {
              v76 = *(_DWORD *)(v10 + 8);
              v66 = *(_QWORD *)v10;
              v30 = *(_QWORD *)v29;
              *(_DWORD *)(v10 + 8) = *(_DWORD *)(v29 + 8);
              *(_QWORD *)v10 = v30;
              *(_DWORD *)(v29 + 8) = v76;
              *(_QWORD *)v29 = v66;
              do
              {
                v31 = *(_QWORD *)(v10 + 16);
                v10 += 12;
              }
              while (v31 > __SPAIR64__(v21, HIDWORD(v20)));
              do
              {
                v32 = *(_QWORD *)(v29 - 8);
                v29 -= 12;
              }
              while (v32 <= __SPAIR64__(v21, HIDWORD(v20)));
            }
            while (v10 < v29);
          }
        }
        if (v10 - 12 != v9)
        {
          v33 = *(_QWORD *)(v10 - 12);
          *(_DWORD *)(v9 + 8) = *(_DWORD *)(v10 - 4);
          *(_QWORD *)v9 = v33;
        }
        *(_QWORD *)(v10 - 12) = v20;
        *(_DWORD *)(v10 - 4) = v21;
        if (v23 < (unint64_t)v25)
        {
LABEL_30:
          result = std::__introsort<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*,false>(v9, v10 - 12, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v34 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>(v9, v10 - 12);
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>(v10, (uint64_t)a2);
        if (!(_DWORD)result)
        {
          if (v34)
            continue;
          goto LABEL_30;
        }
        a2 = (uint64_t *)(v10 - 12);
        if (!v34)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  *(_QWORD *)&v19 = *a1;
  DWORD2(v19) = *((_DWORD *)a1 + 2);
  if (*(uint64_t *)((char *)a2 + 4) > *(uint64_t *)((char *)&v19 + 4))
  {
    *(_QWORD *)&v20 = *a2;
    DWORD2(v20) = HIDWORD(*(unint64_t *)((char *)a2 + 4));
    if (*(uint64_t *)((char *)a3 + 4) > *(uint64_t *)((char *)&v20 + 4))
    {
      v3 = *((_DWORD *)a1 + 2);
      v4 = *a1;
      v5 = *((_DWORD *)a3 + 2);
      *a1 = *a3;
      *((_DWORD *)a1 + 2) = v5;
      *a3 = v4;
      *((_DWORD *)a3 + 2) = v3;
      return 1;
    }
    v13 = *((_DWORD *)a1 + 2);
    v14 = *a1;
    v15 = *((_DWORD *)a2 + 2);
    *a1 = *a2;
    *((_DWORD *)a1 + 2) = v15;
    *a2 = v14;
    *((_DWORD *)a2 + 2) = v13;
    LODWORD(v23) = HIDWORD(v14);
    HIDWORD(v23) = *((_DWORD *)a2 + 2);
    if (*(uint64_t *)((char *)a3 + 4) > v23)
    {
      v16 = *((_DWORD *)a2 + 2);
      v17 = *a2;
      v18 = *((_DWORD *)a3 + 2);
      *a2 = *a3;
      *((_DWORD *)a2 + 2) = v18;
      *a3 = v17;
      *((_DWORD *)a3 + 2) = v16;
      return 2;
    }
    return 1;
  }
  *(_QWORD *)&v21 = *a2;
  DWORD2(v21) = HIDWORD(*(unint64_t *)((char *)a2 + 4));
  if (*(uint64_t *)((char *)a3 + 4) > *(uint64_t *)((char *)&v21 + 4))
  {
    v7 = *((_DWORD *)a2 + 2);
    v8 = *a2;
    v9 = *((_DWORD *)a3 + 2);
    *a2 = *a3;
    *((_DWORD *)a2 + 2) = v9;
    *a3 = v8;
    *((_DWORD *)a3 + 2) = v7;
    *(_QWORD *)&v22 = *a1;
    DWORD2(v22) = *((_DWORD *)a1 + 2);
    if (*(uint64_t *)((char *)a2 + 4) > *(uint64_t *)((char *)&v22 + 4))
    {
      v10 = *((_DWORD *)a1 + 2);
      v11 = *a1;
      v12 = *((_DWORD *)a2 + 2);
      *a1 = *a2;
      *((_DWORD *)a1 + 2) = v12;
      *a2 = v11;
      *((_DWORD *)a2 + 2) = v10;
      return 2;
    }
    return 1;
  }
  return 0;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::TaskTime *,std::greater<operations_research::sat::TaskTime> &>(uint64_t *a1, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;

  v2 = *(_DWORD *)a1;
  v3 = *(uint64_t *)((char *)a1 + 4);
  HIDWORD(v15) = *((_DWORD *)a2 - 1);
  if (v3 <= v15)
  {
    v6 = (unint64_t)a1 + 12;
    do
    {
      v4 = (uint64_t *)v6;
      if (v6 >= (unint64_t)a2)
        break;
      *(_QWORD *)&v13 = *(_QWORD *)v6;
      DWORD2(v13) = *(_DWORD *)(v6 + 8);
      v6 += 12;
    }
    while (v3 <= *(uint64_t *)((char *)&v13 + 4));
  }
  else
  {
    v4 = a1;
    do
    {
      v5 = *(uint64_t *)((char *)v4 + 12);
      v4 = (uint64_t *)((char *)v4 + 12);
      LODWORD(v16) = HIDWORD(v5);
      HIDWORD(v16) = *((_DWORD *)v4 + 2);
    }
    while (v3 <= v16);
  }
  if (v4 < a2)
  {
    do
    {
      v7 = *(uint64_t *)((char *)a2 - 12);
      a2 = (uint64_t *)((char *)a2 - 12);
      LODWORD(v17) = HIDWORD(v7);
      HIDWORD(v17) = *((_DWORD *)a2 + 2);
    }
    while (v3 > v17);
  }
  while (v4 < a2)
  {
    v20 = *((_DWORD *)v4 + 2);
    v14 = *v4;
    v8 = *a2;
    *((_DWORD *)v4 + 2) = *((_DWORD *)a2 + 2);
    *v4 = v8;
    *((_DWORD *)a2 + 2) = v20;
    *a2 = v14;
    do
    {
      v9 = *(uint64_t *)((char *)v4 + 12);
      v4 = (uint64_t *)((char *)v4 + 12);
      LODWORD(v18) = HIDWORD(v9);
      HIDWORD(v18) = *((_DWORD *)v4 + 2);
    }
    while (v3 <= v18);
    do
    {
      v10 = *(uint64_t *)((char *)a2 - 12);
      a2 = (uint64_t *)((char *)a2 - 12);
      LODWORD(v19) = HIDWORD(v10);
      HIDWORD(v19) = *((_DWORD *)a2 + 2);
    }
    while (v3 > v19);
  }
  if ((uint64_t *)((char *)v4 - 12) != a1)
  {
    v11 = *(uint64_t *)((char *)v4 - 12);
    *((_DWORD *)a1 + 2) = *((_DWORD *)v4 - 1);
    *a1 = v11;
  }
  *((_DWORD *)v4 - 3) = v2;
  *(v4 - 1) = v3;
  return v4;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  uint64_t *v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 2);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      *(_QWORD *)&v29 = *(_QWORD *)a1;
      DWORD2(v29) = *(_DWORD *)(a1 + 8);
      if (*(_QWORD *)(a2 - 8) > *(uint64_t *)((char *)&v29 + 4))
      {
        v15 = *(_DWORD *)(a1 + 8);
        v16 = *(_QWORD *)a1;
        v17 = *(_DWORD *)(a2 - 4);
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 12);
        *(_DWORD *)(a1 + 8) = v17;
        *(_QWORD *)(a2 - 12) = v16;
        *(_DWORD *)(a2 - 4) = v15;
      }
      break;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a2 - 12));
      result = 1;
      break;
    case 4uLL:
      v18 = (uint64_t *)(a1 + 12);
      v19 = (uint64_t *)(a1 + 24);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a1 + 24));
      *(_QWORD *)&v30 = *(_QWORD *)(a1 + 24);
      DWORD2(v30) = *(_DWORD *)(a1 + 32);
      if (*(_QWORD *)(a2 - 8) <= *(uint64_t *)((char *)&v30 + 4))
        goto LABEL_13;
      v20 = *(_DWORD *)(a1 + 32);
      v21 = *v19;
      v22 = *(_DWORD *)(a2 - 4);
      *v19 = *(_QWORD *)(a2 - 12);
      *(_DWORD *)(a1 + 32) = v22;
      *(_QWORD *)(a2 - 12) = v21;
      *(_DWORD *)(a2 - 4) = v20;
      *(_QWORD *)&v31 = *(_QWORD *)(a1 + 12);
      DWORD2(v31) = *(_DWORD *)(a1 + 20);
      if (*(_QWORD *)(a1 + 28) <= *(uint64_t *)((char *)&v31 + 4))
        goto LABEL_13;
      v23 = *(_DWORD *)(a1 + 20);
      v24 = *v18;
      *v18 = *v19;
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 32);
      *v19 = v24;
      *(_DWORD *)(a1 + 32) = v23;
      *(_QWORD *)&v32 = *(_QWORD *)a1;
      DWORD2(v32) = *(_DWORD *)(a1 + 8);
      if (*(_QWORD *)(a1 + 16) <= *(uint64_t *)((char *)&v32 + 4))
        goto LABEL_13;
      v25 = *(_DWORD *)(a1 + 8);
      v26 = *(_QWORD *)a1;
      *(_QWORD *)a1 = *v18;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
      *v18 = v26;
      *(_DWORD *)(a1 + 20) = v25;
      result = 1;
      break;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>(a1, a1 + 12, a1 + 24, (uint64_t *)(a1 + 36), (uint64_t *)(a2 - 12));
      result = 1;
      break;
    default:
      v6 = a1 + 24;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a1 + 24));
      v7 = a1 + 36;
      if (a1 + 36 == a2)
      {
LABEL_13:
        result = 1;
      }
      else
      {
        v8 = 0;
        v9 = 0;
        while (1)
        {
          *(_QWORD *)&v27 = *(_QWORD *)v6;
          DWORD2(v27) = *(_DWORD *)(v6 + 8);
          v10 = *(_QWORD *)(v7 + 4);
          if (v10 > *(uint64_t *)((char *)&v27 + 4))
            break;
LABEL_12:
          v6 = v7;
          v8 += 12;
          v7 += 12;
          if (v7 == a2)
            goto LABEL_13;
        }
        v11 = *(_DWORD *)v7;
        v12 = v8;
        do
        {
          v13 = a1 + v12;
          *(_QWORD *)(v13 + 36) = *(_QWORD *)(a1 + v12 + 24);
          *(_DWORD *)(v13 + 44) = *(_DWORD *)(a1 + v12 + 32);
          if (v12 == -24)
          {
            *(_DWORD *)a1 = v11;
            *(_QWORD *)(a1 + 4) = v10;
            if (++v9 != 8)
              goto LABEL_12;
            goto LABEL_22;
          }
          *(_QWORD *)&v28 = *(_QWORD *)(v13 + 12);
          DWORD2(v28) = *(_DWORD *)(v13 + 20);
          v12 -= 12;
        }
        while (v10 > *(uint64_t *)((char *)&v28 + 4));
        v14 = a1 + v12;
        *(_DWORD *)(v14 + 36) = v11;
        *(_QWORD *)(v14 + 40) = v10;
        if (++v9 != 8)
          goto LABEL_12;
LABEL_22:
        result = v7 + 12 == a2;
      }
      break;
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  *(_QWORD *)&v32 = *(_QWORD *)a3;
  DWORD2(v32) = *(_DWORD *)(a3 + 8);
  if (*(uint64_t *)((char *)a4 + 4) > *(uint64_t *)((char *)&v32 + 4))
  {
    v11 = *(_DWORD *)(a3 + 8);
    v12 = *(_QWORD *)a3;
    v13 = *((_DWORD *)a4 + 2);
    *(_QWORD *)a3 = *a4;
    *(_DWORD *)(a3 + 8) = v13;
    *a4 = v12;
    *((_DWORD *)a4 + 2) = v11;
    *(_QWORD *)&v33 = *(_QWORD *)a2;
    DWORD2(v33) = *(_DWORD *)(a2 + 8);
    if (*(_QWORD *)(a3 + 4) > *(uint64_t *)((char *)&v33 + 4))
    {
      v14 = *(_DWORD *)(a2 + 8);
      v15 = *(_QWORD *)a2;
      v16 = *(_DWORD *)(a3 + 8);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_DWORD *)(a2 + 8) = v16;
      *(_QWORD *)a3 = v15;
      *(_DWORD *)(a3 + 8) = v14;
      *(_QWORD *)&v34 = *(_QWORD *)a1;
      DWORD2(v34) = *(_DWORD *)(a1 + 8);
      if (*(_QWORD *)(a2 + 4) > *(uint64_t *)((char *)&v34 + 4))
      {
        v17 = *(_DWORD *)(a1 + 8);
        v18 = *(_QWORD *)a1;
        v19 = *(_DWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_DWORD *)(a1 + 8) = v19;
        *(_QWORD *)a2 = v18;
        *(_DWORD *)(a2 + 8) = v17;
      }
    }
  }
  *(_QWORD *)&v35 = *a4;
  DWORD2(v35) = *((_DWORD *)a4 + 2);
  if (*(uint64_t *)((char *)a5 + 4) > *(uint64_t *)((char *)&v35 + 4))
  {
    v20 = *((_DWORD *)a4 + 2);
    v21 = *a4;
    v22 = *((_DWORD *)a5 + 2);
    *a4 = *a5;
    *((_DWORD *)a4 + 2) = v22;
    *a5 = v21;
    *((_DWORD *)a5 + 2) = v20;
    *(_QWORD *)&v36 = *(_QWORD *)a3;
    DWORD2(v36) = *(_DWORD *)(a3 + 8);
    if (*(uint64_t *)((char *)a4 + 4) > *(uint64_t *)((char *)&v36 + 4))
    {
      v23 = *(_DWORD *)(a3 + 8);
      v24 = *(_QWORD *)a3;
      v25 = *((_DWORD *)a4 + 2);
      *(_QWORD *)a3 = *a4;
      *(_DWORD *)(a3 + 8) = v25;
      *a4 = v24;
      *((_DWORD *)a4 + 2) = v23;
      *(_QWORD *)&v37 = *(_QWORD *)a2;
      DWORD2(v37) = *(_DWORD *)(a2 + 8);
      if (*(_QWORD *)(a3 + 4) > *(uint64_t *)((char *)&v37 + 4))
      {
        v26 = *(_DWORD *)(a2 + 8);
        v27 = *(_QWORD *)a2;
        v28 = *(_DWORD *)(a3 + 8);
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_DWORD *)(a2 + 8) = v28;
        *(_QWORD *)a3 = v27;
        *(_DWORD *)(a3 + 8) = v26;
        *(_QWORD *)&v38 = *(_QWORD *)a1;
        DWORD2(v38) = *(_DWORD *)(a1 + 8);
        if (*(_QWORD *)(a2 + 4) > *(uint64_t *)((char *)&v38 + 4))
        {
          v29 = *(_DWORD *)(a1 + 8);
          v30 = *(_QWORD *)a1;
          v31 = *(_DWORD *)(a2 + 8);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_DWORD *)(a1 + 8) = v31;
          *(_QWORD *)a2 = v30;
          *(_DWORD *)(a2 + 8) = v29;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*,operations_research::sat::TaskTime*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v49;
  int v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;

  if ((uint64_t *)a1 != a2)
  {
    v5 = a2;
    v7 = (uint64_t)a2 - a1;
    v8 = ((uint64_t)a2 - a1) / 12;
    if ((uint64_t)a2 - a1 >= 13)
    {
      v10 = (v8 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (uint64_t *)(a1 + 12 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>(a1, a4, v8, v12);
        v12 = (uint64_t *)((char *)v12 - 12);
        --v11;
      }
      while (v11);
    }
    v13 = v5;
    if (v5 != a3)
    {
      if (v7 > 23)
      {
        v18 = v5;
        do
        {
          *(_QWORD *)&v52 = *(_QWORD *)a1;
          DWORD2(v52) = *(_DWORD *)(a1 + 8);
          if (*(uint64_t *)((char *)v18 + 4) > *(uint64_t *)((char *)&v52 + 4))
          {
            v19 = *((_DWORD *)v18 + 2);
            v20 = *v18;
            v21 = *(_DWORD *)(a1 + 8);
            *v18 = *(_QWORD *)a1;
            *((_DWORD *)v18 + 2) = v21;
            *(_QWORD *)a1 = v20;
            *(_DWORD *)(a1 + 8) = v19;
            if (v8 < 3)
            {
              v24 = a1 + 12;
              v25 = 1;
            }
            else
            {
              v22 = *(_QWORD *)(a1 + 16);
              *(_QWORD *)&v53 = *(_QWORD *)(a1 + 24);
              DWORD2(v53) = *(_DWORD *)(a1 + 32);
              v23 = v22 <= *(_QWORD *)((char *)&v53 + 4);
              v24 = v22 <= *(uint64_t *)((char *)&v53 + 4) ? a1 + 12 : a1 + 24;
              v25 = v23 ? 1 : 2;
            }
            v26 = *(_QWORD *)a1;
            v27 = *(_DWORD *)(a1 + 8);
            *(_QWORD *)&v54 = *(_QWORD *)a1;
            DWORD2(v54) = v27;
            if (*(_QWORD *)(v24 + 4) <= *(uint64_t *)((char *)&v54 + 4))
            {
              v28 = a1;
              do
              {
                v29 = v28;
                v28 = v24;
                v30 = *(_QWORD *)v24;
                *(_DWORD *)(v29 + 8) = *(_DWORD *)(v28 + 8);
                *(_QWORD *)v29 = v30;
                if ((uint64_t)((v8 - 2) >> 1) < v25)
                  break;
                v31 = (2 * v25) | 1;
                v24 = a1 + 12 * v31;
                v32 = 2 * v25 + 2;
                if (v32 < (uint64_t)v8)
                {
                  *(_QWORD *)&v55 = *(_QWORD *)(v24 + 12);
                  DWORD2(v55) = *(_DWORD *)(v24 + 20);
                  if (*(_QWORD *)(a1 + 12 * v31 + 4) > *(uint64_t *)((char *)&v55 + 4))
                  {
                    v24 += 12;
                    v31 = v32;
                  }
                }
                v25 = v31;
              }
              while (*(_QWORD *)(v24 + 4) <= __SPAIR64__(v27, HIDWORD(v26)));
              *(_QWORD *)v28 = v26;
              *(_DWORD *)(v28 + 8) = v27;
            }
          }
          v18 = (uint64_t *)((char *)v18 + 12);
        }
        while (v18 != a3);
      }
      else
      {
        v14 = v5;
        do
        {
          *(_QWORD *)&v51 = *(_QWORD *)a1;
          DWORD2(v51) = *(_DWORD *)(a1 + 8);
          if (*(uint64_t *)((char *)v14 + 4) > *(uint64_t *)((char *)&v51 + 4))
          {
            v15 = *((_DWORD *)v14 + 2);
            v16 = *v14;
            v17 = *(_DWORD *)(a1 + 8);
            *v14 = *(_QWORD *)a1;
            *((_DWORD *)v14 + 2) = v17;
            *(_QWORD *)a1 = v16;
            *(_DWORD *)(a1 + 8) = v15;
          }
          v14 = (uint64_t *)((char *)v14 + 12);
        }
        while (v14 != a3);
      }
      v13 = a3;
    }
    if (v7 >= 13)
    {
      v33 = v7 / 0xCuLL;
      do
      {
        v34 = 0;
        v49 = *(_QWORD *)a1;
        v50 = *(_DWORD *)(a1 + 8);
        v35 = a1;
        do
        {
          v37 = v34 + 1;
          v38 = v35 + 12 * (v34 + 1);
          v39 = (2 * v34) | 1;
          v40 = 2 * v34 + 2;
          if (v40 < v33)
          {
            *(_QWORD *)&v56 = *(_QWORD *)(v38 + 12);
            DWORD2(v56) = *(_DWORD *)(v38 + 20);
            if (*(_QWORD *)(v35 + 12 * v37 + 4) > *(uint64_t *)((char *)&v56 + 4))
            {
              v38 += 12;
              v39 = v40;
            }
          }
          v36 = *(_QWORD *)v38;
          *(_DWORD *)(v35 + 8) = *(_DWORD *)(v38 + 8);
          *(_QWORD *)v35 = v36;
          v35 = v38;
          v34 = v39;
        }
        while (v39 <= (uint64_t)((unint64_t)(v33 - 2) >> 1));
        v5 = (uint64_t *)((char *)v5 - 12);
        if ((uint64_t *)v38 == v5)
        {
          *(_DWORD *)(v38 + 8) = v50;
          *(_QWORD *)v38 = v49;
        }
        else
        {
          v41 = *v5;
          *(_DWORD *)(v38 + 8) = *((_DWORD *)v5 + 2);
          *(_QWORD *)v38 = v41;
          *v5 = v49;
          *((_DWORD *)v5 + 2) = v50;
          v42 = v38 - a1 + 12;
          if (v42 >= 13)
          {
            v43 = (v42 / 0xCuLL - 2) >> 1;
            v44 = *(_QWORD *)v38;
            v45 = *(_DWORD *)(v38 + 8);
            *(_QWORD *)&v57 = *(_QWORD *)v38;
            DWORD2(v57) = v45;
            if (*(_QWORD *)(a1 + 12 * v43 + 4) > *(uint64_t *)((char *)&v57 + 4))
            {
              do
              {
                v46 = v38;
                v38 = a1 + 12 * v43;
                v47 = *(_QWORD *)v38;
                *(_DWORD *)(v46 + 8) = *(_DWORD *)(v38 + 8);
                *(_QWORD *)v46 = v47;
                if (!v43)
                  break;
                v43 = (v43 - 1) >> 1;
              }
              while (*(_QWORD *)(a1 + 12 * v43 + 4) > __SPAIR64__(v45, HIDWORD(v44)));
              *(_QWORD *)v38 = v44;
              *(_DWORD *)(v38 + 8) = v45;
            }
          }
        }
        v23 = v33-- <= 2;
      }
      while (!v23);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  if (a3 >= 2)
  {
    v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - result) >> 2)))
    {
      v5 = (0x5555555555555556 * (((uint64_t)a4 - result) >> 2)) | 1;
      v6 = (uint64_t *)(result + 12 * v5);
      if (0x5555555555555556 * (((uint64_t)a4 - result) >> 2) + 2 < a3)
      {
        *(_QWORD *)&v13 = *(uint64_t *)((char *)v6 + 12);
        DWORD2(v13) = *((_DWORD *)v6 + 5);
        if (*(_QWORD *)(result + 12 * v5 + 4) > *(uint64_t *)((char *)&v13 + 4))
        {
          v6 = (uint64_t *)((char *)v6 + 12);
          v5 = 0x5555555555555556 * (((uint64_t)a4 - result) >> 2) + 2;
        }
      }
      v7 = *a4;
      v8 = *((_DWORD *)a4 + 2);
      *(_QWORD *)&v14 = *a4;
      DWORD2(v14) = v8;
      if (*(uint64_t *)((char *)v6 + 4) <= *(uint64_t *)((char *)&v14 + 4))
      {
        do
        {
          v9 = a4;
          a4 = v6;
          v10 = *v6;
          *((_DWORD *)v9 + 2) = *((_DWORD *)a4 + 2);
          *v9 = v10;
          if (v4 < v5)
            break;
          v11 = (2 * v5) | 1;
          v6 = (uint64_t *)(result + 12 * v11);
          v12 = 2 * v5 + 2;
          if (v12 < a3)
          {
            *(_QWORD *)&v15 = *(uint64_t *)((char *)v6 + 12);
            DWORD2(v15) = *((_DWORD *)v6 + 5);
            if (*(_QWORD *)(result + 12 * v11 + 4) > *(uint64_t *)((char *)&v15 + 4))
            {
              v6 = (uint64_t *)((char *)v6 + 12);
              v11 = v12;
            }
          }
          v5 = v11;
        }
        while (*(uint64_t *)((char *)v6 + 4) <= __SPAIR64__(v8, HIDWORD(v7)));
        *a4 = v7;
        *((_DWORD *)a4 + 2) = v8;
      }
    }
  }
  return result;
}

void operations_research::sat::LinearConstraintBuilder::AddTerm(_QWORD *a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;
  _DWORD *v14;
  int *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  int *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  int v29;
  char *v30;
  uint64_t v31;
  int v32;

  v6 = a1 + 4;
  if ((a2 & 1) == 0)
  {
    v8 = (char *)a1[5];
    v7 = a1[6];
    if ((unint64_t)v8 < v7)
    {
      *(_DWORD *)v8 = a2;
      *(_QWORD *)(v8 + 4) = a3;
      v9 = v8 + 12;
LABEL_30:
      a1[5] = v9;
      return;
    }
    v15 = (int *)*v6;
    v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v8[-*v6] >> 2);
    v17 = v16 + 1;
    if (v16 + 1 <= 0x1555555555555555)
    {
      v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)v15) >> 2);
      if (2 * v18 > v17)
        v17 = 2 * v18;
      if (v18 >= 0xAAAAAAAAAAAAAAALL)
        v19 = 0x1555555555555555;
      else
        v19 = v17;
      if (!v19)
      {
        v20 = 0;
        goto LABEL_25;
      }
      if (v19 <= 0x1555555555555555)
      {
        v20 = (char *)operator new(12 * v19);
LABEL_25:
        v27 = &v20[12 * v16];
        *(_DWORD *)v27 = a2;
        *(_QWORD *)(v27 + 4) = a3;
        v9 = v27 + 12;
        if (v8 != (char *)v15)
        {
          do
          {
            v28 = *(_QWORD *)(v8 - 12);
            v8 -= 12;
            v29 = *((_DWORD *)v8 + 2);
            *(_QWORD *)(v27 - 12) = v28;
            v27 -= 12;
            *((_DWORD *)v27 + 2) = v29;
          }
          while (v8 != (char *)v15);
          v8 = (char *)*v6;
        }
        a1[4] = v27;
        a1[5] = v9;
        a1[6] = &v20[12 * v19];
        if (v8)
          operator delete(v8);
        goto LABEL_30;
      }
LABEL_39:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_38:
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  v10 = a2 ^ 1;
  v11 = -a3;
  v13 = (int *)a1[5];
  v12 = a1[6];
  if ((unint64_t)v13 >= v12)
  {
    v21 = (int *)*v6;
    v22 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v13 - *v6) >> 2);
    v23 = v22 + 1;
    if (v22 + 1 > 0x1555555555555555)
      goto LABEL_38;
    v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)v21) >> 2);
    if (2 * v24 > v23)
      v23 = 2 * v24;
    if (v24 >= 0xAAAAAAAAAAAAAAALL)
      v25 = 0x1555555555555555;
    else
      v25 = v23;
    if (v25)
    {
      if (v25 > 0x1555555555555555)
        goto LABEL_39;
      v26 = (char *)operator new(12 * v25);
    }
    else
    {
      v26 = 0;
    }
    v30 = &v26[12 * v22];
    *(_DWORD *)v30 = v10;
    *(_QWORD *)(v30 + 4) = v11;
    v14 = v30 + 12;
    if (v13 != v21)
    {
      do
      {
        v31 = *(_QWORD *)(v13 - 3);
        v13 -= 3;
        v32 = v13[2];
        *(_QWORD *)(v30 - 12) = v31;
        v30 -= 12;
        *((_DWORD *)v30 + 2) = v32;
      }
      while (v13 != v21);
      v13 = (int *)*v6;
    }
    a1[4] = v30;
    a1[5] = v14;
    a1[6] = &v26[12 * v25];
    if (v13)
      operator delete(v13);
  }
  else
  {
    *v13 = v10;
    *(_QWORD *)(v13 + 1) = v11;
    v14 = v13 + 3;
  }
  a1[5] = v14;
}

void operations_research::sat::LinearConstraintBuilder::AddTerm(_QWORD *a1, int *a2, uint64_t a3)
{
  int v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  int64_t v31;
  uint64_t v32;

  v6 = *a2;
  if (*a2 != -1)
  {
    v7 = a1 + 4;
    if ((v6 & 1) != 0)
    {
      v6 ^= 1u;
      v8 = -(*(_QWORD *)(a2 + 1) * a3);
      v10 = (_DWORD *)a1[5];
      v17 = a1[6];
      if ((unint64_t)v10 >= v17)
      {
        v19 = (_DWORD *)*v7;
        v20 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v10 - *v7) >> 2);
        v21 = v20 + 1;
        if (v20 + 1 <= 0x1555555555555555)
        {
          v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - (_QWORD)v19) >> 2);
          if (2 * v22 > v21)
            v21 = 2 * v22;
          if (v22 >= 0xAAAAAAAAAAAAAAALL)
            v23 = 0x1555555555555555;
          else
            v23 = v21;
          if (v23)
          {
            if (v23 > 0x1555555555555555)
              goto LABEL_41;
            v24 = (char *)operator new(12 * v23);
          }
          else
          {
            v24 = 0;
          }
          v25 = &v24[12 * v20];
          v26 = &v24[12 * v23];
          *(_DWORD *)v25 = v6;
          *(_QWORD *)(v25 + 4) = v8;
          v18 = v25 + 12;
          if (v10 == v19)
            goto LABEL_32;
          do
          {
            v29 = *(_QWORD *)(v10 - 3);
            v10 -= 3;
            v30 = v10[2];
            *(_QWORD *)(v25 - 12) = v29;
            v25 -= 12;
            *((_DWORD *)v25 + 2) = v30;
          }
          while (v10 != v19);
LABEL_31:
          v10 = (_DWORD *)*v7;
LABEL_32:
          a1[4] = v25;
          a1[5] = v18;
          a1[6] = v26;
          if (v10)
            operator delete(v10);
          goto LABEL_34;
        }
LABEL_40:
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
    }
    else
    {
      v8 = *(_QWORD *)(a2 + 1) * a3;
      v10 = (_DWORD *)a1[5];
      v9 = a1[6];
      if ((unint64_t)v10 >= v9)
      {
        v11 = (_DWORD *)*v7;
        v12 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v10 - *v7) >> 2);
        v13 = v12 + 1;
        if (v12 + 1 <= 0x1555555555555555)
        {
          v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (_QWORD)v11) >> 2);
          if (2 * v14 > v13)
            v13 = 2 * v14;
          if (v14 >= 0xAAAAAAAAAAAAAAALL)
            v15 = 0x1555555555555555;
          else
            v15 = v13;
          if (!v15)
          {
            v16 = 0;
            goto LABEL_25;
          }
          if (v15 <= 0x1555555555555555)
          {
            v16 = (char *)operator new(12 * v15);
LABEL_25:
            v25 = &v16[12 * v12];
            v26 = &v16[12 * v15];
            *(_DWORD *)v25 = v6;
            *(_QWORD *)(v25 + 4) = v8;
            v18 = v25 + 12;
            if (v10 == v11)
              goto LABEL_32;
            do
            {
              v27 = *(_QWORD *)(v10 - 3);
              v10 -= 3;
              v28 = v10[2];
              *(_QWORD *)(v25 - 12) = v27;
              v25 -= 12;
              *((_DWORD *)v25 + 2) = v28;
            }
            while (v10 != v11);
            goto LABEL_31;
          }
LABEL_41:
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        goto LABEL_40;
      }
    }
    *v10 = v6;
    *(_QWORD *)(v10 + 1) = v8;
    v18 = v10 + 3;
LABEL_34:
    a1[5] = v18;
  }
  v31 = a1[1];
  if (v31 >= (uint64_t)0x8000000000000003)
    a1[1] = v31 - *(_QWORD *)(a2 + 3) * a3;
  v32 = a1[2];
  if (v32 <= 0x7FFFFFFFFFFFFFFDLL)
    a1[2] = v32 - *(_QWORD *)(a2 + 3) * a3;
}

uint64_t operations_research::sat::LinearConstraintBuilder::AddLiteralTerm(_QWORD *a1, int a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  int64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(*a1 + 160);
  v6 = (unint64_t)(*(_QWORD *)(*a1 + 168) - v5) >> 2;
  if (a2 >= (int)v6)
  {
    v11 = a2 ^ 1;
    if ((int)v11 < (int)v6)
    {
      v9 = *(_DWORD *)(v5 + 4 * v11);
      if (v9 != -1)
        goto LABEL_17;
    }
    return 0;
  }
  v7 = *(_DWORD *)(v5 + 4 * a2);
  v8 = a2 ^ 1;
  if ((int)v8 >= (int)v6)
  {
    if (v7 != -1)
      goto LABEL_22;
    return 0;
  }
  v9 = *(_DWORD *)(v5 + 4 * v8);
  if (v7 != -1 && v9 != -1)
  {
    if (v7 > v9)
      goto LABEL_17;
LABEL_22:
    operations_research::sat::LinearConstraintBuilder::AddTerm(a1, *(_DWORD *)(v5 + 4 * a2), a3);
    return 1;
  }
  if (v7 != -1)
    goto LABEL_22;
  if (v9 == -1)
    return 0;
LABEL_17:
  operations_research::sat::LinearConstraintBuilder::AddTerm(a1, v9, -a3);
  v13 = a1[1];
  if (v13 >= (uint64_t)0x8000000000000003)
    a1[1] = v13 - a3;
  v14 = a1[2];
  if (v14 <= 0x7FFFFFFFFFFFFFFDLL)
    a1[2] = v14 - a3;
  return 1;
}

void operations_research::sat::CleanTermsAndFillConstraint(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  int *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  int *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  _OWORD *v32;
  int *v33;
  uint64_t v34;
  __int128 v35;
  int v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  _OWORD *v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  unint64_t v55;
  int *v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _BYTE *v64;
  int *v65;
  char *v66;
  int64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int *v71;
  _OWORD *v72;
  int *v73;
  uint64_t v74;
  __int128 v75;
  int v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _BYTE *v86;
  _QWORD *v87;
  char *v88;
  int64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  _OWORD *v94;
  char *v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  void **v99;
  void **v100;
  unint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  char v104;

  v4 = *a1;
  v5 = (int *)a1[1];
  v6 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - v4) >> 2));
  a2[3] = a2[2];
  a2[6] = a2[5];
  if (v5 == (int *)v4)
    v7 = 0;
  else
    v7 = v6;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *,false>(v4, v5, (uint64_t)&v104, v7, 1);
  v9 = *a1;
  v8 = a1[1];
  if (*a1 == v8)
    return;
  v99 = (void **)(a2 + 5);
  v100 = (void **)(a2 + 2);
  v10 = 0;
  v11 = -1;
  v102 = a1[1];
  v103 = a2;
  do
  {
    v12 = *(_DWORD *)v9;
    v13 = *(_QWORD *)(v9 + 4);
    if (v11 == *(_DWORD *)v9)
    {
      v10 += v13;
      goto LABEL_7;
    }
    if (v11 == (v12 ^ 1))
    {
      v10 -= v13;
      goto LABEL_7;
    }
    if (v10)
    {
      v15 = (int *)a2[3];
      v14 = a2[4];
      if ((unint64_t)v15 < v14)
      {
        *v15 = v11;
        a2[3] = v15 + 1;
        v17 = (char *)a2[6];
        v16 = a2[7];
        if ((unint64_t)v17 < v16)
        {
LABEL_14:
          *(_QWORD *)v17 = v10;
          v18 = (uint64_t)(v17 + 8);
LABEL_56:
          a2[6] = v18;
          goto LABEL_57;
        }
LABEL_35:
        v37 = (char *)*v99;
        v38 = v17 - (_BYTE *)*v99;
        v39 = v38 >> 3;
        v40 = (v38 >> 3) + 1;
        if (v40 >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v41 = v16 - (_QWORD)v37;
        if (v41 >> 2 > v40)
          v40 = v41 >> 2;
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
          v42 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v42 = v40;
        if (v42)
        {
          if (v42 >> 61)
            goto LABEL_103;
          v43 = operator new(8 * v42);
          v44 = &v43[8 * v39];
          *v44 = v10;
          v18 = (uint64_t)(v44 + 1);
          if (v17 != v37)
            goto LABEL_44;
        }
        else
        {
          v43 = 0;
          v44 = (_QWORD *)(8 * v39);
          *(_QWORD *)(8 * v39) = v10;
          v18 = 8 * v39 + 8;
          if (v17 != v37)
          {
LABEL_44:
            v45 = v17 - 8 - v37;
            if (v45 >= 0x58)
            {
              v46 = v17 - &v43[v38];
              a2 = v103;
              if (v46 >= 0x20)
              {
                v47 = (v45 >> 3) + 1;
                v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
                v49 = &v17[-v48];
                v44 = (_QWORD *)((char *)v44 - v48);
                v50 = &v43[8 * v39 - 16];
                v51 = v17 - 16;
                v52 = v47 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v53 = *(_OWORD *)v51;
                  *(v50 - 1) = *((_OWORD *)v51 - 1);
                  *v50 = v53;
                  v50 -= 2;
                  v51 -= 32;
                  v52 -= 4;
                }
                while (v52);
                v17 = v49;
                if (v47 == (v47 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_53;
              }
            }
            else
            {
              a2 = v103;
            }
            do
            {
              v54 = *((_QWORD *)v17 - 1);
              v17 -= 8;
              *--v44 = v54;
            }
            while (v17 != v37);
LABEL_53:
            a2[5] = v44;
            a2[6] = v18;
            a2[7] = &v43[8 * v42];
            if (v37)
              operator delete(v37);
            v8 = v102;
            goto LABEL_56;
          }
        }
        a2 = v103;
        goto LABEL_53;
      }
      v19 = (int *)*v100;
      v20 = (char *)v15 - (_BYTE *)*v100;
      v21 = v20 >> 2;
      v22 = (v20 >> 2) + 1;
      if (v22 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v23 = v14 - (_QWORD)v19;
      if (v23 >> 1 > v22)
        v22 = v23 >> 1;
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
        v22 = 0x3FFFFFFFFFFFFFFFLL;
      v101 = v22;
      if (v22)
      {
        if (v22 >> 62)
          goto LABEL_103;
        v24 = operator new(4 * v22);
        v25 = (int *)&v24[4 * v21];
        *v25 = v11;
        v26 = (uint64_t)(v25 + 1);
        if (v15 != v19)
        {
LABEL_23:
          v27 = (char *)(v15 - 1) - (char *)v19;
          if (v27 >= 0x2C)
          {
            v28 = (char *)v15 - &v24[v20];
            a2 = v103;
            if (v28 >= 0x20)
            {
              v29 = (v27 >> 2) + 1;
              v30 = 4 * (v29 & 0x7FFFFFFFFFFFFFF8);
              v31 = &v15[v30 / 0xFFFFFFFFFFFFFFFCLL];
              v25 = (int *)((char *)v25 - v30);
              v32 = &v24[4 * v21 - 16];
              v33 = v15 - 4;
              v34 = v29 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v35 = *(_OWORD *)v33;
                *(v32 - 1) = *((_OWORD *)v33 - 1);
                *v32 = v35;
                v32 -= 2;
                v33 -= 8;
                v34 -= 8;
              }
              while (v34);
              v15 = v31;
              if (v29 == (v29 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_32:
                a2[2] = v25;
                a2[3] = v26;
                a2[4] = &v24[4 * v101];
                if (v19)
                  operator delete(v19);
                v8 = v102;
                a2[3] = v26;
                v17 = (char *)a2[6];
                v16 = a2[7];
                if ((unint64_t)v17 < v16)
                  goto LABEL_14;
                goto LABEL_35;
              }
            }
          }
          else
          {
            a2 = v103;
          }
          do
          {
            v36 = *--v15;
            *--v25 = v36;
          }
          while (v15 != v19);
          goto LABEL_32;
        }
      }
      else
      {
        v24 = 0;
        v25 = (int *)(4 * v21);
        *(_DWORD *)(4 * v21) = v11;
        v26 = 4 * v21 + 4;
        if (v15 != v19)
          goto LABEL_23;
      }
      a2 = v103;
      goto LABEL_32;
    }
LABEL_57:
    v10 = v13;
    v11 = v12;
LABEL_7:
    v9 += 12;
  }
  while (v9 != v8);
  if (!v10)
    return;
  v56 = (int *)a2[3];
  v55 = a2[4];
  if ((unint64_t)v56 < v55)
  {
    *v56 = v11;
    v57 = (uint64_t)(v56 + 1);
    goto LABEL_80;
  }
  v58 = (int *)*v100;
  v59 = (char *)v56 - (_BYTE *)*v100;
  v60 = v59 >> 2;
  v61 = (v59 >> 2) + 1;
  if (v61 >> 62)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v62 = v55 - (_QWORD)v58;
  if (v62 >> 1 > v61)
    v61 = v62 >> 1;
  if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL)
    v63 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v63 = v61;
  if (!v63)
  {
    v64 = 0;
    v65 = (int *)(4 * v60);
    v66 = 0;
    *(_DWORD *)(4 * v60) = v11;
    v57 = 4 * v60 + 4;
    v67 = (char *)v56 - (char *)v58;
    if (v56 == v58)
      goto LABEL_78;
    goto LABEL_72;
  }
  if (v63 >> 62)
    goto LABEL_103;
  v64 = operator new(4 * v63);
  v65 = (int *)&v64[4 * v60];
  v66 = &v64[4 * v63];
  *v65 = v11;
  v57 = (uint64_t)(v65 + 1);
  v67 = (char *)v56 - (char *)v58;
  if (v56 != v58)
  {
LABEL_72:
    v68 = v67 - 4;
    if (v68 < 0x2C)
      goto LABEL_110;
    if ((unint64_t)((char *)v56 - &v64[v59]) < 0x20)
      goto LABEL_110;
    v69 = (v68 >> 2) + 1;
    v70 = 4 * (v69 & 0x7FFFFFFFFFFFFFF8);
    v71 = &v56[v70 / 0xFFFFFFFFFFFFFFFCLL];
    v65 = (int *)((char *)v65 - v70);
    v72 = &v64[4 * v60 - 16];
    v73 = v56 - 4;
    v74 = v69 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v75 = *(_OWORD *)v73;
      *(v72 - 1) = *((_OWORD *)v73 - 1);
      *v72 = v75;
      v72 -= 2;
      v73 -= 8;
      v74 -= 8;
    }
    while (v74);
    v56 = v71;
    if (v69 != (v69 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_110:
      do
      {
        v76 = *--v56;
        *--v65 = v76;
      }
      while (v56 != v58);
    }
  }
LABEL_78:
  a2[2] = v65;
  a2[3] = v57;
  a2[4] = v66;
  if (v58)
    operator delete(v58);
LABEL_80:
  a2[3] = v57;
  v78 = (char *)a2[6];
  v77 = a2[7];
  if ((unint64_t)v78 < v77)
  {
    *(_QWORD *)v78 = v10;
    v79 = (uint64_t)(v78 + 8);
    goto LABEL_101;
  }
  v80 = (char *)*v99;
  v81 = v78 - (_BYTE *)*v99;
  v82 = v81 >> 3;
  v83 = (v81 >> 3) + 1;
  if (v83 >> 61)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v84 = v77 - (_QWORD)v80;
  if (v84 >> 2 > v83)
    v83 = v84 >> 2;
  if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF8)
    v85 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v85 = v83;
  if (!v85)
  {
    v86 = 0;
    v87 = (_QWORD *)(8 * v82);
    v88 = 0;
    *(_QWORD *)(8 * v82) = v10;
    v79 = 8 * v82 + 8;
    v89 = v78 - v80;
    if (v78 == v80)
      goto LABEL_99;
LABEL_93:
    v90 = v89 - 8;
    if (v90 < 0x58)
      goto LABEL_111;
    if ((unint64_t)(v78 - &v86[v81]) < 0x20)
      goto LABEL_111;
    v91 = (v90 >> 3) + 1;
    v92 = 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL);
    v93 = &v78[-v92];
    v87 = (_QWORD *)((char *)v87 - v92);
    v94 = &v86[8 * v82 - 16];
    v95 = v78 - 16;
    v96 = v91 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v97 = *(_OWORD *)v95;
      *(v94 - 1) = *((_OWORD *)v95 - 1);
      *v94 = v97;
      v94 -= 2;
      v95 -= 32;
      v96 -= 4;
    }
    while (v96);
    v78 = v93;
    if (v91 != (v91 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_111:
      do
      {
        v98 = *((_QWORD *)v78 - 1);
        v78 -= 8;
        *--v87 = v98;
      }
      while (v78 != v80);
    }
    goto LABEL_99;
  }
  if (v85 >> 61)
LABEL_103:
    std::__throw_bad_array_new_length[abi:ne180100]();
  v86 = operator new(8 * v85);
  v87 = &v86[8 * v82];
  v88 = &v86[8 * v85];
  *v87 = v10;
  v79 = (uint64_t)(v87 + 1);
  v89 = v78 - v80;
  if (v78 != v80)
    goto LABEL_93;
LABEL_99:
  a2[5] = v87;
  a2[6] = v79;
  a2[7] = v88;
  if (v80)
    operator delete(v80);
LABEL_101:
  a2[6] = v79;
}

void operations_research::sat::LinearConstraintBuilder::Build(operations_research::sat::LinearConstraintBuilder *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = *(_OWORD *)((char *)this + 8);
  *(_OWORD *)(a2 + 16) = 0u;
  operations_research::sat::CleanTermsAndFillConstraint((uint64_t *)this + 4, (_QWORD *)a2);
}

void sub_22DB86FFC(_Unwind_Exception *a1)
{
  operations_research::sat::LinearConstraint *v1;

  operations_research::sat::LinearConstraint::~LinearConstraint(v1);
  _Unwind_Resume(a1);
}

double operations_research::sat::ComputeActivity(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  double result;
  int *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = a1[2];
  v3 = a1[3] - v2;
  if (!v3)
    return 0.0;
  v4 = v3 >> 2;
  v5 = a1[5];
  v6 = *a2;
  if (v4 <= 1)
    v4 = 1;
  if (v4 < 2)
  {
    v7 = 0;
    result = 0.0;
LABEL_10:
    v12 = (uint64_t *)(v5 + 8 * v7);
    v13 = v4 - v7;
    v14 = (int *)(v2 + 4 * v7);
    do
    {
      v16 = *v14++;
      v15 = v16;
      v17 = *v12++;
      result = result + (double)v17 * *(double *)(v6 + 8 * v15);
      --v13;
    }
    while (v13);
    return result;
  }
  v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
  v9 = (int *)(v2 + 4);
  v10 = (uint64_t *)(v5 + 8);
  result = 0.0;
  v11 = v4 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    result = result
           + *(double *)(v6 + 8 * *(v9 - 1)) * (double)*(v10 - 1)
           + *(double *)(v6 + 8 * *v9) * (double)*v10;
    v9 += 2;
    v10 += 2;
    v11 -= 2;
  }
  while (v11);
  if (v4 != v7)
    goto LABEL_10;
  return result;
}

double operations_research::sat::ComputeL2Norm(operations_research::sat *this, const operations_research::sat::LinearConstraint *a2)
{
  int64x2_t *v2;
  int64x2_t *v3;
  unint64_t v4;
  double v5;
  uint64_t *v6;
  uint64_t v8;
  int64x2_t *v9;
  int64x2_t v10;
  int64x2_t v11;
  int8x16_t v12;
  int8x16_t v13;
  uint64_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;

  v3 = (int64x2_t *)*((_QWORD *)this + 5);
  v2 = (int64x2_t *)*((_QWORD *)this + 6);
  if (v3 == v2)
    return sqrt(0.0);
  v4 = (char *)v2 - (char *)v3 - 8;
  if (v4 < 0x18)
  {
    v5 = 0.0;
    v6 = (uint64_t *)*((_QWORD *)this + 5);
    goto LABEL_8;
  }
  v8 = (v4 >> 3) + 1;
  v6 = &v3->i64[v8 & 0x3FFFFFFFFFFFFFFCLL];
  v9 = v3 + 1;
  v5 = 0.0;
  v10 = vdupq_n_s64(0x7FFFFFFFFFFFFFFDuLL);
  v11 = vdupq_n_s64(0x8000000000000003);
  v12 = (int8x16_t)vdupq_n_s64(0xFFF0000000000000);
  v13 = (int8x16_t)vdupq_n_s64(0x7FF0000000000000uLL);
  v14 = v8 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v15 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v9[-1], v10), v13, vbslq_s8((int8x16_t)vcgtq_s64(v11, v9[-1]), v12, (int8x16_t)vcvtq_f64_s64(v9[-1])));
    v16 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(*v9, v10), v13, vbslq_s8((int8x16_t)vcgtq_s64(v11, *v9), v12, (int8x16_t)vcvtq_f64_s64(*v9)));
    v17 = vmulq_f64(v15, v15);
    v18 = vmulq_f64(v16, v16);
    v5 = v5 + v17.f64[0] + v17.f64[1] + v18.f64[0] + v18.f64[1];
    v9 += 2;
    v14 -= 4;
  }
  while (v14);
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFCLL))
  {
    do
    {
LABEL_8:
      v20 = *v6++;
      v19 = v20;
      v21 = (double)v20;
      if (v20 < (uint64_t)0x8000000000000003)
        v21 = -INFINITY;
      if (v19 > 0x7FFFFFFFFFFFFFFDLL)
        v21 = INFINITY;
      v5 = v5 + v21 * v21;
    }
    while (v6 != (uint64_t *)v2);
  }
  return sqrt(v5);
}

uint64_t operations_research::sat::ComputeInfinityNorm(operations_research::sat *this, const operations_research::sat::LinearConstraint *a2)
{
  int64x2_t *v2;
  int64x2_t *v3;
  unint64_t v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  int64x2_t *v8;
  int64x2_t v9;
  uint64_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int8x16_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = (int64x2_t *)*((_QWORD *)this + 5);
  v2 = (int64x2_t *)*((_QWORD *)this + 6);
  if (v3 == v2)
    return 0;
  v4 = (char *)v2 - (char *)v3 - 8;
  if (v4 >= 0x18)
  {
    v7 = (v4 >> 3) + 1;
    v6 = &v3->i64[v7 & 0x3FFFFFFFFFFFFFFCLL];
    v8 = v3 + 1;
    v9 = 0uLL;
    v10 = v7 & 0x3FFFFFFFFFFFFFFCLL;
    v11 = 0uLL;
    do
    {
      v12 = vabsq_s64(v8[-1]);
      v13 = vabsq_s64(*v8);
      v9 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v9, v12), (int8x16_t)v9, (int8x16_t)v12);
      v11 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v11, v13), (int8x16_t)v11, (int8x16_t)v13);
      v8 += 2;
      v10 -= 4;
    }
    while (v10);
    v14 = vbslq_s8((int8x16_t)vcgtq_s64(v9, v11), (int8x16_t)v9, (int8x16_t)v11);
    v15 = vextq_s8(v14, v14, 8uLL).u64[0];
    result = (uint64_t)vbsl_s8((int8x8_t)vcgtd_s64(v14.i64[0], v15), *(int8x8_t *)v14.i8, (int8x8_t)v15);
    if (v7 == (v7 & 0x3FFFFFFFFFFFFFFCLL))
      return result;
  }
  else
  {
    result = 0;
    v6 = (uint64_t *)v3;
  }
  do
  {
    v17 = *v6++;
    v16 = v17;
    if (v17 < 0)
      v16 = -v16;
    if (result <= v16)
      result = v16;
  }
  while (v6 != (uint64_t *)v2);
  return result;
}

double operations_research::sat::ScalarProduct(operations_research::sat *this, const operations_research::sat::LinearConstraint *a2, const operations_research::sat::LinearConstraint *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  double result;
  int v12;
  int v13;
  uint64_t v14;
  double v15;
  double v16;
  uint64_t v17;

  v3 = *((_QWORD *)this + 2);
  v4 = *((_QWORD *)this + 3);
  v5 = v4 - v3;
  if (v4 == v3)
    return 0.0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = v5 >> 2;
  v10 = *((_QWORD *)a2 + 2);
  result = 0.0;
  while ((*((_QWORD *)a2 + 3) - v10) >> 2 > (unint64_t)v8)
  {
    v12 = *(_DWORD *)(v3 + 4 * v6);
    v13 = *(_DWORD *)(v10 + 4 * v8);
    if (v12 == v13)
    {
      v14 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v6);
      v15 = (double)v14;
      v16 = -INFINITY;
      if (v14 < (uint64_t)0x8000000000000003)
        v15 = -INFINITY;
      if (v14 > 0x7FFFFFFFFFFFFFFDLL)
        v15 = INFINITY;
      v17 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8 * v8);
      if (v17 >= (uint64_t)0x8000000000000003)
        v16 = (double)v17;
      if (v17 > 0x7FFFFFFFFFFFFFFDLL)
        v16 = INFINITY;
      result = result + v15 * v16;
      ++v7;
      ++v8;
      v6 = v7;
      if (v9 <= v7)
        return result;
    }
    else
    {
      if (v12 <= v13)
        ++v7;
      else
        ++v8;
      v6 = v7;
      if (v9 <= v7)
        return result;
    }
  }
  return result;
}

uint64_t *operations_research::sat::DivideByGCD(uint64_t *this, operations_research::sat::LinearConstraint *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v3 = (uint64_t *)this[5];
  v2 = (uint64_t *)this[6];
  if (v3 == v2)
    return this;
  v4 = 0;
  v5 = (uint64_t *)this[5];
  v6 = v5;
  do
  {
    v7 = *v6;
    if (*v6)
    {
      if (v7 < 0)
        v7 = -v7;
      v8 = v4;
      do
      {
        v4 = v7;
        v7 = v8 % v7;
        v8 = v4;
      }
      while (v7);
      if (v4 == 1)
        return this;
    }
    ++v6;
  }
  while (v6 != v2);
  v9 = *this;
  if (*this >= (uint64_t)0x8000000000000003)
  {
    if (v9 / v4 * v4 >= v9)
      v12 = v9 / v4;
    else
      v12 = v9 / v4 + 1;
    *this = v12;
    v10 = this[1];
    if (v10 > 0x7FFFFFFFFFFFFFFDLL)
    {
LABEL_13:
      v11 = (char *)v2 - (char *)v3 - 8;
      if (v11 >= 8)
        goto LABEL_20;
      do
LABEL_23:
        *v5++ /= v4;
      while (v5 != v2);
      return this;
    }
  }
  else
  {
    v10 = this[1];
    if (v10 > 0x7FFFFFFFFFFFFFFDLL)
      goto LABEL_13;
  }
  this[1] = v10 / v4 - (v10 / v4 * v4 > v10);
  v11 = (char *)v2 - (char *)v3 - 8;
  if (v11 < 8)
    goto LABEL_23;
LABEL_20:
  v13 = (v11 >> 3) + 1;
  v5 = &v3[v13 & 0x3FFFFFFFFFFFFFFELL];
  v14 = v3 + 1;
  v15 = v13 & 0x3FFFFFFFFFFFFFFELL;
  do
  {
    v16 = *v14;
    *(v14 - 1) /= v4;
    *v14 = v16 / v4;
    v14 += 2;
    v15 -= 2;
  }
  while (v15);
  if (v13 != (v13 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_23;
  return this;
}

void operations_research::sat::RemoveZeroTerms(operations_research::sat *this, operations_research::sat::LinearConstraint *a2)
{
  std::vector<int> *v3;
  _DWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v4 = (_DWORD *)*((_QWORD *)this + 2);
  v5 = *((_QWORD *)this + 3);
  v3 = (std::vector<int> *)((char *)this + 16);
  v6 = v5 - (_QWORD)v4;
  v7 = (v5 - (uint64_t)v4) >> 2;
  if ((int)v7 < 1)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    v9 = (uint64_t *)*((_QWORD *)this + 5);
    v10 = (v6 >> 2);
    v11 = v4;
    v12 = v9;
    do
    {
      v14 = *v12++;
      v13 = v14;
      if (v14)
      {
        v4[v8] = *v11;
        v9[v8++] = v13;
      }
      ++v11;
      --v10;
    }
    while (v10);
  }
  v15 = v8;
  if (v8 <= v7)
  {
    if (v8 < v7)
      *((_QWORD *)this + 3) = &v4[v8];
  }
  else
  {
    std::vector<int>::__append(v3, v8 - v7);
  }
  v16 = *((_QWORD *)this + 5);
  v17 = (*((_QWORD *)this + 6) - v16) >> 3;
  if (v15 <= v17)
  {
    if (v15 < v17)
      *((_QWORD *)this + 6) = v16 + 8 * v15;
  }
  else
  {
    std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::__append((uint64_t)this + 40, v15 - v17);
  }
}

_QWORD *operations_research::sat::MakeAllCoefficientsPositive(_QWORD *this, operations_research::sat::LinearConstraint *a2)
{
  _DWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = (_DWORD *)this[2];
  v3 = this[3] - (_QWORD)v2;
  if ((int)(v3 >> 2) >= 1)
  {
    v4 = (_QWORD *)this[5];
    v5 = (v3 >> 2);
    do
    {
      if ((*v4 & 0x8000000000000000) != 0)
      {
        *v4 = -*v4;
        *v2 ^= 1u;
      }
      ++v4;
      ++v2;
      --v5;
    }
    while (v5);
  }
  return this;
}

void operations_research::sat::CanonicalizeConstraint(operations_research::sat *this, operations_research::sat::LinearConstraint *a2)
{
  unint64_t v3;
  int *v4;
  uint64_t v5;
  int *v6;
  int *v7;
  uint64_t v8;
  int *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  int *i;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  int *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _OWORD *v41;
  char *v42;
  uint64_t v43;
  __int128 v44;
  int v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _BYTE *v53;
  _QWORD *v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  char *v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  void **v65;
  char **v66;
  int *v67;
  int *v68;
  char v69;

  v68 = 0;
  v66 = (char **)((char *)this + 16);
  v3 = *((_QWORD *)this + 3) - *((_QWORD *)this + 2);
  if ((int)(v3 >> 2) >= 1)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = (v3 >> 2);
    v64 = v8;
    while (1)
    {
      while (1)
      {
        v10 = *(_DWORD *)&(*v66)[4 * v5];
        if ((v10 & 1) == 0)
          break;
        v10 ^= 1u;
        v11 = -*(_QWORD *)(*((_QWORD *)this + 5) + 8 * v5);
        if (v4 >= v6)
        {
          v15 = 0xAAAAAAAAAAAAAAABLL * (v4 - v7) + 1;
          if (v15 > 0x1555555555555555)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * (v6 - v7) > v15)
            v15 = 0x5555555555555556 * (v6 - v7);
          if (0xAAAAAAAAAAAAAAABLL * (v6 - v7) >= 0xAAAAAAAAAAAAAAALL)
            v13 = 0x1555555555555555;
          else
            v13 = v15;
          if (v13)
          {
            if (v13 > 0x1555555555555555)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v14 = (char *)operator new(12 * v13);
          }
          else
          {
            v14 = 0;
          }
          v16 = &v14[4 * (v4 - v7)];
          *(_DWORD *)v16 = v10;
          *(_QWORD *)(v16 + 4) = v11;
          for (i = (int *)v16; v4 != v7; i[2] = v21)
          {
            v20 = *(_QWORD *)(v4 - 3);
            v4 -= 3;
            v21 = v4[2];
            *(_QWORD *)(i - 3) = v20;
            i -= 3;
          }
          goto LABEL_28;
        }
LABEL_3:
        *v4 = v10;
        *(_QWORD *)(v4 + 1) = v11;
        v9 = v4 + 3;
        ++v5;
        v4 += 3;
        if (v5 == v8)
          goto LABEL_36;
      }
      v11 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v5);
      if (v4 < v6)
        goto LABEL_3;
      v12 = 0xAAAAAAAAAAAAAAABLL * (v4 - v7) + 1;
      if (v12 > 0x1555555555555555)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (v6 - v7) > v12)
        v12 = 0x5555555555555556 * (v6 - v7);
      if (0xAAAAAAAAAAAAAAABLL * (v6 - v7) >= 0xAAAAAAAAAAAAAAALL)
        v13 = 0x1555555555555555;
      else
        v13 = v12;
      if (v13)
      {
        if (v13 > 0x1555555555555555)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v14 = (char *)operator new(12 * v13);
      }
      else
      {
        v14 = 0;
      }
      v16 = &v14[4 * (v4 - v7)];
      *(_DWORD *)v16 = v10;
      *(_QWORD *)(v16 + 4) = v11;
      for (i = (int *)v16; v4 != v7; i[2] = v19)
      {
        v18 = *(_QWORD *)(v4 - 3);
        v4 -= 3;
        v19 = v4[2];
        *(_QWORD *)(i - 3) = v18;
        i -= 3;
      }
LABEL_28:
      v6 = (int *)&v14[12 * v13];
      v9 = (int *)(v16 + 12);
      if (v7)
        operator delete(v7);
      v7 = i;
      v8 = v64;
      ++v5;
      v4 = v9;
      if (v5 == v64)
      {
LABEL_36:
        v68 = v9;
        goto LABEL_38;
      }
    }
  }
  v9 = 0;
  v7 = 0;
LABEL_38:
  v22 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v9 - v7));
  v67 = v7;
  if (v9 == v7)
    v23 = 0;
  else
    v23 = v22;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *,false>((uint64_t)v7, v9, (uint64_t)&v69, v23, 1);
  v24 = (char *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 3) = *((_QWORD *)this + 2);
  v65 = (void **)((char *)this + 40);
  *((_QWORD *)this + 6) = v24;
  if (v7 == v68)
  {
    if (!v7)
      return;
    goto LABEL_43;
  }
  do
  {
    v27 = (char *)*((_QWORD *)this + 3);
    v26 = *((_QWORD *)this + 4);
    if ((unint64_t)v27 < v26)
    {
      *(_DWORD *)v27 = *v7;
      v28 = (uint64_t)(v27 + 4);
      goto LABEL_68;
    }
    v29 = *v66;
    v30 = v27 - *v66;
    v31 = v30 >> 2;
    v32 = (v30 >> 2) + 1;
    if (v32 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v33 = v26 - (_QWORD)v29;
    if (v33 >> 1 > v32)
      v32 = v33 >> 1;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
      v34 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    if (v34)
    {
      if (v34 >> 62)
        goto LABEL_97;
      v35 = operator new(4 * v34);
      v36 = (int *)&v35[4 * v31];
      *v36 = *v7;
      v28 = (uint64_t)(v36 + 1);
      if (v27 == v29)
        goto LABEL_66;
LABEL_60:
      v37 = v27 - 4 - v29;
      if (v37 < 0x2C)
        goto LABEL_106;
      if ((unint64_t)(v27 - &v35[v30]) < 0x20)
        goto LABEL_106;
      v38 = (v37 >> 2) + 1;
      v39 = 4 * (v38 & 0x7FFFFFFFFFFFFFF8);
      v40 = &v27[-v39];
      v36 = (int *)((char *)v36 - v39);
      v41 = &v35[4 * v31 - 16];
      v42 = v27 - 16;
      v43 = v38 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v44 = *(_OWORD *)v42;
        *(v41 - 1) = *((_OWORD *)v42 - 1);
        *v41 = v44;
        v41 -= 2;
        v42 -= 32;
        v43 -= 8;
      }
      while (v43);
      v27 = v40;
      if (v38 != (v38 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_106:
        do
        {
          v45 = *((_DWORD *)v27 - 1);
          v27 -= 4;
          *--v36 = v45;
        }
        while (v27 != v29);
      }
      goto LABEL_66;
    }
    v35 = 0;
    v36 = (int *)(4 * v31);
    *(_DWORD *)(4 * v31) = *v7;
    v28 = 4 * v31 + 4;
    if (v27 != v29)
      goto LABEL_60;
LABEL_66:
    *((_QWORD *)this + 2) = v36;
    *((_QWORD *)this + 3) = v28;
    *((_QWORD *)this + 4) = &v35[4 * v34];
    if (v29)
    {
      operator delete(v29);
      v24 = (char *)*((_QWORD *)this + 6);
    }
LABEL_68:
    *((_QWORD *)this + 3) = v28;
    v46 = *((_QWORD *)this + 7);
    if ((unint64_t)v24 < v46)
    {
      *(_QWORD *)v24 = *(_QWORD *)(v7 + 1);
      v25 = (uint64_t)(v24 + 8);
      goto LABEL_46;
    }
    v47 = (char *)*v65;
    v48 = v24 - (_BYTE *)*v65;
    v49 = v48 >> 3;
    v50 = (v48 >> 3) + 1;
    if (v50 >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v51 = v46 - (_QWORD)v47;
    if (v51 >> 2 > v50)
      v50 = v51 >> 2;
    if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
      v52 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v52 = v50;
    if (v52)
    {
      if (v52 >> 61)
LABEL_97:
        std::__throw_bad_array_new_length[abi:ne180100]();
      v53 = operator new(8 * v52);
      v54 = &v53[8 * v49];
      *v54 = *(_QWORD *)(v7 + 1);
      v25 = (uint64_t)(v54 + 1);
      if (v24 == v47)
        goto LABEL_83;
    }
    else
    {
      v53 = 0;
      v54 = (_QWORD *)(8 * v49);
      *(_QWORD *)(8 * v49) = *(_QWORD *)(v7 + 1);
      v25 = 8 * v49 + 8;
      if (v24 == v47)
        goto LABEL_83;
    }
    v55 = v24 - 8 - v47;
    if (v55 >= 0x168)
    {
      if (&v53[v48 - 8 - (v55 & 0xFFFFFFFFFFFFFFF8)] > &v53[v48 - 8])
      {
        v56 = v24;
      }
      else if (&v24[-(v55 & 0xFFFFFFFFFFFFFFF8) - 8] > v24 - 8)
      {
        v56 = v24;
      }
      else if ((unint64_t)(v24 - v53 - v48) >= 0x20)
      {
        v58 = (v55 >> 3) + 1;
        v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
        v56 = &v24[-v59];
        v54 = (_QWORD *)((char *)v54 - v59);
        v60 = &v53[8 * v49 - 16];
        v61 = v24 - 16;
        v62 = v58 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v63 = *(_OWORD *)v61;
          *(v60 - 1) = *((_OWORD *)v61 - 1);
          *v60 = v63;
          v60 -= 2;
          v61 -= 32;
          v62 -= 4;
        }
        while (v62);
        if (v58 == (v58 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_83;
      }
      else
      {
        v56 = v24;
      }
    }
    else
    {
      v56 = v24;
    }
    do
    {
      v57 = *((_QWORD *)v56 - 1);
      v56 -= 8;
      *--v54 = v57;
    }
    while (v56 != v47);
LABEL_83:
    *((_QWORD *)this + 5) = v54;
    *((_QWORD *)this + 6) = v25;
    *((_QWORD *)this + 7) = &v53[8 * v52];
    if (v47)
      operator delete(v47);
LABEL_46:
    *((_QWORD *)this + 6) = v25;
    v7 += 3;
    v24 = (char *)v25;
  }
  while (v7 != v68);
  v7 = v67;
  if (v67)
LABEL_43:
    operator delete(v7);
}

void sub_22DB87C00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *operations_research::sat::CanonicalizeExpr@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  int *v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  _DWORD *v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  int *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _OWORD *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  int v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  _QWORD *v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  _OWORD *v60;
  int *v61;
  uint64_t v62;
  __int128 v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _OWORD *v75;
  char *v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  _OWORD *v81;
  char *v82;
  uint64_t v83;
  __int128 v84;
  void **v85;
  _QWORD *v86;

  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_QWORD *)(a2 + 48) = result[6];
  v3 = *result;
  if (result[1] != *result)
  {
    v4 = 0;
    v5 = 0;
    v85 = (void **)(a2 + 24);
    v86 = result;
    while (1)
    {
      v8 = result[3];
      if ((*(_QWORD *)(v8 + 8 * v5) & 0x8000000000000000) != 0)
      {
        v12 = *(_DWORD *)(v3 + 4 * v5) ^ 1;
        v14 = *(int **)(a2 + 8);
        v13 = *(_QWORD *)(a2 + 16);
        if ((unint64_t)v14 < v13)
        {
          *v14 = v12;
          *(_QWORD *)(a2 + 8) = v14 + 1;
          v15 = -*(_QWORD *)(v8 + 8 * v5);
          v16 = *(_QWORD *)(a2 + 40);
          if ((unint64_t)v4 >= v16)
            goto LABEL_72;
LABEL_12:
          *(_QWORD *)v4 = v15;
          v6 = v4 + 8;
          goto LABEL_4;
        }
        v26 = *(int **)a2;
        v27 = (uint64_t)v14 - *(_QWORD *)a2;
        v28 = v27 >> 2;
        v29 = (v27 >> 2) + 1;
        if (v29 >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v30 = v13 - (_QWORD)v26;
        if (v30 >> 1 > v29)
          v29 = v30 >> 1;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
          v31 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        if (v31)
        {
          if (v31 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v32 = v31;
          v33 = operator new(4 * v31);
          v31 = v32;
          v34 = (int *)&v33[4 * v28];
          *v34 = v12;
          v35 = (uint64_t)(v34 + 1);
          if (v14 == v26)
          {
LABEL_70:
            *(_QWORD *)a2 = v34;
            *(_QWORD *)(a2 + 8) = v35;
            *(_QWORD *)(a2 + 16) = &v33[4 * v31];
            if (v26)
            {
              operator delete(v26);
              result = v86;
              v65 = v86[3];
              *(_QWORD *)(a2 + 8) = v35;
              v15 = -*(_QWORD *)(v65 + 8 * v5);
              v4 = *(char **)(a2 + 32);
              v16 = *(_QWORD *)(a2 + 40);
              if ((unint64_t)v4 >= v16)
                goto LABEL_72;
            }
            else
            {
              result = v86;
              *(_QWORD *)(a2 + 8) = v35;
              v15 = -*(_QWORD *)(v8 + 8 * v5);
              v16 = *(_QWORD *)(a2 + 40);
              if ((unint64_t)v4 >= v16)
              {
LABEL_72:
                v45 = (char *)*v85;
                v66 = v4 - (_BYTE *)*v85;
                v67 = v66 >> 3;
                v68 = (v66 >> 3) + 1;
                if (v68 >> 61)
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                v69 = v16 - (_QWORD)v45;
                if (v69 >> 2 > v68)
                  v68 = v69 >> 2;
                if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
                  v50 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v50 = v68;
                if (v50)
                {
                  if (v50 >> 61)
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  v51 = operator new(8 * v50);
                  v52 = &v51[8 * v67];
                  *v52 = v15;
                  v7 = (uint64_t)(v52 + 1);
                  if (v4 == v45)
                    goto LABEL_86;
LABEL_83:
                  v70 = v4 - 8 - v45;
                  if (v70 < 0x168)
                  {
                    v71 = v4;
                    goto LABEL_85;
                  }
                  if (&v51[v66 - 8 - (v70 & 0xFFFFFFFFFFFFFFF8)] > &v51[v66 - 8])
                  {
                    v71 = v4;
                    goto LABEL_85;
                  }
                  if (&v4[-(v70 & 0xFFFFFFFFFFFFFFF8) - 8] > v4 - 8)
                  {
                    v71 = v4;
                    goto LABEL_85;
                  }
                  if ((unint64_t)(v4 - &v51[v66]) < 0x20)
                  {
                    v71 = v4;
                    goto LABEL_85;
                  }
                  v79 = (v70 >> 3) + 1;
                  v80 = 8 * (v79 & 0x3FFFFFFFFFFFFFFCLL);
                  v71 = &v4[-v80];
                  v52 = (_QWORD *)((char *)v52 - v80);
                  v81 = &v51[8 * v67 - 16];
                  v82 = v4 - 16;
                  v83 = v79 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v84 = *(_OWORD *)v82;
                    *(v81 - 1) = *((_OWORD *)v82 - 1);
                    *v81 = v84;
                    v81 -= 2;
                    v82 -= 32;
                    v83 -= 4;
                  }
                  while (v83);
                  if (v79 != (v79 & 0x3FFFFFFFFFFFFFFCLL))
                  {
                    do
                    {
LABEL_85:
                      v72 = *((_QWORD *)v71 - 1);
                      v71 -= 8;
                      *--v52 = v72;
                    }
                    while (v71 != v45);
                  }
                }
                else
                {
                  v51 = 0;
                  v52 = (_QWORD *)(8 * v67);
                  *(_QWORD *)(8 * v67) = v15;
                  v7 = 8 * v67 + 8;
                  if (v4 != v45)
                    goto LABEL_83;
                }
LABEL_86:
                *(_QWORD *)(a2 + 24) = v52;
                *(_QWORD *)(a2 + 32) = v7;
                *(_QWORD *)(a2 + 40) = &v51[8 * v50];
                if (v45)
                  operator delete(v45);
                result = v86;
                goto LABEL_5;
              }
            }
            goto LABEL_12;
          }
        }
        else
        {
          v33 = 0;
          v34 = (int *)(4 * v28);
          *(_DWORD *)(4 * v28) = v12;
          v35 = 4 * v28 + 4;
          if (v14 == v26)
            goto LABEL_70;
        }
        v56 = (char *)(v14 - 1) - (char *)v26;
        if (v56 < 0x2C)
          goto LABEL_117;
        if ((unint64_t)((char *)v14 - &v33[v27]) < 0x20)
          goto LABEL_117;
        v57 = (v56 >> 2) + 1;
        v58 = 4 * (v57 & 0x7FFFFFFFFFFFFFF8);
        v59 = &v14[v58 / 0xFFFFFFFFFFFFFFFCLL];
        v34 = (int *)((char *)v34 - v58);
        v60 = &v33[4 * v28 - 16];
        v61 = v14 - 4;
        v62 = v57 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v63 = *(_OWORD *)v61;
          *(v60 - 1) = *((_OWORD *)v61 - 1);
          *v60 = v63;
          v60 -= 2;
          v61 -= 8;
          v62 -= 8;
        }
        while (v62);
        v14 = v59;
        if (v57 != (v57 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_117:
          do
          {
            v64 = *--v14;
            *--v34 = v64;
          }
          while (v14 != v26);
        }
        goto LABEL_70;
      }
      v10 = *(char **)(a2 + 8);
      v9 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v10 >= v9)
        break;
      *(_DWORD *)v10 = *(_DWORD *)(v3 + 4 * v5);
      *(_QWORD *)(a2 + 8) = v10 + 4;
      v11 = *(_QWORD *)(a2 + 40);
      if ((unint64_t)v4 >= v11)
        goto LABEL_44;
LABEL_3:
      *(_QWORD *)v4 = *(_QWORD *)(v8 + 8 * v5);
      v6 = v4 + 8;
LABEL_4:
      v7 = (uint64_t)v6;
LABEL_5:
      *(_QWORD *)(a2 + 32) = v7;
      ++v5;
      v3 = *result;
      v4 = (char *)v7;
      if (v5 >= (uint64_t)(result[1] - *result) >> 2)
        return result;
    }
    v17 = *(char **)a2;
    v18 = (uint64_t)&v10[-*(_QWORD *)a2];
    v19 = v18 >> 2;
    v20 = (v18 >> 2) + 1;
    if (v20 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v21 = v9 - (_QWORD)v17;
    if (v21 >> 1 > v20)
      v20 = v21 >> 1;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
      v22 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 >> 62)
        goto LABEL_108;
      v23 = operator new(4 * v22);
      v24 = &v23[4 * v19];
      *v24 = *(_DWORD *)(v3 + 4 * v5);
      v25 = (uint64_t)(v24 + 1);
      if (v10 == v17)
      {
LABEL_40:
        *(_QWORD *)a2 = v24;
        *(_QWORD *)(a2 + 8) = v25;
        *(_QWORD *)(a2 + 16) = &v23[4 * v22];
        if (v17)
        {
          operator delete(v17);
          result = v86;
          v8 = v86[3];
          v4 = *(char **)(a2 + 32);
          v11 = *(_QWORD *)(a2 + 40);
          *(_QWORD *)(a2 + 8) = v25;
          if ((unint64_t)v4 >= v11)
            goto LABEL_44;
        }
        else
        {
          result = v86;
          *(_QWORD *)(a2 + 8) = v25;
          v11 = *(_QWORD *)(a2 + 40);
          if ((unint64_t)v4 >= v11)
          {
LABEL_44:
            v45 = (char *)*v85;
            v46 = v4 - (_BYTE *)*v85;
            v47 = v46 >> 3;
            v48 = (v46 >> 3) + 1;
            if (v48 >> 61)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v49 = v11 - (_QWORD)v45;
            if (v49 >> 2 > v48)
              v48 = v49 >> 2;
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
              v50 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v50 = v48;
            if (v50)
            {
              if (v50 >> 61)
LABEL_108:
                std::__throw_bad_array_new_length[abi:ne180100]();
              v51 = operator new(8 * v50);
              v52 = &v51[8 * v47];
              *v52 = *(_QWORD *)(v8 + 8 * v5);
              v7 = (uint64_t)(v52 + 1);
              if (v4 == v45)
                goto LABEL_86;
            }
            else
            {
              v51 = 0;
              v52 = (_QWORD *)(8 * v47);
              *(_QWORD *)(8 * v47) = *(_QWORD *)(v8 + 8 * v5);
              v7 = 8 * v47 + 8;
              if (v4 == v45)
                goto LABEL_86;
            }
            v53 = v4 - 8 - v45;
            if (v53 >= 0x168)
            {
              if (&v51[v46 - 8 - (v53 & 0xFFFFFFFFFFFFFFF8)] > &v51[v46 - 8])
              {
                v54 = v4;
              }
              else if (&v4[-(v53 & 0xFFFFFFFFFFFFFFF8) - 8] > v4 - 8)
              {
                v54 = v4;
              }
              else if ((unint64_t)(v4 - v51 - v46) >= 0x20)
              {
                v73 = (v53 >> 3) + 1;
                v74 = 8 * (v73 & 0x3FFFFFFFFFFFFFFCLL);
                v54 = &v4[-v74];
                v52 = (_QWORD *)((char *)v52 - v74);
                v75 = &v51[8 * v47 - 16];
                v76 = v4 - 16;
                v77 = v73 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v78 = *(_OWORD *)v76;
                  *(v75 - 1) = *((_OWORD *)v76 - 1);
                  *v75 = v78;
                  v75 -= 2;
                  v76 -= 32;
                  v77 -= 4;
                }
                while (v77);
                if (v73 == (v73 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_86;
              }
              else
              {
                v54 = v4;
              }
            }
            else
            {
              v54 = v4;
            }
            do
            {
              v55 = *((_QWORD *)v54 - 1);
              v54 -= 8;
              *--v52 = v55;
            }
            while (v54 != v45);
            goto LABEL_86;
          }
        }
        goto LABEL_3;
      }
    }
    else
    {
      v23 = 0;
      v24 = (_DWORD *)(4 * v19);
      *(_DWORD *)(4 * v19) = *(_DWORD *)(v3 + 4 * v5);
      v25 = 4 * v19 + 4;
      if (v10 == v17)
        goto LABEL_40;
    }
    v36 = v10 - 4 - v17;
    if (v36 < 0x2C)
      goto LABEL_118;
    if ((unint64_t)(v10 - &v23[v18]) < 0x20)
      goto LABEL_118;
    v37 = (v36 >> 2) + 1;
    v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
    v39 = &v10[-v38];
    v24 = (_DWORD *)((char *)v24 - v38);
    v40 = &v23[4 * v19 - 16];
    v41 = v10 - 16;
    v42 = v37 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v43 = *(_OWORD *)v41;
      *(v40 - 1) = *((_OWORD *)v41 - 1);
      *v40 = v43;
      v40 -= 2;
      v41 -= 32;
      v42 -= 8;
    }
    while (v42);
    v10 = v39;
    if (v37 != (v37 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_118:
      do
      {
        v44 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *--v24 = v44;
      }
      while (v10 != v17);
    }
    goto LABEL_40;
  }
  return result;
}

void sub_22DB882F4(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr *v1;

  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_22DB88308(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr *v1;

  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_22DB8831C(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr *v1;

  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_22DB88330(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr *v1;

  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_22DB88344(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr *v1;

  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_22DB88358(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr *v1;

  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::LinExprLowerBound(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int *v12;
  unint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  result = a1[6];
  v4 = *a1;
  v5 = a1[1] - *a1;
  if (v5)
  {
    v6 = v5 >> 2;
    v7 = a1[3];
    v8 = *(_QWORD *)(a2 + 40);
    if (v6 <= 1)
      v6 = 1;
    if (v6 < 2)
    {
      v9 = 0;
LABEL_9:
      v14 = (_DWORD *)(v4 + 4 * v9);
      v15 = v6 - v9;
      v16 = (uint64_t *)(v7 + 8 * v9);
      do
      {
        v18 = *v16++;
        v17 = v18;
        LODWORD(v18) = *v14++;
        result += *(_QWORD *)(v8 + 12 * (int)v18) * v17;
        --v15;
      }
      while (v15);
      return result;
    }
    v10 = 0;
    v9 = v6 & 0xFFFFFFFFFFFFFFFELL;
    v11 = (_QWORD *)(v7 + 8);
    v12 = (int *)(v4 + 4);
    v13 = v6 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      result += *(_QWORD *)(v8 + 12 * *(v12 - 1)) * *(v11 - 1);
      v10 += *(_QWORD *)(v8 + 12 * *v12) * *v11;
      v11 += 2;
      v12 += 2;
      v13 -= 2;
    }
    while (v13);
    result += v10;
    if (v6 != v9)
      goto LABEL_9;
  }
  return result;
}

uint64_t operations_research::sat::LinExprUpperBound(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _DWORD *v12;
  unint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  result = a1[6];
  v4 = *a1;
  v5 = a1[1] - *a1;
  if (v5)
  {
    v6 = v5 >> 2;
    v7 = a1[3];
    v8 = *(_QWORD *)(a2 + 40);
    if (v6 <= 1)
      v6 = 1;
    if (v6 < 2)
    {
      v9 = 0;
LABEL_9:
      v14 = (_DWORD *)(v4 + 4 * v9);
      v15 = v6 - v9;
      v16 = (uint64_t *)(v7 + 8 * v9);
      do
      {
        v18 = *v16++;
        v17 = v18;
        LODWORD(v18) = *v14++;
        result -= *(_QWORD *)(v8 + 12 * (int)(v18 ^ 1)) * v17;
        --v15;
      }
      while (v15);
      return result;
    }
    v10 = 0;
    v9 = v6 & 0xFFFFFFFFFFFFFFFELL;
    v11 = (_QWORD *)(v7 + 8);
    v12 = (_DWORD *)(v4 + 4);
    v13 = v6 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      result -= *(_QWORD *)(v8 + 12 * (*(v12 - 1) ^ 1)) * *(v11 - 1);
      v10 -= *(_QWORD *)(v8 + 12 * (*v12 ^ 1)) * *v11;
      v11 += 2;
      v12 += 2;
      v13 -= 2;
    }
    while (v13);
    result += v10;
    if (v6 != v9)
      goto LABEL_9;
  }
  return result;
}

void operations_research::sat::NegationOf(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  __int128 v5;
  uint64_t v6;

  *(_QWORD *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  operations_research::sat::NegationOf((int8x16_t **)a1, (int8x16_t **)&v5);
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  *(_OWORD *)a2 = v5;
  *(_QWORD *)(a2 + 16) = v6;
  if (a2 != a1)
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((_QWORD *)(a2 + 24), *(char **)(a1 + 24), *(char **)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3);
  *(_QWORD *)(a2 + 48) = -*(_QWORD *)(a1 + 48);
}

void sub_22DB88580(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr *v1;

  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_22DB88594(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr *v1;

  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void operations_research::sat::PositiveVarExpr(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  int *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _DWORD *v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  int *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  _OWORD *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _BYTE *v50;
  _QWORD *v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  _OWORD *v59;
  int *v60;
  uint64_t v61;
  __int128 v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _OWORD *v75;
  char *v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  _OWORD *v81;
  char *v82;
  uint64_t v83;
  __int128 v84;
  void **v85;

  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_QWORD *)(a2 + 48) = a1[6];
  v3 = *a1;
  if (a1[1] != *a1)
  {
    v4 = a1;
    v5 = 0;
    v6 = 0;
    v85 = (void **)(a2 + 24);
    while (1)
    {
      v8 = *(_DWORD *)(v3 + 4 * v6);
      if ((v8 & 1) != 0)
      {
        v12 = v8 ^ 1;
        v14 = *(int **)(a2 + 8);
        v13 = *(_QWORD *)(a2 + 16);
        if ((unint64_t)v14 < v13)
        {
          *v14 = v12;
          v15 = (uint64_t)(v14 + 1);
LABEL_66:
          *(_QWORD *)(a2 + 8) = v15;
          v64 = -*(_QWORD *)(v4[3] + 8 * v6);
          v65 = *(_QWORD *)(a2 + 40);
          if ((unint64_t)v5 >= v65)
          {
            v44 = (char *)*v85;
            v66 = v5 - (_BYTE *)*v85;
            v67 = v66 >> 3;
            v68 = (v66 >> 3) + 1;
            if (v68 >> 61)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v69 = v65 - (_QWORD)v44;
            if (v69 >> 2 > v68)
              v68 = v69 >> 2;
            if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
              v49 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v49 = v68;
            if (v49)
            {
              if (v49 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v50 = operator new(8 * v49);
              v51 = &v50[8 * v67];
              *v51 = v64;
              v7 = (uint64_t)(v51 + 1);
              if (v5 == v44)
                goto LABEL_81;
LABEL_78:
              v70 = v5 - 8 - v44;
              if (v70 < 0x168)
              {
                v71 = v5;
                goto LABEL_80;
              }
              if (&v50[v66 - 8 - (v70 & 0xFFFFFFFFFFFFFFF8)] > &v50[v66 - 8])
              {
                v71 = v5;
                goto LABEL_80;
              }
              if (&v5[-(v70 & 0xFFFFFFFFFFFFFFF8) - 8] > v5 - 8)
              {
                v71 = v5;
                goto LABEL_80;
              }
              if ((unint64_t)(v5 - &v50[v66]) < 0x20)
              {
                v71 = v5;
                goto LABEL_80;
              }
              v79 = (v70 >> 3) + 1;
              v80 = 8 * (v79 & 0x3FFFFFFFFFFFFFFCLL);
              v71 = &v5[-v80];
              v51 = (_QWORD *)((char *)v51 - v80);
              v81 = &v50[8 * v67 - 16];
              v82 = v5 - 16;
              v83 = v79 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v84 = *(_OWORD *)v82;
                *(v81 - 1) = *((_OWORD *)v82 - 1);
                *v81 = v84;
                v81 -= 2;
                v82 -= 32;
                v83 -= 4;
              }
              while (v83);
              if (v79 != (v79 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_80:
                  v72 = *((_QWORD *)v71 - 1);
                  v71 -= 8;
                  *--v51 = v72;
                }
                while (v71 != v44);
              }
            }
            else
            {
              v50 = 0;
              v51 = (_QWORD *)(8 * v67);
              *(_QWORD *)(8 * v67) = v64;
              v7 = 8 * v67 + 8;
              if (v5 != v44)
                goto LABEL_78;
            }
            goto LABEL_81;
          }
          *(_QWORD *)v5 = v64;
          v7 = (uint64_t)(v5 + 8);
          goto LABEL_4;
        }
        v24 = *(int **)a2;
        v25 = (uint64_t)v14 - *(_QWORD *)a2;
        v26 = v25 >> 2;
        v27 = (v25 >> 2) + 1;
        if (v27 >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v28 = v13 - (_QWORD)v24;
        if (v28 >> 1 > v27)
          v27 = v28 >> 1;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
          v29 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v29 = v27;
        if (v29)
        {
          if (v29 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v30 = operator new(4 * v29);
          v31 = (int *)&v30[4 * v26];
          *v31 = v12;
          v15 = (uint64_t)(v31 + 1);
          if (v14 != v24)
          {
LABEL_29:
            v32 = (char *)(v14 - 1) - (char *)v24;
            if (v32 < 0x2C)
            {
              v4 = a1;
              goto LABEL_63;
            }
            v55 = (char *)v14 - &v30[v25];
            v4 = a1;
            if (v55 < 0x20)
              goto LABEL_113;
            v56 = (v32 >> 2) + 1;
            v57 = 4 * (v56 & 0x7FFFFFFFFFFFFFF8);
            v58 = &v14[v57 / 0xFFFFFFFFFFFFFFFCLL];
            v31 = (int *)((char *)v31 - v57);
            v59 = &v30[4 * v26 - 16];
            v60 = v14 - 4;
            v61 = v56 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v62 = *(_OWORD *)v60;
              *(v59 - 1) = *((_OWORD *)v60 - 1);
              *v59 = v62;
              v59 -= 2;
              v60 -= 8;
              v61 -= 8;
            }
            while (v61);
            v14 = v58;
            if (v56 != (v56 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_113:
              do
              {
LABEL_63:
                v63 = *--v14;
                *--v31 = v63;
              }
              while (v14 != v24);
            }
LABEL_64:
            *(_QWORD *)a2 = v31;
            *(_QWORD *)(a2 + 8) = v15;
            *(_QWORD *)(a2 + 16) = &v30[4 * v29];
            if (v24)
            {
              operator delete(v24);
              v5 = *(char **)(a2 + 32);
            }
            goto LABEL_66;
          }
        }
        else
        {
          v30 = 0;
          v31 = (int *)(4 * v26);
          *(_DWORD *)(4 * v26) = v12;
          v15 = 4 * v26 + 4;
          if (v14 != v24)
            goto LABEL_29;
        }
        v4 = a1;
        goto LABEL_64;
      }
      v10 = *(char **)(a2 + 8);
      v9 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v10 >= v9)
        break;
      *(_DWORD *)v10 = v8;
      v11 = (uint64_t)(v10 + 4);
LABEL_40:
      *(_QWORD *)(a2 + 8) = v11;
      v42 = v4[3];
      v43 = *(_QWORD *)(a2 + 40);
      if ((unint64_t)v5 >= v43)
      {
        v44 = (char *)*v85;
        v45 = v5 - (_BYTE *)*v85;
        v46 = v45 >> 3;
        v47 = (v45 >> 3) + 1;
        if (v47 >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v48 = v43 - (_QWORD)v44;
        if (v48 >> 2 > v47)
          v47 = v48 >> 2;
        if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
          v49 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v49 = v47;
        if (v49)
        {
          if (v49 >> 61)
LABEL_104:
            std::__throw_bad_array_new_length[abi:ne180100]();
          v50 = operator new(8 * v49);
          v51 = &v50[8 * v46];
          *v51 = *(_QWORD *)(v42 + 8 * v6);
          v7 = (uint64_t)(v51 + 1);
          if (v5 != v44)
            goto LABEL_51;
        }
        else
        {
          v50 = 0;
          v51 = (_QWORD *)(8 * v46);
          *(_QWORD *)(8 * v46) = *(_QWORD *)(v42 + 8 * v6);
          v7 = 8 * v46 + 8;
          if (v5 != v44)
          {
LABEL_51:
            v52 = v5 - 8 - v44;
            v4 = a1;
            if (v52 >= 0x168)
            {
              if (&v50[v45 - 8 - (v52 & 0xFFFFFFFFFFFFFFF8)] > &v50[v45 - 8])
              {
                v53 = v5;
              }
              else if (&v5[-(v52 & 0xFFFFFFFFFFFFFFF8) - 8] > v5 - 8)
              {
                v53 = v5;
              }
              else if ((unint64_t)(v5 - v50 - v45) >= 0x20)
              {
                v73 = (v52 >> 3) + 1;
                v74 = 8 * (v73 & 0x3FFFFFFFFFFFFFFCLL);
                v53 = &v5[-v74];
                v51 = (_QWORD *)((char *)v51 - v74);
                v75 = &v50[8 * v46 - 16];
                v76 = v5 - 16;
                v77 = v73 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v78 = *(_OWORD *)v76;
                  *(v75 - 1) = *((_OWORD *)v76 - 1);
                  *v75 = v78;
                  v75 -= 2;
                  v76 -= 32;
                  v77 -= 4;
                }
                while (v77);
                if (v73 == (v73 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_81;
              }
              else
              {
                v53 = v5;
              }
            }
            else
            {
              v53 = v5;
            }
            do
            {
              v54 = *((_QWORD *)v53 - 1);
              v53 -= 8;
              *--v51 = v54;
            }
            while (v53 != v44);
LABEL_81:
            *(_QWORD *)(a2 + 24) = v51;
            *(_QWORD *)(a2 + 32) = v7;
            *(_QWORD *)(a2 + 40) = &v50[8 * v49];
            if (v44)
              operator delete(v44);
            goto LABEL_4;
          }
        }
        v4 = a1;
        goto LABEL_81;
      }
      *(_QWORD *)v5 = *(_QWORD *)(v42 + 8 * v6);
      v7 = (uint64_t)(v5 + 8);
      v4 = a1;
LABEL_4:
      *(_QWORD *)(a2 + 32) = v7;
      ++v6;
      v3 = *v4;
      v5 = (char *)v7;
      if (v6 >= (v4[1] - *v4) >> 2)
        return;
    }
    v16 = *(int **)a2;
    v17 = (uint64_t)&v10[-*(_QWORD *)a2];
    v18 = v17 >> 2;
    v19 = (v17 >> 2) + 1;
    if (v19 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v20 = v9 - (_QWORD)v16;
    if (v20 >> 1 > v19)
      v19 = v20 >> 1;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
      v21 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 >> 62)
        goto LABEL_104;
      v22 = operator new(4 * v21);
      v4 = a1;
      v23 = &v22[4 * v18];
      *v23 = *(_DWORD *)(v3 + 4 * v6);
      v11 = (uint64_t)(v23 + 1);
      if (v10 == (char *)v16)
        goto LABEL_38;
    }
    else
    {
      v22 = 0;
      v23 = (_DWORD *)(4 * v18);
      *(_DWORD *)(4 * v18) = v8;
      v11 = 4 * v18 + 4;
      if (v10 == (char *)v16)
      {
LABEL_38:
        *(_QWORD *)a2 = v23;
        *(_QWORD *)(a2 + 8) = v11;
        *(_QWORD *)(a2 + 16) = &v22[4 * v21];
        if (v16)
        {
          operator delete(v16);
          v5 = *(char **)(a2 + 32);
        }
        goto LABEL_40;
      }
    }
    v33 = v10 - 4 - (char *)v16;
    if (v33 < 0x2C)
      goto LABEL_114;
    if ((unint64_t)(v10 - &v22[v17]) < 0x20)
      goto LABEL_114;
    v34 = (v33 >> 2) + 1;
    v35 = 4 * (v34 & 0x7FFFFFFFFFFFFFF8);
    v36 = &v10[-v35];
    v23 = (_DWORD *)((char *)v23 - v35);
    v37 = &v22[4 * v18 - 16];
    v38 = v10 - 16;
    v39 = v34 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v40 = *(_OWORD *)v38;
      *(v37 - 1) = *((_OWORD *)v38 - 1);
      *v37 = v40;
      v37 -= 2;
      v38 -= 32;
      v39 -= 8;
    }
    while (v39);
    v10 = v36;
    if (v34 != (v34 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_114:
      do
      {
        v41 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *--v23 = v41;
      }
      while (v10 != (char *)v16);
    }
    goto LABEL_38;
  }
}

void sub_22DB88C08(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr *v1;

  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_22DB88C1C(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr *v1;

  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_22DB88C30(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr *v1;

  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_22DB88C44(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr *v1;

  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_22DB88C58(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr *v1;

  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_22DB88C6C(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr *v1;

  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::GetCoefficient(int a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = a2[1];
  v3 = v2 - *a2;
  if (v2 == *a2)
    return 0;
  v4 = 0;
  v5 = v3 >> 2;
  if ((unint64_t)(v3 >> 2) <= 1)
    v5 = 1;
  while (1)
  {
    v6 = *(_DWORD *)(*a2 + 4 * v4);
    if (v6 == a1)
      return *(_QWORD *)(a2[3] + 8 * v4);
    if (v6 == (a1 ^ 1))
      break;
    if (v5 == ++v4)
      return 0;
  }
  return -*(_QWORD *)(a2[3] + 8 * v4);
}

uint64_t operations_research::sat::GetCoefficientOfPositiveVar(int a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v7;
  _BYTE v8[16];

  if ((a1 & 1) != 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v8, (google::glog_internal_namespace_ *)"./ortools/sat/linear_constraint.cc", 343);
    v7 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: VariableIsPositive(var) ", 38);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v8);
  }
  v2 = a2[1];
  v3 = v2 - *a2;
  if (v2 == *a2)
    return 0;
  v4 = 0;
  v5 = v3 >> 2;
  if (v5 <= 1)
    v5 = 1;
  while (*(_DWORD *)(*a2 + 4 * v4) != a1)
  {
    if (v5 == ++v4)
      return 0;
  }
  return *(_QWORD *)(a2[3] + 8 * v4);
}

void sub_22DB88D80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *,false>(uint64_t result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  char v21;
  BOOL v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int *v37;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  int *v54;
  unint64_t v55;
  uint64_t i;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t j;
  int *v63;

  v8 = result;
LABEL_2:
  v63 = a2 - 3;
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = 0xAAAAAAAAAAAAAAABLL * (v12 >> 2);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v23 = *(a2 - 3);
        v24 = *(_DWORD *)v8;
        if (v23 < *(_DWORD *)v8)
        {
          v25 = *(_QWORD *)(v8 + 4);
          v26 = *((_QWORD *)a2 - 1);
LABEL_25:
          *(_DWORD *)v8 = v23;
          *(a2 - 3) = v24;
          *(_QWORD *)(v8 + 4) = v26;
          *((_QWORD *)a2 - 1) = v25;
          return result;
        }
        if (v24 >= v23)
        {
          v26 = *((_QWORD *)a2 - 1);
          v25 = *(_QWORD *)(v8 + 4);
          if (v26 < v25)
            goto LABEL_25;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>((int *)v8, (int *)(v8 + 12), v63);
      case 4uLL:
        result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>((int *)v8, (int *)(v8 + 12), (int *)(v8 + 24));
        v27 = *(a2 - 3);
        v28 = *(_DWORD *)(v8 + 24);
        if (v27 >= v28)
        {
          if (v28 < v27)
            return result;
          v30 = *((_QWORD *)a2 - 1);
          v29 = *(_QWORD *)(v8 + 28);
          if (v30 >= v29)
            return result;
        }
        else
        {
          v29 = *(_QWORD *)(v8 + 28);
          v30 = *((_QWORD *)a2 - 1);
        }
        *(_DWORD *)(v8 + 24) = v27;
        *(a2 - 3) = v28;
        *(_QWORD *)(v8 + 28) = v30;
        *((_QWORD *)a2 - 1) = v29;
        v31 = *(_DWORD *)(v8 + 24);
        v32 = *(_DWORD *)(v8 + 12);
        if (v31 >= v32)
        {
          if (v32 < v31)
            return result;
          v34 = *(_QWORD *)(v8 + 28);
          v33 = *(_QWORD *)(v8 + 16);
          if (v34 >= v33)
            return result;
        }
        else
        {
          v33 = *(_QWORD *)(v8 + 16);
          v34 = *(_QWORD *)(v8 + 28);
        }
        *(_DWORD *)(v8 + 12) = v31;
        *(_DWORD *)(v8 + 24) = v32;
        *(_QWORD *)(v8 + 16) = v34;
        *(_QWORD *)(v8 + 28) = v33;
        v35 = *(_DWORD *)v8;
        if (v31 < *(_DWORD *)v8)
        {
          v36 = *(_QWORD *)(v8 + 4);
LABEL_90:
          *(_DWORD *)v8 = v31;
          *(_DWORD *)(v8 + 12) = v35;
          *(_QWORD *)(v8 + 4) = v34;
          *(_QWORD *)(v8 + 16) = v36;
          return result;
        }
        if (v35 >= v31)
        {
          v36 = *(_QWORD *)(v8 + 4);
          if (v34 < v36)
            goto LABEL_90;
        }
        return result;
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>(v8, v8 + 12, v8 + 24, v8 + 36, v63);
      default:
        if (v12 > 287)
        {
          if (v10 == 1)
          {
            if ((int *)v8 != a2)
            {
              v52 = (v13 - 2) >> 1;
              v53 = v52 + 1;
              v54 = (int *)(v8 + 12 * v52);
              do
              {
                std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>(v8, a3, v13, v54);
                v54 -= 3;
                --v53;
              }
              while (v53);
              v55 = v12 / 0xCuLL;
              do
              {
                result = (uint64_t)std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>((int *)v8, (uint64_t)a2, a3, v55);
                a2 -= 3;
              }
              while (v55-- > 2);
            }
            return result;
          }
          v14 = v13 >> 1;
          v15 = (int *)(v8 + 12 * (v13 >> 1));
          if ((unint64_t)v12 < 0x601)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>(v15, (int *)v8, v63);
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>((int *)v8, v15, v63);
            v16 = v8 + 12 * v14;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>((int *)(v8 + 12), (int *)(v16 - 12), a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>((int *)(v8 + 24), (int *)(v8 + 12 + 12 * v14), a2 - 9);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>((int *)(v16 - 12), v15, (int *)(v8 + 12 + 12 * v14));
            v17 = *(_DWORD *)v8;
            *(_DWORD *)v8 = *v15;
            *v15 = v17;
            v18 = *(_QWORD *)(v8 + 4);
            *(_QWORD *)(v8 + 4) = *(_QWORD *)(v16 + 4);
            *(_QWORD *)(v16 + 4) = v18;
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          v19 = *(_DWORD *)(v8 - 12);
          if (v19 >= *(_DWORD *)v8 && (*(_DWORD *)v8 < v19 || *(_QWORD *)(v8 - 8) >= *(_QWORD *)(v8 + 4)))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *,std::__less<void,void> &>((int *)v8, a2);
            v9 = result;
            goto LABEL_19;
          }
LABEL_14:
          v20 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *,std::__less<void,void> &>((int *)v8, (unint64_t)a2);
          if ((v21 & 1) == 0)
            goto LABEL_17;
          v22 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>(v8, v20);
          v9 = v20 + 12;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>(v20 + 12, (uint64_t)a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v22)
              continue;
LABEL_17:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *,false>(v8, v20, a3, -v11, a5 & 1);
            v9 = v20 + 12;
LABEL_19:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = (int *)v20;
          if (v22)
            return result;
          goto LABEL_2;
        }
        v37 = (int *)(v8 + 12);
        v39 = (int *)v8 == a2 || v37 == a2;
        if ((a5 & 1) != 0)
        {
          if (v39)
            return result;
          v40 = 0;
          v41 = v8;
LABEL_46:
          v43 = v41;
          v41 = (uint64_t)v37;
          v44 = *(_DWORD *)(v43 + 12);
          v45 = *(_DWORD *)v43;
          if (v44 >= *(_DWORD *)v43)
          {
            if (v45 < v44)
              goto LABEL_45;
            v46 = *(_QWORD *)(v43 + 16);
            v47 = *(_QWORD *)(v43 + 4);
            if (v46 >= v47)
              goto LABEL_45;
          }
          else
          {
            v46 = *(_QWORD *)(v43 + 16);
            v47 = *(_QWORD *)(v43 + 4);
          }
          *(_DWORD *)(v43 + 12) = v45;
          *(_QWORD *)(v41 + 4) = v47;
          v42 = v8;
          if (v43 == v8)
            goto LABEL_44;
          v48 = v40;
          while (1)
          {
            v51 = *(_DWORD *)(v8 + v48 - 12);
            if (v44 < v51)
            {
              v49 = *(_QWORD *)(v8 + v48 - 8);
            }
            else
            {
              if (v51 < v44)
              {
                v42 = v8 + v48;
LABEL_44:
                *(_DWORD *)v42 = v44;
                *(_QWORD *)(v42 + 4) = v46;
LABEL_45:
                v37 = (int *)(v41 + 12);
                v40 += 12;
                if ((int *)(v41 + 12) == a2)
                  return result;
                goto LABEL_46;
              }
              v49 = *(_QWORD *)(v8 + v48 - 8);
              if (v46 >= v49)
              {
                v42 = v43;
                goto LABEL_44;
              }
            }
            v43 -= 12;
            v50 = v8 + v48;
            *(_DWORD *)v50 = v51;
            *(_QWORD *)(v50 + 4) = v49;
            v48 -= 12;
            if (!v48)
            {
              v42 = v8;
              goto LABEL_44;
            }
          }
        }
        if (!v39)
        {
          for (i = v8 + 4; ; i += 12)
          {
            v58 = v8;
            v8 = (uint64_t)v37;
            v59 = *(_DWORD *)(v58 + 12);
            v60 = *(_DWORD *)v58;
            if (v59 < *(_DWORD *)v58)
              break;
            if (v60 >= v59)
            {
              v61 = *(_QWORD *)(v58 + 16);
              if (v61 < *(_QWORD *)(v58 + 4))
                goto LABEL_79;
            }
LABEL_74:
            v37 = (int *)(v8 + 12);
            if ((int *)(v8 + 12) == a2)
              return result;
          }
          v61 = *(_QWORD *)(v58 + 16);
LABEL_79:
          for (j = i; ; j -= 12)
          {
            *(_DWORD *)(j + 8) = v60;
            *(_QWORD *)(j + 12) = *(_QWORD *)j;
            v60 = *(_DWORD *)(j - 16);
            if (v59 >= v60 && (v60 < v59 || v61 >= *(_QWORD *)(j - 12)))
              break;
          }
          *(_DWORD *)(j - 4) = v59;
          *(_QWORD *)j = v61;
          goto LABEL_74;
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 2);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v19 = *(_DWORD *)(a2 - 12);
      v20 = *(_DWORD *)a1;
      if (v19 < *(_DWORD *)a1)
      {
        v21 = *(_QWORD *)(a1 + 4);
        v22 = *(_QWORD *)(a2 - 8);
LABEL_24:
        *(_DWORD *)a1 = v19;
        *(_DWORD *)(a2 - 12) = v20;
        *(_QWORD *)(a1 + 4) = v22;
        *(_QWORD *)(a2 - 8) = v21;
        return result;
      }
      if (v20 >= v19)
      {
        v22 = *(_QWORD *)(a2 - 8);
        v21 = *(_QWORD *)(a1 + 4);
        if (v22 < v21)
          goto LABEL_24;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>((int *)a1, (int *)(a1 + 12), (int *)(a2 - 12));
      return 1;
    case 4uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>((int *)a1, (int *)(a1 + 12), (int *)(a1 + 24));
      v23 = *(_DWORD *)(a2 - 12);
      v24 = *(_DWORD *)(a1 + 24);
      if (v23 >= v24)
      {
        if (v24 < v23)
          return 1;
        v26 = *(_QWORD *)(a2 - 8);
        v25 = *(_QWORD *)(a1 + 28);
        if (v26 >= v25)
          return 1;
      }
      else
      {
        v25 = *(_QWORD *)(a1 + 28);
        v26 = *(_QWORD *)(a2 - 8);
      }
      *(_DWORD *)(a1 + 24) = v23;
      *(_DWORD *)(a2 - 12) = v24;
      *(_QWORD *)(a1 + 28) = v26;
      *(_QWORD *)(a2 - 8) = v25;
      v27 = *(_DWORD *)(a1 + 24);
      v28 = *(_DWORD *)(a1 + 12);
      if (v27 >= v28)
      {
        if (v28 < v27)
          return 1;
        v30 = *(_QWORD *)(a1 + 28);
        v29 = *(_QWORD *)(a1 + 16);
        if (v30 >= v29)
          return 1;
      }
      else
      {
        v29 = *(_QWORD *)(a1 + 16);
        v30 = *(_QWORD *)(a1 + 28);
      }
      *(_DWORD *)(a1 + 12) = v27;
      *(_DWORD *)(a1 + 24) = v28;
      *(_QWORD *)(a1 + 16) = v30;
      *(_QWORD *)(a1 + 28) = v29;
      v31 = *(_DWORD *)a1;
      if (v27 < *(_DWORD *)a1)
      {
        v32 = *(_QWORD *)(a1 + 4);
LABEL_46:
        *(_DWORD *)a1 = v27;
        *(_DWORD *)(a1 + 12) = v31;
        *(_QWORD *)(a1 + 4) = v30;
        result = 1;
        *(_QWORD *)(a1 + 16) = v32;
        return result;
      }
      if (v31 >= v27)
      {
        v32 = *(_QWORD *)(a1 + 4);
        if (v30 < v32)
          goto LABEL_46;
      }
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>(a1, a1 + 12, a1 + 24, a1 + 36, (int *)(a2 - 12));
      return 1;
    default:
      v6 = a1 + 24;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>((int *)a1, (int *)(a1 + 12), (int *)(a1 + 24));
      v7 = a1 + 36;
      if (a1 + 36 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      while (2)
      {
        v11 = *(_DWORD *)v7;
        v12 = *(_DWORD *)v6;
        if (*(_DWORD *)v7 >= *(_DWORD *)v6)
        {
          if (v12 < v11)
            goto LABEL_7;
          v13 = *(_QWORD *)(v7 + 4);
          v14 = *(_QWORD *)(v6 + 4);
          if (v13 >= v14)
            goto LABEL_7;
        }
        else
        {
          v13 = *(_QWORD *)(v7 + 4);
          v14 = *(_QWORD *)(v6 + 4);
        }
        *(_DWORD *)v7 = v12;
        *(_QWORD *)(v7 + 4) = v14;
        v10 = a1;
        if (v6 == a1)
          goto LABEL_6;
        v15 = v8;
        while (2)
        {
          v17 = a1 + v15;
          v18 = *(_DWORD *)(a1 + v15 + 12);
          if (v11 < v18)
          {
            v16 = *(_QWORD *)(v17 + 16);
LABEL_13:
            v6 -= 12;
            *(_DWORD *)(v17 + 24) = v18;
            *(_QWORD *)(a1 + v15 + 28) = v16;
            v15 -= 12;
            if (v15 == -24)
            {
              v10 = a1;
              goto LABEL_6;
            }
            continue;
          }
          break;
        }
        if (v18 >= v11)
        {
          v16 = *(_QWORD *)(a1 + v15 + 16);
          if (v13 >= v16)
          {
            v10 = a1 + v15 + 24;
            goto LABEL_6;
          }
          goto LABEL_13;
        }
        v10 = v6;
LABEL_6:
        *(_DWORD *)v10 = v11;
        *(_QWORD *)(v10 + 4) = v13;
        if (++v9 == 8)
          return v7 + 12 == a2;
LABEL_7:
        v6 = v7;
        v8 += 12;
        v7 += 12;
        if (v7 != a2)
          continue;
        return 1;
      }
  }
}

void operations_research::sat::LinearConstraintManager::~LinearConstraintManager(operations_research::sat::LinearConstraintManager *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  operations_research::sat::LinearConstraintManager *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  operations_research::sat::LinearConstraintManager *v15;
  operations_research::sat::LinearConstraintManager *v16;
  BOOL v17;
  void *v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  _BYTE v26[16];

  if (*((uint64_t *)this + 16) >= 1
    && *_MergedGlobals_13[0] >= 2
    && (_MergedGlobals_13[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)_MergedGlobals_13, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_constraint_manager.cc", (const char *)2)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v26, (google::glog_internal_namespace_ *)"./ortools/sat/linear_constraint_manager.cc", 47);
    v2 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"num_merged_constraints: ", 24);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v26);
  }
  if (*((uint64_t *)this + 17) >= 1
    && *off_2540795D0[0] >= 2
    && (off_2540795D0[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_2540795D0, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_constraint_manager.cc", (const char *)2)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v26, (google::glog_internal_namespace_ *)"./ortools/sat/linear_constraint_manager.cc", 50);
    v3 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"num_shortened_constraints: ", 27);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v26);
  }
  if (*((uint64_t *)this + 18) >= 1
    && *off_2540795D8[0] >= 2
    && (off_2540795D8[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_2540795D8, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_constraint_manager.cc", (const char *)2)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v26, (google::glog_internal_namespace_ *)"./ortools/sat/linear_constraint_manager.cc", 53);
    v4 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"num_splitted_constraints: ", 26);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v26);
  }
  if (*((uint64_t *)this + 19) >= 1
    && *off_2540795E0[0] >= 2
    && (off_2540795E0[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_2540795E0, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_constraint_manager.cc", (const char *)2)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v26, (google::glog_internal_namespace_ *)"./ortools/sat/linear_constraint_manager.cc", 56);
    v5 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"num_coeff_strenghtening: ", 25);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v26);
  }
  if (*(_BYTE *)(*(_QWORD *)this + 99))
  {
    if (*((uint64_t *)this + 20) >= 1)
    {
      google::LogMessage::LogMessage((google::LogMessage *)v26, (google::glog_internal_namespace_ *)"./ortools/sat/linear_constraint_manager.cc", 59);
      v6 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Total cuts added: ", 18);
      std::ostream::operator<<();
      google::LogMessage::~LogMessage((google::LogMessage *)v26);
      v7 = (operations_research::sat::LinearConstraintManager *)*((_QWORD *)this + 21);
      if (v7 != (operations_research::sat::LinearConstraintManager *)((char *)this + 176))
      {
        do
        {
          google::LogMessage::LogMessage((google::LogMessage *)v26, (google::glog_internal_namespace_ *)"./ortools/sat/linear_constraint_manager.cc", 61);
          v8 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v26);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Added ", 6);
          v9 = (_QWORD *)std::ostream::operator<<();
          v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" cuts of type '", 15);
          v11 = *((char *)v7 + 55);
          if (v11 >= 0)
            v12 = (uint64_t)v7 + 32;
          else
            v12 = *((_QWORD *)v7 + 4);
          if (v11 >= 0)
            v13 = *((unsigned __int8 *)v7 + 55);
          else
            v13 = *((_QWORD *)v7 + 5);
          v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"'.", 2);
          google::LogMessage::~LogMessage((google::LogMessage *)v26);
          v15 = (operations_research::sat::LinearConstraintManager *)*((_QWORD *)v7 + 1);
          if (v15)
          {
            do
            {
              v16 = v15;
              v15 = *(operations_research::sat::LinearConstraintManager **)v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              v16 = (operations_research::sat::LinearConstraintManager *)*((_QWORD *)v7 + 2);
              v17 = *(_QWORD *)v16 == (_QWORD)v7;
              v7 = v16;
            }
            while (!v17);
          }
          v7 = v16;
        }
        while (v16 != (operations_research::sat::LinearConstraintManager *)((char *)this + 176));
      }
    }
  }
  v18 = (void *)*((_QWORD *)this + 26);
  if (v18)
  {
    *((_QWORD *)this + 27) = v18;
    operator delete(v18);
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)this + 168, *((char **)this + 22));
  if (*((_QWORD *)this + 13))
  {
    operator delete(*((void **)this + 10));
    *((_QWORD *)this + 15) = 0;
    *((_QWORD *)this + 10) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 13) = 0;
  }
  v19 = (_QWORD *)*((_QWORD *)this + 14);
  if (v19)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v19);
  v20 = (void *)*((_QWORD *)this + 7);
  if (v20)
  {
    *((_QWORD *)this + 8) = v20;
    operator delete(v20);
  }
  v21 = *((_QWORD *)this + 4);
  if (v21)
  {
    v22 = *((_QWORD *)this + 5);
    v23 = (void *)*((_QWORD *)this + 4);
    if (v22 != v21)
    {
      do
      {
        v24 = *(void **)(v22 - 88);
        if (v24)
        {
          *(_QWORD *)(v22 - 80) = v24;
          operator delete(v24);
        }
        v25 = *(void **)(v22 - 112);
        if (v25)
        {
          *(_QWORD *)(v22 - 104) = v25;
          operator delete(v25);
        }
        v22 -= 128;
      }
      while (v22 != v21);
      v23 = (void *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v21;
    operator delete(v23);
  }
}

void operations_research::sat::LinearConstraintManager::RescaleActiveCounts(operations_research::sat::LinearConstraintManager *this, double a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  double *v7;
  unint64_t v8;
  double v9;
  double *v10;
  unint64_t v11;
  _QWORD *v13;
  _BYTE v14[16];

  v2 = *((_QWORD *)this + 4);
  v3 = *((_QWORD *)this + 5) - v2;
  if ((int)(v3 >> 7) >= 1)
  {
    v4 = (v3 >> 7);
    if (v4 < 2)
    {
      v5 = 0;
LABEL_7:
      v10 = (double *)(v2 + (v5 << 7) + 112);
      v11 = v5 - v4;
      do
      {
        *v10 = *v10 * a2;
        v10 += 16;
      }
      while (!__CFADD__(v11++, 1));
      goto LABEL_10;
    }
    v6 = (v3 >> 7) & 1;
    v5 = v4 - v6;
    v7 = (double *)(v2 + 240);
    v8 = v4 - v6;
    do
    {
      v9 = *v7 * a2;
      *(v7 - 16) = *(v7 - 16) * a2;
      *v7 = v9;
      v7 += 32;
      v8 -= 2;
    }
    while (v8);
    if (v6)
      goto LABEL_7;
  }
LABEL_10:
  *((double *)this + 31) = *((double *)this + 31) * a2;
  if (*operations_research::sat::LinearConstraintManager::RescaleActiveCounts(double)::vlocal__ > 1
    && (operations_research::sat::LinearConstraintManager::RescaleActiveCounts(double)::vlocal__ != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)&operations_research::sat::LinearConstraintManager::RescaleActiveCounts(double)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_constraint_manager.cc", (const char *)2)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v14, (google::glog_internal_namespace_ *)"./ortools/sat/linear_constraint_manager.cc", 72);
    v13 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Rescaled active counts by ", 26);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v14);
  }
}

void sub_22DB89C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::LinearConstraintManager::MaybeRemoveSomeInactiveConstraints(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  int v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  size_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  size_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  unint64_t v34;
  char *v35;
  _OWORD *v36;
  unint64_t v37;
  __int128 v38;
  char *v39;
  int64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char v44;
  _QWORD *v45;
  _QWORD *v46;
  char *v48;
  _BYTE v49[16];

  v2 = *(char **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 == v3)
    return 0;
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64) - v5;
  v7 = v6 >> 2;
  v8 = v3 - (_DWORD)v2 - (v6 >> 2);
  if ((int)(v6 >> 2) < 1)
  {
    v9 = 0;
    v20 = 0;
    v21 = v7 == 0;
    goto LABEL_12;
  }
  v9 = 0;
  v10 = ((unint64_t)v6 >> 2);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(int **)(a1 + 56);
  v13 = v8;
  do
  {
    while (1)
    {
      v15 = *v12++;
      v14 = v15;
      v16 = v2[v13];
      v17 = v15;
      v18 = (_QWORD *)(v11 + ((uint64_t)v15 << 7) + 72);
      if (v16)
      {
        *v18 = 0;
        break;
      }
      v19 = (*v18)++;
      if (v19 < *(int *)(*(_QWORD *)a1 + 456))
        break;
      *(_BYTE *)(v11 + (v17 << 7) + 89) = 0;
      ++v13;
      if (!--v10)
        goto LABEL_9;
    }
    *(_DWORD *)(v5 + 4 * v9) = v14;
    v2[v9++ + (uint64_t)v8] = v16;
    ++v13;
    --v10;
  }
  while (v10);
LABEL_9:
  v20 = v9;
  v21 = v9 >= v7;
  if (v9 > v7)
  {
    std::vector<int>::__append((std::vector<int> *)(a1 + 56), v9 - v7);
    goto LABEL_14;
  }
LABEL_12:
  if (!v21)
    *(_QWORD *)(a1 + 64) = v5 + 4 * v20;
LABEL_14:
  v22 = v20 + v8;
  v23 = *(char **)a2;
  v24 = *(char **)(a2 + 8);
  v25 = (unint64_t)&v24[-*(_QWORD *)a2];
  v26 = v22 - v25;
  if (v22 > v25)
  {
    v27 = *(_QWORD *)(a2 + 16);
    if (v27 - (uint64_t)v24 >= v26)
    {
      bzero(*(void **)(a2 + 8), v22 - v25);
      *(_QWORD *)(a2 + 8) = &v24[v26];
      goto LABEL_44;
    }
    if ((v22 & 0x80000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v28 = v27 - (_QWORD)v23;
    v29 = 2 * v28;
    if (2 * v28 <= v22)
      v29 = v22;
    if (v28 >= 0x3FFFFFFFFFFFFFFFLL)
      v30 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v30 = v29;
    v31 = operator new(v30);
    v32 = &v31[v30];
    v48 = &v31[v22];
    v33 = &v31[v25];
    bzero(&v31[v25], v26);
    if (v24 == v23)
    {
      v31 += v25;
      goto LABEL_42;
    }
    if (v25 >= 8 && (unint64_t)(v23 - v31) >= 0x20)
    {
      if (v25 >= 0x20)
      {
        v34 = v25 & 0xFFFFFFFFFFFFFFE0;
        v35 = v24 - 16;
        v36 = &v31[v24 - 16 - v23];
        v37 = v25 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v38 = *(_OWORD *)v35;
          *(v36 - 1) = *((_OWORD *)v35 - 1);
          *v36 = v38;
          v36 -= 2;
          v35 -= 32;
          v37 -= 32;
        }
        while (v37);
        if (v25 == v34)
          goto LABEL_42;
        if ((v25 & 0x18) != 0)
          goto LABEL_35;
        v33 -= v34;
        v24 -= v34;
      }
      else
      {
        v34 = 0;
LABEL_35:
        v33 -= v25 & 0xFFFFFFFFFFFFFFF8;
        v39 = &v24[-v34 - 8];
        v40 = v39 - v23;
        v41 = v34 - (v25 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v42 = *(_QWORD *)v39;
          v39 -= 8;
          *(_QWORD *)&v31[v40] = v42;
          v40 -= 8;
          v41 += 8;
        }
        while (v41);
        v24 -= v25 & 0xFFFFFFFFFFFFFFF8;
        if (v25 == (v25 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_42:
          *(_QWORD *)a2 = v31;
          *(_QWORD *)(a2 + 8) = v48;
          *(_QWORD *)(a2 + 16) = v32;
          if (v23)
            operator delete(v23);
          goto LABEL_44;
        }
      }
    }
    v43 = v33 - 1;
    do
    {
      v44 = *--v24;
      *v43-- = v44;
    }
    while (v24 != v23);
    goto LABEL_42;
  }
  if (v22 < v25)
    *(_QWORD *)(a2 + 8) = &v23[v22];
LABEL_44:
  if ((int)v7 - v9 < 1)
    return 0;
  if (*operations_research::sat::LinearConstraintManager::MaybeRemoveSomeInactiveConstraints(operations_research::glop::BasisState *)::vlocal__ > 1
    && (operations_research::sat::LinearConstraintManager::MaybeRemoveSomeInactiveConstraints(operations_research::glop::BasisState *)::vlocal__ != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)&operations_research::sat::LinearConstraintManager::MaybeRemoveSomeInactiveConstraints(operations_research::glop::BasisState *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_constraint_manager.cc", (const char *)2)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v49, (google::glog_internal_namespace_ *)"./ortools/sat/linear_constraint_manager.cc", 114);
    v45 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Removed ", 8);
    v46 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)" constraints", 12);
    google::LogMessage::~LogMessage((google::LogMessage *)v49);
  }
  return 1;
}

void sub_22DB89F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

unint64_t operations_research::sat::LinearConstraintManager::Add(uint64_t a1, _QWORD *a2, _BYTE *a3)
{
  _QWORD *v3;
  operations_research::sat::LinearConstraint *v7;
  operations_research::sat::LinearConstraint *v8;
  const operations_research::sat::LinearConstraint *v9;
  unint64_t v10;
  const operations_research::sat::LinearConstraint *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t i;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t j;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  char *v34;
  char *v35;
  _DWORD *v36;
  char *v37;
  char *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  char *v62;
  void *v63;
  _QWORD *v65;
  unint64_t v66;
  unint64_t v67;
  __int128 v68;
  void *v69[2];
  uint64_t v70;
  void *__p[2];
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  _OWORD v75[2];

  v3 = a2 + 2;
  if (a2[2] == a2[3])
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v68, (google::glog_internal_namespace_ *)"./ortools/sat/linear_constraint_manager.cc", 124);
    v65 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v68);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"Check failed: !ct.vars.empty() ", 31);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v68);
  }
  operations_research::sat::LinearConstraintManager::SimplifyConstraint((operations_research::sat::LinearConstraintManager *)a1, (operations_research::sat::LinearConstraint *)a2);
  operations_research::sat::DivideByGCD(a2, v7);
  operations_research::sat::CanonicalizeConstraint((operations_research::sat *)a2, v8);
  v12 = 0;
  v13 = *(_QWORD *)(a1 + 80);
  v67 = v10;
  v14 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v10)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + v10));
  v15 = v14 >> 7;
  v16 = (v14 >> 7) ^ (v13 >> 12);
  v17 = *(_QWORD *)(a1 + 104);
  v18 = 0x101010101010101 * (v14 & 0x7F);
  v19 = *(_QWORD *)(a1 + 88);
  for (i = v16; ; i = v12 + v21)
  {
    v21 = i & v17;
    v22 = *(_QWORD *)(v13 + v21);
    v23 = ((v22 ^ v18) - 0x101010101010101) & ~(v22 ^ v18) & 0x8080808080808080;
    if (v23)
      break;
LABEL_6:
    if ((v22 & (~v22 << 6) & 0x8080808080808080) != 0)
      goto LABEL_37;
    v12 += 8;
  }
  while (1)
  {
    v24 = (v21 + (__clz(__rbit64(v23)) >> 3)) & v17;
    if (*(_QWORD *)(v19 + 16 * v24) == v10)
      break;
    v23 &= v23 - 1;
    if (!v23)
      goto LABEL_6;
  }
  if (v24 != v17)
  {
    for (j = 0; ; v16 = j + v26)
    {
      v26 = v16 & v17;
      v27 = *(_QWORD *)(v13 + v26);
      v28 = ((v27 ^ v18) - 0x101010101010101) & ~(v27 ^ v18) & 0x8080808080808080;
      if (v28)
        break;
LABEL_13:
      if ((v27 & (~v27 << 6) & 0x8080808080808080) != 0)
      {
        v29 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<unsigned long,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>>>::prepare_insert((uint64_t *)(a1 + 80), v14);
        v19 = *(_QWORD *)(a1 + 88);
        v30 = v19 + 16 * v29;
        *(_QWORD *)v30 = v67;
        *(_DWORD *)(v30 + 8) = 0;
        goto LABEL_16;
      }
      j += 8;
    }
    while (1)
    {
      v29 = (v26 + (__clz(__rbit64(v28)) >> 3)) & v17;
      if (*(_QWORD *)(v19 + 16 * v29) == v67)
        break;
      v28 &= v28 - 1;
      if (!v28)
        goto LABEL_13;
    }
LABEL_16:
    v31 = *(unsigned int *)(v19 + 16 * v29 + 8);
    v32 = *(_QWORD *)(a1 + 32);
    v33 = (_QWORD *)(v32 + ((uint64_t)(int)v31 << 7));
    v35 = (char *)v33[2];
    v34 = (char *)v33[3];
    v36 = (_DWORD *)a2[2];
    if (v34 - v35 == a2[3] - (_QWORD)v36)
    {
      if (v35 == v34)
      {
LABEL_20:
        v38 = (char *)v33[5];
        v37 = (char *)v33[6];
        v39 = (_QWORD *)a2[5];
        if (v37 - v38 == a2[6] - (_QWORD)v39)
        {
          if (v38 == v37)
          {
LABEL_24:
            if (a3)
              *a3 = 0;
            v40 = *a2;
            if (*a2 > *v33)
            {
              if (*(_BYTE *)(v32 + ((uint64_t)(int)v31 << 7) + 89))
                *(_BYTE *)(a1 + 16) = 1;
              *v33 = v40;
              if (a3)
                *a3 = 1;
            }
            v41 = a2[1];
            if (v41 < v33[1])
            {
              if (*(_BYTE *)(v32 + ((uint64_t)(int)v31 << 7) + 89))
                *(_BYTE *)(a1 + 16) = 1;
              v33[1] = v41;
              if (a3)
                *a3 = 1;
            }
            ++*(_QWORD *)(a1 + 128);
            return v31;
          }
          while (*(_QWORD *)v38 == *v39)
          {
            v38 += 8;
            ++v39;
            if (v38 == v37)
              goto LABEL_24;
          }
        }
      }
      else
      {
        while (*(_DWORD *)v35 == *v36)
        {
          v35 += 4;
          ++v36;
          if (v35 == v34)
            goto LABEL_20;
        }
      }
    }
  }
LABEL_37:
  v66 = v14;
  if (a3)
    *a3 = 1;
  v42 = *(_QWORD *)(a1 + 32);
  v43 = *(_QWORD *)(a1 + 40);
  memset((char *)v75 + 8, 0, 17);
  *((_QWORD *)&v73 + 1) = 0;
  *(_QWORD *)&v74 = 0;
  WORD4(v74) = 0;
  v44 = a2[4];
  v45 = *((_OWORD *)a2 + 1);
  v68 = *(_OWORD *)a2;
  *(_OWORD *)v69 = v45;
  v70 = v44;
  v3[1] = 0;
  v3[2] = 0;
  *v3 = 0;
  v46 = a2[7];
  *(_OWORD *)__p = *(_OWORD *)(a2 + 5);
  v72 = v46;
  *(_QWORD *)&v73 = 0;
  a2[5] = 0;
  a2[6] = 0;
  a2[7] = 0;
  v47 = operations_research::sat::ComputeL2Norm((operations_research::sat *)&v68, v11);
  v48 = 0;
  v31 = (unint64_t)(v43 - v42) >> 7;
  *(double *)&v73 = v47;
  *(_QWORD *)&v75[0] = v67;
  v49 = *(_QWORD *)(a1 + 80);
  v50 = v15 ^ (v49 >> 12);
  v51 = *(_QWORD *)(a1 + 104);
  while (1)
  {
    v52 = v50 & v51;
    v53 = *(_QWORD *)(v49 + v52);
    v54 = ((v53 ^ v18) - 0x101010101010101) & ~(v53 ^ v18) & 0x8080808080808080;
    if (v54)
      break;
LABEL_44:
    if ((v53 & (~v53 << 6) & 0x8080808080808080) != 0)
    {
      v56 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<unsigned long,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>>>::prepare_insert((uint64_t *)(a1 + 80), v66);
      v55 = *(_QWORD *)(a1 + 88);
      v57 = v55 + 16 * v56;
      *(_QWORD *)v57 = v67;
      *(_DWORD *)(v57 + 8) = 0;
      goto LABEL_47;
    }
    v48 += 8;
    v50 = v48 + v52;
  }
  v55 = *(_QWORD *)(a1 + 88);
  while (1)
  {
    v56 = (v52 + (__clz(__rbit64(v54)) >> 3)) & v51;
    if (*(_QWORD *)(v55 + 16 * v56) == v67)
      break;
    v54 &= v54 - 1;
    if (!v54)
      goto LABEL_44;
  }
LABEL_47:
  *(_DWORD *)(v55 + 16 * v56 + 8) = v31;
  *(_QWORD *)&v75[1] = *(_QWORD *)(a1 + 248);
  v58 = *(_QWORD *)(a1 + 40);
  if (v58 >= *(_QWORD *)(a1 + 48))
  {
    v62 = std::vector<operations_research::sat::LinearConstraintManager::ConstraintInfo>::__push_back_slow_path<operations_research::sat::LinearConstraintManager::ConstraintInfo>((void **)(a1 + 32), (uint64_t)&v68);
    v63 = __p[0];
    *(_QWORD *)(a1 + 40) = v62;
    if (v63)
    {
      __p[1] = v63;
      operator delete(v63);
    }
  }
  else
  {
    *(_OWORD *)v58 = v68;
    *(_QWORD *)(v58 + 16) = 0;
    *(_QWORD *)(v58 + 24) = 0;
    *(_QWORD *)(v58 + 32) = 0;
    *(_QWORD *)(v58 + 40) = 0;
    *(_OWORD *)(v58 + 16) = *(_OWORD *)v69;
    *(_QWORD *)(v58 + 32) = v70;
    v69[0] = 0;
    v69[1] = 0;
    v70 = 0;
    *(_QWORD *)(v58 + 48) = 0;
    *(_QWORD *)(v58 + 56) = 0;
    *(_OWORD *)(v58 + 40) = *(_OWORD *)__p;
    *(_QWORD *)(v58 + 56) = v72;
    __p[0] = 0;
    __p[1] = 0;
    v72 = 0;
    v59 = v73;
    v60 = v74;
    v61 = v75[0];
    *(_OWORD *)(v58 + 105) = *(_OWORD *)((char *)v75 + 9);
    *(_OWORD *)(v58 + 80) = v60;
    *(_OWORD *)(v58 + 96) = v61;
    *(_OWORD *)(v58 + 64) = v59;
    *(_QWORD *)(a1 + 40) = v58 + 128;
  }
  if (v69[0])
  {
    v69[1] = v69[0];
    operator delete(v69[0]);
  }
  return v31;
}

void sub_22DB8A4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)va);
  _Unwind_Resume(a1);
}

void sub_22DB8A4C0(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::LinearConstraintManager::SimplifyConstraint(operations_research::sat::LinearConstraintManager *this, operations_research::sat::LinearConstraint *a2)
{
  std::vector<int> *v4;
  int *v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  int *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t i;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v5 = (int *)*((_QWORD *)a2 + 2);
  v4 = (std::vector<int> *)((char *)a2 + 16);
  v6 = *((_QWORD *)a2 + 3) - (_QWORD)v5;
  v7 = v6 >> 2;
  if ((int)(v6 >> 2) < 1)
  {
    result = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v38 = *(_QWORD *)a2;
    if (*(uint64_t *)a2 <= 0)
      goto LABEL_33;
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = (uint64_t *)*((_QWORD *)a2 + 5);
  v13 = *(_QWORD *)(*((_QWORD *)this + 1) + 144);
  v14 = ((unint64_t)v6 >> 2);
  v15 = v14;
  v16 = (int *)*((_QWORD *)a2 + 2);
  do
  {
    v18 = *v16++;
    v17 = v18;
    v20 = *v12++;
    v19 = v20;
    v21 = *(_QWORD *)(v13 + 20 * v17);
    v22 = *(_QWORD *)(v13 + 20 * (v17 ^ 1));
    if (v21 + v22)
    {
      v23 = -v22;
      ++v8;
      if (v19 >= 0)
        v24 = v19;
      else
        v24 = -v19;
      if (v11 <= v24)
        v11 = v24;
      if (v19 < 1)
      {
        v9 += v19 * v23;
        v10 += v21 * v19;
      }
      else
      {
        v9 += v21 * v19;
        v10 += v19 * v23;
      }
    }
    --v15;
  }
  while (v15);
  if (v8 >= (int)v7)
  {
    result = 0;
    v38 = *(_QWORD *)a2;
    if (v9 >= *(_QWORD *)a2)
      goto LABEL_33;
    goto LABEL_38;
  }
  v25 = 0;
  ++*((_QWORD *)this + 17);
  v26 = (uint64_t *)*((_QWORD *)a2 + 5);
  v27 = *(_QWORD *)(*((_QWORD *)this + 1) + 144);
  v28 = v26;
  v29 = v5;
  do
  {
    v31 = *v29++;
    v30 = v31;
    v33 = *v28++;
    v32 = v33;
    v34 = *(_QWORD *)(v27 + 20 * v30);
    if (v34 + *(_QWORD *)(v27 + 20 * (v30 ^ 1)))
    {
      v5[v25] = v30;
      v26[v25++] = v32;
      goto LABEL_15;
    }
    v35 = v34 * v32;
    if (*(_QWORD *)a2 > (int64_t)0x8000000000000002)
    {
      *(_QWORD *)a2 -= v35;
      v36 = *((_QWORD *)a2 + 1);
      if (v36 > 0x7FFFFFFFFFFFFFFDLL)
        goto LABEL_15;
    }
    else
    {
      v36 = *((_QWORD *)a2 + 1);
      if (v36 > 0x7FFFFFFFFFFFFFFDLL)
        goto LABEL_15;
    }
    *((_QWORD *)a2 + 1) = v36 - v35;
LABEL_15:
    --v14;
  }
  while (v14);
  v39 = v25;
  if (v25 <= v7)
  {
    if (v25 < v7)
      *((_QWORD *)a2 + 3) = &v5[v25];
  }
  else
  {
    std::vector<int>::__append(v4, v25 - v7);
  }
  v40 = *((_QWORD *)a2 + 5);
  v41 = (*((_QWORD *)a2 + 6) - v40) >> 3;
  if (v39 <= v41)
  {
    if (v39 < v41)
      *((_QWORD *)a2 + 6) = v40 + 8 * v39;
    result = 1;
    v38 = *(_QWORD *)a2;
    if (v9 < *(_QWORD *)a2)
      goto LABEL_38;
LABEL_33:
    *(_QWORD *)a2 = 0x8000000000000002;
    v42 = (_QWORD *)((char *)a2 + 8);
    v43 = *((_QWORD *)a2 + 1);
    if (v10 <= v43)
    {
      *v42 = 0x7FFFFFFFFFFFFFFELL;
LABEL_51:
      *((_QWORD *)a2 + 3) = *((_QWORD *)a2 + 2);
      *((_QWORD *)a2 + 6) = *((_QWORD *)a2 + 5);
      return 1;
    }
LABEL_40:
    if (v43 == 0x7FFFFFFFFFFFFFFELL)
      goto LABEL_51;
    if (v11 <= v10 - v43)
      goto LABEL_58;
    ++*((_QWORD *)this + 19);
    v44 = (int *)*((_QWORD *)a2 + 2);
    v45 = *((_QWORD *)a2 + 3) - (_QWORD)v44;
    if ((int)(v45 >> 2) < 1)
    {
LABEL_57:
      result = 1;
      goto LABEL_58;
    }
    v46 = v10 - *((_QWORD *)a2 + 1);
    v47 = (uint64_t *)*((_QWORD *)a2 + 5);
    v48 = *((_QWORD *)a2 + 1) - v10;
    v49 = (v45 >> 2);
    while (1)
    {
      v51 = *v47;
      v52 = *v47 - v46;
      if (*v47 > v46)
      {
        v50 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 144) + 20 * (*v44 ^ 1));
        *v47 = v46;
      }
      else
      {
        v52 = v48 - v51;
        if (v48 <= v51)
          goto LABEL_46;
        v50 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 144) + 20 * *v44);
        *v47 = v48;
      }
      *v42 += v50 * v52;
LABEL_46:
      ++v47;
      ++v44;
      if (!--v49)
        goto LABEL_57;
    }
  }
  std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::__append((uint64_t)a2 + 40, v39 - v41);
  result = 1;
  v38 = *(_QWORD *)a2;
  if (v9 >= *(_QWORD *)a2)
    goto LABEL_33;
LABEL_38:
  v42 = (_QWORD *)((char *)a2 + 8);
  v43 = *((_QWORD *)a2 + 1);
  if (v10 <= v43)
  {
    *v42 = 0x7FFFFFFFFFFFFFFELL;
    if (v38 != 0x8000000000000002)
      goto LABEL_59;
    goto LABEL_51;
  }
  if (v38 == 0x8000000000000002)
    goto LABEL_40;
  if (v43 == 0x7FFFFFFFFFFFFFFELL)
    goto LABEL_59;
  if (v11 > v10 - v43)
    ++*((_QWORD *)this + 18);
LABEL_58:
  v38 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 != 0x8000000000000002)
  {
LABEL_59:
    if (v11 > v38 - v9)
    {
      if (*v42 == 0x7FFFFFFFFFFFFFFELL)
      {
        ++*((_QWORD *)this + 19);
        v53 = (int *)*((_QWORD *)a2 + 2);
        v54 = *((_QWORD *)a2 + 3) - (_QWORD)v53;
        if ((int)(v54 >> 2) >= 1)
        {
          v55 = *(_QWORD *)a2 - v9;
          v56 = (uint64_t *)*((_QWORD *)a2 + 5);
          v57 = v9 - *(_QWORD *)a2;
          for (i = (v54 >> 2); i; --i)
          {
            v61 = *v56;
            v62 = v55 - *v56;
            if (v55 < *v56)
            {
              v59 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 144) + 20 * *v53);
              *v56 = v55;
              v60 = v59 * v62;
            }
            else
            {
              if (v61 >= v57)
                goto LABEL_65;
              v63 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 144) + 20 * (*v53 ^ 1));
              *v56 = v57;
              v60 = v63 * (v61 + v55);
            }
            *(_QWORD *)a2 += v60;
LABEL_65:
            ++v56;
            ++v53;
          }
        }
        return 1;
      }
      else
      {
        ++*((_QWORD *)this + 18);
      }
    }
  }
  return result;
}

uint64_t operations_research::sat::LinearConstraintManager::DebugCheckConstraint(operations_research::sat::LinearConstraintManager *this, const operations_research::sat::LinearConstraint *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _BYTE v39[16];

  v2 = *((_QWORD *)this + 30);
  v5 = *(_QWORD **)(v2 + 32);
  v3 = (_QWORD *)(v2 + 32);
  v4 = v5;
  if (!v5)
    return 1;
  v6 = v3;
  v7 = v4;
  do
  {
    v8 = v7[4];
    v9 = v8 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::DebugSolution>(void)::d;
    if (v8 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::DebugSolution>(void)::d)
      v10 = v7;
    else
      v10 = v7 + 1;
    if (v9)
      v6 = v7;
    v7 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v6 == v3
    || v6[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::DebugSolution>(void)::d
    || !v6[5])
  {
    return 1;
  }
  do
  {
    v11 = v4[4];
    v12 = v11 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::DebugSolution>(void)::d;
    if (v11 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::DebugSolution>(void)::d)
      v13 = v4;
    else
      v13 = v4 + 1;
    if (v12)
      v3 = v4;
    v4 = (_QWORD *)*v13;
  }
  while (*v13);
  v14 = (uint64_t *)v3[5];
  v15 = *v14;
  if (*v14 == v14[1])
    return 1;
  v16 = *((_QWORD *)a2 + 2);
  v17 = *((_QWORD *)a2 + 3) - v16;
  if (v17)
  {
    v18 = v17 >> 2;
    v19 = *((_QWORD *)a2 + 5);
    if (v18 <= 1)
      v18 = 1;
    if (v18 >= 2)
    {
      v22 = 0;
      v23 = 0;
      v20 = v18 & 0xFFFFFFFFFFFFFFFELL;
      v24 = (int *)(v16 + 4);
      v25 = (_QWORD *)(v19 + 8);
      v26 = v18 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        v22 += *(_QWORD *)(v15 + 8 * *(v24 - 1)) * *(v25 - 1);
        v23 += *(_QWORD *)(v15 + 8 * *v24) * *v25;
        v24 += 2;
        v25 += 2;
        v26 -= 2;
      }
      while (v26);
      v21 = v23 + v22;
      if (v18 == v20)
        goto LABEL_32;
    }
    else
    {
      v20 = 0;
      v21 = 0;
    }
    v27 = (uint64_t *)(v19 + 8 * v20);
    v28 = v18 - v20;
    v29 = (int *)(v16 + 4 * v20);
    do
    {
      v31 = *v29++;
      v30 = v31;
      v32 = *v27++;
      v21 += *(_QWORD *)(v15 + 8 * v30) * v32;
      --v28;
    }
    while (v28);
  }
  else
  {
    v21 = 0;
  }
LABEL_32:
  if (v21 > *((_QWORD *)a2 + 1) || v21 < *(_QWORD *)a2)
  {
    google::LogMessage::LogMessage((google::LogMessage *)v39, (google::glog_internal_namespace_ *)"./ortools/sat/linear_constraint_manager.cc", 690);
    v34 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"activity ", 9);
    v35 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" not in [", 9);
    v36 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)",", 1);
    v37 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"]", 1);
    google::LogMessage::~LogMessage((google::LogMessage *)v39);
    return 0;
  }
  return 1;
}

void sub_22DB8AB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

unint64_t operations_research::sat::`anonymous namespace'::ComputeHashOfTerms(operations_research::sat::_anonymous_namespace_ *this, const operations_research::sat::LinearConstraint *a2)
{
  int *v2;
  unint64_t v3;
  uint64_t v5;
  unint64_t result;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;

  v2 = (int *)*((_QWORD *)this + 2);
  v3 = *((_QWORD *)this + 3) - (_QWORD)v2;
  if ((int)(v3 >> 2) < 1)
    return 0;
  v5 = 0;
  result = 0;
  v7 = (uint64_t *)*((_QWORD *)this + 5);
  v8 = (v3 >> 2);
  do
  {
    v9 = *v2++;
    v10 = (v5 + 0x1F73E299748A907ELL + v9) ^ (result >> 43);
    v11 = (v5 - 0x1F73E299748A907ELL - v10) ^ (v10 << 9);
    v12 = (result - (v10 + v11)) ^ (v11 >> 8);
    v13 = (v10 - (v11 + v12)) ^ (v12 >> 38);
    v14 = (v11 - (v12 + v13)) ^ (v13 << 23);
    v15 = (v12 - (v13 + v14)) ^ (v14 >> 5);
    v16 = (v13 - (v14 + v15)) ^ (v15 >> 35);
    v17 = (v14 - (v15 + v16)) ^ (v16 << 49);
    v18 = (v15 - (v16 + v17)) ^ (v17 >> 11);
    v19 = (v16 - (v17 + v18)) ^ (v18 >> 12);
    v20 = (v17 - (v18 + v19)) ^ (v19 << 18);
    v21 = v18 - (v19 + v20);
    v22 = v21 ^ (v20 >> 22);
    v23 = *v7++;
    v24 = (v23 + 0x1F73E299748A907ELL - v22) ^ (v21 >> 43);
    v25 = (0xE08C1D668B756F82 - (v22 + v24)) ^ (v24 << 9);
    v26 = (v22 - (v24 + v25)) ^ (v25 >> 8);
    v27 = (v24 - (v25 + v26)) ^ (v26 >> 38);
    v28 = (v25 - (v26 + v27)) ^ (v27 << 23);
    v29 = (v26 - (v27 + v28)) ^ (v28 >> 5);
    v30 = (v27 - (v28 + v29)) ^ (v29 >> 35);
    v31 = (v28 - (v29 + v30)) ^ (v30 << 49);
    v32 = (v29 - (v30 + v31)) ^ (v31 >> 11);
    v33 = (v30 - (v31 + v32)) ^ (v32 >> 12);
    result = (v32 - (v33 + ((v31 - (v32 + v33)) ^ (v33 << 18)))) ^ (((v31 - (v32 + v33)) ^ (v33 << 18)) >> 22);
    v5 = -(uint64_t)result;
    --v8;
  }
  while (v8);
  return result;
}

uint64_t operations_research::sat::LinearConstraintManager::ComputeObjectiveParallelism(uint64_t result, int a2)
{
  _QWORD *v3;
  double v4;
  double *v5;
  double *v6;
  double *v7;
  unint64_t v8;
  double v9;
  double *v10;
  uint64_t v11;
  double *v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  _QWORD *v29;
  uint64_t *v30;
  unint64_t v31[2];

  if (!*(_BYTE *)(result + 192))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v31, (google::glog_internal_namespace_ *)"./ortools/sat/linear_constraint_manager.cc", 167);
    v29 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Check failed: objective_is_defined_ ", 36);
    goto LABEL_29;
  }
  v3 = (_QWORD *)result;
  if (!*(_BYTE *)(result + 193))
  {
    v7 = *(double **)(result + 208);
    v6 = *(double **)(result + 216);
    if (v7 == v6)
    {
      v9 = 0.0;
      goto LABEL_13;
    }
    v8 = (char *)v6 - (char *)v7 - 8;
    if (v8 >= 8)
    {
      v11 = (v8 >> 3) + 1;
      v10 = &v7[v11 & 0x3FFFFFFFFFFFFFFELL];
      v12 = v7 + 1;
      v9 = 0.0;
      v13 = v11 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        v9 = v9 + *(v12 - 1) * *(v12 - 1) + *v12 * *v12;
        v12 += 2;
        v13 -= 2;
      }
      while (v13);
      if (v11 == (v11 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_13:
        v15 = sqrt(v9);
        *(double *)(result + 200) = v15;
        *(_BYTE *)(result + 193) = 1;
        v5 = (double *)(result + 200);
        v31[0] = 0;
        if (v15 > 0.0)
          goto LABEL_14;
        goto LABEL_30;
      }
    }
    else
    {
      v9 = 0.0;
      v10 = *(double **)(result + 208);
    }
    do
    {
      v14 = *v10++;
      v9 = v9 + v14 * v14;
    }
    while (v10 != v6);
    goto LABEL_13;
  }
  v4 = *(double *)(result + 200);
  v5 = (double *)(result + 200);
  v31[0] = 0;
  if (v4 > 0.0)
    goto LABEL_14;
LABEL_30:
  result = google::MakeCheckOpString<double,double>((int)v5, (int)v31, "objective_l2_norm_ > 0.0");
  v30 = (uint64_t *)result;
  if (result)
  {
    google::LogMessageFatal::LogMessageFatal(v31, (google::glog_internal_namespace_ *)"./ortools/sat/linear_constraint_manager.cc", 177, &v30);
    google::LogMessage::stream((google::LogMessage *)v31);
LABEL_29:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v31);
  }
LABEL_14:
  v16 = v3[4];
  v17 = v16 + ((uint64_t)a2 << 7);
  *(_BYTE *)(v17 + 88) = 1;
  v18 = *(double *)(v17 + 64);
  v19 = 0.0;
  if (v18 != 0.0)
  {
    v20 = *(_QWORD *)(v17 + 16);
    v21 = *(_QWORD *)(v17 + 24);
    v22 = v21 - v20;
    if (v21 != v20)
    {
      v23 = 0;
      v24 = v22 >> 2;
      v25 = v3[26];
      if (v24 <= 1)
        v24 = 1;
      result = 0x7FFFFFFFFFFFFFFDLL;
      do
      {
        v26 = *(int *)(v20 + 4 * v23);
        if ((int)v26 < (int)((unint64_t)(v3[27] - v25) >> 3))
        {
          v27 = *(_QWORD *)(*(_QWORD *)(v17 + 40) + 8 * v23);
          v28 = (double)v27;
          if (v27 < (uint64_t)0x8000000000000003)
            v28 = -INFINITY;
          if (v27 > 0x7FFFFFFFFFFFFFFDLL)
            v28 = INFINITY;
          v19 = v19 + v28 * *(double *)(v25 + 8 * v26);
        }
        ++v23;
      }
      while (v24 != v23);
    }
    v19 = fabs(v19 / (v18 * *v5));
  }
  *(double *)(v16 + ((uint64_t)a2 << 7) + 80) = v19;
  return result;
}

void sub_22DB8AF0C(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DB8AF14(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

BOOL operations_research::sat::LinearConstraintManager::AddCut(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v5;
  const operations_research::sat::LinearConstraint *v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  _BOOL8 v19;
  __int128 v20;
  int v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  const operations_research::sat::LinearConstraint *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t **v39;
  __int128 *v41[2];
  __int128 v42;
  void *v43[2];
  uint64_t v44;
  void *__p[2];
  uint64_t v46;
  char v47;

  v5 = a2 + 1;
  if (*((_QWORD *)a2 + 2) == *((_QWORD *)a2 + 3))
    return 0;
  v11 = operations_research::sat::ComputeActivity(a2, a4);
  v13 = *(_QWORD *)a2;
  v12 = *((_QWORD *)a2 + 1);
  v14 = (double)v12;
  v15 = -INFINITY;
  if (v12 < (uint64_t)0x8000000000000003)
    v14 = -INFINITY;
  if (v12 > 0x7FFFFFFFFFFFFFFDLL)
    v14 = INFINITY;
  v16 = v11 - v14;
  if (v13 >= (uint64_t)0x8000000000000003)
    v15 = (double)v13;
  if (v13 > 0x7FFFFFFFFFFFFFFDLL)
    v15 = INFINITY;
  v17 = v15 - v11;
  v18 = v16 >= v17 ? v16 : v17;
  if (v18 / operations_research::sat::ComputeL2Norm((operations_research::sat *)a2, v10) < 0.00001)
    return 0;
  v47 = 0;
  v20 = a2[1];
  v42 = *a2;
  *(_OWORD *)v43 = v20;
  v44 = *((_QWORD *)a2 + 4);
  v5[1] = 0;
  v5[2] = 0;
  *v5 = 0;
  *(_OWORD *)__p = *(__int128 *)((char *)a2 + 40);
  v46 = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 7) = 0;
  v21 = operations_research::sat::LinearConstraintManager::Add(a1, &v42, &v47);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v43[0])
  {
    v43[1] = v43[0];
    operator delete(v43[0]);
  }
  v19 = v47 != 0;
  if (v47)
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + ((uint64_t)v21 << 7) + 120) = 1;
    if (*operations_research::sat::LinearConstraintManager::AddCut(operations_research::sat::LinearConstraint,std::string,gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,std::string)::vlocal__ >= 1
      && (operations_research::sat::LinearConstraintManager::AddCut(operations_research::sat::LinearConstraint,std::string,gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,std::string)::vlocal__ != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)&operations_research::sat::LinearConstraintManager::AddCut(operations_research::sat::LinearConstraint,std::string,gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,std::string)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_constraint_manager.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v41, (google::glog_internal_namespace_ *)"./ortools/sat/linear_constraint_manager.cc", 229);
      v22 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v41);
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Cut '", 5);
      v24 = *(char *)(a3 + 23);
      if (v24 >= 0)
        v25 = a3;
      else
        v25 = *(_QWORD *)a3;
      if (v24 >= 0)
        v26 = *(unsigned __int8 *)(a3 + 23);
      else
        v26 = *(_QWORD *)(a3 + 8);
      v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"'", 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" size=", 6);
      v29 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" max_magnitude=", 15);
      operations_research::sat::ComputeInfinityNorm((operations_research::sat *)(*(_QWORD *)(a1 + 32) + ((uint64_t)v21 << 7)), v30);
      v31 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" norm=", 6);
      v32 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" violation=", 11);
      v33 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" eff=", 5);
      v34 = (_QWORD *)std::ostream::operator<<();
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" ", 1);
      v36 = *(char *)(a5 + 23);
      if (v36 >= 0)
        v37 = a5;
      else
        v37 = *(_QWORD *)a5;
      if (v36 >= 0)
        v38 = *(unsigned __int8 *)(a5 + 23);
      else
        v38 = *(_QWORD *)(a5 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, v37, v38);
      google::LogMessage::~LogMessage((google::LogMessage *)v41);
    }
    ++*(_QWORD *)(a1 + 160);
    ++*(_DWORD *)(a1 + 256);
    v41[0] = (__int128 *)a3;
    v39 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 168), (const void **)a3, (uint64_t)&std::piecewise_construct, v41);
    ++*((_DWORD *)v39 + 14);
  }
  return v19;
}

void sub_22DB8B24C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)va);
  _Unwind_Resume(a1);
}

void sub_22DB8B260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void operations_research::sat::LinearConstraintManager::PermanentlyRemoveSomeConstraints(operations_research::sat::LinearConstraintManager *this)
{
  uint64_t v1;
  uint64_t v2;
  operations_research::sat::LinearConstraintManager *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  int v37;
  operations_research::sat::LinearConstraintManager *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  _OWORD *v52;
  _OWORD *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  void *v68;
  void *v69;
  int *v70;
  uint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  char *v74;
  int v75;
  uint64_t *v76;
  _BYTE v78[16];
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;

  v82 = 0;
  v83 = 0;
  v84 = 0;
  v1 = *((_QWORD *)this + 4);
  v76 = (uint64_t *)((char *)this + 32);
  v2 = *((_QWORD *)this + 5);
  if ((int)((unint64_t)(v2 - v1) >> 7) < 1)
    return;
  v3 = this;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = (uint64_t)v83;
  do
  {
    v9 = v1 + (v5 << 7);
    if (*(_BYTE *)(v9 + 120) && !*(_BYTE *)(v9 + 89))
    {
      v10 = (_QWORD *)(v1 + (v5 << 7) + 112);
      if (v4 < v6)
      {
        *(_QWORD *)v4 = *v10;
        v4 += 8;
        v8 = (uint64_t)v4;
        goto LABEL_4;
      }
      v11 = (v4 - v7) >> 3;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61)
      {
        v83 = (char *)v8;
        v84 = v6;
        v82 = v7;
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      v74 = v6;
      if ((v6 - v7) >> 2 > v12)
        v12 = (v6 - v7) >> 2;
      if ((unint64_t)(v6 - v7) >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
      {
        if (v13 >> 61)
        {
          v83 = (char *)v8;
          v84 = v74;
          v82 = v7;
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        v14 = operator new(8 * v13);
        v15 = &v14[8 * v11];
        *(_QWORD *)v15 = *v10;
        v8 = (uint64_t)(v15 + 8);
        if (v4 != v7)
        {
LABEL_17:
          v16 = v4 - 8 - v7;
          if (v16 < 0x168
            || &v14[v4 - v7 - 8 - (v16 & 0xFFFFFFFFFFFFFFF8)] > &v14[v4 - v7 - 8]
            || &v4[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] > v4 - 8
            || (unint64_t)(v7 - v14) < 0x20)
          {
            v17 = v4;
            v3 = this;
          }
          else
          {
            v20 = (v16 >> 3) + 1;
            v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
            v17 = &v4[-v21];
            v15 -= v21;
            v22 = &v14[8 * v11 - 16];
            v23 = v4 - 16;
            v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
            v3 = this;
            do
            {
              v25 = *(_OWORD *)v23;
              *(v22 - 1) = *((_OWORD *)v23 - 1);
              *v22 = v25;
              v22 -= 2;
              v23 -= 32;
              v24 -= 4;
            }
            while (v24);
            if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_20:
              v6 = &v14[8 * v13];
              if (v7)
              {
LABEL_21:
                v19 = (char *)v8;
                operator delete(v7);
                v8 = (uint64_t)v19;
                v1 = *((_QWORD *)v3 + 4);
                v2 = *((_QWORD *)v3 + 5);
                v4 = v19;
LABEL_25:
                v7 = v15;
                goto LABEL_4;
              }
LABEL_24:
              v4 = (char *)v8;
              goto LABEL_25;
            }
          }
          do
          {
            v18 = *((_QWORD *)v17 - 1);
            v17 -= 8;
            *((_QWORD *)v15 - 1) = v18;
            v15 -= 8;
          }
          while (v17 != v7);
          goto LABEL_20;
        }
      }
      else
      {
        v14 = 0;
        v15 = (char *)(8 * v11);
        *(_QWORD *)(8 * v11) = *v10;
        v8 = 8 * v11 + 8;
        if (v4 != v7)
          goto LABEL_17;
      }
      v3 = this;
      v6 = &v14[8 * v13];
      if (v7)
        goto LABEL_21;
      goto LABEL_24;
    }
LABEL_4:
    ++v5;
  }
  while (v5 < (int)((unint64_t)(v2 - v1) >> 7));
  v83 = (char *)v8;
  v84 = v6;
  v82 = v7;
  if (v7 == v4)
    goto LABEL_94;
  std::__sort<std::__less<double,double> &,double *>();
  v26 = *(int *)(*(_QWORD *)v3 + 564);
  if (v26 >= (v83 - v82) >> 3)
  {
    v27 = INFINITY;
    v28 = *((_QWORD *)v3 + 13);
    if (v28 < 0x80)
      goto LABEL_36;
    goto LABEL_41;
  }
  v27 = *(double *)&v82[8 * v26];
  v28 = *((_QWORD *)v3 + 13);
  if (v28 >= 0x80)
  {
LABEL_41:
    operator delete(*((void **)v3 + 10));
    v28 = 0;
    *((_QWORD *)v3 + 15) = 0;
    *((_QWORD *)v3 + 10) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *((_QWORD *)v3 + 11) = 0;
    *((_QWORD *)v3 + 12) = 0;
    *((_QWORD *)v3 + 13) = 0;
    goto LABEL_42;
  }
LABEL_36:
  if (v28)
  {
    *((_QWORD *)v3 + 12) = 0;
    memset(*((void **)v3 + 10), 128, v28 + 8);
    *(_BYTE *)(*((_QWORD *)v3 + 10) + *((_QWORD *)v3 + 13)) = -1;
    v28 = *((_QWORD *)v3 + 13);
    v29 = v28 - (v28 >> 3);
    if (v28 == 7)
      v29 = 6;
    *((_QWORD *)v3 + 15) = v29 - *((_QWORD *)v3 + 12);
  }
LABEL_42:
  v30 = (unint64_t *)*((_QWORD *)v3 + 14);
  if (v30)
  {
    v30[1] = 0;
    *v30 = v28;
    v30[4] = 0;
    v30[2] = 0;
    v32 = *((_QWORD *)v3 + 4);
    v31 = *((_QWORD *)v3 + 5);
    v80 = 0;
    v81 = 0;
    v79 = 0;
    v33 = v31 - v32;
    v34 = (v31 - v32) >> 7;
    if (v31 == v32)
      goto LABEL_71;
LABEL_44:
    if ((v33 & 0x8000000000000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v35 = (char *)operator new(v33 >> 5);
    v79 = v35;
    v81 = &v35[4 * v34];
    bzero(v35, v33 >> 5);
    v80 = &v35[v33 >> 5];
    if ((int)(v33 >> 7) >= 1)
      goto LABEL_46;
LABEL_72:
    v75 = 0;
    v38 = this;
    v65 = 0;
    v66 = v34 == 0;
  }
  else
  {
    v32 = *((_QWORD *)v3 + 4);
    v31 = *((_QWORD *)v3 + 5);
    v80 = 0;
    v81 = 0;
    v79 = 0;
    v33 = v31 - v32;
    v34 = (v31 - v32) >> 7;
    if (v31 != v32)
      goto LABEL_44;
LABEL_71:
    v35 = 0;
    if ((int)(v33 >> 7) < 1)
      goto LABEL_72;
LABEL_46:
    v36 = 0;
    v75 = 0;
    v37 = 0;
    v38 = this;
    do
    {
      while (1)
      {
        v48 = v32 + (v36 << 7);
        if (!*(_BYTE *)(v48 + 120)
          || *(_BYTE *)(v48 + 89)
          || *(double *)(v32 + (v36 << 7) + 112) > v27
          || v75 >= *(_DWORD *)(*(_QWORD *)v38 + 564))
        {
          break;
        }
        ++v75;
        ++v36;
        v47 = v31 - v32;
        if (v36 >= (int)((unint64_t)(v31 - v32) >> 7))
          goto LABEL_68;
      }
      if (v36 != v37)
      {
        v49 = v32 + ((uint64_t)v37 << 7);
        *(_OWORD *)v49 = *(_OWORD *)v48;
        v50 = *(void **)(v49 + 16);
        if (v50)
        {
          *(_QWORD *)(v49 + 24) = v50;
          operator delete(v50);
          *(_QWORD *)(v49 + 16) = 0;
          *(_QWORD *)(v49 + 24) = 0;
          *(_QWORD *)(v49 + 32) = 0;
        }
        v51 = *(void **)(v49 + 40);
        *(_OWORD *)(v49 + 16) = *(_OWORD *)(v48 + 16);
        *(_QWORD *)(v49 + 32) = *(_QWORD *)(v48 + 32);
        *(_QWORD *)(v48 + 16) = 0;
        *(_QWORD *)(v48 + 24) = 0;
        *(_QWORD *)(v48 + 32) = 0;
        if (v51)
        {
          *(_QWORD *)(v49 + 48) = v51;
          operator delete(v51);
          *(_QWORD *)(v49 + 40) = 0;
          *(_QWORD *)(v49 + 48) = 0;
          *(_QWORD *)(v49 + 56) = 0;
        }
        *(_OWORD *)(v49 + 40) = *(_OWORD *)(v48 + 40);
        *(_QWORD *)(v49 + 56) = *(_QWORD *)(v48 + 56);
        *(_QWORD *)(v48 + 40) = 0;
        *(_QWORD *)(v48 + 48) = 0;
        *(_QWORD *)(v48 + 56) = 0;
        v52 = (_OWORD *)(v32 + ((uint64_t)v37 << 7));
        v53 = (_OWORD *)(v32 + (v36 << 7));
        v55 = v53[5];
        v54 = v53[6];
        v56 = v53[4];
        *(_OWORD *)((char *)v52 + 105) = *(_OWORD *)((char *)v53 + 105);
        v52[5] = v55;
        v52[6] = v54;
        v52[4] = v56;
        v38 = this;
        v32 = *v76;
      }
      v44 = 0;
      *(_DWORD *)&v35[4 * v36] = v37;
      v57 = v32 + ((uint64_t)v37 << 7);
      v60 = *(_QWORD *)(v57 + 96);
      v59 = (_QWORD *)(v57 + 96);
      v58 = v60;
      v61 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v60)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + v60));
      v62 = *((_QWORD *)v38 + 10);
      v45 = (v61 >> 7) ^ (v62 >> 12);
      v63 = *((_QWORD *)v38 + 13);
      while (1)
      {
        v39 = v45 & v63;
        v40 = *(_QWORD *)(v62 + (v45 & v63));
        v41 = ((v40 ^ (0x101010101010101 * (v61 & 0x7F))) - 0x101010101010101) & ~(v40 ^ (0x101010101010101
                                                                                            * (v61 & 0x7F))) & 0x8080808080808080;
        if (v41)
          break;
LABEL_51:
        if ((v40 & (~v40 << 6) & 0x8080808080808080) != 0)
        {
          v43 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<unsigned long,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>>>::prepare_insert((uint64_t *)this + 10, v61);
          v42 = *((_QWORD *)v38 + 11);
          v46 = v42 + 16 * v43;
          *(_QWORD *)v46 = *v59;
          *(_DWORD *)(v46 + 8) = 0;
          v32 = *((_QWORD *)v38 + 4);
          goto LABEL_54;
        }
        v44 += 8;
        v45 = v44 + v39;
      }
      v42 = *((_QWORD *)v38 + 11);
      while (1)
      {
        v43 = (v39 + (__clz(__rbit64(v41)) >> 3)) & v63;
        if (*(_QWORD *)(v42 + 16 * v43) == v58)
          break;
        v41 &= v41 - 1;
        if (!v41)
          goto LABEL_51;
      }
LABEL_54:
      *(_DWORD *)(v42 + 16 * v43 + 8) = v37++;
      v31 = *((_QWORD *)v38 + 5);
      ++v36;
      v47 = v31 - v32;
    }
    while (v36 < (int)((unint64_t)(v31 - v32) >> 7));
LABEL_68:
    v64 = v47 >> 7;
    v65 = v37;
    v66 = v37 >= v64;
    if (v37 > v64)
    {
      std::vector<operations_research::sat::LinearConstraintManager::ConstraintInfo>::__append((uint64_t)v76, v37 - v64);
      goto LABEL_82;
    }
  }
  if (!v66)
  {
    v67 = v32 + (v65 << 7);
    while (v31 != v67)
    {
      v68 = *(void **)(v31 - 88);
      if (v68)
      {
        *(_QWORD *)(v31 - 80) = v68;
        operator delete(v68);
      }
      v69 = *(void **)(v31 - 112);
      if (v69)
      {
        *(_QWORD *)(v31 - 104) = v69;
        operator delete(v69);
      }
      v31 -= 128;
    }
    *((_QWORD *)this + 5) = v67;
    v38 = this;
  }
LABEL_82:
  v70 = (int *)*((_QWORD *)v38 + 7);
  v71 = *((_QWORD *)v38 + 8) - (_QWORD)v70;
  if (v71)
  {
    v72 = v71 >> 2;
    if (v72 <= 1)
      v72 = 1;
    do
    {
      *v70 = *(_DWORD *)&v35[4 * *v70];
      ++v70;
      --v72;
    }
    while (v72);
  }
  if (v75 > 0
    && *operations_research::sat::LinearConstraintManager::PermanentlyRemoveSomeConstraints(void)::vlocal__ >= 1
    && (operations_research::sat::LinearConstraintManager::PermanentlyRemoveSomeConstraints(void)::vlocal__ != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)&operations_research::sat::LinearConstraintManager::PermanentlyRemoveSomeConstraints(void)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_constraint_manager.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v78, (google::glog_internal_namespace_ *)"./ortools/sat/linear_constraint_manager.cc", 292);
    v73 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v78);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Constraint manager cleanup: #deleted:", 37);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v78);
  }
  *((_DWORD *)v38 + 64) -= v75;
  if (v35)
    operator delete(v35);
  v4 = v82;
LABEL_94:
  if (v4)
  {
    v83 = v4;
    operator delete(v4);
  }
}

void sub_22DB8B9E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20)
{
  void *v20;

  if (v20)
    operator delete(v20);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::LinearConstraintManager::SetObjectiveCoefficient(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  double v9;
  uint64_t v10;

  if (a3)
  {
    v4 = (uint64_t *)(a1 + 208);
    v3 = *(_QWORD *)(a1 + 208);
    *(_BYTE *)(a1 + 192) = 1;
    if ((a2 & 1) != 0)
      v5 = -a3;
    else
      v5 = a3;
    v6 = a2 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (*(_QWORD *)(a1 + 216) - v3) >> 3;
    if (v7 <= v6)
    {
      v8 = a2 | 1;
      v10 = 0;
      if (v8 <= v7)
      {
        if (v8 < v7)
          *(_QWORD *)(a1 + 216) = v3 + 8 * v8;
      }
      else
      {
        std::vector<double>::__append(a1 + 208, v8 - v7, &v10);
        v3 = *v4;
      }
    }
    v9 = (double)v5;
    if (v5 < (uint64_t)0x8000000000000003)
      v9 = -INFINITY;
    if (v5 > 0x7FFFFFFFFFFFFFFDLL)
      v9 = INFINITY;
    *(double *)(v3 + 8 * v6) = v9;
  }
}

BOOL operations_research::sat::LinearConstraintManager::ChangeLp(operations_research::sat::LinearConstraintManager *this, uint64_t *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  operations_research::sat::LinearConstraint *v22;
  operations_research::sat *v23;
  const operations_research::sat::LinearConstraint *v24;
  double v25;
  uint64_t v26;
  _QWORD *v27;
  const operations_research::sat::LinearConstraint *v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t *v35;
  uint64_t v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  std::vector<int>::pointer end;
  int *v43;
  std::vector<int>::pointer begin;
  int64_t v45;
  int64_t v46;
  unint64_t v47;
  int64_t v48;
  unint64_t v49;
  _BYTE *v50;
  int *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  _OWORD *v56;
  __int128 *v57;
  uint64_t v58;
  __int128 v59;
  int v60;
  double *v61;
  double v62;
  uint64_t v63;
  double *v64;
  int64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  double *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double *v75;
  char *v76;
  double *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  int64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  double v101;
  int *v102;
  unint64_t v103;
  unint64_t v104;
  char v105;
  uint64_t v106;
  unsigned __int8 *v107;
  uint64_t v109;
  double v110;
  uint64_t v111;
  double v112;
  __n128 v113;
  int v114;
  int v115;
  _QWORD *v116;
  _QWORD *v117;
  int *v118;
  int *v119;
  unint64_t v120;
  const std::nothrow_t *v121;
  unint64_t v122;
  char *v123;
  BOOL v124;
  uint64_t inited;
  const operations_research::sat::LinearConstraint *v126;
  unint64_t v127;
  char *v128;
  _QWORD *v129;
  _QWORD *v130;
  unint64_t v131;
  int v132;
  int v133;
  int v134;
  int v135;
  uint64_t v136;
  int v137;
  double v138;
  uint64_t v140;
  unsigned __int8 *v141;
  unsigned __int8 v142;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  const operations_research::sat::LinearConstraint *v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double *v152;
  double v153;
  unint64_t v154;
  int *v155;
  uint64_t v156;
  int *v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  int *v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int *v168;
  _OWORD *v169;
  int *v170;
  uint64_t v171;
  __int128 v172;
  int v173;
  _QWORD *v174;
  _QWORD *v175;
  char *v176;
  char *v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  size_t v184;
  char *v185;
  char *v186;
  unint64_t v187;
  _BOOL8 v188;
  void *v189;
  char *v190;
  char *v191;
  unint64_t v192;
  __int128 v193;
  char *v194;
  int64_t v195;
  unint64_t v196;
  uint64_t v197;
  char *v198;
  char v199;
  uint64_t v201;
  char v202;
  uint64_t *v203;
  uint64_t v204;
  void **v205;
  uint64_t *v206;
  int v207;
  uint64_t v208[2];
  uint64_t *v209;
  double v210;
  void *__p;
  char *v212;
  char *v213;
  void *v214;
  double *v215;
  double *v216;
  std::vector<int> v217;

  if (*off_2540795E8[0] >= 3
    && (off_2540795E8[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_2540795E8, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_constraint_manager.cc", (const char *)3)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)&v217, (google::glog_internal_namespace_ *)"./ortools/sat/linear_constraint_manager.cc", 440);
    v6 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v217);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Enter ChangeLP, scan ", 21);
    v7 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" constraints", 12);
    google::LogMessage::~LogMessage((google::LogMessage *)&v217);
  }
  v201 = a3;
  memset(&v217, 0, sizeof(v217));
  v214 = 0;
  v215 = 0;
  v216 = 0;
  __p = 0;
  v212 = 0;
  v213 = 0;
  v8 = *(_QWORD *)(*((_QWORD *)this + 1) + 864);
  v10 = *((_QWORD *)this + 3);
  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 3) = v8;
  if ((int)((unint64_t)(*((_QWORD *)this + 5) - v9) >> 7) >= 1)
  {
    v11 = 0;
    v202 = 0;
    v206 = (uint64_t *)((char *)this + 80);
    v203 = a2;
    v204 = v10;
    while (1)
    {
      if (v8 > v10)
      {
        v21 = operations_research::sat::LinearConstraintManager::SimplifyConstraint(this, (operations_research::sat::LinearConstraint *)(v9 + (v11 << 7)));
        v9 = *((_QWORD *)this + 4);
        if (v21)
        {
          operations_research::sat::DivideByGCD((uint64_t *)(v9 + (v11 << 7)), v22);
          v23 = (operations_research::sat *)(*((_QWORD *)this + 4) + (v11 << 7));
          *((_BYTE *)v23 + 88) = 0;
          v25 = operations_research::sat::ComputeL2Norm(v23, v24);
          v26 = *((_QWORD *)this + 4) + (v11 << 7);
          *(double *)(v26 + 64) = v25;
          if (*(_BYTE *)(v26 + 89))
            *((_BYTE *)this + 16) = 1;
          absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<unsigned long,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>>>::erase<unsigned long>(v206, (_QWORD *)(v26 + 96));
          v9 = *((_QWORD *)this + 4);
          v27 = (_QWORD *)(v9 + (v11 << 7));
          v17 = 0;
          v27[12] = v29;
          v30 = v27 + 12;
          v31 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v29)
                * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                   * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                    + v29));
          v32 = *((_QWORD *)this + 10);
          v18 = (v31 >> 7) ^ (v32 >> 12);
          v33 = *((_QWORD *)this + 13);
          while (1)
          {
            v12 = v18 & v33;
            v13 = *(_QWORD *)(v32 + (v18 & v33));
            v14 = ((v13 ^ (0x101010101010101 * (v31 & 0x7F))) - 0x101010101010101) & ~(v13 ^ (0x101010101010101
                                                                                                * (v31 & 0x7F))) & 0x8080808080808080;
            if (v14)
              break;
LABEL_11:
            if ((v13 & (~v13 << 6) & 0x8080808080808080) != 0)
            {
              v16 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<unsigned long,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>>>::prepare_insert(v206, v31);
              v15 = *((_QWORD *)this + 11);
              v19 = v15 + 16 * v16;
              *(_QWORD *)v19 = *v30;
              *(_DWORD *)(v19 + 8) = 0;
              v9 = *((_QWORD *)this + 4);
              goto LABEL_14;
            }
            v17 += 8;
            v18 = v17 + v12;
          }
          v15 = *((_QWORD *)this + 11);
          while (1)
          {
            v16 = (v12 + (__clz(__rbit64(v14)) >> 3)) & v33;
            if (*(_QWORD *)(v15 + 16 * v16) == v29)
              break;
            v14 &= v14 - 1;
            if (!v14)
              goto LABEL_11;
          }
LABEL_14:
          *(_DWORD *)(v15 + 16 * v16 + 8) = v11;
        }
      }
      v20 = v9 + (v11 << 7);
      if (*(_BYTE *)(v20 + 89))
        goto LABEL_16;
      v34 = operations_research::sat::ComputeActivity((_QWORD *)v20, a2);
      v9 = *((_QWORD *)this + 4);
      v35 = (uint64_t *)(v9 + (v11 << 7));
      v36 = v35[1];
      v37 = (double)*v35;
      v38 = -INFINITY;
      if (*v35 < (uint64_t)0x8000000000000003)
        v37 = -INFINITY;
      if (*v35 > 0x7FFFFFFFFFFFFFFDLL)
        v37 = INFINITY;
      v39 = v37 - v34;
      if (v36 >= (uint64_t)0x8000000000000003)
        v38 = (double)v36;
      if (v36 > 0x7FFFFFFFFFFFFFFDLL)
        v38 = INFINITY;
      v40 = v34 - v38;
      v41 = v39 >= v40 ? v39 : v40;
      if (v41 < 0.000001)
        goto LABEL_16;
      v35[9] = 0;
      end = v217.__end_;
      if (v217.__end_ < v217.__end_cap_.__value_)
      {
        *v217.__end_ = v11;
        v43 = end + 1;
        goto LABEL_55;
      }
      begin = v217.__begin_;
      v45 = (char *)v217.__end_ - (char *)v217.__begin_;
      v46 = v217.__end_ - v217.__begin_;
      v47 = v46 + 1;
      if ((unint64_t)(v46 + 1) >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v48 = (char *)v217.__end_cap_.__value_ - (char *)v217.__begin_;
      if (((char *)v217.__end_cap_.__value_ - (char *)v217.__begin_) >> 1 > v47)
        v47 = v48 >> 1;
      v49 = (unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v47;
      if (v49)
        break;
      v50 = 0;
      v51 = (int *)(4 * v46);
      *(_DWORD *)(4 * v46) = v11;
      v43 = (int *)(4 * v46 + 4);
      if (end != begin)
        goto LABEL_47;
LABEL_53:
      v217.__begin_ = v51;
      v217.__end_ = v43;
      v217.__end_cap_.__value_ = (int *)&v50[4 * v49];
      if (begin)
      {
        operator delete(begin);
        v9 = *((_QWORD *)this + 4);
      }
LABEL_55:
      v217.__end_ = v43;
      v61 = v215;
      v62 = v41 / *(double *)(v9 + (v11 << 7) + 64);
      if (v215 < v216)
      {
        *v215 = v62;
        v63 = (uint64_t)(v61 + 1);
        a2 = v203;
        goto LABEL_76;
      }
      v64 = (double *)v214;
      v65 = (char *)v215 - (_BYTE *)v214;
      v66 = ((char *)v215 - (_BYTE *)v214) >> 3;
      v67 = v66 + 1;
      a2 = v203;
      if ((unint64_t)(v66 + 1) >> 61)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v68 = (char *)v216 - (_BYTE *)v214;
      if (((char *)v216 - (_BYTE *)v214) >> 2 > v67)
        v67 = v68 >> 2;
      if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8)
        v69 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v69 = v67;
      if (v69)
      {
        if (v69 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v70 = (char *)operator new(8 * v69);
        v71 = (double *)&v70[8 * v66];
        *v71 = v62;
        v63 = (uint64_t)(v71 + 1);
        if (v61 == v64)
          goto LABEL_74;
LABEL_68:
        v72 = (char *)(v61 - 1) - (char *)v64;
        if (v72 < 0x58)
          goto LABEL_277;
        if ((unint64_t)((char *)v61 - &v70[v65]) < 0x20)
          goto LABEL_277;
        v73 = (v72 >> 3) + 1;
        v74 = 8 * (v73 & 0x3FFFFFFFFFFFFFFCLL);
        v75 = &v61[v74 / 0xFFFFFFFFFFFFFFF8];
        v71 = (double *)((char *)v71 - v74);
        v76 = &v70[8 * v66 - 16];
        v77 = v61 - 2;
        v78 = v73 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v79 = *(_OWORD *)v77;
          *((_OWORD *)v76 - 1) = *((_OWORD *)v77 - 1);
          *(_OWORD *)v76 = v79;
          v76 -= 32;
          v77 -= 4;
          v78 -= 4;
        }
        while (v78);
        v61 = v75;
        if (v73 != (v73 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_277:
          do
          {
            v80 = *((_QWORD *)v61-- - 1);
            *((_QWORD *)v71-- - 1) = v80;
          }
          while (v61 != v64);
        }
        goto LABEL_74;
      }
      v70 = 0;
      v71 = (double *)(8 * v66);
      *(double *)(8 * v66) = v62;
      v63 = 8 * v66 + 8;
      if (v61 != v64)
        goto LABEL_68;
LABEL_74:
      v214 = v71;
      v216 = (double *)&v70[8 * v69];
      if (v64)
        operator delete(v64);
LABEL_76:
      v215 = (double *)v63;
      v81 = v212;
      if (v212 >= v213)
      {
        v83 = (char *)__p;
        v84 = v212 - (_BYTE *)__p;
        v85 = (v212 - (_BYTE *)__p) >> 3;
        v86 = v85 + 1;
        if ((unint64_t)(v85 + 1) >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v87 = v213 - (_BYTE *)__p;
        if ((v213 - (_BYTE *)__p) >> 2 > v86)
          v86 = v87 >> 2;
        if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8)
          v88 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v88 = v86;
        if (v88)
        {
          if (v88 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v89 = (char *)operator new(8 * v88);
          v90 = &v89[8 * v85];
          *(_QWORD *)v90 = 0x3FF0000000000000;
          v82 = (uint64_t)(v90 + 8);
          if (v81 == v83)
            goto LABEL_95;
LABEL_89:
          v91 = v81 - 8 - v83;
          if (v91 < 0x58)
            goto LABEL_278;
          if ((unint64_t)(v81 - &v89[v84]) < 0x20)
            goto LABEL_278;
          v92 = (v91 >> 3) + 1;
          v93 = 8 * (v92 & 0x3FFFFFFFFFFFFFFCLL);
          v94 = &v81[-v93];
          v90 -= v93;
          v95 = &v89[8 * v85 - 16];
          v96 = v81 - 16;
          v97 = v92 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v98 = *(_OWORD *)v96;
            *((_OWORD *)v95 - 1) = *((_OWORD *)v96 - 1);
            *(_OWORD *)v95 = v98;
            v95 -= 32;
            v96 -= 32;
            v97 -= 4;
          }
          while (v97);
          v81 = v94;
          if (v92 != (v92 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_278:
            do
            {
              v99 = *((_QWORD *)v81 - 1);
              v81 -= 8;
              *((_QWORD *)v90 - 1) = v99;
              v90 -= 8;
            }
            while (v81 != v83);
          }
        }
        else
        {
          v89 = 0;
          v90 = (char *)(8 * v85);
          *(_QWORD *)(8 * v85) = 0x3FF0000000000000;
          v82 = 8 * v85 + 8;
          if (v81 != v83)
            goto LABEL_89;
        }
LABEL_95:
        __p = v90;
        v213 = &v89[8 * v88];
        if (v83)
          operator delete(v83);
        goto LABEL_97;
      }
      *(_QWORD *)v212 = 0x3FF0000000000000;
      v82 = (uint64_t)(v81 + 8);
LABEL_97:
      v10 = v204;
      v212 = (char *)v82;
      v9 = *((_QWORD *)this + 4);
      if (*((_BYTE *)this + 192))
      {
        if (!*(_BYTE *)(v9 + (v11 << 7) + 88))
        {
          operations_research::sat::LinearConstraintManager::ComputeObjectiveParallelism((uint64_t)this, v11);
          v9 = *((_QWORD *)this + 4);
          v10 = v204;
        }
      }
      else
      {
        *(_QWORD *)(v9 + (v11 << 7) + 80) = 0;
      }
      v100 = v9 + (v11 << 7);
      *(double *)(v100 + 104) = *(v215 - 1) + *(double *)(v100 + 80);
      if (*(_BYTE *)(v100 + 120))
      {
        v101 = *((double *)this + 31) + *(double *)(v100 + 112);
        *(double *)(v100 + 112) = v101;
        if (v101 > *(double *)(*(_QWORD *)this + 552))
          v202 = 1;
      }
LABEL_16:
      if (++v11 >= (int)((unint64_t)(*((_QWORD *)this + 5) - v9) >> 7))
        goto LABEL_105;
    }
    if (v49 >> 62)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v50 = operator new(4 * v49);
    v51 = (int *)&v50[4 * v46];
    *v51 = v11;
    v43 = v51 + 1;
    if (end == begin)
      goto LABEL_53;
LABEL_47:
    v52 = (char *)(end - 1) - (char *)begin;
    if (v52 < 0x2C)
      goto LABEL_279;
    if ((unint64_t)((char *)end - &v50[v45]) < 0x20)
      goto LABEL_279;
    v53 = (v52 >> 2) + 1;
    v54 = 4 * (v53 & 0x7FFFFFFFFFFFFFF8);
    v55 = &end[v54 / 0xFFFFFFFFFFFFFFFCLL];
    v51 = (int *)((char *)v51 - v54);
    v56 = &v50[4 * v46 - 16];
    v57 = (__int128 *)(end - 4);
    v58 = v53 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v59 = *v57;
      *(v56 - 1) = *(v57 - 1);
      *v56 = v59;
      v56 -= 2;
      v57 -= 2;
      v58 -= 8;
    }
    while (v58);
    end = v55;
    if (v53 != (v53 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_279:
      do
      {
        v60 = *--end;
        *--v51 = v60;
      }
      while (end != begin);
    }
    goto LABEL_53;
  }
  v202 = 0;
LABEL_105:
  if (v201)
  {
    v102 = (int *)*((_QWORD *)this + 7);
    v103 = *((_QWORD *)this + 8) - (_QWORD)v102;
    v104 = v103 >> 2;
    v105 = v202;
    if ((int)(v103 >> 2) >= 1)
    {
      v106 = (v103 >> 2);
      v107 = (unsigned __int8 *)(*(_QWORD *)v201 + (int)(*(_DWORD *)(v201 + 8) - *(_QWORD *)v201 - v104));
      do
      {
        if (*v107++)
        {
          v109 = v9 + ((uint64_t)*v102 << 7);
          if (*(_BYTE *)(v109 + 120))
          {
            v110 = *((double *)this + 31) + *(double *)(v109 + 112);
            *(double *)(v109 + 112) = v110;
            if (v110 > *(double *)(*(_QWORD *)this + 552))
              v105 = 1;
          }
        }
        ++v102;
        --v106;
      }
      while (v106);
    }
  }
  else
  {
    v105 = v202;
  }
  v111 = *(_QWORD *)this;
  if ((v105 & 1) != 0)
  {
    v112 = *(double *)(v111 + 552);
    *(double *)v208 = v112;
    v209 = 0;
    if (v112 <= 0.0)
    {
      v210 = COERCE_DOUBLE(google::MakeCheckOpString<double,double>((int)v208, (int)&v209, "sat_parameters_.cut_max_active_count_value() > 0.0"));
      if (v210 != 0.0)
      {
        google::LogMessageFatal::LogMessageFatal((unint64_t *)v208, (google::glog_internal_namespace_ *)"./ortools/sat/linear_constraint_manager.cc", 538, (uint64_t **)&v210);
        google::LogMessage::stream((google::LogMessage *)v208);
LABEL_274:
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v208);
      }
      v112 = *(double *)(*(_QWORD *)this + 552);
    }
    operations_research::sat::LinearConstraintManager::RescaleActiveCounts(this, 1.0 / v112);
    v111 = *(_QWORD *)this;
  }
  *((double *)this + 31) = *((double *)this + 31) * (1.0 / *(double *)(v111 + 568));
  if (operations_research::sat::LinearConstraintManager::MaybeRemoveSomeInactiveConstraints((uint64_t)this, v201))*((_BYTE *)this + 16) = 1;
  v114 = *(_DWORD *)(*(_QWORD *)this + 460);
  if (*((_QWORD *)this + 7) == *((_QWORD *)this + 8))
    v114 = 1000;
  if (v114 >= (int)((unint64_t)((char *)v217.__end_ - (char *)v217.__begin_) >> 2))
    v115 = (unint64_t)((char *)v217.__end_ - (char *)v217.__begin_) >> 2;
  else
    v115 = v114;
  if (*off_2540795F0[0] >= 3
    && (off_2540795F0[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_2540795F0, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_constraint_manager.cc", (const char *)3)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v208, (google::glog_internal_namespace_ *)"./ortools/sat/linear_constraint_manager.cc", 569);
    v116 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v208);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116, (uint64_t)"   - size = ", 12);
    v117 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v117, (uint64_t)", limit = ", 10);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v208);
  }
  v118 = v217.__begin_;
  v119 = v217.__end_;
  v208[0] = (uint64_t)this;
  v120 = v217.__end_ - v217.__begin_;
  if ((char *)v217.__end_ - (char *)v217.__begin_ < 513)
  {
LABEL_132:
    std::__stable_sort<std::_ClassicAlgPolicy,operations_research::sat::LinearConstraintManager::ChangeLp(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::glop::BasisState *)::$_0 &,std::__wrap_iter<gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int> *>>(v118, v119, v208, v120, 0, 0, v113);
    v127 = 4 * v115;
    if (v127 >= v217.__end_ - v217.__begin_)
      goto LABEL_143;
    goto LABEL_135;
  }
  v121 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
  v122 = v217.__end_ - v217.__begin_;
  while (1)
  {
    v123 = (char *)operator new(4 * v122, v121);
    if (v123)
      break;
    v124 = v122 > 1;
    v122 >>= 1;
    if (!v124)
      goto LABEL_132;
  }
  v128 = v123;
  std::__stable_sort<std::_ClassicAlgPolicy,operations_research::sat::LinearConstraintManager::ChangeLp(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::glop::BasisState *)::$_0 &,std::__wrap_iter<gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int> *>>(v118, v119, v208, v120, v123, v122, v113);
  operator delete(v128);
  v127 = 4 * v115;
  if (v127 < v217.__end_ - v217.__begin_)
  {
LABEL_135:
    if (*off_2540795F8[0] >= 3)
    {
      if (off_2540795F8[0] != &google::kLogSiteUninitialized
        || (inited = google::InitVLOG3__((google *)off_2540795F8, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_constraint_manager.cc", (const char *)3), (_DWORD)inited))
      {
        google::LogMessage::LogMessage((google::LogMessage *)v208, (google::glog_internal_namespace_ *)"./ortools/sat/linear_constraint_manager.cc", 578);
        v129 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v208);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)"Resize candidate constraints from ", 34);
        v130 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v130, (uint64_t)" down to ", 9);
        std::ostream::operator<<();
        google::LogMessage::~LogMessage((google::LogMessage *)v208);
      }
    }
    v131 = v217.__end_ - v217.__begin_;
    if (v127 <= v131)
    {
      if (v127 < v131)
        v217.__end_ = &v217.__begin_[v127];
    }
    else
    {
      std::vector<int>::__append(&v217, v127 - v131);
    }
  }
LABEL_143:
  if (v115 < 1)
    goto LABEL_249;
  if (v217.__end_ == v217.__begin_)
  {
    do
      --v115;
    while (v115);
    v134 = 0;
LABEL_211:
    if (v134 >= 1)
    {
      if (*off_254079600[0] >= 2
        && (off_254079600[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)off_254079600, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_constraint_manager.cc", (const char *)2)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)v208, (google::glog_internal_namespace_ *)"./ortools/sat/linear_constraint_manager.cc", 649);
        v174 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v208);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v174, (uint64_t)"Added ", 6);
        v175 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v175, (uint64_t)" constraints.", 13);
        google::LogMessage::~LogMessage((google::LogMessage *)v208);
      }
      v176 = *(char **)v201;
      v177 = *(char **)(v201 + 8);
      v178 = (unint64_t)&v177[-*(_QWORD *)v201];
      v179 = v134 + (int)v178;
      v180 = v179 - v178;
      if (v179 > v178)
      {
        v181 = *(_QWORD *)(v201 + 16);
        if (v181 - (uint64_t)v177 >= v180)
        {
          bzero(v177, v179 - v178);
          *(_QWORD *)(v201 + 8) = &v177[v180];
          goto LABEL_249;
        }
        if ((v179 & 0x80000000) != 0)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v182 = v181 - (_QWORD)v176;
        v183 = 2 * v182;
        if (2 * v182 <= v179)
          v183 = v179;
        if (v182 >= 0x3FFFFFFFFFFFFFFFLL)
          v184 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v184 = v183;
        v185 = (char *)operator new(v184);
        v186 = &v185[v178];
        bzero(&v185[v178], v179 - v178);
        if (v177 == v176)
          goto LABEL_247;
        if (v178 >= 8 && (unint64_t)(v176 - v185) >= 0x20)
        {
          if (v178 < 0x20)
          {
            v187 = 0;
            goto LABEL_239;
          }
          v187 = v178 & 0xFFFFFFFFFFFFFFE0;
          v190 = v177 - 16;
          v191 = &v185[v177 - 16 - v176];
          v192 = v178 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v193 = *(_OWORD *)v190;
            *((_OWORD *)v191 - 1) = *((_OWORD *)v190 - 1);
            *(_OWORD *)v191 = v193;
            v191 -= 32;
            v190 -= 32;
            v192 -= 32;
          }
          while (v192);
          if (v178 == v187)
            goto LABEL_246;
          if ((v178 & 0x18) != 0)
          {
LABEL_239:
            v186 -= v178 & 0xFFFFFFFFFFFFFFF8;
            v194 = &v177[-v187 - 8];
            v195 = v194 - v176;
            v196 = v187 - (v178 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v197 = *(_QWORD *)v194;
              v194 -= 8;
              *(_QWORD *)&v185[v195] = v197;
              v195 -= 8;
              v196 += 8;
            }
            while (v196);
            v177 -= v178 & 0xFFFFFFFFFFFFFFF8;
            if (v178 == (v178 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_246;
            goto LABEL_244;
          }
          v186 -= v187;
          v177 -= v187;
        }
LABEL_244:
        v198 = v186 - 1;
        do
        {
          v199 = *--v177;
          *v198-- = v199;
        }
        while (v177 != v176);
LABEL_246:
        v186 = v185;
LABEL_247:
        *(_QWORD *)v201 = v186;
        *(_QWORD *)(v201 + 8) = &v185[v179];
        *(_QWORD *)(v201 + 16) = &v185[v184];
        if (v176)
          operator delete(v176);
        goto LABEL_249;
      }
      if (v179 < v178)
        *(_QWORD *)(v201 + 8) = &v176[v179];
    }
LABEL_249:
    if (*((_DWORD *)this + 64) > *(_DWORD *)(*(_QWORD *)this + 400))
      operations_research::sat::LinearConstraintManager::PermanentlyRemoveSomeConstraints(this);
    if (*((_BYTE *)this + 16))
    {
      *((_BYTE *)this + 16) = 0;
      v188 = 1;
      v189 = __p;
      if (!__p)
        goto LABEL_254;
    }
    else
    {
      v188 = 0;
      v189 = __p;
      if (!__p)
        goto LABEL_254;
    }
LABEL_253:
    operator delete(v189);
    goto LABEL_254;
  }
  v205 = (void **)((char *)this + 56);
  v132 = 0;
  v133 = 0;
  v134 = 0;
  v135 = -1;
LABEL_146:
  while (v217.__end_ == v217.__begin_)
  {
    if (++v132 == v115)
      goto LABEL_211;
  }
  v207 = v134;
  v136 = 0;
  v137 = -1;
  v138 = 0.0;
  while (1)
  {
    if (v133 < 99)
    {
      ++v133;
      v145 = v217.__begin_[v136];
      v146 = *((_QWORD *)this + 4);
      v147 = (const operations_research::sat::LinearConstraint *)(v146 + (v145 << 7));
      if (*((_BYTE *)v147 + 89))
        goto LABEL_153;
      goto LABEL_172;
    }
    v140 = *((_QWORD *)this + 29);
    v141 = *(unsigned __int8 **)(v140 + 120);
    if (v141)
    {
      v142 = atomic_load(v141);
      if ((v142 & 1) != 0)
        goto LABEL_230;
    }
    if (fmax(*(double *)(v140 + 104) - *(double *)(v140 + 112), 0.0) <= 0.0)
      goto LABEL_230;
    CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)inited);
    if (*(_QWORD *)(v140 + 24) <= CurrentTimeNanos - *(_QWORD *)(v140 + 8))
      v144 = CurrentTimeNanos - *(_QWORD *)(v140 + 8);
    else
      v144 = *(_QWORD *)(v140 + 24);
    operations_research::RunningMax<long long>::Add((int *)(v140 + 32), v144);
    *(_QWORD *)(v140 + 8) = CurrentTimeNanos;
    if (*(_QWORD *)(*(_QWORD *)(v140 + 40) + 8 * *(int *)(v140 + 68)) + CurrentTimeNanos < *(_QWORD *)(v140 + 16))
    {
      v133 = 0;
      v145 = v217.__begin_[v136];
      v146 = *((_QWORD *)this + 4);
      v147 = (const operations_research::sat::LinearConstraint *)(v146 + (v145 << 7));
      if (*((_BYTE *)v147 + 89))
        goto LABEL_153;
      goto LABEL_172;
    }
    if (!FLAGS_time_limit_use_usertime)
      goto LABEL_229;
    v148 = *(double *)(v140 + 96);
    if (!*(_BYTE *)(v140 + 72))
      break;
    inited = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)inited);
    v149 = v148 + (double)(inited - *(_QWORD *)(v140 + 80) + *(_QWORD *)(v140 + 88)) * -0.000000001;
    if (v149 <= 0.0001)
      goto LABEL_229;
LABEL_171:
    v133 = 0;
    *(_QWORD *)(v140 + 16) = *(_QWORD *)(v140 + 8) + (uint64_t)(v149 * 1000000000.0);
    v145 = v217.__begin_[v136];
    v146 = *((_QWORD *)this + 4);
    v147 = (const operations_research::sat::LinearConstraint *)(v146 + (v145 << 7));
    if (*((_BYTE *)v147 + 89))
      goto LABEL_153;
LABEL_172:
    if (v135 == -1)
    {
      v152 = (double *)__p;
      if (*((double *)__p + v136) >= *(double *)(*(_QWORD *)this + 432))
        goto LABEL_178;
    }
    else
    {
      v150 = operations_research::sat::ScalarProduct((operations_research::sat *)(v146 + ((uint64_t)v135 << 7)), v147, v126);
      v146 = *((_QWORD *)this + 4);
      v151 = 1.0 - fabs(v150) / (*(double *)(v146 + ((uint64_t)v135 << 7) + 64) * *(double *)(v146 + (v145 << 7) + 64));
      v152 = (double *)__p;
      if (v151 >= *((double *)__p + v136))
        v151 = *((double *)__p + v136);
      *((double *)__p + v136) = v151;
      if (v151 >= *(double *)(*(_QWORD *)this + 432))
      {
LABEL_178:
        v210 = 0.0;
        v153 = v152[v136] + *(double *)(v146 + (v145 << 7) + 104);
        v210 = v153;
        v208[0] = 0;
        if (v153 < 0.0)
        {
          inited = google::MakeCheckOpString<double,double>((int)&v210, (int)v208, "score >= 0.0");
          v209 = (uint64_t *)inited;
          if (inited)
          {
            google::LogMessageFatal::LogMessageFatal((unint64_t *)v208, (google::glog_internal_namespace_ *)"./ortools/sat/linear_constraint_manager.cc", 627, &v209);
            google::LogMessage::stream((google::LogMessage *)v208);
            goto LABEL_274;
          }
          v153 = v210;
        }
        if (v153 > v138 || v137 == -1)
        {
          v137 = v145;
          v138 = v153;
        }
      }
    }
LABEL_153:
    if (++v136 >= (unint64_t)(v217.__end_ - v217.__begin_))
    {
      if (v137 == -1)
      {
        v134 = v207;
        if (++v132 != v115)
          goto LABEL_146;
        goto LABEL_211;
      }
      *(_BYTE *)(*((_QWORD *)this + 4) + ((uint64_t)v137 << 7) + 89) = 1;
      *((_BYTE *)this + 16) = 1;
      v155 = (int *)*((_QWORD *)this + 8);
      v154 = *((_QWORD *)this + 9);
      if ((unint64_t)v155 < v154)
      {
        *v155 = v137;
        v156 = (uint64_t)(v155 + 1);
        goto LABEL_207;
      }
      v157 = (int *)*v205;
      v158 = (char *)v155 - (_BYTE *)*v205;
      v159 = v158 >> 2;
      v160 = (v158 >> 2) + 1;
      if (v160 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v161 = v154 - (_QWORD)v157;
      if (v161 >> 1 > v160)
        v160 = v161 >> 1;
      if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFFCLL)
        v162 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v162 = v160;
      if (v162)
      {
        if (v162 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v163 = v162;
        inited = (uint64_t)operator new(4 * v162);
        v162 = v163;
        v164 = (int *)(inited + 4 * v159);
        *v164 = v137;
        v156 = (uint64_t)(v164 + 1);
        if (v155 == v157)
          goto LABEL_205;
      }
      else
      {
        inited = 0;
        v164 = (int *)(4 * v159);
        *(_DWORD *)(4 * v159) = v137;
        v156 = 4 * v159 + 4;
        if (v155 == v157)
        {
LABEL_205:
          *((_QWORD *)this + 7) = v164;
          *((_QWORD *)this + 8) = v156;
          *((_QWORD *)this + 9) = inited + 4 * v162;
          if (v157)
            operator delete(v157);
LABEL_207:
          *((_QWORD *)this + 8) = v156;
          v134 = v207 + 1;
          ++v132;
          v135 = v137;
          if (v132 != v115)
            goto LABEL_146;
          goto LABEL_211;
        }
      }
      v165 = (char *)(v155 - 1) - (char *)v157;
      if (v165 < 0x2C)
        goto LABEL_280;
      if ((unint64_t)v155 - inited - v158 < 0x20)
        goto LABEL_280;
      v166 = (v165 >> 2) + 1;
      v167 = 4 * (v166 & 0x7FFFFFFFFFFFFFF8);
      v168 = &v155[v167 / 0xFFFFFFFFFFFFFFFCLL];
      v164 = (int *)((char *)v164 - v167);
      v169 = (_OWORD *)(inited + 4 * v159 - 16);
      v170 = v155 - 4;
      v171 = v166 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v172 = *(_OWORD *)v170;
        *(v169 - 1) = *((_OWORD *)v170 - 1);
        *v169 = v172;
        v169 -= 2;
        v170 -= 8;
        v171 -= 8;
      }
      while (v171);
      v155 = v168;
      if (v166 != (v166 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_280:
        do
        {
          v173 = *--v155;
          *--v164 = v173;
        }
        while (v155 != v157);
      }
      goto LABEL_205;
    }
  }
  v149 = v148 + (double)*(uint64_t *)(v140 + 88) * -0.000000001;
  if (v149 > 0.0001)
    goto LABEL_171;
LABEL_229:
  *(_QWORD *)(v140 + 16) = 0;
LABEL_230:
  v188 = *((_BYTE *)this + 16) != 0;
  v189 = __p;
  if (__p)
    goto LABEL_253;
LABEL_254:
  if (v214)
    operator delete(v214);
  if (v217.__begin_)
  {
    v217.__end_ = v217.__begin_;
    operator delete(v217.__begin_);
  }
  return v188;
}

void sub_22DB8CDD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DB8CDDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  void *v27;
  void *v28;

  if (__p)
  {
    operator delete(__p);
    v27 = a22;
    if (!a22)
    {
LABEL_3:
      v28 = a25;
      if (!a25)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v27 = a22;
    if (!a22)
      goto LABEL_3;
  }
  operator delete(v27);
  v28 = a25;
  if (!a25)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v28);
  _Unwind_Resume(exception_object);
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<unsigned long,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>>>::erase<unsigned long>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;

  v2 = 0;
  v3 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *a2)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + *a2));
  v4 = *a1;
  v5 = (v3 >> 7) ^ ((unint64_t)*a1 >> 12);
  v6 = a1[3];
  v7 = 0x101010101010101 * (v3 & 0x7F);
  while (1)
  {
    v8 = v5 & v6;
    v9 = *(_QWORD *)(v4 + (v5 & v6));
    v10 = ((v9 ^ v7) - 0x101010101010101) & ~(v9 ^ v7) & 0x8080808080808080;
    if (v10)
      break;
LABEL_5:
    if ((v9 & (~v9 << 6) & 0x8080808080808080) != 0)
      return 0;
    v2 += 8;
    v5 = v2 + v8;
  }
  while (1)
  {
    v11 = (v8 + (__clz(__rbit64(v10)) >> 3)) & v6;
    if (*(_QWORD *)(a1[1] + 16 * v11) == *a2)
      break;
    v10 &= v10 - 1;
    if (!v10)
      goto LABEL_5;
  }
  if (v11 == v6)
    return 0;
  --a1[2];
  v13 = *(_QWORD *)(v4 + ((v11 - 8) & v6));
  v14 = *(_QWORD *)(v4 + v11) & (~*(_QWORD *)(v4 + v11) << 6) & 0x8080808080808080;
  v15 = v13 & (~v13 << 6) & 0x8080808080808080;
  if (v15)
    v16 = v14 == 0;
  else
    v16 = 1;
  if (v16)
  {
    v20 = 0;
    v17 = -2;
  }
  else
  {
    v18 = (__clz(v15) >> 3) + (__clz(__rbit64(v14)) >> 3);
    v19 = v18 >= 8;
    v20 = v18 < 8;
    if (v19)
      v17 = -2;
    else
      v17 = 0x80;
  }
  *(_BYTE *)(v4 + v11) = v17;
  *(_BYTE *)((a1[3] & (v11 - 8)) + (a1[3] & 7) + *a1 + 1) = v17;
  v21 = a1[4];
  a1[5] += v20;
  if (!v21)
    return 1;
  v22 = (unint64_t *)(v21 + 8);
  do
    v23 = __ldxr(v22);
  while (__stxr(v23 - 1, v22));
  v24 = (unint64_t *)(v21 + 16);
  result = 1;
  do
    v25 = __ldxr(v24);
  while (__stxr(v25 + 1, v24));
  return result;
}

void operations_research::sat::LinearConstraintManager::AddAllConstraintsToLp(operations_research::sat::LinearConstraintManager *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  int v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _DWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  void **v28;

  v2 = *((_QWORD *)this + 4);
  v1 = *((_QWORD *)this + 5);
  if ((int)((unint64_t)(v1 - v2) >> 7) >= 1)
  {
    v4 = 0;
    v28 = (void **)((char *)this + 56);
    while (1)
    {
      v6 = v2 + (v4 << 7);
      v8 = *(unsigned __int8 *)(v6 + 89);
      v7 = (_BYTE *)(v6 + 89);
      if (v8)
        goto LABEL_5;
      *v7 = 1;
      v10 = (char *)*((_QWORD *)this + 8);
      v9 = *((_QWORD *)this + 9);
      if ((unint64_t)v10 >= v9)
        break;
      *(_DWORD *)v10 = v4;
      v5 = (uint64_t)(v10 + 4);
LABEL_4:
      *((_QWORD *)this + 8) = v5;
LABEL_5:
      if (++v4 >= (int)((unint64_t)(v1 - v2) >> 7))
        return;
    }
    v11 = (char *)*v28;
    v12 = v10 - (_BYTE *)*v28;
    v13 = v12 >> 2;
    v14 = (v12 >> 2) + 1;
    if (v14 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v15 = v9 - (_QWORD)v11;
    if (v15 >> 1 > v14)
      v14 = v15 >> 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
      v16 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v17 = operator new(4 * v16);
      v18 = &v17[4 * v13];
      *v18 = v4;
      v5 = (uint64_t)(v18 + 1);
      if (v10 == v11)
        goto LABEL_25;
    }
    else
    {
      v17 = 0;
      v18 = (_DWORD *)(4 * v13);
      *(_DWORD *)(4 * v13) = v4;
      v5 = 4 * v13 + 4;
      if (v10 == v11)
      {
LABEL_25:
        *((_QWORD *)this + 7) = v18;
        *((_QWORD *)this + 8) = v5;
        *((_QWORD *)this + 9) = &v17[4 * v16];
        if (v11)
        {
          operator delete(v11);
          v2 = *((_QWORD *)this + 4);
          v1 = *((_QWORD *)this + 5);
        }
        goto LABEL_4;
      }
    }
    v19 = v10 - 4 - v11;
    if (v19 < 0x2C)
      goto LABEL_33;
    if ((unint64_t)(v10 - &v17[v12]) < 0x20)
      goto LABEL_33;
    v20 = (v19 >> 2) + 1;
    v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
    v22 = &v10[-v21];
    v18 = (_DWORD *)((char *)v18 - v21);
    v23 = &v17[4 * v13 - 16];
    v24 = v10 - 16;
    v25 = v20 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 8;
    }
    while (v25);
    v10 = v22;
    if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_33:
      do
      {
        v27 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *--v18 = v27;
      }
      while (v10 != v11);
    }
    goto LABEL_25;
  }
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<unsigned long,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<unsigned long,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      v7 = v13;
      v4 = *a1;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<unsigned long,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<unsigned long,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<unsigned long,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>>>::resize(char **a1, char *a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;

  v2 = (unint64_t)a2;
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  v9 = (char *)operator new(v8 + 16 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  v10 = v2 - (v2 >> 3);
  if (v2 == 7)
    v10 = 6;
  v11 = a1[2];
  a1[5] = (char *)(v10 - (_QWORD)v11);
  v12 = a1[4];
  if (v12)
  {
    *((_QWORD *)v12 + 1) = v11;
    *(_QWORD *)v12 = v2;
    if (!v11)
    {
      *((_QWORD *)v12 + 4) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    v14 = 0;
    v24 = a1[4];
    if (!v24)
      return;
LABEL_21:
    *((_QWORD *)v24 + 4) = v14 >> 3;
    *((_QWORD *)v24 + 2) = 0;
    return;
  }
  v13 = 0;
  v14 = 0;
  do
  {
    if ((v13[(_QWORD)v4] & 0x80000000) == 0)
    {
      v18 = &v5[16 * (_QWORD)v13];
      v19 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(_QWORD *)v18)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(_QWORD *)v18));
      v20 = *a1;
      v21 = a1[3];
      v22 = ((v19 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v21;
      v23 = *(_QWORD *)&(*a1)[v22] & (~*(_QWORD *)&(*a1)[v22] << 7) & 0x8080808080808080;
      if (v23)
      {
        v15 = 0;
      }
      else
      {
        v15 = 0;
        do
        {
          v15 += 8;
          v22 = (v15 + v22) & (unint64_t)v21;
          v23 = *(_QWORD *)&v20[v22] & (~*(_QWORD *)&v20[v22] << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      v16 = (v22 + (__clz(__rbit64(v23)) >> 3)) & (unint64_t)v21;
      v14 += v15;
      v17 = v19 & 0x7F;
      v20[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      *(_OWORD *)&a1[1][16 * v16] = *(_OWORD *)v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  v24 = a1[4];
  if (v24)
    goto LABEL_21;
}

char *std::vector<operations_research::sat::LinearConstraintManager::ConstraintInfo>::__push_back_slow_path<operations_research::sat::LinearConstraintManager::ConstraintInfo>(void **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  __int128 v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  void *v25;
  void *v26;

  v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 7;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 57)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v6 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v6 >> 6 > v4)
    v4 = v6 >> 6;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFF80)
    v7 = 0x1FFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  if (v7)
  {
    if (v7 >> 57)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v8 = (char *)operator new(v7 << 7);
  }
  else
  {
    v8 = 0;
  }
  v9 = *(_OWORD *)(a2 + 16);
  v10 = &v8[128 * v3];
  *(_OWORD *)v10 = *(_OWORD *)a2;
  *((_OWORD *)v10 + 1) = v9;
  v11 = &v8[128 * v7];
  *((_QWORD *)v10 + 4) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(v10 + 40) = *(_OWORD *)(a2 + 40);
  *((_QWORD *)v10 + 7) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v12 = *(_OWORD *)(a2 + 64);
  v13 = *(_OWORD *)(a2 + 80);
  v14 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v10 + 105) = *(_OWORD *)(a2 + 105);
  *((_OWORD *)v10 + 5) = v13;
  *((_OWORD *)v10 + 6) = v14;
  *((_OWORD *)v10 + 4) = v12;
  v15 = v10 + 128;
  v16 = (char *)*a1;
  v17 = (char *)a1[1];
  if (v17 == *a1)
  {
    *a1 = v10;
    a1[1] = v15;
    a1[2] = v11;
    if (!v17)
      return v15;
    goto LABEL_23;
  }
  v18 = 0;
  do
  {
    v19 = &v10[v18];
    v20 = &v17[v18];
    *((_OWORD *)v19 - 8) = *(_OWORD *)&v17[v18 - 128];
    *((_QWORD *)v19 - 13) = 0;
    *((_QWORD *)v19 - 12) = 0;
    *((_OWORD *)v19 - 7) = *(_OWORD *)&v17[v18 - 112];
    *((_QWORD *)v19 - 12) = *(_QWORD *)&v17[v18 - 96];
    *((_QWORD *)v20 - 14) = 0;
    *((_QWORD *)v20 - 13) = 0;
    *((_QWORD *)v20 - 12) = 0;
    *((_QWORD *)v19 - 10) = 0;
    *((_QWORD *)v19 - 9) = 0;
    *(_OWORD *)(v19 - 88) = *(_OWORD *)&v17[v18 - 88];
    *((_QWORD *)v19 - 9) = *(_QWORD *)&v17[v18 - 72];
    *((_QWORD *)v20 - 11) = 0;
    *((_QWORD *)v20 - 10) = 0;
    *((_QWORD *)v20 - 9) = 0;
    v21 = *(_OWORD *)&v17[v18 - 64];
    v22 = *(_OWORD *)&v17[v18 - 48];
    v23 = *(_OWORD *)&v17[v18 - 32];
    *(_OWORD *)(v19 - 23) = *(_OWORD *)&v17[v18 - 23];
    *((_OWORD *)v19 - 3) = v22;
    *((_OWORD *)v19 - 2) = v23;
    *((_OWORD *)v19 - 4) = v21;
    v18 -= 128;
  }
  while (&v17[v18] != v16);
  v24 = (char *)*a1;
  v17 = (char *)a1[1];
  *a1 = &v10[v18];
  a1[1] = v15;
  a1[2] = v11;
  if (v17 != v24)
  {
    do
    {
      v25 = (void *)*((_QWORD *)v17 - 11);
      if (v25)
      {
        *((_QWORD *)v17 - 10) = v25;
        operator delete(v25);
      }
      v26 = (void *)*((_QWORD *)v17 - 14);
      if (v26)
      {
        *((_QWORD *)v17 - 13) = v26;
        operator delete(v26);
      }
      v17 -= 128;
    }
    while (v17 != v24);
    v17 = v24;
  }
  if (v17)
LABEL_23:
    operator delete(v17);
  return v15;
}

uint64_t google::MakeCheckOpString<double,double>(int a1, int a2, char *a3)
{
  uint64_t v3;
  uint64_t v5;

  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5, a3);
  std::ostream::operator<<();
  google::base::CheckOpMessageBuilder::ForVar2((google::base::CheckOpMessageBuilder *)&v5);
  std::ostream::operator<<();
  v3 = google::base::CheckOpMessageBuilder::NewString((google::base::CheckOpMessageBuilder *)&v5);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5);
  return v3;
}

void sub_22DB8D7E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

void std::vector<operations_research::sat::LinearConstraintManager::ConstraintInfo>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  void *v23;
  void *v24;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (a2 <= (v4 - (uint64_t)v5) >> 7)
  {
    if (a2)
    {
      bzero(*(void **)(a1 + 8), a2 << 7);
      v5 += 128 * a2;
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(char **)a1;
    v7 = (uint64_t)&v5[-*(_QWORD *)a1] >> 7;
    v8 = v7 + a2;
    if ((v7 + a2) >> 57)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v9 = v4 - (_QWORD)v6;
    if (v9 >> 6 > v8)
      v8 = v9 >> 6;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFF80)
      v10 = 0x1FFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 57)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(v10 << 7);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[128 * v7];
    v13 = a2 << 7;
    v14 = &v11[128 * v10];
    bzero(v12, v13);
    v15 = &v12[v13];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v12;
      *(_QWORD *)(a1 + 8) = v15;
      *(_QWORD *)(a1 + 16) = v14;
      if (v5)
LABEL_27:
        operator delete(v5);
    }
    else
    {
      v16 = 0;
      do
      {
        v17 = &v12[v16];
        v18 = &v5[v16];
        *((_OWORD *)v17 - 8) = *(_OWORD *)&v5[v16 - 128];
        *((_QWORD *)v17 - 13) = 0;
        *((_QWORD *)v17 - 12) = 0;
        *((_OWORD *)v17 - 7) = *(_OWORD *)&v5[v16 - 112];
        *((_QWORD *)v17 - 12) = *(_QWORD *)&v5[v16 - 96];
        *((_QWORD *)v18 - 14) = 0;
        *((_QWORD *)v18 - 13) = 0;
        *((_QWORD *)v18 - 12) = 0;
        *((_QWORD *)v17 - 10) = 0;
        *((_QWORD *)v17 - 9) = 0;
        *(_OWORD *)(v17 - 88) = *(_OWORD *)&v5[v16 - 88];
        *((_QWORD *)v17 - 9) = *(_QWORD *)&v5[v16 - 72];
        *((_QWORD *)v18 - 11) = 0;
        *((_QWORD *)v18 - 10) = 0;
        *((_QWORD *)v18 - 9) = 0;
        v19 = *(_OWORD *)&v5[v16 - 64];
        v20 = *(_OWORD *)&v5[v16 - 48];
        v21 = *(_OWORD *)&v5[v16 - 32];
        *(_OWORD *)(v17 - 23) = *(_OWORD *)&v5[v16 - 23];
        *((_OWORD *)v17 - 3) = v20;
        *((_OWORD *)v17 - 2) = v21;
        *((_OWORD *)v17 - 4) = v19;
        v16 -= 128;
      }
      while (&v5[v16] != v6);
      v22 = *(char **)a1;
      v5 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = &v12[v16];
      *(_QWORD *)(a1 + 8) = v15;
      *(_QWORD *)(a1 + 16) = v14;
      if (v5 != v22)
      {
        do
        {
          v23 = (void *)*((_QWORD *)v5 - 11);
          if (v23)
          {
            *((_QWORD *)v5 - 10) = v23;
            operator delete(v23);
          }
          v24 = (void *)*((_QWORD *)v5 - 14);
          if (v24)
          {
            *((_QWORD *)v5 - 13) = v24;
            operator delete(v24);
          }
          v5 -= 128;
        }
        while (v5 != v22);
        v5 = v22;
      }
      if (v5)
        goto LABEL_27;
    }
  }
}

__n128 std::__stable_sort<std::_ClassicAlgPolicy,operations_research::sat::LinearConstraintManager::ChangeLp(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::glop::BasisState *)::$_0 &,std::__wrap_iter<gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int> *>>(int *a1, int *a2, uint64_t *a3, unint64_t a4, char *a5, uint64_t a6, __n128 result)
{
  __n128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v24;
  int *v25;
  unint64_t v26;
  __n128 v27;
  __n128 v28;
  int *v29;
  uint64_t v30;
  int *v31;
  char *v32;
  __n128 *v33;
  int *v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 *v45;
  char v46;
  int *v47;
  uint64_t v48;
  __n128 *v49;
  __n128 v50;
  unsigned __int32 v51;
  unint64_t v52;
  int *v53;
  __n128 *v54;
  unsigned __int32 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __n128 *v60;
  __n128 v61;

  if (a4 >= 2)
  {
    v9 = (__n128 *)a1;
    if (a4 == 2)
    {
      v10 = *(a2 - 1);
      v11 = *a1;
      v12 = *(_QWORD *)(*a3 + 32);
      result.n128_u64[0] = *(_QWORD *)(v12 + (v10 << 7) + 104);
      if (result.n128_f64[0] > *(double *)(v12 + (v11 << 7) + 104))
      {
        *a1 = v10;
        *(a2 - 1) = v11;
      }
      return result;
    }
    if ((uint64_t)a4 > 128)
    {
      v24 = a4 >> 1;
      v25 = &a1[a4 >> 1];
      v26 = a4 >> 1;
      if ((uint64_t)a4 > a6)
      {
        std::__stable_sort<std::_ClassicAlgPolicy,operations_research::sat::LinearConstraintManager::ChangeLp(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::glop::BasisState *)::$_0 &,std::__wrap_iter<gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int> *>>(a1, v25, a3, v26, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,operations_research::sat::LinearConstraintManager::ChangeLp(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::glop::BasisState *)::$_0 &,std::__wrap_iter<gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int> *>>((char *)v9 + 4 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), a5, a6);
        result.n128_u64[0] = std::__inplace_merge<std::_ClassicAlgPolicy,operations_research::sat::LinearConstraintManager::ChangeLp(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::glop::BasisState *)::$_0 &,std::__wrap_iter<gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int> *>>(v9, (int *)v9 + (a4 >> 1), a2, a3, a4 >> 1, a4 - (a4 >> 1), a5, a6, v27).n128_u64[0];
        return result;
      }
      v28 = std::__stable_sort_move<std::_ClassicAlgPolicy,operations_research::sat::LinearConstraintManager::ChangeLp(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::glop::BasisState *)::$_0 &,std::__wrap_iter<gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int> *>>(a1, v25, a3, v26, (int *)a5, result);
      v29 = (int *)&a5[4 * v24];
      result.n128_u64[0] = std::__stable_sort_move<std::_ClassicAlgPolicy,operations_research::sat::LinearConstraintManager::ChangeLp(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::glop::BasisState *)::$_0 &,std::__wrap_iter<gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int> *>>((int *)v9 + (a4 >> 1), a2, a3, a4 - (a4 >> 1), v29, v28).n128_u64[0];
      v30 = *a3;
      v31 = v29;
      v32 = a5;
      v33 = v9;
      v34 = (int *)&a5[4 * a4];
      do
      {
        if (v31 == v34)
        {
          if (v32 == (char *)v29)
            return result;
          v52 = &a5[4 * v24] - v32 - 4;
          if (v52 >= 0x1C && (unint64_t)((char *)v9 - v32) >= 0x20)
          {
            v56 = 0;
            v57 = (v52 >> 2) + 1;
            v58 = 4 * (v57 & 0x7FFFFFFFFFFFFFF8);
            v53 = (int *)&v32[v58];
            v54 = (__n128 *)((char *)v33 + v58);
            v59 = v57 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v60 = &v33[v56];
              result = *(__n128 *)&v32[v56 * 16];
              v61 = *(__n128 *)&v32[v56 * 16 + 16];
              *v60 = result;
              v60[1] = v61;
              v56 += 2;
              v59 -= 8;
            }
            while (v59);
            if (v57 == (v57 & 0x7FFFFFFFFFFFFFF8))
              return result;
          }
          else
          {
            v53 = (int *)v32;
            v54 = v33;
          }
          do
          {
            v55 = *v53++;
            v54->n128_u32[0] = v55;
            v54 = (__n128 *)((char *)v54 + 4);
          }
          while (v53 != v29);
          return result;
        }
        v35 = v31;
        v36 = *v31;
        v37 = *(int *)v32;
        v38 = *(_QWORD *)(v30 + 32);
        result.n128_u64[0] = *(_QWORD *)(v38 + (v36 << 7) + 104);
        v39 = *(double *)(v38 + (v37 << 7) + 104);
        if (result.n128_f64[0] > v39)
          LODWORD(v37) = v36;
        v32 += 4 * (result.n128_f64[0] <= v39);
        v31 = &v35[result.n128_f64[0] > v39];
        v33->n128_u32[0] = v37;
        v33 = (__n128 *)((char *)v33 + 4);
        v9 = (__n128 *)((char *)v9 + 4);
      }
      while (v32 != (char *)v29);
      if (v31 != v34)
      {
        v40 = -4;
        if (result.n128_f64[0] <= v39)
          v40 = 0;
        v41 = &a5[4 * a4] - (char *)v35 + v40 - 4;
        if (v41 < 0x3C || (unint64_t)((char *)v9 - (char *)&v35[result.n128_f64[0] > v39]) < 0x20)
          goto LABEL_48;
        v42 = 0;
        v43 = (v41 >> 2) + 1;
        v44 = 4 * (v43 & 0x7FFFFFFFFFFFFFF8);
        v31 = (int *)((char *)v31 + v44);
        v45 = (__n128 *)((char *)v33 + v44);
        v46 = result.n128_f64[0] > v39 ? 1 : 2;
        v47 = &v35[v46 & 1];
        v48 = v43 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v49 = &v33[v42 / 4];
          result = *(__n128 *)&v47[v42];
          v50 = *(__n128 *)&v47[v42 + 4];
          *v49 = result;
          v49[1] = v50;
          v42 += 8;
          v48 -= 8;
        }
        while (v48);
        v33 = v45;
        if (v43 != (v43 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_48:
          do
          {
            v51 = *v31++;
            v33->n128_u32[0] = v51;
            v33 = (__n128 *)((char *)v33 + 4);
          }
          while (v31 != v34);
        }
      }
    }
    else if (a1 != a2)
    {
      v14 = a1 + 1;
      if (a1 + 1 != a2)
      {
        v15 = 0;
        v16 = *(_QWORD *)(*a3 + 32);
        v17 = a1;
        do
        {
          v19 = *v17;
          v17 = v14;
          v20 = *v14;
          result.n128_u64[0] = *(_QWORD *)(v16 + (v20 << 7) + 104);
          if (result.n128_f64[0] > *(double *)(v16 + (v19 << 7) + 104))
          {
            v21 = v15;
            do
            {
              *(int *)((char *)a1 + v21 + 4) = v19;
              if (!v21)
              {
                v18 = a1;
                goto LABEL_10;
              }
              v19 = *(int *)((char *)a1 + v21 - 4);
              v21 -= 4;
            }
            while (result.n128_f64[0] > *(double *)(v16 + (v19 << 7) + 104));
            v18 = (int *)((char *)a1 + v21 + 4);
LABEL_10:
            *v18 = v20;
          }
          v14 = v17 + 1;
          v15 += 4;
        }
        while (v17 + 1 != a2);
      }
    }
  }
  return result;
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,operations_research::sat::LinearConstraintManager::ChangeLp(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::glop::BasisState *)::$_0 &,std::__wrap_iter<gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int> *>>(int *a1, int *a2, uint64_t *a3, unint64_t a4, int *a5, __n128 result)
{
  int *v6;
  int *v8;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  int *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int *v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  int *v45;
  uint64_t v46;
  int *v47;
  __int128 v48;
  int v49;
  unint64_t v50;
  int *v51;
  int *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  __int128 v59;

  if (a4)
  {
    v6 = a5;
    v8 = a1;
    if (a4 == 1)
    {
LABEL_8:
      *v6 = *v8;
      return result;
    }
    if (a4 == 2)
    {
      v11 = *(a2 - 1);
      v12 = *(_QWORD *)(*a3 + 32);
      result.n128_u64[0] = *(_QWORD *)(v12 + (v11 << 7) + 104);
      v13 = *(double *)(v12 + ((uint64_t)*a1 << 7) + 104);
      if (result.n128_f64[0] <= v13)
        LODWORD(v11) = *a1;
      *a5 = v11;
      v6 = a5 + 1;
      if (result.n128_f64[0] <= v13)
        v8 = a2 - 1;
      goto LABEL_8;
    }
    if ((uint64_t)a4 > 8)
    {
      v27 = a4 >> 1;
      v28 = a4 >> 1;
      v29 = &a1[v28];
      std::__stable_sort<std::_ClassicAlgPolicy,operations_research::sat::LinearConstraintManager::ChangeLp(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::glop::BasisState *)::$_0 &,std::__wrap_iter<gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int> *>>(a1, &a1[v28], a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,operations_research::sat::LinearConstraintManager::ChangeLp(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::glop::BasisState *)::$_0 &,std::__wrap_iter<gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int> *>>(&v8[v28], a2, a3, a4 - v27, &v6[v28], a4 - v27);
      v30 = *a3;
      v31 = (char *)v6;
      v32 = (char *)v8;
      v33 = &v8[v28];
      do
      {
        if (v33 == a2)
        {
          if (v32 == (char *)v29)
            return result;
          v50 = (char *)&v8[v27] - v32 - 4;
          if (v50 >= 0x1C && (unint64_t)(v31 - v32) >= 0x20)
          {
            v54 = 0;
            v55 = (v50 >> 2) + 1;
            v56 = v55 & 0x7FFFFFFFFFFFFFF8;
            v51 = &v6[v56];
            v52 = (int *)&v32[v56 * 4];
            v57 = v55 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v58 = &v6[v54];
              result = *(__n128 *)&v32[v54 * 4];
              v59 = *(_OWORD *)&v32[v54 * 4 + 16];
              *(__n128 *)v58 = result;
              *((_OWORD *)v58 + 1) = v59;
              v54 += 8;
              v57 -= 8;
            }
            while (v57);
            if (v55 == (v55 & 0x7FFFFFFFFFFFFFF8))
              return result;
          }
          else
          {
            v51 = v6;
            v52 = (int *)v32;
          }
          do
          {
            v53 = *v52++;
            *v51++ = v53;
          }
          while (v52 != v29);
          return result;
        }
        v34 = v33;
        v35 = *v33;
        v36 = *(int *)v32;
        v37 = *(_QWORD *)(v30 + 32);
        result.n128_u64[0] = *(_QWORD *)(v37 + (v35 << 7) + 104);
        v38 = *(double *)(v37 + (v36 << 7) + 104);
        if (result.n128_f64[0] > v38)
          LODWORD(v36) = v35;
        v33 = &v34[result.n128_f64[0] > v38];
        v32 += 4 * (result.n128_f64[0] <= v38);
        *v6++ = v36;
        v31 += 4;
      }
      while (v32 != (char *)v29);
      if (v33 != a2)
      {
        v39 = -4;
        if (result.n128_f64[0] <= v38)
          v39 = 0;
        v40 = (char *)a2 - (char *)v34 + v39 - 4;
        if (v40 < 0x3C)
          goto LABEL_49;
        if ((unint64_t)(v31 - (char *)&v34[result.n128_f64[0] > v38]) < 0x20)
          goto LABEL_49;
        v41 = 0;
        v42 = (v40 >> 2) + 1;
        v43 = v42 & 0x7FFFFFFFFFFFFFF8;
        v44 = &v6[v43];
        v33 = (int *)((char *)v33 + v43 * 4);
        v45 = &v34[result.n128_f64[0] > v38];
        v46 = v42 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v47 = &v6[v41];
          result = *(__n128 *)&v45[v41];
          v48 = *(_OWORD *)&v45[v41 + 4];
          *(__n128 *)v47 = result;
          *((_OWORD *)v47 + 1) = v48;
          v41 += 8;
          v46 -= 8;
        }
        while (v46);
        v6 = v44;
        if (v42 != (v42 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_49:
          do
          {
            v49 = *v33++;
            *v6++ = v49;
          }
          while (v33 != a2);
        }
      }
    }
    else if (a1 != a2)
    {
      v14 = *a3;
      v15 = a1 + 1;
      *a5 = *a1;
      if (a1 + 1 != a2)
      {
        v16 = 0;
        v17 = *(_QWORD *)(v14 + 32);
        v18 = a5;
        v19 = a5;
        do
        {
          while (1)
          {
            v21 = *v19++;
            v20 = v21;
            v22 = *v15;
            result.n128_u64[0] = *(_QWORD *)(v17 + (v22 << 7) + 104);
            if (result.n128_f64[0] > *(double *)(v17 + (v21 << 7) + 104))
              break;
            *v19 = v22;
            ++v15;
            v16 += 4;
            v18 = v19;
            if (v15 == a2)
              return result;
          }
          v18[1] = v20;
          v23 = a5;
          if (v18 != a5)
          {
            v24 = v16;
            while (1)
            {
              v23 = (int *)((char *)a5 + v24);
              v25 = *(int *)((char *)a5 + v24 - 4);
              result.n128_u64[0] = *(_QWORD *)(v17 + ((uint64_t)*v15 << 7) + 104);
              if (result.n128_f64[0] <= *(double *)(v17 + (v25 << 7) + 104))
                break;
              *v23 = v25;
              v24 -= 4;
              if (!v24)
              {
                v23 = a5;
                break;
              }
            }
          }
          v26 = *v15++;
          *v23 = v26;
          v16 += 4;
          v18 = v19;
        }
        while (v15 != a2);
      }
    }
  }
  return result;
}

__n128 std::__inplace_merge<std::_ClassicAlgPolicy,operations_research::sat::LinearConstraintManager::ChangeLp(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::glop::BasisState *)::$_0 &,std::__wrap_iter<gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int> *>>(__n128 *a1, int *a2, int *a3, uint64_t *a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8, __n128 result)
{
  uint64_t v10;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 *v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  int *v25;
  unint64_t v26;
  unint64_t v27;
  int *v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  int v37;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int *v42;
  int *v43;
  uint64_t v44;
  int *v45;
  int v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  int v52;
  int v53;
  int *v54;
  int *v55;
  int *v56;
  uint64_t v57;
  BOOL v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  __n128 *v62;
  uint64_t *v63;
  char *v64;
  int *v65;
  int *v66;
  int *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  int64_t v73;
  unint64_t v74;
  char *v75;
  int *v76;
  uint64_t v77;
  uint64_t v78;
  __n128 *v79;
  __n128 *v80;
  uint64_t v81;
  __n128 v82;
  unint64_t v83;
  char *v84;
  int *v85;
  uint64_t v86;
  uint64_t v87;
  __n128 *v88;
  __n128 *v89;
  uint64_t v90;
  __n128 v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  double v96;
  int v97;
  int *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  int *v102;
  int *v103;
  int *v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int *v110;
  int v111;
  int v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t v118;

  if (!a6)
    return result;
  v10 = a6;
  while (v10 > a8 && a5 > a8)
  {
    if (!a5)
      return result;
    v15 = 0;
    v16 = *a2;
    v17 = *(_QWORD *)(*a4 + 32);
    result.n128_u64[0] = *(_QWORD *)(v17 + (v16 << 7) + 104);
    v18 = -a5;
    while (1)
    {
      v19 = a1->n128_i32[v15 / 4];
      if (result.n128_f64[0] > *(double *)(v17 + (v19 << 7) + 104))
        break;
      v15 += 4;
      if (__CFADD__(v18++, 1))
        return result;
    }
    v21 = (__n128 *)((char *)a1 + v15);
    if (-v18 >= v10)
    {
      if (v18 == -1)
      {
        a1->n128_u32[v15 / 4] = v16;
        *a2 = v19;
        return result;
      }
      if (v18 <= 0)
        v39 = -v18;
      else
        v39 = 1 - v18;
      v31 = v39 >> 1;
      v25 = (int *)((char *)a1 + 4 * (v39 >> 1) + v15);
      v24 = a2;
      if (a2 != a3)
      {
        v40 = a3 - a2;
        v24 = a2;
        do
        {
          v41 = v40 >> 1;
          v42 = &v24[v40 >> 1];
          v44 = *v42;
          v43 = v42 + 1;
          v40 += ~(v40 >> 1);
          if (*(double *)(v17 + (v44 << 7) + 104) > *(double *)(v17 + ((uint64_t)*v25 << 7) + 104))
            v24 = v43;
          else
            v40 = v41;
        }
        while (v40);
      }
      v23 = v24 - a2;
      if (v25 != a2)
      {
LABEL_22:
        v32 = (char *)v24 - (char *)a2;
        if (v24 == a2)
        {
          a2 = v25;
        }
        else
        {
          v33 = v25 + 1;
          v118 = v23;
          if (v25 + 1 == a2)
          {
            v111 = *v25;
            v114 = a7;
            v116 = a4;
            v45 = a3;
            v113 = v31;
            memmove(v25, a2, (char *)v24 - (char *)a2);
            a4 = v116;
            v23 = v118;
            v31 = v113;
            a7 = v114;
            v21 = (__n128 *)((char *)a1 + v15);
            a3 = v45;
            a2 = (int *)((char *)v25 + v32);
            *(int *)((char *)v25 + v32) = v111;
          }
          else
          {
            v34 = v31;
            v35 = a2 + 1;
            if (a2 + 1 == v24)
            {
              v46 = *(v24 - 1);
              a2 = v25 + 1;
              if (v24 - 1 != v25)
              {
                v115 = a7;
                v117 = a4;
                v47 = a3;
                v112 = *(v24 - 1);
                memmove(v25 + 1, v25, (char *)(v24 - 1) - (char *)v25);
                v46 = v112;
                v21 = (__n128 *)((char *)a1 + v15);
                a7 = v115;
                a4 = v117;
                a3 = v47;
              }
              *v25 = v46;
              v31 = v34;
              v23 = v118;
            }
            else
            {
              v36 = a2 - v25;
              if (v36 == v32 >> 2)
              {
                do
                {
                  v37 = *(v33 - 1);
                  *(v33 - 1) = *(v35 - 1);
                  *(v35 - 1) = v37;
                  if (v33 == a2)
                    break;
                  ++v33;
                }
                while (v35++ != v24);
              }
              else
              {
                v48 = v32 >> 2;
                v49 = a2 - v25;
                do
                {
                  v50 = v49;
                  v49 = v48;
                  v48 = v50 % v48;
                }
                while (v48);
                if (v49)
                {
                  v51 = &v25[v49];
                  do
                  {
                    v53 = *--v51;
                    v52 = v53;
                    v54 = &v51[v36];
                    v55 = v51;
                    do
                    {
                      v56 = v54;
                      *v55 = *v54;
                      v57 = v24 - v54;
                      v58 = __OFSUB__(v36, v57);
                      v60 = v36 - v57;
                      v59 = (v60 < 0) ^ v58;
                      v54 = &v25[v60];
                      if (v59)
                        v54 = &v56[v36];
                      v55 = v56;
                    }
                    while (v54 != v51);
                    *v56 = v52;
                  }
                  while (v51 != v25);
                }
                a2 = &v25[v32 >> 2];
              }
            }
          }
        }
        goto LABEL_57;
      }
    }
    else
    {
      if (v10 >= 0)
        v22 = v10;
      else
        v22 = v10 + 1;
      v23 = v22 >> 1;
      v24 = &a2[v22 >> 1];
      v25 = a2;
      if ((char *)a2 - (char *)a1 != v15)
      {
        v26 = (uint64_t)((char *)a2 - (char *)a1 - v15) >> 2;
        v25 = (int *)((char *)a1 + v15);
        do
        {
          v27 = v26 >> 1;
          v28 = &v25[v26 >> 1];
          v30 = *v28;
          v29 = v28 + 1;
          v26 += ~(v26 >> 1);
          if (*(double *)(v17 + ((uint64_t)*v24 << 7) + 104) > *(double *)(v17 + (v30 << 7) + 104))
            v26 = v27;
          else
            v25 = v29;
        }
        while (v26);
      }
      v31 = (uint64_t)((char *)v25 - (char *)a1 - v15) >> 2;
      if (v25 != a2)
        goto LABEL_22;
    }
    a2 = v24;
LABEL_57:
    a5 = -(v31 + v18);
    v61 = v10 - v23;
    if (v31 + v23 >= v10 - (v31 + v23) - v18)
    {
      v66 = a2;
      v67 = v24;
      v68 = a4;
      v69 = v31;
      v70 = v23;
      v71 = a7;
      a1 = v21;
      std::__inplace_merge<std::_ClassicAlgPolicy,operations_research::sat::LinearConstraintManager::ChangeLp(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::glop::BasisState *)::$_0 &,std::__wrap_iter<gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int> *>>(a2, v67, a3);
      a4 = v68;
      a7 = v71;
      a2 = v25;
      v72 = v70;
      a5 = v69;
      a3 = v66;
      v10 = v72;
      if (!v72)
        return result;
    }
    else
    {
      v62 = (__n128 *)((char *)a1 + v15);
      v63 = a4;
      v64 = a7;
      v65 = a3;
      std::__inplace_merge<std::_ClassicAlgPolicy,operations_research::sat::LinearConstraintManager::ChangeLp(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::glop::BasisState *)::$_0 &,std::__wrap_iter<gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int> *>>(v62, v25, a2);
      a4 = v63;
      a3 = v65;
      a7 = v64;
      a1 = (__n128 *)a2;
      a2 = v24;
      v10 = v61;
      if (!v61)
        return result;
    }
  }
  if (a5 <= v10)
  {
    if (a1 != (__n128 *)a2)
    {
      v83 = (char *)a2 - (char *)a1 - 4;
      v84 = a7;
      v85 = (int *)a1;
      if (v83 < 0x1C)
        goto LABEL_107;
      v84 = a7;
      v85 = (int *)a1;
      if ((unint64_t)(a7 - (char *)a1) < 0x20)
        goto LABEL_107;
      v86 = (v83 >> 2) + 1;
      v87 = 4 * (v86 & 0x7FFFFFFFFFFFFFF8);
      v84 = &a7[v87];
      v85 = (int *)((char *)a1 + v87);
      v88 = a1 + 1;
      v89 = (__n128 *)(a7 + 16);
      v90 = v86 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        result = v88[-1];
        v91 = *v88;
        v89[-1] = result;
        *v89 = v91;
        v88 += 2;
        v89 += 2;
        v90 -= 8;
      }
      while (v90);
      if (v86 != (v86 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_107:
        do
        {
          v92 = *v85++;
          *(_DWORD *)v84 = v92;
          v84 += 4;
        }
        while (v85 != a2);
      }
      if (v84 != a7)
      {
        v93 = *a4;
        while (a2 != a3)
        {
          v94 = *a2;
          v95 = *(_QWORD *)(v93 + 32);
          result.n128_u64[0] = *(_QWORD *)(v95 + (v94 << 7) + 104);
          v96 = *(double *)(v95 + ((uint64_t)*(int *)a7 << 7) + 104);
          if (result.n128_f64[0] <= v96)
            LODWORD(v94) = *(_DWORD *)a7;
          a2 += result.n128_f64[0] > v96;
          a7 += 4 * (result.n128_f64[0] <= v96);
          a1->n128_u32[0] = v94;
          a1 = (__n128 *)((char *)a1 + 4);
          if (a7 == v84)
            return result;
        }
        memmove(a1, a7, v84 - a7);
      }
    }
    return result;
  }
  v73 = (char *)a3 - (char *)a2;
  if (a3 == a2)
    return result;
  v74 = v73 - 4;
  if ((unint64_t)(v73 - 4) < 0x1C)
  {
    v75 = a7;
    v76 = a2;
    do
    {
LABEL_87:
      v97 = *v76++;
      *(_DWORD *)v75 = v97;
      v75 += 4;
    }
    while (v76 != a3);
    goto LABEL_88;
  }
  v75 = a7;
  v76 = a2;
  if ((unint64_t)(a7 - (char *)a2) < 0x20)
    goto LABEL_87;
  v77 = (v74 >> 2) + 1;
  v78 = v77 & 0x7FFFFFFFFFFFFFF8;
  v75 = &a7[v78 * 4];
  v76 = &a2[v78];
  v79 = (__n128 *)(a2 + 4);
  v80 = (__n128 *)(a7 + 16);
  v81 = v77 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    result = v79[-1];
    v82 = *v79;
    v80[-1] = result;
    *v80 = v82;
    v79 += 2;
    v80 += 2;
    v81 -= 8;
  }
  while (v81);
  if (v77 != (v77 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_87;
LABEL_88:
  if (v75 != a7)
  {
    v98 = a3;
    while (a2 != (int *)a1)
    {
      v99 = *(a2 - 1);
      v100 = *(_QWORD *)(*a4 + 32);
      result.n128_u64[0] = *(_QWORD *)(v100 + ((uint64_t)*((int *)v75 - 1) << 7) + 104);
      if (result.n128_f64[0] > *(double *)(v100 + (v99 << 7) + 104))
      {
        --a2;
      }
      else
      {
        LODWORD(v99) = *((_DWORD *)v75 - 1);
        v75 -= 4;
      }
      *--a3 = v99;
      --v98;
      if (v75 == a7)
        return result;
    }
    v101 = v75 - a7 - 4;
    if (v101 < 0x2C || (unint64_t)(v75 - (char *)v98) < 0x20)
    {
      v102 = (int *)v75;
      v103 = a3;
      goto LABEL_99;
    }
    v106 = 0;
    v107 = (v101 >> 2) + 1;
    v108 = 4 * (v107 & 0x7FFFFFFFFFFFFFF8);
    v102 = (int *)&v75[-v108];
    v103 = &a3[v108 / 0xFFFFFFFFFFFFFFFCLL];
    v109 = v107 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      result = *(__n128 *)&v75[v106 * 4 - 16];
      v110 = &a3[v106];
      *((_OWORD *)v110 - 2) = *(_OWORD *)&v75[v106 * 4 - 32];
      *((__n128 *)v110 - 1) = result;
      v106 -= 8;
      v109 -= 8;
    }
    while (v109);
    if (v107 != (v107 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_99:
      v104 = v103 - 1;
      do
      {
        v105 = *--v102;
        *v104-- = v105;
      }
      while (v102 != (int *)a7);
    }
  }
  return result;
}

operations_research::sat::LinearProgrammingConstraint *operations_research::sat::LinearProgrammingConstraint::LinearProgrammingConstraint(operations_research::sat::LinearProgrammingConstraint *this, operations_research::sat::Model *a2)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];
  int v14;
  char v15;

  *(_QWORD *)this = &off_24F987410;
  *((_QWORD *)this + 1) = &unk_24F987448;
  operations_research::sat::LinearConstraintManager::LinearConstraintManager((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 16), a2);
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  operations_research::glop::LinearProgram::LinearProgram((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 360));
  operations_research::glop::RevisedSimplex::RevisedSimplex((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840));
  *((_QWORD *)this + 2419) = 500;
  operations_research::glop::SparseMatrixScaler::SparseMatrixScaler((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 19360));
  __asm { FMOV            V0.2D, #1.0 }
  *((_OWORD *)this + 1214) = _Q0;
  *((_OWORD *)this + 1215) = 0u;
  *((_OWORD *)this + 1216) = 0u;
  *((_OWORD *)this + 1217) = 0u;
  *((_OWORD *)this + 1218) = 0u;
  *((_OWORD *)this + 1219) = 0u;
  *((_OWORD *)this + 1220) = 0u;
  *((_OWORD *)this + 1221) = 0u;
  *((_OWORD *)this + 1222) = 0u;
  *((_OWORD *)this + 1223) = 0u;
  *((_OWORD *)this + 1224) = 0u;
  *((_OWORD *)this + 1225) = 0u;
  *((_OWORD *)this + 1226) = 0u;
  *((_OWORD *)this + 1227) = 0u;
  *((_OWORD *)this + 1228) = 0u;
  *((_OWORD *)this + 1229) = 0u;
  *((_DWORD *)this + 4920) = 0;
  *(_OWORD *)((char *)this + 19688) = 0u;
  *(_OWORD *)((char *)this + 19704) = 0u;
  *(_OWORD *)((char *)this + 19720) = 0u;
  *(_OWORD *)((char *)this + 19736) = 0u;
  *(_OWORD *)((char *)this + 19752) = 0u;
  *(_OWORD *)((char *)this + 19768) = 0u;
  *(_OWORD *)((char *)this + 19784) = 0u;
  *(_OWORD *)((char *)this + 19800) = 0u;
  *(_OWORD *)((char *)this + 19816) = 0u;
  *(_OWORD *)((char *)this + 19832) = 0u;
  *(_OWORD *)((char *)this + 19848) = 0u;
  *(_OWORD *)((char *)this + 19864) = 0u;
  *(_OWORD *)((char *)this + 19880) = 0u;
  *(_OWORD *)((char *)this + 19896) = 0u;
  *(_OWORD *)((char *)this + 19912) = 0u;
  *(_OWORD *)((char *)this + 19928) = 0u;
  *((_QWORD *)this + 2493) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_OWORD *)((char *)this + 19981) = 0u;
  *((_OWORD *)this + 1248) = 0u;
  *((_OWORD *)this + 1247) = 0u;
  *((_QWORD *)this + 2500) = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a2);
  *((_QWORD *)this + 2501) = a2;
  *((_QWORD *)this + 2502) = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>((uint64_t)a2);
  *((_QWORD *)this + 2503) = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)a2);
  *((_QWORD *)this + 2504) = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)a2);
  *((_QWORD *)this + 2505) = operations_research::sat::Model::GetOrCreate<operations_research::sat::SearchHeuristicsVector>((uint64_t)a2);
  *((_QWORD *)this + 2506) = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)a2);
  *((_QWORD *)this + 2507) = operations_research::sat::Model::GetOrCreate<operations_research::sat::ModelRandomGenerator>((uint64_t)a2);
  v9 = *((_QWORD *)this + 2503);
  v10 = operations_research::sat::Model::GetOrCreate<operations_research::sat::ImpliedBounds>((uint64_t)a2);
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::raw_hash_set<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const*>((uint64_t)this + 20064, 0, 0, 0);
  *((_QWORD *)this + 2514) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_OWORD *)((char *)this + 20120) = 0u;
  *(_OWORD *)((char *)this + 20136) = 0u;
  *((_QWORD *)this + 2519) = 0;
  *((_QWORD *)this + 2520) = v9;
  *((_QWORD *)this + 2521) = v10;
  *((_QWORD *)this + 2522) = 0;
  *((_QWORD *)this + 2524) = 0;
  *((_QWORD *)this + 2523) = 0;
  *((_QWORD *)this + 2525) = operations_research::sat::Model::GetOrCreate<operations_research::sat::LinearProgrammingDispatcher>((uint64_t)a2);
  *((_OWORD *)this + 1263) = 0u;
  *((_OWORD *)this + 1264) = 0u;
  *((_OWORD *)this + 1265) = 0u;
  *((_OWORD *)this + 1266) = 0u;
  *(_OWORD *)((char *)this + 20268) = 0u;
  *((_QWORD *)this + 2536) = 0;
  *((_QWORD *)this + 2538) = 0;
  *((_QWORD *)this + 2537) = 0;
  *(_QWORD *)((char *)this + 20310) = 0;
  *(_OWORD *)((char *)this + 20328) = 0u;
  *(_OWORD *)((char *)this + 20344) = 0u;
  *(_OWORD *)((char *)this + 20360) = 0u;
  *(_OWORD *)((char *)this + 20376) = 0u;
  *(_OWORD *)((char *)this + 20385) = 0u;
  *((_QWORD *)this + 2551) = operations_research::sat::Model::GetOrCreate<operations_research::sat::LinearProgrammingConstraintLpSolution>((uint64_t)a2);
  *((_BYTE *)this + 20416) = 0;
  *((_QWORD *)this + 2553) = 0;
  *((_OWORD *)this + 1277) = 0u;
  *((_BYTE *)this + 20448) = 0;
  *(_OWORD *)((char *)this + 20452) = 0u;
  *(_OWORD *)((char *)this + 20468) = 0u;
  *(_OWORD *)((char *)this + 20484) = 0u;
  *(_OWORD *)((char *)this + 20500) = 0u;
  *(_OWORD *)((char *)this + 20516) = 0u;
  *(_OWORD *)((char *)this + 20532) = 0u;
  *(_OWORD *)((char *)this + 20548) = 0u;
  *(_OWORD *)((char *)this + 20564) = 0u;
  *((_QWORD *)this + 2573) = &off_24F9862B0;
  *((_OWORD *)this + 1287) = 0u;
  *((_OWORD *)this + 1288) = 0u;
  *((_OWORD *)this + 1289) = 0u;
  *((_OWORD *)this + 1290) = 0u;
  *((_OWORD *)this + 1291) = 0u;
  *((_OWORD *)this + 1292) = 0u;
  *((_BYTE *)this + 20688) = 0;
  *((_DWORD *)this + 5173) = 1;
  *(_OWORD *)((char *)this + 20696) = 0u;
  operations_research::glop::GlopParameters::GlopParameters((uint64_t)v13, 0);
  v14 |= 1u;
  v15 = 1;
  operations_research::glop::RevisedSimplex::SetParameters((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840), (const operations_research::glop::GlopParameters *)v13);
  v11 = *((_QWORD *)this + 2500);
  if (*(_BYTE *)(v11 + 156) || *(_DWORD *)(v11 + 124) == 3)
    *((_BYTE *)this + 20448) = 1;
  operations_research::sat::IntegerTrail::RegisterReversibleClass(*((_QWORD **)this + 2503), (uint64_t)this + 20584);
  operations_research::glop::GlopParameters::~GlopParameters((operations_research::glop::GlopParameters *)v13);
  return this;
}

void sub_22DB8EA60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, operations_research::sat::IntegerRoundingCutHelper *a11, operations_research::sat::LinearConstraint *a12, void **a13, operations_research::sat::LinearConstraintManager *a14, operations_research::glop::RevisedSimplex *a15, char a16)
{
  uint64_t v16;
  _QWORD *v17;
  void **v18;
  void **v19;
  void **v20;
  operations_research::sat::ImpliedBoundsProcessor *v21;
  void **v22;
  _QWORD *v23;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  operations_research::sat::LinearConstraint *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;

  v25 = *(void **)(v16 + 20648);
  if (v25)
  {
    *(_QWORD *)(v16 + 20656) = v25;
    operator delete(v25);
    operations_research::RevRepository<int>::~RevRepository(v17);
    v26 = *(void **)(v16 + 20552);
    if (!v26)
    {
LABEL_3:
      v27 = *(void **)(v16 + 20528);
      if (!v27)
        goto LABEL_4;
      goto LABEL_24;
    }
  }
  else
  {
    operations_research::RevRepository<int>::~RevRepository(v17);
    v26 = *(void **)(v16 + 20552);
    if (!v26)
      goto LABEL_3;
  }
  *(_QWORD *)(v16 + 20560) = v26;
  operator delete(v26);
  v27 = *(void **)(v16 + 20528);
  if (!v27)
  {
LABEL_4:
    v28 = *(void **)(v16 + 20504);
    if (!v28)
      goto LABEL_5;
    goto LABEL_25;
  }
LABEL_24:
  *(_QWORD *)(v16 + 20536) = v27;
  operator delete(v27);
  v28 = *(void **)(v16 + 20504);
  if (!v28)
  {
LABEL_5:
    v29 = *(void **)(v16 + 20480);
    if (!v29)
      goto LABEL_6;
    goto LABEL_26;
  }
LABEL_25:
  *(_QWORD *)(v16 + 20512) = v28;
  operator delete(v28);
  v29 = *(void **)(v16 + 20480);
  if (!v29)
  {
LABEL_6:
    v30 = *(void **)(v16 + 20456);
    if (!v30)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_26:
  *(_QWORD *)(v16 + 20488) = v29;
  operator delete(v29);
  v30 = *(void **)(v16 + 20456);
  if (!v30)
  {
LABEL_8:
    std::vector<operations_research::sat::CutGenerator>::~vector[abi:ne180100](v22);
    v31 = *(void **)(v16 + 20376);
    if (v31)
    {
      *(_QWORD *)(v16 + 20384) = v31;
      operator delete(v31);
      v32 = *(void **)(v16 + 20352);
      if (!v32)
      {
LABEL_10:
        v33 = *v20;
        if (!*v20)
          goto LABEL_11;
        goto LABEL_18;
      }
    }
    else
    {
      v32 = *(void **)(v16 + 20352);
      if (!v32)
        goto LABEL_10;
    }
    *(_QWORD *)(v16 + 20360) = v32;
    operator delete(v32);
    v33 = *v20;
    if (!*v20)
    {
LABEL_11:
      std::vector<std::unique_ptr<operations_research::sat::SubSolver>>::~vector[abi:ne180100](v23);
      v34 = *(void **)(v16 + 20256);
      if (!v34)
        goto LABEL_12;
      goto LABEL_19;
    }
LABEL_18:
    *(_QWORD *)(v16 + 20336) = v33;
    operator delete(v33);
    std::vector<std::unique_ptr<operations_research::sat::SubSolver>>::~vector[abi:ne180100](v23);
    v34 = *(void **)(v16 + 20256);
    if (!v34)
    {
LABEL_12:
      v35 = *(void **)(v16 + 20232);
      if (!v35)
        goto LABEL_13;
      goto LABEL_20;
    }
LABEL_19:
    *(_QWORD *)(v16 + 20264) = v34;
    operator delete(v34);
    v35 = *(void **)(v16 + 20232);
    if (!v35)
    {
LABEL_13:
      v36 = *v19;
      if (!*v19)
      {
LABEL_15:
        operations_research::sat::ImpliedBoundsProcessor::~ImpliedBoundsProcessor(v21);
        absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>::~flat_hash_map(a10);
        v37 = *(void **)(v16 + 19920);
        if (v37)
        {
          *(_QWORD *)(v16 + 19928) = v37;
          operator delete(v37);
          v38 = *(void **)(v16 + 19896);
          if (!v38)
          {
LABEL_30:
            v39 = *(void **)(v16 + 19872);
            if (!v39)
              goto LABEL_31;
            goto LABEL_43;
          }
        }
        else
        {
          v38 = *(void **)(v16 + 19896);
          if (!v38)
            goto LABEL_30;
        }
        *(_QWORD *)(v16 + 19904) = v38;
        operator delete(v38);
        v39 = *(void **)(v16 + 19872);
        if (!v39)
        {
LABEL_31:
          v40 = *(void **)(v16 + 19848);
          if (!v40)
            goto LABEL_32;
          goto LABEL_44;
        }
LABEL_43:
        *(_QWORD *)(v16 + 19880) = v39;
        operator delete(v39);
        v40 = *(void **)(v16 + 19848);
        if (!v40)
        {
LABEL_32:
          v41 = *(void **)(v16 + 19824);
          if (!v41)
            goto LABEL_33;
          goto LABEL_45;
        }
LABEL_44:
        *(_QWORD *)(v16 + 19856) = v40;
        operator delete(v40);
        v41 = *(void **)(v16 + 19824);
        if (!v41)
        {
LABEL_33:
          v42 = (operations_research::sat::LinearConstraint *)(v16 + 19712);
          v43 = *(void **)(v16 + 19800);
          if (!v43)
            goto LABEL_34;
          goto LABEL_46;
        }
LABEL_45:
        *(_QWORD *)(v16 + 19832) = v41;
        operator delete(v41);
        v42 = (operations_research::sat::LinearConstraint *)(v16 + 19712);
        v43 = *(void **)(v16 + 19800);
        if (!v43)
        {
LABEL_34:
          v44 = *(void **)(v16 + 19776);
          if (!v44)
            goto LABEL_36;
          goto LABEL_35;
        }
LABEL_46:
        *(_QWORD *)(v16 + 19808) = v43;
        operator delete(v43);
        v44 = *(void **)(v16 + 19776);
        if (!v44)
        {
LABEL_36:
          operations_research::sat::LinearConstraint::~LinearConstraint(v42);
          operations_research::sat::IntegerRoundingCutHelper::~IntegerRoundingCutHelper(a11);
          operations_research::sat::LinearConstraint::~LinearConstraint(a12);
          operations_research::glop::RevisedSimplex::~RevisedSimplex(a15);
          operations_research::glop::LinearProgram::~LinearProgram(a13);
          v45 = *(void **)(v16 + 336);
          if (v45)
          {
            *(_QWORD *)(v16 + 344) = v45;
            operator delete(v45);
            gtl::ITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::sat::FeasibilityPump::LinearConstraintInternal,std::allocator<operations_research::sat::FeasibilityPump::LinearConstraintInternal>>::~ITIVector((void **)(v16 + 312));
            v46 = *v18;
            if (!*v18)
            {
LABEL_38:
              operations_research::sat::LinearConstraintManager::~LinearConstraintManager(a14);
              _Unwind_Resume(a1);
            }
          }
          else
          {
            gtl::ITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::sat::FeasibilityPump::LinearConstraintInternal,std::allocator<operations_research::sat::FeasibilityPump::LinearConstraintInternal>>::~ITIVector((void **)(v16 + 312));
            v46 = *v18;
            if (!*v18)
              goto LABEL_38;
          }
          *(_QWORD *)(v16 + 288) = v46;
          operator delete(v46);
          operations_research::sat::LinearConstraintManager::~LinearConstraintManager(a14);
          _Unwind_Resume(a1);
        }
LABEL_35:
        *(_QWORD *)(v16 + 19784) = v44;
        operator delete(v44);
        goto LABEL_36;
      }
LABEL_14:
      *(_QWORD *)(v16 + 20216) = v36;
      operator delete(v36);
      goto LABEL_15;
    }
LABEL_20:
    *(_QWORD *)(v16 + 20240) = v35;
    operator delete(v35);
    v36 = *v19;
    if (!*v19)
      goto LABEL_15;
    goto LABEL_14;
  }
LABEL_7:
  *(_QWORD *)(v16 + 20464) = v30;
  operator delete(v30);
  goto LABEL_8;
}

_QWORD *operations_research::sat::Model::GetOrCreate<operations_research::sat::LinearProgrammingConstraintLpSolution>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v19;

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 32);
  if (!v2)
    goto LABEL_12;
  v4 = (_QWORD *)(a1 + 32);
  do
  {
    v5 = v2[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::LinearProgrammingConstraintLpSolution>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::LinearProgrammingConstraintLpSolution>(void)::d)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 != v3
    && v4[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::LinearProgrammingConstraintLpSolution>(void)::d)
  {
    return (_QWORD *)v4[5];
  }
LABEL_12:
  v8 = (_QWORD *)operator new();
  v8[1] = 0;
  v8[2] = 0;
  *v8 = 0;
  v9 = (_QWORD *)*v3;
  v10 = v3;
  if (*v3)
  {
    while (1)
    {
      while (1)
      {
        v10 = v9;
        v11 = v9[4];
        if (v11 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::LinearProgrammingConstraintLpSolution>(void)::d)
          break;
        v9 = (_QWORD *)*v10;
        v3 = v10;
        if (!*v10)
          goto LABEL_19;
      }
      if (v11 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::LinearProgrammingConstraintLpSolution>(void)::d)
        break;
      v9 = (_QWORD *)v10[1];
      if (!v9)
      {
        v3 = v10 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v12 = v10;
    v10 = operator new(0x30uLL);
    v10[4] = &gtl::FastTypeId<operations_research::sat::LinearProgrammingConstraintLpSolution>(void)::d;
    v10[5] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v12;
    *v3 = v10;
    v13 = **(_QWORD **)(a1 + 24);
    v14 = v10;
    if (v13)
    {
      *(_QWORD *)(a1 + 24) = v13;
      v14 = (uint64_t *)*v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v14);
    ++*(_QWORD *)(a1 + 40);
  }
  v10[5] = v8;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24F9874A8;
  v15[1] = v8;
  v19 = v15;
  v16 = *(_QWORD **)(a1 + 56);
  if ((unint64_t)v16 >= *(_QWORD *)(a1 + 64))
  {
    v17 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a1 + 48), &v19);
  }
  else
  {
    *v16 = v15;
    v17 = (char *)(v16 + 1);
  }
  *(_QWORD *)(a1 + 56) = v17;
  return v8;
}

void **std::vector<operations_research::sat::CutGenerator>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  uint64_t v6;
  void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_13:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      v5 = (char *)*((_QWORD *)v3 - 1);
      if (v3 - 32 == v5)
        break;
      if (v5)
      {
        v6 = 5;
LABEL_9:
        (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
      }
      v7 = (void *)*((_QWORD *)v3 - 7);
      if (v7)
      {
        *((_QWORD *)v3 - 6) = v7;
        operator delete(v7);
      }
      v3 -= 56;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_13;
      }
    }
    v5 = v3 - 32;
    v6 = 4;
    goto LABEL_9;
  }
  return a1;
}

void operations_research::sat::LinearProgrammingConstraint::~LinearProgrammingConstraint(operations_research::sat::LinearProgrammingConstraint *this)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  _BYTE v46[16];

  *(_QWORD *)this = &off_24F987410;
  *((_QWORD *)this + 1) = &unk_24F987448;
  if (*operations_research::sat::LinearProgrammingConstraint::~LinearProgrammingConstraint()::vlocal__ >= 1
    && (operations_research::sat::LinearProgrammingConstraint::~LinearProgrammingConstraint()::vlocal__ != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)&operations_research::sat::LinearProgrammingConstraint::~LinearProgrammingConstraint()::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v46, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 83);
    v2 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Total number of simplex iterations: ", 36);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v46);
  }
  v3 = (void *)*((_QWORD *)this + 2581);
  if (v3)
  {
    *((_QWORD *)this + 2582) = v3;
    operator delete(v3);
  }
  *((_QWORD *)this + 2573) = &off_24F9862B0;
  v4 = (void *)*((_QWORD *)this + 2578);
  if (v4)
  {
    *((_QWORD *)this + 2579) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 2575);
  if (v5)
  {
    *((_QWORD *)this + 2576) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 2569);
  if (v6)
  {
    *((_QWORD *)this + 2570) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 2566);
  if (v7)
  {
    *((_QWORD *)this + 2567) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 2563);
  if (v8)
  {
    *((_QWORD *)this + 2564) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 2560);
  if (v9)
  {
    *((_QWORD *)this + 2561) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 2557);
  if (v10)
  {
    *((_QWORD *)this + 2558) = v10;
    operator delete(v10);
  }
  v11 = *((_QWORD *)this + 2553);
  if (v11)
  {
    v12 = *((_QWORD *)this + 2554);
    v13 = (void *)*((_QWORD *)this + 2553);
    if (v12 == v11)
    {
LABEL_33:
      *((_QWORD *)this + 2554) = v11;
      operator delete(v13);
      goto LABEL_34;
    }
    while (1)
    {
      v14 = *(_QWORD **)(v12 - 8);
      if ((_QWORD *)(v12 - 32) == v14)
        break;
      if (v14)
      {
        v15 = 5;
LABEL_29:
        (*(void (**)(void))(*v14 + 8 * v15))();
      }
      v16 = *(void **)(v12 - 56);
      if (v16)
      {
        *(_QWORD *)(v12 - 48) = v16;
        operator delete(v16);
      }
      v12 -= 56;
      if (v12 == v11)
      {
        v13 = (void *)*((_QWORD *)this + 2553);
        goto LABEL_33;
      }
    }
    v14 = (_QWORD *)(v12 - 32);
    v15 = 4;
    goto LABEL_29;
  }
LABEL_34:
  v17 = (void *)*((_QWORD *)this + 2547);
  if (v17)
  {
    *((_QWORD *)this + 2548) = v17;
    operator delete(v17);
  }
  v18 = (void *)*((_QWORD *)this + 2544);
  if (v18)
  {
    *((_QWORD *)this + 2545) = v18;
    operator delete(v18);
  }
  v19 = (void *)*((_QWORD *)this + 2541);
  if (v19)
  {
    *((_QWORD *)this + 2542) = v19;
    operator delete(v19);
  }
  v20 = (_QWORD *)*((_QWORD *)this + 2536);
  if (v20)
  {
    v21 = (_QWORD *)*((_QWORD *)this + 2537);
    v22 = (void *)*((_QWORD *)this + 2536);
    if (v21 != v20)
    {
      do
      {
        v24 = *--v21;
        v23 = v24;
        *v21 = 0;
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      }
      while (v21 != v20);
      v22 = (void *)*((_QWORD *)this + 2536);
    }
    *((_QWORD *)this + 2537) = v20;
    operator delete(v22);
  }
  v25 = (void *)*((_QWORD *)this + 2532);
  if (v25)
  {
    *((_QWORD *)this + 2533) = v25;
    operator delete(v25);
  }
  v26 = (void *)*((_QWORD *)this + 2529);
  if (v26)
  {
    *((_QWORD *)this + 2530) = v26;
    operator delete(v26);
  }
  v27 = (void *)*((_QWORD *)this + 2526);
  if (v27)
  {
    *((_QWORD *)this + 2527) = v27;
    operator delete(v27);
  }
  operations_research::sat::ImpliedBoundsProcessor::~ImpliedBoundsProcessor((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 20064));
  if (*((_QWORD *)this + 2496))
  {
    operator delete(*((void **)this + 2493));
    *((_QWORD *)this + 2493) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *((_QWORD *)this + 2498) = 0;
    *((_QWORD *)this + 2494) = 0;
    *((_QWORD *)this + 2496) = 0;
    *((_QWORD *)this + 2495) = 0;
  }
  v28 = (_QWORD *)*((_QWORD *)this + 2497);
  if (v28)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v28);
  v29 = (void *)*((_QWORD *)this + 2490);
  if (v29)
  {
    *((_QWORD *)this + 2491) = v29;
    operator delete(v29);
  }
  v30 = (void *)*((_QWORD *)this + 2487);
  if (v30)
  {
    *((_QWORD *)this + 2488) = v30;
    operator delete(v30);
  }
  v31 = (void *)*((_QWORD *)this + 2484);
  if (v31)
  {
    *((_QWORD *)this + 2485) = v31;
    operator delete(v31);
  }
  v32 = (void *)*((_QWORD *)this + 2481);
  if (v32)
  {
    *((_QWORD *)this + 2482) = v32;
    operator delete(v32);
  }
  v33 = (void *)*((_QWORD *)this + 2478);
  if (v33)
  {
    *((_QWORD *)this + 2479) = v33;
    operator delete(v33);
  }
  v34 = (void *)*((_QWORD *)this + 2475);
  if (v34)
  {
    *((_QWORD *)this + 2476) = v34;
    operator delete(v34);
  }
  v35 = (void *)*((_QWORD *)this + 2472);
  if (v35)
  {
    *((_QWORD *)this + 2473) = v35;
    operator delete(v35);
  }
  v36 = (void *)*((_QWORD *)this + 2469);
  if (v36)
  {
    *((_QWORD *)this + 2470) = v36;
    operator delete(v36);
  }
  v37 = (void *)*((_QWORD *)this + 2466);
  if (v37)
  {
    *((_QWORD *)this + 2467) = v37;
    operator delete(v37);
  }
  operations_research::sat::IntegerRoundingCutHelper::~IntegerRoundingCutHelper((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 19440));
  v38 = (void *)*((_QWORD *)this + 2425);
  if (v38)
  {
    *((_QWORD *)this + 2426) = v38;
    operator delete(v38);
  }
  v39 = (void *)*((_QWORD *)this + 2422);
  if (v39)
  {
    *((_QWORD *)this + 2423) = v39;
    operator delete(v39);
  }
  operations_research::glop::RevisedSimplex::~RevisedSimplex((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840));
  operations_research::glop::LinearProgram::~LinearProgram((void **)this + 45);
  v40 = (void *)*((_QWORD *)this + 42);
  if (v40)
  {
    *((_QWORD *)this + 43) = v40;
    operator delete(v40);
  }
  v41 = *((_QWORD *)this + 39);
  if (v41)
  {
    v42 = *((_QWORD *)this + 40);
    v43 = (void *)*((_QWORD *)this + 39);
    if (v42 != v41)
    {
      do
      {
        v44 = *(void **)(v42 - 24);
        if (v44)
        {
          *(_QWORD *)(v42 - 16) = v44;
          operator delete(v44);
        }
        v42 -= 40;
      }
      while (v42 != v41);
      v43 = (void *)*((_QWORD *)this + 39);
    }
    *((_QWORD *)this + 40) = v41;
    operator delete(v43);
  }
  v45 = (void *)*((_QWORD *)this + 35);
  if (v45)
  {
    *((_QWORD *)this + 36) = v45;
    operator delete(v45);
  }
  operations_research::sat::LinearConstraintManager::~LinearConstraintManager((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 16));
}

{
  operations_research::sat::LinearProgrammingConstraint::~LinearProgrammingConstraint(this);
  JUMPOUT(0x22E31DF78);
}

void `non-virtual thunk to'operations_research::sat::LinearProgrammingConstraint::~LinearProgrammingConstraint(operations_research::sat::LinearProgrammingConstraint *this)
{
  operations_research::sat::LinearProgrammingConstraint::~LinearProgrammingConstraint((operations_research::sat::LinearProgrammingConstraint *)((char *)this - 8));
}

{
  operations_research::sat::LinearProgrammingConstraint::~LinearProgrammingConstraint((operations_research::sat::LinearProgrammingConstraint *)((char *)this - 8));
  JUMPOUT(0x22E31DF78);
}

void operations_research::sat::LinearProgrammingConstraint::AddLinearConstraint(operations_research::sat::LinearProgrammingConstraint *this, int **a2)
{
  char *v4;
  int *v5;
  int *v6;
  int v7;
  void *v8[2];
  void *v9;
  void *v10;
  void *__p;
  void *v12;

  v4 = (char *)this + 16;
  operations_research::sat::LinearConstraint::LinearConstraint((operations_research::sat::LinearConstraint *)v8, (const operations_research::sat::LinearConstraint *)a2);
  operations_research::sat::LinearConstraintManager::Add((uint64_t)v4, v8, 0);
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
  v6 = a2[2];
  v5 = a2[3];
  while (v6 != v5)
  {
    v7 = *v6++;
    operations_research::sat::LinearProgrammingConstraint::GetOrCreateMirrorVariable((uint64_t)this, v7 & 0xFFFFFFFE);
  }
}

void sub_22DB8F440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)&a9);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::LinearProgrammingConstraint::GetOrCreateMirrorVariable(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t j;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _DWORD *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  _DWORD *v46;
  char *v47;
  int64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  _OWORD *v53;
  char *v54;
  uint64_t v55;
  __int128 v56;
  int v57;
  char *v58;
  unint64_t v59;
  _QWORD *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _BYTE *v66;
  _QWORD *v67;
  char *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  _OWORD *v73;
  char *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _BYTE *v86;
  _QWORD *v87;
  char *v88;
  int64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  _OWORD *v94;
  char *v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v114;
  uint64_t v115;

  v4 = 0;
  v5 = (uint64_t *)(a1 + 19944);
  v6 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + a2)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + a2));
  v7 = *(_QWORD *)(a1 + 19944);
  v8 = v6 >> 7;
  v9 = (v6 >> 7) ^ (v7 >> 12);
  v10 = *(_QWORD *)(a1 + 19968);
  v11 = 0x101010101010101 * (v6 & 0x7F);
  for (i = v9; ; i = v4 + v13)
  {
    v13 = i & v10;
    v14 = *(_QWORD *)(v7 + v13);
    v15 = ((v14 ^ v11) - 0x101010101010101) & ~(v14 ^ v11) & 0x8080808080808080;
    if (v15)
      break;
LABEL_6:
    if ((v14 & (~v14 << 6) & 0x8080808080808080) != 0)
      goto LABEL_9;
    v4 += 8;
  }
  v16 = *(_QWORD *)(a1 + 19952);
  while (1)
  {
    v17 = (v13 + (__clz(__rbit64(v15)) >> 3)) & v10;
    if (*(_DWORD *)(v16 + 8 * v17) == a2)
      break;
    v15 &= v15 - 1;
    if (!v15)
      goto LABEL_6;
  }
  if (v17 != v10)
    return *(unsigned int *)(v16 + 8 * v17 + 4);
LABEL_9:
  v18 = 0;
  v19 = (void **)(a1 + 19920);
  v20 = (*(_QWORD *)(a1 + 19928) - *(_QWORD *)(a1 + 19920)) >> 2;
  v21 = (uint64_t *)(a1 + 20064);
  v22 = *(_QWORD *)(a1 + 20064);
  v23 = v8 ^ (v22 >> 12);
  v24 = *(_QWORD *)(a1 + 20088);
  while (1)
  {
    v25 = v23 & v24;
    v26 = *(_QWORD *)(v22 + v25);
    v27 = ((v26 ^ v11) - 0x101010101010101) & ~(v26 ^ v11) & 0x8080808080808080;
    if (v27)
      break;
LABEL_13:
    if ((v26 & (~v26 << 6) & 0x8080808080808080) != 0)
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 20072)
                + 4
                * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::prepare_insert(v21, v6)) = a2;
      v7 = *(_QWORD *)(a1 + 19944);
      v10 = *(_QWORD *)(a1 + 19968);
      v9 = v8 ^ (v7 >> 12);
      goto LABEL_17;
    }
    v18 += 8;
    v23 = v18 + v25;
  }
  while (*(_DWORD *)(*(_QWORD *)(a1 + 20072) + 4 * ((v25 + (__clz(__rbit64(v27)) >> 3)) & v24)) != a2)
  {
    v27 &= v27 - 1;
    if (!v27)
      goto LABEL_13;
  }
LABEL_17:
  for (j = 0; ; v9 = j + v30)
  {
    v30 = v9 & v10;
    v31 = *(_QWORD *)(v7 + v30);
    v32 = ((v31 ^ v11) - 0x101010101010101) & ~(v31 ^ v11) & 0x8080808080808080;
    if (v32)
      break;
LABEL_22:
    if ((v31 & (~v31 << 6) & 0x8080808080808080) != 0)
    {
      v34 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>::prepare_insert(v5, v6);
      v33 = *(_QWORD *)(a1 + 19952);
      v35 = (_DWORD *)(v33 + 8 * v34);
      *v35 = a2;
      v35[1] = 0;
      goto LABEL_25;
    }
    j += 8;
  }
  v33 = *(_QWORD *)(a1 + 19952);
  while (1)
  {
    v34 = (v30 + (__clz(__rbit64(v32)) >> 3)) & v10;
    if (*(_DWORD *)(v33 + 8 * v34) == a2)
      break;
    v32 &= v32 - 1;
    if (!v32)
      goto LABEL_22;
  }
LABEL_25:
  v114 = v20;
  *(_DWORD *)(v33 + 8 * v34 + 4) = v20;
  v36 = *(char **)(a1 + 19928);
  v37 = *(_QWORD *)(a1 + 19936);
  if ((unint64_t)v36 < v37)
  {
    *(_DWORD *)v36 = a2;
    v38 = (uint64_t)(v36 + 4);
    goto LABEL_46;
  }
  v39 = (char *)*v19;
  v40 = v36 - (_BYTE *)*v19;
  v41 = v40 >> 2;
  v42 = (v40 >> 2) + 1;
  if (v42 >> 62)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v43 = v37 - (_QWORD)v39;
  if (v43 >> 1 > v42)
    v42 = v43 >> 1;
  if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
    v44 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v44 = v42;
  if (v44)
  {
    if (v44 >> 62)
      goto LABEL_103;
    v45 = operator new(4 * v44);
    v46 = &v45[4 * v41];
    v47 = &v45[4 * v44];
    *v46 = a2;
    v38 = (uint64_t)(v46 + 1);
    v48 = v36 - v39;
    if (v36 == v39)
      goto LABEL_44;
    goto LABEL_38;
  }
  v45 = 0;
  v46 = (_DWORD *)(4 * v41);
  v47 = 0;
  *(_DWORD *)(4 * v41) = a2;
  v38 = 4 * v41 + 4;
  v48 = v36 - v39;
  if (v36 != v39)
  {
LABEL_38:
    v49 = v48 - 4;
    if (v49 < 0x2C)
      goto LABEL_107;
    if ((unint64_t)(v36 - v45 - v40) < 0x20)
      goto LABEL_107;
    v50 = (v49 >> 2) + 1;
    v51 = 4 * (v50 & 0x7FFFFFFFFFFFFFF8);
    v52 = &v36[-v51];
    v46 = (_DWORD *)((char *)v46 - v51);
    v53 = &v45[4 * v41 - 16];
    v54 = v36 - 16;
    v55 = v50 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v56 = *(_OWORD *)v54;
      *(v53 - 1) = *((_OWORD *)v54 - 1);
      *v53 = v56;
      v53 -= 2;
      v54 -= 32;
      v55 -= 8;
    }
    while (v55);
    v36 = v52;
    if (v50 != (v50 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_107:
      do
      {
        v57 = *((_DWORD *)v36 - 1);
        v36 -= 4;
        *--v46 = v57;
      }
      while (v36 != v39);
    }
  }
LABEL_44:
  *(_QWORD *)(a1 + 19920) = v46;
  *(_QWORD *)(a1 + 19928) = v38;
  *(_QWORD *)(a1 + 19936) = v47;
  if (v39)
    operator delete(v39);
LABEL_46:
  *(_QWORD *)(a1 + 19928) = v38;
  v58 = *(char **)(a1 + 20336);
  v59 = *(_QWORD *)(a1 + 20344);
  if ((unint64_t)v58 >= v59)
  {
    v61 = *(char **)(a1 + 20328);
    v62 = (v58 - v61) >> 3;
    v63 = v62 + 1;
    if ((unint64_t)(v62 + 1) >> 61)
      goto LABEL_102;
    v64 = v59 - (_QWORD)v61;
    if (v64 >> 2 > v63)
      v63 = v64 >> 2;
    if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
      v65 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v65 = v63;
    if (v65)
    {
      if (v65 >> 61)
        goto LABEL_103;
      v66 = operator new(8 * v65);
    }
    else
    {
      v66 = 0;
    }
    v67 = &v66[8 * v62];
    v68 = &v66[8 * v65];
    *v67 = 0x7FF0000000000000;
    v60 = v67 + 1;
    if (v58 != v61)
    {
      v69 = v58 - v61 - 8;
      if (v69 < 0x58)
        goto LABEL_108;
      if ((unint64_t)(v61 - v66) < 0x20)
        goto LABEL_108;
      v70 = (v69 >> 3) + 1;
      v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
      v72 = &v58[-v71];
      v67 = (_QWORD *)((char *)v67 - v71);
      v73 = &v66[8 * v62 - 16];
      v74 = v58 - 16;
      v75 = v70 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v76 = *(_OWORD *)v74;
        *(v73 - 1) = *((_OWORD *)v74 - 1);
        *v73 = v76;
        v73 -= 2;
        v74 -= 32;
        v75 -= 4;
      }
      while (v75);
      v58 = v72;
      if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_108:
        do
        {
          v77 = *((_QWORD *)v58 - 1);
          v58 -= 8;
          *--v67 = v77;
        }
        while (v58 != v61);
      }
    }
    *(_QWORD *)(a1 + 20328) = v67;
    *(_QWORD *)(a1 + 20336) = v60;
    *(_QWORD *)(a1 + 20344) = v68;
    if (v61)
      operator delete(v61);
  }
  else
  {
    *(_QWORD *)v58 = 0x7FF0000000000000;
    v60 = v58 + 8;
  }
  *(_QWORD *)(a1 + 20336) = v60;
  v78 = *(char **)(a1 + 20360);
  v79 = *(_QWORD *)(a1 + 20368);
  if ((unint64_t)v78 < v79)
  {
    *(_QWORD *)v78 = 0;
    v80 = (uint64_t)(v78 + 8);
    goto LABEL_88;
  }
  v81 = *(char **)(a1 + 20352);
  v82 = (v78 - v81) >> 3;
  v83 = v82 + 1;
  if ((unint64_t)(v82 + 1) >> 61)
LABEL_102:
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v84 = v79 - (_QWORD)v81;
  if (v84 >> 2 > v83)
    v83 = v84 >> 2;
  if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF8)
    v85 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v85 = v83;
  if (!v85)
  {
    v86 = 0;
    v87 = (_QWORD *)(8 * v82);
    v88 = 0;
    *(_QWORD *)(8 * v82) = 0;
    v80 = 8 * v82 + 8;
    v89 = v78 - v81;
    if (v78 == v81)
      goto LABEL_86;
LABEL_80:
    v90 = v89 - 8;
    if (v90 < 0x58)
      goto LABEL_109;
    if ((unint64_t)(v81 - v86) < 0x20)
      goto LABEL_109;
    v91 = (v90 >> 3) + 1;
    v92 = 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL);
    v93 = &v78[-v92];
    v87 = (_QWORD *)((char *)v87 - v92);
    v94 = &v86[8 * v82 - 16];
    v95 = v78 - 16;
    v96 = v91 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v97 = *(_OWORD *)v95;
      *(v94 - 1) = *((_OWORD *)v95 - 1);
      *v94 = v97;
      v94 -= 2;
      v95 -= 32;
      v96 -= 4;
    }
    while (v96);
    v78 = v93;
    if (v91 != (v91 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_109:
      do
      {
        v98 = *((_QWORD *)v78 - 1);
        v78 -= 8;
        *--v87 = v98;
      }
      while (v78 != v81);
    }
    goto LABEL_86;
  }
  if (v85 >> 61)
LABEL_103:
    std::__throw_bad_array_new_length[abi:ne180100]();
  v86 = operator new(8 * v85);
  v87 = &v86[8 * v82];
  v88 = &v86[8 * v85];
  *v87 = 0;
  v80 = (uint64_t)(v87 + 1);
  v89 = v78 - v81;
  if (v78 != v81)
    goto LABEL_80;
LABEL_86:
  *(_QWORD *)(a1 + 20352) = v87;
  *(_QWORD *)(a1 + 20360) = v80;
  *(_QWORD *)(a1 + 20368) = v88;
  if (v81)
    operator delete(v81);
LABEL_88:
  v99 = 0;
  *(_QWORD *)(a1 + 20360) = v80;
  v100 = *(_QWORD **)(a1 + 20200);
  v101 = v8 ^ (*v100 >> 12);
  v102 = v100[3];
  v28 = v114;
  while (1)
  {
    v103 = v101 & v102;
    v104 = *(_QWORD *)(*v100 + v103);
    v105 = ((v104 ^ v11) - 0x101010101010101) & ~(v104 ^ v11) & 0x8080808080808080;
    if (v105)
      break;
LABEL_93:
    if ((v104 & (~v104 << 6) & 0x8080808080808080) != 0)
    {
      v107 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::LinearProgrammingConstraint *>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::LinearProgrammingConstraint *>>>::prepare_insert(*(uint64_t **)(a1 + 20200), v6);
      v106 = v100[1];
      v108 = v106 + 16 * v107;
      *(_DWORD *)v108 = a2;
      *(_QWORD *)(v108 + 8) = 0;
      goto LABEL_96;
    }
    v99 += 8;
    v101 = v99 + v103;
  }
  v106 = v100[1];
  while (1)
  {
    v107 = (v103 + (__clz(__rbit64(v105)) >> 3)) & v102;
    if (*(_DWORD *)(v106 + 16 * v107) == a2)
      break;
    v105 &= v105 - 1;
    if (!v105)
      goto LABEL_93;
  }
LABEL_96:
  *(_QWORD *)(v106 + 16 * v107 + 8) = a1;
  v109 = *(uint64_t **)(a1 + 20408);
  v110 = *v109;
  v111 = (v109[1] - *v109) >> 3;
  if (v111 <= (a2 | 1))
  {
    v112 = (a2 | 1) + 1;
    v115 = 0;
    if (v112 <= v111)
    {
      if (v112 < v111)
        v109[1] = v110 + 8 * v112;
    }
    else
    {
      std::vector<double>::__append((uint64_t)v109, v112 - v111, &v115);
    }
  }
  return v28;
}

void operations_research::sat::LinearProgrammingConstraint::SetObjectiveCoefficient(uint64_t a1, int a2, uint64_t a3)
{
  unsigned int v5;
  uint64_t v6;
  int MirrorVariable;
  int v8;
  unint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  _BYTE v22[16];

  if (*(_BYTE *)(a1 + 20416))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v22, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 127);
    v21 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Check failed: !lp_constraint_is_registered_ ", 44);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v22);
  }
  *(_BYTE *)(a1 + 19992) = 1;
  v5 = a2 & 0xFFFFFFFE;
  if ((a2 & 1) != 0)
    v6 = -a3;
  else
    v6 = a3;
  operations_research::sat::LinearConstraintManager::SetObjectiveCoefficient(a1 + 16, a2 & 0xFFFFFFFE, v6);
  MirrorVariable = operations_research::sat::LinearProgrammingConstraint::GetOrCreateMirrorVariable(a1, v5);
  v8 = MirrorVariable;
  v10 = *(_DWORD **)(a1 + 288);
  v9 = *(_QWORD *)(a1 + 296);
  if ((unint64_t)v10 >= v9)
  {
    v12 = *(_DWORD **)(a1 + 280);
    v13 = 0xAAAAAAAAAAAAAAABLL * (v10 - v12) + 1;
    if (v13 > 0x1555555555555555)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (_QWORD)v12) >> 2);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0xAAAAAAAAAAAAAAALL)
      v15 = 0x1555555555555555;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 > 0x1555555555555555)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v16 = (char *)operator new(12 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[4 * (v10 - v12)];
    *(_DWORD *)v17 = v8;
    *(_QWORD *)(v17 + 4) = v6;
    v11 = v17 + 12;
    if (v10 != v12)
    {
      do
      {
        v18 = *(_QWORD *)(v10 - 3);
        v10 -= 3;
        v19 = v10[2];
        *(_QWORD *)(v17 - 12) = v18;
        v17 -= 12;
        *((_DWORD *)v17 + 2) = v19;
      }
      while (v10 != v12);
      v10 = *(_DWORD **)(a1 + 280);
    }
    *(_QWORD *)(a1 + 280) = v17;
    *(_QWORD *)(a1 + 288) = v11;
    *(_QWORD *)(a1 + 296) = &v16[12 * v15];
    if (v10)
      operator delete(v10);
  }
  else
  {
    *v10 = MirrorVariable;
    *(_QWORD *)(v10 + 1) = v6;
    v11 = v10 + 3;
  }
  *(_QWORD *)(a1 + 288) = v11;
  if (a3 >= 0)
    v20 = a3;
  else
    v20 = -a3;
  if (*(_QWORD *)(a1 + 304) > v20)
    v20 = *(_QWORD *)(a1 + 304);
  *(_QWORD *)(a1 + 304) = v20;
}

void sub_22DB8FD28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

uint64_t operations_research::sat::LinearProgrammingConstraint::CreateLpFromConstraintManager(operations_research::sat::LinearProgrammingConstraint *this)
{
  operations_research::sat::LinearProgrammingConstraint *v1;
  uint64_t v2;
  uint64_t i;
  void *v4;
  int *v5;
  uint64_t v6;
  int *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  void *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t *v30;
  int MirrorVariable;
  int v32;
  unint64_t v33;
  char *v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  int v44;
  char *v45;
  char *v46;
  operations_research::glop::LinearProgram *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t j;
  uint64_t v51;
  double v52;
  uint64_t *v53;
  uint64_t *k;
  int NewConstraint;
  uint64_t v56;
  double v57;
  double v58;
  int v59;
  uint64_t v60;
  uint64_t m;
  uint64_t v62;
  double v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  double v71;
  uint64_t v72;
  char *v73;
  __n128 v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  double v82;
  uint64_t v83;
  double v84;
  double v85;
  double v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  void **v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  void **v96;
  uint64_t v97;
  int *v98;
  int *v99;
  operations_research::sat::LinearProgrammingConstraint *v100;
  void **v101;
  uint64_t *v102[2];
  int NewVariable;
  void *v104[2];
  void *__p[2];
  uint64_t v106;

  v1 = this;
  v2 = *((_QWORD *)this + 39);
  for (i = *((_QWORD *)this + 40); i != v2; i -= 40)
  {
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  *((_QWORD *)v1 + 40) = v2;
  *((_QWORD *)v1 + 43) = *((_QWORD *)v1 + 42);
  v5 = (int *)*((_QWORD *)v1 + 9);
  v98 = (int *)*((_QWORD *)v1 + 10);
  v100 = v1;
  if (v5 != v98)
  {
    v96 = (void **)((char *)v1 + 312);
    v97 = (uint64_t)v1 + 336;
    do
    {
      v10 = *v5;
      v11 = *((_QWORD *)v1 + 6);
      v106 = 0;
      *(_OWORD *)v104 = 0u;
      *(_OWORD *)__p = 0u;
      v12 = *((_QWORD *)v1 + 40);
      if (v12 >= *((_QWORD *)v1 + 41))
      {
        v13 = std::vector<operations_research::sat::FeasibilityPump::LinearConstraintInternal>::__push_back_slow_path<operations_research::sat::FeasibilityPump::LinearConstraintInternal>(v96, (uint64_t)v104);
        v14 = __p[0];
        *((_QWORD *)v1 + 40) = v13;
        if (v14)
        {
          __p[1] = v14;
          operator delete(v14);
          v13 = (char *)*((_QWORD *)v1 + 40);
        }
      }
      else
      {
        *(_QWORD *)(v12 + 32) = 0;
        *(_OWORD *)v12 = 0uLL;
        *(_OWORD *)(v12 + 16) = 0uLL;
        *(_OWORD *)(v12 + 16) = *(_OWORD *)__p;
        *(_QWORD *)(v12 + 32) = v106;
        v13 = (char *)(v12 + 40);
        *((_QWORD *)v1 + 40) = v12 + 40;
      }
      v15 = (uint64_t *)(v11 + (v10 << 7));
      *((_QWORD *)v13 - 5) = *v15;
      *((_QWORD *)v13 - 4) = v15[1];
      v17 = v15[2];
      v16 = v15[3];
      v102[0] = 0;
      v19 = *v15;
      v18 = v15[1];
      if (*v15 > v18)
      {
        google::LogMessage::LogMessage((google::LogMessage *)v104, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 167);
        v94 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v104);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"Trivial infeasible bound in an LP constraint", 44);
        google::LogMessage::~LogMessage((google::LogMessage *)v104);
        return 0;
      }
      if (v19 <= (uint64_t)0x8000000000000002)
      {
        v21 = 0;
        v99 = v5;
        if (v18 > 0x7FFFFFFFFFFFFFFDLL)
          goto LABEL_32;
      }
      else
      {
        if (v19 >= 0)
          v20 = *v15;
        else
          v20 = -v19;
        if (v19)
          v21 = (uint64_t *)v20;
        else
          v21 = 0;
        v102[0] = v21;
        v18 = v15[1];
        v99 = v5;
        if (v18 > 0x7FFFFFFFFFFFFFFDLL)
          goto LABEL_32;
      }
      if (v18 < 0)
        v18 = -v18;
      if ((uint64_t)v21 > v18)
        v18 = (uint64_t)v21;
      v102[0] = (uint64_t *)v18;
LABEL_32:
      v22 = v16 - v17;
      if ((int)(v22 >> 2) >= 1)
      {
        v23 = 0;
        v101 = (void **)(v13 - 24);
        v24 = (v22 >> 2);
        do
        {
          v26 = *(_DWORD *)(v15[2] + 4 * v23);
          v27 = *(_QWORD *)(v15[5] + 8 * v23);
          if ((v26 & 1) != 0)
            v28 = -v27;
          else
            v28 = *(_QWORD *)(v15[5] + 8 * v23);
          v29 = v26 & 0xFFFFFFFE;
          if (v27 >= 0)
            v30 = *(uint64_t **)(v15[5] + 8 * v23);
          else
            v30 = (uint64_t *)-v27;
          if ((uint64_t)v102[0] > (uint64_t)v30)
            v30 = v102[0];
          v102[0] = v30;
          MirrorVariable = operations_research::sat::LinearProgrammingConstraint::GetOrCreateMirrorVariable((uint64_t)v1, v29);
          v32 = MirrorVariable;
          v34 = (char *)*((_QWORD *)v13 - 2);
          v33 = *((_QWORD *)v13 - 1);
          if ((unint64_t)v34 < v33)
          {
            *(_DWORD *)v34 = MirrorVariable;
            *(_QWORD *)(v34 + 4) = v28;
            v25 = v34 + 12;
          }
          else
          {
            v35 = (char *)*v101;
            v36 = 0xAAAAAAAAAAAAAAABLL * ((v34 - (_BYTE *)*v101) >> 2);
            v37 = v36 + 1;
            if (v36 + 1 > 0x1555555555555555)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (_QWORD)v35) >> 2);
            if (2 * v38 > v37)
              v37 = 2 * v38;
            if (v38 >= 0xAAAAAAAAAAAAAAALL)
              v39 = 0x1555555555555555;
            else
              v39 = v37;
            if (v39)
            {
              if (v39 > 0x1555555555555555)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v40 = (char *)operator new(12 * v39);
            }
            else
            {
              v40 = 0;
            }
            v41 = &v40[12 * v36];
            *(_DWORD *)v41 = v32;
            *(_QWORD *)(v41 + 4) = v28;
            v42 = v41;
            if (v34 != v35)
            {
              v1 = v100;
              do
              {
                v43 = *(_QWORD *)(v34 - 12);
                v34 -= 12;
                v44 = *((_DWORD *)v34 + 2);
                *(_QWORD *)(v42 - 12) = v43;
                v42 -= 12;
                *((_DWORD *)v42 + 2) = v44;
              }
              while (v34 != v35);
              v34 = (char *)*v101;
              v45 = &v40[12 * v39];
              v25 = v41 + 12;
              *((_QWORD *)v13 - 3) = v42;
              *((_QWORD *)v13 - 2) = v41 + 12;
              *((_QWORD *)v13 - 1) = v45;
              if (!v34)
                goto LABEL_35;
LABEL_61:
              operator delete(v34);
              goto LABEL_35;
            }
            v1 = v100;
            v46 = &v40[12 * v39];
            v25 = v41 + 12;
            *((_QWORD *)v13 - 3) = v41;
            *((_QWORD *)v13 - 2) = v41 + 12;
            *((_QWORD *)v13 - 1) = v46;
            if (v34)
              goto LABEL_61;
          }
LABEL_35:
          *((_QWORD *)v13 - 2) = v25;
          ++v23;
        }
        while (v23 != v24);
      }
      gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>,std::allocator<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>>::push_back(v97, v102);
      v6 = *((_QWORD *)v13 - 3);
      v7 = (int *)*((_QWORD *)v13 - 2);
      v8 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v6) >> 2));
      if (v7 == (int *)v6)
        v9 = 0;
      else
        v9 = v8;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *,false>(v6, v7, (uint64_t)v104, v9, 1);
      v5 = v99 + 1;
    }
    while (v99 + 1 != v98);
  }
  v47 = (operations_research::sat::LinearProgrammingConstraint *)((char *)v1 + 360);
  operations_research::glop::LinearProgram::Clear((operations_research::sat::LinearProgrammingConstraint *)((char *)v1 + 360));
  if (*((_QWORD *)v1 + 2491) != *((_QWORD *)v1 + 2490))
  {
    v48 = 0;
    do
    {
      LODWORD(v104[0]) = v48;
      NewVariable = operations_research::glop::LinearProgram::CreateNewVariable((operations_research::sat::LinearProgrammingConstraint *)((char *)v1 + 360));
      if (LODWORD(v104[0]) != NewVariable)
      {
        v102[0] = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>((int)v104, (int)&NewVariable, "glop::ColIndex(i) == lp_data_.CreateNewVariable()");
        if (v102[0])
        {
          google::LogMessageFatal::LogMessageFatal((unint64_t *)v104, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 196, v102);
          google::LogMessage::stream((google::LogMessage *)v104);
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v104);
        }
      }
      ++v48;
    }
    while (v48 < (uint64_t)(*((_QWORD *)v1 + 2491) - *((_QWORD *)v1 + 2490)) >> 2);
  }
  v49 = *((_QWORD *)v1 + 35);
  for (j = *((_QWORD *)v1 + 36); v49 != j; v49 += 12)
  {
    v51 = *(_QWORD *)(v49 + 4);
    v52 = (double)v51;
    if (v51 < (uint64_t)0x8000000000000003)
      v52 = -INFINITY;
    if (v51 > 0x7FFFFFFFFFFFFFFDLL)
      v52 = INFINITY;
    operations_research::glop::LinearProgram::SetObjectiveCoefficient((uint64_t)v47, *(_DWORD *)v49, v52);
  }
  v53 = (uint64_t *)*((_QWORD *)v100 + 39);
  for (k = (uint64_t *)*((_QWORD *)v100 + 40); v53 != k; v53 += 5)
  {
    NewConstraint = operations_research::glop::LinearProgram::CreateNewConstraint(v47);
    v56 = v53[1];
    v57 = (double)*v53;
    v58 = -INFINITY;
    if (*v53 < (uint64_t)0x8000000000000003)
      v57 = -INFINITY;
    if (*v53 > 0x7FFFFFFFFFFFFFFDLL)
      v57 = INFINITY;
    if (v56 >= (uint64_t)0x8000000000000003)
      v58 = (double)v56;
    if (v56 > 0x7FFFFFFFFFFFFFFDLL)
      v58 = INFINITY;
    v59 = NewConstraint;
    operations_research::glop::LinearProgram::SetConstraintBounds((uint64_t)v47, NewConstraint, v57, v58);
    v60 = v53[2];
    for (m = v53[3]; v60 != m; v60 += 12)
    {
      v62 = *(_QWORD *)(v60 + 4);
      v63 = (double)v62;
      if (v62 < (uint64_t)0x8000000000000003)
        v63 = -INFINITY;
      if (v62 > 0x7FFFFFFFFFFFFFFDLL)
        v63 = INFINITY;
      operations_research::glop::LinearProgram::SetCoefficient((uint64_t)v47, v59, *(_DWORD *)v60, v63);
    }
  }
  *((_BYTE *)v100 + 801) = 1;
  v64 = *((_QWORD *)v100 + 2491) - *((_QWORD *)v100 + 2490);
  if ((int)(v64 >> 2) >= 1)
  {
    v65 = 0;
    v66 = (v64 >> 2);
    do
    {
      v67 = *(_DWORD *)(*((_QWORD *)v100 + 2490) + 4 * v65);
      v68 = *(_QWORD *)(*((_QWORD *)v100 + 2503) + 144);
      v69 = *(_QWORD *)(v68 + 20 * v67);
      v70 = (double)v69;
      v71 = -INFINITY;
      if (v69 < (uint64_t)0x8000000000000003)
        v70 = -INFINITY;
      if (v69 > 0x7FFFFFFFFFFFFFFDLL)
        v70 = INFINITY;
      v72 = *(_QWORD *)(v68 + 20 * (v67 ^ 1));
      if (v72 <= 0x7FFFFFFFFFFFFFFDLL)
        v71 = (double)-v72;
      if (v72 < (uint64_t)0x8000000000000003)
        v71 = INFINITY;
      operations_research::glop::LinearProgram::SetVariableBounds((uint64_t)v47, v65++, v70, v71);
    }
    while (v66 != v65);
  }
  v74.n128_f64[0] = operations_research::glop::LpScalingHelper::Scale((operations_research::sat::LinearProgrammingConstraint *)((char *)v100 + 19360), (float64x2_t **)v47);
  v75 = *((_QWORD *)v100 + 2491) - *((_QWORD *)v100 + 2490);
  if ((int)(v75 >> 2) >= 1)
  {
    v76 = 0;
    v77 = (v75 >> 2);
    do
    {
      v78 = *(_DWORD *)(*((_QWORD *)v100 + 2490) + 4 * v76);
      v79 = *(_QWORD *)(*((_QWORD *)v100 + 2503) + 40);
      v80 = *(_QWORD *)(v79 + 12 * v78);
      v81 = (double)v80;
      if (v80 < (uint64_t)0x8000000000000003)
        v81 = -INFINITY;
      if (v80 <= 0x7FFFFFFFFFFFFFFDLL)
        v82 = v81;
      else
        v82 = INFINITY;
      v83 = *(_QWORD *)(v79 + 12 * (v78 ^ 1));
      v84 = (double)-v83;
      if (v83 > 0x7FFFFFFFFFFFFFFDLL)
        v84 = -INFINITY;
      if (v83 >= (uint64_t)0x8000000000000003)
        v85 = v84;
      else
        v85 = INFINITY;
      v86 = operations_research::glop::LpScalingHelper::VariableScalingFactor((uint64_t)v100 + 19360, v76);
      operations_research::glop::LinearProgram::SetVariableBounds((uint64_t)v47, v76++, v86 * v82, v86 * v85);
    }
    while (v77 != v76);
  }
  v87 = 1;
  *((_BYTE *)v100 + 801) = 1;
  operations_research::glop::LinearProgram::AddSlackVariablesWhereNecessary(v47, 0, v73, v74);
  if (*operations_research::sat::LinearProgrammingConstraint::CreateLpFromConstraintManager(void)::vlocal__ > 0
    && (operations_research::sat::LinearProgrammingConstraint::CreateLpFromConstraintManager(void)::vlocal__ != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)&operations_research::sat::LinearProgrammingConstraint::CreateLpFromConstraintManager(void)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v102, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 229);
    v88 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v102);
    v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"LP relaxation: ", 15);
    operations_research::glop::LinearProgram::GetDimensionString(v47, (uint64_t)v104);
    if (SHIBYTE(__p[0]) >= 0)
      v90 = v104;
    else
      v90 = (void **)v104[0];
    if (SHIBYTE(__p[0]) >= 0)
      v91 = HIBYTE(__p[0]);
    else
      v91 = (uint64_t)v104[1];
    v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)v90, v91);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)". ", 2);
    v93 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)" Managed constraints.", 21);
    if (SHIBYTE(__p[0]) < 0)
      operator delete(v104[0]);
    google::LogMessage::~LogMessage((google::LogMessage *)v102);
    return 1;
  }
  return v87;
}

void sub_22DB90528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DB90530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_22DB90544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_22DB90558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_22DB9056C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  google::LogMessage::~LogMessage((google::LogMessage *)&a16);
  _Unwind_Resume(a1);
}

void sub_22DB90590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::LinearProgrammingConstraint::SolveLpForBranching(operations_research::TimeLimit **this@<X0>, uint64_t a2@<X8>)
{
  operations_research::glop::RevisedSimplex *v4;
  uint64_t State;
  uint64_t v6;
  const void *v7;
  size_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  uint64_t v14;
  int ProblemStatus;
  double ObjectiveValue;
  _BYTE v17[16];
  int v18;
  void *__p[2];
  unsigned __int8 v20;
  void *v21;
  void *v22;
  char *v23;

  *(_QWORD *)(a2 + 8) = 0xFFF0000000000000;
  *(_QWORD *)(a2 + 16) = 0x8000000000000002;
  v4 = (operations_research::glop::RevisedSimplex *)(this + 105);
  State = operations_research::glop::RevisedSimplex::GetState((operations_research::glop::RevisedSimplex *)(this + 105));
  v22 = 0;
  v23 = 0;
  v21 = 0;
  v7 = *(const void **)State;
  v6 = *(_QWORD *)(State + 8);
  v8 = v6 - *(_QWORD *)State;
  if (v6 != *(_QWORD *)State)
  {
    if ((v8 & 0x8000000000000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v9 = (char *)operator new(v6 - *(_QWORD *)State);
    v10 = &v9[v8];
    v21 = v9;
    v23 = &v9[v8];
    memcpy(v9, v7, v8);
    v22 = v10;
  }
  operations_research::glop::RevisedSimplex::Solve(v4, (const operations_research::glop::LinearProgram *)(this + 45), this[2502], (uint64_t)&v18);
  this[2588] = (operations_research::TimeLimit *)((char *)this[2588]
                                                + operations_research::glop::RevisedSimplex::GetNumberOfIterations(v4));
  operations_research::glop::RevisedSimplex::LoadStateForNextSolve((uint64_t)v4, (char **)&v21);
  if (v18)
  {
    if (*operations_research::sat::LinearProgrammingConstraint::SolveLpForBranching(void)::vlocal__[0] >= 1
      && (operations_research::sat::LinearProgrammingConstraint::SolveLpForBranching(void)::vlocal__[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)operations_research::sat::LinearProgrammingConstraint::SolveLpForBranching(void)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v17, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 243);
      v11 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v17);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"The LP solver encountered an error: ", 36);
      if ((v20 & 0x80u) == 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      if ((v20 & 0x80u) == 0)
        v14 = v20;
      else
        v14 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
      google::LogMessage::~LogMessage((google::LogMessage *)v17);
    }
    *(_BYTE *)a2 = 9;
    if ((char)v20 < 0)
      goto LABEL_19;
  }
  else
  {
    ProblemStatus = operations_research::glop::RevisedSimplex::GetProblemStatus(v4);
    *(_BYTE *)a2 = ProblemStatus;
    if ((ProblemStatus & 0xFFFFFFF7) != 0)
    {
      if (((char)v20 & 0x80000000) == 0)
        goto LABEL_20;
      goto LABEL_19;
    }
    ObjectiveValue = operations_research::glop::RevisedSimplex::GetObjectiveValue(v4);
    *(double *)(a2 + 8) = ObjectiveValue;
    *(_QWORD *)(a2 + 16) = vcvtpd_s64_f64(ObjectiveValue + -0.0001);
    if ((char)v20 < 0)
LABEL_19:
      operator delete(__p[0]);
  }
LABEL_20:
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
}

void sub_22DB907A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  if (a18 < 0)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::LinearProgrammingConstraint::FillReducedCostReasonIn(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  _BYTE v33[12];
  int v34[4];

  v5 = *(int **)a3;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  v6 = a1[2491] - a1[2490];
  if ((int)(v6 >> 2) >= 1)
  {
    v7 = a2;
    v8 = 0;
    v9 = (v6 >> 2);
    do
    {
      v11 = *(double *)(*v7 + 8 * v8);
      if (v11 <= 0.000001)
      {
        if (v11 >= -0.000001)
          goto LABEL_5;
        v34[0] = *(_DWORD *)(a1[2490] + 4 * v8) ^ 1;
        *(_QWORD *)&v34[1] = *(_QWORD *)(*(_QWORD *)(a1[2503] + 40) + 12 * v34[0]);
        v12 = *(_QWORD *)v34;
        v13 = HIDWORD(*(_QWORD *)&v34[1]);
        v23 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v5 < v23)
        {
LABEL_3:
          *(_QWORD *)v5 = v12;
          v5[2] = v13;
          v10 = v5 + 3;
          goto LABEL_4;
        }
        v24 = *(int **)a3;
        v25 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a3) >> 2);
        v26 = v25 + 1;
        if (v25 + 1 > 0x1555555555555555)
LABEL_43:
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - (_QWORD)v24) >> 2);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0xAAAAAAAAAAAAAAALL)
          v19 = 0x1555555555555555;
        else
          v19 = v26;
        if (v19)
        {
          if (v19 > 0x1555555555555555)
LABEL_44:
            std::__throw_bad_array_new_length[abi:ne180100]();
          v20 = (char *)operator new(12 * v19);
          v21 = (uint64_t)&v20[12 * v25];
          *(_QWORD *)v21 = *(_QWORD *)v34;
          *(_DWORD *)(v21 + 8) = v34[2];
          v22 = v21;
          if (v5 == v24)
          {
LABEL_40:
            v7 = a2;
            v10 = (int *)(v21 + 12);
            *(_QWORD *)a3 = v22;
            *(_QWORD *)(a3 + 8) = v21 + 12;
            *(_QWORD *)(a3 + 16) = &v20[12 * v19];
            if (!v5)
              goto LABEL_4;
LABEL_38:
            operator delete(v5);
            goto LABEL_4;
          }
        }
        else
        {
          v20 = 0;
          v21 = 4 * (((uint64_t)v5 - *(_QWORD *)a3) >> 2);
          *(_QWORD *)v21 = *(_QWORD *)v34;
          *(_DWORD *)(v21 + 8) = v34[2];
          v22 = 12 * v25;
          if (v5 == v24)
            goto LABEL_40;
        }
        v7 = a2;
        do
        {
          v30 = *(_QWORD *)(v5 - 3);
          v5 -= 3;
          v31 = v5[2];
          *(_QWORD *)(v22 - 12) = v30;
          v22 -= 12;
          *(_DWORD *)(v22 + 8) = v31;
        }
        while (v5 != v24);
      }
      else
      {
        *(_DWORD *)v33 = *(_DWORD *)(a1[2490] + 4 * v8);
        *(_QWORD *)&v33[4] = *(_QWORD *)(*(_QWORD *)(a1[2503] + 40) + 12 * *(int *)v33);
        v12 = *(_QWORD *)v33;
        v13 = HIDWORD(*(_QWORD *)&v33[4]);
        v14 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v5 < v14)
          goto LABEL_3;
        v15 = *(int **)a3;
        v16 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a3) >> 2);
        v17 = v16 + 1;
        if (v16 + 1 > 0x1555555555555555)
          goto LABEL_43;
        v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (_QWORD)v15) >> 2);
        if (2 * v18 > v17)
          v17 = 2 * v18;
        if (v18 >= 0xAAAAAAAAAAAAAAALL)
          v19 = 0x1555555555555555;
        else
          v19 = v17;
        if (v19)
        {
          if (v19 > 0x1555555555555555)
            goto LABEL_44;
          v20 = (char *)operator new(12 * v19);
          v21 = (uint64_t)&v20[12 * v16];
          *(_QWORD *)v21 = *(_QWORD *)v33;
          *(_DWORD *)(v21 + 8) = *(_DWORD *)&v33[8];
          v22 = v21;
          if (v5 == v15)
            goto LABEL_40;
        }
        else
        {
          v20 = 0;
          v21 = 4 * (((uint64_t)v5 - *(_QWORD *)a3) >> 2);
          *(_QWORD *)v21 = *(_QWORD *)v33;
          *(_DWORD *)(v21 + 8) = *(_DWORD *)&v33[8];
          v22 = 12 * v16;
          if (v5 == v15)
            goto LABEL_40;
        }
        v7 = a2;
        do
        {
          v28 = *(_QWORD *)(v5 - 3);
          v5 -= 3;
          v29 = v5[2];
          *(_QWORD *)(v22 - 12) = v28;
          v22 -= 12;
          *(_DWORD *)(v22 + 8) = v29;
        }
        while (v5 != v15);
      }
      v5 = *(int **)a3;
      v10 = (int *)(v21 + 12);
      *(_QWORD *)a3 = v22;
      *(_QWORD *)(a3 + 8) = v21 + 12;
      *(_QWORD *)(a3 + 16) = &v20[12 * v19];
      if (v5)
        goto LABEL_38;
LABEL_4:
      *(_QWORD *)(a3 + 8) = v10;
      v5 = v10;
LABEL_5:
      ++v8;
    }
    while (v8 != v9);
  }
  operations_research::sat::IntegerTrail::RemoveLevelZeroBounds(a1[2503], (int **)a3);
}

uint64_t operations_research::sat::LinearProgrammingConstraint::BranchOnVar(uint64_t a1, int a2)
{
  double v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  int MirrorVariable;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  double v24;
  int v25;
  double v26;
  uint64_t v28;
  double v30;
  double v31;
  int v32;
  double v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v44[2];
  uint64_t v45;
  int v46[4];
  uint64_t v47;
  uint64_t v48[2];

  v46[0] = a2;
  v3 = *(double *)(*(_QWORD *)(a1 + 20328)
                 + 8
                 * *(int *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>>((uint64_t *)(a1 + 19944), v46));
  *(_QWORD *)(a1 + 20216) = *(_QWORD *)(a1 + 20208);
  v4 = *(_QWORD *)(a1 + 19928) - *(_QWORD *)(a1 + 19920);
  if ((int)(v4 >> 2) >= 1)
  {
    v5 = 0;
    v6 = (v4 >> 2);
    do
    {
      v7 = *(_DWORD *)(*(_QWORD *)(a1 + 19920) + 4 * v5);
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 20024) + 40);
      v9 = *(_QWORD *)(v8 + 12 * v7);
      v10 = (double)v9;
      if (v9 < (uint64_t)0x8000000000000003)
        v10 = -INFINITY;
      if (v9 <= 0x7FFFFFFFFFFFFFFDLL)
        v11 = v10;
      else
        v11 = INFINITY;
      v12 = *(_QWORD *)(v8 + 12 * (v7 ^ 1));
      v13 = (double)-v12;
      if (v12 > 0x7FFFFFFFFFFFFFFDLL)
        v13 = -INFINITY;
      if (v12 >= (uint64_t)0x8000000000000003)
        v14 = v13;
      else
        v14 = INFINITY;
      v15 = operations_research::glop::LpScalingHelper::VariableScalingFactor(a1 + 19360, v5);
      operations_research::glop::LinearProgram::SetVariableBounds(a1 + 360, v5++, v15 * v11, v15 * v14);
    }
    while (v6 != v5);
  }
  v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 20024) + 40) + 12 * *(int *)(a1 + 19993));
  MirrorVariable = operations_research::sat::LinearProgrammingConstraint::GetOrCreateMirrorVariable(a1, a2);
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 20024) + 40);
  v19 = *(_QWORD *)(v18 + 12 * a2);
  v20 = (double)v19;
  if (v19 < (uint64_t)0x8000000000000003)
    v20 = -INFINITY;
  if (v19 <= 0x7FFFFFFFFFFFFFFDLL)
    v21 = v20;
  else
    v21 = INFINITY;
  v22 = *(_QWORD *)(v18 + 12 * (a2 ^ 1));
  v23 = (double)-v22;
  if (v22 > 0x7FFFFFFFFFFFFFFDLL)
    v23 = -INFINITY;
  if (v22 >= (uint64_t)0x8000000000000003)
    v24 = v23;
  else
    v24 = INFINITY;
  v25 = MirrorVariable;
  v26 = operations_research::glop::LpScalingHelper::VariableScalingFactor(a1 + 19360, MirrorVariable);
  if (v3 < v21 || v3 > v24)
    return 0;
  v30 = v26;
  v31 = floor(v3);
  operations_research::glop::LinearProgram::SetVariableBounds(a1 + 360, v25, v26 * v21, v31 * v26);
  operations_research::sat::LinearProgrammingConstraint::SolveLpForBranching((operations_research::TimeLimit **)a1, (uint64_t)v46);
  v32 = LOBYTE(v46[0]);
  if (!LOBYTE(v46[0]) || LOBYTE(v46[0]) == 8)
  {
    if (v47 <= v16)
      return 0;
    v28 = 0;
    v33 = ceil(v3);
  }
  else
  {
    if (LOBYTE(v46[0]) != 5)
      return 0;
    LODWORD(v44[0]) = a2;
    *(uint64_t *)((char *)v44 + 4) = vcvtpd_s64_f64(v3);
    if ((operations_research::sat::IntegerTrail::Enqueue(*(_QWORD *)(a1 + 20024), v44[0], v44[1], 0, 0, *(uint64_t **)(a1 + 20208), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 20216) - *(_QWORD *)(a1 + 20208)) >> 2)) & 1) == 0)return 0;
    v33 = ceil(v3);
    v28 = 1;
  }
  operations_research::glop::LinearProgram::SetVariableBounds(a1 + 360, v25, v33 * v30, v30 * v24);
  operations_research::sat::LinearProgrammingConstraint::SolveLpForBranching((operations_research::TimeLimit **)a1, (uint64_t)v44);
  v34 = LOBYTE(v44[0]);
  if (!LOBYTE(v44[0]) || LOBYTE(v44[0]) == 8)
  {
    if (v45 <= v16)
      return v28;
  }
  else
  {
    if (LOBYTE(v44[0]) != 5)
      return v28;
    if (v32 != 5)
    {
      if ((uint64_t)v31 >= (uint64_t)0x8000000000000002)
        v35 = -(uint64_t)v31;
      else
        v35 = 0x7FFFFFFFFFFFFFFFLL;
      LODWORD(v48[0]) = a2 ^ 1;
      *(uint64_t *)((char *)v48 + 4) = v35;
      if ((operations_research::sat::IntegerTrail::Enqueue(*(_QWORD *)(a1 + 20024), v48[0], SHIDWORD(v35), 0, 0, *(uint64_t **)(a1 + 20208), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 20216) - *(_QWORD *)(a1 + 20208)) >> 2)) & 1) == 0)return v28;
      v28 = 1;
    }
  }
  if (v32 == 5 && v34 == 5)
  {
    v36 = *(_QWORD *)(a1 + 20024);
    v37 = *(uint64_t **)(a1 + 20208);
    v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 20216) - (_QWORD)v37) >> 2);
    v39 = *(_QWORD *)(v36 + 936);
    v40 = *(_QWORD *)(v39 + 96);
    v39 += 96;
    *(_QWORD *)(v39 + 48) = 0;
    *(_QWORD *)(v39 + 8) = v40;
    operations_research::sat::IntegerTrail::MergeReasonInto(v36, v37, v38, (void **)v39);
    return 0;
  }
  if (v32 == 5)
  {
    v41 = v45;
  }
  else if (v34 == 5)
  {
    v41 = v47;
  }
  else
  {
    v41 = v45;
    if (v45 >= v47)
      v41 = v47;
  }
  if (v41 > v16)
  {
    LODWORD(v48[0]) = *(_DWORD *)(a1 + 19993);
    *(uint64_t *)((char *)v48 + 4) = v41;
    return v28 | operations_research::sat::IntegerTrail::Enqueue(*(_QWORD *)(a1 + 20024), v48[0], SHIDWORD(v41), 0, 0, *(uint64_t **)(a1 + 20208), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(a1 + 20216) - *(_QWORD *)(a1 + 20208)) >> 2));
  }
  return v28;
}

double operations_research::sat::LinearProgrammingConstraint::GetSolutionValue(uint64_t a1, int a2)
{
  int v3;

  v3 = a2;
  return *(double *)(*(_QWORD *)(a1 + 20328)
                   + 8
                   * *(int *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>>((uint64_t *)(a1 + 19944), &v3));
}

void operations_research::sat::LinearProgrammingConstraint::RegisterWith(operations_research::sat::LinearProgrammingConstraint *this, operations_research::sat::Model *a2)
{
  char *v4;
  _QWORD *v5;
  char **v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  unint64_t v31;
  uint64_t v32;
  operations_research::sat::GenericLiteralWatcher *v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD v49[3];
  _QWORD v50[2];

  v50[1] = *MEMORY[0x24BDAC8D0];
  v4 = (char *)this + 19992;
  *((_BYTE *)this + 20416) = 1;
  v5 = operations_research::sat::Model::GetOrCreate<operations_research::sat::LinearProgrammingConstraintCollection>((uint64_t)a2);
  v6 = (char **)v5;
  v8 = (char *)v5[1];
  v7 = v5[2];
  v9 = v8;
  if ((unint64_t)v8 < v7)
  {
    *(_QWORD *)v8 = this;
    v10 = (uint64_t)(v8 + 8);
    goto LABEL_23;
  }
  v11 = (char *)*v5;
  v12 = (uint64_t)&v8[-*v5];
  v13 = v12 >> 3;
  v14 = (v12 >> 3) + 1;
  if (v14 >> 61)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v15 = v7 - (_QWORD)v11;
  if (v15 >> 2 > v14)
    v14 = v15 >> 2;
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
    v16 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v16 = v14;
  if (v16)
  {
    if (v16 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v17 = operator new(8 * v16);
    v18 = &v17[8 * v13];
    v19 = &v17[8 * v16];
    *(_QWORD *)v18 = this;
    v10 = (uint64_t)(v18 + 8);
    v20 = (char *)(v8 - v11);
    if (v8 == v11)
      goto LABEL_21;
    goto LABEL_14;
  }
  v17 = 0;
  v18 = (char *)(8 * v13);
  v19 = 0;
  *(_QWORD *)(8 * v13) = this;
  v10 = 8 * v13 + 8;
  v20 = (char *)(v8 - v11);
  if (v8 != v11)
  {
LABEL_14:
    v21 = (unint64_t)(v20 - 8);
    if (v21 < 0x58)
      goto LABEL_71;
    if ((unint64_t)(v8 - v17 - v12) < 0x20)
      goto LABEL_71;
    v22 = (v21 >> 3) + 1;
    v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
    v9 = &v8[-v23];
    v18 -= v23;
    v24 = &v17[8 * v13 - 16];
    v25 = v8 - 16;
    v26 = v22 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      *v24 = v27;
      v24 -= 2;
      v25 -= 32;
      v26 -= 4;
    }
    while (v26);
    if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_71:
      do
      {
        v28 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *((_QWORD *)v18 - 1) = v28;
        v18 -= 8;
      }
      while (v9 != v11);
    }
    v9 = *v6;
  }
LABEL_21:
  *v6 = v18;
  v6[1] = (char *)v10;
  v6[2] = v19;
  if (v9)
    operator delete(v9);
LABEL_23:
  v29 = *((_QWORD *)this + 35);
  v30 = (int *)*((_QWORD *)this + 36);
  v31 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v30 - v29) >> 2));
  v6[1] = (char *)v10;
  if (v30 == (int *)v29)
    v32 = 0;
  else
    v32 = v31;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *,false>(v29, v30, (uint64_t)v49, v32, 1);
  if (!*(_BYTE *)(*((_QWORD *)this + 2500) + 440))
    operations_research::sat::LinearConstraintManager::AddAllConstraintsToLp((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 16));
  if ((operations_research::sat::LinearProgrammingConstraint::CreateLpFromConstraintManager(this) & 1) == 0)
  {
    *((_BYTE *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)a2) + 496) = 1;
    return;
  }
  v33 = operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>((uint64_t)a2);
  v34 = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)v33, (uint64_t)this);
  v35 = *((_QWORD *)this + 2491) - *((_QWORD *)this + 2490);
  if ((int)(v35 >> 2) >= 1)
  {
    v36 = 0;
    v37 = (v35 >> 2);
    do
    {
      v38 = *(unsigned int *)(*((_QWORD *)this + 2490) + 4 * v36);
      operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)v33, v38, v34, v36);
      if ((_DWORD)v38 != -1)
        operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)v33, v38 ^ 1, v34, v36);
      ++v36;
    }
    while (v37 != v36);
  }
  if (*v4)
  {
    v39 = *(unsigned int *)(v4 + 1);
    if ((_DWORD)v39 != -1)
      operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)v33, v39 ^ 1, v34, 0xFFFFFFFFLL);
  }
  operations_research::sat::GenericLiteralWatcher::SetPropagatorPriority(v33, v34, 2);
  operations_research::sat::GenericLiteralWatcher::AlwaysCallAtLevelZero(v33, v34);
  if (*((_QWORD *)this + 2491) - *((_QWORD *)this + 2490) < 0x4DuLL)
    goto LABEL_61;
  v40 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SearchHeuristicsVector>((uint64_t)a2);
  operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(this, a2, (uint64_t)v49);
  v41 = v40[1];
  if (v41 >= v40[2])
  {
    v40[1] = std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__push_back_slow_path<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>(v40, v49);
    v43 = (_QWORD *)v50[0];
    if ((_QWORD *)v50[0] == v49)
    {
LABEL_48:
      v44 = 4;
      v43 = v49;
      goto LABEL_49;
    }
  }
  else
  {
    if (v50[0])
    {
      if ((_QWORD *)v50[0] == v49)
      {
        *(_QWORD *)(v41 + 24) = v41;
        (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)v50[0] + 24))(v50[0], v41);
        v40[1] = v41 + 32;
        v43 = (_QWORD *)v50[0];
        if ((_QWORD *)v50[0] == v49)
          goto LABEL_48;
        goto LABEL_44;
      }
      v42 = v50;
      *(_QWORD *)(v41 + 24) = v50[0];
    }
    else
    {
      v42 = (_QWORD *)(v41 + 24);
    }
    *v42 = 0;
    v40[1] = v41 + 32;
    v43 = (_QWORD *)v50[0];
    if ((_QWORD *)v50[0] == v49)
      goto LABEL_48;
  }
LABEL_44:
  if (!v43)
    goto LABEL_50;
  v44 = 5;
LABEL_49:
  (*(void (**)(void))(*v43 + 8 * v44))();
LABEL_50:
  operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(this, a2, (uint64_t)v49);
  v45 = v40[1];
  if (v45 >= v40[2])
  {
    v40[1] = std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__push_back_slow_path<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>(v40, v49);
    v47 = (_QWORD *)v50[0];
    if ((_QWORD *)v50[0] == v49)
    {
LABEL_59:
      v48 = 4;
      v47 = v49;
      goto LABEL_60;
    }
    goto LABEL_55;
  }
  if (!v50[0])
  {
    v46 = (_QWORD *)(v45 + 24);
LABEL_58:
    *v46 = 0;
    v40[1] = v45 + 32;
    v47 = (_QWORD *)v50[0];
    if ((_QWORD *)v50[0] == v49)
      goto LABEL_59;
    goto LABEL_55;
  }
  if ((_QWORD *)v50[0] != v49)
  {
    v46 = v50;
    *(_QWORD *)(v45 + 24) = v50[0];
    goto LABEL_58;
  }
  *(_QWORD *)(v45 + 24) = v45;
  (*(void (**)(_QWORD *, unint64_t))(v49[0] + 24))(v49, v45);
  v40[1] = v45 + 32;
  v47 = (_QWORD *)v50[0];
  if ((_QWORD *)v50[0] == v49)
    goto LABEL_59;
LABEL_55:
  if (v47)
  {
    v48 = 5;
LABEL_60:
    (*(void (**)(void))(*v47 + 8 * v48))();
  }
LABEL_61:
  operations_research::sat::IntegerTrail::RegisterReversibleClass(*((_QWORD **)this + 2503), (uint64_t)this + 8);
  operations_research::sat::GenericLiteralWatcher::RegisterReversibleInt(v33, v34, (int *)this + 5070);
}

void sub_22DB9146C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::LinearProgrammingConstraint *this@<X0>, operations_research::sat::Model *a2@<X1>, uint64_t a3@<X8>)
{
  operations_research::sat::Model *v3;
  int *v4;
  int *v5;
  operations_research::sat::LinearProgrammingConstraint *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  char *v22;
  int v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  int *v32;
  google::LogMessage *v33;
  _QWORD *v34;
  _QWORD *v35;
  int64_t v36;
  int64_t v37;
  char *v38;
  size_t v39;
  char *v40;
  char *v41;
  char *v42;
  int64_t v43;
  char *v44;
  char *v45;
  int64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v59;
  __int128 v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;

  v3 = a2;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  v4 = (int *)*((_QWORD *)this + 2490);
  v5 = (int *)*((_QWORD *)this + 2491);
  if (v4 != v5)
  {
    v6 = this;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = v65;
    while (1)
    {
      v11 = *v4;
      v12 = *(_QWORD *)(*((_QWORD *)v6 + 2503) + 40);
      if (!*(_QWORD *)(v12 + 12 * *v4) && *(_QWORD *)(v12 + 12 * (v11 ^ 1)) == -1)
      {
        if (v7 >= v8)
        {
          v13 = v7;
          v14 = v7 - v9;
          v15 = v14 >> 2;
          v16 = (v14 >> 2) + 1;
          if (v16 >> 62)
          {
            v65 = v10;
            v66 = v8;
            v64 = v9;
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          if ((v8 - v9) >> 1 > v16)
            v16 = (v8 - v9) >> 1;
          if ((unint64_t)(v8 - v9) >= 0x7FFFFFFFFFFFFFFCLL)
            v17 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v17 = v16;
          if (v17)
          {
            if (v17 >> 62)
            {
              v65 = v10;
              v66 = v8;
              v64 = v9;
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            v18 = v17;
            v19 = (char *)operator new(4 * v17);
            v17 = v18;
            v20 = &v19[4 * v15];
            *(_DWORD *)v20 = v11;
            v10 = (uint64_t)(v20 + 4);
            if (v13 != v9)
            {
LABEL_17:
              v21 = v13 - 4 - v9;
              if (v21 < 0xBC)
              {
                v22 = v13;
                v6 = this;
                goto LABEL_25;
              }
              if (&v19[v14 - 4 - (v21 & 0xFFFFFFFFFFFFFFFCLL)] > &v19[v14 - 4]
                || &v13[-(v21 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v13 - 4
                || (unint64_t)(v13 - &v19[v14]) < 0x20)
              {
                v22 = v13;
                v6 = this;
                goto LABEL_25;
              }
              v26 = (v21 >> 2) + 1;
              v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
              v22 = &v13[-v27];
              v20 -= v27;
              v28 = &v19[4 * v15 - 16];
              v29 = v13 - 16;
              v30 = v26 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v31 = *(_OWORD *)v29;
                *((_OWORD *)v28 - 1) = *((_OWORD *)v29 - 1);
                *(_OWORD *)v28 = v31;
                v28 -= 32;
                v29 -= 32;
                v30 -= 8;
              }
              while (v30);
              v6 = this;
              if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8))
              {
                do
                {
LABEL_25:
                  v23 = *((_DWORD *)v22 - 1);
                  v22 -= 4;
                  *((_DWORD *)v20 - 1) = v23;
                  v20 -= 4;
                }
                while (v22 != v9);
              }
LABEL_26:
              v8 = &v19[4 * v17];
              if (v9)
              {
                v24 = v9;
                v25 = (char *)v10;
                operator delete(v24);
                v10 = (uint64_t)v25;
                v7 = v25;
              }
              else
              {
                v7 = (char *)v10;
              }
              v9 = v20;
              goto LABEL_4;
            }
          }
          else
          {
            v19 = 0;
            v20 = (char *)(4 * v15);
            *(_DWORD *)(4 * v15) = v11;
            v10 = 4 * v15 + 4;
            if (v13 != v9)
              goto LABEL_17;
          }
          v6 = this;
          goto LABEL_26;
        }
        *(_DWORD *)v7 = v11;
        v7 += 4;
        v10 = (uint64_t)v7;
      }
LABEL_4:
      if (++v4 == v5)
      {
        v65 = v10;
        v66 = v8;
        v3 = a2;
        v64 = v9;
        v32 = (int *)operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::vlocal__;
        if ((int)*operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::vlocal__ <= 0)
          goto LABEL_40;
        goto LABEL_37;
      }
    }
  }
  v7 = 0;
  v9 = 0;
  v64 = 0;
  v32 = (int *)operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::vlocal__;
  if ((int)*operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::vlocal__ <= 0)
    goto LABEL_40;
LABEL_37:
  if (v32 != &google::kLogSiteUninitialized
    || google::InitVLOG3__((google *)&operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)1))
  {
    v33 = google::LogMessage::LogMessage((google::LogMessage *)&v61, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 2417);
    v34 = (_QWORD *)google::LogMessage::stream(v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"HeuristicLPPseudoCostBinary has ", 32);
    v35 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" variables.", 11);
    google::LogMessage::~LogMessage((google::LogMessage *)&v61);
  }
LABEL_40:
  v36 = v7 - v9;
  v37 = (v7 - v9) << 30;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  if (v37)
  {
    if (v37 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v38 = (char *)operator new((2 * (v7 - v9)) & 0x7FFFFFFFFLL);
    v39 = 8 * (int)(v36 >> 2);
    v40 = &v38[v39];
    v61 = v38;
    v63 = &v38[v39];
    bzero(v38, v39);
    v62 = v40;
    v41 = (char *)operator new(v36 & 0x3FFFFFFFFLL);
    bzero(v41, v36 & 0x3FFFFFFFFLL);
    v42 = &v41[v36 & 0x3FFFFFFFFLL];
  }
  else
  {
    v40 = 0;
    v38 = 0;
    v41 = 0;
    v42 = 0;
  }
  v55 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)v3);
  LODWORD(v59) = 0;
  v43 = v40 - v38;
  if (v40 == v38)
  {
    v45 = 0;
    v54 = 0;
    v46 = v42 - v41;
    if (v46)
      goto LABEL_47;
  }
  else
  {
    if (v43 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v44 = (char *)operator new(v40 - v38);
    v45 = &v44[8 * (v43 >> 3)];
    v54 = v44;
    memcpy(v44, v38, v43);
    v46 = v42 - v41;
    if (v46)
    {
LABEL_47:
      if (v46 < 0)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v47 = v7;
      v48 = (char *)operator new(v46);
      v49 = &v48[4 * (v46 >> 2)];
      memcpy(v48, v41, v46);
      if (v47 != v9)
        goto LABEL_49;
LABEL_53:
      v51 = 0;
      v50 = 0;
      goto LABEL_54;
    }
  }
  v52 = v7;
  v49 = 0;
  v48 = 0;
  if (v52 == v9)
    goto LABEL_53;
LABEL_49:
  if (v36 < 0)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v50 = (char *)operator new(v36);
  v51 = &v50[4 * (v36 >> 2)];
  memcpy(v50, v9, v36);
LABEL_54:
  *(_QWORD *)&v60 = this;
  *((_QWORD *)&v60 + 1) = v55;
  *(_QWORD *)(a3 + 24) = 0;
  v53 = (char *)operator new(0x68uLL);
  *(_QWORD *)v53 = &off_24F987660;
  HIDWORD(v59) = (unint64_t)v36 >> 2;
  *((_QWORD *)v53 + 1) = v59;
  *((_QWORD *)v53 + 2) = v54;
  *((_QWORD *)v53 + 3) = v45;
  *((_QWORD *)v53 + 4) = v45;
  *((_QWORD *)v53 + 5) = v48;
  *((_QWORD *)v53 + 6) = v49;
  *((_QWORD *)v53 + 7) = v49;
  *((_QWORD *)v53 + 8) = v50;
  *((_QWORD *)v53 + 9) = v51;
  *((_QWORD *)v53 + 10) = v51;
  *(_OWORD *)(v53 + 88) = v60;
  *(_QWORD *)(a3 + 24) = v53;
  if (v41)
    operator delete(v41);
  if (v38)
    operator delete(v38);
  if (v9)
  {
    v65 = (uint64_t)v9;
    operator delete(v9);
  }
}

void sub_22DB91A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, void *a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  uint64_t v24;
  void *v26;

  v26 = *(void **)(v24 - 112);
  if (v26)
  {
    *(_QWORD *)(v24 - 104) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::LinearProgrammingConstraint *this@<X0>, operations_research::sat::Model *a2@<X1>, uint64_t a3@<X8>)
{
  operations_research::sat::LinearProgrammingConstraint *v3;
  int *v4;
  int *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  operations_research::sat::LinearProgrammingConstraint *v15;
  unint64_t v16;
  _BYTE *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  int v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  int *v31;
  _QWORD *v32;
  _QWORD *v33;
  int64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v41;
  _BYTE v42[16];
  char *v43;
  uint64_t v44;
  char *v45;

  v3 = this;
  v39 = *((_QWORD *)this + 2503);
  v38 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)a2);
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v4 = (int *)*((_QWORD *)v3 + 2490);
  v5 = (int *)*((_QWORD *)v3 + 2491);
  if (v4 != v5)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = v44;
    while (1)
    {
      v10 = *v4;
      v11 = *(_QWORD *)(*((_QWORD *)v3 + 2503) + 40);
      if (!*(_QWORD *)(v11 + 12 * *v4) && *(_QWORD *)(v11 + 12 * (v10 ^ 1)) == -1)
      {
        if (v6 >= v7)
        {
          v12 = (v6 - v8) >> 2;
          v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 62)
          {
            v44 = v9;
            v45 = v7;
            v43 = v8;
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          if ((v7 - v8) >> 1 > v13)
            v13 = (v7 - v8) >> 1;
          if ((unint64_t)(v7 - v8) >= 0x7FFFFFFFFFFFFFFCLL)
            v14 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v14 = v13;
          if (v14)
          {
            if (v14 >> 62)
            {
              v44 = v9;
              v45 = v7;
              v43 = v8;
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            v15 = v3;
            v16 = v14;
            v17 = operator new(4 * v14);
            v14 = v16;
            v3 = v15;
            v18 = &v17[4 * v12];
            *(_DWORD *)v18 = v10;
            v9 = (uint64_t)(v18 + 4);
            if (v6 == v8)
              goto LABEL_22;
LABEL_19:
            v19 = v6 - 4 - v8;
            if (v19 < 0xBC)
            {
              v20 = v6;
              goto LABEL_21;
            }
            if (&v17[v6 - v8 - 4 - (v19 & 0xFFFFFFFFFFFFFFFCLL)] > &v17[v6 - v8 - 4])
            {
              v20 = v6;
              goto LABEL_21;
            }
            if (&v6[-(v19 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v6 - 4)
            {
              v20 = v6;
              goto LABEL_21;
            }
            if ((unint64_t)(v8 - v17) < 0x20)
            {
              v20 = v6;
              goto LABEL_21;
            }
            v25 = (v19 >> 2) + 1;
            v26 = 4 * (v25 & 0x7FFFFFFFFFFFFFF8);
            v20 = &v6[-v26];
            v18 -= v26;
            v27 = &v17[4 * v12 - 16];
            v28 = v6 - 16;
            v29 = v25 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v30 = *(_OWORD *)v28;
              *(v27 - 1) = *((_OWORD *)v28 - 1);
              *v27 = v30;
              v27 -= 2;
              v28 -= 32;
              v29 -= 8;
            }
            while (v29);
            if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
            {
              do
              {
LABEL_21:
                v21 = *((_DWORD *)v20 - 1);
                v20 -= 4;
                *((_DWORD *)v18 - 1) = v21;
                v18 -= 4;
              }
              while (v20 != v8);
            }
          }
          else
          {
            v17 = 0;
            v18 = (char *)(4 * v12);
            *(_DWORD *)(4 * v12) = v10;
            v9 = 4 * v12 + 4;
            if (v6 != v8)
              goto LABEL_19;
          }
LABEL_22:
          v7 = &v17[4 * v14];
          if (v8)
          {
            v22 = v8;
            v23 = (char *)v9;
            v24 = v7;
            operator delete(v22);
            v7 = v24;
            v9 = (uint64_t)v23;
            v6 = v23;
          }
          else
          {
            v6 = (char *)v9;
          }
          v8 = v18;
          goto LABEL_4;
        }
        *(_DWORD *)v6 = v10;
        v6 += 4;
        v9 = (uint64_t)v6;
      }
LABEL_4:
      if (++v4 == v5)
      {
        v44 = v9;
        v45 = v7;
        v43 = v8;
        v31 = operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::vlocal__;
        if (*operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::vlocal__ <= 0)
          goto LABEL_42;
        goto LABEL_39;
      }
    }
  }
  v6 = 0;
  v8 = 0;
  v43 = 0;
  v31 = operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::vlocal__;
  if (*operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::vlocal__ <= 0)
    goto LABEL_42;
LABEL_39:
  if (v31 != &google::kLogSiteUninitialized
    || google::InitVLOG3__((google *)&operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)1))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v42, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 2368);
    v32 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"HeuristicLPMostInfeasibleBinary has ", 36);
    v33 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" variables.", 11);
    google::LogMessage::~LogMessage((google::LogMessage *)v42);
  }
LABEL_42:
  v34 = v6 - v8;
  if (v6 == v8)
  {
    v36 = 0;
    v35 = 0;
  }
  else
  {
    if (v34 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v35 = (char *)operator new(v6 - v8);
    v36 = &v35[4 * (v34 >> 2)];
    memcpy(v35, v8, v34);
  }
  *(_QWORD *)&v41 = v39;
  *((_QWORD *)&v41 + 1) = v38;
  *(_QWORD *)(a3 + 24) = 0;
  v37 = (char *)operator new(0x38uLL);
  *(_QWORD *)v37 = &off_24F9875E0;
  *((_QWORD *)v37 + 1) = v3;
  *((_QWORD *)v37 + 2) = v35;
  *((_QWORD *)v37 + 3) = v36;
  *((_QWORD *)v37 + 4) = v36;
  *(_OWORD *)(v37 + 40) = v41;
  *(_QWORD *)(a3 + 24) = v37;
  if (v8)
  {
    v44 = (uint64_t)v8;
    operator delete(v8);
  }
}

void sub_22DB91FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  void *v24;

  if (v24)
    operator delete(v24);
  _Unwind_Resume(exception_object);
}

double operations_research::sat::LinearProgrammingConstraint::SetLevel(operations_research::sat::LinearProgrammingConstraint *this, int a2)
{
  char *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  double result;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  double *v16;
  uint64_t v17;
  unint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;

  v4 = (char *)this + 20280;
  v5 = *((int *)this + 5070);
  v6 = (_QWORD *)*((_QWORD *)this + 2537);
  v7 = *((_QWORD *)this + 2536);
  v8 = ((uint64_t)v6 - v7) >> 3;
  v9 = v5 - v8;
  if (v5 <= v8)
  {
    if (v5 < v8)
    {
      v11 = (_QWORD *)(v7 + 8 * v5);
      while (v6 != v11)
      {
        v13 = *--v6;
        v12 = v13;
        *v6 = 0;
        if (v13)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v12 + 8))(v12, v9);
      }
      *((_QWORD *)this + 2537) = v11;
    }
  }
  else
  {
    std::vector<std::unique_ptr<operations_research::sat::IntegerSumLE>>::__append((_QWORD *)this + 2536, v9);
  }
  if (v4[36] && *((_DWORD *)v4 + 8) > a2)
    v4[36] = 0;
  if (!a2)
  {
    v14 = (char *)*((_QWORD *)this + 2547);
    v15 = (char *)*((_QWORD *)this + 2548);
    if (v14 != v15)
    {
      v4[36] = 1;
      std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((_QWORD *)this + 2541, v14, v15, (v15 - v14) >> 3);
      *((_DWORD *)v4 + 8) = 0;
      v16 = (double *)*((_QWORD *)this + 2541);
      v17 = *((_QWORD *)this + 2542) - (_QWORD)v16;
      if (v17)
      {
        v18 = v17 >> 3;
        v19 = (int *)*((_QWORD *)this + 2490);
        v20 = **((_QWORD **)this + 2551);
        if (v18 <= 1)
          v18 = 1;
        do
        {
          v22 = *v19++;
          v21 = v22;
          *(double *)(v20 + 8 * v22) = *v16;
          v23 = *v16++;
          result = -v23;
          *(double *)(v20 + 8 * (v21 ^ 1)) = -v23;
          --v18;
        }
        while (v18);
      }
    }
  }
  return result;
}

double `non-virtual thunk to'operations_research::sat::LinearProgrammingConstraint::SetLevel(operations_research::sat::LinearProgrammingConstraint *this, int a2)
{
  return operations_research::sat::LinearProgrammingConstraint::SetLevel((operations_research::sat::LinearProgrammingConstraint *)((char *)this - 8), a2);
}

char *operations_research::sat::LinearProgrammingConstraint::AddCutGenerator(uint64_t a1, _QWORD *a2)
{
  int *v4;
  int *v5;
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  char *result;

  v4 = (int *)*a2;
  v5 = (int *)a2[1];
  if ((int *)*a2 != v5)
  {
    do
    {
      v6 = *v4++;
      operations_research::sat::LinearProgrammingConstraint::GetOrCreateMirrorVariable(a1, v6 & 0xFFFFFFFE);
    }
    while (v4 != v5);
  }
  v7 = *(_QWORD **)(a1 + 20432);
  if ((unint64_t)v7 >= *(_QWORD *)(a1 + 20440))
  {
    result = std::vector<operations_research::sat::CutGenerator>::__push_back_slow_path<operations_research::sat::CutGenerator>((void **)(a1 + 20424), (uint64_t)a2);
    *(_QWORD *)(a1 + 20432) = result;
    return result;
  }
  *v7 = 0;
  v7[1] = 0;
  v7[2] = 0;
  *(_OWORD *)v7 = *(_OWORD *)a2;
  v7[2] = a2[2];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v8 = a2 + 6;
  v9 = (_QWORD *)a2[6];
  if (!v9)
  {
    v8 = v7 + 6;
    goto LABEL_9;
  }
  if (v9 != a2 + 3)
  {
    v7[6] = v9;
LABEL_9:
    *v8 = 0;
    result = (char *)(v7 + 7);
    *(_QWORD *)(a1 + 20432) = v7 + 7;
    return result;
  }
  v7[6] = v7 + 3;
  (*(void (**)(_QWORD))(*(_QWORD *)*v8 + 24))(*v8);
  result = (char *)(v7 + 7);
  *(_QWORD *)(a1 + 20432) = v7 + 7;
  return result;
}

uint64_t operations_research::sat::LinearProgrammingConstraint::IncrementalPropagate(uint64_t a1, int **a2)
{
  int *v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t v10;
  double v11;

  if (*(_BYTE *)(a1 + 20316)
    && ((*(_DWORD *)(*(_QWORD *)(a1 + 20032) + 8) & 0xFFFFFFE) != 0 || *(_BYTE *)(a1 + 20400)))
  {
    v2 = *a2;
    v3 = a2[1];
    if (*a2 == v3)
      return 1;
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 20024) + 40);
    while (1)
    {
      v5 = *v2;
      v6 = *(_DWORD *)(*(_QWORD *)(a1 + 19920) + 4 * v5);
      v7 = *(_QWORD *)(v4 + 12 * v6);
      v8 = (double)v7 + -0.0001;
      v9 = -INFINITY;
      if (v7 < (uint64_t)0x8000000000000003)
        v8 = -INFINITY;
      v10 = *(_QWORD *)(v4 + 12 * (v6 ^ 1));
      if (v10 <= 0x7FFFFFFFFFFFFFFDLL)
        v9 = (double)-v10 + 0.0001;
      v11 = *(double *)(*(_QWORD *)(a1 + 20328) + 8 * v5);
      if (v7 > 0x7FFFFFFFFFFFFFFDLL)
        v8 = INFINITY;
      if (v10 < (uint64_t)0x8000000000000003)
        v9 = INFINITY;
      if (v11 < v8 || v11 > v9)
        break;
      if (++v2 == v3)
        return 1;
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

BOOL operations_research::sat::LinearProgrammingConstraint::SolveLp(operations_research::sat::LinearProgrammingConstraint *this)
{
  char *v2;
  int v3;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  int ProblemNumCols;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double VariableValue;
  double v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[16];
  int v23;
  void *__p[2];
  unsigned __int8 v25;

  v2 = (char *)this + 20312;
  if ((*(_DWORD *)(*((_QWORD *)this + 2504) + 8) & 0xFFFFFFE) == 0)
    *((_BYTE *)this + 20400) = 0;
  operations_research::glop::RevisedSimplex::Solve((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840), (operations_research::sat::LinearProgrammingConstraint *)((char *)this + 360), *((operations_research::TimeLimit **)this + 2502), (uint64_t)&v23);
  *((_QWORD *)this + 2588) += operations_research::glop::RevisedSimplex::GetNumberOfIterations((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840));
  v3 = v23;
  if (v23)
  {
    if (*_MergedGlobals_14[0] >= 1
      && (_MergedGlobals_14[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)_MergedGlobals_14, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v22, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 517);
      v4 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v22);
      v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"The LP solver encountered an error: ", 36);
      if ((v25 & 0x80u) == 0)
        v6 = __p;
      else
        v6 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v7 = v25;
      else
        v7 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
      google::LogMessage::~LogMessage((google::LogMessage *)v22);
    }
    operations_research::glop::RevisedSimplex::ClearStateForNextSolve((uint64_t)this + 840);
  }
  else
  {
    ProblemNumCols = operations_research::glop::RevisedSimplex::GetProblemNumCols((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840));
    if (ProblemNumCols < 1)
    {
      v10 = 0;
    }
    else
    {
      v9 = 0;
      v10 = 0;
      v11 = ProblemNumCols;
      do
      {
        if (operations_research::glop::RevisedSimplex::GetReducedCost((uint64_t)this + 840, v9) == 0.0
          && operations_research::glop::RevisedSimplex::GetVariableStatus((uint64_t)this + 840, v9))
        {
          ++v10;
        }
        ++v9;
      }
      while (v11 != v9);
    }
    v2[376] = (double)(int)operations_research::glop::RevisedSimplex::GetProblemNumCols((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840))
            * 0.3 <= (double)v10;
    operations_research::sat::IncrementalAverage::AddData((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 20672), (double)v10);
    if (*((double *)this + 2584) >= 1000.0
      && *off_254079610[0] >= 2
      && (off_254079610[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_254079610, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)2)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v22, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 523);
      v12 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"High average degeneracy: ", 25);
      std::ostream::operator<<();
      google::LogMessage::~LogMessage((google::LogMessage *)v22);
    }
    if (!operations_research::glop::RevisedSimplex::GetProblemStatus((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840)))
    {
      v2[4] = 1;
      v13 = (*(_DWORD *)(*((_QWORD *)this + 2504) + 8) >> 1) & 0x7FFFFFF;
      *(_DWORD *)v2 = v13;
      v14 = *((_QWORD *)this + 2491) - *((_QWORD *)this + 2490);
      if ((int)(v14 >> 2) >= 1)
      {
        v15 = 0;
        v16 = (v14 >> 2);
        do
        {
          VariableValue = operations_research::glop::RevisedSimplex::GetVariableValue((uint64_t)this + 840, v15);
          v18 = operations_research::glop::LpScalingHelper::UnscaleVariableValue((uint64_t)this + 19360, v15, VariableValue);
          *(double *)(*((_QWORD *)this + 2541) + 8 * v15) = v18;
          v19 = *(int *)(*((_QWORD *)this + 2490) + 4 * v15);
          v20 = **((_QWORD **)this + 2551);
          *(double *)(v20 + 8 * v19) = v18;
          *(double *)(v20 + 8 * (v19 ^ 1)) = -v18;
          ++v15;
        }
        while (v16 != v15);
        v13 = *(_DWORD *)v2;
      }
      if (!v13)
        std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((_QWORD *)this + 2547, *((char **)this + 2541), *((char **)this + 2542), (uint64_t)(*((_QWORD *)this + 2542) - *((_QWORD *)this + 2541)) >> 3);
    }
  }
  if ((char)v25 < 0)
    operator delete(__p[0]);
  return v3 == 0;
}

void sub_22DB926BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::LinearProgrammingConstraint::ConvertToLinearConstraint(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _DWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  _QWORD *v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  void **v49;
  void **v50;
  unint64_t v51;
  uint64_t v53;

  a4[3] = a4[2];
  v5 = (char *)a4[5];
  v49 = (void **)(a4 + 5);
  v50 = (void **)(a4 + 2);
  a4[6] = v5;
  v6 = a2[1] - *a2;
  if ((int)(v6 >> 3) >= 1)
  {
    v7 = 0;
    v53 = (v6 >> 3);
    do
    {
      v9 = *(_QWORD *)(*a2 + 8 * v7);
      if (!v9)
        goto LABEL_5;
      v10 = *(_DWORD *)(*(_QWORD *)(a1 + 19920) + 4 * v7);
      v12 = (char *)a4[3];
      v11 = a4[4];
      if ((unint64_t)v12 < v11)
      {
        *(_DWORD *)v12 = v10;
        v13 = (uint64_t)(v12 + 4);
        goto LABEL_25;
      }
      v14 = (char *)*v50;
      v15 = v12 - (_BYTE *)*v50;
      v16 = v15 >> 2;
      v17 = (v15 >> 2) + 1;
      if (v17 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v18 = v11 - (_QWORD)v14;
      if (v18 >> 1 > v17)
        v17 = v18 >> 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
        v17 = 0x3FFFFFFFFFFFFFFFLL;
      v51 = v17;
      if (v17)
      {
        if (v17 >> 62)
          goto LABEL_56;
        v19 = operator new(4 * v17);
        v20 = &v19[4 * v16];
        *v20 = v10;
        v13 = (uint64_t)(v20 + 1);
        if (v12 == v14)
        {
LABEL_37:
          a4[2] = v20;
          a4[3] = v13;
          a4[4] = &v19[4 * v51];
          if (v14)
            goto LABEL_24;
          goto LABEL_25;
        }
      }
      else
      {
        v19 = 0;
        v20 = (_DWORD *)(4 * v16);
        *(_DWORD *)(4 * v16) = v10;
        v13 = 4 * v16 + 4;
        if (v12 == v14)
          goto LABEL_37;
      }
      v21 = v12 - 4 - v14;
      if (v21 < 0x2C)
        goto LABEL_61;
      if ((unint64_t)(v12 - &v19[v15]) < 0x20)
        goto LABEL_61;
      v22 = (v21 >> 2) + 1;
      v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
      v24 = &v12[-v23];
      v20 = (_DWORD *)((char *)v20 - v23);
      v25 = &v19[4 * v16 - 16];
      v26 = v12 - 16;
      v27 = v22 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v28 = *(_OWORD *)v26;
        *(v25 - 1) = *((_OWORD *)v26 - 1);
        *v25 = v28;
        v25 -= 2;
        v26 -= 32;
        v27 -= 8;
      }
      while (v27);
      v12 = v24;
      if (v22 != (v22 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_61:
        do
        {
          v29 = *((_DWORD *)v12 - 1);
          v12 -= 4;
          *--v20 = v29;
        }
        while (v12 != v14);
      }
      a4[2] = v20;
      a4[3] = v13;
      a4[4] = &v19[4 * v51];
      if (v14)
      {
LABEL_24:
        operator delete(v14);
        v5 = (char *)a4[6];
      }
LABEL_25:
      a4[3] = v13;
      v30 = a4[7];
      if ((unint64_t)v5 >= v30)
      {
        v31 = (char *)*v49;
        v32 = v5 - (_BYTE *)*v49;
        v33 = v32 >> 3;
        v34 = (v32 >> 3) + 1;
        if (v34 >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v35 = v30 - (_QWORD)v31;
        if (v35 >> 2 > v34)
          v34 = v35 >> 2;
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
          v36 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v36 = v34;
        if (v36)
        {
          if (v36 >> 61)
LABEL_56:
            std::__throw_bad_array_new_length[abi:ne180100]();
          v37 = operator new(8 * v36);
          v38 = &v37[8 * v33];
          *v38 = v9;
          v8 = (uint64_t)(v38 + 1);
          if (v5 == v31)
            goto LABEL_43;
LABEL_40:
          v39 = v5 - 8 - v31;
          if (v39 < 0x168)
          {
            v40 = v5;
            goto LABEL_42;
          }
          if (&v37[v32 - 8 - (v39 & 0xFFFFFFFFFFFFFFF8)] > &v37[v32 - 8])
          {
            v40 = v5;
            goto LABEL_42;
          }
          if (&v5[-(v39 & 0xFFFFFFFFFFFFFFF8) - 8] > v5 - 8)
          {
            v40 = v5;
            goto LABEL_42;
          }
          if ((unint64_t)(v5 - v37 - v32) < 0x20)
          {
            v40 = v5;
            goto LABEL_42;
          }
          v42 = (v39 >> 3) + 1;
          v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
          v40 = &v5[-v43];
          v38 = (_QWORD *)((char *)v38 - v43);
          v44 = &v37[8 * v33 - 16];
          v45 = v5 - 16;
          v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v47 = *(_OWORD *)v45;
            *(v44 - 1) = *((_OWORD *)v45 - 1);
            *v44 = v47;
            v44 -= 2;
            v45 -= 32;
            v46 -= 4;
          }
          while (v46);
          if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_42:
              v41 = *((_QWORD *)v40 - 1);
              v40 -= 8;
              *--v38 = v41;
            }
            while (v40 != v31);
          }
        }
        else
        {
          v37 = 0;
          v38 = (_QWORD *)(8 * v33);
          *(_QWORD *)(8 * v33) = v9;
          v8 = 8 * v33 + 8;
          if (v5 != v31)
            goto LABEL_40;
        }
LABEL_43:
        a4[5] = v38;
        a4[6] = v8;
        a4[7] = &v37[8 * v36];
        if (v31)
          operator delete(v31);
        goto LABEL_4;
      }
      *(_QWORD *)v5 = v9;
      v8 = (uint64_t)(v5 + 8);
LABEL_4:
      a4[6] = v8;
      v5 = (char *)v8;
LABEL_5:
      ++v7;
    }
    while (v7 != v53);
  }
  *a4 = 0x8000000000000002;
  a4[1] = a3;
}

BOOL operations_research::sat::LinearProgrammingConstraint::AddCutFromConstraints(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  const operations_research::sat::LinearConstraint *v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  double v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _BOOL8 v15;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  operations_research::sat::LinearConstraint *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  void *v24;
  int *v25;
  int *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _BYTE *v46;
  _QWORD *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _BYTE *v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  _OWORD *v60;
  char *v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  _BYTE *v77;
  _QWORD *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  _OWORD *v83;
  char *v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  _BYTE *v97;
  _QWORD *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  _OWORD *v103;
  char *v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  _OWORD *v112;
  char *v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  unint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  _BYTE *v128;
  _QWORD *v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  _OWORD *v134;
  char *v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  char *v139;
  char *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  _OWORD *v150;
  char *v151;
  uint64_t v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  char *v160;
  unint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  _BYTE *v169;
  _QWORD *v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  _OWORD *v175;
  char *v176;
  uint64_t v177;
  __int128 v178;
  uint64_t v179;
  int v180;
  char *v181;
  unint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  _BYTE *v194;
  _DWORD *v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  _OWORD *v201;
  char *v202;
  uint64_t v203;
  __int128 v204;
  int v205;
  int *v206;
  unint64_t v207;
  uint64_t v208;
  int *v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  _BYTE *v215;
  int *v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  int *v220;
  _OWORD *v221;
  int *v222;
  uint64_t v223;
  __int128 v224;
  int v225;
  uint64_t *v226;
  unint64_t v227;
  BOOL v228;
  uint64_t v229;
  uint64_t *v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t v235;
  _BYTE *v236;
  uint64_t *v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t *v242;
  _OWORD *v243;
  uint64_t *v244;
  uint64_t v245;
  __int128 v246;
  uint64_t v247;
  uint64_t *v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  unint64_t v261;
  _BYTE *v262;
  _QWORD *v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  unint64_t v269;
  _BYTE *v270;
  uint64_t *v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  char *v275;
  _OWORD *v276;
  char *v277;
  uint64_t v278;
  __int128 v279;
  uint64_t v280;
  char *v281;
  unint64_t v282;
  uint64_t v283;
  char *v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  unint64_t v289;
  _BYTE *v290;
  _QWORD *v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  char *v295;
  _OWORD *v296;
  char *v297;
  uint64_t v298;
  __int128 v299;
  uint64_t v300;
  uint64_t *v301;
  unint64_t v302;
  char *v303;
  uint64_t v304;
  uint64_t v305;
  unint64_t v306;
  uint64_t v307;
  unint64_t v308;
  _BYTE *v309;
  uint64_t *v310;
  unint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t *v314;
  _OWORD *v315;
  uint64_t *v316;
  uint64_t v317;
  __int128 v318;
  uint64_t v319;
  unint64_t v320;
  uint64_t v321;
  uint64_t v322;
  char *v323;
  _OWORD *v324;
  char *v325;
  uint64_t v326;
  __int128 v327;
  uint64_t v328;
  uint64_t v329;
  char *v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t v333;
  char *v334;
  uint64_t v335;
  uint64_t v336;
  unint64_t v337;
  uint64_t v338;
  unint64_t v339;
  _BYTE *v340;
  uint64_t *v341;
  unint64_t v342;
  unint64_t v343;
  uint64_t v344;
  uint64_t v345;
  char *v346;
  _OWORD *v347;
  char *v348;
  uint64_t v349;
  __int128 v350;
  uint64_t v351;
  char *v352;
  unint64_t v353;
  uint64_t v354;
  uint64_t v355;
  unint64_t v356;
  uint64_t v357;
  unint64_t v358;
  uint64_t v359;
  uint64_t v360;
  char *v361;
  _OWORD *v362;
  char *v363;
  uint64_t v364;
  __int128 v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  unint64_t v371;
  double v372;
  uint64_t v373;
  uint64_t v374;
  double v375;
  uint64_t v376;
  double v377;
  double v378;
  google::LogMessage *v379;
  _QWORD *v380;
  _QWORD *v381;
  unint64_t v382;
  uint64_t v383;
  uint64_t v384;
  unint64_t v385;
  int v386;
  int v387;
  uint64_t *v388;
  int v389;
  int v390;
  int *v391;
  uint64_t v392;
  int v393;
  int v394;
  char *v395;
  unint64_t v396;
  char *v397;
  uint64_t v398;
  uint64_t v399;
  int *v400;
  int *v401;
  uint64_t v402;
  int v403;
  uint64_t *v404;
  unint64_t v405;
  unint64_t v406;
  unint64_t v407;
  char *v408;
  uint64_t v409;
  unint64_t v410;
  uint64_t v411;
  int v412;
  void *v413;
  void *v414;
  uint64_t v415;
  int v416;
  unint64_t v417;
  int v418;
  uint64_t v419;
  int v420;
  int *v421;
  uint64_t v422;
  unint64_t v423;
  int v424;
  uint64_t v425;
  int v426;
  BOOL v427;
  unint64_t v428;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  int v435;
  int v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  int *v440;
  int *v441;
  unint64_t v442;
  int v443;
  uint64_t v444;
  int v445;
  uint64_t v446;
  unint64_t v447;
  int v448;
  uint64_t v449;
  int v450;
  BOOL v451;
  unint64_t v452;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  unint64_t v461;
  int v462;
  int v463;
  BOOL v464;
  uint64_t v465;
  unint64_t v466;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  int *v472;
  char *v473;
  uint64_t v474;
  unint64_t v475;
  int v476;
  int v477;
  uint64_t v478;
  int v479;
  BOOL v480;
  uint64_t v481;
  unint64_t v482;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  google::LogMessage *v488;
  _QWORD *v489;
  char *v490;
  _BYTE *v491;
  char *v492;
  _BYTE *v493;
  operations_research::sat::LinearConstraint *v494;
  double v495;
  uint64_t v496;
  double v497;
  google::LogMessage *v498;
  _QWORD *v499;
  _QWORD *v500;
  _QWORD *v501;
  uint64_t *v502;
  void *v503;
  google::LogMessage *v504;
  _QWORD *v505;
  uint64_t *v506;
  uint64_t *v507;
  void *v508;
  void *v509;
  void *v510;
  char *v511;
  char *v512;
  void *v513;
  char *v514;
  void *v515;
  void *v516;
  google::LogMessage *v517;
  _QWORD *v518;
  google::LogMessage *v519;
  _QWORD *v520;
  _QWORD *v521;
  unint64_t *v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t *v525;
  void **v526;
  void **v527;
  void **v528;
  int v529;
  void **v530;
  uint64_t *v531;
  int v532;
  uint64_t *v533;
  uint64_t *v534;
  int v535;
  char **v536;
  uint64_t v537;
  int v539;
  int *v540;
  uint64_t v541;
  uint64_t v542;
  unint64_t v543;
  std::string v544;
  std::string v545;
  __int128 v546;
  void *v547;
  void *v548;
  void *v549;
  void *v550;
  std::string v551;
  void *v552;
  char v553;
  void *v554[2];
  char v555;
  __int128 v556;
  void *v557;
  void *v558;
  void *__p;
  void *v560;
  void *v561;
  uint64_t *v562;
  uint64_t v563;
  void *v564;
  char *v565;
  uint64_t v566;
  __int128 v567;
  void *v568[2];
  void *v569[2];
  __int128 v570;
  uint64_t v571;
  _QWORD v572[2];
  _BYTE v573[32];
  _QWORD v574[6];
  uint64_t *v575[2];
  _BYTE v576[32];
  unint64_t v577;
  uint64_t v578;
  char *v579;
  uint64_t v580;

  v580 = *MEMORY[0x24BDAC8D0];
  v571 = 0;
  v531 = (uint64_t *)(a1 + 19776);
  if ((operations_research::sat::LinearProgrammingConstraint::ComputeNewLinearConstraint((_QWORD *)a1, a3, (uint64_t *)(a1 + 19776), &v571) & 1) == 0)
  {
    if (*off_254079618[0] < 1
      || off_254079618[0] == &google::kLogSiteUninitialized
      && !google::InitVLOG3__((google *)off_254079618, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)1))
    {
      return 0;
    }
    google::LogMessage::LogMessage((google::LogMessage *)&v567, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 595);
    v14 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v567);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Issue, overflow!", 16);
    goto LABEL_20;
  }
  operations_research::sat::LinearProgrammingConstraint::ConvertToLinearConstraint(a1, v531, v571, (_QWORD *)(a1 + 19712));
  v6 = operations_research::sat::ComputeInfinityNorm((operations_research::sat *)(a1 + 19712), v5);
  v7 = (double)v6;
  if (v6 < (uint64_t)0x8000000000000003)
    v7 = -INFINITY;
  if (v6 <= 0x7FFFFFFFFFFFFFFDLL)
    v8 = v7;
  else
    v8 = INFINITY;
  v9 = operations_research::sat::ComputeActivity((_QWORD *)(a1 + 19712), *(uint64_t **)(a1 + 20408));
  v10 = *(_QWORD *)(a1 + 19720);
  v11 = (double)v10;
  if (v10 < (uint64_t)0x8000000000000003)
    v11 = -INFINITY;
  if (v10 > 0x7FFFFFFFFFFFFFFDLL)
    v11 = INFINITY;
  if (vabdd_f64(v9, v11) / v8 > 0.0001)
  {
    if (*off_254079620[0] < 1
      || off_254079620[0] == &google::kLogSiteUninitialized
      && !google::InitVLOG3__((google *)off_254079620, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)1))
    {
      return 0;
    }
    google::LogMessage::LogMessage((google::LogMessage *)&v567, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 609);
    v12 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v567);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Cut not tight ", 14);
    operations_research::sat::ComputeActivity((_QWORD *)(a1 + 19712), *(uint64_t **)(a1 + 20408));
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" ", 1);
    std::ostream::operator<<();
LABEL_20:
    google::LogMessage::~LogMessage((google::LogMessage *)&v567);
    return 0;
  }
  if ((operations_research::sat::LinearConstraintManager::DebugCheckConstraint((operations_research::sat::LinearConstraintManager *)(a1 + 16), (const operations_research::sat::LinearConstraint *)(a1 + 19712)) & 1) == 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v567, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 613);
    v521 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v567);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v521, (uint64_t)"Check failed: constraint_manager_.DebugCheckConstraint(cut_) ", 61);
    goto LABEL_655;
  }
  v17 = *(_QWORD **)(a1 + 20408);
  v18 = v17[1] - *v17;
  v19 = (v18 >> 3) & 1;
  v543 = v18 >> 3;
  if (((v18 >> 3) & 0x80000000) != 0)
    LODWORD(v19) = -(int)v19;
  LODWORD(v567) = v19;
  LODWORD(v577) = 0;
  if (!(_DWORD)v19)
    goto LABEL_27;
  v577 = google::MakeCheckOpString<int,int>((int)&v567, (int)&v577, "first_new_var.value() % 2 == 0");
  if (v577)
  {
    google::LogMessageFatal::LogMessageFatal((unint64_t *)&v567, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 620, (uint64_t **)&v577);
    google::LogMessage::stream((google::LogMessage *)&v567);
LABEL_655:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v567);
  }
  v17 = *(_QWORD **)(a1 + 20408);
LABEL_27:
  *(_OWORD *)v569 = 0u;
  v570 = 0u;
  v567 = 0u;
  *(_OWORD *)v568 = 0u;
  v564 = 0;
  v565 = 0;
  v566 = 0;
  v561 = 0;
  v562 = 0;
  v563 = 0;
  operations_research::sat::ImpliedBoundsProcessor::ProcessUpperBoundedConstraintWithSlackCreation(a1 + 20064, 0, v18 >> 3, v17, (_QWORD *)(a1 + 19712), (uint64_t)&v564, (uint64_t)&v561);
  v21 = (uint64_t *)v561;
  v22 = v562;
  if (v561 != v562)
  {
    do
    {
      operations_research::sat::DivideByGCD(v21, v20);
      if ((operations_research::sat::LinearConstraintManager::DebugCheckConstraint((operations_research::sat::LinearConstraintManager *)(a1 + 16), (const operations_research::sat::LinearConstraint *)v21) & 1) == 0)
      {
        v517 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v577, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 641);
        v518 = (_QWORD *)google::LogMessage::stream(v517);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v518, (uint64_t)"Check failed: constraint_manager_.DebugCheckConstraint(ib_cut) ", 63);
        goto LABEL_653;
      }
      operations_research::sat::LinearConstraint::LinearConstraint((operations_research::sat::LinearConstraint *)&v556, (const operations_research::sat::LinearConstraint *)v21);
      v555 = 2;
      strcpy((char *)v554, "IB");
      v23 = *(uint64_t **)(a1 + 20408);
      v553 = 0;
      LOBYTE(v552) = 0;
      operations_research::sat::LinearConstraintManager::AddCut(a1 + 16, &v556, (uint64_t)v554, v23, (uint64_t)&v552);
      if (v553 < 0)
      {
        operator delete(v552);
        if (v555 < 0)
        {
LABEL_38:
          operator delete(v554[0]);
          v24 = __p;
          if (!__p)
            goto LABEL_35;
LABEL_34:
          v560 = v24;
          operator delete(v24);
          goto LABEL_35;
        }
      }
      else if (v555 < 0)
      {
        goto LABEL_38;
      }
      v24 = __p;
      if (__p)
        goto LABEL_34;
LABEL_35:
      if (v557)
      {
        v558 = v557;
        operator delete(v557);
      }
      v21 += 8;
    }
    while (v21 != v22);
  }
  v523 = a1 + 16;
  v524 = a2;
  v525 = (uint64_t *)(a1 + 19712);
  v536 = (char **)(a1 + 19800);
  *(_QWORD *)(a1 + 19808) = *(_QWORD *)(a1 + 19800);
  v534 = (uint64_t *)(a1 + 19824);
  *(_QWORD *)(a1 + 19832) = *(_QWORD *)(a1 + 19824);
  v533 = (uint64_t *)(a1 + 19848);
  *(_QWORD *)(a1 + 19856) = *(_QWORD *)(a1 + 19848);
  v25 = *(int **)(a1 + 19728);
  v26 = *(int **)(a1 + 19736);
  v540 = v26;
  while (v25 != v26)
  {
    v29 = *v25;
    if ((int)v29 >= (int)v543)
    {
      if ((v29 & 1) != 0)
      {
        v519 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v577, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 658);
        v520 = (_QWORD *)google::LogMessage::stream(v519);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v520, (uint64_t)"Check failed: VariableIsPositive(var) ", 38);
        goto LABEL_653;
      }
      if ((int)v29 >= (int)v543)
        v34 = v29 - v543;
      else
        v34 = v29 - v543 + 1;
      v35 = (char *)v564;
      v36 = (char *)v564 + 56 * (v34 >> 1) + 48;
      v37 = *(char **)(a1 + 19808);
      v38 = *(_QWORD *)(a1 + 19816);
      if ((unint64_t)v37 < v38)
      {
        *(_QWORD *)v37 = *v36;
        v39 = (uint64_t)(v37 + 8);
        goto LABEL_132;
      }
      v48 = *v536;
      v49 = v37 - *v536;
      v50 = v49 >> 3;
      v51 = (v49 >> 3) + 1;
      if (v51 >> 61)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v52 = v38 - (_QWORD)v48;
      if (v52 >> 2 > v51)
        v51 = v52 >> 2;
      if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8)
        v53 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v53 = v51;
      if (v53)
      {
        if (v53 >> 61)
          goto LABEL_658;
        v54 = operator new(8 * v53);
        v55 = &v54[8 * v50];
        *v55 = *v36;
        v39 = (uint64_t)(v55 + 1);
        if (v37 == v48)
          goto LABEL_130;
LABEL_124:
        v108 = v37 - 8 - v48;
        if (v108 < 0x58)
          goto LABEL_688;
        if ((unint64_t)(v37 - &v54[v49]) < 0x20)
          goto LABEL_688;
        v109 = (v108 >> 3) + 1;
        v110 = 8 * (v109 & 0x3FFFFFFFFFFFFFFCLL);
        v111 = &v37[-v110];
        v55 = (_QWORD *)((char *)v55 - v110);
        v112 = &v54[8 * v50 - 16];
        v113 = v37 - 16;
        v114 = v109 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v115 = *(_OWORD *)v113;
          *(v112 - 1) = *((_OWORD *)v113 - 1);
          *v112 = v115;
          v112 -= 2;
          v113 -= 32;
          v114 -= 4;
        }
        while (v114);
        v37 = v111;
        if (v109 != (v109 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_688:
          do
          {
            v116 = *((_QWORD *)v37 - 1);
            v37 -= 8;
            *--v55 = v116;
          }
          while (v37 != v48);
        }
      }
      else
      {
        v54 = 0;
        v55 = (_QWORD *)(8 * v50);
        *(_QWORD *)(8 * v50) = *v36;
        v39 = 8 * v50 + 8;
        if (v37 != v48)
          goto LABEL_124;
      }
LABEL_130:
      *(_QWORD *)(a1 + 19800) = v55;
      *(_QWORD *)(a1 + 19808) = v39;
      *(_QWORD *)(a1 + 19816) = &v54[8 * v53];
      if (v48)
        operator delete(v48);
LABEL_132:
      v117 = (uint64_t)v34 >> 1;
      *(_QWORD *)(a1 + 19808) = v39;
      v118 = &v35[56 * (int)v117 + 32];
      v119 = *(char **)(a1 + 19832);
      v120 = *(_QWORD *)(a1 + 19840);
      if ((unint64_t)v119 < v120)
      {
        *(_QWORD *)v119 = *(_QWORD *)v118;
        v121 = (uint64_t)(v119 + 8);
LABEL_153:
        *(_QWORD *)(a1 + 19832) = v121;
        v139 = &v35[56 * (int)v117 + 40];
        v140 = *(char **)(a1 + 19856);
        v141 = *(_QWORD *)(a1 + 19864);
        if ((unint64_t)v140 < v141)
        {
          *(_QWORD *)v140 = *(_QWORD *)v139;
          v27 = v140 + 8;
          goto LABEL_42;
        }
        v91 = (char *)*v533;
        v142 = (uint64_t)&v140[-*v533];
        v143 = v142 >> 3;
        v144 = (v142 >> 3) + 1;
        if (v144 >> 61)
LABEL_670:
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v145 = v141 - (_QWORD)v91;
        if (v145 >> 2 > v144)
          v144 = v145 >> 2;
        if ((unint64_t)v145 >= 0x7FFFFFFFFFFFFFF8)
          v96 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v96 = v144;
        if (v96)
        {
          if (v96 >> 61)
LABEL_658:
            std::__throw_bad_array_new_length[abi:ne180100]();
          v97 = operator new(8 * v96);
          v98 = &v97[8 * v143];
          *v98 = *(_QWORD *)v139;
          v28 = (uint64_t)(v98 + 1);
          if (v140 == v91)
            goto LABEL_172;
LABEL_166:
          v146 = v140 - 8 - v91;
          if (v146 < 0x58)
            goto LABEL_689;
          if ((unint64_t)(v140 - &v97[v142]) < 0x20)
            goto LABEL_689;
          v147 = (v146 >> 3) + 1;
          v148 = 8 * (v147 & 0x3FFFFFFFFFFFFFFCLL);
          v149 = &v140[-v148];
          v98 = (_QWORD *)((char *)v98 - v148);
          v150 = &v97[8 * v143 - 16];
          v151 = v140 - 16;
          v152 = v147 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v153 = *(_OWORD *)v151;
            *(v150 - 1) = *((_OWORD *)v151 - 1);
            *v150 = v153;
            v150 -= 2;
            v151 -= 32;
            v152 -= 4;
          }
          while (v152);
          v140 = v149;
          if (v147 != (v147 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_689:
            do
            {
              v154 = *((_QWORD *)v140 - 1);
              v140 -= 8;
              *--v98 = v154;
            }
            while (v140 != v91);
          }
          goto LABEL_172;
        }
        v97 = 0;
        v98 = (_QWORD *)(8 * v143);
        *(_QWORD *)(8 * v143) = *(_QWORD *)v139;
        v28 = 8 * v143 + 8;
        if (v140 != v91)
          goto LABEL_166;
        goto LABEL_172;
      }
      v122 = (char *)*v534;
      v123 = (uint64_t)&v119[-*v534];
      v124 = v123 >> 3;
      v125 = (v123 >> 3) + 1;
      if (v125 >> 61)
        goto LABEL_670;
      v126 = v120 - (_QWORD)v122;
      if (v126 >> 2 > v125)
        v125 = v126 >> 2;
      if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFF8)
        v127 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v127 = v125;
      if (v127)
      {
        if (v127 >> 61)
          goto LABEL_658;
        v128 = operator new(8 * v127);
        v129 = &v128[8 * v124];
        *v129 = *(_QWORD *)v118;
        v121 = (uint64_t)(v129 + 1);
        if (v119 == v122)
          goto LABEL_151;
LABEL_145:
        v130 = v119 - 8 - v122;
        if (v130 < 0x58)
          goto LABEL_690;
        if ((unint64_t)(v119 - &v128[v123]) < 0x20)
          goto LABEL_690;
        v131 = (v130 >> 3) + 1;
        v132 = 8 * (v131 & 0x3FFFFFFFFFFFFFFCLL);
        v133 = &v119[-v132];
        v129 = (_QWORD *)((char *)v129 - v132);
        v134 = &v128[8 * v124 - 16];
        v135 = v119 - 16;
        v136 = v131 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v137 = *(_OWORD *)v135;
          *(v134 - 1) = *((_OWORD *)v135 - 1);
          *v134 = v137;
          v134 -= 2;
          v135 -= 32;
          v136 -= 4;
        }
        while (v136);
        v119 = v133;
        if (v131 != (v131 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_690:
          do
          {
            v138 = *((_QWORD *)v119 - 1);
            v119 -= 8;
            *--v129 = v138;
          }
          while (v119 != v122);
        }
      }
      else
      {
        v128 = 0;
        v129 = (_QWORD *)(8 * v124);
        *(_QWORD *)(8 * v124) = *(_QWORD *)v118;
        v121 = 8 * v124 + 8;
        if (v119 != v122)
          goto LABEL_145;
      }
LABEL_151:
      *(_QWORD *)(a1 + 19824) = v129;
      *(_QWORD *)(a1 + 19832) = v121;
      *(_QWORD *)(a1 + 19840) = &v128[8 * v127];
      if (v122)
        operator delete(v122);
      goto LABEL_153;
    }
    v30 = **(_QWORD **)(a1 + 20408);
    v31 = *(char **)(a1 + 19808);
    v32 = *(_QWORD *)(a1 + 19816);
    if ((unint64_t)v31 < v32)
    {
      *(_QWORD *)v31 = *(_QWORD *)(v30 + 8 * v29);
      v33 = (uint64_t)(v31 + 8);
      goto LABEL_83;
    }
    v40 = *v536;
    v41 = v31 - *v536;
    v42 = v41 >> 3;
    v43 = (v41 >> 3) + 1;
    if (v43 >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v44 = v32 - (_QWORD)v40;
    if (v44 >> 2 > v43)
      v43 = v44 >> 2;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
      v45 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    if (v45)
    {
      if (v45 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v46 = operator new(8 * v45);
      v47 = &v46[8 * v42];
      *v47 = *(_QWORD *)(v30 + 8 * v29);
      v33 = (uint64_t)(v47 + 1);
      if (v31 == v40)
        goto LABEL_81;
LABEL_75:
      v56 = v31 - 8 - v40;
      if (v56 < 0x58)
        goto LABEL_691;
      if ((unint64_t)(v31 - &v46[v41]) < 0x20)
        goto LABEL_691;
      v57 = (v56 >> 3) + 1;
      v58 = 8 * (v57 & 0x3FFFFFFFFFFFFFFCLL);
      v59 = &v31[-v58];
      v47 = (_QWORD *)((char *)v47 - v58);
      v60 = &v46[8 * v42 - 16];
      v61 = v31 - 16;
      v62 = v57 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v63 = *(_OWORD *)v61;
        *(v60 - 1) = *((_OWORD *)v61 - 1);
        *v60 = v63;
        v60 -= 2;
        v61 -= 32;
        v62 -= 4;
      }
      while (v62);
      v31 = v59;
      if (v57 != (v57 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_691:
        do
        {
          v64 = *((_QWORD *)v31 - 1);
          v31 -= 8;
          *--v47 = v64;
        }
        while (v31 != v40);
      }
      goto LABEL_81;
    }
    v46 = 0;
    v47 = (_QWORD *)(8 * v42);
    *(_QWORD *)(8 * v42) = *(_QWORD *)(v30 + 8 * v29);
    v33 = 8 * v42 + 8;
    if (v31 != v40)
      goto LABEL_75;
LABEL_81:
    *(_QWORD *)(a1 + 19800) = v47;
    *(_QWORD *)(a1 + 19808) = v33;
    *(_QWORD *)(a1 + 19816) = &v46[8 * v45];
    if (v40)
      operator delete(v40);
LABEL_83:
    *(_QWORD *)(a1 + 19808) = v33;
    v65 = *(_QWORD *)(a1 + 20024);
    v66 = *(_QWORD *)(*(_QWORD *)(v65 + 40) + 12 * (int)v29);
    v67 = *(char **)(a1 + 19832);
    v68 = *(_QWORD *)(a1 + 19840);
    if ((unint64_t)v67 >= v68)
    {
      v70 = (char *)*v534;
      v71 = (uint64_t)&v67[-*v534];
      v72 = v71 >> 3;
      v73 = (v71 >> 3) + 1;
      if (v73 >> 61)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v74 = v68 - (_QWORD)v70;
      if (v74 >> 2 > v73)
        v73 = v74 >> 2;
      if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8)
        v75 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v75 = v73;
      if (v75)
      {
        if (v75 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v76 = v75;
        v77 = operator new(8 * v75);
        v75 = v76;
        v78 = &v77[8 * v72];
        *v78 = v66;
        v69 = (uint64_t)(v78 + 1);
        if (v67 == v70)
          goto LABEL_102;
LABEL_96:
        v79 = v67 - 8 - v70;
        if (v79 < 0x58)
          goto LABEL_692;
        if ((unint64_t)(v67 - &v77[v71]) < 0x20)
          goto LABEL_692;
        v80 = (v79 >> 3) + 1;
        v81 = 8 * (v80 & 0x3FFFFFFFFFFFFFFCLL);
        v82 = &v67[-v81];
        v78 = (_QWORD *)((char *)v78 - v81);
        v83 = &v77[8 * v72 - 16];
        v84 = v67 - 16;
        v85 = v80 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v86 = *(_OWORD *)v84;
          *(v83 - 1) = *((_OWORD *)v84 - 1);
          *v83 = v86;
          v83 -= 2;
          v84 -= 32;
          v85 -= 4;
        }
        while (v85);
        v67 = v82;
        if (v80 != (v80 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_692:
          do
          {
            v87 = *((_QWORD *)v67 - 1);
            v67 -= 8;
            *--v78 = v87;
          }
          while (v67 != v70);
        }
      }
      else
      {
        v77 = 0;
        v78 = (_QWORD *)(8 * v72);
        *(_QWORD *)(8 * v72) = v66;
        v69 = 8 * v72 + 8;
        if (v67 != v70)
          goto LABEL_96;
      }
LABEL_102:
      *(_QWORD *)(a1 + 19824) = v78;
      *(_QWORD *)(a1 + 19832) = v69;
      *(_QWORD *)(a1 + 19840) = &v77[8 * v75];
      if (v70)
      {
        operator delete(v70);
        v65 = *(_QWORD *)(a1 + 20024);
      }
      goto LABEL_104;
    }
    *(_QWORD *)v67 = v66;
    v69 = (uint64_t)(v67 + 8);
LABEL_104:
    *(_QWORD *)(a1 + 19832) = v69;
    v88 = -*(_QWORD *)(*(_QWORD *)(v65 + 40) + 12 * (int)(v29 ^ 1));
    v89 = *(char **)(a1 + 19856);
    v90 = *(_QWORD *)(a1 + 19864);
    if ((unint64_t)v89 < v90)
    {
      *(_QWORD *)v89 = v88;
      v27 = v89 + 8;
LABEL_42:
      v28 = (uint64_t)v27;
      goto LABEL_43;
    }
    v91 = (char *)*v533;
    v92 = (uint64_t)&v89[-*v533];
    v93 = v92 >> 3;
    v94 = (v92 >> 3) + 1;
    if (v94 >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v95 = v90 - (_QWORD)v91;
    if (v95 >> 2 > v94)
      v94 = v95 >> 2;
    if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFF8)
      v96 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v96 = v94;
    if (v96)
    {
      if (v96 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v97 = operator new(8 * v96);
      v98 = &v97[8 * v93];
      *v98 = v88;
      v28 = (uint64_t)(v98 + 1);
      if (v89 == v91)
        goto LABEL_172;
LABEL_116:
      v99 = v89 - 8 - v91;
      if (v99 < 0x58)
        goto LABEL_693;
      if ((unint64_t)(v89 - &v97[v92]) < 0x20)
        goto LABEL_693;
      v100 = (v99 >> 3) + 1;
      v101 = 8 * (v100 & 0x3FFFFFFFFFFFFFFCLL);
      v102 = &v89[-v101];
      v98 = (_QWORD *)((char *)v98 - v101);
      v103 = &v97[8 * v93 - 16];
      v104 = v89 - 16;
      v105 = v100 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v106 = *(_OWORD *)v104;
        *(v103 - 1) = *((_OWORD *)v104 - 1);
        *v103 = v106;
        v103 -= 2;
        v104 -= 32;
        v105 -= 4;
      }
      while (v105);
      v89 = v102;
      if (v100 != (v100 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_693:
        do
        {
          v107 = *((_QWORD *)v89 - 1);
          v89 -= 8;
          *--v98 = v107;
        }
        while (v89 != v91);
      }
      goto LABEL_172;
    }
    v97 = 0;
    v98 = (_QWORD *)(8 * v93);
    *(_QWORD *)(8 * v93) = v88;
    v28 = 8 * v93 + 8;
    if (v89 != v91)
      goto LABEL_116;
LABEL_172:
    *(_QWORD *)(a1 + 19848) = v98;
    *(_QWORD *)(a1 + 19856) = v28;
    *(_QWORD *)(a1 + 19864) = &v97[8 * v96];
    if (v91)
      operator delete(v91);
LABEL_43:
    *(_QWORD *)(a1 + 19856) = v28;
    ++v25;
    v26 = v540;
  }
  v532 = v543 + 1840700270 * ((unint64_t)(v565 - (_BYTE *)v564) >> 3);
  *(_QWORD *)(a1 + 19880) = *(_QWORD *)(a1 + 19872);
  v530 = (void **)(a1 + 19896);
  *(_QWORD *)(a1 + 19904) = *(_QWORD *)(a1 + 19896);
  v155 = *a3;
  v541 = a3[1];
  if (*a3 != v541)
  {
    v528 = (void **)(a1 + 19728);
    v527 = (void **)(a1 + 19872);
    v526 = (void **)(a1 + 19752);
    while (1)
    {
      v158 = *(_DWORD *)v155;
      v159 = *(_QWORD *)(v155 + 4);
      if (operations_research::glop::RevisedSimplex::GetConstraintStatus(a1 + 840, *(_DWORD *)v155) == 1)
        goto LABEL_179;
      v160 = *(char **)(a1 + 19808);
      v161 = *(_QWORD *)(a1 + 19816);
      if ((unint64_t)v160 < v161)
      {
        *(_QWORD *)v160 = 0;
        v162 = (uint64_t)(v160 + 8);
        goto LABEL_202;
      }
      v163 = *v536;
      v164 = v160 - *v536;
      v165 = v164 >> 3;
      v166 = (v164 >> 3) + 1;
      if (v166 >> 61)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v167 = v161 - (_QWORD)v163;
      if (v167 >> 2 > v166)
        v166 = v167 >> 2;
      v168 = (unint64_t)v167 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v166;
      if (v168)
        break;
      v169 = 0;
      v170 = (_QWORD *)(8 * v165);
      *(_QWORD *)(8 * v165) = 0;
      v162 = 8 * v165 + 8;
      if (v160 != v163)
        goto LABEL_194;
LABEL_200:
      *(_QWORD *)(a1 + 19800) = v170;
      *(_QWORD *)(a1 + 19808) = v162;
      *(_QWORD *)(a1 + 19816) = &v169[8 * v168];
      if (v163)
        operator delete(v163);
LABEL_202:
      *(_QWORD *)(a1 + 19808) = v162;
      v180 = (((*(_QWORD *)(a1 + 19880) - *(_QWORD *)(a1 + 19872)) >> 1) & 0xFFFFFFFE) + v532;
      v181 = *(char **)(a1 + 19736);
      v182 = *(_QWORD *)(a1 + 19744);
      if ((unint64_t)v181 < v182)
      {
        *(_DWORD *)v181 = v180;
        v183 = (uint64_t)(v181 + 4);
        goto LABEL_224;
      }
      v184 = v158;
      v185 = v159;
      v186 = v155;
      v187 = (char *)*v528;
      v188 = v181 - (_BYTE *)*v528;
      v189 = v188 >> 2;
      v190 = (v188 >> 2) + 1;
      if (v190 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v191 = v182 - (_QWORD)v187;
      if (v191 >> 1 > v190)
        v190 = v191 >> 1;
      if ((unint64_t)v191 >= 0x7FFFFFFFFFFFFFFCLL)
        v192 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v192 = v190;
      if (v192)
      {
        if (v192 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v193 = v192;
        v194 = operator new(4 * v192);
        v192 = v193;
        v195 = &v194[4 * v189];
        *v195 = v180;
        v183 = (uint64_t)(v195 + 1);
        if (v181 == v187)
        {
LABEL_216:
          v155 = v186;
          v159 = v185;
          v158 = v184;
          goto LABEL_222;
        }
      }
      else
      {
        v194 = 0;
        v195 = (_DWORD *)(4 * v189);
        *(_DWORD *)(4 * v189) = v180;
        v183 = 4 * v189 + 4;
        if (v181 == v187)
          goto LABEL_216;
      }
      v196 = v181 - 4 - v187;
      if (v196 < 0x2C)
      {
        v155 = v186;
        v159 = v185;
        v158 = v184;
        do
        {
LABEL_221:
          v205 = *((_DWORD *)v181 - 1);
          v181 -= 4;
          *--v195 = v205;
        }
        while (v181 != v187);
        goto LABEL_222;
      }
      v197 = v181 - &v194[v188];
      v155 = v186;
      v159 = v185;
      v158 = v184;
      if (v197 < 0x20)
        goto LABEL_221;
      v198 = (v196 >> 2) + 1;
      v199 = 4 * (v198 & 0x7FFFFFFFFFFFFFF8);
      v200 = &v181[-v199];
      v195 = (_DWORD *)((char *)v195 - v199);
      v201 = &v194[4 * v189 - 16];
      v202 = v181 - 16;
      v203 = v198 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v204 = *(_OWORD *)v202;
        *(v201 - 1) = *((_OWORD *)v202 - 1);
        *v201 = v204;
        v201 -= 2;
        v202 -= 32;
        v203 -= 8;
      }
      while (v203);
      v181 = v200;
      if (v198 != (v198 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_221;
LABEL_222:
      *(_QWORD *)(a1 + 19728) = v195;
      *(_QWORD *)(a1 + 19736) = v183;
      *(_QWORD *)(a1 + 19744) = &v194[4 * v192];
      if (v187)
        operator delete(v187);
LABEL_224:
      *(_QWORD *)(a1 + 19736) = v183;
      v206 = *(int **)(a1 + 19880);
      v207 = *(_QWORD *)(a1 + 19888);
      if ((unint64_t)v206 < v207)
      {
        *v206 = v158;
        v208 = (uint64_t)(v206 + 1);
        goto LABEL_245;
      }
      v209 = (int *)*v527;
      v210 = (char *)v206 - (_BYTE *)*v527;
      v211 = v210 >> 2;
      v212 = (v210 >> 2) + 1;
      if (v212 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v213 = v207 - (_QWORD)v209;
      if (v213 >> 1 > v212)
        v212 = v213 >> 1;
      if ((unint64_t)v213 >= 0x7FFFFFFFFFFFFFFCLL)
        v214 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v214 = v212;
      if (v214)
      {
        if (v214 >> 62)
          goto LABEL_659;
        v215 = operator new(4 * v214);
        v216 = (int *)&v215[4 * v211];
        *v216 = v158;
        v208 = (uint64_t)(v216 + 1);
        if (v206 == v209)
          goto LABEL_243;
LABEL_237:
        v217 = (char *)(v206 - 1) - (char *)v209;
        if (v217 < 0x2C)
          goto LABEL_694;
        if ((unint64_t)((char *)v206 - &v215[v210]) < 0x20)
          goto LABEL_694;
        v218 = (v217 >> 2) + 1;
        v219 = 4 * (v218 & 0x7FFFFFFFFFFFFFF8);
        v220 = &v206[v219 / 0xFFFFFFFFFFFFFFFCLL];
        v216 = (int *)((char *)v216 - v219);
        v221 = &v215[4 * v211 - 16];
        v222 = v206 - 4;
        v223 = v218 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v224 = *(_OWORD *)v222;
          *(v221 - 1) = *((_OWORD *)v222 - 1);
          *v221 = v224;
          v221 -= 2;
          v222 -= 8;
          v223 -= 8;
        }
        while (v223);
        v206 = v220;
        if (v218 != (v218 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_694:
          do
          {
            v225 = *--v206;
            *--v216 = v225;
          }
          while (v206 != v209);
        }
        goto LABEL_243;
      }
      v215 = 0;
      v216 = (int *)(4 * v211);
      *(_DWORD *)(4 * v211) = v158;
      v208 = 4 * v211 + 4;
      if (v206 != v209)
        goto LABEL_237;
LABEL_243:
      *(_QWORD *)(a1 + 19872) = v216;
      *(_QWORD *)(a1 + 19880) = v208;
      *(_QWORD *)(a1 + 19888) = &v215[4 * v214];
      if (v209)
        operator delete(v209);
LABEL_245:
      *(_QWORD *)(a1 + 19880) = v208;
      v226 = *(uint64_t **)(a1 + 19760);
      v227 = *(_QWORD *)(a1 + 19768);
      v228 = __OFSUB__(v226, v227);
      if ((unint64_t)v226 < v227)
      {
        *v226 = v159;
        v229 = (uint64_t)(v226 + 1);
        goto LABEL_266;
      }
      v230 = (uint64_t *)*v526;
      v231 = (char *)v226 - (_BYTE *)*v526;
      v232 = v231 >> 3;
      v233 = (v231 >> 3) + 1;
      if (v233 >> 61)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v234 = v227 - (_QWORD)v230;
      if (v234 >> 2 > v233)
        v233 = v234 >> 2;
      if ((unint64_t)v234 >= 0x7FFFFFFFFFFFFFF8)
        v235 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v235 = v233;
      if (v235)
      {
        if (v235 >> 61)
LABEL_659:
          std::__throw_bad_array_new_length[abi:ne180100]();
        v236 = operator new(8 * v235);
        v237 = (uint64_t *)&v236[8 * v232];
        *v237 = v159;
        v229 = (uint64_t)(v237 + 1);
        v228 = __OFSUB__(v226, v230);
        if (v226 == v230)
          goto LABEL_264;
LABEL_258:
        v238 = (char *)(v226 - 1) - (char *)v230;
        if (v238 < 0x58)
          goto LABEL_695;
        if ((unint64_t)((char *)v226 - &v236[v231]) < 0x20)
          goto LABEL_695;
        v239 = (v238 >> 3) + 1;
        v240 = v239 & 0x3FFFFFFFFFFFFFFCLL;
        v241 = 8 * (v239 & 0x3FFFFFFFFFFFFFFCLL);
        v242 = &v226[v241 / 0xFFFFFFFFFFFFFFF8];
        v237 = (uint64_t *)((char *)v237 - v241);
        v243 = &v236[8 * v232 - 16];
        v244 = v226 - 2;
        v245 = v239 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v246 = *(_OWORD *)v244;
          *(v243 - 1) = *((_OWORD *)v244 - 1);
          *v243 = v246;
          v243 -= 2;
          v244 -= 4;
          v245 -= 4;
        }
        while (v245);
        v226 = v242;
        v228 = __OFSUB__(v239, v240);
        if (v239 != v240)
        {
LABEL_695:
          do
          {
            v247 = *--v226;
            *--v237 = v247;
            v228 = __OFSUB__(v226, v230);
          }
          while (v226 != v230);
        }
        goto LABEL_264;
      }
      v236 = 0;
      v237 = (uint64_t *)(8 * v232);
      *(_QWORD *)(8 * v232) = v159;
      v229 = 8 * v232 + 8;
      v228 = __OFSUB__(v226, v230);
      if (v226 != v230)
        goto LABEL_258;
LABEL_264:
      *(_QWORD *)(a1 + 19752) = v237;
      *(_QWORD *)(a1 + 19760) = v229;
      *(_QWORD *)(a1 + 19768) = &v236[8 * v235];
      if (v230)
        operator delete(v230);
LABEL_266:
      *(_QWORD *)(a1 + 19760) = v229;
      v248 = (uint64_t *)(*(_QWORD *)(a1 + 312) + 40 * v158);
      v249 = v248[1];
      v250 = *v248;
      if (((((v249 - *v248) ^ v249) & (*v248 ^ v249) & 0x8000000000000000) != 0) != v228)
        v251 = (v249 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
      else
        v251 = v249 - *v248;
      v252 = *(char **)(a1 + 19904);
      v253 = *(_QWORD *)(a1 + 19912);
      if (v159 >= 1)
      {
        if ((unint64_t)v252 < v253)
        {
          *(_QWORD *)v252 = v249;
          v254 = (uint64_t)(v252 + 8);
          goto LABEL_303;
        }
        v256 = (char *)*v530;
        v257 = v252 - (_BYTE *)*v530;
        v258 = v257 >> 3;
        v259 = (v257 >> 3) + 1;
        if (v259 >> 61)
          goto LABEL_675;
        v260 = v253 - (_QWORD)v256;
        if (v260 >> 2 > v259)
          v259 = v260 >> 2;
        if ((unint64_t)v260 >= 0x7FFFFFFFFFFFFFF8)
          v261 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v261 = v259;
        if (v261)
        {
          if (v261 >> 61)
            goto LABEL_661;
          v262 = operator new(8 * v261);
          v263 = &v262[8 * v258];
          *v263 = v248[1];
          v254 = (uint64_t)(v263 + 1);
          if (v252 == v256)
            goto LABEL_301;
LABEL_295:
          v272 = v252 - 8 - v256;
          if (v272 < 0x58)
            goto LABEL_696;
          if ((unint64_t)(v252 - &v262[v257]) < 0x20)
            goto LABEL_696;
          v273 = (v272 >> 3) + 1;
          v274 = 8 * (v273 & 0x3FFFFFFFFFFFFFFCLL);
          v275 = &v252[-v274];
          v263 = (_QWORD *)((char *)v263 - v274);
          v276 = &v262[8 * v258 - 16];
          v277 = v252 - 16;
          v278 = v273 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v279 = *(_OWORD *)v277;
            *(v276 - 1) = *((_OWORD *)v277 - 1);
            *v276 = v279;
            v276 -= 2;
            v277 -= 32;
            v278 -= 4;
          }
          while (v278);
          v252 = v275;
          if (v273 != (v273 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_696:
            do
            {
              v280 = *((_QWORD *)v252 - 1);
              v252 -= 8;
              *--v263 = v280;
            }
            while (v252 != v256);
          }
        }
        else
        {
          v262 = 0;
          v263 = (_QWORD *)(8 * v258);
          *(_QWORD *)(8 * v258) = v249;
          v254 = 8 * v258 + 8;
          if (v252 != v256)
            goto LABEL_295;
        }
LABEL_301:
        *(_QWORD *)(a1 + 19896) = v263;
        *(_QWORD *)(a1 + 19904) = v254;
        *(_QWORD *)(a1 + 19912) = &v262[8 * v261];
        if (v256)
          operator delete(v256);
LABEL_303:
        *(_QWORD *)(a1 + 19904) = v254;
        v281 = *(char **)(a1 + 19832);
        v282 = *(_QWORD *)(a1 + 19840);
        if ((unint64_t)v281 < v282)
        {
          *(_QWORD *)v281 = 0;
          v283 = (uint64_t)(v281 + 8);
LABEL_324:
          *(_QWORD *)(a1 + 19832) = v283;
          v301 = *(uint64_t **)(a1 + 19856);
          v302 = *(_QWORD *)(a1 + 19864);
          if ((unint64_t)v301 >= v302)
          {
            v303 = (char *)*v533;
            v304 = (uint64_t)v301 - *v533;
            v305 = v304 >> 3;
            v306 = (v304 >> 3) + 1;
            if (v306 >> 61)
LABEL_675:
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v307 = v302 - (_QWORD)v303;
            if (v307 >> 2 > v306)
              v306 = v307 >> 2;
            if ((unint64_t)v307 >= 0x7FFFFFFFFFFFFFF8)
              v308 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v308 = v306;
            if (v308)
            {
              if (v308 >> 61)
LABEL_661:
                std::__throw_bad_array_new_length[abi:ne180100]();
              v309 = operator new(8 * v308);
              v310 = (uint64_t *)&v309[8 * v305];
              *v310 = v251;
              v157 = (uint64_t)(v310 + 1);
              if (v301 == (uint64_t *)v303)
                goto LABEL_393;
            }
            else
            {
              v309 = 0;
              v310 = (uint64_t *)(8 * v305);
              *(_QWORD *)(8 * v305) = v251;
              v157 = 8 * v305 + 8;
              if (v301 == (uint64_t *)v303)
                goto LABEL_393;
            }
            v311 = (char *)(v301 - 1) - v303;
            if (v311 < 0x58)
              goto LABEL_697;
            if ((unint64_t)((char *)v301 - &v309[v304]) < 0x20)
              goto LABEL_697;
            v312 = (v311 >> 3) + 1;
            v313 = 8 * (v312 & 0x3FFFFFFFFFFFFFFCLL);
            v314 = &v301[v313 / 0xFFFFFFFFFFFFFFF8];
            v310 = (uint64_t *)((char *)v310 - v313);
            v315 = &v309[8 * v305 - 16];
            v316 = v301 - 2;
            v317 = v312 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v318 = *(_OWORD *)v316;
              *(v315 - 1) = *((_OWORD *)v316 - 1);
              *v315 = v318;
              v315 -= 2;
              v316 -= 4;
              v317 -= 4;
            }
            while (v317);
            v301 = v314;
            if (v312 != (v312 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_697:
              do
              {
                v319 = *--v301;
                *--v310 = v319;
              }
              while (v301 != (uint64_t *)v303);
            }
            goto LABEL_393;
          }
          *v301 = v251;
          v156 = v301 + 1;
          goto LABEL_177;
        }
        v284 = (char *)*v534;
        v285 = (uint64_t)&v281[-*v534];
        v286 = v285 >> 3;
        v287 = (v285 >> 3) + 1;
        if (v287 >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v288 = v282 - (_QWORD)v284;
        if (v288 >> 2 > v287)
          v287 = v288 >> 2;
        if ((unint64_t)v288 >= 0x7FFFFFFFFFFFFFF8)
          v289 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v289 = v287;
        if (v289)
        {
          if (v289 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v290 = operator new(8 * v289);
          v291 = &v290[8 * v286];
          *v291 = 0;
          v283 = (uint64_t)(v291 + 1);
          if (v281 == v284)
            goto LABEL_322;
LABEL_316:
          v292 = v281 - 8 - v284;
          if (v292 < 0x58)
            goto LABEL_698;
          if ((unint64_t)(v281 - &v290[v285]) < 0x20)
            goto LABEL_698;
          v293 = (v292 >> 3) + 1;
          v294 = 8 * (v293 & 0x3FFFFFFFFFFFFFFCLL);
          v295 = &v281[-v294];
          v291 = (_QWORD *)((char *)v291 - v294);
          v296 = &v290[8 * v286 - 16];
          v297 = v281 - 16;
          v298 = v293 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v299 = *(_OWORD *)v297;
            *(v296 - 1) = *((_OWORD *)v297 - 1);
            *v296 = v299;
            v296 -= 2;
            v297 -= 32;
            v298 -= 4;
          }
          while (v298);
          v281 = v295;
          if (v293 != (v293 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_698:
            do
            {
              v300 = *((_QWORD *)v281 - 1);
              v281 -= 8;
              *--v291 = v300;
            }
            while (v281 != v284);
          }
        }
        else
        {
          v290 = 0;
          v291 = (_QWORD *)(8 * v286);
          *(_QWORD *)(8 * v286) = 0;
          v283 = 8 * v286 + 8;
          if (v281 != v284)
            goto LABEL_316;
        }
LABEL_322:
        *(_QWORD *)(a1 + 19824) = v291;
        *(_QWORD *)(a1 + 19832) = v283;
        *(_QWORD *)(a1 + 19840) = &v290[8 * v289];
        if (v284)
          operator delete(v284);
        goto LABEL_324;
      }
      if ((unint64_t)v252 < v253)
      {
        *(_QWORD *)v252 = v250;
        v255 = (uint64_t)(v252 + 8);
        goto LABEL_352;
      }
      v264 = (char *)*v530;
      v265 = v252 - (_BYTE *)*v530;
      v266 = v265 >> 3;
      v267 = (v265 >> 3) + 1;
      if (v267 >> 61)
        goto LABEL_675;
      v268 = v253 - (_QWORD)v264;
      if (v268 >> 2 > v267)
        v267 = v268 >> 2;
      if ((unint64_t)v268 >= 0x7FFFFFFFFFFFFFF8)
        v269 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v269 = v267;
      if (v269)
      {
        if (v269 >> 61)
          goto LABEL_661;
        v270 = operator new(8 * v269);
        v271 = (uint64_t *)&v270[8 * v266];
        *v271 = *v248;
        v255 = (uint64_t)(v271 + 1);
        if (v252 == v264)
          goto LABEL_350;
LABEL_344:
        v320 = v252 - 8 - v264;
        if (v320 < 0x58)
          goto LABEL_699;
        if ((unint64_t)(v252 - &v270[v265]) < 0x20)
          goto LABEL_699;
        v321 = (v320 >> 3) + 1;
        v322 = 8 * (v321 & 0x3FFFFFFFFFFFFFFCLL);
        v323 = &v252[-v322];
        v271 = (uint64_t *)((char *)v271 - v322);
        v324 = &v270[8 * v266 - 16];
        v325 = v252 - 16;
        v326 = v321 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v327 = *(_OWORD *)v325;
          *(v324 - 1) = *((_OWORD *)v325 - 1);
          *v324 = v327;
          v324 -= 2;
          v325 -= 32;
          v326 -= 4;
        }
        while (v326);
        v252 = v323;
        if (v321 != (v321 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_699:
          do
          {
            v328 = *((_QWORD *)v252 - 1);
            v252 -= 8;
            *--v271 = v328;
          }
          while (v252 != v264);
        }
        goto LABEL_350;
      }
      v270 = 0;
      v271 = (uint64_t *)(8 * v266);
      *(_QWORD *)(8 * v266) = v250;
      v255 = 8 * v266 + 8;
      if (v252 != v264)
        goto LABEL_344;
LABEL_350:
      *(_QWORD *)(a1 + 19896) = v271;
      *(_QWORD *)(a1 + 19904) = v255;
      *(_QWORD *)(a1 + 19912) = &v270[8 * v269];
      if (v264)
        operator delete(v264);
LABEL_352:
      *(_QWORD *)(a1 + 19904) = v255;
      v329 = -v251;
      v330 = *(char **)(a1 + 19832);
      v331 = *(_QWORD *)(a1 + 19840);
      if ((unint64_t)v330 >= v331)
      {
        v333 = v155;
        v334 = (char *)*v534;
        v335 = (uint64_t)&v330[-*v534];
        v336 = v335 >> 3;
        v337 = (v335 >> 3) + 1;
        if (v337 >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v338 = v331 - (_QWORD)v334;
        if (v338 >> 2 > v337)
          v337 = v338 >> 2;
        if ((unint64_t)v338 >= 0x7FFFFFFFFFFFFFF8)
          v339 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v339 = v337;
        if (v339)
        {
          if (v339 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v340 = operator new(8 * v339);
          v341 = (uint64_t *)&v340[8 * v336];
          *v341 = v329;
          v332 = (uint64_t)(v341 + 1);
          if (v330 != v334)
          {
LABEL_363:
            v342 = v330 - 8 - v334;
            if (v342 < 0x58)
            {
              v155 = v333;
              goto LABEL_371;
            }
            v343 = v330 - &v340[v335];
            v155 = v333;
            if (v343 < 0x20)
              goto LABEL_700;
            v344 = (v342 >> 3) + 1;
            v345 = 8 * (v344 & 0x3FFFFFFFFFFFFFFCLL);
            v346 = &v330[-v345];
            v341 = (uint64_t *)((char *)v341 - v345);
            v347 = &v340[8 * v336 - 16];
            v348 = v330 - 16;
            v349 = v344 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v350 = *(_OWORD *)v348;
              *(v347 - 1) = *((_OWORD *)v348 - 1);
              *v347 = v350;
              v347 -= 2;
              v348 -= 32;
              v349 -= 4;
            }
            while (v349);
            v330 = v346;
            if (v344 != (v344 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_700:
              do
              {
LABEL_371:
                v351 = *((_QWORD *)v330 - 1);
                v330 -= 8;
                *--v341 = v351;
              }
              while (v330 != v334);
            }
LABEL_372:
            *(_QWORD *)(a1 + 19824) = v341;
            *(_QWORD *)(a1 + 19832) = v332;
            *(_QWORD *)(a1 + 19840) = &v340[8 * v339];
            if (v334)
              operator delete(v334);
            goto LABEL_374;
          }
        }
        else
        {
          v340 = 0;
          v341 = (uint64_t *)(8 * v336);
          *(_QWORD *)(8 * v336) = v329;
          v332 = 8 * v336 + 8;
          if (v330 != v334)
            goto LABEL_363;
        }
        v155 = v333;
        goto LABEL_372;
      }
      *(_QWORD *)v330 = v329;
      v332 = (uint64_t)(v330 + 8);
LABEL_374:
      *(_QWORD *)(a1 + 19832) = v332;
      v352 = *(char **)(a1 + 19856);
      v353 = *(_QWORD *)(a1 + 19864);
      if ((unint64_t)v352 >= v353)
      {
        v303 = (char *)*v533;
        v354 = (uint64_t)&v352[-*v533];
        v355 = v354 >> 3;
        v356 = (v354 >> 3) + 1;
        if (v356 >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v357 = v353 - (_QWORD)v303;
        if (v357 >> 2 > v356)
          v356 = v357 >> 2;
        if ((unint64_t)v357 >= 0x7FFFFFFFFFFFFFF8)
          v308 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v308 = v356;
        if (v308)
        {
          if (v308 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v309 = operator new(8 * v308);
          v310 = (uint64_t *)&v309[8 * v355];
          *v310 = 0;
          v157 = (uint64_t)(v310 + 1);
          if (v352 == v303)
            goto LABEL_393;
LABEL_387:
          v358 = v352 - 8 - v303;
          if (v358 < 0x58)
            goto LABEL_701;
          if ((unint64_t)(v352 - &v309[v354]) < 0x20)
            goto LABEL_701;
          v359 = (v358 >> 3) + 1;
          v360 = 8 * (v359 & 0x3FFFFFFFFFFFFFFCLL);
          v361 = &v352[-v360];
          v310 = (uint64_t *)((char *)v310 - v360);
          v362 = &v309[8 * v355 - 16];
          v363 = v352 - 16;
          v364 = v359 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v365 = *(_OWORD *)v363;
            *(v362 - 1) = *((_OWORD *)v363 - 1);
            *v362 = v365;
            v362 -= 2;
            v363 -= 32;
            v364 -= 4;
          }
          while (v364);
          v352 = v361;
          if (v359 != (v359 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_701:
            do
            {
              v366 = *((_QWORD *)v352 - 1);
              v352 -= 8;
              *--v310 = v366;
            }
            while (v352 != v303);
          }
        }
        else
        {
          v309 = 0;
          v310 = (uint64_t *)(8 * v355);
          *(_QWORD *)(8 * v355) = 0;
          v157 = 8 * v355 + 8;
          if (v352 != v303)
            goto LABEL_387;
        }
LABEL_393:
        *(_QWORD *)(a1 + 19848) = v310;
        *(_QWORD *)(a1 + 19856) = v157;
        *(_QWORD *)(a1 + 19864) = &v309[8 * v308];
        if (v303)
          operator delete(v303);
        goto LABEL_178;
      }
      *(_QWORD *)v352 = 0;
      v156 = v352 + 8;
LABEL_177:
      v157 = (uint64_t)v156;
LABEL_178:
      *(_QWORD *)(a1 + 19856) = v157;
LABEL_179:
      v155 += 12;
      if (v155 == v541)
        goto LABEL_395;
    }
    if (v168 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v169 = operator new(8 * v168);
    v170 = &v169[8 * v165];
    *v170 = 0;
    v162 = (uint64_t)(v170 + 1);
    if (v160 == v163)
      goto LABEL_200;
LABEL_194:
    v171 = v160 - 8 - v163;
    if (v171 < 0x58)
      goto LABEL_702;
    if ((unint64_t)(v160 - &v169[v164]) < 0x20)
      goto LABEL_702;
    v172 = (v171 >> 3) + 1;
    v173 = 8 * (v172 & 0x3FFFFFFFFFFFFFFCLL);
    v174 = &v160[-v173];
    v170 = (_QWORD *)((char *)v170 - v173);
    v175 = &v169[8 * v165 - 16];
    v176 = v160 - 16;
    v177 = v172 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v178 = *(_OWORD *)v176;
      *(v175 - 1) = *((_OWORD *)v176 - 1);
      *v175 = v178;
      v175 -= 2;
      v176 -= 32;
      v177 -= 4;
    }
    while (v177);
    v160 = v174;
    if (v172 != (v172 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_702:
      do
      {
        v179 = *((_QWORD *)v160 - 1);
        v160 -= 8;
        *--v170 = v179;
      }
      while (v160 != v163);
    }
    goto LABEL_200;
  }
LABEL_395:
  operations_research::sat::IntegerRoundingCutHelper::ComputeCut((int **)(a1 + 19440), *(int *)(*(_QWORD *)(a1 + 20000) + 448), v536, v534, v533, (_QWORD *)(a1 + 20064), v525);
  v367 = *(_QWORD *)(a1 + 19736);
  v368 = *(_QWORD *)(a1 + 19728);
  v369 = v367 - v368;
  if (v367 == v368)
  {
    v372 = 0.0;
  }
  else
  {
    v370 = 0;
    v371 = v369 >> 2;
    if (v371 <= 1)
      v371 = 1;
    v372 = 0.0;
    do
    {
      v373 = *(int *)(v368 + 4 * v370);
      if ((int)v373 < (int)v543)
      {
        v374 = *(_QWORD *)(*(_QWORD *)(a1 + 19752) + 8 * v370);
        v375 = (double)v374;
        if (v374 < (uint64_t)0x8000000000000003)
          v375 = -INFINITY;
        if (v374 > 0x7FFFFFFFFFFFFFFDLL)
          v375 = INFINITY;
        v372 = v372 + v375 * *(double *)(**(_QWORD **)(a1 + 20408) + 8 * v373);
      }
      ++v370;
    }
    while (v371 != v370);
  }
  v376 = *(_QWORD *)(a1 + 19720);
  v377 = (double)v376;
  if (v376 < (uint64_t)0x8000000000000003)
    v377 = -INFINITY;
  if (v376 > 0x7FFFFFFFFFFFFFFDLL)
    v377 = INFINITY;
  v378 = v372 - v377;
  if (v372 - v377 < 0.0001)
  {
    if (*off_254079628[0] < 3
      || off_254079628[0] == &google::kLogSiteUninitialized
      && !google::InitVLOG3__((google *)off_254079628, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)3))
    {
      goto LABEL_628;
    }
    v379 = google::LogMessage::LogMessage((google::LogMessage *)&v577, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 722);
    v380 = (_QWORD *)google::LogMessage::stream(v379);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v380, (uint64_t)"Bad cut ", 8);
    v381 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v381, (uint64_t)" <= ", 4);
    std::ostream::operator<<();
LABEL_627:
    google::LogMessage::~LogMessage((google::LogMessage *)&v577);
LABEL_628:
    v15 = 0;
    goto LABEL_629;
  }
  v382 = (uint64_t)(*(_QWORD *)(a1 + 19928) - *(_QWORD *)(a1 + 19920)) >> 2;
  v577 = 0;
  std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::assign((uint64_t)v531, v382, (uint64_t *)&v577);
  v383 = *(_QWORD *)(a1 + 19720);
  v384 = *(_QWORD *)(a1 + 19728);
  if (*(_QWORD *)(a1 + 19736) == v384)
    goto LABEL_592;
  v385 = 0;
  v386 = 0;
  v387 = 0;
  v388 = (uint64_t *)(a1 + 19944);
  while (2)
  {
    v389 = *(_DWORD *)(v384 + 4 * v385);
    v390 = v389 - v543;
    if (v389 < (int)v543)
    {
      LODWORD(v577) = v389 & 0xFFFFFFFE;
      v391 = (int *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>>(v388, (int *)&v577);
      v392 = *(_QWORD *)(*(_QWORD *)(a1 + 19752) + 8 * v385);
      if ((v389 & 1) != 0)
        v392 = -v392;
      *(_QWORD *)(*(_QWORD *)(a1 + 19776) + 8 * *v391) += v392;
      goto LABEL_419;
    }
    v393 = v389 - v532;
    if (v389 >= v532)
    {
      if (v393 >= 0)
        v436 = v389 - v532;
      else
        v436 = v393 + 1;
      v437 = *(_QWORD *)(*(_QWORD *)(a1 + 19752) + 8 * v385);
      v438 = -v437;
      v439 = *(_QWORD *)(a1 + 312) + 40 * *(int *)(*(_QWORD *)(a1 + 19872) + 4 * (v436 >> 1));
      v440 = *(int **)(v439 + 16);
      v441 = *(int **)(v439 + 24);
      if (v440 != v441)
      {
        if (v437 >= 0)
          v442 = *(_QWORD *)(*(_QWORD *)(a1 + 19752) + 8 * v385);
        else
          v442 = -v437;
        v443 = 63 - __clz(v442);
        v444 = *v531;
        if (v437)
          v445 = v443;
        else
          v445 = 0;
        if (v437)
        {
          while (1)
          {
            v446 = *(_QWORD *)(v440 + 1);
            if (v446 >= 0)
              v447 = *(_QWORD *)(v440 + 1);
            else
              v447 = -v446;
            v448 = 63 - __clz(v447);
            v449 = *v440;
            if (!v446)
              v448 = 0;
            v450 = v448 + v445;
            v451 = __OFSUB__(v450, 61);
            if (v450 > 61)
            {
              if (v446)
              {
                v446 = ((v446 ^ (unint64_t)v438) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
                v452 = v447 * v442;
                if (v450 > 0x3E || v452 >= v446)
                {
                  v451 = __OFSUB__(v446 - 0x7FFFFFFFFFFFFFFFLL, 2);
                  if ((unint64_t)(v446 - 0x7FFFFFFFFFFFFFFFLL) < 2)
                    goto LABEL_623;
                }
                else
                {
                  if (v446 >= 0)
                    v446 = v452;
                  else
                    v446 = -(uint64_t)v452;
                  v451 = __OFSUB__(v446 - 0x7FFFFFFFFFFFFFFFLL, 2);
                  if ((unint64_t)(v446 - 0x7FFFFFFFFFFFFFFFLL) < 2)
                    goto LABEL_623;
                }
              }
            }
            else
            {
              v446 *= v438;
              v451 = __OFSUB__(v446 - 0x7FFFFFFFFFFFFFFFLL, 2);
              if ((unint64_t)(v446 - 0x7FFFFFFFFFFFFFFFLL) < 2)
                goto LABEL_623;
            }
            v454 = *(_QWORD *)(v444 + 8 * v449);
            v455 = v454 + v446;
            v456 = (v454 + v446) ^ v446;
            v457 = (v454 + v446) ^ v454;
            v458 = ((unint64_t)v446 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
            if ((v456 & v457) < 0 == v451)
              v458 = v455;
            if ((unint64_t)(v458 + 0x7FFFFFFFFFFFFFFFLL) > 0xFFFFFFFFFFFFFFFDLL)
              break;
            *(_QWORD *)(v444 + 8 * v449) = v458;
            v440 += 3;
            if (v440 == v441)
              goto LABEL_529;
          }
        }
        else
        {
          while ((unint64_t)(*(_QWORD *)(v444 + 8 * *v440) + 0x7FFFFFFFFFFFFFFFLL) <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v440 += 3;
            if (v440 == v441)
              goto LABEL_529;
          }
        }
        goto LABEL_623;
      }
      if (v437 >= 0)
        v442 = *(_QWORD *)(*(_QWORD *)(a1 + 19752) + 8 * v385);
      else
        v442 = -v437;
      v443 = 63 - __clz(v442);
LABEL_529:
      v459 = (uint64_t)v436 >> 1;
      v460 = *((_QWORD *)*v530 + v459);
      if (v460 >= 0)
        v461 = *((_QWORD *)*v530 + v459);
      else
        v461 = -v460;
      v462 = 63 - __clz(v461);
      if (!v460)
        v462 = 0;
      if (!v437)
        v443 = 0;
      v463 = v462 + v443;
      v464 = __OFSUB__(v463, 61);
      if (v463 > 61)
      {
        v465 = 0;
        if (!v437 || !v460)
          goto LABEL_549;
        v465 = ((v460 ^ (unint64_t)v438) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
        v466 = v461 * v442;
        if (v463 <= 0x3E && v466 < v465)
        {
          if (v465 >= 0)
            v465 = v461 * v442;
          else
            v465 = -(uint64_t)v466;
        }
      }
      else
      {
        v465 = v460 * v438;
      }
      v464 = __OFSUB__(v465 - 0x7FFFFFFFFFFFFFFFLL, 2);
      if ((unint64_t)(v465 - 0x7FFFFFFFFFFFFFFFLL) < 2)
      {
LABEL_623:
        if (*off_254079630[0] < 1
          || off_254079630[0] == &google::kLogSiteUninitialized
          && !google::InitVLOG3__((google *)off_254079630, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)1))
        {
          goto LABEL_628;
        }
        v504 = google::LogMessage::LogMessage((google::LogMessage *)&v577, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 792);
        v505 = (_QWORD *)google::LogMessage::stream(v504);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v505, (uint64_t)"Overflow in slack removal.", 26);
        goto LABEL_627;
      }
LABEL_549:
      v468 = v465 + v383;
      v469 = (v465 + v383) ^ v465;
      v470 = (v465 + v383) ^ v383;
      v471 = ((unint64_t)v465 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
      if ((v469 & v470) < 0 != v464)
        v383 = v471;
      else
        v383 = v468;
      if ((unint64_t)(v383 + 0x7FFFFFFFFFFFFFFFLL) < 0xFFFFFFFFFFFFFFFELL)
      {
        ++v386;
        goto LABEL_419;
      }
      goto LABEL_623;
    }
    v542 = *(_QWORD *)(*(_QWORD *)(a1 + 19752) + 8 * v385);
    if (v390 >= 0)
      v394 = v389 - v543;
    else
      v394 = v390 + 1;
    LODWORD(v574[0]) = v394 >> 1;
    v395 = (char *)v564;
    v577 = 0x6DB6DB6DB6DB6DB7 * ((v565 - (_BYTE *)v564) >> 3);
    v396 = (uint64_t)v394 >> 1;
    if (v577 <= v396)
    {
      v575[0] = (uint64_t *)google::MakeCheckOpString<int,unsigned long>((int)v574, (int)&v577, "index < ib_slack_infos.size()");
      if (v575[0])
      {
        v522 = google::LogMessageFatal::LogMessageFatal(&v577, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 751, v575);
        google::LogMessage::stream((google::LogMessage *)v522);
LABEL_653:
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v577);
      }
      v395 = (char *)v564;
    }
    v577 = 0;
    v578 = 0;
    v579 = 0;
    v539 = v396;
    v397 = &v395[56 * (int)v396];
    v399 = *(_QWORD *)v397;
    v398 = *((_QWORD *)v397 + 1);
    if (*(_QWORD *)v397 == v398)
    {
      v414 = 0;
LABEL_555:
      v416 = v539;
      v415 = v542;
      if (v542 >= 0)
        v417 = v542;
      else
        v417 = -v542;
      v418 = 63 - __clz(v417);
LABEL_563:
      v473 = (char *)v564 + 56 * v416;
      v474 = *((_QWORD *)v473 + 3);
      if (v474 >= 0)
        v475 = *((_QWORD *)v473 + 3);
      else
        v475 = -v474;
      v476 = 63 - __clz(v475);
      if (v474)
        v477 = v476;
      else
        v477 = 0;
      v478 = -v474;
      if (!v415)
        v418 = 0;
      v479 = v477 + v418;
      v480 = __OFSUB__(v479, 61);
      if (v479 > 61)
      {
        v481 = 0;
        if (!v415 || !v474)
          goto LABEL_583;
        v481 = ((v415 ^ (unint64_t)v478) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
        v482 = v475 * v417;
        if (v479 <= 0x3E && v482 < v481)
        {
          if (v481 >= 0)
            v481 = v482;
          else
            v481 = -(uint64_t)v482;
        }
      }
      else
      {
        v481 = v415 * v478;
      }
      v480 = __OFSUB__(v481 - 0x7FFFFFFFFFFFFFFFLL, 2);
      if ((unint64_t)(v481 - 0x7FFFFFFFFFFFFFFFLL) < 2)
      {
LABEL_587:
        v435 = 0;
        v387 = 1;
        goto LABEL_588;
      }
LABEL_583:
      v484 = v481 + v383;
      v485 = (v481 + v383) ^ v481;
      v486 = (v481 + v383) ^ v383;
      v487 = ((unint64_t)v481 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
      if ((v485 & v486) < 0 != v480)
        v484 = v487;
      if ((unint64_t)(v484 + 0x7FFFFFFFFFFFFFFFLL) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v435 = 1;
        v383 = v484;
        goto LABEL_588;
      }
      goto LABEL_587;
    }
    v529 = v387;
    v535 = v386;
    v537 = v383;
    v400 = 0;
    do
    {
      while (1)
      {
        LODWORD(v575[0]) = *(_DWORD *)v399 & 0xFFFFFFFE;
        v401 = (int *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>>(v388, (int *)v575);
        v402 = (*(_BYTE *)v399 & 1) != 0 ? -*(_QWORD *)(v399 + 4) : *(_QWORD *)(v399 + 4);
        v403 = *v401;
        if (v400 >= (int *)v579)
          break;
        *v400 = v403;
        *(_QWORD *)(v400 + 1) = v402;
        v400 += 3;
        v578 = (uint64_t)v400;
        v399 += 12;
        if (v399 == v398)
          goto LABEL_453;
      }
      v404 = v388;
      v405 = v577;
      v406 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v400 - v577) >> 2) + 1;
      if (v406 > 0x1555555555555555)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((uint64_t)&v579[-v577] >> 2) > v406)
        v406 = 0x5555555555555556 * ((uint64_t)&v579[-v577] >> 2);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v579[-v577] >> 2) >= 0xAAAAAAAAAAAAAAALL)
        v407 = 0x1555555555555555;
      else
        v407 = v406;
      if (v407)
      {
        if (v407 > 0x1555555555555555)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v408 = (char *)operator new(12 * v407);
        v409 = (uint64_t)&v408[4 * ((uint64_t)((uint64_t)v400 - v405) >> 2)];
        *(_DWORD *)v409 = v403;
        *(_QWORD *)(v409 + 4) = v402;
        if (v400 == (int *)v405)
        {
LABEL_449:
          v413 = v400;
          v410 = v409;
          goto LABEL_450;
        }
      }
      else
      {
        v408 = 0;
        v409 = 4 * ((uint64_t)((uint64_t)v400 - v577) >> 2);
        *(_DWORD *)v409 = v403;
        *(_QWORD *)(v409 + 4) = v402;
        if (v400 == (int *)v405)
          goto LABEL_449;
      }
      v410 = v409;
      do
      {
        v411 = *(_QWORD *)(v400 - 3);
        v400 -= 3;
        v412 = v400[2];
        *(_QWORD *)(v410 - 12) = v411;
        v410 -= 12;
        *(_DWORD *)(v410 + 8) = v412;
      }
      while (v400 != (int *)v405);
      v413 = (void *)v577;
LABEL_450:
      v400 = (int *)(v409 + 12);
      v577 = v410;
      v578 = v409 + 12;
      v579 = &v408[12 * v407];
      v388 = v404;
      if (v413)
        operator delete(v413);
      v578 = (uint64_t)v400;
      v399 += 12;
    }
    while (v399 != v398);
LABEL_453:
    v414 = (void *)v577;
    if ((int *)v577 == v400)
    {
      v383 = v537;
      v386 = v535;
      v387 = v529;
      goto LABEL_555;
    }
    v416 = v539;
    v415 = v542;
    if (v542 >= 0)
      v417 = v542;
    else
      v417 = -v542;
    v418 = 63 - __clz(v417);
    v419 = *v531;
    if (v542)
      v420 = v418;
    else
      v420 = 0;
    v421 = (int *)v577;
    if (v542)
    {
      while (1)
      {
        v422 = *(_QWORD *)(v421 + 1);
        if (v422 >= 0)
          v423 = *(_QWORD *)(v421 + 1);
        else
          v423 = -v422;
        v424 = 63 - __clz(v423);
        v425 = *v421;
        if (!v422)
          v424 = 0;
        v426 = v424 + v420;
        v427 = __OFSUB__(v426, 61);
        if (v426 > 61)
        {
          if (v422)
          {
            v422 = ((v422 ^ (unint64_t)v542) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
            v428 = v423 * v417;
            if (v426 > 0x3E || v428 >= v422)
            {
              v427 = __OFSUB__(v422 - 0x7FFFFFFFFFFFFFFFLL, 2);
              if ((unint64_t)(v422 - 0x7FFFFFFFFFFFFFFFLL) < 2)
                break;
            }
            else
            {
              if (v422 >= 0)
                v422 = v428;
              else
                v422 = -(uint64_t)v428;
              v427 = __OFSUB__(v422 - 0x7FFFFFFFFFFFFFFFLL, 2);
              if ((unint64_t)(v422 - 0x7FFFFFFFFFFFFFFFLL) < 2)
                break;
            }
          }
        }
        else
        {
          v422 *= v542;
          v427 = __OFSUB__(v422 - 0x7FFFFFFFFFFFFFFFLL, 2);
          if ((unint64_t)(v422 - 0x7FFFFFFFFFFFFFFFLL) < 2)
            break;
        }
        v430 = *(_QWORD *)(v419 + 8 * v425);
        v431 = v430 + v422;
        v432 = (v430 + v422) ^ v422;
        v433 = (v430 + v422) ^ v430;
        v434 = ((unint64_t)v422 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
        if ((v432 & v433) < 0 == v427)
          v434 = v431;
        if ((unint64_t)(v434 + 0x7FFFFFFFFFFFFFFFLL) > 0xFFFFFFFFFFFFFFFDLL)
          break;
        *(_QWORD *)(v419 + 8 * v425) = v434;
        v421 += 3;
        if (v421 == v400)
          goto LABEL_562;
      }
    }
    else
    {
      v472 = (int *)v577;
      while ((unint64_t)(*(_QWORD *)(v419 + 8 * *v472) + 0x7FFFFFFFFFFFFFFFLL) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v472 += 3;
        if (v472 == v400)
        {
LABEL_562:
          v383 = v537;
          v386 = v535;
          v387 = v529;
          goto LABEL_563;
        }
      }
    }
    v435 = 0;
    v387 = 1;
    v383 = v537;
    v386 = v535;
LABEL_588:
    if (v414)
    {
      v578 = (uint64_t)v414;
      operator delete(v414);
    }
    if (v435)
    {
LABEL_419:
      ++v385;
      v384 = *(_QWORD *)(a1 + 19728);
      if (v385 >= (*(_QWORD *)(a1 + 19736) - v384) >> 2)
        break;
      continue;
    }
    break;
  }
  if ((v387 & 1) != 0)
    goto LABEL_623;
LABEL_592:
  if (*off_254079638[0] >= 3
    && (off_254079638[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_254079638, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)3)))
  {
    v488 = google::LogMessage::LogMessage((google::LogMessage *)&v577, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 796);
    v489 = (_QWORD *)google::LogMessage::stream(v488);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v489, (uint64_t)" num_slack: ", 12);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)&v577);
  }
  operations_research::sat::LinearProgrammingConstraint::ConvertToLinearConstraint(a1, v531, v383, v525);
  v577 = (unint64_t)"num_ib_substitutions=";
  v578 = 21;
  v491 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(0x6DB6DB6DB6DB6DB7 * ((v565 - (_BYTE *)v564) >> 3), v576, v490);
  v575[0] = (uint64_t *)v576;
  v575[1] = (uint64_t *)(v491 - v576);
  v574[0] = " num_lifted_BOOLeans=";
  v574[1] = 21;
  v493 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(*(unsigned int *)(a1 + 19680), v573, v492);
  v572[0] = v573;
  v572[1] = v493 - v573;
  absl::lts_2020_02_25::StrCat((uint64_t)&v577, (uint64_t)v575, (uint64_t)v574, (uint64_t)v572, &v551);
  v495 = operations_research::sat::ComputeActivity(v525, *(uint64_t **)(a1 + 20408));
  v496 = *(_QWORD *)(a1 + 19720);
  v497 = (double)v496;
  if (v496 < (uint64_t)0x8000000000000003)
    v497 = -INFINITY;
  if (v496 > 0x7FFFFFFFFFFFFFFDLL)
    v497 = INFINITY;
  if (vabdd_f64(v378, v495 - v497) >= 0.0001
    && *off_254079640[0] >= 1
    && (off_254079640[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_254079640, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)1)))
  {
    v498 = google::LogMessage::LogMessage((google::LogMessage *)&v577, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 808);
    v499 = (_QWORD *)google::LogMessage::stream(v498);
    v500 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v499, (uint64_t)"Violation discrepancy after slack removal. ", 43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v500, (uint64_t)" before = ", 10);
    v501 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v501, (uint64_t)" after = ", 9);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)&v577);
  }
  operations_research::sat::DivideByGCD(v525, v494);
  operations_research::sat::LinearConstraint::LinearConstraint((operations_research::sat::LinearConstraint *)&v546, (const operations_research::sat::LinearConstraint *)v525);
  if (*(char *)(v524 + 23) < 0)
    std::string::__init_copy_ctor_external(&v545, *(const std::string::value_type **)v524, *(_QWORD *)(v524 + 8));
  else
    v545 = *(std::string *)v524;
  v502 = *(uint64_t **)(a1 + 20408);
  if (SHIBYTE(v551.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v544, v551.__r_.__value_.__l.__data_, v551.__r_.__value_.__l.__size_);
  else
    v544 = v551;
  v15 = operations_research::sat::LinearConstraintManager::AddCut(v523, &v546, (uint64_t)&v545, v502, (uint64_t)&v544);
  if ((SHIBYTE(v544.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v545.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_613;
LABEL_620:
    operator delete(v545.__r_.__value_.__l.__data_);
    v503 = v549;
    if (!v549)
      goto LABEL_615;
LABEL_614:
    v550 = v503;
    operator delete(v503);
    goto LABEL_615;
  }
  operator delete(v544.__r_.__value_.__l.__data_);
  if (SHIBYTE(v545.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_620;
LABEL_613:
  v503 = v549;
  if (v549)
    goto LABEL_614;
LABEL_615:
  if (v547)
  {
    v548 = v547;
    operator delete(v547);
  }
  if (SHIBYTE(v551.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v551.__r_.__value_.__l.__data_);
LABEL_629:
  v506 = (uint64_t *)v561;
  if (v561)
  {
    v507 = v562;
    v508 = v561;
    if (v562 != v561)
    {
      do
      {
        v509 = (void *)*(v507 - 3);
        if (v509)
        {
          *(v507 - 2) = (uint64_t)v509;
          operator delete(v509);
        }
        v510 = (void *)*(v507 - 6);
        if (v510)
        {
          *(v507 - 5) = (uint64_t)v510;
          operator delete(v510);
        }
        v507 -= 8;
      }
      while (v507 != v506);
      v508 = v561;
    }
    v562 = v506;
    operator delete(v508);
  }
  v511 = (char *)v564;
  if (v564)
  {
    v512 = v565;
    v513 = v564;
    if (v565 != v564)
    {
      v514 = v565;
      do
      {
        v516 = (void *)*((_QWORD *)v514 - 7);
        v514 -= 56;
        v515 = v516;
        if (v516)
        {
          *((_QWORD *)v512 - 6) = v515;
          operator delete(v515);
        }
        v512 = v514;
      }
      while (v514 != v511);
      v513 = v564;
    }
    v565 = v511;
    operator delete(v513);
  }
  if (v569[1])
    operator delete(v569[1]);
  if (v568[0])
    operator delete(v568[0]);
  return v15;
}

void sub_22DB9541C()
{
  uint64_t v0;

  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 176));
}

void sub_22DB95424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a63);
}

void sub_22DB9542C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,char a63)
{
  std::vector<operations_research::sat::LinearConstraint>::~vector[abi:ne180100](&a57);
  std::vector<operations_research::sat::ImpliedBoundsProcessor::SlackInfo>::~vector[abi:ne180100](&a60);
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)&a63);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::LinearProgrammingConstraint::ComputeNewLinearConstraint(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  int *v15;
  int *v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  int v38;
  int v39;
  BOOL v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v50[2];
  uint64_t *v51;
  int v52;

  *a4 = 0;
  v8 = (uint64_t)(a1[2491] - a1[2490]) >> 2;
  v50[0] = 0;
  std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::assign((uint64_t)a3, v8, v50);
  v9 = *a2;
  v10 = a2[1];
  if (*a2 == v10)
    return 1;
  v11 = a1[39];
  while (1)
  {
    v12 = *(_DWORD *)v9;
    v13 = *(_QWORD *)(v9 + 4);
    v52 = v12;
    v50[0] = 0xCCCCCCCCCCCCCCCDLL * ((a1[40] - v11) >> 3);
    if (v12 >= SLODWORD(v50[0]))
      break;
    v14 = (uint64_t *)(v11 + 40 * v12);
    v15 = (int *)v14[2];
    v16 = (int *)v14[3];
    if (v15 != v16)
      goto LABEL_5;
LABEL_42:
    if (v13 >= 0)
      v17 = v13;
    else
      v17 = -v13;
    v18 = 63 - __clz(v17);
LABEL_46:
    v34 = (uint64_t *)(v11 + 40 * v12 + 8);
    if (v13 <= 0)
      v34 = v14;
    v35 = *v34;
    if (v13)
      v36 = v18;
    else
      v36 = 0;
    if (v35 >= 0)
      v37 = v35;
    else
      v37 = -v35;
    v38 = 63 - __clz(v37);
    if (!v35)
      v38 = 0;
    v39 = v38 + v36;
    v40 = __OFSUB__(v39, 61);
    if (v39 > 61)
    {
      v41 = 0;
      if (v13 && v35)
      {
        v43 = ((v35 ^ (unint64_t)v13) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
        v44 = v37 * v17;
        if (v39 > 0x3E || v44 >= v43)
          return 0;
        v41 = v43 >= 0 ? v44 : -(uint64_t)v44;
        v40 = __OFSUB__(v41 - 0x7FFFFFFFFFFFFFFFLL, 2);
        if (v41 - 0x7FFFFFFFFFFFFFFFLL < 2)
          return 0;
      }
    }
    else
    {
      v41 = v35 * v13;
      v42 = v35 * v13 - 0x7FFFFFFFFFFFFFFFLL;
      v40 = __OFSUB__(v42, 2);
      if (v42 < 2)
        return 0;
    }
    v46 = *a4 + v41;
    v47 = v46 ^ v41;
    v48 = (v41 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
    if (((v47 & (v46 ^ *a4) & 0x8000000000000000) != 0) == v40)
      v48 = v46;
    if ((unint64_t)(v48 + 0x7FFFFFFFFFFFFFFFLL) > 0xFFFFFFFFFFFFFFFDLL)
      return 0;
    *a4 = v48;
    v9 += 12;
    if (v9 == v10)
      return 1;
  }
  v51 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,unsigned long>((int)&v52, (int)v50, "row < integer_lp_.size()");
  if (v51)
  {
    google::LogMessageFatal::LogMessageFatal((unint64_t *)v50, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 1640, &v51);
    google::LogMessage::stream((google::LogMessage *)v50);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v50);
  }
  v12 = v52;
  v11 = a1[39];
  v14 = (uint64_t *)(v11 + 40 * v52);
  v15 = (int *)v14[2];
  v16 = (int *)v14[3];
  if (v15 == v16)
    goto LABEL_42;
LABEL_5:
  if (v13 >= 0)
    v17 = v13;
  else
    v17 = -v13;
  v18 = 63 - __clz(v17);
  v19 = *a3;
  if (v13)
    v20 = v18;
  else
    v20 = 0;
  if (v13)
  {
    while (1)
    {
      v21 = *(_QWORD *)(v15 + 1);
      if (v21 >= 0)
        v22 = *(_QWORD *)(v15 + 1);
      else
        v22 = -v21;
      v23 = 63 - __clz(v22);
      v24 = *v15;
      if (!v21)
        v23 = 0;
      v25 = v23 + v20;
      v26 = __OFSUB__(v25, 61);
      if (v25 > 61)
      {
        if (v21)
        {
          v21 = ((v21 ^ (unint64_t)v13) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
          v27 = v22 * v17;
          if (v25 > 0x3E || v27 >= v21)
          {
            v26 = __OFSUB__(v21 - 0x7FFFFFFFFFFFFFFFLL, 2);
            if ((unint64_t)(v21 - 0x7FFFFFFFFFFFFFFFLL) < 2)
              return 0;
          }
          else
          {
            if (v21 >= 0)
              v21 = v27;
            else
              v21 = -(uint64_t)v27;
            v26 = __OFSUB__(v21 - 0x7FFFFFFFFFFFFFFFLL, 2);
            if ((unint64_t)(v21 - 0x7FFFFFFFFFFFFFFFLL) < 2)
              return 0;
          }
        }
      }
      else
      {
        v21 *= v13;
        v26 = __OFSUB__(v21 - 0x7FFFFFFFFFFFFFFFLL, 2);
        if ((unint64_t)(v21 - 0x7FFFFFFFFFFFFFFFLL) < 2)
          return 0;
      }
      v29 = *(_QWORD *)(v19 + 8 * v24);
      v30 = v29 + v21;
      v31 = (v29 + v21) ^ v21;
      v32 = (v29 + v21) ^ v29;
      v33 = ((unint64_t)v21 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
      if ((v31 & v32) < 0 == v26)
        v33 = v30;
      if ((unint64_t)(v33 + 0x7FFFFFFFFFFFFFFFLL) > 0xFFFFFFFFFFFFFFFDLL)
        break;
      *(_QWORD *)(v19 + 8 * v24) = v33;
      v15 += 3;
      if (v15 == v16)
        goto LABEL_46;
    }
  }
  else
  {
    while ((unint64_t)(*(_QWORD *)(v19 + 8 * *v15) + 0x7FFFFFFFFFFFFFFFLL) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v15 += 3;
      if (v15 == v16)
        goto LABEL_46;
    }
  }
  return 0;
}

void sub_22DB95938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void **std::vector<operations_research::sat::ImpliedBoundsProcessor::SlackInfo>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  void *v6;
  void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (char *)a1[1];
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 7);
        v5 -= 56;
        v6 = v7;
        if (v7)
        {
          *((_QWORD *)v3 - 6) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void operations_research::sat::LinearProgrammingConstraint::AddCGCuts(operations_research::sat::LinearProgrammingConstraint *this)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int Basis;
  double VariableValue;
  double v7;
  _QWORD *UnitRowLeftInverse;
  float64x2_t *v9;
  uint64_t v10;
  int v11;
  double v12;
  _QWORD *v13;
  uint64_t v14;
  float64x2_t *v15;
  uint64_t v16;
  float64x2_t v17;
  uint64_t v18;
  double *v19;
  uint64_t __sz;
  char v21[23];
  char v22;
  void *__p;
  void *v24;
  uint64_t v25;
  uint64_t v26[3];

  LODWORD(v26[0]) = (*(_DWORD *)(*((_QWORD *)this + 2504) + 8) >> 1) & 0x7FFFFFF;
  LODWORD(__p) = 0;
  if (LODWORD(v26[0]))
  {
    __p = (void *)google::MakeCheckOpString<int,int>((int)v26, (int)&__p, "trail_->CurrentDecisionLevel() == 0");
    if (__p)
    {
      google::LogMessageFatal::LogMessageFatal((unint64_t *)v26, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 818, (uint64_t **)&__p);
      google::LogMessage::stream((google::LogMessage *)v26);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v26);
    }
  }
  v2 = *((unsigned int *)this + 96);
  if ((int)v2 >= 1)
  {
    v3 = 0;
    v4 = (char *)this + 19360;
    __sz = 8 * v2;
    while (1)
    {
      Basis = operations_research::glop::RevisedSimplex::GetBasis((uint64_t)this + 840, v3);
      VariableValue = operations_research::glop::RevisedSimplex::GetVariableValue((uint64_t)this + 840, Basis);
      v7 = operations_research::glop::LpScalingHelper::UnscaleVariableValue((uint64_t)v4, Basis, VariableValue);
      if (vabdd_f64(v7, round(v7)) < 0.01 || Basis >= (int)((*((_QWORD *)this + 2491) - *((_QWORD *)this + 2490)) >> 2))
        goto LABEL_6;
      UnitRowLeftInverse = (_QWORD *)operations_research::glop::UpdateRow::ComputeAndGetUnitRowLeftInverse((uint64_t)this + 8680, v3);
      v9 = (float64x2_t *)operator new(__sz);
      v26[0] = (uint64_t)v9;
      v26[2] = (uint64_t)&v9->f64[v2];
      bzero(v9, __sz);
      v10 = 0;
      v11 = 0;
      v26[1] = (uint64_t)&v9->f64[v2];
      do
      {
        while (1)
        {
          while (1)
          {
            v12 = *(double *)(*UnitRowLeftInverse + 8 * v10);
            v9->f64[v10] = v12;
            if (fabs(v12) >= 1.0e-12)
              break;
            v9->f64[v10++] = 0.0;
            if (v2 == v10)
              goto LABEL_22;
          }
          if (!operations_research::glop::RevisedSimplex::GetConstraintStatus((uint64_t)this + 840, v10))
            break;
          if (v9->f64[v10] != 0.0)
            ++v11;
          if (v2 == ++v10)
            goto LABEL_22;
        }
        if (*operations_research::sat::LinearProgrammingConstraint::AddCGCuts(void)::vlocal__ >= 1
          && (operations_research::sat::LinearProgrammingConstraint::AddCGCuts(void)::vlocal__ != &google::kLogSiteUninitialized
           || google::InitVLOG3__((google *)&operations_research::sat::LinearProgrammingConstraint::AddCGCuts(void)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)1)))
        {
          google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 848);
          v13 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"BASIC row not expected! ", 24);
          std::ostream::operator<<();
          google::LogMessage::~LogMessage((google::LogMessage *)&__p);
        }
        v9->f64[v10++] = 0.0;
      }
      while (v2 != v10);
LABEL_22:
      if (v11)
        break;
LABEL_4:
      operator delete(v9);
LABEL_5:
      v4 = (char *)this + 19360;
LABEL_6:
      if (++v3 == v2)
        return;
    }
    v25 = 0;
    operations_research::sat::LinearProgrammingConstraint::ScaleLpMultiplier(this, 0, v26, (double *)&v25, 52, &__p);
    v22 = 2;
    strcpy(v21, "CG");
    operations_research::sat::LinearProgrammingConstraint::AddCutFromConstraints((uint64_t)this, (uint64_t)v21, (uint64_t *)&__p);
    if (__p)
    {
      v24 = __p;
      operator delete(__p);
    }
    if (v2 >= 4)
    {
      v15 = v9 + 1;
      v16 = v2 & 0xFFFFFFFC;
      do
      {
        v17 = vnegq_f64(*v15);
        v15[-1] = vnegq_f64(v15[-1]);
        *v15 = v17;
        v15 += 2;
        v16 -= 4;
      }
      while (v16);
      v14 = v2 & 0xFFFFFFFC;
      if (v14 == v2)
        goto LABEL_32;
    }
    else
    {
      v14 = 0;
    }
    v18 = v2 - v14;
    v19 = &v9->f64[v14];
    do
    {
      *v19 = -*v19;
      ++v19;
      --v18;
    }
    while (v18);
LABEL_32:
    operations_research::sat::LinearProgrammingConstraint::ScaleLpMultiplier(this, 0, v26, (double *)&v25, 52, &__p);
    v22 = 2;
    strcpy(v21, "CG");
    operations_research::sat::LinearProgrammingConstraint::AddCutFromConstraints((uint64_t)this, (uint64_t)v21, (uint64_t *)&__p);
    if (__p)
    {
      v24 = __p;
      operator delete(__p);
    }
    v9 = (float64x2_t *)v26[0];
    if (!v26[0])
      goto LABEL_5;
    goto LABEL_4;
  }
}

void sub_22DB95D74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DB95D7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v21;

  if (__p)
  {
    operator delete(__p);
    v21 = a20;
    if (!a20)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v21 = a20;
    if (!a20)
      goto LABEL_3;
  }
  operator delete(v21);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::LinearProgrammingConstraint::ScaleLpMultiplier(_QWORD *a1@<X0>, char a2@<W1>, uint64_t *a3@<X2>, double *a4@<X3>, int a5@<W4>, void **a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  double *v11;
  char *v12;
  double *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  double *v27;
  uint64_t v28;
  double v29;
  double *v30;
  double *v31;
  double v32;
  double v33;
  double v34;
  char *v35;
  char *v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  int v49;
  double *__p;

  __p = 0;
  v9 = *a3;
  v8 = a3[1];
  if ((int)((unint64_t)(v8 - *a3) >> 3) >= 1)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0.0;
    while (1)
    {
      v18 = *(double *)(v9 + 8 * v14);
      if (fabs(v18) >= 1.0e-12
        && (v18 <= 0.0 || *(uint64_t *)(a1[39] + 40 * v14 + 8) <= 0x7FFFFFFFFFFFFFFDLL)
        && (v18 >= 0.0 || *(_QWORD *)(a1[39] + 40 * v14) >= (int64_t)0x8000000000000003))
      {
        break;
      }
LABEL_9:
      if (++v14 >= (int)((unint64_t)(v8 - v9) >> 3))
        goto LABEL_34;
    }
    v19 = operations_research::glop::LpScalingHelper::UnscaleDualValue((uint64_t)(a1 + 2420), v14, v18);
    v20 = v19;
    if (v13 < (double *)v12)
    {
      *(_DWORD *)v13 = v14;
      v13[1] = v19;
      v13 += 2;
LABEL_4:
      v16 = *(_QWORD *)(a1[42] + 8 * v14);
      v17 = (double)v16;
      if (v16 < (uint64_t)0x8000000000000003)
        v17 = -INFINITY;
      if (v16 > 0x7FFFFFFFFFFFFFFDLL)
        v17 = INFINITY;
      v15 = v15 + v17 * fabs(v20);
      v9 = *a3;
      v8 = a3[1];
      goto LABEL_9;
    }
    v21 = ((char *)v13 - (char *)v11) >> 4;
    v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 60)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    if ((v12 - (char *)v11) >> 3 > v22)
      v22 = (v12 - (char *)v11) >> 3;
    if ((unint64_t)(v12 - (char *)v11) >= 0x7FFFFFFFFFFFFFF0)
      v23 = 0xFFFFFFFFFFFFFFFLL;
    else
      v23 = v22;
    if (v23)
    {
      if (v23 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v24 = (char *)operator new(16 * v23);
      v25 = (uint64_t)&v24[16 * v21];
      *(_DWORD *)v25 = v14;
      *(double *)(v25 + 8) = v20;
      if (v13 != v11)
      {
LABEL_25:
        v26 = v25;
        do
        {
          v27 = (double *)(v26 - 16);
          *(_OWORD *)(v26 - 16) = *((_OWORD *)v13 - 1);
          v13 -= 2;
          v26 -= 16;
        }
        while (v13 != v11);
        v12 = &v24[16 * v23];
        v13 = (double *)(v25 + 16);
        __p = v27;
        if (!v11)
          goto LABEL_29;
LABEL_28:
        operator delete(v11);
LABEL_29:
        v11 = v27;
        goto LABEL_4;
      }
    }
    else
    {
      v24 = 0;
      v25 = 16 * v21;
      *(_DWORD *)v25 = v14;
      *(double *)(v25 + 8) = v19;
      if (v13 != v11)
        goto LABEL_25;
    }
    v27 = (double *)v25;
    v12 = &v24[16 * v23];
    v13 = (double *)(v25 + 16);
    __p = (double *)v25;
    if (!v11)
      goto LABEL_29;
    goto LABEL_28;
  }
  v13 = 0;
  v15 = 0.0;
LABEL_34:
  if ((a2 & 1) != 0)
  {
    v28 = a1[38];
    v29 = (double)v28;
    if (v28 < (uint64_t)0x8000000000000003)
      v29 = -INFINITY;
    if (v28 > 0x7FFFFFFFFFFFFFFDLL)
      v29 = INFINITY;
    v15 = v15 + v29;
  }
  v30 = a4;
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  if (v15 != 0.0)
  {
    v32 = 1.0;
    v33 = ldexp(1.0, a5) / v15;
    do
    {
      v34 = v32;
      v32 = v32 + v32;
    }
    while (v32 <= v33);
    *a4 = v34;
    v31 = __p;
    if (__p == v13)
      goto LABEL_43;
    v35 = 0;
    while (1)
    {
      v37 = llround(v31[1] * *v30);
      if (!v37)
        goto LABEL_51;
      v38 = *(_DWORD *)v31;
      v39 = (unint64_t)a6[2];
      if ((unint64_t)v35 < v39)
      {
        *(_DWORD *)v35 = v38;
        *(_QWORD *)(v35 + 4) = v37;
        v36 = v35 + 12;
      }
      else
      {
        v40 = (char *)*a6;
        v41 = 0xAAAAAAAAAAAAAAABLL * ((v35 - (_BYTE *)*a6) >> 2);
        v42 = v41 + 1;
        if (v41 + 1 > 0x1555555555555555)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - (_QWORD)v40) >> 2);
        if (2 * v43 > v42)
          v42 = 2 * v43;
        if (v43 >= 0xAAAAAAAAAAAAAAALL)
          v44 = 0x1555555555555555;
        else
          v44 = v42;
        if (v44)
        {
          if (v44 > 0x1555555555555555)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v45 = (char *)operator new(12 * v44);
        }
        else
        {
          v45 = 0;
        }
        v46 = &v45[12 * v41];
        *(_DWORD *)v46 = v38;
        *(_QWORD *)(v46 + 4) = v37;
        v47 = v46;
        if (v35 == v40)
        {
          v30 = a4;
          v36 = v46 + 12;
          *a6 = v46;
          a6[1] = v46 + 12;
          a6[2] = &v45[12 * v44];
          if (!v35)
            goto LABEL_50;
        }
        else
        {
          v30 = a4;
          do
          {
            v48 = *(_QWORD *)(v35 - 12);
            v35 -= 12;
            v49 = *((_DWORD *)v35 + 2);
            *(_QWORD *)(v47 - 12) = v48;
            v47 -= 12;
            *((_DWORD *)v47 + 2) = v49;
          }
          while (v35 != v40);
          v35 = (char *)*a6;
          v36 = v46 + 12;
          *a6 = v47;
          a6[1] = v46 + 12;
          a6[2] = &v45[12 * v44];
          if (!v35)
            goto LABEL_50;
        }
        operator delete(v35);
      }
LABEL_50:
      a6[1] = v36;
      v35 = v36;
LABEL_51:
      v31 += 2;
      if (v31 == v13)
        goto LABEL_42;
    }
  }
  *a4 = 1.0;
LABEL_42:
  v31 = __p;
LABEL_43:
  if (v31)
    operator delete(v31);
}

void sub_22DB96298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;
  void *v14;

  if (v14)
  {
    *(_QWORD *)(v13 + 8) = v14;
    operator delete(v14);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::LinearProgrammingConstraint::AddMirCuts(operations_research::sat::LinearProgrammingConstraint *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  char *v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  unsigned int ConstraintStatus;
  unsigned int v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  int v32;
  char *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  int v42;
  int *v43;
  int *v44;
  char *v45;
  uint64_t *v46;
  int *v47;
  int *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  int *v58;
  int *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  int *v64;
  int *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  int64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  __int128 v88;
  int v89;
  unsigned int v90;
  _QWORD *v91;
  int *v92;
  int *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  double v101;
  uint64_t v102;
  uint64_t v103;
  double v104;
  double v105;
  uint64_t v106;
  double v107;
  double v108;
  double v109;
  double *v110;
  double *v111;
  int64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  char *v118;
  double *v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  double *v125;
  char *v126;
  double *v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  _BYTE *v135;
  int *v136;
  unint64_t v137;
  char *v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  _OWORD *v142;
  char *v143;
  uint64_t v144;
  __int128 v145;
  int *v146;
  void *v147;
  int64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  double v153;
  unint64_t v154;
  unint64_t v155;
  double *v156;
  uint64_t v157;
  float64x2_t v158;
  float64x2_t *v159;
  uint64_t v160;
  float64x2_t v161;
  unint64_t v162;
  double *v163;
  double *v164;
  uint64_t *v165;
  int v166;
  unsigned int v167;
  uint64_t *v168;
  double v169;
  double *v170;
  uint64_t v171;
  double *v172;
  double v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unsigned int v180;
  unint64_t v181;
  uint64_t v182;
  unsigned int v183;
  uint64_t v184;
  unsigned int v185;
  double v186;
  unsigned int v187;
  double v188;
  unint64_t v189;
  unint64_t v190;
  double *v191;
  double *v192;
  double v193;
  int v194;
  _QWORD *SparseColumn;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  unsigned int v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  BOOL v208;
  _BOOL4 v209;
  int v210;
  uint64_t v211;
  int *v212;
  double *v213;
  _QWORD *v214;
  double *v215;
  int64_t v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  char *v221;
  int *v222;
  int *v223;
  uint64_t v224;
  int *v225;
  int *v226;
  int *v227;
  unint64_t v228;
  int *v229;
  int v230;
  int *v231;
  double *v232;
  int64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  _QWORD *v239;
  unint64_t v240;
  _BYTE *v241;
  _QWORD *v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  double *v246;
  _OWORD *v247;
  double *v248;
  uint64_t v249;
  __int128 v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  char *v254;
  int *v255;
  uint64_t v256;
  __int128 v257;
  int *v258;
  int *v259;
  void *v260;
  int64_t v261;
  uint64_t *v262;
  char *v263;
  int v264;
  int v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  int v276;
  int v277;
  unint64_t v278;
  int v279;
  uint64_t v280;
  int v281;
  unsigned int v282;
  unint64_t v283;
  unint64_t v284;
  int v285;
  uint64_t v286;
  unint64_t v287;
  int v288;
  int v289;
  BOOL v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  unint64_t v294;
  uint64_t v295;
  unint64_t v296;
  char *v297;
  char *v298;
  char *v299;
  char *v300;
  unint64_t v301;
  unint64_t v302;
  char *v303;
  char *v304;
  char *v305;
  uint64_t v306;
  int v307;
  _BYTE *v308;
  BOOL v309;
  char v310;
  char v311;
  char v312;
  int *v313;
  int *v314;
  _QWORD *v315;
  uint64_t v316;
  uint64_t v317;
  int *v318;
  int *v319;
  uint64_t v320;
  int v321;
  uint64_t v322;
  unint64_t v323;
  uint64_t v324;
  char *v325;
  char *v326;
  int64_t v327;
  uint64_t v328;
  unint64_t v329;
  uint64_t v330;
  unint64_t v331;
  char *v332;
  char *v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t v336;
  char *v337;
  char *v338;
  char *v339;
  uint64_t v340;
  __int128 v341;
  int v342;
  unint64_t *v343;
  unint64_t *v344;
  unint64_t *v345;
  unint64_t v346;
  int *v347;
  int64_t v348;
  int *v349;
  uint64_t v350;
  uint64_t v351;
  int v352;
  int *__p;
  char *v354;
  int *v355;
  uint64_t v356;
  unsigned int v357;
  int *v358;
  char *v359;
  int *v360;
  int *v361;
  std::string v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  int *v367;
  uint64_t v368;
  int *v369;
  int *v370;
  char *v371;
  char *v372;
  void *v373;
  char *v374;
  char *v375;
  void *v376[3];
  void *v377;
  double *v378;
  double *v379;
  void *v380;
  char *v381;
  char *v382;
  void *v383;
  char *v384;
  char *v385;
  unint64_t v386;
  void *v387;
  char *v388;
  char *v389;
  unint64_t *v390;
  uint64_t v391;
  uint64_t v392;
  void *v393;
  char *v394;
  char *v395;
  _QWORD *v396;
  char *v397;
  char *v398;
  uint64_t *v399;
  uint64_t *v400;
  _QWORD v401[4];
  char *v402;
  uint64_t v403;
  uint64_t *v404;
  uint64_t v405;

  v405 = *MEMORY[0x24BDAC8D0];
  LODWORD(v386) = (*(_DWORD *)(*((_QWORD *)this + 2504) + 8) >> 1) & 0x7FFFFFF;
  LODWORD(v402) = 0;
  if ((_DWORD)v386)
  {
    v402 = (char *)google::MakeCheckOpString<int,int>((int)&v386, (int)&v402, "trail_->CurrentDecisionLevel() == 0");
    if (v402)
    {
      google::LogMessageFatal::LogMessageFatal(&v386, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 905, (uint64_t **)&v402);
      google::LogMessage::stream((google::LogMessage *)&v386);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v386);
    }
  }
  v1 = *((_QWORD *)this + 2491);
  v2 = *((_QWORD *)this + 2490);
  v397 = 0;
  v398 = 0;
  v396 = 0;
  v3 = v1 - v2;
  if (v1 == v2)
    goto LABEL_7;
  if ((unint64_t)v3 >= 0x7FFFFFFFFFFFFFFDLL)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v4 = operator new(2 * v3);
  v5 = v3 >> 2;
  v6 = (char *)&v4[v5];
  v396 = v4;
  v398 = (char *)&v4[v5];
  bzero(v4, v5 * 8);
  v397 = v6;
  if ((int)(v3 >> 2) <= 0)
  {
LABEL_7:
    LODWORD(v386) = 0;
    v388 = 0;
    v389 = 0;
    v387 = 0;
  }
  else
  {
    LODWORD(v386) = v3 >> 2;
    v7 = (int)v386 + 63;
    v388 = 0;
    v389 = 0;
    v387 = 0;
    if (v7 >= 0x40)
    {
      v8 = v7 >> 6;
      v9 = 8 * (v7 >> 6);
      v10 = (char *)operator new(v9);
      v387 = v10;
      v389 = &v10[8 * v8];
      bzero(v10, v9);
      v388 = &v10[v9];
    }
  }
  v390 = &v386;
  v392 = 0;
  v393 = 0;
  v391 = 0xFFFFFFFFLL;
  v394 = 0;
  v395 = 0;
  v11 = *((int *)this + 96);
  v383 = 0;
  v384 = 0;
  v385 = 0;
  v380 = 0;
  v381 = 0;
  v382 = 0;
  v346 = v11;
  if ((_DWORD)v11)
  {
    if ((v11 & 0x80000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = 8 * v11;
    v13 = v11;
    v14 = (char *)operator new(8 * v11);
    v15 = &v14[8 * v13];
    v380 = v14;
    v382 = v15;
    bzero(v14, v12);
    v16 = 0;
    v381 = v15;
    v17 = (char *)this + 840;
    v18 = v13;
    do
    {
      ConstraintStatus = operations_research::glop::RevisedSimplex::GetConstraintStatus((uint64_t)v17, v16);
      v21 = ConstraintStatus;
      if ((ConstraintStatus | 4) != 4)
      {
        if ((ConstraintStatus & 0xFFFFFFFD) == 1)
        {
          v22 = v384;
          if (v384 >= v385)
          {
            v24 = (char *)v383;
            v25 = 0xAAAAAAAAAAAAAAABLL * ((v384 - (_BYTE *)v383) >> 2);
            v26 = v25 + 1;
            if (v25 + 1 > 0x1555555555555555)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((v385 - (_BYTE *)v383) >> 2) > v26)
              v26 = 0x5555555555555556 * ((v385 - (_BYTE *)v383) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((v385 - (_BYTE *)v383) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v27 = 0x1555555555555555;
            else
              v27 = v26;
            if (v27)
            {
              if (v27 > 0x1555555555555555)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v28 = (char *)operator new(12 * v27);
            }
            else
            {
              v28 = 0;
            }
            v29 = &v28[4 * ((v384 - (_BYTE *)v383) >> 2)];
            *(_DWORD *)v29 = v16;
            *(_QWORD *)(v29 + 4) = 1;
            v30 = &v28[12 * v25];
            if (v22 != v24)
            {
              do
              {
                v31 = *(_QWORD *)(v22 - 12);
                v22 -= 12;
                v32 = *((_DWORD *)v22 + 2);
                *(_QWORD *)(v30 - 12) = v31;
                v30 -= 12;
                *((_DWORD *)v30 + 2) = v32;
              }
              while (v22 != v24);
              v22 = (char *)v383;
            }
            v23 = v29 + 12;
            v383 = v30;
            v384 = v29 + 12;
            v385 = &v28[12 * v27];
            if (v22)
              operator delete(v22);
          }
          else
          {
            *(_DWORD *)v384 = v16;
            *(_QWORD *)(v22 + 4) = 1;
            v23 = v22 + 12;
          }
          v384 = v23;
        }
        if (v21 <= 2)
        {
          v33 = v384;
          if (v384 < v385)
          {
            *(_DWORD *)v384 = v16;
            *(_QWORD *)(v33 + 4) = -1;
            v19 = v33 + 12;
          }
          else
          {
            v34 = (char *)v383;
            v35 = 0xAAAAAAAAAAAAAAABLL * ((v384 - (_BYTE *)v383) >> 2);
            v36 = v35 + 1;
            if (v35 + 1 > 0x1555555555555555)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((v385 - (_BYTE *)v383) >> 2) > v36)
              v36 = 0x5555555555555556 * ((v385 - (_BYTE *)v383) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((v385 - (_BYTE *)v383) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v37 = 0x1555555555555555;
            else
              v37 = v36;
            if (v37)
            {
              if (v37 > 0x1555555555555555)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v38 = (char *)operator new(12 * v37);
            }
            else
            {
              v38 = 0;
            }
            v39 = &v38[4 * ((v384 - (_BYTE *)v383) >> 2)];
            *(_DWORD *)v39 = v16;
            *(_QWORD *)(v39 + 4) = -1;
            v40 = &v38[12 * v35];
            if (v33 != v34)
            {
              do
              {
                v41 = *(_QWORD *)(v33 - 12);
                v33 -= 12;
                v42 = *((_DWORD *)v33 + 2);
                *(_QWORD *)(v40 - 12) = v41;
                v40 -= 12;
                *((_DWORD *)v40 + 2) = v42;
              }
              while (v33 != v34);
              v33 = (char *)v383;
            }
            v19 = v39 + 12;
            v383 = v40;
            v384 = v39 + 12;
            v385 = &v38[12 * v37];
            if (v33)
              operator delete(v33);
          }
          v384 = v19;
        }
        *((double *)v380 + v16) = fmax(fabs(operations_research::glop::RevisedSimplex::GetDualValue((uint64_t)v17, v16)), 0.00000001);
      }
      ++v16;
    }
    while (v16 != v18);
    v44 = (int *)v383;
    v43 = (int *)v384;
  }
  else
  {
    v43 = 0;
    v44 = 0;
  }
  v377 = 0;
  v378 = 0;
  v379 = 0;
  memset(v376, 0, sizeof(v376));
  v373 = 0;
  v374 = 0;
  v375 = 0;
  if (v44 != v43)
  {
    v45 = (char *)this + 840;
    v347 = v43;
    while (1)
    {
      v46 = *(uint64_t **)v44;
      LODWORD(v403) = v44[2];
      v402 = (char *)v46;
      std::vector<std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>::__assign_with_size[abi:ne180100]<std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const*,std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const*>((char **)&v373, (char *)&v402, (char *)&v403 + 4, 1uLL);
      v349 = v44;
      HIBYTE(v404) = 5;
      strcpy((char *)&v402, "MIR_1");
      if (!operations_research::sat::LinearProgrammingConstraint::AddCutFromConstraints((uint64_t)this, (uint64_t)&v402, (uint64_t *)&v373))break;
LABEL_56:
      v44 = v349 + 3;
      if (v349 + 3 == v347)
      {
        if (v373)
        {
          v374 = (char *)v373;
          operator delete(v373);
        }
        if (v376[0])
          operator delete(v376[0]);
        goto LABEL_443;
      }
    }
    v47 = (int *)v393;
    v48 = (int *)v394;
    if (v393 != v394)
    {
      v49 = v396;
      v50 = v394 - (_BYTE *)v393 - 4;
      v51 = (v50 >> 2) + 1;
      v52 = (int *)v393;
      if (v50 < 4)
        goto LABEL_486;
      v52 = (int *)((char *)v393 + 4 * (v51 & 0x7FFFFFFFFFFFFFFELL));
      v53 = (int *)((char *)v393 + 4);
      v54 = v51 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        v55 = *v53;
        v49[*(v53 - 1)] = 0;
        v49[v55] = 0;
        v53 += 2;
        v54 -= 2;
      }
      while (v54);
      if (v51 != (v51 & 0x7FFFFFFFFFFFFFFELL))
      {
LABEL_486:
        do
        {
          v56 = *v52++;
          v49[v56] = 0;
        }
        while (v52 != v48);
      }
      v57 = (char *)v387;
      v58 = v47;
      if (v50 < 4)
        goto LABEL_487;
      v58 = &v47[v51 & 0x7FFFFFFFFFFFFFFELL];
      v59 = v47 + 1;
      v60 = v51 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        v61 = ((unint64_t)*v59 >> 3) & 0x1FFFFFFFFFFFFFF8;
        *(_QWORD *)&v57[((unint64_t)*(v59 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] = 0;
        *(_QWORD *)&v57[v61] = 0;
        v59 += 2;
        v60 -= 2;
      }
      while (v60);
      if (v51 != (v51 & 0x7FFFFFFFFFFFFFFELL))
      {
LABEL_487:
        do
        {
          v62 = *v58++;
          *(_QWORD *)&v57[(v62 >> 3) & 0x1FFFFFFFFFFFFFF8] = 0;
        }
        while (v58 != v48);
      }
    }
    v394 = (char *)v47;
    v63 = *((_QWORD *)this + 39) + 40 * *v44;
    v65 = *(int **)(v63 + 16);
    v64 = *(int **)(v63 + 24);
    if (v65 != v64)
    {
      v66 = *(_QWORD *)(v349 + 1);
      v358 = *(int **)(v63 + 24);
      v356 = v66;
      while (1)
      {
        v68 = *v65;
        v69 = *(_QWORD *)(v65 + 1);
        v70 = (unint64_t)*v65 >> 6;
        v71 = *((_QWORD *)v387 + v70);
        if ((v71 & (1 << *v65)) != 0)
          goto LABEL_73;
        *((_QWORD *)v387 + v70) = v71 | (1 << v68);
        v72 = v394;
        if (v394 >= v395)
          break;
        *(_DWORD *)v394 = v68;
        v67 = (uint64_t)(v72 + 4);
LABEL_72:
        v394 = (char *)v67;
LABEL_73:
        v396[v68] += v69 * v66;
        v65 += 3;
        if (v65 == v64)
          goto LABEL_96;
      }
      v73 = (char *)v393;
      v74 = v394 - (_BYTE *)v393;
      v75 = (v394 - (_BYTE *)v393) >> 2;
      v76 = v75 + 1;
      if ((unint64_t)(v75 + 1) >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v77 = v395 - (_BYTE *)v393;
      if ((v395 - (_BYTE *)v393) >> 1 > v76)
        v76 = v77 >> 1;
      if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL)
        v78 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v78 = v76;
      if (v78)
      {
        if (v78 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v79 = (char *)operator new(4 * v78);
        v80 = &v79[4 * v75];
        *(_DWORD *)v80 = v68;
        v67 = (uint64_t)(v80 + 4);
        if (v72 == v73)
          goto LABEL_93;
      }
      else
      {
        v79 = 0;
        v80 = (char *)(4 * v75);
        *(_DWORD *)(4 * v75) = v68;
        v67 = 4 * v75 + 4;
        if (v72 == v73)
        {
LABEL_93:
          v393 = v80;
          v394 = (char *)v67;
          v395 = &v79[4 * v78];
          if (v73)
            operator delete(v73);
          v45 = (char *)this + 840;
          v64 = v358;
          v66 = v356;
          goto LABEL_72;
        }
      }
      v81 = v72 - 4 - v73;
      if (v81 < 0x2C)
        goto LABEL_488;
      if ((unint64_t)(v72 - &v79[v74]) < 0x20)
        goto LABEL_488;
      v82 = (v81 >> 2) + 1;
      v83 = 4 * (v82 & 0x7FFFFFFFFFFFFFF8);
      v84 = &v72[-v83];
      v80 -= v83;
      v85 = &v79[4 * v75 - 16];
      v86 = v72 - 16;
      v87 = v82 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v88 = *(_OWORD *)v86;
        *((_OWORD *)v85 - 1) = *((_OWORD *)v86 - 1);
        *(_OWORD *)v85 = v88;
        v85 -= 32;
        v86 -= 32;
        v87 -= 8;
      }
      while (v87);
      v72 = v84;
      if (v82 != (v82 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_488:
        do
        {
          v89 = *((_DWORD *)v72 - 1);
          v72 -= 4;
          *((_DWORD *)v80 - 1) = v89;
          v80 -= 4;
        }
        while (v72 != v73);
      }
      goto LABEL_93;
    }
LABEL_96:
    LOBYTE(v402) = 0;
    std::vector<BOOL>::assign((char **)v376, v346, &v402);
    v90 = 0;
    *(_QWORD *)((char *)v376[0] + (((unint64_t)*v349 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *v349;
    v91 = (_QWORD *)((char *)this + 360);
    while (1)
    {
      v378 = (double *)v377;
      v370 = 0;
      v371 = 0;
      v372 = 0;
      v92 = (int *)v393;
      v93 = (int *)v394;
      if (v393 == v394)
        goto LABEL_56;
      v357 = v90;
      v94 = 0;
      v359 = 0;
      v95 = 0;
      v96 = 0;
      do
      {
        v98 = *v92;
        v99 = v396[*v92];
        if (v99)
        {
          if (v99 < 0)
            v99 = -v99;
          if (v96 <= v99)
            v96 = v99;
          if (*(int *)(operations_research::glop::LinearProgram::GetSparseColumn(v91, *v92) + 8) >= 2
            && !operations_research::glop::RevisedSimplex::GetVariableStatus((uint64_t)v45, v98))
          {
            v100 = *(int *)(*((_QWORD *)this + 2490) + 4 * v98);
            v101 = *(double *)(**((_QWORD **)this + 2551) + 8 * v100);
            v102 = *(_QWORD *)(*((_QWORD *)this + 2503) + 40);
            v103 = *(_QWORD *)(v102 + 12 * (int)v100);
            v104 = (double)v103;
            v105 = -INFINITY;
            if (v103 < (uint64_t)0x8000000000000003)
              v104 = -INFINITY;
            if (v103 > 0x7FFFFFFFFFFFFFFDLL)
              v104 = INFINITY;
            v106 = *(_QWORD *)(v102 + 12 * (int)(v100 ^ 1));
            if (v106 <= 0x7FFFFFFFFFFFFFFDLL)
              v105 = (double)-v106;
            if (v106 < (uint64_t)0x8000000000000003)
              v105 = INFINITY;
            v107 = v105 - v101;
            v108 = v101 - v104;
            v109 = v108 >= v107 ? v107 : v108;
            if (v109 > 0.01)
            {
              v110 = v378;
              if (v378 < v379)
              {
                *v378 = v109;
                v378 = v110 + 1;
                if (v95 >= v359)
                  goto LABEL_145;
LABEL_99:
                *(_DWORD *)v95 = v98;
                v97 = (uint64_t)(v95 + 4);
                v91 = (_QWORD *)((char *)this + 360);
LABEL_100:
                v371 = (char *)v97;
                v95 = (char *)v97;
                goto LABEL_101;
              }
              v354 = v95;
              v111 = (double *)v377;
              v112 = (char *)v378 - (_BYTE *)v377;
              v113 = ((char *)v378 - (_BYTE *)v377) >> 3;
              v114 = v113 + 1;
              if ((unint64_t)(v113 + 1) >> 61)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v115 = (char *)v379 - (_BYTE *)v377;
              if (((char *)v379 - (_BYTE *)v377) >> 2 > v114)
                v114 = v115 >> 2;
              if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFF8)
                v116 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v116 = v114;
              if (v116)
              {
                if (v116 >> 61)
                  goto LABEL_459;
                v117 = v116;
                v118 = (char *)operator new(8 * v116);
                v116 = v117;
                v119 = (double *)&v118[8 * v113];
                *v119 = v109;
                v120 = (uint64_t)(v119 + 1);
                if (v110 != v111)
                {
LABEL_133:
                  v121 = (char *)(v110 - 1) - (char *)v111;
                  if (v121 < 0x58)
                  {
                    v95 = v354;
                    goto LABEL_141;
                  }
                  v122 = (char *)v110 - &v118[v112];
                  v95 = v354;
                  if (v122 < 0x20)
                    goto LABEL_489;
                  v123 = (v121 >> 3) + 1;
                  v124 = 8 * (v123 & 0x3FFFFFFFFFFFFFFCLL);
                  v125 = &v110[v124 / 0xFFFFFFFFFFFFFFF8];
                  v119 = (double *)((char *)v119 - v124);
                  v126 = &v118[8 * v113 - 16];
                  v127 = v110 - 2;
                  v128 = v123 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v129 = *(_OWORD *)v127;
                    *((_OWORD *)v126 - 1) = *((_OWORD *)v127 - 1);
                    *(_OWORD *)v126 = v129;
                    v126 -= 32;
                    v127 -= 4;
                    v128 -= 4;
                  }
                  while (v128);
                  v110 = v125;
                  if (v123 != (v123 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_489:
                    do
                    {
LABEL_141:
                      v130 = *((_QWORD *)v110-- - 1);
                      *((_QWORD *)v119-- - 1) = v130;
                    }
                    while (v110 != v111);
                  }
LABEL_142:
                  v377 = v119;
                  v378 = (double *)v120;
                  v379 = (double *)&v118[8 * v116];
                  if (v111)
                    operator delete(v111);
                  v45 = (char *)this + 840;
                  v378 = (double *)v120;
                  if (v95 < v359)
                    goto LABEL_99;
LABEL_145:
                  v131 = (v95 - v94) >> 2;
                  v132 = v131 + 1;
                  if ((unint64_t)(v131 + 1) >> 62)
                    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                  if ((v359 - v94) >> 1 > v132)
                    v132 = (v359 - v94) >> 1;
                  if ((unint64_t)(v359 - v94) >= 0x7FFFFFFFFFFFFFFCLL)
                    v133 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v133 = v132;
                  if (v133)
                  {
                    if (v133 >> 62)
LABEL_459:
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    v134 = v133;
                    v135 = operator new(4 * v133);
                    v133 = v134;
                    v136 = (int *)&v135[4 * v131];
                    *v136 = v98;
                    v97 = (uint64_t)(v136 + 1);
                    if (v95 != v94)
                    {
LABEL_154:
                      v137 = v95 - 4 - v94;
                      if (v137 < 0xBC
                        || &v135[v95 - v94 - 4 - (v137 & 0xFFFFFFFFFFFFFFFCLL)] > &v135[v95 - v94 - 4]
                        || &v95[-(v137 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v95 - 4
                        || (unint64_t)(v94 - v135) < 0x20)
                      {
                        v138 = v95;
                        v91 = (_QWORD *)((char *)this + 360);
                      }
                      else
                      {
                        v140 = (v137 >> 2) + 1;
                        v141 = 4 * (v140 & 0x7FFFFFFFFFFFFFF8);
                        v138 = &v95[-v141];
                        v136 = (int *)((char *)v136 - v141);
                        v142 = &v135[4 * v131 - 16];
                        v143 = v95 - 16;
                        v144 = v140 & 0x7FFFFFFFFFFFFFF8;
                        v91 = (_QWORD *)((char *)this + 360);
                        do
                        {
                          v145 = *(_OWORD *)v143;
                          *(v142 - 1) = *((_OWORD *)v143 - 1);
                          *v142 = v145;
                          v142 -= 2;
                          v143 -= 32;
                          v144 -= 8;
                        }
                        while (v144);
                        if (v140 == (v140 & 0x7FFFFFFFFFFFFFF8))
                        {
LABEL_157:
                          v370 = v136;
                          v371 = (char *)v97;
                          v359 = &v135[4 * v133];
                          v372 = v359;
                          if (v94)
                            goto LABEL_158;
                          goto LABEL_159;
                        }
                      }
                      do
                      {
                        v139 = *((_DWORD *)v138 - 1);
                        v138 -= 4;
                        *--v136 = v139;
                      }
                      while (v138 != v94);
                      goto LABEL_157;
                    }
                  }
                  else
                  {
                    v135 = 0;
                    v136 = (int *)(4 * v131);
                    *(_DWORD *)(4 * v131) = v98;
                    v97 = 4 * v131 + 4;
                    if (v95 != v94)
                      goto LABEL_154;
                  }
                  v91 = (_QWORD *)((char *)this + 360);
                  v370 = v136;
                  v371 = (char *)v97;
                  v359 = &v135[4 * v133];
                  v372 = v359;
                  if (v94)
LABEL_158:
                    operator delete(v94);
LABEL_159:
                  v94 = (char *)v136;
                  v45 = (char *)this + 840;
                  goto LABEL_100;
                }
              }
              else
              {
                v118 = 0;
                v119 = (double *)(8 * v113);
                *(double *)(8 * v113) = v109;
                v120 = 8 * v113 + 8;
                if (v110 != v111)
                  goto LABEL_133;
              }
              v95 = v354;
              goto LABEL_142;
            }
          }
        }
LABEL_101:
        ++v92;
      }
      while (v92 != v93);
      v146 = v370;
      if (v370 == (int *)v95)
      {
        v166 = 13;
        v167 = v357;
        if (v95)
          goto LABEL_304;
        goto LABEL_305;
      }
      v147 = v377;
      v400 = 0;
      v401[0] = 0;
      v399 = 0;
      v148 = (char *)v378 - (_BYTE *)v377;
      if (v378 == v377)
      {
        v168 = 0;
        goto LABEL_198;
      }
      if (v148 < 0)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v149 = (unint64_t)operator new((char *)v378 - (_BYTE *)v377);
      v150 = v148 >> 3;
      v399 = (uint64_t *)v149;
      v400 = (uint64_t *)v149;
      v401[0] = v149 + 8 * (v148 >> 3);
      memmove((void *)v149, v147, v148);
      v400 = (uint64_t *)(v149 + 8 * (v148 >> 3));
      if ((unint64_t)v148 < 9)
      {
        v400 = (uint64_t *)v149;
        std::vector<double>::shrink_to_fit((uint64_t)&v399);
        goto LABEL_197;
      }
      v151 = 0;
      v152 = 8 * v150;
      v153 = 0.0;
      do
      {
        v153 = v153 + *(double *)(v149 + v151);
        v151 += 8;
      }
      while (v152 != v151);
      if (v148 >= 1)
      {
        v154 = (v148 & 0xFFFFFFFFFFFFFFF8) + v149;
        if (v154 <= v149 + 8)
          v154 = v149 + 8;
        v155 = v154 + ~v149;
        v156 = (double *)v149;
        if (v155 < 0x18)
          goto LABEL_490;
        v157 = (v155 >> 3) + 1;
        v156 = (double *)(v149 + 8 * (v157 & 0x3FFFFFFFFFFFFFFCLL));
        v158 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v153, 0);
        v159 = (float64x2_t *)(v149 + 16);
        v160 = v157 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v161 = vdivq_f64(*v159, v158);
          v159[-1] = vdivq_f64(v159[-1], v158);
          *v159 = v161;
          v159 += 2;
          v160 -= 4;
        }
        while (v160);
        if (v157 != (v157 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_490:
          do
          {
            *v156 = *v156 / v153;
            ++v156;
          }
          while ((unint64_t)v156 < v149 + 8 * (v148 >> 3));
        }
      }
      v402 = 0;
      v403 = 0;
      v404 = 0;
      v162 = v150 - 1;
      if (v150 == 1)
      {
        v164 = 0;
        v165 = 0;
        v163 = 0;
        if (!v162)
          goto LABEL_196;
LABEL_193:
        v169 = *(double *)v149;
        *v163 = *(double *)v149;
        if (v162 != 1)
        {
          v170 = (double *)(v149 + 8);
          v171 = v152 - 16;
          v172 = v163 + 1;
          do
          {
            v173 = *v170++;
            v169 = v169 + v173;
            *v172++ = v169;
            v171 -= 8;
          }
          while (v171);
        }
        goto LABEL_196;
      }
      if (v162 >> 61)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v163 = (double *)operator new(8 * v162);
      v164 = &v163[v162];
      bzero(v163, 8 * v162);
      v165 = (uint64_t *)v164;
      if (v162)
        goto LABEL_193;
LABEL_196:
      v399 = (uint64_t *)v163;
      v400 = v165;
      v401[0] = v164;
      operator delete((void *)v149);
LABEL_197:
      v168 = v399;
      v45 = (char *)this + 840;
LABEL_198:
      v174 = *((_QWORD *)this + 2507);
      v175 = v400;
      v176 = *(_QWORD *)(v174 + 2496);
      v177 = (v176 + 1) % 0x270uLL;
      v178 = 4 * v176;
      v179 = 4 * v177;
      v180 = *(_DWORD *)(v174 + 4 * ((v176 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(v174 + 4 * v177) & 0x7FFFFFFE | *(_DWORD *)(v174 + 4 * v176) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v174 + 4 * v177) << 31) >> 31) & 0x9908B0DF;
      *(_DWORD *)(v174 + v178) = v180;
      if (v177 == 623)
        v181 = 0;
      else
        v181 = v177 + 1;
      v182 = 397;
      if (v177 >= 0xE3)
        v182 = -227;
      v183 = *(_DWORD *)(v174 + 4 * (v182 + v177)) ^ ((*(_DWORD *)(v174 + 4 * v181) & 0x7FFFFFFE | *(_DWORD *)(v174 + 4 * v177) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v174 + 4 * v181) << 31) >> 31) & 0x9908B0DF;
      *(_DWORD *)(v174 + v179) = v183;
      *(_QWORD *)(v174 + 2496) = v181;
      v184 = (char *)v175 - (char *)v168;
      if (v175 != v168)
      {
        v185 = ((v180 ^ (v180 >> 11)) << 7) & 0x9D2C5680 ^ v180 ^ (v180 >> 11);
        v186 = (double)((v185 << 15) & 0xEFC60000 ^ v185 ^ (((v185 << 15) & 0xEFC60000 ^ v185) >> 18));
        v187 = ((v183 ^ (v183 >> 11)) << 7) & 0x9D2C5680 ^ v183 ^ (v183 >> 11);
        v188 = (v186
              + (double)((v187 << 15) & 0xEFC60000 ^ v187 ^ (((v187 << 15) & 0xEFC60000 ^ v187) >> 18)) * 4294967300.0)
             * 5.42101086e-20
             + 0.0;
        v189 = v184 >> 3;
        v175 = v168;
        do
        {
          v190 = v189 >> 1;
          v191 = (double *)&v175[v189 >> 1];
          v193 = *v191;
          v192 = v191 + 1;
          v189 += ~(v189 >> 1);
          if (v188 < v193)
            v189 = v190;
          else
            v175 = (uint64_t *)v192;
        }
        while (v189);
      }
      v194 = v146[(int)((unint64_t)((char *)v175 - (char *)v168) >> 3)];
      if (v168)
      {
        v400 = v168;
        operator delete(v168);
      }
      v367 = 0;
      v368 = 0;
      v369 = 0;
      v378 = (double *)v377;
      v352 = v194;
      SparseColumn = (_QWORD *)operations_research::glop::LinearProgram::GetSparseColumn(v91, v194);
      v196 = SparseColumn[1];
      if (v196 < 1)
      {
        v166 = 13;
        v167 = v357;
        goto LABEL_303;
      }
      __p = 0;
      v355 = 0;
      v360 = 0;
      v197 = 0;
      v198 = SparseColumn[3];
      v199 = SparseColumn[4];
      v200 = v352;
      v351 = v199;
      while (2)
      {
        v202 = *(_DWORD *)(v198 + 4 * v197);
        v203 = operations_research::glop::RevisedSimplex::GetConstraintStatus((uint64_t)v45, v202);
        if ((v203 | 4) == 4)
          goto LABEL_215;
        v204 = v202;
        v205 = (unint64_t)v202 >> 6;
        v206 = *((_QWORD *)v376[0] + v205);
        if ((v206 & (1 << v202)) != 0)
          goto LABEL_215;
        *((_QWORD *)v376[0] + v205) = v206 | (1 << v202);
        if ((v203 & 0xFFFFFFFD) != 1)
        {
          if (v203 > 2)
            goto LABEL_215;
          LOBYTE(v209) = 0;
LABEL_229:
          v211 = v396[v200];
          if (*(double *)(v199 + 8 * v197) <= 0.0)
          {
            if (v211 < 0)
              LOBYTE(v209) = 1;
            if (!v209)
              goto LABEL_215;
          }
          else
          {
            if (v211 > 0)
              LOBYTE(v209) = 1;
            if (!v209)
              goto LABEL_215;
          }
LABEL_237:
          v212 = v360;
          if (v360 < v355)
          {
            *v360++ = v202;
            v368 = (uint64_t)(v212 + 1);
            v213 = v379;
            v214 = v380;
            v215 = v378;
            if (v378 >= v379)
              goto LABEL_263;
LABEL_213:
            *v215 = *(double *)&v214[v204];
            v201 = (uint64_t)(v215 + 1);
            v199 = v351;
LABEL_214:
            v378 = (double *)v201;
            goto LABEL_215;
          }
          v216 = (char *)v360 - (char *)__p;
          v217 = v360 - __p;
          v218 = v217 + 1;
          if ((unint64_t)(v217 + 1) >> 62)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          if (((char *)v355 - (char *)__p) >> 1 > v218)
            v218 = ((char *)v355 - (char *)__p) >> 1;
          if ((unint64_t)((char *)v355 - (char *)__p) >= 0x7FFFFFFFFFFFFFFCLL)
            v219 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v219 = v218;
          if (v219)
          {
            if (v219 >> 62)
              goto LABEL_463;
            v220 = v219;
            v221 = (char *)operator new(4 * v219);
            v222 = v360;
            v219 = v220;
            v223 = (int *)&v221[4 * v217];
            *v223 = v202;
            v224 = (uint64_t)(v223 + 1);
            v225 = __p;
            if (v360 != __p)
            {
LABEL_249:
              v226 = v222 - 1;
              v227 = v222;
              v228 = (char *)(v222 - 1) - (char *)v225;
              if (v228 < 0xBC)
              {
                v229 = v227;
                goto LABEL_257;
              }
              if (&v221[v216 - 4 - (v228 & 0xFFFFFFFFFFFFFFFCLL)] <= &v221[v216 - 4]
                && (int *)((char *)v226 - (v228 & 0xFFFFFFFFFFFFFFFCLL)) <= v226
                && (unint64_t)((char *)v226 - &v221[v216] + 4) >= 0x20)
              {
                v252 = (v228 >> 2) + 1;
                v253 = 4 * (v252 & 0x7FFFFFFFFFFFFFF8);
                v229 = &v360[v253 / 0xFFFFFFFFFFFFFFFCLL];
                v223 = (int *)((char *)v223 - v253);
                v254 = &v221[4 * v217 - 16];
                v255 = v360 - 4;
                v256 = v252 & 0x7FFFFFFFFFFFFFF8;
                v225 = __p;
                do
                {
                  v257 = *(_OWORD *)v255;
                  *((_OWORD *)v254 - 1) = *((_OWORD *)v255 - 1);
                  *(_OWORD *)v254 = v257;
                  v254 -= 32;
                  v255 -= 8;
                  v256 -= 8;
                }
                while (v256);
                v45 = (char *)this + 840;
                if (v252 != (v252 & 0x7FFFFFFFFFFFFFF8))
                  goto LABEL_258;
              }
              else
              {
                v229 = v360;
LABEL_257:
                v45 = (char *)this + 840;
                v225 = __p;
                do
                {
LABEL_258:
                  v230 = *--v229;
                  *--v223 = v230;
                }
                while (v229 != v225);
              }
LABEL_259:
              v367 = v223;
              v368 = v224;
              v355 = (int *)&v221[4 * v219];
              v369 = v355;
              if (!v225)
              {
                __p = v223;
                v360 = (int *)v224;
                v368 = v224;
                v213 = v379;
                v214 = v380;
                v215 = v378;
                if (v378 >= v379)
                  goto LABEL_263;
                goto LABEL_213;
              }
              v231 = (int *)v224;
              operator delete(v225);
              __p = v223;
              v360 = v231;
              v368 = (uint64_t)v231;
              v213 = v379;
              v214 = v380;
              v215 = v378;
              if (v378 < v379)
                goto LABEL_213;
LABEL_263:
              v350 = v200;
              v232 = (double *)v377;
              v233 = (char *)v215 - (_BYTE *)v377;
              v234 = ((char *)v215 - (_BYTE *)v377) >> 3;
              v235 = v234 + 1;
              if ((unint64_t)(v234 + 1) >> 61)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v236 = (char *)v213 - (_BYTE *)v377;
              if (v236 >> 2 > v235)
                v235 = v236 >> 2;
              if ((unint64_t)v236 >= 0x7FFFFFFFFFFFFFF8)
                v237 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v237 = v235;
              if (v237)
              {
                v348 = (char *)v215 - (_BYTE *)v377;
                if (v237 >> 61)
LABEL_463:
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v238 = ((char *)v215 - (_BYTE *)v377) >> 3;
                v239 = v214;
                v240 = v237;
                v241 = operator new(8 * v237);
                v237 = v240;
                v234 = v238;
                v233 = v348;
                v242 = &v241[8 * v238];
                *v242 = v239[v204];
                v201 = (uint64_t)(v242 + 1);
                if (v215 != v232)
                {
LABEL_272:
                  v243 = (char *)(v215 - 1) - (char *)v232;
                  v199 = v351;
                  if (v243 < 0x58)
                  {
                    v200 = v350;
                    goto LABEL_280;
                  }
                  v200 = v350;
                  if ((unint64_t)((char *)v215 - &v241[v233]) < 0x20)
                    goto LABEL_491;
                  v244 = (v243 >> 3) + 1;
                  v245 = 8 * (v244 & 0x3FFFFFFFFFFFFFFCLL);
                  v246 = &v215[v245 / 0xFFFFFFFFFFFFFFF8];
                  v242 = (_QWORD *)((char *)v242 - v245);
                  v247 = &v241[8 * v234 - 16];
                  v248 = v215 - 2;
                  v249 = v244 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v250 = *(_OWORD *)v248;
                    *(v247 - 1) = *((_OWORD *)v248 - 1);
                    *v247 = v250;
                    v247 -= 2;
                    v248 -= 4;
                    v249 -= 4;
                  }
                  while (v249);
                  v215 = v246;
                  if (v244 != (v244 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_491:
                    do
                    {
LABEL_280:
                      v251 = *((_QWORD *)v215-- - 1);
                      *--v242 = v251;
                    }
                    while (v215 != v232);
                  }
LABEL_281:
                  v377 = v242;
                  v378 = (double *)v201;
                  v379 = (double *)&v241[8 * v237];
                  if (v232)
                    operator delete(v232);
                  v45 = (char *)this + 840;
                  goto LABEL_214;
                }
              }
              else
              {
                v241 = 0;
                v242 = (_QWORD *)(8 * v234);
                *(_QWORD *)(8 * v234) = v214[v204];
                v201 = 8 * v234 + 8;
                if (v215 != v232)
                  goto LABEL_272;
              }
              v200 = v350;
              v199 = v351;
              goto LABEL_281;
            }
          }
          else
          {
            v221 = 0;
            v222 = v360;
            v223 = (int *)(4 * v217);
            *(_DWORD *)(4 * v217) = v202;
            v224 = 4 * v217 + 4;
            v225 = __p;
            if (v360 != __p)
              goto LABEL_249;
          }
          v45 = (char *)this + 840;
          goto LABEL_259;
        }
        v207 = v396[v200];
        v208 = v207 <= 0;
        v209 = v207 < 0;
        v210 = !v208;
        if (*(double *)(v199 + 8 * v197) <= 0.0)
          v209 = v210;
        if (v203 < 3)
          goto LABEL_229;
        if (v209)
          goto LABEL_237;
LABEL_215:
        if (++v197 != v196)
          continue;
        break;
      }
      v258 = v367;
      v259 = v360;
      if (v367 == v360)
      {
        v166 = 13;
        v91 = (_QWORD *)((char *)this + 360);
        v167 = v357;
        if (!v360)
          goto LABEL_303;
        goto LABEL_302;
      }
      v260 = v377;
      v403 = 0;
      v404 = 0;
      v402 = 0;
      v261 = (char *)v378 - (_BYTE *)v377;
      if (v378 != v377)
      {
        if (v261 < 0)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v402 = (char *)operator new((char *)v378 - (_BYTE *)v377);
        v403 = (uint64_t)v402;
        v262 = (uint64_t *)&v402[8 * (v261 >> 3)];
        v404 = v262;
        memmove(v402, v260, v261);
        v403 = (uint64_t)v262;
        v45 = (char *)this + 840;
      }
      std::discrete_distribution<int>::param_type::__init((double **)&v402);
      v264 = v258[(int)std::discrete_distribution<int>::operator()<operations_research::sat::ModelRandomGenerator>((uint64_t)&v402, *((_QWORD *)this + 2507), (double **)&v402)];
      if (v402)
      {
        v403 = (uint64_t)v402;
        operator delete(v402);
      }
      v265 = v264;
      v266 = *((_QWORD *)this + 39) + 40 * v264;
      v267 = *(_QWORD *)(v266 + 16);
      v268 = *(_QWORD *)(v266 + 24);
      if (v267 == v268)
      {
LABEL_297:
        v366 = 0;
        LODWORD(v402) = 0;
LABEL_298:
        v399 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)&v366, (int)&v402, "to_combine_coeff != 0");
        if (!v399)
        {
          v269 = v366;
          goto LABEL_309;
        }
        v343 = google::LogMessageFatal::LogMessageFatal((unint64_t *)&v402, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 1084, &v399);
        google::LogMessage::stream((google::LogMessage *)v343);
LABEL_469:
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v402);
      }
      while (*(_DWORD *)v267 != v352)
      {
        v267 += 12;
        if (v267 == v268)
          goto LABEL_297;
      }
      v366 = *(_QWORD *)(v267 + 4);
      v269 = v366;
      LODWORD(v402) = 0;
      if (!v366)
        goto LABEL_298;
LABEL_309:
      v365 = v396[v200];
      v270 = v365;
      LODWORD(v402) = 0;
      if (v365)
      {
        if (v269 > 0)
          goto LABEL_311;
LABEL_319:
        v269 = -v269;
        if (v269 >= 0)
          v271 = v269;
        else
          v271 = -v269;
        if (!v270)
          goto LABEL_323;
LABEL_312:
        if (v270 >= 0)
          v272 = v270;
        else
          v272 = -v270;
        do
        {
          v273 = v272;
          v272 = v271 % v272;
          v271 = v273;
        }
        while (v272);
        v364 = v273;
        v271 = v273;
        goto LABEL_324;
      }
      v399 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)&v365, (int)&v402, "mult2 != 0");
      if (v399)
      {
        v344 = google::LogMessageFatal::LogMessageFatal((unint64_t *)&v402, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 1088, &v399);
        google::LogMessage::stream((google::LogMessage *)v344);
        goto LABEL_469;
      }
      v270 = v365;
      if (v269 <= 0)
        goto LABEL_319;
LABEL_311:
      v270 = -v270;
      v365 = v270;
      v271 = v269;
      if (v270)
        goto LABEL_312;
LABEL_323:
      v364 = v271;
      LODWORD(v402) = 0;
      if (!v269)
      {
        v399 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)&v364, (int)&v402, "gcd != 0");
        if (!v399)
        {
          v271 = v364;
          v270 = v365;
          goto LABEL_324;
        }
        v345 = google::LogMessageFatal::LogMessageFatal((unint64_t *)&v402, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 1096, &v399);
        google::LogMessage::stream((google::LogMessage *)v345);
        goto LABEL_469;
      }
LABEL_324:
      v274 = v269 / v271;
      if (v269 / v271 >= 0)
        v275 = v269 / v271;
      else
        v275 = -v274;
      v276 = 63 - __clz(v275);
      if (v274)
        v277 = v276;
      else
        v277 = 0;
      if (v96 >= 0)
        v278 = v96;
      else
        v278 = -v96;
      v279 = 63 - __clz(v278);
      v280 = v270 / v271;
      v365 = v270 / v271;
      if (v96)
        v281 = v279;
      else
        v281 = 0;
      v282 = v277 + v281;
      if (v277 + v281 <= 61)
      {
        v283 = v275 * v96;
        goto LABEL_338;
      }
      v283 = 0;
      if (v96)
      {
        v167 = v357;
        if (v274)
        {
          if (v282 <= 0x3E)
          {
            v283 = v275 * v278;
            if (v275 * v278 >= 0x7FFFFFFFFFFFFFFFLL)
              v283 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else
          {
            v283 = 0x7FFFFFFFFFFFFFFFLL;
          }
        }
      }
      else
      {
LABEL_338:
        v167 = v357;
      }
      if (v280 >= 0)
        v284 = v280;
      else
        v284 = -v280;
      v285 = 63 - __clz(v284);
      v286 = *(_QWORD *)(*((_QWORD *)this + 42) + 8 * v264);
      if (!v280)
        v285 = 0;
      if (v286 >= 0)
        v287 = *(_QWORD *)(*((_QWORD *)this + 42) + 8 * v264);
      else
        v287 = -v286;
      v288 = 63 - __clz(v287);
      if (!v286)
        v288 = 0;
      v289 = v288 + v285;
      v290 = __OFSUB__(v289, 61);
      if (v289 > 61)
      {
        v291 = 0;
        if (v280)
        {
          if (v286)
          {
            v291 = ((unint64_t)v286 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
            v290 = __OFSUB__(v289, 62);
            if (v289 <= 0x3E)
            {
              v296 = v287 * v284;
              v290 = __OFSUB__(v296, v291);
              if (v296 < v291)
              {
                v290 = 0;
                if (v291 >= 0)
                  v291 = v296;
                else
                  v291 = -(uint64_t)v296;
              }
            }
          }
        }
      }
      else
      {
        v291 = v286 * v284;
      }
      v292 = v291 + v283;
      v293 = (v291 + v283) ^ v283;
      v294 = (v291 + v283) ^ v291;
      v295 = (v283 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
      if (((v293 & v294 & 0x8000000000000000) != 0) == v290)
        v295 = v292;
      if (v295 == 0x7FFFFFFFFFFFFFFFLL)
      {
        v166 = 13;
        v91 = (_QWORD *)((char *)this + 360);
        v259 = v367;
        if (!v367)
          goto LABEL_303;
        goto LABEL_302;
      }
      v297 = (char *)v373;
      v298 = v374;
      v299 = (char *)v373;
      if (v373 != v374)
      {
        do
        {
          *(_QWORD *)(v299 + 4) *= v274;
          v299 += 12;
        }
        while (v299 != v298);
        v280 = v365;
      }
      if (v298 >= v375)
      {
        v301 = 0xAAAAAAAAAAAAAAABLL * ((v298 - v297) >> 2) + 1;
        if (v301 > 0x1555555555555555)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((v375 - v297) >> 2) > v301)
          v301 = 0x5555555555555556 * ((v375 - v297) >> 2);
        if (0xAAAAAAAAAAAAAAABLL * ((v375 - v297) >> 2) >= 0xAAAAAAAAAAAAAAALL)
          v302 = 0x1555555555555555;
        else
          v302 = v301;
        if (v302)
        {
          if (v302 > 0x1555555555555555)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v303 = (char *)operator new(12 * v302);
        }
        else
        {
          v303 = 0;
        }
        v304 = &v303[4 * ((v298 - v297) >> 2)];
        *(_DWORD *)v304 = v264;
        *(_QWORD *)(v304 + 4) = v280;
        v305 = v304;
        if (v297 == v298)
        {
          v91 = (_QWORD *)((char *)this + 360);
          v167 = v357;
        }
        else
        {
          v91 = (_QWORD *)((char *)this + 360);
          v167 = v357;
          do
          {
            v306 = *(_QWORD *)(v298 - 12);
            v298 -= 12;
            v307 = *((_DWORD *)v298 + 2);
            *(_QWORD *)(v305 - 12) = v306;
            v305 -= 12;
            *((_DWORD *)v305 + 2) = v307;
          }
          while (v298 != v297);
          v297 = (char *)v373;
        }
        v300 = v304 + 12;
        v373 = v305;
        v374 = v304 + 12;
        v375 = &v303[12 * v302];
        v45 = (char *)this + 840;
        if (v297)
          operator delete(v297);
      }
      else
      {
        *(_DWORD *)v298 = v264;
        *(_QWORD *)(v298 + 4) = v280;
        v300 = v298 + 12;
        v91 = (_QWORD *)((char *)this + 360);
        v45 = (char *)this + 840;
      }
      v374 = v300;
      v402 = "MIR_";
      v403 = 4;
      v308 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v167 + 2, v401, v263);
      v399 = v401;
      v400 = (uint64_t *)(v308 - (_BYTE *)v401);
      absl::lts_2020_02_25::StrCat((uint64_t)&v402, (uint64_t)&v399, &v363);
      v309 = operations_research::sat::LinearProgrammingConstraint::AddCutFromConstraints((uint64_t)this, (uint64_t)&v363, (uint64_t *)&v373);
      v310 = v309;
      if (SHIBYTE(v363.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v363.__r_.__value_.__l.__data_);
        if (v167 == 4)
          v312 = 1;
        else
          v312 = v310;
        if ((v312 & 1) != 0)
        {
LABEL_397:
          v166 = 13;
          v259 = v367;
          if (!v367)
            goto LABEL_303;
          goto LABEL_302;
        }
      }
      else
      {
        v311 = v167 == 4 || v309;
        if ((v311 & 1) != 0)
          goto LABEL_397;
      }
      v313 = (int *)v393;
      v314 = (int *)v394;
      if (v393 != v394)
      {
        v315 = v396;
        do
        {
          v316 = *v313++;
          v315[v316] *= v274;
        }
        while (v313 != v314);
      }
      v317 = *((_QWORD *)this + 39) + 40 * v265;
      v319 = *(int **)(v317 + 16);
      v318 = *(int **)(v317 + 24);
      if (v319 != v318)
      {
        v361 = *(int **)(v317 + 24);
        while (2)
        {
          v321 = *v319;
          v322 = *(_QWORD *)(v319 + 1);
          v323 = (unint64_t)*v319 >> 6;
          v324 = *((_QWORD *)v387 + v323);
          if ((v324 & (1 << *v319)) != 0)
            goto LABEL_410;
          *((_QWORD *)v387 + v323) = v324 | (1 << v321);
          v325 = v394;
          if (v394 >= v395)
          {
            v326 = (char *)v393;
            v327 = v394 - (_BYTE *)v393;
            v328 = (v394 - (_BYTE *)v393) >> 2;
            v329 = v328 + 1;
            if ((unint64_t)(v328 + 1) >> 62)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v330 = v395 - (_BYTE *)v393;
            if ((v395 - (_BYTE *)v393) >> 1 > v329)
              v329 = v330 >> 1;
            if ((unint64_t)v330 >= 0x7FFFFFFFFFFFFFFCLL)
              v331 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v331 = v329;
            if (v331)
            {
              if (v331 >> 62)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v332 = (char *)operator new(4 * v331);
              v333 = &v332[4 * v328];
              *(_DWORD *)v333 = v321;
              v320 = (uint64_t)(v333 + 4);
              if (v325 == v326)
              {
LABEL_430:
                v393 = v333;
                v394 = (char *)v320;
                v395 = &v332[4 * v331];
                if (v326)
                  operator delete(v326);
                v45 = (char *)this + 840;
                v318 = v361;
LABEL_409:
                v394 = (char *)v320;
                v91 = (_QWORD *)((char *)this + 360);
LABEL_410:
                v396[v321] += v365 * v322;
                v319 += 3;
                if (v319 == v318)
                {
                  v166 = 0;
                  v167 = v357;
                  v259 = v367;
                  if (!v367)
                    goto LABEL_303;
LABEL_302:
                  v368 = (uint64_t)v259;
                  operator delete(v259);
                  goto LABEL_303;
                }
                continue;
              }
            }
            else
            {
              v332 = 0;
              v333 = (char *)(4 * v328);
              *(_DWORD *)(4 * v328) = v321;
              v320 = 4 * v328 + 4;
              if (v325 == v326)
                goto LABEL_430;
            }
            v334 = v325 - 4 - v326;
            if (v334 < 0x2C)
              goto LABEL_492;
            if ((unint64_t)(v325 - &v332[v327]) < 0x20)
              goto LABEL_492;
            v335 = (v334 >> 2) + 1;
            v336 = 4 * (v335 & 0x7FFFFFFFFFFFFFF8);
            v337 = &v325[-v336];
            v333 -= v336;
            v338 = &v332[4 * v328 - 16];
            v339 = v325 - 16;
            v340 = v335 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v341 = *(_OWORD *)v339;
              *((_OWORD *)v338 - 1) = *((_OWORD *)v339 - 1);
              *(_OWORD *)v338 = v341;
              v338 -= 32;
              v339 -= 32;
              v340 -= 8;
            }
            while (v340);
            v325 = v337;
            if (v335 != (v335 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_492:
              do
              {
                v342 = *((_DWORD *)v325 - 1);
                v325 -= 4;
                *((_DWORD *)v333 - 1) = v342;
                v333 -= 4;
              }
              while (v325 != v326);
            }
            goto LABEL_430;
          }
          break;
        }
        *(_DWORD *)v394 = v321;
        v320 = (uint64_t)(v325 + 4);
        goto LABEL_409;
      }
      v166 = 0;
      v259 = v367;
      if (v367)
        goto LABEL_302;
LABEL_303:
      v95 = (char *)v370;
      if (v370)
      {
LABEL_304:
        v371 = v95;
        operator delete(v95);
      }
LABEL_305:
      if (!v166)
      {
        v90 = v167 + 1;
        if (v167 < 4)
          continue;
      }
      goto LABEL_56;
    }
  }
LABEL_443:
  if (v377)
  {
    v378 = (double *)v377;
    operator delete(v377);
  }
  if (v380)
    operator delete(v380);
  if (v383)
  {
    v384 = (char *)v383;
    operator delete(v383);
  }
  if (v393)
  {
    v394 = (char *)v393;
    operator delete(v393);
  }
  if (v387)
  {
    v388 = (char *)v387;
    operator delete(v387);
  }
  if (v396)
    operator delete(v396);
}

void sub_22DB97FA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a54);
}

void sub_22DB97FA8()
{
  uint64_t v0;

  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 176));
}

void sub_22DB97FB0()
{
  uint64_t v0;

  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 176));
}

void sub_22DB97FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,_Unwind_Exception *exception_object,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61)
{
  uint64_t v61;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  _Unwind_Exception *v67;
  void *v68;
  void *v69;
  void *v70;

  if (__p)
    operator delete(__p);
  if (a36)
  {
    operator delete(a36);
    v63 = a39;
    if (!a39)
    {
LABEL_5:
      v64 = a42;
      if (!a42)
        goto LABEL_6;
      goto LABEL_15;
    }
  }
  else
  {
    v63 = a39;
    if (!a39)
      goto LABEL_5;
  }
  operator delete(v63);
  v64 = a42;
  if (!a42)
  {
LABEL_6:
    v65 = a45;
    if (!a45)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  operator delete(v64);
  v65 = a45;
  if (!a45)
  {
LABEL_7:
    v66 = a48;
    if (!a48)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  operator delete(v65);
  v66 = a48;
  if (!a48)
  {
LABEL_8:
    v67 = exception_object;
    if (!exception_object)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  operator delete(v66);
  v67 = exception_object;
  if (!exception_object)
  {
LABEL_9:
    v68 = a61;
    if (!a61)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(v67);
  v68 = a61;
  if (!a61)
  {
LABEL_10:
    v69 = a55;
    if (!a55)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  operator delete(v68);
  v69 = a55;
  if (!a55)
  {
LABEL_11:
    v70 = *(void **)(v61 - 248);
    if (!v70)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  operator delete(v69);
  v70 = *(void **)(v61 - 248);
  if (!v70)
LABEL_12:
    _Unwind_Resume(a1);
LABEL_21:
  operator delete(v70);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::LinearProgrammingConstraint::UpdateSimplexIterationLimit(uint64_t this, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  operations_research::glop::RevisedSimplex *v6;
  int ProblemNumCols;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(int *)(*(_QWORD *)(this + 20000) + 396) >= 2)
  {
    v5 = this;
    v6 = (operations_research::glop::RevisedSimplex *)(this + 840);
    ProblemNumCols = operations_research::glop::RevisedSimplex::GetProblemNumCols((operations_research::glop::RevisedSimplex *)(this + 840));
    if (ProblemNumCols < 1)
    {
      v9 = 0;
    }
    else
    {
      v8 = 0;
      v9 = 0;
      v10 = ProblemNumCols;
      do
      {
        if (operations_research::glop::RevisedSimplex::GetReducedCost((uint64_t)v6, v8) == 0.0
          && operations_research::glop::RevisedSimplex::GetVariableStatus((uint64_t)v6, v8))
        {
          ++v9;
        }
        ++v8;
      }
      while (v10 != v8);
    }
    v11 = (_BYTE *)(v5 + 20688);
    *(_BYTE *)(v5 + 20688) = (double)(int)operations_research::glop::RevisedSimplex::GetProblemNumCols(v6) * 0.3 <= (double)v9;
    this = operations_research::glop::RevisedSimplex::GetProblemNumCols(v6);
    if ((int)this >= 1)
    {
      v12 = (int)this;
      v13 = 10 * v9 / (int)this;
      this = operations_research::glop::RevisedSimplex::GetProblemStatus(v6);
      if ((_DWORD)this == 8)
      {
        if (*v11)
        {
          if (v13 <= 1)
            v14 = 1;
          else
            v14 = v13;
LABEL_22:
          v15 = *(_QWORD *)(v5 + 19352) / v14;
          goto LABEL_23;
        }
        v15 = 2 * *(_QWORD *)(v5 + 19352);
      }
      else
      {
        this = operations_research::glop::RevisedSimplex::GetProblemStatus(v6);
        if (!(_DWORD)this)
        {
          if (!*v11)
          {
            v15 = v12 / 0x28;
            goto LABEL_23;
          }
          v14 = 2 * v13;
          if (2 * v13 <= 1)
            v14 = 1;
          goto LABEL_22;
        }
        v15 = *(_QWORD *)(v5 + 19352);
      }
LABEL_23:
      if (v15 >= a3)
        v15 = a3;
      if (v15 <= a2)
        v15 = a2;
      *(_QWORD *)(v5 + 19352) = v15;
    }
  }
  return this;
}

uint64_t operations_research::sat::LinearProgrammingConstraint::Propagate(operations_research::sat::LinearProgrammingConstraint *this)
{
  char v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t State;
  uint64_t v28;
  const void *v29;
  size_t v30;
  size_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double ObjectiveValue;
  int64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *DualRayRowCombination;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *ReducedCosts;
  uint64_t v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double ReducedCost;
  double v65;
  uint64_t v66;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  double v73;
  uint64_t v74;
  unint64_t v75;
  __int128 *v76;
  __int128 v77;
  int v78;
  _QWORD *v79;
  int v80;
  char v81;
  _QWORD *v82;
  uint64_t v83;
  int v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _BYTE *v88;
  __int128 v89;
  __int128 __p;
  size_t v91;
  _BYTE v92[16];
  int v93;
  int v94;
  int64x2_t v95;
  uint64_t v96;
  char v97;

  v3 = *((_QWORD *)this + 2491) - *((_QWORD *)this + 2490);
  if ((int)(v3 >> 2) >= 1)
  {
    v4 = 0;
    v5 = (v3 >> 2);
    v1 = 3;
    do
    {
      v6 = *(_DWORD *)(*((_QWORD *)this + 2490) + 4 * v4);
      v7 = *(_QWORD *)(*((_QWORD *)this + 2503) + 40);
      v8 = *(_QWORD *)(v7 + 12 * v6);
      v9 = (double)v8;
      if (v8 < (uint64_t)0x8000000000000003)
        v9 = -INFINITY;
      if (v8 <= 0x7FFFFFFFFFFFFFFDLL)
        v10 = v9;
      else
        v10 = INFINITY;
      v11 = *(_QWORD *)(v7 + 12 * (v6 ^ 1));
      v12 = (double)-v11;
      if (v11 > 0x7FFFFFFFFFFFFFFDLL)
        v12 = -INFINITY;
      if (v11 >= (uint64_t)0x8000000000000003)
        v13 = v12;
      else
        v13 = INFINITY;
      v14 = operations_research::glop::LpScalingHelper::VariableScalingFactor((uint64_t)this + 19360, v4);
      operations_research::glop::LinearProgram::SetVariableBounds((uint64_t)this + 360, v4++, v14 * v10, v14 * v13);
    }
    while (v5 != v4);
  }
  operations_research::glop::GlopParameters::GlopParameters((operations_research::glop::GlopParameters *)v92, (operations_research::sat::LinearProgrammingConstraint *)((char *)this + 12456));
  if ((*(_DWORD *)(*((_QWORD *)this + 2504) + 8) & 0xFFFFFFE) == 0)
  {
    v16 = v93 | 0x4000000;
    v93 |= 0x4000000u;
    v96 = 2000;
    if (!*(_BYTE *)(*((_QWORD *)this + 2500) + 503))
      goto LABEL_17;
    goto LABEL_16;
  }
  v15 = *((_QWORD *)this + 2419);
  v16 = v93 | 0x4000000;
  v93 |= 0x4000000u;
  v96 = v15;
  if (*(_BYTE *)(*((_QWORD *)this + 2500) + 503))
  {
LABEL_16:
    v97 = 0;
    v93 = v16 | 0x600;
    v94 |= 2u;
    v95 = vdupq_n_s64(0x3E7AD7F29ABCAF48uLL);
  }
LABEL_17:
  operations_research::glop::RevisedSimplex::SetParameters((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840), (const operations_research::glop::GlopParameters *)v92);
  operations_research::glop::RevisedSimplex::NotifyThatMatrixIsUnchangedForNextSolve((uint64_t)this + 840);
  if (!operations_research::sat::LinearProgrammingConstraint::SolveLp(this))
    goto LABEL_110;
  v88 = (char *)this + 19992;
  v17 = 1;
  if ((*(_DWORD *)(*((_QWORD *)this + 2504) + 8) & 0xFFFFFFE) == 0)
    v17 = *(_DWORD *)(*((_QWORD *)this + 2500) + 560);
  v18 = 0;
  while (!operations_research::glop::RevisedSimplex::GetProblemStatus((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840))
       && v18 < v17)
  {
    if (*((_QWORD *)this + 39) == *((_QWORD *)this + 40))
      goto LABEL_42;
    if ((*(_DWORD *)(*((_QWORD *)this + 2504) + 8) & 0xFFFFFFE) == 0)
    {
      v19 = *((_QWORD *)this + 2517);
      if (v19 < 0x80)
      {
        if (v19)
        {
          *((_QWORD *)this + 2516) = 0;
          memset(*((void **)this + 2514), 128, v19 + 8);
          *(_BYTE *)(*((_QWORD *)this + 2514) + *((_QWORD *)this + 2517)) = -1;
          v19 = *((_QWORD *)this + 2517);
          v20 = v19 - (v19 >> 3);
          if (v19 == 7)
            v20 = 6;
          *((_QWORD *)this + 2519) = v20 - *((_QWORD *)this + 2516);
        }
      }
      else
      {
        operator delete(*((void **)this + 2514));
        v19 = 0;
        *((_QWORD *)this + 2514) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
        *((_QWORD *)this + 2519) = 0;
        *((_QWORD *)this + 2516) = 0;
        *((_QWORD *)this + 2517) = 0;
        *((_QWORD *)this + 2515) = 0;
      }
      v21 = (unint64_t *)*((_QWORD *)this + 2518);
      if (v21)
      {
        v21[1] = 0;
        *v21 = v19;
        v21[4] = 0;
        v21[2] = 0;
        v22 = *((_QWORD *)this + 2500);
        if (*(_BYTE *)(v22 + 446))
        {
LABEL_34:
          operations_research::sat::LinearProgrammingConstraint::AddMirCuts(this);
          v22 = *((_QWORD *)this + 2500);
        }
      }
      else
      {
        v22 = *((_QWORD *)this + 2500);
        if (*(_BYTE *)(v22 + 446))
          goto LABEL_34;
      }
      if (*(_BYTE *)(v22 + 445))
        operations_research::sat::LinearProgrammingConstraint::AddCGCuts(this);
    }
    v23 = *((_QWORD *)this + 2553);
    v24 = *((_QWORD *)this + 2554);
    if (v23 != v24
      && ((*(_DWORD *)(*((_QWORD *)this + 2504) + 8) & 0xFFFFFFE) == 0 || !*(_BYTE *)(*((_QWORD *)this + 2500) + 123)))
    {
      do
      {
        v25 = *((_QWORD *)this + 2551);
        *(_QWORD *)&__p = (char *)this + 16;
        v26 = *(_QWORD *)(v23 + 48);
        if (!v26)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v26 + 48))(v26, v25, &__p);
        v23 += 56;
      }
      while (v23 != v24);
    }
LABEL_42:
    State = operations_research::glop::RevisedSimplex::GetState((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840));
    __p = 0uLL;
    v91 = 0;
    v29 = *(const void **)State;
    v28 = *(_QWORD *)(State + 8);
    v30 = v28 - *(_QWORD *)State;
    if (v28 != *(_QWORD *)State)
    {
      if ((v30 & 0x8000000000000000) != 0)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      *(_QWORD *)&__p = operator new(v28 - *(_QWORD *)State);
      *((_QWORD *)&__p + 1) = __p;
      v31 = __p + v30;
      v91 = __p + v30;
      memcpy((void *)__p, v29, v30);
      *((_QWORD *)&__p + 1) = v31;
    }
    if (!operations_research::sat::LinearConstraintManager::ChangeLp((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 16), *((uint64_t **)this + 2551), (uint64_t)&__p))
    {
      if ((*(_DWORD *)(*((_QWORD *)this + 2504) + 8) & 0xFFFFFFE) == 0)
        *((_BYTE *)this + 20400) = 1;
      v36 = 3;
      v37 = (void *)__p;
      if (!(_QWORD)__p)
        goto LABEL_21;
LABEL_62:
      *((_QWORD *)&__p + 1) = v37;
      operator delete(v37);
      goto LABEL_21;
    }
    operations_research::glop::RevisedSimplex::LoadStateForNextSolve((uint64_t)this + 840, (char **)&__p);
    if ((operations_research::sat::LinearProgrammingConstraint::CreateLpFromConstraintManager(this) & 1) == 0)
    {
      v38 = *((_QWORD *)this + 2503);
      v39 = *(_QWORD *)(v38 + 936);
      v40 = *(_QWORD *)(v39 + 96);
      v39 += 96;
      *(_QWORD *)(v39 + 48) = 0;
      *(_QWORD *)(v39 + 8) = v40;
      operations_research::sat::IntegerTrail::MergeReasonInto(v38, 0, 0, (void **)v39);
      v1 = 0;
      v36 = 1;
      v37 = (void *)__p;
      if (!(_QWORD)__p)
        goto LABEL_21;
      goto LABEL_62;
    }
    operations_research::glop::RevisedSimplex::GetObjectiveValue((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840));
    if (operations_research::sat::LinearProgrammingConstraint::SolveLp(this))
    {
      if (!operations_research::glop::RevisedSimplex::GetProblemStatus((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840))
        && *off_254079648[0] >= 1
        && (off_254079648[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)off_254079648, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)1)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)&v89, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 1251);
        v32 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v89);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Relaxation improvement ", 23);
        v33 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" -> ", 4);
        operations_research::glop::RevisedSimplex::GetObjectiveValue((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840));
        v34 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" diff: ", 7);
        operations_research::glop::RevisedSimplex::GetObjectiveValue((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840));
        v35 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" level: ", 8);
        std::ostream::operator<<();
        google::LogMessage::~LogMessage((google::LogMessage *)&v89);
      }
      v36 = 0;
      v37 = (void *)__p;
      if (!(_QWORD)__p)
        goto LABEL_21;
      goto LABEL_62;
    }
    v36 = 1;
    v1 = 1;
    v37 = (void *)__p;
    if ((_QWORD)__p)
      goto LABEL_62;
LABEL_21:
    ++v18;
    if (v36)
    {
      if (v36 != 3)
        goto LABEL_111;
      break;
    }
  }
  if (operations_research::glop::RevisedSimplex::GetProblemStatus((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840)) == 5)
  {
    if (*(_BYTE *)(*((_QWORD *)this + 2500) + 503))
    {
      if (!operations_research::sat::LinearProgrammingConstraint::FillExactDualRayReason(this))
        goto LABEL_110;
    }
    else
    {
      DualRayRowCombination = (_QWORD *)operations_research::glop::RevisedSimplex::GetDualRayRowCombination((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840));
      operations_research::sat::LinearProgrammingConstraint::FillReducedCostReasonIn(this, DualRayRowCombination, (uint64_t)this + 20208);
    }
    v48 = *((_QWORD *)this + 2503);
    v49 = (uint64_t *)*((_QWORD *)this + 2526);
    v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 2527) - (_QWORD)v49) >> 2);
    v51 = *(_QWORD *)(v48 + 936);
    v52 = *(_QWORD *)(v51 + 96);
    v51 += 96;
    *(_QWORD *)(v51 + 48) = 0;
    *(_QWORD *)(v51 + 8) = v52;
    operations_research::sat::IntegerTrail::MergeReasonInto(v48, v49, v50, (void **)v51);
LABEL_84:
    v1 = 0;
  }
  else
  {
    operations_research::sat::LinearProgrammingConstraint::UpdateSimplexIterationLimit((uint64_t)this, 10, 1000);
    if (*v88
      && (!operations_research::glop::RevisedSimplex::GetProblemStatus((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840))
       || operations_research::glop::RevisedSimplex::GetProblemStatus((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840)) == 8))
    {
      ObjectiveValue = operations_research::glop::RevisedSimplex::GetObjectiveValue((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840));
      v42 = vcvtpd_s64_f64(ObjectiveValue + -0.0001);
      if (*(_BYTE *)(*((_QWORD *)this + 2500) + 503))
      {
        if (!operations_research::sat::LinearProgrammingConstraint::ExactLpReasonning(this))
          goto LABEL_84;
        if (v42 > *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2503) + 40) + 12 * *(int *)((char *)this + 19993))
          && *off_254079650[0] >= 2
          && (off_254079650[0] != &google::kLogSiteUninitialized
           || google::InitVLOG3__((google *)off_254079650, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)2)))
        {
          google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 1298);
          v43 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"LP objective [ ", 15);
          v44 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)", ", 2);
          v45 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)" ] approx_lb += ", 16);
          v46 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)" gap: ", 6);
          std::ostream::operator<<();
          google::LogMessage::~LogMessage((google::LogMessage *)&__p);
        }
      }
      else
      {
        ReducedCosts = (_QWORD *)operations_research::glop::RevisedSimplex::GetReducedCosts((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840));
        operations_research::sat::LinearProgrammingConstraint::FillReducedCostReasonIn(this, ReducedCosts, (uint64_t)this + 20208);
        v54 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2503) + 40) + 12 * (*(_DWORD *)((char *)this + 19993) ^ 1));
        v55 = (double)-v54;
        if (v54 > 0x7FFFFFFFFFFFFFFDLL)
          v55 = -INFINITY;
        if (v54 < (uint64_t)0x8000000000000003)
          v55 = INFINITY;
        operations_research::sat::LinearProgrammingConstraint::ReducedCostStrengtheningDeductions(this, v55 - ObjectiveValue);
        if (*((_QWORD *)this + 2529) != *((_QWORD *)this + 2530))
        {
          std::vector<operations_research::sat::IntegerLiteral>::__assign_with_size[abi:ne180100]<operations_research::sat::IntegerLiteral*,operations_research::sat::IntegerLiteral*>((_QWORD *)this + 2532, *((char **)this + 2526), *((char **)this + 2527), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 2527) - *((_QWORD *)this + 2526)) >> 2));
          v56 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2503) + 40) + 12
                                                                         * (*(_DWORD *)((char *)this + 19993) ^ 1));
          LODWORD(__p) = *(_DWORD *)((char *)this + 19993) ^ 1;
          *(_QWORD *)((char *)&__p + 4) = v56;
          *(_QWORD *)&v89 = __p;
          DWORD2(v89) = HIDWORD(v56);
          std::vector<operations_research::sat::IntegerLiteral>::push_back[abi:ne180100]((void **)this + 2532, (uint64_t *)&v89);
        }
        v57 = *((_QWORD *)this + 2503);
        if (*(_QWORD *)(*(_QWORD *)(v57 + 40) + 12 * *(int *)((char *)this + 19993)) < v42)
        {
          LODWORD(__p) = *(_DWORD *)((char *)this + 19993);
          *(_QWORD *)((char *)&__p + 4) = v42;
          if ((operations_research::sat::IntegerTrail::Enqueue(v57, __p, SHIDWORD(v42), 0, 0, *((uint64_t **)this + 2526), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 2527) - *((_QWORD *)this + 2526)) >> 2)) & 1) == 0)goto LABEL_84;
        }
        v58 = *((_QWORD *)this + 2529);
        v59 = *((_QWORD *)this + 2530);
        if (v58 != v59)
        {
          v60 = -858993459
              * ((*(_QWORD *)(*((_QWORD *)this + 2503) + 152) - *(_QWORD *)(*((_QWORD *)this + 2503) + 144)) >> 2);
          do
          {
            v42 = v42 & 0xFFFFFFFF00000000 | *(unsigned int *)(v58 + 8);
            if ((operations_research::sat::IntegerTrail::Enqueue(*((_QWORD *)this + 2503), *(_QWORD *)v58, v42, 0, 0, *((uint64_t **)this + 2532), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 2533) - *((_QWORD *)this + 2532)) >> 2), v60) & 1) == 0)goto LABEL_84;
            v58 += 12;
          }
          while (v58 != v59);
        }
      }
    }
    if (!operations_research::glop::RevisedSimplex::GetProblemStatus((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840)))
    {
      if (!*((_BYTE *)this + 20316))
      {
        google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 1340);
        v87 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"Check failed: lp_solution_is_set_ ", 34);
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&__p);
      }
      *((double *)this + 2540) = operations_research::glop::RevisedSimplex::GetObjectiveValue((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840));
      *((_BYTE *)this + 20317) = 1;
      v61 = *((_QWORD *)this + 2491) - *((_QWORD *)this + 2490);
      if ((int)(v61 >> 2) >= 1)
      {
        v62 = 0;
        v63 = (v61 >> 2);
        do
        {
          ReducedCost = operations_research::glop::RevisedSimplex::GetReducedCost((uint64_t)this + 840, v62);
          *(double *)(*((_QWORD *)this + 2544) + 8 * v62) = operations_research::glop::LpScalingHelper::UnscaleReducedCost((uint64_t)this + 19360, v62, ReducedCost);
          v65 = *(double *)(*((_QWORD *)this + 2541) + 8 * v62);
          if (vabdd_f64(v65, round(v65)) > 0.0001)
            *((_BYTE *)this + 20317) = 0;
          ++v62;
        }
        while (v63 != v62);
      }
      if (*((_BYTE *)this + 20448))
        operations_research::sat::LinearProgrammingConstraint::UpdateAverageReducedCosts(this);
    }
    v66 = *((_QWORD *)this + 2500);
    if (*(_BYTE *)(v66 + 156))
    {
      if (*v88)
      {
        if ((*(_DWORD *)(*((_QWORD *)this + 2504) + 8) & 0xFFFFFFE) == 0 && !*((_BYTE *)this + 20688))
        {
          if (*((_BYTE *)this + 20316))
          {
            if (!*((_BYTE *)this + 20317) && *(int *)(v66 + 396) >= 2)
            {
              if (*((_BYTE *)this + 20448))
              {
                if (!operations_research::glop::RevisedSimplex::GetProblemStatus((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840)))
                {
                  v68 = *((_QWORD *)this + 2587) + 1;
                  *((_QWORD *)this + 2587) = v68;
                  if (v68 >= *((int *)this + 5173))
                  {
                    *((_QWORD *)this + 2587) = 0;
                    v69 = *((_QWORD *)this + 2491) - *((_QWORD *)this + 2490);
                    __p = 0uLL;
                    v91 = 0;
                    if ((int)(v69 >> 2) <= 0)
                      goto LABEL_151;
                    v70 = 0;
                    v71 = (v69 >> 2);
                    do
                    {
                      v72 = *(_DWORD *)(*((_QWORD *)this + 2490) + 4 * v70);
                      LODWORD(v89) = v72 & 0xFFFFFFFE;
                      v73 = *(double *)(*((_QWORD *)this + 2541)
                                      + 8
                                      * *(int *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>>((uint64_t *)this + 2493, (int *)&v89));
                      if (vabdd_f64(v73, round(v73)) > 0.0001)
                      {
                        v74 = *((_QWORD *)this + 2503);
                        v75 = *(int *)(*(_QWORD *)(v74 + 408) + 4 * v72);
                        if ((_DWORD)v75 == -1
                          || ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v74 + 936) + 24)
                                         + ((v75 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(*(_QWORD *)(v74 + 408)
                                                                                             + 4 * v72)) & 1) == 0)
                        {
                          *(double *)&v89 = -*(double *)(*((_QWORD *)this + 2569) + 8 * v70);
                          *((_QWORD *)&v89 + 1) = v72 & 0xFFFFFFFE;
                          v76 = (__int128 *)std::lower_bound[abi:ne180100]<std::__wrap_iter<std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>((double *)__p, *((double **)&__p + 1), (uint64_t)&v89);
                          std::vector<std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::insert((char **)&__p, v76, &v89);
                          if (*((_QWORD *)&__p + 1) - (_QWORD)__p >= 0x31uLL)
                            std::vector<std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::resize((uint64_t *)&__p, 3uLL);
                        }
                      }
                      ++v70;
                    }
                    while (v71 != v70);
                    v77 = __p;
                    if ((_QWORD)__p == *((_QWORD *)&__p + 1))
                      goto LABEL_151;
                    v78 = *(_DWORD *)(__p + 8);
                    if (*off_254079658[0] >= 2
                      && (off_254079658[0] != &google::kLogSiteUninitialized
                       || google::InitVLOG3__((google *)off_254079658, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)2)))
                    {
                      google::LogMessage::LogMessage((google::LogMessage *)&v89, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 1411);
                      v79 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v89);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"Branching on: ", 14);
                      std::ostream::operator<<();
                      google::LogMessage::~LogMessage((google::LogMessage *)&v89);
                    }
                    v80 = operations_research::sat::LinearProgrammingConstraint::BranchOnVar((uint64_t)this, v78);
                    v81 = v80;
                    if (!v80)
                      goto LABEL_151;
                    if (*off_254079660[0] >= 2
                      && (off_254079660[0] != &google::kLogSiteUninitialized
                       || google::InitVLOG3__((google *)off_254079660, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)2)))
                    {
                      google::LogMessage::LogMessage((google::LogMessage *)&v89, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 1413);
                      v82 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v89);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"Branching successful.", 21);
                      google::LogMessage::~LogMessage((google::LogMessage *)&v89);
                    }
                    v83 = v77 + 16;
                    if ((_QWORD)v77 + 16 != *((_QWORD *)&v77 + 1))
                    {
                      while (1)
                      {
                        v84 = *(_DWORD *)(v83 + 8);
                        if (*off_254079658[0] >= 2
                          && (off_254079658[0] != &google::kLogSiteUninitialized
                           || google::InitVLOG3__((google *)off_254079658, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)2)))
                        {
                          google::LogMessage::LogMessage((google::LogMessage *)&v89, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 1411);
                          v85 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v89);
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"Branching on: ", 14);
                          std::ostream::operator<<();
                          google::LogMessage::~LogMessage((google::LogMessage *)&v89);
                        }
                        if (!operations_research::sat::LinearProgrammingConstraint::BranchOnVar((uint64_t)this, v84))break;
                        if (*off_254079660[0] >= 2
                          && (off_254079660[0] != &google::kLogSiteUninitialized
                           || google::InitVLOG3__((google *)off_254079660, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)2)))
                        {
                          google::LogMessage::LogMessage((google::LogMessage *)&v89, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 1413);
                          v86 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v89);
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)"Branching successful.", 21);
                          google::LogMessage::~LogMessage((google::LogMessage *)&v89);
                        }
                        v83 += 16;
                        if (v83 == *((_QWORD *)&v77 + 1))
                          goto LABEL_152;
                      }
                      if ((v81 & 1) == 0)
LABEL_151:
                        *((_DWORD *)this + 5173) *= 2;
                    }
LABEL_152:
                    if ((_QWORD)__p)
                    {
                      *((_QWORD *)&__p + 1) = __p;
                      operator delete((void *)__p);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_110:
    v1 = 1;
  }
LABEL_111:
  operations_research::glop::GlopParameters::~GlopParameters((operations_research::glop::GlopParameters *)v92);
  return v1 & 1;
}

void sub_22DB9928C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
  {
    operator delete(__p);
    operations_research::glop::GlopParameters::~GlopParameters((operations_research::glop::GlopParameters *)&a15);
    _Unwind_Resume(a1);
  }
  operations_research::glop::GlopParameters::~GlopParameters((operations_research::glop::GlopParameters *)&a15);
  _Unwind_Resume(a1);
}

BOOL operations_research::sat::LinearProgrammingConstraint::FillExactDualRayReason(operations_research::sat::LinearProgrammingConstraint *this)
{
  uint64_t *DualRay;
  operations_research::sat::LinearConstraint *v3;
  uint64_t ImpliedLowerBound;
  _BOOL8 v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _BYTE v11[16];
  __int128 v12;
  void *v13[2];
  void *__p[2];
  __int128 v15;
  uint64_t v16;
  void *v17[3];
  uint64_t v18;

  v18 = 0;
  DualRay = (uint64_t *)operations_research::glop::RevisedSimplex::GetDualRay((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840));
  operations_research::sat::LinearProgrammingConstraint::ScaleLpMultiplier(this, 0, DualRay, (double *)&v18, 62, v17);
  v16 = 0;
  if ((operations_research::sat::LinearProgrammingConstraint::ComputeNewLinearConstraint(this, (uint64_t *)v17, (uint64_t *)this + 2472, &v16) & 1) != 0)
  {
    operations_research::sat::LinearProgrammingConstraint::AdjustNewLinearConstraint((uint64_t *)this, (int **)v17, (_QWORD *)this + 2472, &v16);
    *(_OWORD *)__p = 0u;
    v15 = 0u;
    v12 = 0u;
    *(_OWORD *)v13 = 0u;
    operations_research::sat::LinearProgrammingConstraint::ConvertToLinearConstraint((uint64_t)this, (_QWORD *)this + 2472, v16, &v12);
    operations_research::sat::DivideByGCD((uint64_t *)&v12, v3);
    operations_research::sat::LinearProgrammingConstraint::PreventOverflow(this, (operations_research::sat::LinearConstraint *)&v12, 62);
    ImpliedLowerBound = operations_research::sat::LinearProgrammingConstraint::GetImpliedLowerBound(this, (const operations_research::sat::LinearConstraint *)&v12);
    v5 = ImpliedLowerBound > *((_QWORD *)&v12 + 1);
    if (ImpliedLowerBound <= *((uint64_t *)&v12 + 1))
    {
      if (*off_254079680[0] >= 1
        && (off_254079680[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)off_254079680, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)1)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)v11, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 1907);
        v7 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v11);
        v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"LP exact dual ray not infeasible,", 33);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" implied_lb: ", 13);
        v9 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" ub: ", 5);
        std::ostream::operator<<();
        google::LogMessage::~LogMessage((google::LogMessage *)v11);
      }
    }
    else
    {
      operations_research::sat::LinearProgrammingConstraint::SetImpliedLowerBoundReason((uint64_t)this, &v12, ImpliedLowerBound + ~*((_QWORD *)&v12 + 1));
    }
    if (__p[1])
    {
      *(void **)&v15 = __p[1];
      operator delete(__p[1]);
    }
    if (v13[0])
    {
      v13[1] = v13[0];
      operator delete(v13[0]);
    }
  }
  else
  {
    if (*off_254079678[0] >= 1
      && (off_254079678[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_254079678, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)&v12, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 1890);
      v6 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Isse while computing the exact dual ray reason. Aborting.", 57);
      google::LogMessage::~LogMessage((google::LogMessage *)&v12);
    }
    v5 = 0;
  }
  if (v17[0])
  {
    v17[1] = v17[0];
    operator delete(v17[0]);
  }
  return v5;
}

void sub_22DB99604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  va_list va;

  va_start(va, a3);
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)va);
  v5 = *(void **)(v3 - 80);
  if (v5)
  {
    *(_QWORD *)(v3 - 72) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

BOOL operations_research::sat::LinearProgrammingConstraint::ExactLpReasonning(operations_research::sat::LinearProgrammingConstraint *this)
{
  char *v2;
  unsigned int ProblemNumRows;
  unsigned int v4;
  uint64_t v5;
  size_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int *v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  operations_research::sat::LinearConstraint *v30;
  _DWORD *v31;
  char *v32;
  void *v33;
  _QWORD *v34;
  _BOOL8 v35;
  _BYTE *v36;
  int64_t v37;
  int64_t v38;
  unint64_t v39;
  int64_t v40;
  unint64_t v41;
  _BYTE *v42;
  _DWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  _OWORD *v48;
  char *v49;
  uint64_t v50;
  __int128 v51;
  int v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t *v63;
  char *v64;
  int64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  __int128 *v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  operations_research::sat::IntegerSumLE *v75;
  operations_research::sat::IntegerSumLE **v76;
  char *v77;
  operations_research::sat::IntegerSumLE **v78;
  uint64_t v79;
  uint64_t v80;
  void *__p;
  void *v83;
  uint64_t v84;
  operations_research::sat::IntegerSumLE *v85;
  __int128 v86;
  void *v87[2];
  void *v88[2];
  __int128 v89;
  uint64_t v90;
  void *v91[3];
  double v92;
  char *v93;
  char *v94;
  char *v95;

  *((_QWORD *)this + 2527) = *((_QWORD *)this + 2526);
  *((_QWORD *)this + 2530) = *((_QWORD *)this + 2529);
  *((_QWORD *)this + 2533) = *((_QWORD *)this + 2532);
  v2 = (char *)this + 840;
  ProblemNumRows = operations_research::glop::RevisedSimplex::GetProblemNumRows((operations_research::sat::LinearProgrammingConstraint *)((char *)this + 840));
  v93 = 0;
  v94 = 0;
  v95 = 0;
  if (ProblemNumRows)
  {
    v4 = ProblemNumRows;
    v5 = ProblemNumRows;
    if ((ProblemNumRows & 0x80000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v6 = 8 * ProblemNumRows;
    v7 = (char *)operator new(v6);
    v93 = v7;
    v95 = &v7[8 * v4];
    bzero(v7, 8 * v5);
    v8 = 0;
    v94 = &v7[v6];
    do
    {
      *(double *)&v7[8 * v8] = -operations_research::glop::RevisedSimplex::GetDualValue((uint64_t)v2, v8);
      ++v8;
    }
    while (v5 != v8);
  }
  else
  {
    v7 = 0;
  }
  v92 = 0.0;
  operations_research::sat::LinearProgrammingConstraint::ScaleLpMultiplier(this, 1, (uint64_t *)&v93, &v92, 62, v91);
  v90 = 0;
  if ((operations_research::sat::LinearProgrammingConstraint::ComputeNewLinearConstraint(this, (uint64_t *)v91, (uint64_t *)this + 2472, &v90) & 1) == 0)
  {
    if (*off_254079668[0] < 1
      || off_254079668[0] == &google::kLogSiteUninitialized
      && !google::InitVLOG3__((google *)off_254079668, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)1))
    {
      goto LABEL_50;
    }
    google::LogMessage::LogMessage((google::LogMessage *)&v86, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 1841);
    v29 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Issue while computing the exact LP reason. Aborting.", 52);
    goto LABEL_49;
  }
  v9 = llround(v92);
  if (!v9)
  {
    if (*off_254079670[0] < 1
      || off_254079670[0] == &google::kLogSiteUninitialized
      && !google::InitVLOG3__((google *)off_254079670, (int **)&fLI::FLAGS_v, "./ortools/sat/linear_programming_constraint.cc", (const char *)1))
    {
      goto LABEL_50;
    }
    google::LogMessage::LogMessage((google::LogMessage *)&v86, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 1849);
    v34 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Overflow during exact LP reasoning. scaling=", 44);
    std::ostream::operator<<();
LABEL_49:
    google::LogMessage::~LogMessage((google::LogMessage *)&v86);
LABEL_50:
    v35 = 1;
    goto LABEL_106;
  }
  v10 = (int *)*((_QWORD *)this + 35);
  v11 = (int *)*((_QWORD *)this + 36);
  if (v10 != v11)
  {
    v12 = *((_QWORD *)this + 2472);
    if (v9 >= 0)
      v13 = v9;
    else
      v13 = -v9;
    v14 = __clz(v13) ^ 0x3F;
    do
    {
      v15 = *(_QWORD *)(v10 + 1);
      if (v15 >= 0)
        v16 = *(_QWORD *)(v10 + 1);
      else
        v16 = -v15;
      v17 = 63 - __clz(v16);
      v18 = *v10;
      if (!v15)
        v17 = 0;
      v19 = v17 + v14;
      v20 = __OFSUB__(v19, 61);
      if (v19 > 61)
      {
        if (v15)
        {
          v15 = ((v15 ^ (unint64_t)v9) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
          v21 = v16 * v13;
          if (v19 > 0x3E || v21 >= v15)
          {
            v20 = __OFSUB__(v15 - 0x7FFFFFFFFFFFFFFFLL, 2);
            if ((unint64_t)(v15 - 0x7FFFFFFFFFFFFFFFLL) < 2)
              goto LABEL_38;
          }
          else
          {
            if (v15 >= 0)
              v15 = v21;
            else
              v15 = -(uint64_t)v21;
            v20 = __OFSUB__(v15 - 0x7FFFFFFFFFFFFFFFLL, 2);
            if ((unint64_t)(v15 - 0x7FFFFFFFFFFFFFFFLL) < 2)
              goto LABEL_38;
          }
        }
      }
      else
      {
        v15 *= v9;
        v20 = __OFSUB__(v15 - 0x7FFFFFFFFFFFFFFFLL, 2);
        if ((unint64_t)(v15 - 0x7FFFFFFFFFFFFFFFLL) < 2)
          goto LABEL_38;
      }
      v23 = *(_QWORD *)(v12 + 8 * v18);
      v24 = v23 + v15;
      v25 = (v23 + v15) ^ v15;
      v26 = (v23 + v15) ^ v23;
      v27 = ((unint64_t)v15 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
      if ((v25 & v26) < 0 == v20)
        v27 = v24;
      if ((unint64_t)(v27 + 0x7FFFFFFFFFFFFFFFLL) > 0xFFFFFFFFFFFFFFFDLL)
      {
LABEL_38:
        google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v86, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 1853);
        v28 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v86);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Check failed: AddLinearExpressionMultiple(obj_scale, integer_objective_, &tmp_dense_vector_) ", 93);
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v86);
      }
      *(_QWORD *)(v12 + 8 * v18) = v27;
      v10 += 3;
    }
    while (v10 != v11);
  }
  operations_research::sat::LinearProgrammingConstraint::AdjustNewLinearConstraint((uint64_t *)this, (int **)v91, (_QWORD *)this + 2472, &v90);
  *(_OWORD *)v88 = 0u;
  v89 = 0u;
  v86 = 0u;
  *(_OWORD *)v87 = 0u;
  operations_research::sat::LinearProgrammingConstraint::ConvertToLinearConstraint((uint64_t)this, (_QWORD *)this + 2472, v90, &v86);
  v31 = (_DWORD *)((char *)this + 19993);
  v32 = (char *)v87[1];
  if (v87[1] >= v88[0])
  {
    v36 = v87[0];
    v37 = (char *)v87[1] - (char *)v87[0];
    v38 = ((char *)v87[1] - (char *)v87[0]) >> 2;
    v39 = v38 + 1;
    if ((unint64_t)(v38 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v40 = (char *)v88[0] - (char *)v87[0];
    if (((char *)v88[0] - (char *)v87[0]) >> 1 > v39)
      v39 = v40 >> 1;
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
      v41 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v41 = v39;
    if (v41)
    {
      if (v41 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v42 = operator new(4 * v41);
    }
    else
    {
      v42 = 0;
    }
    v43 = &v42[4 * v38];
    *v43 = *v31;
    v33 = v43 + 1;
    if (v32 != v36)
    {
      v44 = v32 - v36 - 4;
      if (v44 < 0x2C)
        goto LABEL_118;
      if ((unint64_t)(v32 - v42 - v37) < 0x20)
        goto LABEL_118;
      v45 = (v44 >> 2) + 1;
      v46 = 4 * (v45 & 0x7FFFFFFFFFFFFFF8);
      v47 = &v32[-v46];
      v43 = (_DWORD *)((char *)v43 - v46);
      v48 = &v42[4 * v38 - 16];
      v49 = v32 - 16;
      v50 = v45 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v51 = *(_OWORD *)v49;
        *(v48 - 1) = *((_OWORD *)v49 - 1);
        *v48 = v51;
        v48 -= 2;
        v49 -= 32;
        v50 -= 8;
      }
      while (v50);
      v32 = v47;
      if (v45 != (v45 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_118:
        do
        {
          v52 = *((_DWORD *)v32 - 1);
          v32 -= 4;
          *--v43 = v52;
        }
        while (v32 != v36);
      }
    }
    v87[0] = v43;
    v87[1] = v33;
    v88[0] = &v42[4 * v41];
    if (v36)
      operator delete(v36);
  }
  else
  {
    *(_DWORD *)v87[1] = *v31;
    v33 = v32 + 4;
  }
  v87[1] = v33;
  v53 = -v9;
  v54 = (_BYTE *)v89;
  if ((unint64_t)v89 < *((_QWORD *)&v89 + 1))
  {
    *(_QWORD *)v89 = v53;
    v55 = (uint64_t)(v54 + 8);
    goto LABEL_91;
  }
  v56 = v88[1];
  v57 = v89 - (unint64_t)v88[1];
  v58 = (uint64_t)(v89 - (unint64_t)v88[1]) >> 3;
  v59 = v58 + 1;
  if ((unint64_t)(v58 + 1) >> 61)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v60 = *((_QWORD *)&v89 + 1) - (unint64_t)v88[1];
  if ((uint64_t)(*((_QWORD *)&v89 + 1) - (unint64_t)v88[1]) >> 2 > v59)
    v59 = v60 >> 2;
  if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
    v61 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v61 = v59;
  if (v61)
  {
    if (v61 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v62 = (char *)operator new(8 * v61);
    v63 = (uint64_t *)&v62[8 * v58];
    v64 = &v62[8 * v61];
    *v63 = v53;
    v55 = (uint64_t)(v63 + 1);
    v65 = v54 - v56;
    if (v54 == v56)
      goto LABEL_89;
    goto LABEL_83;
  }
  v62 = 0;
  v63 = (uint64_t *)(8 * v58);
  v64 = 0;
  *(_QWORD *)(8 * v58) = v53;
  v55 = 8 * v58 + 8;
  v65 = v54 - v56;
  if (v54 != v56)
  {
LABEL_83:
    v66 = v65 - 8;
    if (v66 < 0x58)
      goto LABEL_119;
    if ((unint64_t)(v54 - v62 - v57) < 0x20)
      goto LABEL_119;
    v67 = (v66 >> 3) + 1;
    v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
    v69 = &v54[-v68];
    v63 = (uint64_t *)((char *)v63 - v68);
    v70 = &v62[8 * v58 - 16];
    v71 = (__int128 *)(v54 - 16);
    v72 = v67 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v73 = *v71;
      *((_OWORD *)v70 - 1) = *(v71 - 1);
      *(_OWORD *)v70 = v73;
      v70 -= 32;
      v71 -= 2;
      v72 -= 4;
    }
    while (v72);
    v54 = v69;
    if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_119:
      do
      {
        v74 = *((_QWORD *)v54 - 1);
        v54 -= 8;
        *--v63 = v74;
      }
      while (v54 != v56);
    }
  }
LABEL_89:
  v88[1] = v63;
  *(_QWORD *)&v89 = v55;
  *((_QWORD *)&v89 + 1) = v64;
  if (v56)
    operator delete(v56);
LABEL_91:
  *(_QWORD *)&v89 = v55;
  operations_research::sat::DivideByGCD((uint64_t *)&v86, v30);
  operations_research::sat::LinearProgrammingConstraint::PreventOverflow(this, (operations_research::sat::LinearConstraint *)&v86, 62);
  v75 = (operations_research::sat::IntegerSumLE *)operator new();
  __p = 0;
  v83 = 0;
  v84 = 0;
  operations_research::sat::IntegerSumLE::IntegerSumLE(v75, &__p, v87, &v88[1], *((_QWORD *)&v86 + 1), *((_QWORD *)this + 2501));
  if (__p)
  {
    v83 = __p;
    operator delete(__p);
  }
  v85 = v75;
  if ((*(_DWORD *)(*((_QWORD *)this + 2504) + 8) & 0xFFFFFFE) == 0)
  {
    v78 = (operations_research::sat::IntegerSumLE **)*((_QWORD *)this + 2537);
    v76 = (operations_research::sat::IntegerSumLE **)*((_QWORD *)this + 2536);
    while (v78 != v76)
    {
      v80 = (uint64_t)*--v78;
      v79 = v80;
      *v78 = 0;
      if (v80)
        (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
    }
    *((_QWORD *)this + 2537) = v76;
    if ((unint64_t)v76 < *((_QWORD *)this + 2538))
      goto LABEL_95;
LABEL_101:
    v77 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)this + 2536, &v85);
    v75 = v85;
    goto LABEL_102;
  }
  v76 = (operations_research::sat::IntegerSumLE **)*((_QWORD *)this + 2537);
  if ((unint64_t)v76 >= *((_QWORD *)this + 2538))
    goto LABEL_101;
LABEL_95:
  *v76 = v75;
  v77 = (char *)(v76 + 1);
LABEL_102:
  *((_QWORD *)this + 2537) = v77;
  *((_DWORD *)this + 5070) = (unint64_t)&v77[-*((_QWORD *)this + 2536)] >> 3;
  v35 = operations_research::sat::IntegerSumLE::Propagate(v75);
  if (v88[1])
  {
    *(void **)&v89 = v88[1];
    operator delete(v88[1]);
  }
  if (v87[0])
  {
    v87[1] = v87[0];
    operator delete(v87[0]);
  }
LABEL_106:
  if (v91[0])
  {
    v91[1] = v91[0];
    operator delete(v91[0]);
  }
  if (v7)
    operator delete(v7);
  return v35;
}

void sub_22DB99DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  void *v24;
  uint64_t v25;

  if (__p)
    operator delete(__p);
  if (v24)
  {
    *(_QWORD *)(v25 - 120) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::LinearProgrammingConstraint::ReducedCostStrengtheningDeductions(operations_research::sat::LinearProgrammingConstraint *this, double a2)
{
  unint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  double v9;
  _DWORD *v10;
  int v11;
  double ReducedCost;
  double VariableValue;
  double v14;
  int v15;
  uint64_t v16;
  double v17;
  double v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _DWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  _DWORD *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  double v32;
  double v33;
  unint64_t v34;
  _QWORD *v35;
  _DWORD *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  char *v49;
  unint64_t v50;
  _BYTE v51[12];

  *((_QWORD *)this + 2530) = *((_QWORD *)this + 2529);
  v2 = *((_QWORD *)this + 2491) - *((_QWORD *)this + 2490);
  if ((int)(v2 >> 2) >= 1)
  {
    v4 = 0;
    v5 = (_QWORD *)((char *)this + 20232);
    v6 = (char *)this + 840;
    v7 = (char *)this + 19360;
    v8 = (v2 >> 2);
    v9 = a2 / *((double *)this + 99);
    v49 = (char *)this + 19360;
    do
    {
      v11 = *(_DWORD *)(*((_QWORD *)this + 2490) + 4 * v4);
      ReducedCost = operations_research::glop::RevisedSimplex::GetReducedCost((uint64_t)v6, v4);
      VariableValue = operations_research::glop::RevisedSimplex::GetVariableValue((uint64_t)v6, v4);
      if (ReducedCost == 0.0)
        goto LABEL_5;
      v14 = operations_research::glop::LpScalingHelper::UnscaleVariableValue((uint64_t)v7, v4, VariableValue + v9 / ReducedCost);
      if (ReducedCost <= 0.000001)
      {
        if (ReducedCost >= -0.000001)
          goto LABEL_5;
        v31 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2503) + 40) + 12 * v11);
        v32 = (double)v31;
        if (v31 < (uint64_t)0x8000000000000003)
          v32 = -INFINITY;
        if (v31 > 0x7FFFFFFFFFFFFFFDLL)
          v32 = INFINITY;
        v33 = ceil(v14 + -0.0001);
        if (v33 <= v32)
          goto LABEL_5;
        *(_DWORD *)v51 = v11;
        *(_QWORD *)&v51[4] = (uint64_t)v33;
        v20 = *(_QWORD *)v51;
        v21 = (unint64_t)(uint64_t)v33 >> 32;
        v22 = (_DWORD *)*((_QWORD *)this + 2530);
        v34 = *((_QWORD *)this + 2531);
        if ((unint64_t)v22 >= v34)
        {
          v35 = v5;
          v36 = (_DWORD *)*v5;
          v37 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v22 - *v5) >> 2);
          v38 = v37 + 1;
          if (v37 + 1 > 0x1555555555555555)
LABEL_56:
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - (_QWORD)v36) >> 2);
          if (2 * v39 > v38)
            v38 = 2 * v39;
          if (v39 >= 0xAAAAAAAAAAAAAAALL)
            v40 = 0x1555555555555555;
          else
            v40 = v38;
          v48 = v40;
          if (v40)
          {
            if (v40 > 0x1555555555555555)
LABEL_57:
              std::__throw_bad_array_new_length[abi:ne180100]();
            v30 = (char *)operator new(12 * v40);
          }
          else
          {
            v30 = 0;
          }
          v41 = &v30[12 * v37];
          *(_QWORD *)v41 = *(_QWORD *)v51;
          *((_DWORD *)v41 + 2) = v21;
          v42 = v41;
          v5 = v35;
          if (v22 == v36)
            goto LABEL_52;
          v43 = v48;
          v7 = v49;
          do
          {
            v46 = *(_QWORD *)(v22 - 3);
            v22 -= 3;
            v47 = v22[2];
            *(_QWORD *)(v42 - 12) = v46;
            v42 -= 12;
            *((_DWORD *)v42 + 2) = v47;
          }
          while (v22 != v36);
LABEL_51:
          v22 = (_DWORD *)*v5;
LABEL_53:
          *((_QWORD *)this + 2529) = v42;
          v10 = v41 + 12;
          *((_QWORD *)this + 2530) = v41 + 12;
          *((_QWORD *)this + 2531) = &v30[12 * v43];
          if (v22)
            operator delete(v22);
          goto LABEL_4;
        }
      }
      else
      {
        v15 = v11 ^ 1;
        v16 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2503) + 40) + 12 * (v11 ^ 1));
        v17 = (double)-v16;
        if (v16 > 0x7FFFFFFFFFFFFFFDLL)
          v17 = -INFINITY;
        if (v16 < (uint64_t)0x8000000000000003)
          v17 = INFINITY;
        v18 = floor(v14 + 0.0001);
        if (v18 >= v17)
          goto LABEL_5;
        if ((uint64_t)v18 >= (uint64_t)0x8000000000000002)
          v19 = -(uint64_t)v18;
        else
          v19 = 0x7FFFFFFFFFFFFFFFLL;
        v50 = __PAIR64__(v19, v15);
        v20 = __PAIR64__(v19, v15);
        v21 = HIDWORD(v19);
        v22 = (_DWORD *)*((_QWORD *)this + 2530);
        v23 = *((_QWORD *)this + 2531);
        if ((unint64_t)v22 >= v23)
        {
          v24 = v5;
          v25 = (_DWORD *)*v5;
          v26 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v22 - *v5) >> 2);
          v27 = v26 + 1;
          if (v26 + 1 > 0x1555555555555555)
            goto LABEL_56;
          v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - (_QWORD)v25) >> 2);
          if (2 * v28 > v27)
            v27 = 2 * v28;
          if (v28 >= 0xAAAAAAAAAAAAAAALL)
            v29 = 0x1555555555555555;
          else
            v29 = v27;
          v48 = v29;
          if (v29)
          {
            if (v29 > 0x1555555555555555)
              goto LABEL_57;
            v30 = (char *)operator new(12 * v29);
          }
          else
          {
            v30 = 0;
          }
          v41 = &v30[12 * v26];
          *(_QWORD *)v41 = v50;
          *((_DWORD *)v41 + 2) = v21;
          v42 = v41;
          v5 = v24;
          if (v22 != v25)
          {
            v43 = v48;
            v7 = v49;
            do
            {
              v44 = *(_QWORD *)(v22 - 3);
              v22 -= 3;
              v45 = v22[2];
              *(_QWORD *)(v42 - 12) = v44;
              v42 -= 12;
              *((_DWORD *)v42 + 2) = v45;
            }
            while (v22 != v25);
            goto LABEL_51;
          }
LABEL_52:
          v43 = v48;
          v7 = v49;
          goto LABEL_53;
        }
      }
      *(_QWORD *)v22 = v20;
      v22[2] = v21;
      v10 = v22 + 3;
      v7 = v49;
LABEL_4:
      *((_QWORD *)this + 2530) = v10;
LABEL_5:
      ++v4;
    }
    while (v4 != v8);
  }
}

uint64_t operations_research::sat::LinearProgrammingConstraint::UpdateAverageReducedCosts(operations_research::sat::LinearProgrammingConstraint *this)
{
  int *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  double *v23;
  int *v24;
  double *v25;
  int *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  double v35;
  double *v36;
  uint64_t v37;
  double **v38;
  double *v39;
  int v40;
  double v41;
  int v42;
  double v43;
  uint64_t v44;
  double v45;
  unint64_t v46;
  double *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char v60;
  uint64_t v62;
  unint64_t v67;
  uint32x2_t *v68;
  float64x2_t *v69;
  uint32x2_t *v70;
  float64x2_t *v71;
  std::vector<int>::value_type __x[2];

  v2 = (int *)((char *)this + 20452);
  v3 = *((_QWORD *)this + 2491) - *((_QWORD *)this + 2490);
  v4 = v3 >> 2;
  v5 = (_QWORD *)((char *)this + 20480);
  v6 = (uint64_t)(*((_QWORD *)this + 2561) - *((_QWORD *)this + 2560)) >> 3;
  v7 = (int)((uint64_t)v3 >> 2);
  if (v7 > v6)
  {
    *(_QWORD *)__x = 0;
    std::vector<double>::__append((uint64_t)this + 20480, v7 - v6, (uint64_t *)__x);
    __x[0] = 0;
    v8 = *((_QWORD *)this + 2566);
    v9 = (*((_QWORD *)this + 2567) - v8) >> 2;
    if (v7 <= v9)
    {
      if (v7 < v9)
        *((_QWORD *)this + 2567) = v8 + 4 * v7;
    }
    else
    {
      std::vector<int>::__append((std::vector<int> *)((char *)this + 20528), v7 - v9, __x);
    }
    *(_QWORD *)__x = 0;
    v10 = *((_QWORD *)this + 2557);
    v11 = (*((_QWORD *)this + 2558) - v10) >> 3;
    if (v7 <= v11)
    {
      if (v7 < v11)
        *((_QWORD *)this + 2558) = v10 + 8 * v7;
    }
    else
    {
      std::vector<double>::__append((uint64_t)this + 20456, v7 - v11, (uint64_t *)__x);
    }
    __x[0] = 0;
    v12 = *((_QWORD *)this + 2563);
    v13 = (*((_QWORD *)this + 2564) - v12) >> 2;
    if (v7 <= v13)
    {
      if (v7 < v13)
        *((_QWORD *)this + 2564) = v12 + 4 * v7;
    }
    else
    {
      std::vector<int>::__append((std::vector<int> *)((char *)this + 20504), v7 - v13, __x);
    }
    *(_QWORD *)__x = 0;
    v14 = *((_QWORD *)this + 2569);
    v15 = (*((_QWORD *)this + 2570) - v14) >> 3;
    if (v7 <= v15)
    {
      if (v7 < v15)
        *((_QWORD *)this + 2570) = v14 + 8 * v7;
    }
    else
    {
      std::vector<double>::__append((uint64_t)this + 20552, v7 - v15, (uint64_t *)__x);
    }
  }
  v16 = *v2 + 1;
  *v2 = v16;
  v17 = (v3 >> 2);
  if (v16 == 10000)
  {
    if ((int)v4 >= 1)
    {
      v18 = *((_QWORD *)this + 2557);
      v19 = *((_QWORD *)this + 2563);
      v20 = *((_QWORD *)this + 2560);
      v21 = *((_QWORD *)this + 2566);
      if (v17 >= 4)
      {
        v22 = 0;
        _CF = v19 >= v21 + 4 * v17 || v21 >= v19 + 4 * v17;
        v60 = !_CF;
        if ((v20 >= v18 + 8 * v17 || v18 >= v20 + 8 * v17) && (v60 & 1) == 0)
        {
          v62 = (v3 >> 2) & 1;
          v22 = v17 - v62;
          __asm { FMOV            V0.2D, #0.5 }
          v67 = v17 - v62;
          v68 = (uint32x2_t *)*((_QWORD *)this + 2566);
          v69 = (float64x2_t *)*((_QWORD *)this + 2560);
          v70 = (uint32x2_t *)*((_QWORD *)this + 2563);
          v71 = (float64x2_t *)*((_QWORD *)this + 2557);
          do
          {
            *v71 = vmulq_f64(*v71, _Q0);
            ++v71;
            *v70 = (uint32x2_t)vshr_n_s32((int32x2_t)vsra_n_u32(*v70, *v70, 0x1FuLL), 1uLL);
            ++v70;
            *v69 = vmulq_f64(*v69, _Q0);
            ++v69;
            *v68 = (uint32x2_t)vshr_n_s32((int32x2_t)vsra_n_u32(*v68, *v68, 0x1FuLL), 1uLL);
            ++v68;
            v67 -= 2;
          }
          while (v67);
          if (!v62)
            goto LABEL_25;
        }
      }
      else
      {
        v22 = 0;
      }
      v23 = (double *)(v18 + 8 * v22);
      v24 = (int *)(v19 + 4 * v22);
      v25 = (double *)(v20 + 8 * v22);
      v26 = (int *)(v21 + 4 * v22);
      v27 = v22 - v17;
      do
      {
        *v23 = *v23 * 0.5;
        ++v23;
        *v24++ /= 2;
        *v25 = *v25 * 0.5;
        ++v25;
        *v26++ /= 2;
        _CF = __CFADD__(v27++, 1);
      }
      while (!_CF);
    }
LABEL_25:
    *v2 = 0;
  }
  if ((int)v4 >= 1)
  {
    v28 = 0;
    v29 = *((_QWORD *)this + 2490);
    v30 = (_QWORD *)*((_QWORD *)this + 2503);
    v31 = v30[51];
    do
    {
      v33 = *(int *)(v29 + 4 * v28);
      v34 = *(int *)(v31 + 4 * v33);
      if ((_DWORD)v34 == -1
        || ((*(_QWORD *)(*(_QWORD *)(v30[117] + 24) + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v34) & 1) == 0)
      {
        if (*(_QWORD *)(v30[5] + 12 * (int)v33) + *(_QWORD *)(v30[5] + 12 * (int)(v33 ^ 1)))
        {
          v35 = *(double *)(*((_QWORD *)this + 2544) + 8 * v28);
          if (fabs(v35) >= 0.0001)
          {
            if (v35 >= 0.0)
            {
              *(double *)(*((_QWORD *)this + 2557) + 8 * v28) = v35 + *(double *)(*((_QWORD *)this + 2557) + 8 * v28);
              v32 = (char *)this + 20504;
            }
            else
            {
              *(double *)(*v5 + 8 * v28) = *(double *)(*v5 + 8 * v28) - v35;
              v32 = (char *)this + 20528;
            }
            ++*(_DWORD *)(*(_QWORD *)v32 + 4 * v28);
          }
        }
      }
      ++v28;
    }
    while (v17 != v28);
  }
  operations_research::RevRepository<int>::SetLevel((_QWORD *)this + 2573, 0);
  operations_research::RevRepository<int>::SetLevel((_QWORD *)this + 2573, (*(_DWORD *)(*((_QWORD *)this + 2504) + 8) >> 1) & 0x7FFFFFF);
  v2[31] = 0;
  v36 = (double *)*((_QWORD *)this + 2581);
  *((_QWORD *)this + 2582) = v36;
  if ((int)v4 >= 1)
  {
    v37 = 0;
    v38 = (double **)((char *)this + 20648);
    while (1)
    {
      v40 = *(_DWORD *)(*((_QWORD *)this + 2563) + 4 * v37);
      if (v40 < 1)
      {
        v41 = 0.0;
        v42 = *(_DWORD *)(*((_QWORD *)this + 2566) + 4 * v37);
        if (v42 <= 0)
        {
LABEL_50:
          v44 = *((_QWORD *)this + 2569);
          v43 = 0.0;
          goto LABEL_51;
        }
      }
      else
      {
        v41 = *(double *)(*((_QWORD *)this + 2557) + 8 * v37) / (double)v40;
        v42 = *(_DWORD *)(*((_QWORD *)this + 2566) + 4 * v37);
        if (v42 <= 0)
          goto LABEL_50;
      }
      v43 = *(double *)(*((_QWORD *)this + 2560) + 8 * v37) / (double)v42;
      v44 = *((_QWORD *)this + 2569);
      if (v40 >= 1)
      {
        if (v43 < v41)
          v41 = v43;
        *(double *)(v44 + 8 * v37) = v41;
        if (v41 <= 0.0)
          goto LABEL_41;
        goto LABEL_52;
      }
LABEL_51:
      v41 = (v41 + v43) * 0.5;
      *(double *)(v44 + 8 * v37) = v41;
      if (v41 <= 0.0)
        goto LABEL_41;
LABEL_52:
      v45 = -v41;
      v46 = *((_QWORD *)this + 2583);
      if ((unint64_t)v36 >= v46)
      {
        v47 = *v38;
        v48 = ((char *)v36 - (char *)*v38) >> 4;
        v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 60)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v50 = v46 - (_QWORD)v47;
        if (v50 >> 3 > v49)
          v49 = v50 >> 3;
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0)
          v51 = 0xFFFFFFFFFFFFFFFLL;
        else
          v51 = v49;
        if (v51)
        {
          if (v51 >> 60)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v52 = (char *)operator new(16 * v51);
          v53 = (uint64_t)&v52[16 * v48];
          *(double *)v53 = v45;
          *(_DWORD *)(v53 + 8) = v37;
          v54 = v53;
          if (v36 == v47)
            goto LABEL_66;
          do
          {
LABEL_64:
            *(_OWORD *)(v54 - 16) = *((_OWORD *)v36 - 1);
            v54 -= 16;
            v36 -= 2;
          }
          while (v36 != v47);
          v36 = *v38;
        }
        else
        {
          v52 = 0;
          v53 = 16 * v48;
          *(double *)v53 = v45;
          *(_DWORD *)(v53 + 8) = v37;
          v54 = 16 * v48;
          if (v36 != v47)
            goto LABEL_64;
        }
LABEL_66:
        *((_QWORD *)this + 2581) = v54;
        v39 = (double *)(v53 + 16);
        *((_QWORD *)this + 2582) = v53 + 16;
        *((_QWORD *)this + 2583) = &v52[16 * v51];
        if (v36)
          operator delete(v36);
        goto LABEL_40;
      }
      *v36 = v45;
      *((_DWORD *)v36 + 2) = v37;
      v39 = v36 + 2;
LABEL_40:
      *((_QWORD *)this + 2582) = v39;
      v36 = v39;
LABEL_41:
      if (++v37 == v17)
      {
        v55 = (uint64_t)*v38;
        goto LABEL_70;
      }
    }
  }
  v55 = (uint64_t)v36;
LABEL_70:
  v56 = 126 - 2 * __clz(((uint64_t)v36 - v55) >> 4);
  if (v36 == (double *)v55)
    v57 = 0;
  else
    v57 = v56;
  return std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *,false>(v55, (unint64_t)v36, (uint64_t)__x, v57, 1);
}

double *std::lower_bound[abi:ne180100]<std::__wrap_iter<std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>(double *result, double *a2, uint64_t a3)
{
  unint64_t v3;
  double v4;
  unint64_t v5;
  double *v6;

  if (a2 != result)
  {
    v3 = ((char *)a2 - (char *)result) >> 4;
    v4 = *(double *)a3;
    do
    {
      v5 = v3 >> 1;
      v6 = &result[2 * (v3 >> 1)];
      if (*v6 < v4 || v4 >= *v6 && SLODWORD(result[2 * v5 + 1]) < *(_DWORD *)(a3 + 8))
      {
        result = v6 + 2;
        v5 = v3 + ~v5;
      }
      v3 = v5;
    }
    while (v5);
  }
  return result;
}

char *std::vector<std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::insert(char **a1, __int128 *a2, __int128 *a3)
{
  unint64_t v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  unint64_t v10;
  _OWORD *v11;
  __int128 *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  _BOOL4 v19;
  __int128 *v20;
  unint64_t v21;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 *v34;
  char *v35;
  __int128 *i;
  __int128 v37;
  char *v38;

  v6 = (__int128 *)*a1;
  v5 = (unint64_t)a1[1];
  v7 = (char *)a2 - *a1;
  v8 = v7 >> 4;
  v9 = (__int128 *)&(*a1)[v7 & 0xFFFFFFFFFFFFFFF0];
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (__int128 *)v5)
    {
      *v9 = *a3;
      a1[1] = (char *)(v9 + 1);
    }
    else
    {
      v11 = v9 + 1;
      v12 = (__int128 *)(v5 - 16);
      v13 = a1[1];
      if (v5 >= 0x10)
      {
        do
        {
          v14 = *v12++;
          *(_OWORD *)v13 = v14;
          v13 += 16;
        }
        while ((unint64_t)v12 < v5);
      }
      a1[1] = v13;
      if ((_OWORD *)v5 != v11)
      {
        v15 = (uint64_t)(v5 - (_QWORD)v11) >> 4;
        v16 = (_DWORD *)(v5 - 8);
        v17 = v15;
        do
        {
          *((_QWORD *)v16 - 1) = *(_QWORD *)&v9[v17 - 1];
          *v16 = DWORD2(v9[v17 - 1]);
          v16 -= 4;
          --v17;
        }
        while (v17 * 16);
      }
      v19 = v9 <= a3 && v13 > (char *)a3;
      v20 = &a3[v19];
      *(_QWORD *)v9 = *(_QWORD *)v20;
      DWORD2(v6[v8]) = *((_DWORD *)v20 + 2);
    }
    return (char *)v9;
  }
  v21 = ((uint64_t)(v5 - (_QWORD)v6) >> 4) + 1;
  if (v21 >> 60)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v23 = v10 - (_QWORD)v6;
  if (v23 >> 3 > v21)
    v21 = v23 >> 3;
  if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
    v24 = 0xFFFFFFFFFFFFFFFLL;
  else
    v24 = v21;
  if (v24)
  {
    if (v24 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v25 = (char *)operator new(16 * v24);
    v26 = &v25[16 * v8];
    v27 = &v25[16 * v24];
    if (v8 != v24)
      goto LABEL_37;
    goto LABEL_27;
  }
  v25 = 0;
  v26 = (char *)(16 * v8);
  v27 = 0;
  if (!v8)
  {
LABEL_27:
    if (v7 < 1)
    {
      if (v6 == a2)
        v29 = 1;
      else
        v29 = v7 >> 3;
      if (v29 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v30 = (char *)operator new(16 * v29);
      v26 = &v30[16 * (v29 >> 2)];
      v27 = &v30[16 * v29];
      if (v25)
      {
        v31 = &v30[16 * v29];
        operator delete(v25);
        v27 = v31;
        v6 = (__int128 *)*a1;
      }
    }
    else
    {
      v28 = v8 + 2;
      if (v8 >= -1)
        v28 = v8 + 1;
      v26 -= 16 * (v28 >> 1);
    }
  }
LABEL_37:
  *(_OWORD *)v26 = *a3;
  v32 = v26 + 16;
  v33 = v26;
  if (v6 != v9)
  {
    v34 = v9;
    v35 = v26;
    do
    {
      v33 = v35 - 16;
      *((_OWORD *)v35 - 1) = *--v34;
      v35 -= 16;
    }
    while (v34 != v6);
  }
  for (i = (__int128 *)a1[1]; v9 != i; v32 += 16)
  {
    v37 = *v9++;
    *(_OWORD *)v32 = v37;
  }
  v38 = *a1;
  *a1 = v33;
  a1[1] = v32;
  a1[2] = v27;
  if (v38)
    operator delete(v38);
  return v26;
}

void sub_22DB9AB3C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = (a1[1] - *a1) >> 4;
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<std::pair<int *,int>>::__append(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 16 * a2;
  }
}

uint64_t operations_research::sat::LinearProgrammingConstraint::GetImpliedLowerBound(operations_research::sat::LinearProgrammingConstraint *this, const operations_research::sat::LinearConstraint *a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v27[2];
  uint64_t *v28;
  uint64_t v29;

  v2 = *((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2);
  if ((int)(v2 >> 2) < 1)
    return 0;
  v5 = 0;
  v6 = 0;
  v7 = (v2 >> 2);
  while (1)
  {
    v8 = *(_DWORD *)(*((_QWORD *)a2 + 2) + 4 * v5);
    v9 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8 * v5);
    v29 = v9;
    LODWORD(v27[0]) = 0;
    if (v9)
    {
      v10 = *((_QWORD *)this + 2503);
      if (v9 > 0)
        goto LABEL_5;
    }
    else
    {
      v28 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)&v29, (int)v27, "coeff != 0");
      if (v28)
      {
        google::LogMessageFatal::LogMessageFatal(v27, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 1436, &v28);
        google::LogMessage::stream((google::LogMessage *)v27);
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v27);
      }
      v9 = v29;
      v10 = *((_QWORD *)this + 2503);
      if (v29 > 0)
      {
LABEL_5:
        v11 = *(_QWORD *)(*(_QWORD *)(v10 + 40) + 12 * v8);
        goto LABEL_9;
      }
    }
    v11 = -*(_QWORD *)(*(_QWORD *)(v10 + 40) + 12 * (v8 ^ 1));
LABEL_9:
    if (v9 >= 0)
      v12 = v9;
    else
      v12 = -v9;
    v13 = 63 - __clz(v12);
    if (!v9)
      v13 = 0;
    if (v11 >= 0)
      v14 = v11;
    else
      v14 = -v11;
    v15 = 63 - __clz(v14);
    if (!v11)
      v15 = 0;
    v16 = v15 + v13;
    v17 = __OFSUB__(v16, 61);
    if (v16 <= 61)
    {
      v18 = v11 * v9;
      v19 = v11 * v9 - 0x7FFFFFFFFFFFFFFFLL;
      v17 = __OFSUB__(v19, 2);
      if (v19 < 2)
        return 0x8000000000000002;
      goto LABEL_30;
    }
    v18 = 0;
    if (!v9 || !v11)
      goto LABEL_30;
    v18 = ((v11 ^ (unint64_t)v9) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
    v20 = v14 * v12;
    if (v16 <= 0x3E && v20 < v18)
      break;
    v17 = __OFSUB__(v18 - 0x7FFFFFFFFFFFFFFFLL, 2);
    if ((unint64_t)(v18 - 0x7FFFFFFFFFFFFFFFLL) < 2)
      return 0x8000000000000002;
LABEL_30:
    v22 = v18 + v6;
    v23 = (v18 + v6) ^ v18;
    v24 = (v18 + v6) ^ v6;
    v25 = ((unint64_t)v18 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
    if ((v23 & v24) < 0 != v17)
      v6 = v25;
    else
      v6 = v22;
    if ((unint64_t)(v6 + 0x7FFFFFFFFFFFFFFFLL) >= 0xFFFFFFFFFFFFFFFELL)
      return 0x8000000000000002;
    if (v7 == ++v5)
      return v6;
  }
  if (v18 >= 0)
    v18 = v14 * v12;
  else
    v18 = -(uint64_t)v20;
  v17 = __OFSUB__(v18 - 0x7FFFFFFFFFFFFFFFLL, 2);
  if ((unint64_t)(v18 - 0x7FFFFFFFFFFFFFFFLL) >= 2)
    goto LABEL_30;
  return 0x8000000000000002;
}

void sub_22DB9AD7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void operations_research::sat::LinearProgrammingConstraint::PreventOverflow(operations_research::sat::LinearProgrammingConstraint *this, operations_research::sat::LinearConstraint *a2, int a3)
{
  std::vector<int> *v5;
  _DWORD *v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int128 v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  signed __int128 v50;
  uint64_t v51;
  unint64_t v52;

  v5 = (std::vector<int> *)((char *)a2 + 16);
  v6 = (_DWORD *)*((_QWORD *)a2 + 2);
  v7 = *((_QWORD *)a2 + 1);
  v8 = (double)-v7;
  if (v7 > 0x7FFFFFFFFFFFFFFDLL)
    v8 = -INFINITY;
  if (v7 < (uint64_t)0x8000000000000003)
    v8 = INFINITY;
  v9 = fmin(v8, 0.0);
  v10 = fmax(v8, 0.0);
  v11 = *((_QWORD *)a2 + 3) - (_QWORD)v6;
  v12 = v11 >> 2;
  if ((int)(v11 >> 2) >= 1)
  {
    v13 = (uint64_t *)*((_QWORD *)a2 + 5);
    v14 = ((unint64_t)v11 >> 2);
    v15 = *(_QWORD *)(*((_QWORD *)this + 2503) + 40);
    v16 = (int *)*((_QWORD *)a2 + 2);
    do
    {
      v18 = *v16++;
      v17 = v18;
      v20 = *v13++;
      v19 = v20;
      v21 = (double)v20;
      v22 = -INFINITY;
      if (v20 < (uint64_t)0x8000000000000003)
        v21 = -INFINITY;
      if (v19 > 0x7FFFFFFFFFFFFFFDLL)
        v21 = INFINITY;
      v23 = *(_QWORD *)(v15 + 12 * v17);
      v24 = (double)v23;
      if (v23 < (uint64_t)0x8000000000000003)
        v24 = -INFINITY;
      v25 = *(_QWORD *)(v15 + 12 * (v17 ^ 1));
      if (v23 > 0x7FFFFFFFFFFFFFFDLL)
        v24 = INFINITY;
      if (v25 <= 0x7FFFFFFFFFFFFFFDLL)
        v22 = (double)-v25;
      v26 = v21 * v24;
      if (v25 < (uint64_t)0x8000000000000003)
        v22 = INFINITY;
      v27 = v21 * v22;
      if (v27 >= v26)
        v28 = v26;
      else
        v28 = v27;
      v9 = v9 + fmin(v28, 0.0);
      if (v26 >= v27)
        v27 = v26;
      v10 = v10 + fmax(v27, 0.0);
      --v14;
    }
    while (v14);
  }
  v29 = -v9;
  if (v10 < v29)
    v10 = v29;
  v30 = vcvtpd_s64_f64(ldexp(v10, -a3));
  if (v30 >= 2)
  {
    if ((int)v12 < 1)
    {
      v32 = 0;
      v33 = 0;
      v31 = 0;
    }
    else
    {
      v31 = 0;
      v32 = 0;
      v33 = 0;
      v34 = (uint64_t *)*((_QWORD *)a2 + 5);
      v35 = *(_QWORD *)(*((_QWORD *)this + 2503) + 144);
      v36 = ((unint64_t)v11 >> 2);
      v37 = v6;
      v38 = v34;
      do
      {
        v39 = *v38++;
        v40 = v39 / v30 - (v39 / v30 * v30 > v39);
        v41 = v39 - v40 * (unsigned __int128)(unint64_t)v30;
        LODWORD(v39) = *v37++;
        v42 = v39;
        v43 = *(_QWORD *)(v35 + 20 * (int)v39);
        v44 = (v41 * v43) >> 64;
        v45 = v41 * v43;
        v46 = __CFADD__(v45, v32);
        v32 += v45;
        v33 += v46 + v44;
        if (v40)
        {
          v6[v31] = v42;
          v34[v31++] = v40;
        }
        --v36;
      }
      while (v36);
    }
    v47 = v31;
    if (v31 <= v12)
    {
      if (v31 < v12)
        *((_QWORD *)a2 + 3) = &v6[v31];
    }
    else
    {
      std::vector<int>::__append(v5, v31 - v12);
    }
    v48 = *((_QWORD *)a2 + 5);
    v49 = (*((_QWORD *)a2 + 6) - v48) >> 3;
    if (v47 <= v49)
    {
      if (v47 < v49)
        *((_QWORD *)a2 + 6) = v48 + 8 * v47;
    }
    else
    {
      std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::__append((uint64_t)a2 + 40, v47 - v49);
    }
    v50 = *((uint64_t *)a2 + 1) - __PAIR128__(v33, v32);
    v51 = __divti3();
    *((_QWORD *)a2 + 1) = v51 - (v50 < (__int128)(__PAIR128__(v52, v51) * v30));
  }
}

void operations_research::sat::LinearProgrammingConstraint::SetImpliedLowerBoundReason(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  char **v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  int64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  int v70;
  char *v71;
  char **v72;
  uint64_t v73;
  _BYTE v75[12];
  uint64_t *v76;
  uint64_t *v77;
  void *__p;
  char *v79;
  char *v80;
  uint64_t v81;

  v80 = 0;
  v81 = a3;
  v4 = (char **)(a1 + 20208);
  *(_QWORD *)(a1 + 20216) = *(_QWORD *)(a1 + 20208);
  __p = 0;
  v79 = 0;
  v5 = a2[3] - a2[2];
  if ((int)(v5 >> 2) >= 1)
  {
    v6 = 0;
    v72 = (char **)(a1 + 20208);
    v73 = (v5 >> 2);
    while (1)
    {
      v7 = *(_DWORD *)(a2[2] + 4 * v6);
      v8 = *(uint64_t **)(a2[5] + 8 * v6);
      v77 = v8;
      *(_DWORD *)v75 = 0;
      if (v8)
      {
        if ((uint64_t)v8 > 0)
          goto LABEL_6;
LABEL_45:
        v43 = -(uint64_t)v8;
        v44 = v79;
        if (v79 < v80)
        {
          *(_QWORD *)v79 = v43;
          v45 = (uint64_t)(v44 + 8);
          v4 = v72;
          goto LABEL_67;
        }
        v46 = (char *)__p;
        v47 = v79 - (_BYTE *)__p;
        v48 = (v79 - (_BYTE *)__p) >> 3;
        v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v50 = v80 - (_BYTE *)__p;
        if ((v80 - (_BYTE *)__p) >> 2 > v49)
          v49 = v50 >> 2;
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
          v51 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v51 = v49;
        if (v51)
        {
          if (v51 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v52 = (char *)operator new(8 * v51);
          v53 = (uint64_t *)&v52[8 * v48];
          *v53 = v43;
          v45 = (uint64_t)(v53 + 1);
          if (v44 != v46)
          {
LABEL_56:
            v54 = v44 - 8 - v46;
            v4 = v72;
            if (v54 < 0x58)
              goto LABEL_107;
            if ((unint64_t)(v44 - &v52[v47]) < 0x20)
              goto LABEL_107;
            v55 = (v54 >> 3) + 1;
            v56 = 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
            v57 = &v44[-v56];
            v53 = (uint64_t *)((char *)v53 - v56);
            v58 = &v52[8 * v48 - 16];
            v59 = v44 - 16;
            v60 = v55 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v61 = *(_OWORD *)v59;
              *((_OWORD *)v58 - 1) = *((_OWORD *)v59 - 1);
              *(_OWORD *)v58 = v61;
              v58 -= 32;
              v59 -= 32;
              v60 -= 4;
            }
            while (v60);
            v44 = v57;
            if (v55 != (v55 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_107:
              do
              {
                v62 = *((_QWORD *)v44 - 1);
                v44 -= 8;
                *--v53 = v62;
              }
              while (v44 != v46);
            }
            goto LABEL_65;
          }
        }
        else
        {
          v52 = 0;
          v53 = (uint64_t *)(8 * v48);
          *(_QWORD *)(8 * v48) = v43;
          v45 = 8 * v48 + 8;
          if (v44 != v46)
            goto LABEL_56;
        }
        v4 = v72;
LABEL_65:
        __p = v53;
        v79 = (char *)v45;
        v80 = &v52[8 * v51];
        if (v46)
          operator delete(v46);
LABEL_67:
        v79 = (char *)v45;
        v63 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 20024) + 40) + 12 * (v7 ^ 1));
        *(_DWORD *)v75 = v7 ^ 1;
        *(_QWORD *)&v75[4] = v63;
        v29 = *(_QWORD *)v75;
        v30 = HIDWORD(v63);
        v31 = *(_BYTE **)(a1 + 20216);
        v64 = *(_QWORD *)(a1 + 20224);
        if ((unint64_t)v31 >= v64)
        {
          v65 = *v4;
          v66 = 0xAAAAAAAAAAAAAAABLL * ((v31 - *v4) >> 2);
          v67 = v66 + 1;
          if (v66 + 1 > 0x1555555555555555)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v68 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v64 - (_QWORD)v65) >> 2);
          if (2 * v68 > v67)
            v67 = 2 * v68;
          if (v68 >= 0xAAAAAAAAAAAAAAALL)
            v37 = 0x1555555555555555;
          else
            v37 = v67;
          if (v37)
          {
            if (v37 > 0x1555555555555555)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v38 = (char *)operator new(12 * v37);
          }
          else
          {
            v38 = 0;
          }
          v39 = &v38[12 * v66];
          *(_QWORD *)v39 = v29;
          *((_DWORD *)v39 + 2) = v30;
          v40 = v39;
          if (v31 == v65)
            goto LABEL_81;
          do
          {
            v69 = *(_QWORD *)(v31 - 12);
            v31 -= 12;
            v70 = *((_DWORD *)v31 + 2);
            *(_QWORD *)(v40 - 12) = v69;
            v40 -= 12;
            *((_DWORD *)v40 + 2) = v70;
          }
          while (v31 != v65);
          goto LABEL_80;
        }
LABEL_3:
        *(_QWORD *)v31 = v29;
        *((_DWORD *)v31 + 2) = v30;
        *(_QWORD *)(a1 + 20216) = v31 + 12;
        if (++v6 == v73)
          goto LABEL_84;
      }
      else
      {
        v76 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)&v77, (int)v75, "coeff != 0");
        if (v76)
        {
          google::LogMessageFatal::LogMessageFatal((unint64_t *)v75, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 1548, &v76);
          google::LogMessage::stream((google::LogMessage *)v75);
          goto LABEL_103;
        }
        v8 = v77;
        if ((uint64_t)v77 <= 0)
          goto LABEL_45;
LABEL_6:
        v9 = v79;
        if (v79 < v80)
        {
          *(_QWORD *)v79 = v8;
          v10 = (uint64_t)(v9 + 8);
          goto LABEL_29;
        }
        v11 = (char *)__p;
        v12 = v79 - (_BYTE *)__p;
        v13 = (v79 - (_BYTE *)__p) >> 3;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v15 = v80 - (_BYTE *)__p;
        if ((v80 - (_BYTE *)__p) >> 2 > v14)
          v14 = v15 >> 2;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
        {
          if (v16 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v17 = (char *)operator new(8 * v16);
          v18 = &v17[8 * v13];
          *(_QWORD *)v18 = v8;
          v10 = (uint64_t)(v18 + 8);
          if (v9 == v11)
            goto LABEL_26;
LABEL_17:
          v19 = v9 - 8 - v11;
          if (v19 < 0x58)
            goto LABEL_108;
          if ((unint64_t)(v9 - &v17[v12]) < 0x20)
            goto LABEL_108;
          v20 = (v19 >> 3) + 1;
          v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          v22 = &v9[-v21];
          v18 -= v21;
          v23 = &v17[8 * v13 - 16];
          v24 = v9 - 16;
          v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v26 = *(_OWORD *)v24;
            *((_OWORD *)v23 - 1) = *((_OWORD *)v24 - 1);
            *(_OWORD *)v23 = v26;
            v23 -= 32;
            v24 -= 32;
            v25 -= 4;
          }
          while (v25);
          v9 = v22;
          if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_108:
            do
            {
              v27 = *((_QWORD *)v9 - 1);
              v9 -= 8;
              *((_QWORD *)v18 - 1) = v27;
              v18 -= 8;
            }
            while (v9 != v11);
          }
          goto LABEL_26;
        }
        v17 = 0;
        v18 = (char *)(8 * v13);
        *(_QWORD *)(8 * v13) = v8;
        v10 = 8 * v13 + 8;
        if (v9 != v11)
          goto LABEL_17;
LABEL_26:
        __p = v18;
        v79 = (char *)v10;
        v80 = &v17[8 * v16];
        if (v11)
          operator delete(v11);
        v4 = v72;
LABEL_29:
        v79 = (char *)v10;
        v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 20024) + 40) + 12 * v7);
        *(_DWORD *)v75 = v7;
        *(_QWORD *)&v75[4] = v28;
        v29 = *(_QWORD *)v75;
        v30 = HIDWORD(v28);
        v31 = *(_BYTE **)(a1 + 20216);
        v32 = *(_QWORD *)(a1 + 20224);
        if ((unint64_t)v31 < v32)
          goto LABEL_3;
        v33 = *v4;
        v34 = 0xAAAAAAAAAAAAAAABLL * ((v31 - *v4) >> 2);
        v35 = v34 + 1;
        if (v34 + 1 > 0x1555555555555555)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32 - (_QWORD)v33) >> 2);
        if (2 * v36 > v35)
          v35 = 2 * v36;
        if (v36 >= 0xAAAAAAAAAAAAAAALL)
          v37 = 0x1555555555555555;
        else
          v37 = v35;
        if (v37)
        {
          if (v37 > 0x1555555555555555)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v38 = (char *)operator new(12 * v37);
        }
        else
        {
          v38 = 0;
        }
        v39 = &v38[12 * v34];
        *(_QWORD *)v39 = v29;
        *((_DWORD *)v39 + 2) = v30;
        v40 = v39;
        if (v31 == v33)
          goto LABEL_81;
        do
        {
          v41 = *(_QWORD *)(v31 - 12);
          v31 -= 12;
          v42 = *((_DWORD *)v31 + 2);
          *(_QWORD *)(v40 - 12) = v41;
          v40 -= 12;
          *((_DWORD *)v40 + 2) = v42;
        }
        while (v31 != v33);
LABEL_80:
        v31 = *v4;
LABEL_81:
        *(_QWORD *)(a1 + 20208) = v40;
        v71 = v39 + 12;
        *(_QWORD *)(a1 + 20216) = v39 + 12;
        *(_QWORD *)(a1 + 20224) = &v38[12 * v37];
        if (v31)
          operator delete(v31);
        *(_QWORD *)(a1 + 20216) = v71;
        if (++v6 == v73)
        {
LABEL_84:
          a3 = v81;
          break;
        }
      }
    }
  }
  *(_DWORD *)v75 = 0;
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (a3 <= 0)
      goto LABEL_88;
    goto LABEL_87;
  }
  v77 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)&v81, (int)v75, "slack >= 0");
  if (v77)
  {
    google::LogMessageFatal::LogMessageFatal((unint64_t *)v75, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 1557, &v77);
    google::LogMessage::stream((google::LogMessage *)v75);
LABEL_103:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v75);
  }
  a3 = v81;
  if (v81 > 0)
LABEL_87:
    operations_research::sat::IntegerTrail::RelaxLinearReason(*(std::vector<int> **)(a1 + 20024), a3, (uint64_t)__p, (v79 - (_BYTE *)__p) >> 3, v4);
LABEL_88:
  operations_research::sat::IntegerTrail::RemoveLevelZeroBounds(*(_QWORD *)(a1 + 20024), (int **)v4);
  if (__p)
  {
    v79 = (char *)__p;
    operator delete(__p);
  }
}

void sub_22DB9B714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DB9B71C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *operations_research::sat::LinearProgrammingConstraint::AdjustNewLinearConstraint(uint64_t *result, int **a2, _QWORD *a3, uint64_t *a4)
{
  int *v4;
  int *v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  int64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  int *v24;
  int *v25;
  double i;
  uint64_t v27;
  BOOL v29;
  BOOL v31;
  unint64_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  uint64_t v43;
  double v44;
  double v45;
  double v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BOOL8 v57;
  uint64_t v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  uint64_t v72;
  int *v73;
  int *v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;
  int *v78;
  _QWORD *v79;
  uint64_t *v80;
  unint64_t v81[2];
  uint64_t *v82;
  uint64_t v83;

  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    v6 = result;
    do
    {
      v7 = *(_QWORD *)(v4 + 1);
      if (!v7)
        goto LABEL_3;
      v8 = *v4;
      v9 = v6[39];
      v10 = *(_QWORD *)(v9 + 40 * *v4);
      v11 = *(_QWORD *)(v9 + 40 * *v4 + 8);
      if (v11 == v10)
      {
        v12 = 1000000000000000000;
        v13 = 1000000000000000000;
        if (v7 > 0)
          goto LABEL_13;
      }
      else
      {
        if (v7 >= 1)
        {
          if ((unint64_t)v7 >= 0xDE0B6B3A7640000)
            v13 = 1000000000000000000;
          else
            v13 = *(_QWORD *)(v4 + 1);
          v12 = 1000000000000000000;
LABEL_13:
          if (v11)
            goto LABEL_19;
          goto LABEL_37;
        }
        if ((unint64_t)-v7 < 0xDE0B6B3A7640000)
          v12 = -v7;
        else
          v12 = 1000000000000000000;
      }
      v11 = *(_QWORD *)(v9 + 40 * v8);
      v13 = 1000000000000000000;
      if (v10)
      {
LABEL_19:
        v14 = *a4;
        result = (uint64_t *)v11;
        if (v11 >= 0)
          v15 = v11;
        else
          v15 = -v11;
        v16 = v14 <= 0;
        if (v14 < 0)
          v14 = -v14;
        v17 = !v16;
        v18 = (1000000000000000000 - v14) & ~((1000000000000000000 - v14) >> 63);
        v19 = (__PAIR128__(v18 / v15, v18) - v18 / v15 * v15) >> 64;
        v20 = 0xDE0B6B3A7640000 / v15 - (0xDE0B6B3A7640000 / v15 * v15 > 0xDE0B6B3A7640000);
        if ((((v11 > 0) ^ v17) & 1) != 0)
        {
          if (v19 < v13)
            v13 = v19;
          if (v20 < v12)
            v12 = v20;
        }
        else
        {
          if (v19 < v12)
            v12 = v19;
          if (v20 < v13)
            v13 = v20;
        }
      }
LABEL_37:
      v21 = (double)v11;
      if (v11 < (uint64_t)0x8000000000000003)
        v21 = -INFINITY;
      if (v11 <= 0x7FFFFFFFFFFFFFFDLL)
        v22 = v21;
      else
        v22 = INFINITY;
      v23 = v9 + 40 * v8;
      v24 = *(int **)(v23 + 16);
      v25 = *(int **)(v23 + 24);
      for (i = v22; v24 != v25; v24 += 3)
      {
        while (1)
        {
          v48 = *v24;
          v49 = *(_QWORD *)(v24 + 1);
          v83 = v49;
          if (v49 >= 0)
            v50 = v49;
          else
            v50 = -v49;
          LODWORD(v81[0]) = 0;
          if (!v49)
          {
            v79 = a3;
            v80 = a4;
            v77 = v5;
            v78 = v4;
            v76 = v11;
            result = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)&v83, (int)v81, "coeff != 0");
            v11 = v76;
            v5 = v77;
            v4 = v78;
            a3 = v79;
            a4 = v80;
            v82 = result;
            if (result)
            {
              google::LogMessageFatal::LogMessageFatal(v81, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 1719, &v82);
              google::LogMessage::stream((google::LogMessage *)v81);
              google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v81);
            }
          }
          v51 = *(_DWORD *)(v6[2490] + 4 * v48);
          v52 = *(_QWORD *)(v6[2503] + 40);
          v53 = *(_QWORD *)(v52 + 12 * v51);
          v54 = *(_QWORD *)(v52 + 12 * (v51 ^ 1));
          v55 = -v54;
          v56 = *(_QWORD *)(*a3 + 8 * v48);
          if (v56)
            break;
          v57 = 0xDE0B6B3A7640000 / v50 * v50 > 0xDE0B6B3A7640000;
          v58 = 0xDE0B6B3A7640000 / v50 - v57;
          if (v58 < v12)
            v12 = 0xDE0B6B3A7640000 / v50 - v57;
          if (v58 < v13)
            v13 = 0xDE0B6B3A7640000 / v50 - v57;
          v59 = (double)v83;
          v60 = -INFINITY;
          if (v83 >= (uint64_t)0x8000000000000003)
            v61 = (double)v83;
          else
            v61 = -INFINITY;
          if (v54 <= 0x7FFFFFFFFFFFFFFDLL)
            v62 = (double)v55;
          else
            v62 = -INFINITY;
          if (v54 < (uint64_t)0x8000000000000003)
            v62 = INFINITY;
          v63 = i - v61 * v62;
          v64 = (double)v53;
          if (v53 >= (uint64_t)0x8000000000000003)
            v65 = (double)v53;
          else
            v65 = -INFINITY;
          if (v53 > 0x7FFFFFFFFFFFFFFDLL)
            v65 = INFINITY;
          v66 = v22 - v61 * v65;
          if ((unint64_t)v83 > 0x7FFFFFFFFFFFFFFDLL)
            v59 = INFINITY;
          if (v53 < (uint64_t)0x8000000000000003)
            v64 = -INFINITY;
          if (v53 > 0x7FFFFFFFFFFFFFFDLL)
            v64 = INFINITY;
          v67 = i - v59 * v64;
          if (v54 <= 0x7FFFFFFFFFFFFFFDLL)
            v60 = (double)v55;
          if (v54 < (uint64_t)0x8000000000000003)
            v60 = INFINITY;
          v68 = v22 - v59 * v60;
          if (v83 >= 1)
            v22 = v68;
          else
            v22 = v66;
          if (v83 >= 1)
            i = v67;
          else
            i = v63;
          v24 += 3;
          if (v24 == v25)
            goto LABEL_43;
        }
        v31 = v56 <= 0;
        if (v56 >= 0)
          v32 = *(_QWORD *)(*a3 + 8 * v48);
        else
          v32 = -v56;
        v33 = v56 > 0;
        if (v31)
          v34 = v55;
        else
          v34 = v53;
        if (v32 >= 0x721F494C589BFFFELL)
          v35 = 0x721F494C589BFFFELL;
        else
          v35 = v32;
        v36 = v35 + 1000000000000000000;
        if (v53 == v55)
          v37 = v36;
        else
          v37 = v32;
        v38 = (__PAIR128__(v37 / v50, v37) - v37 / v50 * v50) >> 64;
        v39 = (1000000000000000000 - v32) & ~((uint64_t)(1000000000000000000 - v32) >> 63);
        v40 = (__PAIR128__(v39 / v50, v39) - v39 / v50 * v50) >> 64;
        v41 = v33 ^ (v83 > 0);
        v42 = v41 == 0;
        if (v41)
          v43 = v40;
        else
          v43 = v38;
        if (v42)
          v38 = v40;
        if (v43 < v13)
          v13 = v43;
        v44 = (double)v83;
        if (v38 < v12)
          v12 = v38;
        v45 = -INFINITY;
        if (v83 < (uint64_t)0x8000000000000003)
          v44 = -INFINITY;
        if (v83 > 0x7FFFFFFFFFFFFFFDLL)
          v44 = INFINITY;
        if (v34 >= (uint64_t)0x8000000000000003)
          v45 = (double)v34;
        if (v34 > 0x7FFFFFFFFFFFFFFDLL)
          v45 = INFINITY;
        v46 = i - v44 * v45;
        v47 = v22 - v44 * v45;
        if (v34)
        {
          v22 = v47;
          i = v46;
        }
      }
LABEL_43:
      v27 = v12 & ~(v12 >> 63);
      v29 = i > -1.0 || v12 < 1;
      if (v22 >= 1.0 && v13 > 0)
      {
        if (v29)
          goto LABEL_137;
        v69 = (double)v13;
        v70 = INFINITY;
        if ((unint64_t)v13 > 0x7FFFFFFFFFFFFFFDLL)
          v69 = INFINITY;
        v71 = fabs(v22 * v69);
        if (v12 <= 0x7FFFFFFFFFFFFFFDLL)
          v70 = (double)v12;
        if (v71 > fabs(i * v70))
LABEL_137:
          v27 = -v13;
LABEL_138:
        *(_QWORD *)(v4 + 1) += v27;
        *a4 += v27 * v11;
        v72 = v6[39] + 40 * v8;
        v73 = *(int **)(v72 + 16);
        v74 = *(int **)(v72 + 24);
        if (v73 != v74)
        {
          v75 = *a3;
          do
          {
            *(_QWORD *)(v75 + 8 * *v73) += *(_QWORD *)(v73 + 1) * v27;
            v73 += 3;
          }
          while (v73 != v74);
        }
        goto LABEL_3;
      }
      if (!v29)
        goto LABEL_138;
LABEL_3:
      v4 += 3;
    }
    while (v4 != v5);
  }
  return result;
}

void sub_22DB9BC74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::SeparateSubtourInequalities(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4, uint64_t *a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  double *v24;
  char *v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  double v33;
  int v34;
  int v35;
  double *v36;
  int v37;
  int v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  double *v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  double *v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  unint64_t v51;
  double *v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  unint64_t v58;
  uint64_t v59;
  size_t v60;
  int32x4_t *v61;
  char *v62;
  char *v63;
  int32x4_t *v64;
  char *v65;
  uint64_t v66;
  int32x4_t *v67;
  char *v68;
  int32x4_t *v69;
  int32x4_t v70;
  int32x4_t *v71;
  int32x4_t v72;
  int32x4_t v73;
  uint64_t v74;
  int32x4_t v75;
  uint64_t v76;
  int *v77;
  int *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  __int32 v82;
  uint64_t v83;
  int v84;
  __int32 *v85;
  int i;
  uint64_t v87;
  __int32 v88;
  uint64_t v89;
  int v90;
  __int32 *v91;
  int j;
  char *v93;
  int64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  _BYTE *v100;
  _DWORD *v101;
  unint64_t v102;
  char *v103;
  int v104;
  char *v105;
  char *v106;
  char *v107;
  int64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  char *v112;
  _BYTE *v113;
  unint64_t v114;
  char *v115;
  __int32 v116;
  char *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _OWORD *v121;
  char *v122;
  uint64_t v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  _OWORD *v127;
  char *v128;
  uint64_t v129;
  __int128 v130;
  void *v131;
  char *v132;
  char *v133;
  unint64_t v134;
  unint64_t k;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  char *v142;
  char *v143;
  unint64_t v144;
  int *v145;
  _OWORD *v146;
  __int128 *v147;
  unint64_t v148;
  __int128 v149;
  unint64_t v150;
  char *v151;
  int v152;
  uint64_t v153;
  unint64_t v154;
  int64x2_t *v155;
  int *v156;
  unint64_t v157;
  char *v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  BOOL v162;
  uint64_t v163;
  int v165;
  uint64_t *v166;
  uint64_t *v167;
  _DWORD *v168;
  uint64_t *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  _BYTE *v174;
  uint64_t *v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t *v179;
  _OWORD *v180;
  uint64_t *v181;
  uint64_t v182;
  __int128 v183;
  int v184;
  int v185;
  uint64_t *v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  _QWORD *v192;
  unint64_t v193;
  int *v194;
  unint64_t v195;
  _QWORD *v196;
  unint64_t v197;
  int *v198;
  uint64_t *v199;
  unint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  _BYTE *v206;
  uint64_t *v207;
  unint64_t v208;
  uint64_t *v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  _OWORD *v213;
  uint64_t *v214;
  uint64_t v215;
  __int128 v216;
  char *v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  unint64_t v221;
  _DWORD *v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  char *v226;
  char *v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  void *v231;
  uint64_t v232;
  char v233;
  unint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t *v237;
  unint64_t v238;
  uint64_t v239;
  int64x2_t *v240;
  int64x2_t v241;
  uint64_t v242;
  int64x2_t v243;
  uint64_t v244;
  uint64_t v245;
  size_t v246;
  int **v247;
  int *v248;
  size_t v249;
  uint64_t v250;
  char v251;
  char *v252;
  uint64_t v253;
  int *v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  double *v258;
  double v259;
  double v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  int v265;
  int v266;
  uint64_t v267;
  int v268;
  int v269;
  unint64_t v270;
  _QWORD *v271;
  _QWORD *v272;
  unint64_t v273;
  BOOL v274;
  _QWORD *v275;
  uint64_t *v276;
  uint64_t v277;
  double v278;
  unint64_t v279;
  double v280;
  void *v281;
  char *v282;
  unint64_t v283;
  unint64_t *v284;
  google::LogMessage *v285;
  _QWORD *v286;
  _QWORD *v287;
  google::LogMessage *v288;
  _QWORD *v289;
  google::LogMessage *v290;
  _QWORD *v291;
  unint64_t *v292;
  _QWORD *v293;
  unint64_t *v294;
  char *v295;
  uint64_t v296;
  unint64_t v297;
  size_t __sz;
  size_t __sza;
  char *v301;
  char *v305;
  unint64_t v306;
  _QWORD *v307;
  char *v308;
  int *v309;
  _DWORD *v310;
  _QWORD *v311;
  uint64_t v312;
  int *__p;
  int *__pa;
  double *__pb;
  double *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unsigned int v322;
  unsigned int v323;
  int **v324;
  size_t v325;
  int v326;
  size_t v327;
  size_t v328;
  size_t v329;
  size_t v330;
  size_t v331;
  void *v332[3];
  char *v333;
  char *v334;
  char *v335;
  void *v336;
  __int32 *v337;
  char *v338;
  void *v339;
  char *v340;
  char *v341;
  void *v342;
  int *v343;
  char *v344;
  void *v345;
  char *v346;
  char *v347;
  void *v348;
  char *v349;
  int *v350;
  void *v351;
  uint64_t v352;
  unint64_t v353;
  __int128 v354;
  void *v355;
  void *v356;
  void *v357;
  void *v358;
  uint64_t *v359;
  uint64_t *v360;
  unint64_t v361;
  __int128 v362;
  __int128 v363;

  if ((int)a1 < 3)
    return;
  v11 = a1;
  v13 = *a4;
  v12 = a4[1];
  v346 = 0;
  v347 = 0;
  v345 = 0;
  v14 = v12 - v13;
  if (v12 == v13)
  {
    v15 = 0;
  }
  else
  {
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFDLL)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v15 = (char *)operator new(2 * v14);
    v345 = v15;
    v347 = &v15[8 * (v14 >> 2)];
    bzero(v15, 2 * v14);
    v346 = &v15[2 * v14];
  }
  v342 = 0;
  v343 = 0;
  v344 = 0;
  v16 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a10);
  v18 = *a4;
  v17 = a4[1];
  v311 = a4;
  v312 = v11;
  if (v17 != *a4)
  {
    v19 = v16;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v325 = (size_t)v343;
    v320 = v16;
    while (1)
    {
      __p = (int *)v23;
      v29 = *(int *)(v18 + 4 * v21);
      v30 = *(_QWORD *)(v19 + 160);
      v31 = (unint64_t)(*(_QWORD *)(v19 + 168) - v30) >> 2;
      if ((int)v29 >= (int)v31 || (v32 = *(int *)(v30 + 4 * v29), (_DWORD)v32 == -1))
      {
        v34 = v29 ^ 1;
        if (v34 >= (int)v31)
          v35 = -1;
        else
          v35 = *(_DWORD *)(v30 + 4 * v34);
        v23 = (char *)__p;
        v33 = 1.0 - *(double *)(*a5 + 8 * v35);
        *(double *)&v15[8 * v21] = v33;
        if (v33 < 0.000001)
          goto LABEL_10;
      }
      else
      {
        v33 = *(double *)(*a5 + 8 * v32);
        v23 = (char *)__p;
        *(double *)&v15[8 * v21] = v33;
        if (v33 < 0.000001)
          goto LABEL_10;
      }
      v36 = v24;
      v37 = *(_DWORD *)(*a2 + 4 * v21);
      v38 = *(_DWORD *)(*a3 + 4 * v21);
      if (v36 < (double *)v25)
      {
        *(_DWORD *)v36 = v37;
        *((_DWORD *)v36 + 1) = v38;
        v36[1] = v33;
        v24 = v36 + 2;
        if (v20 >= (unint64_t)v22)
          goto LABEL_36;
        goto LABEL_8;
      }
      v39 = v22;
      v40 = ((char *)v36 - v23) >> 4;
      v41 = v40 + 1;
      if ((unint64_t)(v40 + 1) >> 60)
      {
        v343 = (int *)v325;
        v344 = v22;
        v342 = v26;
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      v42 = v15;
      v43 = v36;
      if ((v25 - v23) >> 3 > v41)
        v41 = (v25 - v23) >> 3;
      if ((unint64_t)(v25 - v23) >= 0x7FFFFFFFFFFFFFF0)
        v44 = 0xFFFFFFFFFFFFFFFLL;
      else
        v44 = v41;
      if (v44)
      {
        if (v44 >> 60)
        {
          v343 = (int *)v325;
          v344 = v39;
          v342 = v26;
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        v45 = (char *)operator new(16 * v44);
        v23 = (char *)__p;
        v46 = (uint64_t)&v45[16 * v40];
        *(_DWORD *)v46 = v37;
        *(_DWORD *)(v46 + 4) = v38;
        *(double *)(v46 + 8) = v33;
        if (v43 == (double *)__p)
        {
LABEL_51:
          v49 = (int *)v46;
          v15 = v42;
          v25 = &v45[16 * v44];
          v24 = (double *)(v46 + 16);
          v22 = v39;
          if (v23)
            goto LABEL_34;
          goto LABEL_35;
        }
      }
      else
      {
        v45 = 0;
        v46 = 16 * v40;
        *(_DWORD *)v46 = v37;
        *(_DWORD *)(v46 + 4) = v38;
        *(double *)(v46 + 8) = v33;
        if (v36 == (double *)v23)
          goto LABEL_51;
      }
      v47 = v43;
      v48 = v46;
      v15 = v42;
      do
      {
        v49 = (int *)(v48 - 16);
        *(_OWORD *)(v48 - 16) = *((_OWORD *)v47 - 1);
        v47 -= 2;
        v48 -= 16;
      }
      while (v47 != (double *)v23);
      v25 = &v45[16 * v44];
      v24 = (double *)(v46 + 16);
      v22 = v39;
      if (v23)
LABEL_34:
        operator delete(v23);
LABEL_35:
      v23 = (char *)v49;
      v19 = v320;
      if (v20 >= (unint64_t)v22)
      {
LABEL_36:
        v50 = (uint64_t)(v20 - (_QWORD)v26) >> 4;
        v51 = v50 + 1;
        __pa = (int *)v23;
        if ((unint64_t)(v50 + 1) >> 60)
        {
          v343 = (int *)v325;
          v344 = v22;
          v342 = v26;
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        v52 = v24;
        if ((v22 - (_BYTE *)v26) >> 3 > v51)
          v51 = (v22 - (_BYTE *)v26) >> 3;
        if ((unint64_t)(v22 - (_BYTE *)v26) >= 0x7FFFFFFFFFFFFFF0)
          v53 = 0xFFFFFFFFFFFFFFFLL;
        else
          v53 = v51;
        if (v53)
        {
          if (v53 >> 60)
          {
            v343 = (int *)v325;
            v344 = v22;
            v342 = v26;
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          v54 = (char *)operator new(16 * v53);
          v23 = (char *)__pa;
          v55 = (uint64_t)&v54[16 * v50];
          *(double *)v55 = v33;
          *(_DWORD *)(v55 + 8) = v21;
          if ((void *)v20 != v26)
          {
LABEL_45:
            v56 = v55;
            do
            {
              v57 = (void *)(v56 - 16);
              *(_OWORD *)(v56 - 16) = *(_OWORD *)(v20 - 16);
              v20 -= 16;
              v56 -= 16;
            }
            while ((void *)v20 != v26);
            v22 = &v54[16 * v53];
            v20 = v55 + 16;
            if (v26)
            {
LABEL_48:
              operator delete(v26);
              v23 = (char *)__pa;
            }
LABEL_49:
            v26 = v57;
            v27 = v311;
            v24 = v52;
            goto LABEL_9;
          }
        }
        else
        {
          v54 = 0;
          v55 = 16 * v50;
          *(double *)v55 = v33;
          *(_DWORD *)(v55 + 8) = v21;
          if ((void *)v20 != v26)
            goto LABEL_45;
        }
        v57 = (void *)v55;
        v22 = &v54[16 * v53];
        v20 = v55 + 16;
        if (v26)
          goto LABEL_48;
        goto LABEL_49;
      }
LABEL_8:
      *(double *)v20 = v33;
      *(_DWORD *)(v20 + 8) = v21;
      v20 += 16;
      v27 = v311;
LABEL_9:
      v28 = v27;
      v18 = *v27;
      v17 = v28[1];
      v325 = v20;
LABEL_10:
      if (++v21 >= (unint64_t)((v17 - v18) >> 2))
      {
        __pb = (double *)v23;
        v343 = (int *)v325;
        v344 = v22;
        v11 = v312;
        goto LABEL_58;
      }
    }
  }
  v20 = 0;
  v26 = 0;
  v24 = 0;
  __pb = 0;
LABEL_58:
  v58 = 126 - 2 * __clz((uint64_t)(v20 - (_QWORD)v26) >> 4);
  v342 = v26;
  if ((void *)v20 == v26)
    v59 = 0;
  else
    v59 = v58;
  std::__introsort<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*,false>((uint64_t)v26, v20, (uint64_t)&v354, v59, 1);
  v60 = 4 * v11;
  v61 = (int32x4_t *)operator new(v60);
  v62 = &v61->i8[v60];
  v339 = v61;
  v341 = v62;
  bzero(v61, v60);
  v308 = (char *)v61;
  v63 = &v61->i8[v60];
  v340 = &v61->i8[v60];
  v64 = (int32x4_t *)operator new(v60);
  v336 = v64;
  v338 = &v64->i8[v60];
  bzero(v64, v60);
  __sz = v60;
  v65 = &v64->i8[v60];
  v337 = &v64->i32[v60 / 4];
  if (v11 < 8)
  {
    v66 = 0;
    v67 = v61;
    v68 = &v64->i8[4 * v11];
    do
    {
LABEL_66:
      v76 = v66;
      v67->i32[v76] = v66;
      v64->i32[v76] = v66++;
    }
    while (v11 != v66);
    goto LABEL_67;
  }
  v66 = v11 & 0xFFFFFFF8;
  v69 = v61 + 1;
  v70 = (int32x4_t)xmmword_22DCE64F0;
  v71 = v64 + 1;
  v72.i64[0] = 0x400000004;
  v72.i64[1] = 0x400000004;
  v73.i64[0] = 0x800000008;
  v73.i64[1] = 0x800000008;
  v74 = v66;
  do
  {
    v75 = vaddq_s32(v70, v72);
    v69[-1] = v70;
    *v69 = v75;
    v71[-1] = v70;
    *v71 = v75;
    v70 = vaddq_s32(v70, v73);
    v69 += 2;
    v71 += 2;
    v74 -= 8;
  }
  while (v74);
  v67 = v61;
  v68 = &v64->i8[4 * v11];
  if (v66 != v11)
    goto LABEL_66;
LABEL_67:
  v297 = v11;
  v78 = (int *)v342;
  v77 = v343;
  v318 = v24;
  if (v342 != v343)
  {
    v79 = v11;
    v309 = v343;
    while (1)
    {
      if (v79 == 2)
        goto LABEL_137;
      v81 = v78[2];
      v82 = *(_DWORD *)(*a2 + 4 * v81);
      v83 = v82;
      do
      {
        v84 = v82;
        v82 = v64->i32[v82];
      }
      while (v82 != v84);
      v85 = &v64->i32[v83];
      for (i = *v85; *v85 != v84; i = *v85)
      {
        *v85 = v84;
        v85 = &v64->i32[i];
      }
      v87 = v84;
      v88 = *(_DWORD *)(*a3 + 4 * v81);
      v89 = v88;
      do
      {
        v90 = v88;
        v88 = v64->i32[v88];
      }
      while (v88 != v90);
      v91 = &v64->i32[v89];
      for (j = *v91; *v91 != v90; j = *v91)
      {
        *v91 = v90;
        v91 = &v64->i32[j];
      }
      if (v84 != v90)
        break;
LABEL_71:
      v78 += 4;
      if (v78 == v77)
        goto LABEL_137;
    }
    v93 = (char *)v339;
    v94 = v63 - (_BYTE *)v339;
    v95 = (v63 - (_BYTE *)v339) >> 2;
    v326 = v79;
    v321 = v84;
    if (v63 < v62)
    {
      *(_DWORD *)v63 = v95;
      v96 = (uint64_t)(v63 + 4);
      v11 = v312;
      goto LABEL_99;
    }
    v97 = v95 + 1;
    if ((unint64_t)(v95 + 1) >> 62)
      goto LABEL_419;
    if ((v62 - (_BYTE *)v339) >> 1 > v97)
      v97 = (v62 - (_BYTE *)v339) >> 1;
    if ((unint64_t)(v62 - (_BYTE *)v339) >= 0x7FFFFFFFFFFFFFFCLL)
      v98 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v98 = v97;
    v305 = v68;
    if (v98)
    {
      if (v98 >> 62)
        goto LABEL_417;
      v99 = v65;
      v100 = operator new(4 * v98);
      v24 = v318;
      v65 = v99;
      v101 = &v100[4 * v95];
      *v101 = v95;
      v96 = (uint64_t)(v101 + 1);
      if (v63 != v93)
      {
LABEL_93:
        v102 = v63 - 4 - v93;
        if (v102 < 0xBC
          || (v118 = v94 & 0xFFFFFFFFFFFFFFFCLL,
              &v100[(v94 & 0xFFFFFFFFFFFFFFFCLL) - 4 - (v102 & 0xFFFFFFFFFFFFFFFCLL)] > &v100[(v94 & 0xFFFFFFFFFFFFFFFCLL)
                                                                                            - 4]))
        {
          v103 = v63;
          v11 = v312;
        }
        else
        {
          v11 = v312;
          if (&v63[-(v102 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v63 - 4)
          {
            v103 = v63;
          }
          else if (v63 - v100 - v118 >= 0x20)
          {
            v125 = (v102 >> 2) + 1;
            v126 = 4 * (v125 & 0x7FFFFFFFFFFFFFF8);
            v103 = &v63[-v126];
            v101 = (_DWORD *)((char *)v101 - v126);
            v127 = &v100[4 * v95 - 16];
            v128 = v63 - 16;
            v129 = v125 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v130 = *(_OWORD *)v128;
              *(v127 - 1) = *((_OWORD *)v128 - 1);
              *v127 = v130;
              v127 -= 2;
              v128 -= 32;
              v129 -= 8;
            }
            while (v129);
            if (v125 == (v125 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_96:
              v339 = v101;
              v105 = &v100[4 * v98];
              v341 = v105;
              if (!v93)
              {
LABEL_98:
                v93 = (char *)v101;
                v77 = v309;
                v79 = v326;
                v62 = v105;
                v68 = v305;
                v87 = v321;
LABEL_99:
                v340 = (char *)v96;
                *(_DWORD *)&v93[4 * v90] = v95;
                *(_DWORD *)&v93[4 * v87] = v95;
                v308 = v93;
                if (v65 < v68)
                {
                  *(_DWORD *)v65 = v95;
                  v64 = (int32x4_t *)v336;
                  v80 = (uint64_t)(v65 + 4);
LABEL_70:
                  v337 = (__int32 *)v80;
                  --v79;
                  v64->i32[v90] = v95;
                  v65 = (char *)v80;
                  v63 = (char *)v96;
                  v64->i32[v87] = v95;
                  goto LABEL_71;
                }
                v301 = v62;
                v107 = (char *)v336;
                v108 = v65 - (_BYTE *)v336;
                v109 = (v65 - (_BYTE *)v336) >> 2;
                v110 = v109 + 1;
                if ((unint64_t)(v109 + 1) >> 62)
LABEL_419:
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                if ((v68 - (_BYTE *)v336) >> 1 > v110)
                  v110 = (v68 - (_BYTE *)v336) >> 1;
                if ((unint64_t)(v68 - (_BYTE *)v336) >= 0x7FFFFFFFFFFFFFFCLL)
                  v111 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v111 = v110;
                if (v111)
                {
                  if (v111 >> 62)
LABEL_417:
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  v112 = v65;
                  v113 = operator new(4 * v111);
                  v65 = v112;
                  v64 = (int32x4_t *)&v113[4 * v109];
                  v64->i32[0] = v95;
                  v80 = (uint64_t)v64->i64 + 4;
                  if (v65 != v107)
                  {
LABEL_109:
                    v114 = v65 - 4 - v107;
                    if (v114 < 0xBC
                      || &v113[v108 - 4 - (v114 & 0xFFFFFFFFFFFFFFFCLL)] > &v113[v108 - 4]
                      || &v65[-(v114 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v65 - 4
                      || (unint64_t)(v65 - v113 - v108) < 0x20)
                    {
                      v115 = v65;
                      v11 = v312;
                      v24 = v318;
                    }
                    else
                    {
                      v119 = (v114 >> 2) + 1;
                      v120 = 4 * (v119 & 0x7FFFFFFFFFFFFFF8);
                      v115 = &v65[-v120];
                      v64 = (int32x4_t *)((char *)v64 - v120);
                      v121 = &v113[4 * v109 - 16];
                      v122 = v65 - 16;
                      v123 = v119 & 0x7FFFFFFFFFFFFFF8;
                      v24 = v318;
                      do
                      {
                        v124 = *(_OWORD *)v122;
                        *(v121 - 1) = *((_OWORD *)v122 - 1);
                        *v121 = v124;
                        v121 -= 2;
                        v122 -= 32;
                        v123 -= 8;
                      }
                      while (v123);
                      v11 = v312;
                      if (v119 == (v119 & 0x7FFFFFFFFFFFFFF8))
                      {
LABEL_112:
                        v68 = &v113[4 * v111];
                        v336 = v64;
                        v338 = v68;
                        if (!v107)
                        {
LABEL_114:
                          v77 = v309;
                          v79 = v326;
                          v62 = v301;
                          v87 = v321;
                          goto LABEL_70;
                        }
LABEL_113:
                        v117 = v68;
                        operator delete(v107);
                        v68 = v117;
                        goto LABEL_114;
                      }
                    }
                    do
                    {
                      v116 = *((_DWORD *)v115 - 1);
                      v115 -= 4;
                      v64[-1].i32[3] = v116;
                      v64 = (int32x4_t *)((char *)v64 - 4);
                    }
                    while (v115 != v107);
                    goto LABEL_112;
                  }
                }
                else
                {
                  v113 = 0;
                  v64 = (int32x4_t *)(4 * v109);
                  *(_DWORD *)(4 * v109) = v95;
                  v80 = 4 * v109 + 4;
                  if (v65 != v107)
                    goto LABEL_109;
                }
                v11 = v312;
                v24 = v318;
                v68 = &v113[4 * v111];
                v336 = v64;
                v338 = v68;
                if (!v107)
                  goto LABEL_114;
                goto LABEL_113;
              }
LABEL_97:
              v106 = v65;
              operator delete(v93);
              v65 = v106;
              goto LABEL_98;
            }
          }
          else
          {
            v103 = v63;
          }
        }
        do
        {
          v104 = *((_DWORD *)v103 - 1);
          v103 -= 4;
          *--v101 = v104;
        }
        while (v103 != v93);
        goto LABEL_96;
      }
    }
    else
    {
      v100 = 0;
      v101 = (_DWORD *)(4 * v95);
      *(_DWORD *)(4 * v95) = v95;
      v96 = 4 * v95 + 4;
      if (v63 != v93)
        goto LABEL_93;
    }
    v11 = v312;
    v339 = v101;
    v105 = &v100[4 * v98];
    v341 = v105;
    if (!v93)
      goto LABEL_98;
    goto LABEL_97;
  }
LABEL_137:
  v131 = operator new(__sz);
  bzero(v131, __sz);
  v333 = 0;
  v334 = 0;
  v335 = 0;
  v132 = v340;
  v133 = v308;
  v327 = v340 - v308;
  v134 = (v340 - v308) >> 2;
  std::vector<absl::lts_2020_02_25::InlinedVector<int,2ul,std::allocator<int>>>::vector(&v354, v134);
  v310 = v131;
  if (v340 != v308)
  {
    for (k = 0; v134 > k; ++k)
    {
      v136 = *(unsigned int *)&v133[4 * k];
      if (k == v136)
        continue;
      v137 = v354 + 24 * (int)v136;
      v139 = v137 + 8;
      v138 = *(_QWORD *)v137;
      if ((*(_QWORD *)v137 & 1) != 0)
      {
        v139 = *(_QWORD *)(v137 + 8);
        v140 = *(_QWORD *)(v137 + 16);
        v141 = v138 >> 1;
        if (v138 >> 1 == v140)
        {
LABEL_147:
          if (((v140 >> 61) & 3) != 0)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v142 = (char *)operator new(8 * v140);
          v143 = v142;
          *(_DWORD *)&v142[4 * v140] = k;
          if (v138 < 2)
            goto LABEL_158;
          v144 = 0;
          if (v140 < 8 || (unint64_t)&v142[-v139] < 0x20)
          {
            v145 = (int *)v139;
          }
          else
          {
            v144 = v140 & 0xFFFFFFFFFFFFFFF8;
            v145 = (int *)(v139 + 4 * (v140 & 0xFFFFFFFFFFFFFFF8));
            v146 = v142 + 16;
            v147 = (__int128 *)(v139 + 16);
            v148 = v140 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v149 = *v147;
              *(v146 - 1) = *(v147 - 1);
              *v146 = v149;
              v146 += 2;
              v147 += 2;
              v148 -= 8;
            }
            while (v148);
            if (v140 == v144)
              goto LABEL_158;
          }
          v150 = v140 - v144;
          v151 = &v142[4 * v144];
          do
          {
            v152 = *v145++;
            *(_DWORD *)v151 = v152;
            v151 += 4;
            --v150;
          }
          while (v150);
LABEL_158:
          if ((v138 & 1) != 0)
          {
            operator delete(*(void **)(v137 + 8));
            v138 = *(_QWORD *)v137;
          }
          *(_QWORD *)(v137 + 8) = v143;
          *(_QWORD *)(v137 + 16) = 2 * v140;
          v138 |= 1uLL;
          goto LABEL_140;
        }
      }
      else
      {
        v140 = 2;
        v141 = v138 >> 1;
        if (v138 >> 1 == 2)
          goto LABEL_147;
      }
      *(_DWORD *)(v139 + 4 * v141) = k;
LABEL_140:
      *(_QWORD *)v137 = v138 + 2;
      v11 = v312;
      v133 = v308;
    }
  }
  v359 = 0;
  v360 = 0;
  v361 = 0;
  v352 = 0;
  v353 = 0;
  v351 = 0;
  v153 = *((_QWORD *)&v354 + 1) - v354;
  if (*((_QWORD *)&v354 + 1) != (_QWORD)v354)
  {
    if (v153 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v154 = 0xAAAAAAAAAAAAAAABLL * (v153 >> 3);
    v351 = operator new(8 * (((v154 - 1) >> 6) + 1));
    v352 = 0;
    v353 = ((v154 - 1) >> 6) + 1;
    std::vector<BOOL>::__construct_at_end[abi:ne180100](&v351, v154, 0);
  }
  v348 = 0;
  v349 = 0;
  v350 = 0;
  if (v132 == v133)
  {
    v156 = 0;
    v155 = a6;
    v157 = (int)v11;
    __sza = (int)v11;
    v158 = 0;
    if (v134 <= (int)v11)
      goto LABEL_262;
LABEL_169:
    v159 = 0;
    v160 = v157;
    while (1)
    {
      v161 = *(_QWORD *)(v354 + 24 * v160);
      v162 = v161 > 5;
      v163 = (1 << v161) & 0x33;
      if (v162 || v163 == 0)
        break;
      v165 = *(_DWORD *)&v308[4 * v160];
      v306 = v160;
      if (v165 == (_DWORD)v160)
      {
        if (((*(_QWORD *)((char *)v351 + ((v160 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v160) & 1) == 0)
        {
          v166 = v360;
          if ((unint64_t)v360 < v361)
          {
            *(_DWORD *)v360 = v165;
            v167 = (uint64_t *)((char *)v166 + 4);
            v168 = v310;
            goto LABEL_197;
          }
          v328 = (size_t)v156;
          v169 = v359;
          v170 = ((char *)v360 - (char *)v359) >> 2;
          v171 = v170 + 1;
          if ((unint64_t)(v170 + 1) >> 62)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v172 = v361 - (_QWORD)v359;
          if ((uint64_t)(v361 - (_QWORD)v359) >> 1 > v171)
            v171 = v172 >> 1;
          if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFFCLL)
            v173 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v173 = v171;
          v322 = v159;
          if (v173)
          {
            if (v173 >> 62)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v174 = operator new(4 * v173);
            v175 = (uint64_t *)&v174[4 * v170];
            *(_DWORD *)v175 = v165;
            v167 = (uint64_t *)((char *)v175 + 4);
            if (v166 != v169)
            {
LABEL_188:
              v176 = (char *)v166 - 4 - (char *)v169;
              v168 = v310;
              if (v176 < 0x2C)
                goto LABEL_425;
              if ((unint64_t)((char *)v169 - v174) < 0x20)
                goto LABEL_425;
              v177 = (v176 >> 2) + 1;
              v178 = 4 * (v177 & 0x7FFFFFFFFFFFFFF8);
              v179 = (uint64_t *)((char *)v166 - v178);
              v175 = (uint64_t *)((char *)v175 - v178);
              v180 = &v174[4 * v170 - 16];
              v181 = v166 - 2;
              v182 = v177 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v183 = *(_OWORD *)v181;
                *(v180 - 1) = *((_OWORD *)v181 - 1);
                *v180 = v183;
                v180 -= 2;
                v181 -= 4;
                v182 -= 8;
              }
              while (v182);
              v166 = v179;
              if (v177 != (v177 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_425:
                do
                {
                  v184 = *((_DWORD *)v166 - 1);
                  v166 = (uint64_t *)((char *)v166 - 4);
                  *((_DWORD *)v175 - 1) = v184;
                  v175 = (uint64_t *)((char *)v175 - 4);
                }
                while (v166 != v169);
              }
              v359 = v175;
              v360 = v167;
              v361 = (unint64_t)&v174[4 * v173];
              if (v169)
LABEL_195:
                operator delete(v169);
LABEL_196:
              v156 = (int *)v328;
              v159 = v322;
LABEL_197:
              v360 = v167;
              while (1)
              {
LABEL_200:
                if (v359 == v167)
                  goto LABEL_170;
                v186 = (uint64_t *)((char *)v167 - 4);
                v185 = *((_DWORD *)v167 - 1);
                v187 = (unint64_t)v185 >> 6;
                v188 = *((_QWORD *)v351 + v187);
                if (((1 << v185) & v188) == 0)
                {
                  *((_QWORD *)v351 + v187) = (1 << v185) | v188;
                  v156[v185] = v159;
                  v330 = (size_t)v156;
                  if (v185 >= (int)v11)
                  {
                    v196 = (_QWORD *)(v354 + 24 * v185);
                    v197 = *v196;
                    v194 = (int *)(v196 + 1);
                    v193 = v197;
                    if ((v197 & 1) != 0)
                      goto LABEL_207;
                  }
                  else
                  {
                    v168[(int)v159] = v185;
                    v159 = (v159 + 1);
                    v192 = (_QWORD *)(v354 + 24 * v185);
                    v195 = *v192;
                    v194 = (int *)(v192 + 1);
                    v193 = v195;
                    if ((v195 & 1) != 0)
                    {
LABEL_207:
                      v194 = *(int **)v194;
                      if (v193 >= 2)
                        goto LABEL_211;
                      goto LABEL_199;
                    }
                  }
                  if (v193 < 2)
                  {
LABEL_199:
                    v156 = (int *)v330;
                    continue;
                  }
LABEL_211:
                  v198 = &v194[v193 >> 1];
                  v199 = v167;
                  v323 = v159;
                  while (2)
                  {
                    v200 = *v194;
                    if (((*(_QWORD *)((char *)v351 + ((v200 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v200) & 1) == 0)
                    {
                      if ((unint64_t)v199 < v361)
                      {
                        *(_DWORD *)v199 = v200;
                        v167 = (uint64_t *)((char *)v199 + 4);
                      }
                      else
                      {
                        v201 = v359;
                        v202 = ((char *)v199 - (char *)v359) >> 2;
                        v203 = v202 + 1;
                        if ((unint64_t)(v202 + 1) >> 62)
                          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                        v204 = v361 - (_QWORD)v359;
                        if ((uint64_t)(v361 - (_QWORD)v359) >> 1 > v203)
                          v203 = v204 >> 1;
                        if ((unint64_t)v204 >= 0x7FFFFFFFFFFFFFFCLL)
                          v205 = 0x3FFFFFFFFFFFFFFFLL;
                        else
                          v205 = v203;
                        if (v205)
                        {
                          if (v205 >> 62)
                            std::__throw_bad_array_new_length[abi:ne180100]();
                          v206 = operator new(4 * v205);
                          v207 = (uint64_t *)&v206[4 * v202];
                          *(_DWORD *)v207 = v200;
                          v167 = (uint64_t *)((char *)v207 + 4);
                          if (v199 != v201)
                          {
LABEL_226:
                            v208 = (char *)v199 - 4 - (char *)v201;
                            if (v208 < 0xBC
                              || &v206[(char *)v199 - (char *)v201 - 4 - (v208 & 0xFFFFFFFFFFFFFFFCLL)] > &v206[(char *)v199 - (char *)v201 - 4]
                              || (char *)v199 - (v208 & 0xFFFFFFFFFFFFFFFCLL) - 4 > (char *)v199 - 4
                              || (unint64_t)((char *)v201 - v206) < 0x20)
                            {
                              v209 = v199;
                              v24 = v318;
                            }
                            else
                            {
                              v211 = (v208 >> 2) + 1;
                              v212 = 4 * (v211 & 0x7FFFFFFFFFFFFFF8);
                              v209 = (uint64_t *)((char *)v199 - v212);
                              v207 = (uint64_t *)((char *)v207 - v212);
                              v213 = &v206[4 * v202 - 16];
                              v214 = v199 - 2;
                              v215 = v211 & 0x7FFFFFFFFFFFFFF8;
                              v24 = v318;
                              do
                              {
                                v216 = *(_OWORD *)v214;
                                *(v213 - 1) = *((_OWORD *)v214 - 1);
                                *v213 = v216;
                                v213 -= 2;
                                v214 -= 4;
                                v215 -= 8;
                              }
                              while (v215);
                              if (v211 == (v211 & 0x7FFFFFFFFFFFFFF8))
                              {
LABEL_229:
                                v359 = v207;
                                v360 = v167;
                                v361 = (unint64_t)&v206[4 * v205];
                                if (v201)
                                  goto LABEL_230;
                                goto LABEL_231;
                              }
                            }
                            do
                            {
                              v210 = *((_DWORD *)v209 - 1);
                              v209 = (uint64_t *)((char *)v209 - 4);
                              *((_DWORD *)v207 - 1) = v210;
                              v207 = (uint64_t *)((char *)v207 - 4);
                            }
                            while (v209 != v201);
                            goto LABEL_229;
                          }
                        }
                        else
                        {
                          v206 = 0;
                          v207 = (uint64_t *)(4 * v202);
                          *(_DWORD *)(4 * v202) = v200;
                          v167 = (uint64_t *)(4 * v202 + 4);
                          if (v199 != v201)
                            goto LABEL_226;
                        }
                        v24 = v318;
                        v359 = v207;
                        v360 = v167;
                        v361 = (unint64_t)&v206[4 * v205];
                        if (v201)
LABEL_230:
                          operator delete(v201);
LABEL_231:
                        v159 = v323;
                      }
                      v360 = v167;
                      v199 = v167;
                    }
                    if (++v194 == v198)
                    {
                      v11 = v312;
                      v168 = v310;
                      goto LABEL_199;
                    }
                    continue;
                  }
                }
                v360 = (uint64_t *)((char *)v167 - 4);
                v189 = v156[v185];
                v190 = (v159 - v189);
                if ((int)v190 >= 2)
                  break;
                v167 = v186;
              }
              v329 = (size_t)v156;
              v191 = (char *)&v168[v189];
              if (v158 < v335)
              {
                *(_QWORD *)v158 = v191;
                *((_QWORD *)v158 + 1) = v190;
                v158 += 16;
                v156 = (int *)v329;
LABEL_256:
                v334 = v158;
                v167 = v360;
                goto LABEL_200;
              }
              v217 = v333;
              v218 = (v158 - v333) >> 4;
              v219 = v218 + 1;
              if ((unint64_t)(v218 + 1) >> 60)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v220 = v335 - v333;
              if ((v335 - v333) >> 3 > v219)
                v219 = v220 >> 3;
              if ((unint64_t)v220 >= 0x7FFFFFFFFFFFFFF0)
                v221 = 0xFFFFFFFFFFFFFFFLL;
              else
                v221 = v219;
              if (v221 >> 60)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v222 = v168;
              v223 = v11;
              v224 = v159;
              v225 = (char *)operator new(16 * v221);
              v226 = &v225[16 * v218];
              *(_QWORD *)v226 = v191;
              *((_QWORD *)v226 + 1) = v190;
              if (v158 == v217)
              {
                v156 = (int *)v329;
                v158 = v226 + 16;
                v333 = &v225[16 * v218];
                v335 = &v225[16 * v221];
                if (v217)
                  goto LABEL_254;
              }
              else
              {
                v227 = &v225[16 * v218];
                v156 = (int *)v329;
                do
                {
                  v228 = v227 - 16;
                  *((_OWORD *)v227 - 1) = *((_OWORD *)v158 - 1);
                  v158 -= 16;
                  v227 -= 16;
                }
                while (v158 != v217);
                v158 = v226 + 16;
                v333 = v228;
                v335 = &v225[16 * v221];
                if (v217)
LABEL_254:
                  operator delete(v217);
              }
              v159 = v224;
              v11 = v223;
              v168 = v222;
              goto LABEL_256;
            }
          }
          else
          {
            v174 = 0;
            v175 = (uint64_t *)(4 * v170);
            *(_DWORD *)(4 * v170) = v165;
            v167 = (uint64_t *)(4 * v170 + 4);
            if (v166 != v169)
              goto LABEL_188;
          }
          v168 = v310;
          v359 = v175;
          v360 = v167;
          v361 = (unint64_t)&v174[4 * v173];
          if (v169)
            goto LABEL_195;
          goto LABEL_196;
        }
        google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v332, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 2190);
        v287 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v332);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v287, (uint64_t)"Check failed: !seen[i] ", 23);
LABEL_401:
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v332);
      }
LABEL_170:
      v160 = v306 + 1;
      v155 = a6;
      if (v306 + 1 >= (v340 - v308) >> 2)
        goto LABEL_262;
    }
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v332, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 2186);
    v293 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v332);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v293, (uint64_t)"Check failed: graph[i].empty() || graph[i].size() == 2 ", 55);
    goto LABEL_401;
  }
  v155 = a6;
  if ((v327 & 0x8000000000000000) != 0)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v156 = (int *)operator new(v327);
  v348 = v156;
  v350 = &v156[v134];
  bzero(v156, v327);
  v349 = (char *)v156 + v327;
  v157 = (int)v11;
  __sza = (int)v11;
  v158 = 0;
  if (v134 > (int)v11)
    goto LABEL_169;
LABEL_262:
  if (v156)
    operator delete(v156);
  if (v351)
    operator delete(v351);
  if (v359)
  {
    v360 = v359;
    operator delete(v359);
  }
  v229 = v354;
  if ((_QWORD)v354)
  {
    v230 = *((_QWORD *)&v354 + 1);
    v231 = (void *)v354;
    if (*((_QWORD *)&v354 + 1) != (_QWORD)v354)
    {
      v232 = *((_QWORD *)&v354 + 1);
      do
      {
        v233 = *(_BYTE *)(v232 - 24);
        v232 -= 24;
        if ((v233 & 1) != 0)
          operator delete(*(void **)(v230 - 16));
        v230 = v232;
      }
      while (v232 != v229);
      v231 = (void *)v354;
      v155 = a6;
    }
    *((_QWORD *)&v354 + 1) = v229;
    operator delete(v231);
  }
  if (a7)
  {
    v234 = (a7 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v235 = v297;
    if (v234 >= 3)
    {
      v238 = v234 + 1;
      v239 = (v234 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      v237 = &v155->i64[v239];
      v240 = v155 + 1;
      v241 = 0uLL;
      v242 = v239;
      v243 = 0uLL;
      do
      {
        v241 = vaddq_s64(v240[-1], v241);
        v243 = vaddq_s64(*v240, v243);
        v240 += 2;
        v242 -= 4;
      }
      while (v242);
      v236 = vaddvq_s64(vaddq_s64(v243, v241));
      if (v238 == v239)
        goto LABEL_284;
    }
    else
    {
      v236 = 0;
      v237 = (uint64_t *)v155;
    }
    do
    {
      v244 = *v237++;
      v236 += v244;
    }
    while (v237 != (uint64_t *)((char *)v155 + 8 * a7));
  }
  else
  {
    v236 = 0;
    v235 = v297;
  }
LABEL_284:
  *(_QWORD *)&v354 = v235;
  LODWORD(v351) = v11;
  if (v235 != __sza)
  {
    v359 = (uint64_t *)google::MakeCheckOpString<unsigned long,int>((int)&v354, (int)&v351, "pre_order.size() == num_nodes");
    if (v359)
    {
      v292 = google::LogMessageFatal::LogMessageFatal((unint64_t *)&v354, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 2222, &v359);
      google::LogMessage::stream((google::LogMessage *)v292);
LABEL_399:
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v354);
    }
  }
  v332[0] = operator new(8 * (((v235 - 1) >> 6) + 1));
  v332[1] = 0;
  v332[2] = (void *)(((v235 - 1) >> 6) + 1);
  std::vector<BOOL>::__construct_at_end[abi:ne180100](v332, v235, 0);
  v295 = v333;
  v246 = __sza;
  v245 = a7;
  if (v333 != v158)
  {
    v247 = (int **)v333;
    v307 = (_QWORD *)(a10 + 32);
    v296 = v236;
    while (1)
    {
      v248 = *v247;
      *(_QWORD *)&v354 = v247[1];
      LODWORD(v351) = 1;
      v331 = v354;
      if ((unint64_t)v354 < 2)
      {
        v359 = (uint64_t *)google::MakeCheckOpString<unsigned long,int>((int)&v354, (int)&v351, "subset.size() > 1");
        if (v359)
        {
          v294 = google::LogMessageFatal::LogMessageFatal((unint64_t *)&v354, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 2225, &v359);
          google::LogMessage::stream((google::LogMessage *)v294);
          goto LABEL_399;
        }
      }
      *(_QWORD *)&v354 = v331;
      LODWORD(v351) = v11;
      v324 = v247;
      if (v331 >= v246)
      {
        v359 = (uint64_t *)google::MakeCheckOpString<unsigned long,int>((int)&v354, (int)&v351, "subset.size() < num_nodes");
        if (v359)
        {
          v284 = google::LogMessageFatal::LogMessageFatal((unint64_t *)&v354, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 2226, &v359);
          google::LogMessage::stream((google::LogMessage *)v284);
          goto LABEL_399;
        }
      }
      v249 = v331;
      v250 = 4 * v331;
      if (v331)
      {
        v249 = 0;
        v251 = 0;
        v252 = (char *)v332[0];
        v253 = 4 * v331;
        v254 = v248;
        do
        {
          v255 = *v254;
          *(_QWORD *)&v252[(v255 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v255;
          if (v245)
          {
            v251 |= (_DWORD)v255 == 0;
            v249 += v155->u64[v255];
          }
          ++v254;
          v253 -= 4;
        }
        while (v253);
      }
      else
      {
        v251 = 0;
      }
      if (!v245)
        break;
      if ((v251 & 1) != 0)
        v249 = v236 - v249;
      v256 = (uint64_t)(a8 - 1 + v249) / a8;
      if (v256 <= 1)
        v257 = 1;
      else
        v257 = v256;
      v258 = __pb;
      v259 = 0.0;
      if (__pb != v24)
        goto LABEL_307;
LABEL_311:
      if (v259 < (double)v257 + -0.000001)
      {
        v262 = *a2;
        v261 = a2[1];
        v263 = v261 - *a2;
        if (v261 == *a2)
        {
          v266 = 0;
          v265 = 0;
          v269 = -1;
          v268 = -1;
        }
        else
        {
          v264 = 0;
          v265 = 0;
          v266 = 0;
          v267 = v263 >> 2;
          if ((unint64_t)(v263 >> 2) <= 1)
            v267 = 1;
          v268 = -1;
          v269 = -1;
          do
          {
            v270 = *(int *)(v262 + 4 * v264);
            if ((_DWORD)v270 == *(_DWORD *)(*a3 + 4 * v264))
            {
              if (((*(_QWORD *)((char *)v332[0] + ((v270 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v270) & 1) != 0)
              {
                ++v265;
                if (v268 == -1 || *((double *)v345 + v264) < *((double *)v345 + v268))
                  v268 = v264;
              }
              else
              {
                ++v266;
                if (v269 == -1 || *((double *)v345 + v264) < *((double *)v345 + v269))
                  v269 = v264;
              }
            }
            ++v264;
          }
          while (v267 != v264);
        }
        if (!((v265 + v266 < 0) ^ __OFADD__(v265, v266) | (v265 + v266 == 0)))
          v257 = 1;
        v319 = v257;
        v271 = (_QWORD *)(a10 + 32);
        v272 = (_QWORD *)*v307;
        if (!*v307)
          goto LABEL_339;
        do
        {
          v273 = v272[4];
          v274 = v273 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
          if (v273 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
            v275 = v272;
          else
            v275 = v272 + 1;
          if (v274)
            v271 = v272;
          v272 = (_QWORD *)*v275;
        }
        while (*v275);
        if (v271 != v307
          && v271[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
        {
          v276 = (uint64_t *)v271[5];
        }
        else
        {
LABEL_339:
          v276 = 0;
        }
        v359 = v276;
        v360 = (uint64_t *)v319;
        v361 = 0x7FFFFFFFFFFFFFFELL;
        v362 = 0u;
        v363 = 0u;
        if (v261 != v262)
        {
          v277 = 0;
          v278 = 0.0;
          while (1)
          {
            if (((*(_QWORD *)((char *)v332[0]
                             + (((unint64_t)*(int *)(v262 + 4 * v277) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(v262 + 4 * v277)) & 1) != 0)
            {
              v279 = *(int *)(*a3 + 4 * v277);
              if (((*(_QWORD *)((char *)v332[0] + ((v279 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v279) & 1) == 0)
              {
                v280 = *((double *)v345 + v277);
                if (!operations_research::sat::LinearConstraintBuilder::AddLiteralTerm(&v359, *(_DWORD *)(*v311 + 4 * v277), 1))
                {
                  v285 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v354, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 2034);
                  v286 = (_QWORD *)google::LogMessage::stream(v285);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v286, (uint64_t)"Check failed: outgoing.AddLiteralTerm(literals[i], IntegerValue(1)) ", 68);
                  goto LABEL_399;
                }
                v278 = v278 + v280;
                v262 = *a2;
                v261 = a2[1];
              }
            }
            if (++v277 >= (unint64_t)((v261 - v262) >> 2))
              goto LABEL_349;
          }
        }
        v278 = 0.0;
LABEL_349:
        if (v265 + v266 <= 0)
          goto LABEL_362;
        if ((v265 != (_DWORD)v331 || v268 != -1 && *((double *)v345 + v268) <= 0.999999)
          && (v266 != (_DWORD)v312 - (_DWORD)v331 || v269 != -1 && *((double *)v345 + v269) <= 0.999999))
        {
          if (v265 == (_DWORD)v331)
          {
            if ((operations_research::sat::LinearConstraintBuilder::AddLiteralTerm(&v359, *(_DWORD *)(*v311 + 4 * v268), 1) & 1) == 0)
            {
              v288 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v354, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 2055);
              v289 = (_QWORD *)google::LogMessage::stream(v288);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v289, (uint64_t)"Check failed: outgoing.AddLiteralTerm(literals[optional_loop_in], IntegerValue(1)) ", 83);
              goto LABEL_399;
            }
            v278 = v278 + *((double *)v345 + v268);
          }
          if (v266 == (_DWORD)v312 - (_DWORD)v331)
          {
            if ((operations_research::sat::LinearConstraintBuilder::AddLiteralTerm(&v359, *(_DWORD *)(*v311 + 4 * v269), 1) & 1) == 0)
            {
              v290 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v354, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 2062);
              v291 = (_QWORD *)google::LogMessage::stream(v290);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v291, (uint64_t)"Check failed: outgoing.AddLiteralTerm(literals[optional_loop_out], IntegerValue(1)) ", 84);
              goto LABEL_399;
            }
            v278 = v278 + *((double *)v345 + v269);
          }
LABEL_362:
          if (v278 < (double)v319 + -0.000001)
          {
            operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v359, (uint64_t)&v354);
            HIBYTE(v353) = 7;
            strcpy((char *)&v351, "Circuit");
            HIBYTE(v350) = 0;
            LOBYTE(v348) = 0;
            operations_research::sat::LinearConstraintManager::AddCut(a9, &v354, (uint64_t)&v351, a5, (uint64_t)&v348);
            if ((SHIBYTE(v350) & 0x80000000) == 0)
            {
              if ((SHIBYTE(v353) & 0x80000000) == 0)
                goto LABEL_365;
LABEL_378:
              operator delete(v351);
              v281 = v357;
              if (!v357)
                goto LABEL_367;
LABEL_366:
              v358 = v281;
              operator delete(v281);
              goto LABEL_367;
            }
            operator delete(v348);
            if (SHIBYTE(v353) < 0)
              goto LABEL_378;
LABEL_365:
            v281 = v357;
            if (v357)
              goto LABEL_366;
LABEL_367:
            if (v355)
            {
              v356 = v355;
              operator delete(v355);
            }
          }
        }
        if (*((_QWORD *)&v362 + 1))
        {
          *(_QWORD *)&v363 = *((_QWORD *)&v362 + 1);
          operator delete(*((void **)&v362 + 1));
        }
        v246 = __sza;
        v245 = a7;
        v155 = a6;
        LODWORD(v11) = v312;
        v236 = v296;
      }
      if (v331)
      {
        v282 = (char *)v332[0];
        do
        {
          v283 = *v248++;
          *(_QWORD *)&v282[(v283 >> 3) & 0x1FFFFFFFFFFFFFF8] &= ~(1 << v283);
          v250 -= 4;
        }
        while (v250);
      }
      v247 = v324 + 2;
      if (v324 + 2 == (int **)v158)
        goto LABEL_384;
    }
    v257 = 1;
    v258 = __pb;
    v259 = 0.0;
    if (__pb == v24)
      goto LABEL_311;
    do
    {
LABEL_307:
      if (((*(_QWORD *)((char *)v332[0] + (((unint64_t)*(int *)v258 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)v258) & 1) != 0)
      {
        v260 = v258[1];
        if (((*(_QWORD *)((char *)v332[0] + (((unint64_t)*((int *)v258 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *((_DWORD *)v258 + 1)) & 1) != 0)
          v260 = -0.0;
        v259 = v259 + v260;
      }
      v258 += 2;
    }
    while (v258 != v24);
    goto LABEL_311;
  }
LABEL_384:
  if (v332[0])
    operator delete(v332[0]);
  if (v295)
    operator delete(v295);
  operator delete(v310);
  if (v336)
    operator delete(v336);
  if (v339)
    operator delete(v339);
  if (v342)
    operator delete(v342);
  if (v345)
    operator delete(v345);
  if (__pb)
    operator delete(__pb);
}

void sub_22DB9D760()
{
  uint64_t v0;

  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 240));
}

void sub_22DB9D768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  void *v61;
  void *v62;

  if (__p)
    operator delete(__p);
  operator delete(a22);
  if (a37)
    operator delete(a37);
  if (a40)
    operator delete(a40);
  if (a43)
  {
    operator delete(a43);
    v61 = a46;
    if (!a46)
    {
LABEL_9:
      v62 = a26;
      if (!a26)
        goto LABEL_11;
      goto LABEL_10;
    }
  }
  else
  {
    v61 = a46;
    if (!a46)
      goto LABEL_9;
  }
  operator delete(v61);
  v62 = a26;
  if (!a26)
LABEL_11:
    _Unwind_Resume(a1);
LABEL_10:
  operator delete(v62);
  goto LABEL_11;
}

_QWORD *std::vector<absl::lts_2020_02_25::InlinedVector<int,2ul,std::allocator<int>>>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v4 = 24 * a2;
    v5 = operator new(24 * a2);
    *a1 = v5;
    a1[1] = v5;
    v6 = &v5[3 * a2];
    a1[2] = v6;
    if ((unint64_t)(v4 - 24) >= 0x18)
    {
      v8 = (v4 - 24) / 0x18uLL + 1;
      v7 = &v5[3 * (v8 & 0x1FFFFFFFFFFFFFFELL)];
      v9 = v8 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *v5 = 0;
        v5[3] = 0;
        v5 += 6;
        v9 -= 2;
      }
      while (v9);
      if (v8 == (v8 & 0x1FFFFFFFFFFFFFFELL))
        goto LABEL_9;
    }
    else
    {
      v7 = v5;
    }
    do
    {
      *v7 = 0;
      v7 += 3;
    }
    while (v7 != v6);
LABEL_9:
    a1[1] = v6;
  }
  return a1;
}

void sub_22DB9DB14(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)v1)
    std::vector<operations_research::Domain>::vector((void **)(v1 + 8), *(void ***)v1, (void **)v1);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void **a6@<X8>)
{
  void *v12;
  const void *v13;
  int64_t v14;
  const void *v15;
  int64_t v16;
  int *v17;
  int64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  void *v23;
  void *v24;
  char *v25;
  void *v26;
  void *v27;
  char *v28;
  void *v29;
  void *v30;
  char *v31;
  uint64_t v32;
  void *v33[2];
  void *v34;
  void *v35;
  void *v36;
  void *__p;
  void *v38;
  _QWORD v39[3];
  _QWORD *v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  a6[6] = 0;
  v12 = *a6;
  if (*a6)
  {
    a6[1] = v12;
    operator delete(v12);
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
  }
  *(_OWORD *)a6 = *(_OWORD *)v33;
  a6[2] = v34;
  v22 = a1;
  v24 = 0;
  v25 = 0;
  v23 = 0;
  v13 = *(const void **)a2;
  v14 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v14)
  {
    if (v14 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v23 = operator new(v14);
    v25 = (char *)v23 + 4 * (v14 >> 2);
    memcpy(v23, v13, v14);
    v24 = v25;
  }
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v15 = *(const void **)a3;
  v16 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v16)
  {
    if (v16 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v26 = operator new(v16);
    v28 = (char *)v26 + 4 * (v16 >> 2);
    memcpy(v26, v15, v16);
    v27 = v28;
  }
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v17 = *(int **)a4;
  v18 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
  if (v18)
  {
    if (v18 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v29 = operator new(v18);
    v31 = (char *)v29 + 4 * (v18 >> 2);
    memcpy(v29, v17, v18);
    v30 = v31;
  }
  v32 = a5;
  operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0::$_0((uint64_t)v33, &v22);
  v19 = operator new(0x60uLL);
  *v19 = &off_24F9874E0;
  operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0::$_0((uint64_t)(v19 + 1), (int *)v33);
  v40 = v19;
  std::__function::__value_func<void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::swap[abi:ne180100](v39, a6 + 3);
  v20 = v40;
  if (v40 == v39)
  {
    v21 = 4;
    v20 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_17;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_17:
  if (__p)
  {
    v38 = __p;
    operator delete(__p);
  }
  if (v35)
  {
    v36 = v35;
    operator delete(v35);
  }
  if (v33[1])
  {
    v34 = v33[1];
    operator delete(v33[1]);
  }
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
}

void sub_22DB9DDBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  operations_research::sat::CutGenerator *v21;
  void *v22;

  operator delete(v22);
  operations_research::glop::CompactSparseMatrix::~CompactSparseMatrix((operations_research::glop::CompactSparseMatrix *)&a21);
  operations_research::glop::CompactSparseMatrix::~CompactSparseMatrix((operations_research::glop::CompactSparseMatrix *)&a10);
  operations_research::sat::CutGenerator::~CutGenerator(v21);
  _Unwind_Resume(a1);
}

void sub_22DB9DDF8(_Unwind_Exception *a1)
{
  operations_research::sat::CutGenerator *v1;

  operations_research::sat::CutGenerator::~CutGenerator(v1);
  _Unwind_Resume(a1);
}

void sub_22DB9DE0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  operations_research::sat::CutGenerator *v18;
  void *v20;
  void *v21;

  if (a17)
  {
    operator delete(a17);
    v20 = a14;
    if (!a14)
    {
LABEL_3:
      v21 = __p;
      if (!__p)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v20 = a14;
    if (!a14)
      goto LABEL_3;
  }
  operator delete(v20);
  v21 = __p;
  if (!__p)
  {
LABEL_5:
    operations_research::sat::CutGenerator::~CutGenerator(v18);
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(v21);
  goto LABEL_5;
}

void sub_22DB9DE74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (!a11)
    JUMPOUT(0x22DB9DE30);
  JUMPOUT(0x22DB9DE28);
}

void operations_research::sat::`anonymous namespace'::GetAssociatedVariables(int **a1, int **a2, uint64_t a3)
{
  uint64_t v5;
  int *v6;
  int *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  int *v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int *v31;
  int v32;
  unint64_t v33;
  int *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  int *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  int *v45;
  uint64_t v46;
  __int128 v47;
  int *v48;

  v5 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a3);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v7 = *a2;
  v6 = a2[1];
  if (*a2 != v6)
  {
    v8 = v5;
    v9 = 0;
    v48 = a2[1];
    do
    {
      while (1)
      {
        v10 = *v7;
        v11 = *(_QWORD *)(v8 + 160);
        v12 = (unint64_t)(*(_QWORD *)(v8 + 168) - v11) >> 2;
        if ((int)v10 >= (int)v12)
          break;
        v13 = *(_DWORD *)(v11 + 4 * v10);
        if (v13 == -1)
          break;
        v14 = (unint64_t)a1[2];
        if ((unint64_t)v9 >= v14)
        {
          v15 = *a1;
          v16 = (char *)v9 - (char *)*a1;
          v17 = v16 >> 2;
          v18 = (v16 >> 2) + 1;
          if (v18 >> 62)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v19 = v14 - (_QWORD)v15;
          if (v19 >> 1 > v18)
            v18 = v19 >> 1;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
            v20 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
          {
            if (v20 >> 62)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v21 = operator new(4 * v20);
            v22 = (int *)&v21[4 * v17];
            *v22 = v13;
            v23 = (uint64_t)(v22 + 1);
            if (v9 == v15)
              goto LABEL_44;
          }
          else
          {
            v21 = 0;
            v22 = (int *)(4 * v17);
            *(_DWORD *)(4 * v17) = v13;
            v23 = 4 * v17 + 4;
            if (v9 == v15)
              goto LABEL_44;
          }
          v33 = (char *)(v9 - 1) - (char *)v15;
          if (v33 < 0xBC)
          {
            v34 = v9;
            goto LABEL_43;
          }
          if (&v21[v16 - 4 - (v33 & 0xFFFFFFFFFFFFFFFCLL)] > &v21[v16 - 4])
          {
            v34 = v9;
            do
            {
LABEL_43:
              v35 = *--v34;
              *--v22 = v35;
            }
            while (v34 != v15);
            goto LABEL_44;
          }
          if ((int *)((char *)v9 - (v33 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v9 - 1)
          {
            v34 = v9;
            goto LABEL_43;
          }
          if ((unint64_t)((char *)v9 - &v21[v16]) < 0x20)
          {
            v34 = v9;
            goto LABEL_43;
          }
          v42 = (v33 >> 2) + 1;
          v43 = 4 * (v42 & 0x7FFFFFFFFFFFFFF8);
          v34 = &v9[v43 / 0xFFFFFFFFFFFFFFFCLL];
          v22 = (int *)((char *)v22 - v43);
          v44 = &v21[4 * v17 - 16];
          v45 = v9 - 4;
          v46 = v42 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v47 = *(_OWORD *)v45;
            *(v44 - 1) = *((_OWORD *)v45 - 1);
            *v44 = v47;
            v44 -= 2;
            v45 -= 8;
            v46 -= 8;
          }
          while (v46);
          if (v42 != (v42 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_43;
          goto LABEL_44;
        }
LABEL_3:
        *v9++ = v13;
        a1[1] = v9;
        if (++v7 == v6)
          return;
      }
      v24 = v10 ^ 1;
      if (v24 >= (int)v12)
      {
        v13 = -1;
        v25 = (unint64_t)a1[2];
        if ((unint64_t)v9 < v25)
          goto LABEL_3;
      }
      else
      {
        v13 = *(_DWORD *)(v11 + 4 * v24);
        v25 = (unint64_t)a1[2];
        if ((unint64_t)v9 < v25)
          goto LABEL_3;
      }
      v15 = *a1;
      v26 = (char *)v9 - (char *)*a1;
      v27 = v26 >> 2;
      v28 = (v26 >> 2) + 1;
      if (v28 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v29 = v25 - (_QWORD)v15;
      if (v29 >> 1 > v28)
        v28 = v29 >> 1;
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
        v20 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v20 = v28;
      if (v20)
      {
        if (v20 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v21 = operator new(4 * v20);
        v22 = (int *)&v21[4 * v27];
        *v22 = v13;
        v23 = (uint64_t)(v22 + 1);
        if (v9 == v15)
          goto LABEL_44;
      }
      else
      {
        v21 = 0;
        v22 = (int *)(4 * v27);
        *(_DWORD *)(4 * v27) = v13;
        v23 = 4 * v27 + 4;
        if (v9 == v15)
          goto LABEL_44;
      }
      v30 = (char *)(v9 - 1) - (char *)v15;
      if (v30 < 0xBC)
      {
        v31 = v9;
        goto LABEL_34;
      }
      if (&v21[v26 - 4 - (v30 & 0xFFFFFFFFFFFFFFFCLL)] > &v21[v26 - 4])
      {
        v31 = v9;
        do
        {
LABEL_34:
          v32 = *--v31;
          *--v22 = v32;
        }
        while (v31 != v15);
        goto LABEL_44;
      }
      if ((int *)((char *)v9 - (v30 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v9 - 1)
      {
        v31 = v9;
        goto LABEL_34;
      }
      if ((unint64_t)((char *)v9 - v21 - v26) < 0x20)
      {
        v31 = v9;
        goto LABEL_34;
      }
      v36 = (v30 >> 2) + 1;
      v37 = 4 * (v36 & 0x7FFFFFFFFFFFFFF8);
      v31 = &v9[v37 / 0xFFFFFFFFFFFFFFFCLL];
      v22 = (int *)((char *)v22 - v37);
      v38 = &v21[4 * v27 - 16];
      v39 = v9 - 4;
      v40 = v36 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v41 = *(_OWORD *)v39;
        *(v38 - 1) = *((_OWORD *)v39 - 1);
        *v38 = v41;
        v38 -= 2;
        v39 -= 8;
        v40 -= 8;
      }
      while (v40);
      if (v36 != (v36 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_34;
LABEL_44:
      *a1 = v22;
      a1[1] = (int *)v23;
      a1[2] = (int *)&v21[4 * v20];
      if (v15)
        operator delete(v15);
      v6 = v48;
      a1[1] = (int *)v23;
      ++v7;
      v9 = (int *)v23;
    }
    while (v7 != v48);
  }
}

void sub_22DB9E248(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::CreateCVRPCutGenerator(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void **a8@<X8>)
{
  void *v16;
  const void *v17;
  int64_t v18;
  const void *v19;
  int64_t v20;
  const void *v21;
  int64_t v22;
  int *v23;
  int64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  void *v29;
  void *v30;
  char *v31;
  void *v32;
  void *v33;
  char *v34;
  void *v35;
  void *v36;
  char *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  char *v41;
  uint64_t v42;
  void *v43[2];
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *__p;
  void *v50;
  _QWORD v51[3];
  _QWORD *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  *a8 = 0;
  a8[1] = 0;
  a8[2] = 0;
  a8[6] = 0;
  v16 = *a8;
  if (*a8)
  {
    a8[1] = v16;
    operator delete(v16);
    *a8 = 0;
    a8[1] = 0;
    a8[2] = 0;
  }
  *(_OWORD *)a8 = *(_OWORD *)v43;
  a8[2] = v44;
  v28 = a1;
  v30 = 0;
  v31 = 0;
  v29 = 0;
  v17 = *(const void **)a2;
  v18 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v18)
  {
    if (v18 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v29 = operator new(v18);
    v31 = (char *)v29 + 4 * (v18 >> 2);
    memcpy(v29, v17, v18);
    v30 = v31;
  }
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v19 = *(const void **)a3;
  v20 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v20)
  {
    if (v20 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v32 = operator new(v20);
    v34 = (char *)v32 + 4 * (v20 >> 2);
    memcpy(v32, v19, v20);
    v33 = v34;
  }
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v21 = *(const void **)a5;
  v22 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v22)
  {
    if (v22 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v35 = operator new(v22);
    v37 = (char *)v35 + 8 * (v22 >> 3);
    memcpy(v35, v21, v22);
    v36 = v37;
  }
  v38 = a6;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v23 = *(int **)a4;
  v24 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
  if (v24)
  {
    if (v24 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v39 = operator new(v24);
    v41 = (char *)v39 + 4 * (v24 >> 2);
    memcpy(v39, v23, v24);
    v40 = v41;
  }
  v42 = a7;
  operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0::$_0((uint64_t)v43, &v28);
  v25 = operator new(0x80uLL);
  *v25 = &off_24F987560;
  operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0::$_0((uint64_t)(v25 + 1), (int *)v43);
  v52 = v25;
  std::__function::__value_func<void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::swap[abi:ne180100](v51, a8 + 3);
  v26 = v52;
  if (v52 == v51)
  {
    v27 = 4;
    v26 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_20;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_20:
  if (__p)
  {
    v50 = __p;
    operator delete(__p);
  }
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
  if (v43[1])
  {
    v44 = v43[1];
    operator delete(v43[1]);
  }
  if (v39)
  {
    v40 = v39;
    operator delete(v39);
  }
  if (v35)
  {
    v36 = v35;
    operator delete(v35);
  }
  if (v32)
  {
    v33 = v32;
    operator delete(v32);
  }
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
}

void sub_22DB9E56C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  operations_research::sat::CutGenerator *v25;
  void *v26;

  operator delete(v26);
  operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0::~$_0(&a25);
  operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0::~$_0(&a10);
  operations_research::sat::CutGenerator::~CutGenerator(v25);
  _Unwind_Resume(a1);
}

void sub_22DB9E5A8(_Unwind_Exception *a1)
{
  operations_research::sat::CutGenerator *v1;

  operations_research::sat::CutGenerator::~CutGenerator(v1);
  _Unwind_Resume(a1);
}

void sub_22DB9E5BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  operations_research::sat::CutGenerator *v22;
  void *v24;
  void *v25;
  void *v26;

  if (a21)
  {
    operator delete(a21);
    v24 = a17;
    if (!a17)
    {
LABEL_3:
      v25 = a14;
      if (!a14)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v24 = a17;
    if (!a17)
      goto LABEL_3;
  }
  operator delete(v24);
  v25 = a14;
  if (!a14)
  {
LABEL_4:
    v26 = __p;
    if (!__p)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  operator delete(v25);
  v26 = __p;
  if (!__p)
  {
LABEL_6:
    operations_research::sat::CutGenerator::~CutGenerator(v22);
    _Unwind_Resume(a1);
  }
LABEL_5:
  operator delete(v26);
  goto LABEL_6;
}

void sub_22DB9E64C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (!a11)
    JUMPOUT(0x22DB9E5E8);
  JUMPOUT(0x22DB9E5E0);
}

_QWORD *operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0::~$_0(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[7];
  if (v3)
  {
    a1[8] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[4];
  if (v4)
  {
    a1[5] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[1];
  if (v5)
  {
    a1[2] = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t operations_research::sat::LinearProgrammingConstraint::LPReducedCostAverageBranching@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = &off_24F9876E0;
  a2[1] = this;
  a2[3] = a2;
  return this;
}

unint64_t operations_research::sat::LinearProgrammingConstraint::LPReducedCostAverageDecision(operations_research::sat::LinearProgrammingConstraint *this)
{
  uint64_t v2;
  int *v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int64_t v14;
  int64_t v15;
  int64_t v16;
  int64_t v17;
  int v18;
  double v19;
  double v20;
  int v21;
  unsigned int *v22;
  uint64_t v23;
  unint64_t result;
  _QWORD *v25;
  unsigned int *v26;
  _QWORD *v27;
  unsigned int *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _BYTE v34[12];

  v2 = (*((_QWORD *)this + 2582) - *((_QWORD *)this + 2581)) >> 4;
  v3 = (int *)((char *)this + 20576);
  operations_research::RevRepository<int>::SaveState((_QWORD *)this + 2573, (int *)this + 5144);
  v4 = *v3;
  if (*v3 >= (int)v2)
    return 0xFFFFFFFFLL;
  v5 = *((_QWORD *)this + 2490);
  v6 = (_QWORD *)*((_QWORD *)this + 2503);
  v7 = (int *)(*((_QWORD *)this + 2581) + 16 * v4 + 8);
  while (1)
  {
    v10 = *v7;
    v7 += 4;
    v9 = v10;
    v11 = *(int *)(v5 + 4 * v10);
    v12 = *(int *)(v6[51] + 4 * v11);
    if ((_DWORD)v12 == -1
      || ((*(_QWORD *)(*(_QWORD *)(v6[117] + 24) + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
    {
      v8 = v6[5];
      if (*(_QWORD *)(v8 + 12 * (int)v11) + *(_QWORD *)(v8 + 12 * (int)(v11 ^ 1)))
        break;
    }
    if ((_DWORD)v2 == ++v4)
      return 0xFFFFFFFFLL;
  }
  *v3 = v4;
  if ((_DWORD)v9 == -1)
    return 0xFFFFFFFFLL;
  v13 = *(_DWORD *)(v5 + 4 * v9);
  v14 = -*(_QWORD *)(v8 + 12 * (v13 ^ 1));
  *(_DWORD *)v34 = v13;
  v15 = vcvtpd_s64_f64(*(double *)(*((_QWORD *)this + 2541)+ 8* *(int *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>>((uint64_t *)this + 2493, (int *)v34))+ -0.0001);
  if (v15 >= v14)
  {
    v26 = (unsigned int *)*((_QWORD *)this + 2506);
    *(_DWORD *)v34 = v13;
    *(_QWORD *)&v34[4] = v14;
    result = operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(v26, *(const char **)v34, SHIDWORD(v14));
    if (((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2504) + 24)
                     + (((unint64_t)(int)result >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (result & 0x3E)) & 3) == 0)
      return result;
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v34, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 2598);
    v27 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Check failed: !trail_->Assignment().LiteralIsAssigned(result) ", 62);
    goto LABEL_25;
  }
  v16 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2503) + 40) + 12 * v13);
  *(_DWORD *)v34 = v13;
  v17 = vcvtmd_s64_f64(*(double *)(*((_QWORD *)this + 2541)+ 8* *(int *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>>((uint64_t *)this + 2493, (int *)v34))+ 0.0001);
  if (v16 >= v17)
  {
    v28 = (unsigned int *)*((_QWORD *)this + 2506);
    v29 = 0x7FFFFFFFFFFFFFFFLL;
    if (v16 >= (uint64_t)0x8000000000000002)
      v29 = -v16;
    *(_DWORD *)v34 = v13 ^ 1;
    *(_QWORD *)&v34[4] = v29;
    result = operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(v28, *(const char **)v34, SHIDWORD(v29));
    if (((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2504) + 24)
                     + (((unint64_t)(int)result >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (result & 0x3E)) & 3) == 0)
      return result;
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v34, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 2610);
    v30 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v34);
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Check failed: !trail_->Assignment().LiteralIsAssigned(result) ", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" ", 1);
    v32 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" ", 1);
    std::ostream::operator<<();
LABEL_25:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v34);
  }
  v18 = *(_DWORD *)(*((_QWORD *)this + 2563) + 4 * v9);
  v19 = 0.0;
  v20 = 0.0;
  if (v18 >= 1)
    v20 = *(double *)(*((_QWORD *)this + 2557) + 8 * v9) / (double)v18;
  v21 = *(_DWORD *)(*((_QWORD *)this + 2566) + 4 * v9);
  if (v21 >= 1)
    v19 = *(double *)(*((_QWORD *)this + 2560) + 8 * v9) / (double)v21;
  v22 = (unsigned int *)*((_QWORD *)this + 2506);
  if (v19 >= v20)
  {
    *(_DWORD *)v34 = v13;
    *(_QWORD *)&v34[4] = v15;
    result = operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(v22, *(const char **)v34, SHIDWORD(v15));
    if (((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2504) + 24)
                     + (((unint64_t)(int)result >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (result & 0x3E)) & 3) == 0)
      return result;
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v34, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 2633);
    v33 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Check failed: !trail_->Assignment().LiteralIsAssigned(result) ", 62);
    goto LABEL_25;
  }
  if (v17 >= (uint64_t)0x8000000000000002)
    v23 = -v17;
  else
    v23 = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)v34 = v13 ^ 1;
  *(_QWORD *)&v34[4] = v23;
  result = operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(v22, *(const char **)v34, SHIDWORD(v23));
  if (((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2504) + 24)
                   + (((unint64_t)(int)result >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (result & 0x3E)) & 3) != 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v34, (google::glog_internal_namespace_ *)"./ortools/sat/linear_programming_constraint.cc", 2628);
    v25 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Check failed: !trail_->Assignment().LiteralIsAssigned(result) ", 62);
    goto LABEL_25;
  }
  return result;
}

void sub_22DB9EAE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void sub_22DB9EAF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void sub_22DB9EAF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void sub_22DB9EB00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void operations_research::RevRepository<int>::SaveState(_QWORD *a1, int *a2)
{
  int v4;
  unint64_t v5;
  char *v6;
  _DWORD *v7;
  char **v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;

  if (a1[2] != a1[3])
  {
    v4 = *a2;
    v6 = (char *)a1[6];
    v5 = a1[7];
    if ((unint64_t)v6 >= v5)
    {
      v8 = (char **)(a1 + 5);
      v9 = (char *)a1[5];
      v10 = (v6 - v9) >> 4;
      v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 60)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v12 = v5 - (_QWORD)v9;
      if (v12 >> 3 > v11)
        v11 = v12 >> 3;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
        v13 = 0xFFFFFFFFFFFFFFFLL;
      else
        v13 = v11;
      if (v13)
      {
        if (v13 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v14 = (char *)operator new(16 * v13);
      }
      else
      {
        v14 = 0;
      }
      v15 = &v14[16 * v10];
      *(_QWORD *)v15 = a2;
      *((_DWORD *)v15 + 2) = v4;
      v7 = v15 + 16;
      if (v6 != v9)
      {
        do
        {
          *((_OWORD *)v15 - 1) = *((_OWORD *)v6 - 1);
          v15 -= 16;
          v6 -= 16;
        }
        while (v6 != v9);
        v6 = *v8;
      }
      a1[5] = v15;
      a1[6] = v7;
      a1[7] = &v14[16 * v13];
      if (v6)
        operator delete(v6);
    }
    else
    {
      *(_QWORD *)v6 = a2;
      *((_DWORD *)v6 + 2) = v4;
      v7 = v6 + 16;
    }
    a1[6] = v7;
  }
}

operations_research::sat::LinearConstraintManager *operations_research::sat::LinearConstraintManager::LinearConstraintManager(operations_research::sat::LinearConstraintManager *this, operations_research::sat::Model *a2)
{
  operations_research::sat::IntegerTrail *v4;

  *(_QWORD *)this = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a2);
  v4 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)a2);
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 21) = (char *)this + 176;
  *((_QWORD *)this + 1) = v4;
  *((_BYTE *)this + 16) = 0;
  *((_QWORD *)this + 10) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 23) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_WORD *)this + 96) = 0;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_QWORD *)this + 29) = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>((uint64_t)a2);
  *((_QWORD *)this + 30) = a2;
  *((_QWORD *)this + 31) = 0x3FF0000000000000;
  *((_DWORD *)this + 64) = 0;
  return this;
}

void sub_22DB9ECCC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;
  void *v6;

  v5 = *(void **)(v1 + 208);
  if (v5)
  {
    *(_QWORD *)(v1 + 216) = v5;
    operator delete(v5);
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(v2, *(char **)(v1 + 176));
  absl::lts_2020_02_25::flat_hash_map<unsigned long,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>>>::~flat_hash_map(v3);
  v6 = *(void **)(v1 + 56);
  if (v6)
  {
    *(_QWORD *)(v1 + 64) = v6;
    operator delete(v6);
  }
  gtl::ITIVector<gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>,operations_research::sat::LinearConstraintManager::ConstraintInfo,std::allocator<operations_research::sat::LinearConstraintManager::ConstraintInfo>>::~ITIVector((void **)(v1 + 32));
  _Unwind_Resume(a1);
}

uint64_t absl::lts_2020_02_25::flat_hash_map<unsigned long,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>>>>::~flat_hash_map(uint64_t a1)
{
  _QWORD *v2;

  if (*(_QWORD *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  return a1;
}

void **gtl::ITIVector<gtl::IntType<operations_research::sat::LinearConstraintManager::ConstraintIndex_tag_,int>,operations_research::sat::LinearConstraintManager::ConstraintInfo,std::allocator<operations_research::sat::LinearConstraintManager::ConstraintInfo>>::~ITIVector(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 11);
        if (v5)
        {
          *((_QWORD *)v3 - 10) = v5;
          operator delete(v5);
        }
        v6 = (void *)*((_QWORD *)v3 - 14);
        if (v6)
        {
          *((_QWORD *)v3 - 13) = v6;
          operator delete(v6);
        }
        v3 -= 128;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void operations_research::sat::IntegerRoundingCutHelper::~IntegerRoundingCutHelper(operations_research::sat::IntegerRoundingCutHelper *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v2 = (void *)*((_QWORD *)this + 31);
  if (v2)
  {
    *((_QWORD *)this + 32) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 27);
  if (v3)
  {
    *((_QWORD *)this + 28) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 24);
  if (v4)
  {
    *((_QWORD *)this + 25) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 21);
  if (v5)
    operator delete(v5);
  v6 = (void *)*((_QWORD *)this + 18);
  if (v6)
  {
    *((_QWORD *)this + 19) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 15);
  if (v7)
  {
    *((_QWORD *)this + 16) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 12);
  if (v8)
  {
    *((_QWORD *)this + 13) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 9);
  if (v9)
  {
    *((_QWORD *)this + 10) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 6);
  if (v10)
  {
    *((_QWORD *)this + 7) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 3);
  if (v11)
  {
    *((_QWORD *)this + 4) = v11;
    operator delete(v11);
  }
  v12 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v12;
    operator delete(v12);
  }
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::LinearProgrammingConstraintLpSolution>::~Delete(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  v2 = a1[1];
  *a1 = &off_24F9874A8;
  a1[1] = 0;
  if (v2)
  {
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x22E31DF78](v2, 0x80C40D6874129);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::LinearProgrammingConstraintLpSolution>::~Delete(_QWORD *a1)
{
  uint64_t v1;
  void *v2;

  v1 = a1[1];
  *a1 = &off_24F9874A8;
  a1[1] = 0;
  if (v1)
  {
    v2 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v2;
      operator delete(v2);
    }
    MEMORY[0x22E31DF78](v1, 0x80C40D6874129);
  }
  JUMPOUT(0x22E31DF78);
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::LinearProgrammingConstraint *>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::LinearProgrammingConstraint *>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::LinearProgrammingConstraint *>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::LinearProgrammingConstraint *>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      v7 = v13;
      v4 = *a1;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::LinearProgrammingConstraint *>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::LinearProgrammingConstraint *>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::LinearProgrammingConstraint *>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::LinearProgrammingConstraint *>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::LinearProgrammingConstraint *>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::LinearProgrammingConstraint *>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::LinearProgrammingConstraint *>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::LinearProgrammingConstraint *>>>::resize(char **a1, char *a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;

  v2 = (unint64_t)a2;
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  v9 = (char *)operator new(v8 + 16 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  v10 = v2 - (v2 >> 3);
  if (v2 == 7)
    v10 = 6;
  v11 = a1[2];
  a1[5] = (char *)(v10 - (_QWORD)v11);
  v12 = a1[4];
  if (v12)
  {
    *((_QWORD *)v12 + 1) = v11;
    *(_QWORD *)v12 = v2;
    if (!v11)
    {
      *((_QWORD *)v12 + 4) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    v14 = 0;
    v24 = a1[4];
    if (!v24)
      return;
LABEL_21:
    *((_QWORD *)v24 + 4) = v14 >> 3;
    *((_QWORD *)v24 + 2) = 0;
    return;
  }
  v13 = 0;
  v14 = 0;
  do
  {
    if ((v13[(_QWORD)v4] & 0x80000000) == 0)
    {
      v18 = &v5[16 * (_QWORD)v13];
      v19 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)v18)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(int *)v18));
      v20 = *a1;
      v21 = a1[3];
      v22 = ((v19 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v21;
      v23 = *(_QWORD *)&(*a1)[v22] & (~*(_QWORD *)&(*a1)[v22] << 7) & 0x8080808080808080;
      if (v23)
      {
        v15 = 0;
      }
      else
      {
        v15 = 0;
        do
        {
          v15 += 8;
          v22 = (v15 + v22) & (unint64_t)v21;
          v23 = *(_QWORD *)&v20[v22] & (~*(_QWORD *)&v20[v22] << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      v16 = (v22 + (__clz(__rbit64(v23)) >> 3)) & (unint64_t)v21;
      v14 += v15;
      v17 = v19 & 0x7F;
      v20[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      *(_OWORD *)&a1[1][16 * v16] = *(_OWORD *)v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  v24 = a1[4];
  if (v24)
    goto LABEL_21;
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::LinearProgrammingConstraint *>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::LinearProgrammingConstraint *>>>::drop_deletes_without_resize(uint64_t result)
{
  int8x16_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  int8x16_t *v7;
  int8x16_t v8;
  int8x16_t v9;
  uint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int8x16_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(int8x16_t **)result;
  v2 = *(_QWORD *)(result + 24);
  v3 = *(_QWORD *)result + v2;
  if (v3 + 1 != *(_QWORD *)result)
  {
    v4 = v2 - 7;
    v5 = *(unint64_t **)result;
    if (v4 < 0x18)
      goto LABEL_29;
    v6 = (v4 >> 3) + 1;
    v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v11 = vandq_s8(v7[-1], v8);
      v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      *v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(_QWORD *)(v3 + 1) = v1->i64[0];
  *(_BYTE *)v3 = -1;
  v13 = *(_QWORD *)(result + 24);
  if (!v13)
  {
    v15 = 0;
    *(_QWORD *)(result + 40) = -*(_QWORD *)(result + 16);
    v30 = *(_QWORD *)(result + 32);
    if (!v30)
      return result;
LABEL_26:
    *(_QWORD *)(v30 + 32) = v15 >> 3;
    *(_QWORD *)(v30 + 16) = 0;
    return result;
  }
  v14 = 0;
  v15 = 0;
  do
  {
    v19 = *(int8x16_t **)result;
    if (*(unsigned __int8 *)(*(_QWORD *)result + v14) == 254)
    {
      v20 = (unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
          + *(int *)(*(_QWORD *)(result + 8) + 16 * v14);
      v21 = ((v20 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v20);
      v22 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      v23 = *(uint64_t *)((_BYTE *)v19->i64 + v22) & (~*(uint64_t *)((char *)v19->i64 + v22) << 7) & 0x8080808080808080;
      if (v23)
      {
        v16 = 0;
        v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      }
      else
      {
        v16 = 0;
        v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
        do
        {
          v16 += 8;
          v17 = (v16 + v17) & v13;
          v23 = *(uint64_t *)((_BYTE *)v19->i64 + v17) & (~*(uint64_t *)((char *)v19->i64 + v17) << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      v18 = (v17 + (__clz(__rbit64(v23)) >> 3)) & v13;
      v15 += v16;
      if ((((v18 - v22) ^ (v14 - v22)) & v13) > 7)
      {
        v24 = v19->u8[v18];
        v19->i8[v18] = v21 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(result + 24) & (v18 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = v21 & 0x7F;
        v25 = *(_QWORD *)(result + 8);
        if (v24 == 128)
        {
          *(_OWORD *)(v25 + 16 * v18) = *(_OWORD *)(v25 + 16 * v14);
          *(_BYTE *)(*(_QWORD *)result + v14) = 0x80;
          *(_BYTE *)((*(_QWORD *)(result + 24) & (v14 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = 0x80;
        }
        else
        {
          v26 = *(_OWORD *)(v25 + 16 * v14);
          *(_OWORD *)(v25 + 16 * v14) = *(_OWORD *)(v25 + 16 * v18);
          *(_OWORD *)(*(_QWORD *)(result + 8) + 16 * v18) = v26;
          --v14;
        }
      }
      else
      {
        v19->i8[v14] = v21 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(result + 24) & (v14 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = v21 & 0x7F;
      }
    }
    ++v14;
    v13 = *(_QWORD *)(result + 24);
  }
  while (v14 != v13);
  v27 = v14 - (v14 >> 3);
  v28 = v14 == 7;
  v29 = 6;
  if (!v28)
    v29 = v27;
  *(_QWORD *)(result + 40) = v29 - *(_QWORD *)(result + 16);
  v30 = *(_QWORD *)(result + 32);
  if (v30)
    goto LABEL_26;
  return result;
}

void std::vector<std::unique_ptr<operations_research::sat::IntegerSumLE>>::__append(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = (uint64_t)&v5[-*a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = (char *)operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 == v7)
    {
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v16;
      if (v5)
LABEL_30:
        operator delete(v6);
    }
    else
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x78
        || &v5[-(v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v14 && &v13[v8 - (v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v5)
      {
        goto LABEL_37;
      }
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v14 -= v20;
      v6 = &v5[-v20];
      v21 = v5 - 16;
      v22 = &v13[8 * v9 - 16];
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v25 = *((_OWORD *)v21 - 1);
        v24 = *(_OWORD *)v21;
        *((_OWORD *)v21 - 1) = 0uLL;
        *(_OWORD *)v21 = 0uLL;
        *((_OWORD *)v22 - 1) = v25;
        *(_OWORD *)v22 = v24;
        v21 -= 32;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_37:
        do
        {
          v26 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *(_QWORD *)v6 = 0;
          *((_QWORD *)v14 - 1) = v26;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      v27 = (char *)*a1;
      v6 = (char *)a1[1];
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v16;
      if (v6 != v27)
      {
        do
        {
          v29 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          v28 = v29;
          *(_QWORD *)v6 = 0;
          if (v29)
            (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        }
        while (v6 != v27);
        v6 = v27;
      }
      if (v6)
        goto LABEL_30;
    }
  }
}

char *std::vector<std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>::__assign_with_size[abi:ne180100]<std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const*,std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const*>(char **a1, char *a2, char *a3, size_t __sz)
{
  char *v6;
  uint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int64_t v16;
  _QWORD *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  result = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 2) >= __sz)
  {
    v18 = a1[1];
    v17 = a1 + 1;
    v14 = v18;
    v19 = 0xAAAAAAAAAAAAAAABLL * ((v18 - result) >> 2);
    if (v19 >= __sz)
    {
      v24 = result;
      if (a2 != a3)
      {
        v25 = result;
        do
        {
          *(_DWORD *)v25 = *(_DWORD *)v6;
          *(_QWORD *)(v25 + 4) = *(_QWORD *)(v6 + 4);
          v24 += 12;
          v6 += 12;
          v25 += 12;
        }
        while (v6 != a3);
      }
      v16 = v24 - result;
      v14 = result;
    }
    else
    {
      v20 = &a2[12 * v19];
      if (v14 != result)
      {
        do
        {
          *(_DWORD *)result = *(_DWORD *)v6;
          *(_QWORD *)(result + 4) = *(_QWORD *)(v6 + 4);
          v6 += 12;
          result += 12;
        }
        while (v6 != v20);
      }
      v21 = v14;
      if (v20 != a3)
      {
        v22 = v14;
        do
        {
          v23 = *(_QWORD *)v20;
          *((_DWORD *)v22 + 2) = *((_DWORD *)v20 + 2);
          *(_QWORD *)v22 = v23;
          v22 += 12;
          v20 += 12;
          v21 += 12;
        }
        while (v20 != a3);
      }
      v16 = v21 - v14;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0x1555555555555555)
      goto LABEL_26;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v11;
    if (v12 > 0x1555555555555555)
LABEL_26:
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v13 = 12 * v12;
    result = (char *)operator new(12 * v12);
    v14 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    v15 = result;
    if (v6 != a3)
    {
      result = (char *)memcpy(result, v6, 12 * ((a3 - v6 - 12) / 0xCuLL) + 12);
      v15 = &v14[12 * ((a3 - v6 - 12) / 0xCuLL) + 12];
    }
    v16 = v15 - v14;
    v17 = a1 + 1;
  }
  *v17 = &v14[v16];
  return result;
}

_QWORD *std::vector<operations_research::sat::IntegerLiteral>::__assign_with_size[abi:ne180100]<operations_research::sat::IntegerLiteral*,operations_research::sat::IntegerLiteral*>(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  char *v17;
  void *v18;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *result) >> 2) < __sz)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0x1555555555555555)
      goto LABEL_23;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v11;
    if (v12 > 0x1555555555555555)
LABEL_23:
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v13 = 12 * v12;
    result = operator new(12 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - v9) >> 2) >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v18 = (void *)*result;
LABEL_21:
    result = memmove(v18, __src, v14);
    goto LABEL_22;
  }
  v17 = &__src[4 * ((v16 - v9) >> 2)];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v17;
  if (v14)
  {
    v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *v15 = &v9[v14];
  return result;
}

uint64_t google::MakeCheckOpString<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,unsigned long>(int a1, int a2, char *a3)
{
  uint64_t v3;
  uint64_t v5;

  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5, a3);
  std::ostream::operator<<();
  google::base::CheckOpMessageBuilder::ForVar2((google::base::CheckOpMessageBuilder *)&v5);
  std::ostream::operator<<();
  v3 = google::base::CheckOpMessageBuilder::NewString((google::base::CheckOpMessageBuilder *)&v5);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5);
  return v3;
}

void sub_22DB9FBCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*,false>(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  double v21;
  unint64_t v22;
  char v23;
  BOOL v24;
  double v25;
  double v26;
  int v27;
  int v28;
  double v29;
  double v30;
  int v31;
  int v32;
  double v33;
  double v34;
  int v35;
  int v36;
  double v37;
  int v38;
  unint64_t v39;
  BOOL v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  double v46;
  double v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  double v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t i;
  unint64_t v60;
  double v61;
  double v62;
  int v63;
  int v64;
  unint64_t j;
  int v66;

  v8 = result;
LABEL_2:
  v9 = a2 - 16;
  v10 = v8;
LABEL_3:
  v11 = 1 - a4;
  v66 = a5;
  while (2)
  {
    v8 = v10;
    v12 = a2 - v10;
    v13 = v12 >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v25 = *(double *)v8;
        v26 = *(double *)(a2 - 16);
        if (*(double *)v8 < v26)
        {
          v27 = *(_DWORD *)(v8 + 8);
          v28 = *(_DWORD *)(a2 - 8);
LABEL_25:
          *(double *)v8 = v26;
          *(double *)(a2 - 16) = v25;
          *(_DWORD *)(v8 + 8) = v28;
          *(_DWORD *)(a2 - 8) = v27;
          return result;
        }
        if (v26 >= v25)
        {
          v27 = *(_DWORD *)(v8 + 8);
          v28 = *(_DWORD *)(a2 - 8);
          if (v27 < v28)
            goto LABEL_25;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*>(v8, v8 + 16, v9);
      case 4uLL:
        result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*>(v8, v8 + 16, v8 + 32);
        v29 = *(double *)(v8 + 32);
        v30 = *(double *)(a2 - 16);
        if (v29 >= v30)
        {
          if (v30 < v29)
            return result;
          v31 = *(_DWORD *)(v8 + 40);
          v32 = *(_DWORD *)(a2 - 8);
          if (v31 >= v32)
            return result;
        }
        else
        {
          v31 = *(_DWORD *)(v8 + 40);
          v32 = *(_DWORD *)(a2 - 8);
        }
        *(double *)(v8 + 32) = v30;
        *(double *)(a2 - 16) = v29;
        *(_DWORD *)(v8 + 40) = v32;
        *(_DWORD *)(a2 - 8) = v31;
        v33 = *(double *)(v8 + 16);
        v34 = *(double *)(v8 + 32);
        if (v33 >= v34)
        {
          if (v34 < v33)
            return result;
          v35 = *(_DWORD *)(v8 + 24);
          v36 = *(_DWORD *)(v8 + 40);
          if (v35 >= v36)
            return result;
        }
        else
        {
          v35 = *(_DWORD *)(v8 + 24);
          v36 = *(_DWORD *)(v8 + 40);
        }
        *(double *)(v8 + 16) = v34;
        *(double *)(v8 + 32) = v33;
        *(_DWORD *)(v8 + 24) = v36;
        *(_DWORD *)(v8 + 40) = v35;
        v37 = *(double *)v8;
        if (*(double *)v8 < v34)
        {
          v38 = *(_DWORD *)(v8 + 8);
LABEL_90:
          *(double *)v8 = v34;
          *(double *)(v8 + 16) = v37;
          *(_DWORD *)(v8 + 8) = v36;
          *(_DWORD *)(v8 + 24) = v38;
          return result;
        }
        if (v34 >= v37)
        {
          v38 = *(_DWORD *)(v8 + 8);
          if (v38 < v36)
            goto LABEL_90;
        }
        return result;
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*>(v8, v8 + 16, v8 + 32, v8 + 48, v9);
      default:
        if (v12 > 383)
        {
          v14 = v11;
          if (v11 == 1)
          {
            if (v8 != a2)
            {
              v54 = (v13 - 2) >> 1;
              v55 = v54 + 1;
              v56 = v8 + 16 * v54;
              do
              {
                std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*>(v8, a3, v12 >> 4, v56);
                v56 -= 16;
                --v55;
              }
              while (v55);
              v57 = (unint64_t)v12 >> 4;
              do
              {
                result = (uint64_t)std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>>,std::pair<double,int>*>((uint64_t *)v8, a2, a3, v57);
                a2 -= 16;
              }
              while (v57-- > 2);
            }
            return result;
          }
          v15 = v13 >> 1;
          v16 = (uint64_t *)(v8 + 16 * (v13 >> 1));
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*>((uint64_t)v16, v8, v9);
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*>(v8, (uint64_t)v16, v9);
            v17 = v9;
            v18 = v8 + 16 * v15;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*>(v8 + 16, v18 - 16, a2 - 32);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*>(v8 + 32, v8 + 16 + 16 * v15, a2 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*>(v18 - 16, (uint64_t)v16, v8 + 16 + 16 * v15);
            v19 = *(_QWORD *)v8;
            *(_QWORD *)v8 = *v16;
            *v16 = v19;
            v20 = *(_DWORD *)(v8 + 8);
            *(_DWORD *)(v8 + 8) = *(_DWORD *)(v18 + 8);
            *(_DWORD *)(v18 + 8) = v20;
            v9 = v17;
            a5 = v66;
            if ((v66 & 1) != 0)
              goto LABEL_14;
          }
          v21 = *(double *)(v8 - 16);
          if (*(double *)v8 >= v21 && (v21 < *(double *)v8 || *(_DWORD *)(v8 + 8) >= *(_DWORD *)(v8 - 8)))
          {
            result = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<double,int> *,std::greater<std::pair<double,int>> &>(v8, a2);
            v10 = result;
            goto LABEL_19;
          }
LABEL_14:
          v22 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<double,int> *,std::greater<std::pair<double,int>> &>(v8, a2);
          if ((v23 & 1) == 0)
            goto LABEL_17;
          v24 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*>(v8, v22);
          v10 = v22 + 16;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*>(v22 + 16, a2);
          if (!(_DWORD)result)
          {
            v11 = v14 + 1;
            if (v24)
              continue;
LABEL_17:
            result = std::__introsort<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*,false>(v8, v22, a3, -v14, a5 & 1);
            v10 = v22 + 16;
LABEL_19:
            a5 = 0;
            a4 = -v14;
            goto LABEL_3;
          }
          a4 = -v14;
          a2 = v22;
          if (v24)
            return result;
          goto LABEL_2;
        }
        v39 = v8 + 16;
        v41 = v8 == a2 || v39 == a2;
        if ((a5 & 1) != 0)
        {
          if (v41)
            return result;
          v42 = 0;
          v43 = v8;
LABEL_46:
          v45 = v43;
          v43 = v39;
          v46 = *(double *)v45;
          v47 = *(double *)(v45 + 16);
          if (*(double *)v45 >= v47)
          {
            if (v47 < v46)
              goto LABEL_45;
            v49 = *(_DWORD *)(v45 + 8);
            v48 = *(_DWORD *)(v45 + 24);
            if (v49 >= v48)
              goto LABEL_45;
          }
          else
          {
            v48 = *(_DWORD *)(v45 + 24);
            v49 = *(_DWORD *)(v45 + 8);
          }
          *(double *)(v45 + 16) = v46;
          *(_DWORD *)(v43 + 8) = v49;
          v44 = v8;
          if (v45 == v8)
            goto LABEL_44;
          v50 = v42;
          while (1)
          {
            v53 = *(double *)(v8 + v50 - 16);
            if (v53 < v47)
            {
              v51 = *(_DWORD *)(v8 + v50 - 8);
            }
            else
            {
              if (v47 < v53)
              {
                v44 = v8 + v50;
LABEL_44:
                *(double *)v44 = v47;
                *(_DWORD *)(v44 + 8) = v48;
LABEL_45:
                v39 = v43 + 16;
                v42 += 16;
                if (v43 + 16 == a2)
                  return result;
                goto LABEL_46;
              }
              v51 = *(_DWORD *)(v8 + v50 - 8);
              if (v51 >= v48)
              {
                v44 = v45;
                goto LABEL_44;
              }
            }
            v45 -= 16;
            v52 = v8 + v50;
            *(double *)v52 = v53;
            *(_DWORD *)(v52 + 8) = v51;
            v50 -= 16;
            if (!v50)
            {
              v44 = v8;
              goto LABEL_44;
            }
          }
        }
        if (!v41)
        {
          for (i = v8 + 8; ; i += 16)
          {
            v60 = v8;
            v8 = v39;
            v61 = *(double *)v60;
            v62 = *(double *)(v60 + 16);
            if (*(double *)v60 < v62)
              break;
            if (v62 >= v61)
            {
              v64 = *(_DWORD *)(v60 + 8);
              v63 = *(_DWORD *)(v60 + 24);
              if (v64 < v63)
                goto LABEL_79;
            }
LABEL_74:
            v39 += 16;
            if (v8 + 16 == a2)
              return result;
          }
          v63 = *(_DWORD *)(v60 + 24);
LABEL_79:
          for (j = i; ; j -= 16)
          {
            *(double *)(j + 8) = v61;
            *(_DWORD *)(j + 16) = *(_DWORD *)j;
            v61 = *(double *)(j - 24);
            if (v61 >= v62 && (v62 < v61 || *(_DWORD *)(j - 16) >= v63))
              break;
          }
          *(double *)(j - 8) = v62;
          *(_DWORD *)j = v63;
          goto LABEL_74;
        }
        return result;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v3;
  double v4;
  double v5;
  int v6;
  double v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t result;
  int v13;
  double v14;
  int v15;
  double v16;
  double v17;
  int v18;
  int v19;

  v3 = *(double *)a1;
  v4 = *(double *)a2;
  if (*(double *)a1 < *(double *)a2 || v4 >= v3 && *(_DWORD *)(a1 + 8) < *(_DWORD *)(a2 + 8))
  {
    v5 = *(double *)a3;
    if (v4 >= *(double *)a3)
    {
      v10 = *(_DWORD *)(a2 + 8);
      if (v5 < v4 || (v6 = *(_DWORD *)(a3 + 8), v10 >= v6))
      {
        *(double *)a1 = v4;
        *(double *)a2 = v3;
        v13 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = v10;
        *(_DWORD *)(a2 + 8) = v13;
        v14 = *(double *)a3;
        if (v3 >= *(double *)a3)
        {
          if (v14 < v3)
            return 1;
          v15 = *(_DWORD *)(a3 + 8);
          if (v13 >= v15)
            return 1;
        }
        else
        {
          v15 = *(_DWORD *)(a3 + 8);
        }
        *(double *)a2 = v14;
        *(double *)a3 = v3;
        *(_DWORD *)(a2 + 8) = v15;
        result = 2;
        *(_DWORD *)(a3 + 8) = v13;
        return result;
      }
    }
    else
    {
      v6 = *(_DWORD *)(a3 + 8);
    }
    *(double *)a1 = v5;
    *(double *)a3 = v3;
    v11 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v6;
    *(_DWORD *)(a3 + 8) = v11;
    return 1;
  }
  v7 = *(double *)a3;
  if (v4 >= *(double *)a3)
  {
    if (v7 < v4)
      return 0;
    v8 = *(_DWORD *)(a2 + 8);
    v9 = *(_DWORD *)(a3 + 8);
    if (v8 >= v9)
      return 0;
  }
  else
  {
    v8 = *(_DWORD *)(a2 + 8);
    v9 = *(_DWORD *)(a3 + 8);
  }
  *(double *)a2 = v7;
  *(double *)a3 = v4;
  *(_DWORD *)(a2 + 8) = v9;
  *(_DWORD *)(a3 + 8) = v8;
  v16 = *(double *)a1;
  v17 = *(double *)a2;
  if (*(double *)a1 < *(double *)a2)
  {
    v18 = *(_DWORD *)(a1 + 8);
    v19 = *(_DWORD *)(a2 + 8);
LABEL_18:
    *(double *)a1 = v17;
    *(double *)a2 = v16;
    *(_DWORD *)(a1 + 8) = v19;
    result = 2;
    *(_DWORD *)(a2 + 8) = v18;
    return result;
  }
  if (v17 >= v16)
  {
    v18 = *(_DWORD *)(a1 + 8);
    v19 = *(_DWORD *)(a2 + 8);
    if (v18 < v19)
      goto LABEL_18;
  }
  return 1;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<double,int> *,std::greater<std::pair<double,int>> &>(unint64_t a1, unint64_t a2)
{
  double v2;
  int v3;
  double v4;
  unint64_t i;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  int v12;
  double v13;
  double v14;

  v2 = *(double *)a1;
  v3 = *(_DWORD *)(a1 + 8);
  v4 = *(double *)(a2 - 16);
  if (v4 >= *(double *)a1 && (v2 < v4 || *(_DWORD *)(a2 - 8) >= v3))
  {
    for (i = a1 + 16; i < a2 && *(double *)i >= v2 && (v2 < *(double *)i || *(_DWORD *)(i + 8) >= v3); i += 16)
      ;
  }
  else
  {
    i = a1;
    do
    {
      v6 = *(double *)(i + 16);
      i += 16;
      v7 = v6;
    }
    while (v6 >= v2 && (v2 < v7 || *(_DWORD *)(i + 8) >= v3));
  }
  if (i < a2)
  {
    for (a2 -= 16; v4 < v2 || v2 >= v4 && *(_DWORD *)(a2 + 8) < v3; a2 -= 16)
    {
      v8 = *(double *)(a2 - 16);
      v4 = v8;
    }
  }
  if (i < a2)
  {
    v9 = *(double *)i;
    v10 = *(double *)a2;
    do
    {
      *(double *)i = v10;
      *(double *)a2 = v9;
      v11 = *(double *)(i + 16);
      i += 16;
      v9 = v11;
      v12 = *(_DWORD *)(i - 8);
      *(_DWORD *)(i - 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = v12;
      while (v9 >= v2 && (v2 < v9 || *(_DWORD *)(i + 8) >= v3))
      {
        v13 = *(double *)(i + 16);
        i += 16;
        v9 = v13;
      }
      do
      {
        do
        {
          v14 = *(double *)(a2 - 16);
          a2 -= 16;
          v10 = v14;
        }
        while (v14 < v2);
      }
      while (v2 >= v10 && *(_DWORD *)(a2 + 8) < v3);
    }
    while (i < a2);
  }
  if (i - 16 != a1)
  {
    *(_QWORD *)a1 = *(_QWORD *)(i - 16);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(i - 8);
  }
  *(double *)(i - 16) = v2;
  *(_DWORD *)(i - 8) = v3;
  return i;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<double,int> *,std::greater<std::pair<double,int>> &>(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  double v3;
  int v4;
  double v5;
  unint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  double v16;
  double v17;

  v2 = 0;
  v3 = *(double *)a1;
  v4 = *(_DWORD *)(a1 + 8);
  while (1)
  {
    v5 = *(double *)(a1 + v2 + 16);
    if (v3 >= v5 && (v5 < v3 || v4 >= *(_DWORD *)(a1 + v2 + 24)))
      break;
    v2 += 16;
  }
  v6 = a1 + v2 + 16;
  if (v2)
  {
    do
    {
      v7 = *(double *)(a2 - 16);
      a2 -= 16;
      v8 = v7;
    }
    while (v3 >= v7 && (v8 < v3 || v4 >= *(_DWORD *)(a2 + 8)));
  }
  else
  {
LABEL_19:
    if (v6 < a2)
    {
      do
      {
        v9 = *(double *)(a2 - 16);
        a2 -= 16;
        v10 = v9;
        if (v3 < v9)
          break;
        if (v10 < v3)
          goto LABEL_19;
      }
      while (v4 >= *(_DWORD *)(a2 + 8) && v6 < a2);
    }
  }
  if (v6 >= a2)
  {
    v13 = a1 + v2 + 16;
  }
  else
  {
    v12 = *(double *)a2;
    v13 = a1 + v2 + 16;
    v14 = a2;
    do
    {
      *(double *)v13 = v12;
      *(double *)v14 = v5;
      v15 = *(_DWORD *)(v13 + 8);
      *(_DWORD *)(v13 + 8) = *(_DWORD *)(v14 + 8);
      *(_DWORD *)(v14 + 8) = v15;
      do
      {
        do
        {
          v16 = *(double *)(v13 + 16);
          v13 += 16;
          v5 = v16;
        }
        while (v3 < v16);
      }
      while (v5 >= v3 && v4 < *(_DWORD *)(v13 + 8));
      do
      {
        v17 = *(double *)(v14 - 16);
        v14 -= 16;
        v12 = v17;
      }
      while (v3 >= v17 && (v12 < v3 || v4 >= *(_DWORD *)(v14 + 8)));
    }
    while (v13 < v14);
  }
  if (v13 - 16 != a1)
  {
    *(_QWORD *)a1 = *(_QWORD *)(v13 - 16);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(v13 - 8);
  }
  *(double *)(v13 - 16) = v3;
  *(_DWORD *)(v13 - 8) = v4;
  return v13 - 16;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  double v11;
  double v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  int v21;
  int v22;
  double v23;
  double v24;
  int v25;
  int v26;
  double v27;
  double v28;
  int v29;
  int v30;
  double v31;
  int v32;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v19 = *(double *)a1;
      v20 = *(double *)(a2 - 16);
      if (*(double *)a1 < v20)
      {
        v21 = *(_DWORD *)(a1 + 8);
        v22 = *(_DWORD *)(a2 - 8);
LABEL_24:
        *(double *)a1 = v20;
        *(double *)(a2 - 16) = v19;
        *(_DWORD *)(a1 + 8) = v22;
        *(_DWORD *)(a2 - 8) = v21;
        return result;
      }
      if (v20 >= v19)
      {
        v21 = *(_DWORD *)(a1 + 8);
        v22 = *(_DWORD *)(a2 - 8);
        if (v21 < v22)
          goto LABEL_24;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*>(a1, a1 + 16, a2 - 16);
      return 1;
    case 4:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*>(a1, a1 + 16, a1 + 32);
      v23 = *(double *)(a1 + 32);
      v24 = *(double *)(a2 - 16);
      if (v23 >= v24)
      {
        if (v24 < v23)
          return 1;
        v25 = *(_DWORD *)(a1 + 40);
        v26 = *(_DWORD *)(a2 - 8);
        if (v25 >= v26)
          return 1;
      }
      else
      {
        v25 = *(_DWORD *)(a1 + 40);
        v26 = *(_DWORD *)(a2 - 8);
      }
      *(double *)(a1 + 32) = v24;
      *(double *)(a2 - 16) = v23;
      *(_DWORD *)(a1 + 40) = v26;
      *(_DWORD *)(a2 - 8) = v25;
      v27 = *(double *)(a1 + 16);
      v28 = *(double *)(a1 + 32);
      if (v27 >= v28)
      {
        if (v28 < v27)
          return 1;
        v29 = *(_DWORD *)(a1 + 24);
        v30 = *(_DWORD *)(a1 + 40);
        if (v29 >= v30)
          return 1;
      }
      else
      {
        v29 = *(_DWORD *)(a1 + 24);
        v30 = *(_DWORD *)(a1 + 40);
      }
      *(double *)(a1 + 16) = v28;
      *(double *)(a1 + 32) = v27;
      *(_DWORD *)(a1 + 24) = v30;
      *(_DWORD *)(a1 + 40) = v29;
      v31 = *(double *)a1;
      if (*(double *)a1 < v28)
      {
        v32 = *(_DWORD *)(a1 + 8);
LABEL_46:
        *(double *)a1 = v28;
        *(double *)(a1 + 16) = v31;
        *(_DWORD *)(a1 + 8) = v30;
        result = 1;
        *(_DWORD *)(a1 + 24) = v32;
        return result;
      }
      if (v28 >= v31)
      {
        v32 = *(_DWORD *)(a1 + 8);
        if (v32 < v30)
          goto LABEL_46;
      }
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*>(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      v6 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*>(a1, a1 + 16, a1 + 32);
      v7 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      while (2)
      {
        v11 = *(double *)v6;
        v12 = *(double *)v7;
        if (*(double *)v6 >= *(double *)v7)
        {
          if (v12 < v11)
            goto LABEL_7;
          v14 = *(_DWORD *)(v6 + 8);
          v13 = *(_DWORD *)(v7 + 8);
          if (v14 >= v13)
            goto LABEL_7;
        }
        else
        {
          v13 = *(_DWORD *)(v7 + 8);
          v14 = *(_DWORD *)(v6 + 8);
        }
        *(double *)v7 = v11;
        *(_DWORD *)(v7 + 8) = v14;
        v10 = a1;
        if (v6 == a1)
          goto LABEL_6;
        v15 = v8;
        while (2)
        {
          v17 = a1 + v15;
          v18 = *(double *)(a1 + v15 + 16);
          if (v18 < v12)
          {
            v16 = *(_DWORD *)(v17 + 24);
LABEL_13:
            v6 -= 16;
            *(double *)(v17 + 32) = v18;
            *(_DWORD *)(a1 + v15 + 40) = v16;
            v15 -= 16;
            if (v15 == -32)
            {
              v10 = a1;
              goto LABEL_6;
            }
            continue;
          }
          break;
        }
        if (v12 >= v18)
        {
          v16 = *(_DWORD *)(a1 + v15 + 24);
          if (v16 >= v13)
          {
            v10 = a1 + v15 + 32;
            goto LABEL_6;
          }
          goto LABEL_13;
        }
        v10 = v6;
LABEL_6:
        *(double *)v10 = v12;
        *(_DWORD *)(v10 + 8) = v13;
        if (++v9 == 8)
          return v7 + 16 == a2;
LABEL_7:
        v6 = v7;
        v8 += 16;
        v7 += 16;
        if (v7 != a2)
          continue;
        return 1;
      }
  }
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  double v11;
  double v12;
  int v13;
  int v14;
  double v15;
  double v16;
  int v17;
  int v18;
  double v19;
  double v20;
  int v21;
  int v22;
  double v23;
  double v24;
  int v25;
  int v26;
  double v27;
  double v28;
  int v29;
  int v30;
  double v31;
  double v32;
  int v33;
  int v34;
  double v35;
  double v36;
  int v37;
  int v38;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*>(a1, a2, a3);
  v11 = *(double *)a3;
  v12 = *(double *)a4;
  if (*(double *)a3 >= *(double *)a4)
  {
    if (v12 < v11)
      goto LABEL_16;
    v13 = *(_DWORD *)(a3 + 8);
    v14 = *(_DWORD *)(a4 + 8);
    if (v13 >= v14)
      goto LABEL_16;
  }
  else
  {
    v13 = *(_DWORD *)(a3 + 8);
    v14 = *(_DWORD *)(a4 + 8);
  }
  *(double *)a3 = v12;
  *(double *)a4 = v11;
  *(_DWORD *)(a3 + 8) = v14;
  *(_DWORD *)(a4 + 8) = v13;
  v15 = *(double *)a2;
  v16 = *(double *)a3;
  if (*(double *)a2 >= *(double *)a3)
  {
    if (v16 < v15)
      goto LABEL_16;
    v17 = *(_DWORD *)(a2 + 8);
    v18 = *(_DWORD *)(a3 + 8);
    if (v17 >= v18)
      goto LABEL_16;
  }
  else
  {
    v17 = *(_DWORD *)(a2 + 8);
    v18 = *(_DWORD *)(a3 + 8);
  }
  *(double *)a2 = v16;
  *(double *)a3 = v15;
  *(_DWORD *)(a2 + 8) = v18;
  *(_DWORD *)(a3 + 8) = v17;
  v19 = *(double *)a1;
  v20 = *(double *)a2;
  if (*(double *)a1 < *(double *)a2)
  {
    v21 = *(_DWORD *)(a1 + 8);
    v22 = *(_DWORD *)(a2 + 8);
LABEL_7:
    *(double *)a1 = v20;
    *(double *)a2 = v19;
    *(_DWORD *)(a1 + 8) = v22;
    *(_DWORD *)(a2 + 8) = v21;
    goto LABEL_16;
  }
  if (v20 >= v19)
  {
    v21 = *(_DWORD *)(a1 + 8);
    v22 = *(_DWORD *)(a2 + 8);
    if (v21 < v22)
      goto LABEL_7;
  }
LABEL_16:
  v23 = *(double *)a4;
  v24 = *(double *)a5;
  if (*(double *)a4 >= *(double *)a5)
  {
    if (v24 < v23)
      return result;
    v25 = *(_DWORD *)(a4 + 8);
    v26 = *(_DWORD *)(a5 + 8);
    if (v25 >= v26)
      return result;
  }
  else
  {
    v25 = *(_DWORD *)(a4 + 8);
    v26 = *(_DWORD *)(a5 + 8);
  }
  *(double *)a4 = v24;
  *(double *)a5 = v23;
  *(_DWORD *)(a4 + 8) = v26;
  *(_DWORD *)(a5 + 8) = v25;
  v27 = *(double *)a3;
  v28 = *(double *)a4;
  if (*(double *)a3 >= *(double *)a4)
  {
    if (v28 < v27)
      return result;
    v29 = *(_DWORD *)(a3 + 8);
    v30 = *(_DWORD *)(a4 + 8);
    if (v29 >= v30)
      return result;
  }
  else
  {
    v29 = *(_DWORD *)(a3 + 8);
    v30 = *(_DWORD *)(a4 + 8);
  }
  *(double *)a3 = v28;
  *(double *)a4 = v27;
  *(_DWORD *)(a3 + 8) = v30;
  *(_DWORD *)(a4 + 8) = v29;
  v31 = *(double *)a2;
  v32 = *(double *)a3;
  if (*(double *)a2 >= *(double *)a3)
  {
    if (v32 < v31)
      return result;
    v33 = *(_DWORD *)(a2 + 8);
    v34 = *(_DWORD *)(a3 + 8);
    if (v33 >= v34)
      return result;
  }
  else
  {
    v33 = *(_DWORD *)(a2 + 8);
    v34 = *(_DWORD *)(a3 + 8);
  }
  *(double *)a2 = v32;
  *(double *)a3 = v31;
  *(_DWORD *)(a2 + 8) = v34;
  *(_DWORD *)(a3 + 8) = v33;
  v35 = *(double *)a1;
  v36 = *(double *)a2;
  if (*(double *)a1 < *(double *)a2)
  {
    v37 = *(_DWORD *)(a1 + 8);
    v38 = *(_DWORD *)(a2 + 8);
LABEL_24:
    *(double *)a1 = v36;
    *(double *)a2 = v35;
    *(_DWORD *)(a1 + 8) = v38;
    *(_DWORD *)(a2 + 8) = v37;
    return result;
  }
  if (v36 >= v35)
  {
    v37 = *(_DWORD *)(a1 + 8);
    v38 = *(_DWORD *)(a2 + 8);
    if (v37 < v38)
      goto LABEL_24;
  }
  return result;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>> &,std::pair<double,int>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  int v20;

  if (a3 >= 2)
  {
    v4 = a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= (a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = result + 16 * v7;
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = *(double *)(v8 + 16);
        if (v10 < *(double *)v8 || *(double *)v8 >= v10 && *(_DWORD *)(v8 + 24) < *(_DWORD *)(result + 16 * v7 + 8))
        {
          v8 += 16;
          v7 = v9;
        }
      }
      v11 = *(double *)a4;
      v12 = *(double *)v8;
      if (*(double *)a4 >= *(double *)v8)
      {
        v13 = *(_DWORD *)(v8 + 8);
        if (v12 >= v11)
        {
          v14 = *(_DWORD *)(a4 + 8);
          if (v14 < v13)
            return result;
        }
        else
        {
          v14 = *(_DWORD *)(a4 + 8);
        }
        *(double *)a4 = v12;
        *(_DWORD *)(a4 + 8) = v13;
        if (v5 >= v7)
        {
          while (1)
          {
            v16 = 2 * v7;
            v7 = (2 * v7) | 1;
            v15 = result + 16 * v7;
            v17 = v16 + 2;
            if (v17 < a3)
            {
              v18 = *(double *)(v15 + 16);
              if (v18 < *(double *)v15
                || *(double *)v15 >= v18 && *(_DWORD *)(v15 + 24) < *(_DWORD *)(result + 16 * v7 + 8))
              {
                v15 += 16;
                v7 = v17;
              }
            }
            v19 = *(double *)v15;
            if (v11 < *(double *)v15)
              break;
            v20 = *(_DWORD *)(v15 + 8);
            if (v19 >= v11 && v14 < v20)
              break;
            *(double *)v8 = v19;
            *(_DWORD *)(v8 + 8) = v20;
            v8 = v15;
            if (v5 < v7)
              goto LABEL_14;
          }
        }
        v15 = v8;
LABEL_14:
        *(double *)v15 = v11;
        *(_DWORD *)(v15 + 8) = v14;
      }
    }
  }
  return result;
}

uint64_t *std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<double,int>>,std::pair<double,int>*>(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  double *v7;
  double *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  double v17;
  double v18;
  int v19;
  int v20;
  uint64_t *v21;
  int v22;
  unint64_t v23;
  double v24;

  if (a4 >= 2)
  {
    v4 = 0;
    v5 = *result;
    v6 = *((_DWORD *)result + 2);
    v7 = (double *)result;
    do
    {
      v8 = v7;
      v9 = v4 + 1;
      v7 += 2 * v4 + 2;
      v10 = 2 * v4;
      v4 = (2 * v4) | 1;
      v11 = v10 + 2;
      if (v11 < a4)
      {
        v12 = v7[2];
        if (v12 < *v7 || *v7 >= v12 && *((_DWORD *)v7 + 6) < SLODWORD(v8[2 * v9 + 1]))
        {
          v7 += 2;
          v4 = v11;
        }
      }
      *v8 = *v7;
      *((_DWORD *)v8 + 2) = *((_DWORD *)v7 + 2);
    }
    while (v4 <= (uint64_t)((unint64_t)(a4 - 2) >> 1));
    if (v7 == (double *)(a2 - 16))
    {
      *(_QWORD *)v7 = v5;
      *((_DWORD *)v7 + 2) = v6;
      return result;
    }
    *v7 = *(double *)(a2 - 16);
    *((_DWORD *)v7 + 2) = *(_DWORD *)(a2 - 8);
    *(_QWORD *)(a2 - 16) = v5;
    *(_DWORD *)(a2 - 8) = v6;
    v13 = (char *)v7 - (char *)result + 16;
    if (v13 >= 17)
    {
      v14 = ((unint64_t)v13 >> 4) - 2;
      v15 = v14 >> 1;
      v16 = &result[2 * (v14 >> 1)];
      v17 = *v7;
      v18 = *(double *)v16;
      if (*v7 >= *(double *)v16)
      {
        if (v18 < v17)
          return result;
        v19 = *((_DWORD *)v7 + 2);
        v20 = result[2 * v15 + 1];
        if (v19 >= v20)
          return result;
      }
      else
      {
        v19 = *((_DWORD *)v7 + 2);
        v20 = *((_DWORD *)v16 + 2);
      }
      *v7 = v18;
      *((_DWORD *)v7 + 2) = v20;
      if (v14 >= 2)
      {
        while (1)
        {
          v23 = v15 - 1;
          v15 = (v15 - 1) >> 1;
          v21 = &result[2 * v15];
          v24 = *(double *)v21;
          if (v17 < *(double *)v21)
          {
            v22 = *((_DWORD *)v21 + 2);
          }
          else
          {
            if (v24 < v17)
              break;
            v22 = result[2 * v15 + 1];
            if (v19 >= v22)
              break;
          }
          *(double *)v16 = v24;
          *((_DWORD *)v16 + 2) = v22;
          v16 = &result[2 * v15];
          if (v23 <= 1)
            goto LABEL_19;
        }
      }
      v21 = v16;
LABEL_19:
      *(double *)v21 = v17;
      *((_DWORD *)v21 + 2) = v19;
    }
  }
  return result;
}

uint64_t operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0::$_0(uint64_t a1, int *a2)
{
  int v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;
  _BYTE *v15;
  _BYTE *v16;
  int64_t v17;
  char *v18;
  char *v19;

  v4 = *a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v6 = (_BYTE *)*((_QWORD *)a2 + 1);
  v5 = (_BYTE *)*((_QWORD *)a2 + 2);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(v5 - v6);
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v8;
    v9 = &v8[4 * (v7 >> 2)];
    *(_QWORD *)(a1 + 24) = v9;
    memcpy(v8, v6, v7);
    *(_QWORD *)(a1 + 16) = v9;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v11 = (_BYTE *)*((_QWORD *)a2 + 4);
  v10 = (_BYTE *)*((_QWORD *)a2 + 5);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v13 = (char *)operator new(v10 - v11);
    *(_QWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 40) = v13;
    v14 = &v13[4 * (v12 >> 2)];
    *(_QWORD *)(a1 + 48) = v14;
    memcpy(v13, v11, v12);
    *(_QWORD *)(a1 + 40) = v14;
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v16 = (_BYTE *)*((_QWORD *)a2 + 7);
  v15 = (_BYTE *)*((_QWORD *)a2 + 8);
  v17 = v15 - v16;
  if (v15 != v16)
  {
    if (v17 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v18 = (char *)operator new(v15 - v16);
    *(_QWORD *)(a1 + 56) = v18;
    *(_QWORD *)(a1 + 64) = v18;
    v19 = &v18[4 * (v17 >> 2)];
    *(_QWORD *)(a1 + 72) = v19;
    memcpy(v18, v16, v17);
    *(_QWORD *)(a1 + 64) = v19;
  }
  *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
  return a1;
}

void sub_22DBA0EE0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;
  void *v8;

  v6 = *v4;
  if (*v4)
  {
    v1[8] = v6;
    operator delete(v6);
    v7 = *v3;
    if (!*v3)
    {
LABEL_3:
      v8 = *v2;
      if (!*v2)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v7 = *v3;
    if (!*v3)
      goto LABEL_3;
  }
  v1[5] = v7;
  operator delete(v7);
  v8 = *v2;
  if (!*v2)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_4:
  v1[2] = v8;
  operator delete(v8);
  goto LABEL_5;
}

void sub_22DBA0F40()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x22DBA0F04);
  JUMPOUT(0x22DBA0EFCLL);
}

_QWORD *std::__function::__func<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::~__func(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_24F9874E0;
  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::~__func(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_24F9874E0;
  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::__clone(uint64_t a1)
{
  int *v1;
  _QWORD *v2;

  v1 = (int *)(a1 + 8);
  v2 = operator new(0x60uLL);
  *v2 = &off_24F9874E0;
  std::__compressed_pair_elem<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_22DBA1058(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24F9874E0;
  return std::__compressed_pair_elem<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0 const&,0ul>((uint64_t)(a2 + 1), (int *)(a1 + 8));
}

void std::__function::__func<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::destroy(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
}

void std::__function::__func<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)__p[8];
  if (v2)
  {
    __p[9] = v2;
    operator delete(v2);
  }
  v3 = (void *)__p[5];
  if (v3)
  {
    __p[6] = v3;
    operator delete(v3);
  }
  v4 = (void *)__p[2];
  if (v4)
  {
    __p[3] = v4;
    operator delete(v4);
  }
  operator delete(__p);
}

void std::__function::__func<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  operations_research::sat::SeparateSubtourInequalities(*(unsigned int *)(a1 + 8), (uint64_t *)(a1 + 16), (_QWORD *)(a1 + 40), (_QWORD *)(a1 + 64), a2, 0, 0, 0, *a3, *(_QWORD *)(a1 + 88));
}

uint64_t std::__function::__func<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat40CreateStronglyConnectedGraphCutGeneratorEiRKNSt3__16vectorIiNS1_9alloc"
                     "atorIiEEEES7_RKNS2_INS0_7LiteralENS3_IS8_EEEEPNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat40CreateStronglyConnectedGraphCutGeneratorEiRKNSt3__16vectorI"
                                "iNS1_9allocatorIiEEEES7_RKNS2_INS0_7LiteralENS3_IS8_EEEEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat40CreateStronglyConnectedGraphCutGeneratorEiRKNSt3__16vectorIiNS1_9allocatorIiEEEES7_RKNS2_INS0_7LiteralENS3_IS8_EEEEPNS0_5ModelEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat40CreateStronglyConnectedGraphCutGeneratorEiRKNSt3__16vectorIiNS1_9allocatorIiEEEES7_RKNS2_INS0_7LiteralENS3_IS8_EEEEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::CreateStronglyConnectedGraphCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,operations_research::sat::Model *)::$_0 const&,0ul>(uint64_t a1, int *a2)
{
  int v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;
  _BYTE *v15;
  _BYTE *v16;
  int64_t v17;
  char *v18;
  char *v19;

  v4 = *a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v6 = (_BYTE *)*((_QWORD *)a2 + 1);
  v5 = (_BYTE *)*((_QWORD *)a2 + 2);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(v5 - v6);
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v8;
    v9 = &v8[4 * (v7 >> 2)];
    *(_QWORD *)(a1 + 24) = v9;
    memcpy(v8, v6, v7);
    *(_QWORD *)(a1 + 16) = v9;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v11 = (_BYTE *)*((_QWORD *)a2 + 4);
  v10 = (_BYTE *)*((_QWORD *)a2 + 5);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v13 = (char *)operator new(v10 - v11);
    *(_QWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 40) = v13;
    v14 = &v13[4 * (v12 >> 2)];
    *(_QWORD *)(a1 + 48) = v14;
    memcpy(v13, v11, v12);
    *(_QWORD *)(a1 + 40) = v14;
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v16 = (_BYTE *)*((_QWORD *)a2 + 7);
  v15 = (_BYTE *)*((_QWORD *)a2 + 8);
  v17 = v15 - v16;
  if (v15 != v16)
  {
    if (v17 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v18 = (char *)operator new(v15 - v16);
    *(_QWORD *)(a1 + 56) = v18;
    *(_QWORD *)(a1 + 64) = v18;
    v19 = &v18[4 * (v17 >> 2)];
    *(_QWORD *)(a1 + 72) = v19;
    memcpy(v18, v16, v17);
    *(_QWORD *)(a1 + 64) = v19;
  }
  *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
  return a1;
}

void sub_22DBA132C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;
  void *v8;

  v6 = *v4;
  if (*v4)
  {
    v1[8] = v6;
    operator delete(v6);
    v7 = *v3;
    if (!*v3)
    {
LABEL_3:
      v8 = *v2;
      if (!*v2)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v7 = *v3;
    if (!*v3)
      goto LABEL_3;
  }
  v1[5] = v7;
  operator delete(v7);
  v8 = *v2;
  if (!*v2)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_4:
  v1[2] = v8;
  operator delete(v8);
  goto LABEL_5;
}

void sub_22DBA138C()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x22DBA1350);
  JUMPOUT(0x22DBA1348);
}

uint64_t operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0::$_0(uint64_t a1, int *a2)
{
  int v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;
  _BYTE *v15;
  _BYTE *v16;
  int64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  int64_t v23;
  char *v24;
  char *v25;

  v4 = *a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v6 = (_BYTE *)*((_QWORD *)a2 + 1);
  v5 = (_BYTE *)*((_QWORD *)a2 + 2);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(v5 - v6);
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v8;
    v9 = &v8[4 * (v7 >> 2)];
    *(_QWORD *)(a1 + 24) = v9;
    memcpy(v8, v6, v7);
    *(_QWORD *)(a1 + 16) = v9;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v11 = (_BYTE *)*((_QWORD *)a2 + 4);
  v10 = (_BYTE *)*((_QWORD *)a2 + 5);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v13 = (char *)operator new(v10 - v11);
    *(_QWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 40) = v13;
    v14 = &v13[4 * (v12 >> 2)];
    *(_QWORD *)(a1 + 48) = v14;
    memcpy(v13, v11, v12);
    *(_QWORD *)(a1 + 40) = v14;
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v16 = (_BYTE *)*((_QWORD *)a2 + 7);
  v15 = (_BYTE *)*((_QWORD *)a2 + 8);
  v17 = v15 - v16;
  if (v15 != v16)
  {
    if (v17 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v18 = (char *)operator new(v15 - v16);
    *(_QWORD *)(a1 + 56) = v18;
    *(_QWORD *)(a1 + 64) = v18;
    v19 = &v18[8 * (v17 >> 3)];
    *(_QWORD *)(a1 + 72) = v19;
    memcpy(v18, v16, v17);
    *(_QWORD *)(a1 + 64) = v19;
  }
  v20 = *((_QWORD *)a2 + 10);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = v20;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v22 = (_BYTE *)*((_QWORD *)a2 + 11);
  v21 = (_BYTE *)*((_QWORD *)a2 + 12);
  v23 = v21 - v22;
  if (v21 != v22)
  {
    if (v23 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v24 = (char *)operator new(v21 - v22);
    *(_QWORD *)(a1 + 88) = v24;
    *(_QWORD *)(a1 + 96) = v24;
    v25 = &v24[4 * (v23 >> 2)];
    *(_QWORD *)(a1 + 104) = v25;
    memcpy(v24, v22, v23);
    *(_QWORD *)(a1 + 96) = v25;
  }
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  return a1;
}

void sub_22DBA1530(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v7 = *v5;
  if (*v5)
  {
    v1[12] = v7;
    operator delete(v7);
    v8 = *v4;
    if (!*v4)
    {
LABEL_3:
      v9 = *v3;
      if (!*v3)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v8 = *v4;
    if (!*v4)
      goto LABEL_3;
  }
  v1[8] = v8;
  operator delete(v8);
  v9 = *v3;
  if (!*v3)
  {
LABEL_4:
    v10 = *v2;
    if (!*v2)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  v1[5] = v9;
  operator delete(v9);
  v10 = *v2;
  if (!*v2)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_5:
  v1[2] = v10;
  operator delete(v10);
  goto LABEL_6;
}

void sub_22DBA15B8()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x22DBA155CLL);
  JUMPOUT(0x22DBA1554);
}

_QWORD *std::__function::__func<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::~__func(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *a1 = &off_24F987560;
  v2 = (void *)a1[12];
  if (v2)
  {
    a1[13] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[5];
  if (v4)
  {
    a1[6] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[2];
  if (v5)
  {
    a1[3] = v5;
    operator delete(v5);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::~__func(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *a1 = &off_24F987560;
  v2 = (void *)a1[12];
  if (v2)
  {
    a1[13] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[5];
  if (v4)
  {
    a1[6] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[2];
  if (v5)
  {
    a1[3] = v5;
    operator delete(v5);
  }
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::__clone(uint64_t a1)
{
  int *v1;
  _QWORD *v2;

  v1 = (int *)(a1 + 8);
  v2 = operator new(0x80uLL);
  *v2 = &off_24F987560;
  std::__compressed_pair_elem<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_22DBA16F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24F987560;
  return std::__compressed_pair_elem<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0 const&,0ul>((uint64_t)(a2 + 1), (int *)(a1 + 8));
}

void std::__function::__func<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::destroy(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)a1[12];
  if (v2)
  {
    a1[13] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[5];
  if (v4)
  {
    a1[6] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[2];
  if (v5)
  {
    a1[3] = v5;
    operator delete(v5);
  }
}

void std::__function::__func<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)__p[12];
  if (v2)
  {
    __p[13] = v2;
    operator delete(v2);
  }
  v3 = (void *)__p[8];
  if (v3)
  {
    __p[9] = v3;
    operator delete(v3);
  }
  v4 = (void *)__p[5];
  if (v4)
  {
    __p[6] = v4;
    operator delete(v4);
  }
  v5 = (void *)__p[2];
  if (v5)
  {
    __p[3] = v5;
    operator delete(v5);
  }
  operator delete(__p);
}

void std::__function::__func<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  operations_research::sat::SeparateSubtourInequalities(*(unsigned int *)(a1 + 8), (uint64_t *)(a1 + 16), (_QWORD *)(a1 + 40), (_QWORD *)(a1 + 96), a2, *(int64x2_t **)(a1 + 64), (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3, *(_QWORD *)(a1 + 88), *a3, *(_QWORD *)(a1 + 120));
}

uint64_t std::__function::__func<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat22CreateCVRPCutGeneratorEiRKNSt3__16vectorIiNS1_9allocatorIiEEEES7_RKNS2"
                     "_INS0_7LiteralENS3_IS8_EEEERKNS2_IxNS3_IxEEEExPNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat22CreateCVRPCutGeneratorEiRKNSt3__16vectorIiNS1_9allocatorIiE"
                                "EEES7_RKNS2_INS0_7LiteralENS3_IS8_EEEERKNS2_IxNS3_IxEEEExPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat22CreateCVRPCutGeneratorEiRKNSt3__16vectorIiNS1_9allocatorIiEEEES7_RKNS2_INS0_7LiteralENS3_IS8_EEEERKNS2_IxNS3_IxEEEExPNS0_5ModelEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat22CreateCVRPCutGeneratorEiRKNSt3__16vectorIiNS1_9allocatorIiEEEES7_RKNS2_INS0_7LiteralENS3_IS8_EEEERKNS2_IxNS3_IxEEEExPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::CreateCVRPCutGenerator(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,std::vector<long long> const&,long long,operations_research::sat::Model *)::$_0 const&,0ul>(uint64_t a1, int *a2)
{
  int v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;
  _BYTE *v15;
  _BYTE *v16;
  int64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  int64_t v23;
  char *v24;
  char *v25;

  v4 = *a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v6 = (_BYTE *)*((_QWORD *)a2 + 1);
  v5 = (_BYTE *)*((_QWORD *)a2 + 2);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(v5 - v6);
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v8;
    v9 = &v8[4 * (v7 >> 2)];
    *(_QWORD *)(a1 + 24) = v9;
    memcpy(v8, v6, v7);
    *(_QWORD *)(a1 + 16) = v9;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v11 = (_BYTE *)*((_QWORD *)a2 + 4);
  v10 = (_BYTE *)*((_QWORD *)a2 + 5);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v13 = (char *)operator new(v10 - v11);
    *(_QWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 40) = v13;
    v14 = &v13[4 * (v12 >> 2)];
    *(_QWORD *)(a1 + 48) = v14;
    memcpy(v13, v11, v12);
    *(_QWORD *)(a1 + 40) = v14;
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v16 = (_BYTE *)*((_QWORD *)a2 + 7);
  v15 = (_BYTE *)*((_QWORD *)a2 + 8);
  v17 = v15 - v16;
  if (v15 != v16)
  {
    if (v17 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v18 = (char *)operator new(v15 - v16);
    *(_QWORD *)(a1 + 56) = v18;
    *(_QWORD *)(a1 + 64) = v18;
    v19 = &v18[8 * (v17 >> 3)];
    *(_QWORD *)(a1 + 72) = v19;
    memcpy(v18, v16, v17);
    *(_QWORD *)(a1 + 64) = v19;
  }
  v20 = *((_QWORD *)a2 + 10);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = v20;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v22 = (_BYTE *)*((_QWORD *)a2 + 11);
  v21 = (_BYTE *)*((_QWORD *)a2 + 12);
  v23 = v21 - v22;
  if (v21 != v22)
  {
    if (v23 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v24 = (char *)operator new(v21 - v22);
    *(_QWORD *)(a1 + 88) = v24;
    *(_QWORD *)(a1 + 96) = v24;
    v25 = &v24[4 * (v23 >> 2)];
    *(_QWORD *)(a1 + 104) = v25;
    memcpy(v24, v22, v23);
    *(_QWORD *)(a1 + 96) = v25;
  }
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  return a1;
}

void sub_22DBA1A40(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v7 = *v5;
  if (*v5)
  {
    v1[12] = v7;
    operator delete(v7);
    v8 = *v4;
    if (!*v4)
    {
LABEL_3:
      v9 = *v3;
      if (!*v3)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v8 = *v4;
    if (!*v4)
      goto LABEL_3;
  }
  v1[8] = v8;
  operator delete(v8);
  v9 = *v3;
  if (!*v3)
  {
LABEL_4:
    v10 = *v2;
    if (!*v2)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  v1[5] = v9;
  operator delete(v9);
  v10 = *v2;
  if (!*v2)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_5:
  v1[2] = v10;
  operator delete(v10);
  goto LABEL_6;
}

void sub_22DBA1AC8()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x22DBA1A6CLL);
  JUMPOUT(0x22DBA1A64);
}

_QWORD *std::__function::__func<operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24F9875E0;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24F9875E0;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22E31DF78);
}

char *std::__function::__func<operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;

  v2 = (char *)operator new(0x38uLL);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_BYTE **)(a1 + 16);
  *(_QWORD *)v2 = &off_24F9875E0;
  *((_QWORD *)v2 + 1) = v3;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = 0;
  *((_QWORD *)v2 + 4) = 0;
  v5 = *(_BYTE **)(a1 + 24);
  v6 = v5 - v4;
  if (v5 != v4)
  {
    if (v6 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v5 - v4);
    *((_QWORD *)v2 + 2) = v7;
    v8 = &v7[4 * (v6 >> 2)];
    *((_QWORD *)v2 + 4) = v8;
    memcpy(v7, v4, v6);
    *((_QWORD *)v2 + 3) = v8;
  }
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  return v2;
}

void sub_22DBA1C04(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[3] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  __n128 result;

  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = &off_24F9875E0;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(_BYTE **)(a1 + 16);
  v5 = *(_BYTE **)(a1 + 24);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(v5 - v6);
    *(_QWORD *)(a2 + 16) = v8;
    *(_QWORD *)(a2 + 24) = v8;
    v9 = &v8[4 * (v7 >> 2)];
    *(_QWORD *)(a2 + 32) = v9;
    memcpy(v8, v6, v7);
    *(_QWORD *)(a2 + 24) = v9;
  }
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

void sub_22DBA1CC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::destroy(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

unint64_t std::__function::__func<operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::operator()(_QWORD *a1)
{
  int *v1;
  int *v2;
  uint64_t *v4;
  double v5;
  int v6;
  int v7;
  _QWORD *v8;
  unint64_t v9;
  double v10;
  double v11;
  double v12;
  unsigned int *v13;
  const char *v15[2];

  v1 = (int *)a1[2];
  v2 = (int *)a1[3];
  if (v1 == v2)
    return 0xFFFFFFFFLL;
  v4 = (uint64_t *)a1[1];
  v5 = -1.0;
  v6 = -1;
  do
  {
    v7 = *v1;
    v8 = (_QWORD *)v4[2503];
    v9 = *(int *)(v8[51] + 4 * *v1);
    if (((_DWORD)v9 == -1
       || ((*(_QWORD *)(*(_QWORD *)(v8[117] + 24) + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
      && *(_QWORD *)(v8[5] + 12 * v7) + *(_QWORD *)(v8[5] + 12 * (v7 ^ 1)))
    {
      LODWORD(v15[0]) = *v1;
      v10 = *(double *)(v4[2541]
                      + 8
                      * *(int *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>>(v4 + 2493, (int *)v15));
      v11 = ceil(v10 + -0.000001) - v10;
      v12 = v10 - floor(v10 + 0.000001);
      if (v12 >= v11)
        v12 = v11;
      if (v12 >= 0.000001 && v12 > v5)
      {
        v5 = v12;
        v6 = v7;
      }
    }
    ++v1;
  }
  while (v1 != v2);
  if (v6 == -1)
    return 0xFFFFFFFFLL;
  v13 = (unsigned int *)a1[6];
  LODWORD(v15[0]) = v6;
  *(const char **)((char *)v15 + 4) = (const char *)1;
  return operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(v13, v15[0], 0);
}

uint64_t std::__function::__func<operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat27LinearProgrammingConstraint31HeuristicLPMostInfeasibleBinaryEPNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat27LinearProgrammingConstraint31HeuristicLPMostInfeasibleBinar"
                                "yEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat27LinearProgrammingConstraint31HeuristicLPMostInfeasibleBinaryEPNS0_5ModelEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat27LinearProgrammingConstraint31HeuristicLPMostInfeasibleBinaryEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::HeuristicLPMostInfeasibleBinary(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~__func(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_24F987660;
  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~__func(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_24F987660;
  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;

  v1 = (uint64_t *)(a1 + 8);
  v2 = operator new(0x68uLL);
  *v2 = &off_24F987660;
  std::__compressed_pair_elem<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_22DBA2010(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24F987660;
  return std::__compressed_pair_elem<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0 const&,0ul>((uint64_t)(a2 + 1), (uint64_t *)(a1 + 8));
}

void std::__function::__func<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::destroy(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
}

void std::__function::__func<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)__p[8];
  if (v2)
  {
    __p[9] = v2;
    operator delete(v2);
  }
  v3 = (void *)__p[5];
  if (v3)
  {
    __p[6] = v3;
    operator delete(v3);
  }
  v4 = (void *)__p[2];
  if (v4)
  {
    __p[3] = v4;
    operator delete(v4);
  }
  operator delete(__p);
}

unint64_t std::__function::__func<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::operator()(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  unint64_t v11;
  double v12;
  double v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  double v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  unsigned int *v25;
  _BYTE v27[12];

  v2 = *(uint64_t **)(a1 + 88);
  LODWORD(v3) = *(_DWORD *)(a1 + 12);
  v4 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v4;
  if (v4 == 10000)
  {
    if ((int)v3 >= 1)
    {
      v5 = 0;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_QWORD *)(a1 + 40);
      do
      {
        *(double *)(v6 + 8 * v5) = *(double *)(v6 + 8 * v5) * 0.5;
        *(int *)(v7 + 4 * v5++) /= 2;
        v3 = *(int *)(a1 + 12);
      }
      while (v5 < v3);
    }
    *(_DWORD *)(a1 + 8) = 0;
  }
  if ((int)v3 < 1)
    return 0xFFFFFFFFLL;
  v8 = 0;
  do
  {
    v9 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * v8);
    v10 = (_QWORD *)v2[2503];
    v11 = *(int *)(v10[51] + 4 * v9);
    if ((_DWORD)v11 == -1
      || ((*(_QWORD *)(*(_QWORD *)(v10[117] + 24) + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    {
      if (*(_QWORD *)(v10[5] + 12 * v9) + *(_QWORD *)(v10[5] + 12 * (v9 ^ 1)))
      {
        *(_DWORD *)v27 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * v8);
        v12 = *(double *)(v2[2544]
                        + 8
                        * *(int *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>>(v2 + 2493, (int *)v27));
        if (fabs(v12) >= 0.000001)
        {
          *(_DWORD *)v27 = v9;
          v13 = round(*(double *)(v2[2541]
                                + 8
                                * *(int *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>>(v2 + 2493, (int *)v27)));
          if (v12 < 0.0 && v13 == 1.0)
          {
            *(double *)(*(_QWORD *)(a1 + 16) + 8 * v8) = *(double *)(*(_QWORD *)(a1 + 16) + 8 * v8) - v12;
            ++*(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v8);
          }
        }
      }
    }
    ++v8;
  }
  while (v8 < *(int *)(a1 + 12));
  v15 = *(unsigned int *)(a1 + 12);
  if ((int)v15 < 1)
    return 0xFFFFFFFFLL;
  v16 = 0;
  v17 = *(_QWORD *)(a1 + 64);
  v18 = (_QWORD *)v2[2503];
  v20 = 0.0;
  v21 = -1;
  do
  {
    v22 = *(int *)(v17 + 4 * v16);
    v23 = *(int *)(v18[51] + 4 * v22);
    if ((_DWORD)v23 == -1
      || ((*(_QWORD *)(*(_QWORD *)(v18[117] + 24) + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
    {
      if (*(_QWORD *)(v18[5] + 12 * (int)v22) + *(_QWORD *)(v18[5] + 12 * (int)(v22 ^ 1)))
      {
        v24 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v16);
        if (v24 >= 1)
        {
          v19 = *(_QWORD *)(a1 + 16);
          if (v20 < *(double *)(v19 + 8 * v16) / (double)v24)
          {
            v20 = *(double *)(v19 + 8 * v16) / (double)v24;
            v21 = v16;
          }
        }
      }
    }
    ++v16;
  }
  while (v15 != v16);
  if ((v21 & 0x80000000) != 0)
    return 0xFFFFFFFFLL;
  v25 = *(unsigned int **)(a1 + 96);
  *(_DWORD *)v27 = *(_DWORD *)(v17 + 4 * v21);
  *(_QWORD *)&v27[4] = 1;
  return operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(v25, *(const char **)v27, 0);
}

uint64_t std::__function::__func<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat27LinearProgrammingConstraint27HeuristicLPPseudoCostBinaryEPNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat27LinearProgrammingConstraint27HeuristicLPPseudoCostBinaryEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat27LinearProgrammingConstraint27HeuristicLPPseudoCostBinaryEPNS0_5ModelEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat27LinearProgrammingConstraint27HeuristicLPPseudoCostBinaryEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::LinearProgrammingConstraint::HeuristicLPPseudoCostBinary(operations_research::sat::Model *)::$_0 const&,0ul>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;
  _BYTE *v15;
  _BYTE *v16;
  int64_t v17;
  char *v18;
  char *v19;

  v4 = *a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v6 = (_BYTE *)a2[1];
  v5 = (_BYTE *)a2[2];
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(v5 - v6);
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v8;
    v9 = &v8[8 * (v7 >> 3)];
    *(_QWORD *)(a1 + 24) = v9;
    memcpy(v8, v6, v7);
    *(_QWORD *)(a1 + 16) = v9;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v11 = (_BYTE *)a2[4];
  v10 = (_BYTE *)a2[5];
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v13 = (char *)operator new(v10 - v11);
    *(_QWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 40) = v13;
    v14 = &v13[4 * (v12 >> 2)];
    *(_QWORD *)(a1 + 48) = v14;
    memcpy(v13, v11, v12);
    *(_QWORD *)(a1 + 40) = v14;
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v16 = (_BYTE *)a2[7];
  v15 = (_BYTE *)a2[8];
  v17 = v15 - v16;
  if (v15 != v16)
  {
    if (v17 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v18 = (char *)operator new(v15 - v16);
    *(_QWORD *)(a1 + 56) = v18;
    *(_QWORD *)(a1 + 64) = v18;
    v19 = &v18[4 * (v17 >> 2)];
    *(_QWORD *)(a1 + 72) = v19;
    memcpy(v18, v16, v17);
    *(_QWORD *)(a1 + 64) = v19;
  }
  *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
  return a1;
}

void sub_22DBA254C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;
  void *v8;

  v6 = *v4;
  if (*v4)
  {
    v1[8] = v6;
    operator delete(v6);
    v7 = *v3;
    if (!*v3)
    {
LABEL_3:
      v8 = *v2;
      if (!*v2)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v7 = *v3;
    if (!*v3)
      goto LABEL_3;
  }
  v1[5] = v7;
  operator delete(v7);
  v8 = *v2;
  if (!*v2)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_4:
  v1[2] = v8;
  operator delete(v8);
  goto LABEL_5;
}

void sub_22DBA25AC()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x22DBA2570);
  JUMPOUT(0x22DBA2568);
}

void std::__function::__func<operations_research::sat::LinearProgrammingConstraint::LPReducedCostAverageBranching(void)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::LPReducedCostAverageBranching(void)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::LinearProgrammingConstraint::LPReducedCostAverageBranching(void)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::LPReducedCostAverageBranching(void)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F9876E0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::LinearProgrammingConstraint::LPReducedCostAverageBranching(void)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::LPReducedCostAverageBranching(void)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F9876E0;
  a2[1] = v2;
  return result;
}

unint64_t std::__function::__func<operations_research::sat::LinearProgrammingConstraint::LPReducedCostAverageBranching(void)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::LPReducedCostAverageBranching(void)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::operator()(uint64_t a1)
{
  return operations_research::sat::LinearProgrammingConstraint::LPReducedCostAverageDecision(*(operations_research::sat::LinearProgrammingConstraint **)(a1 + 8));
}

uint64_t std::__function::__func<operations_research::sat::LinearProgrammingConstraint::LPReducedCostAverageBranching(void)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::LPReducedCostAverageBranching(void)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat27LinearProgrammingConstraint29LPReducedCostAverageBranchingEvE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat27LinearProgrammingConstraint29LPReducedCostAverageBranchingEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat27LinearProgrammingConstraint29LPReducedCostAverageBranchingEvE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat27LinearProgrammingConstraint29LPReducedCostAverageBranchingEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::LinearProgrammingConstraint::LPReducedCostAverageBranching(void)::$_0,std::allocator<operations_research::sat::LinearProgrammingConstraint::LPReducedCostAverageBranching(void)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target_type()
{
}

uint64_t operations_research::sat::AppendFullEncodingRelaxation(signed int a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  BOOL v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  BOOL v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  unint64_t v30;
  BOOL v31;
  _QWORD *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  int v36;
  char *v37;
  uint64_t v38;
  char *v39;
  int64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  int *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  __int128 v54;
  int v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  void *v60;
  unint64_t v61;
  char *v62;
  void *v63;
  _QWORD *v64;
  void *v65;
  int64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  void *v72[2];
  uint64_t v73;
  void *__p[2];
  uint64_t v75;
  void *v76;
  char *v77;
  char *v78;
  _QWORD v79[3];
  void *v80[2];
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  char *v86;
  char *v87;

  v4 = (_QWORD *)(a2 + 32);
  v3 = *(_QWORD **)(a2 + 32);
  if (!v3)
    return 0;
  v7 = (_QWORD *)(a2 + 32);
  v8 = (_QWORD *)(a2 + 32);
  do
  {
    v9 = v3[4];
    v10 = v9 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
    if (v9 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
      v11 = v3;
    else
      v11 = v3 + 1;
    if (v10)
      v8 = v3;
    v3 = (_QWORD *)*v11;
  }
  while (*v11);
  if (v8 == v4)
    return 0;
  if (v8[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
    return 0;
  v12 = (uint64_t *)v8[5];
  if (!v12 || !operations_research::sat::IntegerEncoder::VariableIsFullyEncoded(v8[5], a1))
    return 0;
  operations_research::sat::IntegerEncoder::FullDomainEncoding(v12, a1, &v86);
  v14 = (_QWORD *)*v4;
  if (*v4)
  {
    v15 = v4;
    v16 = (_QWORD *)*v4;
    do
    {
      v17 = v16[4];
      v18 = v17 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
      if (v17 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
        v19 = v16;
      else
        v19 = v16 + 1;
      if (v18)
        v15 = v16;
      v16 = (_QWORD *)*v19;
    }
    while (*v19);
    v20 = *(_QWORD *)(*(_QWORD *)(v15[5] + 40) + 12 * a1);
    v21 = v4;
    v22 = (_QWORD *)*v4;
    do
    {
      v23 = v22[4];
      v24 = v23 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
      if (v23 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
        v25 = v22;
      else
        v25 = v22 + 1;
      if (v24)
        v21 = v22;
      v22 = (_QWORD *)*v25;
    }
    while (*v25);
    if (v21 == v4 || v21[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
      v26 = 0;
    else
      v26 = v21[5];
    v82 = v26;
    v83 = xmmword_22DCF5A40;
    v84 = 0u;
    v85 = 0u;
    do
    {
      v30 = v14[4];
      v31 = v30 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
      if (v30 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
        v32 = v14;
      else
        v32 = v14 + 1;
      if (v31)
        v7 = v14;
      v14 = (_QWORD *)*v32;
    }
    while (*v32);
    if (v7 == v4 || v7[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
      v14 = 0;
    else
      v14 = (_QWORD *)v7[5];
    v29 = v20;
  }
  else
  {
    v29 = *(_QWORD *)(MEMORY[0x28] + 12 * a1);
    v82 = 0;
    v83 = xmmword_22DCF5A40;
    v84 = 0u;
    v85 = 0u;
  }
  v69 = a3;
  v79[0] = v14;
  v79[1] = v29;
  v79[2] = v29;
  *(_OWORD *)v80 = 0u;
  v81 = 0u;
  operations_research::sat::LinearConstraintBuilder::AddTerm(v79, a1, 1);
  v76 = 0;
  v77 = 0;
  v78 = 0;
  v33 = v86;
  v34 = v87;
  if (v86 != v87)
  {
    v70 = v29;
    while (1)
    {
      v35 = *(_QWORD *)v33;
      v36 = *((_DWORD *)v33 + 2);
      v37 = v77;
      if (v77 < v78)
      {
        *(_DWORD *)v77 = v36;
        v38 = (uint64_t)(v37 + 4);
        goto LABEL_75;
      }
      v39 = (char *)v76;
      v40 = v77 - (_BYTE *)v76;
      v41 = (v77 - (_BYTE *)v76) >> 2;
      v42 = v41 + 1;
      if ((unint64_t)(v41 + 1) >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v43 = v78 - (_BYTE *)v76;
      if ((v78 - (_BYTE *)v76) >> 1 > v42)
        v42 = v43 >> 1;
      v44 = (unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v42;
      if (v44)
        break;
      v45 = 0;
      v46 = (int *)(4 * v41);
      *(_DWORD *)(4 * v41) = v36;
      v38 = 4 * v41 + 4;
      if (v37 != v39)
        goto LABEL_67;
LABEL_73:
      v76 = v46;
      v77 = (char *)v38;
      v78 = &v45[4 * v44];
      if (v39)
        operator delete(v39);
LABEL_75:
      v77 = (char *)v38;
      if (!operations_research::sat::LinearConstraintBuilder::AddLiteralTerm(&v82, v36, 1)
        || v70 != v35
        && !operations_research::sat::LinearConstraintBuilder::AddLiteralTerm(v79, v36, v70 - v35))
      {
        v27 = 0;
        v56 = (char *)v76;
        if (!v76)
          goto LABEL_100;
        goto LABEL_99;
      }
      v33 += 12;
      if (v33 == v34)
        goto LABEL_80;
    }
    if (v44 >> 62)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v45 = (char *)operator new(4 * v44);
    v46 = (int *)&v45[4 * v41];
    *v46 = v36;
    v38 = (uint64_t)(v46 + 1);
    if (v37 == v39)
      goto LABEL_73;
LABEL_67:
    v47 = v37 - 4 - v39;
    if (v47 < 0x2C)
      goto LABEL_111;
    if ((unint64_t)(v37 - &v45[v40]) < 0x20)
      goto LABEL_111;
    v48 = (v47 >> 2) + 1;
    v49 = 4 * (v48 & 0x7FFFFFFFFFFFFFF8);
    v50 = &v37[-v49];
    v46 = (int *)((char *)v46 - v49);
    v51 = &v45[4 * v41 - 16];
    v52 = v37 - 16;
    v53 = v48 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v54 = *(_OWORD *)v52;
      *((_OWORD *)v51 - 1) = *((_OWORD *)v52 - 1);
      *(_OWORD *)v51 = v54;
      v51 -= 32;
      v52 -= 32;
      v53 -= 8;
    }
    while (v53);
    v37 = v50;
    if (v48 != (v48 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_111:
      do
      {
        v55 = *((_DWORD *)v37 - 1);
        v37 -= 4;
        *--v46 = v55;
      }
      while (v37 != v39);
    }
    goto LABEL_73;
  }
LABEL_80:
  operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v82, (uint64_t)&v71);
  v57 = v69;
  v58 = *(_QWORD *)(v69 + 8);
  if (v58 >= *(_QWORD *)(v69 + 16))
  {
    v59 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint>((void **)v69, (uint64_t)&v71);
    v60 = __p[0];
    *(_QWORD *)(v69 + 8) = v59;
    if (v60)
    {
      __p[1] = v60;
      operator delete(v60);
    }
  }
  else
  {
    *(_OWORD *)v58 = v71;
    *(_QWORD *)(v58 + 16) = 0;
    *(_QWORD *)(v58 + 24) = 0;
    *(_QWORD *)(v58 + 32) = 0;
    *(_QWORD *)(v58 + 40) = 0;
    *(_OWORD *)(v58 + 16) = *(_OWORD *)v72;
    *(_QWORD *)(v58 + 32) = v73;
    v72[0] = 0;
    v72[1] = 0;
    *(_QWORD *)(v58 + 48) = 0;
    *(_QWORD *)(v58 + 56) = 0;
    *(_OWORD *)(v58 + 40) = *(_OWORD *)__p;
    *(_QWORD *)(v58 + 56) = v75;
    v73 = 0;
    __p[0] = 0;
    __p[1] = 0;
    v75 = 0;
    *(_QWORD *)(v69 + 8) = v58 + 64;
  }
  if (v72[0])
  {
    v72[1] = v72[0];
    operator delete(v72[0]);
  }
  operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)v79, (uint64_t)&v71);
  v61 = *(_QWORD *)(v69 + 8);
  if (v61 >= *(_QWORD *)(v69 + 16))
  {
    v62 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint>((void **)v69, (uint64_t)&v71);
    v63 = __p[0];
    *(_QWORD *)(v69 + 8) = v62;
    if (v63)
    {
      __p[1] = v63;
      operator delete(v63);
    }
  }
  else
  {
    *(_OWORD *)v61 = v71;
    *(_QWORD *)(v61 + 16) = 0;
    *(_QWORD *)(v61 + 24) = 0;
    *(_QWORD *)(v61 + 32) = 0;
    *(_QWORD *)(v61 + 40) = 0;
    *(_OWORD *)(v61 + 16) = *(_OWORD *)v72;
    *(_QWORD *)(v61 + 32) = v73;
    v72[0] = 0;
    v72[1] = 0;
    *(_QWORD *)(v61 + 48) = 0;
    *(_QWORD *)(v61 + 56) = 0;
    *(_OWORD *)(v61 + 40) = *(_OWORD *)__p;
    *(_QWORD *)(v61 + 56) = v75;
    v73 = 0;
    __p[0] = 0;
    __p[1] = 0;
    v75 = 0;
    *(_QWORD *)(v69 + 8) = v61 + 64;
  }
  if (v72[0])
  {
    v72[1] = v72[0];
    operator delete(v72[0]);
  }
  v64 = *(_QWORD **)(v69 + 32);
  if ((unint64_t)v64 >= *(_QWORD *)(v69 + 40))
  {
    *(_QWORD *)(v69 + 32) = std::vector<std::vector<operations_research::sat::Literal>>::__push_back_slow_path<std::vector<operations_research::sat::Literal> const&>((char **)(v69 + 24), (uint64_t)&v76);
    v27 = 1;
    v56 = (char *)v76;
    if (!v76)
      goto LABEL_100;
    goto LABEL_99;
  }
  *v64 = 0;
  v64[1] = 0;
  v64[2] = 0;
  v65 = v76;
  v66 = v77 - (_BYTE *)v76;
  if (v77 != v76)
  {
    if (v66 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v67 = (char *)operator new(v77 - (_BYTE *)v76);
    *v64 = v67;
    v64[1] = v67;
    v68 = &v67[4 * (v66 >> 2)];
    v64[2] = v68;
    memcpy(v67, v65, v66);
    v64[1] = v68;
    v57 = v69;
  }
  *(_QWORD *)(v57 + 32) = v64 + 3;
  *(_QWORD *)(v57 + 32) = v64 + 3;
  v27 = 1;
  v56 = (char *)v76;
  if (v76)
  {
LABEL_99:
    v77 = v56;
    operator delete(v56);
  }
LABEL_100:
  if (v80[1])
  {
    *(void **)&v81 = v80[1];
    operator delete(v80[1]);
  }
  if (*((_QWORD *)&v84 + 1))
  {
    *(_QWORD *)&v85 = *((_QWORD *)&v84 + 1);
    operator delete(*((void **)&v84 + 1));
  }
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  return v27;
}

void sub_22DBA2C64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  uint64_t v35;
  void *v37;
  void *v38;
  void *v39;

  if (__p)
  {
    operator delete(__p);
    v37 = a27;
    if (!a27)
    {
LABEL_3:
      v38 = a34;
      if (!a34)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v37 = a27;
    if (!a27)
      goto LABEL_3;
  }
  operator delete(v37);
  v38 = a34;
  if (!a34)
  {
LABEL_4:
    v39 = *(void **)(v35 - 112);
    if (!v39)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(v38);
  v39 = *(void **)(v35 - 112);
  if (!v39)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  *(_QWORD *)(v35 - 104) = v39;
  operator delete(v39);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::AppendPartialGreaterThanEncodingRelaxation(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  BOOL v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD **v34;
  BOOL v35;
  char *v36;
  void *v37;
  unint64_t v38;
  int v39;
  char *v40;
  void *v41;
  int v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  BOOL v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  void **v51;
  uint64_t v52;
  void **v53;
  void **v54;
  unint64_t v55;
  char *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  void *__p[2];
  void *v61[2];
  uint64_t v62;
  void *v63[2];
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68[2];
  __int128 v69;
  _QWORD **v70;
  _QWORD *v71;
  uint64_t v72;

  v4 = (_QWORD *)(a2 + 32);
  v3 = *(_QWORD **)(a2 + 32);
  if (v3)
  {
    v7 = (_QWORD *)(a2 + 32);
    v8 = *(_QWORD **)(a2 + 32);
    do
    {
      v9 = v8[4];
      v10 = v9 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
      if (v9 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
        v11 = v8;
      else
        v11 = v8 + 1;
      if (v10)
        v7 = v8;
      v8 = (_QWORD *)*v11;
    }
    while (*v11);
    if (v7 == v4 || v7[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
      v12 = 0;
    else
      v12 = v7[5];
    v13 = (_QWORD *)(a2 + 32);
    do
    {
      v14 = v3[4];
      v15 = v14 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
      if (v14 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
        v16 = v3;
      else
        v16 = v3 + 1;
      if (v15)
        v13 = v3;
      v3 = (_QWORD *)*v16;
    }
    while (*v16);
    if (v13 != v4 && v13[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
    {
      if (v12)
      {
        v17 = v13[5];
        if (v17)
        {
          v18 = *(_QWORD *)(v17 + 32);
          if (a1 >= (int)(-1431655765 * ((unint64_t)(*(_QWORD *)(v17 + 40) - v18) >> 3)))
          {
            v71 = 0;
            v72 = 0;
            v70 = &v71;
          }
          else
          {
            v71 = 0;
            v72 = 0;
            v70 = &v71;
            std::map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,std::__tree_node<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,void *> *,long>>>(&v70, *(_QWORD **)(v18 + 24 * a1), (_QWORD *)(v18 + 24 * a1 + 8));
            if (v72)
            {
              v20 = *(_QWORD *)(*(_QWORD *)(v12 + 40) + 12 * a1);
              v21 = (_QWORD *)*v4;
              if (!*v4)
                goto LABEL_39;
              v22 = v4;
              do
              {
                v23 = v21[4];
                v24 = v23 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
                if (v23 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
                  v25 = v21;
                else
                  v25 = v21 + 1;
                if (v24)
                  v22 = v21;
                v21 = (_QWORD *)*v25;
              }
              while (*v25);
              if (v22 != v4
                && v22[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
              {
                v26 = v22[5];
              }
              else
              {
LABEL_39:
                v26 = 0;
              }
              v59 = v12;
              v58 = v17;
              v65 = v26;
              v66 = v20;
              v67 = 0x7FFFFFFFFFFFFFFELL;
              *(_OWORD *)v68 = 0u;
              v69 = 0u;
              operations_research::sat::LinearConstraintBuilder::AddTerm(&v65, a1, 1);
              v27 = v70;
              if (v70 != &v71)
              {
                v28 = 0xFFFFFFFFLL;
                do
                {
                  v29 = *(uint64_t *)((char *)v27 + 28);
                  if (v20 < v29
                    && (v30 = *((unsigned int *)v27 + 9),
                        (operations_research::sat::LinearConstraintBuilder::AddLiteralTerm(&v65, *((_DWORD *)v27 + 9), v20 - v29) & 1) != 0))
                  {
                    v20 = v29;
                    if ((_DWORD)v28 != -1)
                    {
                      v31 = operator new(8uLL);
                      __p[0] = v31;
                      *v31 = v30 | ((unint64_t)(v28 ^ 1) << 32);
                      __p[1] = v31 + 1;
                      v61[0] = v31 + 1;
                      v32 = *(_QWORD **)(a3 + 32);
                      if ((unint64_t)v32 >= *(_QWORD *)(a3 + 40))
                      {
                        v36 = std::vector<std::vector<operations_research::sat::CircuitPropagator::Arc>>::__push_back_slow_path<std::vector<operations_research::sat::CircuitPropagator::Arc>>((char **)(a3 + 24), (uint64_t)__p);
                        v37 = __p[0];
                        *(_QWORD *)(a3 + 32) = v36;
                        if (v37)
                        {
                          __p[1] = v37;
                          operator delete(v37);
                        }
                      }
                      else
                      {
                        *v32 = 0;
                        v32[1] = 0;
                        v32[2] = 0;
                        *(_OWORD *)v32 = *(_OWORD *)__p;
                        v32[2] = v61[0];
                        *(_QWORD *)(a3 + 32) = v32 + 3;
                      }
                    }
                  }
                  else
                  {
                    v30 = v28;
                  }
                  v33 = v27[1];
                  if (v33)
                  {
                    do
                    {
                      v34 = (_QWORD **)v33;
                      v33 = (_QWORD *)*v33;
                    }
                    while (v33);
                  }
                  else
                  {
                    do
                    {
                      v34 = (_QWORD **)v27[2];
                      v35 = *v34 == v27;
                      v27 = v34;
                    }
                    while (!v35);
                  }
                  v28 = v30;
                  v27 = v34;
                }
                while (v34 != &v71);
              }
              operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v65, (uint64_t)__p);
              v38 = *(_QWORD *)(a3 + 8);
              if (v38 >= *(_QWORD *)(a3 + 16))
              {
                v40 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint>((void **)a3, (uint64_t)__p);
                v41 = v63[0];
                *(_QWORD *)(a3 + 8) = v40;
                v39 = a1;
                if (v41)
                {
                  v63[1] = v41;
                  operator delete(v41);
                }
              }
              else
              {
                *(_OWORD *)v38 = *(_OWORD *)__p;
                *(_QWORD *)(v38 + 16) = 0;
                *(_QWORD *)(v38 + 24) = 0;
                *(_QWORD *)(v38 + 32) = 0;
                *(_QWORD *)(v38 + 40) = 0;
                *(_OWORD *)(v38 + 16) = *(_OWORD *)v61;
                *(_QWORD *)(v38 + 32) = v62;
                v61[0] = 0;
                v61[1] = 0;
                *(_QWORD *)(v38 + 48) = 0;
                *(_QWORD *)(v38 + 56) = 0;
                *(_OWORD *)(v38 + 40) = *(_OWORD *)v63;
                *(_QWORD *)(v38 + 56) = v64;
                v62 = 0;
                v63[0] = 0;
                v63[1] = 0;
                v64 = 0;
                *(_QWORD *)(a3 + 8) = v38 + 64;
                v39 = a1;
              }
              if (v61[0])
              {
                v61[1] = v61[0];
                operator delete(v61[0]);
              }
              if (v68[1])
              {
                *(void **)&v69 = v68[1];
                operator delete(v68[1]);
              }
              v42 = a1 ^ 1;
              v43 = *(_QWORD *)(*(_QWORD *)(v59 + 40) + 12 * (a1 ^ 1));
              v44 = (_QWORD *)*v4;
              if (!*v4)
                goto LABEL_77;
              v45 = v4;
              do
              {
                v46 = v44[4];
                v47 = v46 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
                if (v46 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
                  v48 = v44;
                else
                  v48 = v44 + 1;
                if (v47)
                  v45 = v44;
                v44 = (_QWORD *)*v48;
              }
              while (*v48);
              if (v45 != v4
                && v45[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
              {
                v49 = v45[5];
              }
              else
              {
LABEL_77:
                v49 = 0;
              }
              v65 = v49;
              v66 = v43;
              v67 = 0x7FFFFFFFFFFFFFFELL;
              *(_OWORD *)v68 = 0u;
              v69 = 0u;
              operations_research::sat::LinearConstraintBuilder::AddTerm(&v65, v39, -1);
              v50 = *(_QWORD *)(v58 + 32);
              if (v42 >= (int)(-1431655765 * ((unint64_t)(*(_QWORD *)(v58 + 40) - v50) >> 3)))
              {
                __p[1] = 0;
                v61[0] = 0;
                __p[0] = &__p[1];
              }
              else
              {
                __p[1] = 0;
                v61[0] = 0;
                __p[0] = &__p[1];
                std::map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,std::__tree_node<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,void *> *,long>>>(__p, *(_QWORD **)(v50 + 24 * v42), (_QWORD *)(v50 + 24 * v42 + 8));
                v51 = (void **)__p[0];
                if (__p[0] != &__p[1])
                {
                  do
                  {
                    v52 = *(uint64_t *)((char *)v51 + 28);
                    if (v43 < v52
                      && operations_research::sat::LinearConstraintBuilder::AddLiteralTerm(&v65, *((_DWORD *)v51 + 9), v43 - v52))
                    {
                      v43 = v52;
                    }
                    v53 = (void **)v51[1];
                    if (v53)
                    {
                      do
                      {
                        v54 = v53;
                        v53 = (void **)*v53;
                      }
                      while (v53);
                    }
                    else
                    {
                      do
                      {
                        v54 = (void **)v51[2];
                        v35 = *v54 == v51;
                        v51 = v54;
                      }
                      while (!v35);
                    }
                    v51 = v54;
                  }
                  while (v54 != &__p[1]);
                }
              }
              std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)__p, (_QWORD *)__p[1]);
              operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v65, (uint64_t)__p);
              v55 = *(_QWORD *)(a3 + 8);
              if (v55 >= *(_QWORD *)(a3 + 16))
              {
                v56 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint>((void **)a3, (uint64_t)__p);
                v57 = v63[0];
                *(_QWORD *)(a3 + 8) = v56;
                if (v57)
                {
                  v63[1] = v57;
                  operator delete(v57);
                }
              }
              else
              {
                *(_OWORD *)v55 = *(_OWORD *)__p;
                *(_QWORD *)(v55 + 16) = 0;
                *(_QWORD *)(v55 + 24) = 0;
                *(_QWORD *)(v55 + 32) = 0;
                *(_QWORD *)(v55 + 40) = 0;
                *(_OWORD *)(v55 + 16) = *(_OWORD *)v61;
                *(_QWORD *)(v55 + 32) = v62;
                v61[0] = 0;
                v61[1] = 0;
                *(_QWORD *)(v55 + 48) = 0;
                *(_QWORD *)(v55 + 56) = 0;
                *(_OWORD *)(v55 + 40) = *(_OWORD *)v63;
                *(_QWORD *)(v55 + 56) = v64;
                v62 = 0;
                v63[0] = 0;
                v63[1] = 0;
                v64 = 0;
                *(_QWORD *)(a3 + 8) = v55 + 64;
              }
              if (v61[0])
              {
                v61[1] = v61[0];
                operator delete(v61[0]);
              }
              if (v68[1])
              {
                *(void **)&v69 = v68[1];
                operator delete(v68[1]);
              }
            }
          }
          std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v70, v71);
        }
      }
    }
  }
}

void sub_22DBA32B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  uint64_t v27;

  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)&a13);
  if (!__p)
  {
    std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v27 - 112, *(_QWORD **)(v27 - 104));
    _Unwind_Resume(a1);
  }
  a27 = (uint64_t)__p;
  operator delete(__p);
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v27 - 112, *(_QWORD **)(v27 - 104));
  _Unwind_Resume(a1);
}

void operations_research::sat::TryToLinearizeConstraint(operations_research::sat *this, const operations_research::sat::CpModelProto *a2, const operations_research::sat::ConstraintProto *a3, operations_research::sat::Model *a4, uint64_t a5, operations_research::sat::LinearRelaxation *a6)
{
  _QWORD *v11;
  operations_research::sat::LinearRelaxation *v12;
  operations_research::sat::LinearRelaxation *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  BOOL v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  _QWORD *v39;
  char *v40;
  char *v41;
  unint64_t v42;
  BOOL v43;
  _QWORD *v44;
  void *v45;
  operations_research::sat::IntegerTrail *v46;
  uint64_t *v47;
  uint64_t (***v48)();
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int *v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unsigned int v60;
  _QWORD *v61;
  _QWORD *v62;
  char *v63;
  void *v64;
  _DWORD *v65;
  int v66;
  const operations_research::sat::ConstraintProto *v67;
  int v68;
  uint64_t v69;
  _DWORD *v70;
  uint64_t *v71;
  int v72;
  int v73;
  unsigned int v74;
  int v75;
  int v76;
  uint64_t (***v77)();
  uint64_t v78;
  uint64_t *v79;
  uint64_t **i;
  uint64_t **v81;
  int v82;
  _DWORD *v83;
  uint64_t *v84;
  uint64_t *v85;
  unsigned int *v86;
  uint64_t v87;
  unsigned int *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _BYTE *v93;
  unsigned int *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int *v98;
  _OWORD *v99;
  unsigned int *v100;
  uint64_t v101;
  __int128 v102;
  unsigned int v103;
  uint64_t *v104;
  uint64_t **j;
  uint64_t **v106;
  int v107;
  _DWORD *v108;
  uint64_t *v109;
  uint64_t *v110;
  unsigned int *v111;
  unsigned int *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  _BYTE *v117;
  unsigned int *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int *v123;
  _OWORD *v124;
  unsigned int *v125;
  uint64_t v126;
  __int128 v127;
  unsigned int v128;
  _QWORD *v129;
  uint64_t *v130;
  char **v131;
  char **v132;
  _QWORD *v133;
  _QWORD *v134;
  unint64_t v135;
  BOOL v136;
  _QWORD *v137;
  void *v138;
  int *v139;
  int *k;
  char *v141;
  _BYTE *v142;
  _BYTE *v143;
  int64_t v144;
  char *v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  void *v150;
  uint64_t *v151;
  uint64_t **v152;
  BOOL v153;
  _DWORD *v154;
  int v155;
  int v156;
  int v157;
  uint64_t v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  operations_research::sat::IntegerTrail *v165;
  int v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  _QWORD *v173;
  unint64_t v174;
  BOOL v175;
  _QWORD *v176;
  void *v177;
  unint64_t v178;
  uint64_t v179;
  int v180;
  unsigned int v181;
  int v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  int *v187;
  int *v188;
  void *v189;
  int v190;
  int v191;
  int v192;
  _QWORD *v193;
  char *v194;
  int64_t v195;
  uint64_t v196;
  unint64_t v197;
  int64_t v198;
  unint64_t v199;
  _BYTE *v200;
  _DWORD *v201;
  unint64_t v202;
  char *v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  _OWORD *v207;
  char *v208;
  uint64_t v209;
  __int128 v210;
  _DWORD *v211;
  _DWORD *v212;
  int v213;
  int v214;
  _QWORD *v215;
  char *v216;
  unint64_t v217;
  BOOL v218;
  _QWORD *v219;
  uint64_t (***v220)();
  uint64_t v221;
  unint64_t v222;
  _QWORD *v223;
  const void *v224;
  int64_t v225;
  char *v226;
  char *v227;
  char *v228;
  char *v229;
  void *v230;
  void *v231;
  int *v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD *v235;
  _QWORD *v236;
  unint64_t v237;
  BOOL v238;
  _QWORD *v239;
  void *v240;
  uint64_t v241;
  int *v242;
  uint64_t v243;
  int v244;
  int v245;
  int *v246;
  uint64_t v247;
  int v248;
  int v249;
  int *v250;
  uint64_t v251;
  int v252;
  int v253;
  char *v254;
  void *v255;
  int *v256;
  _QWORD *v257;
  _QWORD *v258;
  unint64_t v259;
  BOOL v260;
  _QWORD *v261;
  void *v262;
  int *v263;
  int *v264;
  char *v265;
  uint64_t v266;
  _BYTE *v267;
  _BYTE *v268;
  int64_t v269;
  char *v270;
  char *v271;
  char *v272;
  char *v273;
  char *v274;
  void *v275;
  uint64_t *v276;
  uint64_t **v277;
  _QWORD *v278;
  _QWORD *v279;
  _QWORD *v280;
  _QWORD *v281;
  _QWORD *v282;
  _QWORD *v283;
  const operations_research::sat::CpModelProto *v284;
  char **v285;
  uint64_t v286;
  _QWORD *v287;
  uint64_t v288;
  uint64_t v289;
  _QWORD *v290;
  _QWORD *v291;
  const operations_research::sat::ConstraintProto *v292;
  uint64_t **v293;
  uint64_t *v294;
  uint64_t v295;
  uint64_t *v296;
  uint64_t *v297;
  uint64_t v298;
  void *__p[2];
  void *v300[2];
  uint64_t v301;
  void *v302[2];
  uint64_t v303;
  void *v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  uint64_t (**v308)();
  unsigned int v309[4];
  uint64_t (***v310)();
  uint64_t (**v311)();
  int v312;
  uint64_t (***v313)();
  uint64_t (**v314)();
  unsigned int v315;
  uint64_t (***v316)();
  uint64_t (**v317)();
  unsigned int v318[4];
  uint64_t (***v319)();
  uint64_t v320;

  v320 = *MEMORY[0x24BDAC8D0];
  LODWORD(__p[0]) = *((_DWORD *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)a3)
                    + 76);
  LODWORD(v304) = 0;
  if (LODWORD(__p[0]))
  {
    v304 = (void *)google::MakeCheckOpString<int,int>((int)__p, (int)&v304, "model->GetOrCreate<SatSolver>()->CurrentDecisionLevel() == 0");
    if (v304)
    {
      google::LogMessageFatal::LogMessageFatal((unint64_t *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/linear_relaxation.cc", 318, (uint64_t **)&v304);
      google::LogMessage::stream((google::LogMessage *)__p);
      goto LABEL_395;
    }
  }
  v292 = a3;
  v11 = (_QWORD *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a3);
  v14 = v11;
  switch(*((_DWORD *)a2 + 15))
  {
    case 3:
      if ((int)a4 < 2)
        return;
      v15 = (_QWORD *)*((_QWORD *)a3 + 4);
      if (!v15)
        goto LABEL_15;
      v16 = (_QWORD *)((char *)a3 + 32);
      do
      {
        v17 = v15[4];
        v18 = v17 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
        if (v17 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
          v19 = v15;
        else
          v19 = v15 + 1;
        if (v18)
          v16 = v15;
        v15 = (_QWORD *)*v19;
      }
      while (*v19);
      if (v16 != (_QWORD *)((char *)a3 + 32)
        && v16[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
      {
        v20 = (void *)v16[5];
      }
      else
      {
LABEL_15:
        v20 = 0;
      }
      v304 = v20;
      v305 = xmmword_22DCF5A40;
      v306 = 0u;
      v307 = 0u;
      v21 = *((int *)a2 + 4);
      if (!(_DWORD)v21)
        goto LABEL_23;
      v22 = (int *)*((_QWORD *)a2 + 3);
      v23 = 4 * v21;
      do
      {
        v24 = *v22;
        v25 = ~*v22;
        if (*v22 <= v25)
          v24 = ~v24;
        if ((operations_research::sat::LinearConstraintBuilder::AddLiteralTerm(&v304, __PAIR64__(*(_DWORD *)(v14[6] + 4 * v24), v25) >> 31, 1) & 1) == 0)
        {
          google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/linear_relaxation.cc", 326);
          v279 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v279, (uint64_t)"Check failed: lc.AddLiteralTerm(mapping->Literal(NegatedRef(enforcement_ref)), IntegerValue(1)) ", 96);
          goto LABEL_395;
        }
        ++v22;
        v23 -= 4;
      }
      while (v23);
      if (*((_DWORD *)a2 + 15) == 3)
      {
LABEL_23:
        v26 = (uint64_t *)*((_QWORD *)a2 + 6);
        v27 = *((int *)v26 + 4);
        if (!(_DWORD)v27)
        {
LABEL_340:
          operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v304, (uint64_t)__p);
          v178 = *(_QWORD *)(a5 + 8);
          if (v178 < *(_QWORD *)(a5 + 16))
          {
LABEL_341:
            *(_OWORD *)v178 = *(_OWORD *)__p;
            *(_QWORD *)(v178 + 16) = 0;
            *(_QWORD *)(v178 + 24) = 0;
            *(_QWORD *)(v178 + 32) = 0;
            *(_QWORD *)(v178 + 40) = 0;
            *(_OWORD *)(v178 + 16) = *(_OWORD *)v300;
            *(_QWORD *)(v178 + 32) = v301;
            v300[0] = 0;
            v300[1] = 0;
            *(_QWORD *)(v178 + 48) = 0;
            *(_QWORD *)(v178 + 56) = 0;
            *(_OWORD *)(v178 + 40) = *(_OWORD *)v302;
            *(_QWORD *)(v178 + 56) = v303;
            v301 = 0;
            v302[0] = 0;
            v302[1] = 0;
            v303 = 0;
            *(_QWORD *)(a5 + 8) = v178 + 64;
            goto LABEL_344;
          }
LABEL_342:
          v254 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint>((void **)a5, (uint64_t)__p);
          v255 = v302[0];
          *(_QWORD *)(a5 + 8) = v254;
          if (v255)
          {
            v302[1] = v255;
            operator delete(v255);
          }
LABEL_344:
          if (v300[0])
          {
            v300[1] = v300[0];
            operator delete(v300[0]);
          }
          v232 = (int *)*((_QWORD *)&v306 + 1);
          if (*((_QWORD *)&v306 + 1))
          {
            *(_QWORD *)&v307 = *((_QWORD *)&v306 + 1);
LABEL_348:
            operator delete(v232);
          }
          return;
        }
      }
      else
      {
        v26 = &operations_research::sat::_BoolArgumentProto_default_instance_;
        v27 = (int)qword_25408AA70;
        if (!(_DWORD)qword_25408AA70)
          goto LABEL_340;
      }
      v250 = (int *)v26[3];
      v251 = 4 * v27;
      while (1)
      {
        v252 = *v250;
        v253 = ~*v250 <= *v250 ? *v250 : ~v252;
        if ((operations_research::sat::LinearConstraintBuilder::AddLiteralTerm(&v304, __PAIR64__(*(_DWORD *)(v14[6] + 4 * v253), v252) >> 31, 1) & 1) == 0)break;
        ++v250;
        v251 -= 4;
        if (!v251)
          goto LABEL_340;
      }
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/linear_relaxation.cc", 329);
      v281 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v281, (uint64_t)"Check failed: lc.AddLiteralTerm(mapping->Literal(ref), IntegerValue(1)) ", 72);
      goto LABEL_395;
    case 4:
      if ((int)a4 < 2)
        return;
      v50 = *((_DWORD *)a2 + 4);
      if (!v50)
        return;
      if (v50 == 1)
      {
        v51 = *((_QWORD *)a2 + 6);
        v52 = *(int *)(v51 + 16);
        if ((_DWORD)v52)
        {
          v53 = *(int **)(v51 + 24);
          v54 = **((_DWORD **)a2 + 3);
          if (~v54 <= v54)
            v55 = **((_DWORD **)a2 + 3);
          else
            v55 = ~v54;
          v56 = (__PAIR64__(*(_DWORD *)(v11[6] + 4 * v55), v54) >> 31);
          v57 = 4 * v52;
          do
          {
            v58 = *v53;
            if (~*v53 <= *v53)
              v59 = *v53;
            else
              v59 = ~v58;
            v60 = *(_DWORD *)(v14[6] + 4 * v59);
            v61 = operator new(8uLL);
            __p[0] = v61;
            *v61 = v56 | ((unint64_t)((__PAIR64__(v60, v58) >> 31) ^ 1) << 32);
            __p[1] = v61 + 1;
            v300[0] = v61 + 1;
            v62 = *(_QWORD **)(a5 + 32);
            if ((unint64_t)v62 < *(_QWORD *)(a5 + 40))
            {
              *v62 = 0;
              v62[1] = 0;
              v62[2] = 0;
              *(_OWORD *)v62 = *(_OWORD *)__p;
              v62[2] = v300[0];
              *(_QWORD *)(a5 + 32) = v62 + 3;
            }
            else
            {
              v63 = std::vector<std::vector<operations_research::sat::CircuitPropagator::Arc>>::__push_back_slow_path<std::vector<operations_research::sat::CircuitPropagator::Arc>>((char **)(a5 + 24), (uint64_t)__p);
              v64 = __p[0];
              *(_QWORD *)(a5 + 32) = v63;
              if (v64)
              {
                __p[1] = v64;
                operator delete(v64);
              }
            }
            ++v53;
            v57 -= 4;
          }
          while (v57);
        }
        return;
      }
      v233 = *((_QWORD *)a2 + 6);
      v234 = *(int *)(v233 + 16);
      v235 = (_QWORD *)*((_QWORD *)a3 + 4);
      if (!v235)
        goto LABEL_316;
      v236 = (_QWORD *)((char *)a3 + 32);
      do
      {
        v237 = v235[4];
        v238 = v237 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
        if (v237 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
          v239 = v235;
        else
          v239 = v235 + 1;
        if (v238)
          v236 = v235;
        v235 = (_QWORD *)*v239;
      }
      while (*v239);
      if (v236 != (_QWORD *)((char *)a3 + 32)
        && v236[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
      {
        v240 = (void *)v236[5];
      }
      else
      {
LABEL_316:
        v240 = 0;
      }
      v304 = v240;
      *(_QWORD *)&v305 = v234;
      *((_QWORD *)&v305 + 1) = 0x7FFFFFFFFFFFFFFELL;
      v306 = 0u;
      v307 = 0u;
      v241 = *(int *)(v233 + 16);
      if (!(_DWORD)v241)
        goto LABEL_325;
      v242 = *(int **)(v233 + 24);
      v243 = 4 * v241;
      do
      {
        v244 = *v242;
        if (~*v242 <= *v242)
          v245 = *v242;
        else
          v245 = ~v244;
        if ((operations_research::sat::LinearConstraintBuilder::AddLiteralTerm(&v304, __PAIR64__(*(_DWORD *)(v14[6] + 4 * v245), v244) >> 31, 1) & 1) == 0)
        {
          google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/linear_relaxation.cc", 354);
          v282 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v282, (uint64_t)"Check failed: lc.AddLiteralTerm(mapping->Literal(ref), IntegerValue(1)) ", 72);
          goto LABEL_395;
        }
        ++v242;
        v243 -= 4;
      }
      while (v243);
      v50 = *((_DWORD *)a2 + 4);
LABEL_325:
      if (!v50)
      {
LABEL_331:
        operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v304, (uint64_t)__p);
        v178 = *(_QWORD *)(a5 + 8);
        if (v178 < *(_QWORD *)(a5 + 16))
          goto LABEL_341;
        goto LABEL_342;
      }
      v246 = (int *)*((_QWORD *)a2 + 3);
      v247 = 4 * v50;
      while (1)
      {
        v248 = *v246;
        v249 = ~*v246;
        if (*v246 <= v249)
          v248 = ~v248;
        if ((operations_research::sat::LinearConstraintBuilder::AddLiteralTerm(&v304, __PAIR64__(*(_DWORD *)(v14[6] + 4 * v248), v249) >> 31, v234) & 1) == 0)break;
        ++v246;
        v247 -= 4;
        if (!v247)
          goto LABEL_331;
      }
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/linear_relaxation.cc", 358);
      v283 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v283, (uint64_t)"Check failed: lc.AddLiteralTerm(mapping->Literal(NegatedRef(enforcement_ref)), IntegerValue(num_literals)) ", 107);
      goto LABEL_395;
    case 9:
      if (*((_DWORD *)a2 + 4))
        return;
      v28 = *((_QWORD *)a2 + 6);
      v29 = *(_DWORD *)(v28 + 36);
      if (~v29 <= v29)
        v30 = *(_DWORD *)(v28 + 36);
      else
        v30 = ~v29;
      v31 = *(_DWORD *)(*v11 + 4 * v30);
      operations_research::sat::CpModelMapping::Integers<google::protobuf::RepeatedField<int>>(v11, (int *)(v28 + 16), (int **)__p);
      operations_research::sat::AppendMaxRelaxation(v31 ^ (v29 >> 31), (int **)__p, (int)a4, (uint64_t)v292, a5);
      goto LABEL_303;
    case 0xA:
      if (*((_DWORD *)a2 + 4))
        return;
      v179 = *((_QWORD *)a2 + 6);
      v180 = *(_DWORD *)(v179 + 36);
      v181 = ~v180;
      if (~v180 > v180)
        v180 = ~v180;
      v182 = *(_DWORD *)(*v11 + 4 * v180);
      operations_research::sat::CpModelMapping::Integers<google::protobuf::RepeatedField<int>>(v11, (int *)(v179 + 16), (int **)&v304);
      operations_research::sat::NegationOf((int8x16_t **)&v304, (int8x16_t **)__p);
      v183 = v182 ^ (v181 >> 31);
      if (v304)
      {
        *(_QWORD *)&v305 = v304;
        operator delete(v304);
      }
      operations_research::sat::AppendMaxRelaxation(v183, (int **)__p, (int)a4, (uint64_t)v292, a5);
      goto LABEL_303;
    case 0xC:
      operations_research::sat::AppendLinearConstraintRelaxation((uint64_t **)a2, a4, (uint64_t)a3, (const operations_research::sat::Model *)a5, v12);
      return;
    case 0xE:
      v32 = (int *)*((_QWORD *)a2 + 6);
      v34 = v32[9];
      v33 = v32[10];
      if (~v34 <= v34)
        v35 = v32[9];
      else
        v35 = ~v34;
      v36 = *(_DWORD *)(*v11 + 4 * v35);
      if (~v33 <= v33)
        v37 = v32[10];
      else
        v37 = ~v33;
      v38 = *(_DWORD *)(*v11 + 4 * v37);
      operations_research::sat::CpModelMapping::Integers<google::protobuf::RepeatedField<int>>(v11, v32 + 4, (int **)&v296);
      v40 = (char *)a3 + 32;
      v39 = (_QWORD *)*((_QWORD *)a3 + 4);
      if (!v39)
        goto LABEL_47;
      v41 = (char *)a3 + 32;
      do
      {
        v42 = v39[4];
        v43 = v42 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
        if (v42 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
          v44 = v39;
        else
          v44 = v39 + 1;
        if (v43)
          v41 = (char *)v39;
        v39 = (_QWORD *)*v44;
      }
      while (*v44);
      if (v41 != v40
        && *((_QWORD *)v41 + 4) <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
      {
        v45 = (void *)*((_QWORD *)v41 + 5);
      }
      else
      {
LABEL_47:
        v45 = 0;
      }
      v304 = v45;
      v305 = 0u;
      v306 = 0u;
      v307 = 0u;
      operations_research::sat::LinearConstraintBuilder::AddTerm(&v304, v38 ^ (v33 >> 31), -1);
      v46 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)a3);
      v314 = &off_24F980458;
      v315 = v36 ^ (v34 >> 31);
      v316 = &v314;
      v47 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)a3);
      if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v47, v315))
        operations_research::sat::IntegerEncoder::FullyEncodeVariable((uint64_t)v47, v315);
      operations_research::sat::IntegerEncoder::FullDomainEncoding(v47, v315, (char **)__p);
      v48 = v316;
      if (v316 == &v314)
      {
        v49 = 4;
        v48 = &v314;
      }
      else
      {
        if (!v316)
          goto LABEL_262;
        v49 = 5;
      }
      (*v48)[v49]();
LABEL_262:
      v212 = __p[0];
      v211 = __p[1];
      if (__p[0] == __p[1])
        goto LABEL_280;
      while (1)
      {
        v213 = *((_DWORD *)v296 + *(_QWORD *)v212);
        v214 = v212[2];
        v311 = &off_24F983188;
        v312 = v213;
        v313 = &v311;
        v215 = *(_QWORD **)v40;
        v216 = v40;
        do
        {
          v217 = v215[4];
          v218 = v217 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
          if (v217 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
            v219 = v215;
          else
            v219 = v215 + 1;
          if (v218)
            v216 = (char *)v215;
          v215 = (_QWORD *)*v219;
        }
        while (*v219);
        if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v216 + 5) + 40) + 12 * v213)
           + *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v216 + 5) + 40) + 12 * (v213 ^ 1)))
        {
          v231 = __p[0];
          if (__p[0])
          {
            __p[1] = __p[0];
LABEL_295:
            operator delete(v231);
          }
LABEL_296:
          if (*((_QWORD *)&v306 + 1))
          {
            *(_QWORD *)&v307 = *((_QWORD *)&v306 + 1);
            operator delete(*((void **)&v306 + 1));
          }
          v232 = (int *)v296;
          if (v296)
          {
            v297 = v296;
            goto LABEL_348;
          }
          return;
        }
        v308 = &off_24F9849D8;
        v309[0] = v214;
        v310 = &v308;
        operations_research::sat::NewIntegerVariableFromLiteral(operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}::operator()(v309, (uint64_t)v292);
        v220 = v310;
        if (v310 == &v308)
          break;
        if (v310)
        {
          v221 = 5;
LABEL_276:
          (*v220)[v221]();
        }
        if ((operations_research::sat::LinearConstraintBuilder::AddLiteralTerm(&v304, v214, *(_QWORD *)(*((_QWORD *)v46 + 5) + 12 * v213)) & 1) == 0)
        {
          google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v293, (google::glog_internal_namespace_ *)"./ortools/sat/linear_relaxation.cc", 444);
          v280 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v293);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v280, (uint64_t)"Check failed: constraint.AddLiteralTerm(literal_value.literal, integer_trail->LowerBound(var)) ", 95);
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v293);
        }
        v212 += 3;
        if (v212 == v211)
        {
          v212 = __p[0];
LABEL_280:
          if (v212)
          {
            __p[1] = v212;
            operator delete(v212);
          }
          operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v304, (uint64_t)__p);
          v222 = *(_QWORD *)(a5 + 8);
          if (v222 >= *(_QWORD *)(a5 + 16))
          {
            v229 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint>((void **)a5, (uint64_t)__p);
            v230 = v302[0];
            *(_QWORD *)(a5 + 8) = v229;
            if (v230)
            {
              v302[1] = v230;
              operator delete(v230);
            }
          }
          else
          {
            *(_OWORD *)v222 = *(_OWORD *)__p;
            *(_QWORD *)(v222 + 16) = 0;
            *(_QWORD *)(v222 + 24) = 0;
            *(_QWORD *)(v222 + 32) = 0;
            *(_QWORD *)(v222 + 40) = 0;
            *(_OWORD *)(v222 + 16) = *(_OWORD *)v300;
            *(_QWORD *)(v222 + 32) = v301;
            v300[0] = 0;
            v300[1] = 0;
            *(_QWORD *)(v222 + 48) = 0;
            *(_QWORD *)(v222 + 56) = 0;
            *(_OWORD *)(v222 + 40) = *(_OWORD *)v302;
            *(_QWORD *)(v222 + 56) = v303;
            v301 = 0;
            v302[0] = 0;
            v302[1] = 0;
            v303 = 0;
            *(_QWORD *)(a5 + 8) = v222 + 64;
          }
          v231 = v300[0];
          if (v300[0])
          {
            v300[1] = v300[0];
            goto LABEL_295;
          }
          goto LABEL_296;
        }
      }
      v220 = &v308;
      v221 = 4;
      goto LABEL_276;
    case 0xF:
      if (*((_DWORD *)a2 + 4))
        return;
      v65 = (_DWORD *)*((_QWORD *)a2 + 6);
      v66 = v65[4];
      LODWORD(__p[0]) = v65[16];
      LODWORD(v296) = v66;
      v284 = a2;
      v286 = LODWORD(__p[0]);
      if (LODWORD(__p[0]) == v66)
        goto LABEL_71;
      v304 = (void *)google::MakeCheckOpString<int,int>((int)__p, (int)&v296, "num_arcs == ct.circuit().tails_size()");
      if (v304)
      {
        google::LogMessageFatal::LogMessageFatal((unint64_t *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/linear_relaxation.cc", 391, (uint64_t **)&v304);
        google::LogMessage::stream((google::LogMessage *)__p);
LABEL_395:
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)__p);
      }
      if (*((_DWORD *)a2 + 15) == 15)
      {
        v65 = (_DWORD *)*((_QWORD *)a2 + 6);
LABEL_71:
        v67 = a3;
        v68 = v65[10];
        LODWORD(__p[0]) = v286;
        LODWORD(v296) = v68;
        if ((_DWORD)v286 == v68)
          goto LABEL_72;
      }
      else
      {
        v67 = a3;
        LODWORD(__p[0]) = v286;
        LODWORD(v296) = qword_25408ADA0;
        if ((_DWORD)v286 == (_DWORD)qword_25408ADA0)
          goto LABEL_72;
      }
      v304 = (void *)google::MakeCheckOpString<int,int>((int)__p, (int)&v296, "num_arcs == ct.circuit().heads_size()");
      v67 = a3;
      if (v304)
      {
        google::LogMessageFatal::LogMessageFatal((unint64_t *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/linear_relaxation.cc", 392, (uint64_t **)&v304);
        google::LogMessage::stream((google::LogMessage *)__p);
        goto LABEL_395;
      }
LABEL_72:
      v297 = 0;
      v298 = 0;
      v295 = 0;
      v296 = (uint64_t *)&v297;
      v293 = &v294;
      v294 = 0;
      if ((int)v286 <= 0)
      {
        v129 = (_QWORD *)((char *)v67 + 32);
        v131 = (char **)(a5 + 32);
        v291 = (_QWORD *)(a5 + 40);
        v132 = (char **)(a5 + 8);
        v285 = (char **)(a5 + 24);
        v287 = (_QWORD *)(a5 + 16);
        goto LABEL_351;
      }
      v69 = 0;
      v288 = a5;
      v290 = v14;
LABEL_75:
      v71 = &operations_research::sat::_CircuitConstraintProto_default_instance_;
      if (*((_DWORD *)a2 + 15) == 15)
        v71 = (uint64_t *)*((_QWORD *)a2 + 6);
      v72 = *(_DWORD *)(v71[9] + 4 * v69);
      if (~v72 <= v72)
        v73 = *(_DWORD *)(v71[9] + 4 * v69);
      else
        v73 = ~v72;
      v74 = __PAIR64__(*(_DWORD *)(v14[6] + 4 * v73), v72) >> 31;
      v75 = *(_DWORD *)(v71[3] + 4 * v69);
      v76 = *(_DWORD *)(v71[6] + 4 * v69);
      v317 = &off_24F9849D8;
      v318[0] = v74;
      v319 = &v317;
      operations_research::sat::NewIntegerVariableFromLiteral(operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}::operator()(v318, (uint64_t)v67);
      v77 = v319;
      if (v319 == &v317)
      {
        v77 = &v317;
        v78 = 4;
      }
      else
      {
        if (!v319)
        {
LABEL_85:
          v79 = v294;
          for (i = &v294; ; v79 = *i)
          {
            v81 = i;
            if (!v79)
              goto LABEL_92;
            while (1)
            {
              i = (uint64_t **)v79;
              v82 = *((_DWORD *)v79 + 8);
              if (v75 < v82)
                break;
              if (v82 >= v75)
              {
                v83 = i;
                v86 = (unsigned int *)i[6];
                v85 = i[7];
                if (v86 < (unsigned int *)v85)
                  goto LABEL_95;
                goto LABEL_97;
              }
              v79 = i[1];
              if (!v79)
              {
                v81 = i + 1;
LABEL_92:
                v83 = operator new(0x40uLL);
                v83[8] = v75;
                *((_QWORD *)v83 + 6) = 0;
                *((_QWORD *)v83 + 7) = 0;
                *((_QWORD *)v83 + 5) = 0;
                *(_QWORD *)v83 = 0;
                *((_QWORD *)v83 + 1) = 0;
                *((_QWORD *)v83 + 2) = i;
                *v81 = (uint64_t *)v83;
                v84 = (uint64_t *)v83;
                if (*v293)
                {
                  v293 = (uint64_t **)*v293;
                  v84 = *v81;
                }
                std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v294, v84);
                ++v295;
                v86 = (unsigned int *)*((_QWORD *)v83 + 6);
                v85 = (uint64_t *)*((_QWORD *)v83 + 7);
                if (v86 < (unsigned int *)v85)
                {
LABEL_95:
                  *v86 = v74;
                  v87 = (uint64_t)(v86 + 1);
LABEL_116:
                  *((_QWORD *)v83 + 6) = v87;
                  v104 = v297;
                  for (j = &v297; ; v104 = *j)
                  {
                    v106 = j;
                    if (!v104)
                      goto LABEL_123;
                    while (1)
                    {
                      j = (uint64_t **)v104;
                      v107 = *((_DWORD *)v104 + 8);
                      if (v76 < v107)
                        break;
                      if (v107 >= v76)
                      {
                        v108 = j;
                        v14 = v290;
                        v111 = (unsigned int *)j[6];
                        v110 = j[7];
                        if (v111 >= (unsigned int *)v110)
                          goto LABEL_128;
                        goto LABEL_74;
                      }
                      v104 = j[1];
                      if (!v104)
                      {
                        v106 = j + 1;
LABEL_123:
                        v108 = operator new(0x40uLL);
                        v108[8] = v76;
                        *((_QWORD *)v108 + 6) = 0;
                        *((_QWORD *)v108 + 7) = 0;
                        *((_QWORD *)v108 + 5) = 0;
                        *(_QWORD *)v108 = 0;
                        *((_QWORD *)v108 + 1) = 0;
                        *((_QWORD *)v108 + 2) = j;
                        *v106 = (uint64_t *)v108;
                        v109 = (uint64_t *)v108;
                        if (*v296)
                        {
                          v296 = (uint64_t *)*v296;
                          v109 = *v106;
                        }
                        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v297, v109);
                        ++v298;
                        v14 = v290;
                        v111 = (unsigned int *)*((_QWORD *)v108 + 6);
                        v110 = (uint64_t *)*((_QWORD *)v108 + 7);
                        if (v111 >= (unsigned int *)v110)
                        {
LABEL_128:
                          v112 = (unsigned int *)*((_QWORD *)v108 + 5);
                          v113 = v111 - v112;
                          v114 = v113 + 1;
                          if (!((unint64_t)(v113 + 1) >> 62))
                          {
                            v115 = (char *)v110 - (char *)v112;
                            if (v115 >> 1 > v114)
                              v114 = v115 >> 1;
                            if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFFCLL)
                              v116 = 0x3FFFFFFFFFFFFFFFLL;
                            else
                              v116 = v114;
                            if (!v116)
                            {
                              v117 = 0;
                              v118 = (unsigned int *)(4 * v113);
                              *(_DWORD *)(4 * v113) = v74;
                              v119 = 4 * v113 + 4;
                              v14 = v290;
                              if (v111 == v112)
                                goto LABEL_140;
LABEL_137:
                              v120 = (char *)(v111 - 1) - (char *)v112;
                              if (v120 >= 0x2C)
                              {
                                a2 = v284;
                                if ((unint64_t)((char *)v112 - v117) >= 0x20)
                                {
                                  v121 = (v120 >> 2) + 1;
                                  v122 = 4 * (v121 & 0x7FFFFFFFFFFFFFF8);
                                  v123 = &v111[v122 / 0xFFFFFFFFFFFFFFFCLL];
                                  v118 = (unsigned int *)((char *)v118 - v122);
                                  v124 = &v117[4 * v113 - 16];
                                  v125 = v111 - 4;
                                  v126 = v121 & 0x7FFFFFFFFFFFFFF8;
                                  do
                                  {
                                    v127 = *(_OWORD *)v125;
                                    *(v124 - 1) = *((_OWORD *)v125 - 1);
                                    *v124 = v127;
                                    v124 -= 2;
                                    v125 -= 8;
                                    v126 -= 8;
                                  }
                                  while (v126);
                                  v111 = v123;
                                  if (v121 == (v121 & 0x7FFFFFFFFFFFFFF8))
                                    goto LABEL_146;
                                }
                              }
                              else
                              {
                                a2 = v284;
                              }
                              do
                              {
                                v128 = *--v111;
                                *--v118 = v128;
                              }
                              while (v111 != v112);
                              goto LABEL_146;
                            }
                            if (!(v116 >> 62))
                            {
                              v117 = operator new(4 * v116);
                              v118 = (unsigned int *)&v117[4 * v113];
                              *v118 = v74;
                              v119 = (uint64_t)(v118 + 1);
                              v14 = v290;
                              if (v111 != v112)
                                goto LABEL_137;
LABEL_140:
                              a2 = v284;
LABEL_146:
                              *((_QWORD *)v108 + 5) = v118;
                              *((_QWORD *)v108 + 6) = v119;
                              *((_QWORD *)v108 + 7) = &v117[4 * v116];
                              if (v112)
                                operator delete(v112);
                              a5 = v288;
                              v67 = v292;
                              *((_QWORD *)v108 + 6) = v119;
                              if (++v69 == v286)
                              {
LABEL_149:
                                v129 = (_QWORD *)((char *)v67 + 32);
                                v130 = (uint64_t *)v293;
                                v131 = (char **)(a5 + 32);
                                v291 = (_QWORD *)(a5 + 40);
                                v132 = (char **)(a5 + 8);
                                v285 = (char **)(a5 + 24);
                                v287 = (_QWORD *)(a5 + 16);
                                if (v293 != &v294)
                                {
                                  do
                                  {
                                    if ((unint64_t)(v130[6] - v130[5]) >= 5)
                                    {
                                      v133 = (_QWORD *)*v129;
                                      if (!*v129)
                                        goto LABEL_164;
                                      v134 = v129;
                                      do
                                      {
                                        v135 = v133[4];
                                        v136 = v135 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
                                        if (v135 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
                                          v137 = v133;
                                        else
                                          v137 = v133 + 1;
                                        if (v136)
                                          v134 = v133;
                                        v133 = (_QWORD *)*v137;
                                      }
                                      while (*v137);
                                      if (v134 != v129
                                        && v134[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
                                      {
                                        v138 = (void *)v134[5];
                                      }
                                      else
                                      {
LABEL_164:
                                        v138 = 0;
                                      }
                                      v304 = v138;
                                      v305 = xmmword_22DCF5A40;
                                      v306 = 0u;
                                      v307 = 0u;
                                      v139 = (int *)v130[5];
                                      for (k = (int *)v130[6]; v139 != k; ++v139)
                                      {
                                        if ((operations_research::sat::LinearConstraintBuilder::AddLiteralTerm(&v304, *v139, 1) & 1) == 0)goto LABEL_394;
                                      }
                                      v141 = *v131;
                                      if ((unint64_t)*v131 >= *v291)
                                      {
                                        v147 = std::vector<std::vector<operations_research::sat::Literal>>::__push_back_slow_path<std::vector<operations_research::sat::Literal> const&>(v285, (uint64_t)(v130 + 5));
                                      }
                                      else
                                      {
                                        *((_QWORD *)v141 + 1) = 0;
                                        *(_QWORD *)v141 = 0;
                                        *((_QWORD *)v141 + 2) = 0;
                                        v143 = (_BYTE *)v130[5];
                                        v142 = (_BYTE *)v130[6];
                                        v144 = v142 - v143;
                                        if (v142 != v143)
                                        {
                                          if (v144 < 0)
LABEL_414:
                                            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                                          v145 = (char *)operator new(v142 - v143);
                                          *(_QWORD *)v141 = v145;
                                          *((_QWORD *)v141 + 1) = v145;
                                          v146 = &v145[4 * (v144 >> 2)];
                                          *((_QWORD *)v141 + 2) = v146;
                                          memcpy(v145, v143, v144);
                                          *((_QWORD *)v141 + 1) = v146;
                                        }
                                        v147 = v141 + 24;
                                        *v131 = v141 + 24;
                                      }
                                      *v131 = v147;
                                      operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v304, (uint64_t)__p);
                                      v148 = *v132;
                                      if ((unint64_t)*v132 >= *v287)
                                      {
                                        v149 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint>((void **)a5, (uint64_t)__p);
                                        v150 = v302[0];
                                        *v132 = v149;
                                        if (v150)
                                        {
                                          v302[1] = v150;
                                          operator delete(v150);
                                        }
                                      }
                                      else
                                      {
                                        *(_OWORD *)v148 = *(_OWORD *)__p;
                                        *((_QWORD *)v148 + 2) = 0;
                                        *((_QWORD *)v148 + 3) = 0;
                                        *((_QWORD *)v148 + 4) = 0;
                                        *((_QWORD *)v148 + 5) = 0;
                                        *((_OWORD *)v148 + 1) = *(_OWORD *)v300;
                                        *((_QWORD *)v148 + 4) = v301;
                                        v300[0] = 0;
                                        v300[1] = 0;
                                        v301 = 0;
                                        *((_QWORD *)v148 + 6) = 0;
                                        *((_QWORD *)v148 + 7) = 0;
                                        *(_OWORD *)(v148 + 40) = *(_OWORD *)v302;
                                        *((_QWORD *)v148 + 7) = v303;
                                        v302[0] = 0;
                                        v302[1] = 0;
                                        v303 = 0;
                                        *v132 = v148 + 64;
                                      }
                                      if (v300[0])
                                      {
                                        v300[1] = v300[0];
                                        operator delete(v300[0]);
                                      }
                                      if (*((_QWORD *)&v306 + 1))
                                      {
                                        *(_QWORD *)&v307 = *((_QWORD *)&v306 + 1);
                                        operator delete(*((void **)&v306 + 1));
                                      }
                                    }
                                    v151 = (uint64_t *)v130[1];
                                    if (v151)
                                    {
                                      do
                                      {
                                        v152 = (uint64_t **)v151;
                                        v151 = (uint64_t *)*v151;
                                      }
                                      while (v151);
                                    }
                                    else
                                    {
                                      do
                                      {
                                        v152 = (uint64_t **)v130[2];
                                        v153 = *v152 == v130;
                                        v130 = (uint64_t *)v152;
                                      }
                                      while (!v153);
                                    }
                                    v130 = (uint64_t *)v152;
                                  }
                                  while (v152 != &v294);
                                }
LABEL_351:
                                v256 = (int *)v296;
                                if (v296 == (uint64_t *)&v297)
                                {
LABEL_391:
                                  std::__tree<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::__map_value_compare<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::less<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,true>,std::allocator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>>>::destroy((uint64_t)&v293, v294);
                                  std::__tree<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::__map_value_compare<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::less<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,true>,std::allocator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>>>::destroy((uint64_t)&v296, v297);
                                  return;
                                }
                                while (1)
                                {
                                  if (*((_QWORD *)v256 + 6) - *((_QWORD *)v256 + 5) >= 5uLL)
                                  {
                                    v257 = (_QWORD *)*v129;
                                    if (!*v129)
                                      goto LABEL_366;
                                    v258 = v129;
                                    do
                                    {
                                      v259 = v257[4];
                                      v260 = v259 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
                                      if (v259 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
                                        v261 = v257;
                                      else
                                        v261 = v257 + 1;
                                      if (v260)
                                        v258 = v257;
                                      v257 = (_QWORD *)*v261;
                                    }
                                    while (*v261);
                                    if (v258 != v129
                                      && v258[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
                                    {
                                      v262 = (void *)v258[5];
                                    }
                                    else
                                    {
LABEL_366:
                                      v262 = 0;
                                    }
                                    v304 = v262;
                                    *(_QWORD *)&v305 = 1;
                                    *((_QWORD *)&v305 + 1) = 0x7FFFFFFFFFFFFFFELL;
                                    v306 = 0u;
                                    v307 = 0u;
                                    v263 = (int *)*((_QWORD *)v256 + 5);
                                    v264 = (int *)*((_QWORD *)v256 + 6);
                                    if (v263 != v264)
                                    {
                                      while (operations_research::sat::LinearConstraintBuilder::AddLiteralTerm(&v304, *v263, 1))
                                      {
                                        if (++v263 == v264)
                                          goto LABEL_370;
                                      }
LABEL_394:
                                      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/linear_relaxation.cc", 416);
                                      v278 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)__p);
                                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v278, (uint64_t)"Check failed: at_least_one_lc.AddLiteralTerm(l, IntegerValue(1)) ", 65);
                                      goto LABEL_395;
                                    }
LABEL_370:
                                    v265 = *v131;
                                    if ((unint64_t)*v131 >= *v291)
                                    {
                                      v272 = std::vector<std::vector<operations_research::sat::Literal>>::__push_back_slow_path<std::vector<operations_research::sat::Literal> const&>(v285, (uint64_t)(v256 + 10));
                                    }
                                    else
                                    {
                                      v266 = a5;
                                      *((_QWORD *)v265 + 1) = 0;
                                      *(_QWORD *)v265 = 0;
                                      *((_QWORD *)v265 + 2) = 0;
                                      v268 = (_BYTE *)*((_QWORD *)v256 + 5);
                                      v267 = (_BYTE *)*((_QWORD *)v256 + 6);
                                      v269 = v267 - v268;
                                      if (v267 != v268)
                                      {
                                        if (v269 < 0)
                                          goto LABEL_414;
                                        v270 = (char *)operator new(v267 - v268);
                                        *(_QWORD *)v265 = v270;
                                        *((_QWORD *)v265 + 1) = v270;
                                        v271 = &v270[4 * (v269 >> 2)];
                                        *((_QWORD *)v265 + 2) = v271;
                                        memcpy(v270, v268, v269);
                                        *((_QWORD *)v265 + 1) = v271;
                                      }
                                      v272 = v265 + 24;
                                      *v131 = v265 + 24;
                                      a5 = v266;
                                    }
                                    *v131 = v272;
                                    operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v304, (uint64_t)__p);
                                    v273 = *v132;
                                    if ((unint64_t)*v132 >= *v287)
                                    {
                                      v274 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint>((void **)a5, (uint64_t)__p);
                                      v275 = v302[0];
                                      *v132 = v274;
                                      if (v275)
                                      {
                                        v302[1] = v275;
                                        operator delete(v275);
                                      }
                                    }
                                    else
                                    {
                                      *(_OWORD *)v273 = *(_OWORD *)__p;
                                      *((_QWORD *)v273 + 2) = 0;
                                      *((_QWORD *)v273 + 3) = 0;
                                      *((_QWORD *)v273 + 4) = 0;
                                      *((_QWORD *)v273 + 5) = 0;
                                      *((void **)v273 + 2) = v300[0];
                                      *((void **)v273 + 3) = v300[1];
                                      *((_QWORD *)v273 + 4) = v301;
                                      v300[0] = 0;
                                      v300[1] = 0;
                                      v301 = 0;
                                      *((_QWORD *)v273 + 6) = 0;
                                      *((_QWORD *)v273 + 7) = 0;
                                      *((void **)v273 + 5) = v302[0];
                                      *((void **)v273 + 6) = v302[1];
                                      *((_QWORD *)v273 + 7) = v303;
                                      v302[0] = 0;
                                      v302[1] = 0;
                                      v303 = 0;
                                      *v132 = v273 + 64;
                                    }
                                    if (v300[0])
                                    {
                                      v300[1] = v300[0];
                                      operator delete(v300[0]);
                                    }
                                    if (*((_QWORD *)&v306 + 1))
                                    {
                                      *(_QWORD *)&v307 = *((_QWORD *)&v306 + 1);
                                      operator delete(*((void **)&v306 + 1));
                                    }
                                  }
                                  v276 = (uint64_t *)*((_QWORD *)v256 + 1);
                                  if (v276)
                                  {
                                    do
                                    {
                                      v277 = (uint64_t **)v276;
                                      v276 = (uint64_t *)*v276;
                                    }
                                    while (v276);
                                  }
                                  else
                                  {
                                    do
                                    {
                                      v277 = (uint64_t **)*((_QWORD *)v256 + 2);
                                      v153 = *v277 == (uint64_t *)v256;
                                      v256 = (int *)v277;
                                    }
                                    while (!v153);
                                  }
                                  v256 = (int *)v277;
                                  if (v277 == &v297)
                                    goto LABEL_391;
                                }
                              }
                              goto LABEL_75;
                            }
LABEL_411:
                            std::__throw_bad_array_new_length[abi:ne180100]();
                          }
LABEL_410:
                          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                        }
LABEL_74:
                        *v111 = v74;
                        v70 = v111 + 1;
                        a5 = v288;
                        v67 = v292;
                        a2 = v284;
                        *((_QWORD *)v108 + 6) = v70;
                        if (++v69 == v286)
                          goto LABEL_149;
                        goto LABEL_75;
                      }
                    }
                  }
                }
LABEL_97:
                v88 = (unsigned int *)*((_QWORD *)v83 + 5);
                v89 = v86 - v88;
                v90 = v89 + 1;
                if ((unint64_t)(v89 + 1) >> 62)
                  goto LABEL_410;
                v91 = (char *)v85 - (char *)v88;
                if (v91 >> 1 > v90)
                  v90 = v91 >> 1;
                if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL)
                  v92 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v92 = v90;
                if (v92)
                {
                  if (v92 >> 62)
                    goto LABEL_411;
                  v93 = operator new(4 * v92);
                  v94 = (unsigned int *)&v93[4 * v89];
                  *v94 = v74;
                  v87 = (uint64_t)(v94 + 1);
                  if (v86 == v88)
                    goto LABEL_114;
LABEL_108:
                  v95 = (char *)(v86 - 1) - (char *)v88;
                  if (v95 < 0x2C)
                    goto LABEL_419;
                  if ((unint64_t)((char *)v88 - v93) < 0x20)
                    goto LABEL_419;
                  v96 = (v95 >> 2) + 1;
                  v97 = 4 * (v96 & 0x7FFFFFFFFFFFFFF8);
                  v98 = &v86[v97 / 0xFFFFFFFFFFFFFFFCLL];
                  v94 = (unsigned int *)((char *)v94 - v97);
                  v99 = &v93[4 * v89 - 16];
                  v100 = v86 - 4;
                  v101 = v96 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v102 = *(_OWORD *)v100;
                    *(v99 - 1) = *((_OWORD *)v100 - 1);
                    *v99 = v102;
                    v99 -= 2;
                    v100 -= 8;
                    v101 -= 8;
                  }
                  while (v101);
                  v86 = v98;
                  if (v96 != (v96 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_419:
                    do
                    {
                      v103 = *--v86;
                      *--v94 = v103;
                    }
                    while (v86 != v88);
                  }
                }
                else
                {
                  v93 = 0;
                  v94 = (unsigned int *)(4 * v89);
                  *(_DWORD *)(4 * v89) = v74;
                  v87 = 4 * v89 + 4;
                  if (v86 != v88)
                    goto LABEL_108;
                }
LABEL_114:
                *((_QWORD *)v83 + 5) = v94;
                *((_QWORD *)v83 + 6) = v87;
                *((_QWORD *)v83 + 7) = &v93[4 * v92];
                if (v88)
                  operator delete(v88);
                goto LABEL_116;
              }
            }
          }
        }
        v78 = 5;
      }
      (*v77)[v78]();
      goto LABEL_85;
    case 0x13:
      if ((int)a4 < 2 || *((_DWORD *)a2 + 4))
        return;
      v154 = (_DWORD *)*((_QWORD *)a2 + 6);
      v155 = v154[4];
      v156 = v154[5];
      if (~v155 <= v155)
        v157 = v154[4];
      else
        v157 = ~v155;
      v158 = *v11;
      v159 = *(_DWORD *)(*v11 + 4 * v157);
      v160 = v154[6];
      if (~v160 <= v160)
        v161 = v154[6];
      else
        v161 = ~v160;
      v162 = *(_DWORD *)(v158 + 4 * v161);
      if (~v156 <= v156)
        v163 = v156;
      else
        v163 = ~v156;
      v164 = *(_DWORD *)(v158 + 4 * v163);
      v165 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)a3);
      v166 = v159 ^ (v155 >> 31);
      v167 = v162 ^ (v160 >> 31);
      v168 = *((_QWORD *)v165 + 5);
      v169 = *(_QWORD *)(v168 + 12 * v167);
      v170 = *(_QWORD *)(v168 + 12 * (v167 ^ 1));
      if (v169 + v170)
        v171 = 0;
      else
        v171 = -v169;
      v172 = (_QWORD *)*((_QWORD *)a3 + 4);
      if (!v172)
        goto LABEL_214;
      v173 = (_QWORD *)((char *)a3 + 32);
      do
      {
        v174 = v172[4];
        v175 = v174 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
        if (v174 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
          v176 = v172;
        else
          v176 = v172 + 1;
        if (v175)
          v173 = v172;
        v172 = (_QWORD *)*v176;
      }
      while (*v176);
      if (v173 != (_QWORD *)((char *)a3 + 32)
        && v173[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
      {
        v177 = (void *)v173[5];
      }
      else
      {
LABEL_214:
        v177 = 0;
      }
      v304 = v177;
      *(_QWORD *)&v305 = v171;
      *((_QWORD *)&v305 + 1) = v171;
      v306 = 0u;
      v307 = 0u;
      operations_research::sat::LinearConstraintBuilder::AddTerm(&v304, v166, 1);
      if (v169 != -v170)
        operations_research::sat::LinearConstraintBuilder::AddTerm(&v304, v167, 1);
      operations_research::sat::LinearConstraintBuilder::AddTerm(&v304, v164 ^ (v156 >> 31), -1);
      operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v304, (uint64_t)__p);
      v178 = *(_QWORD *)(a5 + 8);
      if (v178 >= *(_QWORD *)(a5 + 16))
        goto LABEL_342;
      goto LABEL_341;
    case 0x14:
      operations_research::sat::AppendNoOverlapRelaxation(this, a2, a4, (uint64_t)a3, (operations_research::sat::Model *)a5, v13);
      return;
    case 0x1A:
      if (*((_DWORD *)a2 + 4))
        return;
      v289 = a5;
      __p[1] = 0;
      v300[0] = 0;
      __p[0] = 0;
      v184 = *((_QWORD *)a2 + 6);
      v185 = *(int *)(v184 + 16);
      if (!(_DWORD)v185)
        goto LABEL_284;
      v186 = 0;
      v187 = *(int **)(v184 + 24);
      v188 = &v187[v185];
      break;
    default:
      return;
  }
  do
  {
    v190 = *v187;
    if (~*v187 <= *v187)
      v191 = *v187;
    else
      v191 = ~v190;
    v192 = __PAIR64__(*(_DWORD *)(v14[6] + 4 * v191), v190) >> 31;
    if (v186 < v300[0])
    {
      *(_DWORD *)v186 = v192;
      v189 = v186 + 4;
      goto LABEL_230;
    }
    v193 = v14;
    v194 = (char *)__p[0];
    v195 = v186 - (char *)__p[0];
    v196 = (v186 - (char *)__p[0]) >> 2;
    v197 = v196 + 1;
    if ((unint64_t)(v196 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v198 = (char *)v300[0] - (char *)__p[0];
    if (((char *)v300[0] - (char *)__p[0]) >> 1 > v197)
      v197 = v198 >> 1;
    if ((unint64_t)v198 >= 0x7FFFFFFFFFFFFFFCLL)
      v199 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v199 = v197;
    if (v199)
    {
      if (v199 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v200 = operator new(4 * v199);
      v201 = &v200[4 * v196];
      *v201 = v192;
      v189 = v201 + 1;
      if (v186 == v194)
      {
LABEL_250:
        v14 = v193;
        __p[0] = v201;
        __p[1] = v189;
        v300[0] = &v200[4 * v199];
        if (!v194)
          goto LABEL_230;
LABEL_251:
        operator delete(v194);
        goto LABEL_230;
      }
    }
    else
    {
      v200 = 0;
      v201 = (_DWORD *)(4 * v196);
      *(_DWORD *)(4 * v196) = v192;
      v189 = (void *)(4 * v196 + 4);
      if (v186 == v194)
        goto LABEL_250;
    }
    v202 = v186 - 4 - v194;
    if (v202 < 0xBC
      || &v200[v195 - 4 - (v202 & 0xFFFFFFFFFFFFFFFCLL)] > &v200[v195 - 4]
      || &v186[-(v202 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v186 - 4
      || (unint64_t)(v186 - v200 - v195) < 0x20)
    {
      v203 = v186;
      v14 = v193;
      do
      {
LABEL_246:
        v204 = *((_DWORD *)v203 - 1);
        v203 -= 4;
        *--v201 = v204;
      }
      while (v203 != v194);
      goto LABEL_247;
    }
    v205 = (v202 >> 2) + 1;
    v206 = 4 * (v205 & 0x7FFFFFFFFFFFFFF8);
    v203 = &v186[-v206];
    v201 = (_DWORD *)((char *)v201 - v206);
    v207 = &v200[4 * v196 - 16];
    v208 = v186 - 16;
    v209 = v205 & 0x7FFFFFFFFFFFFFF8;
    v14 = v193;
    do
    {
      v210 = *(_OWORD *)v208;
      *(v207 - 1) = *((_OWORD *)v208 - 1);
      *v207 = v210;
      v207 -= 2;
      v208 -= 32;
      v209 -= 8;
    }
    while (v209);
    if (v205 != (v205 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_246;
LABEL_247:
    __p[0] = v201;
    __p[1] = v189;
    v300[0] = &v200[4 * v199];
    if (v194)
      goto LABEL_251;
LABEL_230:
    __p[1] = v189;
    ++v187;
    v186 = (char *)v189;
  }
  while (v187 != v188);
LABEL_284:
  v223 = *(_QWORD **)(v289 + 32);
  if ((unint64_t)v223 >= *(_QWORD *)(v289 + 40))
  {
    v228 = std::vector<std::vector<operations_research::sat::Literal>>::__push_back_slow_path<std::vector<operations_research::sat::Literal> const&>((char **)(v289 + 24), (uint64_t)__p);
  }
  else
  {
    *v223 = 0;
    v223[1] = 0;
    v223[2] = 0;
    v224 = __p[0];
    v225 = (char *)__p[1] - (char *)__p[0];
    if (__p[1] != __p[0])
    {
      if (v225 < 0)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v226 = (char *)operator new((char *)__p[1] - (char *)__p[0]);
      *v223 = v226;
      v223[1] = v226;
      v227 = &v226[4 * (v225 >> 2)];
      v223[2] = v227;
      memcpy(v226, v224, v225);
      v223[1] = v227;
    }
    v228 = (char *)(v223 + 3);
    *(_QWORD *)(v289 + 32) = v223 + 3;
  }
  *(_QWORD *)(v289 + 32) = v228;
LABEL_303:
  v232 = (int *)__p[0];
  if (__p[0])
  {
    __p[1] = __p[0];
    goto LABEL_348;
  }
}

void sub_22DBA4D00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a27);
}

void sub_22DBA4D08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a27);
}

void sub_22DBA4D10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a27);
}

void sub_22DBA4D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40)
{
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)&a27);
  if (__p)
  {
    a40 = (uint64_t)__p;
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void operations_research::sat::AppendMaxRelaxation(unsigned int a1, int **a2, int a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  int *v8;
  _QWORD *v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  void *v16;
  unint64_t v17;
  char *v18;
  void *v19;
  _QWORD *v20;
  unsigned int *v21;
  unsigned int *v22;
  int64_t v23;
  operations_research::sat::IntegerTrail *v24;
  int v25;
  uint64_t (***v26)();
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  BOOL v31;
  _QWORD *v32;
  void *v33;
  uint64_t v34;
  operations_research::sat::IntegerTrail *v35;
  int v36;
  uint64_t (***v37)();
  uint64_t v38;
  int v39;
  operations_research::sat::IntegerSumLE *v40;
  _DWORD *v41;
  _QWORD *v42;
  _OWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  int64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  int *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  __int128 v64;
  int v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  int LiteralAssociatedToEquality;
  operations_research::sat::IntegerSumLE *v70;
  _DWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  char *v74;
  _QWORD *v75;
  _QWORD *v76;
  char *v77;
  operations_research::sat::IntegerSumLE *v78;
  _DWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  char *v82;
  _QWORD *v83;
  _QWORD *v84;
  unint64_t v85;
  char *v86;
  void *v87;
  unsigned int *v88;
  unsigned int v89;
  uint64_t v91;
  operations_research::sat::GenericLiteralWatcher *v92;
  uint64_t v95;
  void *v96;
  void *v97;
  _OWORD *v98;
  void *v99;
  void *v100;
  _QWORD *v101;
  void *v102;
  char *v103;
  char *v104;
  void *v105[2];
  void *v106[2];
  uint64_t v107;
  void *__p[2];
  uint64_t v109;
  void *v110;
  _BYTE v111[48];
  _BYTE v112[24];
  _BYTE *v113;
  uint64_t (**v114)();
  __int128 v115;
  uint64_t (***v116)();
  uint64_t (**v117)();
  __int128 v118;
  uint64_t (***v119)();
  uint64_t v120;

  v120 = *MEMORY[0x24BDAC8D0];
  v7 = *a2;
  v8 = a2[1];
  if (*a2 != v8)
  {
    v9 = (_QWORD *)(a4 + 32);
    do
    {
      v10 = *v7;
      if (*v7 != a1)
      {
        v11 = (_QWORD *)*v9;
        if (!*v9)
          goto LABEL_16;
        v12 = v9;
        do
        {
          v13 = v11[4];
          v14 = v13 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
          if (v13 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
            v15 = v11;
          else
            v15 = v11 + 1;
          if (v14)
            v12 = v11;
          v11 = (_QWORD *)*v15;
        }
        while (*v15);
        if (v12 != v9
          && v12[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
        {
          v16 = (void *)v12[5];
        }
        else
        {
LABEL_16:
          v16 = 0;
        }
        v110 = v16;
        *(_QWORD *)v111 = 0x8000000000000002;
        memset(&v111[8], 0, 40);
        operations_research::sat::LinearConstraintBuilder::AddTerm(&v110, v10, 1);
        operations_research::sat::LinearConstraintBuilder::AddTerm(&v110, a1, -1);
        operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v110, (uint64_t)v105);
        v17 = *(_QWORD *)(a5 + 8);
        if (v17 >= *(_QWORD *)(a5 + 16))
        {
          v18 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint>((void **)a5, (uint64_t)v105);
          v19 = __p[0];
          *(_QWORD *)(a5 + 8) = v18;
          if (v19)
          {
            __p[1] = v19;
            operator delete(v19);
          }
        }
        else
        {
          *(_OWORD *)v17 = *(_OWORD *)v105;
          *(_QWORD *)(v17 + 16) = 0;
          *(_QWORD *)(v17 + 24) = 0;
          *(_QWORD *)(v17 + 32) = 0;
          *(_QWORD *)(v17 + 40) = 0;
          *(_OWORD *)(v17 + 16) = *(_OWORD *)v106;
          *(_QWORD *)(v17 + 32) = v107;
          v106[0] = 0;
          v106[1] = 0;
          v107 = 0;
          *(_QWORD *)(v17 + 48) = 0;
          *(_QWORD *)(v17 + 56) = 0;
          *(_OWORD *)(v17 + 40) = *(_OWORD *)__p;
          *(_QWORD *)(v17 + 56) = v109;
          __p[0] = 0;
          __p[1] = 0;
          v109 = 0;
          *(_QWORD *)(a5 + 8) = v17 + 64;
        }
        if (v106[0])
        {
          v106[1] = v106[0];
          operator delete(v106[0]);
        }
        if (*(_QWORD *)&v111[24])
        {
          *(_QWORD *)&v111[32] = *(_QWORD *)&v111[24];
          operator delete(*(void **)&v111[24]);
        }
      }
      ++v7;
    }
    while (v7 != v8);
  }
  if (a3 >= 2)
  {
    v20 = (_QWORD *)a4;
    v92 = operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>(a4);
    v91 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a4);
    v22 = (unsigned int *)*a2;
    v21 = (unsigned int *)a2[1];
    v23 = (char *)v21 - (char *)*a2;
    if (v23 == 8)
    {
      v118 = xmmword_22DCE6500;
      v117 = &off_24F984000;
      v119 = &v117;
      v24 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a4);
      v25 = operations_research::sat::IntegerTrail::AddIntegerVariable((uint64_t)v24, v118, *((uint64_t *)&v118 + 1));
      v26 = v119;
      if (v119 == &v117)
      {
        v27 = 4;
        v26 = &v117;
      }
      else
      {
        if (!v119)
        {
LABEL_91:
          LiteralAssociatedToEquality = operations_research::sat::IntegerEncoder::GetOrCreateLiteralAssociatedToEquality(v91, v25, 1);
          v70 = (operations_research::sat::IntegerSumLE *)operator new();
          v71 = operator new(4uLL);
          v105[0] = v71;
          *v71 = LiteralAssociatedToEquality;
          v105[1] = v71 + 1;
          v106[0] = v71 + 1;
          v72 = **a2;
          v73 = operator new(8uLL);
          v110 = v73;
          *v73 = a1 | (unint64_t)(v72 << 32);
          *(_QWORD *)v111 = v73 + 1;
          *(_QWORD *)&v111[8] = v73 + 1;
          v74 = (char *)operator new(0x10uLL);
          v102 = v74;
          *(_OWORD *)v74 = xmmword_22DCE5B10;
          v103 = v74 + 16;
          v104 = v74 + 16;
          operations_research::sat::IntegerSumLE::IntegerSumLE(v70, v105, &v110, &v102, 0, a4);
          if (v102)
          {
            v103 = (char *)v102;
            operator delete(v102);
          }
          if (v110)
          {
            *(_QWORD *)v111 = v110;
            operator delete(v110);
          }
          if (v105[0])
          {
            v105[1] = v105[0];
            operator delete(v105[0]);
          }
          operations_research::sat::IntegerSumLE::RegisterWith(v70, v92);
          v75 = (_QWORD *)operator new();
          *v75 = &off_24F984090;
          v75[1] = v70;
          v105[0] = v75;
          v76 = *(_QWORD **)(a4 + 56);
          if ((unint64_t)v76 >= *(_QWORD *)(a4 + 64))
          {
            v77 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a4 + 48), v105);
          }
          else
          {
            *v76 = v75;
            v77 = (char *)(v76 + 1);
          }
          *(_QWORD *)(a4 + 56) = v77;
          v78 = (operations_research::sat::IntegerSumLE *)operator new();
          v79 = operator new(4uLL);
          v105[0] = v79;
          *v79 = LiteralAssociatedToEquality ^ 1;
          v105[1] = v79 + 1;
          v106[0] = v79 + 1;
          v80 = (*a2)[1];
          v81 = operator new(8uLL);
          v110 = v81;
          *v81 = a1 | (unint64_t)(v80 << 32);
          *(_QWORD *)v111 = v81 + 1;
          *(_QWORD *)&v111[8] = v81 + 1;
          v82 = (char *)operator new(0x10uLL);
          v102 = v82;
          *(_OWORD *)v82 = xmmword_22DCE5B10;
          v103 = v82 + 16;
          v104 = v82 + 16;
          operations_research::sat::IntegerSumLE::IntegerSumLE(v78, v105, &v110, &v102, 0, a4);
          if (v102)
          {
            v103 = (char *)v102;
            operator delete(v102);
          }
          if (v110)
          {
            *(_QWORD *)v111 = v110;
            operator delete(v110);
          }
          if (v105[0])
          {
            v105[1] = v105[0];
            operator delete(v105[0]);
          }
          operations_research::sat::IntegerSumLE::RegisterWith(v78, v92);
          v83 = (_QWORD *)operator new();
          *v83 = &off_24F984090;
          v83[1] = v78;
          v105[0] = v83;
          v84 = *(_QWORD **)(a4 + 56);
          if ((unint64_t)v84 >= *(_QWORD *)(a4 + 64))
          {
            *(_QWORD *)(a4 + 56) = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a4 + 48), v105);
          }
          else
          {
            *v84 = v83;
            *(_QWORD *)(a4 + 56) = v84 + 1;
          }
          return;
        }
        v27 = 5;
      }
      (*v26)[v27]();
      goto LABEL_91;
    }
    v28 = *(_QWORD **)(a4 + 32);
    if (!v28)
      goto LABEL_42;
    v29 = a4 + 32;
    do
    {
      v30 = v28[4];
      v31 = v30 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
      if (v30 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
        v32 = v28;
      else
        v32 = v28 + 1;
      if (v31)
        v29 = (uint64_t)v28;
      v28 = (_QWORD *)*v32;
    }
    while (*v32);
    if (v29 != a4 + 32
      && *(_QWORD *)(v29 + 32) <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
    {
      v33 = *(void **)(v29 + 40);
    }
    else
    {
LABEL_42:
      v33 = 0;
    }
    v110 = v33;
    *(int64x2_t *)v111 = vdupq_n_s64(1uLL);
    memset(&v111[16], 0, 32);
    v102 = 0;
    v103 = 0;
    v104 = 0;
    if (v21 != v22)
    {
      if (v23 < 0)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v102 = operator new(v23);
      v103 = (char *)v102;
      v104 = (char *)v102 + 4 * (v23 >> 2);
      v95 = a1;
      v88 = v21;
      v89 = a1;
      while (1)
      {
        v34 = *v22;
        if ((_DWORD)v34 != a1)
          break;
LABEL_46:
        if (++v22 == v21)
          goto LABEL_85;
      }
      v115 = xmmword_22DCE6500;
      v114 = &off_24F984000;
      v116 = &v114;
      v35 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)v20);
      v36 = operations_research::sat::IntegerTrail::AddIntegerVariable((uint64_t)v35, v115, *((uint64_t *)&v115 + 1));
      v37 = v116;
      if (v116 == &v114)
      {
        v37 = &v114;
        v38 = 4;
      }
      else
      {
        if (!v116)
          goto LABEL_53;
        v38 = 5;
      }
      (*v37)[v38]();
LABEL_53:
      v39 = operations_research::sat::IntegerEncoder::GetOrCreateLiteralAssociatedToEquality(v91, v36, 1);
      v40 = (operations_research::sat::IntegerSumLE *)operator new();
      v41 = operator new(4uLL);
      v105[0] = v41;
      *v41 = v39;
      v105[1] = v41 + 1;
      v106[0] = v41 + 1;
      v42 = operator new(8uLL);
      v99 = v42;
      *v42 = v95 | (v34 << 32);
      v100 = v42 + 1;
      v101 = v42 + 1;
      v43 = operator new(0x10uLL);
      v96 = v43;
      *v43 = xmmword_22DCE5B10;
      v97 = v43 + 1;
      v98 = v43 + 1;
      operations_research::sat::IntegerSumLE::IntegerSumLE(v40, v105, &v99, &v96, 0, v20);
      if (v96)
      {
        v97 = v96;
        operator delete(v96);
      }
      if (v99)
      {
        v100 = v99;
        operator delete(v99);
      }
      if (v105[0])
      {
        v105[1] = v105[0];
        operator delete(v105[0]);
      }
      operations_research::sat::IntegerSumLE::RegisterWith(v40, v92);
      v44 = (_QWORD *)operator new();
      *v44 = &off_24F984090;
      v44[1] = v40;
      v105[0] = v44;
      v45 = (_QWORD *)v20[7];
      if ((unint64_t)v45 >= v20[8])
      {
        v46 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a4 + 48), v105);
      }
      else
      {
        *v45 = v44;
        v46 = (char *)(v45 + 1);
      }
      v20[7] = v46;
      v47 = v103;
      if (v103 < v104)
      {
        *(_DWORD *)v103 = v39;
        v48 = (uint64_t)(v47 + 4);
LABEL_83:
        v103 = (char *)v48;
        v20 = (_QWORD *)a4;
        v21 = v88;
        a1 = v89;
        if ((operations_research::sat::LinearConstraintBuilder::AddLiteralTerm(&v110, v39, 1) & 1) == 0)
        {
          google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v105, (google::glog_internal_namespace_ *)"./ortools/sat/linear_relaxation.cc", 614);
          v66 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v105);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"Check failed: lc_exactly_one.AddLiteralTerm(y_lit, IntegerValue(1)) ", 68);
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v105);
        }
        goto LABEL_46;
      }
      v49 = (char *)v102;
      v50 = v103 - (_BYTE *)v102;
      v51 = (v103 - (_BYTE *)v102) >> 2;
      v52 = v51 + 1;
      if ((unint64_t)(v51 + 1) >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v53 = v104 - (_BYTE *)v102;
      if ((v104 - (_BYTE *)v102) >> 1 > v52)
        v52 = v53 >> 1;
      if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL)
        v54 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v54 = v52;
      if (v54)
      {
        if (v54 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v55 = (char *)operator new(4 * v54);
        v56 = (int *)&v55[4 * v51];
        *v56 = v39;
        v48 = (uint64_t)(v56 + 1);
        if (v47 == v49)
          goto LABEL_81;
      }
      else
      {
        v55 = 0;
        v56 = (int *)(4 * v51);
        *(_DWORD *)(4 * v51) = v39;
        v48 = 4 * v51 + 4;
        if (v47 == v49)
        {
LABEL_81:
          v102 = v56;
          v103 = (char *)v48;
          v104 = &v55[4 * v54];
          if (v49)
            operator delete(v49);
          goto LABEL_83;
        }
      }
      v57 = v47 - 4 - v49;
      if (v57 < 0x2C)
        goto LABEL_129;
      if ((unint64_t)(v47 - &v55[v50]) < 0x20)
        goto LABEL_129;
      v58 = (v57 >> 2) + 1;
      v59 = 4 * (v58 & 0x7FFFFFFFFFFFFFF8);
      v60 = &v47[-v59];
      v56 = (int *)((char *)v56 - v59);
      v61 = &v55[4 * v51 - 16];
      v62 = v47 - 16;
      v63 = v58 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v64 = *(_OWORD *)v62;
        *((_OWORD *)v61 - 1) = *((_OWORD *)v62 - 1);
        *(_OWORD *)v61 = v64;
        v61 -= 32;
        v62 -= 32;
        v63 -= 8;
      }
      while (v63);
      v47 = v60;
      if (v58 != (v58 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_129:
        do
        {
          v65 = *((_DWORD *)v47 - 1);
          v47 -= 4;
          *--v56 = v65;
        }
        while (v47 != v49);
      }
      goto LABEL_81;
    }
LABEL_85:
    operations_research::sat::ExactlyOneConstraint((uint64_t)&v102, (uint64_t)v112);
    v105[0] = v20;
    if (!v113)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)v113 + 48))(v113, v105);
    v67 = v113;
    if (v113 == v112)
    {
      v68 = 4;
      v67 = v112;
    }
    else
    {
      if (!v113)
      {
LABEL_111:
        operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v110, (uint64_t)v105);
        v85 = *(_QWORD *)(a5 + 8);
        if (v85 >= *(_QWORD *)(a5 + 16))
        {
          v86 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint>((void **)a5, (uint64_t)v105);
          v87 = __p[0];
          *(_QWORD *)(a5 + 8) = v86;
          if (v87)
          {
            __p[1] = v87;
            operator delete(v87);
          }
        }
        else
        {
          *(_OWORD *)v85 = *(_OWORD *)v105;
          *(_QWORD *)(v85 + 16) = 0;
          *(_QWORD *)(v85 + 24) = 0;
          *(_QWORD *)(v85 + 32) = 0;
          *(_QWORD *)(v85 + 40) = 0;
          *(_OWORD *)(v85 + 16) = *(_OWORD *)v106;
          *(_QWORD *)(v85 + 32) = v107;
          v106[0] = 0;
          v106[1] = 0;
          *(_QWORD *)(v85 + 48) = 0;
          *(_QWORD *)(v85 + 56) = 0;
          *(_OWORD *)(v85 + 40) = *(_OWORD *)__p;
          *(_QWORD *)(v85 + 56) = v109;
          v107 = 0;
          __p[0] = 0;
          __p[1] = 0;
          v109 = 0;
          *(_QWORD *)(a5 + 8) = v85 + 64;
        }
        if (v106[0])
        {
          v106[1] = v106[0];
          operator delete(v106[0]);
        }
        if (v102)
        {
          v103 = (char *)v102;
          operator delete(v102);
        }
        if (*(_QWORD *)&v111[24])
        {
          *(_QWORD *)&v111[32] = *(_QWORD *)&v111[24];
          operator delete(*(void **)&v111[24]);
        }
        return;
      }
      v68 = 5;
    }
    (*(void (**)(void))(*v67 + 8 * v68))();
    goto LABEL_111;
  }
}

void sub_22DBA5A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45)
{
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)&a32);
  if (__p)
    operator delete(__p);
  if (!a44)
    _Unwind_Resume(a1);
  a45 = (uint64_t)a44;
  operator delete(a44);
  _Unwind_Resume(a1);
}

void operations_research::sat::AppendLinearConstraintRelaxation(uint64_t **this, const operations_research::sat::ConstraintProto *a2, uint64_t a3, const operations_research::sat::Model *a4, operations_research::sat::LinearRelaxation *a5)
{
  operations_research::sat *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  uint64_t *v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  BOOL v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  int v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  int *v48;
  int *v49;
  char *v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _BYTE *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  __int128 *v66;
  uint64_t v67;
  __int128 v68;
  int v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  void *v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int *v88;
  int64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  _BYTE *v94;
  unsigned int *v95;
  unsigned int *v96;
  unint64_t v97;
  unsigned int *v98;
  unsigned int v99;
  char *v100;
  int64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  _BYTE *v106;
  _QWORD *v107;
  unint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  _OWORD *v114;
  unsigned int *v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  _OWORD *v120;
  __int128 *v121;
  uint64_t v122;
  __int128 v123;
  _QWORD *v124;
  _QWORD *v125;
  unint64_t v126;
  BOOL v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  unint64_t v134;
  BOOL v135;
  _QWORD *v136;
  uint64_t v137;
  _DWORD *v138;
  _DWORD *v139;
  uint64_t *v140;
  unint64_t v141;
  unint64_t v142;
  char *v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  _QWORD *v148;
  unint64_t v149;
  BOOL v150;
  _QWORD *v151;
  uint64_t v152;
  _DWORD *v153;
  _DWORD *v154;
  uint64_t *v155;
  unint64_t v156;
  unint64_t v157;
  char *v158;
  void *v159;
  _QWORD *v160;
  _QWORD *v161;
  uint64_t v162;
  int64_t v163;
  _QWORD *v164;
  int *v166;
  uint64_t v167;
  operations_research::sat *v168;
  _QWORD *v169;
  void *v170[2];
  void *v171[2];
  __int128 v172;
  uint64_t v173;
  void *v174;
  _DWORD *v175;
  char *v176;
  __int128 v177;
  void *v178[2];
  uint64_t v179;
  void *__p[2];
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  __int128 v185;
  __int128 v186;
  uint64_t *v187;
  uint64_t *v188;
  uint64_t *v189;
  __int128 v190;
  __int128 v191;

  v6 = (operations_research::sat *)this;
  v9 = *(_QWORD **)(a3 + 32);
  v7 = (_QWORD *)(a3 + 32);
  v8 = v9;
  if (!v9)
    goto LABEL_12;
  v10 = v7;
  v11 = v8;
  do
  {
    v12 = v11[4];
    v13 = v12 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::CpModelMapping>(void)::d;
    if (v12 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::CpModelMapping>(void)::d)
      v14 = v11;
    else
      v14 = v11 + 1;
    if (v13)
      v10 = v11;
    v11 = (_QWORD *)*v14;
  }
  while (*v14);
  if (v10 != v7 && v10[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::CpModelMapping>(void)::d)
    v15 = (_QWORD *)v10[5];
  else
LABEL_12:
    v15 = 0;
  v16 = *((_DWORD *)this + 15);
  v17 = this[6];
  if (v16 != 12)
    v17 = &operations_research::sat::_LinearConstraintProto_default_instance_;
  v18 = (uint64_t **)v17[9];
  v19 = *v18;
  v20 = v18[*((int *)v17 + 16) - 1];
  if (*v18 == (uint64_t *)0x8000000000000000 && v20 == (uint64_t *)0x7FFFFFFFFFFFFFFFLL)
    return;
  v22 = *((int *)this + 4);
  if ((_DWORD)v22)
  {
    if ((int)a2 < 2)
      return;
    v23 = 0;
    v24 = (unint64_t)this
        + (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (unint64_t)this)
           * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                              * ((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                               + (_QWORD)this)));
    v25 = ((v24 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v24);
    v26 = v15[21];
    v27 = (v25 >> 7) ^ (v26 >> 12);
    v28 = v15[24];
    v29 = 0x101010101010101 * (v25 & 0x7F);
    while (1)
    {
      v30 = v27 & v28;
      v31 = *(_QWORD *)(v26 + v30);
      v32 = ((v31 ^ v29) - 0x101010101010101) & ~(v31 ^ v29) & 0x8080808080808080;
      if (v32)
        break;
LABEL_25:
      if ((v31 & (~v31 << 6) & 0x8080808080808080) != 0)
        goto LABEL_52;
      v23 += 8;
      v27 = v23 + v30;
    }
    while (1)
    {
      v33 = (v30 + (__clz(__rbit64(v32)) >> 3)) & v28;
      if (*(uint64_t ***)(v15[22] + 8 * v33) == this)
        break;
      v32 &= v32 - 1;
      if (!v32)
        goto LABEL_25;
    }
    if (v33 == v28)
    {
LABEL_52:
      if (*((int *)v17 + 4) < 2)
        return;
    }
    v162 = (uint64_t)v20;
    v174 = 0;
    v175 = 0;
    v176 = 0;
    if ((v22 & 0x80000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v163 = (int64_t)v19;
    v164 = v7;
    v45 = v22;
    v46 = (char *)operator new(4 * v22);
    v47 = &v46[v45 * 4];
    v175 = v46;
    v48 = (int *)*((_QWORD *)v6 + 3);
    v49 = &v48[v45];
    v50 = v46;
    v168 = v6;
    v169 = v15;
    v166 = v49;
    while (1)
    {
      while (1)
      {
        v51 = *v48;
        v52 = ~*v48 <= *v48 ? *v48 : ~v51;
        v53 = __PAIR64__(*(_DWORD *)(v15[6] + 4 * v52), v51) >> 31;
        if (v46 >= v47)
          break;
        *(_DWORD *)v46 = v53;
        v46 += 4;
        if (++v48 == v49)
          goto LABEL_86;
      }
      v54 = (v46 - v50) >> 2;
      v55 = v54 + 1;
      if ((unint64_t)(v54 + 1) >> 62)
      {
        v175 = v46;
        v176 = v47;
        v174 = v50;
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      if ((v47 - v50) >> 1 > v55)
        v55 = (v47 - v50) >> 1;
      v56 = (unint64_t)(v47 - v50) >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v55;
      if (v56)
      {
        if (v56 >> 62)
        {
          v175 = v46;
          v176 = v47;
          v174 = v50;
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        v57 = operator new(4 * v56);
        v58 = &v57[4 * v54];
        *(_DWORD *)v58 = v53;
        v59 = (uint64_t)(v58 + 4);
        if (v46 == v50)
        {
LABEL_77:
          v15 = v169;
          v47 = &v57[4 * v56];
          if (!v50)
            goto LABEL_74;
LABEL_73:
          operator delete(v50);
          goto LABEL_74;
        }
      }
      else
      {
        v57 = 0;
        v58 = (char *)(4 * v54);
        *(_DWORD *)(4 * v54) = v53;
        v59 = 4 * v54 + 4;
        if (v46 == v50)
          goto LABEL_77;
      }
      v60 = v46 - 4 - v50;
      if (v60 < 0xBC
        || &v57[v46 - v50 - 4 - (v60 & 0xFFFFFFFFFFFFFFFCLL)] > &v57[v46 - v50 - 4]
        || &v46[-(v60 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v46 - 4
        || (unint64_t)(v50 - v57) < 0x20)
      {
        break;
      }
      v63 = (v60 >> 2) + 1;
      v64 = 4 * (v63 & 0x7FFFFFFFFFFFFFF8);
      v61 = &v46[-v64];
      v58 -= v64;
      v65 = &v57[4 * v54 - 16];
      v66 = (__int128 *)(v46 - 16);
      v67 = v63 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v68 = *v66;
        *(v65 - 1) = *(v66 - 1);
        *v65 = v68;
        v65 -= 2;
        v66 -= 2;
        v67 -= 8;
      }
      while (v67);
      v15 = v169;
      if (v63 != (v63 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_71;
LABEL_72:
      v47 = &v57[4 * v56];
      if (v50)
        goto LABEL_73;
LABEL_74:
      v50 = v58;
      v46 = (char *)v59;
      v49 = v166;
      v6 = v168;
      if (++v48 == v166)
      {
LABEL_86:
        v69 = *((_DWORD *)v6 + 15);
        v70 = (uint64_t *)*((_QWORD *)v6 + 6);
        v175 = v46;
        v176 = v47;
        v173 = 0;
        v174 = v50;
        *(_OWORD *)v171 = 0u;
        v172 = 0u;
        *(_OWORD *)v170 = 0u;
        if (v69 == 12)
          v71 = v70;
        else
          v71 = &operations_research::sat::_LinearConstraintProto_default_instance_;
        v72 = *((int *)v71 + 4);
        if ((_DWORD)v72)
        {
          if ((v72 & 0x80000000) != 0)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v73 = (unsigned int *)operator new(4 * v72);
          v74 = &v73[v72];
          v170[0] = v73;
          v170[1] = v73;
          v171[0] = v74;
          v75 = *((int *)v71 + 4);
          if ((_DWORD)v75)
          {
            if ((v75 & 0x80000000) != 0)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v76 = (char *)operator new(8 * v75);
            v77 = &v76[8 * v75];
            v171[1] = v76;
            *(_QWORD *)&v172 = v76;
            *((_QWORD *)&v172 + 1) = v77;
          }
          else
          {
            v77 = 0;
            v76 = 0;
          }
        }
        else
        {
          v73 = 0;
          v74 = 0;
          v77 = 0;
          v76 = 0;
        }
        v81 = 0;
        while (2)
        {
          if (v69 == 12)
          {
            v83 = (uint64_t *)*((_QWORD *)v6 + 6);
            if (v81 >= *((int *)v83 + 4))
              goto LABEL_166;
          }
          else
          {
            v83 = &operations_research::sat::_LinearConstraintProto_default_instance_;
            if (v81 >= (int)qword_25408AC60)
            {
LABEL_166:
              *(_QWORD *)&v177 = 0;
              if (v173)
              {
                v187 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>((int)&v173, (int)&v177, "expr.offset == IntegerValue(0)");
                if (v187)
                {
                  google::LogMessageFatal::LogMessageFatal((unint64_t *)&v177, (google::glog_internal_namespace_ *)"./ortools/sat/linear_relaxation.cc", 266, &v187);
                  google::LogMessage::stream((google::LogMessage *)&v177);
                  goto LABEL_245;
                }
              }
              operations_research::sat::CanonicalizeExpr(v170, (uint64_t)&v187);
              v124 = (_QWORD *)*v164;
              v125 = v164;
              do
              {
                v126 = v124[4];
                v127 = v126 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
                if (v126 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
                  v128 = v124;
                else
                  v128 = v124 + 1;
                if (v127)
                  v125 = v124;
                v124 = (_QWORD *)*v128;
              }
              while (*v128);
              v129 = v125[5];
              v130 = operations_research::sat::LinExprLowerBound((uint64_t *)&v187, v129);
              v131 = v163 - v130;
              if (v163 > v130)
              {
                v132 = (_QWORD *)*v164;
                if (!*v164)
                  goto LABEL_187;
                v133 = v164;
                do
                {
                  v134 = v132[4];
                  v135 = v134 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
                  if (v134 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
                    v136 = v132;
                  else
                    v136 = v132 + 1;
                  if (v135)
                    v133 = v132;
                  v132 = (_QWORD *)*v136;
                }
                while (*v136);
                if (v133 != v164
                  && v133[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
                {
                  v137 = v133[5];
                }
                else
                {
LABEL_187:
                  v137 = 0;
                }
                v182 = v137;
                v183 = v163;
                v184 = 0x7FFFFFFFFFFFFFFELL;
                v185 = 0u;
                v186 = 0u;
                v138 = v174;
                v139 = v175;
                if (v174 != v175)
                {
                  while ((operations_research::sat::LinearConstraintBuilder::AddLiteralTerm(&v182, *v138 ^ 1u, v131) & 1) != 0)
                  {
                    if (++v138 == v139)
                      goto LABEL_191;
                  }
                  google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v177, (google::glog_internal_namespace_ *)"./ortools/sat/linear_relaxation.cc", 279);
                  v160 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v177);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v160, (uint64_t)"Check failed: lc.AddLiteralTerm(literal.Negated(), rhs_domain_min - min_expr_value) ", 84);
LABEL_245:
                  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v177);
                }
LABEL_191:
                v140 = v187;
                if (v188 != v187)
                {
                  v141 = 0;
                  do
                  {
                    operations_research::sat::LinearConstraintBuilder::AddTerm(&v182, *((_DWORD *)v140 + v141), *(_QWORD *)(v190 + 8 * v141));
                    ++v141;
                    v140 = v187;
                  }
                  while (v141 < ((char *)v188 - (char *)v187) >> 2);
                }
                operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v182, (uint64_t)&v177);
                v142 = *((_QWORD *)a4 + 1);
                if (v142 >= *((_QWORD *)a4 + 2))
                {
                  v143 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint>((void **)a4, (uint64_t)&v177);
                  v144 = __p[0];
                  *((_QWORD *)a4 + 1) = v143;
                  if (v144)
                  {
                    __p[1] = v144;
                    operator delete(v144);
                  }
                }
                else
                {
                  *(_OWORD *)v142 = v177;
                  *(_QWORD *)(v142 + 16) = 0;
                  *(_QWORD *)(v142 + 24) = 0;
                  *(_QWORD *)(v142 + 32) = 0;
                  *(_QWORD *)(v142 + 40) = 0;
                  *(_OWORD *)(v142 + 16) = *(_OWORD *)v178;
                  *(_QWORD *)(v142 + 32) = v179;
                  v178[0] = 0;
                  v178[1] = 0;
                  *(_QWORD *)(v142 + 48) = 0;
                  *(_QWORD *)(v142 + 56) = 0;
                  *(_OWORD *)(v142 + 40) = *(_OWORD *)__p;
                  *(_QWORD *)(v142 + 56) = v181;
                  v179 = 0;
                  __p[0] = 0;
                  __p[1] = 0;
                  v181 = 0;
                  *((_QWORD *)a4 + 1) = v142 + 64;
                }
                if (v178[0])
                {
                  v178[1] = v178[0];
                  operator delete(v178[0]);
                }
                if (*((_QWORD *)&v185 + 1))
                {
                  *(_QWORD *)&v186 = *((_QWORD *)&v185 + 1);
                  operator delete(*((void **)&v185 + 1));
                }
              }
              v145 = operations_research::sat::LinExprUpperBound((uint64_t *)&v187, v129);
              v146 = v162 - v145;
              if (v162 < v145)
              {
                v147 = (_QWORD *)*v164;
                if (!*v164)
                  goto LABEL_214;
                v148 = v164;
                do
                {
                  v149 = v147[4];
                  v150 = v149 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
                  if (v149 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
                    v151 = v147;
                  else
                    v151 = v147 + 1;
                  if (v150)
                    v148 = v147;
                  v147 = (_QWORD *)*v151;
                }
                while (*v151);
                if (v148 != v164
                  && v148[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
                {
                  v152 = v148[5];
                }
                else
                {
LABEL_214:
                  v152 = 0;
                }
                v182 = v152;
                v183 = 0x8000000000000002;
                v184 = v162;
                v185 = 0u;
                v186 = 0u;
                v153 = v174;
                v154 = v175;
                if (v174 != v175)
                {
                  while ((operations_research::sat::LinearConstraintBuilder::AddLiteralTerm(&v182, *v153 ^ 1u, v146) & 1) != 0)
                  {
                    if (++v153 == v154)
                      goto LABEL_218;
                  }
                  google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v177, (google::glog_internal_namespace_ *)"./ortools/sat/linear_relaxation.cc", 295);
                  v161 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v177);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v161, (uint64_t)"Check failed: lc.AddLiteralTerm(literal.Negated(), rhs_domain_max - max_expr_value) ", 84);
                  goto LABEL_245;
                }
LABEL_218:
                v155 = v187;
                if (v188 != v187)
                {
                  v156 = 0;
                  do
                  {
                    operations_research::sat::LinearConstraintBuilder::AddTerm(&v182, *((_DWORD *)v155 + v156), *(_QWORD *)(v190 + 8 * v156));
                    ++v156;
                    v155 = v187;
                  }
                  while (v156 < ((char *)v188 - (char *)v187) >> 2);
                }
                operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v182, (uint64_t)&v177);
                v157 = *((_QWORD *)a4 + 1);
                if (v157 >= *((_QWORD *)a4 + 2))
                {
                  v158 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint>((void **)a4, (uint64_t)&v177);
                  v159 = __p[0];
                  *((_QWORD *)a4 + 1) = v158;
                  if (v159)
                  {
                    __p[1] = v159;
                    operator delete(v159);
                  }
                }
                else
                {
                  *(_OWORD *)v157 = v177;
                  *(_QWORD *)(v157 + 16) = 0;
                  *(_QWORD *)(v157 + 24) = 0;
                  *(_QWORD *)(v157 + 32) = 0;
                  *(_QWORD *)(v157 + 40) = 0;
                  *(_OWORD *)(v157 + 16) = *(_OWORD *)v178;
                  *(_QWORD *)(v157 + 32) = v179;
                  v178[0] = 0;
                  v178[1] = 0;
                  *(_QWORD *)(v157 + 48) = 0;
                  *(_QWORD *)(v157 + 56) = 0;
                  *(_OWORD *)(v157 + 40) = *(_OWORD *)__p;
                  *(_QWORD *)(v157 + 56) = v181;
                  v179 = 0;
                  __p[0] = 0;
                  __p[1] = 0;
                  v181 = 0;
                  *((_QWORD *)a4 + 1) = v157 + 64;
                }
                if (v178[0])
                {
                  v178[1] = v178[0];
                  operator delete(v178[0]);
                }
                if (*((_QWORD *)&v185 + 1))
                {
                  *(_QWORD *)&v186 = *((_QWORD *)&v185 + 1);
                  operator delete(*((void **)&v185 + 1));
                }
              }
              if ((_QWORD)v190)
              {
                *((_QWORD *)&v190 + 1) = v190;
                operator delete((void *)v190);
              }
              if (v187)
              {
                v188 = v187;
                operator delete(v187);
              }
              if (v171[1])
              {
                *(void **)&v172 = v171[1];
                operator delete(v171[1]);
              }
              if (v170[0])
              {
                v170[1] = v170[0];
                operator delete(v170[0]);
              }
              v80 = v174;
              if (v174)
              {
                v175 = v174;
LABEL_239:
                operator delete(v80);
              }
              return;
            }
          }
          v84 = *(_DWORD *)(v83[3] + 4 * v81);
          v85 = *(_QWORD *)(v83[6] + 8 * v81);
          if (v84 >= 0)
            v86 = v85;
          else
            v86 = -v85;
          v87 = *(_DWORD *)(*v15 + 4 * (v84 ^ (v84 >> 31))) ^ ((v84 ^ (v84 >> 31)) >> 31);
          if (v73 < v74)
          {
            *v73++ = v87;
            v170[1] = v73;
            if (v76 >= v77)
            {
LABEL_131:
              v100 = (char *)v171[1];
              v101 = v76 - (char *)v171[1];
              v102 = (v76 - (char *)v171[1]) >> 3;
              v103 = v102 + 1;
              if ((unint64_t)(v102 + 1) >> 61)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              if ((v77 - (char *)v171[1]) >> 2 > v103)
                v103 = (v77 - (char *)v171[1]) >> 2;
              if ((unint64_t)(v77 - (char *)v171[1]) >= 0x7FFFFFFFFFFFFFF8)
                v104 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v104 = v103;
              if (v104)
              {
                if (v104 >> 61)
LABEL_248:
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v105 = v86;
                v106 = operator new(8 * v104);
                v107 = &v106[8 * v102];
                *v107 = v105;
                v82 = (uint64_t)(v107 + 1);
                if (v76 != v100)
                {
LABEL_140:
                  v108 = v76 - 8 - v100;
                  if (v108 < 0x168
                    || &v106[v101 - 8 - (v108 & 0xFFFFFFFFFFFFFFF8)] > &v106[v101 - 8]
                    || &v76[-(v108 & 0xFFFFFFFFFFFFFFF8) - 8] > v76 - 8
                    || (unint64_t)(v76 - v106 - v101) < 0x20)
                  {
                    v109 = v76;
                    v15 = v169;
                  }
                  else
                  {
                    v118 = (v108 >> 3) + 1;
                    v119 = 8 * (v118 & 0x3FFFFFFFFFFFFFFCLL);
                    v109 = &v76[-v119];
                    v107 = (_QWORD *)((char *)v107 - v119);
                    v120 = &v106[8 * v102 - 16];
                    v121 = (__int128 *)(v76 - 16);
                    v122 = v118 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v123 = *v121;
                      *(v120 - 1) = *(v121 - 1);
                      *v120 = v123;
                      v120 -= 2;
                      v121 -= 2;
                      v122 -= 4;
                    }
                    while (v122);
                    v15 = v169;
                    if (v118 == (v118 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_143:
                      v77 = &v106[8 * v104];
                      v171[1] = v107;
                      *((_QWORD *)&v172 + 1) = v77;
                      if (v100)
                        goto LABEL_144;
                      goto LABEL_145;
                    }
                  }
                  do
                  {
                    v110 = *((_QWORD *)v109 - 1);
                    v109 -= 8;
                    *--v107 = v110;
                  }
                  while (v109 != v100);
                  goto LABEL_143;
                }
              }
              else
              {
                v106 = 0;
                v107 = (_QWORD *)(8 * v102);
                *(_QWORD *)(8 * v102) = v86;
                v82 = 8 * v102 + 8;
                if (v76 != v100)
                  goto LABEL_140;
              }
              v15 = v169;
              v77 = &v106[8 * v104];
              v171[1] = v107;
              *((_QWORD *)&v172 + 1) = v77;
              if (v100)
              {
LABEL_144:
                v111 = v77;
                operator delete(v100);
                v77 = v111;
              }
LABEL_145:
              v6 = v168;
LABEL_105:
              *(_QWORD *)&v172 = v82;
              ++v81;
              v69 = *((_DWORD *)v6 + 15);
              v76 = (char *)v82;
              continue;
            }
LABEL_104:
            *(_QWORD *)v76 = v86;
            v82 = (uint64_t)(v76 + 8);
            goto LABEL_105;
          }
          break;
        }
        v88 = (unsigned int *)v170[0];
        v89 = (char *)v73 - (char *)v170[0];
        v90 = ((char *)v73 - (char *)v170[0]) >> 2;
        v91 = v90 + 1;
        if ((unint64_t)(v90 + 1) >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v167 = v86;
        if (((char *)v74 - (char *)v170[0]) >> 1 > v91)
          v91 = ((char *)v74 - (char *)v170[0]) >> 1;
        if ((unint64_t)((char *)v74 - (char *)v170[0]) >= 0x7FFFFFFFFFFFFFFCLL)
          v92 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v92 = v91;
        if (v92)
        {
          if (v92 >> 62)
            goto LABEL_248;
          v93 = (unint64_t)v77;
          v94 = operator new(4 * v92);
          v95 = (unsigned int *)&v94[4 * v90];
          *v95 = v87;
          v96 = v95 + 1;
          if (v73 != v88)
          {
LABEL_125:
            v97 = (char *)(v73 - 1) - (char *)v88;
            if (v97 < 0xBC
              || &v94[v89 - 4 - (v97 & 0xFFFFFFFFFFFFFFFCLL)] > &v94[v89 - 4]
              || (unsigned int *)((char *)v73 - (v97 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v73 - 1
              || (unint64_t)((char *)v73 - v94 - v89) < 0x20)
            {
              v98 = v73;
              v15 = v169;
            }
            else
            {
              v112 = (v97 >> 2) + 1;
              v113 = 4 * (v112 & 0x7FFFFFFFFFFFFFF8);
              v98 = &v73[v113 / 0xFFFFFFFFFFFFFFFCLL];
              v95 = (unsigned int *)((char *)v95 - v113);
              v114 = &v94[4 * v90 - 16];
              v115 = v73 - 4;
              v116 = v112 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v117 = *(_OWORD *)v115;
                *(v114 - 1) = *((_OWORD *)v115 - 1);
                *v114 = v117;
                v114 -= 2;
                v115 -= 8;
                v116 -= 8;
              }
              while (v116);
              v15 = v169;
              if (v112 == (v112 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_128:
                v74 = (unsigned int *)&v94[4 * v92];
                v170[0] = v95;
                v171[0] = v74;
                if (v88)
                  goto LABEL_129;
                goto LABEL_130;
              }
            }
            do
            {
              v99 = *--v98;
              *--v95 = v99;
            }
            while (v98 != v88);
            goto LABEL_128;
          }
        }
        else
        {
          v93 = (unint64_t)v77;
          v94 = 0;
          v95 = (unsigned int *)(4 * v90);
          *(_DWORD *)(4 * v90) = v87;
          v96 = (unsigned int *)(4 * v90 + 4);
          if (v73 != v88)
            goto LABEL_125;
        }
        v15 = v169;
        v74 = (unsigned int *)&v94[4 * v92];
        v170[0] = v95;
        v171[0] = v74;
        if (v88)
LABEL_129:
          operator delete(v88);
LABEL_130:
        v73 = v96;
        v86 = v167;
        v6 = v168;
        v77 = (char *)v93;
        v170[1] = v96;
        if ((unint64_t)v76 >= v93)
          goto LABEL_131;
        goto LABEL_104;
      }
    }
    v61 = v46;
    v15 = v169;
    do
    {
LABEL_71:
      v62 = *((_DWORD *)v61 - 1);
      v61 -= 4;
      *((_DWORD *)v58 - 1) = v62;
      v58 -= 4;
    }
    while (v61 != v50);
    goto LABEL_72;
  }
  if (!v8)
    goto LABEL_39;
  v34 = v7;
  do
  {
    v35 = v8[4];
    v36 = v35 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
    if (v35 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
      v37 = v8;
    else
      v37 = v8 + 1;
    if (v36)
      v34 = v8;
    v8 = (_QWORD *)*v37;
  }
  while (*v37);
  if (v34 != v7 && v34[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
    v38 = (uint64_t *)v34[5];
  else
LABEL_39:
    v38 = 0;
  v39 = 0;
  v187 = v38;
  v188 = v19;
  v189 = v20;
  v190 = 0u;
  v191 = 0u;
  if (v16 == 12)
    goto LABEL_43;
  while (1)
  {
    v40 = &operations_research::sat::_LinearConstraintProto_default_instance_;
    if (v39 >= (int)qword_25408AC60)
      break;
    while (1)
    {
      v41 = *(_DWORD *)(v40[3] + 4 * v39);
      v42 = *(_QWORD *)(v40[6] + 8 * v39);
      v43 = ~v41 <= v41 ? *(_DWORD *)(v40[3] + 4 * v39) : ~v41;
      operations_research::sat::LinearConstraintBuilder::AddTerm(&v187, *(_DWORD *)(*v15 + 4 * v43) ^ (v41 >> 31), v42);
      ++v39;
      if (*((_DWORD *)v6 + 15) != 12)
        break;
LABEL_43:
      v40 = (uint64_t *)*((_QWORD *)v6 + 6);
      if (v39 >= *((int *)v40 + 4))
        goto LABEL_49;
    }
  }
LABEL_49:
  operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v187, (uint64_t)&v177);
  v44 = *((_QWORD *)a4 + 1);
  if (v44 >= *((_QWORD *)a4 + 2))
  {
    v78 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint>((void **)a4, (uint64_t)&v177);
    v79 = __p[0];
    *((_QWORD *)a4 + 1) = v78;
    if (v79)
    {
      __p[1] = v79;
      operator delete(v79);
    }
  }
  else
  {
    *(_OWORD *)v44 = v177;
    *(_QWORD *)(v44 + 16) = 0;
    *(_QWORD *)(v44 + 24) = 0;
    *(_QWORD *)(v44 + 32) = 0;
    *(_QWORD *)(v44 + 40) = 0;
    *(_OWORD *)(v44 + 16) = *(_OWORD *)v178;
    *(_QWORD *)(v44 + 32) = v179;
    v178[0] = 0;
    v178[1] = 0;
    *(_QWORD *)(v44 + 48) = 0;
    *(_QWORD *)(v44 + 56) = 0;
    *(_OWORD *)(v44 + 40) = *(_OWORD *)__p;
    *(_QWORD *)(v44 + 56) = v181;
    v179 = 0;
    __p[0] = 0;
    __p[1] = 0;
    v181 = 0;
    *((_QWORD *)a4 + 1) = v44 + 64;
  }
  if (v178[0])
  {
    v178[1] = v178[0];
    operator delete(v178[0]);
  }
  v80 = (void *)*((_QWORD *)&v190 + 1);
  if (*((_QWORD *)&v190 + 1))
  {
    *(_QWORD *)&v191 = *((_QWORD *)&v190 + 1);
    goto LABEL_239;
  }
}

void sub_22DBA6AF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a27);
}

void sub_22DBA6AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40)
{
  uint64_t v40;

  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)&a27);
  if (__p)
  {
    a40 = (uint64_t)__p;
    operator delete(__p);
  }
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)(v40 - 152));
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a17);
  if (a24)
  {
    a25 = (uint64_t)a24;
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

void operations_research::sat::AppendNoOverlapRelaxation(operations_research::sat *this, const operations_research::sat::CpModelProto *a2, const operations_research::sat::ConstraintProto *a3, uint64_t a4, operations_research::sat::Model *a5, operations_research::sat::LinearRelaxation *a6)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t *v13;
  uint64_t v14;
  const operations_research::sat::IntervalConstraintProto *v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  const operations_research::sat::IntervalConstraintProto *v23;
  uint64_t *v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  BOOL v39;
  _QWORD *v40;
  uint64_t v41;
  operations_research::sat::Model *v42;
  unint64_t v43;
  operations_research::sat::IntegerTrail *v44;
  int v45;
  uint64_t (***v46)();
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  BOOL v51;
  _QWORD *v52;
  uint64_t v53;
  int LiteralAssociatedToEquality;
  char *v55;
  void *v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  operations_research::sat::IntegerTrail *v66;
  int v67;
  uint64_t *v68;
  __int128 v69;
  void *v70[2];
  uint64_t v71;
  void *__p[2];
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  _BYTE v79[16];
  int v80;
  int v81;
  _BYTE v82[16];
  int v83;
  int v84;
  uint64_t (**v85)();
  __int128 v86;
  uint64_t (***v87)();
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)a2 + 15) != 20)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v69, (google::glog_internal_namespace_ *)"./ortools/sat/linear_relaxation.cc", 479);
    v57 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v69);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"Check failed: ct.has_no_overlap() ", 34);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v69);
  }
  if ((int)a3 >= 3 && !*((_DWORD *)a2 + 4) && *(int *)(*((_QWORD *)a2 + 6) + 16) >= 2)
  {
    v68 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>(a4);
    v8 = &operations_research::sat::_NoOverlapConstraintProto_default_instance_;
    v9 = *((_DWORD *)a2 + 15) == 20
       ? (uint64_t *)*((_QWORD *)a2 + 6)
       : &operations_research::sat::_NoOverlapConstraintProto_default_instance_;
    v10 = *((unsigned int *)v9 + 4);
    v66 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a4);
    v59 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a4);
    if ((int)v10 >= 1)
    {
      v11 = 0;
      v58 = (_QWORD *)(a4 + 32);
      for (i = 1; ; ++i)
      {
        while (1)
        {
          v13 = *((_DWORD *)a2 + 15) == 20 ? (uint64_t *)*((_QWORD *)a2 + 6) : v8;
          v14 = *(_QWORD *)(*((_QWORD *)this + 7) + 8 * *(int *)(v13[3] + 4 * v11) + 8);
          if (!*(_DWORD *)(v14 + 16))
            break;
          ++v11;
          ++i;
          if (v11 == v10)
            return;
        }
        v15 = (const operations_research::sat::IntervalConstraintProto *)&operations_research::sat::_IntervalConstraintProto_default_instance_;
        if (*(_DWORD *)(v14 + 60) == 19)
          v15 = *(const operations_research::sat::IntervalConstraintProto **)(v14 + 48);
        operations_research::sat::IntervalConstraintProto::IntervalConstraintProto((operations_research::sat::IntervalConstraintProto *)v82, v15);
        v63 = v11 + 1;
        if (v11 + 1 < v10)
          break;
LABEL_10:
        operations_research::sat::IntervalConstraintProto::~IntervalConstraintProto((operations_research::sat::IntervalConstraintProto *)v82);
        v11 = v63;
        if (v63 == v10)
          return;
      }
      v16 = *v68;
      if (~v84 <= v84)
        v17 = v84;
      else
        v17 = ~v84;
      v18 = *(_DWORD *)(v16 + 4 * v17) ^ (v84 >> 31);
      if (~v83 <= v83)
        v19 = v83;
      else
        v19 = ~v83;
      v60 = *(_DWORD *)(v16 + 4 * v19) ^ (v83 >> 31);
      v61 = v18;
      v62 = v18;
      v67 = v18 ^ 1;
      v20 = i;
      while (1)
      {
        if (*((_DWORD *)a2 + 15) == 20)
          v21 = (uint64_t *)*((_QWORD *)a2 + 6);
        else
          v21 = v8;
        v22 = *(_QWORD *)(*((_QWORD *)this + 7) + 8 * *(int *)(v21[3] + 4 * v20) + 8);
        if (*(_DWORD *)(v22 + 16))
          goto LABEL_28;
        v23 = (const operations_research::sat::IntervalConstraintProto *)&operations_research::sat::_IntervalConstraintProto_default_instance_;
        if (*(_DWORD *)(v22 + 60) == 19)
          v23 = *(const operations_research::sat::IntervalConstraintProto **)(v22 + 48);
        v24 = v8;
        operations_research::sat::IntervalConstraintProto::IntervalConstraintProto((operations_research::sat::IntervalConstraintProto *)v79, v23);
        if (~v80 <= v80)
          v25 = v80;
        else
          v25 = ~v80;
        v26 = *(_DWORD *)(*v68 + 4 * v25);
        v27 = *((_QWORD *)v66 + 5);
        v28 = v26 ^ (v80 >> 31);
        if (*(_QWORD *)(v27 + 12 * v28) < -*(_QWORD *)(v27 + 12 * v67))
        {
          v29 = ~v81 <= v81 ? v81 : ~v81;
          v30 = *(_DWORD *)(*v68 + 4 * v29) ^ (v81 >> 31);
          if (*(_QWORD *)(v27 + 12 * v60) < -*(_QWORD *)(v27 + 12 * (v30 ^ 1)))
          {
            v31 = *(_QWORD *)(v27 + 12 * v62);
            v32 = -*(_QWORD *)(v27 + 12 * (v28 ^ 1));
            v33 = *(_QWORD *)(v27 + 12 * v30);
            v34 = -*(_QWORD *)(v27 + 12 * (v60 ^ 1));
            if (v31 <= v32 && v33 <= v34)
            {
              v85 = &off_24F984000;
              v86 = xmmword_22DCE6500;
              v87 = &v85;
              v44 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a4);
              v45 = operations_research::sat::IntegerTrail::AddIntegerVariable((uint64_t)v44, v86, *((uint64_t *)&v86 + 1));
              v46 = v87;
              if (v87 == &v85)
              {
                v46 = &v85;
                v47 = 4;
LABEL_80:
                (*v46)[v47]();
              }
              else if (v87)
              {
                v47 = 5;
                goto LABEL_80;
              }
              LiteralAssociatedToEquality = operations_research::sat::IntegerEncoder::GetOrCreateLiteralAssociatedToEquality(v59, v45, 1);
              goto LABEL_27;
            }
            if (v31 <= v32)
            {
              v48 = (_QWORD *)*v58;
              if (!*v58)
                goto LABEL_76;
              v49 = (_QWORD *)(a4 + 32);
              do
              {
                v50 = v48[4];
                v51 = v50 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
                if (v50 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
                  v52 = v48;
                else
                  v52 = v48 + 1;
                if (v51)
                  v49 = v48;
                v48 = (_QWORD *)*v52;
              }
              while (*v52);
              if (v49 != v58
                && v49[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
              {
                v53 = v49[5];
              }
              else
              {
LABEL_76:
                v53 = 0;
              }
              v74 = v53;
              v75 = 0x8000000000000002;
              v76 = 0u;
              v77 = 0u;
              v78 = 0;
              operations_research::sat::LinearConstraintBuilder::AddTerm(&v74, v61, 1);
              operations_research::sat::LinearConstraintBuilder::AddTerm(&v74, v28, -1);
              operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v74, (uint64_t)&v69);
              v42 = a5;
              v43 = *((_QWORD *)a5 + 1);
              if (v43 < *((_QWORD *)a5 + 2))
                goto LABEL_78;
LABEL_82:
              v55 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint>((void **)a5, (uint64_t)&v69);
              v56 = __p[0];
              *((_QWORD *)v42 + 1) = v55;
              if (v56)
              {
                __p[1] = v56;
                operator delete(v56);
              }
LABEL_84:
              if (v70[0])
              {
                v70[1] = v70[0];
                operator delete(v70[0]);
              }
              if ((_QWORD)v77)
              {
                *((_QWORD *)&v77 + 1) = v77;
                operator delete((void *)v77);
              }
              goto LABEL_27;
            }
            if (v33 <= v34)
            {
              v36 = (_QWORD *)(a4 + 32);
              v37 = (_QWORD *)*v58;
              if (!*v58)
                goto LABEL_59;
              do
              {
                v38 = v37[4];
                v39 = v38 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
                if (v38 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
                  v40 = v37;
                else
                  v40 = v37 + 1;
                if (v39)
                  v36 = v37;
                v37 = (_QWORD *)*v40;
              }
              while (*v40);
              if (v36 != v58
                && v36[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
              {
                v41 = v36[5];
              }
              else
              {
LABEL_59:
                v41 = 0;
              }
              v74 = v41;
              v75 = 0x8000000000000002;
              v76 = 0u;
              v77 = 0u;
              v78 = 0;
              operations_research::sat::LinearConstraintBuilder::AddTerm(&v74, v30, 1);
              operations_research::sat::LinearConstraintBuilder::AddTerm(&v74, v60, -1);
              operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v74, (uint64_t)&v69);
              v42 = a5;
              v43 = *((_QWORD *)a5 + 1);
              if (v43 >= *((_QWORD *)a5 + 2))
                goto LABEL_82;
LABEL_78:
              *(_OWORD *)v43 = v69;
              *(_QWORD *)(v43 + 16) = 0;
              *(_QWORD *)(v43 + 24) = 0;
              *(_QWORD *)(v43 + 32) = 0;
              *(_QWORD *)(v43 + 40) = 0;
              *(_OWORD *)(v43 + 16) = *(_OWORD *)v70;
              *(_QWORD *)(v43 + 32) = v71;
              v70[0] = 0;
              v70[1] = 0;
              v71 = 0;
              *(_QWORD *)(v43 + 48) = 0;
              *(_QWORD *)(v43 + 56) = 0;
              *(_OWORD *)(v43 + 40) = *(_OWORD *)__p;
              *(_QWORD *)(v43 + 56) = v73;
              __p[0] = 0;
              __p[1] = 0;
              v73 = 0;
              *((_QWORD *)v42 + 1) = v43 + 64;
              goto LABEL_84;
            }
          }
        }
LABEL_27:
        operations_research::sat::IntervalConstraintProto::~IntervalConstraintProto((operations_research::sat::IntervalConstraintProto *)v79);
        v8 = v24;
LABEL_28:
        if (++v20 == v10)
          goto LABEL_10;
      }
    }
  }
}

void sub_22DBA7220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41)
{
  uint64_t v41;

  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)&a28);
  if (__p)
  {
    a41 = (uint64_t)__p;
    operator delete(__p);
    operations_research::sat::IntervalConstraintProto::~IntervalConstraintProto((operations_research::sat::IntervalConstraintProto *)(v41 - 192));
    operations_research::sat::IntervalConstraintProto::~IntervalConstraintProto((operations_research::sat::IntervalConstraintProto *)(v41 - 160));
    _Unwind_Resume(a1);
  }
  operations_research::sat::IntervalConstraintProto::~IntervalConstraintProto((operations_research::sat::IntervalConstraintProto *)(v41 - 192));
  operations_research::sat::IntervalConstraintProto::~IntervalConstraintProto((operations_research::sat::IntervalConstraintProto *)(v41 - 160));
  _Unwind_Resume(a1);
}

void sub_22DBA72D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  operations_research::sat::IntervalConstraintProto::~IntervalConstraintProto((operations_research::sat::IntervalConstraintProto *)(v1 - 160));
  _Unwind_Resume(a1);
}

void sub_22DBA72E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a28);
}

void operations_research::sat::`anonymous namespace'::AppendEnforcedUpperBound(int a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  operations_research::sat::IntegerTrail *v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  BOOL v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  void *v23;
  _QWORD *v24;
  __int128 v25;
  void *v26[2];
  uint64_t v27;
  void *__p[2];
  uint64_t v29;
  _QWORD v30[3];
  void *v31[2];
  __int128 v32;

  v10 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a4);
  v11 = a2;
  v12 = -*(_QWORD *)(*((_QWORD *)v10 + 5) + 12 * a3) - *(_QWORD *)(*((_QWORD *)v10 + 5) + 12 * (a2 ^ 1));
  v15 = *(_QWORD **)(a4 + 32);
  v14 = a4 + 32;
  v13 = v15;
  if (!v15)
    goto LABEL_12;
  v16 = (_QWORD *)v14;
  do
  {
    v17 = v13[4];
    v18 = v17 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
    if (v17 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
      v19 = v13;
    else
      v19 = v13 + 1;
    if (v18)
      v16 = v13;
    v13 = (_QWORD *)*v19;
  }
  while (*v19);
  if (v16 != (_QWORD *)v14
    && v16[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
  {
    v20 = v16[5];
  }
  else
  {
LABEL_12:
    v20 = 0;
  }
  v30[0] = v20;
  v30[1] = 0x8000000000000002;
  v30[2] = v12;
  *(_OWORD *)v31 = 0u;
  v32 = 0u;
  operations_research::sat::LinearConstraintBuilder::AddTerm(v30, v11, 1);
  operations_research::sat::LinearConstraintBuilder::AddTerm(v30, a3, -1);
  if ((operations_research::sat::LinearConstraintBuilder::AddLiteralTerm(v30, a1, v12) & 1) == 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v25, (google::glog_internal_namespace_ *)"./ortools/sat/linear_relaxation.cc", 255);
    v24 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Check failed: lc.AddLiteralTerm(enforcing_lit, max_term_value) ", 63);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v25);
  }
  operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)v30, (uint64_t)&v25);
  v21 = *(_QWORD *)(a5 + 8);
  if (v21 >= *(_QWORD *)(a5 + 16))
  {
    v22 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint>((void **)a5, (uint64_t)&v25);
    v23 = __p[0];
    *(_QWORD *)(a5 + 8) = v22;
    if (v23)
    {
      __p[1] = v23;
      operator delete(v23);
    }
  }
  else
  {
    *(_OWORD *)v21 = v25;
    *(_QWORD *)(v21 + 16) = 0;
    *(_QWORD *)(v21 + 24) = 0;
    *(_QWORD *)(v21 + 32) = 0;
    *(_QWORD *)(v21 + 40) = 0;
    *(_OWORD *)(v21 + 16) = *(_OWORD *)v26;
    *(_QWORD *)(v21 + 32) = v27;
    v26[0] = 0;
    v26[1] = 0;
    *(_QWORD *)(v21 + 48) = 0;
    *(_QWORD *)(v21 + 56) = 0;
    *(_OWORD *)(v21 + 40) = *(_OWORD *)__p;
    *(_QWORD *)(v21 + 56) = v29;
    v27 = 0;
    __p[0] = 0;
    __p[1] = 0;
    v29 = 0;
    *(_QWORD *)(a5 + 8) = v21 + 64;
  }
  if (v26[0])
  {
    v26[1] = v26[0];
    operator delete(v26[0]);
  }
  if (v31[1])
  {
    *(void **)&v32 = v31[1];
    operator delete(v31[1]);
  }
}

void sub_22DBA74E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)&a10);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void operations_research::sat::AppendLinMaxRelaxation(int a1@<W0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int **a5@<X8>)
{
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  BOOL v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t **v33;
  uint64_t i;
  operations_research::sat::IntegerTrail *v35;
  int v36;
  uint64_t (***v37)();
  uint64_t v38;
  unint64_t v39;
  int *v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _BYTE *v48;
  int *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int *v53;
  _OWORD *v54;
  int *v55;
  uint64_t v56;
  __int128 v57;
  int v58;
  int LiteralAssociatedToEquality;
  int v60;
  char *v61;
  uint64_t v62;
  uint64_t **v63;
  char *v64;
  int64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  int *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  __int128 v80;
  int v81;
  _DWORD *v82;
  _BYTE *v83;
  void *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  _BYTE *v89;
  int *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _DWORD *v94;
  _OWORD *v95;
  __int128 *v96;
  uint64_t v97;
  __int128 v98;
  int v99;
  char **v100;
  char *v101;
  char *v102;
  void *v103;
  char *v104;
  int64_t v105;
  int64_t v106;
  unint64_t v107;
  int64_t v108;
  unint64_t v109;
  _BYTE *v110;
  _QWORD *v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  _OWORD *v117;
  char *v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  operations_research::sat::IntegerSumLE *v122;
  _DWORD *v123;
  _QWORD *v124;
  _QWORD *v125;
  char *v126;
  int v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int *v132;
  char *v133;
  unint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  int v138;
  int v139;
  char *v140;
  int v141;
  unint64_t v142;
  _DWORD *v143;
  char *v144;
  size_t v145;
  char *v146;
  char *v147;
  uint64_t j;
  uint64_t k;
  int *v150;
  int *v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t Coefficient;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  _QWORD *v162;
  _QWORD *v163;
  unint64_t v164;
  BOOL v165;
  _QWORD *v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  char *v174;
  void *v175;
  unint64_t v176;
  char *v177;
  void *v178;
  char *v179;
  char *v180;
  void *v181;
  char *v182;
  void *v183;
  void *v184;
  _QWORD *v185;
  _QWORD *v186;
  uint64_t v187;
  unint64_t v188;
  int v189;
  _QWORD *v191;
  int **v193;
  operations_research::sat::GenericLiteralWatcher *v194;
  uint64_t v195;
  operations_research::sat::IntegerTrail *v196;
  void *v198;
  _DWORD *v199;
  __int128 v200;
  __int128 v201;
  uint64_t v202;
  void *v203;
  char *v204;
  void *v205;
  int v206[2];
  uint64_t v207;
  void *v208;
  char *v209;
  char *v210;
  void *v211[2];
  void *v212[2];
  void *__p[3];
  uint64_t v214;
  uint64_t v215;
  int64x2_t v216;
  __int128 v217;
  __int128 v218;
  _BYTE v219[24];
  _BYTE *v220;
  uint64_t (**v221)();
  __int128 v222;
  uint64_t (***v223)();
  uint64_t v224;

  v224 = *MEMORY[0x24BDAC8D0];
  v7 = *a2;
  v8 = a2[1];
  if (*a2 == v8)
  {
    v23 = *a2;
  }
  else
  {
    v9 = (_QWORD *)(a3 + 32);
    do
    {
      v11 = (_QWORD *)*v9;
      if (!*v9)
        goto LABEL_15;
      v12 = (_QWORD *)(a3 + 32);
      do
      {
        v13 = v11[4];
        v14 = v13 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
        if (v13 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
          v15 = v11;
        else
          v15 = v11 + 1;
        if (v14)
          v12 = v11;
        v11 = (_QWORD *)*v15;
      }
      while (*v15);
      if (v12 != v9 && v12[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
        v16 = v12[5];
      else
LABEL_15:
        v16 = 0;
      v17 = -v7[6];
      v215 = v16;
      v216.i64[0] = 0x8000000000000002;
      v216.i64[1] = v17;
      v217 = 0u;
      v218 = 0u;
      v18 = *v7;
      if (v7[1] != *v7)
      {
        v19 = 0;
        do
        {
          operations_research::sat::LinearConstraintBuilder::AddTerm(&v215, *(_DWORD *)(v18 + 4 * v19), *(_QWORD *)(v7[3] + 8 * v19));
          ++v19;
          v18 = *v7;
        }
        while (v19 < (v7[1] - *v7) >> 2);
      }
      operations_research::sat::LinearConstraintBuilder::AddTerm(&v215, a1, -1);
      operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v215, (uint64_t)v211);
      v20 = *(_QWORD *)(a4 + 8);
      if (v20 >= *(_QWORD *)(a4 + 16))
      {
        v21 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint>((void **)a4, (uint64_t)v211);
        v22 = __p[1];
        *(_QWORD *)(a4 + 8) = v21;
        if (v22)
        {
          __p[2] = v22;
          operator delete(v22);
        }
      }
      else
      {
        *(_OWORD *)v20 = *(_OWORD *)v211;
        *(_QWORD *)(v20 + 16) = 0;
        *(_QWORD *)(v20 + 24) = 0;
        *(_QWORD *)(v20 + 32) = 0;
        *(_QWORD *)(v20 + 40) = 0;
        *(_OWORD *)(v20 + 16) = *(_OWORD *)v212;
        *(void **)(v20 + 32) = __p[0];
        v212[0] = 0;
        v212[1] = 0;
        __p[0] = 0;
        *(_QWORD *)(v20 + 48) = 0;
        *(_QWORD *)(v20 + 56) = 0;
        *(_OWORD *)(v20 + 40) = *(_OWORD *)&__p[1];
        *(_QWORD *)(v20 + 56) = v214;
        __p[1] = 0;
        __p[2] = 0;
        v214 = 0;
        *(_QWORD *)(a4 + 8) = v20 + 64;
      }
      if (v212[0])
      {
        v212[1] = v212[0];
        operator delete(v212[0]);
      }
      if (*((_QWORD *)&v217 + 1))
      {
        *(_QWORD *)&v218 = *((_QWORD *)&v217 + 1);
        operator delete(*((void **)&v217 + 1));
      }
      v7 += 7;
    }
    while (v7 != v8);
    v7 = *a2;
    v23 = a2[1];
  }
  v195 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a3);
  v194 = operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>(a3);
  *a5 = 0;
  a5[1] = 0;
  v24 = 0x6DB6DB6DB6DB6DB7 * (v23 - v7);
  a5[2] = 0;
  v208 = 0;
  v209 = 0;
  v210 = 0;
  v25 = v24 << 32;
  if (v24 << 32)
  {
    if (v25 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v26 = (char *)operator new((4 * v24) & 0x3FFFFFFFFLL);
    *a5 = (int *)v26;
    a5[1] = (int *)v26;
    a5[2] = (int *)&v26[4 * (int)v24];
    v208 = operator new((4 * v24) & 0x3FFFFFFFFLL);
    v209 = (char *)v208;
    v210 = (char *)v208 + 4 * (int)v24;
    v25 = v24 << 32;
  }
  v187 = v25;
  v188 = (int)v24;
  v27 = *(_QWORD **)(a3 + 32);
  v191 = (_QWORD *)(a3 + 32);
  if (!v27)
    goto LABEL_44;
  v28 = a3 + 32;
  do
  {
    v29 = v27[4];
    v30 = v29 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
    if (v29 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
      v31 = v27;
    else
      v31 = v27 + 1;
    if (v30)
      v28 = (uint64_t)v27;
    v27 = (_QWORD *)*v31;
  }
  while (*v31);
  if (v28 != a3 + 32
    && *(_QWORD *)(v28 + 32) <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
  {
    v32 = *(_QWORD *)(v28 + 40);
  }
  else
  {
LABEL_44:
    v32 = 0;
  }
  v215 = v32;
  v216 = vdupq_n_s64(1uLL);
  v217 = 0u;
  v218 = 0u;
  v189 = v24;
  v193 = a5;
  v33 = a2;
  if ((int)v24 >= 1)
  {
    for (i = 0; i != v189; ++i)
    {
      v222 = xmmword_22DCE6500;
      v221 = &off_24F984000;
      v223 = &v221;
      v35 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a3);
      v36 = operations_research::sat::IntegerTrail::AddIntegerVariable((uint64_t)v35, v222, *((uint64_t *)&v222 + 1));
      v37 = v223;
      if (v223 == &v221)
      {
        v37 = &v221;
        v38 = 4;
      }
      else
      {
        if (!v223)
          goto LABEL_53;
        v38 = 5;
      }
      (*v37)[v38]();
LABEL_53:
      v40 = a5[1];
      v39 = (unint64_t)a5[2];
      if ((unint64_t)v40 < v39)
      {
        *v40 = v36;
        v41 = (uint64_t)(v40 + 1);
        goto LABEL_74;
      }
      v42 = *a5;
      v43 = (char *)v40 - (char *)*a5;
      v44 = v43 >> 2;
      v45 = (v43 >> 2) + 1;
      if (v45 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v46 = v39 - (_QWORD)v42;
      if (v46 >> 1 > v45)
        v45 = v46 >> 1;
      if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
        v47 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v47 = v45;
      if (v47)
      {
        if (v47 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v48 = operator new(4 * v47);
        v49 = (int *)&v48[4 * v44];
        *v49 = v36;
        v41 = (uint64_t)(v49 + 1);
        if (v40 == v42)
          goto LABEL_72;
LABEL_66:
        v50 = (char *)(v40 - 1) - (char *)v42;
        if (v50 < 0x2C)
          goto LABEL_265;
        if ((unint64_t)((char *)v40 - &v48[v43]) < 0x20)
          goto LABEL_265;
        v51 = (v50 >> 2) + 1;
        v52 = 4 * (v51 & 0x7FFFFFFFFFFFFFF8);
        v53 = &v40[v52 / 0xFFFFFFFFFFFFFFFCLL];
        v49 = (int *)((char *)v49 - v52);
        v54 = &v48[4 * v44 - 16];
        v55 = v40 - 4;
        v56 = v51 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v57 = *(_OWORD *)v55;
          *(v54 - 1) = *((_OWORD *)v55 - 1);
          *v54 = v57;
          v54 -= 2;
          v55 -= 8;
          v56 -= 8;
        }
        while (v56);
        v40 = v53;
        if (v51 != (v51 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_265:
          do
          {
            v58 = *--v40;
            *--v49 = v58;
          }
          while (v40 != v42);
        }
        goto LABEL_72;
      }
      v48 = 0;
      v49 = (int *)(4 * v44);
      *(_DWORD *)(4 * v44) = v36;
      v41 = 4 * v44 + 4;
      if (v40 != v42)
        goto LABEL_66;
LABEL_72:
      a5 = v193;
      *v193 = v49;
      v193[1] = (int *)v41;
      v193[2] = (int *)&v48[4 * v47];
      if (v42)
        operator delete(v42);
LABEL_74:
      a5[1] = (int *)v41;
      LiteralAssociatedToEquality = operations_research::sat::IntegerEncoder::GetOrCreateLiteralAssociatedToEquality(v195, v36, 1);
      v60 = LiteralAssociatedToEquality;
      v61 = v209;
      if (v209 < v210)
      {
        *(_DWORD *)v209 = LiteralAssociatedToEquality;
        v62 = (uint64_t)(v61 + 4);
        v63 = a2;
        goto LABEL_96;
      }
      v64 = (char *)v208;
      v65 = v209 - (_BYTE *)v208;
      v66 = (v209 - (_BYTE *)v208) >> 2;
      v67 = v66 + 1;
      if ((unint64_t)(v66 + 1) >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v68 = v210 - (_BYTE *)v208;
      if ((v210 - (_BYTE *)v208) >> 1 > v67)
        v67 = v68 >> 1;
      if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL)
        v69 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v69 = v67;
      if (v69)
      {
        if (v69 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v70 = (char *)operator new(4 * v69);
        v71 = (int *)&v70[4 * v66];
        *v71 = v60;
        v62 = (uint64_t)(v71 + 1);
        if (v61 == v64)
        {
LABEL_88:
          v63 = a2;
          goto LABEL_94;
        }
      }
      else
      {
        v70 = 0;
        v71 = (int *)(4 * v66);
        *(_DWORD *)(4 * v66) = v60;
        v62 = 4 * v66 + 4;
        if (v61 == v64)
          goto LABEL_88;
      }
      v72 = v61 - 4 - v64;
      if (v72 < 0x2C)
      {
        v63 = a2;
        do
        {
LABEL_93:
          v81 = *((_DWORD *)v61 - 1);
          v61 -= 4;
          *--v71 = v81;
        }
        while (v61 != v64);
        goto LABEL_94;
      }
      v73 = v61 - &v70[v65];
      v63 = a2;
      if (v73 < 0x20)
        goto LABEL_93;
      v74 = (v72 >> 2) + 1;
      v75 = 4 * (v74 & 0x7FFFFFFFFFFFFFF8);
      v76 = &v61[-v75];
      v71 = (int *)((char *)v71 - v75);
      v77 = &v70[4 * v66 - 16];
      v78 = v61 - 16;
      v79 = v74 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v80 = *(_OWORD *)v78;
        *((_OWORD *)v77 - 1) = *((_OWORD *)v78 - 1);
        *(_OWORD *)v77 = v80;
        v77 -= 32;
        v78 -= 32;
        v79 -= 8;
      }
      while (v79);
      v61 = v76;
      if (v74 != (v74 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_93;
LABEL_94:
      v208 = v71;
      v209 = (char *)v62;
      v210 = &v70[4 * v69];
      if (v64)
        operator delete(v64);
LABEL_96:
      v209 = (char *)v62;
      *(_OWORD *)v212 = 0u;
      memset(__p, 0, sizeof(__p));
      *(_OWORD *)v211 = 0u;
      operations_research::sat::NegationOf((int8x16_t **)&(*v63)[7 * i], (int8x16_t **)&v198);
      if (v211[0])
      {
        v211[1] = v211[0];
        operator delete(v211[0]);
      }
      v83 = v198;
      v82 = v199;
      v211[0] = v198;
      v211[1] = v199;
      v212[0] = (void *)v200;
      if ((unint64_t)v199 < (unint64_t)v200)
      {
        *v199 = a1;
        v84 = v82 + 1;
        goto LABEL_120;
      }
      v85 = ((char *)v199 - (_BYTE *)v198) >> 2;
      v86 = v85 + 1;
      if ((unint64_t)(v85 + 1) >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v87 = v200 - (_QWORD)v198;
      if ((uint64_t)(v200 - (_QWORD)v198) >> 1 > v86)
        v86 = v87 >> 1;
      if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL)
        v88 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v88 = v86;
      if (v88)
      {
        if (v88 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v89 = operator new(4 * v88);
        v90 = (int *)&v89[4 * v85];
        *v90 = a1;
        v84 = v90 + 1;
        if (v82 == (_DWORD *)v83)
        {
LABEL_112:
          v63 = a2;
          goto LABEL_118;
        }
      }
      else
      {
        v89 = 0;
        v90 = (int *)(4 * v85);
        *(_DWORD *)(4 * v85) = a1;
        v84 = (void *)(4 * v85 + 4);
        if (v82 == (_DWORD *)v83)
          goto LABEL_112;
      }
      v91 = (char *)(v82 - 1) - v83;
      if (v91 < 0x2C)
      {
        v63 = a2;
        do
        {
LABEL_117:
          v99 = *--v82;
          *--v90 = v99;
        }
        while (v82 != (_DWORD *)v83);
        goto LABEL_118;
      }
      v63 = a2;
      if ((unint64_t)(v83 - v89) < 0x20)
        goto LABEL_117;
      v92 = (v91 >> 2) + 1;
      v93 = 4 * (v92 & 0x7FFFFFFFFFFFFFF8);
      v94 = &v82[v93 / 0xFFFFFFFFFFFFFFFCLL];
      v90 = (int *)((char *)v90 - v93);
      v95 = &v89[4 * v85 - 16];
      v96 = (__int128 *)(v82 - 4);
      v97 = v92 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v98 = *v96;
        *(v95 - 1) = *(v96 - 1);
        *v95 = v98;
        v95 -= 2;
        v96 -= 2;
        v97 -= 8;
      }
      while (v97);
      v82 = v94;
      if (v92 != (v92 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_117;
LABEL_118:
      v211[0] = v90;
      v211[1] = v84;
      v212[0] = &v89[4 * v88];
      if (v83)
        operator delete(v83);
LABEL_120:
      v211[1] = v84;
      v100 = (char **)&(*v63)[7 * i + 3];
      if (&v212[1] != (void **)v100)
      {
        v101 = (char *)(*v63)[7 * i + 4];
        std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(&v212[1], *v100, v101, (v101 - *v100) >> 3);
      }
      v102 = (char *)__p[0];
      if (__p[0] >= __p[1])
      {
        v104 = (char *)v212[1];
        v105 = (char *)__p[0] - (char *)v212[1];
        v106 = ((char *)__p[0] - (char *)v212[1]) >> 3;
        v107 = v106 + 1;
        if ((unint64_t)(v106 + 1) >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v108 = (char *)__p[1] - (char *)v212[1];
        if (((char *)__p[1] - (char *)v212[1]) >> 2 > v107)
          v107 = v108 >> 2;
        if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFF8)
          v109 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v109 = v107;
        if (v109)
        {
          if (v109 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v110 = operator new(8 * v109);
          v111 = &v110[8 * v106];
          *v111 = 1;
          v103 = v111 + 1;
          if (v102 != v104)
          {
LABEL_133:
            v112 = v102 - 8 - v104;
            if (v112 < 0x58)
            {
              v33 = a2;
              goto LABEL_141;
            }
            v113 = v102 - &v110[v105];
            v33 = a2;
            if (v113 < 0x20)
              goto LABEL_266;
            v114 = (v112 >> 3) + 1;
            v115 = 8 * (v114 & 0x3FFFFFFFFFFFFFFCLL);
            v116 = &v102[-v115];
            v111 = (_QWORD *)((char *)v111 - v115);
            v117 = &v110[8 * v106 - 16];
            v118 = v102 - 16;
            v119 = v114 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v120 = *(_OWORD *)v118;
              *(v117 - 1) = *((_OWORD *)v118 - 1);
              *v117 = v120;
              v117 -= 2;
              v118 -= 32;
              v119 -= 4;
            }
            while (v119);
            v102 = v116;
            if (v114 != (v114 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_266:
              do
              {
LABEL_141:
                v121 = *((_QWORD *)v102 - 1);
                v102 -= 8;
                *--v111 = v121;
              }
              while (v102 != v104);
            }
LABEL_142:
            v212[1] = v111;
            __p[0] = v103;
            __p[1] = &v110[8 * v109];
            if (v104)
              operator delete(v104);
            a5 = v193;
            goto LABEL_145;
          }
        }
        else
        {
          v110 = 0;
          v111 = (_QWORD *)(8 * v106);
          *(_QWORD *)(8 * v106) = 1;
          v103 = (void *)(8 * v106 + 8);
          if (v102 != v104)
            goto LABEL_133;
        }
        v33 = a2;
        goto LABEL_142;
      }
      *(_QWORD *)__p[0] = 1;
      v103 = v102 + 8;
      a5 = v193;
      v33 = a2;
LABEL_145:
      __p[0] = v103;
      v122 = (operations_research::sat::IntegerSumLE *)operator new();
      v123 = operator new(4uLL);
      v198 = v123;
      *v123 = v60;
      v199 = v123 + 1;
      *(_QWORD *)&v200 = v123 + 1;
      operations_research::sat::IntegerSumLE::IntegerSumLE(v122, &v198, v211, &v212[1], (*v33)[7 * i + 6], a3);
      if (v198)
      {
        v199 = v198;
        operator delete(v198);
      }
      operations_research::sat::IntegerSumLE::RegisterWith(v122, v194);
      v124 = (_QWORD *)operator new();
      *v124 = &off_24F984090;
      v124[1] = v122;
      v198 = v124;
      v125 = *(_QWORD **)(a3 + 56);
      if ((unint64_t)v125 >= *(_QWORD *)(a3 + 64))
      {
        v126 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a3 + 48), &v198);
      }
      else
      {
        *v125 = v124;
        v126 = (char *)(v125 + 1);
      }
      *(_QWORD *)(a3 + 56) = v126;
      if ((operations_research::sat::LinearConstraintBuilder::AddLiteralTerm(&v215, v60, 1) & 1) == 0)
      {
        google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v198, (google::glog_internal_namespace_ *)"./ortools/sat/linear_relaxation.cc", 666);
        v186 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v198);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v186, (uint64_t)"Check failed: lc_exactly_one.AddLiteralTerm(z_lit, IntegerValue(1)) ", 68);
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v198);
      }
      if (v212[1])
      {
        __p[0] = v212[1];
        operator delete(v212[1]);
      }
      if (v211[0])
      {
        v211[1] = v211[0];
        operator delete(v211[0]);
      }
    }
  }
  operations_research::sat::ExactlyOneConstraint((uint64_t)&v208, (uint64_t)v219);
  v211[0] = (void *)a3;
  v127 = v189;
  if (!v220)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_BYTE *, void **))(*(_QWORD *)v220 + 48))(v220, v211);
  v128 = v220;
  v129 = a4;
  if (v220 == v219)
  {
    v130 = 4;
    v128 = v219;
  }
  else
  {
    if (!v220)
      goto LABEL_161;
    v130 = 5;
  }
  (*(void (**)(void))(*v128 + 8 * v130))();
LABEL_161:
  v205 = 0;
  *(_QWORD *)v206 = 0;
  v207 = 0;
  if (v189 < 1)
  {
    v133 = 0;
    v132 = 0;
  }
  else
  {
    v131 = 0;
    do
    {
      std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const*>,std::__wrap_iter<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const*>>((unint64_t *)&v205, *(void **)v206, (char *)(*v33)[v131], (char *)(*v33)[v131 + 1], ((*v33)[v131 + 1] - (*v33)[v131]) >> 2);
      v131 += 7;
    }
    while (7 * v189 != v131);
    v132 = (int *)v205;
    v133 = *(char **)v206;
  }
  v134 = 126 - 2 * __clz((v133 - (char *)v132) >> 2);
  if (v133 == (char *)v132)
    v135 = 0;
  else
    v135 = v134;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> *,false>(v132, v133, (uint64_t)v211, v135, 1);
  v136 = *(char **)v206;
  if (v205 != *(void **)v206)
  {
    v137 = (char *)v205 + 4;
    while (v137 != *(char **)v206)
    {
      v138 = *((_DWORD *)v137 - 1);
      v139 = *(_DWORD *)v137;
      v137 += 4;
      if (v138 == v139)
      {
        v140 = v137 - 8;
        while (v137 != v136)
        {
          v141 = v138;
          v138 = *(_DWORD *)v137;
          if (v141 != *(_DWORD *)v137)
          {
            *((_DWORD *)v140 + 1) = v138;
            v140 += 4;
          }
          v137 += 4;
        }
        v143 = v140 + 4;
        v144 = (char *)(v136 - (v140 + 4));
        if (v136 == v140 + 4)
          break;
        if (v136 != &v144[(_QWORD)v143])
          memmove(v140 + 4, &v144[(_QWORD)v143], 0);
        *(_QWORD *)v206 = v143;
        v127 = v189;
        v211[0] = 0;
        v211[1] = 0;
        v212[0] = 0;
        v142 = v187;
        if (v187)
          goto LABEL_185;
        goto LABEL_187;
      }
    }
  }
  v211[0] = 0;
  v211[1] = 0;
  v212[0] = 0;
  v142 = v187;
  if (v187)
  {
LABEL_185:
    if ((v142 & 0x8000000000000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v145 = v142 >> 29;
    v146 = (char *)operator new(v142 >> 29);
    v147 = &v146[8 * v188];
    v211[0] = v146;
    v212[0] = v147;
    bzero(v146, v145);
    v211[1] = v147;
  }
LABEL_187:
  std::vector<std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>::vector(&v203, v188, (uint64_t)v211);
  if (v211[0])
  {
    v211[1] = v211[0];
    operator delete(v211[0]);
  }
  v196 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a3);
  if (v127 >= 1)
  {
    for (j = 0; j != v127; ++j)
    {
      for (k = 0; k != v127; ++k)
      {
        if (j != k)
        {
          v151 = (int *)v205;
          v150 = *(int **)v206;
          if (v205 != *(void **)v206)
          {
            do
            {
              v152 = *v151;
              v153 = *((_QWORD *)v196 + 18);
              v154 = *(_QWORD *)(v153 + 20 * *v151);
              v155 = *(_QWORD *)(v153 + 20 * (*v151 ^ 1));
              Coefficient = operations_research::sat::GetCoefficient(*v151, &(*a2)[7 * k]);
              v157 = operations_research::sat::GetCoefficient(v152, &(*a2)[7 * j]);
              v158 = (Coefficient - v157) * v154;
              v159 = v155 * (Coefficient - v157);
              if (v158 <= -v159)
                v158 = -v159;
              *(_QWORD *)(*((_QWORD *)v203 + 3 * j) + 8 * k) += v158;
              ++v151;
            }
            while (v151 != v150);
          }
        }
      }
    }
    v160 = 0;
    v129 = a4;
    v161 = (uint64_t *)a2;
    do
    {
      v162 = v191;
      v163 = (_QWORD *)*v191;
      if (!*v191)
        goto LABEL_212;
      do
      {
        v164 = v163[4];
        v165 = v164 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
        if (v164 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
          v166 = v163;
        else
          v166 = v163 + 1;
        if (v165)
          v162 = v163;
        v163 = (_QWORD *)*v166;
      }
      while (*v166);
      if (v162 != v191
        && v162[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
      {
        v167 = (void *)v162[5];
      }
      else
      {
LABEL_212:
        v167 = 0;
      }
      v198 = v167;
      v199 = (_DWORD *)0x8000000000000002;
      v200 = 0u;
      v201 = 0u;
      v202 = 0;
      operations_research::sat::LinearConstraintBuilder::AddTerm(&v198, a1, 1);
      v168 = *v161;
      v169 = *(_QWORD *)(*v161 + 56 * v160);
      if (*(_QWORD *)(*v161 + 56 * v160 + 8) != v169)
      {
        v170 = 0;
        do
        {
          operations_research::sat::LinearConstraintBuilder::AddTerm(&v198, *(_DWORD *)(v169 + 4 * v170), -*(_QWORD *)(*(_QWORD *)(v168 + 56 * v160 + 24) + 8 * v170));
          ++v170;
          v168 = *v161;
          v169 = *(_QWORD *)(*v161 + 56 * v160);
        }
        while (v170 < (*(_QWORD *)(*v161 + 56 * v160 + 8) - v169) >> 2);
      }
      v171 = 0;
      v172 = 6;
      do
      {
        if ((operations_research::sat::LinearConstraintBuilder::AddLiteralTerm(&v198, *((_DWORD *)v208 + v171), -(*a2)[v172] - *(_QWORD *)(*((_QWORD *)v203 + 3 * v160) + 8 * v171)) & 1) == 0)
        {
          google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v211, (google::glog_internal_namespace_ *)"./ortools/sat/linear_relaxation.cc", 708);
          v185 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v211);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v185, (uint64_t)"Check failed: lc.AddLiteralTerm(z_lits[j], -exprs[j].offset - sum_of_max_corner_diff[i][j]) ", 92);
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v211);
        }
        ++v171;
        v172 += 7;
      }
      while (v127 != v171);
      operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v198, (uint64_t)v211);
      v173 = *(_QWORD *)(a4 + 8);
      v161 = (uint64_t *)a2;
      if (v173 >= *(_QWORD *)(a4 + 16))
      {
        v174 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint>((void **)a4, (uint64_t)v211);
        v175 = __p[1];
        *(_QWORD *)(a4 + 8) = v174;
        if (v175)
        {
          __p[2] = v175;
          operator delete(v175);
        }
      }
      else
      {
        *(_OWORD *)v173 = *(_OWORD *)v211;
        *(_QWORD *)(v173 + 16) = 0;
        *(_QWORD *)(v173 + 24) = 0;
        *(_QWORD *)(v173 + 32) = 0;
        *(_QWORD *)(v173 + 40) = 0;
        *(_OWORD *)(v173 + 16) = *(_OWORD *)v212;
        *(void **)(v173 + 32) = __p[0];
        v212[0] = 0;
        v212[1] = 0;
        __p[0] = 0;
        *(_QWORD *)(v173 + 48) = 0;
        *(_QWORD *)(v173 + 56) = 0;
        *(_OWORD *)(v173 + 40) = *(_OWORD *)&__p[1];
        *(_QWORD *)(v173 + 56) = v214;
        __p[1] = 0;
        __p[2] = 0;
        v214 = 0;
        *(_QWORD *)(a4 + 8) = v173 + 64;
      }
      if (v212[0])
      {
        v212[1] = v212[0];
        operator delete(v212[0]);
      }
      if ((_QWORD)v201)
      {
        *((_QWORD *)&v201 + 1) = v201;
        operator delete((void *)v201);
      }
      ++v160;
    }
    while (v160 != v127);
  }
  operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v215, (uint64_t)v211);
  v176 = *(_QWORD *)(v129 + 8);
  if (v176 >= *(_QWORD *)(v129 + 16))
  {
    v177 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint>((void **)v129, (uint64_t)v211);
    v178 = __p[1];
    *(_QWORD *)(v129 + 8) = v177;
    if (v178)
    {
      __p[2] = v178;
      operator delete(v178);
    }
  }
  else
  {
    *(_OWORD *)v176 = *(_OWORD *)v211;
    *(_QWORD *)(v176 + 16) = 0;
    *(_QWORD *)(v176 + 24) = 0;
    *(_QWORD *)(v176 + 32) = 0;
    *(_QWORD *)(v176 + 40) = 0;
    *(_OWORD *)(v176 + 16) = *(_OWORD *)v212;
    *(void **)(v176 + 32) = __p[0];
    v212[0] = 0;
    v212[1] = 0;
    *(_QWORD *)(v176 + 48) = 0;
    *(_QWORD *)(v176 + 56) = 0;
    *(_OWORD *)(v176 + 40) = *(_OWORD *)&__p[1];
    *(_QWORD *)(v176 + 56) = v214;
    memset(__p, 0, sizeof(__p));
    v214 = 0;
    *(_QWORD *)(v129 + 8) = v176 + 64;
  }
  if (v212[0])
  {
    v212[1] = v212[0];
    operator delete(v212[0]);
  }
  v179 = (char *)v203;
  if (v203)
  {
    v180 = v204;
    v181 = v203;
    if (v204 != v203)
    {
      v182 = v204;
      do
      {
        v184 = (void *)*((_QWORD *)v182 - 3);
        v182 -= 24;
        v183 = v184;
        if (v184)
        {
          *((_QWORD *)v180 - 2) = v183;
          operator delete(v183);
        }
        v180 = v182;
      }
      while (v182 != v179);
      v181 = v203;
    }
    v204 = v179;
    operator delete(v181);
  }
  if (v205)
  {
    *(_QWORD *)v206 = v205;
    operator delete(v205);
  }
  if (*((_QWORD *)&v217 + 1))
  {
    *(_QWORD *)&v218 = *((_QWORD *)&v217 + 1);
    operator delete(*((void **)&v217 + 1));
  }
  if (v208)
  {
    v209 = (char *)v208;
    operator delete(v208);
  }
}

void sub_22DBA86C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,char *__p,char *a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42)
{
  uint64_t v42;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  _QWORD *v48;
  char *v49;
  char *v50;
  void *v51;
  void *v52;

  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)&a41);
  if (__p)
  {
    v48 = a33;
    v49 = __p;
    if (a33 != __p)
    {
      v50 = a33;
      do
      {
        v52 = (void *)*((_QWORD *)v50 - 3);
        v50 -= 24;
        v51 = v52;
        if (v52)
        {
          *(v48 - 2) = v51;
          operator delete(v51);
        }
        v48 = v50;
      }
      while (v50 != __p);
      v49 = __p;
    }
    operator delete(v49);
    v44 = a35;
    if (!a35)
    {
LABEL_3:
      v45 = *(void **)(v42 - 192);
      if (!v45)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else
  {
    v44 = a35;
    if (!a35)
      goto LABEL_3;
  }
  operator delete(v44);
  v45 = *(void **)(v42 - 192);
  if (!v45)
  {
LABEL_4:
    v46 = a38;
    if (!a38)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  *(_QWORD *)(v42 - 184) = v45;
  operator delete(v45);
  v46 = a38;
  if (!a38)
  {
LABEL_5:
    v47 = *(void **)a21;
    if (!*(_QWORD *)a21)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  operator delete(v46);
  v47 = *(void **)a21;
  if (!*(_QWORD *)a21)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_17:
  *(_QWORD *)(a21 + 8) = v47;
  operator delete(v47);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>::vector(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  const void *v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v6 = operator new(24 * a2);
    v7 = v6;
    *a1 = v6;
    a1[1] = v6;
    v8 = &v6[3 * a2];
    a1[2] = v8;
    v9 = *(const void **)a3;
    v10 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if (v10)
    {
      if (v10 < 0)
      {
        *v6 = 0;
        v6[1] = 0;
        v6[2] = 0;
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      v11 = 24 * a2;
      do
      {
        *v7 = 0;
        v7[1] = 0;
        v7[2] = 0;
        v12 = (char *)operator new(v10);
        *v7 = v12;
        v7[1] = v12;
        v13 = &v12[8 * (v10 >> 3)];
        v7[2] = v13;
        memcpy(v12, v9, v10);
        v7[1] = v13;
        v7 += 3;
        v11 -= 24;
      }
      while (v11);
    }
    else
    {
      bzero(v6, 24 * ((24 * a2 - 24) / 0x18) + 24);
    }
    a1[1] = v8;
  }
  return a1;
}

void sub_22DBA8ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  void *v12;

  v12 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v12;
    operator delete(v12);
  }
  *(_QWORD *)(v9 + 8) = v10;
  std::__exception_guard_exceptions<std::vector<std::vector<operations_research::sat::Literal>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_22DBA8B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::__exception_guard_exceptions<std::vector<std::vector<operations_research::sat::Literal>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_22DBA8B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::__exception_guard_exceptions<std::vector<std::vector<operations_research::sat::Literal>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void operations_research::sat::MinimizeCoreWithPropagation(operations_research::sat::SatSolver *this, const void **a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  int v7;
  unint64_t v8;
  int *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  void *v13;
  int v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  int v18;
  char *v19;
  _QWORD *v20;
  _QWORD *v21;
  __int128 v22;
  char *v23;
  void *__p[2];
  char *v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;

  if (!*((_BYTE *)this + 496))
  {
    v27 = 0;
    v28 = 0;
    v25 = 0;
    v26 = &v27;
    v5 = *a2;
    v4 = a2[1];
    __p[0] = 0;
    __p[1] = 0;
    v6 = v4 - v5;
    if (v4 != v5)
    {
      if (v6 < 0)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      __p[0] = operator new(v4 - v5);
      v25 = (char *)__p[0] + 4 * (v6 >> 2);
      memmove(__p[0], v5, v6);
      __p[1] = v25;
    }
    operations_research::sat::SatSolver::Backtrack(this, 0);
    operations_research::sat::SatSolver::SetAssumptionLevel((uint64_t *)this, 0);
    while (1)
    {
      v7 = operations_research::sat::MoveOneUnprocessedLiteralLast((uint64_t)&v26, *((_DWORD *)this + 76), (unsigned __int8 **)__p);
      if (v7 == -1)
        break;
      operations_research::sat::SatSolver::Backtrack(this, v7);
      while (!*((_BYTE *)this + 496))
      {
        v8 = *((int *)this + 76);
        if (v8 >= ((char *)__p[1] - (char *)__p[0]) >> 2)
          break;
        v9 = (int *)((char *)__p[0] + 4 * v8);
        v10 = *v9;
        v11 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 26) + 24) + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8));
        if (((v11 >> v10) & 1) != 0)
        {
          v12 = (char *)((char *)__p[1] - (char *)(v9 + 1));
          if (__p[1] != v9 + 1)
            memmove(v9, v9 + 1, (char *)__p[1] - (char *)(v9 + 1));
          __p[1] = &v12[(_QWORD)v9];
        }
        else
        {
          if (((v11 >> (v10 & 0x3F ^ 1)) & 1) != 0)
          {
            operations_research::sat::SatSolver::EnqueueDecisionAndBacktrackOnConflict((uint64_t)this, v10);
            operations_research::sat::SatSolver::GetLastIncompatibleDecisions(this, &v22);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            *(_OWORD *)__p = v22;
            v25 = v23;
            break;
          }
          operations_research::sat::SatSolver::EnqueueDecisionAndBackjumpOnConflict((uint64_t)this, v10);
        }
      }
      v13 = __p[0];
      if (__p[0] == __p[1] || *((_BYTE *)this + 496))
        goto LABEL_37;
      v14 = *((_DWORD *)__p[1] - 1);
      v15 = v27;
      v16 = &v27;
      v17 = &v27;
      if (v27)
      {
        while (1)
        {
          while (1)
          {
            v17 = (uint64_t **)v15;
            v18 = *(_DWORD *)((char *)v15 + 25);
            if (v14 >= v18)
              break;
            v15 = *v17;
            v16 = v17;
            if (!*v17)
              goto LABEL_29;
          }
          if (v18 >= v14)
            break;
          v15 = v17[1];
          if (!v15)
          {
            v16 = v17 + 1;
            goto LABEL_29;
          }
        }
      }
      else
      {
LABEL_29:
        v19 = (char *)operator new(0x20uLL);
        *(_DWORD *)(v19 + 25) = v14;
        *(_QWORD *)v19 = 0;
        *((_QWORD *)v19 + 1) = 0;
        *((_QWORD *)v19 + 2) = v17;
        *v16 = (uint64_t *)v19;
        if (*v26)
        {
          v26 = (uint64_t **)*v26;
          v19 = (char *)*v16;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v27, (uint64_t *)v19);
        ++v28;
      }
    }
    operations_research::sat::SatSolver::Backtrack(this, 0);
    operations_research::sat::SatSolver::SetAssumptionLevel((uint64_t *)this, 0);
    v13 = __p[0];
    if ((void *)((char *)__p[1] - (char *)__p[0]) < (void *)((_BYTE *)a2[1] - (_BYTE *)*a2))
    {
      if (*operations_research::sat::MinimizeCoreWithPropagation(operations_research::sat::SatSolver *,std::vector<operations_research::sat::Literal> *)::vlocal__[0] >= 1
        && (operations_research::sat::MinimizeCoreWithPropagation(operations_research::sat::SatSolver *,std::vector<operations_research::sat::Literal> *)::vlocal__[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)operations_research::sat::MinimizeCoreWithPropagation(operations_research::sat::SatSolver *,std::vector<operations_research::sat::Literal> *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/optimization.cc", (const char *)1)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)&v22, (google::glog_internal_namespace_ *)"./ortools/sat/optimization.cc", 289);
        v20 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v22);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"minimization ", 13);
        v21 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" -> ", 4);
        std::ostream::operator<<();
        google::LogMessage::~LogMessage((google::LogMessage *)&v22);
      }
      std::vector<operations_research::sat::Literal>::__assign_with_size[abi:ne180100]<std::__wrap_iter<operations_research::sat::Literal*>,std::__wrap_iter<operations_research::sat::Literal*>>(a2, (char *)__p[0], (char *)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
      v13 = __p[0];
    }
LABEL_37:
    if (v13)
    {
      __p[1] = v13;
      operator delete(v13);
    }
    std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v26, v27);
  }
}

void sub_22DBA8E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16, _QWORD *a17)
{
  if (__p)
    operator delete(__p);
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::MinimizeIntegerVariableWithLinearScanAndLazyEncoding(unint64_t a1, uint64_t a2, operations_research::sat *a3)
{
  operations_research::sat::SatSolver *v6;
  operations_research::sat::IntegerTrail *v7;
  operations_research::sat::Model *v8;
  operations_research::sat::SatParameters *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)a3);
  v7 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)a3);
  v9 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a3);
  v10 = a1 ^ 1;
  v11 = 12 * (int)a1;
  while (1)
  {
    v12 = operations_research::sat::SolveIntegerProblem(a3, v8);
    if ((_DWORD)v12 != 2)
      return v12;
    v13 = *(_QWORD *)(*((_QWORD *)v7 + 5) + v11);
    v14 = *(_QWORD *)(a2 + 24);
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14);
    if (*((_BYTE *)v9 + 131))
      break;
    operations_research::sat::SatSolver::Backtrack(v6, 0);
    v15 = 1;
    v16 = 1 - v13;
    if (v13 < (uint64_t)0x8000000000000003)
      v16 = 0x7FFFFFFFFFFFFFFFLL;
    a1 = a1 & 0xFFFFFFFF00000000 | HIDWORD(v16);
    if ((operations_research::sat::IntegerTrail::Enqueue((uint64_t)v7, __SPAIR64__(v16, v10), a1, 0, 0, 0, 0) & 1) == 0)
      return v15;
  }
  return 3;
}

void operations_research::sat::RestrictObjectiveDomainWithBinarySearch(unint64_t a1, uint64_t a2, operations_research::sat *a3)
{
  operations_research::sat::SatParameters *v5;
  operations_research::sat::IntegerTrail *v6;
  operations_research::sat::SatParameters *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  int AssociatedLiteral;
  _DWORD *v30;
  int v31;
  int v32;
  char v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  operations_research::sat::SatParameters *v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int *v42;
  int v43;
  operations_research::sat::SatSolver *v44;
  __int128 __p;
  _DWORD *v46;
  uint64_t v47;
  _BYTE v48[412];
  int v49;

  v5 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a3);
  operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)v48, v5);
  v44 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)a3);
  v6 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)a3);
  v42 = (unsigned int *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)a3);
  operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)&__p, (const operations_research::sat::SatParameters *)v48);
  HIDWORD(v46) |= 0x40000000u;
  v47 = v49;
  v7 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a3);
  operations_research::sat::SatParameters::CopyFrom(v7, (const operations_research::sat::SatParameters *)&__p);
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)&__p);
  v8 = a1;
  v9 = a1 ^ 1;
  v10 = *((_QWORD *)v6 + 5);
  v11 = -*(_QWORD *)(v10 + 12 * (int)(a1 ^ 1));
  v12 = *(_QWORD *)(v10 + 12 * (int)a1);
  v43 = a1 ^ 1;
  while (1)
  {
    operations_research::sat::SatSolver::Backtrack(v44, 0);
    v13 = *((_QWORD *)v6 + 5);
    v14 = *(_QWORD *)(v13 + 12 * v8);
    v15 = *(_QWORD *)(v13 + 12 * v9);
    v16 = -v15;
    if (v11 >= -v15)
      v11 = -v15;
    if (v12 <= v14)
      v12 = v14;
    v17 = v11 - v14;
    if (v11 <= v14)
      break;
    if (v17 >= 0)
      v18 = v11 - v14;
    else
      v18 = v17 + 1;
    v19 = v14 + (v18 >> 1);
    v20 = off_254079690[0];
    if (*off_254079690[0] >= 1)
    {
LABEL_19:
      if (v20 != &google::kLogSiteUninitialized
        || google::InitVLOG3__((google *)off_254079690, (int **)&fLI::FLAGS_v, "./ortools/sat/optimization.cc", (const char *)1))
      {
        google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/optimization.cc", 1160);
        v21 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Binary-search, objective: [", 27);
        v22 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)",", 1);
        v23 = (_QWORD *)std::ostream::operator<<();
        v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"]", 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" tried: [", 9);
        v25 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)",", 1);
        v26 = (_QWORD *)std::ostream::operator<<();
        v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"]", 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" target: obj<=", 14);
        std::ostream::operator<<();
        google::LogMessage::~LogMessage((google::LogMessage *)&__p);
      }
    }
LABEL_22:
    if (v19 >= v16)
    {
      __p = 0uLL;
      v46 = 0;
      v31 = operations_research::sat::ResetAndSolveIntegerProblem((int **)&__p, a3);
    }
    else
    {
      v28 = 0x7FFFFFFFFFFFFFFFLL;
      if (v19 >= (uint64_t)0x8000000000000002)
        v28 = -v19;
      LODWORD(__p) = v43;
      *(_QWORD *)((char *)&__p + 4) = v28;
      a1 = a1 & 0xFFFFFFFF00000000 | HIDWORD(v28);
      AssociatedLiteral = operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(v42, (const char *)__p, a1);
      v30 = operator new(4uLL);
      *(_QWORD *)&__p = v30;
      *v30 = AssociatedLiteral;
      *((_QWORD *)&__p + 1) = v30 + 1;
      v46 = v30 + 1;
      v31 = operations_research::sat::ResetAndSolveIntegerProblem((int **)&__p, a3);
    }
    v32 = v31;
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    switch(v32)
    {
      case 3:
        if (v11 >= v19)
          v11 = v19;
        if (v19 > v12)
          v12 = v19;
        break;
      case 2:
        v34 = *(_QWORD *)(*((_QWORD *)v6 + 5) + 12 * v8);
        v35 = *(_QWORD *)(a2 + 24);
        if (v35)
          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 48))(v35);
        operations_research::sat::SatSolver::Backtrack(v44, 0);
        v36 = 1 - v34;
        if (v34 < (uint64_t)0x8000000000000003)
          v36 = 0x7FFFFFFFFFFFFFFFLL;
        LODWORD(__p) = v43;
        *(_QWORD *)((char *)&__p + 4) = v36;
        v39 = v39 & 0xFFFFFFFF00000000 | HIDWORD(v36);
        v33 = operations_research::sat::IntegerTrail::Enqueue((uint64_t)v6, __p, SHIDWORD(v36), 0, 0, 0, 0);
        goto LABEL_38;
      case 1:
        goto LABEL_45;
      case 0:
        operations_research::sat::SatSolver::Backtrack(v44, 0);
        LODWORD(__p) = v8;
        *(_QWORD *)((char *)&__p + 4) = v19 + 1;
        v40 = v40 & 0xFFFFFFFF00000000 | ((unint64_t)(v19 + 1) >> 32);
        v33 = operations_research::sat::IntegerTrail::Enqueue((uint64_t)v6, __p, (unint64_t)(v19 + 1) >> 32, 0, 0, 0, 0);
LABEL_38:
        if ((v33 & 1) == 0)
          goto LABEL_45;
        break;
    }
  }
  if (v16 > v12)
  {
    v19 = -(v15 + (v16 - v12) / 2);
    v20 = off_254079690[0];
    if (*off_254079690[0] >= 1)
      goto LABEL_19;
    goto LABEL_22;
  }
  if (*_MergedGlobals_15[0] >= 1
    && (_MergedGlobals_15[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)_MergedGlobals_15, (int **)&fLI::FLAGS_v, "./ortools/sat/optimization.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/optimization.cc", 1157);
    v37 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Binary-search, done.", 20);
    google::LogMessage::~LogMessage((google::LogMessage *)&__p);
  }
LABEL_45:
  operations_research::sat::SatSolver::Backtrack(v44, 0);
  v38 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a3);
  operations_research::sat::SatParameters::CopyFrom(v38, (const operations_research::sat::SatParameters *)v48);
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)v48);
}

void sub_22DBA949C(_Unwind_Exception *a1)
{
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)&STACK[0x278]);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::CoreBasedOptimizer::CoreBasedOptimizer(uint64_t a1, int a2, uint64_t *a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t i;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  int *v22;
  int *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  int *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  __int128 v36;
  char *v37;
  __int128 v38;
  uint64_t v39;
  int **v41;
  unint64_t v42[2];
  uint64_t v43;
  uint64_t *v44;

  *(_QWORD *)a1 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>(a6);
  *(_QWORD *)(a1 + 8) = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(a6);
  *(_QWORD *)(a1 + 16) = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>(a6);
  *(_QWORD *)(a1 + 24) = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a6);
  v12 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a6);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 32) = v12;
  *(_QWORD *)(a1 + 40) = a6;
  *(_DWORD *)(a1 + 48) = a2;
  v41 = (int **)(a1 + 56);
  *(_OWORD *)(a1 + 72) = 0u;
  v13 = (_QWORD *)(a5 + 24);
  v14 = *(_QWORD *)(a5 + 24);
  if (!v14)
  {
    v13 = (_QWORD *)(a1 + 112);
    goto LABEL_5;
  }
  if (v14 != a5)
  {
    *(_QWORD *)(a1 + 112) = v14;
LABEL_5:
    *v13 = 0;
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + 112) = a1 + 88;
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v13 + 24))(*v13, a1 + 88);
LABEL_7:
  *(_WORD *)(a1 + 120) = 0;
  v16 = *a3;
  v15 = a3[1];
  v42[0] = (v15 - *a3) >> 2;
  v43 = (uint64_t)(a4[1] - *a4) >> 3;
  if (v42[0] == v43)
  {
    if (v15 != v16)
    {
LABEL_9:
      for (i = 0; i < (v15 - v16) >> 2; ++i)
      {
        v19 = *(_QWORD *)(*a4 + 8 * i);
        if (v19 < 1)
        {
          if ((v19 & 0x8000000000000000) == 0)
            continue;
          v20 = *(_DWORD *)(v16 + 4 * i) ^ 1;
          v19 = -v19;
          v22 = *(int **)(a1 + 64);
          v29 = *(_QWORD *)(a1 + 72);
          if ((unint64_t)v22 >= v29)
          {
            v30 = *v41;
            v31 = ((char *)v22 - (char *)*v41) >> 5;
            v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 59)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v33 = v29 - (_QWORD)v30;
            if (v33 >> 4 > v32)
              v32 = v33 >> 4;
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFE0)
              v27 = 0x7FFFFFFFFFFFFFFLL;
            else
              v27 = v32;
            if (v27)
            {
              if (v27 >> 59)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v28 = (char *)operator new(32 * v27);
            }
            else
            {
              v28 = 0;
            }
            v34 = &v28[32 * v31];
            *(_DWORD *)v34 = v20;
            *(_QWORD *)(v34 + 4) = v19;
            *(_QWORD *)(v34 + 20) = 0;
            *(_QWORD *)(v34 + 12) = 0;
            *((_DWORD *)v34 + 7) = 0;
            v35 = v34;
            if (v22 != v30)
            {
              do
              {
                v38 = *((_OWORD *)v22 - 1);
                *((_OWORD *)v35 - 2) = *((_OWORD *)v22 - 2);
                *((_OWORD *)v35 - 1) = v38;
                v35 -= 32;
                v22 -= 8;
              }
              while (v22 != v30);
LABEL_38:
              v22 = *v41;
            }
LABEL_39:
            v37 = &v28[32 * v27];
            v18 = v34 + 32;
            *(_QWORD *)(a1 + 56) = v35;
            *(_QWORD *)(a1 + 64) = v34 + 32;
            *(_QWORD *)(a1 + 72) = v37;
            if (v22)
              operator delete(v22);
            goto LABEL_11;
          }
        }
        else
        {
          v20 = *(_DWORD *)(v16 + 4 * i);
          v22 = *(int **)(a1 + 64);
          v21 = *(_QWORD *)(a1 + 72);
          if ((unint64_t)v22 >= v21)
          {
            v23 = *v41;
            v24 = ((char *)v22 - (char *)*v41) >> 5;
            v25 = v24 + 1;
            if ((unint64_t)(v24 + 1) >> 59)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v26 = v21 - (_QWORD)v23;
            if (v26 >> 4 > v25)
              v25 = v26 >> 4;
            if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFE0)
              v27 = 0x7FFFFFFFFFFFFFFLL;
            else
              v27 = v25;
            if (v27)
            {
              if (v27 >> 59)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v28 = (char *)operator new(32 * v27);
            }
            else
            {
              v28 = 0;
            }
            v34 = &v28[32 * v24];
            *(_DWORD *)v34 = v20;
            *(_QWORD *)(v34 + 4) = v19;
            *(_QWORD *)(v34 + 20) = 0;
            *(_QWORD *)(v34 + 12) = 0;
            *((_DWORD *)v34 + 7) = 0;
            v35 = v34;
            if (v22 != v23)
            {
              do
              {
                v36 = *((_OWORD *)v22 - 1);
                *((_OWORD *)v35 - 2) = *((_OWORD *)v22 - 2);
                *((_OWORD *)v35 - 1) = v36;
                v35 -= 32;
                v22 -= 8;
              }
              while (v22 != v23);
              goto LABEL_38;
            }
            goto LABEL_39;
          }
        }
        *v22 = v20;
        *(_QWORD *)(v22 + 1) = v19;
        v18 = v22 + 8;
        *(_QWORD *)(v22 + 5) = 0;
        *(_QWORD *)(v22 + 3) = 0;
        v22[7] = 0;
LABEL_11:
        *(_QWORD *)(a1 + 64) = v18;
        *(v18 - 5) = 0;
        v16 = *a3;
        v15 = a3[1];
      }
    }
  }
  else
  {
    v44 = (uint64_t *)google::MakeCheckOpString<unsigned long,unsigned long>((int)v42, (int)&v43, "variables.size() == coefficients.size()");
    if (v44)
    {
      google::LogMessageFatal::LogMessageFatal(v42, (google::glog_internal_namespace_ *)"./ortools/sat/optimization.cc", 1354, &v44);
      google::LogMessage::stream((google::LogMessage *)v42);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v42);
    }
    v16 = *a3;
    v15 = a3[1];
    if (v15 != *a3)
      goto LABEL_9;
  }
  v39 = 0x7FFFFFFFFFFFFFFELL;
  if (!*(_DWORD *)(*(_QWORD *)a1 + 320))
    v39 = 1;
  *(_QWORD *)(a1 + 80) = v39;
  return a1;
}

{
  return operations_research::sat::CoreBasedOptimizer::CoreBasedOptimizer(a1, a2, a3, a4, a5, a6);
}

void sub_22DBA98D0(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBA98D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _QWORD *a9, void **a10)
{
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;
  void *v14;

  v12 = *(_QWORD **)(v10 + 112);
  if (v12 == a9)
  {
    v13 = 4;
  }
  else
  {
    if (!v12)
    {
      v14 = *a10;
      if (*a10)
        goto LABEL_8;
      goto LABEL_5;
    }
    v13 = 5;
    a9 = *(_QWORD **)(v10 + 112);
  }
  (*(void (**)(void))(*a9 + 8 * v13))();
  v14 = *a10;
  if (*a10)
  {
LABEL_8:
    *(_QWORD *)(v10 + 64) = v14;
    operator delete(v14);
    _Unwind_Resume(exception_object);
  }
LABEL_5:
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::CoreBasedOptimizer::ProcessSolution(operations_research::sat::CoreBasedOptimizer *this)
{
  int *v2;
  int *v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (int *)*((_QWORD *)this + 7);
  v3 = (int *)*((_QWORD *)this + 8);
  v4 = *(_QWORD *)(*((_QWORD *)this + 3) + 40);
  if (v2 == v3)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(v4 + 12 * *v2);
      v5 += *(_QWORD *)(v2 + 1) * v6;
      if (v6 >= *((_QWORD *)v2 + 3))
        v6 = *((_QWORD *)v2 + 3);
      *((_QWORD *)v2 + 3) = v6;
      v2 += 8;
    }
    while (v2 != v3);
  }
  if (v5 > -*(_QWORD *)(v4 + 12 * (*((_DWORD *)this + 12) ^ 1)))
    return 1;
  v8 = *((_QWORD *)this + 14);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
  if (*(_BYTE *)(*(_QWORD *)this + 131))
    *((_BYTE *)this + 121) = 1;
  operations_research::sat::SatSolver::Backtrack(*((operations_research::sat::SatSolver **)this + 1), 0);
  operations_research::sat::SatSolver::SetAssumptionLevel(*((uint64_t **)this + 1), 0);
  v9 = 1 - v5;
  if (v5 < (uint64_t)0x8000000000000003)
    v9 = 0x7FFFFFFFFFFFFFFFLL;
  LODWORD(v10) = *((_DWORD *)this + 12) ^ 1;
  HIDWORD(v10) = v9;
  return operations_research::sat::IntegerTrail::Enqueue(*((_QWORD *)this + 3), v10, SHIDWORD(v9), 0, 0, 0, 0);
}

uint64_t operations_research::sat::CoreBasedOptimizer::PropagateObjectiveBounds(operations_research::sat::SatSolver **this)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t result;
  int *v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  operations_research::sat::SatSolver *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  _BYTE v26[12];
  uint64_t *v27;
  int64_t v28;
  uint64_t v29;

  do
  {
    result = operations_research::sat::SatSolver::ResetToLevelZero(this[1]);
    if (!(_DWORD)result)
      return result;
    v5 = (int *)this[7];
    v6 = (int *)this[8];
    v7 = (uint64_t)this[3];
    v8 = *(_QWORD *)(v7 + 40);
    if (v5 == v6)
    {
      v9 = 0;
      v12 = *((_DWORD *)this + 12);
      if (*(uint64_t *)(v8 + 12 * v12) < 0)
        goto LABEL_8;
    }
    else
    {
      v9 = 0;
      v10 = (int *)this[7];
      do
      {
        v11 = *(_QWORD *)(v8 + 12 * *v10);
        *((_QWORD *)v10 + 2) = v11;
        v9 += *(_QWORD *)(v10 + 1) * v11;
        v10 += 8;
      }
      while (v10 != v6);
      v12 = *((_DWORD *)this + 12);
      if (v9 > *(_QWORD *)(v8 + 12 * v12))
      {
LABEL_8:
        *(_DWORD *)v26 = v12;
        *(_QWORD *)&v26[4] = v9;
        v2 = v2 & 0xFFFFFFFF00000000 | HIDWORD(v9);
        result = operations_research::sat::IntegerTrail::Enqueue(v7, *(uint64_t *)v26, v2, 0, 0, 0, 0);
        if (!(_DWORD)result)
          return result;
        v12 = *((_DWORD *)this + 12);
        v8 = *((_QWORD *)this[3] + 5);
        v5 = (int *)this[7];
        v6 = (int *)this[8];
        v13 = 1;
        if (v5 == v6)
          continue;
LABEL_13:
        v14 = -(v9 + *(_QWORD *)(v8 + 12 * (v12 ^ 1)));
        while (1)
        {
          if (!*(_QWORD *)(v5 + 1))
            goto LABEL_14;
          v15 = this[3];
          v16 = *((_QWORD *)v15 + 5);
          v17 = *(_QWORD *)(v16 + 12 * *v5);
          v18 = *(_QWORD *)(v16 + 12 * (*v5 ^ 1));
          v19 = -v18;
          v29 = -v18;
          if (!(v18 + v17))
            goto LABEL_14;
          v20 = v14 / *(_QWORD *)(v5 + 1);
          if (v20 >= v19 - v17)
            goto LABEL_14;
          v28 = v20 + v17;
          if (v20 + v17 >= v19)
            break;
          v21 = *v5;
          v22 = *(int *)(*((_QWORD *)v15 + 51) + 4 * v21);
          if ((_DWORD)v22 != -1)
            goto LABEL_20;
LABEL_21:
          v23 = v21 ^ 1;
          if (v28 >= (uint64_t)0x8000000000000002)
            v24 = -v28;
          else
            v24 = 0x7FFFFFFFFFFFFFFFLL;
          *(_DWORD *)v26 = v23;
          *(_QWORD *)&v26[4] = v24;
          v1 = v1 & 0xFFFFFFFF00000000 | HIDWORD(v24);
          result = operations_research::sat::IntegerTrail::Enqueue((uint64_t)v15, *(uint64_t *)v26, v1, 0, 0, 0, 0);
          if (!(_DWORD)result)
            return result;
          v13 = 1;
LABEL_14:
          v5 += 8;
          if (v5 == v6)
            goto LABEL_2;
        }
        v27 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>((int)&v28, (int)&v29, "new_ub < var_ub");
        if (v27)
        {
          google::LogMessageFatal::LogMessageFatal((unint64_t *)v26, (google::glog_internal_namespace_ *)"./ortools/sat/optimization.cc", 1453, &v27);
          google::LogMessage::stream((google::LogMessage *)v26);
LABEL_32:
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v26);
        }
        v15 = this[3];
        v21 = *v5;
        v22 = *(int *)(*((_QWORD *)v15 + 51) + 4 * v21);
        if ((_DWORD)v22 == -1)
          goto LABEL_21;
LABEL_20:
        if (((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v15 + 117) + 24) + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v22) & 1) != 0)
        {
          google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v26, (google::glog_internal_namespace_ *)"./ortools/sat/optimization.cc", 1454);
          v25 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v26);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Check failed: !integer_trail_->IsCurrentlyIgnored(term.var) ", 60);
          goto LABEL_32;
        }
        goto LABEL_21;
      }
    }
    v13 = 0;
    if (v5 != v6)
      goto LABEL_13;
LABEL_2:
    ;
  }
  while ((v13 & 1) != 0);
  return 1;
}

void sub_22DBA9D4C(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBA9D54(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::CoreBasedOptimizer::ComputeNextStratificationThreshold(operations_research::sat::CoreBasedOptimizer *this)
{
  int *v2;
  int *v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  int64_t v31;
  char *v32;
  char *v33;
  char v34;

  v2 = (int *)*((_QWORD *)this + 7);
  v3 = (int *)*((_QWORD *)this + 8);
  if (v2 == v3)
  {
    *((_QWORD *)this + 10) = 0;
    return;
  }
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  do
  {
    v8 = *(_QWORD *)(v2 + 1);
    if (v8)
      v9 = v8 < *((_QWORD *)this + 10);
    else
      v9 = 0;
    if (!v9
      || !(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 144) + 20 * *v2)
         + *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 144) + 20 * (*v2 ^ 1))))
    {
      goto LABEL_4;
    }
    if (v4 < v5)
    {
      *(_QWORD *)v4 = v8;
      v4 += 8;
      v7 = (uint64_t)v4;
      goto LABEL_4;
    }
    v10 = (v4 - v6) >> 3;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    if ((v5 - v6) >> 2 > v11)
      v11 = (v5 - v6) >> 2;
    if ((unint64_t)(v5 - v6) >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = operator new(8 * v12);
      v14 = &v13[8 * v10];
      *(_QWORD *)v14 = *(_QWORD *)(v2 + 1);
      v7 = (uint64_t)(v14 + 8);
      if (v4 == v6)
        goto LABEL_26;
    }
    else
    {
      v13 = 0;
      v14 = (char *)(8 * v10);
      *(_QWORD *)(8 * v10) = v8;
      v7 = 8 * v10 + 8;
      if (v4 == v6)
        goto LABEL_26;
    }
    v15 = v4 - 8 - v6;
    if (v15 >= 0x168)
    {
      if (&v13[v4 - v6 - 8 - (v15 & 0xFFFFFFFFFFFFFFF8)] > &v13[v4 - v6 - 8])
      {
        v16 = v4;
      }
      else if (&v4[-(v15 & 0xFFFFFFFFFFFFFFF8) - 8] > v4 - 8)
      {
        v16 = v4;
      }
      else if ((unint64_t)(v6 - v13) >= 0x20)
      {
        v18 = (v15 >> 3) + 1;
        v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
        v16 = &v4[-v19];
        v14 -= v19;
        v20 = &v13[8 * v10 - 16];
        v21 = v4 - 16;
        v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v23 = *(_OWORD *)v21;
          *(v20 - 1) = *((_OWORD *)v21 - 1);
          *v20 = v23;
          v20 -= 2;
          v21 -= 32;
          v22 -= 4;
        }
        while (v22);
        if (v18 == (v18 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_26;
      }
      else
      {
        v16 = v4;
      }
    }
    else
    {
      v16 = v4;
    }
    do
    {
      v17 = *((_QWORD *)v16 - 1);
      v16 -= 8;
      *((_QWORD *)v14 - 1) = v17;
      v14 -= 8;
    }
    while (v16 != v6);
LABEL_26:
    v5 = &v13[8 * v12];
    v4 = (char *)v7;
    if (v6)
    {
      operator delete(v6);
      v7 = (uint64_t)v4;
    }
    v6 = v14;
LABEL_4:
    v2 += 8;
  }
  while (v2 != v3);
  v33 = (char *)v7;
  v32 = v6;
  if (v6 == v4)
  {
    *((_QWORD *)this + 10) = 0;
    if (v4)
      goto LABEL_58;
  }
  else
  {
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> *,false>((uint64_t)v6, v4, (uint64_t)&v34, 126 - 2 * __clz((v4 - v6) >> 3), 1);
    v4 = v6;
    v24 = v33;
    if (v6 != v33)
    {
      v25 = v6 + 8;
      while (v25 != v33)
      {
        v26 = *((_QWORD *)v25 - 1);
        v27 = *(_QWORD *)v25;
        v25 += 8;
        if (v26 == v27)
        {
          v28 = v25 - 16;
          while (v25 != v33)
          {
            v29 = v26;
            v26 = *(_QWORD *)v25;
            if (v29 != *(_QWORD *)v25)
            {
              *((_QWORD *)v28 + 1) = v26;
              v28 += 8;
            }
            v25 += 8;
          }
          v30 = v28 + 8;
          v31 = v33 - (v28 + 8);
          if (v33 != v28 + 8)
          {
            if (v33 != &v30[v31])
              memmove(v28 + 8, &v30[v31], 0);
            v24 = v30;
          }
          break;
        }
      }
    }
    *((_QWORD *)this + 10) = *(_QWORD *)&v32[8 * vcvtmd_s64_f64((double)(unint64_t)((v24 - v32) >> 3) * 0.9)];
LABEL_58:
    operator delete(v4);
  }
}

void sub_22DBAA0BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::CoreBasedOptimizer::CoverOptimization(int **this)
{
  unint64_t v1;
  int *v3;
  uint64_t v4;
  int *v5;
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  double v12;
  unsigned int *v13;
  uint64_t v14;
  int AssociatedLiteral;
  _DWORD *v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t result;
  uint64_t v23;
  int *v24;
  unint64_t v25;
  __int128 __p;
  _DWORD *v27;

  v3 = *this;
  v4 = *((_QWORD *)*this + 46);
  v3[6] = (*this)[6] | 0x8000;
  *((_QWORD *)v3 + 46) = 0x3FE0000000000000;
  v5 = this[7];
  v6 = this[8];
  if (v5 == v6)
  {
LABEL_30:
    result = operations_research::sat::CoreBasedOptimizer::PropagateObjectiveBounds((operations_research::sat::SatSolver **)this);
  }
  else
  {
    while (1)
    {
      if (v5[3])
      {
        v7 = *v5;
        v8 = *v5;
        v9 = *((_QWORD *)this[3] + 5);
        v10 = *(_QWORD *)(v9 + 12 * (*v5 ^ 1));
        v11 = *((_QWORD *)v5 + 3) >= -v10 ? -v10 : *((_QWORD *)v5 + 3);
        if (v11 > *(_QWORD *)(v9 + 12 * v7))
          break;
      }
LABEL_3:
      v5 += 8;
      if (v5 == v6)
        goto LABEL_30;
    }
    v12 = *((double *)this[2] + 14) + 0.5;
    while (1)
    {
      v13 = (unsigned int *)this[4];
      v14 = 1 - v11;
      if (v11 < (uint64_t)0x8000000000000003)
        v14 = 0x7FFFFFFFFFFFFFFFLL;
      LODWORD(__p) = v7 ^ 1;
      *(_QWORD *)((char *)&__p + 4) = v14;
      v1 = v1 & 0xFFFFFFFF00000000 | HIDWORD(v14);
      AssociatedLiteral = operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(v13, (const char *)__p, v1);
      v16 = operator new(4uLL);
      *(_QWORD *)&__p = v16;
      *v16 = AssociatedLiteral;
      *((_QWORD *)&__p + 1) = v16 + 1;
      v27 = v16 + 1;
      v17 = operations_research::sat::ResetAndSolveIntegerProblem((int **)&__p, (operations_research::sat *)this[5]);
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      if (v17 != 2)
        break;
      v11 = *(_QWORD *)(*((_QWORD *)this[3] + 5) + 12 * v8);
      if (*operations_research::sat::CoreBasedOptimizer::CoverOptimization(void)::vlocal__[0] >= 1
        && (operations_research::sat::CoreBasedOptimizer::CoverOptimization(void)::vlocal__[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)operations_research::sat::CoreBasedOptimizer::CoverOptimization(void)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/optimization.cc", (const char *)1)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/optimization.cc", 1539);
        v18 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"cover_opt var:", 14);
        v19 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" domain:[", 9);
        v20 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)",", 1);
        v21 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"]", 1);
        google::LogMessage::~LogMessage((google::LogMessage *)&__p);
      }
      if ((operations_research::sat::CoreBasedOptimizer::ProcessSolution((operations_research::sat::CoreBasedOptimizer *)this) & 1) == 0)
        goto LABEL_31;
      result = operations_research::sat::SatSolver::ResetToLevelZero((operations_research::sat::SatSolver *)this[1]);
      if (!(_DWORD)result)
        goto LABEL_32;
      if (*((_BYTE *)this + 121)
        || *((double *)this[2] + 14) > v12
        || v11 <= *(_QWORD *)(*((_QWORD *)this[3] + 5) + 12 * v8))
      {
        goto LABEL_3;
      }
    }
    if (v17)
    {
      if (v17 != 1)
        goto LABEL_3;
LABEL_31:
      result = 0;
      goto LABEL_32;
    }
    v23 = (uint64_t)this[3];
    LODWORD(__p) = v7;
    *(_QWORD *)((char *)&__p + 4) = v11;
    v25 = v25 & 0xFFFFFFFF00000000 | HIDWORD(v11);
    result = operations_research::sat::IntegerTrail::Enqueue(v23, __p, SHIDWORD(v11), 0, 0, 0, 0);
    if ((_DWORD)result)
      goto LABEL_3;
  }
LABEL_32:
  v24 = *this;
  v24[6] = (*this)[6] | 0x8000;
  *((_QWORD *)v24 + 46) = v4;
  return result;
}

void sub_22DBAA3E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *v11;
  *(_DWORD *)(v13 + 24) = *(_DWORD *)(*v11 + 24) | 0x8000;
  *(_QWORD *)(v13 + 368) = v12;
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::CoreBasedOptimizer::Optimize(operations_research::sat::CoreBasedOptimizer *this)
{
  uint64_t v1;
  operations_research::sat::CoreBasedOptimizer *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _DWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  _DWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  int v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  __int128 *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  char *v52;
  int64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _BYTE *v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  _OWORD *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  int v68;
  int *v69;
  BOOL v70;
  int v71;
  uint64_t v72;
  _QWORD *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  _DWORD *v79;
  _DWORD *v80;
  _BYTE *v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  __int128 *v97;
  uint64_t v98;
  __int128 v99;
  int v100;
  uint64_t *v101;
  int64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  _BYTE *v107;
  uint64_t *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t *v111;
  int *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _OWORD *v116;
  uint64_t *v117;
  uint64_t v118;
  __int128 v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int32x2_t v127;
  int32x2_t *v128;
  int32x2_t v129;
  int32x2_t v130;
  int32x2_t v131;
  int32x2_t v132;
  int32x2_t v133;
  int v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int *v140;
  unint64_t v141;
  _QWORD *v142;
  char *v143;
  _BYTE *v144;
  char *v145;
  _BYTE *v146;
  uint64_t v147;
  char *v148;
  _BYTE *v149;
  char *v150;
  _BYTE *v151;
  char *v152;
  _BYTE *v153;
  char *v154;
  _BYTE *v155;
  void **v156;
  uint64_t v157;
  char *v158;
  unint64_t v159;
  char *v160;
  const char *v161;
  uint64_t v162;
  int AssociatedLiteral;
  int v164;
  char *v165;
  uint64_t v166;
  char *v167;
  int64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  char *v173;
  char *v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  char *v180;
  uint64_t v181;
  __int128 v182;
  int v183;
  int v184;
  int v185;
  uint64_t *v186;
  uint64_t **i;
  uint64_t **v188;
  int v189;
  _DWORD *v190;
  uint64_t *v191;
  uint64_t *v192;
  BOOL v193;
  uint64_t *v194;
  uint64_t *v195;
  uint64_t *v196;
  _BYTE *v197;
  int v198;
  uint64_t v199;
  int v200;
  uint64_t **v201;
  uint64_t *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  void *v206;
  int64_t v207;
  char *v208;
  void *v209;
  int64_t v210;
  char *v211;
  operations_research::sat *v212;
  operations_research::sat::SatSolver *v213;
  absl::lts_2020_02_25 *v214;
  absl::lts_2020_02_25 *v215;
  unsigned __int8 *v216;
  unsigned __int8 v217;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v219;
  uint64_t v220;
  absl::lts_2020_02_25 *v221;
  double v222;
  double v223;
  char *v224;
  const void *v225;
  int64_t v226;
  char *v227;
  char *v228;
  char *v229;
  uint64_t v230;
  int v231;
  _DWORD *v232;
  _BYTE *v233;
  char *v234;
  char *v235;
  char *v236;
  unint64_t v237;
  uint64_t v238;
  int v239;
  _QWORD **v240;
  _QWORD *v241;
  _QWORD *v242;
  _QWORD **v243;
  int v244;
  uint64_t v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  _BYTE *v249;
  _DWORD *v250;
  unint64_t v251;
  char *v252;
  int v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  _OWORD *v257;
  char *v258;
  uint64_t v259;
  __int128 v260;
  char *v261;
  uint64_t *v262;
  _DWORD *v263;
  unint64_t v264;
  int v265;
  uint64_t v266;
  unint64_t v267;
  int *v268;
  uint64_t v269;
  int *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  char *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t *v278;
  _DWORD *v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  uint64_t *v284;
  char *v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  unint64_t v289;
  _BYTE *v290;
  _DWORD *v291;
  unint64_t v292;
  char *v293;
  char *v294;
  char *v295;
  unsigned int *v296;
  unsigned int *v297;
  const char *v298;
  int v299;
  uint64_t v300;
  uint64_t v301;
  signed int v302;
  uint64_t **v303;
  uint64_t *v304;
  _QWORD *v305;
  uint64_t **v306;
  int v307;
  _QWORD *v308;
  int *v309;
  int v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  int v314;
  _QWORD *v315;
  void *v316;
  uint64_t v317;
  int v318;
  unint64_t v319;
  _DWORD *v320;
  _DWORD *v321;
  char *v322;
  _DWORD *v323;
  uint64_t v324;
  unint64_t v325;
  uint64_t v326;
  unint64_t v327;
  unint64_t v328;
  char *v329;
  char *v330;
  char *v331;
  __int128 v332;
  unsigned int *v333;
  unsigned int *v334;
  _QWORD *v335;
  uint64_t *v336;
  uint64_t **v337;
  _QWORD *v338;
  uint64_t **v339;
  int v340;
  uint64_t **v341;
  _QWORD *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  unint64_t v348;
  uint64_t v349;
  unint64_t v350;
  unsigned int *v351;
  _QWORD *v352;
  unint64_t v353;
  char *v354;
  char *v355;
  _DWORD *v356;
  unint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  char *v361;
  __int128 *v362;
  uint64_t v363;
  __int128 v364;
  int v365;
  char *v366;
  int64_t v367;
  uint64_t v368;
  unint64_t v369;
  uint64_t v370;
  unint64_t v371;
  unint64_t v372;
  _BYTE *v373;
  _QWORD *v374;
  uint64_t v375;
  unint64_t v376;
  _QWORD *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  _OWORD *v381;
  __int128 *v382;
  uint64_t v383;
  __int128 v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  unint64_t v389;
  uint64_t v390;
  unint64_t v391;
  char *v392;
  char *v393;
  uint64_t v394;
  unint64_t v395;
  uint64_t v396;
  char *v397;
  int v398;
  char *v399;
  uint64_t v400;
  _QWORD *v401;
  uint64_t v402;
  uint64_t v403;
  char *v404;
  __int128 *v405;
  uint64_t v406;
  __int128 v407;
  _BYTE *v408;
  int64_t v409;
  unint64_t v410;
  uint64_t v411;
  unint64_t v412;
  _BYTE *v413;
  _QWORD *v414;
  unint64_t v415;
  _QWORD *v416;
  uint64_t v417;
  uint64_t v418;
  _OWORD *v419;
  __int128 *v420;
  uint64_t v421;
  __int128 v422;
  uint64_t v423;
  _QWORD *v424;
  _QWORD *v425;
  uint64_t v426;
  char *v427;
  void *v428;
  char *v429;
  void *v430;
  void *v431;
  int v432;
  uint64_t v433;
  uint64_t v434;
  _OWORD *v435;
  __int128 *v436;
  uint64_t v437;
  __int128 v438;
  int v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t *v442;
  uint64_t v443;
  unint64_t v444;
  uint64_t v445;
  unint64_t v446;
  _BYTE *v447;
  _QWORD *v448;
  unint64_t v449;
  uint64_t *v450;
  uint64_t v451;
  _QWORD *v452;
  _QWORD *v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  _OWORD *v457;
  uint64_t *v458;
  uint64_t v459;
  __int128 v460;
  int v461;
  int v462;
  _QWORD *v464;
  _QWORD *v465;
  _QWORD *v466;
  _QWORD *v467;
  _QWORD *v468;
  char *v469;
  uint64_t v470;
  unsigned int v471;
  operations_research::sat::SatSolver *v472;
  uint64_t v473;
  operations_research::sat *v474;
  unsigned int *v475;
  uint64_t v476;
  int v477;
  uint64_t v478;
  char *v479;
  char *v480;
  _QWORD *v481;
  char v483;
  int *v484;
  int *v485;
  int v486;
  unint64_t v487;
  void *v488;
  uint64_t *v489;
  char *v490;
  void *v491;
  _BYTE *v492;
  char *v493;
  void *v494[2];
  unsigned __int8 v495;
  _BYTE v496[16];
  void *v497;
  _BYTE *v498;
  char *v499;
  void *__p;
  _DWORD *v501;
  char *v502;
  void *v503;
  char *v504;
  char *v505;
  uint64_t **v506;
  uint64_t *v507;
  uint64_t v508;
  _QWORD v509[3];
  _QWORD *v510;
  _BYTE *v511;
  uint64_t v512;
  _BYTE v513[32];
  __int128 v514;
  _BYTE v515[5];
  _QWORD v516[3];
  _QWORD *v517;
  void *v518;
  char *v519;
  _QWORD v520[4];
  void *v521;
  char *v522;
  _QWORD v523[4];
  _QWORD *v524;
  _QWORD *v525;
  _BYTE v526[32];
  void *v527;
  _QWORD *v528;
  _QWORD v529[4];
  __int128 v530;
  __int128 v531;
  const char *v532;
  uint64_t v533;
  _BYTE *v534;
  BOOL (*v535)(uint64_t, uint64_t, unsigned int, char *);
  const char *v536;
  uint64_t v537;
  unint64_t v538;
  BOOL (*v539)(int, uint64_t, unsigned int, char *);
  const char *v540;
  uint64_t v541;
  const char *v542;
  uint64_t v543;
  _BYTE *v544;
  uint64_t v545;
  const char *v546;
  uint64_t v547;
  _QWORD *v548;
  uint64_t v549;
  const char *v550;
  uint64_t v551;
  _QWORD *v552;
  uint64_t v553;
  uint64_t v554;

  v2 = this;
  v554 = *MEMORY[0x24BDAC8D0];
  v481 = (_QWORD *)((char *)this + 56);
  v507 = 0;
  v508 = 0;
  v469 = (char *)this + 88;
  v506 = &v507;
  *((_BYTE *)this + 121) = 0;
  while ((operations_research::sat::CoreBasedOptimizer::PropagateObjectiveBounds((operations_research::sat::SatSolver **)v2) & 1) != 0)
  {
    if (*(_BYTE *)(*(_QWORD *)v2 + 390))
    {
      if (!operations_research::sat::CoreBasedOptimizer::CoverOptimization((int **)v2))
        break;
      if (*((_BYTE *)v2 + 121))
      {
        v462 = 3;
        goto LABEL_649;
      }
    }
    v503 = 0;
    v504 = 0;
    v505 = 0;
    __p = 0;
    v501 = 0;
    v502 = 0;
    v497 = 0;
    v498 = 0;
    v499 = 0;
    v3 = *((_QWORD *)v2 + 7);
    v4 = *((_QWORD *)v2 + 8);
    if (v4 == v3)
    {
      v483 = 0;
      v8 = 0;
      v69 = 0;
      v5 = 0;
      v6 = 0;
      v70 = 1;
      v9 = *((_QWORD *)v2 + 8);
      v72 = 0;
      goto LABEL_84;
    }
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v483 = 0;
    v8 = 0;
    v9 = *((_QWORD *)v2 + 8);
    do
    {
      v10 = (int *)(v3 + 32 * v7);
      v11 = *(_QWORD *)(v10 + 1);
      if (!v11)
        goto LABEL_10;
      v12 = *v10;
      v13 = *(_QWORD *)(*((_QWORD *)v2 + 3) + 40);
      v14 = *(_QWORD *)(v13 + 12 * v12);
      if (!(v14 + *(_QWORD *)(v13 + 12 * (v12 ^ 1))))
      {
        v8 += v14 * v11;
        goto LABEL_10;
      }
      if (v11 < *((_QWORD *)v2 + 10))
      {
        v483 = 1;
        goto LABEL_10;
      }
      v15 = 0x7FFFFFFFFFFFFFFFLL;
      if (v14 >= (uint64_t)0x8000000000000002)
        v15 = -v14;
      LODWORD(v530) = v12 ^ 1;
      *(_QWORD *)((char *)&v530 + 4) = v15;
      v16 = v530;
      v17 = HIDWORD(v15);
      if (v6 < (_DWORD *)v502)
      {
        *(_QWORD *)v6 = v530;
        v6[2] = HIDWORD(v15);
        v6 += 3;
        v501 = v6;
        v1 = (uint64_t)v498;
        v18 = v499;
        if (v498 < v499)
          goto LABEL_19;
        goto LABEL_35;
      }
      v21 = __p;
      v22 = 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (_BYTE *)__p) >> 2);
      v23 = v22 + 1;
      if (v22 + 1 > 0x1555555555555555)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v24 = v8;
      if (0x5555555555555556 * ((v502 - (_BYTE *)__p) >> 2) > v23)
        v23 = 0x5555555555555556 * ((v502 - (_BYTE *)__p) >> 2);
      if (0xAAAAAAAAAAAAAAABLL * ((v502 - (_BYTE *)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
        v25 = 0x1555555555555555;
      else
        v25 = v23;
      if (v25)
      {
        if (v25 > 0x1555555555555555)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v26 = (char *)operator new(12 * v25);
        v27 = &v26[12 * v22];
        *(_QWORD *)v27 = v16;
        *((_DWORD *)v27 + 2) = v17;
        if (v6 == v21)
        {
LABEL_47:
          v31 = v6;
          v6 = v27 + 12;
          __p = v27;
          v501 = v27 + 12;
          v502 = &v26[12 * v25];
          if (v31)
            goto LABEL_33;
          goto LABEL_34;
        }
      }
      else
      {
        v26 = 0;
        v27 = (char *)(4 * (((char *)v6 - (_BYTE *)__p) >> 2));
        *(_QWORD *)v27 = v530;
        *((_DWORD *)v27 + 2) = v17;
        if (v6 == v21)
          goto LABEL_47;
      }
      v28 = v27;
      do
      {
        v29 = *(_QWORD *)(v6 - 3);
        v6 -= 3;
        v30 = v6[2];
        *(_QWORD *)(v28 - 12) = v29;
        v28 -= 12;
        *((_DWORD *)v28 + 2) = v30;
      }
      while (v6 != v21);
      v31 = __p;
      v6 = v27 + 12;
      __p = v28;
      v501 = v27 + 12;
      v502 = &v26[12 * v25];
      if (v31)
LABEL_33:
        operator delete(v31);
LABEL_34:
      v8 = v24;
      v501 = v6;
      v1 = (uint64_t)v498;
      v18 = v499;
      if (v498 < v499)
      {
LABEL_19:
        *(_QWORD *)v1 = v11;
        v1 += 8;
        v498 = (_BYTE *)v1;
        v20 = v504;
        v19 = v505;
        if (v504 >= v505)
          goto LABEL_59;
        goto LABEL_20;
      }
LABEL_35:
      v32 = v8;
      v33 = v497;
      v34 = v1 - (_QWORD)v497;
      v35 = (v1 - (uint64_t)v497) >> 3;
      v36 = v35 + 1;
      if ((unint64_t)(v35 + 1) >> 61)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v37 = v18 - (_BYTE *)v497;
      if (v37 >> 2 > v36)
        v36 = v37 >> 2;
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
        v38 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (v38)
      {
        if (v38 >> 61)
          goto LABEL_655;
        v39 = (char *)operator new(8 * v38);
        v40 = &v39[8 * v35];
        *(_QWORD *)v40 = v11;
        v41 = (uint64_t)(v40 + 8);
        if ((void *)v1 == v33)
        {
LABEL_50:
          v2 = this;
          goto LABEL_56;
        }
      }
      else
      {
        v39 = 0;
        v40 = (char *)(8 * v35);
        *(_QWORD *)(8 * v35) = v11;
        v41 = 8 * v35 + 8;
        if ((void *)v1 == v33)
          goto LABEL_50;
      }
      v42 = v1 - 8 - (_QWORD)v33;
      if (v42 < 0x58)
      {
        v2 = this;
        do
        {
LABEL_55:
          v51 = *(_QWORD *)(v1 - 8);
          v1 -= 8;
          *((_QWORD *)v40 - 1) = v51;
          v40 -= 8;
        }
        while ((void *)v1 != v33);
        goto LABEL_56;
      }
      v43 = v1 - (_QWORD)&v39[v34];
      v2 = this;
      if (v43 < 0x20)
        goto LABEL_55;
      v44 = (v42 >> 3) + 1;
      v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
      v46 = v1 - v45;
      v40 -= v45;
      v47 = &v39[8 * v35 - 16];
      v48 = (__int128 *)(v1 - 16);
      v49 = v44 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v50 = *v48;
        *((_OWORD *)v47 - 1) = *(v48 - 1);
        *(_OWORD *)v47 = v50;
        v47 -= 32;
        v48 -= 2;
        v49 -= 4;
      }
      while (v49);
      v1 = v46;
      if (v44 != (v44 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_55;
LABEL_56:
      v497 = v40;
      v499 = &v39[8 * v38];
      if (v33)
        operator delete(v33);
      v8 = v32;
      v498 = (_BYTE *)v41;
      v20 = v504;
      v19 = v505;
      if (v504 >= v505)
      {
LABEL_59:
        v1 = v8;
        v52 = (char *)v503;
        v53 = v20 - (_BYTE *)v503;
        v54 = (v20 - (_BYTE *)v503) >> 2;
        v55 = v54 + 1;
        if ((unint64_t)(v54 + 1) >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v56 = v19 - (_BYTE *)v503;
        if (v56 >> 1 > v55)
          v55 = v56 >> 1;
        if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL)
          v57 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v57 = v55;
        if (v57)
        {
          if (v57 >> 62)
LABEL_655:
            std::__throw_bad_array_new_length[abi:ne180100]();
          v58 = operator new(4 * v57);
          v2 = this;
          v59 = &v58[4 * v54];
          *(_DWORD *)v59 = v7;
          v5 = v59 + 4;
          if (v20 == v52)
            goto LABEL_76;
LABEL_70:
          v60 = v20 - 4 - v52;
          if (v60 < 0x2C)
            goto LABEL_688;
          if ((unint64_t)(v20 - &v58[v53]) < 0x20)
            goto LABEL_688;
          v61 = (v60 >> 2) + 1;
          v62 = 4 * (v61 & 0x7FFFFFFFFFFFFFF8);
          v63 = &v20[-v62];
          v59 -= v62;
          v64 = &v58[4 * v54 - 16];
          v65 = v20 - 16;
          v66 = v61 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v67 = *(_OWORD *)v65;
            *(v64 - 1) = *((_OWORD *)v65 - 1);
            *v64 = v67;
            v64 -= 2;
            v65 -= 32;
            v66 -= 8;
          }
          while (v66);
          v20 = v63;
          if (v61 != (v61 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_688:
            do
            {
              v68 = *((_DWORD *)v20 - 1);
              v20 -= 4;
              *((_DWORD *)v59 - 1) = v68;
              v59 -= 4;
            }
            while (v20 != v52);
          }
        }
        else
        {
          v58 = 0;
          v59 = (char *)(4 * v54);
          *(_DWORD *)(4 * v54) = v7;
          v5 = (char *)(4 * v54 + 4);
          if (v20 != v52)
            goto LABEL_70;
        }
LABEL_76:
        v503 = v59;
        v505 = &v58[4 * v57];
        if (v52)
          operator delete(v52);
        v8 = v1;
        goto LABEL_79;
      }
LABEL_20:
      *(_DWORD *)v20 = v7;
      v5 = v20 + 4;
LABEL_79:
      v504 = v5;
      v3 = *((_QWORD *)v2 + 7);
      v9 = *((_QWORD *)v2 + 8);
LABEL_10:
      ++v7;
    }
    while (v7 < (v9 - v3) >> 5);
    v69 = (int *)v503;
    v70 = v503 == v5;
    if (((v503 == v5) & v483) != 0)
    {
      operations_research::sat::CoreBasedOptimizer::ComputeNextStratificationThreshold(v2);
      v71 = 2;
      goto LABEL_627;
    }
    v4 = v3;
    v72 = v5 - (_BYTE *)v503;
    if ((unint64_t)(v5 - (_BYTE *)v503) > 0xB)
    {
LABEL_142:
      if (*off_2540796A0[0] >= 1)
      {
        if (off_2540796A0[0] != &google::kLogSiteUninitialized)
        {
          if (v4 != v9)
            goto LABEL_145;
LABEL_149:
          v121 = 0;
          goto LABEL_161;
        }
        if (google::InitVLOG3__((google *)off_2540796A0, (int **)&fLI::FLAGS_v, "./ortools/sat/optimization.cc", (const char *)1))
        {
          v4 = *((_QWORD *)v2 + 7);
          v9 = *((_QWORD *)v2 + 8);
          if (v4 == v9)
            goto LABEL_149;
LABEL_145:
          v120 = v9 - v4 - 32;
          if (v120 >= 0x80)
          {
            v123 = (v120 >> 5) + 1;
            v124 = v123 & 3;
            if ((v123 & 3) == 0)
              v124 = 4;
            v125 = v123 - v124;
            v126 = v4 + 32 * v125;
            v127 = 0;
            v128 = (int32x2_t *)(v4 + 76);
            v129 = 0;
            do
            {
              v130 = vzip1_s32(v128[-8], v128[-4]);
              v131 = v128[4];
              v132 = *v128;
              v128 += 16;
              v127 = vmax_s32(v127, v130);
              v129 = vmax_s32(v129, vzip1_s32(v132, v131));
              v125 -= 4;
            }
            while (v125);
            v133 = vmax_s32(v127, v129);
            LODWORD(v121) = vpmax_s32(v133, v133).u32[0];
            v4 = v126;
          }
          else
          {
            LODWORD(v121) = 0;
          }
          do
          {
            v134 = *(_DWORD *)(v4 + 12);
            if ((int)v121 <= v134)
              v121 = v134;
            else
              v121 = v121;
            v4 += 32;
          }
          while (v4 != v9);
LABEL_161:
          v135 = *((_DWORD *)v2 + 12);
          v136 = *(_QWORD *)(*((_QWORD *)v2 + 3) + 40);
          v137 = *(_QWORD *)(v136 + 12 * v135);
          v138 = *(_QWORD *)(v136 + 12 * (v135 ^ 1));
          v139 = -v138;
          if (v138 + v137)
          {
            if (v138 < 0)
              v138 = -v138;
            if (v137 >= 0)
              v141 = v137;
            else
              v141 = -v137;
            if (v138 <= v141)
              v138 = v141;
            LODWORD(v1) = vcvtpd_s64_f64((double)(v139 - v137) * 100.0 / (double)v138);
            v140 = off_2540796A8[0];
            if (*off_2540796A8[0] >= 1)
              goto LABEL_172;
          }
          else
          {
            v1 = 0;
            v140 = off_2540796A8[0];
            if (*off_2540796A8[0] < 1)
              goto LABEL_183;
LABEL_172:
            if (v140 != &google::kLogSiteUninitialized
              || google::InitVLOG3__((google *)off_2540796A8, (int **)&fLI::FLAGS_v, "./ortools/sat/optimization.cc", (const char *)1))
            {
              google::LogMessage::LogMessage((google::LogMessage *)v496, (google::glog_internal_namespace_ *)"./ortools/sat/optimization.cc", 1661);
              v142 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v496);
              v144 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v137, v515, v143);
              *(_QWORD *)&v514 = v515;
              *((_QWORD *)&v514 + 1) = v144 - v515;
              v146 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v139, v513, v145);
              v511 = v513;
              v512 = v146 - v513;
              v147 = *((_QWORD *)v2 + 10);
              *(_QWORD *)&v530 = "unscaled_next_obj_range:[";
              *((_QWORD *)&v530 + 1) = 25;
              v531 = v514;
              v532 = ",";
              v533 = 1;
              v534 = v513;
              v535 = (BOOL (*)(uint64_t, uint64_t, unsigned int, char *))(v146 - v513);
              v536 = "] gap:";
              v537 = 6;
              v149 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v1, v529, v148);
              v527 = v529;
              v528 = (_QWORD *)(v149 - (_BYTE *)v529);
              v538 = (unint64_t)v529;
              v539 = (BOOL (*)(int, uint64_t, unsigned int, char *))(v149 - (_BYTE *)v529);
              v540 = "%";
              v541 = 1;
              v542 = " assumptions:";
              v543 = 13;
              v151 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v72 >> 2, v526, v150);
              v524 = v526;
              v525 = (_QWORD *)(v151 - v526);
              v544 = v526;
              v545 = v151 - v526;
              v546 = " strat:";
              v547 = 7;
              v153 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v147, v523, v152);
              v521 = v523;
              v522 = (char *)(v153 - (_BYTE *)v523);
              v548 = v523;
              v549 = v153 - (_BYTE *)v523;
              v550 = " depth:";
              v551 = 7;
              v155 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v121, v520, v154);
              v518 = v520;
              v519 = (char *)(v155 - (_BYTE *)v520);
              v552 = v520;
              v553 = v155 - (_BYTE *)v520;
              absl::lts_2020_02_25::strings_internal::CatPieces((uint64_t)&v530, 13, (char *)v494);
              if ((v495 & 0x80u) == 0)
                v156 = v494;
              else
                v156 = (void **)v494[0];
              if ((v495 & 0x80u) == 0)
                v157 = v495;
              else
                v157 = (uint64_t)v494[1];
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v142, (uint64_t)v156, v157);
              if ((char)v495 < 0)
                operator delete(v494[0]);
              google::LogMessage::~LogMessage((google::LogMessage *)v496);
            }
          }
        }
      }
LABEL_183:
      v522 = 0;
      v521 = 0;
      v523[0] = 0;
      std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v506, v507);
      v507 = 0;
      v508 = 0;
      v506 = &v507;
      v158 = (char *)__p;
      if (v6 == __p)
      {
        v518 = 0;
        v519 = 0;
        v520[0] = 0;
        v492 = 0;
        v493 = 0;
        v491 = 0;
        goto LABEL_252;
      }
      v159 = 0;
      while (2)
      {
        v160 = &v158[12 * v159];
        v161 = *(const char **)v160;
        v162 = *((unsigned int *)v160 + 2);
        v487 = v487 & 0xFFFFFFFF00000000 | v162;
        AssociatedLiteral = operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(*((unsigned int **)v2 + 4), v161, v162);
        v164 = AssociatedLiteral;
        v165 = v522;
        if ((unint64_t)v522 < v523[0])
        {
          *(_DWORD *)v522 = AssociatedLiteral;
          v166 = (uint64_t)(v165 + 4);
          goto LABEL_211;
        }
        v167 = (char *)v521;
        v168 = v522 - (_BYTE *)v521;
        v169 = (v522 - (_BYTE *)v521) >> 2;
        v170 = v169 + 1;
        if ((unint64_t)(v169 + 1) >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v171 = v523[0] - (_QWORD)v521;
        if ((uint64_t)(v523[0] - (_QWORD)v521) >> 1 > v170)
          v170 = v171 >> 1;
        if ((unint64_t)v171 >= 0x7FFFFFFFFFFFFFFCLL)
          v172 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v172 = v170;
        if (v172)
        {
          if (v172 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v173 = (char *)operator new(4 * v172);
          v174 = &v173[4 * v169];
          *(_DWORD *)v174 = v164;
          v166 = (uint64_t)(v174 + 4);
          if (v165 != v167)
          {
LABEL_200:
            v175 = v165 - 4 - v167;
            if (v175 < 0x2C)
              goto LABEL_689;
            if ((unint64_t)(v165 - &v173[v168]) < 0x20)
              goto LABEL_689;
            v176 = (v175 >> 2) + 1;
            v177 = 4 * (v176 & 0x7FFFFFFFFFFFFFF8);
            v178 = &v165[-v177];
            v174 -= v177;
            v179 = &v173[4 * v169 - 16];
            v180 = v165 - 16;
            v181 = v176 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v182 = *(_OWORD *)v180;
              *((_OWORD *)v179 - 1) = *((_OWORD *)v180 - 1);
              *(_OWORD *)v179 = v182;
              v179 -= 32;
              v180 -= 32;
              v181 -= 8;
            }
            while (v181);
            v165 = v178;
            if (v176 != (v176 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_689:
              do
              {
                v183 = *((_DWORD *)v165 - 1);
                v165 -= 4;
                *((_DWORD *)v174 - 1) = v183;
                v174 -= 4;
              }
              while (v165 != v167);
            }
          }
        }
        else
        {
          v173 = 0;
          v174 = (char *)(4 * v169);
          *(_DWORD *)(4 * v169) = v164;
          v166 = 4 * v169 + 4;
          if (v165 != v167)
            goto LABEL_200;
        }
        v521 = v174;
        v523[0] = &v173[4 * v172];
        if (v167)
          operator delete(v167);
LABEL_211:
        v522 = (char *)v166;
        v184 = *((_DWORD *)v503 + v159);
        v185 = *(_DWORD *)(v166 - 4);
        v186 = v507;
        for (i = &v507; ; v186 = *i)
        {
          v188 = i;
          if (!v186)
            break;
          while (1)
          {
            i = (uint64_t **)v186;
            v189 = *((_DWORD *)v186 + 7);
            if (v185 < v189)
              break;
            if (v189 >= v185)
            {
              v190 = i;
              goto LABEL_188;
            }
            v186 = i[1];
            if (!v186)
            {
              v188 = i + 1;
              goto LABEL_218;
            }
          }
        }
LABEL_218:
        v190 = operator new(0x28uLL);
        v190[7] = v185;
        v190[8] = 0;
        *(_QWORD *)v190 = 0;
        *((_QWORD *)v190 + 1) = 0;
        *((_QWORD *)v190 + 2) = i;
        *v188 = (uint64_t *)v190;
        v191 = (uint64_t *)v190;
        if (*v506)
        {
          v506 = (uint64_t **)*v506;
          v191 = *v188;
        }
        v192 = v507;
        v193 = v191 == v507;
        *((_BYTE *)v191 + 24) = v191 == v507;
        if (v193)
          goto LABEL_187;
        while (1)
        {
          v194 = (uint64_t *)v191[2];
          if (*((_BYTE *)v194 + 24))
            goto LABEL_187;
          v195 = (uint64_t *)v194[2];
          v196 = (uint64_t *)*v195;
          if ((uint64_t *)*v195 == v194)
            break;
          if (!v196 || (v198 = *((unsigned __int8 *)v196 + 24), v197 = v196 + 3, v198))
          {
            if ((uint64_t *)*v194 == v191)
            {
              v204 = v191[1];
              *v194 = v204;
              if (v204)
              {
                *(_QWORD *)(v204 + 16) = v194;
                v195 = (uint64_t *)v194[2];
              }
              v191[2] = (uint64_t)v195;
              *(_QWORD *)(v194[2] + 8 * (*(_QWORD *)v194[2] != (_QWORD)v194)) = v191;
              v191[1] = (uint64_t)v194;
              v194[2] = (uint64_t)v191;
              v195 = (uint64_t *)v191[2];
            }
            else
            {
              v191 = (uint64_t *)v191[2];
            }
            *((_BYTE *)v191 + 24) = 1;
            *((_BYTE *)v195 + 24) = 0;
            v194 = (uint64_t *)v195[1];
            v205 = *v194;
            v195[1] = *v194;
            if (v205)
              *(_QWORD *)(v205 + 16) = v195;
            v194[2] = v195[2];
            *(_QWORD *)(v195[2] + 8 * (*(_QWORD *)v195[2] != (_QWORD)v195)) = v194;
            *v194 = (uint64_t)v195;
            goto LABEL_186;
          }
LABEL_223:
          *((_BYTE *)v194 + 24) = 1;
          v191 = v195;
          *((_BYTE *)v195 + 24) = v195 == v192;
          *v197 = 1;
          if (v195 == v192)
            goto LABEL_187;
        }
        v199 = v195[1];
        if (v199)
        {
          v200 = *(unsigned __int8 *)(v199 + 24);
          v197 = (_BYTE *)(v199 + 24);
          if (!v200)
            goto LABEL_223;
        }
        if ((uint64_t *)*v194 == v191)
        {
          *((_BYTE *)v194 + 24) = 1;
          *((_BYTE *)v195 + 24) = 0;
          v203 = v194[1];
          *v195 = v203;
          if (v203)
            goto LABEL_235;
        }
        else
        {
          v201 = (uint64_t **)v194[1];
          v202 = *v201;
          v194[1] = (uint64_t)*v201;
          if (v202)
          {
            v202[2] = (uint64_t)v194;
            v195 = (uint64_t *)v194[2];
          }
          v201[2] = v195;
          *(_QWORD *)(v194[2] + 8 * (*(_QWORD *)v194[2] != (_QWORD)v194)) = v201;
          *v201 = v194;
          v194[2] = (uint64_t)v201;
          v195 = v201[2];
          v194 = (uint64_t *)*v195;
          *((_BYTE *)v201 + 24) = 1;
          *((_BYTE *)v195 + 24) = 0;
          v203 = v194[1];
          *v195 = v203;
          if (v203)
LABEL_235:
            *(_QWORD *)(v203 + 16) = v195;
        }
        v194[2] = v195[2];
        *(_QWORD *)(v195[2] + 8 * (*(_QWORD *)v195[2] != (_QWORD)v195)) = v194;
        v194[1] = (uint64_t)v195;
LABEL_186:
        v195[2] = (uint64_t)v194;
LABEL_187:
        ++v508;
        v6 = v501;
LABEL_188:
        v190[8] = v184;
        ++v159;
        v158 = (char *)__p;
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (_BYTE *)__p) >> 2) <= v159)
        {
          v206 = v521;
          v518 = 0;
          v519 = 0;
          v520[0] = 0;
          v492 = 0;
          v493 = 0;
          v491 = 0;
          v207 = v522 - (_BYTE *)v521;
          if (v522 != v521)
          {
            if (v207 < 0)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v491 = operator new(v522 - (_BYTE *)v521);
            v492 = v491;
            v208 = (char *)v491 + 4 * (v207 >> 2);
            v493 = v208;
            memcpy(v491, v206, v207);
            v492 = v208;
            v488 = 0;
            v489 = 0;
            v490 = 0;
            v209 = v497;
            v210 = v498 - (_BYTE *)v497;
            if (v498 == v497)
            {
LABEL_255:
              v1 = *((_QWORD *)v2 + 10);
              v212 = (operations_research::sat *)*((_QWORD *)v2 + 5);
              v519 = 0;
              v213 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)v212);
              v214 = (absl::lts_2020_02_25 *)operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>((uint64_t)v212);
              v215 = v214;
              v485 = (int *)((char *)v214 + 32);
              v470 = v1;
              v472 = v213;
              v474 = v212;
              while (1)
              {
                v216 = (unsigned __int8 *)*((_QWORD *)v215 + 15);
                if (v216)
                {
                  v217 = atomic_load(v216);
                  if ((v217 & 1) != 0)
                    goto LABEL_367;
                }
                if (fmax(*((double *)v215 + 13) - *((double *)v215 + 14), 0.0) <= 0.0)
                  goto LABEL_367;
                CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos(v214);
                v219 = CurrentTimeNanos;
                if (*((_QWORD *)v215 + 3) <= CurrentTimeNanos - *((_QWORD *)v215 + 1))
                  v220 = CurrentTimeNanos - *((_QWORD *)v215 + 1);
                else
                  v220 = *((_QWORD *)v215 + 3);
                operations_research::RunningMax<long long>::Add(v485, v220);
                *((_QWORD *)v215 + 1) = v219;
                if (*(_QWORD *)(*((_QWORD *)v215 + 5) + 8 * *((int *)v215 + 17)) + v219 >= *((_QWORD *)v215 + 2))
                {
                  if (!FLAGS_time_limit_use_usertime)
                    goto LABEL_366;
                  v222 = *((double *)v215 + 12);
                  if (*((_BYTE *)v215 + 72))
                  {
                    v223 = v222
                         + (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v221)
                                  - *((_QWORD *)v215 + 10)
                                  + *((_QWORD *)v215 + 11))
                         * -0.000000001;
                    if (v223 <= 0.0001)
                      goto LABEL_366;
                  }
                  else
                  {
                    v223 = v222 + (double)*((uint64_t *)v215 + 11) * -0.000000001;
                    if (v223 <= 0.0001)
                    {
LABEL_366:
                      *((_QWORD *)v215 + 2) = 0;
LABEL_367:
                      v71 = 3;
LABEL_368:
                      v284 = (uint64_t *)v488;
                      if (!v488)
                        goto LABEL_370;
                      goto LABEL_369;
                    }
                  }
                  *((_QWORD *)v215 + 2) = *((_QWORD *)v215 + 1) + (uint64_t)(v223 * 1000000000.0);
                }
                v71 = operations_research::sat::ResetAndSolveIntegerProblem((int **)&v491, v212);
                if (v71)
                  goto LABEL_368;
                operations_research::sat::SatSolver::GetLastIncompatibleDecisions(v213, &v530);
                if (*(_BYTE *)(operations_research::sat::SatSolver::parameters(v213) + 388))
                  operations_research::sat::MinimizeCoreWithPropagation(v213, (const void **)&v530);
                if ((_QWORD)v530 == *((_QWORD *)&v530 + 1))
                {
                  google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v527, (google::glog_internal_namespace_ *)"./ortools/sat/optimization.cc", 1256);
                  v466 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v527);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v466, (uint64_t)"Check failed: !core.empty() ", 28);
                  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v527);
                }
                v224 = v519;
                if ((unint64_t)v519 >= v520[0])
                {
                  v229 = std::vector<std::vector<operations_research::sat::Literal>>::__push_back_slow_path<std::vector<operations_research::sat::Literal> const&>((char **)&v518, (uint64_t)&v530);
                }
                else
                {
                  *(_QWORD *)v519 = 0;
                  *((_QWORD *)v224 + 1) = 0;
                  *((_QWORD *)v224 + 2) = 0;
                  v225 = (const void *)v530;
                  v226 = *((_QWORD *)&v530 + 1) - v530;
                  if (*((_QWORD *)&v530 + 1) != (_QWORD)v530)
                  {
                    if (v226 < 0)
                      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                    v227 = (char *)operator new(*((_QWORD *)&v530 + 1) - v530);
                    *(_QWORD *)v224 = v227;
                    *((_QWORD *)v224 + 1) = v227;
                    v228 = &v227[4 * (v226 >> 2)];
                    *((_QWORD *)v224 + 2) = v228;
                    memcpy(v227, v225, v226);
                    *((_QWORD *)v224 + 1) = v228;
                  }
                  v229 = v224 + 24;
                }
                v519 = v229;
                v230 = operations_research::sat::SatSolver::parameters(v213);
                v231 = *(unsigned __int8 *)(v230 + 389);
                if (!*(_BYTE *)(v230 + 389))
                  goto LABEL_360;
                v528 = 0;
                v527 = 0;
                v529[0] = 0;
                std::set<operations_research::sat::Literal>::set[abi:ne180100]<std::__wrap_iter<operations_research::sat::Literal*>>(&v524, (int *)v530, *((int **)&v530 + 1));
                v232 = v491;
                v233 = v492;
                if (v492 == v491 || !v525)
                {
                  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v524, v525);
                  v261 = 0;
                  v262 = (uint64_t *)v488;
                  v213 = v472;
                  v212 = v474;
                  v263 = v491;
                  v264 = (v492 - (_BYTE *)v491) >> 2;
                  v265 = 0;
                  if (v492 != v491)
                    goto LABEL_344;
                  goto LABEL_351;
                }
                v234 = 0;
                v235 = 0;
                v236 = 0;
                v237 = 0;
                v477 = v231;
                do
                {
                  if (v525)
                  {
                    v239 = v232[v237];
                    v240 = &v525;
                    v241 = v525;
                    do
                    {
                      v242 = v241;
                      v243 = v240;
                      v244 = *((_DWORD *)v241 + 7);
                      if (v244 >= v239)
                        v240 = (_QWORD **)v241;
                      else
                        ++v241;
                      v241 = (_QWORD *)*v241;
                    }
                    while (v241);
                    if (v240 != &v525)
                    {
                      if (v244 < v239)
                        v242 = v243;
                      if (v239 >= *((_DWORD *)v242 + 7))
                      {
                        if (v236 < v235)
                        {
                          *(_DWORD *)v236 = v237;
                          v238 = (uint64_t)(v236 + 4);
                        }
                        else
                        {
                          v245 = (v236 - v234) >> 2;
                          v246 = v245 + 1;
                          if ((unint64_t)(v245 + 1) >> 62)
                            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                          if ((v235 - v234) >> 1 > v246)
                            v246 = (v235 - v234) >> 1;
                          if ((unint64_t)(v235 - v234) >= 0x7FFFFFFFFFFFFFFCLL)
                            v247 = 0x3FFFFFFFFFFFFFFFLL;
                          else
                            v247 = v246;
                          if (v247)
                          {
                            if (v247 >> 62)
                              std::__throw_bad_array_new_length[abi:ne180100]();
                            v248 = v247;
                            v249 = operator new(4 * v247);
                            v247 = v248;
                            v250 = &v249[4 * v245];
                            *v250 = v237;
                            v238 = (uint64_t)(v250 + 1);
                            if (v236 != v234)
                            {
LABEL_306:
                              v251 = v236 - 4 - v234;
                              if (v251 < 0xBC
                                || &v249[v236 - v234 - 4 - (v251 & 0xFFFFFFFFFFFFFFFCLL)] > &v249[v236 - v234 - 4]
                                || &v236[-(v251 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v236 - 4
                                || (unint64_t)(v234 - v249) < 0x20)
                              {
                                v252 = v236;
                                v231 = v477;
                              }
                              else
                              {
                                v255 = (v251 >> 2) + 1;
                                v256 = 4 * (v255 & 0x7FFFFFFFFFFFFFF8);
                                v252 = &v236[-v256];
                                v250 = (_DWORD *)((char *)v250 - v256);
                                v257 = &v249[4 * v245 - 16];
                                v258 = v236 - 16;
                                v259 = v255 & 0x7FFFFFFFFFFFFFF8;
                                do
                                {
                                  v260 = *(_OWORD *)v258;
                                  *(v257 - 1) = *((_OWORD *)v258 - 1);
                                  *v257 = v260;
                                  v257 -= 2;
                                  v258 -= 32;
                                  v259 -= 8;
                                }
                                while (v259);
                                v231 = v477;
                                if (v255 == (v255 & 0x7FFFFFFFFFFFFFF8))
                                {
LABEL_309:
                                  v235 = &v249[4 * v247];
                                  v527 = v250;
                                  v528 = (_QWORD *)v238;
                                  v529[0] = v235;
                                  if (v234)
                                    goto LABEL_310;
                                  goto LABEL_311;
                                }
                              }
                              do
                              {
                                v253 = *((_DWORD *)v252 - 1);
                                v252 -= 4;
                                *--v250 = v253;
                              }
                              while (v252 != v234);
                              goto LABEL_309;
                            }
                          }
                          else
                          {
                            v249 = 0;
                            v250 = (_DWORD *)(4 * v245);
                            *(_DWORD *)(4 * v245) = v237;
                            v238 = 4 * v245 + 4;
                            if (v236 != v234)
                              goto LABEL_306;
                          }
                          v231 = v477;
                          v235 = &v249[4 * v247];
                          v527 = v250;
                          v528 = (_QWORD *)v238;
                          v529[0] = v235;
                          if (v234)
                          {
LABEL_310:
                            v254 = v235;
                            operator delete(v234);
                            v235 = v254;
                            v232 = v491;
                            v233 = v492;
                          }
LABEL_311:
                          v234 = (char *)v250;
                        }
                        v528 = (_QWORD *)v238;
                        v236 = (char *)v238;
                      }
                    }
                  }
                  ++v237;
                }
                while (v237 < (v233 - (_BYTE *)v232) >> 2);
                v261 = (char *)v527;
                std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v524, v525);
                v262 = (uint64_t *)v488;
                if (v261 == v236)
                {
                  v2 = this;
                  v1 = v470;
                  v213 = v472;
                  v212 = v474;
                  v263 = v491;
                  v264 = (v492 - (_BYTE *)v491) >> 2;
                  v265 = 0;
                  if (v492 != v491)
                    goto LABEL_344;
                }
                else
                {
                  v266 = *((_QWORD *)v488 + *(int *)v261);
                  v267 = v236 - v261 - 4;
                  v1 = v470;
                  v213 = v472;
                  v212 = v474;
                  if (v267 < 4)
                  {
                    v268 = (int *)v261;
                    goto LABEL_338;
                  }
                  v269 = (v267 >> 2) + 1;
                  v268 = (int *)&v261[4 * (v269 & 0x7FFFFFFFFFFFFFFELL)];
                  v270 = (int *)(v261 + 4);
                  v271 = v269 & 0x7FFFFFFFFFFFFFFELL;
                  v272 = *((_QWORD *)v488 + *(int *)v261);
                  do
                  {
                    if (*((_QWORD *)v488 + *(v270 - 1)) < v266)
                      v266 = *((_QWORD *)v488 + *(v270 - 1));
                    if (*((_QWORD *)v488 + *v270) < v272)
                      v272 = *((_QWORD *)v488 + *v270);
                    v270 += 2;
                    v271 -= 2;
                  }
                  while (v271);
                  if (v266 >= v272)
                    v266 = v272;
                  if (v269 != (v269 & 0x7FFFFFFFFFFFFFFELL))
                  {
                    do
                    {
LABEL_338:
                      v273 = *v268++;
                      v274 = *((_QWORD *)v488 + v273);
                      if (v274 < v266)
                        v266 = v274;
                    }
                    while (v268 != (int *)v236);
                  }
                  v275 = v261;
                  do
                  {
                    v276 = *(int *)v275;
                    v275 += 4;
                    v262[v276] -= v266;
                  }
                  while (v275 != v236);
                  v2 = this;
                  v263 = v491;
                  v264 = (v492 - (_BYTE *)v491) >> 2;
                  v265 = 0;
                  if (v492 != v491)
                  {
LABEL_344:
                    if (v264 <= 1)
                      v277 = 1;
                    else
                      v277 = v264;
                    v278 = v262;
                    v279 = v263;
                    do
                    {
                      v281 = *v278++;
                      v280 = v281;
                      if (v281 >= v1)
                      {
                        v263[v265] = *v279;
                        v262[v265++] = v280;
                      }
                      ++v279;
                      --v277;
                    }
                    while (v277);
                  }
                }
LABEL_351:
                v282 = v265;
                if (v265 <= v264)
                {
                  if (v265 < v264)
                    v492 = &v263[v265];
                }
                else
                {
                  std::vector<operations_research::sat::Literal>::__append((uint64_t)&v491, v265 - v264);
                  v262 = (uint64_t *)v488;
                }
                v283 = v489 - v262;
                if (v282 <= v283)
                {
                  if (v282 < v283)
                    v489 = &v262[v282];
                }
                else
                {
                  std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::__append((uint64_t)&v488, v282 - v283);
                }
                operator delete(v261);
LABEL_360:
                v214 = (absl::lts_2020_02_25 *)v530;
                if ((_QWORD)v530)
                {
                  *((_QWORD *)&v530 + 1) = v530;
                  operator delete((void *)v530);
                }
                if (!v231 || v491 == v492)
                {
                  v71 = 0;
                  v284 = (uint64_t *)v488;
                  if (!v488)
                  {
LABEL_370:
                    if (v491)
                    {
                      v492 = v491;
                      operator delete(v491);
                    }
                    if (v71 == 1)
                    {
                      v471 = 1;
                      v285 = (char *)v518;
                      if (v518)
                        goto LABEL_580;
                      goto LABEL_587;
                    }
                    if (v71 == 2)
                    {
                      if (operations_research::sat::CoreBasedOptimizer::ProcessSolution(v2))
                      {
                        if (*((_BYTE *)v2 + 121))
                        {
                          v471 = 3;
                          v71 = 1;
                          v285 = (char *)v518;
                          if (v518)
                            goto LABEL_580;
                          goto LABEL_587;
                        }
                        if (v518 == v519)
                        {
                          operations_research::sat::CoreBasedOptimizer::ComputeNextStratificationThreshold(v2);
                          if (*((_QWORD *)v2 + 10))
                            v71 = 2;
                          else
                            v71 = 1;
                          v461 = v471;
                          if (!*((_QWORD *)v2 + 10))
                            v461 = 1;
                          v471 = v461;
                          v285 = (char *)v518;
                          if (!v518)
                            goto LABEL_587;
                          goto LABEL_580;
                        }
                        goto LABEL_397;
                      }
LABEL_579:
                      v71 = 1;
                      v471 = 1;
                      v285 = (char *)v518;
                      if (v518)
                        goto LABEL_580;
                      goto LABEL_587;
                    }
LABEL_397:
                    if (!operations_research::sat::SatSolver::ResetToLevelZero(*((operations_research::sat::SatSolver **)v2
                                                                                              + 1)))
                      goto LABEL_579;
                    v294 = (char *)v518;
                    v295 = v519;
                    if (v518 == v519)
                      goto LABEL_589;
                    while (2)
                    {
                      v296 = *(unsigned int **)v294;
                      v297 = (unsigned int *)*((_QWORD *)v294 + 1);
                      if ((unsigned int *)((char *)v297 - *(_QWORD *)v294) == (unsigned int *)4)
                        goto LABEL_400;
                      if (v296 != v297)
                      {
                        if (v507)
                        {
                          v298 = 0;
                          v1 = 0;
                          v299 = 0;
                          v300 = 0x7FFFFFFFFFFFFFFELL;
                          v301 = 1;
                          while (1)
                          {
                            v302 = *v296;
                            v303 = &v507;
                            v304 = v507;
                            do
                            {
                              v305 = v304;
                              v306 = v303;
                              v307 = *((_DWORD *)v304 + 7);
                              if (v307 >= v302)
                                v303 = (uint64_t **)v304;
                              else
                                ++v304;
                              v304 = (_QWORD *)*v304;
                            }
                            while (v304);
                            if (v303 == &v507)
                              break;
                            v308 = v307 >= v302 ? v305 : v306;
                            if (v302 < *((_DWORD *)v308 + 7))
                              break;
                            if (v307 < v302)
                              v305 = v306;
                            v309 = (int *)(*((_QWORD *)v2 + 7) + 32 * *((int *)v305 + 8));
                            v310 = *v309;
                            v311 = *(_QWORD *)(*((_QWORD *)v2 + 3) + 40);
                            v312 = *(_QWORD *)(v311 + 12 * *v309);
                            if (*((_QWORD *)v309 + 2) < v312)
                              goto LABEL_400;
                            v313 = *(_QWORD *)(v309 + 1);
                            if (v313 < v300)
                              v300 = *(_QWORD *)(v309 + 1);
                            if ((uint64_t)v298 <= v313)
                              v298 = *(const char **)(v309 + 1);
                            v314 = v309[3];
                            if (v299 <= v314 + 1)
                              v299 = v314 + 1;
                            v301 += v312;
                            v1 -= *(_QWORD *)(v311 + 12 * (v310 ^ 1));
                            if (++v296 == v297)
                              goto LABEL_427;
                          }
                        }
                        google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v530, (google::glog_internal_namespace_ *)"./ortools/base/map_util.h", 180);
                        v467 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v530);
                        v468 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v467, (uint64_t)"Check failed: it != collection.end() ", 37);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v468, (uint64_t)"Map key not found: ", 19);
                        std::ostream::operator<<();
                        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v530);
                      }
                      v299 = 0;
                      v1 = 0;
                      v298 = 0;
                      v300 = 0x7FFFFFFFFFFFFFFELL;
                      v301 = 1;
LABEL_427:
                      if (*off_2540796B0[0] >= 1
                        && (off_2540796B0[0] != &google::kLogSiteUninitialized
                         || google::InitVLOG3__((google *)off_2540796B0, (int **)&fLI::FLAGS_v, "./ortools/sat/optimization.cc", (const char *)1)))
                      {
                        google::LogMessage::LogMessage((google::LogMessage *)&v524, (google::glog_internal_namespace_ *)"./ortools/sat/optimization.cc", 1742);
                        v315 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v524);
                        *(_QWORD *)&v530 = (uint64_t)(*((_QWORD *)v294 + 1) - *(_QWORD *)v294) >> 2;
                        *((_QWORD *)&v530 + 1) = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<unsigned long>;
                        *(_QWORD *)&v531 = v300;
                        *((_QWORD *)&v531 + 1) = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
                        v532 = v298;
                        v533 = (uint64_t)absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
                        v534 = (_BYTE *)v301;
                        v535 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
                        v536 = (const char *)v1;
                        v537 = (uint64_t)absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
                        v538 = v299;
                        v539 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<int>;
                        absl::lts_2020_02_25::str_format_internal::FormatPack("core:%u weight:[%d,%d] domain:[%d,%d] depth:%d", 46, (uint64_t)&v530, 6, (uint64_t)&v527);
                        if (v529[0] >= 0)
                          v316 = &v527;
                        else
                          v316 = v527;
                        if (v529[0] >= 0)
                          v317 = HIBYTE(v529[0]);
                        else
                          v317 = (uint64_t)v528;
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v315, (uint64_t)v316, v317);
                        if (SHIBYTE(v529[0]) < 0)
                          operator delete(v527);
                        google::LogMessage::~LogMessage((google::LogMessage *)&v524);
                      }
                      v318 = operations_research::sat::IntegerTrail::AddIntegerVariable(*((_QWORD *)v2 + 3), v301, v1);
                      v320 = (_DWORD *)*((_QWORD *)v2 + 8);
                      v319 = *((_QWORD *)v2 + 9);
                      v486 = v318;
                      if ((unint64_t)v320 >= v319)
                      {
                        v478 = v300;
                        v322 = v295;
                        v323 = (_DWORD *)*v481;
                        v324 = ((uint64_t)v320 - *v481) >> 5;
                        v325 = v324 + 1;
                        if ((unint64_t)(v324 + 1) >> 59)
                          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                        v326 = v319 - (_QWORD)v323;
                        if (v326 >> 4 > v325)
                          v325 = v326 >> 4;
                        if ((unint64_t)v326 >= 0x7FFFFFFFFFFFFFE0)
                          v327 = 0x7FFFFFFFFFFFFFFLL;
                        else
                          v327 = v325;
                        if (v327)
                        {
                          if (v327 >> 59)
                            std::__throw_bad_array_new_length[abi:ne180100]();
                          v328 = v327;
                          v329 = (char *)operator new(32 * v327);
                          v327 = v328;
                        }
                        else
                        {
                          v329 = 0;
                        }
                        v330 = &v329[32 * v324];
                        *(_DWORD *)v330 = v486;
                        *(_QWORD *)(v330 + 4) = v478;
                        *((_DWORD *)v330 + 3) = v299;
                        *((_QWORD *)v330 + 2) = 0;
                        *((_QWORD *)v330 + 3) = 0;
                        v331 = v330;
                        v295 = v322;
                        if (v320 != v323)
                        {
                          do
                          {
                            v332 = *((_OWORD *)v320 - 1);
                            *((_OWORD *)v331 - 2) = *((_OWORD *)v320 - 2);
                            *((_OWORD *)v331 - 1) = v332;
                            v331 -= 32;
                            v320 -= 8;
                          }
                          while (v320 != v323);
                          v320 = (_DWORD *)*v481;
                        }
                        v300 = v478;
                        v321 = v330 + 32;
                        *((_QWORD *)v2 + 7) = v331;
                        *((_QWORD *)v2 + 8) = v330 + 32;
                        *((_QWORD *)v2 + 9) = &v329[32 * v327];
                        if (v320)
                          operator delete(v320);
                      }
                      else
                      {
                        *v320 = v318;
                        *(_QWORD *)(v320 + 1) = v300;
                        v320[3] = v299;
                        v321 = v320 + 8;
                        *((_QWORD *)v320 + 2) = 0;
                        *((_QWORD *)v320 + 3) = 0;
                      }
                      *((_QWORD *)v2 + 8) = v321;
                      *((_QWORD *)v321 - 1) = v1;
                      v530 = 0uLL;
                      *(_QWORD *)&v531 = 0;
                      v528 = 0;
                      v527 = 0;
                      v529[0] = 0;
                      v334 = *(unsigned int **)v294;
                      v333 = (unsigned int *)*((_QWORD *)v294 + 1);
                      if (*(unsigned int **)v294 == v333)
                      {
                        v480 = v295;
                        v385 = 0;
                        v386 = 0;
                        v335 = 0;
                        v1 = v530;
                        v387 = -(uint64_t)v530;
                        v388 = -(uint64_t)v530 >> 2;
                        v389 = v388 + 1;
                        if ((unint64_t)(v388 + 1) >> 62)
                          goto LABEL_677;
                        goto LABEL_521;
                      }
                      v335 = 0;
LABEL_458:
                      while (2)
                      {
                        v1 = *v334;
                        v336 = v507;
                        if (!v507)
                          goto LABEL_651;
                        v337 = &v507;
                        do
                        {
                          v338 = v336;
                          v339 = v337;
                          v340 = *((_DWORD *)v336 + 7);
                          v341 = v336 + 1;
                          if (v340 >= (int)v1)
                          {
                            v341 = v338;
                            v337 = (uint64_t **)v338;
                          }
                          v336 = (_QWORD *)*v341;
                        }
                        while (v336);
                        if (v337 == &v507
                          || (v340 >= (int)v1 ? (v342 = v338) : (v342 = v339), (int)v1 < *((_DWORD *)v342 + 7)))
                        {
LABEL_651:
                          google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v524, (google::glog_internal_namespace_ *)"./ortools/base/map_util.h", 180);
                          v464 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v524);
                          v465 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v464, (uint64_t)"Check failed: it != collection.end() ", 37);
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v465, (uint64_t)"Map key not found: ", 19);
                          std::ostream::operator<<();
                          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v524);
                        }
                        if (v340 < (int)v1)
                          v338 = v339;
                        v343 = *v481 + 32 * *((int *)v338 + 8);
                        *(_QWORD *)(v343 + 4) -= v300;
                        v344 = *((_QWORD *)&v530 + 1);
                        v475 = v333;
                        if (*((_QWORD *)&v530 + 1) >= (unint64_t)v531)
                        {
                          v479 = v295;
                          v1 = v530;
                          v346 = *((_QWORD *)&v530 + 1) - v530;
                          v347 = (uint64_t)(*((_QWORD *)&v530 + 1) - v530) >> 2;
                          v348 = v347 + 1;
                          if ((unint64_t)(v347 + 1) >> 62)
                            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                          v349 = v531 - v530;
                          if ((uint64_t)(v531 - v530) >> 1 > v348)
                            v348 = v349 >> 1;
                          if ((unint64_t)v349 >= 0x7FFFFFFFFFFFFFFCLL)
                            v350 = 0x3FFFFFFFFFFFFFFFLL;
                          else
                            v350 = v348;
                          if (v350)
                          {
                            v473 = *((_QWORD *)&v530 + 1) - v530;
                            if (v350 >> 62)
                              std::__throw_bad_array_new_length[abi:ne180100]();
                            v351 = v334;
                            v352 = v335;
                            v353 = v350;
                            v354 = (char *)operator new(4 * v350);
                            v350 = v353;
                            v335 = v352;
                            v334 = v351;
                            v346 = v473;
                          }
                          else
                          {
                            v354 = 0;
                          }
                          v355 = &v354[4 * v347];
                          *(_DWORD *)v355 = *(_DWORD *)v343;
                          v356 = v355 + 4;
                          if (v344 != v1)
                          {
                            v357 = v344 - 4 - v1;
                            if (v357 < 0x2C)
                              goto LABEL_690;
                            if ((unint64_t)(v344 - (_QWORD)&v354[v346]) < 0x20)
                              goto LABEL_690;
                            v358 = (v357 >> 2) + 1;
                            v359 = 4 * (v358 & 0x7FFFFFFFFFFFFFF8);
                            v360 = v344 - v359;
                            v355 -= v359;
                            v361 = &v354[4 * v347 - 16];
                            v362 = (__int128 *)(v344 - 16);
                            v363 = v358 & 0x7FFFFFFFFFFFFFF8;
                            do
                            {
                              v364 = *v362;
                              *((_OWORD *)v361 - 1) = *(v362 - 1);
                              *(_OWORD *)v361 = v364;
                              v361 -= 32;
                              v362 -= 2;
                              v363 -= 8;
                            }
                            while (v363);
                            v344 = v360;
                            if (v358 != (v358 & 0x7FFFFFFFFFFFFFF8))
                            {
LABEL_690:
                              do
                              {
                                v365 = *(_DWORD *)(v344 - 4);
                                v344 -= 4;
                                *((_DWORD *)v355 - 1) = v365;
                                v355 -= 4;
                              }
                              while (v344 != v1);
                            }
                          }
                          *(_QWORD *)&v530 = v355;
                          *((_QWORD *)&v530 + 1) = v356;
                          *(_QWORD *)&v531 = &v354[4 * v350];
                          if (v1)
                          {
                            operator delete((void *)v1);
                            v335 = v528;
                          }
                          v333 = v475;
                          v295 = v479;
                          *((_QWORD *)&v530 + 1) = v356;
                          v345 = v529[0];
                          if ((unint64_t)v335 < v529[0])
                          {
LABEL_472:
                            *v335++ = 1;
                            v2 = this;
                            v528 = v335;
                            if (++v334 == v333)
                              goto LABEL_544;
                            continue;
                          }
                        }
                        else
                        {
                          **((_DWORD **)&v530 + 1) = *(_DWORD *)v343;
                          *((_QWORD *)&v530 + 1) = v344 + 4;
                          v345 = v529[0];
                          if ((unint64_t)v335 < v529[0])
                            goto LABEL_472;
                        }
                        break;
                      }
                      v366 = v295;
                      v1 = (uint64_t)v527;
                      v367 = (char *)v335 - (_BYTE *)v527;
                      v368 = ((char *)v335 - (_BYTE *)v527) >> 3;
                      v369 = v368 + 1;
                      if ((unint64_t)(v368 + 1) >> 61)
                        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                      v370 = v345 - (_QWORD)v527;
                      if (v370 >> 2 > v369)
                        v369 = v370 >> 2;
                      if ((unint64_t)v370 >= 0x7FFFFFFFFFFFFFF8)
                        v371 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v371 = v369;
                      if (v371)
                      {
                        if (v371 >> 61)
                          std::__throw_bad_array_new_length[abi:ne180100]();
                        v372 = v371;
                        v373 = operator new(8 * v371);
                        v371 = v372;
                        v374 = &v373[8 * v368];
                        *v374 = 1;
                        v375 = (uint64_t)(v374 + 1);
                        if (v335 != (_QWORD *)v1)
                        {
LABEL_503:
                          v376 = (unint64_t)v335 - v1 - 8;
                          if (v376 < 0x168
                            || &v373[v367 - 8 - (v376 & 0xFFFFFFFFFFFFFFF8)] > &v373[v367 - 8]
                            || (_QWORD *)((char *)v335 - (v376 & 0xFFFFFFFFFFFFFFF8) - 8) > v335 - 1
                            || (unint64_t)((char *)v335 - v373 - v367) < 0x20)
                          {
                            v377 = v335;
                            v2 = this;
                            v295 = v366;
                          }
                          else
                          {
                            v379 = (v376 >> 3) + 1;
                            v380 = 8 * (v379 & 0x3FFFFFFFFFFFFFFCLL);
                            v377 = &v335[v380 / 0xFFFFFFFFFFFFFFF8];
                            v374 = (_QWORD *)((char *)v374 - v380);
                            v381 = &v373[8 * v368 - 16];
                            v382 = (__int128 *)(v335 - 2);
                            v383 = v379 & 0x3FFFFFFFFFFFFFFCLL;
                            v295 = v366;
                            do
                            {
                              v384 = *v382;
                              *(v381 - 1) = *(v382 - 1);
                              *v381 = v384;
                              v381 -= 2;
                              v382 -= 2;
                              v383 -= 4;
                            }
                            while (v383);
                            v2 = this;
                            if (v379 == (v379 & 0x3FFFFFFFFFFFFFFCLL))
                            {
LABEL_509:
                              v527 = v374;
                              v528 = (_QWORD *)v375;
                              v529[0] = &v373[8 * v371];
                              if (v1)
                                operator delete((void *)v1);
                              v335 = (_QWORD *)v375;
                              v333 = v475;
                              v528 = (_QWORD *)v375;
                              if (++v334 == v475)
                              {
LABEL_544:
                                v385 = *((_QWORD *)&v530 + 1);
                                v386 = v531;
                                if (*((_QWORD *)&v530 + 1) >= (unint64_t)v531)
                                {
                                  v480 = v295;
                                  v1 = v530;
                                  v387 = *((_QWORD *)&v530 + 1) - v530;
                                  v388 = (uint64_t)(*((_QWORD *)&v530 + 1) - v530) >> 2;
                                  v389 = v388 + 1;
                                  if ((unint64_t)(v388 + 1) >> 62)
LABEL_677:
                                    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
LABEL_521:
                                  v390 = v386 - v1;
                                  if (v390 >> 1 > v389)
                                    v389 = v390 >> 1;
                                  if ((unint64_t)v390 >= 0x7FFFFFFFFFFFFFFCLL)
                                    v391 = 0x3FFFFFFFFFFFFFFFLL;
                                  else
                                    v391 = v389;
                                  if (v391)
                                  {
                                    if (v391 >> 62)
                                      std::__throw_bad_array_new_length[abi:ne180100]();
                                    v392 = (char *)operator new(4 * v391);
                                    v393 = &v392[4 * v388];
                                    *(_DWORD *)v393 = v486;
                                    v394 = (uint64_t)(v393 + 4);
                                    if (v385 != v1)
                                    {
LABEL_529:
                                      v395 = v385 - 4 - v1;
                                      if (v395 < 0x2C || (unint64_t)(v385 - (_QWORD)v392 - v387) < 0x20)
                                      {
                                        v396 = v385;
                                        v397 = v480;
                                        goto LABEL_532;
                                      }
                                      v402 = (v395 >> 2) + 1;
                                      v403 = 4 * (v402 & 0x7FFFFFFFFFFFFFF8);
                                      v396 = v385 - v403;
                                      v393 -= v403;
                                      v404 = &v392[4 * v388 - 16];
                                      v405 = (__int128 *)(v385 - 16);
                                      v406 = v402 & 0x7FFFFFFFFFFFFFF8;
                                      do
                                      {
                                        v407 = *v405;
                                        *((_OWORD *)v404 - 1) = *(v405 - 1);
                                        *(_OWORD *)v404 = v407;
                                        v404 -= 32;
                                        v405 -= 2;
                                        v406 -= 8;
                                      }
                                      while (v406);
                                      v397 = v480;
                                      if (v402 != (v402 & 0x7FFFFFFFFFFFFFF8))
                                      {
                                        do
                                        {
LABEL_532:
                                          v398 = *(_DWORD *)(v396 - 4);
                                          v396 -= 4;
                                          *((_DWORD *)v393 - 1) = v398;
                                          v393 -= 4;
                                        }
                                        while (v396 != v1);
                                      }
LABEL_536:
                                      *(_QWORD *)&v530 = v393;
                                      *((_QWORD *)&v530 + 1) = v394;
                                      *(_QWORD *)&v531 = &v392[4 * v391];
                                      if (v1)
                                      {
                                        operator delete((void *)v1);
                                        v335 = v528;
                                      }
                                      v399 = v397;
                                      *((_QWORD *)&v530 + 1) = v394;
                                      v400 = v529[0];
                                      if ((unint64_t)v335 < v529[0])
                                        goto LABEL_539;
LABEL_546:
                                      v408 = v527;
                                      v409 = (char *)v335 - (_BYTE *)v527;
                                      v1 = ((char *)v335 - (_BYTE *)v527) >> 3;
                                      v410 = v1 + 1;
                                      if ((unint64_t)(v1 + 1) >> 61)
                                        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                                      v411 = v400 - (_QWORD)v527;
                                      if (v411 >> 2 > v410)
                                        v410 = v411 >> 2;
                                      if ((unint64_t)v411 >= 0x7FFFFFFFFFFFFFF8)
                                        v412 = 0x1FFFFFFFFFFFFFFFLL;
                                      else
                                        v412 = v410;
                                      if (v412)
                                      {
                                        if (v412 >> 61)
                                          std::__throw_bad_array_new_length[abi:ne180100]();
                                        v413 = operator new(8 * v412);
                                      }
                                      else
                                      {
                                        v413 = 0;
                                      }
                                      v414 = &v413[8 * v1];
                                      *v414 = -1;
                                      v401 = v414 + 1;
                                      if (v335 != (_QWORD *)v408)
                                      {
                                        v415 = (char *)(v335 - 1) - v408;
                                        if (v415 < 0x58)
                                        {
                                          v416 = v335;
                                          goto LABEL_564;
                                        }
                                        if ((unint64_t)((char *)v335 - v413 - v409) < 0x20)
                                        {
                                          v416 = v335;
                                          goto LABEL_564;
                                        }
                                        v417 = (v415 >> 3) + 1;
                                        v418 = 8 * (v417 & 0x3FFFFFFFFFFFFFFCLL);
                                        v416 = &v335[v418 / 0xFFFFFFFFFFFFFFF8];
                                        v414 = (_QWORD *)((char *)v414 - v418);
                                        v419 = &v413[8 * v1 - 16];
                                        v420 = (__int128 *)(v335 - 2);
                                        v421 = v417 & 0x3FFFFFFFFFFFFFFCLL;
                                        do
                                        {
                                          v422 = *v420;
                                          *(v419 - 1) = *(v420 - 1);
                                          *v419 = v422;
                                          v419 -= 2;
                                          v420 -= 2;
                                          v421 -= 4;
                                        }
                                        while (v421);
                                        if (v417 != (v417 & 0x3FFFFFFFFFFFFFFCLL))
                                        {
                                          do
                                          {
LABEL_564:
                                            v423 = *--v416;
                                            *--v414 = v423;
                                          }
                                          while (v416 != (_QWORD *)v408);
                                        }
                                      }
                                      v527 = v414;
                                      v528 = v401;
                                      v529[0] = &v413[8 * v412];
                                      if (v408)
                                        operator delete(v408);
                                      goto LABEL_567;
                                    }
                                  }
                                  else
                                  {
                                    v392 = 0;
                                    v393 = (char *)(4 * v388);
                                    *(_DWORD *)(4 * v388) = v486;
                                    v394 = 4 * v388 + 4;
                                    if (v385 != v1)
                                      goto LABEL_529;
                                  }
                                  v397 = v480;
                                  goto LABEL_536;
                                }
                                **((_DWORD **)&v530 + 1) = v486;
                                v399 = v295;
                                *((_QWORD *)&v530 + 1) = v385 + 4;
                                v400 = v529[0];
                                if ((unint64_t)v335 >= v529[0])
                                  goto LABEL_546;
LABEL_539:
                                *v335 = -1;
                                v401 = v335 + 1;
LABEL_567:
                                v528 = v401;
                                v424 = (_QWORD *)*((_QWORD *)v2 + 5);
                                operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>((unsigned int **)&v530, (uint64_t **)&v527, 0, v509);
                                v524 = v424;
                                if (!v510)
                                  std::__throw_bad_function_call[abi:ne180100]();
                                (*(void (**)(_QWORD *, _QWORD **))(*v510 + 48))(v510, &v524);
                                v295 = v399;
                                v425 = v510;
                                if (v510 == v509)
                                {
                                  v425 = v509;
                                  v426 = 4;
LABEL_572:
                                  (*(void (**)(void))(*v425 + 8 * v426))();
                                }
                                else if (v510)
                                {
                                  v426 = 5;
                                  goto LABEL_572;
                                }
                                if (v527)
                                {
                                  v528 = v527;
                                  operator delete(v527);
                                }
                                if ((_QWORD)v530)
                                {
                                  *((_QWORD *)&v530 + 1) = v530;
                                  operator delete((void *)v530);
                                }
LABEL_400:
                                v294 += 24;
                                if (v294 == v295)
                                {
LABEL_589:
                                  v432 = v471;
                                  if (v71 == 3)
                                    v432 = 3;
                                  v471 = v432;
                                  v71 = v71 == 3;
                                  v285 = (char *)v518;
                                  if (!v518)
                                    goto LABEL_587;
LABEL_580:
                                  v427 = v519;
                                  v428 = v285;
                                  if (v519 != v285)
                                  {
                                    v429 = v519;
                                    do
                                    {
                                      v431 = (void *)*((_QWORD *)v429 - 3);
                                      v429 -= 24;
                                      v430 = v431;
                                      if (v431)
                                      {
                                        *((_QWORD *)v427 - 2) = v430;
                                        operator delete(v430);
                                      }
                                      v427 = v429;
                                    }
                                    while (v429 != v285);
                                    v428 = v518;
                                  }
                                  v519 = v285;
                                  operator delete(v428);
LABEL_587:
                                  if (v521)
                                    operator delete(v521);
                                  goto LABEL_627;
                                }
                                continue;
                              }
                              goto LABEL_458;
                            }
                          }
                          do
                          {
                            v378 = *--v377;
                            *--v374 = v378;
                          }
                          while (v377 != (_QWORD *)v1);
                          goto LABEL_509;
                        }
                      }
                      else
                      {
                        v373 = 0;
                        v374 = (_QWORD *)(8 * v368);
                        *(_QWORD *)(8 * v368) = 1;
                        v375 = 8 * v368 + 8;
                        if (v335 != (_QWORD *)v1)
                          goto LABEL_503;
                      }
                      break;
                    }
                    v2 = this;
                    v295 = v366;
                    goto LABEL_509;
                  }
LABEL_369:
                  v489 = v284;
                  operator delete(v284);
                  goto LABEL_370;
                }
              }
            }
LABEL_253:
            if (v210 < 0)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v488 = operator new(v210);
            v489 = (uint64_t *)v488;
            v211 = (char *)v488 + 8 * (v210 >> 3);
            v490 = v211;
            memcpy(v488, v209, v210);
            v489 = (uint64_t *)v211;
            goto LABEL_255;
          }
LABEL_252:
          v488 = 0;
          v489 = 0;
          v490 = 0;
          v209 = v497;
          v210 = v498 - (_BYTE *)v497;
          if (v498 == v497)
            goto LABEL_255;
          goto LABEL_253;
        }
        continue;
      }
    }
LABEL_84:
    if ((v483 & 1) != 0)
      goto LABEL_142;
    if (*off_254079698[0] >= 1
      && (off_254079698[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_254079698, (int **)&fLI::FLAGS_v, "./ortools/sat/optimization.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)&v530, (google::glog_internal_namespace_ *)"./ortools/sat/optimization.cc", 1629);
      v73 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v530);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Switching to linear scan...", 27);
      google::LogMessage::~LogMessage((google::LogMessage *)&v530);
    }
    if (*((_BYTE *)v2 + 120))
      goto LABEL_626;
    v484 = (int *)v5;
    v476 = v8;
    v74 = 0;
    v75 = 0;
    v76 = 0;
    v77 = 0;
    *((_BYTE *)v2 + 120) = 1;
    v530 = 0uLL;
    *(_QWORD *)&v531 = 0;
    v528 = 0;
    v527 = 0;
    v529[0] = 0;
    if (v70)
      goto LABEL_381;
    v77 = 0;
    while (2)
    {
      while (2)
      {
        v78 = *v69;
        v79 = (_DWORD *)*v481;
        v80 = (_DWORD *)(*v481 + 32 * v78);
        v81 = (_BYTE *)*((_QWORD *)&v530 + 1);
        if (*((_QWORD *)&v530 + 1) < (unint64_t)v531)
        {
          **((_DWORD **)&v530 + 1) = *v80;
          *((_QWORD *)&v530 + 1) = v81 + 4;
          v1 = *(_QWORD *)&v79[8 * v78 + 1];
          v82 = v529[0];
          if ((unint64_t)v77 >= v529[0])
            break;
          goto LABEL_92;
        }
        v83 = (_BYTE *)v530;
        v84 = *((_QWORD *)&v530 + 1) - v530;
        v85 = (uint64_t)(*((_QWORD *)&v530 + 1) - v530) >> 2;
        v86 = v85 + 1;
        if ((unint64_t)(v85 + 1) >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v87 = v531 - v530;
        if ((uint64_t)(v531 - v530) >> 1 > v86)
          v86 = v87 >> 1;
        if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL)
          v88 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v88 = v86;
        if (!v88)
        {
          v89 = 0;
          v90 = (char *)(4 * v85);
          *(_DWORD *)(4 * v85) = *v80;
          v91 = 4 * v85 + 4;
          if (v81 == v83)
            goto LABEL_113;
LABEL_107:
          v92 = v81 - 4 - v83;
          if (v92 < 0x2C)
            goto LABEL_691;
          if ((unint64_t)(v81 - &v89[v84]) < 0x20)
            goto LABEL_691;
          v93 = (v92 >> 2) + 1;
          v94 = 4 * (v93 & 0x7FFFFFFFFFFFFFF8);
          v95 = &v81[-v94];
          v90 -= v94;
          v96 = &v89[4 * v85 - 16];
          v97 = (__int128 *)(v81 - 16);
          v98 = v93 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v99 = *v97;
            *((_OWORD *)v96 - 1) = *(v97 - 1);
            *(_OWORD *)v96 = v99;
            v96 -= 32;
            v97 -= 2;
            v98 -= 8;
          }
          while (v98);
          v81 = v95;
          if (v93 != (v93 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_691:
            do
            {
              v100 = *((_DWORD *)v81 - 1);
              v81 -= 4;
              *((_DWORD *)v90 - 1) = v100;
              v90 -= 4;
            }
            while (v81 != v83);
          }
          goto LABEL_113;
        }
        if (v88 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v89 = (char *)operator new(4 * v88);
        v90 = &v89[4 * v85];
        *(_DWORD *)v90 = *v80;
        v91 = (uint64_t)(v90 + 4);
        if (v81 != v83)
          goto LABEL_107;
LABEL_113:
        *(_QWORD *)&v530 = v90;
        *((_QWORD *)&v530 + 1) = v91;
        *(_QWORD *)&v531 = &v89[4 * v88];
        if (v83)
        {
          operator delete(v83);
          v79 = (_DWORD *)*v481;
          v77 = v528;
        }
        *((_QWORD *)&v530 + 1) = v91;
        v1 = *(_QWORD *)&v79[8 * v78 + 1];
        v82 = v529[0];
        if ((unint64_t)v77 < v529[0])
        {
LABEL_92:
          *v77++ = v1;
          v528 = v77;
          if (++v69 == v484)
            goto LABEL_150;
          continue;
        }
        break;
      }
      v101 = (uint64_t *)v527;
      v102 = (char *)v77 - (_BYTE *)v527;
      v103 = ((char *)v77 - (_BYTE *)v527) >> 3;
      v104 = v103 + 1;
      if ((unint64_t)(v103 + 1) >> 61)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v105 = v82 - (_QWORD)v527;
      if (v105 >> 2 > v104)
        v104 = v105 >> 2;
      if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFF8)
        v106 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v106 = v104;
      if (v106)
      {
        if (v106 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v107 = operator new(8 * v106);
        v108 = (uint64_t *)&v107[8 * v103];
        *v108 = v1;
        v109 = (uint64_t)(v108 + 1);
        if (v77 != v101)
        {
LABEL_125:
          v110 = (char *)(v77 - 1) - (char *)v101;
          if (v110 < 0x168
            || &v107[v102 - 8 - (v110 & 0xFFFFFFFFFFFFFFF8)] > &v107[v102 - 8]
            || (uint64_t *)((char *)v77 - (v110 & 0xFFFFFFFFFFFFFFF8) - 8) > v77 - 1
            || (unint64_t)((char *)v77 - &v107[v102]) < 0x20)
          {
            v111 = v77;
            v112 = v484;
          }
          else
          {
            v114 = (v110 >> 3) + 1;
            v115 = 8 * (v114 & 0x3FFFFFFFFFFFFFFCLL);
            v111 = &v77[v115 / 0xFFFFFFFFFFFFFFF8];
            v108 = (uint64_t *)((char *)v108 - v115);
            v116 = &v107[8 * v103 - 16];
            v117 = v77 - 2;
            v118 = v114 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v119 = *(_OWORD *)v117;
              *(v116 - 1) = *((_OWORD *)v117 - 1);
              *v116 = v119;
              v116 -= 2;
              v117 -= 4;
              v118 -= 4;
            }
            while (v118);
            v112 = v484;
            if (v114 == (v114 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_128:
              v527 = v108;
              v528 = (_QWORD *)v109;
              v529[0] = &v107[8 * v106];
              if (v101)
                goto LABEL_129;
              goto LABEL_130;
            }
          }
          do
          {
            v113 = *--v111;
            *--v108 = v113;
          }
          while (v111 != v101);
          goto LABEL_128;
        }
      }
      else
      {
        v107 = 0;
        v108 = (uint64_t *)(8 * v103);
        *(_QWORD *)(8 * v103) = v1;
        v109 = 8 * v103 + 8;
        if (v77 != v101)
          goto LABEL_125;
      }
      v112 = v484;
      v527 = v108;
      v528 = (_QWORD *)v109;
      v529[0] = &v107[8 * v106];
      if (v101)
LABEL_129:
        operator delete(v101);
LABEL_130:
      v77 = (uint64_t *)v109;
      v528 = (_QWORD *)v109;
      if (++v69 != v112)
        continue;
      break;
    }
LABEL_150:
    v75 = (char *)*((_QWORD *)&v530 + 1);
    v76 = v531;
    if (*((_QWORD *)&v530 + 1) < (unint64_t)v531)
    {
      v2 = this;
      **((_DWORD **)&v530 + 1) = *((_DWORD *)this + 12);
      v122 = (uint64_t)(v75 + 4);
      goto LABEL_599;
    }
    v74 = (char *)v530;
    v2 = this;
LABEL_381:
    v1 = v75 - v74;
    v286 = (v75 - v74) >> 2;
    v287 = v286 + 1;
    if ((unint64_t)(v286 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v288 = v76 - (_QWORD)v74;
    if (v288 >> 1 > v287)
      v287 = v288 >> 1;
    if ((unint64_t)v288 >= 0x7FFFFFFFFFFFFFFCLL)
      v289 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v289 = v287;
    if (v289)
    {
      if (v289 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v290 = operator new(4 * v289);
      v291 = &v290[4 * v286];
      *v291 = *((_DWORD *)v2 + 12);
      v122 = (uint64_t)(v291 + 1);
      if (v75 == v74)
        goto LABEL_597;
LABEL_392:
      v292 = v75 - 4 - v74;
      if (v292 < 0x2C)
      {
        v293 = v75;
        goto LABEL_596;
      }
      if ((unint64_t)(v74 - v290) < 0x20)
      {
        v293 = v75;
        goto LABEL_596;
      }
      v433 = (v292 >> 2) + 1;
      v434 = 4 * (v433 & 0x7FFFFFFFFFFFFFF8);
      v293 = &v75[-v434];
      v291 = (_DWORD *)((char *)v291 - v434);
      v435 = &v290[4 * v286 - 16];
      v436 = (__int128 *)(v75 - 16);
      v437 = v433 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v438 = *v436;
        *(v435 - 1) = *(v436 - 1);
        *v435 = v438;
        v435 -= 2;
        v436 -= 2;
        v437 -= 8;
      }
      while (v437);
      if (v433 != (v433 & 0x7FFFFFFFFFFFFFF8))
      {
        do
        {
LABEL_596:
          v439 = *((_DWORD *)v293 - 1);
          v293 -= 4;
          *--v291 = v439;
        }
        while (v293 != v74);
      }
    }
    else
    {
      v290 = 0;
      v291 = (_DWORD *)(4 * v286);
      *(_DWORD *)(4 * v286) = *((_DWORD *)v2 + 12);
      v122 = 4 * v286 + 4;
      if (v75 != v74)
        goto LABEL_392;
    }
LABEL_597:
    *(_QWORD *)&v530 = v291;
    *((_QWORD *)&v530 + 1) = v122;
    *(_QWORD *)&v531 = &v290[4 * v289];
    if (v74)
    {
      operator delete(v74);
      v77 = v528;
    }
LABEL_599:
    *((_QWORD *)&v530 + 1) = v122;
    if ((unint64_t)v77 < v529[0])
    {
      *v77 = -1;
      v440 = (uint64_t)(v77 + 1);
      v441 = v476;
      goto LABEL_616;
    }
    v442 = (uint64_t *)v527;
    v1 = (char *)v77 - (_BYTE *)v527;
    v443 = ((char *)v77 - (_BYTE *)v527) >> 3;
    v444 = v443 + 1;
    if ((unint64_t)(v443 + 1) >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v445 = v529[0] - (_QWORD)v527;
    if ((uint64_t)(v529[0] - (_QWORD)v527) >> 2 > v444)
      v444 = v445 >> 2;
    if ((unint64_t)v445 >= 0x7FFFFFFFFFFFFFF8)
      v446 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v446 = v444;
    if (!v446)
    {
      v447 = 0;
      v448 = (_QWORD *)(8 * v443);
      *(_QWORD *)(8 * v443) = -1;
      v440 = 8 * v443 + 8;
      if (v77 != v442)
        goto LABEL_610;
LABEL_634:
      v441 = v476;
      v527 = v448;
      v528 = (_QWORD *)v440;
      v529[0] = &v447[8 * v446];
      if (v442)
        goto LABEL_615;
      goto LABEL_616;
    }
    if (v446 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v447 = operator new(8 * v446);
    v448 = &v447[8 * v443];
    *v448 = -1;
    v440 = (uint64_t)(v448 + 1);
    if (v77 == v442)
      goto LABEL_634;
LABEL_610:
    v449 = (char *)(v77 - 1) - (char *)v442;
    if (v449 < 0x58 || (unint64_t)((char *)v77 - v447 - v1) < 0x20)
    {
      v450 = v77;
      v441 = v476;
      goto LABEL_613;
    }
    v455 = (v449 >> 3) + 1;
    v456 = 8 * (v455 & 0x3FFFFFFFFFFFFFFCLL);
    v450 = &v77[v456 / 0xFFFFFFFFFFFFFFF8];
    v448 = (_QWORD *)((char *)v448 - v456);
    v457 = &v447[8 * v443 - 16];
    v458 = v77 - 2;
    v459 = v455 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v460 = *(_OWORD *)v458;
      *(v457 - 1) = *((_OWORD *)v458 - 1);
      *v457 = v460;
      v457 -= 2;
      v458 -= 4;
      v459 -= 4;
    }
    while (v459);
    v441 = v476;
    if (v455 != (v455 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_613:
        v451 = *--v450;
        *--v448 = v451;
      }
      while (v450 != v442);
    }
    v527 = v448;
    v528 = (_QWORD *)v440;
    v529[0] = &v447[8 * v446];
    if (v442)
LABEL_615:
      operator delete(v442);
LABEL_616:
    v528 = (_QWORD *)v440;
    v452 = (_QWORD *)*((_QWORD *)v2 + 5);
    operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>((unsigned int **)&v530, (uint64_t **)&v527, -v441, v516);
    v524 = v452;
    if (!v517)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_QWORD *, _QWORD **))(*v517 + 48))(v517, &v524);
    v453 = v517;
    if (v517 == v516)
    {
      v453 = v516;
      v454 = 4;
LABEL_621:
      (*(void (**)(void))(*v453 + 8 * v454))();
    }
    else if (v517)
    {
      v454 = 5;
      goto LABEL_621;
    }
    if (v527)
    {
      v528 = v527;
      operator delete(v527);
    }
    if ((_QWORD)v530)
    {
      *((_QWORD *)&v530 + 1) = v530;
      operator delete((void *)v530);
    }
LABEL_626:
    v471 = operations_research::sat::MinimizeIntegerVariableWithLinearScanAndLazyEncoding(*((unsigned int *)v2 + 12), (uint64_t)v469, *((operations_research::sat **)v2 + 5));
    v71 = 1;
LABEL_627:
    if (v497)
      operator delete(v497);
    if (__p)
      operator delete(__p);
    if (v503)
      operator delete(v503);
    if ((v71 | 2) != 2)
      goto LABEL_650;
  }
  v462 = 1;
LABEL_649:
  v471 = v462;
LABEL_650:
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v506, v507);
  return v471;
}

void sub_22DBACEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;

  v72 = (void *)STACK[0x280];
  if (STACK[0x280])
  {
    STACK[0x288] = (unint64_t)v72;
    operator delete(v72);
    v73 = (void *)STACK[0x2B0];
    if (!STACK[0x2B0])
      goto LABEL_6;
  }
  else
  {
    v73 = (void *)STACK[0x2B0];
    if (!STACK[0x2B0])
    {
LABEL_6:
      std::vector<std::vector<int>>::~vector[abi:ne180100](&a71);
      v74 = (void *)STACK[0x220];
      if (STACK[0x220])
      {
        STACK[0x228] = (unint64_t)v74;
        operator delete(v74);
      }
      if (a39)
      {
        operator delete(a39);
        v75 = a42;
        if (!a42)
        {
LABEL_10:
          v76 = a45;
          if (!a45)
            goto LABEL_11;
          goto LABEL_14;
        }
      }
      else
      {
        v75 = a42;
        if (!a42)
          goto LABEL_10;
      }
      operator delete(v75);
      v76 = a45;
      if (!a45)
      {
LABEL_11:
        std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&a48, (_QWORD *)a49);
        _Unwind_Resume(a1);
      }
LABEL_14:
      operator delete(v76);
      std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&a48, (_QWORD *)a49);
      _Unwind_Resume(a1);
    }
  }
  STACK[0x2B8] = (unint64_t)v73;
  operator delete(v73);
  goto LABEL_6;
}

void operations_research::sat::MinimizeWithHittingSetAndLazyEncoding()
{
  _QWORD *v0;
  _BYTE v1[16];

  google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v1, (google::glog_internal_namespace_ *)"./ortools/sat/optimization.cc", 1995);
  v0 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v1);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not supported.");
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v1);
}

void sub_22DBAD37C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

_QWORD **std::set<operations_research::sat::Literal>::set[abi:ne180100]<std::__wrap_iter<operations_research::sat::Literal*>>(_QWORD **a1, int *a2, int *a3)
{
  uint64_t *v4;
  int *v6;
  uint64_t *v7;
  _DWORD *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t *v12;
  uint64_t *v13;

  a1[1] = 0;
  v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = a1 + 1;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v7 = std::__tree<int>::__find_equal<int>(a1, v4, &v13, &v12, v6);
      if (!*v7)
      {
        v8 = operator new(0x20uLL);
        v8[7] = *v6;
        v9 = v13;
        *(_QWORD *)v8 = 0;
        *((_QWORD *)v8 + 1) = 0;
        *((_QWORD *)v8 + 2) = v9;
        *v7 = (uint64_t)v8;
        v10 = (_QWORD *)**a1;
        if (v10)
        {
          *a1 = v10;
          v8 = (_DWORD *)*v7;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v8);
        a1[2] = (_QWORD *)((char *)a1[2] + 1);
      }
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_22DBAD460(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *std::vector<operations_research::sat::Literal>::__assign_with_size[abi:ne180100]<std::__wrap_iter<operations_research::sat::Literal*>,std::__wrap_iter<operations_research::sat::Literal*>>(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 62)
      goto LABEL_22;
    v10 = v8 >> 1;
    if (v8 >> 1 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL;
    v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 62)
LABEL_22:
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v13 = 4 * v12;
    result = operator new(4 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = a3 - v6;
    if (v14)
      result = memmove(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 2;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[4 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, 4 * v17);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

uint64_t google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,gtl::IntType<operations_research::sat::Coefficient_tag_,long long>>(int a1, int a2, char *a3)
{
  uint64_t v3;
  uint64_t v5;

  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5, a3);
  std::ostream::operator<<();
  google::base::CheckOpMessageBuilder::ForVar2((google::base::CheckOpMessageBuilder *)&v5);
  std::ostream::operator<<();
  v3 = google::base::CheckOpMessageBuilder::NewString((google::base::CheckOpMessageBuilder *)&v5);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5);
  return v3;
}

void sub_22DBAD628(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::ComputeBooleanLinearExpressionCanonicalForm(uint64_t **a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t (*v39)(uint64_t *, uint64_t *);

  v6 = *a1;
  v7 = a1[1];
  v8 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)v6) >> 2));
  *a2 = 0;
  *a3 = 0;
  if (v7 == v6)
    v9 = 0;
  else
    v9 = v8;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(operations_research::sat::LiteralWithCoeff const&,operations_research::sat::LiteralWithCoeff const&),operations_research::sat::LiteralWithCoeff*,false>((uint64_t)v6, v7, &v39, v9, 1);
  v10 = *a1;
  v11 = a1[1];
  v12 = ((char *)v11 - (char *)*a1) / 12;
  v13 = 0;
  if (v11 == *a1)
    goto LABEL_23;
  v14 = 0;
  if (v12 <= 1)
    v15 = 1;
  else
    v15 = ((char *)v11 - (char *)*a1) / 12;
  v16 = (uint64_t *)((char *)v10 + 4);
  do
  {
    v17 = *v16;
    if (*v16)
    {
      v18 = *((_DWORD *)v16 - 1);
      if (!v14)
        goto LABEL_10;
      v19 = *(_DWORD *)v14;
      if ((*(_DWORD *)v14 ^ v18) > 1)
      {
        v13 -= *(_QWORD *)(v14 + 4) == 0;
LABEL_10:
        v14 = (char *)v10 + 12 * v13;
        *(_DWORD *)v14 = v18;
        *(_QWORD *)(v14 + 4) = v17;
        ++v13;
        goto LABEL_11;
      }
      v20 = __OFSUB__(v18, v19);
      if (v18 == v19)
      {
        v21 = *(_QWORD *)(v14 + 4);
        if ((((v21 + v17) ^ v17) & ((v21 + v17) ^ v21)) < 0 != v20)
          return 0;
        *(_QWORD *)(v14 + 4) = v21 + v17;
      }
      else
      {
        v22 = -v17;
        v23 = *(_QWORD *)(v14 + 4);
        if ((((v23 - v17) ^ -v17) & ((v23 - v17) ^ v23)) < 0 != v20)
          return 0;
        *(_QWORD *)(v14 + 4) = v23 - v17;
        v24 = *a2 - v17;
        if (((v24 ^ v22) & (v24 ^ *a2)) < 0 != v20)
          return 0;
        *a2 = v24;
      }
    }
LABEL_11:
    v16 = (_QWORD *)((char *)v16 + 12);
    --v15;
  }
  while (v15);
  if (v14)
    v13 -= *(_QWORD *)(v14 + 4) == 0;
LABEL_23:
  v25 = v13 >= v12;
  v26 = v13 - v12;
  if (v26 != 0 && v25)
  {
    std::vector<operations_research::sat::LiteralWithCoeff>::__append((void **)a1, v26);
    v10 = *a1;
    v11 = a1[1];
  }
  else if (!v25)
  {
    v11 = (uint64_t *)((char *)v10 + 12 * v13);
    a1[1] = v11;
  }
  v27 = ((char *)v11 - (char *)v10) / 12;
  if (v11 == v10)
  {
LABEL_38:
    v36 = 126 - 2 * __clz(v27);
    if (v11 == v10)
      v37 = 0;
    else
      v37 = v36;
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(operations_research::sat::LiteralWithCoeff const&,operations_research::sat::LiteralWithCoeff const&),operations_research::sat::LiteralWithCoeff*,false>((uint64_t)v10, v11, &v39, v37, 1);
    return 1;
  }
  else
  {
    v28 = __OFSUB__(v27, 1);
    if (v27 <= 1)
      v29 = 1;
    else
      v29 = ((char *)v11 - (char *)v10) / 12;
    v30 = (uint64_t *)((char *)v10 + 4);
    while (1)
    {
      v31 = *v30;
      if (*v30 < 0)
      {
        v32 = -v31;
        v33 = *a2 - v31;
        if (((v33 ^ v32) & (v33 ^ *a2)) < 0 != v28)
          return 0;
        v34 = *((_DWORD *)v30 - 1);
        *a2 = v33;
        *v30 = v32;
        *((_DWORD *)v30 - 1) = v34 ^ 1;
        v31 = v32;
      }
      v35 = *a3 + v31;
      if (((v35 ^ v31) & (v35 ^ *a3)) < 0 != v28)
        return 0;
      *a3 = v35;
      v30 = (uint64_t *)((char *)v30 + 12);
      v28 = __OFSUB__(v29--, 1);
      if (!v29)
        goto LABEL_38;
    }
  }
}

BOOL operations_research::sat::`anonymous namespace'::LiteralComparator(_DWORD *a1, _DWORD *a2)
{
  return *a1 < *a2;
}

BOOL operations_research::sat::`anonymous namespace'::CoeffComparator(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  _BOOL4 v5;

  v2 = *(_QWORD *)(a1 + 4);
  v3 = *(_QWORD *)(a2 + 4);
  v4 = v2 == v3;
  v5 = v2 < v3;
  if (v4)
    return *(_DWORD *)a1 < *(_DWORD *)a2;
  else
    return v5;
}

uint64_t operations_research::sat::ComputeCanonicalRhs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a2 + a1 >= a3)
    v3 = a3;
  else
    v3 = a2 + a1;
  if (a2 + a1 < 0)
    v4 = -1;
  else
    v4 = v3;
  if (a2 <= 0)
    v5 = -1;
  else
    v5 = a3;
  if ((((a2 + a1) ^ a2) & ((a2 + a1) ^ a1)) < 0)
    return v5;
  else
    return v4;
}

uint64_t operations_research::sat::ComputeNegatedCanonicalRhs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a2 > 0)
    v3 = -1;
  else
    v3 = a3;
  if ((((a2 + a1) ^ a2) & ((a2 + a1) ^ a1)) < 0)
    return v3;
  else
    return a3 - ((a2 + a1) & ~((a2 + a1) >> 63));
}

void operations_research::sat::MutableUpperBoundedLinearConstraint::ClearAndResize(operations_research::sat::MutableUpperBoundedLinearConstraint *this, int a2)
{
  uint64_t v4;
  int *v5;
  int *v6;
  unint64_t v7;
  int *v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)this;
  if (a2 == (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3)
  {
    v6 = (int *)*((_QWORD *)this + 12);
    v5 = (int *)*((_QWORD *)this + 13);
    if (v6 != v5)
    {
      v7 = (char *)v5 - (char *)v6 - 4;
      v8 = (int *)*((_QWORD *)this + 12);
      if (v7 < 4)
        goto LABEL_12;
      v9 = (v7 >> 2) + 1;
      v8 = &v6[v9 & 0x7FFFFFFFFFFFFFFELL];
      v10 = v6 + 1;
      v11 = v9 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        v12 = *v10;
        *(_QWORD *)(v4 + 8 * *(v10 - 1)) = 0;
        *(_QWORD *)(v4 + 8 * v12) = 0;
        v10 += 2;
        v11 -= 2;
      }
      while (v11);
      if (v9 != (v9 & 0x7FFFFFFFFFFFFFFELL))
      {
LABEL_12:
        do
        {
          v13 = *v8++;
          *(_QWORD *)(v4 + 8 * v13) = 0;
        }
        while (v8 != v5);
      }
    }
    bzero(*((void **)this + 6), *((_QWORD *)this + 7) - *((_QWORD *)this + 6));
    *((_QWORD *)this + 13) = *((_QWORD *)this + 12);
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
  }
  else
  {
    v14 = 0;
    std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::assign((uint64_t)this, a2, &v14);
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize((uint64_t)this + 40, a2);
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
  }
}

uint64_t *operations_research::sat::MutableUpperBoundedLinearConstraint::ReduceCoefficients(uint64_t *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  int *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17[2];
  uint64_t *v18;

  v1 = this;
  v3 = this + 3;
  v2 = this[3];
  v5 = this + 4;
  v4 = this[4];
  if (v2 >= v4)
  {
    this = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,gtl::IntType<operations_research::sat::Coefficient_tag_,long long>>((int)this + 24, (int)v5, "rhs_ < max_sum_");
    v18 = this;
    if (this)
    {
      google::LogMessageFatal::LogMessageFatal(v17, (google::glog_internal_namespace_ *)"./ortools/sat/pb_constraint.cc", 261, &v18);
      v16 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v17);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, "Trivially sat.");
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v17);
    }
    v4 = *v5;
    v2 = *v3;
    v6 = (int *)v1[12];
    v7 = (int *)v1[13];
    if (v6 != v7)
      goto LABEL_3;
LABEL_16:
    v8 = 0;
    goto LABEL_17;
  }
  v6 = (int *)this[12];
  v7 = (int *)this[13];
  if (v6 == v7)
    goto LABEL_16;
LABEL_3:
  v8 = 0;
  v9 = v4 - v2;
  v10 = *v1;
  do
  {
    v11 = *v6;
    v12 = *(_QWORD *)(v10 + 8 * v11);
    if (v12 >= 0)
      v13 = *(_QWORD *)(v10 + 8 * v11);
    else
      v13 = -v12;
    v14 = v13 - v9;
    if (v14 >= 1)
    {
      v8 += v14;
      if (v12 <= 0)
        v15 = -v9;
      else
        v15 = v9;
      *(_QWORD *)(v10 + 8 * v11) = v15;
    }
    ++v6;
  }
  while (v6 != v7);
  v2 = *v3;
  v4 = *v5;
LABEL_17:
  *v3 = v2 - v8;
  *v5 = v4 - v8;
  return this;
}

void sub_22DBADB80(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::MutableUpperBoundedLinearConstraint::ComputeSlackForTrailPrefix(operations_research::sat::MutableUpperBoundedLinearConstraint *this, const operations_research::sat::Trail *a2, int a3)
{
  int *v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (int *)*((_QWORD *)this + 12);
  v4 = (int *)*((_QWORD *)this + 13);
  if (v3 == v4)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    do
    {
      v6 = *v3;
      v7 = *(_QWORD *)(*(_QWORD *)this + 8 * v6);
      if (v7 >= 0)
        v8 = *(_QWORD *)(*(_QWORD *)this + 8 * v6);
      else
        v8 = -v7;
      if (v7
        && ((*(_QWORD *)(*((_QWORD *)a2 + 3) + (((unint64_t)(2 * (int)v6) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> ((v7 < 1) | (2 * (v6 & 0x1F)))) & 1) != 0)
      {
        if (*(_DWORD *)(*((_QWORD *)a2 + 15) + 8 * v6 + 4) >= a3)
          v8 = 0;
        v5 += v8;
      }
      ++v3;
    }
    while (v3 != v4);
  }
  return *((_QWORD *)this + 3) - v5;
}

uint64_t operations_research::sat::MutableUpperBoundedLinearConstraint::ReduceCoefficientsAndComputeSlackForTrailPrefix(operations_research::sat::MutableUpperBoundedLinearConstraint *this, const operations_research::sat::Trail *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v22[2];
  uint64_t *v23;
  uint64_t v24;

  v5 = *((_QWORD *)this + 3);
  v4 = *((_QWORD *)this + 4);
  v6 = (int *)*((_QWORD *)this + 12);
  v7 = (int *)*((_QWORD *)this + 13);
  if (v6 == v7)
  {
    v11 = 0;
    v10 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v12 = v4 - v5;
    v13 = v5 - v4;
    do
    {
      v14 = *v6;
      v15 = *(_QWORD *)this;
      v16 = *(_QWORD *)(*(_QWORD *)this + 8 * v14);
      if (v16)
      {
        if (v16 < 0)
          v16 = -v16;
        v17 = v16 - v12;
        v24 = v16 - v12;
        v18 = *(_QWORD *)(v15 + 8 * v14);
        if (((*(_QWORD *)(*((_QWORD *)a2 + 3) + (((unint64_t)(2 * (int)v14) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> ((v18 < 1) | (2 * (v14 & 0x1F)))) & 1) != 0
          && *(_DWORD *)(*((_QWORD *)a2 + 15) + 8 * v14 + 4) < a3)
        {
          if (v17 >= 1)
          {
            v11 += v17;
            if (v18 <= 0)
              v18 = v13;
            else
              v18 = v12;
            *(_QWORD *)(v15 + 8 * v14) = v18;
          }
          if (v18 >= 0)
            v19 = v18;
          else
            v19 = -v18;
          v10 += v19;
        }
        else
        {
          LODWORD(v22[0]) = 0;
          if (v17 > 0)
          {
            v23 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,int>((int)&v24, (int)v22, "diff <= 0");
            if (v23)
            {
              google::LogMessageFatal::LogMessageFatal(v22, (google::glog_internal_namespace_ *)"./ortools/sat/pb_constraint.cc", 323, &v23);
              google::LogMessage::stream((google::LogMessage *)v22);
              google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v22);
            }
          }
        }
      }
      ++v6;
    }
    while (v6 != v7);
    v5 = *((_QWORD *)this + 3);
    v4 = *((_QWORD *)this + 4);
  }
  v20 = v5 - v11;
  *((_QWORD *)this + 3) = v20;
  *((_QWORD *)this + 4) = v4 - v11;
  return v20 - v10;
}

void sub_22DBADD94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

uint64_t operations_research::sat::MutableUpperBoundedLinearConstraint::ReduceSlackTo(uint64_t result, _QWORD *a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21[2];
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;

  v7 = (uint64_t *)result;
  v23 = a4;
  v24 = a5;
  if (a5 <= a4)
  {
    LODWORD(v21[0]) = 0;
    if ((a5 & 0x8000000000000000) == 0)
      goto LABEL_3;
    goto LABEL_25;
  }
  result = google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,gtl::IntType<operations_research::sat::Coefficient_tag_,long long>>((int)&v24, (int)&v23, "target <= slack");
  v22 = (uint64_t *)result;
  if (result)
  {
    google::LogMessageFatal::LogMessageFatal(v21, (google::glog_internal_namespace_ *)"./ortools/sat/pb_constraint.cc", 338, &v22);
    google::LogMessage::stream((google::LogMessage *)v21);
    goto LABEL_32;
  }
  LODWORD(v21[0]) = 0;
  if (v24 < 0)
  {
LABEL_25:
    result = google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,int>((int)&v24, (int)v21, "target >= 0");
    v22 = (uint64_t *)result;
    if (result)
    {
      google::LogMessageFatal::LogMessageFatal(v21, (google::glog_internal_namespace_ *)"./ortools/sat/pb_constraint.cc", 339, &v22);
      google::LogMessage::stream((google::LogMessage *)v21);
      goto LABEL_32;
    }
  }
LABEL_3:
  v8 = *(_QWORD *)(*v7 + 8 * (*(int *)(a2[9] + 4 * a3) >> 1));
  if (v8 >= 0)
    v9 = *(_QWORD *)(*v7 + 8 * (*(int *)(a2[9] + 4 * a3) >> 1));
  else
    v9 = -v8;
  v22 = (uint64_t *)v9;
  if (v23 >= v9)
  {
    result = google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,gtl::IntType<operations_research::sat::Coefficient_tag_,long long>>((int)&v23, (int)&v22, "slack < coeff");
    v20 = (uint64_t *)result;
    if (!result)
    {
      v10 = v23 - v24;
      if (v23 == v24)
        return result;
      goto LABEL_8;
    }
    google::LogMessageFatal::LogMessageFatal(v21, (google::glog_internal_namespace_ *)"./ortools/sat/pb_constraint.cc", 344, &v20);
    google::LogMessage::stream((google::LogMessage *)v21);
LABEL_32:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v21);
  }
  v10 = v23 - v24;
  if (v23 == v24)
    return result;
LABEL_8:
  v7[3] -= v10;
  v11 = (int *)v7[12];
  v12 = (int *)v7[13];
  if (v11 != v12)
  {
    v13 = *v7;
    v14 = a2[3];
    v15 = a2[15];
    do
    {
      v16 = *v11;
      v17 = *(_QWORD *)(v13 + 8 * v16);
      if (v17 >= 0)
        v18 = *(_QWORD *)(v13 + 8 * v16);
      else
        v18 = -v17;
      if (v17)
      {
        result = *(_QWORD *)(v14 + (((unint64_t)(2 * (int)v16) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> ((v17 < 1) | (2 * (v16 & 0x1F)));
        if ((result & 1) == 0 || (result = *(unsigned int *)(v15 + 8 * v16 + 4), (int)result >= a3))
        {
          if (v18 <= v10)
          {
            v7[4] -= v18;
            *(_QWORD *)(v13 + 8 * v16) = 0;
          }
          else
          {
            if (v17 <= 0)
              v19 = v10;
            else
              v19 = -v10;
            *(_QWORD *)(v13 + 8 * v16) = v19 + v17;
            v7[4] -= v10;
          }
        }
      }
      ++v11;
    }
    while (v11 != v12);
  }
  return result;
}

void sub_22DBADFB4(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBADFBC(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBADFC4(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::MutableUpperBoundedLinearConstraint::CopyIntoVector(_QWORD *a1, uint64_t *a2)
{
  char *v2;
  int *v3;
  int *v4;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  BOOL (*v27)(uint64_t, uint64_t);

  v2 = (char *)*a2;
  a2[1] = *a2;
  v3 = (int *)a1[12];
  v4 = (int *)a1[13];
  if (v3 == v4)
  {
    v23 = (uint64_t)v2;
  }
  else
  {
    do
    {
      v8 = *v3;
      v9 = *(_QWORD *)(*a1 + 8 * v8);
      if (v9 >= 0)
        v10 = *(_QWORD *)(*a1 + 8 * v8);
      else
        v10 = -v9;
      if (v9)
      {
        v11 = (v9 < 1) | (2 * v8);
        v12 = a2[2];
        if ((unint64_t)v2 < v12)
        {
          *(_DWORD *)v2 = v11;
          *(_QWORD *)(v2 + 4) = v10;
          v7 = v2 + 12;
        }
        else
        {
          v13 = (char *)*a2;
          v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v2[-*a2] >> 2);
          v15 = v14 + 1;
          if (v14 + 1 > 0x1555555555555555)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)v13) >> 2);
          if (2 * v16 > v15)
            v15 = 2 * v16;
          if (v16 >= 0xAAAAAAAAAAAAAAALL)
            v17 = 0x1555555555555555;
          else
            v17 = v15;
          if (v17)
          {
            if (v17 > 0x1555555555555555)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v18 = (char *)operator new(12 * v17);
          }
          else
          {
            v18 = 0;
          }
          v19 = &v18[12 * v14];
          *(_DWORD *)v19 = v11;
          *(_QWORD *)(v19 + 4) = v10;
          v20 = v19;
          if (v2 != v13)
          {
            do
            {
              v21 = *(_QWORD *)(v2 - 12);
              v2 -= 12;
              v22 = *((_DWORD *)v2 + 2);
              *(_QWORD *)(v20 - 12) = v21;
              v20 -= 12;
              *((_DWORD *)v20 + 2) = v22;
            }
            while (v2 != v13);
            v2 = (char *)*a2;
          }
          v7 = v19 + 12;
          *a2 = (uint64_t)v20;
          a2[1] = (uint64_t)(v19 + 12);
          a2[2] = (uint64_t)&v18[12 * v17];
          if (v2)
            operator delete(v2);
        }
        a2[1] = (uint64_t)v7;
        v2 = v7;
      }
      ++v3;
    }
    while (v3 != v4);
    v23 = *a2;
  }
  v24 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v2[-v23] >> 2));
  if (v2 == (char *)v23)
    v25 = 0;
  else
    v25 = v24;
  return std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(operations_research::sat::LiteralWithCoeff const&,operations_research::sat::LiteralWithCoeff const&),operations_research::sat::LiteralWithCoeff*,false>(v23, (uint64_t *)v2, (uint64_t (**)(uint64_t *, uint64_t *))&v27, v25, 1);
}

_QWORD *operations_research::sat::UpperBoundedLinearConstraint::UpperBoundedLinearConstraint(uint64_t a1, int **a2)
{
  _QWORD *v3;
  int *v4;
  unint64_t v5;
  char *v6;
  int *v7;
  int *v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int *v12;
  unint64_t v13;
  uint64_t *v14;
  int8x16_t v15;
  int32x4_t v16;
  uint64_t v17;
  int32x4_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int64x2_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  int *v34;
  int *v35;
  uint64_t v36;
  char *v37;
  int v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  _BYTE *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  _OWORD *v55;
  char *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  int *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int v72;
  unint64_t v73;
  _BYTE *v74;
  _DWORD *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  _OWORD *v81;
  char *v82;
  uint64_t v83;
  __int128 v84;
  int v85;
  int v86;
  char *v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  int v95;
  char *v96;
  char *v97;
  unint64_t v98;
  char *v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  __int128 v106;
  unint64_t v107;
  int **v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  _BYTE *v116;
  _DWORD *v117;
  char *v118;
  int64_t v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  _OWORD *v124;
  char *v125;
  uint64_t v126;
  __int128 v127;
  int v128;
  int *v129;
  unint64_t v130;
  unint64_t v131;
  int *v132;
  uint64_t v133;
  unint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int **v141;
  void **v143;
  void **v144;
  void **v145;
  uint64_t v146;

  v3 = (_QWORD *)a1;
  *(_WORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = -1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  v143 = (void **)(a1 + 24);
  *(_OWORD *)(a1 + 72) = 0u;
  v144 = (void **)(a1 + 48);
  v145 = (void **)(a1 + 72);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  v4 = a2[1];
  if (v4 == *a2)
  {
    v6 = 0;
  }
  else
  {
    v5 = 0xAAAAAAAAAAAAAAABLL * (v4 - *a2);
    if (v5 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(0xAAAAAAAAAAAAAAACLL * (v4 - *a2));
    v3[9] = v6;
    v3[10] = v6;
    v3[11] = &v6[4 * v5];
    v8 = *a2;
    v7 = a2[1];
    if (*a2 != v7)
    {
      v9 = (char *)v7 - (char *)v8 - 12;
      if (v9 >= 0x54)
      {
        v13 = v9 / 0xC + 1;
        v12 = &v8[3 * (v13 & 0x3FFFFFFFFFFFFFF8)];
        v14 = (uint64_t *)(v8 + 13);
        v15 = 0uLL;
        v16 = 0uLL;
        v17 = v13 & 0x3FFFFFFFFFFFFFF8;
        v18 = 0uLL;
        do
        {
          v19.i64[0] = *(v14 - 6);
          v19.i64[1] = *(uint64_t *)((char *)v14 - 36);
          v20.i64[0] = v19.i64[1];
          v20.i64[1] = *(v14 - 3);
          v21.i64[0] = v20.i64[1];
          v21.i64[1] = *(uint64_t *)((char *)v14 - 12);
          v22 = *(uint64_t *)((char *)v14 + 12);
          v23 = v14[3];
          v11 = *(uint64_t *)((char *)v14 + 36);
          v24 = *v14;
          v14 += 12;
          v25.i64[0] = v24;
          v25.i64[1] = v22;
          v26.i64[0] = v22;
          v26.i64[1] = v23;
          v27.i64[0] = v23;
          v27.i64[1] = v11;
          v16 = vsubq_s32(v16, (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64(v19, (int64x2_t)vextq_s8(v15, (int8x16_t)v19, 8uLL)), (int32x4_t)vceqq_s64(v21, v20))));
          v18 = vsubq_s32(v18, (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64(v25, (int64x2_t)vextq_s8((int8x16_t)v21, (int8x16_t)v25, 8uLL)), (int32x4_t)vceqq_s64(v27, v26))));
          v15 = (int8x16_t)v27;
          v17 -= 8;
        }
        while (v17);
        v10 = vaddvq_s32(vaddq_s32(v18, v16));
        if (v13 == (v13 & 0x3FFFFFFFFFFFFFF8))
        {
LABEL_14:
          if (v10)
          {
            v29 = (char *)operator new(8 * v10);
            v3[3] = v29;
            v3[4] = v29;
            v3[5] = &v29[8 * v10];
          }
          goto LABEL_16;
        }
      }
      else
      {
        v10 = 0;
        v11 = 0;
        v12 = *a2;
      }
      do
      {
        v28 = *(_QWORD *)(v12 + 1);
        if (v28 != v11)
          ++v10;
        v12 += 3;
        v11 = v28;
      }
      while (v12 != v7);
      goto LABEL_14;
    }
  }
  v10 = 0;
LABEL_16:
  v30 = v10 + 1;
  v31 = (char *)operator new(4 * v30);
  v32 = v31;
  v33 = &v31[4 * v30];
  v3[6] = v31;
  v3[7] = v31;
  v3[8] = v33;
  v35 = *a2;
  v34 = a2[1];
  v141 = a2;
  if (*a2 == v34)
  {
    LODWORD(v107) = 0;
    v108 = a2;
    if (v31 >= v33)
      goto LABEL_95;
LABEL_93:
    *(_DWORD *)v32 = v107;
    v109 = (uint64_t)(v32 + 4);
    goto LABEL_116;
  }
  v36 = 0;
  v37 = v6;
  do
  {
    v38 = *v35;
    if (*(_QWORD *)(v35 + 1) == v36)
      goto LABEL_65;
    v40 = (char *)v3[4];
    v39 = v3[5];
    v146 = *(_QWORD *)(v35 + 1);
    if ((unint64_t)v40 < v39)
    {
      *(_QWORD *)v40 = *(_QWORD *)(v35 + 1);
      v41 = (uint64_t)(v40 + 8);
      goto LABEL_42;
    }
    v42 = (char *)*v143;
    v43 = v40 - (_BYTE *)*v143;
    v44 = v43 >> 3;
    v45 = (v43 >> 3) + 1;
    if (v45 >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v46 = v39 - (_QWORD)v42;
    if (v46 >> 2 > v45)
      v45 = v46 >> 2;
    if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
      v47 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v47 = v45;
    if (v47)
    {
      if (v47 >> 61)
        goto LABEL_127;
      v48 = *v35;
      v49 = operator new(8 * v47);
      v38 = v48;
      v50 = &v49[8 * v44];
      *v50 = v146;
      v41 = (uint64_t)(v50 + 1);
      if (v40 == v42)
        goto LABEL_40;
LABEL_34:
      v51 = v40 - 8 - v42;
      if (v51 < 0x58)
        goto LABEL_136;
      if ((unint64_t)(v40 - &v49[v43]) < 0x20)
        goto LABEL_136;
      v52 = (v51 >> 3) + 1;
      v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
      v54 = &v40[-v53];
      v50 = (_QWORD *)((char *)v50 - v53);
      v55 = &v49[8 * v44 - 16];
      v56 = v40 - 16;
      v57 = v52 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v58 = *(_OWORD *)v56;
        *(v55 - 1) = *((_OWORD *)v56 - 1);
        *v55 = v58;
        v55 -= 2;
        v56 -= 32;
        v57 -= 4;
      }
      while (v57);
      v40 = v54;
      if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_136:
        do
        {
          v59 = *((_QWORD *)v40 - 1);
          v40 -= 8;
          *--v50 = v59;
        }
        while (v40 != v42);
      }
      goto LABEL_40;
    }
    v49 = 0;
    v50 = (_QWORD *)(8 * v44);
    *(_QWORD *)(8 * v44) = v146;
    v41 = 8 * v44 + 8;
    if (v40 != v42)
      goto LABEL_34;
LABEL_40:
    v3[3] = v50;
    v3[4] = v41;
    v3[5] = &v49[8 * v47];
    if (v42)
    {
      v60 = v38;
      operator delete(v42);
      v38 = v60;
      v37 = (char *)v3[10];
    }
LABEL_42:
    v3[4] = v41;
    v61 = (unint64_t)&v37[-v3[9]] >> 2;
    v63 = (char *)v3[7];
    v62 = v3[8];
    if ((unint64_t)v63 >= v62)
    {
      v65 = v34;
      v66 = (char *)*v144;
      v67 = v63 - (_BYTE *)*v144;
      v68 = v67 >> 2;
      v69 = (v67 >> 2) + 1;
      if (v69 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v70 = v62 - (_QWORD)v66;
      if (v70 >> 1 > v69)
        v69 = v70 >> 1;
      if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL)
        v71 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v71 = v69;
      if (v71)
      {
        if (v71 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v72 = v38;
        v73 = v71;
        v74 = operator new(4 * v71);
        v38 = v72;
        v71 = v73;
        v3 = (_QWORD *)a1;
        v75 = &v74[4 * v68];
        *v75 = v61;
        v64 = (uint64_t)(v75 + 1);
        if (v63 != v66)
        {
LABEL_53:
          v76 = v63 - 4 - v66;
          v36 = v146;
          if (v76 >= 0x2C)
          {
            v77 = v63 - &v74[v67];
            v34 = v65;
            if (v77 >= 0x20)
            {
              v78 = (v76 >> 2) + 1;
              v79 = 4 * (v78 & 0x7FFFFFFFFFFFFFF8);
              v80 = &v63[-v79];
              v75 = (_DWORD *)((char *)v75 - v79);
              v81 = &v74[4 * v68 - 16];
              v82 = v63 - 16;
              v83 = v78 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v84 = *(_OWORD *)v82;
                *(v81 - 1) = *((_OWORD *)v82 - 1);
                *v81 = v84;
                v81 -= 2;
                v82 -= 32;
                v83 -= 8;
              }
              while (v83);
              v63 = v80;
              if (v78 == (v78 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_62:
                v3[6] = v75;
                v3[7] = v64;
                v3[8] = &v74[4 * v71];
                if (v66)
                {
                  v86 = v38;
                  operator delete(v66);
                  v38 = v86;
                  v37 = (char *)v3[10];
                }
                goto LABEL_64;
              }
            }
          }
          else
          {
            v34 = v65;
          }
          do
          {
            v85 = *((_DWORD *)v63 - 1);
            v63 -= 4;
            *--v75 = v85;
          }
          while (v63 != v66);
          goto LABEL_62;
        }
      }
      else
      {
        v74 = 0;
        v75 = (_DWORD *)(4 * v68);
        *(_DWORD *)(4 * v68) = v61;
        v64 = 4 * v68 + 4;
        if (v63 != v66)
          goto LABEL_53;
      }
      v34 = v65;
      v36 = v146;
      goto LABEL_62;
    }
    *(_DWORD *)v63 = v61;
    v64 = (uint64_t)(v63 + 4);
    v36 = v146;
LABEL_64:
    v3[7] = v64;
LABEL_65:
    v87 = v37;
    v88 = v3[11];
    if ((unint64_t)v37 < v88)
    {
      *(_DWORD *)v37 = v38;
      v37 += 4;
      goto LABEL_19;
    }
    v89 = (char *)*v145;
    v90 = v37 - (_BYTE *)*v145;
    v91 = v90 >> 2;
    v92 = (v90 >> 2) + 1;
    if (v92 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v93 = v88 - (_QWORD)v89;
    if (v93 >> 1 > v92)
      v92 = v93 >> 1;
    if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL)
      v94 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v94 = v92;
    if (v94)
    {
      if (v94 >> 62)
LABEL_127:
        std::__throw_bad_array_new_length[abi:ne180100]();
      v95 = v38;
      v96 = (char *)operator new(4 * v94);
      v97 = &v96[4 * v91];
      *(_DWORD *)v97 = v95;
      v37 = v97 + 4;
      if (v87 == v89)
        goto LABEL_80;
    }
    else
    {
      v96 = 0;
      v97 = (char *)(4 * v91);
      *(_DWORD *)(4 * v91) = v38;
      v37 = (char *)(4 * v91 + 4);
      if (v87 == v89)
        goto LABEL_80;
    }
    v98 = v87 - 4 - v89;
    if (v98 < 0xBC)
    {
      v99 = v87;
      goto LABEL_79;
    }
    if (&v96[v90 - 4 - (v98 & 0xFFFFFFFFFFFFFFFCLL)] > &v96[v90 - 4])
    {
      v99 = v87;
      do
      {
LABEL_79:
        v100 = *((_DWORD *)v99 - 1);
        v99 -= 4;
        *((_DWORD *)v97 - 1) = v100;
        v97 -= 4;
      }
      while (v99 != v89);
      goto LABEL_80;
    }
    if (&v87[-(v98 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v87 - 4)
    {
      v99 = v87;
      goto LABEL_79;
    }
    if ((unint64_t)(v87 - v96 - v90) < 0x20)
    {
      v99 = v87;
      goto LABEL_79;
    }
    v101 = (v98 >> 2) + 1;
    v102 = 4 * (v101 & 0x7FFFFFFFFFFFFFF8);
    v99 = &v87[-v102];
    v97 -= v102;
    v103 = &v96[4 * v91 - 16];
    v104 = v87 - 16;
    v105 = v101 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v106 = *(_OWORD *)v104;
      *((_OWORD *)v103 - 1) = *((_OWORD *)v104 - 1);
      *(_OWORD *)v103 = v106;
      v103 -= 32;
      v104 -= 32;
      v105 -= 8;
    }
    while (v105);
    if (v101 != (v101 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_79;
LABEL_80:
    v3[9] = v97;
    v3[10] = v37;
    v3[11] = &v96[4 * v94];
    if (v89)
      operator delete(v89);
LABEL_19:
    v3[10] = v37;
    v35 += 3;
  }
  while (v35 != v34);
  v33 = (char *)v3[8];
  v32 = (char *)v3[7];
  v107 = (unint64_t)&v37[-v3[9]] >> 2;
  v108 = v141;
  if (v32 < v33)
    goto LABEL_93;
LABEL_95:
  v110 = (char *)*v144;
  v111 = v32 - (_BYTE *)*v144;
  v112 = v111 >> 2;
  v113 = (v111 >> 2) + 1;
  if (v113 >> 62)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v114 = v33 - v110;
  if (v114 >> 1 > v113)
    v113 = v114 >> 1;
  if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFFCLL)
    v115 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v115 = v113;
  if (v115)
  {
    if (v115 >> 62)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v116 = operator new(4 * v115);
    v117 = &v116[4 * v112];
    v118 = &v116[4 * v115];
    *v117 = v107;
    v109 = (uint64_t)(v117 + 1);
    v119 = v32 - v110;
    if (v32 == v110)
      goto LABEL_114;
  }
  else
  {
    v116 = 0;
    v117 = (_DWORD *)(4 * v112);
    v118 = 0;
    *(_DWORD *)(4 * v112) = v107;
    v109 = 4 * v112 + 4;
    v119 = v32 - v110;
    if (v32 == v110)
      goto LABEL_114;
  }
  v120 = v119 - 4;
  if (v120 >= 0x2C)
  {
    if ((unint64_t)(v32 - v116 - v111) >= 0x20)
    {
      v122 = (v120 >> 2) + 1;
      v123 = 4 * (v122 & 0x7FFFFFFFFFFFFFF8);
      v121 = &v32[-v123];
      v117 = (_DWORD *)((char *)v117 - v123);
      v124 = &v116[4 * v112 - 16];
      v125 = v32 - 16;
      v126 = v122 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v127 = *(_OWORD *)v125;
        *(v124 - 1) = *((_OWORD *)v125 - 1);
        *v124 = v127;
        v124 -= 2;
        v125 -= 32;
        v126 -= 8;
      }
      while (v126);
      if (v122 == (v122 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_114;
    }
    else
    {
      v121 = v32;
    }
  }
  else
  {
    v121 = v32;
  }
  do
  {
    v128 = *((_DWORD *)v121 - 1);
    v121 -= 4;
    *--v117 = v128;
  }
  while (v121 != v110);
LABEL_114:
  v3[6] = v117;
  v3[7] = v109;
  v3[8] = v118;
  if (v110)
    operator delete(v110);
LABEL_116:
  v3[7] = v109;
  v129 = *v108;
  v130 = (unint64_t)v108[1];
  if ((uint64_t)(v130 - (_QWORD)*v108) >= 8)
  {
    v134 = 0xA5B85C5E198ED849;
    v132 = *v108;
    do
    {
      v135 = v129 + 4;
      v134 = 0xC6A4A7935BD1E995 * v134
           + 0x228876A7198B743 * *(_QWORD *)v129
           + (~(0xC6A4A7935BD1E995 * v134 + 0x228876A7198B743 * *(_QWORD *)v129) >> 47);
      v129 += 2;
      v132 += 2;
    }
    while ((unint64_t)v135 <= v130);
    v131 = 0xC6A4A7935BD1E995 * v134;
    if ((unint64_t)v129 < v130)
      goto LABEL_122;
LABEL_118:
    v133 = 0;
  }
  else
  {
    v131 = 0xFD29DD736997537DLL;
    v132 = *v108;
    if ((unint64_t)v129 >= v130)
      goto LABEL_118;
LABEL_122:
    v136 = 0;
    v137 = v130 - (_QWORD)v132;
    do
    {
      v138 = *(char *)v129;
      v129 = (int *)((char *)v129 + 1);
      v139 = v136 + v138;
      v136 = (v136 + v138) << 8;
      --v137;
    }
    while (v137);
    v133 = 0x28876A7198B74300 * v139;
  }
  v3[13] = v133 + v131 + (~(v133 + v131) >> 47);
  return v3;
}

void sub_22DBAEB08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, void **a11, void **a12, void **a13)
{
  void *v14;
  void *v15;
  void *v16;

  v14 = *a13;
  if (*a13)
  {
    a10[10] = v14;
    operator delete(v14);
    v15 = *a12;
    if (!*a12)
    {
LABEL_3:
      v16 = *a11;
      if (!*a11)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v15 = *a12;
    if (!*a12)
      goto LABEL_3;
  }
  a10[7] = v15;
  operator delete(v15);
  v16 = *a11;
  if (!*a11)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  a10[4] = v16;
  operator delete(v16);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::UpperBoundedLinearConstraint::AddToConflict(operations_research::sat::UpperBoundedLinearConstraint *this, operations_research::sat::MutableUpperBoundedLinearConstraint *a2)
{
  int *v4;
  int *v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10[2];
  uint64_t *v11;
  uint64_t v12;

  v4 = (int *)*((_QWORD *)this + 9);
  v5 = (int *)*((_QWORD *)this + 10);
  if (v4 != v5)
  {
    v6 = 0;
    v7 = 1;
    do
    {
      v8 = *v4++;
      operations_research::sat::MutableUpperBoundedLinearConstraint::AddTerm((uint64_t *)a2, v8, *(_QWORD *)(*((_QWORD *)this + 3) + 8 * v6));
      if (v7 == *(_DWORD *)(*((_QWORD *)this + 6) + 4 * (v6 + 1)))
        ++v6;
      ++v7;
    }
    while (v4 != v5);
  }
  v9 = *((_QWORD *)this + 12);
  v12 = v9;
  LODWORD(v10[0]) = 0;
  if (v9 < 0)
  {
    v11 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,int>((int)&v12, (int)v10, "value >= 0");
    if (v11)
    {
      google::LogMessageFatal::LogMessageFatal(v10, (google::glog_internal_namespace_ *)"./ortools/sat/pb_constraint.h", 265, &v11);
      google::LogMessage::stream((google::LogMessage *)v10);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v10);
    }
    v9 = v12;
  }
  *((_QWORD *)a2 + 3) += v9;
}

void sub_22DBAEC88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void operations_research::sat::MutableUpperBoundedLinearConstraint::AddTerm(uint64_t *a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14[2];
  uint64_t *v15;
  uint64_t v16;

  v16 = a3;
  LODWORD(v14[0]) = 0;
  if (a3 < 1)
  {
    v15 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,int>((int)&v16, (int)v14, "coeff > 0");
    if (v15)
    {
      google::LogMessageFatal::LogMessageFatal(v14, (google::glog_internal_namespace_ *)"./ortools/sat/pb_constraint.h", 274, &v15);
      google::LogMessage::stream((google::LogMessage *)v14);
      goto LABEL_24;
    }
    a3 = v16;
  }
  if ((a2 & 1) != 0)
    v5 = -a3;
  else
    v5 = a3;
  v6 = *a1;
  v7 = *(_QWORD *)(*a1 + 8 * (a2 >> 1));
  v8 = (uint64_t)a2 >> 1;
  if ((a2 & 0xFFFFFFFE | (v7 < 1)) == a2)
  {
    v9 = a1[4] + a3;
  }
  else
  {
    if (v7 < 0)
      v7 = -v7;
    if (v7 >= a3)
      v7 = a3;
    v10 = a1[4];
    a1[3] -= v7;
    v11 = *(_QWORD *)(v6 + 8 * v8);
    v12 = v11 + v5;
    if (v11 + v5 < 0)
      v12 = -v12;
    if (v11 < 0)
      v11 = -v11;
    v9 = v10 - v11 + v12;
  }
  a1[4] = v9;
  LODWORD(v14[0]) = 0;
  if (v9 < 0)
  {
    v15 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,int>((int)a1 + 32, (int)v14, "max_sum_ >= 0");
    if (!v15)
    {
      v6 = *a1;
      goto LABEL_17;
    }
    google::LogMessageFatal::LogMessageFatal(v14, (google::glog_internal_namespace_ *)"./ortools/sat/pb_constraint.h", 290, &v15);
    v13 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v14);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "Overflow");
LABEL_24:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v14);
  }
LABEL_17:
  *(_QWORD *)(v6 + 8 * v8) += v5;
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(a1 + 5, a2 >> 1);
}

void sub_22DBAEE10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void sub_22DBAEE18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

uint64_t operations_research::sat::UpperBoundedLinearConstraint::InitializeRhs(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  int *v14;
  int *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  unint64_t v45[2];
  uint64_t *v46;

  v9 = a2;
  *(_QWORD *)(a1 + 96) = a2;
  v11 = *(unsigned int *)(a5 + 8);
  v12 = (v11 >> 1) & 0x7FFFFFF;
  v13 = (uint64_t *)operator new(8 * v12 + 16);
  bzero(v13, 8 * ((v11 >> 1) & 0x7FFFFFF) + 16);
  v14 = *(int **)(a1 + 72);
  v15 = *(int **)(a1 + 80);
  v43 = a6;
  if (a3 < 1)
  {
    v17 = 0;
  }
  else
  {
    if (v14 == v15)
    {
      v17 = 0;
    }
    else
    {
      v16 = 0;
      v17 = 0;
      v18 = *(_QWORD *)(a1 + 24);
      v19 = *(_QWORD *)(a5 + 24);
      v20 = 1;
      v21 = *(int **)(a1 + 72);
      v22 = *(_QWORD *)(a1 + 48);
      do
      {
        v23 = *v21;
        if (((*(_QWORD *)(v19 + (((unint64_t)v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v23) & 1) != 0)
        {
          v24 = *(_QWORD *)(a5 + 120);
          v25 = *(_DWORD *)(v24 + 8 * (v23 >> 1) + 4);
          if (v25 < a3)
          {
            v26 = *(_QWORD *)(v18 + 8 * v16);
            v27 = 8 * ((uint64_t)v23 >> 1);
            if (v17 <= v25)
              v17 = v25;
            v9 -= v26;
            v28 = &v13[((unint64_t)*(unsigned int *)(v24 + v27) >> 1) & 0x7FFFFFF];
            v28[1] += v26;
          }
        }
        if (v20 == *(_DWORD *)(v22 + 4 * (v16 + 1)))
          ++v16;
        ++v21;
        ++v20;
      }
      while (v21 != v15);
    }
    if (v9 < 0)
    {
      v41 = 0;
      goto LABEL_35;
    }
    v29 = v13 + 1;
    v30 = *v13;
    v31 = ((v11 >> 1) & 0x7FFFFFF) + 1;
    do
    {
      v30 += *v29;
      *v29++ = v30;
      --v31;
    }
    while (v31);
  }
  if (v14 != v15)
  {
    v32 = 0;
    v33 = 1;
    do
    {
      v34 = *v14 >> 1;
      v35 = v12;
      if (((*(_QWORD *)(*(_QWORD *)(a5 + 24) + (((unint64_t)(2 * v34) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (*v14 & 0x3E)) & 3) != 0)
        v35 = (*(_DWORD *)(*(_QWORD *)(a5 + 120) + 8 * v34) >> 1) & 0x7FFFFFF;
      if (v35)
      {
        v36 = (_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v32);
        v45[0] = *(_QWORD *)(a1 + 96) - v13[v35];
        if (*v36 > (uint64_t)v45[0])
        {
          v46 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,gtl::IntType<operations_research::sat::Coefficient_tag_,long long>>((int)v36, (int)v45, "coeffs_[coeff_index] <= rhs_ - sum_at_previous_level[level]");
          if (v46)
          {
            google::LogMessageFatal::LogMessageFatal(v45, (google::glog_internal_namespace_ *)"./ortools/sat/pb_constraint.cc", 510, &v46);
            v37 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v45);
            std::operator<<[abi:ne180100]<std::char_traits<char>>(v37, "var should have been propagated at an earlier level !");
            google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v45);
          }
        }
      }
      if (v33 == *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * (v32 + 1)))
        ++v32;
      ++v14;
      ++v33;
    }
    while (v14 != v15);
    v15 = *(int **)(a1 + 72);
  }
  v38 = *(_QWORD *)(a1 + 24);
  v39 = (unint64_t)(*(_QWORD *)(a1 + 32) - v38) >> 3;
  v40 = (*(_QWORD *)(a1 + 80) - (_QWORD)v15) >> 2;
  *(_DWORD *)(a1 + 16) = v39 - 1;
  *(_DWORD *)(a1 + 20) = v40;
  if ((((_DWORD)v39 - 1) & 0x80000000) == 0)
    v9 -= *(_QWORD *)(v38 + 8 * (v39 - 1));
  *a4 = v9;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * (int)v39);
  if (v9 < 0)
    v41 = operations_research::sat::UpperBoundedLinearConstraint::Propagate(a1, v17, a4, a5, v43);
  else
    v41 = 1;
LABEL_35:
  operator delete(v13);
  return v41;
}

void sub_22DBAF114(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBAF11C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_22DBAF130(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_22DBAF144(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::UpperBoundedLinearConstraint::Propagate(uint64_t a1, int a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t result;
  void **v25;
  int v26;
  unint64_t v27;
  int *v28;
  _DWORD *v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  int *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  _OWORD *v43;
  int *v44;
  uint64_t v45;
  __int128 v46;
  int v47;

  v8 = *a3;
  v9 = *(unsigned int *)(a1 + 16);
  if ((v9 & 0x80000000) != 0)
  {
LABEL_8:
    v13 = *(int *)(*(_QWORD *)(a1 + 48) + 4 * ((int)v9 + 1));
    if ((int)v13 >= *(_DWORD *)(a1 + 20))
    {
LABEL_20:
      result = 1;
      if ((v9 & 0x80000000) != 0)
        goto LABEL_22;
LABEL_21:
      v8 -= *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v9);
      goto LABEL_22;
    }
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 24);
    v8 += *(_QWORD *)(v10 + 8 * v9);
    do
    {
      if (*(_QWORD *)(v10 + 8 * v9) <= v8)
        goto LABEL_8;
      v11 = v9 - 1;
      *(_DWORD *)(a1 + 16) = v9 - 1;
      v12 = (int)v9 <= 0;
      LODWORD(v9) = v9 - 1;
    }
    while (!v12);
    LODWORD(v9) = v11;
    v13 = **(int **)(a1 + 48);
    if ((int)v13 >= *(_DWORD *)(a1 + 20))
      goto LABEL_20;
  }
  v14 = *(_QWORD *)(a4 + 24);
  v15 = -1;
  while (1)
  {
    v16 = *(int *)(*(_QWORD *)(a1 + 72) + 4 * v13);
    v17 = v16 >> 6;
    v18 = *(_QWORD *)(v14 + 8 * (v16 >> 6));
    if (((v18 >> (v16 & 0x3F ^ 1)) & 1) == 0)
    {
      if (((v18 >> (v16 & 0x3F)) & 1) == 0)
      {
        if (v15 < 0)
        {
          v22 = *(_DWORD *)(a4 + 12);
          if (*(_DWORD *)(a1 + 4) == -1)
            *(_DWORD *)(a1 + 4) = v22;
          v23 = *(_QWORD *)(a5 + 32) + 16 * v22;
          *(_DWORD *)v23 = a2;
          *(_QWORD *)(v23 + 8) = a1;
          LODWORD(v23) = *(_DWORD *)a5;
          *(_DWORD *)(*(_QWORD *)(a4 + 72) + 4 * *(int *)(a4 + 12)) = v16 ^ 1;
          *(_DWORD *)(a4 + 8) = (*(_DWORD *)(a4 + 8) & 0xFFFFFFE | (v16 ^ 1) & 1 | ((_DWORD)v23 << 28)) ^ 1;
          *(_QWORD *)(*(_QWORD *)(a4 + 120) + 8 * ((int)v16 >> 1)) = *(_QWORD *)(a4 + 8);
          v14 = *(_QWORD *)(a4 + 24);
          *(_QWORD *)(v14 + 8 * v17) |= 1 << (v16 ^ 1u);
          ++*(_DWORD *)(a4 + 12);
          v15 = *(int *)(*(_QWORD *)(a1 + 72) + 4 * v13) >> 1;
        }
        else
        {
          v19 = v16 ^ 1;
          v20 = (int)v16 >> 1;
          *(_DWORD *)(*(_QWORD *)(a4 + 152) + 4 * v20) = v15;
          *(_DWORD *)(*(_QWORD *)(a4 + 72) + 4 * *(int *)(a4 + 12)) = v19;
          *(_DWORD *)(a4 + 8) = (*(_DWORD *)(a4 + 8) & 0xFFFFFFE | v19 & 1) ^ 0x30000001;
          *(_QWORD *)(*(_QWORD *)(a4 + 120) + 8 * v20) = *(_QWORD *)(a4 + 8);
          v21 = 1 << v19;
          v14 = *(_QWORD *)(a4 + 24);
          *(_QWORD *)(v14 + 8 * v17) |= v21;
          ++*(_DWORD *)(a4 + 12);
        }
        goto LABEL_11;
      }
      if (*(_DWORD *)(*(_QWORD *)(a4 + 120) + 8 * ((int)v16 >> 1) + 4) > a2)
        break;
    }
LABEL_11:
    if (++v13 >= *(int *)(a1 + 20))
    {
      LODWORD(v9) = *(_DWORD *)(a1 + 16);
      goto LABEL_20;
    }
  }
  v25 = (void **)(a5 + 8);
  operations_research::sat::UpperBoundedLinearConstraint::FillReason((_QWORD *)a1, (_QWORD *)a4, a2, (int)v16 >> 1, (char **)(a5 + 8));
  v26 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * v13) ^ 1;
  v28 = *(int **)(a5 + 16);
  v27 = *(_QWORD *)(a5 + 24);
  if ((unint64_t)v28 >= v27)
  {
    v30 = (int *)*v25;
    v31 = (char *)v28 - (_BYTE *)*v25;
    v32 = v31 >> 2;
    v33 = (v31 >> 2) + 1;
    if (v33 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v34 = v27 - (_QWORD)v30;
    if (v34 >> 1 > v33)
      v33 = v34 >> 1;
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
      v35 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v35 = v33;
    if (v35)
    {
      if (v35 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v36 = operator new(4 * v35);
    }
    else
    {
      v36 = 0;
    }
    v37 = (int *)&v36[4 * v32];
    v38 = &v36[4 * v35];
    *v37 = v26;
    v29 = v37 + 1;
    if (v28 != v30)
    {
      v39 = (char *)v28 - (char *)v30 - 4;
      if (v39 < 0x2C)
        goto LABEL_50;
      if ((unint64_t)((char *)v28 - v36 - v31) < 0x20)
        goto LABEL_50;
      v40 = (v39 >> 2) + 1;
      v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
      v42 = &v28[v41 / 0xFFFFFFFFFFFFFFFCLL];
      v37 = (int *)((char *)v37 - v41);
      v43 = &v36[4 * v32 - 16];
      v44 = v28 - 4;
      v45 = v40 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v46 = *(_OWORD *)v44;
        *(v43 - 1) = *((_OWORD *)v44 - 1);
        *v43 = v46;
        v43 -= 2;
        v44 -= 8;
        v45 -= 8;
      }
      while (v45);
      v28 = v42;
      if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_50:
        do
        {
          v47 = *--v28;
          *--v37 = v47;
        }
        while (v28 != v30);
      }
    }
    *(_QWORD *)(a5 + 8) = v37;
    *(_QWORD *)(a5 + 16) = v29;
    *(_QWORD *)(a5 + 24) = v38;
    if (v30)
      operator delete(v30);
  }
  else
  {
    *v28 = v26;
    v29 = v28 + 1;
  }
  result = 0;
  *(_QWORD *)(a5 + 16) = v29;
  LODWORD(v9) = *(_DWORD *)(a1 + 16);
  if ((v9 & 0x80000000) == 0)
    goto LABEL_21;
LABEL_22:
  *a3 = v8;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * ((int)v9 + 1));
  return result;
}

void operations_research::sat::UpperBoundedLinearConstraint::FillReason(_QWORD *a1, _QWORD *a2, int a3, int a4, char **a5)
{
  char **v5;
  int v6;
  int *v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  int v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char *v20;
  unint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  _BYTE *v34;
  char *v35;
  unint64_t v36;
  char *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  char *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v5 = a5;
  v6 = a3;
  v8 = (int *)*a5;
  a5[1] = *a5;
  v9 = a1[12];
  if (v9 != 1)
  {
    v13 = ((a1[10] - a1[9]) >> 2) - 1;
    if (v13 < 0)
      return;
    LODWORD(v15) = 0;
    v16 = 0;
    v17 = 0;
    v18 = a1[3];
    v19 = ((unint64_t)(a1[4] - v18) >> 3) - 1;
    v20 = (char *)v8;
    while (1)
    {
      v22 = *(int *)(a1[9] + 4 * v13);
      v23 = (int)v22 >> 1;
      if ((int)v22 >> 1 != a4)
        break;
      v17 = *(_QWORD *)(v18 + 8 * v19);
LABEL_7:
      v19 -= v13 == *(_DWORD *)(a1[6] + 4 * v19);
      if (v13-- <= 0)
      {
        if ((unint64_t)(v20 - *v5) >= 8)
        {
          v53 = a1[3];
          if (a1[4] - v53 != 8)
          {
            v54 = v17 - v9;
            if (*(_QWORD *)(v53 + 8 * v16) < v17 - v9)
            {
              v15 = (int)v15;
              v55 = a1[9];
              v56 = a1[10];
              if ((int)v15 < (unint64_t)((v56 - v55) >> 2))
              {
                v57 = a1[6];
                while (1)
                {
                  v58 = v16 + 1;
                  if ((_DWORD)v15 == *(_DWORD *)(v57 + 4 * (v16 + 1)))
                  {
                    ++v16;
                    if (*(_QWORD *)(v53 + 8 * v58) >= v54)
                      break;
                  }
                  if ((*(_DWORD *)(v55 + 4 * v15) ^ 1) == *((_DWORD *)v20 - 1))
                  {
                    v59 = *(_QWORD *)(v53 + 8 * v16);
                    v54 -= v59;
                    v5[1] = v20 - 4;
                    if (v59 >= v54)
                      return;
                    v56 = a1[10];
                    v20 -= 4;
                  }
                  if (++v15 >= (unint64_t)((v56 - v55) >> 2))
                    return;
                }
              }
            }
          }
        }
        return;
      }
    }
    if (((*(_QWORD *)(a2[3] + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
      goto LABEL_7;
    v24 = a2[15];
    if (*(_DWORD *)(v24 + 8 * v23 + 4) > v6)
      goto LABEL_7;
    if ((*(_DWORD *)(v24 + 8 * v23) & 0xFFFFFFE) == 0)
    {
LABEL_32:
      v9 -= *(_QWORD *)(v18 + 8 * v19);
      goto LABEL_7;
    }
    v25 = v22 ^ 1;
    v26 = (unint64_t)v5[2];
    if ((unint64_t)v20 < v26)
    {
      *(_DWORD *)v20 = v25;
      v27 = (uint64_t)(v20 + 4);
LABEL_31:
      v5[1] = (char *)v27;
      v18 = a1[3];
      v20 = (char *)v27;
      v16 = v19;
      LODWORD(v15) = v13;
      goto LABEL_32;
    }
    v28 = *v5;
    v29 = v20 - *v5;
    v30 = v29 >> 2;
    v31 = (v29 >> 2) + 1;
    if (v31 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v32 = v26 - (_QWORD)v28;
    if (v32 >> 1 > v31)
      v31 = v32 >> 1;
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
      v31 = 0x3FFFFFFFFFFFFFFFLL;
    v63 = v17;
    v64 = v9;
    v62 = v31;
    if (v31)
    {
      if (v31 >> 62)
        goto LABEL_62;
      v33 = v20;
      v34 = operator new(4 * v31);
      v20 = v33;
      v35 = &v34[4 * v30];
      *(_DWORD *)v35 = v25;
      v27 = (uint64_t)(v35 + 4);
      if (v20 != v28)
      {
LABEL_22:
        v36 = v20 - 4 - v28;
        if (v36 >= 0xBC
          && &v34[v29 - 4 - (v36 & 0xFFFFFFFFFFFFFFFCLL)] <= &v34[v29 - 4]
          && &v20[-(v36 & 0xFFFFFFFFFFFFFFFCLL) - 4] <= v20 - 4
          && (unint64_t)(v20 - v34 - v29) >= 0x20)
        {
          v39 = (v36 >> 2) + 1;
          v40 = 4 * (v39 & 0x7FFFFFFFFFFFFFF8);
          v37 = &v20[-v40];
          v35 -= v40;
          v41 = &v34[4 * v30 - 16];
          v42 = v20 - 16;
          v43 = v39 & 0x7FFFFFFFFFFFFFF8;
          v6 = a3;
          do
          {
            v44 = *(_OWORD *)v42;
            *(v41 - 1) = *((_OWORD *)v42 - 1);
            *v41 = v44;
            v41 -= 2;
            v42 -= 32;
            v43 -= 8;
          }
          while (v43);
          v5 = a5;
          if (v39 == (v39 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_28:
            *v5 = v35;
            v5[1] = (char *)v27;
            v5[2] = &v34[4 * v62];
            if (!v28)
            {
LABEL_30:
              v17 = v63;
              v9 = v64;
              goto LABEL_31;
            }
LABEL_29:
            operator delete(v28);
            goto LABEL_30;
          }
        }
        else
        {
          v37 = v20;
          v5 = a5;
          v6 = a3;
        }
        do
        {
          v38 = *((_DWORD *)v37 - 1);
          v37 -= 4;
          *((_DWORD *)v35 - 1) = v38;
          v35 -= 4;
        }
        while (v37 != v28);
        goto LABEL_28;
      }
    }
    else
    {
      v34 = 0;
      v35 = (char *)(4 * v30);
      *(_DWORD *)(4 * v30) = v25;
      v27 = 4 * v30 + 4;
      if (v20 != v28)
        goto LABEL_22;
    }
    v5 = a5;
    v6 = a3;
    *a5 = v35;
    a5[1] = (char *)v27;
    a5[2] = &v34[4 * v62];
    if (!v28)
      goto LABEL_30;
    goto LABEL_29;
  }
  v10 = *(_DWORD *)(a2[9] + 4 * a3) ^ 1;
  v11 = (unint64_t)a5[2];
  if ((unint64_t)v8 >= v11)
  {
    v45 = v11 - (_QWORD)v8;
    v46 = v45 >> 1;
    if ((unint64_t)(v45 >> 1) <= 1)
      v46 = 1;
    v47 = (unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL;
    v48 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v47)
      v48 = v46;
    if (v48 >> 62)
LABEL_62:
      std::__throw_bad_array_new_length[abi:ne180100]();
    v49 = 4 * v48;
    v50 = (char *)operator new(4 * v48);
    v51 = &v50[v49];
    *(_DWORD *)v50 = v10;
    v52 = v50 + 4;
    *v5 = v50;
    v5[1] = v50 + 4;
    v5[2] = v51;
    if (v8)
      operator delete(v8);
    v5[1] = v52;
  }
  else
  {
    *v8 = v10;
    a5[1] = (char *)(v8 + 1);
  }
}

void operations_research::sat::UpperBoundedLinearConstraint::ResolvePBConflict(operations_research::sat::UpperBoundedLinearConstraint *this, _QWORD *a2, int a3, operations_research::sat::MutableUpperBoundedLinearConstraint *a4, uint64_t *a5)
{
  operations_research::sat::MutableUpperBoundedLinearConstraint *v5;
  uint64_t v8;
  int v9;
  int *v10;
  int *v11;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  int *v23;
  int *v24;
  uint64_t v25;
  unint64_t v26;
  int *v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  operations_research::sat::MutableUpperBoundedLinearConstraint *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  int *v45;
  int *v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  int v55;
  int v56;
  uint64_t *v57;
  int v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  int v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70[2];
  uint64_t *v71;
  uint64_t *v72;

  v5 = a4;
  v8 = a3;
  v9 = *(_DWORD *)(a2[15] + 8 * a3 + 4);
  v69 = 0;
  v11 = (int *)*((_QWORD *)this + 9);
  v10 = (int *)*((_QWORD *)this + 10);
  if (v11 == v10)
  {
    v13 = 0;
    v15 = 0;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 2 * a3;
    v17 = 1;
    do
    {
      v18 = *v11;
      LODWORD(v71) = v18;
      if ((int)v18 >> 1 == a3)
      {
        LODWORD(v70[0]) = v16 | (*(_QWORD *)(*(_QWORD *)v5 + 8 * v8) < 1);
        if ((_DWORD)v18 == LODWORD(v70[0]))
        {
          v63 = v9;
          v62 = a5;
          v19 = (uint64_t *)google::MakeCheckOpString<operations_research::sat::Literal,operations_research::sat::Literal>((int *)&v71, (int *)v70, "literal != conflict->GetLiteral(var)");
          a5 = v62;
          v9 = v63;
          v5 = a4;
          v72 = v19;
          if (v19)
          {
            google::LogMessageFatal::LogMessageFatal(v70, (google::glog_internal_namespace_ *)"./ortools/sat/pb_constraint.cc", 678, &v72);
            google::LogMessage::stream((google::LogMessage *)v70);
            goto LABEL_14;
          }
        }
        v13 = *(_QWORD *)(*((_QWORD *)this + 3) + 8 * v14);
        v69 = v13;
      }
      else if (((*(_QWORD *)(a2[3] + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v18) & 1) != 0
             && *(_DWORD *)(a2[15] + 8 * ((int)v18 >> 1) + 4) < v9)
      {
        v15 += *(_QWORD *)(*((_QWORD *)this + 3) + 8 * v14);
      }
      if (v17 == *(_DWORD *)(*((_QWORD *)this + 6) + 4 * (v14 + 1)))
        ++v14;
      ++v11;
      ++v17;
    }
    while (v11 != v10);
  }
  v20 = *((_QWORD *)this + 12);
  v21 = v20 - v15;
  if (v20 >= v15)
  {
    v68 = v20 - v15;
    LODWORD(v70[0]) = 0;
    if (v20 - v15 < 0)
    {
      v54 = a5;
      v55 = v9;
      v72 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,int>((int)&v68, (int)v70, "slack >= 0");
      if (v72)
      {
        google::LogMessageFatal::LogMessageFatal(v70, (google::glog_internal_namespace_ *)"./ortools/sat/pb_constraint.cc", 713, &v72);
        google::LogMessage::stream((google::LogMessage *)v70);
        goto LABEL_14;
      }
      v21 = v68;
      v13 = v69;
      v5 = a4;
      v9 = v55;
      a5 = v54;
    }
    v34 = *(_QWORD *)(*(_QWORD *)v5 + 8 * v8);
    if (v34 >= 0)
      v35 = *(_QWORD *)(*(_QWORD *)v5 + 8 * v8);
    else
      v35 = -v34;
    v67 = v35;
    if (v35 >= v13)
      v36 = v13;
    else
      v36 = v35;
    v37 = *a5;
    if (*a5 >= v35)
    {
      v56 = v9;
      v57 = a5;
      v72 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,gtl::IntType<operations_research::sat::Coefficient_tag_,long long>>((int)a5, (int)&v67, "*conflict_slack < conflict_var_coeff");
      if (v72)
      {
        google::LogMessageFatal::LogMessageFatal(v70, (google::glog_internal_namespace_ *)"./ortools/sat/pb_constraint.cc", 733, &v72);
        google::LogMessage::stream((google::LogMessage *)v70);
        goto LABEL_14;
      }
      v5 = a4;
      v9 = v56;
      a5 = v57;
      if (v68 < v69)
      {
LABEL_33:
        v38 = v37 + v21 - v36;
        if (v38 < 0)
          goto LABEL_79;
        v65 = 0;
        v66 = 0;
        if (v69 <= v67)
          v39 = v67;
        else
          v39 = v69;
        if (v37 + v21 >= v39)
        {
          v41 = v9;
          v40 = *a5;
          v65 = v40;
          v66 = v68;
          LODWORD(v70[0]) = 0;
          if (v40 < 0)
          {
            v42 = a5;
            v72 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,int>((int)&v65, (int)v70, "conflict_diff >= 0");
            if (v72)
            {
              google::LogMessageFatal::LogMessageFatal(v70, (google::glog_internal_namespace_ *)"./ortools/sat/pb_constraint.cc", 771, &v72);
              google::LogMessage::stream((google::LogMessage *)v70);
              goto LABEL_14;
            }
            v5 = a4;
            v40 = v65;
            a5 = v42;
          }
        }
        else
        {
          v40 = v38 + 1;
          v41 = v9;
          if (v69 >= v67)
          {
            v66 = v40;
            v40 = 0;
          }
          else
          {
            v65 = v40;
          }
        }
        if (v40 > *a5)
        {
          v61 = a5;
          v72 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,gtl::IntType<operations_research::sat::Coefficient_tag_,long long>>((int)&v65, (int)a5, "conflict_diff <= *conflict_slack");
          if (v72)
          {
            google::LogMessageFatal::LogMessageFatal(v70, (google::glog_internal_namespace_ *)"./ortools/sat/pb_constraint.cc", 772, &v72);
            google::LogMessage::stream((google::LogMessage *)v70);
            goto LABEL_14;
          }
          v5 = a4;
          v40 = v65;
          a5 = v61;
          if (v65 <= 0)
          {
LABEL_47:
            LODWORD(v70[0]) = 0;
            v44 = v66;
            if (v66 < 0)
            {
              v72 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,int>((int)&v66, (int)v70, "diff >= 0");
              if (v72)
              {
                google::LogMessageFatal::LogMessageFatal(v70, (google::glog_internal_namespace_ *)"./ortools/sat/pb_constraint.cc", 781, &v72);
                google::LogMessage::stream((google::LogMessage *)v70);
                goto LABEL_14;
              }
              v44 = v66;
              v5 = a4;
              if (v66 <= v68)
              {
LABEL_49:
                if (v44)
                {
LABEL_50:
                  v45 = (int *)*((_QWORD *)this + 9);
                  v46 = (int *)*((_QWORD *)this + 10);
                  if (v45 == v46)
                    goto LABEL_64;
                  v47 = 0;
                  v48 = 1;
                  while (1)
                  {
                    v50 = *v45;
                    if (((*(_QWORD *)(a2[3] + (((unint64_t)*v45 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *v45) & 1) != 0)
                    {
                      v51 = *((_QWORD *)this + 3);
                      if (*(_DWORD *)(a2[15] + 8 * (v50 >> 1) + 4) < v41)
                      {
                        v49 = *(_QWORD *)(v51 + 8 * v47);
                      }
                      else
                      {
                        v49 = *(_QWORD *)(v51 + 8 * v47) - v66;
                        if (v49 < 1)
                          goto LABEL_54;
                      }
                    }
                    else
                    {
                      v49 = *(_QWORD *)(*((_QWORD *)this + 3) + 8 * v47) - v66;
                      if (v49 < 1)
                        goto LABEL_54;
                    }
                    operations_research::sat::MutableUpperBoundedLinearConstraint::AddTerm((uint64_t *)v5, v50, v49);
                    v5 = a4;
LABEL_54:
                    if (v48 == *(_DWORD *)(*((_QWORD *)this + 6) + 4 * (v47 + 1)))
                      ++v47;
                    ++v45;
                    ++v48;
                    if (v45 == v46)
                    {
                      v44 = v66;
LABEL_64:
                      v52 = *((_QWORD *)this + 12);
                      LODWORD(v70[0]) = 0;
                      v53 = (uint64_t *)(v52 - v44);
                      v72 = v53;
                      if ((uint64_t)v53 >= 0)
                      {
LABEL_65:
                        *((_QWORD *)v5 + 3) += v53;
                        return;
                      }
                      v71 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,int>((int)&v72, (int)v70, "value >= 0");
                      if (!v71)
                      {
                        v53 = v72;
                        v5 = a4;
                        goto LABEL_65;
                      }
                      google::LogMessageFatal::LogMessageFatal(v70, (google::glog_internal_namespace_ *)"./ortools/sat/pb_constraint.h", 265, &v71);
                      google::LogMessage::stream((google::LogMessage *)v70);
LABEL_14:
                      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v70);
                    }
                  }
                }
LABEL_79:
                operations_research::sat::UpperBoundedLinearConstraint::AddToConflict(this, v5);
                return;
              }
            }
            else if (v66 <= v68)
            {
              goto LABEL_49;
            }
            v72 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,gtl::IntType<operations_research::sat::Coefficient_tag_,long long>>((int)&v66, (int)&v68, "diff <= slack");
            if (v72)
            {
              google::LogMessageFatal::LogMessageFatal(v70, (google::glog_internal_namespace_ *)"./ortools/sat/pb_constraint.cc", 782, &v72);
              google::LogMessage::stream((google::LogMessage *)v70);
              goto LABEL_14;
            }
            v44 = v66;
            v5 = a4;
            if (v66)
              goto LABEL_50;
            goto LABEL_79;
          }
        }
        else if (v40 <= 0)
        {
          goto LABEL_47;
        }
        v43 = a5;
        operations_research::sat::MutableUpperBoundedLinearConstraint::ReduceSlackTo((uint64_t)v5, a2, v41, *a5, *a5 - v40);
        v5 = a4;
        *v43 -= v65;
        goto LABEL_47;
      }
    }
    else if (v21 < v13)
    {
      goto LABEL_33;
    }
    v58 = v9;
    v59 = a5;
    v60 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,gtl::IntType<operations_research::sat::Coefficient_tag_,long long>>((int)&v68, (int)&v69, "slack < var_coeff");
    a5 = v59;
    v9 = v58;
    v5 = a4;
    v72 = v60;
    if (v60)
    {
      google::LogMessageFatal::LogMessageFatal(v70, (google::glog_internal_namespace_ *)"./ortools/sat/pb_constraint.cc", 734, &v72);
      google::LogMessage::stream((google::LogMessage *)v70);
      goto LABEL_14;
    }
    goto LABEL_33;
  }
  v22 = a5;
  v24 = (int *)*((_QWORD *)v5 + 12);
  v23 = (int *)*((_QWORD *)v5 + 13);
  if (v24 != v23)
  {
    v25 = *(_QWORD *)v5;
    v26 = (char *)v23 - (char *)v24 - 4;
    v27 = (int *)*((_QWORD *)v5 + 12);
    if (v26 < 4)
      goto LABEL_92;
    v28 = (v26 >> 2) + 1;
    v27 = &v24[v28 & 0x7FFFFFFFFFFFFFFELL];
    v29 = v24 + 1;
    v30 = v28 & 0x7FFFFFFFFFFFFFFELL;
    do
    {
      v31 = *v29;
      *(_QWORD *)(v25 + 8 * *(v29 - 1)) = 0;
      *(_QWORD *)(v25 + 8 * v31) = 0;
      v29 += 2;
      v30 -= 2;
    }
    while (v30);
    if (v28 != (v28 & 0x7FFFFFFFFFFFFFFELL))
    {
LABEL_92:
      do
      {
        v32 = *v27++;
        *(_QWORD *)(v25 + 8 * v32) = 0;
      }
      while (v27 != v23);
    }
  }
  v33 = v5;
  bzero(*((void **)v5 + 6), *((_QWORD *)v5 + 7) - *((_QWORD *)v5 + 6));
  *((_QWORD *)v33 + 13) = *((_QWORD *)v33 + 12);
  *((_QWORD *)v33 + 3) = 0;
  *((_QWORD *)v33 + 4) = 0;
  operations_research::sat::UpperBoundedLinearConstraint::AddToConflict(this, v33);
  *v22 = *((_QWORD *)this + 12) - v15;
}

void sub_22DBB002C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBB0034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBB003C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBB0044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBB004C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBB0054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBB005C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBB0064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBB006C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::PbConstraints::AddConstraint(uint64_t a1, int **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int **v6;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t *v40;
  int **v41;
  int *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  void *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _BYTE *v74;
  _QWORD *v75;
  char *v76;
  char *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  _OWORD *v83;
  char *v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  unint64_t v88;
  int *v89;
  int *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  BOOL v94;
  BOOL *v95;
  char **v96;
  unint64_t v97;
  BOOL *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  BOOL *v105;
  BOOL *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v111;
  uint64_t v112;
  int v113;
  int **v114;
  int *v115;
  uint64_t v117;
  unint64_t v118[2];
  uint64_t *v119;
  int v120;
  _QWORD *v121;

  v4 = a4;
  v6 = a2;
  v8 = (_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 40) == *(_QWORD *)(a1 + 48))
  {
    v9 = (int)((uint64_t)(*(_QWORD *)(a4 + 80) - *(_QWORD *)(a4 + 72)) >> 1) & 0xFFFFFFFFFFFFFFFELL;
    v12 = *(_QWORD *)(a1 + 88);
    v11 = *(_QWORD *)(a1 + 96);
    v10 = a1 + 88;
    v13 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v12) >> 3);
    if (v9 <= v13)
    {
      if (v9 < v13)
      {
        v15 = v12 + 24 * (int)v9;
        if (v11 != v15)
        {
          v16 = *(_QWORD *)(a1 + 96);
          do
          {
            v18 = *(void **)(v16 - 24);
            v16 -= 24;
            v17 = v18;
            if (v18)
            {
              *(_QWORD *)(v11 - 16) = v17;
              operator delete(v17);
            }
            v11 = v16;
          }
          while (v16 != v15);
        }
        *(_QWORD *)(a1 + 96) = v15;
        v4 = a4;
        v6 = a2;
      }
    }
    else
    {
      std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append(v10, v9 - v13);
    }
    *(_DWORD *)(a1 + 240) = *(_DWORD *)(a1 + 32);
    v19 = (int)((uint64_t)(*(_QWORD *)(v4 + 80) - *(_QWORD *)(v4 + 72)) >> 2);
    v20 = *(_QWORD *)(a1 + 272);
    v21 = (*(_QWORD *)(a1 + 280) - v20) >> 4;
    if (v19 <= v21)
    {
      if (v19 < v21)
        *(_QWORD *)(a1 + 280) = v20 + 16 * v19;
    }
    else
    {
      std::vector<absl::lts_2020_02_25::Span<operations_research::sat::Literal const>>::__append((char **)(a1 + 272), v19 - v21);
    }
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v4 + 12);
  }
  v22 = (_QWORD *)operator new();
  v114 = v6;
  operations_research::sat::UpperBoundedLinearConstraint::UpperBoundedLinearConstraint((uint64_t)v22, v6);
  v23 = 0;
  v121 = v22;
  v24 = *(_QWORD *)(a1 + 192);
  v25 = v22[13];
  v26 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v25)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + v25));
  v27 = (v26 >> 7) ^ (v24 >> 12);
  v28 = *(_QWORD *)(a1 + 216);
  v117 = a1;
  while (1)
  {
    v29 = v27 & v28;
    v30 = *(_QWORD *)(v24 + v29);
    v31 = ((v30 ^ (0x101010101010101 * (v26 & 0x7F))) - 0x101010101010101) & ~(v30 ^ (0x101010101010101
                                                                                        * (v26 & 0x7F))) & 0x8080808080808080;
    if (v31)
      break;
LABEL_21:
    if ((v30 & (~v30 << 6) & 0x8080808080808080) != 0)
    {
      v33 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<operations_research::sat::UpperBoundedLinearConstraint *>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<operations_research::sat::UpperBoundedLinearConstraint *>>>>::prepare_insert((uint64_t *)(a1 + 192), v26);
      v34 = (_QWORD *)(*(_QWORD *)(a1 + 200) + 32 * v33);
      *v34 = v25;
      v34[1] = 0;
      v34[2] = 0;
      v34[3] = 0;
      v32 = *(_QWORD *)(a1 + 200);
      goto LABEL_24;
    }
    v23 += 8;
    v27 = v23 + v29;
  }
  v32 = *(_QWORD *)(a1 + 200);
  while (1)
  {
    v33 = (v29 + (__clz(__rbit64(v31)) >> 3)) & v28;
    if (*(_QWORD *)(v32 + 32 * v33) == v25)
      break;
    v31 &= v31 - 1;
    if (!v31)
      goto LABEL_21;
  }
LABEL_24:
  v35 = v32 + 32 * v33;
  v38 = *(_QWORD **)(v35 + 8);
  v37 = (_QWORD *)(v35 + 8);
  v36 = v38;
  v40 = v37 + 1;
  v39 = (_QWORD *)v37[1];
  v41 = v114;
  if (v38 != v39)
  {
    v42 = v114[1];
    v43 = 0xAAAAAAAAAAAAAAABLL * (v42 - *v114);
    if (v42 == *v114)
    {
      v44 = (_QWORD *)*v36;
      if (v43 == (uint64_t)(*(_QWORD *)(*v36 + 80) - *(_QWORD *)(*v36 + 72)) >> 2)
      {
LABEL_39:
        if (v44[12] <= a3)
        {
          v64 = 1;
          v65 = (void *)v22[9];
          if (!v65)
          {
LABEL_50:
            v66 = (void *)v22[6];
            if (v66)
            {
              v22[7] = v66;
              operator delete(v66);
            }
            v67 = (void *)v22[3];
            if (v67)
            {
              v22[4] = v67;
              operator delete(v67);
            }
            MEMORY[0x22E31DF78](v22, 0x1030C40B4F52BC7);
            return v64;
          }
        }
        else
        {
          v51 = *(_QWORD *)(v117 + 40);
          v52 = *(_QWORD *)(v117 + 48) - v51;
          v53 = v52 >> 3;
          if ((int)(v52 >> 3) < 1)
          {
            v56 = 0;
LABEL_69:
            v120 = v56;
            v118[0] = v53;
            v119 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::PbConstraints::ConstraintIndex_tag_,int>,unsigned long>((int)&v120, (int)v118, "i < constraints_.size()");
            if (v119)
            {
              google::LogMessageFatal::LogMessageFatal(v118, (google::glog_internal_namespace_ *)"./ortools/sat/pb_constraint.cc", 854, &v119);
              google::LogMessage::stream((google::LogMessage *)v118);
              google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v118);
            }
            LODWORD(v54) = v120;
          }
          else
          {
            v54 = 0;
            v55 = ((unint64_t)v52 >> 3);
            while (*(_QWORD **)(v51 + 8 * v54) != v44)
            {
              if (v55 == ++v54)
              {
                v56 = v53;
                goto LABEL_69;
              }
            }
            v120 = v54;
          }
          v64 = operations_research::sat::UpperBoundedLinearConstraint::InitializeRhs((uint64_t)v44, a3, *(_DWORD *)(v117 + 36), (uint64_t *)(*(_QWORD *)(v117 + 64) + 8 * (int)v54), v4, v117 + 240);
          v65 = (void *)v22[9];
          if (!v65)
            goto LABEL_50;
        }
LABEL_49:
        v22[10] = v65;
        operator delete(v65);
        goto LABEL_50;
      }
      v45 = v36 + 1;
      while (v45 != v39)
      {
        v46 = (_QWORD *)*v45++;
        v44 = v46;
        if (v43 == (uint64_t)(v46[10] - v46[9]) >> 2)
          goto LABEL_39;
      }
    }
    else
    {
      do
      {
        v44 = (_QWORD *)*v36;
        v47 = *(_QWORD *)(*v36 + 72);
        if (v43 == (*(_QWORD *)(*v36 + 80) - v47) >> 2)
        {
          v48 = 0;
          v49 = 0;
          v50 = *v114;
          while (*(_DWORD *)(v47 + 4 * v48) == *v50 && *(_QWORD *)(v44[3] + 8 * v49) == *(_QWORD *)(v50 + 1))
          {
            if (++v48 == *(_DWORD *)(v44[6] + 4 * (v49 + 1)))
              ++v49;
            v50 += 3;
            if (v50 == v42)
              goto LABEL_39;
          }
        }
        ++v36;
      }
      while (v36 != v39);
    }
  }
  v57 = v117;
  v118[0] = 0;
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>,std::allocator<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>>::push_back(v117 + 64, v118);
  if ((operations_research::sat::UpperBoundedLinearConstraint::InitializeRhs((uint64_t)v22, a3, *(_DWORD *)(v57 + 36), (uint64_t *)(*(_QWORD *)(v57 + 72) - 8), v4, v57 + 240) & 1) == 0)
  {
    v64 = 0;
    *(_QWORD *)(v117 + 72) -= 8;
    v65 = (void *)v22[9];
    if (!v65)
      goto LABEL_50;
    goto LABEL_49;
  }
  v111 = *(_QWORD *)(v117 + 40);
  v112 = *(_QWORD *)(v117 + 48);
  v58 = (char *)*v40;
  v59 = v32 + 32 * v33;
  v62 = *(_QWORD *)(v59 + 24);
  v61 = (_QWORD *)(v59 + 24);
  v60 = v62;
  if (*v40 >= v62)
  {
    v68 = (char *)*v37;
    v69 = (uint64_t)&v58[-*v37];
    v70 = v69 >> 3;
    v71 = (v69 >> 3) + 1;
    if (v71 >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v72 = v60 - (_QWORD)v68;
    if (v72 >> 2 > v71)
      v71 = v72 >> 2;
    if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8)
      v73 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v73 = v71;
    if (v73)
    {
      if (v73 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v74 = operator new(8 * v73);
      v75 = &v74[8 * v70];
      v76 = &v74[8 * v73];
      *v75 = v22;
      v63 = (uint64_t)(v75 + 1);
      v77 = (char *)(v58 - v68);
      if (v58 != v68)
      {
LABEL_66:
        v78 = (unint64_t)(v77 - 8);
        if (v78 >= 0x58)
        {
          v79 = v58 - v74 - v69;
          v4 = a4;
          if (v79 >= 0x20)
          {
            v80 = (v78 >> 3) + 1;
            v81 = 8 * (v80 & 0x3FFFFFFFFFFFFFFCLL);
            v82 = &v58[-v81];
            v75 = (_QWORD *)((char *)v75 - v81);
            v83 = &v74[8 * v70 - 16];
            v84 = v58 - 16;
            v85 = v80 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v86 = *(_OWORD *)v84;
              *(v83 - 1) = *((_OWORD *)v84 - 1);
              *v83 = v86;
              v83 -= 2;
              v84 -= 32;
              v85 -= 4;
            }
            while (v85);
            v58 = v82;
            if (v80 == (v80 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_81;
          }
        }
        else
        {
          v4 = a4;
        }
        do
        {
          v87 = *((_QWORD *)v58 - 1);
          v58 -= 8;
          *--v75 = v87;
        }
        while (v58 != v68);
LABEL_81:
        v58 = (char *)*v37;
LABEL_82:
        *v37 = v75;
        *v40 = v63;
        *v61 = v76;
        v57 = v117;
        v41 = v114;
        if (v58)
          operator delete(v58);
        goto LABEL_84;
      }
    }
    else
    {
      v74 = 0;
      v75 = (_QWORD *)(8 * v70);
      v76 = 0;
      *(_QWORD *)(8 * v70) = v22;
      v63 = 8 * v70 + 8;
      v77 = (char *)(v58 - v68);
      if (v58 != v68)
        goto LABEL_66;
    }
    v4 = a4;
    goto LABEL_82;
  }
  *(_QWORD *)v58 = v22;
  v63 = (uint64_t)(v58 + 8);
LABEL_84:
  *v40 = v63;
  v88 = (unint64_t)v121;
  v121 = 0;
  v118[0] = v88;
  std::vector<std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>>::emplace_back<operations_research::sat::UpperBoundedLinearConstraint*>(v8, v118);
  v90 = *v41;
  v89 = v41[1];
  if (*v41 != v89)
  {
    v91 = (unint64_t)(v112 - v111) >> 3;
    v113 = v91;
    v115 = v41[1];
    do
    {
      while (1)
      {
        v92 = *(_QWORD *)(v90 + 1);
        v93 = (_QWORD *)(*(_QWORD *)(v57 + 88) + 24 * *v90);
        v94 = ((*(_QWORD *)(*(_QWORD *)(v4 + 24) + (((unint64_t)(2 * (*v90 >> 1)) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (*v90 & 0x3E)) & 3) != 0;
        v96 = (char **)(v93 + 1);
        v95 = (BOOL *)v93[1];
        v97 = v93[2];
        if ((unint64_t)v95 >= v97)
          break;
        *v95 = v94;
        *(_DWORD *)(v95 + 1) = v91;
        *(_QWORD *)(v95 + 5) = v92;
        *v96 = (char *)(v95 + 13);
        v90 += 3;
        v57 = v117;
        if (v90 == v89)
          return 1;
      }
      v98 = (BOOL *)*v93;
      v91 = 0x4EC4EC4EC4EC4EC5 * (_QWORD)&v95[-*v93];
      v99 = v91 + 1;
      if ((unint64_t)(v91 + 1) > 0x13B13B13B13B13B1)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v100 = 0x4EC4EC4EC4EC4EC5 * (v97 - (_QWORD)v98);
      if (2 * v100 > v99)
        v99 = 2 * v100;
      if (v100 >= 0x9D89D89D89D89D8)
        v101 = 0x13B13B13B13B13B1;
      else
        v101 = v99;
      if (v101)
      {
        if (v101 > 0x13B13B13B13B13B1)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v102 = *(_QWORD *)(v90 + 1);
        v103 = v101;
        v104 = (char *)operator new(13 * v101);
        v92 = v102;
        v101 = v103;
      }
      else
      {
        v104 = 0;
      }
      v105 = (BOOL *)&v104[13 * v91];
      *v105 = v94;
      LODWORD(v91) = v113;
      *(_DWORD *)(v105 + 1) = v113;
      *(_QWORD *)(v105 + 5) = v92;
      v106 = v105;
      if (v95 != v98)
      {
        do
        {
          v107 = *(_QWORD *)(v95 - 13);
          v95 -= 13;
          v108 = *(_QWORD *)(v95 + 5);
          *(_QWORD *)(v106 - 13) = v107;
          v106 -= 13;
          *(_QWORD *)(v106 + 5) = v108;
        }
        while (v95 != v98);
        v95 = (BOOL *)*v93;
      }
      *v93 = v106;
      v109 = (char *)(v105 + 13);
      *v96 = (char *)(v105 + 13);
      v93[2] = &v104[13 * v101];
      v4 = a4;
      if (v95)
        operator delete(v95);
      v89 = v115;
      *v96 = v109;
      v90 += 3;
      v57 = v117;
    }
    while (v90 != v115);
  }
  return 1;
}

void sub_22DBB0898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBB08A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22DBB08B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22DBB08C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22DBB08DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22DBB08F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22DBB0904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22DBB0918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22DBB092C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22DBB0940(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x1030C40B4F52BC7);
  _Unwind_Resume(a1);
}

void sub_22DBB0964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22DBB0978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>>::emplace_back<operations_research::sat::UpperBoundedLinearConstraint*>(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  int64x2_t v26;
  uint64_t v28;
  int64x2_t v29;
  char *v30;
  _QWORD *v31;

  v4 = a1[2];
  v5 = (char *)a1[1];
  v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    v8 = (char *)*a1;
    v9 = (uint64_t)&v5[-*a1];
    v10 = v9 >> 3;
    v11 = (v9 >> 3) + 1;
    if (v11 >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    if ((uint64_t)(v4 - (_QWORD)v8) >> 2 > v11)
      v11 = (uint64_t)(v4 - (_QWORD)v8) >> 2;
    if (v4 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v31 = a1 + 2;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = (char *)operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v10];
    *(_QWORD *)v14 = *a2;
    v15 = &v13[8 * v12];
    v29.i64[1] = (uint64_t)(v14 + 8);
    v30 = v15;
    v16 = (char *)(v5 - v8);
    if (v5 == v8)
    {
      v26 = vdupq_n_s64((unint64_t)v5);
      v7 = v14 + 8;
    }
    else
    {
      v17 = v16 - 8;
      if ((unint64_t)(v16 - 8) < 0x78
        || &v5[-((unint64_t)v17 & 0xFFFFFFFFFFFFFFF8) - 8] < v14
        && &v13[v9 - ((unint64_t)v17 & 0xFFFFFFFFFFFFFFF8) - 8] < v5)
      {
        goto LABEL_29;
      }
      v18 = ((unint64_t)v17 >> 3) + 1;
      v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      v14 -= v19;
      v6 = &v5[-v19];
      v20 = v5 - 16;
      v21 = &v13[8 * v10 - 16];
      v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *((_OWORD *)v20 - 1);
        v23 = *(_OWORD *)v20;
        *((_OWORD *)v20 - 1) = 0uLL;
        *(_OWORD *)v20 = 0uLL;
        *((_OWORD *)v21 - 1) = v24;
        *(_OWORD *)v21 = v23;
        v20 -= 32;
        v21 -= 32;
        v22 -= 4;
      }
      while (v22);
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        do
        {
          v25 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *(_QWORD *)v6 = 0;
          *((_QWORD *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v8);
      }
      v26 = *(int64x2_t *)a1;
      v4 = a1[2];
      v7 = (_QWORD *)v29.i64[1];
      v15 = v30;
    }
    *a1 = v14;
    a1[1] = v7;
    v29 = v26;
    a1[2] = v15;
    v30 = (char *)v4;
    v28 = v26.i64[0];
    std::__split_buffer<std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>>::~__split_buffer((uint64_t)&v28);
  }
  else
  {
    *(_QWORD *)v5 = *a2;
    v7 = v5 + 8;
  }
  a1[1] = v7;
  return v7 - 1;
}

_QWORD *std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>::~unique_ptr[abi:ne180100](_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (_QWORD *)*a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (void *)v2[9];
    if (v3)
    {
      v2[10] = v3;
      operator delete(v3);
    }
    v4 = (void *)v2[6];
    if (v4)
    {
      v2[7] = v4;
      operator delete(v4);
    }
    v5 = (void *)v2[3];
    if (v5)
    {
      v2[4] = v5;
      operator delete(v5);
    }
    MEMORY[0x22E31DF78](v2, 0x1030C40B4F52BC7);
  }
  return a1;
}

uint64_t operations_research::sat::PbConstraints::AddLearnedConstraint(operations_research::sat::PbConstraints *a1, int **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  operations_research::sat::PbConstraints::DeleteSomeLearnedConstraintIfNeeded(a1);
  v9 = *((_QWORD *)a1 + 5);
  v8 = *((_QWORD *)a1 + 6);
  result = operations_research::sat::PbConstraints::AddConstraint((uint64_t)a1, a2, a3, a4);
  if ((_DWORD)result)
  {
    v11 = *((_QWORD *)a1 + 6);
    if ((v11 - *((_QWORD *)a1 + 5)) >> 3 > (unint64_t)(int)((unint64_t)(v8 - v9) >> 3))
      *(_BYTE *)(*(_QWORD *)(v11 - 8) + 1) = 1;
  }
  return result;
}

void operations_research::sat::PbConstraints::DeleteSomeLearnedConstraintIfNeeded(operations_research::sat::PbConstraints *this)
{
  operations_research::sat::PbConstraints *v1;
  int v2;
  BOOL v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _QWORD *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  void *v32;
  double v33;
  int v34;
  double *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  double v40;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v50[2];
  uint64_t *v51;
  _QWORD *v52;
  uint64_t v53;
  char *v54;
  int v55;

  v1 = this;
  v2 = *((_DWORD *)this + 76);
  if (!v2)
  {
    v28 = (*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 3;
    v29 = *((_QWORD *)this + 40);
    v30 = *(_DWORD *)(v29 + 308) + v28;
    *((_DWORD *)this + 75) = v30;
    *((_DWORD *)this + 76) = (int)((double)v30 / *(double *)(v29 + 312)) - v28;
    return;
  }
  v3 = __OFSUB__(v2, 1);
  v4 = v2 - 1;
  *((_DWORD *)this + 76) = v4;
  if ((v4 < 0) ^ v3 | (v4 == 0))
  {
    v52 = 0;
    v53 = 0;
    v54 = 0;
    v6 = *((_QWORD *)this + 5);
    v5 = *((_QWORD *)this + 6);
    if (v5 == v6)
    {
LABEL_38:
      std::__sort<std::__less<double,double> &,double *>();
      v31 = ((*((_QWORD *)v1 + 6) - *((_QWORD *)v1 + 5)) >> 3) - *((_DWORD *)v1 + 75);
      LODWORD(v50[0]) = v31;
      v55 = 0;
      if (v31 < 1)
      {
        v51 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v50, (int)&v55, "num_constraints_to_delete > 0");
        if (v51)
        {
          google::LogMessageFatal::LogMessageFatal(v50, (google::glog_internal_namespace_ *)"./ortools/sat/pb_constraint.cc", 1021, &v51);
          google::LogMessage::stream((google::LogMessage *)v50);
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v50);
        }
      }
      v32 = v52;
      if (v31 >= (unint64_t)((v53 - (uint64_t)v52) >> 3))
      {
        v42 = (uint64_t *)*((_QWORD *)v1 + 5);
        v43 = *((_QWORD *)v1 + 6) - (_QWORD)v42;
        if (v43)
        {
          v44 = v43 >> 3;
          if (v44 <= 1)
            v44 = 1;
          do
          {
            v45 = *v42;
            if (*(_BYTE *)(*v42 + 1) && *(_DWORD *)(v45 + 4) == -1)
              *(_BYTE *)v45 = 1;
            ++v42;
            --v44;
          }
          while (v44);
        }
      }
      else
      {
        v33 = *(double *)&v52[v31];
        v34 = 0;
        if ((v31 & 0x80000000) == 0)
        {
          v35 = (double *)&v52[v31];
          while (*v35 == v33)
          {
            ++v34;
            --v35;
            if (v31 + 1 == v34)
            {
              v34 = v31 + 1;
              break;
            }
          }
        }
        v36 = *((_QWORD *)v1 + 5);
        v37 = (unint64_t)(*((_QWORD *)v1 + 6) - v36) >> 3;
        if ((int)v37 - 1 >= 0)
        {
          v38 = (uint64_t *)(v36 + 8 * (v37 - 1));
          do
          {
            v39 = *v38;
            if (*(_BYTE *)(*v38 + 1))
            {
              if (*(_DWORD *)(v39 + 4) == -1)
              {
                v40 = *(double *)(v39 + 8);
                if (v40 <= v33)
                {
                  if (v40 != v33 || v34 < 1)
                    *(_BYTE *)v39 = 1;
                  else
                    --v34;
                }
              }
            }
            --v38;
            LODWORD(v37) = v37 - 1;
          }
          while ((_DWORD)v37);
        }
      }
      operations_research::sat::PbConstraints::DeleteConstraintMarkedForDeletion(v1);
      v46 = (*((_QWORD *)v1 + 6) - *((_QWORD *)v1 + 5)) >> 3;
      v47 = *((_QWORD *)v1 + 40);
      v48 = *(_DWORD *)(v47 + 308) + v46;
      *((_DWORD *)v1 + 75) = v48;
      *((_DWORD *)v1 + 76) = (int)((double)v48 / *(double *)(v47 + 312)) - v46;
      if (v32)
        operator delete(v32);
      return;
    }
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v12 = *(_QWORD *)(v6 + 8 * v8);
      if (!*(_BYTE *)(v12 + 1) || *(_DWORD *)(v12 + 4) != -1)
        goto LABEL_8;
      v13 = *(_QWORD *)(v12 + 8);
      if (v7 >= v9)
        break;
      *(_QWORD *)v7 = v13;
      v11 = (uint64_t)(v7 + 8);
LABEL_7:
      v53 = v11;
      v7 = (char *)v11;
LABEL_8:
      if (++v8 >= (unint64_t)((v5 - v6) >> 3))
        goto LABEL_38;
    }
    v14 = (v7 - v10) >> 3;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    if ((v9 - v10) >> 2 > v15)
      v15 = (v9 - v10) >> 2;
    if ((unint64_t)(v9 - v10) >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
    {
      if (v16 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v17 = operator new(8 * v16);
      v18 = &v17[8 * v14];
      *v18 = v13;
      v11 = (uint64_t)(v18 + 1);
      if (v7 != v10)
      {
LABEL_21:
        v19 = v7 - 8 - v10;
        if (v19 < 0x168
          || &v17[v7 - v10 - 8 - (v19 & 0xFFFFFFFFFFFFFFF8)] > &v17[v7 - v10 - 8]
          || &v7[-(v19 & 0xFFFFFFFFFFFFFFF8) - 8] > v7 - 8
          || (unint64_t)(v10 - v17) < 0x20)
        {
          v20 = v7;
          v1 = this;
        }
        else
        {
          v22 = (v19 >> 3) + 1;
          v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
          v20 = &v7[-v23];
          v18 = (_QWORD *)((char *)v18 - v23);
          v24 = &v17[8 * v14 - 16];
          v25 = v7 - 16;
          v26 = v22 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v27 = *(_OWORD *)v25;
            *(v24 - 1) = *((_OWORD *)v25 - 1);
            *v24 = v27;
            v24 -= 2;
            v25 -= 32;
            v26 -= 4;
          }
          while (v26);
          v1 = this;
          if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_24:
            v9 = &v17[8 * v16];
            v52 = v18;
            v54 = v9;
            if (!v10)
            {
LABEL_26:
              v10 = (char *)v18;
              goto LABEL_7;
            }
LABEL_25:
            operator delete(v10);
            v6 = *((_QWORD *)v1 + 5);
            v5 = *((_QWORD *)v1 + 6);
            goto LABEL_26;
          }
        }
        do
        {
          v21 = *((_QWORD *)v20 - 1);
          v20 -= 8;
          *--v18 = v21;
        }
        while (v20 != v10);
        goto LABEL_24;
      }
    }
    else
    {
      v17 = 0;
      v18 = (_QWORD *)(8 * v14);
      *(_QWORD *)(8 * v14) = v13;
      v11 = 8 * v14 + 8;
      if (v7 != v10)
        goto LABEL_21;
    }
    v1 = this;
    v9 = &v17[8 * v16];
    v52 = v18;
    v54 = v9;
    if (!v10)
      goto LABEL_26;
    goto LABEL_25;
  }
}

void sub_22DBB1080(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBB1088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL operations_research::sat::PbConstraints::PropagateNext(operations_research::sat::PbConstraints *this, operations_research::sat::Trail *a2)
{
  uint64_t v2;
  int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  v2 = *((int *)this + 9);
  v3 = *(_DWORD *)(*((_QWORD *)a2 + 9) + 4 * v2);
  *((_DWORD *)this + 9) = v2 + 1;
  v4 = (uint64_t *)(*((_QWORD *)this + 11) + 24 * v3);
  v6 = *v4;
  v5 = v4[1];
  *((_QWORD *)this + 53) += 0x4EC4EC4EC4EC4EC5 * (v5 - *v4);
  if (v5 == v6)
  {
    v9 = 0;
  }
  else
  {
    v9 = 0;
    v10 = (char *)this + 240;
    do
    {
      v11 = *(int *)(v6 + 1);
      v12 = (uint64_t *)(*((_QWORD *)this + 8) + 8 * v11);
      v13 = *(_QWORD *)(v6 + 5);
      v14 = *v12 - v13 < 0;
      *v12 -= v13;
      if (v14 && (v9 & 1) == 0)
      {
        v15 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v11);
        *(_BYTE *)v6 = 1;
        ++*((_QWORD *)this + 51);
        v16 = *(int *)(v15 + 20);
        v17 = operations_research::sat::UpperBoundedLinearConstraint::Propagate(v15, v2, v12, (uint64_t)a2, (uint64_t)v10);
        if ((v17 & 1) == 0)
        {
          *((_QWORD *)a2 + 18) = 0;
          v18 = *((_QWORD *)a2 + 12);
          *((_QWORD *)a2 + 12) = *((_QWORD *)this + 31);
          *((_QWORD *)this + 31) = v18;
          v19 = *((_QWORD *)a2 + 13);
          *((_QWORD *)a2 + 13) = *((_QWORD *)this + 32);
          *((_QWORD *)this + 32) = v19;
          v20 = *((_QWORD *)a2 + 14);
          *((_QWORD *)a2 + 14) = *((_QWORD *)this + 33);
          *((_QWORD *)this + 33) = v20;
          *((_DWORD *)this + 74) = *(_DWORD *)(v6 + 1);
          v21 = (uint64_t *)*((_QWORD *)this + 5);
          v22 = v21[*(int *)(v6 + 1)];
          if (*(_BYTE *)(v22 + 1))
          {
            v23 = *(double *)(*((_QWORD *)this + 40) + 240);
            v24 = *((double *)this + 39);
            v25 = *(double *)(v22 + 8) + v24;
            *(double *)(v22 + 8) = v25;
            if (v25 > v23)
            {
              v26 = 1.0 / v23;
              *((double *)this + 39) = v26 * v24;
              v27 = *((_QWORD *)this + 6) - (_QWORD)v21;
              if (v27)
              {
                v28 = v27 >> 3;
                if (v28 <= 1)
                  v28 = 1;
                do
                {
                  v29 = *v21++;
                  *(double *)(v29 + 8) = v26 * *(double *)(v29 + 8);
                  --v28;
                }
                while (v28);
              }
            }
          }
        }
        v9 = v17 ^ 1;
        *((_QWORD *)this + 52) += v16 - *(int *)(v15 + 20);
      }
      v6 += 13;
    }
    while (v6 != v5);
  }
  return (v9 & 1) == 0;
}

uint64_t operations_research::sat::PbConstraints::BumpActivity(uint64_t result, uint64_t a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (*(_BYTE *)(a2 + 1))
  {
    v2 = *(double *)(*(_QWORD *)(result + 320) + 240);
    v3 = *(double *)(result + 312);
    v4 = *(double *)(a2 + 8) + v3;
    *(double *)(a2 + 8) = v4;
    if (v4 > v2)
    {
      v5 = 1.0 / v2;
      *(double *)(result + 312) = v5 * v3;
      v6 = *(uint64_t **)(result + 40);
      v7 = *(_QWORD *)(result + 48) - (_QWORD)v6;
      if (v7)
      {
        v8 = v7 >> 3;
        if (v8 <= 1)
          v8 = 1;
        do
        {
          v9 = *v6++;
          *(double *)(v9 + 8) = v5 * *(double *)(v9 + 8);
          --v8;
        }
        while (v8);
      }
    }
  }
  return result;
}

uint64_t operations_research::sat::PbConstraints::Propagate(operations_research::sat::PbConstraints *this, operations_research::sat::Trail *a2)
{
  int v4;

  v4 = *((_DWORD *)a2 + 3);
  while (*((_DWORD *)a2 + 3) == v4 && *((_DWORD *)this + 9) < v4)
  {
    if (!operations_research::sat::PbConstraints::PropagateNext(this, a2))
      return 0;
  }
  return 1;
}

void operations_research::sat::PbConstraints::Untrail(operations_research::sat::PbConstraints *this, const operations_research::sat::Trail *a2, int a3)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _DWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  int v32;
  int *v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  void **v50;

  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize((uint64_t)this + 112, (*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 3);
  v5 = *((_DWORD *)this + 9);
  if (v5 > a3)
  {
    v50 = (void **)((char *)this + 168);
    v48 = a3;
    while (1)
    {
      *((_DWORD *)this + 9) = --v5;
      v6 = (uint64_t *)(*((_QWORD *)this + 11) + 24 * *(int *)(*((_QWORD *)a2 + 9) + 4 * v5));
      v8 = *v6;
      v7 = v6[1];
      if (*v6 != v7)
        break;
LABEL_4:
      if (v5 <= a3)
        goto LABEL_33;
    }
    while (1)
    {
      v10 = *(_DWORD *)(v8 + 1);
      *(_QWORD *)(*((_QWORD *)this + 8) + 8 * v10) += *(_QWORD *)(v8 + 5);
      if (!*(_BYTE *)v8)
        goto LABEL_9;
      *(_BYTE *)v8 = 0;
      v11 = (unint64_t)v10 >> 6;
      v12 = *((_QWORD *)this + 15);
      v13 = *(_QWORD *)(v12 + 8 * v11);
      if ((v13 & (1 << v10)) != 0)
        goto LABEL_9;
      *(_QWORD *)(v12 + 8 * v11) = v13 | (1 << v10);
      v15 = (char *)*((_QWORD *)this + 22);
      v14 = *((_QWORD *)this + 23);
      if ((unint64_t)v15 >= v14)
        break;
      *(_DWORD *)v15 = v10;
      v9 = (uint64_t)(v15 + 4);
LABEL_8:
      *((_QWORD *)this + 22) = v9;
LABEL_9:
      v8 += 13;
      if (v8 == v7)
      {
        v5 = *((_DWORD *)this + 9);
        a3 = v48;
        goto LABEL_4;
      }
    }
    v16 = (char *)*v50;
    v17 = v15 - (_BYTE *)*v50;
    v18 = v17 >> 2;
    v19 = (v17 >> 2) + 1;
    if (v19 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v20 = v14 - (_QWORD)v16;
    if (v20 >> 1 > v19)
      v19 = v20 >> 1;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
      v21 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v22 = operator new(4 * v21);
      v23 = &v22[4 * v18];
      *v23 = v10;
      v9 = (uint64_t)(v23 + 1);
      if (v15 == v16)
        goto LABEL_30;
    }
    else
    {
      v22 = 0;
      v23 = (_DWORD *)(4 * v18);
      *(_DWORD *)(4 * v18) = v10;
      v9 = 4 * v18 + 4;
      if (v15 == v16)
      {
LABEL_30:
        *((_QWORD *)this + 21) = v23;
        *((_QWORD *)this + 22) = v9;
        *((_QWORD *)this + 23) = &v22[4 * v21];
        if (v16)
          operator delete(v16);
        goto LABEL_8;
      }
    }
    v24 = v15 - 4 - v16;
    if (v24 < 0x2C)
      goto LABEL_55;
    if ((unint64_t)(v15 - &v22[v17]) < 0x20)
      goto LABEL_55;
    v25 = (v24 >> 2) + 1;
    v26 = 4 * (v25 & 0x7FFFFFFFFFFFFFF8);
    v27 = &v15[-v26];
    v23 = (_DWORD *)((char *)v23 - v26);
    v28 = &v22[4 * v18 - 16];
    v29 = v15 - 16;
    v30 = v25 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v31 = *(_OWORD *)v29;
      *(v28 - 1) = *((_OWORD *)v29 - 1);
      *v28 = v31;
      v28 -= 2;
      v29 -= 32;
      v30 -= 8;
    }
    while (v30);
    v15 = v27;
    if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_55:
      do
      {
        v32 = *((_DWORD *)v15 - 1);
        v15 -= 4;
        *--v23 = v32;
      }
      while (v15 != v16);
    }
    goto LABEL_30;
  }
LABEL_33:
  v33 = (int *)*((_QWORD *)this + 21);
  v34 = (int *)*((_QWORD *)this + 22);
  if (v33 != v34)
  {
    v35 = *((_QWORD *)this + 5);
    v36 = *((_QWORD *)this + 8);
    do
    {
      v37 = *v33;
      v38 = *(_QWORD *)(v35 + 8 * v37);
      v39 = *(_QWORD *)(v36 + 8 * v37);
      v40 = *(unsigned int *)(v38 + 16);
      v41 = *(_QWORD *)(v38 + 24);
      if ((v40 & 0x80000000) == 0)
        v39 += *(_QWORD *)(v41 + 8 * v40);
      v42 = *(_QWORD *)(v38 + 32) - v41;
      v43 = v42 >> 3;
      v44 = (int)v40 + 1;
      if (v42 >> 3 > v44 && *(_QWORD *)(v41 + 8 * v44) <= v39)
      {
        v45 = ((unint64_t)v42 >> 3) - 1;
        while (v43 - 1 != v44)
        {
          v46 = v44 + 1;
          v47 = *(_QWORD *)(v41 + 8 + 8 * v44);
          LODWORD(v40) = v40 + 1;
          ++v44;
          if (v47 > v39)
            goto LABEL_45;
        }
        LODWORD(v40) = v45;
        v46 = v43;
LABEL_45:
        *(_DWORD *)(v38 + 16) = v40;
        v44 = v46;
      }
      if ((v40 & 0x80000000) == 0)
        v39 -= *(_QWORD *)(v41 + 8 * v40);
      *(_QWORD *)(v36 + 8 * v37) = v39;
      *(_DWORD *)(v38 + 20) = *(_DWORD *)(*(_QWORD *)(v38 + 48) + 4 * v44);
      if (*(_DWORD *)(v38 + 4) >= a3)
        *(_DWORD *)(v38 + 4) = -1;
      ++v33;
    }
    while (v33 != v34);
  }
}

char *operations_research::sat::PbConstraints::Reason(operations_research::sat::PbConstraints *this, const operations_research::sat::Trail *a2, int a3)
{
  uint64_t v5;
  char **EmptyVectorToStoreReason;

  v5 = *((_QWORD *)this + 34) + 16 * a3;
  EmptyVectorToStoreReason = (char **)operations_research::sat::Trail::GetEmptyVectorToStoreReason(a2, a3);
  operations_research::sat::UpperBoundedLinearConstraint::FillReason(*(_QWORD **)(v5 + 8), a2, *(_DWORD *)v5, *(int *)(*((_QWORD *)a2 + 9) + 4 * a3) >> 1, EmptyVectorToStoreReason);
  return *EmptyVectorToStoreReason;
}

uint64_t operations_research::sat::PbConstraints::ReasonPbConstraint(operations_research::sat::PbConstraints *this, int a2)
{
  return *(_QWORD *)(*((_QWORD *)this + 34) + 16 * a2 + 8);
}

void operations_research::sat::PbConstraints::DeleteConstraintMarkedForDeletion(operations_research::sat::PbConstraints *this)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char **v37;
  char **v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  char *v45;
  int v46;
  char *v47;
  uint64_t v48;
  BOOL v49;
  _QWORD *v50;
  _DWORD *v51;

  v4 = *((_QWORD *)this + 5);
  v2 = *((_QWORD *)this + 6);
  v3 = (char *)this + 40;
  v51 = 0;
  v5 = v2 - v4;
  if (v2 == v4)
  {
    v6 = 0;
    v50 = (_QWORD *)((char *)this + 40);
    if ((int)(v5 >> 3) >= 1)
      goto LABEL_4;
LABEL_34:
    v8 = 0;
    goto LABEL_35;
  }
  if ((v5 & 0x8000000000000000) != 0)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v6 = operator new(v5 >> 1);
  v51 = v6;
  memset(v6, 255, 4 * ((uint64_t)v5 >> 3));
  v50 = v3;
  if ((int)(v5 >> 3) < 1)
    goto LABEL_34;
LABEL_4:
  v7 = 0;
  v8 = 0;
  do
  {
    v9 = *(_QWORD *)(v4 + 8 * v7);
    if (*(_BYTE *)v9)
    {
      v10 = 0;
      v11 = *(_QWORD *)(v9 + 104);
      v12 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v11)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + v11));
      v13 = *((_QWORD *)this + 24);
      v14 = (v12 >> 7) ^ (v13 >> 12);
      v15 = *((_QWORD *)this + 27);
      while (1)
      {
        v16 = v14 & v15;
        v17 = *(_QWORD *)(v13 + v16);
        v18 = ((v17 ^ (0x101010101010101 * (v12 & 0x7F))) - 0x101010101010101) & ~(v17 ^ (0x101010101010101
                                                                                            * (v12 & 0x7F))) & 0x8080808080808080;
        if (v18)
          break;
LABEL_15:
        if ((v17 & (~v17 << 6) & 0x8080808080808080) != 0)
        {
          v20 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<operations_research::sat::UpperBoundedLinearConstraint *>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<operations_research::sat::UpperBoundedLinearConstraint *>>>>::prepare_insert((uint64_t *)this + 24, v12);
          v25 = (_QWORD *)(*((_QWORD *)this + 25) + 32 * v20);
          *v25 = v11;
          v25[1] = 0;
          v25[2] = 0;
          v25[3] = 0;
          v19 = *((_QWORD *)this + 25);
          goto LABEL_26;
        }
        v10 += 8;
        v14 = v10 + v16;
      }
      v19 = *((_QWORD *)this + 25);
      while (1)
      {
        v20 = (v16 + (__clz(__rbit64(v18)) >> 3)) & v15;
        if (*(_QWORD *)(v19 + 32 * v20) == v11)
          break;
        v18 &= v18 - 1;
        if (!v18)
          goto LABEL_15;
      }
LABEL_26:
      v26 = v19 + 32 * v20;
      v29 = *(char **)(v26 + 16);
      v27 = (_QWORD *)(v26 + 16);
      v28 = v29;
      v30 = (char *)*(v27 - 1);
      v31 = v29 - v30;
      if (v29 != v30)
      {
        v32 = v31 >> 3;
        if (v32 <= 1)
          v32 = 1;
        while (*(_QWORD *)v30 != v9)
        {
          v30 += 8;
          if (!--v32)
            goto LABEL_8;
        }
        *(_QWORD *)v30 = *((_QWORD *)v28 - 1);
        *((_QWORD *)v28 - 1) = v9;
        *v27 -= 8;
      }
    }
    else
    {
      v6[v7] = v8;
      if (v7 > v8)
      {
        *(_QWORD *)(v4 + 8 * v7) = 0;
        v21 = *(_QWORD **)(v4 + 8 * v8);
        *(_QWORD *)(v4 + 8 * v8) = v9;
        if (v21)
        {
          v22 = (void *)v21[9];
          if (v22)
          {
            v21[10] = v22;
            operator delete(v22);
          }
          v23 = (void *)v21[6];
          if (v23)
          {
            v21[7] = v23;
            operator delete(v23);
          }
          v24 = (void *)v21[3];
          if (v24)
          {
            v21[4] = v24;
            operator delete(v24);
          }
          MEMORY[0x22E31DF78](v21, 0x1030C40B4F52BC7);
        }
        *(_QWORD *)(*((_QWORD *)this + 8) + 8 * v8) = *(_QWORD *)(*((_QWORD *)this + 8) + 8 * v7);
      }
      ++v8;
    }
LABEL_8:
    ++v7;
    v4 = *((_QWORD *)this + 5);
  }
  while (v7 < (int)((unint64_t)(*((_QWORD *)this + 6) - v4) >> 3));
LABEL_35:
  std::vector<std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>>::resize(v50, v8);
  v33 = *((_QWORD *)this + 8);
  v34 = (*((_QWORD *)this + 9) - v33) >> 3;
  if (v8 <= v34)
  {
    if (v8 < v34)
      *((_QWORD *)this + 9) = v33 + 8 * v8;
  }
  else
  {
    std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::__append((uint64_t)this + 64, v8 - v34);
  }
  v35 = *((_QWORD *)this + 11);
  if ((int)(-1431655765 * ((unint64_t)(*((_QWORD *)this + 12) - v35) >> 3)) >= 1)
  {
    v36 = 0;
    while (1)
    {
      v37 = (char **)(v35 + 24 * v36);
      v38 = v37 + 1;
      v39 = v37[1];
      v40 = *v37;
      if (v39 == *v37)
        break;
      v41 = 0;
      v42 = 0;
      v43 = 0;
      do
      {
        v45 = &v40[v41];
        v46 = v51[*(int *)&v40[v41 + 1]];
        if (v46 != -1)
        {
          v47 = &v40[13 * v43];
          v48 = *(_QWORD *)v45;
          *(_QWORD *)(v47 + 5) = *(_QWORD *)(v45 + 5);
          *(_QWORD *)v47 = v48;
          v40 = *v37;
          *(_DWORD *)&(*v37)[13 * v43++ + 1] = v46;
          v39 = *v38;
        }
        ++v42;
        v44 = 0x4EC4EC4EC4EC4EC5 * (v39 - v40);
        v41 += 13;
      }
      while (v44 > v42);
      v39 = v40;
      v49 = v43 >= v44;
      if (v43 <= v44)
        goto LABEL_51;
      std::vector<operations_research::sat::PbConstraints::ConstraintIndexWithCoeff>::__append((void **)v37, v43 - v44);
LABEL_42:
      ++v36;
      v35 = *((_QWORD *)this + 11);
      if (v36 >= (int)(-1431655765 * ((unint64_t)(*((_QWORD *)this + 12) - v35) >> 3)))
      {
        v6 = v51;
        goto LABEL_54;
      }
    }
    v43 = 0;
    v49 = 0x4EC4EC4EC4EC4EC5 * (v39 - *v37) == 0;
LABEL_51:
    if (!v49)
      *v38 = &v39[13 * v43];
    goto LABEL_42;
  }
LABEL_54:
  if (v6)
    operator delete(v6);
}

void sub_22DBB1B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  if (v12)
    operator delete(v12);
  _Unwind_Resume(exception_object);
}

double operations_research::sat::PbConstraints::UpdateActivityIncrement(operations_research::sat::PbConstraints *this)
{
  double result;

  result = *((double *)this + 39) * (1.0 / *(double *)(*((_QWORD *)this + 40) + 232));
  *((double *)this + 39) = result;
  return result;
}

void std::vector<std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>>::resize(_QWORD *a1, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  void *v12;

  v3 = (_QWORD *)a1[1];
  v4 = ((uint64_t)v3 - *a1) >> 3;
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 8 * a2;
    while (v3 != (_QWORD *)v7)
    {
      v9 = (_QWORD *)*--v3;
      v8 = v9;
      *v3 = 0;
      if (v9)
      {
        v10 = (void *)v8[9];
        if (v10)
        {
          v8[10] = v10;
          operator delete(v10);
        }
        v11 = (void *)v8[6];
        if (v11)
        {
          v8[7] = v11;
          operator delete(v11);
        }
        v12 = (void *)v8[3];
        if (v12)
        {
          v8[4] = v12;
          operator delete(v12);
        }
        MEMORY[0x22E31DF78](v8, 0x1030C40B4F52BC7);
      }
    }
    a1[1] = v7;
  }
}

void operations_research::sat::PbConstraints::~PbConstraints(operations_research::sat::PbConstraints *this)
{
  operations_research::sat::PbConstraints::~PbConstraints(this);
  JUMPOUT(0x22E31DF78);
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void **v20;

  *(_QWORD *)this = &off_24F987760;
  operations_research::StatsGroup::~StatsGroup((operations_research::sat::PbConstraints *)((char *)this + 328));
  v2 = (void *)*((_QWORD *)this + 34);
  if (v2)
  {
    *((_QWORD *)this + 35) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 31);
  if (v3)
  {
    *((_QWORD *)this + 32) = v3;
    operator delete(v3);
  }
  v4 = *((_QWORD *)this + 27);
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = (_QWORD *)((char *)this + 200);
    do
    {
      if ((*(char *)(*((_QWORD *)this + 24) + v6) & 0x80000000) == 0)
      {
        v8 = *v7 + v5;
        v9 = *(void **)(v8 + 8);
        if (v9)
        {
          *(_QWORD *)(v8 + 16) = v9;
          operator delete(v9);
          v4 = *((_QWORD *)this + 27);
        }
      }
      ++v6;
      v5 += 32;
    }
    while (v6 != v4);
    operator delete(*((void **)this + 24));
    *((_QWORD *)this + 24) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *((_QWORD *)this + 29) = 0;
    *((_QWORD *)this + 26) = 0;
    *((_QWORD *)this + 27) = 0;
    *v7 = 0;
  }
  v10 = (_QWORD *)*((_QWORD *)this + 28);
  if (v10)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v10);
  v11 = (void *)*((_QWORD *)this + 21);
  if (v11)
  {
    *((_QWORD *)this + 22) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 15);
  if (v12)
  {
    *((_QWORD *)this + 16) = v12;
    operator delete(v12);
  }
  v13 = *((_QWORD *)this + 11);
  if (v13)
  {
    v14 = *((_QWORD *)this + 12);
    v15 = (void *)*((_QWORD *)this + 11);
    if (v14 != v13)
    {
      v16 = *((_QWORD *)this + 12);
      do
      {
        v18 = *(void **)(v16 - 24);
        v16 -= 24;
        v17 = v18;
        if (v18)
        {
          *(_QWORD *)(v14 - 16) = v17;
          operator delete(v17);
        }
        v14 = v16;
      }
      while (v16 != v13);
      v15 = (void *)*((_QWORD *)this + 11);
    }
    *((_QWORD *)this + 12) = v13;
    operator delete(v15);
  }
  v19 = (void *)*((_QWORD *)this + 8);
  if (v19)
  {
    *((_QWORD *)this + 9) = v19;
    operator delete(v19);
  }
  v20 = (void **)((char *)this + 40);
  std::vector<std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>>::__destroy_vector::operator()[abi:ne180100](&v20);
  *(_QWORD *)this = off_24F980668;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

void std::vector<std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 == v2)
    {
      v1[1] = v2;
      operator delete(v5);
    }
    else
    {
      do
      {
        v7 = (_QWORD *)*--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
        {
          v8 = (void *)v6[9];
          if (v8)
          {
            v6[10] = v8;
            operator delete(v8);
          }
          v9 = (void *)v6[6];
          if (v9)
          {
            v6[7] = v9;
            operator delete(v9);
          }
          v10 = (void *)v6[3];
          if (v10)
          {
            v6[4] = v10;
            operator delete(v10);
          }
          MEMORY[0x22E31DF78](v6, 0x1030C40B4F52BC7);
        }
      }
      while (v4 != v2);
      v11 = **a1;
      v1[1] = v2;
      operator delete(v11);
    }
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(operations_research::sat::LiteralWithCoeff const&,operations_research::sat::LiteralWithCoeff const&),operations_research::sat::LiteralWithCoeff*,false>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t (*v15)(uint64_t *, uint64_t *);
  char v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  char v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  char v69;
  int v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t *v103;
  unint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  BOOL v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t v130;
  int v131;
  int v132;
  int v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t *v137;
  BOOL v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  int v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  uint64_t *v159;
  uint64_t *v160;
  uint64_t v162;
  int v163;
  uint64_t v164;
  int v165;

  v8 = result;
LABEL_2:
  v9 = (uint64_t *)((char *)a2 - 12);
  v159 = (uint64_t *)((char *)a2 - 36);
  v160 = a2 - 3;
  v10 = v8;
  while (2)
  {
    v8 = v10;
    v11 = (uint64_t)a2 - v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v10) >> 2);
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*a3)((uint64_t *)((char *)a2 - 12), (uint64_t *)v10);
        if ((_DWORD)result)
          goto LABEL_102;
        return result;
      case 3uLL:
        v122 = v10 + 12;
        v123 = (*a3)((uint64_t *)(v10 + 12), (uint64_t *)v10);
        result = (*a3)(v9, (uint64_t *)(v10 + 12));
        if ((v123 & 1) != 0)
        {
          if ((_DWORD)result)
          {
LABEL_102:
            v124 = *(_QWORD *)v10;
            v165 = *(_DWORD *)(v10 + 8);
            v164 = v124;
            v125 = *v9;
            *(_DWORD *)(v10 + 8) = *((_DWORD *)v9 + 2);
            *(_QWORD *)v10 = v125;
            v126 = v164;
            v127 = v165;
LABEL_103:
            *((_DWORD *)v9 + 2) = v127;
            *v9 = v126;
            return result;
          }
          v157 = *(_QWORD *)v10;
          v165 = *(_DWORD *)(v10 + 8);
          v164 = v157;
          *(_QWORD *)v10 = *(_QWORD *)v122;
          *(_DWORD *)(v10 + 8) = *(_DWORD *)(v10 + 20);
          *(_QWORD *)v122 = v164;
          *(_DWORD *)(v10 + 20) = v165;
          result = (*a3)(v9, (uint64_t *)(v10 + 12));
          if ((_DWORD)result)
          {
            v126 = *(_QWORD *)v122;
            v164 = *(_QWORD *)v122;
            v127 = *(_DWORD *)(v10 + 20);
            v165 = v127;
            v158 = *((_DWORD *)v9 + 2);
            *(_QWORD *)v122 = *v9;
            *(_DWORD *)(v10 + 20) = v158;
            goto LABEL_103;
          }
        }
        else if ((_DWORD)result)
        {
          v164 = *(_QWORD *)v122;
          v148 = v164;
          v165 = *(_DWORD *)(v10 + 20);
          v149 = v165;
          v150 = *((_DWORD *)v9 + 2);
          *(_QWORD *)v122 = *v9;
          *(_DWORD *)(v10 + 20) = v150;
          *((_DWORD *)v9 + 2) = v149;
          *v9 = v148;
          goto LABEL_130;
        }
        return result;
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(operations_research::sat::LiteralWithCoeff const&,operations_research::sat::LiteralWithCoeff const&),operations_research::sat::LiteralWithCoeff*>((uint64_t *)v10, (uint64_t *)(v10 + 12), (uint64_t *)(v10 + 24), (uint64_t *)((char *)a2 - 12), a3);
      case 5uLL:
        v122 = v10 + 12;
        v128 = (uint64_t *)(v10 + 24);
        v129 = (uint64_t *)(v10 + 36);
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(operations_research::sat::LiteralWithCoeff const&,operations_research::sat::LiteralWithCoeff const&),operations_research::sat::LiteralWithCoeff*>((uint64_t *)v10, (uint64_t *)(v10 + 12), (uint64_t *)(v10 + 24), (uint64_t *)(v10 + 36), a3);
        result = (*a3)(v9, (uint64_t *)(v10 + 36));
        if ((_DWORD)result)
        {
          v164 = *v129;
          v130 = v164;
          v165 = *(_DWORD *)(v10 + 44);
          v131 = v165;
          v132 = *((_DWORD *)v9 + 2);
          *v129 = *v9;
          *(_DWORD *)(v10 + 44) = v132;
          *((_DWORD *)v9 + 2) = v131;
          *v9 = v130;
          result = (*a3)((uint64_t *)(v10 + 36), (uint64_t *)(v10 + 24));
          if ((_DWORD)result)
          {
            v133 = *(_DWORD *)(v10 + 32);
            v134 = *v128;
            *v128 = *v129;
            *(_DWORD *)(v10 + 32) = *(_DWORD *)(v10 + 44);
            *v129 = v134;
            *(_DWORD *)(v10 + 44) = v133;
            result = (*a3)((uint64_t *)(v10 + 24), (uint64_t *)(v10 + 12));
            if ((_DWORD)result)
            {
              v135 = *(_DWORD *)(v10 + 20);
              v136 = *(_QWORD *)v122;
              *(_QWORD *)v122 = *v128;
              *(_DWORD *)(v10 + 20) = *(_DWORD *)(v10 + 32);
              *v128 = v136;
              *(_DWORD *)(v10 + 32) = v135;
LABEL_130:
              result = (*a3)((uint64_t *)v122, (uint64_t *)v10);
              if ((_DWORD)result)
              {
                v151 = *(_QWORD *)v10;
                v165 = *(_DWORD *)(v10 + 8);
                v164 = v151;
                *(_QWORD *)v10 = *(_QWORD *)v122;
                *(_DWORD *)(v10 + 8) = *(_DWORD *)(v122 + 8);
                *(_QWORD *)v122 = v164;
                *(_DWORD *)(v122 + 8) = v165;
              }
            }
          }
        }
        return result;
      default:
        if (v11 > 287)
        {
          if (!a4)
          {
            if ((uint64_t *)v10 != a2)
              return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(operations_research::sat::LiteralWithCoeff const&,operations_research::sat::LiteralWithCoeff const&),operations_research::sat::LiteralWithCoeff*,operations_research::sat::LiteralWithCoeff*>(v10, a2, a2, (unsigned int (**)(uint64_t, char *))a3);
            return result;
          }
          v13 = v12 >> 1;
          v14 = v10 + 12 * (v12 >> 1);
          v15 = *a3;
          if ((unint64_t)v11 < 0x601)
          {
            v20 = v15((uint64_t *)v10, (uint64_t *)v14);
            v21 = (*a3)((uint64_t *)((char *)a2 - 12), (uint64_t *)v10);
            if ((v20 & 1) == 0)
            {
              if (v21)
              {
                v30 = *(_QWORD *)v10;
                v165 = *(_DWORD *)(v10 + 8);
                v164 = v30;
                v31 = *v9;
                *(_DWORD *)(v10 + 8) = *((_DWORD *)a2 - 1);
                *(_QWORD *)v10 = v31;
                v32 = v164;
                *((_DWORD *)a2 - 1) = v165;
                *v9 = v32;
                if ((*a3)((uint64_t *)v10, (uint64_t *)v14))
                {
                  v33 = *(_QWORD *)v14;
                  v165 = *(_DWORD *)(v14 + 8);
                  v164 = v33;
                  v34 = *(_QWORD *)v10;
                  *(_DWORD *)(v14 + 8) = *(_DWORD *)(v10 + 8);
                  *(_QWORD *)v14 = v34;
                  v35 = v164;
                  *(_DWORD *)(v10 + 8) = v165;
                  *(_QWORD *)v10 = v35;
                  --a4;
                  if ((a5 & 1) != 0)
                    goto LABEL_55;
                  goto LABEL_54;
                }
              }
              goto LABEL_32;
            }
            if (v21)
            {
              v22 = *(_QWORD *)v14;
              v165 = *(_DWORD *)(v14 + 8);
              v164 = v22;
              v23 = *v9;
              *(_DWORD *)(v14 + 8) = *((_DWORD *)a2 - 1);
              *(_QWORD *)v14 = v23;
            }
            else
            {
              v55 = *(_QWORD *)v14;
              v165 = *(_DWORD *)(v14 + 8);
              v164 = v55;
              v56 = *(_QWORD *)v10;
              *(_DWORD *)(v14 + 8) = *(_DWORD *)(v10 + 8);
              *(_QWORD *)v14 = v56;
              v57 = v164;
              *(_DWORD *)(v10 + 8) = v165;
              *(_QWORD *)v10 = v57;
              if (!(*a3)((uint64_t *)((char *)a2 - 12), (uint64_t *)v10))
                goto LABEL_32;
              v58 = *(_QWORD *)v10;
              v165 = *(_DWORD *)(v10 + 8);
              v164 = v58;
              v59 = *v9;
              *(_DWORD *)(v10 + 8) = *((_DWORD *)a2 - 1);
              *(_QWORD *)v10 = v59;
            }
            v60 = v164;
            *((_DWORD *)a2 - 1) = v165;
            *v9 = v60;
LABEL_32:
            --a4;
            if ((a5 & 1) != 0)
              goto LABEL_55;
            goto LABEL_54;
          }
          v16 = v15((uint64_t *)v14, (uint64_t *)v10);
          v17 = (*a3)((uint64_t *)((char *)a2 - 12), (uint64_t *)v14);
          if ((v16 & 1) != 0)
          {
            if (v17)
            {
              v18 = *(_QWORD *)v10;
              v165 = *(_DWORD *)(v10 + 8);
              v164 = v18;
              v19 = *v9;
              *(_DWORD *)(v10 + 8) = *((_DWORD *)a2 - 1);
              *(_QWORD *)v10 = v19;
            }
            else
            {
              v36 = *(_QWORD *)v10;
              v165 = *(_DWORD *)(v10 + 8);
              v164 = v36;
              v37 = *(_QWORD *)v14;
              *(_DWORD *)(v10 + 8) = *(_DWORD *)(v14 + 8);
              *(_QWORD *)v10 = v37;
              v38 = v164;
              *(_DWORD *)(v14 + 8) = v165;
              *(_QWORD *)v14 = v38;
              if (!(*a3)((uint64_t *)((char *)a2 - 12), (uint64_t *)v14))
                goto LABEL_23;
              v39 = *(_QWORD *)v14;
              v165 = *(_DWORD *)(v14 + 8);
              v164 = v39;
              v40 = *v9;
              *(_DWORD *)(v14 + 8) = *((_DWORD *)a2 - 1);
              *(_QWORD *)v14 = v40;
            }
            v41 = v164;
            *((_DWORD *)a2 - 1) = v165;
            *v9 = v41;
          }
          else if (v17)
          {
            v24 = *(_QWORD *)v14;
            v165 = *(_DWORD *)(v14 + 8);
            v164 = v24;
            v25 = *v9;
            *(_DWORD *)(v14 + 8) = *((_DWORD *)a2 - 1);
            *(_QWORD *)v14 = v25;
            v26 = v164;
            *((_DWORD *)a2 - 1) = v165;
            *v9 = v26;
            if ((*a3)((uint64_t *)v14, (uint64_t *)v10))
            {
              v27 = *(_QWORD *)v10;
              v165 = *(_DWORD *)(v10 + 8);
              v164 = v27;
              v28 = *(_QWORD *)v14;
              *(_DWORD *)(v10 + 8) = *(_DWORD *)(v14 + 8);
              *(_QWORD *)v10 = v28;
              v29 = v164;
              *(_DWORD *)(v14 + 8) = v165;
              *(_QWORD *)v14 = v29;
            }
          }
LABEL_23:
          v42 = (uint64_t *)(v10 + 12);
          v43 = v8 + 12 * v13 - 12;
          v44 = (*a3)((uint64_t *)v43, (uint64_t *)(v8 + 12));
          v45 = (*a3)(v160, (uint64_t *)v43);
          if ((v44 & 1) != 0)
          {
            if (v45)
            {
              v164 = *v42;
              v46 = v164;
              v165 = *(_DWORD *)(v8 + 20);
              v47 = v165;
              v48 = *((_DWORD *)a2 - 4);
              *v42 = *v160;
              *(_DWORD *)(v8 + 20) = v48;
              *((_DWORD *)a2 - 4) = v47;
              *v160 = v46;
            }
            else
            {
              v164 = *v42;
              v61 = v164;
              v165 = *(_DWORD *)(v8 + 20);
              v62 = v165;
              v63 = *(_DWORD *)(v8 + 12 * v13 - 4);
              *v42 = *(_QWORD *)v43;
              *(_DWORD *)(v8 + 20) = v63;
              *(_DWORD *)(v8 + 12 * v13 - 4) = v62;
              *(_QWORD *)v43 = v61;
              if ((*a3)(v160, (uint64_t *)(v8 + 12 * v13 - 12)))
              {
                v64 = *(_QWORD *)v43;
                v165 = *(_DWORD *)(v8 + 12 * v13 - 4);
                v164 = v64;
                v65 = *v160;
                *(_DWORD *)(v8 + 12 * v13 - 4) = *((_DWORD *)a2 - 4);
                *(_QWORD *)v43 = v65;
                v66 = v164;
                *((_DWORD *)a2 - 4) = v165;
                *v160 = v66;
              }
            }
          }
          else if (v45)
          {
            v49 = *(_QWORD *)v43;
            v165 = *(_DWORD *)(v8 + 12 * v13 - 4);
            v164 = v49;
            v50 = *v160;
            *(_DWORD *)(v8 + 12 * v13 - 4) = *((_DWORD *)a2 - 4);
            *(_QWORD *)v43 = v50;
            v51 = v164;
            *((_DWORD *)a2 - 4) = v165;
            *v160 = v51;
            if ((*a3)((uint64_t *)(v8 + 12 * v13 - 12), (uint64_t *)(v8 + 12)))
            {
              v164 = *v42;
              v52 = v164;
              v165 = *(_DWORD *)(v8 + 20);
              v53 = v165;
              v54 = *(_DWORD *)(v8 + 12 * v13 - 4);
              *v42 = *(_QWORD *)v43;
              *(_DWORD *)(v8 + 20) = v54;
              *(_DWORD *)(v8 + 12 * v13 - 4) = v53;
              *(_QWORD *)v43 = v52;
            }
          }
          v67 = (uint64_t *)(v8 + 24);
          v68 = v8 + 12 * v13 + 12;
          v69 = (*a3)((uint64_t *)v68, (uint64_t *)(v8 + 24));
          v70 = (*a3)(v159, (uint64_t *)v68);
          if ((v69 & 1) != 0)
          {
            if (v70)
            {
              v164 = *v67;
              v71 = v164;
              v165 = *(_DWORD *)(v8 + 32);
              v72 = v165;
              v73 = *((_DWORD *)a2 - 7);
              *v67 = *v159;
              *(_DWORD *)(v8 + 32) = v73;
              *((_DWORD *)a2 - 7) = v72;
              *v159 = v71;
            }
            else
            {
              v164 = *v67;
              v80 = v164;
              v165 = *(_DWORD *)(v8 + 32);
              v81 = v165;
              v82 = *(_DWORD *)(v68 + 8);
              *v67 = *(_QWORD *)v68;
              *(_DWORD *)(v8 + 32) = v82;
              *(_DWORD *)(v68 + 8) = v81;
              *(_QWORD *)v68 = v80;
              if ((*a3)(v159, (uint64_t *)v68))
              {
                v83 = *(_QWORD *)v68;
                v165 = *(_DWORD *)(v68 + 8);
                v164 = v83;
                v84 = *v159;
                *(_DWORD *)(v68 + 8) = *((_DWORD *)a2 - 7);
                *(_QWORD *)v68 = v84;
                v85 = v164;
                *((_DWORD *)a2 - 7) = v165;
                *v159 = v85;
              }
            }
          }
          else if (v70)
          {
            v74 = *(_QWORD *)v68;
            v165 = *(_DWORD *)(v68 + 8);
            v164 = v74;
            v75 = *v159;
            *(_DWORD *)(v68 + 8) = *((_DWORD *)a2 - 7);
            *(_QWORD *)v68 = v75;
            v76 = v164;
            *((_DWORD *)a2 - 7) = v165;
            *v159 = v76;
            if ((*a3)((uint64_t *)v68, (uint64_t *)(v8 + 24)))
            {
              v164 = *v67;
              v77 = v164;
              v165 = *(_DWORD *)(v8 + 32);
              v78 = v165;
              v79 = *(_DWORD *)(v68 + 8);
              *v67 = *(_QWORD *)v68;
              *(_DWORD *)(v8 + 32) = v79;
              *(_DWORD *)(v68 + 8) = v78;
              *(_QWORD *)v68 = v77;
            }
          }
          v86 = (*a3)((uint64_t *)v14, (uint64_t *)v43);
          v87 = (*a3)((uint64_t *)v68, (uint64_t *)v14);
          if ((v86 & 1) != 0)
          {
            if (v87)
            {
              v88 = *(_QWORD *)v43;
              v165 = *(_DWORD *)(v43 + 8);
              v164 = v88;
              *(_QWORD *)v43 = *(_QWORD *)v68;
              *(_DWORD *)(v43 + 8) = *(_DWORD *)(v68 + 8);
            }
            else
            {
              v93 = *(_QWORD *)v43;
              v165 = *(_DWORD *)(v43 + 8);
              v164 = v93;
              *(_QWORD *)v43 = *(_QWORD *)v14;
              *(_DWORD *)(v43 + 8) = *(_DWORD *)(v14 + 8);
              v94 = v164;
              *(_DWORD *)(v14 + 8) = v165;
              *(_QWORD *)v14 = v94;
              if (!(*a3)((uint64_t *)v68, (uint64_t *)v14))
                goto LABEL_53;
              v95 = *(_QWORD *)v14;
              v165 = *(_DWORD *)(v14 + 8);
              v164 = v95;
              *(_QWORD *)v14 = *(_QWORD *)v68;
              *(_DWORD *)(v14 + 8) = *(_DWORD *)(v68 + 8);
            }
            v96 = v164;
            *(_DWORD *)(v68 + 8) = v165;
            *(_QWORD *)v68 = v96;
          }
          else if (v87)
          {
            v89 = *(_QWORD *)v14;
            v165 = *(_DWORD *)(v14 + 8);
            v164 = v89;
            *(_QWORD *)v14 = *(_QWORD *)v68;
            *(_DWORD *)(v14 + 8) = *(_DWORD *)(v68 + 8);
            v90 = v164;
            *(_DWORD *)(v68 + 8) = v165;
            *(_QWORD *)v68 = v90;
            if ((*a3)((uint64_t *)v14, (uint64_t *)v43))
            {
              v91 = *(_QWORD *)v43;
              v165 = *(_DWORD *)(v43 + 8);
              v164 = v91;
              *(_QWORD *)v43 = *(_QWORD *)v14;
              *(_DWORD *)(v43 + 8) = *(_DWORD *)(v14 + 8);
              v92 = v164;
              *(_DWORD *)(v14 + 8) = v165;
              *(_QWORD *)v14 = v92;
            }
          }
LABEL_53:
          v97 = *(_QWORD *)v8;
          v165 = *(_DWORD *)(v8 + 8);
          v164 = v97;
          v98 = *(_QWORD *)v14;
          *(_DWORD *)(v8 + 8) = *(_DWORD *)(v14 + 8);
          *(_QWORD *)v8 = v98;
          v99 = v164;
          *(_DWORD *)(v14 + 8) = v165;
          *(_QWORD *)v14 = v99;
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_55;
LABEL_54:
          if (((*a3)((uint64_t *)(v8 - 12), (uint64_t *)v8) & 1) == 0)
          {
            v113 = *(_QWORD *)v8;
            v163 = *(_DWORD *)(v8 + 8);
            v162 = v113;
            result = (*a3)(&v162, (uint64_t *)((char *)a2 - 12));
            if ((result & 1) != 0)
            {
              v10 = v8;
              do
              {
                v10 += 12;
                result = (*a3)(&v162, (uint64_t *)v10);
              }
              while ((result & 1) == 0);
            }
            else
            {
              v114 = (uint64_t *)(v8 + 12);
              do
              {
                v10 = (unint64_t)v114;
                if (v114 >= a2)
                  break;
                result = (*a3)(&v162, v114);
                v114 = (uint64_t *)(v10 + 12);
              }
              while (!(_DWORD)result);
            }
            v115 = a2;
            if (v10 < (unint64_t)a2)
            {
              v115 = a2;
              do
              {
                v115 = (uint64_t *)((char *)v115 - 12);
                result = (*a3)(&v162, v115);
              }
              while ((result & 1) != 0);
            }
            while (v10 < (unint64_t)v115)
            {
              v116 = *(_QWORD *)v10;
              v165 = *(_DWORD *)(v10 + 8);
              v164 = v116;
              v117 = *v115;
              *(_DWORD *)(v10 + 8) = *((_DWORD *)v115 + 2);
              *(_QWORD *)v10 = v117;
              v118 = v164;
              *((_DWORD *)v115 + 2) = v165;
              *v115 = v118;
              do
                v10 += 12;
              while (!(*a3)(&v162, (uint64_t *)v10));
              do
              {
                v115 = (uint64_t *)((char *)v115 - 12);
                result = (*a3)(&v162, v115);
              }
              while ((result & 1) != 0);
            }
            v119 = (uint64_t *)(v10 - 12);
            if (v10 - 12 != v8)
            {
              v120 = *v119;
              *(_DWORD *)(v8 + 8) = *(_DWORD *)(v10 - 4);
              *(_QWORD *)v8 = v120;
            }
            a5 = 0;
            v121 = v162;
            *(_DWORD *)(v10 - 4) = v163;
            *v119 = v121;
            continue;
          }
LABEL_55:
          v100 = 0;
          v101 = *(_QWORD *)v8;
          v163 = *(_DWORD *)(v8 + 8);
          v162 = v101;
          do
            v100 += 12;
          while (((*a3)((uint64_t *)(v100 + v8), &v162) & 1) != 0);
          v102 = v8 + v100;
          v103 = a2;
          if (v100 == 12)
          {
            v103 = a2;
            do
            {
              if (v102 >= (unint64_t)v103)
                break;
              v103 = (uint64_t *)((char *)v103 - 12);
            }
            while (((*a3)(v103, &v162) & 1) == 0);
          }
          else
          {
            do
              v103 = (uint64_t *)((char *)v103 - 12);
            while (!(*a3)(v103, &v162));
          }
          if (v102 < (unint64_t)v103)
          {
            v104 = v8 + v100;
            v105 = v103;
            do
            {
              v106 = *(_QWORD *)v104;
              v165 = *(_DWORD *)(v104 + 8);
              v164 = v106;
              v107 = *v105;
              *(_DWORD *)(v104 + 8) = *((_DWORD *)v105 + 2);
              *(_QWORD *)v104 = v107;
              v108 = v164;
              *((_DWORD *)v105 + 2) = v165;
              *v105 = v108;
              do
                v104 += 12;
              while (((*a3)((uint64_t *)v104, &v162) & 1) != 0);
              do
                v105 = (uint64_t *)((char *)v105 - 12);
              while (!(*a3)(v105, &v162));
            }
            while (v104 < (unint64_t)v105);
            v109 = v104 - 12;
            if (v109 == v8)
              goto LABEL_73;
LABEL_72:
            v110 = *(_QWORD *)v109;
            *(_DWORD *)(v8 + 8) = *(_DWORD *)(v109 + 8);
            *(_QWORD *)v8 = v110;
            goto LABEL_73;
          }
          v109 = v102 - 12;
          if (v102 - 12 != v8)
            goto LABEL_72;
LABEL_73:
          v111 = v162;
          *(_DWORD *)(v109 + 8) = v163;
          *(_QWORD *)v109 = v111;
          if (v102 < (unint64_t)v103)
            goto LABEL_76;
          v112 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(operations_research::sat::LiteralWithCoeff const&,operations_research::sat::LiteralWithCoeff const&),operations_research::sat::LiteralWithCoeff*>(v8, v109, a3);
          v10 = v109 + 12;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(operations_research::sat::LiteralWithCoeff const&,operations_research::sat::LiteralWithCoeff const&),operations_research::sat::LiteralWithCoeff*>(v109 + 12, (uint64_t)a2, a3);
          if (!(_DWORD)result)
          {
            if (v112)
              continue;
LABEL_76:
            result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(operations_research::sat::LiteralWithCoeff const&,operations_research::sat::LiteralWithCoeff const&),operations_research::sat::LiteralWithCoeff*,false>(v8, v109, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v109 + 12;
            continue;
          }
          a2 = (uint64_t *)v109;
          if (v112)
            return result;
          goto LABEL_2;
        }
        v137 = (uint64_t *)(v10 + 12);
        v139 = (uint64_t *)v10 == a2 || v137 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v139)
          {
            v140 = 0;
            v141 = v10;
            do
            {
              v144 = (uint64_t *)v141;
              v141 = (unint64_t)v137;
              result = (*a3)(v137, v144);
              if ((_DWORD)result)
              {
                v145 = *(_QWORD *)v141;
                v165 = *(_DWORD *)(v141 + 8);
                v164 = v145;
                v146 = v140;
                do
                {
                  v147 = v10 + v146;
                  *(_QWORD *)(v147 + 12) = *(_QWORD *)(v10 + v146);
                  *(_DWORD *)(v147 + 20) = *(_DWORD *)(v10 + v146 + 8);
                  if (!v146)
                  {
                    v142 = v10;
                    goto LABEL_119;
                  }
                  v146 -= 12;
                  result = (*a3)(&v164, (uint64_t *)(v146 + v10));
                }
                while ((result & 1) != 0);
                v142 = v10 + v146 + 12;
LABEL_119:
                v143 = v164;
                *(_DWORD *)(v142 + 8) = v165;
                *(_QWORD *)v142 = v143;
              }
              v137 = (uint64_t *)(v141 + 12);
              v140 += 12;
            }
            while ((uint64_t *)(v141 + 12) != a2);
          }
        }
        else if (!v139)
        {
          v152 = v10 - 12;
          do
          {
            v153 = (uint64_t *)v8;
            v8 = (uint64_t)v137;
            result = (*a3)(v137, v153);
            if ((_DWORD)result)
            {
              v154 = *(_QWORD *)v8;
              v165 = *(_DWORD *)(v8 + 8);
              v164 = v154;
              v155 = v152;
              do
              {
                *(_QWORD *)(v155 + 24) = *(_QWORD *)(v155 + 12);
                *(_DWORD *)(v155 + 32) = *(_DWORD *)(v155 + 20);
                result = (*a3)(&v164, (uint64_t *)v155);
                v155 -= 12;
              }
              while ((result & 1) != 0);
              v156 = v164;
              *(_DWORD *)(v155 + 32) = v165;
              *(_QWORD *)(v155 + 24) = v156;
            }
            v137 = (uint64_t *)(v8 + 12);
            v152 += 12;
          }
          while ((uint64_t *)(v8 + 12) != a2);
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(operations_research::sat::LiteralWithCoeff const&,operations_research::sat::LiteralWithCoeff const&),operations_research::sat::LiteralWithCoeff*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  char v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 2);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = (uint64_t *)(a2 - 12);
      if ((*a3)((uint64_t *)(a2 - 12), (uint64_t *)a1))
      {
        v9 = *(_DWORD *)(a1 + 8);
        v10 = *(_QWORD *)a1;
        v11 = *(_DWORD *)(a2 - 4);
        *(_QWORD *)a1 = *v8;
        *(_DWORD *)(a1 + 8) = v11;
        *v8 = v10;
        *(_DWORD *)(a2 - 4) = v9;
      }
      return 1;
    case 3uLL:
      v12 = a1 + 12;
      v13 = a2 - 12;
      v14 = (*a3)((uint64_t *)(a1 + 12), (uint64_t *)a1);
      v15 = (*a3)((uint64_t *)v13, (uint64_t *)(a1 + 12));
      if ((v14 & 1) != 0)
      {
        if (v15)
        {
          v16 = *(_DWORD *)(a1 + 8);
          v17 = *(_QWORD *)a1;
          v18 = *(_DWORD *)(v13 + 8);
          *(_QWORD *)a1 = *(_QWORD *)v13;
          *(_DWORD *)(a1 + 8) = v18;
        }
        else
        {
          v44 = *(_DWORD *)(a1 + 8);
          v45 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)v12;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
          *(_QWORD *)v12 = v45;
          *(_DWORD *)(a1 + 20) = v44;
          if (!(*a3)((uint64_t *)v13, (uint64_t *)(a1 + 12)))
            return 1;
          v16 = *(_DWORD *)(a1 + 20);
          v17 = *(_QWORD *)v12;
          v46 = *(_DWORD *)(v13 + 8);
          *(_QWORD *)v12 = *(_QWORD *)v13;
          *(_DWORD *)(a1 + 20) = v46;
        }
        *(_QWORD *)v13 = v17;
        *(_DWORD *)(v13 + 8) = v16;
      }
      else if (v15)
      {
        v35 = *(_DWORD *)(a1 + 20);
        v36 = *(_QWORD *)v12;
        v37 = *(_DWORD *)(v13 + 8);
        *(_QWORD *)v12 = *(_QWORD *)v13;
        *(_DWORD *)(a1 + 20) = v37;
        *(_QWORD *)v13 = v36;
        *(_DWORD *)(v13 + 8) = v35;
LABEL_17:
        if ((*a3)((uint64_t *)v12, (uint64_t *)a1))
        {
          v38 = *(_DWORD *)(a1 + 8);
          v39 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)v12;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(v12 + 8);
          *(_QWORD *)v12 = v39;
          *(_DWORD *)(v12 + 8) = v38;
        }
      }
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(operations_research::sat::LiteralWithCoeff const&,operations_research::sat::LiteralWithCoeff const&),operations_research::sat::LiteralWithCoeff*>((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a1 + 24), (uint64_t *)(a2 - 12), a3);
      return 1;
    case 5uLL:
      v12 = a1 + 12;
      v19 = (uint64_t *)(a1 + 24);
      v20 = (uint64_t *)(a1 + 36);
      v21 = a2 - 12;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(operations_research::sat::LiteralWithCoeff const&,operations_research::sat::LiteralWithCoeff const&),operations_research::sat::LiteralWithCoeff*>((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 36), a3);
      if (!(*a3)((uint64_t *)v21, (uint64_t *)(a1 + 36)))
        return 1;
      v22 = *(_DWORD *)(a1 + 44);
      v23 = *v20;
      v24 = *(_DWORD *)(v21 + 8);
      *v20 = *(_QWORD *)v21;
      *(_DWORD *)(a1 + 44) = v24;
      *(_QWORD *)v21 = v23;
      *(_DWORD *)(v21 + 8) = v22;
      if (!(*a3)((uint64_t *)(a1 + 36), (uint64_t *)(a1 + 24)))
        return 1;
      v25 = *(_DWORD *)(a1 + 32);
      v26 = *v19;
      *v19 = *v20;
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 44);
      *v20 = v26;
      *(_DWORD *)(a1 + 44) = v25;
      if (!(*a3)((uint64_t *)(a1 + 24), (uint64_t *)(a1 + 12)))
        return 1;
      v27 = *(_DWORD *)(a1 + 20);
      v28 = *(_QWORD *)v12;
      *(_QWORD *)v12 = *v19;
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 32);
      *v19 = v28;
      *(_DWORD *)(a1 + 32) = v27;
      goto LABEL_17;
    default:
      v29 = (uint64_t *)(a1 + 24);
      v30 = (uint64_t *)(a1 + 12);
      v31 = (*a3)((uint64_t *)(a1 + 12), (uint64_t *)a1);
      v32 = (*a3)((uint64_t *)(a1 + 24), (uint64_t *)(a1 + 12));
      if ((v31 & 1) != 0)
      {
        if (v32)
        {
          v33 = *(_DWORD *)(a1 + 8);
          v34 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v29;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 32);
        }
        else
        {
          v47 = *(_DWORD *)(a1 + 8);
          v48 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v30;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
          *v30 = v48;
          *(_DWORD *)(a1 + 20) = v47;
          if (!(*a3)((uint64_t *)(a1 + 24), (uint64_t *)(a1 + 12)))
            goto LABEL_28;
          v33 = *(_DWORD *)(a1 + 20);
          v34 = *v30;
          *v30 = *v29;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 32);
        }
        *v29 = v34;
        *(_DWORD *)(a1 + 32) = v33;
      }
      else if (v32)
      {
        v40 = *(_DWORD *)(a1 + 20);
        v41 = *v30;
        *v30 = *v29;
        *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 32);
        *v29 = v41;
        *(_DWORD *)(a1 + 32) = v40;
        if ((*a3)((uint64_t *)(a1 + 12), (uint64_t *)a1))
        {
          v42 = *(_DWORD *)(a1 + 8);
          v43 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v30;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
          *v30 = v43;
          *(_DWORD *)(a1 + 20) = v42;
        }
      }
LABEL_28:
      v49 = a1 + 36;
      if (a1 + 36 == a2)
        return 1;
      v50 = 0;
      v51 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((uint64_t *)v49, v29))
    {
      v55 = *(_QWORD *)v49;
      v56 = *(_DWORD *)(v49 + 8);
      v53 = v50;
      do
      {
        v54 = a1 + v53;
        *(_QWORD *)(v54 + 36) = *(_QWORD *)(a1 + v53 + 24);
        *(_DWORD *)(v54 + 44) = *(_DWORD *)(a1 + v53 + 32);
        if (v53 == -24)
        {
          v52 = a1;
          goto LABEL_31;
        }
        v53 -= 12;
      }
      while (((*a3)(&v55, (uint64_t *)(v54 + 12)) & 1) != 0);
      v52 = a1 + v53 + 36;
LABEL_31:
      *(_QWORD *)v52 = v55;
      *(_DWORD *)(v52 + 8) = v56;
      if (++v51 == 8)
        return v49 + 12 == a2;
    }
    v29 = (uint64_t *)v49;
    v50 += 12;
    v49 += 12;
    if (v49 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(operations_research::sat::LiteralWithCoeff const&,operations_research::sat::LiteralWithCoeff const&),operations_research::sat::LiteralWithCoeff*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  char v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t result;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;

  v10 = (*a5)(a2, a1);
  v11 = (*a5)(a3, a2);
  if ((v10 & 1) != 0)
  {
    if (v11)
    {
      v12 = *((_DWORD *)a1 + 2);
      v13 = *a1;
      v14 = *((_DWORD *)a3 + 2);
      *a1 = *a3;
      *((_DWORD *)a1 + 2) = v14;
LABEL_9:
      *a3 = v13;
      *((_DWORD *)a3 + 2) = v12;
      goto LABEL_10;
    }
    v21 = *((_DWORD *)a1 + 2);
    v22 = *a1;
    v23 = *((_DWORD *)a2 + 2);
    *a1 = *a2;
    *((_DWORD *)a1 + 2) = v23;
    *a2 = v22;
    *((_DWORD *)a2 + 2) = v21;
    if ((*a5)(a3, a2))
    {
      v12 = *((_DWORD *)a2 + 2);
      v13 = *a2;
      v24 = *((_DWORD *)a3 + 2);
      *a2 = *a3;
      *((_DWORD *)a2 + 2) = v24;
      goto LABEL_9;
    }
  }
  else if (v11)
  {
    v15 = *((_DWORD *)a2 + 2);
    v16 = *a2;
    v17 = *((_DWORD *)a3 + 2);
    *a2 = *a3;
    *((_DWORD *)a2 + 2) = v17;
    *a3 = v16;
    *((_DWORD *)a3 + 2) = v15;
    if ((*a5)(a2, a1))
    {
      v18 = *((_DWORD *)a1 + 2);
      v19 = *a1;
      v20 = *((_DWORD *)a2 + 2);
      *a1 = *a2;
      *((_DWORD *)a1 + 2) = v20;
      *a2 = v19;
      *((_DWORD *)a2 + 2) = v18;
    }
  }
LABEL_10:
  result = (*a5)(a4, a3);
  if ((_DWORD)result)
  {
    v26 = *((_DWORD *)a3 + 2);
    v27 = *a3;
    v28 = *((_DWORD *)a4 + 2);
    *a3 = *a4;
    *((_DWORD *)a3 + 2) = v28;
    *a4 = v27;
    *((_DWORD *)a4 + 2) = v26;
    result = (*a5)(a3, a2);
    if ((_DWORD)result)
    {
      v29 = *((_DWORD *)a2 + 2);
      v30 = *a2;
      v31 = *((_DWORD *)a3 + 2);
      *a2 = *a3;
      *((_DWORD *)a2 + 2) = v31;
      *a3 = v30;
      *((_DWORD *)a3 + 2) = v29;
      result = (*a5)(a2, a1);
      if ((_DWORD)result)
      {
        v32 = *((_DWORD *)a1 + 2);
        v33 = *a1;
        v34 = *((_DWORD *)a2 + 2);
        *a1 = *a2;
        *((_DWORD *)a1 + 2) = v34;
        *a2 = v33;
        *((_DWORD *)a2 + 2) = v32;
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(operations_research::sat::LiteralWithCoeff const&,operations_research::sat::LiteralWithCoeff const&),operations_research::sat::LiteralWithCoeff*,operations_research::sat::LiteralWithCoeff*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned int (**a4)(uint64_t, char *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t *v22;
  int64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;

  if ((uint64_t *)a1 == a2)
    return a3;
  v65 = v4;
  v66 = v5;
  v58 = a3;
  v60 = a2;
  v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 2);
  v57 = (uint64_t)a2 - a1;
  if ((uint64_t)a2 - a1 >= 13 && (unint64_t)v57 >= 0x18)
  {
    v47 = (unint64_t)(v8 - 2) >> 1;
    v48 = v47;
    do
    {
      if (v47 >= v48)
      {
        v50 = (2 * v48) | 1;
        v51 = (uint64_t *)(a1 + 12 * v50);
        if (2 * v48 + 2 < v8 && (*a4)(a1 + 12 * v50, (char *)v51 + 12))
        {
          v51 = (uint64_t *)((char *)v51 + 12);
          v50 = 2 * v48 + 2;
        }
        v52 = (uint64_t *)(a1 + 12 * v48);
        if ((((uint64_t (*)(uint64_t *, uint64_t *))*a4)(v51, v52) & 1) == 0)
        {
          v63 = *v52;
          v64 = *((_DWORD *)v52 + 2);
          do
          {
            v53 = v51;
            v54 = *v51;
            *((_DWORD *)v52 + 2) = *((_DWORD *)v51 + 2);
            *v52 = v54;
            if (v47 < v50)
              break;
            v55 = (2 * v50) | 1;
            v51 = (uint64_t *)(a1 + 12 * v55);
            v56 = 2 * v50 + 2;
            if (v56 < v8 && (*a4)(a1 + 12 * v55, (char *)v51 + 12))
            {
              v51 = (uint64_t *)((char *)v51 + 12);
              v55 = v56;
            }
            v52 = v53;
            v50 = v55;
          }
          while (!(*a4)((uint64_t)v51, (char *)&v63));
          v49 = v63;
          *((_DWORD *)v53 + 2) = v64;
          *v53 = v49;
        }
      }
      v30 = v48-- <= 0;
    }
    while (!v30);
  }
  v9 = v58;
  a3 = v60;
  v10 = v57;
  if (v60 != v58)
  {
    if (v57 < 24)
    {
      v11 = v60;
      do
      {
        if (((unsigned int (*)(uint64_t *, uint64_t, uint64_t *))*a4)(v11, a1, a3))
        {
          v12 = *((_DWORD *)v11 + 2);
          v13 = *v11;
          v14 = *(_DWORD *)(a1 + 8);
          *v11 = *(_QWORD *)a1;
          *((_DWORD *)v11 + 2) = v14;
          *(_QWORD *)a1 = v13;
          *(_DWORD *)(a1 + 8) = v12;
        }
        v11 = (uint64_t *)((char *)v11 + 12);
      }
      while (v11 != v58);
      a3 = v58;
      goto LABEL_32;
    }
    v15 = (uint64_t *)(a1 + 12);
    v16 = v60;
    while (1)
    {
      if (((unsigned int (*)(uint64_t *, uint64_t, uint64_t *))*a4)(v16, a1, a3))
      {
        v18 = *((_DWORD *)v16 + 2);
        v19 = *v16;
        v20 = *(_DWORD *)(a1 + 8);
        *v16 = *(_QWORD *)a1;
        *((_DWORD *)v16 + 2) = v20;
        *(_QWORD *)a1 = v19;
        *(_DWORD *)(a1 + 8) = v18;
        if ((unint64_t)v8 < 3)
        {
          v22 = v15;
          v23 = 1;
          if ((((uint64_t (*)(uint64_t *, uint64_t))*a4)(v15, a1) & 1) == 0)
            goto LABEL_24;
        }
        else
        {
          v21 = (*a4)((uint64_t)v15, (char *)(a1 + 24));
          if (v21)
            v22 = (uint64_t *)(a1 + 24);
          else
            v22 = v15;
          if (v21)
            v23 = 2;
          else
            v23 = 1;
          if ((((uint64_t (*)(uint64_t *, uint64_t))*a4)(v22, a1) & 1) == 0)
          {
LABEL_24:
            v63 = *(_QWORD *)a1;
            v64 = *(_DWORD *)(a1 + 8);
            v24 = a1;
            do
            {
              v26 = v22;
              v27 = *v22;
              *(_DWORD *)(v24 + 8) = *((_DWORD *)v22 + 2);
              *(_QWORD *)v24 = v27;
              if ((uint64_t)((unint64_t)(v8 - 2) >> 1) < v23)
                break;
              v28 = (2 * v23) | 1;
              v22 = (uint64_t *)(a1 + 12 * v28);
              if (2 * v23 + 2 < v8 && (*a4)(a1 + 12 * v28, (char *)v22 + 12))
              {
                v22 = (uint64_t *)((char *)v22 + 12);
                v28 = 2 * v23 + 2;
              }
              v25 = (*a4)((uint64_t)v22, (char *)&v63);
              v24 = (uint64_t)v26;
              v23 = v28;
            }
            while (!v25);
            v17 = v63;
            *((_DWORD *)v26 + 2) = v64;
            *v26 = v17;
            v9 = v58;
            v15 = (uint64_t *)(a1 + 12);
          }
        }
      }
      v16 = (uint64_t *)((char *)v16 + 12);
      if (v16 == v9)
      {
        a3 = v9;
        v10 = v57;
        goto LABEL_35;
      }
    }
  }
LABEL_32:
  if (v57 >= 13)
  {
LABEL_35:
    v59 = a3;
    v29 = v10 / 0xC;
    do
    {
      v31 = 0;
      v61 = *(_QWORD *)a1;
      v62 = *(_DWORD *)(a1 + 8);
      v32 = a1;
      do
      {
        v34 = v32 + 12 * v31 + 12;
        v35 = (2 * v31) | 1;
        v36 = 2 * v31 + 2;
        if (v36 < v29 && (*a4)(v32 + 12 * v31 + 12, (char *)(v32 + 12 * v31 + 24)))
        {
          v34 += 12;
          v35 = v36;
        }
        v33 = *(_QWORD *)v34;
        *(_DWORD *)(v32 + 8) = *(_DWORD *)(v34 + 8);
        *(_QWORD *)v32 = v33;
        v32 = v34;
        v31 = v35;
      }
      while (v35 <= (uint64_t)((unint64_t)(v29 - 2) >> 1));
      v37 = (uint64_t *)((char *)v60 - 12);
      v38 = v34 == (_QWORD)v60 - 12;
      v60 = (uint64_t *)((char *)v60 - 12);
      if (v38)
      {
        *(_DWORD *)(v34 + 8) = v62;
        *(_QWORD *)v34 = v61;
      }
      else
      {
        v39 = *v37;
        *(_DWORD *)(v34 + 8) = *((_DWORD *)v37 + 2);
        *(_QWORD *)v34 = v39;
        *v37 = v61;
        *((_DWORD *)v37 + 2) = v62;
        v40 = v34 - a1 + 12;
        if (v40 >= 13)
        {
          v41 = (v40 / 0xCuLL - 2) >> 1;
          v42 = a1 + 12 * v41;
          if ((*a4)(v42, (char *)v34))
          {
            v43 = *(_QWORD *)v34;
            v64 = *(_DWORD *)(v34 + 8);
            v63 = v43;
            do
            {
              v44 = v42;
              v45 = *(_QWORD *)v42;
              *(_DWORD *)(v34 + 8) = *(_DWORD *)(v42 + 8);
              *(_QWORD *)v34 = v45;
              if (!v41)
                break;
              v41 = (v41 - 1) >> 1;
              v42 = a1 + 12 * v41;
              v34 = v44;
            }
            while ((((uint64_t (*)(uint64_t, uint64_t *))*a4)(v42, &v63) & 1) != 0);
            *(_QWORD *)v44 = v63;
            *(_DWORD *)(v44 + 8) = v64;
          }
        }
      }
      v30 = v29-- <= 2;
    }
    while (!v30);
    return v59;
  }
  return a3;
}

void std::vector<operations_research::sat::LiteralWithCoeff>::__append(void **a1, unint64_t a2)
{
  _BYTE *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  int v26;
  void *v27;

  v5 = a1[1];
  v4 = a1[2];
  v6 = v5;
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)v5) >> 2) >= a2)
  {
    if (a2)
    {
      v13 = 12 * a2 - 12;
      if (v13 < 0xC)
        goto LABEL_34;
      v14 = v13 / 0xC + 1;
      v6 = (_QWORD *)((char *)v5 + 12 * (v14 & 0x3FFFFFFFFFFFFFFELL));
      v15 = v5 + 2;
      v16 = v14 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        *(_QWORD *)((char *)v15 - 12) = 0;
        *v15 = 0;
        v15 += 3;
        v16 -= 2;
      }
      while (v16);
      if (v14 != (v14 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_34:
        do
        {
          *(_QWORD *)((char *)v6 + 4) = 0;
          v6 = (_QWORD *)((char *)v6 + 12);
        }
        while (v6 != (_QWORD *)((char *)v5 + 12 * a2));
      }
      v6 = (_QWORD *)((char *)v5 + 12 * a2);
    }
    a1[1] = v6;
  }
  else
  {
    v7 = *a1;
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a1) >> 2);
    v9 = v8 + a2;
    if (v8 + a2 > 0x1555555555555555)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)v7) >> 2);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0xAAAAAAAAAAAAAAALL)
      v11 = 0x1555555555555555;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0x1555555555555555)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = (char *)operator new(12 * v11);
    }
    else
    {
      v12 = 0;
    }
    v17 = &v12[12 * v8];
    v18 = &v17[12 * a2];
    v19 = 12 * a2 - 12;
    v20 = v17;
    if (v19 < 0xC)
      goto LABEL_35;
    v21 = v19 / 0xC + 1;
    v20 = &v17[12 * (v21 & 0x3FFFFFFFFFFFFFFELL)];
    v22 = &v12[12 * v8 + 16];
    v23 = v21 & 0x3FFFFFFFFFFFFFFELL;
    do
    {
      *(_QWORD *)(v22 - 12) = 0;
      *(_QWORD *)v22 = 0;
      v22 += 24;
      v23 -= 2;
    }
    while (v23);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_35:
      do
      {
        *(_QWORD *)(v20 + 4) = 0;
        v20 += 12;
      }
      while (v20 != v18);
    }
    v24 = &v12[12 * v11];
    if (v5 != v7)
    {
      do
      {
        v25 = *(_QWORD *)((char *)v6 - 12);
        v6 = (_QWORD *)((char *)v6 - 12);
        v26 = *((_DWORD *)v6 + 2);
        *(_QWORD *)(v17 - 12) = v25;
        v17 -= 12;
        *((_DWORD *)v17 + 2) = v26;
      }
      while (v6 != v7);
    }
    v27 = *a1;
    *a1 = v17;
    a1[1] = v18;
    a1[2] = v24;
    if (v27)
      operator delete(v27);
  }
}

uint64_t google::MakeCheckOpString<operations_research::sat::Literal,operations_research::sat::Literal>(int *a1, int *a2, char *a3)
{
  _QWORD *v5;
  int v6;
  uint64_t v7;
  void *p_p;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  void *__p;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  BOOL (*v22)(int, uint64_t, unsigned int, char *);
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v17, a3);
  v5 = v17;
  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = ~v6;
  else
    v7 = (v6 + 1);
  v21 = v7;
  v22 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<int>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("%+d", 3, (uint64_t)&v21, 1, (uint64_t)&__p);
  if ((v20 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v20 & 0x80u) == 0)
    v9 = v20;
  else
    v9 = v19;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)p_p, v9);
  if ((char)v20 < 0)
    operator delete(__p);
  v10 = (_QWORD *)google::base::CheckOpMessageBuilder::ForVar2((google::base::CheckOpMessageBuilder *)&v17);
  v11 = *a2 >> 1;
  if ((*a2 & 1) != 0)
    v12 = ~v11;
  else
    v12 = (v11 + 1);
  v21 = v12;
  v22 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<int>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("%+d", 3, (uint64_t)&v21, 1, (uint64_t)&__p);
  if ((v20 & 0x80u) == 0)
    v13 = &__p;
  else
    v13 = __p;
  if ((v20 & 0x80u) == 0)
    v14 = v20;
  else
    v14 = v19;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v13, v14);
  if ((char)v20 < 0)
    operator delete(__p);
  v15 = google::base::CheckOpMessageBuilder::NewString((google::base::CheckOpMessageBuilder *)&v17);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v17);
  return v15;
}

void sub_22DBB3C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&a10);
    _Unwind_Resume(a1);
  }
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&a10);
  _Unwind_Resume(a1);
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<operations_research::sat::UpperBoundedLinearConstraint *>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<operations_research::sat::UpperBoundedLinearConstraint *>>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<operations_research::sat::UpperBoundedLinearConstraint *>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<operations_research::sat::UpperBoundedLinearConstraint *>>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      v7 = v13;
      v4 = *a1;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<operations_research::sat::UpperBoundedLinearConstraint *>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<operations_research::sat::UpperBoundedLinearConstraint *>>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<operations_research::sat::UpperBoundedLinearConstraint *>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<operations_research::sat::UpperBoundedLinearConstraint *>>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<int>>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<operations_research::sat::UpperBoundedLinearConstraint *>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<operations_research::sat::UpperBoundedLinearConstraint *>>>>::resize(char **a1, char *a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char *v18;
  char *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;

  v2 = (unint64_t)a2;
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  v9 = (char *)operator new(v8 + 32 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  v10 = v2 - (v2 >> 3);
  if (v2 == 7)
    v10 = 6;
  v11 = a1[2];
  a1[5] = (char *)(v10 - (_QWORD)v11);
  v12 = a1[4];
  if (v12)
  {
    *((_QWORD *)v12 + 1) = v11;
    *(_QWORD *)v12 = v2;
    if (!v11)
    {
      *((_QWORD *)v12 + 4) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    v14 = 0;
    v25 = a1[4];
    if (!v25)
      return;
LABEL_21:
    *((_QWORD *)v25 + 4) = v14 >> 3;
    *((_QWORD *)v25 + 2) = 0;
    return;
  }
  v13 = 0;
  v14 = 0;
  do
  {
    if ((v13[(_QWORD)v4] & 0x80000000) == 0)
    {
      v19 = &v5[32 * (_QWORD)v13];
      v20 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(_QWORD *)v19)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(_QWORD *)v19));
      v21 = *a1;
      v22 = a1[3];
      v23 = ((v20 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v22;
      v24 = *(_QWORD *)&(*a1)[v23] & (~*(_QWORD *)&(*a1)[v23] << 7) & 0x8080808080808080;
      if (v24)
      {
        v15 = 0;
      }
      else
      {
        v15 = 0;
        do
        {
          v15 += 8;
          v23 = (v15 + v23) & (unint64_t)v22;
          v24 = *(_QWORD *)&v21[v23] & (~*(_QWORD *)&v21[v23] << 7) & 0x8080808080808080;
        }
        while (!v24);
      }
      v16 = (v23 + (__clz(__rbit64(v24)) >> 3)) & (unint64_t)v22;
      v14 += v15;
      v17 = v20 & 0x7F;
      v21[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      v18 = &a1[1][32 * v16];
      *(_QWORD *)v18 = *(_QWORD *)v19;
      *((_QWORD *)v18 + 1) = 0;
      *((_QWORD *)v18 + 2) = 0;
      *((_QWORD *)v18 + 3) = 0;
      *(_OWORD *)(v18 + 8) = *(_OWORD *)(v19 + 8);
      *((_QWORD *)v18 + 3) = *((_QWORD *)v19 + 3);
      *((_QWORD *)v19 + 1) = 0;
      *((_QWORD *)v19 + 2) = 0;
      *((_QWORD *)v19 + 3) = 0;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  v25 = a1[4];
  if (v25)
    goto LABEL_21;
}

uint64_t google::MakeCheckOpString<gtl::IntType<operations_research::sat::PbConstraints::ConstraintIndex_tag_,int>,unsigned long>(int a1, int a2, char *a3)
{
  uint64_t v3;
  uint64_t v5;

  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5, a3);
  std::ostream::operator<<();
  google::base::CheckOpMessageBuilder::ForVar2((google::base::CheckOpMessageBuilder *)&v5);
  std::ostream::operator<<();
  v3 = google::base::CheckOpMessageBuilder::NewString((google::base::CheckOpMessageBuilder *)&v5);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5);
  return v3;
}

void sub_22DBB404C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD **)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
    {
      v5 = (void *)v4[9];
      if (v5)
      {
        v4[10] = v5;
        operator delete(v5);
      }
      v6 = (void *)v4[6];
      if (v6)
      {
        v4[7] = v6;
        operator delete(v6);
      }
      v7 = (void *)v4[3];
      if (v7)
      {
        v4[4] = v7;
        operator delete(v7);
      }
      MEMORY[0x22E31DF78](v4, 0x1030C40B4F52BC7);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>>::__append(_QWORD *a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  int64x2_t v27;
  uint64_t v28;
  uint64_t v29;
  int64x2_t v30;
  char *v31;
  _QWORD *v32;

  v4 = (char *)a1[2];
  v5 = (char *)a1[1];
  v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = (uint64_t)&v5[-*a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    if ((v4 - v7) >> 2 > v10)
      v10 = (v4 - v7) >> 2;
    if ((unint64_t)(v4 - v7) >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    v32 = a1 + 2;
    v28 = v8;
    if (v11)
    {
      if (v11 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v9];
    v14 = &v12[8 * v11];
    v31 = v14;
    v15 = 8 * a2;
    bzero(v13, v15);
    v16 = &v13[v15];
    v30.i64[1] = (uint64_t)&v13[v15];
    v17 = (char *)(v5 - v7);
    if (v5 == v7)
    {
      v27 = vdupq_n_s64((unint64_t)v5);
    }
    else
    {
      v18 = v17 - 8;
      if ((unint64_t)(v17 - 8) < 0x78
        || &v5[-((unint64_t)v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v13
        && &v12[v28 - ((unint64_t)v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v5)
      {
        goto LABEL_31;
      }
      v19 = ((unint64_t)v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v13 -= v20;
      v6 = &v5[-v20];
      v21 = v5 - 16;
      v22 = &v12[8 * v9 - 16];
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v25 = *((_OWORD *)v21 - 1);
        v24 = *(_OWORD *)v21;
        *((_OWORD *)v21 - 1) = 0uLL;
        *(_OWORD *)v21 = 0uLL;
        *((_OWORD *)v22 - 1) = v25;
        *(_OWORD *)v22 = v24;
        v21 -= 32;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          v26 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *(_QWORD *)v6 = 0;
          *((_QWORD *)v13 - 1) = v26;
          v13 -= 8;
        }
        while (v6 != v7);
      }
      v27 = *(int64x2_t *)a1;
      v4 = (char *)a1[2];
      v16 = (char *)v30.i64[1];
      v14 = v31;
    }
    *a1 = v13;
    a1[1] = v16;
    v30 = v27;
    a1[2] = v14;
    v31 = v4;
    v29 = v27.i64[0];
    std::__split_buffer<std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>>::~__split_buffer((uint64_t)&v29);
  }
}

void std::vector<operations_research::sat::PbConstraints::ConstraintIndexWithCoeff>::__append(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (0x4EC4EC4EC4EC4EC5 * (v4 - v5) >= a2)
  {
    if (a2)
    {
      v13 = 13 * a2 - 13;
      if (v13 < 0xD)
        goto LABEL_34;
      v14 = v13 / 0xD + 1;
      v6 = &v5[13 * (v14 & 0x3FFFFFFFFFFFFFFELL)];
      v15 = v5 + 18;
      v16 = v14 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        *(_DWORD *)((char *)v15 - 17) = 0;
        *((_DWORD *)v15 - 1) = 0;
        *(_QWORD *)((char *)v15 - 13) = 0;
        *v15 = 0;
        v15 = (_QWORD *)((char *)v15 + 26);
        v16 -= 2;
      }
      while (v16);
      if (v14 != (v14 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_34:
        do
        {
          *(_DWORD *)(v6 + 1) = 0;
          *(_QWORD *)(v6 + 5) = 0;
          v6 += 13;
        }
        while (v6 != &v5[13 * a2]);
      }
      v6 = &v5[13 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = 0x4EC4EC4EC4EC4EC5 * (v5 - (_BYTE *)*a1);
    v9 = v8 + a2;
    if (v8 + a2 > 0x13B13B13B13B13B1)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v10 = 0x4EC4EC4EC4EC4EC5 * (v4 - v7);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x9D89D89D89D89D8)
      v11 = 0x13B13B13B13B13B1;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0x13B13B13B13B13B1)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = (char *)operator new(13 * v11);
    }
    else
    {
      v12 = 0;
    }
    v17 = &v12[13 * v8];
    v18 = &v17[13 * a2];
    v19 = 13 * a2 - 13;
    v20 = v17;
    if (v19 < 0xD)
      goto LABEL_35;
    v21 = v19 / 0xD + 1;
    v20 = &v17[13 * (v21 & 0x3FFFFFFFFFFFFFFELL)];
    v22 = &v12[13 * v8 + 18];
    v23 = v21 & 0x3FFFFFFFFFFFFFFELL;
    do
    {
      *(_DWORD *)(v22 - 17) = 0;
      *((_DWORD *)v22 - 1) = 0;
      *(_QWORD *)(v22 - 13) = 0;
      *(_QWORD *)v22 = 0;
      v22 += 26;
      v23 -= 2;
    }
    while (v23);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_35:
      do
      {
        *(_DWORD *)(v20 + 1) = 0;
        *(_QWORD *)(v20 + 5) = 0;
        v20 += 13;
      }
      while (v20 != v18);
    }
    v24 = &v12[13 * v11];
    if (v5 != v7)
    {
      do
      {
        v25 = *(_QWORD *)(v6 - 13);
        v6 -= 13;
        v26 = *(_QWORD *)(v6 + 5);
        *(_QWORD *)(v17 - 13) = v25;
        v17 -= 13;
        *(_QWORD *)(v17 + 5) = v26;
      }
      while (v6 != v7);
    }
    v27 = *a1;
    *a1 = v17;
    a1[1] = v18;
    a1[2] = v24;
    if (v27)
      operator delete(v27);
  }
}

uint64_t operations_research::sat::PrecedencesPropagator::Propagate(operations_research::sat::PrecedencesPropagator *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  int *v8;
  unint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  int *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  unint64_t v34;
  int *v35;
  _OWORD *v36;
  __int128 *v37;
  unint64_t v38;
  __int128 v39;
  unint64_t v40;
  char *v41;
  int v42;
  uint64_t v43;

  v2 = *((_DWORD *)this + 9);
  v3 = *((_QWORD *)this + 6);
  if (v2 >= *(_DWORD *)(v3 + 12))
  {
LABEL_47:
    operations_research::sat::PrecedencesPropagator::InitializeBFQueueWithModifiedNodes(this);
    result = operations_research::sat::PrecedencesPropagator::BellmanFordTarjan(this, *((operations_research::sat::Trail **)this + 6));
    if ((_DWORD)result)
    {
      operations_research::sat::PrecedencesPropagator::PropagateOptionalArcs((int **)this, *((operations_research::sat::Trail **)this + 6));
      operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize((uint64_t)this + 80, -1431655765 * ((*(_QWORD *)(*((_QWORD *)this + 7) + 48) - *(_QWORD *)(*((_QWORD *)this + 7) + 40)) >> 2));
      return 1;
    }
    return result;
  }
  while (2)
  {
    *((_DWORD *)this + 9) = v2 + 1;
    v4 = *(int *)(*(_QWORD *)(v3 + 72) + 4 * v2);
    v5 = *((_QWORD *)this + 44);
    if ((int)v4 >= (int)((unint64_t)(*((_QWORD *)this + 45) - v5) >> 5))
      goto LABEL_3;
    v6 = (_QWORD *)(v5 + 32 * v4);
    v9 = *v6;
    v8 = (int *)(v6 + 1);
    v7 = v9;
    if ((v9 & 1) != 0)
      v8 = *(int **)v8;
    if (v7 < 2)
    {
      v10 = (int *)(v5 + 32 * v4 + 8);
      if ((v7 & 1) == 0)
        goto LABEL_10;
LABEL_9:
      v10 = *(int **)v10;
      goto LABEL_10;
    }
    v22 = &v8[v7 >> 1];
    do
    {
      v23 = *v8;
      v24 = *((_QWORD *)this + 47);
      v25 = 4 * *v8;
      v26 = *(_DWORD *)(v24 + v25) - 1;
      *(_DWORD *)(v24 + v25) = v26;
      if (!v26)
      {
        v27 = *((_QWORD *)this + 20) + 32 * *(int *)(*((_QWORD *)this + 23) + ((uint64_t)v23 << 6));
        v29 = v27 + 8;
        v28 = *(_QWORD *)v27;
        if ((*(_QWORD *)v27 & 1) != 0)
        {
          v29 = *(_QWORD *)(v27 + 8);
          v30 = *(_QWORD *)(v27 + 16);
          v31 = v28 >> 1;
          if (v28 >> 1 == v30)
            goto LABEL_31;
        }
        else
        {
          v30 = 6;
          v31 = v28 >> 1;
          if (v28 >> 1 == 6)
          {
LABEL_31:
            if (((v30 >> 61) & 3) != 0)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v32 = (char *)operator new(8 * v30);
            v33 = v32;
            *(_DWORD *)&v32[4 * v30] = v23;
            if (v28 < 2)
              goto LABEL_42;
            v34 = 0;
            if (v30 < 8 || (unint64_t)&v32[-v29] < 0x20)
            {
              v35 = (int *)v29;
            }
            else
            {
              v34 = v30 & 0xFFFFFFFFFFFFFFF8;
              v35 = (int *)(v29 + 4 * (v30 & 0xFFFFFFFFFFFFFFF8));
              v36 = v32 + 16;
              v37 = (__int128 *)(v29 + 16);
              v38 = v30 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                v39 = *v37;
                *(v36 - 1) = *(v37 - 1);
                *v36 = v39;
                v36 += 2;
                v37 += 2;
                v38 -= 8;
              }
              while (v38);
              if (v30 == v34)
                goto LABEL_42;
            }
            v40 = v30 - v34;
            v41 = &v32[4 * v34];
            do
            {
              v42 = *v35++;
              *(_DWORD *)v41 = v42;
              v41 += 4;
              --v40;
            }
            while (v40);
LABEL_42:
            if ((v28 & 1) != 0)
            {
              operator delete(*(void **)(v27 + 8));
              v28 = *(_QWORD *)v27;
            }
            *(_QWORD *)(v27 + 8) = v33;
            *(_QWORD *)(v27 + 16) = 2 * v30;
            v28 |= 1uLL;
            goto LABEL_24;
          }
        }
        *(_DWORD *)(v29 + 4 * v31) = v23;
LABEL_24:
        *(_QWORD *)v27 = v28 + 2;
      }
      ++v8;
    }
    while (v8 != v22);
    v43 = *((_QWORD *)this + 44);
    v7 = *(_QWORD *)(v43 + 32 * v4);
    v10 = (int *)(v43 + 32 * v4 + 8);
    if ((v7 & 1) != 0)
      goto LABEL_9;
LABEL_10:
    if (v7 < 2)
    {
LABEL_3:
      v2 = *((_DWORD *)this + 9);
      v3 = *((_QWORD *)this + 6);
      if (v2 >= *(_DWORD *)(v3 + 12))
        goto LABEL_47;
      continue;
    }
    break;
  }
  v11 = 4 * (v7 >> 1);
  while (1)
  {
    v12 = *v10;
    if (*(int *)(*((_QWORD *)this + 47) + 4 * v12) <= 0)
    {
      v13 = (int *)(*((_QWORD *)this + 23) + (v12 << 6));
      v14 = (_QWORD *)*((_QWORD *)this + 7);
      v15 = v13[1];
      v16 = *(int *)(v14[51] + 4 * v15);
      if ((_DWORD)v16 == -1
        || ((*(_QWORD *)(*(_QWORD *)(v14[117] + 24) + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        v17 = v14[5];
        v18 = v13[4];
        v19 = v18 == -1 ? 0 : *(_QWORD *)(v17 + 12 * v18);
        v20 = *((_QWORD *)v13 + 1) + *(_QWORD *)(v17 + 12 * *v13) + v19;
        if (v20 > *(_QWORD *)(v17 + 12 * (int)v15))
        {
          result = operations_research::sat::PrecedencesPropagator::EnqueueAndCheck((uint64_t)this, v13, v20, *((_QWORD *)this + 6));
          if (!(_DWORD)result)
            return result;
        }
      }
    }
    ++v10;
    v11 -= 4;
    if (!v11)
      goto LABEL_3;
  }
}

uint64_t operations_research::sat::PrecedencesPropagator::EnqueueAndCheck(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  void **v5;
  int *v6;
  unint64_t v7;
  _DWORD *v8;
  void **v9;
  _DWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  int v17;
  unint64_t v18;
  void **v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  int *v27;
  uint64_t v28;
  unint64_t v29;
  int *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  int *v35;
  uint64_t v36;
  __int128 v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  _DWORD *v48;
  _DWORD *v49;
  _DWORD *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  size_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  void **v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _BYTE *v86;
  _DWORD *v87;
  char *v88;
  int64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  _OWORD *v94;
  char *v95;
  uint64_t v96;
  __int128 v97;
  int v98;
  char *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  void **v103;
  _QWORD *v104;
  _DWORD *v108;
  _BYTE v109[16];
  __int128 v110;
  uint64_t v111;

  v5 = (void **)(a1 + 400);
  v6 = *(int **)(a1 + 400);
  *(_QWORD *)(a1 + 408) = v6;
  v7 = *((_QWORD *)a2 + 3);
  if ((v7 & 1) != 0)
    v8 = (_DWORD *)*((_QWORD *)a2 + 4);
  else
    v8 = a2 + 8;
  if (v7 >= 2)
  {
    v16 = &v8[v7 >> 1];
    v108 = v16;
    do
    {
      while (1)
      {
        v17 = *v8 ^ 1;
        v18 = *(_QWORD *)(a1 + 416);
        if ((unint64_t)v6 >= v18)
          break;
        *v6++ = v17;
        *(_QWORD *)(a1 + 408) = v6;
        if (++v8 == v16)
          goto LABEL_5;
      }
      v19 = v5;
      v20 = (int *)*v5;
      v21 = (char *)v6 - (_BYTE *)*v5;
      v22 = v21 >> 2;
      v23 = (v21 >> 2) + 1;
      if (v23 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v24 = v18 - (_QWORD)v20;
      if (v24 >> 1 > v23)
        v23 = v24 >> 1;
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
        v25 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v25 = v23;
      if (v25)
      {
        if (v25 >> 62)
          goto LABEL_104;
        v26 = operator new(4 * v25);
        v27 = (int *)&v26[4 * v22];
        *v27 = v17;
        v28 = (uint64_t)(v27 + 1);
        if (v6 == v20)
          goto LABEL_24;
      }
      else
      {
        v26 = 0;
        v27 = (int *)(4 * v22);
        *(_DWORD *)(4 * v22) = v17;
        v28 = 4 * v22 + 4;
        if (v6 == v20)
          goto LABEL_24;
      }
      v29 = (char *)(v6 - 1) - (char *)v20;
      if (v29 >= 0xBC)
      {
        if (&v26[v21 - 4 - (v29 & 0xFFFFFFFFFFFFFFFCLL)] > &v26[v21 - 4])
        {
          v30 = v6;
        }
        else if ((int *)((char *)v6 - (v29 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v6 - 1)
        {
          v30 = v6;
        }
        else if ((unint64_t)((char *)v6 - &v26[v21]) >= 0x20)
        {
          v32 = (v29 >> 2) + 1;
          v33 = 4 * (v32 & 0x7FFFFFFFFFFFFFF8);
          v30 = &v6[v33 / 0xFFFFFFFFFFFFFFFCLL];
          v27 = (int *)((char *)v27 - v33);
          v34 = &v26[4 * v22 - 16];
          v35 = v6 - 4;
          v36 = v32 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v37 = *(_OWORD *)v35;
            *(v34 - 1) = *((_OWORD *)v35 - 1);
            *v34 = v37;
            v34 -= 2;
            v35 -= 8;
            v36 -= 8;
          }
          while (v36);
          if (v32 == (v32 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_24;
        }
        else
        {
          v30 = v6;
        }
      }
      else
      {
        v30 = v6;
      }
      do
      {
        v31 = *--v30;
        *--v27 = v31;
      }
      while (v30 != v20);
LABEL_24:
      *(_QWORD *)(a1 + 400) = v27;
      *(_QWORD *)(a1 + 408) = v28;
      *(_QWORD *)(a1 + 416) = &v26[4 * v25];
      if (v20)
        operator delete(v20);
      v5 = v19;
      v16 = v108;
      *(_QWORD *)(a1 + 408) = v28;
      ++v8;
      v6 = (int *)v28;
    }
    while (v8 != v108);
  }
LABEL_5:
  v9 = v5;
  v10 = *(_DWORD **)(a1 + 424);
  *(_QWORD *)(a1 + 432) = v10;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) + 12 * *a2);
  LODWORD(v110) = *a2;
  *(_QWORD *)((char *)&v110 + 4) = v11;
  v12 = HIDWORD(v11);
  v13 = *(_QWORD *)(a1 + 440);
  if ((unint64_t)v10 >= v13)
  {
    v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v10) >> 2);
    v39 = 2 * v38;
    if (2 * v38 <= 1)
      v39 = 1;
    if (v38 >= 0xAAAAAAAAAAAAAAALL)
      v40 = 0x1555555555555555;
    else
      v40 = v39;
    if (v40 > 0x1555555555555555)
      goto LABEL_104;
    v41 = 3 * v40;
    v42 = operator new(12 * v40);
    *(_QWORD *)v42 = v110;
    v42[2] = v12;
    v14 = v42 + 3;
    *(_QWORD *)(a1 + 424) = v42;
    *(_QWORD *)(a1 + 432) = v42 + 3;
    *(_QWORD *)(a1 + 440) = &v42[v41];
    v15 = a3;
    if (v10)
      operator delete(v10);
  }
  else
  {
    *(_QWORD *)v10 = v110;
    v10[2] = v12;
    v14 = v10 + 3;
    v15 = a3;
  }
  v43 = (_QWORD *)(a1 + 424);
  *(_QWORD *)(a1 + 432) = v14;
  v44 = *(_QWORD *)(a1 + 56);
  v45 = a2[1];
  v46 = *(_QWORD *)(*(_QWORD *)(v44 + 40) + 12 * (v45 ^ 1));
  if (-v46 >= v15)
  {
    LODWORD(v110) = a2[1];
    *(_QWORD *)((char *)&v110 + 4) = v15;
    return operations_research::sat::IntegerTrail::Enqueue(v44, v110, SHIDWORD(v15), *(char **)(a1 + 400), (uint64_t)(*(_QWORD *)(a1 + 408) - *(_QWORD *)(a1 + 400)) >> 2, *(uint64_t **)(a1 + 424), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 432) - *(_QWORD *)(a1 + 424)) >> 2));
  }
  LODWORD(v110) = v45 ^ 1;
  *(_QWORD *)((char *)&v110 + 4) = v46;
  v48 = *(_DWORD **)(a1 + 432);
  v47 = *(_QWORD *)(a1 + 440);
  if ((unint64_t)v48 < v47)
  {
    *(_QWORD *)v48 = v110;
    v48[2] = HIDWORD(v46);
    v49 = v48 + 3;
    goto LABEL_65;
  }
  v51 = (_DWORD *)*v43;
  v52 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v48 - *v43) >> 2);
  v53 = v52 + 1;
  if (v52 + 1 > 0x1555555555555555)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - (_QWORD)v51) >> 2);
  if (2 * v54 > v53)
    v53 = 2 * v54;
  if (v54 >= 0xAAAAAAAAAAAAAAALL)
    v55 = 0x1555555555555555;
  else
    v55 = v53;
  if (v55)
  {
    if (v55 <= 0x1555555555555555)
    {
      v56 = (char *)operator new(12 * v55);
      goto LABEL_60;
    }
LABEL_104:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  v56 = 0;
LABEL_60:
  v57 = &v56[12 * v52];
  v58 = &v56[12 * v55];
  *(_QWORD *)v57 = v110;
  *((_DWORD *)v57 + 2) = HIDWORD(v46);
  v49 = v57 + 12;
  if (v48 == v51)
  {
    v15 = a3;
    *(_QWORD *)(a1 + 424) = v57;
    *(_QWORD *)(a1 + 432) = v49;
    *(_QWORD *)(a1 + 440) = v58;
    if (v48)
LABEL_64:
      operator delete(v48);
  }
  else
  {
    v15 = a3;
    do
    {
      v59 = *(_QWORD *)(v48 - 3);
      v48 -= 3;
      v60 = v48[2];
      *(_QWORD *)(v57 - 12) = v59;
      v57 -= 12;
      *((_DWORD *)v57 + 2) = v60;
    }
    while (v48 != v51);
    v48 = (_DWORD *)*v43;
    *(_QWORD *)(a1 + 424) = v57;
    *(_QWORD *)(a1 + 432) = v49;
    *(_QWORD *)(a1 + 440) = v58;
    if (v48)
      goto LABEL_64;
  }
LABEL_65:
  *(_QWORD *)(a1 + 432) = v49;
  v61 = *(_QWORD *)(a1 + 424);
  v111 = 0;
  v110 = 0uLL;
  v62 = (uint64_t)v49 - v61;
  if (v62)
  {
    v63 = v62 / 12;
    if ((unint64_t)(v62 / 12) >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v64 = 8 * v63;
    v65 = (char *)operator new(8 * v63);
    v66 = &v65[8 * v63];
    memset_pattern16(v65, &unk_22DCF6160, v64);
  }
  else
  {
    v66 = 0;
    v65 = 0;
  }
  operations_research::sat::IntegerTrail::RelaxLinearReason(*(std::vector<int> **)(a1 + 56), v15 + v46 - 1, (uint64_t)v65, (v66 - v65) >> 3, (char **)(a1 + 424));
  v67 = *(_QWORD *)(a1 + 56);
  v68 = *(_DWORD *)(*(_QWORD *)(v67 + 408) + 4 * a2[1]);
  if (v68 == -1)
  {
    v73 = *(char **)(a1 + 400);
    v74 = *(char **)(a1 + 408);
    v75 = *(uint64_t **)(a1 + 424);
    v76 = *(_QWORD *)(a1 + 432);
    v77 = *(_QWORD *)(v67 + 936);
    *(_QWORD *)(v77 + 144) = 0;
    v78 = (void **)(v77 + 96);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((_QWORD *)(v77 + 96), v73, v74, (v74 - v73) >> 2);
    operations_research::sat::IntegerTrail::MergeReasonInto(v67, v75, 0xAAAAAAAAAAAAAAABLL * ((v76 - (uint64_t)v75) >> 2), v78);
    goto LABEL_99;
  }
  v69 = (unint64_t)v68 >> 6;
  if (((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v67 + 936) + 24) + 8 * v69) >> v68) & 1) != 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v109, (google::glog_internal_namespace_ *)"./ortools/sat/precedences.cc", 468);
    v104 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v109);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)"Check failed: !integer_trail_->IsCurrentlyIgnored(arc.head_var) ", 64);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v109);
  }
  if (((*(_QWORD *)(*(_QWORD *)(a4 + 24) + 8 * v69) >> (v68 & 0x3F ^ 1u)) & 1) == 0)
  {
    operations_research::sat::IntegerTrail::EnqueueLiteral(*(_QWORD *)(a1 + 56), *(_DWORD *)(*(_QWORD *)(v67 + 408) + 4 * a2[1]), *(char **)(a1 + 400), (uint64_t)(*(_QWORD *)(a1 + 408) - *(_QWORD *)(a1 + 400)) >> 2, *(char **)(a1 + 424), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 432) - *(_QWORD *)(a1 + 424)) >> 2));
    v79 = 1;
    if (!v65)
      return v79;
    goto LABEL_100;
  }
  v71 = *(char **)(a1 + 408);
  v70 = *(_QWORD *)(a1 + 416);
  if ((unint64_t)v71 >= v70)
  {
    v80 = (char *)*v9;
    v81 = v71 - (_BYTE *)*v9;
    v82 = v81 >> 2;
    v83 = (v81 >> 2) + 1;
    if (v83 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v84 = v70 - (_QWORD)v80;
    if (v84 >> 1 > v83)
      v83 = v84 >> 1;
    if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL)
      v85 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v85 = v83;
    if (v85)
    {
      if (v85 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v86 = operator new(4 * v85);
      v87 = &v86[4 * v82];
      v88 = &v86[4 * v85];
      *v87 = v68;
      v72 = (char *)(v87 + 1);
      v89 = v71 - v80;
      if (v71 == v80)
        goto LABEL_96;
    }
    else
    {
      v86 = 0;
      v87 = (_DWORD *)(4 * v82);
      v88 = 0;
      *(_DWORD *)(4 * v82) = v68;
      v72 = (char *)(4 * v82 + 4);
      v89 = v71 - v80;
      if (v71 == v80)
      {
LABEL_96:
        *(_QWORD *)(a1 + 400) = v87;
        *(_QWORD *)(a1 + 408) = v72;
        *(_QWORD *)(a1 + 416) = v88;
        if (v80)
        {
          operator delete(v80);
          v67 = *(_QWORD *)(a1 + 56);
        }
        goto LABEL_98;
      }
    }
    v90 = v89 - 4;
    if (v90 < 0x2C)
      goto LABEL_111;
    if ((unint64_t)(v71 - v86 - v81) < 0x20)
      goto LABEL_111;
    v91 = (v90 >> 2) + 1;
    v92 = 4 * (v91 & 0x7FFFFFFFFFFFFFF8);
    v93 = &v71[-v92];
    v87 = (_DWORD *)((char *)v87 - v92);
    v94 = &v86[4 * v82 - 16];
    v95 = v71 - 16;
    v96 = v91 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v97 = *(_OWORD *)v95;
      *(v94 - 1) = *((_OWORD *)v95 - 1);
      *v94 = v97;
      v94 -= 2;
      v95 -= 32;
      v96 -= 8;
    }
    while (v96);
    v71 = v93;
    if (v91 != (v91 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_111:
      do
      {
        v98 = *((_DWORD *)v71 - 1);
        v71 -= 4;
        *--v87 = v98;
      }
      while (v71 != v80);
    }
    goto LABEL_96;
  }
  *(_DWORD *)v71 = v68;
  v72 = v71 + 4;
LABEL_98:
  *(_QWORD *)(a1 + 408) = v72;
  v99 = *(char **)(a1 + 400);
  v100 = *(uint64_t **)(a1 + 424);
  v101 = *(_QWORD *)(a1 + 432);
  v102 = *(_QWORD *)(v67 + 936);
  *(_QWORD *)(v102 + 144) = 0;
  v103 = (void **)(v102 + 96);
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((_QWORD *)(v102 + 96), v99, v72, (v72 - v99) >> 2);
  operations_research::sat::IntegerTrail::MergeReasonInto(v67, v100, 0xAAAAAAAAAAAAAAABLL * ((v101 - (uint64_t)v100) >> 2), v103);
LABEL_99:
  v79 = 0;
  if (v65)
LABEL_100:
    operator delete(v65);
  return v79;
}

void sub_22DBB5068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::PrecedencesPropagator::InitializeBFQueueWithModifiedNodes(operations_research::sat::PrecedencesPropagator *this)
{
  uint64_t v2;
  uint64_t *v3;
  void **v4;
  void **v5;
  unint64_t v6;
  unint64_t v7;
  void **v8;
  char *v9;
  int *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;
  unint64_t v16;
  uint64_t v17;
  int *v18;
  int *i;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v2 = *((_QWORD *)this + 21) - *((_QWORD *)this + 20);
  v3 = (uint64_t *)((char *)this + 496);
  std::vector<BOOL>::resize((uint64_t)this + 496, (int)(v2 >> 5), 0);
  v4 = (void **)*((_QWORD *)this + 57);
  v5 = (void **)*((_QWORD *)this + 58);
  v6 = (char *)v5 - (char *)v4;
  if (v5 == v4)
  {
    v11 = (_QWORD *)((char *)this + 488);
  }
  else
  {
    v7 = *((_QWORD *)this + 60);
    v8 = &v4[v7 >> 10];
    v9 = (char *)*v8;
    v10 = (int *)((char *)*v8 + 4 * (v7 & 0x3FF));
    v11 = (_QWORD *)((char *)this + 488);
    v12 = *(uint64_t *)((char *)v4 + (((*((_QWORD *)this + 61) + v7) >> 7) & 0x1FFFFFFFFFFFFF8))
        + 4 * ((*((_QWORD *)this + 61) + v7) & 0x3FF);
    if (v10 != (int *)v12)
    {
      v13 = *v3;
      do
      {
        v14 = *v10++;
        *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v14);
        if ((char *)v10 - v9 == 4096)
        {
          v15 = (int *)v8[1];
          ++v8;
          v9 = (char *)v15;
          v10 = v15;
        }
      }
      while (v10 != (int *)v12);
    }
  }
  *v11 = 0;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      v5 = (void **)*((_QWORD *)this + 58);
      v4 = (void **)(*((_QWORD *)this + 57) + 8);
      *((_QWORD *)this + 57) = v4;
      v6 = (char *)v5 - (char *)v4;
    }
    while ((unint64_t)((char *)v5 - (char *)v4) > 0x10);
  }
  v16 = v6 >> 3;
  if (v16 == 1)
  {
    v17 = 512;
  }
  else
  {
    if (v16 != 2)
      goto LABEL_15;
    v17 = 1024;
  }
  *((_QWORD *)this + 60) = v17;
LABEL_15:
  v18 = (int *)*((_QWORD *)this + 17);
  for (i = (int *)*((_QWORD *)this + 18); v18 != i; ++v18)
  {
    v20 = *v18;
    if (*v18 < (int)((unint64_t)v2 >> 5))
    {
      if (v5 == v4)
        v21 = 0;
      else
        v21 = (((char *)v5 - (char *)v4) << 7) - 1;
      v22 = *((_QWORD *)this + 61);
      v23 = v22 + *((_QWORD *)this + 60);
      if (v21 == v23)
      {
        std::deque<int>::__add_back_capacity((uint64_t)this + 448);
        v4 = (void **)*((_QWORD *)this + 57);
        v5 = (void **)*((_QWORD *)this + 58);
        v22 = *((_QWORD *)this + 61);
        v23 = *((_QWORD *)this + 60) + v22;
      }
      (*(_DWORD **)((char *)v4 + ((v23 >> 7) & 0x1FFFFFFFFFFFFF8)))[v23 & 0x3FF] = v20;
      *v11 = v22 + 1;
      *(_QWORD *)(*v3 + (((unint64_t)v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    }
  }
}

uint64_t operations_research::sat::PrecedencesPropagator::BellmanFordTarjan(operations_research::sat::PrecedencesPropagator *this, operations_research::sat::Trail *a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  int *v13;
  unint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t result;
  uint64_t v31;
  char *v32;
  int *v33;
  char *v34;
  int v35;
  int v36;
  char *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  void **v56;
  int *v57;
  int v58;
  unint64_t v59;
  int v60;
  int *v61;
  unint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  _BYTE *v72;
  int *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  _OWORD *v78;
  char *v79;
  uint64_t v80;
  __int128 v81;
  int v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  void **v88;
  int *v89;
  int *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t *v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t *v100;
  std::vector<int>::value_type __x[2];
  char *v102;
  uint64_t v103;
  char v104;
  operations_research::sat::PrecedencesPropagator *v105;
  char v106;

  v3 = (int)((uint64_t)(*((_QWORD *)this + 21) - *((_QWORD *)this + 20)) >> 5);
  v98 = (_QWORD *)((char *)this + 520);
  std::vector<BOOL>::resize((uint64_t)this + 520, v3, 0);
  __x[0] = -1;
  v4 = *((_QWORD *)this + 68);
  v5 = (*((_QWORD *)this + 69) - v4) >> 2;
  v100 = (uint64_t *)((char *)this + 544);
  if (v3 <= v5)
  {
    if (v3 < v5)
      *((_QWORD *)this + 69) = v4 + 4 * v3;
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 544), v3 - v5, __x);
  }
  v104 = 1;
  v105 = this;
  v6 = *((_QWORD *)this + 61);
  if (!v6)
  {
LABEL_88:
    result = 1;
LABEL_89:
    v89 = (int *)*((_QWORD *)this + 17);
    v90 = (int *)*((_QWORD *)this + 18);
    if (v89 != v90)
      goto LABEL_90;
    return result;
  }
  v96 = (uint64_t *)((char *)this + 456);
  v97 = (_QWORD *)((char *)this + 400);
  while (1)
  {
    v8 = (void **)*((_QWORD *)this + 57);
    v9 = (*(int **)((char *)v8 + ((*((_QWORD *)this + 60) >> 7) & 0x1FFFFFFFFFFFFF8)))[*((_QWORD *)this + 60) & 0x3FFLL];
    v10 = *((_QWORD *)this + 60) + 1;
    *((_QWORD *)this + 60) = v10;
    *((_QWORD *)this + 61) = v6 - 1;
    if (v10 >= 0x800)
    {
      operator delete(*v8);
      *((_QWORD *)this + 57) += 8;
      *((_QWORD *)this + 60) -= 1024;
    }
    v7 = (v9 >> 3) & 0x1FFFFFFFFFFFFFF8;
    *(_QWORD *)(*((_QWORD *)this + 62) + v7) &= ~(1 << v9);
    if ((*(_QWORD *)(*((_QWORD *)this + 65) + v7) & (1 << v9)) == 0)
    {
      v11 = (_QWORD *)(*((_QWORD *)this + 20) + 32 * v9);
      v14 = *v11;
      v13 = (int *)(v11 + 1);
      v12 = v14;
      if ((v14 & 1) != 0)
        v13 = *(int **)v13;
      if (v12 >= 2)
        break;
    }
LABEL_8:
    v6 = *((_QWORD *)this + 61);
    if (!v6)
      goto LABEL_88;
  }
  v15 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 7) + 40) + 12 * (int)v9);
  v16 = &v13[v12 >> 1];
  while (1)
  {
    v17 = *v13;
    v18 = *((_QWORD *)this + 23);
    v19 = v18 + ((uint64_t)*v13 << 6);
    v20 = *(_DWORD *)(v19 + 16);
    v21 = (_QWORD *)*((_QWORD *)this + 7);
    if (v20 == -1)
    {
      v23 = 0;
      v22 = v21[5];
    }
    else
    {
      v22 = v21[5];
      v23 = *(_QWORD *)(v22 + 12 * v20);
    }
    v24 = *(_QWORD *)(v19 + 8) + v15 + v23;
    v25 = v18 + ((uint64_t)v17 << 6);
    v28 = *(int *)(v25 + 4);
    v27 = (int *)(v25 + 4);
    v26 = v28;
    if (v24 <= *(_QWORD *)(v22 + 12 * (int)v28))
      goto LABEL_16;
    v29 = *(int *)(v21[51] + 4 * v26);
    if ((_DWORD)v29 != -1
      && ((*(_QWORD *)(*(_QWORD *)(v21[117] + 24) + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v29) & 1) != 0)
    {
      goto LABEL_16;
    }
    result = operations_research::sat::PrecedencesPropagator::EnqueueAndCheck((uint64_t)this, (int *)v19, *(_QWORD *)(v19 + 8) + v15 + v23, (uint64_t)a2);
    if (!(_DWORD)result)
      goto LABEL_89;
    if (!operations_research::sat::PrecedencesPropagator::DisassembleSubtree(this, *v27, *(_DWORD *)v19, v98))
    {
      v39 = *v27;
      v40 = *v100;
      v41 = *(int *)(*v100 + 4 * v39);
      if ((_DWORD)v41 != -1)
        *(_BYTE *)(*((_QWORD *)this + 23) + (v41 << 6) + 56) = 0;
      if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 7) + 40) + 12 * (int)v39) == v24)
        *(_BYTE *)(*((_QWORD *)this + 23) + ((uint64_t)v17 << 6) + 56) = 1;
      else
        v17 = -1;
      *(_DWORD *)(v40 + 4 * v39) = v17;
      v42 = *v27;
      v43 = (v42 >> 3) & 0x1FFFFFFFFFFFFFF8;
      *(_QWORD *)(*((_QWORD *)this + 65) + v43) &= ~(1 << v42);
      v44 = *((_QWORD *)this + 62);
      if ((*(_QWORD *)(v44 + v43) & (1 << v42)) == 0)
      {
        v45 = *((_QWORD *)this + 58);
        v46 = *v96;
        if (v45 == *v96)
          v47 = 0;
        else
          v47 = ((v45 - *v96) << 7) - 1;
        v48 = *((_QWORD *)this + 61);
        v49 = v48 + *((_QWORD *)this + 60);
        if (v47 == v49)
        {
          std::deque<int>::__add_back_capacity((uint64_t)this + 448);
          v46 = *((_QWORD *)this + 57);
          v48 = *((_QWORD *)this + 61);
          v49 = *((_QWORD *)this + 60) + v48;
          v44 = *((_QWORD *)this + 62);
        }
        *(_DWORD *)(*(_QWORD *)(v46 + ((v49 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v49 & 0x3FF)) = v42;
        *((_QWORD *)this + 61) = v48 + 1;
        *(_QWORD *)(v44 + (((unint64_t)*v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *v27;
      }
      goto LABEL_16;
    }
    *(_QWORD *)__x = 0;
    v102 = 0;
    v103 = 0;
    operations_research::sat::PrecedencesPropagator::AnalyzePositiveCycle(this, v17, v31, __x, v97, (uint64_t)this + 424);
    if (*(char **)__x == v102)
    {
      v50 = *((_QWORD *)this + 7);
      v51 = (char *)*((_QWORD *)this + 50);
      v52 = (char *)*((_QWORD *)this + 51);
      v54 = (uint64_t *)*((_QWORD *)this + 53);
      v53 = *((_QWORD *)this + 54);
      v55 = *(_QWORD *)(v50 + 936);
      *(_QWORD *)(v55 + 144) = 0;
      v56 = (void **)(v55 + 96);
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((_QWORD *)(v55 + 96), v51, v52, (v52 - v51) >> 2);
      operations_research::sat::IntegerTrail::MergeReasonInto(v50, v54, 0xAAAAAAAAAAAAAAABLL * ((v53 - (uint64_t)v54) >> 2), v56);
LABEL_83:
      v60 = 0;
      v61 = *(int **)__x;
      if (!*(_QWORD *)__x)
        goto LABEL_85;
LABEL_84:
      v102 = (char *)v61;
      operator delete(v61);
      goto LABEL_85;
    }
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::Literal *,false>(*(int **)__x, v102, (uint64_t)&v106, 126 - 2 * __clz((uint64_t)&v102[-*(_QWORD *)__x] >> 2), 1);
    v33 = *(int **)__x;
    v32 = v102;
    if (*(char **)__x != v102)
    {
      v34 = (char *)(*(_QWORD *)__x + 4);
      while (v34 != v102)
      {
        v36 = *((_DWORD *)v34 - 1);
        v35 = *(_DWORD *)v34;
        v34 += 4;
        if (v36 == v35)
        {
          v37 = v34 - 8;
          while (v34 != v32)
          {
            v38 = v35;
            v35 = *(_DWORD *)v34;
            if (v38 != *(_DWORD *)v34)
            {
              *((_DWORD *)v37 + 1) = v35;
              v37 += 4;
            }
            v34 += 4;
          }
          if (v32 == v37 + 4)
            break;
          v32 = v37 + 4;
          v102 = v37 + 4;
          if (v33 == (int *)(v37 + 4))
            goto LABEL_59;
          goto LABEL_52;
        }
      }
    }
    if (v33 == (int *)v32)
      goto LABEL_59;
LABEL_52:
    v57 = v33;
    do
    {
      v58 = *v57;
      if (((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 6) + 24)
                       + (((unint64_t)v58 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v58 & 0x3F ^ 1u)) & 1) != 0)
      {
        v63 = (char *)*((_QWORD *)this + 51);
        v62 = *((_QWORD *)this + 52);
        if ((unint64_t)v63 < v62)
        {
          *(_DWORD *)v63 = v58;
          v64 = v63 + 4;
LABEL_82:
          *((_QWORD *)this + 51) = v64;
          v83 = *((_QWORD *)this + 7);
          v84 = (char *)*((_QWORD *)this + 50);
          v86 = (uint64_t *)*((_QWORD *)this + 53);
          v85 = *((_QWORD *)this + 54);
          v87 = *(_QWORD *)(v83 + 936);
          *(_QWORD *)(v87 + 144) = 0;
          v88 = (void **)(v87 + 96);
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((_QWORD *)(v87 + 96), v84, v64, (v64 - v84) >> 2);
          operations_research::sat::IntegerTrail::MergeReasonInto(v83, v86, 0xAAAAAAAAAAAAAAABLL * ((v85 - (uint64_t)v86) >> 2), v88);
          goto LABEL_83;
        }
        v65 = (char *)*v97;
        v66 = (uint64_t)&v63[-*v97];
        v67 = v66 >> 2;
        v68 = (v66 >> 2) + 1;
        if (v68 >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v69 = v62 - (_QWORD)v65;
        if (v69 >> 1 > v68)
          v68 = v69 >> 1;
        if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL)
          v70 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v70 = v68;
        if (v70)
        {
          v95 = &v63[-*v97];
          if (v70 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v71 = v70;
          v72 = operator new(4 * v70);
          v70 = v71;
          v66 = (uint64_t)v95;
          v73 = (int *)&v72[4 * v67];
          *v73 = v58;
          v64 = (char *)(v73 + 1);
          if (v63 == v65)
            goto LABEL_80;
        }
        else
        {
          v72 = 0;
          v73 = (int *)(4 * v67);
          *(_DWORD *)(4 * v67) = v58;
          v64 = (char *)(4 * v67 + 4);
          if (v63 == v65)
          {
LABEL_80:
            *((_QWORD *)this + 50) = v73;
            *((_QWORD *)this + 51) = v64;
            *((_QWORD *)this + 52) = &v72[4 * v70];
            if (v65)
              operator delete(v65);
            goto LABEL_82;
          }
        }
        v74 = v63 - 4 - v65;
        if (v74 < 0x2C)
          goto LABEL_100;
        if ((unint64_t)(v63 - &v72[v66]) < 0x20)
          goto LABEL_100;
        v75 = (v74 >> 2) + 1;
        v76 = 4 * (v75 & 0x7FFFFFFFFFFFFFF8);
        v77 = &v63[-v76];
        v73 = (int *)((char *)v73 - v76);
        v78 = &v72[4 * v67 - 16];
        v79 = v63 - 16;
        v80 = v75 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v81 = *(_OWORD *)v79;
          *(v78 - 1) = *((_OWORD *)v79 - 1);
          *v78 = v81;
          v78 -= 2;
          v79 -= 32;
          v80 -= 8;
        }
        while (v80);
        v63 = v77;
        if (v75 != (v75 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_100:
          do
          {
            v82 = *((_DWORD *)v63 - 1);
            v63 -= 4;
            *--v73 = v82;
          }
          while (v63 != v65);
        }
        goto LABEL_80;
      }
      ++v57;
    }
    while (v57 != (int *)v32);
    do
    {
      v59 = *v33;
      if (((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 6) + 24) + ((v59 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v59) & 1) == 0)
        operations_research::sat::IntegerTrail::EnqueueLiteral(*((_QWORD *)this + 7), v59, *((char **)this + 50), (uint64_t)(*((_QWORD *)this + 51) - *((_QWORD *)this + 50)) >> 2, *((char **)this + 53), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 54) - *((_QWORD *)this + 53)) >> 2));
      ++v33;
    }
    while (v33 != (int *)v32);
LABEL_59:
    v60 = 1;
    v61 = *(int **)__x;
    if (*(_QWORD *)__x)
      goto LABEL_84;
LABEL_85:
    if (!v60)
      break;
LABEL_16:
    if (++v13 == v16)
      goto LABEL_8;
  }
  result = 0;
  v89 = (int *)*((_QWORD *)this + 17);
  v90 = (int *)*((_QWORD *)this + 18);
  if (v89 == v90)
    return result;
LABEL_90:
  v91 = (*((_QWORD *)this + 21) - *((_QWORD *)this + 20)) >> 5;
  do
  {
    v92 = *v89;
    if ((int)v92 < (int)v91)
    {
      v93 = *v100;
      v94 = *(int *)(*v100 + 4 * v92);
      if ((_DWORD)v94 != -1)
      {
        *(_BYTE *)(*((_QWORD *)this + 23) + (v94 << 6) + 56) = 0;
        *(_DWORD *)(v93 + 4 * v92) = -1;
        *(_QWORD *)(*((_QWORD *)this + 65) + ((v92 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v92);
      }
    }
    ++v89;
  }
  while (v89 != v90);
  return result;
}

void sub_22DBB5A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20)
{
  if (__p)
  {
    operator delete(__p);
    absl::Cleanup<operations_research::sat::PrecedencesPropagator::BellmanFordTarjan(operations_research::sat::Trail *)::$_0>::~Cleanup((uint64_t)&a20);
    _Unwind_Resume(a1);
  }
  absl::Cleanup<operations_research::sat::PrecedencesPropagator::BellmanFordTarjan(operations_research::sat::Trail *)::$_0>::~Cleanup((uint64_t)&a20);
  _Unwind_Resume(a1);
}

int *operations_research::sat::PrecedencesPropagator::PropagateOptionalArcs(int **this, operations_research::sat::Trail *a2)
{
  int v2;
  operations_research::sat::PrecedencesPropagator *v3;
  int *result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  int *v9;
  unint64_t v10;
  int *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unint64_t v16;
  unint64_t *v17;
  int *v18;
  int *v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  _DWORD *v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  int v55;
  char *v56;
  unint64_t v57;
  int *v58;
  uint64_t v59;
  int v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  int *v68;
  unint64_t v69;
  char *v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  _OWORD *v75;
  char *v76;
  uint64_t v77;
  __int128 v78;
  operations_research::sat::Trail *v79;
  int *v80;
  char **v81;
  int *v82;
  int *v83;
  int *v84;
  void **v85;
  operations_research::sat::PrecedencesPropagator *v86;
  unint64_t v87;
  unint64_t v88;
  _BYTE v89[12];

  v3 = (operations_research::sat::PrecedencesPropagator *)this;
  result = this[17];
  v80 = (int *)*((_QWORD *)v3 + 18);
  if (result != v80)
  {
    v81 = (char **)((char *)v3 + 424);
    v85 = (void **)((char *)v3 + 400);
    v86 = v3;
    v79 = a2;
    do
    {
      v5 = *result;
      v6 = *((_QWORD *)v3 + 26);
      if ((int)v5 >= (int)((unint64_t)(*((_QWORD *)v3 + 27) - v6) >> 5))
        return result;
      v7 = (_QWORD *)(v6 + 32 * v5);
      v10 = *v7;
      v9 = (int *)(v7 + 1);
      v8 = v10;
      if ((v10 & 1) != 0)
        v9 = *(int **)v9;
      if (v8 < 2)
        goto LABEL_3;
      v11 = &v9[v8 >> 1];
      v82 = v11;
      v83 = result;
      while (2)
      {
        v13 = *v9;
        v14 = *((_QWORD *)v3 + 29);
        v15 = (unsigned int *)(v14 + (v13 << 6));
        v17 = (unint64_t *)(v15 + 6);
        v16 = *((_QWORD *)v15 + 3);
        v18 = (int *)(v15 + 8);
        v19 = (int *)(v15 + 8);
        if ((v16 & 1) != 0)
          v19 = *(int **)v18;
        if (v16 < 2)
          goto LABEL_11;
        v20 = 0;
        v21 = 4 * (v16 >> 1);
        do
        {
          v23 = *v19++;
          v22 = v23;
          if (((1 << v23) & *(_QWORD *)(*((_QWORD *)a2 + 3) + (((unint64_t)v23 >> 3) & 0x1FFFFFFFFFFFFFF8))) == 0)
          {
            v2 = v22;
            ++v20;
          }
          v21 -= 4;
        }
        while (v21);
        if (v20 != 1
          || ((*(_QWORD *)(*((_QWORD *)a2 + 3) + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v2 & 0x3F ^ 1u)) & 1) != 0)
        {
          goto LABEL_11;
        }
        v24 = *(_QWORD *)(*((_QWORD *)v3 + 7) + 40);
        v25 = v14 + (v13 << 6);
        v28 = *(_DWORD *)(v25 + 4);
        v27 = v25 + 4;
        v26 = v28;
        v29 = *(_DWORD *)(v27 + 12);
        v30 = v29 == -1 ? 0 : *(_QWORD *)(v24 + 12 * v29);
        v31 = *v15;
        v32 = *(_QWORD *)(v24 + 12 * (int)v31);
        if ((int64_t)(*(_QWORD *)(v27 + 4) + v32 + v30) <= -*(_QWORD *)(v24 + 12 * (v26 ^ 1)))
          goto LABEL_11;
        v33 = (char *)*((_QWORD *)v3 + 53);
        *((_QWORD *)v3 + 54) = v33;
        v88 = __PAIR64__(v32, v31);
        v34 = HIDWORD(v32);
        v35 = *((_QWORD *)v3 + 55);
        if ((unint64_t)v33 >= v35)
        {
          v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (_QWORD)v33) >> 2);
          v38 = 2 * v37;
          if (2 * v37 <= 1)
            v38 = 1;
          if (v37 >= 0xAAAAAAAAAAAAAAALL)
            v39 = 0x1555555555555555;
          else
            v39 = v38;
          if (v39 > 0x1555555555555555)
LABEL_90:
            std::__throw_bad_array_new_length[abi:ne180100]();
          v40 = 3 * v39;
          v41 = operator new(12 * v39);
          *(_QWORD *)v41 = v88;
          v42 = (char *)&v41[v40];
          v41[2] = v34;
          v36 = (char *)(v41 + 3);
          v3 = v86;
          *((_QWORD *)v86 + 53) = v41;
          *((_QWORD *)v86 + 54) = v41 + 3;
          *((_QWORD *)v86 + 55) = v42;
          if (v33)
            operator delete(v33);
        }
        else
        {
          *(_QWORD *)v33 = v88;
          *((_DWORD *)v33 + 2) = HIDWORD(v32);
          v36 = v33 + 12;
          v3 = v86;
        }
        *((_QWORD *)v3 + 54) = v36;
        *(_DWORD *)v89 = *(_DWORD *)v27 ^ 1;
        *(_QWORD *)&v89[4] = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 7) + 40) + 12 * *(int *)v89);
        v43 = *(_QWORD *)v89;
        v44 = *((_QWORD *)v3 + 55);
        if ((unint64_t)v36 >= v44)
        {
          v46 = *v81;
          v47 = 0xAAAAAAAAAAAAAAABLL * ((v36 - *v81) >> 2);
          v48 = v47 + 1;
          if (v47 + 1 > 0x1555555555555555)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v44 - (_QWORD)v46) >> 2);
          if (2 * v49 > v48)
            v48 = 2 * v49;
          if (v49 >= 0xAAAAAAAAAAAAAAALL)
            v50 = 0x1555555555555555;
          else
            v50 = v48;
          if (v50)
          {
            if (v50 > 0x1555555555555555)
              goto LABEL_90;
            v51 = (char *)operator new(12 * v50);
            v43 = *(_QWORD *)v89;
          }
          else
          {
            v51 = 0;
          }
          v52 = &v51[12 * v47];
          v53 = &v51[12 * v50];
          *(_QWORD *)v52 = v43;
          *((_DWORD *)v52 + 2) = *(_DWORD *)&v89[8];
          v45 = v52 + 12;
          if (v36 == v46)
          {
            v3 = v86;
            *((_QWORD *)v86 + 53) = v52;
            *((_QWORD *)v86 + 54) = v45;
            *((_QWORD *)v86 + 55) = v53;
          }
          else
          {
            v3 = v86;
            do
            {
              v54 = *(_QWORD *)(v36 - 12);
              v36 -= 12;
              v55 = *((_DWORD *)v36 + 2);
              *(_QWORD *)(v52 - 12) = v54;
              v52 -= 12;
              *((_DWORD *)v52 + 2) = v55;
            }
            while (v36 != v46);
            v36 = (char *)*((_QWORD *)v86 + 53);
            *((_QWORD *)v86 + 53) = v52;
            *((_QWORD *)v86 + 54) = v45;
            *((_QWORD *)v86 + 55) = v53;
            if (!v36)
              goto LABEL_54;
          }
          operator delete(v36);
        }
        else
        {
          *(_QWORD *)v36 = *(_QWORD *)v89;
          *((_DWORD *)v36 + 2) = *(_DWORD *)&v89[8];
          v45 = v36 + 12;
        }
LABEL_54:
        *((_QWORD *)v3 + 54) = v45;
        v56 = (char *)*((_QWORD *)v3 + 50);
        *((_QWORD *)v3 + 51) = v56;
        v57 = *v17;
        if ((*v17 & 1) != 0)
          v18 = *(int **)v18;
        if (v57 < 2)
        {
          v12 = v56;
          goto LABEL_10;
        }
        v58 = &v18[v57 >> 1];
        v84 = v58;
        do
        {
          if (*v18 != v2)
          {
            v60 = *v18 ^ 1;
            v61 = *((_QWORD *)v3 + 52);
            if ((unint64_t)v56 < v61)
            {
              *(_DWORD *)v56 = v60;
              v59 = (uint64_t)(v56 + 4);
            }
            else
            {
              v62 = (char *)*v85;
              v63 = v56 - (_BYTE *)*v85;
              v64 = v63 >> 2;
              v65 = (v63 >> 2) + 1;
              if (v65 >> 62)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v66 = v61 - (_QWORD)v62;
              if (v66 >> 1 > v65)
                v65 = v66 >> 1;
              if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL)
                v65 = 0x3FFFFFFFFFFFFFFFLL;
              v87 = v65;
              if (v65)
              {
                if (v65 >> 62)
                  goto LABEL_90;
                v67 = operator new(4 * v65);
                v68 = (int *)&v67[4 * v64];
                *v68 = v60;
                v59 = (uint64_t)(v68 + 1);
                if (v56 != v62)
                {
LABEL_71:
                  v69 = v56 - 4 - v62;
                  if (v69 < 0xBC
                    || &v67[v63 - 4 - (v69 & 0xFFFFFFFFFFFFFFFCLL)] > &v67[v63 - 4]
                    || &v56[-(v69 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v56 - 4
                    || (unint64_t)(v56 - v67 - v63) < 0x20)
                  {
                    v70 = v56;
                    v3 = v86;
                    v71 = v87;
                  }
                  else
                  {
                    v73 = (v69 >> 2) + 1;
                    v74 = 4 * (v73 & 0x7FFFFFFFFFFFFFF8);
                    v70 = &v56[-v74];
                    v68 = (int *)((char *)v68 - v74);
                    v75 = &v67[4 * v64 - 16];
                    v76 = v56 - 16;
                    v77 = v73 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v78 = *(_OWORD *)v76;
                      *(v75 - 1) = *((_OWORD *)v76 - 1);
                      *v75 = v78;
                      v75 -= 2;
                      v76 -= 32;
                      v77 -= 8;
                    }
                    while (v77);
                    v3 = v86;
                    v71 = v87;
                    if (v73 == (v73 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_74:
                      *((_QWORD *)v3 + 50) = v68;
                      *((_QWORD *)v3 + 51) = v59;
                      *((_QWORD *)v3 + 52) = &v67[4 * v71];
                      if (v62)
                        goto LABEL_75;
                      goto LABEL_76;
                    }
                  }
                  do
                  {
                    v72 = *((_DWORD *)v70 - 1);
                    v70 -= 4;
                    *--v68 = v72;
                  }
                  while (v70 != v62);
                  goto LABEL_74;
                }
              }
              else
              {
                v67 = 0;
                v68 = (int *)(4 * v64);
                *(_DWORD *)(4 * v64) = v60;
                v59 = 4 * v64 + 4;
                if (v56 != v62)
                  goto LABEL_71;
              }
              v3 = v86;
              *((_QWORD *)v86 + 50) = v68;
              *((_QWORD *)v86 + 51) = v59;
              *((_QWORD *)v86 + 52) = &v67[4 * v87];
              if (v62)
LABEL_75:
                operator delete(v62);
LABEL_76:
              v58 = v84;
            }
            *((_QWORD *)v3 + 51) = v59;
            v56 = (char *)v59;
          }
          ++v18;
        }
        while (v18 != v58);
        v12 = (char *)*v85;
LABEL_10:
        operations_research::sat::IntegerTrail::EnqueueLiteral(*((_QWORD *)v3 + 7), v2 ^ 1, v12, (v56 - v12) >> 2, *((char **)v3 + 53), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v3 + 54) - *((_QWORD *)v3 + 53)) >> 2));
        a2 = v79;
        v11 = v82;
        result = v83;
LABEL_11:
        if (++v9 != v11)
          continue;
        break;
      }
LABEL_3:
      ++result;
    }
    while (result != v80);
  }
  return result;
}

uint64_t `non-virtual thunk to'operations_research::sat::PrecedencesPropagator::Propagate(operations_research::sat::PrecedencesPropagator *this)
{
  return operations_research::sat::PrecedencesPropagator::Propagate((operations_research::sat::PrecedencesPropagator *)((char *)this - 40));
}

uint64_t operations_research::sat::PrecedencesPropagator::PropagateOutgoingArcs(uint64_t *a1, int a2)
{
  _QWORD *v3;
  unint64_t v4;
  int *v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  int *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v3 = (_QWORD *)(a1[20] + 32 * a2);
  v6 = *v3;
  v5 = (int *)(v3 + 1);
  v4 = v6;
  if ((v6 & 1) != 0)
    v5 = *(int **)v5;
  if (v4 < 2)
    return 1;
  v8 = 4 * (v4 >> 1);
  while (1)
  {
    v9 = (int *)(a1[23] + ((uint64_t)*v5 << 6));
    v10 = (_QWORD *)a1[7];
    v11 = v9[1];
    v12 = *(int *)(v10[51] + 4 * v11);
    if ((_DWORD)v12 == -1
      || ((*(_QWORD *)(*(_QWORD *)(v10[117] + 24) + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
    {
      v13 = v10[5];
      v14 = v9[4];
      v15 = v14 == -1 ? 0 : *(_QWORD *)(v13 + 12 * v14);
      v16 = *((_QWORD *)v9 + 1) + *(_QWORD *)(v13 + 12 * *v9) + v15;
      if (v16 > *(_QWORD *)(v13 + 12 * (int)v11))
      {
        result = operations_research::sat::PrecedencesPropagator::EnqueueAndCheck((uint64_t)a1, v9, v16, a1[6]);
        if (!(_DWORD)result)
          break;
      }
    }
    ++v5;
    v8 -= 4;
    if (!v8)
      return 1;
  }
  return result;
}

void operations_research::sat::PrecedencesPropagator::Untrail(operations_research::sat::PrecedencesPropagator *this, const operations_research::sat::Trail *a2, int a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v6 = *((_DWORD *)this + 9);
  if (v6 > a3)
  {
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize((uint64_t)this + 80, -1431655765 * ((*(_QWORD *)(*((_QWORD *)this + 7) + 48) - *(_QWORD *)(*((_QWORD *)this + 7) + 40)) >> 2));
    v6 = *((_DWORD *)this + 9);
  }
  if (v6 > a3)
  {
    v7 = *((_QWORD *)a2 + 9);
    v8 = *((_QWORD *)this + 44);
    v9 = (unint64_t)(*((_QWORD *)this + 45) - v8) >> 5;
    do
    {
      *((_DWORD *)this + 9) = --v6;
      v10 = *(int *)(v7 + 4 * v6);
      if ((int)v10 < (int)v9)
      {
        v11 = (_QWORD *)(v8 + 32 * v10);
        v14 = *v11;
        v12 = (int *)(v11 + 1);
        v13 = v14;
        if ((v14 & 1) != 0)
          v12 = *(int **)v12;
        if (v13 >= 2)
        {
          v15 = *((_QWORD *)this + 47);
          v16 = 4 * (v13 >> 1);
          do
          {
            v17 = *v12;
            v18 = *(_DWORD *)(v15 + 4 * v17);
            *(_DWORD *)(v15 + 4 * v17) = v18 + 1;
            if (!v18)
            {
              v19 = 32 * *(int *)(*((_QWORD *)this + 23) + (v17 << 6));
              *(_QWORD *)(*((_QWORD *)this + 20) + v19) -= 2;
            }
            ++v12;
            v16 -= 4;
          }
          while (v16);
          v6 = *((_DWORD *)this + 9);
        }
      }
    }
    while (v6 > a3);
  }
}

void operations_research::sat::PrecedencesPropagator::ComputePrecedences(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  int *v13;
  unint64_t v14;
  int *v15;
  char *v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  int *v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  unint64_t v44;
  char *v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  __int128 v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  int *v58;
  int *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  __int128 *v68;
  __int128 *i;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  __int128 v74;
  int *v75;
  int *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v80;
  void **v81;
  uint64_t *v82;
  unint64_t v83;
  void **v84;
  int *v85;
  unint64_t v86[2];
  uint64_t *v87;
  int v88;

  v3 = a3;
  v6 = (char *)a1[38];
  a1[39] = v6;
  a1[42] = a1[41];
  v7 = *a2;
  v82 = a2;
  if (a2[1] != *a2)
  {
    v8 = 0;
    v81 = (void **)(a1 + 38);
    v84 = (void **)(a1 + 41);
    while (1)
    {
      v9 = *(_DWORD *)(v7 + 4 * v8);
      v88 = v9;
      if (v9 == -1)
      {
        v87 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>((int)&operations_research::sat::kNoIntegerVariable, (int)&v88, "kNoIntegerVariable != var");
        if (v87)
        {
          google::LogMessageFatal::LogMessageFatal(v86, (google::glog_internal_namespace_ *)"./ortools/sat/precedences.cc", 134, &v87);
          google::LogMessage::stream((google::LogMessage *)v86);
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v86);
        }
        v9 = v88;
        v10 = a1[20];
        if (v88 < (int)((unint64_t)(a1[21] - v10) >> 5))
        {
LABEL_6:
          v11 = (_QWORD *)(v10 + 32 * v9);
          v14 = *v11;
          v13 = (int *)(v11 + 1);
          v12 = v14;
          if ((v14 & 1) != 0)
            v13 = *(int **)v13;
          if (v12 >= 2)
          {
            v15 = &v13[v12 >> 1];
            v85 = v15;
            v80 = v8;
            while (1)
            {
              v17 = *v13;
              v18 = (_QWORD *)a1[7];
              v19 = a1[23] + ((uint64_t)*v13 << 6);
              v21 = (int *)(v19 + 4);
              v20 = *(_DWORD *)(v19 + 4);
              v22 = *(int *)(v18[51] + 4 * v20);
              if ((_DWORD)v22 != -1
                && ((*(_QWORD *)(*(_QWORD *)(v18[117] + 24) + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v22) & 1) != 0)
              {
                goto LABEL_12;
              }
              v23 = *(_QWORD *)(v19 + 8);
              v24 = *(_DWORD *)(v19 + 16);
              if (v24 != -1)
                v23 += *(_QWORD *)(v18[5] + 12 * v24);
              if (v23 < 0)
                goto LABEL_12;
              v25 = v20;
              v26 = a1[32];
              if (*(_DWORD *)(v26 + 4 * v20))
              {
                v27 = a1[35];
                if (v8 == *(_DWORD *)(v27 + 4 * v20))
                  goto LABEL_12;
                goto LABEL_36;
              }
              v28 = *(_QWORD *)(v18[5] + 12 * v20);
              v30 = (char *)a1[39];
              v29 = a1[40];
              if ((unint64_t)v30 >= v29)
                break;
              *(_DWORD *)v30 = v20;
              *(_QWORD *)(v30 + 4) = v28;
              v31 = v30 + 12;
LABEL_35:
              a1[39] = v31;
              v25 = *v21;
              v27 = a1[35];
              v26 = a1[32];
LABEL_36:
              *(_DWORD *)(v27 + 4 * v25) = v8;
              ++*(_DWORD *)(v26 + 4 * *v21);
              v43 = *v21;
              v45 = (char *)a1[42];
              v44 = a1[43];
              if ((unint64_t)v45 < v44)
              {
                *(_DWORD *)v45 = v8;
                *((_DWORD *)v45 + 1) = v43;
                *((_DWORD *)v45 + 2) = v17;
                v16 = v45 + 20;
                *(_QWORD *)(v45 + 12) = v23;
              }
              else
              {
                v46 = (char *)*v84;
                v47 = 0xCCCCCCCCCCCCCCCDLL * ((v45 - (_BYTE *)*v84) >> 2);
                v48 = v47 + 1;
                if (v47 + 1 > 0xCCCCCCCCCCCCCCCLL)
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                v49 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v44 - (_QWORD)v46) >> 2);
                if (2 * v49 > v48)
                  v48 = 2 * v49;
                if (v49 >= 0x666666666666666)
                  v50 = 0xCCCCCCCCCCCCCCCLL;
                else
                  v50 = v48;
                if (v50)
                {
                  if (v50 > 0xCCCCCCCCCCCCCCCLL)
LABEL_88:
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  v51 = (char *)operator new(20 * v50);
                }
                else
                {
                  v51 = 0;
                }
                v52 = &v51[20 * v47];
                *(_DWORD *)v52 = v8;
                *((_DWORD *)v52 + 1) = v43;
                *((_DWORD *)v52 + 2) = v17;
                *(_QWORD *)(v52 + 12) = v23;
                v53 = v52;
                if (v45 != v46)
                {
                  do
                  {
                    v54 = *(_OWORD *)(v45 - 20);
                    *((_DWORD *)v53 - 1) = *((_DWORD *)v45 - 1);
                    *(_OWORD *)(v53 - 20) = v54;
                    v53 -= 20;
                    v45 -= 20;
                  }
                  while (v45 != v46);
                  v45 = (char *)*v84;
                }
                v16 = v52 + 20;
                a1[41] = v53;
                a1[42] = v52 + 20;
                a1[43] = &v51[20 * v50];
                if (v45)
                  operator delete(v45);
                v15 = v85;
              }
              a1[42] = v16;
LABEL_12:
              if (++v13 == v15)
                goto LABEL_3;
            }
            v32 = (char *)*v81;
            v33 = 0xAAAAAAAAAAAAAAABLL * ((v30 - (_BYTE *)*v81) >> 2);
            v34 = v33 + 1;
            if (v33 + 1 > 0x1555555555555555)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - (_QWORD)v32) >> 2);
            if (2 * v35 > v34)
              v34 = 2 * v35;
            if (v35 >= 0xAAAAAAAAAAAAAAALL)
              v34 = 0x1555555555555555;
            v83 = v34;
            if (v34)
            {
              if (v34 > 0x1555555555555555)
                goto LABEL_88;
              v36 = v28;
              v37 = (char *)operator new(12 * v34);
              v38 = v36;
              v8 = v80;
              v39 = (uint64_t)&v37[12 * v33];
              *(_DWORD *)v39 = v20;
              *(_QWORD *)(v39 + 4) = v38;
              v40 = v39;
              if (v30 != v32)
              {
                do
                {
LABEL_31:
                  v41 = *(_QWORD *)(v30 - 12);
                  v30 -= 12;
                  v42 = *((_DWORD *)v30 + 2);
                  *(_QWORD *)(v40 - 12) = v41;
                  v40 -= 12;
                  *(_DWORD *)(v40 + 8) = v42;
                }
                while (v30 != v32);
                v30 = (char *)*v81;
                v31 = (char *)(v39 + 12);
                a1[38] = v40;
                a1[39] = v39 + 12;
                a1[40] = &v37[12 * v83];
                if (v30)
LABEL_33:
                  operator delete(v30);
LABEL_34:
                v15 = v85;
                goto LABEL_35;
              }
            }
            else
            {
              v37 = 0;
              v39 = 4 * ((v30 - (_BYTE *)*v81) >> 2);
              *(_DWORD *)v39 = v20;
              *(_QWORD *)(v39 + 4) = v28;
              v40 = 12 * v33;
              if (v30 != v32)
                goto LABEL_31;
            }
            v31 = (char *)(v39 + 12);
            a1[38] = v40;
            a1[39] = v39 + 12;
            a1[40] = &v37[12 * v83];
            if (v30)
              goto LABEL_33;
            goto LABEL_34;
          }
        }
      }
      else
      {
        v10 = a1[20];
        if (v9 < (int)((unint64_t)(a1[21] - v10) >> 5))
          goto LABEL_6;
      }
LABEL_3:
      ++v8;
      v7 = *v82;
      if (v8 >= (v82[1] - *v82) >> 2)
      {
        v55 = (uint64_t *)a1[38];
        v6 = (char *)a1[39];
        v3 = a3;
        goto LABEL_61;
      }
    }
  }
  v55 = (uint64_t *)v6;
LABEL_61:
  v56 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v6 - (char *)v55) >> 2));
  if (v6 == (char *)v55)
    v57 = 0;
  else
    v57 = v56;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::PrecedencesPropagator::SortedVar *,false>(v55, v6, (uint64_t)v86, v57, 1);
  v58 = (int *)a1[38];
  v59 = (int *)a1[39];
  if (v58 == v59)
  {
    v66 = 0;
  }
  else
  {
    v60 = 0;
    v61 = a1[32];
    do
    {
      v62 = *v58;
      v58 += 3;
      v63 = 4 * v62;
      v64 = *(_DWORD *)(v61 + 4 * v62);
      if (v64 <= 1)
        v65 = -1;
      else
        v65 = v60;
      if (v64 <= 1)
        v64 = 0;
      v60 += v64;
      *(_DWORD *)(v61 + v63) = v65;
    }
    while (v58 != v59);
    v66 = v60;
  }
  v67 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
  if (v66 <= v67)
  {
    if (v66 < v67)
      *(_QWORD *)(v3 + 8) = *(_QWORD *)v3 + 20 * (int)v66;
  }
  else
  {
    std::vector<operations_research::sat::IntegerTrail::TrailEntry>::__append((char **)v3, v66 - v67);
  }
  v68 = (__int128 *)a1[41];
  for (i = (__int128 *)a1[42]; v68 != i; v68 = (__int128 *)((char *)v68 + 20))
  {
    v70 = *((int *)v68 + 1);
    v71 = a1[32];
    v72 = *(_DWORD *)(v71 + 4 * v70);
    if ((v72 & 0x80000000) == 0)
    {
      *(_DWORD *)(v71 + 4 * v70) = v72 + 1;
      v73 = *(_QWORD *)v3 + 20 * v72;
      v74 = *v68;
      *(_DWORD *)(v73 + 16) = *((_DWORD *)v68 + 4);
      *(_OWORD *)v73 = v74;
    }
  }
  v75 = (int *)a1[38];
  v76 = (int *)a1[39];
  if (v75 != v76)
  {
    v77 = a1[32];
    do
    {
      v78 = *v75;
      v75 += 3;
      *(_DWORD *)(v77 + 4 * v78) = 0;
    }
    while (v75 != v76);
  }
}

void sub_22DBB689C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::PrecedencesPropagator::AddPrecedenceReason(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char **a5)
{
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  int *v25;
  unint64_t v26;
  char *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  int v43;
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[12];

  v46 = *(_QWORD *)(a1 + 184);
  v47 = a2;
  v6 = v46 + ((uint64_t)a2 << 6);
  v7 = *(_QWORD *)(v6 + 24);
  v8 = (_QWORD *)(v6 + 32);
  if ((v7 & 1) != 0)
    v8 = (_QWORD *)*v8;
  if (v7 >= 2)
  {
    v13 = (_QWORD *)((char *)v8 + 4 * (v7 >> 1));
    v14 = *(char **)(a4 + 8);
    while (1)
    {
      v16 = *(_DWORD *)v8 ^ 1;
      v17 = *(_QWORD *)(a4 + 16);
      if ((unint64_t)v14 >= v17)
        break;
      *(_DWORD *)v14 = v16;
      v15 = (uint64_t)(v14 + 4);
LABEL_9:
      *(_QWORD *)(a4 + 8) = v15;
      v8 = (_QWORD *)((char *)v8 + 4);
      v14 = (char *)v15;
      if (v8 == v13)
        goto LABEL_4;
    }
    v18 = *(char **)a4;
    v19 = (uint64_t)&v14[-*(_QWORD *)a4];
    v20 = v19 >> 2;
    v21 = (v19 >> 2) + 1;
    if (v21 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v22 = v17 - (_QWORD)v18;
    if (v22 >> 1 > v21)
      v21 = v22 >> 1;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
      v23 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v23 = v21;
    if (v23)
    {
      if (v23 >> 62)
        goto LABEL_55;
      v24 = operator new(4 * v23);
      v25 = (int *)&v24[4 * v20];
      *v25 = v16;
      v15 = (uint64_t)(v25 + 1);
      if (v14 == v18)
        goto LABEL_25;
    }
    else
    {
      v24 = 0;
      v25 = (int *)(4 * v20);
      *(_DWORD *)(4 * v20) = v16;
      v15 = 4 * v20 + 4;
      if (v14 == v18)
        goto LABEL_25;
    }
    v26 = v14 - 4 - v18;
    if (v26 >= 0xBC)
    {
      if (&v24[v19 - 4 - (v26 & 0xFFFFFFFFFFFFFFFCLL)] > &v24[v19 - 4])
      {
        v27 = v14;
      }
      else if (&v14[-(v26 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v14 - 4)
      {
        v27 = v14;
      }
      else if ((unint64_t)(v14 - &v24[v19]) >= 0x20)
      {
        v29 = (v26 >> 2) + 1;
        v30 = 4 * (v29 & 0x7FFFFFFFFFFFFFF8);
        v27 = &v14[-v30];
        v25 = (int *)((char *)v25 - v30);
        v31 = &v24[4 * v20 - 16];
        v32 = v14 - 16;
        v33 = v29 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v34 = *(_OWORD *)v32;
          *(v31 - 1) = *((_OWORD *)v32 - 1);
          *v31 = v34;
          v31 -= 2;
          v32 -= 32;
          v33 -= 8;
        }
        while (v33);
        if (v29 == (v29 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_25:
          *(_QWORD *)a4 = v25;
          *(_QWORD *)(a4 + 8) = v15;
          *(_QWORD *)(a4 + 16) = &v24[4 * v23];
          if (v18)
            operator delete(v18);
          goto LABEL_9;
        }
      }
      else
      {
        v27 = v14;
      }
    }
    else
    {
      v27 = v14;
    }
    do
    {
      v28 = *((_DWORD *)v27 - 1);
      v27 -= 4;
      *--v25 = v28;
    }
    while (v27 != v18);
    goto LABEL_25;
  }
LABEL_4:
  v9 = v46 + (v47 << 6);
  if (*(_DWORD *)(v9 + 16) != -1)
  {
    *(_DWORD *)v48 = *(_DWORD *)(v9 + 16);
    *(_QWORD *)&v48[4] = a3 - *(_QWORD *)(v9 + 8);
    v11 = a5[1];
    v10 = (unint64_t)a5[2];
    if ((unint64_t)v11 >= v10)
    {
      v35 = *a5;
      v36 = 0xAAAAAAAAAAAAAAABLL * ((v11 - *a5) >> 2);
      v37 = v36 + 1;
      if (v36 + 1 > 0x1555555555555555)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)v35) >> 2);
      if (2 * v38 > v37)
        v37 = 2 * v38;
      if (v38 >= 0xAAAAAAAAAAAAAAALL)
        v39 = 0x1555555555555555;
      else
        v39 = v37;
      if (v39)
      {
        if (v39 > 0x1555555555555555)
LABEL_55:
          std::__throw_bad_array_new_length[abi:ne180100]();
        v40 = (char *)operator new(12 * v39);
      }
      else
      {
        v40 = 0;
      }
      v41 = &v40[12 * v36];
      *(_QWORD *)v41 = *(_QWORD *)v48;
      *((_DWORD *)v41 + 2) = *(_DWORD *)&v48[8];
      v12 = v41 + 12;
      if (v11 != v35)
      {
        do
        {
          v42 = *(_QWORD *)(v11 - 12);
          v11 -= 12;
          v43 = *((_DWORD *)v11 + 2);
          *(_QWORD *)(v41 - 12) = v42;
          v41 -= 12;
          *((_DWORD *)v41 + 2) = v43;
        }
        while (v11 != v35);
        v11 = *a5;
      }
      *a5 = v41;
      a5[1] = v12;
      a5[2] = &v40[12 * v39];
      if (v11)
        operator delete(v11);
    }
    else
    {
      *(_QWORD *)v11 = *(_QWORD *)v48;
      *((_DWORD *)v11 + 2) = *(_DWORD *)&v48[8];
      v12 = v11 + 12;
    }
    a5[1] = v12;
  }
}

void operations_research::sat::PrecedencesPropagator::AdjustSizeFor(uint64_t a1, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v2 = a2 | 1;
  v4 = *(_QWORD *)(a1 + 160);
  v3 = *(_QWORD *)(a1 + 168);
  v5 = (uint64_t *)(a1 + 160);
  v6 = v3 - v4;
  v7 = (v3 - v4) >> 5;
  if (v7 <= (a2 | 1))
  {
    v9 = v6 >> 5;
    if (v2 >= (int)(v6 >> 5))
    {
      do
      {
        operations_research::sat::GenericLiteralWatcher::WatchLowerBound(*(_QWORD *)(a1 + 64), v9, *(_DWORD *)(a1 + 72), 0xFFFFFFFFLL);
        LODWORD(v9) = v9 + 1;
      }
      while (v2 + 1 != (_DWORD)v9);
      v4 = *(_QWORD *)(a1 + 160);
      v3 = *(_QWORD *)(a1 + 168);
      v7 = (v3 - v4) >> 5;
    }
    v10 = v2 + 1;
    if (v10 <= v7)
    {
      if (v10 < v7)
      {
        v11 = v4 + 32 * v10;
        if (v3 != v11)
        {
          v12 = v3;
          do
          {
            v13 = *(_BYTE *)(v12 - 32);
            v12 -= 32;
            if ((v13 & 1) != 0)
              operator delete(*(void **)(v3 - 24));
            v3 = v12;
          }
          while (v12 != v11);
        }
        *(_QWORD *)(a1 + 168) = v11;
      }
    }
    else
    {
      std::vector<absl::lts_2020_02_25::InlinedVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,6ul,std::allocator<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>::__append(v5, v10 - v7);
    }
    v15 = *(_QWORD *)(a1 + 208);
    v14 = *(_QWORD *)(a1 + 216);
    v16 = (v14 - v15) >> 5;
    if (v10 <= v16)
    {
      if (v10 < v16)
      {
        v17 = v15 + 32 * v10;
        if (v14 != v17)
        {
          v18 = *(_QWORD *)(a1 + 216);
          do
          {
            v19 = *(_BYTE *)(v18 - 32);
            v18 -= 32;
            if ((v19 & 1) != 0)
              operator delete(*(void **)(v14 - 24));
            v14 = v18;
          }
          while (v18 != v17);
        }
        *(_QWORD *)(a1 + 216) = v17;
      }
    }
    else
    {
      std::vector<absl::lts_2020_02_25::InlinedVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,6ul,std::allocator<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>::__append((uint64_t *)(a1 + 208), v10 - v16);
    }
    v20 = *(_QWORD *)(a1 + 256);
    v21 = (*(_QWORD *)(a1 + 264) - v20) >> 2;
    if (v10 <= v21)
    {
      if (v10 < v21)
        *(_QWORD *)(a1 + 264) = v20 + 4 * v10;
    }
    else
    {
      std::vector<int>::__append((std::vector<int> *)(a1 + 256), v10 - v21);
    }
    v22 = *(_QWORD *)(a1 + 280);
    v23 = (*(_QWORD *)(a1 + 288) - v22) >> 2;
    if (v10 <= v23)
    {
      if (v10 < v23)
        *(_QWORD *)(a1 + 288) = v22 + 4 * v10;
    }
    else
    {
      std::vector<int>::__append((std::vector<int> *)(a1 + 280), v10 - v23);
    }
  }
}

void operations_research::sat::PrecedencesPropagator::AddArc(uint64_t a1, int a2, int a3, uint64_t a4, int a5, int *a6, uint64_t a7)
{
  unint64_t v12;
  int *v13;
  int *v14;
  int v15;
  void *v16;
  __int128 *v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  _OWORD *v22;
  __int128 *v23;
  unint64_t v24;
  __int128 v25;
  unint64_t v26;
  char *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  void *v33;
  int *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  _OWORD *v39;
  __int128 *v40;
  unint64_t v41;
  __int128 v42;
  unint64_t v43;
  char *v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  void *v50;
  int *v51;
  unint64_t v52;
  char *v53;
  char *v54;
  unint64_t v55;
  _OWORD *v56;
  __int128 *v57;
  unint64_t v58;
  __int128 v59;
  unint64_t v60;
  char *v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  void *v66;
  int *v67;
  unint64_t v68;
  char *v69;
  char *v70;
  unint64_t v71;
  _OWORD *v72;
  __int128 *v73;
  unint64_t v74;
  __int128 v75;
  unint64_t v76;
  char *v77;
  int v78;
  uint64_t v79;
  int *v80;
  unint64_t v81;
  uint64_t v82;
  char *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  int v104;
  void *v105;
  __int128 *v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  __int128 *v110;
  int v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  char *v117;
  char *v118;
  BOOL v119;
  int v120;
  uint64_t v121;
  int *v122;
  _OWORD *v123;
  __int128 *v124;
  uint64_t v125;
  __int128 v126;
  int v127;
  char *v128;
  char *v129;
  unint64_t v130;
  __int128 v131;
  unint64_t v132;
  char *v133;
  int v134;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  BOOL v144;
  uint64_t v145;
  int v146;
  unint64_t v147;
  _DWORD *v148;
  _DWORD *v149;
  _DWORD *v150;
  _DWORD *v151;
  __int128 v152;
  int *v153;
  uint64_t v154;
  unint64_t v155;
  __int128 v156;
  __int128 v157;
  int *v158;
  unint64_t v159;
  unint64_t v160;
  _OWORD *v161;
  uint64_t v162;
  uint64_t v163;
  _OWORD *v164;
  __int128 *v165;
  uint64_t v166;
  __int128 v167;
  unint64_t v168;
  _DWORD *v169;
  int v170;
  char *v171;
  char v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  char *v180;
  char *v181;
  unint64_t v182;
  int *v183;
  _OWORD *v184;
  __int128 *v185;
  unint64_t v186;
  __int128 v187;
  unint64_t v188;
  char *v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  char *v196;
  char *v197;
  unint64_t v198;
  int *v199;
  _OWORD *v200;
  __int128 *v201;
  unint64_t v202;
  __int128 v203;
  unint64_t v204;
  char *v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  char *v212;
  char *v213;
  unint64_t v214;
  int *v215;
  _OWORD *v216;
  __int128 *v217;
  unint64_t v218;
  __int128 v219;
  unint64_t v220;
  char *v221;
  int v222;
  _DWORD *v223;
  int *v224;
  int v225;
  int v226;
  int v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v230;
  __int128 v231;
  __int128 v232;
  char *v233;
  int *v234;
  unint64_t v235;
  unint64_t v236;
  _OWORD *v237;
  uint64_t v238;
  uint64_t v239;
  _OWORD *v240;
  __int128 *v241;
  uint64_t v242;
  __int128 v243;
  unint64_t v244;
  _DWORD *v245;
  int v246;
  char v247;
  int v248;
  unint64_t v249;
  char *v250;
  char *v251;
  unint64_t v252;
  unint64_t v253;
  int v254;
  uint64_t v255;
  char *v256;
  uint64_t v257;
  unint64_t v258;
  char *v259;
  unint64_t v260;
  char *v261;
  unint64_t v262;
  __int128 v263;
  uint64_t v264;
  char *v265;
  int v266;
  unint64_t v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  unint64_t v271;
  unint64_t v272;
  char *v273;
  int *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  char v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  unint64_t v285;
  unint64_t v286;
  char *v287;
  char *v288;
  unint64_t v289;
  int *v290;
  _OWORD *v291;
  __int128 *v292;
  unint64_t v293;
  __int128 v294;
  unint64_t v295;
  char *v296;
  int v297;
  char *v298;
  char *v299;
  unint64_t v300;
  int *v301;
  _OWORD *v302;
  __int128 *v303;
  unint64_t v304;
  __int128 v305;
  unint64_t v306;
  char *v307;
  int v308;
  int *v309;
  int *v310;
  uint64_t v311;
  int v314;
  int v315;
  char *v316;
  int v317;
  int *v318;
  __int128 v319;
  int v320;
  unint64_t v321;
  void *__p[2];
  uint64_t v323;
  char v324;
  unint64_t v325;
  __int128 v326;
  uint64_t v327;
  uint64_t v328;

  v328 = *MEMORY[0x24BDAC8D0];
  operations_research::sat::PrecedencesPropagator::AdjustSizeFor(a1, a2);
  operations_research::sat::PrecedencesPropagator::AdjustSizeFor(a1, a3);
  if (a5 != -1)
    operations_research::sat::PrecedencesPropagator::AdjustSizeFor(a1, a5);
  v314 = a5;
  v315 = a2;
  v317 = a3;
  v325 = 0;
  v311 = a7;
  v12 = 0;
  if (a7)
  {
    v13 = a6;
    v14 = &a6[a7];
    do
    {
      while (1)
      {
        v15 = *v13;
        v16 = (void *)v326;
        v17 = (v12 & 1) != 0 ? (__int128 *)v326 : &v326;
        v18 = (v12 & 1) != 0 ? *((_QWORD *)&v326 + 1) : 6;
        if (v12 >> 1 == v18)
          break;
        *((_DWORD *)v17 + (v12 >> 1)) = v15;
        v12 += 2;
        v325 = v12;
        if (++v13 == v14)
          goto LABEL_25;
      }
      if (((v18 >> 61) & 3) != 0)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v19 = (char *)operator new(8 * v18);
      v20 = v19;
      *(_DWORD *)&v19[4 * v18] = v15;
      if (v12 >= 2)
      {
        v21 = 0;
        if (v18 < 8)
          goto LABEL_20;
        if ((unint64_t)(v19 - (char *)v17) < 0x20)
          goto LABEL_20;
        v21 = v18 & 0xFFFFFFFFFFFFFFF8;
        v22 = v19 + 16;
        v23 = v17 + 1;
        v24 = v18 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v25 = *v23;
          *(v22 - 1) = *(v23 - 1);
          *v22 = v25;
          v22 += 2;
          v23 += 2;
          v24 -= 8;
        }
        while (v24);
        v17 = (__int128 *)((char *)v17 + 4 * (v18 & 0xFFFFFFFFFFFFFFF8));
        if (v18 != v21)
        {
LABEL_20:
          v26 = v18 - v21;
          v27 = &v19[4 * v21];
          do
          {
            v28 = *(_DWORD *)v17;
            v17 = (__int128 *)((char *)v17 + 4);
            *(_DWORD *)v27 = v28;
            v27 += 4;
            --v26;
          }
          while (v26);
        }
      }
      if ((v12 & 1) != 0)
        operator delete(v16);
      *(_QWORD *)&v326 = v20;
      *((_QWORD *)&v326 + 1) = 2 * v18;
      v12 = (v12 | 1) + 2;
      v325 = v12;
      ++v13;
    }
    while (v13 != v14);
  }
LABEL_25:
  v29 = *(_QWORD *)(a1 + 56);
  v30 = *(_QWORD *)(v29 + 408);
  v31 = *(_DWORD *)(v30 + 4 * v315);
  if (v31 == -1)
  {
    v47 = *(_DWORD *)(v30 + 4 * v317);
    if (v47 != -1)
      goto LABEL_50;
LABEL_46:
    v48 = v314;
    if (v314 == -1)
      goto LABEL_93;
    goto LABEL_71;
  }
  v32 = v31 ^ 1;
  v33 = (void *)v326;
  if ((v12 & 1) != 0)
    v34 = (int *)v326;
  else
    v34 = (int *)&v326;
  if ((v12 & 1) != 0)
    v35 = *((_QWORD *)&v326 + 1);
  else
    v35 = 6;
  if (v12 >> 1 == v35)
  {
    if (((v35 >> 61) & 3) != 0)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v36 = (char *)operator new(8 * v35);
    v37 = v36;
    *(_DWORD *)&v36[4 * v35] = v32;
    if (v12 >= 2)
    {
      v38 = 0;
      if (v35 < 8)
        goto LABEL_40;
      if ((unint64_t)(v36 - (char *)v34) < 0x20)
        goto LABEL_40;
      v38 = v35 & 0xFFFFFFFFFFFFFFF8;
      v39 = v36 + 16;
      v40 = (__int128 *)(v34 + 4);
      v41 = v35 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v42 = *v40;
        *(v39 - 1) = *(v40 - 1);
        *v39 = v42;
        v39 += 2;
        v40 += 2;
        v41 -= 8;
      }
      while (v41);
      v34 += v35 & 0xFFFFFFFFFFFFFFF8;
      if (v35 != v38)
      {
LABEL_40:
        v43 = v35 - v38;
        v44 = &v36[4 * v38];
        do
        {
          v45 = *v34++;
          *(_DWORD *)v44 = v45;
          v44 += 4;
          --v43;
        }
        while (v43);
      }
    }
    v46 = 2 * v35;
    if ((v12 & 1) != 0)
    {
      operator delete(v33);
      v29 = *(_QWORD *)(a1 + 56);
    }
    *(_QWORD *)&v326 = v37;
    *((_QWORD *)&v326 + 1) = v46;
    v12 |= 1uLL;
    v30 = *(_QWORD *)(v29 + 408);
  }
  else
  {
    v34[v12 >> 1] = v32;
  }
  v12 += 2;
  v325 = v12;
  v47 = *(_DWORD *)(v30 + 4 * v317);
  if (v47 == -1)
    goto LABEL_46;
LABEL_50:
  v49 = v47 ^ 1;
  v50 = (void *)v326;
  if ((v12 & 1) != 0)
    v51 = (int *)v326;
  else
    v51 = (int *)&v326;
  if ((v12 & 1) != 0)
    v52 = *((_QWORD *)&v326 + 1);
  else
    v52 = 6;
  if (v12 >> 1 != v52)
  {
    v51[v12 >> 1] = v49;
    v48 = v314;
    v12 += 2;
    v325 = v12;
    if (v314 == -1)
      goto LABEL_93;
    goto LABEL_71;
  }
  if (((v52 >> 61) & 3) != 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v53 = (char *)operator new(8 * v52);
  v54 = v53;
  *(_DWORD *)&v53[4 * v52] = v49;
  v48 = v314;
  if (v12 >= 2)
  {
    v55 = 0;
    if (v52 < 8)
      goto LABEL_64;
    if ((unint64_t)(v53 - (char *)v51) < 0x20)
      goto LABEL_64;
    v55 = v52 & 0xFFFFFFFFFFFFFFF8;
    v56 = v53 + 16;
    v57 = (__int128 *)(v51 + 4);
    v58 = v52 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v59 = *v57;
      *(v56 - 1) = *(v57 - 1);
      *v56 = v59;
      v56 += 2;
      v57 += 2;
      v58 -= 8;
    }
    while (v58);
    v51 += v52 & 0xFFFFFFFFFFFFFFF8;
    if (v52 != v55)
    {
LABEL_64:
      v60 = v52 - v55;
      v61 = &v53[4 * v55];
      do
      {
        v62 = *v51++;
        *(_DWORD *)v61 = v62;
        v61 += 4;
        --v60;
      }
      while (v60);
    }
  }
  v63 = 2 * v52;
  if ((v12 & 1) != 0)
    operator delete(v50);
  *(_QWORD *)&v326 = v54;
  *((_QWORD *)&v326 + 1) = v63;
  v12 = (v12 | 1) + 2;
  v325 = v12;
  if (v314 != -1)
  {
LABEL_71:
    v64 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 408) + 4 * v48);
    if (v64 != -1)
    {
      v65 = v64 ^ 1;
      v66 = (void *)v326;
      if ((v12 & 1) != 0)
        v67 = (int *)v326;
      else
        v67 = (int *)&v326;
      if ((v12 & 1) != 0)
        v68 = *((_QWORD *)&v326 + 1);
      else
        v68 = 6;
      if (v12 >> 1 == v68)
      {
        if (((v68 >> 61) & 3) != 0)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v69 = (char *)operator new(8 * v68);
        v70 = v69;
        *(_DWORD *)&v69[4 * v68] = v65;
        v48 = v314;
        if (v12 >= 2)
        {
          v71 = 0;
          if (v68 < 8)
            goto LABEL_86;
          if ((unint64_t)(v69 - (char *)v67) < 0x20)
            goto LABEL_86;
          v71 = v68 & 0xFFFFFFFFFFFFFFF8;
          v72 = v69 + 16;
          v73 = (__int128 *)(v67 + 4);
          v74 = v68 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v75 = *v73;
            *(v72 - 1) = *(v73 - 1);
            *v72 = v75;
            v72 += 2;
            v73 += 2;
            v74 -= 8;
          }
          while (v74);
          v67 += v68 & 0xFFFFFFFFFFFFFFF8;
          if (v68 != v71)
          {
LABEL_86:
            v76 = v68 - v71;
            v77 = &v69[4 * v71];
            do
            {
              v78 = *v67++;
              *(_DWORD *)v77 = v78;
              v77 += 4;
              --v76;
            }
            while (v76);
          }
        }
        v79 = 2 * v68;
        if ((v12 & 1) != 0)
          operator delete(v66);
        *(_QWORD *)&v326 = v70;
        *((_QWORD *)&v326 + 1) = v79;
        v12 |= 1uLL;
      }
      else
      {
        v67[v12 >> 1] = v65;
        v48 = v314;
      }
      v12 += 2;
      v325 = v12;
    }
  }
LABEL_93:
  if ((v12 & 1) != 0)
    v80 = (int *)v326;
  else
    v80 = (int *)&v326;
  v81 = 126 - 2 * __clz(v12 >> 1);
  if (v12 >= 2)
    v82 = v81;
  else
    v82 = 0;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::Literal *,false>(v80, (char *)&v80[v12 >> 1], (uint64_t)&v319, v82, 1);
  v84 = v325;
  v83 = (char *)v326;
  v85 = v325 & 1;
  if ((v325 & 1) == 0)
    v83 = (char *)&v326;
  v86 = v325 >> 1;
  if (v325 < 2)
  {
LABEL_111:
    if ((v325 & 1) != 0)
      goto LABEL_115;
LABEL_112:
    v94 = (char *)&v326 + 4 * v86;
    v95 = (char *)&v326;
    if (v83 == v94)
    {
      v85 = 0;
      goto LABEL_123;
    }
    goto LABEL_116;
  }
  v87 = &v83[4 * v86];
  v88 = 4 * v86 - 8;
  do
  {
    v89 = v83;
    v83 += 4;
    if (v83 == v87)
    {
      v83 = v87;
      goto LABEL_111;
    }
    v90 = v88;
    v91 = *((_DWORD *)v89 + 1);
    v88 -= 4;
  }
  while (*(_DWORD *)v89 != v91);
  if (v89 + 8 != v87)
  {
    v92 = 4;
    do
    {
      v93 = v91;
      v91 = *(_DWORD *)&v83[v92];
      if (v93 != v91)
      {
        *((_DWORD *)v89 + 1) = v91;
        v89 += 4;
      }
      v92 += 4;
      v90 -= 4;
    }
    while (v90);
  }
  v83 = v89 + 4;
  if (!v85)
    goto LABEL_112;
LABEL_115:
  v95 = (char *)v326;
  v94 = (char *)(v326 + 4 * v86);
  if (v83 == v94)
    goto LABEL_123;
LABEL_116:
  v96 = v94 - v83;
  v97 = (v83 - v95) >> 2;
  v98 = v97 + (v96 >> 2);
  v99 = v86 - v98;
  if (v86 != v98)
  {
    v100 = &v95[4 * v98];
    if (v99 >= 0xC && (unint64_t)(v83 - v95 - 4 * v98) >= 0x20)
    {
      v101 = v99 & 0xFFFFFFFFFFFFFFF8;
      v100 += 4 * (v99 & 0xFFFFFFFFFFFFFFF8);
      v128 = &v95[4 * v97 + 16];
      v129 = &v95[4 * v98 + 16];
      v130 = v99 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v131 = *(_OWORD *)v129;
        *((_OWORD *)v128 - 1) = *((_OWORD *)v129 - 1);
        *(_OWORD *)v128 = v131;
        v128 += 32;
        v129 += 32;
        v130 -= 8;
      }
      while (v130);
      if (v99 == v101)
        goto LABEL_122;
    }
    else
    {
      v101 = 0;
    }
    v102 = v86 - v101 - v98;
    v103 = &v95[4 * v101 + 4 * v97];
    do
    {
      v104 = *(_DWORD *)v100;
      v100 += 4;
      *(_DWORD *)v103 = v104;
      v103 += 4;
      --v102;
    }
    while (v102);
  }
LABEL_122:
  v84 -= v96 >> 1;
  v325 = v84;
  v85 = v84 & 1;
  v86 = v84 >> 1;
LABEL_123:
  v105 = (void *)v326;
  if (v85)
    v106 = (__int128 *)v326;
  else
    v106 = &v326;
  v107 = 0;
  if (v86)
  {
    v108 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 24);
    v109 = 4 * v86;
    do
    {
      v111 = *(_DWORD *)v106;
      v112 = *(_QWORD *)(v108 + (((unint64_t)*(int *)v106 >> 3) & 0x1FFFFFFFFFFFFFF8));
      if (((v112 >> *(_DWORD *)v106) & 1) == 0)
      {
        if (((v112 >> (v111 & 0x3F ^ 1u)) & 1) != 0)
        {
          if ((v325 & 1) == 0)
            return;
          goto LABEL_135;
        }
        v110 = (__int128 *)v326;
        if (!v85)
          v110 = &v326;
        *((_DWORD *)v110 + v107++) = v111;
      }
      v106 = (__int128 *)((char *)v106 + 4);
      v109 -= 4;
    }
    while (v109);
    v105 = (void *)v326;
    if (v85)
      v106 = (__int128 *)v326;
    else
      v106 = &v326;
  }
  v113 = v107;
  v114 = *((_QWORD *)&v326 + 1);
  if (!v85)
    v114 = 6;
  if (v114 >= v113)
  {
    v120 = v315;
    v127 = v317;
    v325 = v85 | (2 * v113);
    if (v317 != v315)
      goto LABEL_171;
    goto LABEL_167;
  }
  v115 = 2 * v114;
  if (v115 <= v113)
    v116 = v113;
  else
    v116 = v115;
  if (v116 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v117 = (char *)operator new(4 * v116);
  v118 = v117;
  v119 = v84 >= 2;
  v120 = v315;
  if (v119)
  {
    v121 = 0;
    if (v86 < 8 || (unint64_t)(v117 - (char *)v106) < 0x20)
    {
      v122 = (int *)v106;
    }
    else
    {
      v121 = v86 & 0x7FFFFFFFFFFFFFF8;
      v122 = (int *)v106 + (v86 & 0x7FFFFFFFFFFFFFF8);
      v123 = v117 + 16;
      v124 = v106 + 1;
      v125 = v86 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v126 = *v124;
        *(v123 - 1) = *(v124 - 1);
        *v123 = v126;
        v123 += 2;
        v124 += 2;
        v125 -= 8;
      }
      while (v125);
      if (v86 == v121)
        goto LABEL_164;
    }
    v132 = v86 - v121;
    v133 = &v117[4 * v121];
    do
    {
      v134 = *v122++;
      *(_DWORD *)v133 = v134;
      v133 += 4;
      --v132;
    }
    while (v132);
  }
LABEL_164:
  if (v85)
    operator delete(v105);
  *(_QWORD *)&v326 = v118;
  *((_QWORD *)&v326 + 1) = v116;
  v127 = v317;
  v325 = (2 * v113) | 1;
  if (v317 == v315)
  {
LABEL_167:
    if (*operations_research::sat::PrecedencesPropagator::AddArc(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::vlocal__ >= 1
      && (operations_research::sat::PrecedencesPropagator::AddArc(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::vlocal__ != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)&operations_research::sat::PrecedencesPropagator::AddArc(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/precedences.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)&v319, (google::glog_internal_namespace_ *)"./ortools/sat/precedences.cc", 278);
      v135 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v319);
      v136 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)"Self arc! This could be presolved. ", 35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v136, (uint64_t)"var:", 4);
      v137 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)" offset:", 8);
      v138 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v138, (uint64_t)" offset_var:", 12);
      v139 = (_QWORD *)std::ostream::operator<<();
      v140 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v139, (uint64_t)" conditioned_by:", 16);
      operations_research::sat::operator<<(v140, a6, v311);
      google::LogMessage::~LogMessage((google::LogMessage *)&v319);
    }
  }
LABEL_171:
  if (v48 == -1)
  {
    v146 = -1;
    v147 = v325;
    if (v325 < 2)
      goto LABEL_179;
LABEL_182:
    v154 = *(_QWORD *)(a1 + 232);
    v155 = *(_QWORD *)(a1 + 240);
    *(_QWORD *)&v319 = __PAIR64__(v127, v120);
    *((_QWORD *)&v319 + 1) = a4;
    v320 = v146;
    v321 = 0;
    if ((v147 & 1) == 0)
    {
      v321 = v147;
      *(_OWORD *)__p = v326;
      v323 = v327;
      v324 = 0;
      if (v155 < *(_QWORD *)(a1 + 248))
      {
LABEL_184:
        v156 = v319;
        *(_DWORD *)(v155 + 16) = v320;
        *(_OWORD *)v155 = v156;
        *(_QWORD *)(v155 + 24) = 0;
        *(_QWORD *)(v155 + 24) = v321;
        v157 = *(_OWORD *)__p;
        *(_QWORD *)(v155 + 48) = v323;
        *(_OWORD *)(v155 + 32) = v157;
        v321 = 0;
        *(_BYTE *)(v155 + 56) = v324;
        *(_QWORD *)(a1 + 240) = v155 + 64;
        goto LABEL_202;
      }
LABEL_200:
      v171 = std::vector<operations_research::sat::PrecedencesPropagator::ArcInfo>::__push_back_slow_path<operations_research::sat::PrecedencesPropagator::ArcInfo>((void **)(a1 + 232), (uint64_t)&v319);
      v172 = v321;
      *(_QWORD *)(a1 + 240) = v171;
      if ((v172 & 1) != 0)
        operator delete(__p[0]);
LABEL_202:
      v173 = (v155 - v154) >> 6;
      v174 = *(_QWORD *)(a1 + 208);
      v175 = v174 + 32 * v120;
      v176 = v175 + 8;
      v177 = *(_QWORD *)v175;
      if ((*(_QWORD *)v175 & 1) != 0)
      {
        v176 = *(_QWORD *)(v175 + 8);
        v178 = *(_QWORD *)(v175 + 16);
        v179 = v177 >> 1;
        if (v177 >> 1 != v178)
          goto LABEL_204;
      }
      else
      {
        v178 = 6;
        v179 = v177 >> 1;
        if (v177 >> 1 != 6)
        {
LABEL_204:
          *(_DWORD *)(v176 + 4 * v179) = v173;
          goto LABEL_220;
        }
      }
      if (((v178 >> 61) & 3) != 0)
        goto LABEL_360;
      v180 = (char *)operator new(8 * v178);
      v181 = v180;
      *(_DWORD *)&v180[4 * v178] = v173;
      if (v177 >= 2)
      {
        v182 = 0;
        if (v178 < 8 || (unint64_t)&v180[-v176] < 0x20)
        {
          v183 = (int *)v176;
        }
        else
        {
          v182 = v178 & 0xFFFFFFFFFFFFFFF8;
          v183 = (int *)(v176 + 4 * (v178 & 0xFFFFFFFFFFFFFFF8));
          v184 = v180 + 16;
          v185 = (__int128 *)(v176 + 16);
          v186 = v178 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v187 = *v185;
            *(v184 - 1) = *(v185 - 1);
            *v184 = v187;
            v184 += 2;
            v185 += 2;
            v186 -= 8;
          }
          while (v186);
          if (v178 == v182)
            goto LABEL_217;
        }
        v188 = v178 - v182;
        v189 = &v180[4 * v182];
        do
        {
          v190 = *v183++;
          *(_DWORD *)v189 = v190;
          v189 += 4;
          --v188;
        }
        while (v188);
      }
LABEL_217:
      if ((v177 & 1) != 0)
      {
        operator delete(*(void **)(v175 + 8));
        v177 = *(_QWORD *)v175;
      }
      *(_QWORD *)(v175 + 8) = v181;
      *(_QWORD *)(v175 + 16) = 2 * v178;
      v177 |= 1uLL;
      v174 = *(_QWORD *)(a1 + 208);
LABEL_220:
      *(_QWORD *)v175 = v177 + 2;
      v191 = v174 + 32 * (v317 ^ 1);
      v192 = v191 + 8;
      v193 = *(_QWORD *)v191;
      if ((*(_QWORD *)v191 & 1) != 0)
      {
        v192 = *(_QWORD *)(v191 + 8);
        v194 = *(_QWORD *)(v191 + 16);
        v195 = v193 >> 1;
        if (v193 >> 1 != v194)
        {
LABEL_222:
          *(_DWORD *)(v192 + 4 * v195) = v173;
          *(_QWORD *)v191 = v193 + 2;
          v127 = v317;
          if (v146 == -1)
            goto LABEL_257;
LABEL_239:
          v207 = *(_QWORD *)(a1 + 208) + 32 * v146;
          v208 = v207 + 8;
          v209 = *(_QWORD *)v207;
          if ((*(_QWORD *)v207 & 1) != 0)
          {
            v208 = *(_QWORD *)(v207 + 8);
            v210 = *(_QWORD *)(v207 + 16);
            v211 = v209 >> 1;
            if (v209 >> 1 != v210)
              goto LABEL_241;
          }
          else
          {
            v210 = 6;
            v211 = v209 >> 1;
            if (v209 >> 1 != 6)
            {
LABEL_241:
              *(_DWORD *)(v208 + 4 * v211) = v173;
              v127 = v317;
              *(_QWORD *)v207 = v209 + 2;
              goto LABEL_180;
            }
          }
          if (((v210 >> 61) & 3) == 0)
          {
            v212 = (char *)operator new(8 * v210);
            v213 = v212;
            *(_DWORD *)&v212[4 * v210] = v173;
            if (v209 >= 2)
            {
              v214 = 0;
              if (v210 < 8 || (unint64_t)&v212[-v208] < 0x20)
              {
                v215 = (int *)v208;
              }
              else
              {
                v214 = v210 & 0xFFFFFFFFFFFFFFF8;
                v215 = (int *)(v208 + 4 * (v210 & 0xFFFFFFFFFFFFFFF8));
                v216 = v212 + 16;
                v217 = (__int128 *)(v208 + 16);
                v218 = v210 & 0xFFFFFFFFFFFFFFF8;
                do
                {
                  v219 = *v217;
                  *(v216 - 1) = *(v217 - 1);
                  *v216 = v219;
                  v216 += 2;
                  v217 += 2;
                  v218 -= 8;
                }
                while (v218);
                if (v210 == v214)
                  goto LABEL_254;
              }
              v220 = v210 - v214;
              v221 = &v212[4 * v214];
              do
              {
                v222 = *v215++;
                *(_DWORD *)v221 = v222;
                v221 += 4;
                --v220;
              }
              while (v220);
            }
LABEL_254:
            if ((v209 & 1) != 0)
            {
              operator delete(*(void **)(v207 + 8));
              v209 = *(_QWORD *)v207;
            }
            *(_QWORD *)(v207 + 8) = v213;
            *(_QWORD *)(v207 + 16) = 2 * v210;
            v127 = v317;
            *(_QWORD *)v207 = (v209 | 1) + 2;
            goto LABEL_180;
          }
LABEL_360:
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
      }
      else
      {
        v194 = 6;
        v195 = v193 >> 1;
        if (v193 >> 1 != 6)
          goto LABEL_222;
      }
      if (((v194 >> 61) & 3) != 0)
        goto LABEL_360;
      v196 = (char *)operator new(8 * v194);
      v197 = v196;
      *(_DWORD *)&v196[4 * v194] = v173;
      if (v193 >= 2)
      {
        v198 = 0;
        if (v194 < 8 || (unint64_t)&v196[-v192] < 0x20)
        {
          v199 = (int *)v192;
        }
        else
        {
          v198 = v194 & 0xFFFFFFFFFFFFFFF8;
          v199 = (int *)(v192 + 4 * (v194 & 0xFFFFFFFFFFFFFFF8));
          v200 = v196 + 16;
          v201 = (__int128 *)(v192 + 16);
          v202 = v194 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v203 = *v201;
            *(v200 - 1) = *(v201 - 1);
            *v200 = v203;
            v200 += 2;
            v201 += 2;
            v202 -= 8;
          }
          while (v202);
          if (v194 == v198)
            goto LABEL_236;
        }
        v204 = v194 - v198;
        v205 = &v196[4 * v198];
        do
        {
          v206 = *v199++;
          *(_DWORD *)v205 = v206;
          v205 += 4;
          --v204;
        }
        while (v204);
      }
LABEL_236:
      if ((v193 & 1) != 0)
      {
        operator delete(*(void **)(v191 + 8));
        v193 = *(_QWORD *)v191;
      }
      *(_QWORD *)(v191 + 8) = v197;
      *(_QWORD *)(v191 + 16) = 2 * v194;
      *(_QWORD *)v191 = (v193 | 1) + 2;
      v127 = v317;
      if (v146 == -1)
        goto LABEL_257;
      goto LABEL_239;
    }
    v158 = (int *)v326;
    v159 = v147 >> 1;
    if (v147 < 0xE)
    {
      v162 = 0;
      v161 = __p;
      v163 = 0;
    }
    else
    {
      if (v159 <= 0xC)
        v160 = 12;
      else
        v160 = v147 >> 1;
      if (v160 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v161 = operator new(4 * v160);
      __p[0] = v161;
      __p[1] = (void *)v160;
      v162 = 1;
      v163 = 0;
      if (v147 >= 0x10 && (unint64_t)((char *)v161 - (char *)v158) >= 0x20)
      {
        v163 = v159 & 0x7FFFFFFFFFFFFFF8;
        v164 = v161 + 1;
        v165 = (__int128 *)(v158 + 4);
        v166 = v159 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v167 = *v165;
          *(v164 - 1) = *(v165 - 1);
          *v164 = v167;
          v164 += 2;
          v165 += 2;
          v166 -= 8;
        }
        while (v166);
        v158 += v159 & 0x7FFFFFFFFFFFFFF8;
        if (v159 == v163)
        {
LABEL_199:
          v321 = v162 | v147 & 0xFFFFFFFFFFFFFFFELL;
          v324 = 0;
          if (v155 < *(_QWORD *)(a1 + 248))
            goto LABEL_184;
          goto LABEL_200;
        }
      }
    }
    v168 = v159 - v163;
    v169 = (_DWORD *)v161 + v163;
    do
    {
      v170 = *v158++;
      *v169++ = v170;
      --v168;
    }
    while (v168);
    goto LABEL_199;
  }
  v141 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40);
  v142 = *(_QWORD *)(v141 + 12 * v48);
  v143 = *(_QWORD *)(v141 + 12 * (v48 ^ 1));
  v144 = v142 + v143 == 0;
  if (v142 + v143)
    v145 = 0;
  else
    v145 = v142;
  a4 += v145;
  if (v144)
    v146 = -1;
  else
    v146 = v48;
  v147 = v325;
  if (v325 >= 2)
    goto LABEL_182;
LABEL_179:
  if (v146 == -1)
  {
LABEL_257:
    v223 = operator new(0xCuLL);
    *v223 = v120;
    v223[1] = v127;
    v223[2] = -1;
    v224 = (int *)operator new(0x18uLL);
    v224[4] = v120 ^ 1;
    v224[5] = -1;
    *(_QWORD *)v224 = *(_QWORD *)v223;
    v224[2] = v223[2];
    v224[3] = v127 ^ 1;
    v310 = v224 + 6;
    operator delete(v223);
    v153 = v224;
    goto LABEL_258;
  }
LABEL_180:
  v148 = operator new(0xCuLL);
  *v148 = v120;
  v148[1] = v127;
  v148[2] = v146;
  v149 = operator new(0x18uLL);
  v149[4] = v127;
  v149[5] = v120;
  *(_QWORD *)v149 = *(_QWORD *)v148;
  v149[2] = v148[2];
  v149[3] = v146;
  operator delete(v148);
  v150 = operator new(0x30uLL);
  v150[6] = v120;
  v150[7] = v146 ^ 1;
  v150[8] = v127 ^ 1;
  *(_OWORD *)v150 = *(_OWORD *)v149;
  *((_QWORD *)v150 + 2) = *((_QWORD *)v149 + 2);
  operator delete(v149);
  v150[9] = v127 ^ 1;
  v150[10] = v146 ^ 1;
  v150[11] = v120;
  v151 = operator new(0x60uLL);
  v151[12] = v146;
  v151[13] = v120 ^ 1;
  v151[14] = v127 ^ 1;
  v152 = *((_OWORD *)v150 + 1);
  *(_OWORD *)v151 = *(_OWORD *)v150;
  *((_OWORD *)v151 + 1) = v152;
  *((_OWORD *)v151 + 2) = *((_OWORD *)v150 + 2);
  operator delete(v150);
  v151[15] = v127 ^ 1;
  v151[16] = v120 ^ 1;
  v310 = v151 + 18;
  v153 = v151;
  v151[17] = v146;
LABEL_258:
  v309 = v153;
  do
  {
    v226 = *v153;
    v225 = v153[1];
    v318 = v153;
    v227 = v153[2];
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set((_QWORD *)(a1 + 80), *v153);
    v228 = *(_QWORD *)(a1 + 184);
    v229 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)&v319 = __PAIR64__(v225, v226);
    *((_QWORD *)&v319 + 1) = a4;
    v320 = v227;
    v321 = 0;
    v230 = v325;
    if ((v325 & 1) == 0)
    {
      v321 = v325;
      *(_OWORD *)__p = v326;
      v323 = v327;
      v324 = 0;
      if (v229 >= *(_QWORD *)(a1 + 200))
        goto LABEL_277;
      goto LABEL_261;
    }
    v234 = (int *)v326;
    v235 = v325 >> 1;
    if (v325 < 0xE)
    {
      v238 = 0;
      v237 = __p;
      if (v325 < 2)
        goto LABEL_276;
    }
    else
    {
      if (v235 <= 0xC)
        v236 = 12;
      else
        v236 = v325 >> 1;
      if (v236 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v237 = operator new(4 * v236);
      __p[0] = v237;
      __p[1] = (void *)v236;
      v238 = 1;
    }
    v239 = 0;
    if (v230 < 0x10)
      goto LABEL_274;
    if ((unint64_t)((char *)v237 - (char *)v234) < 0x20)
      goto LABEL_274;
    v239 = v235 & 0x7FFFFFFFFFFFFFF8;
    v240 = v237 + 1;
    v241 = (__int128 *)(v234 + 4);
    v242 = v235 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v243 = *v241;
      *(v240 - 1) = *(v241 - 1);
      *v240 = v243;
      v240 += 2;
      v241 += 2;
      v242 -= 8;
    }
    while (v242);
    v234 += v235 & 0x7FFFFFFFFFFFFFF8;
    if (v235 != v239)
    {
LABEL_274:
      v244 = v235 - v239;
      v245 = (_DWORD *)v237 + v239;
      do
      {
        v246 = *v234++;
        *v245++ = v246;
        --v244;
      }
      while (v244);
    }
LABEL_276:
    v321 = v238 | v230 & 0xFFFFFFFFFFFFFFFELL;
    v324 = 0;
    if (v229 >= *(_QWORD *)(a1 + 200))
    {
LABEL_277:
      v233 = std::vector<operations_research::sat::PrecedencesPropagator::ArcInfo>::__push_back_slow_path<operations_research::sat::PrecedencesPropagator::ArcInfo>((void **)(a1 + 184), (uint64_t)&v319);
      v247 = v321;
      *(_QWORD *)(a1 + 192) = v233;
      if ((v247 & 1) != 0)
      {
        operator delete(__p[0]);
        v233 = *(char **)(a1 + 192);
      }
      goto LABEL_279;
    }
LABEL_261:
    v231 = v319;
    *(_DWORD *)(v229 + 16) = v320;
    *(_OWORD *)v229 = v231;
    *(_QWORD *)(v229 + 24) = 0;
    *(_QWORD *)(v229 + 24) = v321;
    v232 = *(_OWORD *)__p;
    *(_QWORD *)(v229 + 48) = v323;
    *(_OWORD *)(v229 + 32) = v232;
    v321 = 0;
    *(_BYTE *)(v229 + 56) = v324;
    v233 = (char *)(v229 + 64);
    *(_QWORD *)(a1 + 192) = v229 + 64;
LABEL_279:
    v248 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 408) + 4 * v225);
    v249 = *((_QWORD *)v233 - 5);
    if (v248 != -1)
    {
      v250 = v233 - 32;
      v251 = v233 - 32;
      if ((v249 & 1) != 0)
        v251 = *(char **)v250;
      v252 = v249 >> 1;
      v253 = v249 - 2;
      if (v249 >= 2)
      {
        v254 = v248 ^ 1;
        v255 = 4 * v252;
        v256 = &v251[4 * v252];
        while (*(_DWORD *)v251 != v254)
        {
          v251 += 4;
          v255 -= 4;
          if (!v255)
          {
            v251 = v256;
            break;
          }
        }
      }
      if ((v249 & 1) != 0)
        v250 = *(char **)v250;
      if (v251 != &v250[4 * v252])
      {
        v257 = (v251 - v250) >> 2;
        v258 = v252 - (v257 + 1);
        if (v252 != v257 + 1)
        {
          v259 = &v250[4 * v257 + 4];
          if (v258 >= 8)
          {
            v260 = v258 & 0xFFFFFFFFFFFFFFF8;
            v259 += 4 * (v258 & 0xFFFFFFFFFFFFFFF8);
            v261 = &v250[4 * v257 + 20];
            v262 = v258 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v263 = *(_OWORD *)v261;
              *(_OWORD *)(v261 - 20) = *((_OWORD *)v261 - 1);
              *(_OWORD *)(v261 - 4) = v263;
              v261 += 32;
              v262 -= 8;
            }
            while (v262);
            if (v258 == v260)
              goto LABEL_299;
          }
          else
          {
            v260 = 0;
          }
          v264 = v260 + v257 - v252 + 1;
          v265 = &v250[4 * v260 + 4 * v257];
          do
          {
            v266 = *(_DWORD *)v259;
            v259 += 4;
            *(_DWORD *)v265 = v266;
            v265 += 4;
            v119 = __CFADD__(v264++, 1);
          }
          while (!v119);
        }
LABEL_299:
        *((_QWORD *)v233 - 5) = v253;
        v249 = v253;
      }
    }
    v267 = (v229 - v228) >> 6;
    v316 = v233;
    if (v249 > 1)
    {
      v273 = v233 - 32;
      if ((v249 & 1) != 0)
        v273 = *(char **)v273;
      v274 = (int *)&v273[4 * (v249 >> 1)];
      while (1)
      {
        while (1)
        {
          v275 = *(int *)v273;
          v277 = *(_QWORD *)(a1 + 352);
          v276 = *(_QWORD *)(a1 + 360);
          v278 = (v276 - v277) >> 5;
          if ((int)v275 >= (int)v278)
          {
            if (v275 + 1 <= v278)
            {
              if (v275 + 1 < v278)
              {
                v279 = v277 + 32 * (v275 + 1);
                if (v276 != v279)
                {
                  v280 = *(_QWORD *)(a1 + 360);
                  do
                  {
                    v281 = *(_BYTE *)(v280 - 32);
                    v280 -= 32;
                    if ((v281 & 1) != 0)
                      operator delete(*(void **)(v276 - 24));
                    v276 = v280;
                  }
                  while (v280 != v279);
                }
                *(_QWORD *)(a1 + 360) = v279;
              }
            }
            else
            {
              std::vector<absl::lts_2020_02_25::InlinedVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,6ul,std::allocator<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>::__append((uint64_t *)(a1 + 352), v275 + 1 - v278);
            }
          }
          v282 = *(_QWORD *)(a1 + 352) + 32 * v275;
          v284 = v282 + 8;
          v283 = *(_QWORD *)v282;
          if ((*(_QWORD *)v282 & 1) == 0)
            break;
          v284 = *(_QWORD *)(v282 + 8);
          v285 = *(_QWORD *)(v282 + 16);
          v286 = v283 >> 1;
          if (v283 >> 1 == v285)
            goto LABEL_322;
LABEL_307:
          *(_DWORD *)(v284 + 4 * v286) = v267;
          *(_QWORD *)v282 = v283 + 2;
          v273 += 4;
          if (v273 == (char *)v274)
            goto LABEL_353;
        }
        v285 = 6;
        v286 = v283 >> 1;
        if (v283 >> 1 != 6)
          goto LABEL_307;
LABEL_322:
        if (((v285 >> 61) & 3) != 0)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v287 = (char *)operator new(8 * v285);
        v288 = v287;
        *(_DWORD *)&v287[4 * v285] = v267;
        if (v283 < 2)
          goto LABEL_333;
        v289 = 0;
        if (v285 < 8 || (unint64_t)&v287[-v284] < 0x20)
        {
          v290 = (int *)v284;
        }
        else
        {
          v289 = v285 & 0xFFFFFFFFFFFFFFF8;
          v290 = (int *)(v284 + 4 * (v285 & 0xFFFFFFFFFFFFFFF8));
          v291 = v287 + 16;
          v292 = (__int128 *)(v284 + 16);
          v293 = v285 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v294 = *v292;
            *(v291 - 1) = *(v292 - 1);
            *v291 = v294;
            v291 += 2;
            v292 += 2;
            v293 -= 8;
          }
          while (v293);
          if (v285 == v289)
            goto LABEL_333;
        }
        v295 = v285 - v289;
        v296 = &v287[4 * v289];
        do
        {
          v297 = *v290++;
          *(_DWORD *)v296 = v297;
          v296 += 4;
          --v295;
        }
        while (v295);
LABEL_333:
        if ((v283 & 1) != 0)
        {
          operator delete(*(void **)(v282 + 8));
          v283 = *(_QWORD *)v282;
        }
        *(_QWORD *)(v282 + 8) = v288;
        *(_QWORD *)(v282 + 16) = 2 * v285;
        *(_QWORD *)v282 = (v283 | 1) + 2;
        v273 += 4;
        if (v273 == (char *)v274)
          goto LABEL_353;
      }
    }
    v268 = *(_QWORD *)(a1 + 160) + 32 * v226;
    v270 = v268 + 8;
    v269 = *(_QWORD *)v268;
    if ((*(_QWORD *)v268 & 1) != 0)
    {
      v270 = *(_QWORD *)(v268 + 8);
      v271 = *(_QWORD *)(v268 + 16);
      v272 = v269 >> 1;
      if (v269 >> 1 != v271)
        goto LABEL_303;
LABEL_338:
      if (((v271 >> 61) & 3) != 0)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v298 = (char *)operator new(8 * v271);
      v299 = v298;
      *(_DWORD *)&v298[4 * v271] = v267;
      if (v269 >= 2)
      {
        v300 = 0;
        if (v271 < 8 || (unint64_t)&v298[-v270] < 0x20)
        {
          v301 = (int *)v270;
        }
        else
        {
          v300 = v271 & 0xFFFFFFFFFFFFFFF8;
          v301 = (int *)(v270 + 4 * (v271 & 0xFFFFFFFFFFFFFFF8));
          v302 = v298 + 16;
          v303 = (__int128 *)(v270 + 16);
          v304 = v271 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v305 = *v303;
            *(v302 - 1) = *(v303 - 1);
            *v302 = v305;
            v302 += 2;
            v303 += 2;
            v304 -= 8;
          }
          while (v304);
          if (v271 == v300)
            goto LABEL_349;
        }
        v306 = v271 - v300;
        v307 = &v298[4 * v300];
        do
        {
          v308 = *v301++;
          *(_DWORD *)v307 = v308;
          v307 += 4;
          --v306;
        }
        while (v306);
      }
LABEL_349:
      if ((v269 & 1) != 0)
      {
        operator delete(*(void **)(v268 + 8));
        v269 = *(_QWORD *)v268;
      }
      *(_QWORD *)(v268 + 8) = v299;
      *(_QWORD *)(v268 + 16) = 2 * v271;
      v269 |= 1uLL;
      goto LABEL_352;
    }
    v271 = 6;
    v272 = v269 >> 1;
    if (v269 >> 1 == 6)
      goto LABEL_338;
LABEL_303:
    *(_DWORD *)(v270 + 4 * v272) = v267;
LABEL_352:
    *(_QWORD *)v268 = v269 + 2;
LABEL_353:
    LODWORD(v319) = *((_QWORD *)v316 - 5) >> 1;
    gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back(a1 + 376, &v319);
    v153 = v318 + 3;
  }
  while (v318 + 3 != v310);
  operator delete(v309);
  if ((v325 & 1) != 0)
LABEL_135:
    operator delete((void *)v326);
}

void sub_22DBB8290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,void *__p)
{
  uint64_t v23;

  if ((*(_BYTE *)(v23 - 128) & 1) == 0)
    _Unwind_Resume(exception_object);
  operator delete(*(void **)(v23 - 120));
  _Unwind_Resume(exception_object);
}

_QWORD *operations_research::sat::operator<<(_QWORD *a1, int *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  _QWORD *v10;
  void *__p[2];
  unsigned __int8 v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v5 = 4 * a3;
    do
    {
      v6 = *a2 >> 1;
      if ((*a2 & 1) != 0)
        v7 = ~v6;
      else
        v7 = (v6 + 1);
      v14[0] = v7;
      v14[1] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<int>;
      absl::lts_2020_02_25::str_format_internal::FormatPack("%+d", 3, (uint64_t)v14, 1, (uint64_t)__p);
      if ((v13 & 0x80u) == 0)
        v8 = __p;
      else
        v8 = (void **)__p[0];
      if ((v13 & 0x80u) == 0)
        v9 = v13;
      else
        v9 = (uint64_t)__p[1];
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v8, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)",", 1);
      if ((char)v13 < 0)
        operator delete(__p[0]);
      ++a2;
      v5 -= 4;
    }
    while (v5);
  }
  return a1;
}

void sub_22DBB8530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::`anonymous namespace'::AppendLowerBoundReasonIfValid(int a1, uint64_t a2, char **a3)
{
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  int v15;
  _BYTE v16[12];

  if (a1 != -1)
  {
    *(_DWORD *)v16 = a1;
    *(_QWORD *)&v16[4] = *(_QWORD *)(a2 + 12 * a1);
    v5 = a3[1];
    v4 = (unint64_t)a3[2];
    if ((unint64_t)v5 >= v4)
    {
      v7 = *a3;
      v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a3) >> 2);
      v9 = v8 + 1;
      if (v8 + 1 > 0x1555555555555555)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (_QWORD)v7) >> 2);
      if (2 * v10 > v9)
        v9 = 2 * v10;
      if (v10 >= 0xAAAAAAAAAAAAAAALL)
        v11 = 0x1555555555555555;
      else
        v11 = v9;
      if (v11)
      {
        if (v11 > 0x1555555555555555)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v12 = (char *)operator new(12 * v11);
      }
      else
      {
        v12 = 0;
      }
      v13 = &v12[12 * v8];
      *(_QWORD *)v13 = *(_QWORD *)v16;
      *((_DWORD *)v13 + 2) = *(_DWORD *)&v16[8];
      v6 = v13 + 12;
      if (v5 != v7)
      {
        do
        {
          v14 = *(_QWORD *)(v5 - 12);
          v5 -= 12;
          v15 = *((_DWORD *)v5 + 2);
          *(_QWORD *)(v13 - 12) = v14;
          v13 -= 12;
          *((_DWORD *)v13 + 2) = v15;
        }
        while (v5 != v7);
        v5 = *a3;
      }
      *a3 = v13;
      a3[1] = v6;
      a3[2] = &v12[12 * v11];
      if (v5)
        operator delete(v5);
    }
    else
    {
      *(_QWORD *)v5 = *(_QWORD *)v16;
      *((_DWORD *)v5 + 2) = *(_DWORD *)&v16[8];
      v6 = v5 + 12;
    }
    a3[1] = v6;
  }
}

uint64_t operations_research::sat::PrecedencesPropagator::DisassembleSubtree(_QWORD *a1, int a2, int a3, _QWORD *a4)
{
  char *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int *v21;
  unint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  _DWORD *v35;
  unint64_t v36;
  char *v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  int *v47;
  _QWORD *v48;
  unint64_t v49;

  v8 = (char *)a1[71];
  a1[72] = v8;
  v9 = a1[73];
  if ((unint64_t)v8 < v9)
  {
    *(_DWORD *)v8 = a2;
    v10 = v8 + 4;
    goto LABEL_10;
  }
  v11 = v9 - (_QWORD)v8;
  v12 = v11 >> 1;
  if ((unint64_t)(v11 >> 1) <= 1)
    v12 = 1;
  v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
  v14 = 0x3FFFFFFFFFFFFFFFLL;
  if (!v13)
    v14 = v12;
  if (v14 >> 62)
LABEL_49:
    std::__throw_bad_array_new_length[abi:ne180100]();
  v15 = v14;
  v16 = operator new(4 * v14);
  a1[71] = v16;
  *v16 = a2;
  v10 = (char *)(v16 + 1);
  a1[72] = v16 + 1;
  a1[73] = &v16[v15];
  if (!v8 || (operator delete(v8), v17 = (char *)a1[71], a1[72] = v10, v17 != v10))
  {
LABEL_10:
    v48 = a1 + 71;
    while (1)
    {
      v18 = *((int *)v10 - 1);
      v10 -= 4;
      a1[72] = v10;
      v19 = (_QWORD *)(a1[20] + 32 * v18);
      v22 = *v19;
      v21 = (int *)(v19 + 1);
      v20 = v22;
      if ((v22 & 1) != 0)
        v21 = *(int **)v21;
      if (v20 >= 2)
        break;
LABEL_11:
      if ((char *)*v48 == v10)
        return 0;
    }
    v23 = &v21[v20 >> 1];
    v47 = v23;
    while (1)
    {
      v25 = a1[23] + ((uint64_t)*v21 << 6);
      if (!*(_BYTE *)(v25 + 56))
        goto LABEL_18;
      *(_BYTE *)(v25 + 56) = 0;
      v26 = *(_DWORD *)(v25 + 4);
      if (v26 == a3)
        return 1;
      *(_QWORD *)(*a4 + (((unint64_t)v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
      v27 = a1[73];
      if ((unint64_t)v10 >= v27)
        break;
      *(_DWORD *)v10 = v26;
      v24 = (uint64_t)(v10 + 4);
LABEL_17:
      a1[72] = v24;
      v10 = (char *)v24;
LABEL_18:
      if (++v21 == v23)
        goto LABEL_11;
    }
    v28 = a4;
    v29 = (char *)*v48;
    v30 = (uint64_t)&v10[-*v48];
    v31 = v30 >> 2;
    v32 = (v30 >> 2) + 1;
    if (v32 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v33 = v27 - (_QWORD)v29;
    if (v33 >> 1 > v32)
      v32 = v33 >> 1;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
      v32 = 0x3FFFFFFFFFFFFFFFLL;
    v49 = v32;
    if (v32)
    {
      if (v32 >> 62)
        goto LABEL_49;
      v34 = operator new(4 * v32);
      v35 = &v34[4 * v31];
      *v35 = v26;
      v24 = (uint64_t)(v35 + 1);
      if (v10 != v29)
      {
LABEL_30:
        v36 = v10 - 4 - v29;
        if (v36 < 0xBC
          || &v34[v30 - 4 - (v36 & 0xFFFFFFFFFFFFFFFCLL)] > &v34[v30 - 4]
          || &v10[-(v36 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v10 - 4
          || (unint64_t)(v10 - v34 - v30) < 0x20)
        {
          v37 = v10;
          a4 = v28;
          v38 = v49;
        }
        else
        {
          v40 = (v36 >> 2) + 1;
          v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
          v37 = &v10[-v41];
          v35 = (_DWORD *)((char *)v35 - v41);
          v42 = &v34[4 * v31 - 16];
          v43 = v10 - 16;
          v44 = v40 & 0x7FFFFFFFFFFFFFF8;
          a4 = v28;
          do
          {
            v45 = *(_OWORD *)v43;
            *(v42 - 1) = *((_OWORD *)v43 - 1);
            *v42 = v45;
            v42 -= 2;
            v43 -= 32;
            v44 -= 8;
          }
          while (v44);
          v38 = v49;
          if (v40 == (v40 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_33:
            a1[71] = v35;
            a1[72] = v24;
            a1[73] = &v34[4 * v38];
            if (!v29)
            {
LABEL_35:
              v23 = v47;
              goto LABEL_17;
            }
LABEL_34:
            operator delete(v29);
            goto LABEL_35;
          }
        }
        do
        {
          v39 = *((_DWORD *)v37 - 1);
          v37 -= 4;
          *--v35 = v39;
        }
        while (v37 != v29);
        goto LABEL_33;
      }
    }
    else
    {
      v34 = 0;
      v35 = (_DWORD *)(4 * v31);
      *(_DWORD *)(4 * v31) = v26;
      v24 = 4 * v31 + 4;
      if (v10 != v29)
        goto LABEL_30;
    }
    a4 = v28;
    a1[71] = v35;
    a1[72] = v24;
    a1[73] = &v34[4 * v49];
    if (!v29)
      goto LABEL_35;
    goto LABEL_34;
  }
  return 0;
}

void operations_research::sat::PrecedencesPropagator::AnalyzePositiveCycle(_QWORD *a1, int a2, uint64_t a3, _QWORD *a4, _QWORD *a5, uint64_t a6)
{
  char *v7;
  char *v8;
  unint64_t v9;
  char *v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  char *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  int v46;
  int *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _BYTE *v56;
  _DWORD *v57;
  _QWORD *v58;
  char *v59;
  uint64_t v60;
  int v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  int *v70;
  unint64_t v71;
  char *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD *v76;
  char *v77;
  uint64_t v78;
  __int128 v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  _OWORD *v84;
  char *v85;
  uint64_t v86;
  __int128 v87;
  int v88;
  char *v89;
  _QWORD *v90;
  uint64_t *v91;
  char *__p;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  uint64_t *v102;
  unint64_t v103[2];
  uint64_t *v104;
  char *v105;
  char *v106;
  char *v107;
  int v108;

  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  a4[1] = *a4;
  a5[1] = *a5;
  *(_QWORD *)(a6 + 8) = *(_QWORD *)a6;
  v11 = *(_DWORD *)(a1[23] + ((uint64_t)a2 << 6) + 4);
  v108 = a2;
  v105 = 0;
  v106 = 0;
  v107 = 0;
  v12 = a1[21] - a1[20];
  v99 = (unint64_t)v12 >> 5;
  v13 = (int)(v12 >> 5);
  do
  {
    if (v10 >= v8)
    {
      v14 = v9 + 1;
      if ((v9 + 1) >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      if ((v8 - v7) >> 1 > v14)
        v14 = (v8 - v7) >> 1;
      if ((unint64_t)(v8 - v7) >= 0x7FFFFFFFFFFFFFFCLL)
        v15 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      if (v15)
      {
        if (v15 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v16 = (char *)operator new(4 * v15);
        v17 = v10;
        v18 = &v16[4 * v9];
        *(_DWORD *)v18 = v108;
        v10 = v18 + 4;
        if (v17 == v7)
          goto LABEL_18;
      }
      else
      {
        v17 = v10;
        v16 = 0;
        v18 = (char *)(4 * v9);
        *(_DWORD *)(4 * v9) = v108;
        v10 = (char *)(4 * v9 + 4);
        if (v17 == v7)
          goto LABEL_18;
      }
      v19 = v17;
      v20 = v17 - 4;
      v21 = v20 - v7;
      if ((unint64_t)(v20 - v7) >= 0xBC)
      {
        v25 = 4 * v9;
        if (&v16[4 * v9 - 4 - (v21 & 0xFFFFFFFFFFFFFFFCLL)] > &v16[4 * v9 - 4])
        {
          v22 = v19;
        }
        else if (&v20[-(v21 & 0xFFFFFFFFFFFFFFFCLL)] > v20)
        {
          v22 = v19;
        }
        else if ((unint64_t)(v20 - &v16[v25] + 4) >= 0x20)
        {
          v26 = (v21 >> 2) + 1;
          v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
          v22 = &v19[-v27];
          v18 -= v27;
          v28 = &v16[v25 - 16];
          v29 = v19 - 16;
          v30 = v26 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v31 = *(_OWORD *)v29;
            *((_OWORD *)v28 - 1) = *((_OWORD *)v29 - 1);
            *(_OWORD *)v28 = v31;
            v28 -= 32;
            v29 -= 32;
            v30 -= 8;
          }
          while (v30);
          if (v26 == (v26 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_18;
        }
        else
        {
          v22 = v19;
        }
      }
      else
      {
        v22 = v19;
      }
      do
      {
        v23 = *((_DWORD *)v22 - 1);
        v22 -= 4;
        *((_DWORD *)v18 - 1) = v23;
        v18 -= 4;
      }
      while (v22 != v7);
LABEL_18:
      v8 = &v16[4 * v15];
      v105 = v18;
      v106 = v10;
      v107 = v8;
      if (v7)
        operator delete(v7);
      v7 = v18;
      goto LABEL_21;
    }
    *(_DWORD *)v10 = v108;
    v10 += 4;
LABEL_21:
    v106 = v10;
    v24 = *(int *)(a1[23] + ((uint64_t)v108 << 6));
    if ((_DWORD)v24 == v11)
      break;
    v108 = *(_DWORD *)(a1[68] + 4 * v24);
    LODWORD(v103[0]) = -1;
    if (v108 == -1)
    {
      v104 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::PrecedencesPropagator::ArcIndex_tag_,int>,gtl::IntType<operations_research::sat::PrecedencesPropagator::ArcIndex_tag_,int>>((int)&v108, (int)v103, "arc_index != ArcIndex(-1)");
      if (v104)
      {
        google::LogMessageFatal::LogMessageFatal(v103, (google::glog_internal_namespace_ *)"./ortools/sat/precedences.cc", 581, &v104);
        google::LogMessage::stream((google::LogMessage *)v103);
        goto LABEL_37;
      }
    }
    v9 = (v10 - v7) >> 2;
  }
  while (v9 <= v13);
  __p = v105;
  v103[0] = (v10 - v105) >> 2;
  LODWORD(v102) = v99 + 1;
  if (v103[0] == (_DWORD)v99 + 1)
  {
    v104 = (uint64_t *)google::MakeCheckOpString<unsigned long,int>((int)v103, (int)&v102, "arc_on_cycle.size() != num_nodes + 1");
    if (v104)
    {
      google::LogMessageFatal::LogMessageFatal(v103, (google::glog_internal_namespace_ *)"./ortools/sat/precedences.cc", 583, &v104);
      v90 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v103);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v90, "Infinite loop.");
      goto LABEL_37;
    }
  }
  v104 = 0;
  v32 = __p;
  if (__p == v10)
  {
    LODWORD(v103[0]) = 0;
    goto LABEL_110;
  }
  v33 = 0;
  v95 = v10;
  while (2)
  {
    v100 = v32;
    v35 = *(int *)v32;
    v36 = a1[23];
    v37 = v36 + (v35 << 6);
    v38 = *(_DWORD *)(v37 + 16);
    v39 = a1[7];
    if (v38 == -1)
    {
      v41 = 0;
      v40 = *(_QWORD *)(v39 + 40);
    }
    else
    {
      v40 = *(_QWORD *)(v39 + 40);
      v41 = *(_QWORD *)(v40 + 12 * v38);
    }
    v104 = (uint64_t *)(v41 + *(_QWORD *)(v37 + 8) + v33);
    v42 = v104;
    v96 = v36;
    v97 = v35;
    v43 = v36 + (v35 << 6);
    v44 = *(_QWORD *)(v43 + 24);
    v45 = (_QWORD *)(v43 + 32);
    v98 = (uint64_t)v42;
    if ((v44 & 1) != 0)
      v45 = (_QWORD *)*v45;
    if (v44 >= 2)
    {
      v58 = (_QWORD *)((char *)v45 + 4 * (v44 >> 1));
      v59 = (char *)a5[1];
      while (1)
      {
        v61 = *(_DWORD *)v45 ^ 1;
        v62 = a5[2];
        if ((unint64_t)v59 >= v62)
          break;
        *(_DWORD *)v59 = v61;
        v60 = (uint64_t)(v59 + 4);
LABEL_64:
        a5[1] = v60;
        v45 = (_QWORD *)((char *)v45 + 4);
        v59 = (char *)v60;
        if (v45 == v58)
          goto LABEL_50;
      }
      v63 = (char *)*a5;
      v64 = (uint64_t)&v59[-*a5];
      v65 = v64 >> 2;
      v66 = (v64 >> 2) + 1;
      if (v66 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v67 = v62 - (_QWORD)v63;
      if (v67 >> 1 > v66)
        v66 = v67 >> 1;
      if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL)
        v68 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v68 = v66;
      if (v68)
      {
        if (v68 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v69 = operator new(4 * v68);
        v70 = (int *)&v69[4 * v65];
        *v70 = v61;
        v60 = (uint64_t)(v70 + 1);
        if (v59 == v63)
          goto LABEL_80;
      }
      else
      {
        v69 = 0;
        v70 = (int *)(4 * v65);
        *(_DWORD *)(4 * v65) = v61;
        v60 = 4 * v65 + 4;
        if (v59 == v63)
          goto LABEL_80;
      }
      v71 = v59 - 4 - v63;
      if (v71 >= 0xBC)
      {
        if (&v69[v64 - 4 - (v71 & 0xFFFFFFFFFFFFFFFCLL)] > &v69[v64 - 4])
        {
          v72 = v59;
        }
        else if (&v59[-(v71 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v59 - 4)
        {
          v72 = v59;
        }
        else if ((unint64_t)(v59 - &v69[v64]) >= 0x20)
        {
          v74 = (v71 >> 2) + 1;
          v75 = 4 * (v74 & 0x7FFFFFFFFFFFFFF8);
          v72 = &v59[-v75];
          v70 = (int *)((char *)v70 - v75);
          v76 = &v69[4 * v65 - 16];
          v77 = v59 - 16;
          v78 = v74 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v79 = *(_OWORD *)v77;
            *(v76 - 1) = *((_OWORD *)v77 - 1);
            *v76 = v79;
            v76 -= 2;
            v77 -= 32;
            v78 -= 8;
          }
          while (v78);
          if (v74 == (v74 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_80:
            *a5 = v70;
            a5[1] = v60;
            a5[2] = &v69[4 * v68];
            if (v63)
              operator delete(v63);
            goto LABEL_64;
          }
        }
        else
        {
          v72 = v59;
        }
      }
      else
      {
        v72 = v59;
      }
      do
      {
        v73 = *((_DWORD *)v72 - 1);
        v72 -= 4;
        *--v70 = v73;
      }
      while (v72 != v63);
      goto LABEL_80;
    }
LABEL_50:
    v46 = *(_DWORD *)(*(_QWORD *)(a1[7] + 408) + 4 * *(int *)(v96 + (v97 << 6) + 4));
    v47 = (int *)v95;
    v33 = v98;
    if (v46 == -1)
      goto LABEL_43;
    v49 = (char *)a4[1];
    v48 = a4[2];
    if ((unint64_t)v49 < v48)
    {
      *(_DWORD *)v49 = v46;
      v34 = (uint64_t)(v49 + 4);
      goto LABEL_42;
    }
    v50 = (char *)*a4;
    v51 = (uint64_t)&v49[-*a4];
    v52 = v51 >> 2;
    v53 = (v51 >> 2) + 1;
    if (v53 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v54 = v48 - (_QWORD)v50;
    if (v54 >> 1 > v53)
      v53 = v54 >> 1;
    if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL)
      v55 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v55 = v53;
    if (!v55)
    {
      v56 = 0;
      v57 = (_DWORD *)(4 * v52);
      *(_DWORD *)(4 * v52) = v46;
      v34 = 4 * v52 + 4;
      if (v49 == v50)
        goto LABEL_99;
      goto LABEL_93;
    }
    if (v55 >> 62)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v56 = operator new(4 * v55);
    v57 = &v56[4 * v52];
    *v57 = v46;
    v34 = (uint64_t)(v57 + 1);
    if (v49 != v50)
    {
LABEL_93:
      v80 = v49 - 4 - v50;
      if (v80 < 0x2C)
        goto LABEL_120;
      if ((unint64_t)(v49 - &v56[v51]) < 0x20)
        goto LABEL_120;
      v81 = (v80 >> 2) + 1;
      v82 = 4 * (v81 & 0x7FFFFFFFFFFFFFF8);
      v83 = &v49[-v82];
      v57 = (_DWORD *)((char *)v57 - v82);
      v84 = &v56[4 * v52 - 16];
      v85 = v49 - 16;
      v86 = v81 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v87 = *(_OWORD *)v85;
        *(v84 - 1) = *((_OWORD *)v85 - 1);
        *v84 = v87;
        v84 -= 2;
        v85 -= 32;
        v86 -= 8;
      }
      while (v86);
      v49 = v83;
      if (v81 != (v81 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_120:
        do
        {
          v88 = *((_DWORD *)v49 - 1);
          v49 -= 4;
          *--v57 = v88;
        }
        while (v49 != v50);
      }
    }
LABEL_99:
    *a4 = v57;
    a4[1] = v34;
    a4[2] = &v56[4 * v55];
    if (v50)
      operator delete(v50);
    v47 = (int *)v95;
LABEL_42:
    a4[1] = v34;
LABEL_43:
    v32 = v100 + 4;
    if (v100 + 4 != (char *)v47)
      continue;
    break;
  }
  LODWORD(v103[0]) = 0;
  if (v98 >= 1)
  {
    v89 = __p;
    goto LABEL_104;
  }
LABEL_110:
  v91 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)&v104, (int)v103, "sum > 0");
  v89 = __p;
  v102 = v91;
  if (v91)
  {
    google::LogMessageFatal::LogMessageFatal(v103, (google::glog_internal_namespace_ *)"./ortools/sat/precedences.cc", 609, &v102);
    google::LogMessage::stream((google::LogMessage *)v103);
LABEL_37:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v103);
  }
LABEL_104:
  if (v89)
    operator delete(v89);
}

void sub_22DBB913C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBB9144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DBB914C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t absl::Cleanup<operations_research::sat::PrecedencesPropagator::BellmanFordTarjan(operations_research::sat::Trail *)::$_0>::~Cleanup(uint64_t result)
{
  _QWORD *v1;
  int *v2;
  int *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)result)
  {
    *(_BYTE *)result = 0;
    v1 = *(_QWORD **)(result + 8);
    v2 = (int *)v1[17];
    v3 = (int *)v1[18];
    if (v2 != v3)
    {
      v4 = (v1[21] - v1[20]) >> 5;
      do
      {
        v5 = *v2;
        if ((int)v5 < (int)v4)
        {
          v6 = v1[68];
          v7 = *(int *)(v6 + 4 * v5);
          if ((_DWORD)v7 != -1)
          {
            *(_BYTE *)(v1[23] + (v7 << 6) + 56) = 0;
            *(_DWORD *)(v6 + 4 * v5) = -1;
            *(_QWORD *)(v1[65] + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v5);
          }
        }
        ++v2;
      }
      while (v2 != v3);
    }
  }
  return result;
}

uint64_t operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraintsFromClause(_QWORD *a1, int *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7;
  __n128 *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  int *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 *v17;
  uint64_t v18;
  unint64_t v19;
  const std::nothrow_t *v20;
  unint64_t v21;
  __n128 *v22;
  BOOL v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  unsigned __int32 *v29;
  unsigned __int32 v30;
  unsigned int v31;
  char *v32;
  uint64_t *v33;
  char *v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  int v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _BYTE *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  _OWORD *v75;
  char *v76;
  uint64_t v77;
  __int128 v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  _OWORD *v82;
  char *v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  _OWORD *v88;
  char *v89;
  uint64_t v90;
  __int128 v91;
  int v92;
  char *v93;
  int *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  _BYTE *v100;
  int *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  _OWORD *v106;
  char *v107;
  uint64_t v108;
  __int128 v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t *v114;
  _DWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  int v118;
  unsigned int v119;
  void **v120;
  __n128 *v121;
  unint64_t *v123;
  operations_research::sat::SatSolver *v124;
  unsigned int v125;
  __int32 v126;
  int *v127;
  int v128;
  unsigned int v129;
  unint64_t v131;
  int *v132;
  int *v133;
  unsigned int v134;
  char *v135;
  __n128 *v136;
  int v137;
  char *v138;
  int *v139;
  char *v140;
  char *v141;
  char *__p;
  char *v143;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  uint64_t *v148;
  char *v149;
  char *v150;
  __n128 *v151;
  __n128 *v152;
  unint64_t v153;
  _BYTE v154[24];
  _BYTE *v155;
  uint64_t v156;

  v156 = *MEMORY[0x24BDAC8D0];
  LODWORD(v151) = (*(_DWORD *)(operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>(a4) + 8) >> 1) & 0x7FFFFFF;
  LODWORD(v148) = 0;
  if ((_DWORD)v151)
  {
    v148 = (uint64_t *)google::MakeCheckOpString<int,int>((int)&v151, (int)&v148, "model->GetOrCreate<Trail>()->CurrentDecisionLevel() == 0");
    if (v148)
    {
      v123 = google::LogMessageFatal::LogMessageFatal((unint64_t *)&v151, (google::glog_internal_namespace_ *)"./ortools/sat/precedences.cc", 726, &v148);
      google::LogMessage::stream((google::LogMessage *)v123);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v151);
    }
  }
  if (a3 < 2)
    return 0;
  v8 = 0;
  v151 = 0;
  v152 = 0;
  v132 = &a2[a3];
  v127 = a2;
  v153 = 0;
  do
  {
    v9 = *a2;
    v10 = a1[44];
    if ((int)v9 < (int)((unint64_t)(a1[45] - v10) >> 5))
    {
      v11 = (_QWORD *)(v10 + 32 * v9);
      v14 = *v11;
      v13 = (int *)(v11 + 1);
      v12 = v14;
      if ((v14 & 1) != 0)
        v13 = *(int **)v13;
      if (v12 >= 2)
      {
        v15 = 4 * (v12 >> 1);
        do
        {
          v16 = a1[23] + ((uint64_t)*v13 << 6);
          if ((*(_QWORD *)(v16 + 24) & 0xFFFFFFFFFFFFFFFELL) == 2 && *(_DWORD *)(v16 + 16) == -1)
          {
            if ((unint64_t)v8 >= v153)
            {
              v8 = (__n128 *)std::vector<operations_research::sat::PrecedencesPropagator::ArcInfo>::__push_back_slow_path<operations_research::sat::PrecedencesPropagator::ArcInfo const&>((void **)&v151, v16);
            }
            else
            {
              std::vector<operations_research::sat::PrecedencesPropagator::ArcInfo>::__construct_one_at_end[abi:ne180100]<operations_research::sat::PrecedencesPropagator::ArcInfo const&>((char *)&v151, (__int128 *)v16);
              v8 += 4;
            }
            v152 = v8;
          }
          ++v13;
          v15 -= 4;
        }
        while (v15);
      }
    }
    ++a2;
  }
  while (a2 != v132);
  v17 = v151;
  v18 = (char *)v8 - (char *)v151;
  if ((unint64_t)((char *)v8 - (char *)v151) < 0x80)
  {
    v7 = 0;
    if (v151)
      goto LABEL_180;
    return v7;
  }
  v19 = v18 >> 6;
  if (v18 < 1)
  {
    v22 = 0;
LABEL_27:
    v21 = 0;
  }
  else
  {
    v20 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
    v21 = v18 >> 6;
    while (1)
    {
      v22 = (__n128 *)operator new(v21 << 6, v20);
      if (v22)
        break;
      v23 = v21 > 1;
      v21 >>= 1;
      if (!v23)
        goto LABEL_27;
    }
  }
  std::__stable_sort<std::_ClassicAlgPolicy,operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraintsFromClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,operations_research::sat::Model *)::$_0 &,std::__wrap_iter<operations_research::sat::PrecedencesPropagator::ArcInfo *>>((uint64_t)v17, v8, v19, v22, v21);
  if (v22)
    operator delete(v22);
  v124 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(a4);
  v17 = v152;
  if (v152 == v151)
  {
    v7 = 0;
LABEL_179:
    if (v17)
      goto LABEL_180;
    return v7;
  }
  v25 = 0;
  v7 = 0;
  LODWORD(v26) = 0;
  v27 = ((char *)v152 - (char *)v151) >> 6;
  v17 = v151;
  v131 = a3;
LABEL_34:
  v136 = &v17[4 * v25];
  v28 = v26;
  if (v27 <= (int)v26 + 1)
    v27 = (int)v26 + 1;
  v29 = &v17[4 * (uint64_t)(int)v26 + 4].n128_u32[1];
  v26 = (int)v26;
  while (v27 - 1 != v26)
  {
    ++v26;
    v30 = *v29;
    v29 += 16;
    if (v30 != v136->n128_u32[1])
    {
      v31 = v26 - v28;
      if ((v26 - v28) >= 2)
        goto LABEL_42;
LABEL_33:
      v25 = (int)v26;
      v17 = v151;
      v27 = ((char *)v152 - (char *)v151) >> 6;
      if (v27 <= (int)v26)
        goto LABEL_179;
      goto LABEL_34;
    }
  }
  LODWORD(v26) = v27;
  v31 = v27 - v28;
  if ((v27 - v28) < 2)
    goto LABEL_33;
LABEL_42:
  if ((int)v31 + 1 < a3)
    goto LABEL_33;
  v126 = v136->n128_i32[1];
  v128 = v26;
  v129 = v7;
  v138 = 0;
  v139 = 0;
  v32 = 0;
  v33 = 0;
  v134 = v31;
  v135 = 0;
  v34 = 0;
  LODWORD(v35) = 0;
  v148 = 0;
  v149 = 0;
  v150 = 0;
  v145 = 0;
  v146 = 0;
  v147 = 0;
  __p = 0;
  v143 = 0;
  v144 = 0;
  v140 = 0;
  v141 = 0;
  v36 = v127;
  while (2)
  {
    v133 = v36;
    v137 = *v36;
    if (v31 <= v35)
      goto LABEL_134;
    v38 = 0;
    v35 = (int)v35;
    while (1)
    {
      v40 = (char *)&v136[4 * v35];
      if (*((_QWORD *)v40 + 3) <= 1uLL)
      v41 = v40 + 32;
      if ((*((_QWORD *)v40 + 3) & 1) != 0)
        v41 = (_QWORD *)*v41;
      if (v137 != *(_DWORD *)v41)
        break;
      if (v34 < v135)
      {
        *(_DWORD *)v34 = *(_DWORD *)v40;
        v34 += 4;
        goto LABEL_74;
      }
      v42 = (v34 - (char *)v33) >> 2;
      v43 = v42 + 1;
      if ((unint64_t)(v42 + 1) >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      if ((v135 - (char *)v33) >> 1 > v43)
        v43 = (v135 - (char *)v33) >> 1;
      if ((unint64_t)(v135 - (char *)v33) >= 0x7FFFFFFFFFFFFFFCLL)
        v44 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v44 = v43;
      if (v44)
      {
        if (v44 >> 62)
          goto LABEL_192;
        v45 = operator new(4 * v44);
        v46 = (uint64_t *)&v45[4 * v42];
        *(_DWORD *)v46 = *(_DWORD *)v40;
        v47 = (uint64_t)v46 + 4;
        if (v34 == (char *)v33)
          goto LABEL_71;
      }
      else
      {
        v45 = 0;
        v46 = (uint64_t *)(4 * v42);
        *(_DWORD *)(4 * v42) = *(_DWORD *)v40;
        v47 = 4 * v42 + 4;
        if (v34 == (char *)v33)
          goto LABEL_71;
      }
      v48 = v34 - 4 - (char *)v33;
      if (v48 >= 0xBC)
      {
        if (&v45[v34 - (char *)v33 - 4 - (v48 & 0xFFFFFFFFFFFFFFFCLL)] > &v45[v34 - (char *)v33 - 4])
        {
          v49 = v34;
        }
        else if (&v34[-(v48 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v34 - 4)
        {
          v49 = v34;
        }
        else if ((unint64_t)((char *)v33 - v45) >= 0x20)
        {
          v80 = (v48 >> 2) + 1;
          v81 = 4 * (v80 & 0x7FFFFFFFFFFFFFF8);
          v49 = &v34[-v81];
          v46 = (uint64_t *)((char *)v46 - v81);
          v82 = &v45[4 * v42 - 16];
          v83 = v34 - 16;
          v84 = v80 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v85 = *(_OWORD *)v83;
            *(v82 - 1) = *((_OWORD *)v83 - 1);
            *v82 = v85;
            v82 -= 2;
            v83 -= 32;
            v84 -= 8;
          }
          while (v84);
          if (v80 == (v80 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_71;
        }
        else
        {
          v49 = v34;
        }
      }
      else
      {
        v49 = v34;
      }
      do
      {
        v50 = *((_DWORD *)v49 - 1);
        v49 -= 4;
        *((_DWORD *)v46 - 1) = v50;
        v46 = (uint64_t *)((char *)v46 - 4);
      }
      while (v49 != (char *)v33);
LABEL_71:
      v148 = v46;
      v149 = (char *)v47;
      v135 = &v45[4 * v44];
      v150 = v135;
      if (v33)
      {
        operator delete(v33);
        v32 = v146;
        v138 = v147;
      }
      v33 = v46;
      v34 = (char *)v47;
LABEL_74:
      v149 = v34;
      v51 = &v136[4 * v35].n128_i8[8];
      if (v32 < v138)
      {
        *(_QWORD *)v32 = *(_QWORD *)v51;
        v32 += 8;
        v146 = v32;
        v53 = v143;
        v52 = v144;
        if (v143 >= v144)
          goto LABEL_94;
        goto LABEL_49;
      }
      v54 = v145;
      v55 = (v32 - v145) >> 3;
      v56 = v55 + 1;
      if ((unint64_t)(v55 + 1) >> 61)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      if ((v138 - v145) >> 2 > v56)
        v56 = (v138 - v145) >> 2;
      if ((unint64_t)(v138 - v145) >= 0x7FFFFFFFFFFFFFF8)
        v57 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v57 = v56;
      if (v57)
      {
        if (v57 >> 61)
          goto LABEL_192;
        v58 = operator new(8 * v57);
        v59 = &v58[8 * v55];
        *(_QWORD *)v59 = *(_QWORD *)v51;
        v60 = (uint64_t)(v59 + 8);
        if (v32 == v145)
          goto LABEL_91;
      }
      else
      {
        v58 = 0;
        v59 = (char *)(8 * v55);
        *(_QWORD *)(8 * v55) = *(_QWORD *)v51;
        v60 = 8 * v55 + 8;
        if (v32 == v145)
          goto LABEL_91;
      }
      v61 = v32 - 8 - v145;
      if (v61 < 0x168)
      {
        v62 = v32;
        goto LABEL_90;
      }
      if (&v58[v32 - v145 - 8 - (v61 & 0xFFFFFFFFFFFFFFF8)] > &v58[v32 - v145 - 8])
      {
        v62 = v32;
        do
        {
LABEL_90:
          v63 = *((_QWORD *)v62 - 1);
          v62 -= 8;
          *((_QWORD *)v59 - 1) = v63;
          v59 -= 8;
        }
        while (v62 != v145);
        goto LABEL_91;
      }
      if (&v32[-(v61 & 0xFFFFFFFFFFFFFFF8) - 8] > v32 - 8)
      {
        v62 = v32;
        goto LABEL_90;
      }
      if ((unint64_t)(v145 - v58) < 0x20)
      {
        v62 = v32;
        goto LABEL_90;
      }
      v86 = (v61 >> 3) + 1;
      v87 = 8 * (v86 & 0x3FFFFFFFFFFFFFFCLL);
      v62 = &v32[-v87];
      v59 -= v87;
      v88 = &v58[8 * v55 - 16];
      v89 = v32 - 16;
      v90 = v86 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v91 = *(_OWORD *)v89;
        *(v88 - 1) = *((_OWORD *)v89 - 1);
        *v88 = v91;
        v88 -= 2;
        v89 -= 32;
        v90 -= 4;
      }
      while (v90);
      if (v86 != (v86 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_90;
LABEL_91:
      v145 = v59;
      v138 = &v58[8 * v57];
      v147 = v138;
      if (v54)
        operator delete(v54);
      v32 = (char *)v60;
      v146 = (char *)v60;
      v53 = v143;
      v52 = v144;
      if (v143 >= v144)
      {
LABEL_94:
        v64 = __p;
        v65 = (v53 - __p) >> 2;
        v66 = v65 + 1;
        if ((unint64_t)(v65 + 1) >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v67 = v52 - __p;
        if (v67 >> 1 > v66)
          v66 = v67 >> 1;
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL)
          v68 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v68 = v66;
        if (v68)
        {
          if (v68 >> 62)
LABEL_192:
            std::__throw_bad_array_new_length[abi:ne180100]();
          v69 = operator new(4 * v68);
          v70 = &v69[4 * v65];
          *(_DWORD *)v70 = v137;
          v39 = (uint64_t)(v70 + 4);
          if (v53 == __p)
            goto LABEL_111;
LABEL_105:
          v71 = v53 - 4 - __p;
          if (v71 < 0x2C)
            goto LABEL_200;
          if ((unint64_t)(__p - v69) < 0x20)
            goto LABEL_200;
          v72 = (v71 >> 2) + 1;
          v73 = 4 * (v72 & 0x7FFFFFFFFFFFFFF8);
          v74 = &v53[-v73];
          v70 -= v73;
          v75 = &v69[4 * v65 - 16];
          v76 = v53 - 16;
          v77 = v72 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v78 = *(_OWORD *)v76;
            *(v75 - 1) = *((_OWORD *)v76 - 1);
            *v75 = v78;
            v75 -= 2;
            v76 -= 32;
            v77 -= 8;
          }
          while (v77);
          v53 = v74;
          if (v72 != (v72 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_200:
            do
            {
              v79 = *((_DWORD *)v53 - 1);
              v53 -= 4;
              *((_DWORD *)v70 - 1) = v79;
              v70 -= 4;
            }
            while (v53 != __p);
          }
        }
        else
        {
          v69 = 0;
          v70 = (char *)(4 * v65);
          *(_DWORD *)(4 * v65) = v137;
          v39 = 4 * v65 + 4;
          if (v53 != __p)
            goto LABEL_105;
        }
LABEL_111:
        __p = v70;
        v144 = &v69[4 * v68];
        if (v64)
          operator delete(v64);
        goto LABEL_50;
      }
LABEL_49:
      *(_DWORD *)v53 = v137;
      v39 = (uint64_t)(v53 + 4);
LABEL_50:
      v31 = v134;
      v143 = (char *)v39;
      ++v35;
      v38 = 1;
      if (v134 <= v35)
      {
        LODWORD(v35) = v134;
        goto LABEL_46;
      }
    }
    v31 = v134;
    if ((v38 & 1) != 0)
      goto LABEL_46;
LABEL_134:
    v92 = v137 ^ 1;
    v93 = v140;
    if (v140 < v141)
    {
      *(_DWORD *)v140 = v92;
      v37 = (uint64_t)(v140 + 4);
      goto LABEL_45;
    }
    v94 = v139;
    v95 = (v140 - (char *)v139) >> 2;
    v96 = v95 + 1;
    if ((unint64_t)(v95 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v97 = v141 - (char *)v139;
    if ((v141 - (char *)v139) >> 1 > v96)
      v96 = v97 >> 1;
    if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFFCLL)
      v98 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v98 = v96;
    if (!v98)
    {
      v100 = 0;
      v101 = (int *)(4 * v95);
      *(_DWORD *)(4 * v95) = v92;
      v37 = 4 * v95 + 4;
      if (v140 != (char *)v139)
        goto LABEL_144;
LABEL_148:
      v31 = v134;
      goto LABEL_154;
    }
    if (v98 >> 62)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v99 = v98;
    v100 = operator new(4 * v98);
    v98 = v99;
    v101 = (int *)&v100[4 * v95];
    *v101 = v92;
    v37 = (uint64_t)(v101 + 1);
    if (v140 == (char *)v139)
      goto LABEL_148;
LABEL_144:
    v102 = v140 - 4 - (char *)v139;
    if (v102 < 0x2C)
    {
      v31 = v134;
      goto LABEL_153;
    }
    v31 = v134;
    if ((unint64_t)((char *)v139 - v100) < 0x20)
      goto LABEL_201;
    v103 = (v102 >> 2) + 1;
    v104 = 4 * (v103 & 0x7FFFFFFFFFFFFFF8);
    v105 = &v140[-v104];
    v101 = (int *)((char *)v101 - v104);
    v106 = &v100[4 * v95 - 16];
    v107 = v140 - 16;
    v108 = v103 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v109 = *(_OWORD *)v107;
      *(v106 - 1) = *((_OWORD *)v107 - 1);
      *v106 = v109;
      v106 -= 2;
      v107 -= 32;
      v108 -= 8;
    }
    while (v108);
    v93 = v105;
    if (v103 != (v103 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_201:
      do
      {
LABEL_153:
        v110 = *((_DWORD *)v93 - 1);
        v93 -= 4;
        *--v101 = v110;
      }
      while (v93 != (char *)v139);
    }
LABEL_154:
    v139 = v101;
    v141 = &v100[4 * v98];
    if (v94)
    {
      v111 = v37;
      operator delete(v94);
      v37 = v111;
    }
LABEL_45:
    v140 = (char *)v37;
LABEL_46:
    v36 = v133 + 1;
    if (v133 + 1 != v132)
      continue;
    break;
  }
  v112 = (v140 - (char *)v139) >> 2;
  if (v112 + 1 == v131)
  {
    v113 = 9;
    v7 = v129;
    a3 = v131;
    if (v139)
      goto LABEL_158;
    goto LABEL_159;
  }
  v114 = v148;
  v155 = 0;
  v115 = operator new(0x50uLL);
  *(_QWORD *)v115 = &off_24F987858;
  v115[2] = v126;
  *((_QWORD *)v115 + 2) = v114;
  *((_QWORD *)v115 + 3) = (v34 - (char *)v114) >> 2;
  *((_QWORD *)v115 + 4) = v145;
  *((_QWORD *)v115 + 5) = (v32 - v145) >> 3;
  *((_QWORD *)v115 + 6) = __p;
  *((_QWORD *)v115 + 7) = (v143 - __p) >> 2;
  *((_QWORD *)v115 + 8) = v139;
  *((_QWORD *)v115 + 9) = v112;
  v155 = v115;
  operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()((uint64_t)(v115 + 2), a4);
  v116 = v155;
  if (v155 == v154)
  {
    v116 = v154;
    v117 = 4;
LABEL_172:
    (*(void (**)(void))(*v116 + 8 * v117))();
  }
  else if (v155)
  {
    v117 = 5;
    goto LABEL_172;
  }
  v118 = operations_research::sat::SatSolver::FinishPropagation(v124);
  v7 = v129 + 1;
  v113 = v118 ^ 1;
  v119 = v125;
  if (!v118)
    v119 = v129 + 1;
  v125 = v119;
  a3 = v131;
  if (v139)
LABEL_158:
    operator delete(v139);
LABEL_159:
  if (__p)
    operator delete(__p);
  if (v145)
    operator delete(v145);
  if (v148)
    operator delete(v148);
  if (!v113 || v113 == 9)
  {
    LODWORD(v26) = v128;
    goto LABEL_33;
  }
  v17 = v151;
  v7 = v125;
  if (!v151)
    return v7;
LABEL_180:
  v120 = (void **)v152;
  v121 = v17;
  if (v152 != v17)
  {
    do
    {
      if ((*(_BYTE *)(v120 - 5) & 1) != 0)
        operator delete(*(v120 - 4));
      v120 -= 8;
    }
    while (v120 != (void **)v17);
    v121 = v151;
  }
  v152 = v17;
  operator delete(v121);
  return v7;
}

